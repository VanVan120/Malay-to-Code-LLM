{"text": "Program C untuk mencari jarak antara dua pesawat selari dalam 3 d.", "code": "#include <stdio.h> NEW_LINE #include <math.h>"}
{"text": "Berfungsi untuk mencari jarak", "code": "void distance ( float a1 , float b1 , float c1 , float d1 , float a2 , float b2 , float c2 , float d2 ) { float x1 , y1 , z1 , d ; if ( a1 / a2 == b1 / b2 && b1 / b2 == c1 / c2 ) { x1 = y1 = 0 ; z1 = - d1 / c1 ; d = fabs ( ( c2 * z1 + d2 ) ) / ( sqrt ( a2 * a2 + b2 * b2 + c2 * c2 ) ) ; printf ( \" Perpendicular ▁ distance ▁ is ▁ % f STRNEWLINE \" , d ) ; } else printf ( \" Planes ▁ are ▁ not ▁ parallel \" ) ; return ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { float a1 = 1 ; float b1 = 2 ; float c1 = -1 ; float d1 = 1 ; float a2 = 3 ; float b2 = 6 ; float c2 = -3 ; float d2 = -4 ; distance ( a1 , b1 , c1 , d1 , a2 , b2 , c2 , d2 ) ; return 0 ; }"}
{"text": "Program c untuk mengira siri berikut", "code": "#include <stdio.h>"}
{"text": "Berfungsi untuk mengira siri berikut", "code": "int Series ( int n ) { int i ; int sums = 0 ; for ( i = 1 ; i <= n ; i ++ ) sums += ( i * i ) ; return sums ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { int n = 3 ; int res = Series ( n ) ; printf ( \" % d \" , res ) ; }"}
{"text": "Pelaksanaan C ++ Berdasarkan Menyusun sama ada array mengandungi satu set bilangan bulat bersebelahan", "code": "#include <bits/stdc++.h> NEW_LINE using namespace std ;"}
{"text": "berfungsi untuk memeriksa sama ada array mengandungi satu set bilangan bulat bersebelahan", "code": "bool areElementsContiguous ( int arr [ ] , int n ) {"}
{"text": "Susun array", "code": "sort ( arr , arr + n ) ;"}
{"text": "Selepas menyusun, periksa sama ada elemen semasa sama seperti sebelumnya atau satu lagi.", "code": "for ( int i = 1 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] > 1 ) return false ; return true ; }"}
{"text": "Program Pemandu untuk diuji di atas", "code": "int main ( ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; if ( areElementsContiguous ( arr , n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text": "Program c untuk memutar array oleh elemen d", "code": "#include <stdio.h>"}
{"text": "Berfungsi ke kiri berputar arr [] saiz n dengan 1", "code": "void leftRotatebyOne ( int arr [ ] , int n ) ; void leftRotatebyOne ( int arr [ ] , int n ) { int temp = arr [ 0 ] , i ; for ( i = 0 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = temp ; }"}
{"text": "Berfungsi ke kiri berputar arr [] saiz n oleh d", "code": "void leftRotate ( int arr [ ] , int d , int n ) { int i ; for ( i = 0 ; i < d ; i ++ ) leftRotatebyOne ( arr , n ) ; }"}
{"text": "fungsi utiliti untuk mencetak pelbagai", "code": "void printArray ( int arr [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) printf ( \" % d ▁ \" , arr [ i ] ) ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; leftRotate ( arr , 2 , 7 ) ; printArray ( arr , 7 ) ; return 0 ; }"}
{"text": "Program C untuk mencari unsur -unsur terkecil yang hilang dalam array yang disusun.", "code": "#include <stdio.h>"}
{"text": "Fungsi yang mengembalikan unsur -unsur terkecil yang hilang dalam array yang disusun.", "code": "int findFirstMissing ( int array [ ] , int start , int end ) { if ( start > end ) return end + 1 ; if ( start != array [ start ] ) return start ; int mid = ( start + end ) / 2 ;"}
{"text": "Separuh kiri mempunyai semua elemen dari 0 hingga pertengahan", "code": "if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ; return findFirstMissing ( array , start , mid ) ; }"}
{"text": "program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int arr [ ] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( \" Smallest ▁ missing ▁ element ▁ is ▁ % d \" , findFirstMissing ( arr , 0 , n - 1 ) ) ; return 0 ; }"}
{"text": "Berfungsi untuk mengembalikan jumlah maksimum sehingga tidak ada dua elemen bersebelahan", "code": "int FindMaxSum ( int arr [ ] , int n ) { int incl = arr [ 0 ] ; int excl = 0 ; int excl_new ; int i ; for ( i = 1 ; i < n ; i ++ ) {"}
{"text": "max semasa tidak termasuk i", "code": "excl_new = ( incl > excl ) ? incl : excl ;"}
{"text": "Max semasa termasuk i", "code": "incl = excl + arr [ i ] ; excl = excl_new ; }"}
{"text": "Kembali maksimum incl dan excect", "code": "return ( ( incl > excl ) ? incl : excl ) ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int arr [ ] = { 5 , 5 , 10 , 100 , 10 , 5 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( \" % d ▁ n \" , FindMaxSum ( arr , n ) ) ; return 0 ; }"}
{"text": "Program C untuk memeriksa elemen majoriti dalam pelbagai disusun", "code": "# include <stdio.h> NEW_LINE # include <stdbool.h> NEW_LINE bool isMajority ( int arr [ ] , int n , int x ) { int i ;"}
{"text": "Dapatkan indeks terakhir mengikut N (walaupun atau ganjil)", "code": "int last_index = n % 2 ? ( n / 2 + 1 ) : ( n / 2 ) ;"}
{"text": "Cari kejadian pertama x di arr []", "code": "for ( i = 0 ; i < last_index ; i ++ ) {"}
{"text": "Periksa sama ada X hadir dan hadir lebih daripada n / 2 kali", "code": "if ( arr [ i ] == x && arr [ i + n / 2 ] == x ) return 1 ; } return 0 ; }"}
{"text": "Program pemacu untuk menyemak fungsi di atas", "code": "int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 4 , 4 , 4 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 4 ; if ( isMajority ( arr , n , x ) ) printf ( \" % d ▁ appears ▁ more ▁ than ▁ % d ▁ times ▁ in ▁ arr [ ] \" , x , n / 2 ) ; else printf ( \" % d ▁ does ▁ not ▁ appear ▁ more ▁ than ▁ % d ▁ times ▁ in ▁ arr [ ] \" , x , n / 2 ) ; return 0 ; }"}
{"text": "Program C untuk memeriksa elemen majoriti dalam pelbagai disusun", "code": "# include <stdio.h> NEW_LINE # include <stdbool.h>"}
{"text": "Sekiranya x hadir di arr [rendah ... tinggi] maka mengembalikan indeks kejadian pertama x, jika tidak pulangan - 1", "code": "int _binarySearch ( int arr [ ] , int low , int high , int x ) { if ( high >= low ) { int mid = ( low + high ) / 2 ;"}
{"text": "Semak jika ARR [MID] adalah kejadian pertama x. ARR [pertengahan] adalah kejadian pertama jika x adalah salah satu daripada yang berikut adalah benar: (i) pertengahan == 0 dan arr [pertengahan] = = x (ii) arr [pertengahan - 1] <x dan arr [pertengahan] == x", "code": "if ( ( mid == 0 x > arr [ mid - 1 ] ) && ( arr [ mid ] == x ) ) return mid ; else if ( x > arr [ mid ] ) return _binarySearch ( arr , ( mid + 1 ) , high , x ) ; else return _binarySearch ( arr , low , ( mid - 1 ) , x ) ; } return -1 ; }"}
{"text": "Fungsi ini kembali benar jika x hadir lebih daripada n / 2 kali dalam saiz n arr []", "code": "bool isMajority ( int arr [ ] , int n , int x ) {"}
{"text": "Cari indeks kejadian pertama x di arr []", "code": "int i = _binarySearch ( arr , 0 , n - 1 , x ) ;"}
{"text": "Sekiranya elemen tidak hadir sama sekali, kembali palsu", "code": "if ( i == -1 ) return false ;"}
{"text": "periksa sama ada elemen hadir lebih daripada n / 2 kali", "code": "if ( ( ( i + n / 2 ) <= ( n - 1 ) ) && arr [ i + n / 2 ] == x ) return true ; else return false ; }"}
{"text": "Program pemacu untuk menyemak fungsi di atas", "code": "int main ( ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 10 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int x = 3 ; if ( isMajority ( arr , n , x ) ) printf ( \" % d ▁ appears ▁ more ▁ than ▁ % d ▁ times ▁ in ▁ arr [ ] \" , x , n / 2 ) ; else printf ( \" % d ▁ does ▁ not ▁ appear ▁ more ▁ than ▁ % d ▁ times ▁ in ▁ arr [ ] \" , x , n / 2 ) ; return 0 ; }"}
{"text": "Penyelesaian pengaturcaraan dinamik untuk masalah pemotongan rod", "code": "#include <stdio.h> NEW_LINE #include <limits.h>"}
{"text": "Fungsi utiliti untuk mendapatkan maksimum dua bilangan bulat", "code": "int max ( int a , int b ) { return ( a > b ) ? a : b ; }"}
{"text": "Mengembalikan harga terbaik yang boleh diperolehi untuk batang panjang n dan harga [] sebagai harga kepingan yang berbeza", "code": "int cutRod ( int price [ ] , int n ) { int val [ n + 1 ] ; val [ 0 ] = 0 ; int i , j ;"}
{"text": "Bina meja val [] dengan cara bawah dan kembalikan entri terakhir dari jadual", "code": "for ( i = 1 ; i <= n ; i ++ ) { int max_val = INT_MIN ; for ( j = 0 ; j < i ; j ++ ) max_val = max ( max_val , price [ j ] + val [ i - j - 1 ] ) ; val [ i ] = max_val ; } return val [ n ] ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int arr [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( \" Maximum ▁ Obtainable ▁ Value ▁ is ▁ % d \" , cutRod ( arr , size ) ) ; getchar ( ) ; return 0 ; }"}
{"text": "Program c untuk pendekatan di atas", "code": "#include <stdio.h> NEW_LINE #include <stdlib.h> NEW_LINE int max ( int a , int b ) { return ( a > b ) ? a : b ; }"}
{"text": "Arahan global untuk tujuan memoisasi.", "code": "int t [ 9 ] [ 9 ] ;"}
{"text": "Program rekursif, menggunakan, memoisasi, untuk melaksanakan masalah pemotongan rod (atas - ke bawah).", "code": "int un_kp ( int price [ ] , int length [ ] , int Max_len , int n ) {"}
{"text": "Harga maksimum akan menjadi sifar, apabila panjang rod adalah sifar atau harga adalah sifar.", "code": "if ( n == 0 Max_len == 0 ) { return 0 ; }"}
{"text": "Jika panjang rod kurang daripada panjang maksimum, max_lene akan menganggapnya. Sekarang bergantung kepada keuntungan, sama ada max_lene kita akan mengambilnya atau membuangnya.", "code": "if ( length [ n - 1 ] <= Max_len ) { t [ n ] [ Max_len ] = max ( price [ n - 1 ] + un_kp ( price , length , Max_len - length [ n - 1 ] , n ) , un_kp ( price , length , Max_len , n - 1 ) ) ; }"}
{"text": "Jika panjang rod lebih besar daripada saiz yang dibenarkan, max_len kita tidak akan menganggapnya.", "code": "else { t [ n ] [ Max_len ] = un_kp ( price , length , Max_len , n - 1 ) ; }"}
{"text": "Max_lene max_lenill Kembalikan nilai maksimum yang diperoleh, max_lenhich hadir di lajur nth romax_len dan max_lenth.", "code": "return t [ n ] [ Max_len ] ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int price [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int n = sizeof ( price ) / sizeof ( price [ 0 ] ) ; int length [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { length [ i ] = i + 1 ; } int Max_len = n ;"}
{"text": "Panggilan fungsi", "code": "printf ( \" Maximum ▁ obtained ▁ value ▁ is ▁ % d ▁ STRNEWLINE \" , un_kp ( price , length , n , Max_len ) ) ; }"}
{"text": "C kod untuk menukar radian ke ijazah", "code": "#include <stdio.h>"}
{"text": "Fungsi untuk penukaran", "code": "double Convert ( double radian ) { double pi = 3.14159 ; return ( radian * ( 180 / pi ) ) ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { double radian = 5.0 ; double degree = Convert ( radian ) ; printf ( \" % .5lf \" , degree ) ; return 0 ; }"}
{"text": "Program c untuk menolak dua nombor tanpa menggunakan pengendali aritmetik", "code": "#include <stdio.h> NEW_LINE int subtract ( int x , int y ) {"}
{"text": "Berulang sehingga tidak ada bawa", "code": "while ( y != 0 ) {"}
{"text": "Pinjam mengandungi bit set biasa Y dan bit yang tidak tersendiri x", "code": "int borrow = ( ~ x ) & y ;"}
{"text": "Penolakan bit x dan y di mana sekurang -kurangnya salah satu bit tidak ditetapkan", "code": "x = x ^ y ;"}
{"text": "Pinjaman dipindahkan oleh satu supaya menolaknya dari x memberikan jumlah yang diperlukan", "code": "y = borrow << 1 ; } return x ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { int x = 29 , y = 13 ; printf ( \" x ▁ - ▁ y ▁ is ▁ % d \" , subtract ( x , y ) ) ; return 0 ; }"}
{"text": "Program Pemandu", "code": "int main ( ) { int x = 29 , y = 13 ; printf ( \" x ▁ - ▁ y ▁ is ▁ % d \" , subtract ( x , y ) ) ; return 0 ; }"}
{"text": "Program c untuk membalikkan rentetan menggunakan rekursi", "code": "# include <stdio.h>"}
{"text": "Berfungsi untuk mencetak terbalik rentetan lulus", "code": "void reverse ( char * str ) { if ( * str ) { reverse ( str + 1 ) ; printf ( \" % c \" , * str ) ; } }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { char a [ ] = \" Geeks ▁ for ▁ Geeks \" ; reverse ( a ) ; return 0 ; }"}
{"text": "C Kod untuk mencari produk kronecker dua matriks dan menyimpannya sebagai matriks c", "code": "#include <stdio.h>"}
{"text": "Rowa dan Cola tidak ada baris dan lajur matriks A rowb dan colb tidak ada baris dan lajur matriks b", "code": "const int cola = 2 , rowa = 3 , colb = 3 , rowb = 2 ;"}
{"text": "Berfungsi untuk mengira produk kronecker dua matriks", "code": "void Kroneckerproduct ( int A [ ] [ cola ] , int B [ ] [ colb ] ) { int C [ rowa * rowb ] [ cola * colb ] ;"}
{"text": "saya gelung sampai rowa", "code": "for ( int i = 0 ; i < rowa ; i ++ ) {"}
{"text": "k gelung hingga rowb", "code": "for ( int k = 0 ; k < rowb ; k ++ ) {"}
{"text": "J Loops hingga Cola", "code": "for ( int j = 0 ; j < cola ; j ++ ) {"}
{"text": "L Loops hingga Colb", "code": "for ( int l = 0 ; l < colb ; l ++ ) {"}
{"text": "Setiap elemen matriks A didarab dengan keseluruhan matriks B resp dan disimpan sebagai matriks c", "code": "C [ i + l + 1 ] [ j + k + 1 ] = A [ i ] [ j ] * B [ k ] [ l ] ; printf ( \" % d TABSYMBOL \" , C [ i + l + 1 ] [ j + k + 1 ] ) ; } } printf ( \" STRNEWLINE \" ) ; } } }"}
{"text": "Kod pemacu", "code": "int main ( ) { int A [ 3 ] [ 2 ] = { { 1 , 2 } , { 3 , 4 } , { 1 , 0 } } , B [ 2 ] [ 3 ] = { { 0 , 5 , 2 } , { 6 , 7 , 3 } } ; Kroneckerproduct ( A , B ) ; return 0 ; }"}
{"text": "Program C untuk pelaksanaan pilihan pemilihan", "code": "#include <stdio.h>"}
{"text": "fungsi swap", "code": "void swap ( int * xp , int * yp ) { int temp = * xp ; * xp = * yp ; * yp = temp ; }"}
{"text": "Susun fungsi", "code": "void selectionSort ( int arr [ ] , int n ) { int i , j , min_idx ;"}
{"text": "Satu demi satu langkah sempadan subarray yang tidak disusun", "code": "for ( i = 0 ; i < n - 1 ; i ++ ) {"}
{"text": "Cari elemen minimum dalam array yang tidak disusun", "code": "min_idx = i ; for ( j = i + 1 ; j < n ; j ++ ) if ( arr [ j ] < arr [ min_idx ] ) min_idx = j ;"}
{"text": "Tukar elemen minimum yang dijumpai dengan elemen pertama", "code": "swap ( & arr [ min_idx ] , & arr [ i ] ) ; } }"}
{"text": "Berfungsi untuk mencetak array", "code": "void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) printf ( \" % d ▁ \" , arr [ i ] ) ; printf ( \" STRNEWLINE \" ) ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int arr [ ] = { 64 , 25 , 12 , 22 , 11 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; selectionSort ( arr , n ) ; printf ( \" Sorted ▁ array : ▁ STRNEWLINE \" ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text": "Lihat buku Cormen untuk butiran algoritma berikut", "code": "#include <limits.h> NEW_LINE #include <stdio.h>"}
{"text": "Matrix AI mempunyai dimensi p [i - 1] x p [i] untuk i = 1. n", "code": "int MatrixChainOrder ( int p [ ] , int n ) {"}
{"text": "Untuk kesederhanaan program, satu baris tambahan dan satu lajur tambahan diperuntukkan dalam M [] []. Baris ke -0 dan lajur 0 m [] [] tidak digunakan", "code": "int m [ n ] [ n ] ; int i , j , k , L , q ;"}
{"text": "Kos adalah sifar apabila mendarabkan satu matriks.", "code": "for ( i = 1 ; i < n ; i ++ ) m [ i ] [ i ] = 0 ;"}
{"text": "L adalah panjang rantai.", "code": "for ( L = 2 ; L < n ; L ++ ) { for ( i = 1 ; i < n - L + 1 ; i ++ ) { j = i + L - 1 ; m [ i ] [ j ] = INT_MAX ; for ( k = i ; k <= j - 1 ; k ++ ) {"}
{"text": "Q = Kos / pendaraban skalar", "code": "q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ] ; if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q ; } } } return m [ 1 ] [ n - 1 ] ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( \" Minimum ▁ number ▁ of ▁ multiplications ▁ is ▁ % d ▁ \" , MatrixChainOrder ( arr , size ) ) ; getchar ( ) ; return 0 ; }"}
{"text": "Program c untuk pendekatan di atas", "code": "#include <stdio.h> NEW_LINE #include <stdlib.h> NEW_LINE int max ( int a , int b ) { return ( a > b ) ? a : b ; }"}
{"text": "Arahan global untuk tujuan memoisasi.", "code": "int t [ 9 ] [ 9 ] ;"}
{"text": "Program rekursif, menggunakan, memoisasi, untuk melaksanakan masalah pemotongan rod (atas - ke bawah).", "code": "int un_kp ( int price [ ] , int length [ ] , int Max_len , int n ) {"}
{"text": "Harga maksimum akan menjadi sifar, apabila panjang rod adalah sifar atau harga adalah sifar.", "code": "if ( n == 0 Max_len == 0 ) { return 0 ; }"}
{"text": "Jika panjang rod kurang daripada panjang maksimum, max_lene akan menganggapnya. Sekarang bergantung kepada keuntungan, sama ada max_lene kita akan mengambilnya atau membuangnya.", "code": "if ( length [ n - 1 ] <= Max_len ) { t [ n ] [ Max_len ] = max ( price [ n - 1 ] + un_kp ( price , length , Max_len - length [ n - 1 ] , n ) , un_kp ( price , length , Max_len , n - 1 ) ) ; }"}
{"text": "Jika panjang rod lebih besar daripada saiz yang dibenarkan, max_len kita tidak akan menganggapnya.", "code": "else { t [ n ] [ Max_len ] = un_kp ( price , length , Max_len , n - 1 ) ; }"}
{"text": "Max_lene max_lenill Kembalikan nilai maksimum yang diperoleh, max_lenhich hadir di lajur nth romax_len dan max_lenth.", "code": "return t [ n ] [ Max_len ] ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int price [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int n = sizeof ( price ) / sizeof ( price [ 0 ] ) ; int length [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { length [ i ] = i + 1 ; } int Max_len = n ;"}
{"text": "Panggilan fungsi", "code": "printf ( \" Maximum ▁ obtained ▁ value ▁ is ▁ % d ▁ STRNEWLINE \" , un_kp ( price , length , n , Max_len ) ) ; }"}
{"text": "berfungsi untuk membiak dua nombor x dan y", "code": "int multiply ( int x , int y ) {"}
{"text": "0 didarab dengan apa sahaja memberikan 0", "code": "if ( y == 0 ) return 0 ;"}
{"text": "Tambahkan x satu demi satu", "code": "if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;"}
{"text": "kes di mana y negatif", "code": "if ( y < 0 ) return - multiply ( x , - y ) ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { printf ( \" % d \" , multiply ( 5 , -11 ) ) ; getchar ( ) ; return 0 ; }"}
{"text": "A O (N ^ 2) Masa dan O (N ^ 2) Kaedah Ruang Tambahan untuk Segitiga Pascal", "code": "void printPascal ( int n ) {"}
{"text": "Arahan tambahan untuk menyimpan nilai segi tiga PSCAL yang dihasilkan", "code": "int arr [ n ] [ n ] ;"}
{"text": "Berulang melalui setiap baris dan cetak integer (s) di dalamnya", "code": "for ( int line = 0 ; line < n ; line ++ ) {"}
{"text": "Setiap baris mempunyai bilangan bilangan bulat yang sama dengan nombor baris", "code": "for ( int i = 0 ; i <= line ; i ++ ) {"}
{"text": "Nilai pertama dan terakhir dalam setiap baris adalah 1", "code": "if ( line == i i == 0 ) arr [ line ] [ i ] = 1 ;"}
{"text": "Nilai lain adalah jumlah nilai di atas dan kiri di atas", "code": "else arr [ line ] [ i ] = arr [ line - 1 ] [ i - 1 ] + arr [ line - 1 ] [ i ] ; printf ( \" % d ▁ \" , arr [ line ] [ i ] ) ; } printf ( \" STRNEWLINE \" ) ; } }"}
{"text": "Kod pemacu", "code": "int main ( ) { int n = 5 ; printPascal ( n ) ; return 0 ; }"}
{"text": "Program C untuk Pascals Triangle A O (N ^ 2) Masa dan O (1) Fungsi Ruang Tambahan untuk Segitiga Pascal", "code": "void printPascal ( int n ) { for ( int line = 1 ; line <= n ; line ++ ) {"}
{"text": "Digunakan untuk mewakili c (garis, i)", "code": "int C = 1 ; for ( int i = 1 ; i <= line ; i ++ ) {"}
{"text": "Nilai pertama dalam baris selalu 1", "code": "printf ( \" % d ▁ \" , C ) ; C = C * ( line - i ) / i ; } printf ( \" STRNEWLINE \" ) ; } }"}
{"text": "Kod pemacu", "code": "int main ( ) { int n = 5 ; printPascal ( n ) ; return 0 ; }"}
{"text": "Program C untuk menambah dua nombor tanpa menggunakan pengendali aritmetik", "code": "#include <stdio.h> NEW_LINE int Add ( int x , int y ) {"}
{"text": "Berulang sehingga tidak ada bawa", "code": "while ( y != 0 ) {"}
{"text": "Bawa sekarang mengandungi bit set biasa x dan y", "code": "int carry = x & y ;"}
{"text": "Jumlah bit x dan y di mana sekurang -kurangnya satu bit tidak ditetapkan", "code": "x = x ^ y ;"}
{"text": "Dibawa dipindahkan oleh satu supaya menambahkannya ke x memberikan jumlah yang diperlukan", "code": "y = carry << 1 ; } return x ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { printf ( \" % d \" , Add ( 15 , 32 ) ) ; return 0 ; }"}
{"text": "Program C untuk mengira set bit dalam integer", "code": "#include <stdio.h>"}
{"text": "Berfungsi untuk mendapatkan bit yang ditetapkan dalam perwakilan binari integer positif n", "code": "unsigned int countSetBits ( unsigned int n ) { unsigned int count = 0 ; while ( n ) { count += n & 1 ; n >>= 1 ; } return count ; }"}
{"text": "Program untuk menguji fungsi countsetbits", "code": "int main ( ) { int i = 9 ; printf ( \" % d \" , countSetBits ( i ) ) ; return 0 ; }"}
{"text": "Program C untuk mengira set bit dengan pra -menyimpan bit set bit dalam gumpalan.", "code": "#include <stdio.h> NEW_LINE int num_to_bits [ 16 ] = { 0 , 1 , 1 , 2 , 1 , 2 , 2 , 3 , 1 , 2 , 2 , 3 , 2 , 3 , 3 , 4 } ;"}
{"text": "Berulang -ulang mendapatkan nombor yang diberikan dan memetakannya dalam array", "code": "unsigned int countSetBitsRec ( unsigned int num ) { int nibble = 0 ; if ( 0 == num ) return num_to_bits [ 0 ] ;"}
{"text": "Cari nibble terakhir", "code": "nibble = num & 0xf ;"}
{"text": "Gunakan nilai pra -disimpan untuk mencari kiraan dalam nibble terakhir ditambah dengan rekursif menambah baki yang tersisa.", "code": "return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4 ) ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { int num = 31 ; printf ( \" % d STRNEWLINE \" , countSetBitsRec ( num ) ) ; }"}
{"text": "Semak setiap bit dalam nombor ditetapkan atau tidak dan kembalikan jumlah kiraan bit yang ditetapkan.", "code": "int countSetBits ( int N ) { int count = 0 ;"}
{"text": "(1 << i) = pow (2, i)", "code": "for ( int i = 0 ; i < sizeof ( int ) * 8 ; i ++ ) { if ( N & ( 1 << i ) ) count ++ ; } return count ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { int N = 15 ; printf ( \" % d \" , countSetBits ( N ) ) ; return 0 ; }"}
{"text": "Program c untuk mencari pariti integer", "code": "# include <stdio.h> NEW_LINE # define bool  int"}
{"text": "Berfungsi untuk mendapatkan pariti nombor n. Ia mengembalikan 1 jika n mempunyai pariti ganjil, dan pulangan 0 jika n mempunyai pariti bahkan", "code": "bool getParity ( unsigned int n ) { bool parity = 0 ; while ( n ) { parity = ! parity ; n = n & ( n - 1 ) ; } return parity ; }"}
{"text": "Program Pemandu untuk Menguji GetParity ()", "code": "int main ( ) { unsigned int n = 7 ; printf ( \" Parity ▁ of ▁ no ▁ % d ▁ = ▁ % s \" , n , ( getParity ( n ) ? \" odd \" : \" even \" ) ) ; getchar ( ) ; return 0 ; }"}
{"text": "Program c untuk mencari sama ada kuasa tidak ada dua", "code": "#include <stdio.h> NEW_LINE #include <stdbool.h> NEW_LINE #include <math.h>"}
{"text": "Berfungsi untuk memeriksa sama ada x adalah kuasa 2", "code": "bool isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; return ( ceil ( log2 ( n ) ) == floor ( log2 ( n ) ) ) ; }"}
{"text": "Program Pemandu", "code": "int main ( ) { isPowerOfTwo ( 31 ) ? printf ( \" Yes STRNEWLINE \" ) : printf ( \" No STRNEWLINE \" ) ; isPowerOfTwo ( 64 ) ? printf ( \" Yes STRNEWLINE \" ) : printf ( \" No STRNEWLINE \" ) ; return 0 ; }"}
{"text": "Berfungsi untuk memeriksa sama ada x adalah kuasa 2", "code": "bool isPowerOfTwo ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 2 != 0 ) return 0 ; n = n / 2 ; } return 1 ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { isPowerOfTwo ( 31 ) ? printf ( \" Yes STRNEWLINE \" ) : printf ( \" No STRNEWLINE \" ) ; isPowerOfTwo ( 64 ) ? printf ( \" Yes STRNEWLINE \" ) : printf ( \" No STRNEWLINE \" ) ; return 0 ; }"}
{"text": "Berfungsi untuk memeriksa sama ada x adalah kuasa 2", "code": "bool isPowerOfTwo ( int x ) {"}
{"text": "X pertama dalam ungkapan di bawah adalah untuk kes apabila x adalah 0", "code": "return x && ( ! ( x & ( x - 1 ) ) ) ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { isPowerOfTwo ( 31 ) ? printf ( \" Yes STRNEWLINE \" ) : printf ( \" No STRNEWLINE \" ) ; isPowerOfTwo ( 64 ) ? printf ( \" Yes STRNEWLINE \" ) : printf ( \" No STRNEWLINE \" ) ; return 0 ; }"}
{"text": "Program untuk mencari dua elemen yang ganjil", "code": "#include <stdio.h>"}
{"text": "Mencetak dua nombor yang berlaku bilangan kali ganjil. Fungsi ini mengandaikan bahawa saiz array sekurang -kurangnya 2 dan terdapat dua nombor yang berlaku pada masa yang ganjil.", "code": "void printTwoOdd ( int arr [ ] , int size ) { int xor2 = arr [ 0 ] ;"}
{"text": "Akan memegang xor dua elemen yang ganjil", "code": "int set_bit_no ;"}
{"text": "Hanya akan mempunyai bit satu set XOR2", "code": "int i ; int n = size - 2 ; int x = 0 , y = 0 ;"}
{"text": "Dapatkan XOR semua elemen di arr []. XOR pada dasarnya akan menjadi XOR dari dua elemen yang ganjil", "code": "for ( i = 1 ; i < size ; i ++ ) xor2 = xor2 ^ arr [ i ] ;"}
{"text": "Dapatkan satu set bit di XOR2. Kami mendapat sedikit set yang paling tepat dalam baris berikut kerana mudah diperoleh", "code": "set_bit_no = xor2 & ~ ( xor2 - 1 ) ;"}
{"text": "Sekarang bahagikan unsur -unsur dalam dua set: 1) unsur -unsur yang mempunyai bit yang sepadan sebagai 1.2) unsur -unsur yang mempunyai bit yang sepadan sebagai 0.", "code": "for ( i = 0 ; i < size ; i ++ ) {"}
{"text": "Xor set pertama akhirnya akan memegang satu nombor yang ganjil x", "code": "if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ;"}
{"text": "Xor set kedua akhirnya akan memegang nombor yang lain yang lain y", "code": "else y = y ^ arr [ i ] ; } printf ( \" The two ODD elements are % d & % d \" }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 } ; int arr_size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printTwoOdd ( arr , arr_size ) ; getchar ( ) ; return 0 ; }"}
{"text": "Program c untuk mencari pasangan dengan perbezaan yang diberikan", "code": "#include <stdio.h>"}
{"text": "Fungsi mengandaikan bahawa array disusun", "code": "bool findPair ( int arr [ ] , int size , int n ) {"}
{"text": "Memulakan kedudukan dua elemen", "code": "int i = 0 ; int j = 1 ;"}
{"text": "Cari pasangan", "code": "while ( i < size && j < size ) { if ( i != j && arr [ j ] - arr [ i ] == n ) { printf ( \" Pair ▁ Found : ▁ ( % d , ▁ % d ) \" , arr [ i ] , arr [ j ] ) ; return true ; } else if ( arr [ j ] - arr [ i ] < n ) j ++ ; else i ++ ; } printf ( \" No ▁ such ▁ pair \" ) ; return false ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int arr [ ] = { 1 , 8 , 30 , 40 , 100 } ; int size = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; int n = 60 ; findPair ( arr , size , n ) ; return 0 ; }"}
{"text": "Pelaksanaan rekursif naif yang hanya mengikuti harta substruktur yang optimum di atas", "code": "#include <limits.h> NEW_LINE #include <stdio.h>"}
{"text": "Matrix AI mempunyai dimensi p [i - 1] x p [i] untuk i = 1. n", "code": "int MatrixChainOrder ( int p [ ] , int i , int j ) { if ( i == j ) return 0 ; int k ; int min = INT_MAX ; int count ;"}
{"text": "Letakkan kurungan di tempat yang berbeza antara matriks pertama dan terakhir, mengira kiraan pendaraban untuk setiap penempatan kurungan dan mengembalikan kiraan minimum", "code": "for ( k = i ; k < j ; k ++ ) { count = MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ; if ( count < min ) min = count ; }"}
{"text": "Kembalikan kiraan minimum", "code": "return min ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 3 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( \" Minimum ▁ number ▁ of ▁ multiplications ▁ is ▁ % d ▁ \" , MatrixChainOrder ( arr , 1 , n - 1 ) ) ; getchar ( ) ; return 0 ; }"}
{"text": "Program c untuk mencari perimeter poligon biasa", "code": "#include <stdio.h>"}
{"text": "Berfungsi untuk mengira perimeter", "code": "float Perimeter ( float s , int n ) { float perimeter = 1 ;"}
{"text": "Hitung perimeter", "code": "perimeter = n * s ; return perimeter ; }"}
{"text": "kod pemacu", "code": "int main ( ) {"}
{"text": "Dapatkan jumlah sisi", "code": "int n = 5 ;"}
{"text": "Dapatkan panjang sisi", "code": "float s = 2.5 , peri ;"}
{"text": "Cari perimeter", "code": "peri = Perimeter ( s , n ) ; printf ( \" Perimeter ▁ of ▁ Regular ▁ Polygon STRNEWLINE \" \" ▁ with ▁ % d ▁ sides ▁ of ▁ length ▁ % f ▁ = ▁ % f STRNEWLINE \" , n , s , peri ) ; return 0 ; }"}
{"text": "Program C untuk mencari jarak serenjang (terpendek) antara satu titik dan satah dalam 3 d.", "code": "#include <stdio.h> NEW_LINE #include <math.h>"}
{"text": "Berfungsi untuk mencari jarak", "code": "void shortest_distance ( float x1 , float y1 , float z1 , float a , float b , float c , float d ) { d = fabs ( ( a * x1 + b * y1 + c * z1 + d ) ) ; float e = sqrt ( a * a + b * b + c * c ) ; printf ( \" Perpendicular ▁ distance ▁ is ▁ % f \" , d / e ) ; return ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { float x1 = 4 ; float y1 = -4 ; float z1 = 3 ; float a = 2 ; float b = -2 ; float c = 5 ; float d = 8 ;"}
{"text": "Panggilan fungsi", "code": "shortest_distance ( x1 , y1 , z1 , a , b , c , d ) ; }"}
{"text": "Program untuk mencari purata nombor ganjil sehingga nombor ganjil yang diberikan.", "code": "#include <stdio.h>"}
{"text": "Berfungsi untuk mengira purata nombor ganjil", "code": "int averageOdd ( int n ) { if ( n % 2 == 0 ) { printf ( \" Invalid ▁ Input \" ) ; return -1 ; } return ( n + 1 ) / 2 ; }"}
{"text": "fungsi pemacu", "code": "int main ( ) { int n = 15 ; printf ( \" % d \" , averageOdd ( n ) ) ; return 0 ; }"}
{"text": "Program CPP untuk mencetak segitiga trinomial.", "code": "#include <bits/stdc++.h> NEW_LINE #define MAX  10 NEW_LINE using namespace std ;"}
{"text": "Fungsi untuk mencari nilai segitiga trinomial.", "code": "int TrinomialValue ( int dp [ MAX ] [ MAX ] , int n , int k ) {"}
{"text": "Menggunakan harta segitiga trinomial.", "code": "if ( k < 0 ) k = - k ;"}
{"text": "Jika nilai sudah dikira, kembalikan itu.", "code": "if ( dp [ n ] [ k ] != 0 ) return dp [ n ] [ k ] ;"}
{"text": "Kes asas", "code": "if ( n == 0 && k == 0 ) return 1 ;"}
{"text": "Kes asas", "code": "if ( k < - n k > n ) return 0 ;"}
{"text": "langkah rekursif dan menyimpan nilai.", "code": "return ( dp [ n ] [ k ] = TrinomialValue ( dp , n - 1 , k - 1 ) + TrinomialValue ( dp , n - 1 , k ) + TrinomialValue ( dp , n - 1 , k + 1 ) ) ; }"}
{"text": "Berfungsi untuk mencetak segitiga trinomial ketinggian n.", "code": "void printTrinomial ( int n ) { int dp [ MAX ] [ MAX ] = { 0 } ;"}
{"text": "Percetakan n baris.", "code": "for ( int i = 0 ; i < n ; i ++ ) {"}
{"text": "Percetakan Separuh Pertama Segitiga", "code": "for ( int j = - i ; j <= 0 ; j ++ ) cout << TrinomialValue ( dp , i , j ) << \" ▁ \" ;"}
{"text": "Percetakan separuh kedua segitiga.", "code": "for ( int j = 1 ; j <= i ; j ++ ) cout << TrinomialValue ( dp , i , j ) << \" ▁ \" ; cout << endl ; } }"}
{"text": "Program yang didorong", "code": "int main ( ) { int n = 4 ; printTrinomial ( n ) ; return 0 ; }"}
{"text": "Program c untuk mencari sama ada nombor adalah kuasa 2 atau tidak", "code": "#include <stdio.h> NEW_LINE #include <string.h>"}
{"text": "pulangan 1 ketika str adalah kuasa 2 pulangan 0 ketika str bukan kekuatan 2", "code": "int isPowerOf2 ( char * str ) { int len_str = strlen ( str ) ;"}
{"text": "Jumlah menyimpan dividen pertengahan semasa membahagikan.", "code": "int num = 0 ;"}
{"text": "Jika input adalah \"1\" maka kembali 0 kerana 2 ^ k = 1 di mana k> = 1 dan di sini k = 0", "code": "if ( len_str == 1 && str [ len_str - 1 ] == '1' ) return 0 ;"}
{"text": "Bahagikan nombor sehingga ia dikurangkan kepada 1 jika kita berjaya dapat mengurangkan nombor kepada 1 ia bermakna rentetan input adalah kuasa dua jika di antara nombor ganjil muncul pada akhirnya ia bermakna rentetan tidak dapat dibahagikan dengan dua oleh itu bukan kuasa 2.", "code": "while ( len_str != 1 str [ len_str - 1 ] != '1' ) {"}
{"text": "Sekiranya digit terakhir adalah ganjil maka rentetan tidak boleh dibahagikan dengan 2 oleh itu bukan kuasa dua pulangan 0.", "code": "if ( ( str [ len_str - 1 ] - '0' ) % 2 == 1 ) return 0 ;"}
{"text": "Bahagikan keseluruhan rentetan dengan 2. Saya digunakan untuk mengesan indeks dalam nombor semasa. J digunakan untuk mengesan indeks untuk lelaran seterusnya.", "code": "for ( int i = 0 , j = 0 ; i < len_str ; i ++ ) { num = num * 10 + str [ i ] - '0' ;"}
{"text": "Jika num <2 maka kita perlu mengambil satu lagi digit di sebelah kanan [i] untuk menjadikannya lebih besar daripada [i]. E. g. 214/2 -> 107", "code": "if ( num < 2 ) {"}
{"text": "Jika ia bukan indeks pertama. Contohnya 214 maka kita perlu memasukkan 0.", "code": "if ( i != 0 ) str [ j ++ ] = '0' ;"}
{"text": "untuk contohnya. \"124\" kita tidak akan menulis 064 jadi jika indeks pertama hanya mengabaikan", "code": "continue ; } str [ j ++ ] = ( int ) ( num / 2 ) + '0' ; num = ( num ) - ( num / 2 ) * 2 ; } str [ j ] = ' \\0' ;"}
{"text": "Selepas setiap bahagian dengan 2 panjang rentetan diubah.", "code": "len_str = j ; }"}
{"text": "Jika rentetan mencapai 1 maka STR adalah kuasa 2.", "code": "return 1 ; }"}
{"text": "Kod pemacu.", "code": "int main ( ) { char str1 [ ] = \"12468462246684202468024\" \"6842024662202000002\" ; char str2 [ ] = \"1\" ; char str3 [ ] = \"128\" ; printf ( \" % d % d % d \" , isPowerOf2 ( str1 ) , isPowerOf2 ( str2 ) , isPowerOf2 ( str3 ) ) ; return 0 ; }"}
{"text": "Program untuk mencari purata nombor walaupun sehingga nombor yang diberikan.", "code": "#include <stdio.h>"}
{"text": "Berfungsi untuk mengira purata nombor walaupun", "code": "int averageEven ( int n ) { if ( n % 2 != 0 ) { printf ( \" Invalid ▁ Input \" ) ; return -1 ; } return ( n + 2 ) / 2 ; }"}
{"text": "fungsi pemacu", "code": "int main ( ) { int n = 16 ; printf ( \" % d \" , averageEven ( n ) ) ; return 0 ; }"}
{"text": "Program c untuk mencari jumlah pembahagi yang betul dari faktorial nombor", "code": "#include <stdio.h>"}
{"text": "berfungsi untuk mengira faktorial", "code": "int fact ( int n ) { if ( n == 0 ) return 1 ; return n * fact ( n - 1 ) ; }"}
{"text": "berfungsi untuk mengira jumlah pembahagi", "code": "int div ( int x ) { int ans = 0 ; for ( int i = 1 ; i <= x ; i ++ ) if ( x % i == 0 ) ans += i ; return ans ; }"}
{"text": "Mengembalikan jumlah pembahagi N!", "code": "int sumFactDiv ( int n ) { return div ( fact ( n ) ) ; }"}
{"text": "Program Pemandu", "code": "int main ( ) { int n = 4 ; printf ( \" % d \" , sumFactDiv ( n ) ) ; }"}
{"text": "Program O (sqrt (n)) yang mencetak semua pembahagi dalam urutan yang disusun", "code": "#include <stdio.h> NEW_LINE #include <math.h>"}
{"text": "berfungsi untuk mencetak pembahagi", "code": "void printDivisors ( int n ) { int i ; for ( i = 1 ; i * i < n ; i ++ ) { if ( n % i == 0 ) printf ( \" % d ▁ \" , i ) ; } if ( i - ( n / i ) == 1 ) { i -- ; } for ( ; i >= 1 ; i -- ) { if ( n % i == 0 ) printf ( \" % d ▁ \" , n / i ) ; } }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { printf ( \" The ▁ divisors ▁ of ▁ 100 ▁ are : ▁ STRNEWLINE \" ) ; printDivisors ( 100 ) ; return 0 ; }"}
{"text": "C pelaksanaan kaedah naif untuk mencetak semua pembahagi", "code": "#include <stdio.h>"}
{"text": "berfungsi untuk mencetak pembahagi", "code": "void printDivisors ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) printf ( \" % d ▁ \" , i ) ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { printf ( \" The ▁ divisors ▁ of ▁ 100 ▁ are : ▁ STRNEWLINE \" ) ; printDivisors ( 100 ) ; return 0 ; }"}
{"text": "Penyelesaian yang lebih baik (daripada naif) untuk mencari semua pembahagian", "code": "#include <stdio.h> NEW_LINE #include <math.h>"}
{"text": "Berfungsi untuk mencetak pembahagi", "code": "void printDivisors ( int n ) {"}
{"text": "Perhatikan bahawa gelung ini berjalan hingga akar persegi", "code": "for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) {"}
{"text": "Sekiranya pembahagi sama, cetak hanya satu", "code": "if ( n / i == i ) printf ( \" % d ▁ \" , i ) ;"}
{"text": "sebaliknya cetak kedua -duanya", "code": "printf ( \" % d ▁ % d ▁ \" , i , n / i ) ; } } }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { printf ( \" The ▁ divisors ▁ of ▁ 100 ▁ are : ▁ STRNEWLINE \" ) ; printDivisors ( 100 ) ; return 0 ; }"}
{"text": "Program c untuk membalikkan digit nombor", "code": "#include <stdio.h> ;"}
{"text": "Fungsi rekursif untuk membalikkan digit num", "code": "int reversDigits ( int num ) { static int rev_num = 0 ; static int base_pos = 1 ; if ( num > 0 ) { reversDigits ( num / 10 ) ; rev_num += ( num % 10 ) * base_pos ; base_pos *= 10 ; } return rev_num ; }"}
{"text": "Program pemacu untuk menguji pembalikan", "code": "int main ( ) { int num = 4562 ; printf ( \" Reverse ▁ of ▁ no . ▁ is ▁ % d \" , reversDigits ( num ) ) ; getchar ( ) ; return 0 ; }"}
{"text": "C Program untuk menilai Ceil (7 n / 8) tanpa menggunakan * dan /", "code": "#include <stdio.h> NEW_LINE int multiplyBySevenByEight ( unsigned int n ) {"}
{"text": "Perhatikan pendakap dalaman di sini. Ini diperlukan kerana keutamaan pengendali ' -' lebih tinggi daripada '<<'", "code": "return ( n - ( n >> 3 ) ) ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { unsigned int n = 9 ; printf ( \" % d \" , multiplyBySevenByEight ( n ) ) ; return 0 ; }"}
{"text": "C program untuk menilai 7 n / 8 tanpa menggunakan * dan /", "code": "#include <stdio.h> NEW_LINE int multiplyBySevenByEight ( unsigned int n ) {"}
{"text": "Langkah 1) Pertama kali ganda nombor dengan 7 i. e. 7 n = (n << 3) - n * Langkah 2) Bahagikan hasil sebanyak 8", "code": "return ( ( n << 3 ) - n ) >> 3 ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { unsigned int n = 15 ; printf ( \" % u \" , multiplyBySevenByEight ( n ) ) ; return 0 ; }"}
{"text": "Pelaksanaan Iteratif", "code": "#include <stdio.h> NEW_LINE int binarySearch ( int a [ ] , int item , int low , int high ) { while ( low <= high ) { int mid = low + ( high - low ) / 2 ; if ( item == a [ mid ] ) return mid + 1 ; else if ( item > a [ mid ] ) low = mid + 1 ; else high = mid - 1 ; } return low ; }"}
{"text": "Berfungsi untuk menyusun array [] saiz 'n'", "code": "void insertionSort ( int a [ ] , int n ) { int i , loc , j , k , selected ; for ( i = 1 ; i < n ; ++ i ) { j = i - 1 ; selected = a [ i ] ;"}
{"text": "cari lokasi di mana dipilih harus diminati", "code": "loc = binarySearch ( a , selected , 0 , j ) ;"}
{"text": "Gerakkan semua elemen selepas lokasi untuk mewujudkan ruang", "code": "while ( j >= loc ) { a [ j + 1 ] = a [ j ] ; j -- ; } a [ j + 1 ] = selected ; } }"}
{"text": "Kod pemacu", "code": "int main ( ) { int a [ ] = { 37 , 23 , 0 , 17 , 12 , 72 , 31 , 46 , 100 , 88 , 54 } ; int n = sizeof ( a ) / sizeof ( a [ 0 ] ) , i ; insertionSort ( a , n ) ; printf ( \" Sorted ▁ array : ▁ STRNEWLINE \" ) ; for ( i = 0 ; i < n ; i ++ ) printf ( \" % d ▁ \" , a [ i ] ) ; return 0 ; }"}
{"text": "Program C untuk jenis penyisipan", "code": "#include <math.h> NEW_LINE #include <stdio.h>"}
{"text": "Berfungsi untuk menyusun array menggunakan jenis penyisipan", "code": "void insertionSort ( int arr [ ] , int n ) { int i , key , j ; for ( i = 1 ; i < n ; i ++ ) { key = arr [ i ] ; j = i - 1 ;"}
{"text": "Gerakkan unsur -unsur ARR [0 .. i - 1], yang lebih besar daripada kunci, ke satu kedudukan di hadapan kedudukan mereka sekarang", "code": "while ( j >= 0 && arr [ j ] > key ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = key ; } }"}
{"text": "Fungsi utiliti untuk mencetak pelbagai saiz n", "code": "void printArray ( int arr [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) printf ( \" % d ▁ \" , arr [ i ] ) ; printf ( \" STRNEWLINE \" ) ; }"}
{"text": "Program pemacu untuk menguji jenis penyisipan", "code": "int main ( ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 } ; int n = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; insertionSort ( arr , n ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text": "Program C Rekursif untuk masalah perubahan duit syiling.", "code": "#include <stdio.h>"}
{"text": "Mengembalikan kiraan cara kita dapat jumlah s [0. . m - 1] syiling untuk mendapatkan jumlah n", "code": "int count ( int S [ ] , int m , int n ) {"}
{"text": "Jika n adalah 0 maka terdapat 1 penyelesaian (jangan sertakan duit syiling)", "code": "if ( n == 0 ) return 1 ;"}
{"text": "Sekiranya n kurang dari 0 maka tiada penyelesaian wujud", "code": "if ( n < 0 ) return 0 ;"}
{"text": "Sekiranya tidak ada duit syiling dan n lebih besar daripada 0, maka tiada penyelesaian wujud", "code": "if ( m <= 0 && n >= 1 ) return 0 ;"}
{"text": "kiraan adalah jumlah penyelesaian (i) termasuk S [m - 1] (ii) tidak termasuk S [m - 1]", "code": "return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ; }"}
{"text": "Program pemacu untuk menguji fungsi di atas", "code": "int main ( ) { int i , j ; int arr [ ] = { 1 , 2 , 3 } ; int m = sizeof ( arr ) / sizeof ( arr [ 0 ] ) ; printf ( \" % d ▁ \" , count ( arr , m , 4 ) ) ; getchar ( ) ; return 0 ; }"}
{"text": "Program CPP untuk mengira kawasan trapezoid", "code": "#include <stdio.h>"}
{"text": "Berfungsi untuk kawasan tersebut", "code": "double Area ( int b1 , int b2 , int h ) { return ( ( b1 + b2 ) / 2 ) * h ; }"}
{"text": "Kod pemacu", "code": "int main ( ) { int base1 = 8 , base2 = 10 , height = 6 ; double area = Area ( base1 , base2 , height ) ; printf ( \" Area ▁ is : ▁ % .1lf \" , area ) ; return 0 ; }"}
