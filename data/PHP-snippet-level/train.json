{"text":"Function that returns true if the number represented by arr [ ] is even in base r","code":"< ? php function isEven ( $ arr , $ n , $ r ) {"}
{"text":"If the base is even , then the last digit is checked","code":"if ( $ r % 2 == 0 ) { if ( $ arr [ $ n - 1 ] % 2 == 0 ) return true ; }"}
{"text":"If base is odd , then the number of odd digits are checked","code":"else {"}
{"text":"To store the count of odd digits","code":"$ oddCount = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ arr [ $ i ] % 2 != 0 ) $ oddCount ++ ; } if ( $ oddCount % 2 == 0 ) return true ; }"}
{"text":"Number is odd","code":"return false ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 0 ) ; $ n = Count ( $ arr ) ; $ r = 2 ; if ( isEven ( $ arr , $ n , $ r ) ) echo \" Even \" ; else echo \" Odd \" ; ? >"}
{"text":"Function to print the re - arranged array","code":"< ? php function solve ( $ a , $ n ) { $ ones = 0 ; $ twos = 0 ;"}
{"text":"Count the number of ones and twos in a [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If the array element is 1","code":"if ( $ a [ $ i ] == 1 ) $ ones ++ ;"}
{"text":"Array element is 2","code":"else $ twos ++ ; } $ ind = 0 ;"}
{"text":"If it has at least one 2 Fill up first 2","code":"if ( $ twos ) $ a [ $ ind ++ ] = 2 ;"}
{"text":"Decrease the cnt of ones if even","code":"$ evenOnes = ( $ ones % 2 == 0 ) ? true : false ; if ( $ evenOnes ) $ ones -= 1 ;"}
{"text":"Fill up with odd count of ones","code":"for ( $ i = 0 ; $ i < $ ones ; $ i ++ ) $ a [ $ ind ++ ] = 1 ;"}
{"text":"Fill up with remaining twos","code":"for ( $ i = 0 ; $ i < $ twos - 1 ; $ i ++ ) $ a [ $ ind ++ ] = 2 ;"}
{"text":"If even ones , then fill last position","code":"if ( $ evenOnes ) $ a [ $ ind ++ ] = 1 ;"}
{"text":"Print the rearranged array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ a [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 1 , 2 , 1 ) ; $ n = count ( $ a ) ; solve ( $ a , $ n ) ; ? >"}
{"text":"Function to generate and print the required array","code":"< ? php function CreateArray ( $ N , $ even , $ odd ) { $ temp = -1 ; $ OddPreSums = 0 ;"}
{"text":"Find the number of odd prefix sums","code":"for ( $ i = 0 ; $ i <= $ N + 1 ; $ i ++ ) { if ( $ i * ( ( $ N + 1 ) - $ i ) == $ odd ) { $ temp = 0 ; $ OddPreSums = $ i ; break ; } }"}
{"text":"If no odd prefix sum found","code":"if ( $ temp == -1 ) { echo temp ; } else {"}
{"text":"Calculating the number of even prefix sums","code":"$ EvenPreSums = ( $ N + 1 ) - $ OddPreSums ; $ e = 1 ; $ o = 0 ;"}
{"text":"Stores the current prefix sum","code":"$ CurrSum = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"If current prefix sum is even","code":"if ( $ CurrSum % 2 == 0 ) {"}
{"text":"Print 0 until e = EvenPreSums - 1","code":"if ( $ e < $ EvenPreSums ) { $ e ++ ; echo \"0 \u2581 \" ; } else { $ o ++ ;"}
{"text":"Print 1 when e = EvenPreSums","code":"echo \"1 \u2581 \" ; $ CurrSum ++ ; } } else { if ( $ e < $ EvenPreSums ) { $ e ++ ; echo \"1 \u2581 \" ; $ CurrSum ++ ; } else { $ o ++ ;"}
{"text":"Print 0 for rest of the values","code":"echo \"0 \u2581 \" ; } } } echo \" \" } }"}
{"text":"Driver code","code":"$ N = 15 ; $ even = 60 ; $ odd = 60 ; CreateArray ( $ N , $ even , $ odd ) ; ? >"}
{"text":"Function to return the integer X such that ( A xor X ) + ( B ^ X ) is minimized","code":"< ? php function findX ( $ A , $ B ) { $ j = 0 ; $ x = 0 ;"}
{"text":"While either A or B is non - zero","code":"while ( $ A $ B ) {"}
{"text":"Position at which both A and B have a set bit","code":"if ( ( $ A & 1 ) && ( $ B & 1 ) ) {"}
{"text":"Inserting a set bit in x","code":"$ x += ( 1 << $ j ) ; }"}
{"text":"Right shifting both numbers to traverse all the bits","code":"$ A >>= 1 ; $ B >>= 1 ; $ j += 1 ; } return $ x ; }"}
{"text":"Driver code","code":"$ A = 2 ; $ B = 3 ; $ X = findX ( $ A , $ B ) ; echo \" X = \" \u2581 , \u2581 $ X \u2581 , \u2581 \" , Sum = \" ( $ A ^ $ X ) + ( $ B ^ $ X ) ; ? >"}
{"text":"Function that returns true if sum of first n - 1 elements of the array is equal to the last element","code":"< ? php function isSumEqual ( $ ar , $ n ) { $ sum = 0 ;"}
{"text":"Find the sum of first n - 1 elements of the array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) $ sum += $ ar [ $ i ] ;"}
{"text":"If sum equals to the last element","code":"if ( $ sum == $ ar [ $ n - 1 ] ) return true ; return false ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 10 ) ; $ n = count ( $ arr ) ; if ( isSumEqual ( $ arr , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to count number of perfect squares","code":"< ? php function perfectSquares ( $ a , $ b ) {"}
{"text":"Counting number of perfect squares between a and b","code":"return ( floor ( sqrt ( $ b ) ) - ceil ( sqrt ( $ a ) ) + 1 ) ; }"}
{"text":"Function to count number of 1 s in array after N moves","code":"function countOnes ( $ arr , $ n ) { return perfectSquares ( 1 , $ n ) ; }"}
{"text":"Initialize array size","code":"$ N = 10 ;"}
{"text":"Initialize all elements to 0","code":"$ arr [ 10 ] = array ( 0 ) ; echo countOnes ( $ arr , $ N ) ; ? >"}
{"text":"function to find the lower bound","code":"< ? php function lower_bound ( $ A , $ valueTosearch ) { $ row = 0 ; foreach ( $ A as $ key = > $ value ) { if ( $ valueTosearch <= $ value ) return $ row ; $ row ++ ; } return $ row + 1 ; }"}
{"text":"Function to print the position of each boxes where a ball has to be placed","code":"function printPosition ( $ A , $ B , $ sizeOfA , $ sizeOfB ) {"}
{"text":"Find the cumulative sum of array A [ ]","code":"for ( $ i = 1 ; $ i < $ sizeOfA ; $ i ++ ) $ A [ $ i ] += $ A [ $ i - 1 ] ;"}
{"text":"Find the position of box for each ball","code":"for ( $ i = 0 ; $ i < $ sizeOfB ; $ i ++ ) {"}
{"text":"Row number","code":"$ row = lower_bound ( $ A , $ B [ $ i ] ) ;"}
{"text":"Column ( position of box in particular row )","code":"$ boxNumber = ( $ row >= 1 ) ? $ B [ $ i ] - $ A [ $ row - 1 ] : $ B [ $ i ] ;"}
{"text":"Row + 1 denotes row if indexing of array start from 1","code":"print_r ( $ row +1 . \" , \u2581 \" . $ boxNumber ) ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ A = array ( 2 , 2 , 2 , 2 ) ; $ B = array ( 1 , 2 , 3 , 4 ) ; $ sizeOfA = count ( $ A ) ; $ sizeOfB = count ( $ B ) ; printPosition ( $ A , $ B , $ sizeOfA , $ sizeOfB ) ; ? >"}
{"text":"Function to get the prime factors and its count of times it divides","code":"< ? php function primeFactors ( $ n , $ freq ) { $ cnt = 0 ;"}
{"text":"Count the number of 2 s that divide n","code":"while ( $ n % 2 == 0 ) { $ cnt ++ ; $ n = floor ( $ n \/ 2 ) ; } $ freq [ 2 ] = $ cnt ;"}
{"text":"n must be odd at this point . So we can skip one element ( Note i = i + 2 )","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) { $ cnt = 0 ;"}
{"text":"While i divides n , count i and divide n","code":"while ( $ n % $ i == 0 ) { $ cnt ++ ; $ n = floor ( $ n \/ $ i ) ; } $ freq [ $ i ] = $ cnt ; }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( $ n > 2 ) $ freq [ $ n ] = 1 ; return $ freq ; }"}
{"text":"Function to return the highest power","code":"function getMaximumPower ( $ n , $ m ) {"}
{"text":"Get the prime factors of n and m","code":"$ freq1 = primeFactors ( $ n , $ freq1 ) ; $ freq2 = primeFactors ( $ m , $ freq2 ) ; $ maxi = 0 ;"}
{"text":"Iterate and find the maximum power","code":"for ( $ i = 2 ; $ i <= $ m ; $ i ++ ) {"}
{"text":"If i not a prime factor of n and m","code":"if ( $ freq1 [ $ i ] == 0 && $ freq2 [ $ i ] == 0 ) continue ;"}
{"text":"If i is a prime factor of n and m If count of i dividing m is more than i dividing n , then power will be 0","code":"if ( $ freq2 [ $ i ] > $ freq1 [ $ i ] ) return 0 ;"}
{"text":"If i is a prime factor of M","code":"if ( $ freq2 [ $ i ] ) {"}
{"text":"get the maximum power","code":"$ maxi = max ( $ maxi , floor ( $ freq1 [ $ i ] \/ $ freq2 [ $ i ] ) ) ; } } return $ maxi ; }"}
{"text":"Drivers code","code":"$ n = 48 ; $ m = 4 ; echo getMaximumPower ( $ n , $ m ) ; ? >"}
{"text":"Function to find the number of divisors of all numbers in the range [ 1 , n ]","code":"< ? php function findDivisors ( $ n ) {"}
{"text":"Array to store the count of divisors","code":"$ div = array_fill ( 0 , $ n + 2 , 0 ) ;"}
{"text":"For every number from 1 to n","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Increase divisors count for every number divisible by i","code":"for ( $ j = 1 ; $ j * $ i <= $ n ; $ j ++ ) $ div [ $ i * $ j ] ++ ; }"}
{"text":"Print the divisors","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) echo $ div [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 10 ; findDivisors ( $ n ) ; ? >"}
{"text":"Function to decide the winner","code":"< ? php function decideWinner ( $ a , $ n ) { $ count0 = 0 ; $ count1 = 0 ; $ count2 = 0 ; $ count3 = 0 ;"}
{"text":"Iterate for all numbers in the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If mod gives 0","code":"if ( $ a [ $ i ] % 4 == 0 ) $ count0 ++ ;"}
{"text":"If mod gives 1","code":"else if ( $ a [ $ i ] % 4 == 1 ) $ count1 ++ ;"}
{"text":"If mod gives 2","code":"else if ( $ a [ $ i ] % 4 == 2 ) $ count2 ++ ;"}
{"text":"If mod gives 3","code":"else if ( $ a [ $ i ] % 4 == 3 ) $ count3 ++ ; }"}
{"text":"Check the winning condition for X","code":"if ( $ count0 % 2 == 0 && $ count1 % 2 == 0 && $ count2 % 2 == 0 && $ count3 == 0 ) return 1 ; else return 2 ; }"}
{"text":"Driver code","code":"$ a = array ( 4 , 8 , 5 , 9 ) ; $ n = count ( $ a ) ; if ( decideWinner ( $ a , $ n ) == 1 ) echo \" X \u2581 wins \" ; else echo \" Y \u2581 wins \" ; ? >"}
{"text":"Function to return the count of total binary prefix which are divisible by x","code":"< ? php function CntDivbyX ( $ arr , $ n , $ x ) {"}
{"text":"Initialize with zero","code":"$ number = 0 ; $ count1 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Instead of converting all prefixes to decimal , take reminder with x","code":"$ number = ( $ number * 2 + $ arr [ $ i ] ) % $ x ;"}
{"text":"If number is divisible by x then reminder = 0","code":"if ( $ number == 0 ) $ count1 += 1 ; } return $ count1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 0 , 1 , 0 , 1 , 1 , 0 ) ; $ n = sizeof ( $ arr ) ; $ x = 2 ; echo CntDivbyX ( $ arr , $ n , $ x ) ; ? >"}
{"text":"Function to return length of the resultant number","code":"< ? php function numLen ( $ K ) {"}
{"text":"If K is a multiple of 2 or 5","code":"if ( $ K % 2 == 0 $ K % 5 == 0 ) return -1 ; $ number = 0 ; $ len = 1 ; for ( $ len = 1 ; $ len <= $ K ; $ len ++ ) {"}
{"text":"Instead of generating all possible numbers 1 , 11 , 111 , 111 , ... , K 1 's  Take remainder with K","code":"$ number = ( $ number * 10 + 1 ) % $ K ;"}
{"text":"If number is divisible by k then remainder will be 0","code":"if ( $ number == 0 ) return $ len ; } return -1 ; }"}
{"text":"Driver code","code":"$ K = 7 ; echo numLen ( $ K ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ max_Element = 1005 ;"}
{"text":"Global array declaration","code":"$ sum1 = array_fill ( 0 , $ max_Element , 0 ) ; $ sum2 = array_fill ( 0 , $ max_Element , 0 ) ; $ sum3 = array_fill ( 0 , $ max_Element , 0 ) ;"}
{"text":"Function to find the sum of multiplication of every triplet in the divisors of a number","code":"function precomputation ( $ arr , $ n ) { global $ max_Element , $ sum3 , $ sum2 , $ sum1 ;"}
{"text":"sum1 [ x ] represents the sum of all the divisors of x","code":"for ( $ i = 1 ; $ i < $ max_Element ; $ i ++ ) for ( $ j = $ i ; $ j < $ max_Element ; $ j += $ i )"}
{"text":"Adding i to sum1 [ j ] because i is a divisor of j","code":"$ sum1 [ $ j ] += $ i ;"}
{"text":"sum2 [ x ] represents the sum of all the divisors of x","code":"for ( $ i = 1 ; $ i < $ max_Element ; $ i ++ ) for ( $ j = $ i ; $ j < $ max_Element ; $ j += $ i )"}
{"text":"Here i is divisor of j and sum1 [ j ] - i represents sum of all divisors of j which do not include i so we add i * ( sum1 [ j ] - i ) to sum2 [ j ]","code":"$ sum2 [ $ j ] += ( $ sum1 [ $ j ] - $ i ) * $ i ;"}
{"text":"In the above implementation we have considered every pair two times so we have to divide every sum2 array element by 2","code":"for ( $ i = 1 ; $ i < $ max_Element ; $ i ++ ) $ sum2 [ $ i ] = ( int ) ( $ sum2 [ $ i ] \/ 2 ) ;"}
{"text":"Here i is the divisor of j and we are trying to add the sum of multiplication of all triplets of divisors of j such that one of the divisors is i","code":"for ( $ i = 1 ; $ i < $ max_Element ; $ i ++ ) for ( $ j = $ i ; $ j < $ max_Element ; $ j += $ i ) $ sum3 [ $ j ] += $ i * ( $ sum2 [ $ j ] - $ i * ( $ sum1 [ $ j ] - $ i ) ) ;"}
{"text":"In the above implementation we have considered every triplet three times so we have to divide every sum3 array element by 3","code":"for ( $ i = 1 ; $ i < $ max_Element ; $ i ++ ) $ sum3 [ $ i ] = ( int ) ( $ sum3 [ $ i ] \/ 3 ) ;"}
{"text":"Print the results","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ sum3 [ $ arr [ $ i ] ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 9 , 5 , 6 ) ; $ n = count ( $ arr ) ;"}
{"text":"Precomputing","code":"precomputation ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the nth Fibonacci number","code":"< ? php function fib ( $ n ) { $ phi = ( 1 + sqrt ( 5 ) ) \/ 2 ; return ( int ) round ( pow ( $ phi , $ n ) \/ sqrt ( 5 ) ) ; }"}
{"text":"Function to return the required sum","code":"function calculateSum ( $ l , $ r ) {"}
{"text":"Using our deduced result","code":"$ sum = fib ( $ r + 2 ) - fib ( $ l + 1 ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ l = 4 ; $ r = 8 ; echo ( calculateSum ( $ l , $ r ) ) ; ? >"}
{"text":"Function to print balanced bracket expression if it is possible","code":"< ? php function printBalancedExpression ( $ a , $ b , $ c , $ d ) {"}
{"text":"If the condition is met","code":"if ( ( $ a == $ d && $ a ) || ( $ a == 0 && $ c == 0 && $ d == 0 ) ) {"}
{"text":"Print brackets of type - 1","code":"for ( $ i = 1 ; $ i <= $ a ; $ i ++ ) echo \" ( ( \" ;"}
{"text":"Print brackets of type - 3","code":"for ( $ i = 1 ; $ i <= $ c ; $ i ++ ) echo \" ) ( \" ;"}
{"text":"Print brackets of type - 4","code":"for ( $ i = 1 ; $ i <= $ d ; $ i ++ ) echo \" ) ) \" ;"}
{"text":"Print brackets of type - 2","code":"for ( $ i = 1 ; $ i <= $ b ; $ i ++ ) echo \" ( ) \" ; }"}
{"text":"If the condition is not met","code":"else echo -1 ; }"}
{"text":"Driver code","code":"$ a = 3 ; $ b = 1 ; $ c = 4 ; $ d = 3 ; printBalancedExpression ( $ a , $ b , $ c , $ d ) ; ? >"}
{"text":"Function to return the factorial of a number","code":"< ? php function factorial ( $ f ) { $ fact = 1 ; for ( $ i = 2 ; $ i <= $ f ; $ i ++ ) $ fact *= $ i ; return $ fact ; }"}
{"text":"Function to return the count of distinct ( N + M ) digit numbers having N 0 ' s \u2581 and \u2581 and \u2581 M \u2581 1' s with no leading zeros","code":"function findPermutation ( $ N , $ M ) { $ permutation = factorial ( $ N + $ M - 1 ) \/ ( factorial ( $ N ) * factorial ( $ M - 1 ) ) ; return $ permutation ; }"}
{"text":"Driver code","code":"$ N = 3 ; $ M = 3 ; echo findPermutation ( $ N , $ M ) ; ? >"}
{"text":"Function to return the maximum required value","code":"< ? php function maxValue ( $ n ) { if ( $ n == 1 ) return 0 ; return ( ( $ n * $ n \/ 2 ) - 1 ) ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo maxValue ( $ n ) ; ? >"}
{"text":"Function to print the count of a , b and c after n seconds","code":"< ? php function findCount ( $ n ) { $ a = 1 ; $ b = 0 ; $ c = 0 ;"}
{"text":"Number of multiples of 60 below n","code":"$ x = $ n \/ 60 ; $ a = pow ( 32 , $ x ) ;"}
{"text":"Multiple of 60 nearest to n","code":"$ x = 60 * $ x ; for ( $ i = $ x + 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Change all a to b","code":"if ( $ i % 2 == 0 ) { $ b += $ a ; $ a = 0 ; }"}
{"text":"Change all b to c","code":"if ( $ i % 5 == 0 ) { $ c += $ b ; $ b = 0 ; }"}
{"text":"Change each c to two a","code":"if ( $ i % 12 == 0 ) { $ a += ( 2 * $ c ) ; $ c = 0 ; } }"}
{"text":"Print the updated values of a , b and c","code":"echo ( \" a \u2581 = \u2581 \" . $ a . \" , b = \" \u2581 . \u2581 $ b \u2581 . \u2581 \" , c = \" }"}
{"text":"Driver code","code":"$ n = 72 ; findCount ( $ n ) ; ? >"}
{"text":"Implementation of factorial function","code":"< ? php function factorial ( $ n ) { return ( $ n == 1 $ n == 0 ) ? 1 : factorial ( $ n - 1 ) * $ n ; }"}
{"text":"Function to find GCD of factorial of elements from array","code":"function gcdOfFactorial ( $ arr , $ n ) {"}
{"text":"find the minimum element of array","code":"$ minm = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ minm = $ minm > $ arr [ $ i ] ? $ arr [ $ i ] : $ minm ;"}
{"text":"return the factorial of minimum element","code":"return factorial ( $ minm ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 9 , 12 , 122 , 34 , 15 ) ; $ n = count ( $ arr ) ; echo gcdOfFactorial ( $ arr , $ n ) ; ? >"}
{"text":"Recursive function to return the sum of the given series","code":"< ? php function sum ( $ n ) {"}
{"text":"1 ^ 1 = 1","code":"if ( $ n == 1 ) return 1 ; else"}
{"text":"Recursive call","code":"return ( pow ( $ n , $ n ) + sum ( $ n - 1 ) ) ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo ( sum ( $ n ) ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php $ mod = 1000000007 ;"}
{"text":"Function to compute a ^ n % mod","code":"function power ( $ a , $ n ) { global $ mod ; if ( $ n == 0 ) return 1 ; $ p = power ( $ a , $ n \/ 2 ) % $ mod ; $ p = ( $ p * $ p ) % $ mod ; if ( $ n & 1 ) $ p = ( $ p * $ a ) % $ mod ; return $ p ; }"}
{"text":"Function to count permutations that are first decreasing and then increasing","code":"function countPermutations ( $ n ) { global $ mod ;"}
{"text":"For n = 1 return 0","code":"if ( $ n == 1 ) { return 0 ; }"}
{"text":"Calculate and return result","code":"return ( power ( 2 , $ n - 1 ) - 2 ) % $ mod ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo countPermutations ( $ n ) ; ? >"}
{"text":"Function to find the count of numbers that can be formed using digits 3 , 4 only and having length at max N .","code":"< ? php function numbers ( $ n ) { return ( pow ( 2 , $ n + 1 ) ) - 2 ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo numbers ( $ n ) ; ? >"}
{"text":"Function to return the number of ways to place 4 items in n ^ 2 positions","code":"< ? php function NumberofWays ( $ n ) { $ x = ( 1 * ( $ n ) * ( $ n - 1 ) * ( $ n - 2 ) * ( $ n - 3 ) ) \/ ( 4 * 3 * 2 * 1 ) ; $ y = ( 1 * ( $ n ) * ( $ n - 1 ) * ( $ n - 2 ) * ( $ n - 3 ) ) ; return ( 1 * $ x * $ y ) ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo NumberofWays ( $ n ) ; ? >"}
{"text":"Function to generate a fixed number","code":"< ? php function nthTerm ( $ N ) { $ nth = 0 ;"}
{"text":"( N ^ 2 * ( N + 1 ) ) \/ 2","code":"$ nth = ( $ N * $ N * ( $ N + 1 ) ) \/ 2 ; return $ nth ; }"}
{"text":"Driver Code","code":"$ N = 5 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"Function to prn numbers such that their sum is a perfect square","code":"< ? php function findNumbers ( $ n ) { $ i = 1 ; while ( $ i <= $ n ) {"}
{"text":"Print ith odd number","code":"echo ( ( 2 * $ i ) - 1 ) . \" \u2581 \" ; $ i ++ ; } }"}
{"text":"Driver code","code":"$ n = 3 ; findNumbers ( $ n ) ; ? >"}
{"text":"Function to find the missing numbers","code":"< ? php function findMissingNums ( $ even , $ sizeEven , $ odd , $ sizeOdd ) {"}
{"text":"To store the minimum and the maximum odd and even elements from the arrays","code":"$ minEven = PHP_INT_MAX ; $ maxEven = PHP_INT_MIN ; $ minOdd = PHP_INT_MAX ; $ maxOdd = PHP_INT_MIN ;"}
{"text":"To store the sum of the array elements","code":"$ sumEvenArr = $ sumOddArr = 0 ;"}
{"text":"Get the minimum and the maximum even elements from the array","code":"for ( $ i = 0 ; $ i < $ sizeEven ; $ i ++ ) { $ minEven = min ( $ minEven , $ even [ $ i ] ) ; $ maxEven = max ( $ maxEven , $ even [ $ i ] ) ; $ sumEvenArr += $ even [ $ i ] ; }"}
{"text":"Get the minimum and the maximum odd elements from the array","code":"for ( $ i = 0 ; $ i < $ sizeOdd ; $ i ++ ) { $ minOdd = min ( $ minOdd , $ odd [ $ i ] ) ; $ maxOdd = max ( $ maxOdd , $ odd [ $ i ] ) ; $ sumOddArr += $ odd [ $ i ] ; }"}
{"text":"To store the total terms in the series and the required sum of the array","code":"$ totalTerms = $ reqSum = 0 ;"}
{"text":"Total terms from 2 to minEven","code":"$ totalTerms = ( int ) ( $ minEven \/ 2 ) ;"}
{"text":"Sum of all even numbers from 2 to minEven","code":"$ evenSumMin = $ totalTerms * ( $ totalTerms + 1 ) ;"}
{"text":"Total terms from 2 to maxEven","code":"$ totalTerms = ( int ) ( $ maxEven \/ 2 ) ;"}
{"text":"Sum of all even numbers from 2 to maxEven","code":"$ evenSumMax = $ totalTerms * ( $ totalTerms + 1 ) ;"}
{"text":"Required sum for the even array","code":"$ reqSum = ( $ evenSumMax - $ evenSumMin + $ minEven ) ;"}
{"text":"Missing even number","code":"echo \" Even = \" \u2581 . \u2581 ( $ reqSum \u2581 - \u2581 $ sumEvenArr ) \u2581 . \u2581 \" \""}
{"text":"Total terms from 1 to minOdd","code":"$ totalTerms = ( int ) ( ( $ minOdd \/ 2 ) + 1 ) ;"}
{"text":"Sum of all odd numbers from 1 to minOdd","code":"$ oddSumMin = $ totalTerms * $ totalTerms ;"}
{"text":"Total terms from 1 to maxOdd","code":"$ totalTerms = ( int ) ( ( $ maxOdd \/ 2 ) + 1 ) ;"}
{"text":"Sum of all odd numbers from 1 to maxOdd","code":"$ oddSumMax = $ totalTerms * $ totalTerms ;"}
{"text":"Required sum for the odd array","code":"$ reqSum = ( $ oddSumMax - $ oddSumMin + $ minOdd ) ;"}
{"text":"Missing odd number","code":"echo \" Odd = \" }"}
{"text":"Driver code","code":"$ even = array ( 6 , 4 , 8 , 14 , 10 ) ; $ sizeEven = count ( $ even ) ; $ odd = array ( 7 , 5 , 3 , 11 , 13 ) ; $ sizeOdd = count ( $ odd ) ; findMissingNums ( $ even , $ sizeEven , $ odd , $ sizeOdd ) ; ? >"}
{"text":"Function to return the minimum number of matches to win to qualify for next round","code":"< ? php function findMinimum ( $ x , $ y ) {"}
{"text":"Do a binary search to find","code":"$ low = 0 ; $ high = $ y ; while ( $ low <= $ high ) {"}
{"text":"Find mid element","code":"$ mid = ( $ low + $ high ) >> 1 ;"}
{"text":"Check for condition$ to qualify for next round","code":"if ( ( $ mid * 2 + ( $ y - $ mid ) ) >= $ x ) $ high = $ mid - 1 ; else $ low = $ mid + 1 ; } return $ low ; }"}
{"text":"Driver Code","code":"$ x = 6 ; $ y = 5 ; echo findMinimum ( $ x , $ y ) ; ? >"}
{"text":"Function to return the sum of digits of x","code":"< ? php function sumOfDigits ( $ x ) { $ sum = 0 ; while ( $ x != 0 ) { $ sum += $ x % 10 ; $ x = $ x \/ 10 ; } return $ sum ; }"}
{"text":"Function to return the count of required numbers","code":"function countNumbers ( $ l , $ r ) { $ count = 0 ; for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) {"}
{"text":"If i is divisible by 2 and sum of digits of i is divisible by 3","code":"if ( $ i % 2 == 0 && sumOfDigits ( $ i ) % 3 == 0 ) $ count ++ ; }"}
{"text":"Return the required count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ l = 1000 ; $ r = 6000 ; echo countNumbers ( $ l , $ r ) ; ? >"}
{"text":"Function to find the sum of minimum of all subarrays","code":"< ? php function findMinSum ( $ arr , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] * ( $ n - $ i ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 5 , 7 , 8 ) ; $ n = count ( $ arr ) ; echo findMinSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the max length of the sub - array that have the maximum average ( average value of the elements )","code":"< ? php function maxLenSubArr ( $ a , $ n ) { $ cm = 1 ; $ max = 0 ;"}
{"text":"Finding the maximum value","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] > $ max ) $ max = $ a [ $ i ] ; } for ( $ i = 0 ; $ i < $ n - 1 ; ) { $ count = 1 ;"}
{"text":"If consecutive maximum found","code":"if ( $ a [ $ i ] == $ a [ $ i + 1 ] && $ a [ $ i ] == $ max ) {"}
{"text":"Find the max length of consecutive max","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { if ( $ a [ $ j ] == $ max ) { $ count ++ ; $ i ++ ; } else break ; } if ( $ count > $ cm ) $ cm = $ count ; } else $ i ++ ; } return $ cm ; }"}
{"text":"Driver code","code":"$ arr = array ( 6 , 1 , 6 , 6 , 0 ) ; $ n = sizeof ( $ arr ) ; echo maxLenSubArr ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the minimized sum","code":"< ? php function minSum ( $ arr , $ n , $ x ) { $ sum = 0 ;"}
{"text":"To store the largest element from the array which is divisible by x","code":"$ largestDivisible = -1 ; $ minimum = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Sum of array elements before performing any operation","code":"$ sum += $ arr [ $ i ] ;"}
{"text":"If current element is divisible by x and it is maximum so far","code":"if ( $ arr [ $ i ] % $ x == 0 && $ largestDivisible < $ arr [ $ i ] ) $ largestDivisible = $ arr [ $ i ] ;"}
{"text":"Update the minimum element","code":"if ( $ arr [ $ i ] < $ minimum ) $ minimum = $ arr [ $ i ] ; }"}
{"text":"If no element can be reduced then there 's no point in performing the  operation as we will end up increasing  the sum when an element is multiplied by x","code":"if ( $ largestDivisible == -1 ) return $ sum ;"}
{"text":"Subtract the chosen elements from the sum and then add their updated values","code":"$ sumAfterOperation = $ sum - $ minimum - $ largestDivisible + ( $ x * $ minimum ) + ( $ largestDivisible \/ $ x ) ;"}
{"text":"Return the minimized sum","code":"return min ( $ sum , $ sumAfterOperation ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 5 , 5 , 5 , 6 ) ; $ n = sizeof ( $ arr ) ; $ x = 3 ; print ( minSum ( $ arr , $ n , $ x ) ) ; ? >"}
{"text":"Function to return the maximum bitwise AND possible among all the possible pairs","code":"< ? php function maxAND ( $ L , $ R ) {"}
{"text":"If there is only a single value in the range [ L , R ]","code":"if ( $ L == $ R ) return $ L ;"}
{"text":"If there are only two values in the range [ L , R ]","code":"else if ( ( $ R - $ L ) == 1 ) return ( $ R & $ L ) ; else { if ( ( ( $ R - 1 ) & $ R ) > ( ( $ R - 2 ) & ( $ R - 1 ) ) ) return ( ( $ R - 1 ) & $ R ) ; else return ( ( $ R - 2 ) & ( $ R - 1 ) ) ; } }"}
{"text":"Driver code","code":"$ L = 1 ; $ R = 632 ; echo maxAND ( $ L , $ R ) ; ? >"}
{"text":"Function to check whether the number is a special prime or not","code":"< ? php function checkSpecialPrime ( $ sieve , $ num ) {"}
{"text":"While number is not equal to zero","code":"while ( $ num ) {"}
{"text":"If the number is not prime return false .","code":"if ( ! $ sieve [ $ num ] ) { return false ; }"}
{"text":"Else remove the last digit by dividing the number by 10.","code":"$ num = floor ( $ num \/ 10 ) ; }"}
{"text":"If the number has become zero then the number is special prime , hence return true","code":"return true ; }"}
{"text":"Function to find the Smallest Special Prime which is greater than or equal to a given number","code":"function findSpecialPrime ( $ N ) {"}
{"text":"Initially all numbers are considered Primes .","code":"$ sieve = array_fill ( 0 , $ N * 10 , true ) ; $ sieve [ 0 ] = $ sieve [ 1 ] = false ; for ( $ i = 2 ; $ i <= $ N * 10 ; $ i ++ ) { if ( $ sieve [ $ i ] ) { for ( $ j = $ i * $ i ; $ j <= $ N * 10 ; $ j += $ i ) { $ sieve [ $ j ] = false ; } } }"}
{"text":"There is always an answer possible","code":"while ( true ) {"}
{"text":"Checking if the number is a special prime or not","code":"if ( checkSpecialPrime ( $ sieve , $ N ) ) {"}
{"text":"If yes print the number and break the loop .","code":"echo $ N , \" STRNEWLINE \" ; break ; }"}
{"text":"Else increment the number .","code":"else $ N ++ ; } }"}
{"text":"Driver code","code":"$ N = 379 ; findSpecialPrime ( $ N ) ; $ N = 100 ; findSpecialPrime ( $ N ) ; ? >"}
{"text":"Function to return the minimum number of moves required to make n divisible by 25","code":"< ? php function minMoves ( $ n ) {"}
{"text":"Convert number into string","code":"$ s = strval ( $ n ) ;"}
{"text":"To store required answer","code":"$ ans = PHP_INT_MAX ;"}
{"text":"Length of the string","code":"$ len = strlen ( $ s ) ;"}
{"text":"To check all possible pairs","code":"for ( $ i = 0 ; $ i < $ len ; ++ $ i ) { for ( $ j = 0 ; $ j < $ len ; ++ $ j ) { if ( $ i == $ j ) continue ;"}
{"text":"Make a duplicate string","code":"$ t = $ s ; $ cur = 0 ;"}
{"text":"Number of swaps required to place ith digit in last position","code":"for ( $ k = $ i ; $ k < $ len - 1 ; ++ $ k ) { $ e = $ t [ $ k ] ; $ t [ $ k ] = $ t [ $ k + 1 ] ; $ t [ $ k + 1 ] = $ e ; ++ $ cur ; }"}
{"text":"Number of swaps required to place jth digit in 2 nd last position","code":"for ( $ k = $ j - ( $ j > $ i ) ; $ k < $ len - 2 ; ++ $ k ) { $ e = $ t [ $ k ] ; $ t [ $ k ] = $ t [ $ k + 1 ] ; $ t [ $ k + 1 ] = $ e ; ++ $ cur ; }"}
{"text":"Find first non zero digit","code":"$ pos = -1 ; for ( $ k = 0 ; $ k < $ len ; ++ $ k ) { if ( $ t [ $ k ] != '0' ) { $ pos = $ k ; break ; } }"}
{"text":"Place first non zero digit in the first position","code":"for ( $ k = $ pos ; $ k > 0 ; -- $ k ) { $ e = $ t [ $ k ] ; $ t [ $ k ] = $ t [ $ k + 1 ] ; $ t [ $ k + 1 ] = $ e ; ++ $ cur ; }"}
{"text":"Convert string to number","code":"$ nn = intval ( $ t ) ;"}
{"text":"If this number is divisible by 25 then cur is one of the possible answer","code":"if ( $ nn % 25 == 0 ) $ ans = min ( $ ans , $ cur ) ; } }"}
{"text":"If not possible","code":"if ( $ ans == PHP_INT_MAX ) return -1 ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 509201 ; echo minMoves ( $ n ) ; ? >"}
{"text":"Function to return the required number","code":"< ? php function getMaxNum ( $ a , $ b , $ c ) {"}
{"text":"If b % c = 0 then b is the required number","code":"if ( $ b % $ c == 0 ) return $ b ;"}
{"text":"Else get the maximum multiple of c smaller than b","code":"$ x = ( ( int ) ( $ b \/ $ c ) * $ c ) ; if ( $ x >= $ a && $ x <= $ b ) return $ x ; else return -1 ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 10 ; $ c = 3 ; echo ( getMaxNum ( $ a , $ b , $ c ) ) ; ? >"}
{"text":"Function to return the count of total positions the Bishop can visit in a single move","code":"< ? php function countSquares ( $ row , $ column ) {"}
{"text":"Count top left squares","code":"$ topLeft = min ( $ row , $ column ) - 1 ;"}
{"text":"Count bottom right squares","code":"$ bottomRight = 8 - max ( $ row , $ column ) ;"}
{"text":"Count top right squares","code":"$ topRight = min ( $ row , 9 - $ column ) - 1 ;"}
{"text":"Count bottom left squares","code":"$ bottomLeft = 8 - max ( $ row , 9 - $ column ) ;"}
{"text":"Return total count","code":"return ( $ topLeft + $ topRight + $ bottomRight + $ bottomLeft ) ; }"}
{"text":"Bishop 's Position","code":"$ row = 4 ; $ column = 4 ; echo countSquares ( $ row , $ column ) ; ? >"}
{"text":"Function that return true if the Bishop can take down the pawn","code":"< ? php function canTakeDown ( $ bishopX , $ bishopY , $ pawnX , $ pawnY ) {"}
{"text":"If pawn is at angle 45 or 225 degree from bishop 's Position","code":"if ( $ pawnX - $ bishopX == $ pawnY - $ bishopY ) return true ;"}
{"text":"If pawn is at angle 135 or 315 degree from bishop 's Position","code":"else if ( - $ pawnX + $ bishopX == $ pawnY - $ bishopY ) return true ; else return false ; }"}
{"text":"Bishop 's Position","code":"$ bishopX = 5 ; $ bishopY = 5 ;"}
{"text":"Pawn 's Position","code":"$ pawnX = 1 ; $ pawnY = 1 ; if ( canTakeDown ( $ bishopX , $ bishopY , $ pawnX , $ pawnY ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find maximum number moves possible","code":"< ? php $ N = 10005 ;"}
{"text":"To store number of prime factors of each number","code":"$ primeFactors = array_fill ( 0 , $ N , 0 ) ;"}
{"text":"Function to find number of prime factors of each number","code":"function findPrimeFactors ( ) { global $ N , $ primeFactors ; for ( $ i = 2 ; $ i < $ N ; $ i ++ )"}
{"text":"if i is a prime number","code":"if ( $ primeFactors [ $ i ] == 0 ) for ( $ j = $ i ; $ j < $ N ; $ j += $ i )"}
{"text":"increase value by one from it 's preveious multiple","code":"$ primeFactors [ $ j ] = $ primeFactors [ ( int ) ( $ j \/ $ i ) ] + 1 ;"}
{"text":"make prefix sum this will be helpful for multiple test cases","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) $ primeFactors [ $ i ] += $ primeFactors [ $ i - 1 ] ; }"}
{"text":"Generate primeFactors array","code":"findPrimeFactors ( ) ; $ a = 6 ; $ b = 3 ;"}
{"text":"required answer","code":"print ( ( $ primeFactors [ $ a ] - $ primeFactors [ $ b ] ) ) ; ? >"}
{"text":"Function to return digit sum","code":"< ? php function digitSum ( $ n ) { $ ans = 0 ; while ( $ n ) { $ ans += $ n % 10 ; $ n \/= 10 ; } return $ ans ; }"}
{"text":"Function to find out the smallest integer","code":"function findInt ( $ n , $ m ) { $ minDigit = floor ( $ m \/ 9 ) ;"}
{"text":"Start of the iterator ( Smallest multiple of n )","code":"$ start = pow ( 10 , $ minDigit ) - ( int ) pow ( 10 , $ minDigit ) % $ n ; while ( $ start < PHP_INT_MAX ) { if ( digitSum ( $ start ) == $ m ) return $ start ; else $ start += $ n ; } return -1 ; }"}
{"text":"Driver code","code":"$ n = 13 ; $ m = 32 ; echo findInt ( $ n , $ m ) ; # This  code is contributed by ajit. NEW_LINE ? >"}
{"text":"Function to find the smallest divisor","code":"< ? php function smallestDivisor ( $ n ) { $ mx = sqrt ( $ n ) ; for ( $ i = 2 ; $ i <= $ mx ; $ i ++ ) if ( $ n % $ i == 0 ) return $ i ; return $ n ; }"}
{"text":"Function to find the maximum sum","code":"function maxSum ( $ n ) { $ res = $ n ; while ( $ n > 1 ) { $ divi = smallestDivisor ( $ n ) ; $ n \/= $ divi ; $ res += $ n ; } return $ res ; }"}
{"text":"Driver Code","code":"$ n = 34 ; echo maxSum ( $ n ) ; #This  code is contributed by akt_mit. NEW_LINE ? >"}
{"text":"Function that returns true if all the elements of the array can be made equal with the given operation","code":"< ? php function isPossible ( $ n , $ k , $ arr ) {"}
{"text":"To store the sum of the array elements and the maximum element from the array","code":"$ sum = $ arr [ 0 ] ; $ maxVal = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ sum += $ arr [ $ i ] ; $ maxVal = max ( $ maxVal , $ arr [ $ i ] ) ; } if ( ( float ) $ maxVal > ( float ) ( $ sum + $ k ) \/ $ n ) return false ; return true ; }"}
{"text":"Driver code","code":"$ k = 8 ; $ arr = array ( 1 , 2 , 3 , 4 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; if ( isPossible ( $ n , $ k , $ arr ) ) echo \" Yes \" ; else echo \" No \" ; # This  code is contributed by akt_miit. NEW_LINE ? >"}
{"text":"Function to return the maximum value of ( x + y + z ) such that ( ax + by + cz = n )","code":"< ? php function maxResult ( $ n , $ a , $ b , $ c ) { $ maxVal = 0 ;"}
{"text":"i represents possible values of a * x","code":"for ( $ i = 0 ; $ i <= $ n ; $ i += $ a )"}
{"text":"j represents possible values of b * y","code":"for ( $ j = 0 ; $ j <= $ n - $ i ; $ j += $ b ) { $ z = ( $ n - ( $ i + $ j ) ) \/ $ c ;"}
{"text":"If z is an integer","code":"if ( floor ( $ z ) == ceil ( $ z ) ) { $ x = ( int ) ( $ i \/ $ a ) ; $ y = ( int ) ( $ j \/ $ b ) ; $ maxVal = max ( $ maxVal , $ x + $ y + ( int ) $ z ) ; } } return $ maxVal ; }"}
{"text":"Driver code","code":"$ n = 10 ; $ a = 5 ; $ b = 3 ; $ c = 4 ;"}
{"text":"Function Call","code":"echo maxResult ( $ n , $ a , $ b , $ c ) ; ? >"}
{"text":"Function that returns true if all the array elements can be made equal with the given operation","code":"< ? php function EqualNumbers ( $ a , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Divide number by 2","code":"while ( $ a [ $ i ] % 2 == 0 ) $ a [ $ i ] \/= 2 ;"}
{"text":"Divide number by 3","code":"while ( $ a [ $ i ] % 3 == 0 ) $ a [ $ i ] \/= 3 ; if ( $ a [ $ i ] != $ a [ 0 ] ) { return false ; } } return true ; }"}
{"text":"Driver code","code":"$ a = array ( 50 , 75 , 150 ) ; $ n = sizeof ( $ a ) \/ sizeof ( $ a [ 0 ] ) ; if ( EqualNumbers ( $ a , $ n ) ) echo \" Yes \" ; else echo \" No \" ; #This  code is contributed by ajit.. NEW_LINE ? >"}
{"text":"Function to return the required gcd","code":"< ? php function max_gcd ( $ n , $ p ) { $ count = 0 ; $ gcd = 1 ;"}
{"text":"Count the number of times 2 divides p","code":"while ( $ p % 2 == 0 ) {"}
{"text":"Equivalent to p = p \/ 2 ;","code":"$ p >>= 1 ; $ count ++ ; }"}
{"text":"If 2 divides p","code":"if ( $ count > 0 ) $ gcd *= pow ( 2 , ( int ) ( $ count \/ $ n ) ) ;"}
{"text":"Check all the possible numbers that can divide p","code":"for ( $ i = 3 ; $ i <= ( int ) sqrt ( $ p ) ; $ i += 2 ) { $ count = 0 ; while ( $ p % $ i == 0 ) { $ count ++ ; $ p = ( int ) ( $ p \/ $ i ) ; } if ( $ count > 0 ) { $ gcd *= pow ( $ i , ( int ) ( $ count \/ $ n ) ) ; } }"}
{"text":"If n in the end is a prime number","code":"if ( $ p > 2 ) $ gcd *= pow ( $ p , ( int ) ( 1 \/ $ n ) ) ;"}
{"text":"Return the required gcd","code":"return $ gcd ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ p = 80 ; echo ( max_gcd ( $ n , $ p ) ) ;"}
{"text":"Function to return the required number","code":"< ? php function getMinNum ( $ a , $ b , $ c ) {"}
{"text":"If doesn 't belong to the range  then c is the required number","code":"if ( $ c < $ a $ c > $ b ) return $ c ;"}
{"text":"Else get the next multiple of c starting from b + 1","code":"$ x = ( floor ( ( $ b \/ $ c ) ) * $ c ) + $ c ; return $ x ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 4 ; $ c = 4 ; echo getMinNum ( $ a , $ b , $ c ) ; ? >"}
{"text":"Function to return the count of required pairs","code":"< ? php function countPairs ( $ n ) {"}
{"text":"Special case","code":"if ( $ n == 2 ) return 4 ;"}
{"text":"Number which will give the max value . for ( ( n % i ) % j ) % n","code":"$ num = ( ( int ) ( $ n \/ 2 ) + 1 ) ;"}
{"text":"To store the maximum possible value of ( ( n % i ) % j ) % n","code":"$ max = $ n % $ num ;"}
{"text":"Count of possible pairs","code":"$ count = ( $ n - $ max ) ; return $ count ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo ( countPairs ( $ n ) ) ; ? >"}
{"text":"Function that return true if sub is a sub - sequence in s","code":"< ? php function checkSub ( $ sub , $ s ) { $ j = 0 ; for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) if ( $ sub [ $ j ] == $ s [ $ i ] ) $ j ++ ; return $ j == strlen ( $ sub ) ; }"}
{"text":"Function to return a multiple of 8 formed after removing 0 or more characters from the given string","code":"function getMultiple ( $ s ) {"}
{"text":"Iterate over all multiples of 8","code":"for ( $ i = 0 ; $ i < 1e3 ; $ i += 8 ) {"}
{"text":"If current multiple exists as a subsequence in the given string","code":"if ( checkSub ( ( string ) ( $ i ) , $ s ) ) return $ i ; } return -1 ; }"}
{"text":"Driver Code","code":"$ s = \"3454\" ; echo getMultiple ( $ s ) ;"}
{"text":"PHP program to find sum of harmonic series using recursion","code":"< ? php function sum ( $ n ) {"}
{"text":"Base condition","code":"if ( $ n < 2 ) return 1 ; else return 1 \/ $ n + ( sum ( $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"echo sum ( 8 ) . \" STRNEWLINE \" ; echo sum ( 10 ) ; ? >"}
{"text":"Function to calculate the value of the","code":"< ? php function findingValues ( $ m , $ n , $ mth , $ nth ) {"}
{"text":"Calculate value of d using formula","code":"$ d = ( abs ( $ mth - $ nth ) ) \/ abs ( ( $ m - 1 ) - ( $ n - 1 ) ) ;"}
{"text":"Calculate value of a using formula","code":"$ a = $ mth - ( ( $ m - 1 ) * $ d ) ;"}
{"text":"Return pair","code":"return array ( $ a , $ d ) ; }"}
{"text":"Function to calculate value sum of first p numbers of the series","code":"function findSum ( $ m , $ n , $ mth , $ nth , $ p ) {"}
{"text":"First calculate value of a and d","code":"$ ad = findingValues ( $ m , $ n , $ mth , $ nth ) ; $ a = $ ad [ 0 ] ; $ d = $ ad [ 1 ] ;"}
{"text":"Calculate the sum by using formula","code":"$ sum = ( $ p * ( 2 * $ a + ( $ p - 1 ) * $ d ) ) \/ 2 ;"}
{"text":"Return the sum","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ m = 6 ; $ n = 10 ; $ mTerm = 12 ; $ nTerm = 20 ; $ p = 5 ; echo findSum ( $ m , $ n , $ mTerm , $ nTerm , $ p ) ; ? >"}
{"text":"Function to print powerful integers","code":"< ? php function powerfulIntegers ( $ x , $ y , $ bound ) {"}
{"text":"Set is used to store distinct numbers in sorted order","code":"$ s = array ( ) ; $ powersOfY = array ( ) ;"}
{"text":"Store all the powers of y < bound in a vector to avoid calculating them again and again","code":"array_push ( $ powersOfY , 1 ) ; $ i = $ y ; while ( $ i < $ bound && $ y != 1 ) { array_push ( $ powersOfY , $ i ) ; $ i *= $ y ; } $ i = 0 ; while ( true ) {"}
{"text":"x ^ i","code":"$ xPowI = pow ( $ x , $ i ) ; for ( $ j = 0 ; $ j < count ( $ powersOfY ) ; $ j ++ ) { $ num = $ xPowI + $ powersOfY [ $ j ] ;"}
{"text":"If num is within limits insert it into the set","code":"if ( $ num <= $ bound ) array_push ( $ s , $ num ) ;"}
{"text":"Break out of the inner loop","code":"else break ; }"}
{"text":"Adding any number to it will be out of bounds","code":"if ( $ xPowI >= $ bound $ x == 1 ) break ;"}
{"text":"Increment i","code":"$ i += 1 ; } $ s = array_unique ( $ s ) ; sort ( $ s ) ;"}
{"text":"Print the contents of the set","code":"foreach ( $ s as & $ itr ) print ( $ itr . \" \" ) ; }"}
{"text":"Driver code","code":"$ x = 2 ; $ y = 3 ; $ bound = 10 ;"}
{"text":"Print powerful integers","code":"powerfulIntegers ( $ x , $ y , $ bound ) ; ? >"}
{"text":"Function to find out the number of candies every person received","code":"< ? php function candies ( $ n , $ k ) {"}
{"text":"Count number of complete turns","code":"$ count = 0 ;"}
{"text":"Get the last term","code":"$ ind = 1 ;"}
{"text":"Stores the number of candies","code":"$ arr = array_fill ( 0 , $ k , 0 ) ; while ( $ n ) {"}
{"text":"Last term of last and current series","code":"$ f1 = ( $ ind - 1 ) * $ k ; $ f2 = $ ind * $ k ;"}
{"text":"Sum of current and last series","code":"$ sum1 = floor ( ( $ f1 * ( $ f1 + 1 ) ) \/ 2 ) ; $ sum2 = floor ( ( $ f2 * ( $ f2 + 1 ) ) \/ 2 ) ;"}
{"text":"Sum of current series only","code":"$ res = $ sum2 - $ sum1 ;"}
{"text":"If sum of current is less than N","code":"if ( $ res <= $ n ) { $ count ++ ; $ n -= $ res ; $ ind ++ ; }"}
{"text":"else Individually distribute","code":"{ $ i = 0 ;"}
{"text":"First term","code":"$ term = ( ( $ ind - 1 ) * $ k ) + 1 ;"}
{"text":"Distribute candies till there","code":"while ( $ n > 0 ) {"}
{"text":"Candies available","code":"if ( $ term <= $ n ) { $ arr [ $ i ++ ] = $ term ; $ n -= $ term ; $ term ++ ; }"}
{"text":"Not available","code":"else { $ arr [ $ i ++ ] = $ n ; $ n = 0 ; } } } }"}
{"text":"Count the total candies","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ arr [ $ i ] += floor ( ( $ count * ( $ i + 1 ) ) + ( $ k * ( $ count * ( $ count - 1 ) ) \/ 2 ) ) ;"}
{"text":"Print the total candies","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 10 ; $ k = 3 ; candies ( $ n , $ k ) ; ? >"}
{"text":"Function to find out the number of candies every person received","code":"< ? php function candies ( $ n , $ k ) {"}
{"text":"Count number of complete turns","code":"$ count = 0 ;"}
{"text":"Get the last term","code":"$ ind = 1 ;"}
{"text":"Stores the number of candies","code":"$ arr = array_fill ( 0 , $ k , 0 ) ; $ low = 0 ; $ high = $ n ;"}
{"text":"Do a binary search to find the number whose sum is less than N .","code":"while ( $ low <= $ high ) {"}
{"text":"Get mide","code":"$ mid = ( $ low + $ high ) >> 1 ; $ sum = ( $ mid * ( $ mid + 1 ) ) >> 1 ;"}
{"text":"If sum is below N","code":"if ( $ sum <= $ n ) {"}
{"text":"Find number of complete turns","code":"$ count = ( int ) ( $ mid \/ $ k ) ;"}
{"text":"Right halve","code":"$ low = $ mid + 1 ; } else {"}
{"text":"Left halve","code":"$ high = $ mid - 1 ; } }"}
{"text":"Last term of last complete series","code":"$ last = ( $ count * $ k ) ;"}
{"text":"Subtract the sum till","code":"$ n -= ( int ) ( ( $ last * ( $ last + 1 ) ) \/ 2 ) ; $ i = 0 ;"}
{"text":"First term of incomplete series","code":"$ term = ( $ count * $ k ) + 1 ; while ( $ n ) { if ( $ term <= $ n ) { $ arr [ $ i ++ ] = $ term ; $ n -= $ term ; $ term ++ ; } else { $ arr [ $ i ] += $ n ; $ n = 0 ; } }"}
{"text":"Count the total candies","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ arr [ $ i ] += ( $ count * ( $ i + 1 ) ) + ( int ) ( $ k * ( $ count * ( $ count - 1 ) ) \/ 2 ) ;"}
{"text":"Print the total candies","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 7 ; $ k = 4 ; candies ( $ n , $ k ) ; ? >"}
{"text":"Function to return the minimum number divisible by 3 formed by the given digits","code":"< ? php function printSmallest ( $ a ) {"}
{"text":"Sort the given array in ascending","code":"sort ( $ a ) ;"}
{"text":"Check if any single digit is divisible by 3","code":"for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { if ( $ a [ $ i ] % 3 == 0 ) return $ a [ $ i ] ; }"}
{"text":"Check if any two digit number formed by the given digits is divisible by 3 starting from the minimum","code":"for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { for ( $ j = 0 ; $ j < 3 ; $ j ++ ) {"}
{"text":"Generate the two digit number","code":"$ num = ( $ a [ $ i ] * 10 ) + $ a [ $ j ] ; if ( $ num % 3 == 0 ) return $ num ; } }"}
{"text":"If none of the above is true , we can form three digit number by taking a [ 0 ] three times .","code":"return $ a [ 0 ] * 100 + $ a [ 0 ] * 10 + $ a [ 0 ] ; }"}
{"text":"Driver code","code":"$ arr = array ( 7 , 7 , 1 ) ; echo printSmallest ( $ arr ) ; ? >"}
{"text":"Function to update and print the matrix after performing queries","code":"< ? php function updateMatrix ( $ n , $ q , $ mat ) { for ( $ i = 0 ; $ i < sizeof ( $ q ) ; $ i ++ ) { $ X1 = $ q [ $ i ] [ 0 ] ; $ Y1 = $ q [ $ i ] [ 1 ] ; $ X2 = $ q [ $ i ] [ 2 ] ; $ Y2 = $ q [ $ i ] [ 3 ] ;"}
{"text":"Add 1 to the first element of the sub - matrix","code":"$ mat [ $ X1 ] [ $ Y1 ] ++ ;"}
{"text":"If there is an element after the last element of the sub - matrix then decrement it by 1","code":"if ( $ Y2 + 1 < $ n ) $ mat [ $ X2 ] [ $ Y2 + 1 ] -- ; else if ( $ X2 + 1 < $ n ) $ mat [ $ X2 + 1 ] [ 0 ] -- ; }"}
{"text":"Calculate the running sum","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ sum += $ mat [ $ i ] [ $ j ] ;"}
{"text":"Print the updated element","code":"echo ( $ sum . \" \" ) ; }"}
{"text":"Next line","code":"echo ( \" STRNEWLINE \" ) ; } }"}
{"text":"Size of the matrix","code":"$ n = 5 ; $ mat = array_fill ( 0 , $ n , array_fill ( 0 , $ n , 0 ) ) ;"}
{"text":"Queries","code":"$ q = array ( array ( 0 , 0 , 1 , 2 ) , array ( 1 , 2 , 3 , 4 ) , array ( 1 , 4 , 3 , 4 ) ) ; updateMatrix ( $ n , $ q , $ mat ) ; ? >"}
{"text":"Utility function to print the contents of the array","code":"< ? php function printArr ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Function to replace the maximum element from the array with the coefficient of range of the array","code":"function replaceMax ( $ arr , $ n ) {"}
{"text":"Maximum element from the array","code":"$ max = max ( $ arr ) ;"}
{"text":"Minimum element from the array","code":"$ min = min ( $ arr ) ;"}
{"text":"Calculate the coefficient of range for the array","code":"$ range = $ max - $ min ; $ coeffOfRange = round ( $ range \/ ( $ max + $ min ) , 6 ) ;"}
{"text":"Assuming all the array elements are distinct . Replace the maximum element with the coefficient of range of the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] == $ max ) { $ arr [ $ i ] = $ coeffOfRange ; break ; } }"}
{"text":"Print the updated array","code":"printArr ( $ arr , $ n ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 15 , 16 , 10 , 9 , 6 , 7 , 17 ) ; $ n = count ( $ arr ) ; replaceMax ( $ arr , $ n ) ; ? >"}
{"text":"print the numbers after dividing them by their common factors","code":"< ? php function divide ( $ a , $ b ) {"}
{"text":"iterate from 1 to minimum of a and b","code":"for ( $ i = 2 ; $ i <= min ( $ a , $ b ) ; $ i ++ ) {"}
{"text":"if i is the common factor of both the numbers","code":"while ( $ a % $ i == 0 && $ b % $ i == 0 ) { $ a = $ a \/ $ i ; $ b = $ b \/ $ i ; } } echo \" A = \" , \u2581 $ a , \u2581 \" , B = \" , \u2581 $ b , \u2581 \" \" }"}
{"text":"Driver code","code":"$ A = 10 ; $ B = 15 ;"}
{"text":"divide A and B by their common factors","code":"divide ( $ A , $ B ) ; ? >"}
{"text":"Function to calculate gcd of two numbers","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to calculate all common divisors of two given numbers a , b -- > input integer numbers","code":"function commDiv ( $ a , $ b ) {"}
{"text":"find gcd of a , b","code":"$ n = gcd ( $ a , $ b ) ; $ a = ( int ) ( $ a \/ $ n ) ; $ b = ( int ) ( $ b \/ $ n ) ; echo \" A = \" \u2581 . \u2581 $ a \u2581 . STRNEWLINE \" , B = \" \u2581 . \u2581 $ b \u2581 . \u2581 \" \" }"}
{"text":"Driver code","code":"$ a = 10 ; $ b = 15 ; commDiv ( $ a , $ b ) ; ? >"}
{"text":"Function to return the minimum difference between N and a power of 2","code":"< ? php function minAbsDiff ( $ n ) {"}
{"text":"Power of 2 closest to n on its left","code":"$ left = 1 << ( ( floor ( log ( $ n ) \/ log ( 2 ) ) ) ) ;"}
{"text":"Power of 2 closest to n on its right","code":"$ right = $ left * 2 ;"}
{"text":"Return the minimum abs difference","code":"return min ( ( $ n - $ left ) , ( $ right - $ n ) ) ; }"}
{"text":"Driver code","code":"$ n = 15 ; echo minAbsDiff ( $ n ) ; ? >"}
{"text":"Function to return the probability of the winner","code":"< ? php function find_probability ( $ p , $ q , $ r , $ s ) { $ t = ( 1 - $ p \/ $ q ) * ( 1 - $ r \/ $ s ) ; $ ans = ( $ p \/ $ q ) \/ ( 1 - $ t ) ; return $ ans ; }"}
{"text":"Driver Code","code":"$ p = 1 ; $ q = 2 ; $ r = 1 ; $ s = 2 ;"}
{"text":"Will print 9 digits after the decimal point","code":"$ res = find_probability ( $ p , $ q , $ r , $ s ) ; $ update = number_format ( $ res , 7 ) ; echo $ update ; ? >"}
{"text":"Function to print k numbers which are powers of two and whose sum is equal to n","code":"< ? php function FindAllElements ( $ n , $ k ) {"}
{"text":"Initialising the sum with k","code":"$ sum = $ k ;"}
{"text":"Initialising an array A with k elements and filling all elements with 1","code":"$ A = array_fill ( 0 , $ k , 1 ) ; for ( $ i = $ k - 1 ; $ i >= 0 ; -- $ i ) {"}
{"text":"Iterating A [ ] from k - 1 to 0","code":"while ( $ sum + $ A [ $ i ] <= $ n ) {"}
{"text":"Update sum and A [ i ] till sum + A [ i ] is less than equal to n","code":"$ sum += $ A [ $ i ] ; $ A [ $ i ] *= 2 ; } }"}
{"text":"Impossible to find the combination","code":"if ( $ sum != $ n ) { echo \" Impossible \" ; }"}
{"text":"Possible solution is stored in A [ ]","code":"else { for ( $ i = 0 ; $ i < $ k ; ++ $ i ) echo $ A [ $ i ] , ' \u2581 ' ; } }"}
{"text":"Driver code","code":"$ n = 12 ; $ k = 6 ; FindAllElements ( $ n , $ k ) ; ? >"}
{"text":"Function to remove zeroes","code":"< ? php function removeZero ( $ n ) {"}
{"text":"Initialize result to zero holds the Result after removing zeroes from no","code":"$ res = 0 ;"}
{"text":"Initialize variable d to 1 that holds digits of no","code":"$ d = 1 ;"}
{"text":"Loop while n is greater then zero","code":"while ( $ n > 0 ) {"}
{"text":"Check if n mod 10 is not equal to zero","code":"if ( $ n % 10 != 0 ) {"}
{"text":"store the result by removing zeroes and increment d by 10","code":"$ res += ( $ n % 10 ) * $ d ; $ d *= 10 ; }"}
{"text":"Go to the next digit","code":"$ n = floor ( $ n \/ 10 ) ; }"}
{"text":"Return the result","code":"return $ res ; }"}
{"text":"Function to check if sum is true after Removing all zeroes .","code":"function isEqual ( $ a , $ b ) {"}
{"text":"Call removeZero ( ) for both sides and check whether they are equal After removing zeroes .","code":"if ( removeZero ( $ a ) + removeZero ( $ b ) == removeZero ( $ a + $ b ) ) return true ; return false ; }"}
{"text":"Driver code","code":"$ a = 105 ; $ b = 106 ; if ( isEqual ( $ a , $ b ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP implementation of above approach","code":"< ? php function sumArray ( $ arr , $ n ) {"}
{"text":"Allocate memory for temporary arrays leftSum [ ] , rightSum [ ] and Sum [ ]","code":"$ leftSum = array_fill ( 0 , $ n , 0 ) ; $ rightSum = array_fill ( 0 , $ n , 0 ) ; $ Sum = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"Left most element of left array is always 0","code":"$ leftSum [ 0 ] = 0 ;"}
{"text":"Rightmost most element of right array is always 0","code":"$ rightSum [ $ n - 1 ] = 0 ;"}
{"text":"Construct the left array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ leftSum [ $ i ] = $ arr [ $ i - 1 ] + $ leftSum [ $ i - 1 ] ;"}
{"text":"Construct the right array","code":"for ( $ j = $ n - 2 ; $ j >= 0 ; $ j -- ) $ rightSum [ $ j ] = $ arr [ $ j + 1 ] + $ rightSum [ $ j + 1 ] ;"}
{"text":"Construct the sum array using left [ ] and right [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ Sum [ $ i ] = $ leftSum [ $ i ] + $ rightSum [ $ i ] ;"}
{"text":"print the constructed prod array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ Sum [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 6 , 4 , 8 , 9 ) ; $ n = count ( $ arr ) ; sumArray ( $ arr , $ n ) ; ? >"}
{"text":"Function gives the required answer","code":"< ? php function minimumX ( $ n , $ k ) { $ mini = PHP_INT_MAX ;"}
{"text":"Iterate for all the factors","code":"for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) {"}
{"text":"Check if i is a factor","code":"if ( $ n % $ i == 0 ) { $ fir = $ i ; $ sec = ( int ) $ n \/ $ i ; $ num1 = $ fir * $ k + $ sec ;"}
{"text":"Consider i to be A and n \/ i to be B","code":"$ res = ( int ) ( $ num1 \/ $ k ) * ( $ num1 % $ k ) ; if ( $ res == $ n ) $ mini = min ( $ num1 , $ mini ) ; $ num2 = $ sec * $ k + $ fir ; $ res = ( int ) ( $ num2 \/ $ k ) * ( $ num2 % $ k ) ;"}
{"text":"Consider i to be B and n \/ i to be A","code":"if ( $ res == $ n ) $ mini = min ( $ num2 , $ mini ) ; } } return $ mini ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ k = 6 ; echo minimumX ( $ n , $ k ) , \" STRNEWLINE \" ; $ n = 5 ; $ k = 5 ; echo minimumX ( $ n , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"This function gives the required answer","code":"< ? php function minimumX ( $ n , $ k ) { $ ans = PHP_INT_MAX ;"}
{"text":"Iterate over all possible remainders","code":"for ( $ rem = $ k - 1 ; $ rem > 0 ; $ rem -- ) {"}
{"text":"it must divide n","code":"if ( $ n % $ rem == 0 ) $ ans = min ( $ ans , $ rem + ( $ n \/ $ rem ) * $ k ) ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ k = 6 ; echo minimumX ( $ n , $ k ) , \" STRNEWLINE \" ; $ n = 5 ; $ k = 5 ; echo minimumX ( $ n , $ k ) ; ? >"}
{"text":"Function to return nth Hermite number","code":"< ? php function getHermiteNumber ( $ n ) {"}
{"text":"Base conditions","code":"if ( $ n == 0 ) return 1 ; if ( $ n == 1 ) return 0 ; else return -2 * ( $ n - 1 ) * getHermiteNumber ( $ n - 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 6 ;"}
{"text":"Print nth Hermite number","code":"echo getHermiteNumber ( $ n ) ; ? >"}
{"text":"Function to print the required numbers","code":"< ? php function find ( $ n ) {"}
{"text":"Suppose b = n and we want a % b = 0 and also ( a \/ b ) < n so a = b * ( n - 1 )","code":"$ b = $ n ; $ a = $ b * ( $ n - 1 ) ;"}
{"text":"Special case if n = 1 we get a = 0 so ( a * b ) < n","code":"if ( $ a * $ b > $ n && $ a \/ $ b < $ n ) { echo \" a = \" \u2581 , \u2581 $ a \u2581 , \u2581 \" , b = \" }"}
{"text":"If no pair satisfies the conditions","code":"else echo -1 ; }"}
{"text":"Driver code","code":"$ n = 10 ; find ( $ n ) ; ? >"}
{"text":"Function to check if a number is perfect square or not","code":"< ? php function isPerfect ( $ N ) { if ( ( sqrt ( $ N ) - floor ( sqrt ( $ N ) ) ) != 0 ) return false ; return true ; }"}
{"text":"Function to find the closest perfect square taking minimum steps to reach from a number","code":"function getClosestPerfectSquare ( $ N ) { if ( isPerfect ( $ N ) ) { echo $ N , \" \u2581 \" , \"0\" , \" STRNEWLINE \" ; return ; }"}
{"text":"Variables to store first perfect square number above and below N","code":"$ aboveN = -1 ; $ belowN = -1 ; $ n1 ;"}
{"text":"Finding first perfect square number greater than N","code":"$ n1 = $ N + 1 ; while ( true ) { if ( isPerfect ( $ n1 ) ) { $ aboveN = $ n1 ; break ; } else $ n1 ++ ; }"}
{"text":"Finding first perfect square number less than N","code":"$ n1 = $ N - 1 ; while ( true ) { if ( isPerfect ( $ n1 ) ) { $ belowN = $ n1 ; break ; } else $ n1 -- ; }"}
{"text":"Variables to store the differences","code":"$ diff1 = $ aboveN - $ N ; $ diff2 = $ N - $ belowN ; if ( $ diff1 > $ diff2 ) echo $ belowN , \" \u2581 \" , $ diff2 ; else echo $ aboveN , \" \u2581 \" , $ diff1 ; }"}
{"text":"Driver code","code":"$ N = 1500 ; getClosestPerfectSquare ( $ N ) ; ? >"}
{"text":"Function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to convert the obtained fraction into it 's simplest form","code":"function lowest ( & $ den3 , & $ num3 ) {"}
{"text":"Finding gcd of both terms","code":"$ common_factor = gcd ( $ num3 , $ den3 ) ;"}
{"text":"Converting both terms into simpler terms by dividing them by common factor","code":"$ den3 = ( int ) $ den3 \/ $ common_factor ; $ num3 = ( int ) $ num3 \/ $ common_factor ; }"}
{"text":"Function to add two fractions","code":"function addFraction ( $ num1 , $ den1 , $ num2 , $ den2 , & $ num3 , & $ den3 ) {"}
{"text":"Finding gcd of den1 and den2","code":"$ den3 = gcd ( $ den1 , $ den2 ) ;"}
{"text":"Denominator of final fraction obtained finding LCM of den1 and den2 LCM * GCD = a * b","code":"$ den3 = ( $ den1 * $ den2 ) \/ $ den3 ;"}
{"text":"Changing the fractions to have same denominator Numerator of the final fraction obtained","code":"$ num3 = ( $ num1 ) * ( $ den3 \/ $ den1 ) + ( $ num2 ) * ( $ den3 \/ $ den2 ) ;"}
{"text":"Calling function to convert final fraction into it 's  simplest form","code":"lowest ( $ den3 , $ num3 ) ; }"}
{"text":"Driver Code","code":"$ num1 = 1 ; $ den1 = 500 ; $ num2 = 2 ; $ den2 = 1500 ; $ den3 ; $ num3 ; addFraction ( $ num1 , $ den1 , $ num2 , $ den2 , $ num3 , $ den3 ) ; echo $ num1 , \" \/ \" , $ den1 , \" \u2581 + \u2581 \" , $ num2 , \" \/ \" , $ den2 , \" \u2581 is \u2581 equal \u2581 to \u2581 \" , $ num3 , \" \/ \" , $ den3 , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the largest divisor not divisible by any perfect square greater than 1","code":"< ? php function findLargestDivisor ( $ n ) { for ( $ i = 2 ; $ i < sqrt ( $ n ) + 1 ; $ i ++ ) {"}
{"text":"If the number is divisible by i * i , then remove one i","code":"while ( $ n % ( $ i * $ i ) == 0 ) { $ n = $ n \/ $ i ; } }"}
{"text":"Now all squares are removed from n","code":"return $ n ; }"}
{"text":"Driver Code","code":"$ n = 12 ; echo ( findLargestDivisor ( $ n ) ) ; echo ( \" STRNEWLINE \" ) ; $ n = 97 ; echo ( findLargestDivisor ( $ n ) ) ; ? >"}
{"text":"Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression","code":"< ? php function checkIsAP ( $ arr , $ n ) { if ( $ n == 1 ) return true ;"}
{"text":"Sort array","code":"sort ( $ arr ) ;"}
{"text":"After sorting , difference between consecutive elements must be same .","code":"$ d = $ arr [ 1 ] - $ arr [ 0 ] ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] - $ arr [ $ i - 1 ] != $ d ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ arr = array ( 20 , 15 , 5 , 0 , 10 ) ; $ n = count ( $ arr ) ; if ( checkIsAP ( $ arr , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns true if n is Triperfect","code":"< ? php function isTriPerfect ( $ n ) {"}
{"text":"To store sum of divisors . Adding 1 and n since they are divisors of n .","code":"$ sum = 1 + $ n ;"}
{"text":"Find all divisors and add them","code":"$ i = 2 ; while ( $ i * $ i <= $ n ) { if ( $ n % $ i == 0 ) { if ( $ n \/ $ i == $ i ) $ sum = $ sum + $ i ; else $ sum = $ sum + $ i + $ n \/ $ i ; } $ i += 1 ; }"}
{"text":"If sum of divisors is equal to 3 * n , then n is a Triperfect number","code":"if ( $ sum == 3 * $ n and $ n != 1 ) return true ; else false ; }"}
{"text":"Driver Code","code":"$ n = 120 ; if ( isTriPerfect ( $ n ) ) echo $ n . \" \u2581 is \u2581 a \u2581 Triperfect \u2581 number \" ; else echo $ n . \" \u2581 is \u2581 not \u2581 a \u2581 Triperfect \u2581 number \" ; ? >"}
{"text":"Function to calculate the sum of numbers divisible by X or Y","code":"< ? php function sum ( $ N , $ X , $ Y ) { $ S1 ; $ S2 ; $ S3 ; $ S1 = floor ( ( ( int ) $ N \/ $ X ) ) * ( 2 * $ X + ( int ) ( ( int ) $ N \/ $ X - 1 ) * $ X ) \/ 2 ; $ S2 = floor ( ( ( int ) $ N \/ $ Y ) ) * ( 2 * $ Y + ( int ) ( ( int ) $ N \/ $ Y - 1 ) * $ Y ) \/ 2 ; $ S3 = floor ( ( ( int ) $ N \/ ( $ X * $ Y ) ) ) * ( 2 * ( $ X * $ Y ) + ( ( int ) $ N \/ ( $ X * $ Y ) - 1 ) * ( int ) ( $ X * $ Y ) ) \/ 2 ; return ceil ( $ S1 + ( $ S2 - $ S3 ) ) ; }"}
{"text":"Driver code","code":"$ N = 14 ; $ X = 3 ; $ Y = 5 ; echo sum ( $ N , $ X , $ Y ) ; #This  code is contributed by ajit. NEW_LINE ? >"}
{"text":"Function to count the number within a range whose prime factors are only 2 and 3","code":"< ? php function findTwoThreePrime ( $ l , $ r ) {"}
{"text":"Start with 2 so that 1 doesn 't get counted","code":"if ( $ l == 1 ) $ l ++ ; $ count = 0 ; for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) { $ num = $ i ;"}
{"text":"While num is divisible by 2 , divide it by 2","code":"while ( $ num % 2 == 0 ) $ num \/= 2 ;"}
{"text":"While num is divisible by 3 , divide it by 3","code":"while ( $ num % 3 == 0 ) $ num \/= 3 ;"}
{"text":"If num got reduced to 1 then it has only 2 and 3 as prime factors","code":"if ( $ num == 1 ) $ count ++ ; } return $ count ; }"}
{"text":"Driver code","code":"$ l = 1 ; $ r = 10 ; echo findTwoThreePrime ( $ l , $ r ) ; ? >"}
{"text":"Function to return the required number","code":"< ? php function getNumber ( $ s ) { $ number_of_digits = strlen ( $ s ) ; $ freq = array_fill ( 0 , 10 , 0 ) ;"}
{"text":"Count the frequency of each digit","code":"for ( $ i = 0 ; $ i < $ number_of_digits ; $ i ++ ) { if ( $ s [ $ i ] == '1' $ s [ $ i ] == '2' $ s [ $ i ] == '3' $ s [ $ i ] == '5' $ s [ $ i ] == '7' ) { $ freq [ ord ( $ s [ $ i ] ) - 48 ] += 1 ; }"}
{"text":"4 ! can be expressed as 2 ! * 2 ! * 3 !","code":"if ( $ s [ $ i ] == '4' ) { $ freq [ 2 ] += 2 ; $ freq [ 3 ] ++ ; }"}
{"text":"6 ! can be expressed as 5 ! * 3 !","code":"if ( $ s [ $ i ] == '6' ) { $ freq [ 5 ] ++ ; $ freq [ 3 ] ++ ; }"}
{"text":"8 ! can be expressed as 7 ! * 2 ! * 2 ! * 2 !","code":"if ( $ s [ $ i ] == '8' ) { $ freq [ 7 ] ++ ; $ freq [ 2 ] += 3 ; }"}
{"text":"9 ! can be expressed as 7 ! * 3 ! * 3 ! * 2 !","code":"if ( $ s [ $ i ] == '9' ) { $ freq [ 7 ] ++ ; $ freq [ 3 ] += 2 ; $ freq [ 2 ] ++ ; } }"}
{"text":"To store the required number","code":"$ t = \" \" ;"}
{"text":"If number has only either 1 and 0 as its digits","code":"if ( $ freq [ 1 ] == $ number_of_digits || $ freq [ 0 ] == $ number_of_digits || ( $ freq [ 0 ] + $ freq [ 1 ] ) == $ number_of_digits ) { return $ s ; } else {"}
{"text":"Generate the greatest number possible","code":"for ( $ i = 9 ; $ i >= 2 ; $ i -- ) { $ ctr = $ freq [ $ i ] ; while ( $ ctr -- ) { $ t . = chr ( $ i + 48 ) ; } } return $ t ; } }"}
{"text":"Driver code","code":"$ s = \"1280\" ; echo getNumber ( $ s ) ; ? >"}
{"text":"Iterative function to reverse digits of num","code":"< ? php function reversDigits ( $ num ) { $ rev_num = 0 ; while ( $ num > 0 ) { $ rev_num = ( $ rev_num * 10 ) + ( $ num % 10 ) ; $ num = ( int ) ( $ num \/ 10 ) ; } return $ rev_num ; }"}
{"text":"Function to print first N Icanobif Numbers","code":"function icanobifNumbers ( $ N ) {"}
{"text":"Initialize first , second numbers","code":"$ first = 0 ; $ second = 1 ; if ( $ N == 1 ) echo $ first ; else if ( $ N == 2 ) echo $ first , \" \u2581 \" , $ second ; else {"}
{"text":"Print first two numbers","code":"echo $ first , \" \" \u2581 , \u2581 $ second , \u2581 \" \" for ( $ i = 3 ; $ i <= $ N ; $ i ++ ) {"}
{"text":"Reversing digit of previous two terms and adding them","code":"$ x = reversDigits ( $ first ) ; $ y = reversDigits ( $ second ) ; echo ( $ x + $ y ) , \" \u2581 \" ; $ temp = $ second ; $ second = $ x + $ y ; $ first = $ temp ; } } }"}
{"text":"Driver Code","code":"$ N = 12 ; icanobifNumbers ( $ N ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function addNDigits ( $ a , $ b , $ n ) { $ num = $ a ;"}
{"text":"Try all digits from ( 0 to 9 )","code":"for ( $ i = 0 ; $ i <= 9 ; $ i ++ ) { $ tmp = $ a * 10 + $ i ; if ( $ tmp % $ b == 0 ) { $ a = $ tmp ; break ; } }"}
{"text":"Fails in the first move itself","code":"if ( $ num == $ a ) return -1 ;"}
{"text":"Add ( n - 1 ) 0 's","code":"for ( $ j = 0 ; $ j < $ n - 1 ; $ j ++ ) $ a *= 10 ; return $ a ; }"}
{"text":"Driver Code","code":"$ a = 5 ; $ b = 3 ; $ n = 3 ; echo addNDigits ( $ a , $ b , $ n ) ;"}
{"text":"Function to ind number of Triplets 1 <= a <= b <= c <= n , Such that a ^ 2 + b ^ 2 = c ^ 2","code":"< ? php function Triplets ( $ n ) {"}
{"text":"to store required answer","code":"$ ans = 0 ;"}
{"text":"run nested loops for first two numbers .","code":"for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) { for ( $ j = $ i ; $ j <= $ n ; ++ $ j ) { $ x = $ i * $ i + $ j * $ j ;"}
{"text":"third number","code":"$ y = ( int ) sqrt ( $ x ) ;"}
{"text":"check if third number is perfect square and less than n","code":"if ( $ y * $ y == $ x && $ y <= $ n ) ++ $ ans ; } } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 10 ;"}
{"text":"function call","code":"echo Triplets ( $ n ) ; ? >"}
{"text":"Function to calculate the sum of the digits of n in the given base","code":"< ? php function solve ( $ n , $ base ) {"}
{"text":"Sum of digits","code":"$ sum = 0 ; while ( $ n > 0 ) {"}
{"text":"Digit of n in the given base","code":"$ remainder = $ n % $ base ;"}
{"text":"Add the digit","code":"$ sum += $ remainder ; $ n = $ n \/ $ base ; } return $ sum ; }"}
{"text":"Function to calculate the sum of digits of n in bases from 2 to n \/ 2","code":"function SumsOfDigits ( $ n ) {"}
{"text":"to store digit sum in all bases","code":"$ sum = 0 ;"}
{"text":"function call for multiple bases","code":"for ( $ base = 2 ; $ base <= $ n \/ 2 ; ++ $ base ) $ sum += solve ( $ n , $ base ) ; echo $ sum ; }"}
{"text":"Driver Code","code":"$ n = 8 ; SumsOfDigits ( $ n ) ; ? >"}
{"text":"Function to check if a number is perfect cube number or not","code":"< ? php function checkPerfectcube ( $ n ) {"}
{"text":"takes the sqrt of the number","code":"$ d = ( int ) round ( pow ( $ n , 1 \/ 3 ) ) ;"}
{"text":"checks if it is a perfect cube number","code":"if ( $ d * $ d * $ d == $ n ) return true ; return false ; }"}
{"text":"Function to find the largest non perfect cube number in the array","code":"function largestNonPerfectcubeNumber ( $ a , $ n ) {"}
{"text":"stores the maximum of all perfect cube numbers","code":"$ maxi = -1 ;"}
{"text":"Traverse all elements in the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"store the maximum if current element is a non perfect cube","code":"if ( ! checkPerfectcube ( $ a [ $ i ] ) ) $ maxi = max ( $ a [ $ i ] , $ maxi ) ; } return $ maxi ; }"}
{"text":"Driver Code","code":"$ a = array ( 16 , 64 , 25 , 2 , 3 , 10 ) ; $ n = count ( $ a ) ; echo largestNonPerfectcubeNumber ( $ a , $ n ) ; ? >"}
{"text":"Function to find if number N can be represented as sum of a ' s \u2581 and \u2581 b ' s","code":"< ? php function checkIfPossibleRec ( $ x , $ a , $ b , $ isPossible , $ n ) {"}
{"text":"base condition","code":"if ( $ x > $ n ) return ;"}
{"text":"if x is already visited","code":"if ( $ isPossible == true ) return ;"}
{"text":"set x as possible","code":"$ isPossible [ $ x ] = true ;"}
{"text":"recursive call","code":"checkIfPossibleRec ( $ x + $ a , $ a , $ b , $ isPossible , $ n ) ; checkIfPossibleRec ( $ x + $ b , $ a , $ b , $ isPossible , $ n ) ; } function checkPossible ( $ n , $ a , $ b ) { $ isPossible [ $ n + 1 ] = array ( false ) ; checkIfPossibleRec ( 0 , $ a , $ b , $ isPossible , $ n ) ; return $ isPossible ; }"}
{"text":"Driver Code","code":"$ a = 3 ; $ b = 7 ; $ n = 8 ; if ( checkPossible ( $ a , $ b , $ n ) ) echo \" No \" ; else echo \" Yes \" ; ? >"}
{"text":"Function to return the sum of all odd natural numbers","code":"< ? php function sumOdd ( $ n ) { $ terms = ( int ) ( $ n + 1 ) \/ 2 ; $ sum = $ terms * $ terms ; return $ sum ; }"}
{"text":"Function to return the sum of all odd numbers in range L and R","code":"function suminRange ( $ l , $ r ) { return sumOdd ( $ r ) - sumOdd ( $ l - 1 ) ; }"}
{"text":"Driver Code","code":"$ l = 2 ; $ r = 5 ; echo \" Sum \u2581 of \u2581 odd \u2581 natural \u2581 numbers \u2581 from \u2581 L \u2581 to \u2581 R \u2581 is \u2581 \" , suminRange ( $ l , $ r ) ; ? >"}
{"text":"Function to calculate gcd of two numbers","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to calculate all common divisors of two given numbers a , b -- > input integer numbers","code":"function sumcommDiv ( $ a , $ b ) {"}
{"text":"find gcd of a , b","code":"$ n = gcd ( $ a , $ b ) ;"}
{"text":"Find the sum of divisors of n .","code":"$ sum = 0 ; for ( $ i = 1 ; $ i <= sqrt ( $ n ) ; $ i ++ ) {"}
{"text":"if ' i ' is factor of n","code":"if ( $ n % $ i == 0 ) {"}
{"text":"check if divisors are equal","code":"if ( $ n \/ $ i == $ i ) $ sum += $ i ; else $ sum += ( $ n \/ $ i ) + $ i ; } } return $ sum ; }"}
{"text":"Driver program to run the case","code":"$ a = 10 ; $ b = 15 ; echo \" Sum \u2581 = \u2581 \" , sumcommDiv ( $ a , $ b ) ; ? >"}
{"text":"Function to check if a number is formed by Concatenation of 1 , 14 or 144 only","code":"< ? php function checkNumber ( $ N ) { $ temp = $ N ; while ( $ temp > 0 ) {"}
{"text":"check for each possible digit if given number consist other then 1 , 14 , 144 print NO else print YES","code":"if ( $ temp % 1000 == 144 ) $ temp \/= 1000 ; else if ( $ temp % 100 == 14 ) $ temp \/= 100 ; else if ( $ temp % 10 == 1 ) $ temp \/= 10 ; else { return \" YES \" ; } } return \" NO \" ; }"}
{"text":"Driver Code","code":"$ N = 1414 ; echo checkNumber ( $ N ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function getResult ( $ n ) { if ( $ n & 1 ) return 1 ; return -1 ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo getResult ( $ n ) ; ? >"}
{"text":"Function to return the smallest string","code":"< ? php function findAandB ( $ N ) { $ val = $ N * $ N - 4.0 * $ N ;"}
{"text":"Not possible","code":"if ( $ val < 0 ) { echo \" NO \" ; return ; }"}
{"text":"find a and b","code":"$ a = ( $ N + sqrt ( $ val ) ) \/ 2.0 ; $ b = ( $ N - sqrt ( $ val ) ) \/ 2.0 ; echo \" a \u2581 = \u2581 \" , $ a , \" STRNEWLINE \" ; echo \" b \u2581 = \u2581 \" , $ b , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ N = 69.0 ; findAandB ( $ N ) ; ? >"}
{"text":"Function to find minimum operations required to make array beautiful","code":"< ? php function minOperations ( $ A , $ n ) { if ( $ n & 1 ) return -1 ; $ zeros = 0 ; $ consZeros = 0 ; $ ones = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ A [ $ i ] == 0 ? $ zeros ++ : $ ones ++ ;"}
{"text":"counting consecutive zeros .","code":"if ( ( $ i + 1 ) < $ n ) { if ( $ A [ $ i ] == 0 && $ A [ $ i + 1 ] == 0 ) $ consZeros ++ ; } }"}
{"text":"check that start and end are same","code":"if ( $ A [ 0 ] == $ A [ $ n - 1 ] && $ A [ 0 ] == 0 ) $ consZeros ++ ;"}
{"text":"check is zero and one are equal","code":"if ( $ zeros == $ ones ) return $ consZeros ; else return -1 ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 1 , 0 , 0 ) ; $ n = sizeof ( $ A ) ; echo minOperations ( $ A , $ n ) ; ? >"}
{"text":"Function to count the number of digits in a number m","code":"< ? php function countdig ( $ m ) { if ( $ m == 0 ) return 0 ; else return 1 + countdig ( ( int ) ( $ m \/ 10 ) ) ; }"}
{"text":"Function to count the number of steps to reach 0","code":"function countSteps ( $ x ) {"}
{"text":"count the total number of stesp","code":"$ c = 0 ; $ last = $ x ;"}
{"text":"iterate till we reach 0","code":"while ( $ last ) {"}
{"text":"count the digits in last","code":"$ digits = countdig ( $ last ) ;"}
{"text":"decrease it by 1","code":"$ digits -= 1 ;"}
{"text":"find the number on whose division , we get the first digit","code":"$ divisor = pow ( 10 , $ digits ) ;"}
{"text":"first digit in last","code":"$ first = ( int ) ( $ last \/ $ divisor ) ;"}
{"text":"find the first number less than last where the first digit changes","code":"$ lastnumber = $ first * $ divisor ;"}
{"text":"find the number of numbers with same first digit that are jumped","code":"$ skipped = ( $ last - $ lastnumber ) \/ $ first ; $ skipped += 1 ;"}
{"text":"count the steps","code":"$ c += $ skipped ;"}
{"text":"the next number with a different first digit","code":"$ last = $ last - ( $ first * $ skipped ) ; } return $ c ; }"}
{"text":"Driver code","code":"$ n = 14 ; echo countSteps ( $ n ) ;"}
{"text":"Calculates modular exponentiation , i . e . , ( x ^ y ) % p in O ( log y )","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; } function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Returns GCD of a ^ n and b","code":"function powerGCD ( $ a , $ b , $ n ) { $ e = power ( $ a , $ n , $ b ) ; return gcd ( $ e , $ b ) ; }"}
{"text":"Driver code","code":"$ a = 5 ; $ b = 4 ; $ n = 2 ; echo powerGCD ( $ a , $ b , $ n ) ; ? >"}
{"text":"Function to check if all digits of a number are odd","code":"< ? php function allOddDigits ( $ n ) {"}
{"text":"iterate for all digits","code":"while ( $ n > 1 ) {"}
{"text":"if digit is even","code":"if ( ( $ n % 10 ) % 2 == 0 ) return false ; $ n = ( int ) $ n \/ 10 ; }"}
{"text":"all digits are odd","code":"return true ; }"}
{"text":"function to return the largest number with all digits odd","code":"function largestNumber ( $ n ) { if ( $ n % 2 == 0 ) $ n -- ;"}
{"text":"iterate till we find a number with all digits odd","code":"for ( $ i = $ n ; ; $ i = ( $ i - 2 ) ) if ( allOddDigits ( $ i ) ) return $ i ; }"}
{"text":"Driver Code","code":"$ N = 23 ; echo largestNumber ( $ N ) ; ? >"}
{"text":"Function to count number less than N which are product of any two perfect squares","code":"< ? php function countNumbers ( $ N ) { return ( int ) ( sqrt ( $ N ) ) - 1 ; }"}
{"text":"Driver Code","code":"$ N = 36 ; echo countNumbers ( $ N ) ; ? >"}
{"text":"Function to return count of Ordered pairs whose products are less than N","code":"< ? php function countOrderedPairs ( $ N ) {"}
{"text":"Initialize count to 0","code":"$ count_pairs = 0 ;"}
{"text":"count total pairs","code":"for ( $ i = 1 ; $ i <= sqrt ( $ N - 1 ) ; ++ $ i ) { for ( $ j = $ i ; $ j * $ i < $ N ; ++ $ j ) ++ $ count_pairs ; }"}
{"text":"multiply by 2 to get ordered_pairs","code":"$ count_pairs *= 2 ;"}
{"text":"subtract redundant pairs ( a , b ) where a == b .","code":"$ count_pairs -= ( sqrt ( $ N - 1 ) ) ;"}
{"text":"return answer","code":"return $ count_pairs ; }"}
{"text":"Driver code","code":"$ N = 5 ;"}
{"text":"function call to print required answer","code":"echo countOrderedPairs ( $ N ) ; ? >"}
{"text":"Function to print pairwise absolute difference of consecutive elements","code":"< ? php function pairwiseDifference ( $ arr , $ n ) { $ diff = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"absolute difference between consecutive numbers","code":"$ diff = abs ( $ arr [ $ i ] - $ arr [ $ i + 1 ] ) ; echo $ diff . \" \" ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 10 , 15 , 5 , 6 ) ; $ n = sizeof ( $ arr ) ; pairwiseDifference ( $ arr , $ n ) ; ? >"}
{"text":"Function to find sum of AP series","code":"< ? php function sumAP ( $ n , $ d ) {"}
{"text":"Number of terms","code":"$ n = ( int ) ( $ n \/ $ d ) ; return ( $ n ) * ( ( 1 + $ n ) * ( int ) $ d \/ 2 ) ; }"}
{"text":"Function to find the sum of all multiples of 2 and 5 below N","code":"function sumMultiples ( $ n ) {"}
{"text":"Since , we need the sum of multiples less than N","code":"$ n -- ; return sumAP ( $ n , 2 ) + sumAP ( $ n , 5 ) - sumAP ( $ n , 10 ) ; }"}
{"text":"Driver code","code":"$ n = 20 ; echo sumMultiples ( $ n ) ; ? >"}
{"text":"Function that calculates marks .","code":"< ? php function markingScheme ( $ N , $ answerKey , $ studentAnswer ) { $ positive = 0 ; $ negative = 0 ; $ notattempt = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"for not attempt score + 0","code":"if ( $ studentAnswer [ $ i ] == 0 ) $ notattempt ++ ;"}
{"text":"for each correct answer score + 3","code":"else if ( $ answerKey [ $ i ] == $ studentAnswer [ $ i ] ) $ positive ++ ;"}
{"text":"for each wrong answer score - 1","code":"else if ( $ answerKey [ $ i ] != $ studentAnswer [ $ i ] ) $ negative ++ ; }"}
{"text":"calculate total marks","code":"return ( $ positive * 3 ) + ( $ negative * -1 ) ; }"}
{"text":"Driver code","code":"$ answerKey = array ( 1 , 2 , 3 , 4 , 1 ) ; $ studentAnswer = array ( 1 , 2 , 3 , 4 , 0 ) ; $ N = sizeof ( $ answerKey ) ; echo markingScheme ( $ N , $ answerKey , $ studentAnswer ) ; ? >"}
{"text":"PHP implementation of above solution","code":"< ? php $ MAX = 10000 ;"}
{"text":"Create a boolean array \" $ prime [ 0 . . $ n ] \" and initialize all entries it as true . A value in $prime [ i ] will finally be false if i is Not a $prime , else true .","code":"$ prime = array_fill ( 0 , $ MAX + 1 , true ) ; function SieveOfEratosthenes ( ) { global $ MAX ; global $ prime ; $ prime = array_fill ( 0 , $ MAX + 1 , true ) ; $ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ MAX ; $ p ++ ) {"}
{"text":"If $prime [ $p ] is not changed , then it is a $prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Set all multiples of $$p to non - $prime","code":"for ( $ i = $ p * 2 ; $ i <= $ MAX ; $ i += $ p ) $ prime [ $ i ] = false ; } } }"}
{"text":"find the product of 1 st N $prime numbers","code":"function solve ( $ n ) { global $ prime ;"}
{"text":"$count of $prime numbers","code":"$ count = 0 ; $ num = 1 ;"}
{"text":"product of $prime numbers","code":"$ prod = 1 ; while ( $ count < $ n ) {"}
{"text":"if the number is $prime add it","code":"if ( $ prime [ $ num ] == true ) { $ prod *= $ num ;"}
{"text":"increase the $count","code":"$ count ++ ; }"}
{"text":"get to next number","code":"$ num ++ ; } return $ prod ; }"}
{"text":"create the sieve","code":"SieveOfEratosthenes ( ) ; $ n = 5 ;"}
{"text":"find the value of 1 st $n $prime numbers","code":"echo solve ( $ n ) ; ? >"}
{"text":"Returns count of numbers in [ l r ] that are divisible by k .","code":"< ? php function Check_is_possible ( $ l , $ r , $ k ) { $ div_count = ( int ) ( $ r \/ $ k ) - ( int ) ( $ l \/ $ k ) ;"}
{"text":"Add 1 explicitly as l is divisible by k","code":"if ( $ l % $ k == 0 ) $ div_count ++ ;"}
{"text":"l is not divisible by k","code":"return ( $ div_count > 1 ) ; }"}
{"text":"Driver Code","code":"$ l = 30 ; $ r = 70 ; $ k = 10 ; if ( Check_is_possible ( $ l , $ r , $ k ) ) echo \" YES STRNEWLINE \" ; else echo \" NO STRNEWLINE \" ; ? >"}
{"text":"calculate sum of Nth group","code":"< ? php function nth_group ( $ n ) { return $ n * ( 2 * pow ( $ n , 2 ) + 1 ) ; }"}
{"text":"Driver code","code":"$ N = 5 ; echo nth_group ( $ N ) ; ? >"}
{"text":"Function to check if it is possible","code":"< ? php function printPossible ( $ a , $ b , $ c ) { if ( ( $ a + $ b + $ c ) % 2 != 0 $ a + $ b < $ c ) echo ( \" NO \" ) ; else echo ( \" YES \" ) ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 4 ; $ c = 2 ; printPossible ( $ a , $ b , $ c ) ; ? >"}
{"text":"calculate sum upto N term of series","code":"< ? php function Sum_upto_nth_Term ( $ n ) { $ r = $ n * ( $ n + 1 ) * ( 2 * $ n + 7 ) \/ 3 ; echo $ r ; }"}
{"text":"Driver code","code":"$ N = 5 ; Sum_upto_nth_Term ( $ N ) ; ? >"}
{"text":"Function to find the difference between the sum of non - primes and the sum of primes of an array .","code":"< ? php function CalculateDifference ( $ arr , $ n ) {"}
{"text":"Find maximum value in the array","code":"$ max_val = PHP_INT_MIN ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] > $ max_val ) $ max_val = $ arr [ $ i ] ; }"}
{"text":"USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array \" prime [ 0 . . n ] \" . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ max_val + 1 , true ) ;"}
{"text":"Remaining part of SIEVE","code":"$ prime [ 0 ] = false ; $ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ max_val ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ max_val ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Store the sum of primes in S1 and the sum of non primes in S2","code":"$ S1 = 0 ; $ S2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ prime [ $ arr [ $ i ] ] ) {"}
{"text":"the number is prime","code":"$ S1 += $ arr [ $ i ] ; } else if ( $ arr [ $ i ] != 1 ) {"}
{"text":"the number is non - prime","code":"$ S2 += $ arr [ $ i ] ; } }"}
{"text":"Return the absolute difference","code":"return abs ( $ S2 - $ S1 ) ; }"}
{"text":"Get the array","code":"$ arr = array ( 1 , 3 , 5 , 10 , 15 , 7 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Find the absolute difference","code":"echo CalculateDifference ( $ arr , $ n ) ; ? >"}
{"text":"Function to count factors in O ( N )","code":"< ? php Function numberOfDivisors ( $ num ) { $ c = 0 ;"}
{"text":"iterate and check if factor or not","code":"for ( $ i = 1 ; $ i <= $ num ; $ i ++ ) { if ( $ num % $ i == 0 ) { $ c += 1 ; } } return $ c ; }"}
{"text":"Function to count numbers having exactly 9 divisors","code":"Function countNumbers ( $ n ) { $ c = 0 ;"}
{"text":"check for all numbers <= N","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"check if exactly 9 factors or not","code":"if ( numberOfDivisors ( $ i ) == 9 ) $ c += 1 ; } return $ c ; }"}
{"text":"Driver Code","code":"$ n = 1000 ; echo countNumbers ( $ n ) ; ? >"}
{"text":"Function to count the number of distinct integers ontained by lcm ( x , num ) \/ x","code":"< ? php function numberOfDistinct ( $ n ) { $ ans = 0 ;"}
{"text":"iterate to count the number of factors","code":"for ( $ i = 1 ; $ i <= sqrt ( $ n ) ; $ i ++ ) { if ( $ n % $ i == 0 ) { $ ans ++ ; if ( ( $ n \/ $ i ) != $ i ) $ ans ++ ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo numberOfDistinct ( $ n ) ; ? >"}
{"text":"function to Find the number of rectangles of size 2 * 1 can be placed inside a rectangle of size n * m","code":"< ? php function NumberOfRectangles ( $ n , $ m ) {"}
{"text":"if n is even","code":"if ( $ n % 2 == 0 ) return ( $ n \/ 2 ) * $ m ;"}
{"text":"if m is even","code":"else if ( $ m % 2 == 0 ) return ( $ m \/ 2 ) * $ n ;"}
{"text":"if both are odd","code":"return ( $ n * $ m - 1 ) \/ 2 ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ m = 3 ;"}
{"text":"function call","code":"echo NumberOfRectangles ( $ n , $ m ) ; ? >"}
{"text":"Recursive function to find the required number","code":"< ? php function findNumUtil ( $ res , $ a , $ aCount , $ b , $ bCount , $ n ) { if ( $ res > 100000000000 ) return 10000000000 ;"}
{"text":"If the resulting number is >= n and count of a = count of b , return the number","code":"if ( $ aCount == $ bCount && $ res >= $ n ) return $ res ;"}
{"text":"select minimum of two and call the function again","code":"return min ( findNumUtil ( $ res * 10 + $ a , $ a , $ aCount + 1 , $ b , $ bCount , $ n ) , findNumUtil ( $ res * 10 + $ b , $ a , $ aCount , $ b , $ bCount + 1 , $ n ) ) ; }"}
{"text":"Function to find the number next greater Number than N with the same quantity of digits A and B","code":"function findNum ( $ n , $ a , $ b ) { $ result = 0 ; $ aCount = 0 ; $ bCount = 0 ; return findNumUtil ( $ result , $ a , $ aCount , $ b , $ bCount , $ n ) ; }"}
{"text":"Driver code","code":"$ N = 4500 ; $ A = 4 ; $ B = 7 ; echo findNum ( $ N , $ A , $ B ) ; ? >"}
{"text":"Driver code","code":"< ? php $ n = 7 ; $ k = 3 ; if ( $ n % $ k == 0 ) echo $ n \/ $ k . \" \u2581 \" . $ n \/ $ k ; else echo ( ( $ n - ( $ n % $ k ) ) \/ $ k ) . \" \u2581 \" . ( ( ( $ n - ( $ n % $ k ) ) \/ $ k ) + 1 ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php $ m = 50 ; $ n = 5 ; $ x = 67 ; $ h = 2927 ;"}
{"text":"calculating hours travelled","code":"$ z = ( int ) ( ceil ( $ h \/ 60 ) ) ; if ( $ z <= $ n ) print ( $ z * $ m ) ; else print ( $ n * $ m + ( $ z - $ n ) * $ x ) ; ? >"}
{"text":"Function taking coefficient of each term of equation as input","code":"< ? php function sumProductDifference ( $ a , $ b , $ c , $ d , $ e ) {"}
{"text":"Finding sum of roots","code":"$ rootSum = ( double ) ( -1 * $ b ) \/ $ a ;"}
{"text":"Finding product of roots","code":"$ rootProduct = ( double ) $ e \/ $ a ;"}
{"text":"Absolute difference","code":"return abs ( $ rootSum - $ rootProduct ) ; }"}
{"text":"Driver code","code":"echo sumProductDifference ( 8 , 4 , 6 , 4 , 1 ) ; ? >"}
{"text":"Function to find the number of solutions of n = n xor x","code":"< ? php function numberOfSolutions ( $ n ) {"}
{"text":"Counter to store the number of solutions found","code":"$ c = 0 ; for ( $ x = 0 ; $ x <= $ n ; ++ $ x ) if ( $ n == $ x + $ n ^ $ x ) ++ $ c ; return $ c ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo numberOfSolutions ( $ n ) ;"}
{"text":"Function to compute minimum lecture","code":"< ? php function minimumLectures ( $ m , $ n ) { $ ans = 0 ;"}
{"text":"Formula to compute","code":"if ( $ n < ceil ( 0.75 * $ m ) ) $ ans = ( int ) ceil ( ( ( 0.75 * $ m ) - $ n ) \/ 0.25 ) ; else $ ans = 0 ; return $ ans ; }"}
{"text":"Driver Code","code":"$ M = 9 ; $ N = 1 ; echo minimumLectures ( $ M , $ N ) ; ? >"}
{"text":"Function to count Numbers with N digits which consists of odd number of 0 's","code":"< ? php function countNumbers ( $ N ) { return ( pow ( 10 , $ N ) - pow ( 8 , $ N ) ) \/ 2 ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo countNumbers ( $ n ) ; ? >"}
{"text":"Function to calculate the sum","code":"< ? php function calculateSum ( $ n ) { return 2 * ( $ n * ( $ n + 1 ) * ( 2 * $ n + 1 ) \/ 6 ) + $ n * ( $ n + 1 ) \/ 2 + 2 * ( $ n ) ; }"}
{"text":"number of terms to be included in sum","code":"$ n = 3 ;"}
{"text":"find the Sn","code":"echo \" Sum = \" ? >"}
{"text":"Method to check for solutions of equations","code":"< ? php function checkSolution ( $ a , $ b , $ c ) {"}
{"text":"If the expression is greater than 0 , then 2 solutions","code":"if ( ( ( $ b * $ b ) - ( 4 * $ a * $ c ) ) > 0 ) echo \"2 \u2581 solutions \" ;"}
{"text":"If the expression is equal 0 , then 2 solutions","code":"else if ( ( ( $ b * $ b ) - ( 4 * $ a * $ c ) ) == 0 ) echo \"1 \u2581 solution \" ;"}
{"text":"Else no solutions","code":"else echo \" No \u2581 solutions \" ; }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 5 ; $ c = 2 ; checkSolution ( $ a , $ b , $ c ) ; ? >"}
{"text":"Function to calculates the bits","code":"< ? php function Bits ( $ kilobytes ) { $ Bits = 0 ;"}
{"text":"calculates Bits 1 kilobytes ( s ) = 8192 bits","code":"$ Bits = $ kilobytes * 8192 ; return $ Bits ; }"}
{"text":"Function to calculates the bytes","code":"function Bytes ( $ kilobytes ) { $ Bytes = 0 ;"}
{"text":"calculates Bytes 1 KB = 1024 bytes","code":"$ Bytes = $ kilobytes * 1024 ; return $ Bytes ; }"}
{"text":"Driver code","code":"$ kilobytes = 1 ; echo $ kilobytes ; echo ( \" \u2581 Kilobytes \u2581 = \u2581 \" ) ; echo Bytes ( $ kilobytes ) ; echo ( \" \u2581 Bytes \u2581 and \u2581 \" ) ; echo Bits ( $ kilobytes ) ; echo ( \" \u2581 Bits . \" ) ; ? >"}
{"text":"Getting the size of array","code":"< ? php $ n = 3 ;"}
{"text":"Getting the array of size n","code":"$ a = array ( 1 , 2 , 3 ) ;"}
{"text":"Solution","code":"$ i = 0 ;"}
{"text":"Finding sum of the array elements","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum += $ a [ $ i ] ; }"}
{"text":"Dividing sum by size n","code":"$ x = $ sum \/ $ n ;"}
{"text":"Print x , if found","code":"if ( $ x * $ n == $ sum ) echo ( $ x ) ; else echo ( \" - 1\" ) ; ? >"}
{"text":"Function to find the sum","code":"< ? php function findSum ( $ n ) {"}
{"text":"Apply AP formula","code":"return sqrt ( 3 ) * ( $ n * ( $ n + 1 ) \/ 2 ) ; }"}
{"text":"number of terms","code":"$ n = 10 ; echo findSum ( $ n ) ; ? >"}
{"text":"Function to return required sum","code":"< ? php function sum ( $ x , $ y , $ n ) {"}
{"text":"sum of first series","code":"$ sum1 = ( pow ( $ x , 2 ) * ( pow ( $ x , 2 * $ n ) - 1 ) ) \/ ( pow ( $ x , 2 ) - 1 ) ;"}
{"text":"sum of second series","code":"$ sum2 = ( $ x * $ y * ( pow ( $ x , $ n ) * pow ( $ y , $ n ) - 1 ) ) \/ ( $ x * $ y - 1 ) ; return $ sum1 + $ sum2 ; }"}
{"text":"Driver code","code":"$ x = 2 ; $ y = 2 ; $ n = 2 ;"}
{"text":"function call to print sum","code":"echo sum ( $ x , $ y , $ n ) ; ? >"}
{"text":"Function to print the pairs","code":"< ? php function printPair ( $ g , $ l ) { echo $ g ; echo ( \" \u2581 \" ) ; echo $ l ; }"}
{"text":"Driver Code","code":"$ g = 3 ; $ l = 12 ; printPair ( $ g , $ l ) ; ? >"}
{"text":"Function to calculate the sum","code":"< ? php function calculateSum ( $ n ) {"}
{"text":"starting number","code":"$ a1 = 1 ; $ a2 = 2 ;"}
{"text":"Common Ratio","code":"$ r = 2 ;"}
{"text":"Common difference","code":"$ d = 1 ; return ( $ n ) * ( 2 * $ a1 + ( $ n - 1 ) * $ d ) \/ 2 + $ a2 * ( pow ( $ r , $ n ) - 1 ) \/ ( $ r - 1 ) ; }"}
{"text":"Nth term to be find","code":"$ n = 5 ;"}
{"text":"find the Sn","code":"echo \" Sum = \" ? >"}
{"text":"Function that returns true if n is a power of 5","code":"< ? php function ispower ( $ n ) { if ( $ n < 125 ) return ( $ n == 1 $ n == 5 $ n == 25 ) ; if ( $ n % 125 != 0 ) return false ; else return ispower ( $ n \/ 125 ) ; }"}
{"text":"Function to return the decimal value of binary equivalent","code":"function number ( $ s , $ i , $ j ) { $ ans = 0 ; for ( $ x = $ i ; $ x < $ j ; $ x ++ ) { $ ans = $ ans * 2 + ( ord ( $ s [ $ x ] ) - ord ( '0' ) ) ; } return $ ans ; }"}
{"text":"Function to return the minimum cuts required","code":"function minCuts ( $ s , $ n ) {"}
{"text":"Allocating memory for dp [ ] array","code":"$ dp = array_fill ( 0 , $ n + 1 , $ n + 1 ) ; $ dp [ 0 ] = 0 ;"}
{"text":"From length 1 to n","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If previous character is '0' then ignore to avoid number with leading 0 s .","code":"if ( $ s [ $ i - 1 ] == '0' ) continue ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) {"}
{"text":"Ignore s [ j ] = '0' starting numbers","code":"if ( $ s [ $ j ] == '0' ) continue ;"}
{"text":"Number formed from s [ j ... . i ]","code":"$ num = number ( $ s , $ j , $ i ) ;"}
{"text":"Check for power of 5","code":"if ( ! ispower ( $ num ) ) continue ;"}
{"text":"Assigning min value to get min cut possible","code":"$ dp [ $ i ] = min ( $ dp [ $ i ] , $ dp [ $ j ] + 1 ) ; } }"}
{"text":"( n + 1 ) to check if all the strings are traversed and no divisible by 5 is obtained like 000000","code":"return ( ( $ dp [ $ n ] < $ n + 1 ) ? $ dp [ $ n ] : -1 ) ; }"}
{"text":"Driver code","code":"$ s = \"101101101\" ; $ n = strlen ( $ s ) ; echo minCuts ( $ s , $ n ) ; ? >"}
{"text":"Function to return the minimum number of cubes whose sum is k","code":"< ? php function MinOfCubed ( $ k ) {"}
{"text":"If k is less than the 2 ^ 3","code":"if ( $ k < 8 ) return $ k ;"}
{"text":"Initialize with the maximum number of cubes required","code":"$ res = $ k ; for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) { if ( ( $ i * $ i * $ i ) > $ k ) return $ res ; $ res = min ( $ res , MinOfCubed ( $ k - ( $ i * $ i * $ i ) ) + 1 ) ; } return $ res ; }"}
{"text":"Driver code","code":"$ num = 15 ; echo MinOfCubed ( $ num ) ; ? >"}
{"text":"Function to return the minimum number of cubes whose sum is k","code":"< ? php function MinOfCubedDP ( $ k ) { $ DP = array ( $ k + 1 ) ; $ j = 1 ; $ t = 1 ; $ DP [ 0 ] = 0 ; for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) { $ DP [ $ i ] = PHP_INT_MAX ;"}
{"text":"While current perfect cube is less than current element","code":"while ( $ j <= $ i ) {"}
{"text":"If i is a perfect cube","code":"if ( $ j == $ i ) $ DP [ $ i ] = 1 ;"}
{"text":"i = ( i - 1 ) + 1 ^ 3","code":"else if ( $ DP [ $ i ] > $ DP [ $ i - $ j ] ) $ DP [ $ i ] = $ DP [ $ i - $ j ] + 1 ;"}
{"text":"Next perfect cube","code":"$ t ++ ; $ j = $ t * $ t * $ t ; }"}
{"text":"Re - initialization for next element","code":"$ t = $ j = 1 ; } return $ DP [ $ k ] ; }"}
{"text":"Driver code","code":"$ num = 15 ; echo ( MinOfCubedDP ( $ num ) ) ; ? >"}
{"text":"Function to return the maximum required sub - array sum","code":"< ? php function maxSum ( $ a , $ n ) { $ ans = 0 ; $ arr = array ( ) ;"}
{"text":"Creating one based indexing","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ arr [ $ i ] = $ a [ $ i - 1 ] ;"}
{"text":"2d array to contain solution for each step","code":"$ dp = array ( array ( ) ) ; for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) {"}
{"text":"Case 1 : Choosing current or ( current + previous ) whichever is smaller","code":"$ dp [ $ i ] [ 0 ] = max ( $ arr [ $ i ] , $ dp [ $ i - 1 ] [ 0 ] + $ arr [ $ i ] ) ;"}
{"text":"Case 2 : ( a ) Altering sign and add to previous case 1 or value 0","code":"$ dp [ $ i ] [ 1 ] = max ( 0 , $ dp [ $ i - 1 ] [ 0 ] ) - $ arr [ $ i ] ;"}
{"text":"Case 2 : ( b ) Adding current element with previous case 2 and updating the maximum","code":"if ( $ i >= 2 ) $ dp [ $ i ] [ 1 ] = max ( $ dp [ $ i ] [ 1 ] , $ dp [ $ i - 1 ] [ 1 ] + $ arr [ $ i ] ) ;"}
{"text":"Case 3 : ( a ) Altering sign and add to previous case 2","code":"if ( $ i >= 2 ) $ dp [ $ i ] [ 2 ] = $ dp [ $ i - 1 ] [ 1 ] - $ arr [ $ i ] ;"}
{"text":"Case 3 : ( b ) Adding current element with previous case 3","code":"if ( $ i >= 3 ) $ dp [ $ i ] [ 2 ] = max ( $ dp [ $ i ] [ 2 ] , $ dp [ $ i - 1 ] [ 2 ] + $ arr [ $ i ] ) ;"}
{"text":"Updating the maximum value of variable ans","code":"$ ans = max ( $ ans , $ dp [ $ i ] [ 0 ] ) ; $ ans = max ( $ ans , $ dp [ $ i ] [ 1 ] ) ; $ ans = max ( $ ans , $ dp [ $ i ] [ 2 ] ) ; }"}
{"text":"Return the final solution","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( -5 , 3 , 2 , 7 , -8 , 3 , 7 , -9 , 10 , 12 , -6 ) ; $ n = count ( $ arr ) ; echo maxSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the minimum cost","code":"< ? php function MinimumCost ( $ a , $ n , $ x ) {"}
{"text":"Re - compute the array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ a [ $ i ] = min ( $ a [ $ i ] , 2 * $ a [ $ i - 1 ] ) ; } $ ind = 0 ; $ sum = 0 ;"}
{"text":"Add answers for set bits","code":"while ( $ x ) {"}
{"text":"If bit is set","code":"if ( $ x & 1 ) $ sum += $ a [ $ ind ] ;"}
{"text":"Increase the counter","code":"$ ind ++ ;"}
{"text":"Right shift the number","code":"$ x = $ x >> 1 ; } return $ sum ; }"}
{"text":"Driver code","code":"$ a = array ( 20 , 50 , 60 , 90 ) ; $ x = 7 ; $ n = sizeof ( $ a ) \/ sizeof ( $ a [ 0 ] ) ; echo MinimumCost ( $ a , $ n , $ x ) ; ? >"}
{"text":"Function to return the number of ways to form an array of size n such that sum of all elements is divisible by 2","code":"< ? php function countWays ( $ n , $ l , $ r ) { $ tL = $ l ; $ tR = $ r ; $ L = array_fill ( 0 , 2 , 0 ) ; $ R = array_fill ( 0 , 2 , 0 ) ;"}
{"text":"Represents first and last numbers of each type ( modulo 0 and 1 )","code":"$ L [ $ l % 2 ] = $ l ; $ R [ $ r % 2 ] = $ r ; $ l ++ ; $ r -- ; if ( $ l <= $ tR && $ r >= $ tL ) { $ L [ $ l % 2 ] = $ l ; $ R [ $ r % 2 ] = $ r ; }"}
{"text":"Count of numbers of each type between range","code":"$ cnt0 = 0 ; $ cnt1 = 0 ; if ( $ R [ 0 ] && $ L [ 0 ] ) $ cnt0 = ( $ R [ 0 ] - $ L [ 0 ] ) \/ 2 + 1 ; if ( $ R [ 1 ] && $ L [ 1 ] ) $ cnt1 = ( $ R [ 1 ] - $ L [ 1 ] ) \/ 2 + 1 ; $ dp = array ( ) ;"}
{"text":"Base Cases","code":"$ dp [ 1 ] [ 0 ] = $ cnt0 ; $ dp [ 1 ] [ 1 ] = $ cnt1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Ways to form array whose sum upto i numbers modulo 2 is 0","code":"$ dp [ $ i ] [ 0 ] = ( $ cnt0 * $ dp [ $ i - 1 ] [ 0 ] + $ cnt1 * $ dp [ $ i - 1 ] [ 1 ] ) ;"}
{"text":"Ways to form array whose sum upto i numbers modulo 2 is 1","code":"$ dp [ $ i ] [ 1 ] = ( $ cnt0 * $ dp [ $ i - 1 ] [ 1 ] + $ cnt1 * $ dp [ $ i - 1 ] [ 0 ] ) ; }"}
{"text":"Return the required count of ways","code":"return $ dp [ $ n ] [ 0 ] ; }"}
{"text":"Driver Code","code":"$ n = 2 ; $ l = 1 ; $ r = 3 ; echo countWays ( $ n , $ l , $ r ) ; ? >"}
{"text":"PHP Program to Paint N boxes using M colors such that K boxes have color different from color of box on its left","code":"< ? php $ M = 1001 ; $ MOD = 998244353 ; $ dp = array_fill ( 0 , $ M , array_fill ( 0 , $ M , -1 ) ) ;"}
{"text":"This function returns the required number of ways where idx is the current index and diff is number of boxes having different color from box on its left","code":"function solve ( $ idx , $ diff , $ N , $ M , $ K ) { global $ dp , $ MOD ;"}
{"text":"Base Case","code":"if ( $ idx > $ N ) { if ( $ diff == $ K ) return 1 ; return 0 ; }"}
{"text":"If already computed","code":"if ( $ dp [ $ idx ] [ $ diff ] != -1 ) return $ dp [ $ idx ] [ $ diff ] ;"}
{"text":"Either paint with same color as previous one","code":"$ ans = solve ( $ idx + 1 , $ diff , $ N , $ M , $ K ) ;"}
{"text":"Or paint with remaining ( M - 1 ) colors","code":"$ ans += ( $ M - 1 ) * solve ( $ idx + 1 , $ diff + 1 , $ N , $ M , $ K ) ; return $ dp [ $ idx ] [ $ diff ] = $ ans % $ MOD ; }"}
{"text":"Driver code","code":"$ N = 3 ; $ M = 3 ; $ K = 0 ;"}
{"text":"Multiply M since first box can be painted with any of the M colors and start solving from 2 nd box","code":"echo ( $ M * solve ( 2 , 0 , $ N , $ M , $ K ) ) ; ? >"}
{"text":"PHP program implementation of Max sum problem in a triangle","code":"< ? php $ N = 3 ;"}
{"text":"Function for finding maximum sum","code":"function maxPathSum ( $ tri ) { global $ N ; $ ans = 0 ;"}
{"text":"Loop for bottom - up calculation","code":"for ( $ i = $ N - 2 ; $ i >= 0 ; $ i -- ) { for ( $ j = 0 ; $ j < $ N - $ i ; $ j ++ ) {"}
{"text":"For each element , check both elements just below the number and below left to the number add the maximum of them to it","code":"if ( $ j - 1 >= 0 ) $ tri [ $ i ] [ $ j ] += max ( $ tri [ $ i + 1 ] [ $ j ] , $ tri [ $ i + 1 ] [ $ j - 1 ] ) ; else $ tri [ $ i ] [ $ j ] += $ tri [ $ i + 1 ] [ $ j ] ; $ ans = max ( $ ans , $ tri [ $ i ] [ $ j ] ) ; } }"}
{"text":"Return the maximum sum","code":"return $ ans ; }"}
{"text":"Driver Code","code":"$ tri = array ( array ( 1 , 5 , 3 ) , array ( 4 , 8 , 0 ) , array ( 1 , 0 , 0 ) ) ; echo maxPathSum ( $ tri ) ; ? >"}
{"text":"Returns count of ordered subsets of arr [ ] with XOR value = K","code":"< ? php function subsetXOR ( $ arr , $ n , $ K ) {"}
{"text":"Find maximum element in arr [ ]","code":"$ max_ele = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] > $ max_ele ) $ max_ele = $ arr [ $ i ] ;"}
{"text":"Maximum possible XOR value","code":"$ m = ( 1 << ( floor ( log ( $ max_ele , 2 ) ) + 1 ) ) - 1 ;"}
{"text":"The value of dp [ i ] [ j ] [ k ] is the number of subsets of length k having XOR of their elements as j from the set arr [ 0. . . i - 1 ]","code":"$ dp = array ( array ( array ( ) ) ) ;"}
{"text":"Initializing all the values of dp [ i ] [ j ] [ k ] as 0","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ m ; $ j ++ ) for ( $ k = 0 ; $ k <= $ n ; $ k ++ ) $ dp [ $ i ] [ $ j ] [ $ k ] = 0 ;"}
{"text":"The xor of empty subset is 0","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] [ 0 ] [ 0 ] = 1 ;"}
{"text":"Fill the dp table","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ m ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ n ; $ k ++ ) { $ dp [ $ i ] [ $ j ] [ $ k ] = $ dp [ $ i - 1 ] [ $ j ] [ $ k ] ; if ( $ k != 0 ) { $ dp [ $ i ] [ $ j ] [ $ k ] += $ k * $ dp [ $ i - 1 ] [ $ j ^ $ arr [ $ i - 1 ] ] [ $ k - 1 ] ; } } } }"}
{"text":"The answer is the number of subsets of all lengths from set arr [ 0. . n - 1 ] having XOR of elements as k","code":"$ ans = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ ans += $ dp [ $ n ] [ $ K ] [ $ i ] ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = [ 1 , 2 , 3 ] ; $ k = 1 ; $ n = sizeof ( $ arr ) ; echo subsetXOR ( $ arr , $ n , $ k ) ; ? >"}
{"text":"PHP program to find the maximum number of numbers divisible by 3 in a large number","code":"< ? php function get_max_splits ( $ num_string ) {"}
{"text":"This will contain the count of the splits","code":"$ count = 0 ;"}
{"text":"This will keep sum of all successive integers , when they are indivisible by 3","code":"$ running_sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ num_string ) ; $ i ++ ) { $ current_num = intval ( $ num_string [ $ i ] ) ; $ running_sum += $ current_num ;"}
{"text":"This is the condition of finding a split","code":"if ( $ current_num % 3 == 0 or ( $ running_sum != 0 and $ running_sum % 3 == 0 ) ) { $ count += 1 ; $ running_sum = 0 ; } } return $ count ; }"}
{"text":"Driver Code","code":"print ( get_max_splits ( \"12345\" ) ) ; ? >"}
{"text":"Returns the minimum cost to form a n - copy string . Here , x -> Cost to add \/ remove a single character ' G ' and y -> cost to append the string to itself","code":"< ? php function findMinimumCost ( $ n , $ x , $ y ) { $ dp [ $ n + 1 ] = array ( ) ;"}
{"text":"Base Case : to form a 1 - copy string we need to perform an operation of type 1 ( i . e Add )","code":"$ dp [ 1 ] = $ x ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { if ( $ i & 1 ) {"}
{"text":"Case1 . Perform a Add operation on ( i - 1 ) - copy string , Case2 . Perform a type 2 operation on ( ( i + 1 ) \/ 2 ) - copy string","code":"$ dp [ $ i ] = min ( $ dp [ $ i - 1 ] + $ x , $ dp [ ( $ i + 1 ) \/ 2 ] + $ y + $ x ) ; } else {"}
{"text":"Case1 . Perform a Add operation on ( i - 1 ) - copy string , Case2 . Perform a type 3 operation on ( i \/ 2 ) - copy string","code":"$ dp [ $ i ] = min ( $ dp [ $ i - 1 ] + $ x , $ dp [ $ i \/ 2 ] + $ y ) ; } } return $ dp [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ x = 2 ; $ y = 1 ; echo findMinimumCost ( $ n , $ x , $ y ) ; ? >"}
{"text":"Function to return the number of ways to choose r objects out of n objects","code":"< ? php function nCr ( $ n , $ r ) { $ ans = 1 ; if ( $ r > $ n - $ r ) $ r = $ n - $ r ; for ( $ i = 0 ; $ i < $ r ; $ i ++ ) { $ ans *= ( $ n - $ i ) ; $ ans \/= ( $ i + 1 ) ; } return $ ans ; }"}
{"text":"Function to return the number of derangements of n","code":"function countDerangements ( $ n ) { $ der = array ( $ n + 1 ) ; $ der [ 0 ] = 1 ; $ der [ 1 ] = 0 ; $ der [ 2 ] = 1 ; for ( $ i = 3 ; $ i <= $ n ; $ i ++ ) $ der [ $ i ] = ( $ i - 1 ) * ( $ der [ $ i - 1 ] + $ der [ $ i - 2 ] ) ; return $ der [ $ n ] ; }"}
{"text":"Function to return the required number of permutations","code":"function countPermutations ( $ n , $ k ) { $ ans = 0 ; for ( $ i = $ n - $ k ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Ways to choose i indices from n indices","code":"$ ways = nCr ( $ n , $ i ) ;"}
{"text":"Dearangements of ( n - i ) indices","code":"$ ans += $ ways * countDerangements ( $ n - $ i ) ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ k = 3 ; echo ( countPermutations ( $ n , $ k ) ) ; ? >"}
{"text":"returns the number of squares in diagonal i","code":"< ? php function squares ( $ i ) { if ( ( $ i & 1 ) == 1 ) return intval ( $ i \/ 4 ) * 2 + 1 ; else return intval ( ( $ i - 1 ) \/ 4 ) * 2 + 2 ; }"}
{"text":"returns the number of ways to fill a n * n chessboard with k bishops so that no two bishops attack each other .","code":"function bishop_placements ( $ n , $ k ) {"}
{"text":"return 0 if the number of valid places to be filled is less than the number of bishops","code":"if ( $ k > 2 * $ n - 1 ) return 0 ;"}
{"text":"dp table to store the values","code":"$ dp = array_fill ( 0 , $ n * 2 , array_fill ( 0 , $ k + 1 , NULL ) ) ;"}
{"text":"Setting the base conditions","code":"for ( $ i = 0 ; $ i < $ n * 2 ; $ i ++ ) $ dp [ $ i ] [ 0 ] = 1 ; $ dp [ 1 ] [ 1 ] = 1 ;"}
{"text":"calculate the required number of ways","code":"for ( $ i = 2 ; $ i < $ n * 2 ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ k ; $ j ++ ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 2 ] [ $ j ] + $ dp [ $ i - 2 ] [ $ j - 1 ] * ( squares ( $ i ) - $ j + 1 ) ; }"}
{"text":"stores the answer","code":"$ ans = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) { $ ans += $ dp [ $ n * 2 - 1 ] [ $ i ] * $ dp [ $ n * 2 - 2 ] [ $ k - $ i ] ; } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 2 ; $ k = 2 ; $ ans = bishop_placements ( $ n , $ k ) ; echo $ ans ; ? >"}
{"text":"Function to find the total number of different staircase that can made from N boxes","code":"< ? php function countStaircases ( $ N ) {"}
{"text":"Initialize all the elements of the table to zero","code":"for ( $ i = 0 ; $ i <= $ N ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ N ; $ j ++ ) { $ memo [ $ i ] [ $ j ] = 0 ; } }"}
{"text":"Base case","code":"$ memo [ 3 ] [ 2 ] = $ memo [ 4 ] [ 2 ] = 1 ; for ( $ i = 5 ; $ i <= $ N ; $ i ++ ) { for ( $ j = 2 ; $ j <= $ i ; $ j ++ ) {"}
{"text":"When step is equal to 2","code":"if ( $ j == 2 ) { $ memo [ $ i ] [ $ j ] = $ memo [ $ i - $ j ] [ $ j ] + 1 ; }"}
{"text":"When step is greater than 2","code":"else { $ memo [ $ i ] [ $ j ] = $ memo [ $ i - $ j ] [ $ j ] + $ memo [ $ i - $ j ] [ $ j - 1 ] ; } } }"}
{"text":"Count the total staircase from all the steps","code":"$ answer = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) $ answer = $ answer + $ memo [ $ N ] [ $ i ] ; return $ answer ; }"}
{"text":"Driver Code","code":"$ N = 7 ; echo countStaircases ( $ N ) ; ? >"}
{"text":"Returns The number of way from top - left to mat [ m - 1 ] [ n - 1 ]","code":"< ? php function countPaths ( $ m , $ n ) {"}
{"text":"Return 1 if it is the first row or first column","code":"if ( $ m == 1 $ n == 1 ) return 1 ;"}
{"text":"Recursively find the no of way to reach the last cell .","code":"return countPaths ( $ m - 1 , $ n ) + countPaths ( $ m , $ n - 1 ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ m = 5 ; echo countPaths ( $ n , $ m ) ; ? >"}
{"text":"Returns The number of way from top - left to mat [ m - 1 ] [ n - 1 ]","code":"< ? php function countPaths ( $ m , $ n ) { $ dp ; for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 1 $ j == 1 ) $ dp [ $ i ] [ $ j ] = 1 ; else $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j ] + $ dp [ $ i ] [ $ j - 1 ] ; } } return $ dp [ $ m ] [ $ n ] ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ m = 5 ; echo countPaths ( $ n , $ m ) ; ? >"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"< ? php function binomialCoeff ( $ n , $ k ) { $ res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( $ k > $ n - $ k ) $ k = $ n - $ k ;"}
{"text":"Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) { $ res *= ( $ n - $ i ) ; $ res \/= ( $ i + 1 ) ; } return $ res ; }"}
{"text":"A Binomial coefficient based function to find nth catalan number in O ( n ) time","code":"function catalan ( $ n ) {"}
{"text":"Calculate value of 2 nCn","code":"$ c = binomialCoeff ( 2 * $ n , $ n ) ;"}
{"text":"return 2 nCn \/ ( n + 1 )","code":"return $ c \/ ( $ n + 1 ) ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo catalan ( $ n ) ; ? >"}
{"text":"Alternate Fibonacci Series using Dynamic Programming","code":"< ? php function alternateFib ( $ n ) { if ( $ n < 0 ) return ;"}
{"text":"0 th and 1 st number of the series are 0 and 1","code":"$ f1 = 0 ; $ f2 = 1 ; echo $ f1 . \" \" ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ f3 = $ f2 + $ f1 ; if ( $ i % 2 == 0 ) echo $ f3 . \" \" ; $ f1 = $ f2 ; $ f2 = $ f3 ; } }"}
{"text":"Driver Code","code":"$ N = 15 ; alternateFib ( $ N ) ; ? >"}
{"text":"Returns the total ways to form arrays such that every consecutive element is different and each element except the first and last can take values from 1 to M","code":"< ? php function totalWays ( $ N , $ M , $ X ) {"}
{"text":"define the dp [ ] [ ] array","code":"$ dp = array ( array ( ) ) ;"}
{"text":"if the first element is 1","code":"if ( $ X == 1 ) {"}
{"text":"there is only one way to place a 1 at the first index","code":"$ dp [ 0 ] [ 0 ] = 1 ; } else {"}
{"text":"the value at first index needs to be 1 , thus there is no way to place a non - one integer","code":"$ dp [ 0 ] [ 1 ] = 0 ; }"}
{"text":"if the first element was 1 then at index 1 , only non one integer can be placed thus there are M - 1 ways to place a non one integer at index 2 and 0 ways to place a 1 at the 2 nd index","code":"if ( $ X == 1 ) { $ dp [ 1 ] [ 0 ] = 0 ; $ dp [ 1 ] [ 1 ] = $ M - 1 ; }"}
{"text":"Else there is one way to place a one at index 2 and if a non one needs to be placed here , there are ( M - 2 ) options , i . e neither the element at this index should be 1 , neither should it be equal to the previous element","code":"else { $ dp [ 1 ] [ 0 ] = 1 ; $ dp [ 1 ] [ 1 ] = ( $ M - 2 ) ; }"}
{"text":"Build the dp array in bottom up manner","code":"for ( $ i = 2 ; $ i < $ N ; $ i ++ ) {"}
{"text":"f ( i , one ) = f ( i - 1 , non - one )","code":"$ dp [ $ i ] [ 0 ] = $ dp [ $ i - 1 ] [ 1 ] ;"}
{"text":"f ( i , non - one ) = f ( i - 1 , one ) * ( M - 1 ) + f ( i - 1 , non - one ) * ( M - 2 )","code":"$ dp [ $ i ] [ 1 ] = $ dp [ $ i - 1 ] [ 0 ] * ( $ M - 1 ) + $ dp [ $ i - 1 ] [ 1 ] * ( $ M - 2 ) ; }"}
{"text":"last element needs to be one , so return dp [ n - 1 ] [ 0 ]","code":"return $ dp [ $ N - 1 ] [ 0 ] ; }"}
{"text":"Driver Code","code":"$ N = 4 ; $ M = 3 ; $ X = 2 ; echo totalWays ( $ N , $ M , $ X ) ; ? >"}
{"text":"Fibonacci Series using Recursion","code":"< ? php function fib ( $ n ) {"}
{"text":"Base case","code":"if ( $ n <= 1 ) return $ n ;"}
{"text":"recursive calls","code":"return fib ( $ n - 1 ) + fib ( $ n - 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo fib ( $ n ) ; ? >"}
{"text":"PHP Program to find sum of product of consecutive Binomial Coefficient .","code":"< ? php $ MAX = 100 ;"}
{"text":"Find the binomial coefficient up to nth term","code":"function binomialCoeff ( $ n , $ k ) { $ C = array_fill ( 0 , ( $ k + 1 ) , 0 ) ;"}
{"text":"$C [ 0 ] = 1 ; nC0 is 1","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Compute next row of pascal triangle using the previous row","code":"for ( $ j = min ( $ i , $ k ) ; $ j > 0 ; $ j -- ) $ C [ $ j ] = $ C [ $ j ] + $ C [ $ j - 1 ] ; } return $ C [ $ k ] ; }"}
{"text":"Return the sum of the product of consecutive binomial coefficient .","code":"function sumOfproduct ( $ n ) { return binomialCoeff ( 2 * $ n , $ n - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo sumOfproduct ( $ n ) ; ? >"}
{"text":"Simple php Program to print Fibonacci sequence","code":"< ? php function fib ( $ n ) { $ a = 0 ; $ b = 1 ; $ c ; if ( $ n >= 0 ) echo $ a , \" \u2581 \" ; if ( $ n >= 1 ) echo $ b , \" \u2581 \" ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ c = $ a + $ b ; echo $ c , \" \" ; $ a = $ b ; $ b = $ c ; } }"}
{"text":"Driver code","code":"fib ( 9 ) ; ? >"}
{"text":"PHP program to find maximum sum increasing subsequence till i - th index and including k - th index .","code":"< ? php function pre_compute ( & $ a , $ n , $ index , $ k ) { $ dp = array_fill ( 0 , $ n , array_fill ( 0 , $ n , NULL ) ) ;"}
{"text":"Initializing the first row of the dp [ ] [ ] .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] > $ a [ 0 ] ) $ dp [ 0 ] [ $ i ] = $ a [ $ i ] + $ a [ 0 ] ; else $ dp [ 0 ] [ $ i ] = $ a [ $ i ] ; }"}
{"text":"Creating the dp [ ] [ ] matrix .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ a [ $ j ] > $ a [ $ i ] && $ j > $ i ) { if ( ( $ dp [ $ i - 1 ] [ $ i ] + $ a [ $ j ] ) > $ dp [ $ i - 1 ] [ $ j ] ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ i ] + $ a [ $ j ] ; else $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j ] ; } else $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j ] ; } }"}
{"text":"To calculate for i = 4 and k = 6.","code":"return $ dp [ $ index ] [ $ k ] ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 101 , 2 , 3 , 100 , 4 , 5 ) ; $ n = sizeof ( $ a ) ; $ index = 4 ; $ k = 6 ; echo pre_compute ( $ a , $ n , $ index , $ k ) ; ? >"}
{"text":"Function to generate nth term of Moser - de Bruijn Sequence","code":"< ? php function gen ( $ n ) { $ S = array ( ) ; $ S [ 0 ] = 0 ; $ S [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"S ( 2 * n ) = 4 * S ( n )","code":"if ( $ i % 2 == 0 ) $ S [ $ i ] = 4 * $ S [ $ i \/ 2 ] ;"}
{"text":"S ( 2 * n + 1 ) = 4 * S ( n ) + 1","code":"else $ S [ $ i ] = 4 * $ S [ $ i \/ 2 ] + 1 ; } return $ S [ $ n ] ; }"}
{"text":"Generating the first ' n ' terms of Moser - de Bruijn Sequence","code":"function moserDeBruijn ( $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo gen ( $ i ) , \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ n = 15 ; echo \" First \u2581 \" , $ n , \" \u2581 terms \u2581 of \u2581 \" , \" Moser - de \u2581 Bruijn \u2581 Sequence \u2581 : \u2581 STRNEWLINE \" ; moserDeBruijn ( $ n ) ; ? >"}
{"text":"Function to find longest common substring .","code":"< ? php function LCSubStr ( $ X , $ Y ) {"}
{"text":"Find length of both the strings .","code":"$ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ;"}
{"text":"Variable to store length of longest common substring .","code":"$ result = 0 ;"}
{"text":"Matrix to store result of two consecutive rows at a time .","code":"$ len = array ( array ( ) , array ( ) , ) ;"}
{"text":"Variable to represent which row of matrix is current row .","code":"$ currRow = 0 ;"}
{"text":"For a particular value of i and j , len [ currRow ] [ j ] stores length of longest common substring in string X [ 0. . i ] and Y [ 0. . j ] .","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 0 $ j == 0 ) { $ len [ $ currRow ] [ $ j ] = 0 ; } else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) { $ len [ $ currRow ] [ $ j ] = $ len [ 1 - $ currRow ] [ $ j - 1 ] + 1 ; $ result = max ( $ result , $ len [ $ currRow ] [ $ j ] ) ; } else { $ len [ $ currRow ] [ $ j ] = 0 ; } }"}
{"text":"Make current row as previous row and previous row as new current row .","code":"$ currRow = 1 - $ currRow ; } return $ result ; }"}
{"text":"Driver Code","code":"$ X = \" GeeksforGeeks \" ; $ Y = \" GeeksQuiz \" ; print ( LCSubStr ( $ X , $ Y ) ) ; ? >"}
{"text":"function to return the minimal number of moves","code":"< ? php function minimalSteps ( $ s , $ n ) {"}
{"text":"initializing dp [ i ] to INT_MAX","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ dp [ $ i ] = PHP_INT_MAX ;"}
{"text":"initialize both strings to null","code":"$ s1 = \" \" ; $ s2 = \" \" ;"}
{"text":"base case","code":"$ dp [ 0 ] = 1 ; $ s1 = $ s1 . $ s [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ s1 = $ s1 . $ s [ $ i ] ;"}
{"text":"check if it can be appended","code":"$ s2 = substr ( $ s , $ i + 1 , $ i + 1 ) ;"}
{"text":"addition of character takes one step","code":"$ dp [ $ i ] = min ( $ dp [ $ i ] , $ dp [ $ i - 1 ] + 1 ) ;"}
{"text":"appending takes 1 step , and we directly reach index i * 2 + 1 after appending so the number of steps is stord in i * 2 + 1","code":"if ( $ s1 == $ s2 ) $ dp [ $ i * 2 + 1 ] = min ( $ dp [ $ i ] + 1 , $ dp [ $ i * 2 + 1 ] ) ; } return $ dp [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ s = \" aaaaaaaa \" ; $ n = strlen ( $ s ) ;"}
{"text":"function call to return minimal number of moves","code":"echo minimalSteps ( $ s , $ n ) ; ? >"}
{"text":"Print the first n term of Golomb Sequence","code":"< ? php function printGolomb ( $ n ) {"}
{"text":"base cases","code":"$ dp [ 1 ] = 1 ; echo $ dp [ 1 ] , \" \" ;"}
{"text":"Finding and printing first n terms of Golomb Sequence .","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ dp [ $ i ] = 1 + $ dp [ $ i - $ dp [ $ dp [ $ i - 1 ] ] ] ; echo $ dp [ $ i ] , \" \" ; } }"}
{"text":"Driver Code","code":"$ n = 9 ; printGolomb ( $ n ) ; ? >"}
{"text":"Returns the length of substring with maximum difference of zeroes and ones in binary string","code":"< ? php function findLength ( $ str , $ n ) { $ current_sum = 0 ; $ max_sum = 0 ;"}
{"text":"traverse a binary string from left to right","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"add current value to the current_sum according to the Character if it ' s \u2581 ' 0 ' add 1 else -1","code":"$ current_sum += ( $ str [ $ i ] == '0' ? 1 : -1 ) ; if ( $ current_sum < 0 ) $ current_sum = 0 ;"}
{"text":"update maximum sum","code":"$ max_sum = max ( $ current_sum , $ max_sum ) ; }"}
{"text":"return - 1 if string does not contain any zero that means all ones otherwise max_sum","code":"return $ max_sum == 0 ? -1 : $ max_sum ; }"}
{"text":"Driver Code","code":"$ s = \"11000010001\" ; $ n = 11 ; echo findLength ( $ s , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to count numbers of k digits that are strictly monotone .","code":"< ? php $ DP_s = 9 ; function getNumStrictMonotone ( $ len ) { global $ DP_s ;"}
{"text":"DP [ i ] [ j ] is going to store monotone numbers of length i + 1 considering j + 1 digits ( 1 , 2 , 3 , . .9 )","code":"$ DP = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { for ( $ j = 0 ; $ j < $ DP_s ; $ j ++ ) $ DP [ $ i ] [ $ j ] = 0 ; }"}
{"text":"Unit length numbers","code":"for ( $ i = 0 ; $ i < $ DP_s ; ++ $ i ) $ DP [ 0 ] [ $ i ] = $ i + 1 ;"}
{"text":"Building dp [ ] in bottom up","code":"for ( $ i = 1 ; $ i < $ len ; ++ $ i ) for ( $ j = 1 ; $ j < $ DP_s ; ++ $ j ) $ DP [ $ i ] [ $ j ] = $ DP [ $ i - 1 ] [ $ j - 1 ] + $ DP [ $ i ] [ $ j - 1 ] ; return $ DP [ $ len - 1 ] [ $ DP_s - 1 ] ; }"}
{"text":"Driver code","code":"echo ( getNumStrictMonotone ( 2 ) ) ; ? >"}
{"text":"PHP code to count ways to divide circle using N non - intersecting chords .","code":"< ? php function chordCnt ( $ A ) {"}
{"text":"n = no of points required","code":"$ n = 2 * $ A ;"}
{"text":"dp array containing the sum","code":"$ dpArray = array_fill ( 0 , $ n + 1 , 0 ) ; $ dpArray [ 0 ] = 1 ; $ dpArray [ 2 ] = 1 ; for ( $ i = 4 ; $ i <= $ n ; $ i += 2 ) { for ( $ j = 0 ; $ j < $ i - 1 ; $ j += 2 ) { $ dpArray [ $ i ] += ( $ dpArray [ $ j ] * $ dpArray [ $ i - 2 - $ j ] ) ; } }"}
{"text":"returning the required number","code":"return $ dpArray [ $ n ] ; }"}
{"text":"Driver Code","code":"$ N = 2 ; echo chordCnt ( $ N ) , \" STRNEWLINE \" ; $ N = 1 ; echo chordCnt ( $ N ) , \" STRNEWLINE \" ; $ N = 4 ; echo chordCnt ( $ N ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find if there is path from top left to right bottom","code":"< ? php $ row = 5 ; $ col = 5 ;"}
{"text":"to find the path from top left to bottom right","code":"function isPath ( $ arr ) { global $ row , $ col ;"}
{"text":"set arr [ 0 ] [ 0 ] = 1","code":"$ arr [ 0 ] [ 0 ] = 1 ;"}
{"text":"Mark reachable ( from top left ) nodes in first row and first column .","code":"for ( $ i = 1 ; $ i < $ row ; $ i ++ ) if ( $ arr [ $ i ] [ 0 ] != -1 ) $ arr [ $ i ] [ 0 ] = $ arr [ $ i - 1 ] [ 0 ] ; for ( $ j = 1 ; $ j < $ col ; $ j ++ ) if ( $ arr [ 0 ] [ $ j ] != -1 ) $ arr [ 0 ] [ $ j ] = $ arr [ 0 ] [ $ j - 1 ] ;"}
{"text":"Mark reachable nodes in remaining matrix .","code":"for ( $ i = 1 ; $ i < $ row ; $ i ++ ) for ( $ j = 1 ; $ j < $ col ; $ j ++ ) if ( $ arr [ $ i ] [ $ j ] != -1 ) $ arr [ $ i ] [ $ j ] = max ( $ arr [ $ i ] [ $ j - 1 ] , $ arr [ $ i - 1 ] [ $ j ] ) ;"}
{"text":"return yes if right bottom index is 1","code":"return ( $ arr [ $ row - 1 ] [ $ col - 1 ] == 1 ) ; }"}
{"text":"Given array","code":"$ arr = array ( array ( 0 , 0 , 0 , 1 , 0 ) , array ( -1 , 0 , 0 , -1 , -1 ) , array ( 0 , 0 , 0 , -1 , 0 ) , array ( -1 , 0 , -1 , 0 , -1 ) , array ( 0 , 0 , -1 , 0 , 0 ) ) ;"}
{"text":"path from arr [ 0 ] [ 0 ] to arr [ row ] [ col ]","code":"if ( isPath ( $ arr ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"return nth Newman a Shanks a Williams prime","code":"< ? php function nswp ( $ n ) {"}
{"text":"Base case","code":"if ( $ n == 0 $ n == 1 ) return 1 ;"}
{"text":"Recursive step","code":"return 2 * nswp ( $ n - 1 ) + nswp ( $ n - 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo ( nswp ( $ n ) ) ; ? >"}
{"text":"return nth Newman Shanks Williams prime","code":"< ? php function nswp ( $ n ) {"}
{"text":"Base case","code":"$ dp [ 0 ] = $ dp [ 1 ] = 1 ;"}
{"text":"Finding nth Newman Shanks Williams prime","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] = 2 * $ dp [ $ i - 1 ] + $ dp [ $ i - 2 ] ; return $ dp [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo ( nswp ( $ n ) ) ; ? >"}
{"text":"Function to returns cost of removing the identical characters in LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]","code":"< ? php function lcs ( $ X , $ Y , $ m , $ n ) { $ L = array ( $ m + 1 , $ n + 1 ) ;"}
{"text":"Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains cost of removing identical characters in LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]","code":"for ( $ i = 0 ; $ i <= $ m ; ++ $ i ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 0 $ j == 0 ) $ L [ $ i ] [ $ j ] = 0 ;"}
{"text":"If both characters are same , add both of them","code":"else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) $ L [ $ i ] [ $ j ] = $ L [ $ i - 1 ] [ $ j - 1 ] + 2 * ( $ X [ $ i - 1 ] - '0' ) ;"}
{"text":"Otherwise find the maximum cost among them","code":"else $ L [ $ i ] [ $ j ] = $ L [ $ i - 1 ] [ $ j ] > $ L [ $ i ] [ $ j - 1 ] ? $ L [ $ i - 1 ] [ $ j ] : $ L [ $ i ] [ $ j - 1 ] ; } } return $ L [ $ m ] [ $ n ] ; }"}
{"text":"Returns cost of making X [ ] and Y [ ] identical","code":"function findMinCost ( $ X , $ Y ) {"}
{"text":"Find LCS of X [ ] and Y [ ]","code":"$ m = sizeof ( $ X ) ; $ n = sizeof ( $ Y ) ;"}
{"text":"Initialize the cost variable","code":"$ cost = 0 ;"}
{"text":"Find cost of all characters in both strings","code":"for ( $ i = 0 ; $ i < $ m ; ++ $ i ) $ cost += $ X [ $ i ] - '0' ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ cost += $ Y [ $ i ] - '0' ; return $ cost - lcs ( $ X , $ Y , $ m , $ n ) ; }"}
{"text":"Driver code","code":"$ X = str_split ( \"3759\" ) ; $ Y = str_split ( \"9350\" ) ; echo ( \" Minimum \u2581 Cost \u2581 to \u2581 make \u2581 two \u2581 strings \" . \" identical is = \""}
{"text":"Function takes in an array of numbers , dynamically goes on the location and makes combination of numbers .","code":"< ? php function isSubSeqDivisible ( $ str ) { $ n = strlen ( $ str ) ; $ dp = array_fill ( 0 , $ n + 1 , array_fill ( 0 , 10 , NULL ) ) ;"}
{"text":"Converting string to integer array for ease of computations ( Indexing in arr [ ] is considered to be starting from 1 )","code":"$ arr = array_fill ( 0 , ( $ n + 1 ) , NULL ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ arr [ $ i ] = $ str [ $ i - 1 ] - '0' ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ dp [ $ i ] [ $ arr [ $ i ] % 8 ] = 1 ; for ( $ j = 0 ; $ j < 8 ; $ j ++ ) {"}
{"text":"If we consider the number in our combination , we add it to the previous combination","code":"if ( $ dp [ $ i - 1 ] [ $ j ] > $ dp [ $ i ] [ ( $ j * 10 + $ arr [ $ i ] ) % 8 ] ) $ dp [ $ i ] [ ( $ j * 10 + $ arr [ $ i ] ) % 8 ] = $ dp [ $ i - 1 ] [ $ j ] ;"}
{"text":"If we exclude the number from our combination","code":"if ( $ dp [ $ i - 1 ] [ $ j ] > $ dp [ $ i ] [ $ j ] ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j ] ; } } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If at dp [ i ] [ 0 ] , we find value 1 \/ true , it shows that the number exists at the value of ' i '","code":"if ( $ dp [ $ i ] [ 0 ] == 1 ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ str = \"3144\" ; if ( isSubSeqDivisible ( $ str ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find length of the longest balanced subsequence","code":"< ? php function maxLength ( $ s , $ n ) { $ dp = array_fill ( 0 , $ n , array_fill ( 0 , $ n , NULL ) ) ;"}
{"text":"Considering all balanced substrings of length 2","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ s [ $ i ] == ' ( ' && $ s [ $ i + 1 ] == ' ) ' ) $ dp [ $ i ] [ $ i + 1 ] = 2 ;"}
{"text":"Considering all other substrings","code":"for ( $ l = 2 ; $ l < $ n ; $ l ++ ) { for ( $ i = 0 , $ j = $ l ; $ j < $ n ; $ i ++ , $ j ++ ) { if ( $ s [ $ i ] == ' ( ' && $ s [ $ j ] == ' ) ' ) $ dp [ $ i ] [ $ j ] = 2 + $ dp [ $ i + 1 ] [ $ j - 1 ] ; for ( $ k = $ i ; $ k < $ j ; $ k ++ ) $ dp [ $ i ] [ $ j ] = max ( $ dp [ $ i ] [ $ j ] , $ dp [ $ i ] [ $ k ] + $ dp [ $ k + 1 ] [ $ j ] ) ; } } return $ dp [ 0 ] [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ s = \" ( ) ( ( ( ( ( ( ) \" ; $ n = strlen ( $ s ) ; echo maxLength ( $ s , $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"function to find the smallest sum contiguous subarray","code":"< ? php function smallestSumSubarr ( $ arr , $ n ) {"}
{"text":"to store the minimum value that is ending up to the current index","code":"$ min_ending_here = 999999 ;"}
{"text":"to store the minimum value encountered so far","code":"$ min_so_far = 999999 ;"}
{"text":"traverse the array elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if min_ending_here > 0 , then it could not possibly contribute to the minimum sum further","code":"if ( $ min_ending_here > 0 ) $ min_ending_here = $ arr [ $ i ] ;"}
{"text":"else add the value arr [ i ] to min_ending_here","code":"else $ min_ending_here += $ arr [ $ i ] ;"}
{"text":"update min_so_far","code":"$ min_so_far = min ( $ min_so_far , $ min_ending_here ) ; }"}
{"text":"required smallest sum contiguous subarray value","code":"return $ min_so_far ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , -4 , 2 , -3 , -1 , 7 , -5 ) ; $ n = count ( $ arr ) ; echo \" Smallest \u2581 sum : \u2581 \" . smallestSumSubarr ( $ arr , $ n ) ; ? >"}
{"text":"Returns count of ways to color k posts using k colors","code":"< ? php function countWays ( $ n , $ k ) {"}
{"text":"There are k ways to color first post","code":"$ total = $ k ; $ mod = 1000000007 ;"}
{"text":"There are 0 ways for single post to violate ( same color_ and k ways to not violate ( different color )","code":"$ same = 0 ; $ diff = $ k ;"}
{"text":"Fill for 2 posts onwards","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Current same is same as previous diff","code":"$ same = $ diff ;"}
{"text":"We always have k - 1 choices for next post","code":"$ diff = $ total * ( $ k - 1 ) ; $ diff = $ diff % $ mod ;"}
{"text":"Total choices till i .","code":"$ total = ( $ same + $ diff ) % $ mod ; } return $ total ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ k = 2 ; echo countWays ( $ n , $ k ) . \" STRNEWLINE \" ; ? >"}
{"text":"Returns sum of all substring of num","code":"< ? php function sumOfSubstrings ( $ num ) {"}
{"text":"Initialize result","code":"$ sum = 0 ;"}
{"text":"Here traversing the array in reverse order . Initializing loop from last element . mf is multiplying factor .","code":"$ mf = 1 ; for ( $ i = strlen ( $ num ) - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Each time sum is added to its previous sum . Multiplying the three factors as explained above . s [ i ] - '0' is done to convert char to int .","code":"$ sum += ( $ num [ $ i ] - '0' ) * ( $ i + 1 ) * $ mf ;"}
{"text":"Making new multiplying factor as explained above .","code":"$ mf = $ mf * 10 + 1 ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ num = \"6759\" ; echo sumOfSubstrings ( $ num ) , \" STRNEWLINE \" ; ? >"}
{"text":"Returns maximum sum of a subarray with at - least k elements .","code":"< ? php function maxSumWithK ( $ a , $ n , $ k ) {"}
{"text":"maxSum [ i ] is going to store maximum sum till index i such that a [ i ] is part of the sum .","code":"$ maxSum [ 0 ] = $ a [ 0 ] ;"}
{"text":"We use Kadane 's algorithm  to fill maxSum[]","code":"$ curr_max = $ a [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ curr_max = max ( $ a [ $ i ] , $ curr_max + $ a [ $ i ] ) ; $ maxSum [ $ i ] = $ curr_max ; }"}
{"text":"Sum of first k elements","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ sum += $ a [ $ i ] ;"}
{"text":"Use the concept of sliding window","code":"$ result = $ sum ; for ( $ i = $ k ; $ i < $ n ; $ i ++ ) {"}
{"text":"Compute sum of k elements ending with a [ i ] .","code":"$ sum = $ sum + $ a [ $ i ] - $ a [ $ i - $ k ] ;"}
{"text":"Update result if required","code":"$ result = max ( $ result , $ sum ) ;"}
{"text":"Include maximum sum till [ i - k ] also if it increases overall max .","code":"$ result = max ( $ result , $ sum + $ maxSum [ $ i - $ k ] ) ; } return $ result ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 3 , -10 , -3 ) ; $ k = 4 ; $ n = sizeof ( $ a ) ; echo maxSumWithK ( $ a , $ n , $ k ) ; ? >"}
{"text":"function to count the total number of ways to sum up to ' N '","code":"< ? php function countWays ( $ arr , $ m , $ N ) { $ count = array_fill ( 0 , $ N + 1 , 0 ) ;"}
{"text":"base case","code":"$ count [ 0 ] = 1 ;"}
{"text":"count ways for all values up to ' N ' and store the result","code":"for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) for ( $ j = 0 ; $ j < $ m ; $ j ++ )"}
{"text":"if i >= arr [ j ] then accumulate count for value ' i ' as ways to form value ' i - arr [ j ] '","code":"if ( $ i >= $ arr [ $ j ] ) $ count [ $ i ] += $ count [ $ i - $ arr [ $ j ] ] ;"}
{"text":"required number of ways","code":"return $ count [ $ N ] ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 5 , 6 ) ; $ m = count ( $ arr ) ; $ N = 7 ; echo \" Total \u2581 number \u2581 of \u2581 ways \u2581 = \u2581 \" , countWays ( $ arr , $ m , $ N ) ; ? >"}
{"text":"Recursive function to find the number of special sequences","code":"< ? php function getTotalNumberOfSequences ( $ m , $ n ) {"}
{"text":"A special sequence cannot exist if length n is more than the maximum value m .","code":"if ( $ m < $ n ) return 0 ;"}
{"text":"If n is 0 , found an empty special sequence","code":"if ( $ n == 0 ) return 1 ;"}
{"text":"There can be two possibilities : ( 1 ) Reduce last element value ( 2 ) Consider last element as m and reduce number of terms","code":"return getTotalNumberOfSequences ( $ m - 1 , $ n ) + getTotalNumberOfSequences ( $ m \/ 2 , $ n - 1 ) ; }"}
{"text":"Driver Code","code":"$ m = 10 ; $ n = 4 ; echo ( \" Total \u2581 number \u2581 of \u2581 possible \u2581 sequences \u2581 \" ) ; echo ( getTotalNumberOfSequences ( $ m , $ n ) ) ; ? >"}
{"text":"DP based function to find the number of special sequences","code":"< ? php function getTotalNumberOfSequences ( $ m , $ n ) {"}
{"text":"define T and build in bottom manner to store number of special sequences of length n and maximum value m","code":"$ T = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ m + 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n + 1 ; $ j ++ ) {"}
{"text":"Base case : If length of sequence is 0 or maximum value is 0 , there cannot exist any special sequence","code":"if ( $ i == 0 or $ j == 0 ) $ T [ $ i ] [ $ j ] = 0 ;"}
{"text":"if length of sequence is more than the maximum value , special sequence cannot exist","code":"else if ( $ i < $ j ) $ T [ $ i ] [ $ j ] = 0 ;"}
{"text":"If length of sequence is 1 then the number of special sequences is equal to the maximum value For example with maximum value 2 and length 1 , there can be 2 special sequences { 1 } , { 2 }","code":"else if ( $ j == 1 ) $ T [ $ i ] [ $ j ] = $ i ;"}
{"text":"otherwise calculate","code":"else $ T [ $ i ] [ $ j ] = $ T [ $ i - 1 ] [ $ j ] + $ T [ $ i \/ 2 ] [ $ j - 1 ] ; } } return $ T [ $ m ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ m = 10 ; $ n = 4 ; echo \" Total \u2581 number \u2581 of \u2581 possible \u2581 sequences \u2581 \" , getTotalNumberOfSequences ( $ m , $ n ) ; ? >"}
{"text":"lis ( ) returns the length of the longest increasing subsequence in arr [ ] of size n","code":"< ? php function lis ( $ arr , $ n ) { $ result = 0 ; $ lis [ $ n ] = 0 ;"}
{"text":"Initialize LIS values for all indexes","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ lis [ $ i ] = 1 ;"}
{"text":"Compute optimized LIS values in bottom up manner","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ arr [ $ i ] > $ arr [ $ j ] && $ lis [ $ i ] < $ lis [ $ j ] + 1 ) $ lis [ $ i ] = $ lis [ $ j ] + 1 ;"}
{"text":"Pick resultimum of all LIS values","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ result < $ lis [ $ i ] ) $ result = $ lis [ $ i ] ; return $ result ; }"}
{"text":"function to calculate minimum number of deletions","code":"function minimumNumberOfDeletions ( $ arr , $ n ) {"}
{"text":"Find longest increasing subsequence","code":"$ len = lis ( $ arr , $ n ) ;"}
{"text":"After removing elements other than the lis , we get sorted sequence .","code":"return ( $ n - $ len ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 30 , 40 , 2 , 5 , 1 , 7 , 45 , 50 , 8 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo \" Minimum \u2581 number \u2581 of \u2581 deletions \u2581 = \u2581 \" , minimumNumberOfDeletions ( $ arr , $ n ) ; ? >"}
{"text":"Returns the length of the longest palindromic subsequence in ' str '","code":"< ? php function lps ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Create a table to store results of subproblems","code":"$ L ;"}
{"text":"Strings of length 1 are palindrome of length 1","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ L [ $ i ] [ $ i ] = 1 ;"}
{"text":"Build the table . Note that the lower diagonal values of table are useless and not filled in the process . c1 is length of substring","code":"for ( $ cl = 2 ; $ cl <= $ n ; $ cl ++ ) { for ( $ i = 0 ; $ i < $ n - $ cl + 1 ; $ i ++ ) { $ j = $ i + $ cl - 1 ; if ( $ str [ $ i ] == $ str [ $ j ] && $ cl == 2 ) $ L [ $ i ] [ $ j ] = 2 ; else if ( $ str [ $ i ] == $ str [ $ j ] ) $ L [ $ i ] [ $ j ] = $ L [ $ i + 1 ] [ $ j - 1 ] + 2 ; else $ L [ $ i ] [ $ j ] = max ( $ L [ $ i ] [ $ j - 1 ] , $ L [ $ i + 1 ] [ $ j ] ) ; } }"}
{"text":"length of longest palindromic subseq","code":"return $ L [ 0 ] [ $ n - 1 ] ; }"}
{"text":"function to calculate minimum number of deletions","code":"function minimumNumberOfDeletions ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Find longest palindromic subsequence","code":"$ len = lps ( $ str ) ;"}
{"text":"After removing characters other than the lps , we get palindrome .","code":"return ( $ n - $ len ) ; }"}
{"text":"Driver Code","code":"{ $ str = \" geeksforgeeks \" ; echo \" Minimum \u2581 number \u2581 of \u2581 deletions \u2581 = \u2581 \" , minimumNumberOfDeletions ( $ str ) ; return 0 ; } ? >"}
{"text":"Returns minimum offerings required","code":"< ? php function offeringNumber ( $ n , $ templeHeight ) {"}
{"text":"Go through all templs one by one","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) {"}
{"text":"Go to left while height keeps increasing","code":"$ left = 0 ; $ right = 0 ; for ( $ j = $ i - 1 ; $ j >= 0 ; -- $ j ) { if ( $ templeHeight [ $ j ] < $ templeHeight [ $ j + 1 ] ) ++ $ left ; else break ; }"}
{"text":"Go to right while height keeps increasing","code":"for ( $ j = $ i + 1 ; $ j < $ n ; ++ $ j ) { if ( $ templeHeight [ $ j ] < $ templeHeight [ $ j - 1 ] ) ++ $ right ; else break ; }"}
{"text":"This temple should offer maximum of two values to follow the rule .","code":"$ sum += max ( $ right , $ left ) + 1 ; } return $ sum ; }"}
{"text":"Driver code","code":"$ arr1 = array ( 1 , 2 , 2 ) ; echo offeringNumber ( 3 , $ arr1 ) , \" STRNEWLINE \" ; $ arr2 = array ( 1 , 4 , 3 , 6 , 2 , 1 ) ; echo offeringNumber ( 6 , $ arr2 ) , \" STRNEWLINE \" ; ? >"}
{"text":"Returns true if there is a subset of arr [ ] with sum divisible by m","code":"< ? php function modularSum ( $ arr , $ n , $ m ) { if ( $ n > $ m ) return true ;"}
{"text":"This array will keep track of all the possible sum ( after modulo m ) which can be made using subsets of arr [ ] initialising boolean array with all false","code":"$ DP = Array_fill ( 0 , $ m , false ) ;"}
{"text":"we 'll loop through all the elements of arr[]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"anytime we encounter a sum divisible by m , we are done","code":"if ( $ DP [ 0 ] ) return true ;"}
{"text":"To store all the new encountered sum ( after modulo ) . It is used to make sure that arr [ i ] is added only to those entries for which DP [ j ] was true before current iteration .","code":"$ temp = array_fill ( 0 , $ m , false ) ;"}
{"text":"For each element of arr [ ] , we loop through all elements of DP table from 1 to m and we add current element i . e . , arr [ i ] to all those elements which are true in DP table","code":"for ( $ j = 0 ; $ j < $ m ; $ j ++ ) {"}
{"text":"if an element is true in DP table","code":"if ( $ DP [ $ j ] == true ) { if ( $ DP [ ( $ j + $ arr [ $ i ] ) % $ m ] == false )"}
{"text":"We update it in temp and update to DP once loop of j is over","code":"$ temp [ ( $ j + $ arr [ $ i ] ) % $ m ] = true ; } }"}
{"text":"Updating all the elements of temp to DP table since iteration over j is over","code":"for ( $ j = 0 ; $ j < $ m ; $ j ++ ) if ( $ temp [ $ j ] ) $ DP [ $ j ] = true ;"}
{"text":"Also since arr [ i ] is a single element subset , arr [ i ] % m is one of the possible sum","code":"$ DP [ $ arr [ $ i ] % $ m ] = true ; } return $ DP [ 0 ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 7 ) ; $ n = sizeof ( $ arr ) ; $ m = 5 ; if ( modularSum ( $ arr , $ n , $ m ) == true ) echo \" YES STRNEWLINE \" ; else echo \" NO STRNEWLINE \" ; ? >"}
{"text":"function to find maximum sum path","code":"< ? php function maxSum ( $ tri , $ n ) {"}
{"text":"Adding the element of row 1 to both the elements of row 2 to reduce a step from the loop","code":"if ( $ n > 1 ) $ tri [ 1 ] [ 1 ] = $ tri [ 1 ] [ 1 ] + $ tri [ 0 ] [ 0 ] ; $ tri [ 1 ] [ 0 ] = $ tri [ 1 ] [ 0 ] + $ tri [ 0 ] [ 0 ] ;"}
{"text":"Traverse remaining rows","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) { $ tri [ $ i ] [ 0 ] = $ tri [ $ i ] [ 0 ] + $ tri [ $ i - 1 ] [ 0 ] ; $ tri [ $ i ] [ $ i ] = $ tri [ $ i ] [ $ i ] + $ tri [ $ i - 1 ] [ $ i - 1 ] ;"}
{"text":"Loop to traverse columns","code":"for ( $ j = 1 ; $ j < $ i ; $ j ++ ) {"}
{"text":"tri [ i ] would store the possible combinations of sum of the paths","code":"if ( $ tri [ $ i ] [ $ j ] + $ tri [ $ i - 1 ] [ $ j - 1 ] >= $ tri [ $ i ] [ $ j ] + $ tri [ $ i - 1 ] [ $ j ] ) $ tri [ $ i ] [ $ j ] = $ tri [ $ i ] [ $ j ] + $ tri [ $ i - 1 ] [ $ j - 1 ] ; else $ tri [ $ i ] [ $ j ] = $ tri [ $ i ] [ $ j ] + $ tri [ $ i - 1 ] [ $ j ] ; } }"}
{"text":"array at n - 1 index ( tri [ i ] ) stores all possible adding combination , finding the maximum one out of them","code":"$ max = $ tri [ $ n - 1 ] [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ max < $ tri [ $ n - 1 ] [ $ i ] ) $ max = $ tri [ $ n - 1 ] [ $ i ] ; } return $ max ; }"}
{"text":"Driver Code","code":"$ tri = array ( array ( 1 ) , array ( 2 , 1 ) , array ( 3 , 3 , 2 ) ) ; echo maxSum ( $ tri , 3 ) ; ? >"}
{"text":"Returns maximum - difference - sum with array modifications allowed .","code":"< ? php function maximumDifferenceSum ( $ arr , $ N ) {"}
{"text":"Initialize dp [ ] [ ] with 0 values .","code":"$ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ dp [ $ i ] [ 0 ] = $ dp [ $ i ] [ 1 ] = 0 ; for ( $ i = 0 ; $ i < ( $ N - 1 ) ; $ i ++ ) {"}
{"text":"for [ i + 1 ] [ 0 ] ( i . e . current modified value is 1 ) , choose maximum from dp [ $i ] [ 0 ] + abs ( 1 - 1 ) = dp [ i ] [ 0 ] and dp [ $i ] [ 1 ] + abs ( 1 - arr [ i ] )","code":"$ dp [ $ i + 1 ] [ 0 ] = max ( $ dp [ $ i ] [ 0 ] , $ dp [ $ i ] [ 1 ] + abs ( 1 - $ arr [ $ i ] ) ) ;"}
{"text":"for [ i + 1 ] [ 1 ] ( i . e . current modified value is arr [ i + 1 ] ) , choose maximum from dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) and dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] )","code":"$ dp [ $ i + 1 ] [ 1 ] = max ( $ dp [ $ i ] [ 0 ] + abs ( $ arr [ $ i + 1 ] - 1 ) , $ dp [ $ i ] [ 1 ] + abs ( $ arr [ $ i + 1 ] - $ arr [ $ i ] ) ) ; } return max ( $ dp [ $ N - 1 ] [ 0 ] , $ dp [ $ N - 1 ] [ 1 ] ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 2 , 1 , 4 , 5 ) ; $ N = count ( $ arr ) ; echo maximumDifferenceSum ( $ arr , $ N ) ; ? >"}
{"text":"size of the chessboard","code":"< ? php $ N = 8 ;"}
{"text":"direction vector for the Knight","code":"$ dx = array ( 1 , 2 , 2 , 1 , -1 , -2 , -2 , -1 ) ; $ dy = array ( 2 , 1 , -1 , -2 , -2 , -1 , 1 , 2 ) ;"}
{"text":"returns true if the knight is inside the chessboard","code":"function inside ( $ x , $ y ) { global $ N ; return ( $ x >= 0 and $ x < $ N and $ y >= 0 and $ y < $ N ) ; }"}
{"text":"Bottom up approach for finding the probability to go out of chessboard .","code":"function findProb ( $ start_x , $ start_y , $ steps ) { global $ N , $ dx , $ dy ;"}
{"text":"dp array","code":"$ dp1 = array_fill ( 0 , $ N , array_fill ( 0 , $ N , array_fill ( 0 , $ steps + 1 , NULL ) ) ) ;"}
{"text":"for 0 number of steps , each position will have probability 1","code":"for ( $ i = 0 ; $ i < $ N ; ++ $ i ) for ( $ j = 0 ; $ j < $ N ; ++ $ j ) $ dp1 [ $ i ] [ $ j ] [ 0 ] = 1 ;"}
{"text":"for every number of steps s","code":"for ( $ s = 1 ; $ s <= $ steps ; ++ $ s ) {"}
{"text":"for every position ( x , y ) after s number of steps","code":"for ( $ x = 0 ; $ x < $ N ; ++ $ x ) { for ( $ y = 0 ; $ y < $ N ; ++ $ y ) { $ prob = 0.0 ;"}
{"text":"for every position reachable from ( x , y )","code":"for ( $ i = 0 ; $ i < 8 ; ++ $ i ) { $ nx = $ x + $ dx [ $ i ] ; $ ny = $ y + $ dy [ $ i ] ;"}
{"text":"if this position lie inside the board","code":"if ( inside ( $ nx , $ ny ) ) $ prob += $ dp1 [ $ nx ] [ $ ny ] [ $ s - 1 ] \/ 8.0 ; }"}
{"text":"store the result","code":"$ dp1 [ $ x ] [ $ y ] [ $ s ] = $ prob ; } } }"}
{"text":"return the result","code":"return $ dp1 [ $ start_x ] [ $ start_y ] [ $ steps ] ; }"}
{"text":"number of steps","code":"$ K = 3 ;"}
{"text":"Function Call","code":"echo findProb ( 0 , 0 , $ K ) . \" STRNEWLINE \" ; ? >"}
{"text":"Return number of subarrays whose maximum element is less than or equal to K .","code":"< ? php function countSubarray ( $ arr , $ n , $ k ) {"}
{"text":"To store count of subarrays with all elements less than or equal to k .","code":"$ s = 0 ;"}
{"text":"Traversing the array .","code":"$ i = 0 ; while ( $ i < $ n ) {"}
{"text":"If element is greater than k , ignore .","code":"if ( $ arr [ $ i ] > $ k ) { $ i ++ ; continue ; }"}
{"text":"Counting the subarray length whose each element is less than equal to k .","code":"$ count = 0 ; while ( $ i < $ n and $ arr [ $ i ] <= $ k ) { $ i ++ ; $ count ++ ; }"}
{"text":"Suming number of subarray whose maximum element is less than equal to k .","code":"$ s += ( ( $ count * ( $ count + 1 ) ) \/ 2 ) ; } return ( $ n * ( $ n + 1 ) \/ 2 - $ s ) ; }"}
{"text":"Driven Program","code":"$ arr = array ( 1 , 2 , 3 ) ; $ k = 2 ; $ n = count ( $ arr ) ; echo countSubarray ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"< ? php function nCr ( $ n , $ k ) { $ C [ $ n + 1 ] [ $ k + 1 ] = 0 ; $ i ; $ j ;"}
{"text":"Calculate value of Binomial Coefficient in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= min ( $ i , $ k ) ; $ j ++ ) {"}
{"text":"Base Cases","code":"if ( $ j == 0 $ j == $ i ) $ C [ $ i ] [ $ j ] = 1 ;"}
{"text":"Calculate value using previously stored values","code":"else $ C [ $ i ] [ $ j ] = $ C [ $ i - 1 ] [ $ j - 1 ] + $ C [ $ i - 1 ] [ $ j ] ; } } return $ C [ $ n ] [ $ k ] ; }"}
{"text":"method returns sum of average of all subsets","code":"function resultOfAllSubsets ( $ arr , $ N ) {"}
{"text":"Initialize result","code":"$ result = 0.0 ;"}
{"text":"Find sum of elements","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ sum += $ arr [ $ i ] ;"}
{"text":"looping once for all subset of same size","code":"for ( $ n = 1 ; $ n <= $ N ; $ n ++ )"}
{"text":"each element occurs nCr ( N - 1 , n - 1 ) times while considering subset of size n","code":"$ result += ( ( $ sum * ( nCr ( $ N - 1 , $ n - 1 ) ) ) \/ $ n ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 5 , 7 ) ; $ N = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo resultOfAllSubsets ( $ arr , $ N ) ; ? >"}
{"text":"PHP program to find the maximum sum such that no three are consecutive using recursion .","code":"< ? php $ arr = array ( 100 , 1000 , 100 , 1000 , 1 ) ; $ sum = array_fill ( 0 , count ( $ arr ) + 1 , -1 ) ;"}
{"text":"Returns maximum subsequence sum such that no three elements are consecutive","code":"function maxSumWO3Consec ( $ n ) { global $ sum , $ arr ; if ( $ sum [ $ n ] != -1 ) return $ sum [ $ n ] ;"}
{"text":"Base cases ( process first three elements )","code":"if ( $ n == 0 ) return $ sum [ $ n ] = 0 ; if ( $ n == 1 ) return $ sum [ $ n ] = $ arr [ 0 ] ; if ( $ n == 2 ) return $ sum [ $ n ] = $ arr [ 1 ] + $ arr [ 0 ] ;"}
{"text":"Process rest of the elements We have three cases","code":"return $ sum [ $ n ] = max ( max ( maxSumWO3Consec ( $ n - 1 ) , maxSumWO3Consec ( $ n - 2 ) + $ arr [ $ n ] ) , $ arr [ $ n ] + $ arr [ $ n - 1 ] + maxSumWO3Consec ( $ n - 3 ) ) ; }"}
{"text":"Driver code","code":"$ n = count ( $ arr ) ; echo maxSumWO3Consec ( $ n ) ; ? >"}
{"text":"Method to return maximum sum we can get by finding less than K difference pairs","code":"< ? php function maxSumPairWithDifferenceLessThanK ( $ arr , $ N , $ k ) { $ maxSum = 0 ;"}
{"text":"Sort elements to ensure every i and i - 1 is closest possible pair","code":"sort ( $ arr ) ;"}
{"text":"To get maximum possible sum , iterate from largest to smallest , giving larger numbers priority over smaller numbers .","code":"for ( $ i = $ N - 1 ; $ i > 0 ; -- $ i ) {"}
{"text":"Case I : Diff of arr [ i ] and arr [ i - 1 ] is less then K , add to maxSum Case II : Diff between arr [ i ] and arr [ i - 1 ] is not less then K , move to next i since with sorting we know , arr [ i ] - arr [ i - 1 ] < arr [ i ] - arr [ i - 2 ] and so on .","code":"if ( $ arr [ $ i ] - $ arr [ $ i - 1 ] < $ k ) {"}
{"text":"Assuming only positive numbers .","code":"$ maxSum += $ arr [ $ i ] ; $ maxSum += $ arr [ $ i - 1 ] ;"}
{"text":"When a match is found skip this pair","code":"-- $ i ; } } return $ maxSum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 5 , 10 , 15 , 17 , 12 , 9 ) ; $ N = sizeof ( $ arr ) ; $ K = 4 ; echo maxSumPairWithDifferenceLessThanK ( $ arr , $ N , $ K ) ; ? >"}
{"text":"Function to find the subgroups","code":"< ? php function countGroups ( $ position , $ previous_sum , $ length , $ num ) {"}
{"text":"Terminating Condition","code":"if ( $ position == $ length ) return 1 ; $ res = 0 ;"}
{"text":"sum of digits","code":"$ sum = 0 ;"}
{"text":"Traverse all digits from current position to rest of the length of string","code":"for ( $ i = $ position ; $ i < $ length ; $ i ++ ) { $ sum += ( $ num [ $ i ] - '0' ) ;"}
{"text":"If forward_sum is greater than the previous sum , then call the method again","code":"if ( $ sum >= $ previous_sum )"}
{"text":"Note : We pass current sum as previous sum","code":"$ res += countGroups ( $ i + 1 , $ sum , $ length , $ num ) ; }"}
{"text":"Total number of subgroups till current position","code":"return $ res ; }"}
{"text":"Driver Code","code":"$ num = \"1119\" ; $ len = strlen ( $ num ) ; echo countGroups ( 0 , 0 , $ len , $ num ) ; ? >"}
{"text":"Iterative DP function to find the number of times the second string occurs in the first string , whether continuous or discontinuous","code":"< ? php function count1 ( $ a , $ b ) { $ m = strlen ( $ a ) ; $ n = strlen ( $ b ) ;"}
{"text":"Create a table to store results of sub - problems","code":"$ lookup = array_fill ( 0 , $ m + 1 , array_fill ( 0 , $ n + 1 , 0 ) ) ;"}
{"text":"If second string is empty","code":"for ( $ i = 0 ; $ i <= $ m ; ++ $ i ) $ lookup [ $ i ] [ 0 ] = 1 ;"}
{"text":"Fill lookup [ ] [ ] in bottom up manner","code":"for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"If last characters are same , we have two options - 1. consider last characters of both strings in solution 2. ignore last character of first string","code":"if ( $ a [ $ i - 1 ] == $ b [ $ j - 1 ] ) $ lookup [ $ i ] [ $ j ] = $ lookup [ $ i - 1 ] [ $ j - 1 ] + $ lookup [ $ i - 1 ] [ $ j ] ; else"}
{"text":"If last character are different , ignore last character of first string","code":"$ lookup [ $ i ] [ $ j ] = $ lookup [ $ i - 1 ] [ $ j ] ; } } return $ lookup [ $ m ] [ $ n ] ; }"}
{"text":"Driver code","code":"$ a = \" GeeksforGeeks \" ; $ b = \" Gks \" ; echo count1 ( $ a , $ b ) ; ? >"}
{"text":"Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]","code":"< ? php function lcs ( $ X , $ Y ) {"}
{"text":"Find lengths of two strings","code":"$ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ; $ L = array ( array ( ) ) ;"}
{"text":"Binary index , used to index current row and previous row .","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) {"}
{"text":"Compute current binary index","code":"$ bi = $ i & 1 ; for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 0 $ j == 0 ) $ L [ $ bi ] [ $ j ] = 0 ; else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) $ L [ $ bi ] [ $ j ] = $ L [ 1 - $ bi ] [ $ j - 1 ] + 1 ; else $ L [ $ bi ] [ $ j ] = max ( $ L [ 1 - $ bi ] [ $ j ] , $ L [ $ bi ] [ $ j - 1 ] ) ; } }"}
{"text":"Last filled entry contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ]","code":"return $ L [ $ bi ] [ $ n ] ; }"}
{"text":"Driver code","code":"$ X = \" AGGTAB \" ; $ Y = \" GXTXAYB \" ; echo \" Length \u2581 of \u2581 LCS \u2581 is \u2581 : \u2581 \" , lcs ( $ X , $ Y ) ; ? >"}
{"text":"Returns count of subsets of arr [ ] with XOR value equals to k .","code":"< ? php function subsetXOR ( $ arr , $ n , $ k ) {"}
{"text":"Find maximum element in arr [ ]","code":"$ max_ele = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] > $ max_ele ) $ max_ele = $ arr [ $ i ] ;"}
{"text":"Maximum possible XOR value","code":"$ m = ( 1 << ( int ) ( log ( $ max_ele , 2 ) + 1 ) ) - 1 ; if ( $ k > $ m ) { return 0 ; }"}
{"text":"Initializing all the values of dp [ i ] [ j ] as 0","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ m ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ;"}
{"text":"The xor of empty subset is 0","code":"$ dp [ 0 ] [ 0 ] = 1 ;"}
{"text":"Fill the dp table","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ m ; $ j ++ ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j ] + $ dp [ $ i - 1 ] [ $ j ^ $ arr [ $ i - 1 ] ] ;"}
{"text":"The answer is the number of subset from set arr [ 0. . n - 1 ] having XOR of elements as k","code":"return $ dp [ $ n ] [ $ k ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 ) ; $ k = 4 ; $ n = sizeof ( $ arr ) ; echo \" Count \u2581 of \u2581 subsets \u2581 is \u2581 \" , subsetXOR ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Recursive function that returns count of solutions for given rhs value and coefficients coeff [ start . . end ]","code":"< ? php function countSol ( $ coeff , $ start , $ end , $ rhs ) {"}
{"text":"Base case","code":"if ( $ rhs == 0 ) return 1 ;"}
{"text":"Initialize count of solutions","code":"$ result = 0 ;"}
{"text":"One by subtract all smaller or equal coefficiants and recur","code":"for ( $ i = $ start ; $ i <= $ end ; $ i ++ ) if ( $ coeff [ $ i ] <= $ rhs ) $ result += countSol ( $ coeff , $ i , $ end , $ rhs - $ coeff [ $ i ] ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ coeff = array ( 2 , 2 , 5 ) ; $ rhs = 4 ; $ n = sizeof ( $ coeff ) ; echo countSol ( $ coeff , 0 , $ n - 1 , $ rhs ) ; ? >"}
{"text":"source -> source vertex step -> value of last step taken dest -> destination vertex","code":"< ? php function steps ( $ source , $ step , $ dest ) {"}
{"text":"base cases","code":"if ( abs ( $ source ) > ( $ dest ) ) return PHP_INT_MAX ; if ( $ source == $ dest ) return $ step ;"}
{"text":"if we go on positive side","code":"$ pos = steps ( $ source + $ step + 1 , $ step + 1 , $ dest ) ;"}
{"text":"if we go on negative side","code":"$ neg = steps ( $ source - $ step - 1 , $ step + 1 , $ dest ) ;"}
{"text":"minimum of both cases","code":"return min ( $ pos , $ neg ) ; }"}
{"text":"Driver code","code":"$ dest = 11 ; echo \" No . \u2581 of \u2581 steps \u2581 required \u2581 to \u2581 reach \u2581 \" , $ dest , \" \u2581 is \u2581 \" , steps ( 0 , 0 , $ dest ) ; ? >"}
{"text":"Returns length of function for longest common substring of X [ 0. . m - 1 ] and Y [ 0. . n - 1 ]","code":"< ? php function lcs ( $ i , $ j , $ count , & $ X , & $ Y ) { if ( $ i == 0 $ j == 0 ) return $ count ; if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) { $ count = lcs ( $ i - 1 , $ j - 1 , $ count + 1 , $ X , $ Y ) ; } $ count = max ( $ count , lcs ( $ i , $ j - 1 , 0 , $ X , $ Y ) , lcs ( $ i - 1 , $ j , 0 , $ X , $ Y ) ) ; return $ count ; }"}
{"text":"Driver code","code":"$ X = \" abcdxyz \" ; $ Y = \" xyzabcd \" ; $ n = strlen ( $ X ) ; $ m = strlen ( $ Y ) ; echo lcs ( $ n , $ m , 0 , $ X , $ Y ) ; ? >"}
{"text":"Function to calculate number of characters in corresponding string of ' A ' and ' B '","code":"< ? php function no_of_characters ( $ M ) {"}
{"text":"Since the minimum number of characters will be 1","code":"$ k = 1 ;"}
{"text":"Calculating number of characters","code":"while ( true ) {"}
{"text":"Since k length string can represent at most pow ( 2 , k + 1 ) - 2 that is if k = 4 , it can represent at most pow ( 2 , 4 + 1 ) - 2 = 30 so we have to calculate the length of the corresponding string","code":"if ( pow ( 2 , $ k + 1 ) - 2 < $ M ) $ k ++ ; else break ; }"}
{"text":"return the length of the corresponding string","code":"return $ k ; }"}
{"text":"Function to print corresponding string of ' A ' and ' B '","code":"function print_string ( $ M ) { $ k ; $ num ; $ N ;"}
{"text":"Find length of string","code":"$ k = no_of_characters ( $ M ) ;"}
{"text":"Since the first number that can be represented by k length string will be ( pow ( 2 , k ) - 2 ) + 1 and it will be AAA ... A , k times , therefore , N will store that how much we have to print","code":"$ N = $ M - ( pow ( 2 , $ k ) - 2 ) ;"}
{"text":"At a particular time , we have to decide whether we have to print ' A ' or ' B ' , this can be check by calculating the value of pow ( 2 , k - 1 )","code":"while ( $ k > 0 ) { $ num = pow ( 2 , $ k - 1 ) ; if ( $ num >= $ N ) echo \" A \" ; else { echo \" B \" ; $ N -= $ num ; } $ k -- ; }"}
{"text":"Print new line","code":"echo \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ M ; $ M = 30 ; print_string ( $ M ) ; $ M = 55 ; print_string ( $ M ) ; $ M = 100 ; print_string ( $ M ) ; ? >"}
{"text":"Function to return the resultant string","code":"< ? php function updateString ( $ S , $ A , $ B ) { $ l = strlen ( $ A ) ;"}
{"text":"Iterate through all positions i","code":"for ( $ i = 0 ; $ i + $ l <= strlen ( $ S ) ; $ i ++ ) {"}
{"text":"Current sub - string of length = len ( A ) = len ( B )","code":"$ curr = substr ( $ S , $ i , $ i + $ l ) ;"}
{"text":"If current sub - string gets equal to A or B","code":"if ( strcmp ( $ curr , $ A ) == 0 ) {"}
{"text":"Update S after replacing A","code":"$ new_string = substr ( $ S , 0 , $ i ) . $ B . substr ( $ S , $ i + $ l , strlen ( $ S ) ) ; $ S = $ new_string ; $ i += $ l - 1 ; } else {"}
{"text":"Update S after replacing B","code":"$ new_string = substr ( $ S , 0 , $ i ) . $ A . substr ( $ S , $ i + $ l , strlen ( $ S ) ) ; $ S = $ new_string ; $ i += $ l - 1 ; } }"}
{"text":"Return the updated string","code":"return $ S ; }"}
{"text":"Driver code","code":"$ S = \" aab \" ; $ A = \" aa \" ; $ B = \" bb \" ; echo ( updateString ( $ S , $ A , $ B ) ) ;"}
{"text":"Function to print the required pattern","code":"< ? php function printPattern ( $ n , $ m ) {"}
{"text":"When condition fails","code":"if ( $ m > 2 * ( $ n + 1 ) $ m < $ n - 1 ) { echo ( \" - 1\" ) ; }"}
{"text":"When m = n - 1","code":"else if ( abs ( $ n - $ m ) <= 1 ) { while ( $ n > 0 && $ m > 0 ) { System . out . print ( \"01\" ) ; $ n -- ; $ m -- ; } if ( $ n != 0 ) { echo ( \"0\" ) ; } if ( $ m != 0 ) { echo ( \"1\" ) ; } } else { while ( $ m - $ n > 1 && $ n > 0 ) { echo ( \"110\" ) ; $ m = $ m - 2 ; $ n = $ n - 1 ; } while ( $ n > 0 ) { echo ( \"10\" ) ; $ n -- ; $ m -- ; } while ( $ m > 0 ) { echo ( \"1\" ) ; $ m -- ; } } }"}
{"text":"Driver code","code":"$ n = 4 ; $ m = 8 ; printPattern ( $ n , $ m ) ; ? >"}
{"text":"Function to count the number of strictly decreasing subarrays","code":"< ? php function countDecreasing ( $ A , $ n ) {"}
{"text":"Initialize length of current decreasing subarray","code":"$ len = 1 ;"}
{"text":"Traverse through the array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) {"}
{"text":"If arr [ i + 1 ] is less than arr [ i ] , then increment length","code":"if ( $ A [ $ i + 1 ] < $ A [ $ i ] ) $ len ++ ;"}
{"text":"Else Update count and reset length","code":"else { $ cnt += ( ( ( $ len - 1 ) * $ len ) \/ 2 ) ; $ len = 1 ; } }"}
{"text":"If last length is more than 1","code":"if ( $ len > 1 ) $ cnt += ( ( ( $ len - 1 ) * $ len ) \/ 2 ) ; return $ cnt ; }"}
{"text":"Driver Code","code":"$ A = array ( 100 , 3 , 1 , 13 ) ; $ n = sizeof ( $ A ) ; echo countDecreasing ( $ A , $ n ) ; ? >"}
{"text":"Function to find the minimum number of characters to be replaced in string S2 , such that S1 is a substring of S2","code":"< ? php function minimumChar ( $ S1 , $ S2 ) {"}
{"text":"Get the sizes of both strings","code":"$ n = strlen ( $ S1 ) ; $ m = strlen ( $ S2 ) ; $ ans = PHP_INT_MAX ;"}
{"text":"Traverse the string S2","code":"for ( $ i = 0 ; $ i < $ m - $ n + 1 ; $ i ++ ) { $ minRemovedChar = 0 ;"}
{"text":"From every index in S2 , check the number of mis - matching characters in substring of length of S1","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ S1 [ $ j ] != $ S2 [ $ i + $ j ] ) { $ minRemovedChar ++ ; } }"}
{"text":"Take minimum of prev and current mis - match","code":"$ ans = min ( $ minRemovedChar , $ ans ) ; }"}
{"text":"return answer","code":"return $ ans ; }"}
{"text":"Driver Code","code":"$ S1 = \" abc \" ; $ S2 = \" paxzk \" ; echo minimumChar ( $ S1 , $ S2 ) ; ? >"}
{"text":"Simple PHP program to count occurrences of pat in txt .","code":"< ? php function countFreq ( $ pat , $ txt ) { $ M = strlen ( $ pat ) ; $ N = strlen ( $ txt ) ; $ res = 0 ;"}
{"text":"A loop to slide pat [ ] one by one","code":"for ( $ i = 0 ; $ i <= $ N - $ M ; $ i ++ ) {"}
{"text":"For current index i , check for pattern match","code":"for ( $ j = 0 ; $ j < $ M ; $ j ++ ) if ( $ txt [ $ i + $ j ] != $ pat [ $ j ] ) break ;"}
{"text":"if pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]","code":"if ( $ j == $ M ) { $ res ++ ; $ j = 0 ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ txt = \" dhimanman \" ; $ pat = \" man \" ; echo countFreq ( $ pat , $ txt ) ;"}
{"text":"A modified Naive Pettern Searching algorithn that is optimized for the cases when all characters of pattern are different","code":"< ? php function search ( $ pat , $ txt ) { $ M = strlen ( $ pat ) ; $ N = strlen ( $ txt ) ; $ i = 0 ; while ( $ i <= $ N - $ M ) { $ j ;"}
{"text":"For current index i , check for pattern match","code":"for ( $ j = 0 ; $ j < $ M ; $ j ++ ) if ( $ txt [ $ i + $ j ] != $ pat [ $ j ] ) break ;"}
{"text":"if pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]","code":"if ( $ j == $ M ) { echo ( \" Pattern \u2581 found \u2581 at \u2581 index \u2581 $ i \" . \" STRNEWLINE \" ) ; $ i = $ i + $ M ; } else if ( $ j == 0 ) $ i = $ i + 1 ; else"}
{"text":"slide the pattern by j","code":"$ i = $ i + $ j ; } }"}
{"text":"Driver Code","code":"$ txt = \" ABCEABCDABCEABCD \" ; $ pat = \" ABCD \" ; search ( $ pat , $ txt ) ; ? >"}
{"text":"Function to print the required matrix","code":"< ? php function printMatrix ( $ n , $ m ) {"}
{"text":"Impossible to generate the required matrix","code":"if ( $ n < 5 $ m < 5 ) { echo - 1 ; return ; }"}
{"text":"Store all the vowels","code":"$ s = \" aeiou \" ;"}
{"text":"Print the matrix","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Print vowels for every index","code":"for ( $ j = 0 ; $ j < $ m ; $ j ++ ) { echo $ s [ $ j % 5 ] . \" \" ; } echo \" STRNEWLINE \" ; $ c = $ s [ 0 ] ;"}
{"text":"Shift the vowels by one","code":"for ( $ k = 0 ; $ k < 4 ; $ k ++ ) { $ s [ $ k ] = $ s [ $ k + 1 ] ; } $ s [ 4 ] = $ c ; } }"}
{"text":"Driver code","code":"$ n = 5 ; $ m = 5 ; printMatrix ( $ n , $ m ) ; return 0 ; ? >"}
{"text":"Function to return the count of operations required","code":"< ? php function minOperations ( $ n , $ a , $ b , $ c ) {"}
{"text":"To store the count of operations","code":"$ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x = $ a [ $ i ] ; $ y = $ b [ $ i ] ; $ z = $ c [ $ i ] ;"}
{"text":"No operation required","code":"if ( $ x == $ y && $ y == $ z ) ;"}
{"text":"One operation is required when any two characters are equal","code":"else if ( $ x == $ y $ y == $ z $ x == $ z ) { $ ans ++ ; }"}
{"text":"Two operations are required when none of the characters are equal","code":"else { $ ans += 2 ; } }"}
{"text":"Return the minimum count of operations required","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ a = \" place \" ; $ b = \" abcde \" ; $ c = \" plybe \" ; $ n = strlen ( $ a ) ; echo minOperations ( $ n , $ a , $ b , $ c ) ; ? >"}
{"text":"Function that returns true if s can be made lexicographically smaller by reversing a sub - string in s","code":"< ? php function check ( $ s ) { $ n = strlen ( $ s ) ;"}
{"text":"Traverse in the string","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Check if $s [ $i + 1 ] < $s [ $i ]","code":"if ( $ s [ $ i ] > $ s [ $ i + 1 ] ) return true ; }"}
{"text":"Not possible","code":"return false ; }"}
{"text":"Driver code","code":"$ s = \" geeksforgeeks \" ; if ( check ( $ s ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to return the count of required sub - strings","code":"< ? php function countSubStr ( $ str , $ n , $ x ) { $ res = 0 ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ str [ $ i ] == $ x ) {"}
{"text":"Number of sub - strings from position of current x to the end of str","code":"$ res += ( ( $ count + 1 ) * ( $ n - $ i ) ) ;"}
{"text":"To store the number of characters before x","code":"$ count = 0 ; } else $ count ++ ; } return $ res ; }"}
{"text":"Driver code","code":"$ str = \" abcabc \" ; $ n = strlen ( $ str ) ; $ x = ' c ' ; echo countSubStr ( $ str , $ n , $ x ) ; ? >"}
{"text":"Function to return the count of possible sub - strings of length n","code":"< ? php function countSubStr ( $ str , $ n ) { $ len = strlen ( $ str ) ; return ( $ len - $ n + 1 ) ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ n = 5 ; echo ( countSubStr ( $ str , $ n ) ) ; ? >"}
{"text":"Function to return the number of sub - strings that do not contain the given character c","code":"< ? php function countSubstrings ( $ s , $ c ) {"}
{"text":"Length of the string","code":"$ n = strlen ( $ s ) ; $ cnt = 0 ; $ sum = 0 ;"}
{"text":"Traverse in the string","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current character is different from the given character","code":"if ( $ s [ $ i ] != $ c ) $ cnt ++ ; else {"}
{"text":"Update the number of sub - strings","code":"$ sum += floor ( ( $ cnt * ( $ cnt + 1 ) ) \/ 2 ) ;"}
{"text":"Reset count to 0","code":"$ cnt = 0 ; } }"}
{"text":"For the characters appearing after the last occurrence of c","code":"$ sum += floor ( ( $ cnt * ( $ cnt + 1 ) ) \/ 2 ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ s = \" baa \" ; $ c = ' b ' ; echo countSubstrings ( $ s , $ c ) ; ? >"}
{"text":"Function that returns true if s is palindrome","code":"< ? php function isPalindrome ( $ s ) { $ i = 0 ; $ j = strlen ( $ s ) - 1 ; while ( $ i < $ j ) { if ( $ s [ $ i ] != $ s [ $ j ] ) return false ; $ i ++ ; $ j -- ; } return true ; }"}
{"text":"Function to return the required index","code":"function getIndex ( $ S1 , $ S2 , $ n ) { $ S = \" \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Copy the ith character in S","code":"$ S = $ S . $ S1 [ $ i ] ; $ Temp = \" \" ;"}
{"text":"Copy all the character of string s2 in Temp","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) $ Temp . = $ S2 [ $ j ] ;"}
{"text":"Check whether the string is palindrome","code":"if ( isPalindrome ( $ S . $ Temp ) ) { return $ i ; } } return -1 ; }"}
{"text":"Driver code","code":"$ S1 = \" abcdf \" ; $ S2 = \" sfgba \" ; $ n = strlen ( $ S1 ) ; echo getIndex ( $ S1 , $ S2 , $ n ) ; ? >"}
{"text":"Function that returns true if every lowercase character appears atmost once","code":"< ? php function valid ( & $ cnt ) {"}
{"text":"every character frequency must be not greater than one","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ cnt [ $ i ] >= 2 ) return false ; } return true ; }"}
{"text":"Function that returns the modified good string if possible","code":"function getGoodString ( $ s , $ n ) {"}
{"text":"If the length of the string is less than n","code":"if ( $ n < 26 ) return \" - 1\" ;"}
{"text":"Sub - strings of length 26","code":"for ( $ i = 25 ; $ i < $ n ; $ i ++ ) {"}
{"text":"To store frequency of each character","code":"$ cnt = array_fill ( 0 , 26 , NULL ) ;"}
{"text":"Get the frequency of each character in the current sub - string","code":"for ( $ j = $ i ; $ j >= $ i - 25 ; $ j -- ) { if ( $ s [ $ j ] != ' ? ' ) $ cnt [ ord ( $ s [ $ j ] ) - ord ( ' a ' ) ] ++ ; }"}
{"text":"Check if we can get sub - string containing all the 26 characters","code":"if ( valid ( $ cnt ) ) {"}
{"text":"Find which character is missing","code":"$ cur = 0 ; while ( $ cur < 26 && $ cnt [ $ cur ] > 0 ) $ cur ++ ; for ( $ j = $ i - 25 ; $ j <= $ i ; $ j ++ ) {"}
{"text":"Fill with missing characters","code":"if ( $ s [ $ j ] == ' ? ' ) { $ s [ $ j ] = chr ( $ cur + ord ( ' a ' ) ) ; $ cur ++ ;"}
{"text":"Find the next missing character","code":"while ( $ cur < 26 && $ cnt [ $ cur ] > 0 ) $ cur ++ ; } }"}
{"text":"Return the modified good string","code":"return $ s ; } } return \" - 1\" ; }"}
{"text":"Driver code","code":"$ s = \" abcdefghijkl ? nopqrstuvwxy ? \" ; $ n = strlen ( $ s ) ; echo getGoodString ( $ s , $ n ) ; ? >"}
{"text":"Function to check if a character is a vowel","code":"< ? php function isVowel ( $ c ) { $ c = strtolower ( $ c ) ; if ( $ c == ' a ' $ c == ' e ' $ c == ' i ' $ c == ' o ' $ c == ' u ' ) return true ; return false ; }"}
{"text":"Function to swap two consecutively repeated vowels or consonants","code":"function swapRepeated ( $ str ) {"}
{"text":"Traverse through the length of the string","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) - 1 ; $ i ++ ) {"}
{"text":"Check if the two consecutive characters are vowels or consonants","code":"if ( ( isVowel ( $ str [ $ i ] ) && isVowel ( $ str [ $ i + 1 ] ) ) || ( ! isVowel ( $ str [ $ i ] ) && ! isVowel ( $ str [ $ i + 1 ] ) ) ) {"}
{"text":"swap the two characters","code":"$ t = $ str [ $ i ] ; $ str [ $ i ] = $ str [ $ i + 1 ] ; $ str [ $ i + 1 ] = $ t ; } } return $ str ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; echo swapRepeated ( $ str ) ; return 0 ; ? >"}
{"text":"Function to find the largest palindromic subsequence","code":"< ? php function largestPalinSub ( $ s ) { $ res = \" \" ; $ mx = $ s [ 0 ] ;"}
{"text":"Find the largest character","code":"for ( $ i = 1 ; $ i < strlen ( $ s ) ; $ i ++ ) { $ mx = max ( $ mx , $ s [ $ i ] ) ; }"}
{"text":"Append all occurrences of largest character to the resultant string","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) { if ( $ s [ $ i ] == $ mx ) { $ res . = $ s [ $ i ] ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ s = \" geeksforgeeks \" ; echo ( largestPalinSub ( $ s ) ) ; ? >"}
{"text":"Function to print the required string","code":"< ? php function printString ( $ str , $ n ) {"}
{"text":"count number of 1 s","code":"$ ones = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ str [ $ i ] == '1' ) $ ones ++ ;"}
{"text":"To check if the all the 1 s have been used or not","code":"$ used = false ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ str [ $ i ] == '2' && ! $ used ) { $ used = 1 ;"}
{"text":"Print all the 1 s if any 2 is encountered","code":"for ( $ j = 0 ; $ j < $ ones ; $ j ++ ) echo \"1\" ; }"}
{"text":"If str [ i ] = 0 or str [ i ] = 2","code":"if ( $ str [ $ i ] != '1' ) echo $ str [ $ i ] ; }"}
{"text":"If 1 s are not printed yet","code":"if ( ! $ used ) for ( $ j = 0 ; $ j < $ ones ; $ j ++ ) echo \"1\" ; }"}
{"text":"Driver code","code":"$ str = \"100210\" ; $ n = strlen ( $ str ) ; printString ( $ str , $ n ) ; ? >"}
{"text":"Function to return the required count","code":"< ? php function findPermutation ( $ str , $ k ) { $ has = array ( ) ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { $ has [ $ i ] = false ; }"}
{"text":"To store the count of distinct characters in $str","code":"$ cnt = 0 ;"}
{"text":"Traverse $str character by character","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) {"}
{"text":"If current character is appearing for the first time in $str","code":"if ( $ has [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] == false ) {"}
{"text":"Increment the distinct character count","code":"$ cnt ++ ;"}
{"text":"Update the appearance of the current character","code":"$ has [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] = true ; } } $ ans = 1 ;"}
{"text":"Since P ( n , r ) = n ! \/ ( n - r ) !","code":"for ( $ i = 2 ; $ i <= $ cnt ; $ i ++ ) $ ans *= $ i ; for ( $ i = $ cnt - $ k ; $ i > 1 ; $ i -- ) $ ans \/= $ i ;"}
{"text":"Return the answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ k = 4 ; echo findPermutation ( $ str , $ k ) ; ? >"}
{"text":"Returns the product of digits of number x","code":"< ? php function product ( $ x ) { $ prod = 1 ; while ( $ x ) { $ prod *= ( $ x % 10 ) ; $ x = ( int ) ( $ x \/ 10 ) ; } return $ prod ; }"}
{"text":"This function returns the number having maximum product of the digits","code":"function findNumber ( $ l , $ r ) {"}
{"text":"Let the current answer be r","code":"$ ans = $ r ;"}
{"text":"Converting both integers to strings","code":"$ a = strval ( $ l ) ; $ b = strval ( $ r ) ; for ( $ i = 0 ; $ i < strlen ( $ b ) ; $ i ++ ) { if ( $ b [ $ i ] == '0' ) continue ;"}
{"text":"Stores the current number having current digit one less than current digit in b","code":"$ curr = $ b ; $ curr [ $ i ] = chr ( ( ( ord ( $ curr [ $ i ] ) - ord ( '0' ) ) - 1 ) + ord ( '0' ) ) ;"}
{"text":"Replace all following digits with 9 to maximise the product","code":"for ( $ j = $ i + 1 ; $ j < strlen ( $ curr ) ; $ j ++ ) $ curr [ $ j ] = '9' ;"}
{"text":"Convert string to number","code":"$ num = 0 ; for ( $ c = 0 ; $ c < strlen ( $ curr ) ; $ c ++ ) $ num = $ num * 10 + ( ord ( $ curr [ $ c ] ) - ord ( '0' ) ) ;"}
{"text":"Check if it lies in range and its product is greater than max product","code":"if ( $ num >= $ l and product ( $ ans ) < product ( $ num ) ) $ ans = $ num ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ l = 1 ; $ r = 10 ; print ( findNumber ( $ l , $ r ) . \" \" ) ; $ l = 51 ; $ r = 62 ; print ( findNumber ( $ l , $ r ) ) ; ? >"}
{"text":"Function to print a binary string which has ' a ' number of 0 ' s , \u2581 ' b ' \u2581 number \u2581 of \u2581 1' s and there are at least ' x ' indices such that s [ i ] != s [ i + 1 ]","code":"< ? php function constructBinString ( $ a , $ b , $ x ) { $ d ; $ i ;"}
{"text":"Divide index value by 2 and store it into d","code":"$ d = $ x \/ 2 ;"}
{"text":"If index value x is even and x \/ 2 is not equal to a","code":"if ( $ x % 2 == 0 && $ x \/ 2 != $ a ) { $ d -- ; echo 0 ; $ a -- ; }"}
{"text":"Loop for d for each d print 10","code":"for ( $ i = 0 ; $ i < $ d ; $ i ++ ) echo \"10\" ;"}
{"text":"subtract d from a and b","code":"$ a = $ a - $ d ; $ b = $ b - $ d ;"}
{"text":"Loop for b to print remaining 1 's","code":"for ( $ i = 0 ; $ i < $ b ; $ i ++ ) { echo \"1\" ; }"}
{"text":"Loop for a to print remaining 0 's","code":"for ( $ i = 0 ; $ i < $ a ; $ i ++ ) { echo \"0\" ; } }"}
{"text":"Driver code","code":"$ a = 4 ; $ b = 3 ; $ x = 2 ; constructBinString ( $ a , $ b , $ x ) ; ? >"}
{"text":"Function to match whether there are always n consecutive b ' s \u2581 followed \u2581 by \u2581 n \u2581 consecutive \u2581 a ' s throughout the string","code":"< ? php function matchPattern ( $ s ) { $ count = 0 ; $ n = strlen ( $ s ) ;"}
{"text":"Traverse through the string","code":"$ i = 0 ; while ( $ i < $ n ) {"}
{"text":"Count a 's in current segment","code":"while ( $ i < $ n && $ s [ $ i ] == ' a ' ) { $ count ++ ; $ i ++ ; }"}
{"text":"Count b 's in current segment","code":"while ( $ i < $ n && $ s [ $ i ] == ' b ' ) { $ count -- ; $ i ++ ; }"}
{"text":"If both counts are not same .","code":"if ( $ count != 0 ) return false ; } return true ; }"}
{"text":"Driver code","code":"$ s = \" bb \" ; if ( matchPattern ( $ s ) == true ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to calculate the length of the longest consecutive 1 's","code":"< ? php function maximum_one ( $ s , $ n ) {"}
{"text":"To count all 1 's in the string","code":"$ cnt_one = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] == '1' ) $ cnt_one ++ ; }"}
{"text":"To store cumulative 1 's  $left[$n]; $right[$n];","code":"if ( $ s [ 0 ] == '1' ) $ left [ 0 ] = 1 ; else $ left [ 0 ] = 0 ; if ( $ s [ $ n - 1 ] == '1' ) $ right [ $ n - 1 ] = 1 ; else $ right [ $ n - 1 ] = 0 ;"}
{"text":"Counting cumulative 1 's from left","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] == '1' ) $ left [ $ i ] = $ left [ $ i - 1 ] + 1 ;"}
{"text":"If 0 then start new cumulative one from that i","code":"else $ left [ $ i ] = 0 ; } for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { if ( $ s [ $ i ] == '1' ) $ right [ $ i ] = $ right [ $ i + 1 ] + 1 ; else $ right [ $ i ] = 0 ; } $ cnt = 0 ; $ max_cnt = 0 ; for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"perform step 3 of the approach","code":"if ( $ s [ $ i ] == '0' ) {"}
{"text":"step 3","code":"$ sum = $ left [ $ i - 1 ] + $ right [ $ i + 1 ] ; if ( $ sum < $ cnt_one ) $ cnt = $ sum + 1 ; else $ cnt = $ sum ; $ max_cnt = max ( $ max_cnt , $ cnt ) ; $ cnt = 0 ; } } return $ max_cnt ; }"}
{"text":"string","code":"$ s = \"111011101\" ; echo maximum_one ( $ s , strlen ( $ s ) ) ; ? >"}
{"text":"Function to Find the lexicographically smallest substring in a given string with maximum frequency and contains a ' s \u2581 and \u2581 b ' s only .","code":"< ? php function maxFreq ( $ s , $ a , $ b ) {"}
{"text":"To store frequency of digits","code":"$ fre = array_fill ( 0 , 10 , 0 ) ;"}
{"text":"size of string","code":"$ n = strlen ( $ s ) ;"}
{"text":"Take lexicographically larger digit in b","code":"if ( $ a > $ b ) { $ xx = $ a ; $ a = $ b ; $ b = $ xx ; }"}
{"text":"get frequency of each character","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a = ord ( $ s [ $ i ] ) - ord ( '0' ) ; $ fre [ $ a ] += 1 ; }"}
{"text":"If no such string exits","code":"if ( $ fre [ $ a ] == 0 and $ fre [ $ b ] == 0 ) return -1 ;"}
{"text":"Maximum frequency","code":"else if ( $ fre [ $ a ] >= $ fre [ $ b ] ) return $ a ; else return $ b ; }"}
{"text":"Driver Code","code":"$ a = 4 ; $ b = 7 ; $ s = \"47744\" ; print ( maxFreq ( $ s , $ a , $ b ) ) ; ? >"}
{"text":"Function to find the minimum steps to convert string a to string b","code":"< ? php function convert ( $ n , $ a , $ b ) {"}
{"text":"array to mark the positions needed to be negated","code":"$ l = array_fill ( 0 , $ n , NULL ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ l [ $ i ] = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If two character are not same then they need to be negated","code":"if ( $ a [ $ i ] != $ b [ $ i ] ) $ l [ $ i ] = 1 ; }"}
{"text":"To count the blocks of 1","code":"$ cc = 0 ;"}
{"text":"To count the number of 1 ' s \u2581 in \u2581 \u2581 each \u2581 block \u2581 of \u2581 1' s","code":"$ vl = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ l [ $ i ] == 0 ) { if ( $ vl != 0 ) $ cc += 1 ; $ vl = 0 ; } else $ vl += 1 ; }"}
{"text":"For the last block of 1 's","code":"if ( $ vl != 0 ) $ cc += 1 ; echo $ cc . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ a = \"101010\" ; $ b = \"110011\" ; $ n = strlen ( $ a ) ; convert ( $ n , $ a , $ b ) ; ? >"}
{"text":"Function to find number of ways","code":"< ? php function countWays ( $ s1 , $ s2 , $ n ) { $ a = $ b = $ c = $ d = 0 ;"}
{"text":"initialise result that store No . of swaps required","code":"$ result = 0 ;"}
{"text":"Traverse both strings and check the bits as explained","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ s2 [ $ i ] == '0' ) { if ( $ s1 [ $ i ] == '0' ) { $ c ++ ; } else { $ d ++ ; } } else { if ( $ s1 [ $ i ] == '0' ) { $ a ++ ; } else { $ b ++ ; } } }"}
{"text":"calculate result","code":"$ result = $ a * $ d + $ b * $ c + $ c * $ d ; return $ result ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ s1 = \"01011\" ; $ s2 = \"11001\" ; echo countWays ( $ s1 , $ s2 , $ n ) ; ? >"}
{"text":"Function that returns the winner of the game","code":"< ? php function returnWinner ( $ s , $ l ) {"}
{"text":"Initialize the freq array to 0 int freq [ 26 ] ; memset ( freq , 0 , sizeof freq ) ; $freg = array_fill ( )","code":"$ freq = array_fill ( 0 , 26 , 0 ) ;"}
{"text":"Iterate and count the frequencies of each character in the string","code":"for ( $ i = 0 ; $ i < $ l ; $ i ++ ) { $ freq [ $ s [ $ i ] - ' a ' ] ++ ; } $ cnt = 0 ;"}
{"text":"Count the odd occurring character","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) {"}
{"text":"If odd occurrence","code":"if ( $ freq [ $ i ] & 1 ) $ cnt ++ ; }"}
{"text":"Check condition for Player - 1 winning the game","code":"if ( $ cnt == 0 $ cnt & 1 ) return 1 ; else return 2 ; }"}
{"text":"Driver code","code":"$ s = \" abaaab \" ; $ l = strlen ( $ s ) ;"}
{"text":"Function call that returns the winner","code":"$ winner = returnWinner ( $ s , $ l ) ; echo \" Player - \" , $ winner ; ? >"}
{"text":"Function to find the maximum product","code":"< ? php function maxProductSum ( $ str , $ m ) { $ n = strlen ( $ str ) ; $ maxProd = PHP_INT_MIN ; $ maxSum = PHP_INT_MIN ; for ( $ i = 0 ; $ i <= ( $ n - $ m ) ; $ i ++ ) { $ product = 1 ; $ sum = 0 ; for ( $ j = $ i ; $ j < ( $ m + $ i ) ; $ j ++ ) { $ product = $ product * ( $ str [ $ j ] - '0' ) ; $ sum = $ sum + ( $ str [ $ j ] - '0' ) ; } $ maxProd = max ( $ maxProd , $ product ) ; $ maxSum = max ( $ maxSum , $ sum ) ; } echo \" Maximum \u2581 Product \u2581 = \u2581 \" , $ maxProd ; echo \" Maximum Sum = \" }"}
{"text":"Driver code","code":"$ str = \"3605356297\" ; $ m = 3 ; maxProductSum ( $ str , $ m ) ; ? >"}
{"text":"Returns time needed for signal to traverse through complete string .","code":"< ? php function maxLength ( $ s , $ n ) { $ right = 0 ; $ left = 0 ; $ coun = 0 ; $ max_length = PHP_INT_MIN ;"}
{"text":"for the calculation of last index","code":"$ s = $ s . '1' ;"}
{"text":"for strings like oxoooo , xoxxoooo . .","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { if ( $ s [ $ i ] == ' o ' ) $ coun ++ ; else {"}
{"text":"if coun is greater than max_length","code":"if ( $ coun > $ max_length ) { $ right = 0 ; $ left = 0 ;"}
{"text":"if ' x ' is present at the right side of max_length","code":"if ( $ s [ $ i ] == ' x ' ) $ right = 1 ;"}
{"text":"if ' x ' is present at left side of max_length","code":"if ( ( ( $ i - $ coun ) > 0 ) && ( $ s [ $ i - $ coun - 1 ] == ' x ' ) ) $ left = 1 ;"}
{"text":"We use ceiling function to handle odd number ' o ' s","code":"$ coun = ( int ) ceil ( ( double ) $ coun \/ ( $ right + $ left ) ) ; $ max_length = max ( $ max_length , $ coun ) ; } $ coun = 0 ; } } return $ max_length ; }"}
{"text":"Driver code","code":"$ s = \" oooxoooooooooxooo \" ; $ n = strlen ( $ s ) ; echo ( maxLength ( $ s , $ n ) ) ;"}
{"text":"Function that checks whether the vowel characters in a string are in alphabetical order or not","code":"< ? php function areVowelsInOrder ( $ s ) { $ n = strlen ( $ s ) ;"}
{"text":"ASCII Value 64 is less than all the alphabets so using it as a default value","code":"$ c = chr ( 64 ) ;"}
{"text":"check if the vowels in the string are sorted or not","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] == ' a ' $ s [ $ i ] == ' e ' $ s [ $ i ] == ' $ i ' $ s [ $ i ] == ' o ' $ s [ $ i ] == ' u ' ) {"}
{"text":"if the vowel is smaller than the previous vowel","code":"if ( $ s [ $ i ] < $ c ) return false ; else {"}
{"text":"store the vowel","code":"$ c = $ s [ $ i ] ; } } } return true ; }"}
{"text":"Driver code","code":"$ s = \" aabbbddeecc \" ;"}
{"text":"check whether the vowel characters in a string are in alphabetical order or not","code":"if ( areVowelsInOrder ( $ s ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to Return Remainder","code":"< ? php function Remainder ( $ str , $ R ) {"}
{"text":"len is variable to store the length of Number string .","code":"$ len = strlen ( $ str ) ; $ Num = 0 ; $ Rem = 0 ;"}
{"text":"loop that find Remainder","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ Num = $ Rem * 10 + ( $ str [ $ i ] - '0' ) ; $ Rem = $ Num % $ R ; }"}
{"text":"Return the remainder","code":"return $ Rem ; }"}
{"text":"Get the large number as string","code":"$ str = \"13589234356546756\" ;"}
{"text":"Get the divisor R","code":"$ R = 13 ;"}
{"text":"Find and print the remainder","code":"echo Remainder ( $ str , $ R ) ;"}
{"text":"Function to count the number of carry operations","code":"< ? php function count_carry ( $ a , $ b ) {"}
{"text":"Initialize the value of carry to 0","code":"$ carry = 0 ;"}
{"text":"Counts the number of carry operations","code":"$ count = 0 ;"}
{"text":"Initialize len_a and len_b with the sizes of strings","code":"$ len_a = strlen ( $ a ) ; $ len_b = strlen ( $ b ) ; while ( $ len_a != 0 $ len_b != 0 ) {"}
{"text":"Assigning the ascii value of the character","code":"$ x = 0 ; $ y = 0 ; if ( $ len_a > 0 ) { $ x = $ a [ $ len_a - 1 ] - '0' ; $ len_a -- ; } if ( $ len_b > 0 ) { $ y = $ b [ $ len_b - 1 ] - '0' ; $ len_b -- ; }"}
{"text":"Add both numbers \/ digits","code":"$ sum = $ x + $ y + $ carry ;"}
{"text":"If sum > 0 , increment count and set carry to 1","code":"if ( $ sum >= 10 ) { $ carry = 1 ; $ count ++ ; }"}
{"text":"Else , set carry to 0","code":"else $ carry = 0 ; } return $ count ; }"}
{"text":"Driver code","code":"$ a = \"9555\" ; $ b = \"555\" ; $ count = count_carry ( $ a , $ b ) ; if ( $ count == 0 ) echo \"0 STRNEWLINE \" ; else if ( $ count == 1 ) echo \"1 STRNEWLINE \" ; else echo $ count , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to check if given number is in given base or not .","code":"< ? php function isInGivenBase ( $ str , $ base ) {"}
{"text":"Allowed bases are till 16 ( Hexadecimal )","code":"if ( $ base > 16 ) return false ;"}
{"text":"If base is below or equal to 10 , then all digits should be from 0 to 9.","code":"else if ( $ base <= 10 ) { for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) if ( ! ( $ str [ $ i ] >= '0' and $ str [ $ i ] < ( '0' + $ base ) ) ) return false ; }"}
{"text":"If base is below or equal to 16 , then all digits should be from 0 to 9 or from ' A '","code":"else { for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) if ( ! ( ( $ str [ $ i ] >= '0' && $ str [ $ i ] < ( '0' + $ base ) ) || ( $ str [ $ i ] >= ' A ' && $ str [ $ i ] < ( ' A ' + $ base - 10 ) ) ) ) return false ; } return true ; }"}
{"text":"Driver code","code":"$ str = \" AF87\" ; if ( isInGivenBase ( $ str , 16 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find indices of all occurrences of one string in other .","code":"< ? php function printIndex ( $ str , $ s ) { $ flag = false ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( substr ( $ str , $ i , strlen ( $ s ) ) == $ s ) { echo $ i . \" \" ; $ flag = true ; } } if ( $ flag == false ) echo \" NONE \" ; }"}
{"text":"Driver Code","code":"$ str1 = \" GeeksforGeeks \" ; $ str2 = \" Geeks \" ; printIndex ( $ str1 , $ str2 ) ; ? >"}
{"text":"Function1 to match closing bracket","code":"< ? php function matchClosing ( $ X , $ start , $ end , $ open , $ close ) { $ c = 1 ; $ i = $ start + 1 ; while ( $ i <= $ end ) { if ( $ X [ $ i ] == $ open ) { $ c ++ ; } else if ( $ X [ $ i ] == $ close ) { $ c -- ; } if ( $ c == 0 ) { return $ i ; } $ i ++ ; } return $ i ; }"}
{"text":"Function1 to match opening bracket","code":"function matchingOpening ( $ X , $ start , $ end , $ open , $ close ) { $ c = -1 ; $ i = $ end - 1 ; while ( $ i >= $ start ) { if ( $ X [ $ i ] == $ open ) { $ c ++ ; } else if ( $ X [ $ i ] == $ close ) { $ c -- ; } if ( $ c == 0 ) { return $ i ; } $ i -- ; } return -1 ; }"}
{"text":"Function to check balanced parentheses","code":"function isBalanced ( $ X , $ n ) {"}
{"text":"helper variables","code":"$ i ; $ j = 0 ; $ k ; $ x ; $ start ; $ end ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Handling case of opening parentheses","code":"if ( $ X [ $ i ] == ' ( ' ) { $ j = matchClosing ( $ X , $ i , $ n - 1 , ' ( ' , ' ) ' ) ; } else if ( $ X [ $ i ] == ' { ' ) { $ j = matchClosing ( $ X , $ i , $ n - 1 , ' { ' , ' } ' ) ; } else if ( $ X [ $ i ] == ' [ ' ) { $ j = matchClosing ( $ X , $ i , $ n - 1 , ' [ ' , ' ] ' ) ; }"}
{"text":"Handling case of closing parentheses","code":"else { if ( $ X [ $ i ] == ' ) ' ) { $ j = matchingOpening ( $ X , 0 , $ i , ' ( ' , ' ) ' ) ; } else if ( $ X [ $ i ] == ' } ' ) { $ j = matchingOpening ( $ X , 0 , $ i , ' { ' , ' } ' ) ; } else if ( $ X [ $ i ] == ' ] ' ) { $ j = matchingOpening ( $ X , 0 , $ i , ' [ ' , ' ] ' ) ; }"}
{"text":"If corresponding matching opening parentheses doesn 't lie in given interval return 0","code":"if ( $ j < 0 $ j >= $ i ) { return false ; }"}
{"text":"else continue","code":"continue ; }"}
{"text":"If corresponding closing parentheses doesn 't lie in given interval  return 0","code":"if ( $ j >= $ n $ j < 0 ) { return false ; }"}
{"text":"if found , now check for each opening and closing parentheses in this interval","code":"$ start = $ i ; $ end = $ j ; for ( $ k = $ start + 1 ; $ k < $ end ; $ k ++ ) { if ( $ X [ $ k ] == ' ( ' ) { $ x = matchClosing ( $ X , $ k , $ end , ' ( ' , ' ) ' ) ; if ( ! ( $ k < $ x && $ x < $ end ) ) { return false ; } } else if ( $ X [ $ k ] == ' ) ' ) { $ x = matchingOpening ( $ X , $ start , $ k , ' ( ' , ' ) ' ) ; if ( ! ( $ start < $ x && $ x < $ k ) ) { return false ; } } if ( $ X [ $ k ] == ' { ' ) { $ x = matchClosing ( $ X , $ k , $ end , ' { ' , ' } ' ) ; if ( ! ( $ k < $ x && $ x < $ end ) ) { return false ; } } else if ( $ X [ $ k ] == ' } ' ) { $ x = matchingOpening ( $ X , $ start , $ k , ' { ' , ' } ' ) ; if ( ! ( $ start < $ x && $ x < $ k ) ) { return false ; } } if ( $ X [ $ k ] == ' [ ' ) { $ x = matchClosing ( $ X , $ k , $ end , ' [ ' , ' ] ' ) ; if ( ! ( $ k < $ x && $ x < $ end ) ) { return false ; } } else if ( $ X [ $ k ] == ' ] ' ) { $ x = matchingOpening ( $ X , $ start , $ k , ' [ ' , ' ] ' ) ; if ( ! ( $ start < $ x && $ x < $ k ) ) { return false ; } } } } return true ; }"}
{"text":"Driver Code","code":"$ X = str_split ( \" [ ( ) ] ( ) \" ) ; $ n = 6 ; if ( isBalanced ( $ X , $ n ) ) echo ( \" Yes STRNEWLINE \" ) ; else echo ( \" No STRNEWLINE \" ) ; $ Y = str_split ( \" [ [ ( ) ] ] ) \" ) ; $ n = 7 ; if ( isBalanced ( $ Y , $ n ) ) echo ( \" Yes STRNEWLINE \" ) ; else echo ( \" No STRNEWLINE \" ) ; ? >"}
{"text":"Function to check if it is possible to sort the array","code":"< ? php function possibleToSort ( $ arr , $ n , $ str ) { $ max_element = -1 ; for ( $ i = 0 ; $ i < sizeof ( $ str ) ; $ i ++ ) {"}
{"text":"Calculating max_element at each iteration .","code":"$ max_element = max ( $ max_element , $ arr [ $ i ] ) ;"}
{"text":"if we can not swap the i - th element .","code":"if ( $ str [ $ i ] == '0' ) {"}
{"text":"if it is impossible to swap the max_element then we can not sort the array .","code":"if ( $ max_element > $ i + 1 ) return \" No \" ; } }"}
{"text":"Otherwise , we can sort the array .","code":"return \" Yes \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 5 , 3 , 4 , 6 ) ; $ n = sizeof ( $ arr ) ; $ str = \"01110\" ; echo possibleToSort ( $ arr , $ n , $ str ) ; ? >"}
{"text":"Function that checks if sum is prime or not","code":"< ? php function isPrimeString ( $ str ) { $ len = strlen ( $ str ) ; $ n = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) $ n += ( int ) $ str [ $ i ] ;"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Driver code","code":"$ str = \" geekRam \" ; if ( isPrimeString ( $ str ) ) echo \" Yes \" , \" STRNEWLINE \" ; else echo \" No \" , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find number of palindromic permutations of a given string","code":"< ? php $ MAX = 256 ;"}
{"text":"Returns factorial of n","code":"function fact ( $ n ) { $ res = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res = $ res * $ i ; return $ res ; }"}
{"text":"Returns count of palindromic permutations of str .","code":"function countPalinPermutations ( & $ str ) { global $ MAX ;"}
{"text":"Count frequencies of all characters","code":"$ n = strlen ( $ str ) ; $ freq = ( 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ )"}
{"text":"Since half of the characters decide count of palindromic permutations , we take ( n \/ 2 ) !","code":"$ res = fact ( $ n \/ 2 ) ;"}
{"text":"To make sure that there is at most one odd occurring char","code":"$ oddFreq = false ;"}
{"text":"Traverse through all counts","code":"for ( $ i = 0 ; $ i < $ MAX ; $ i ++ ) { $ half = $ freq [ $ i ] \/ 2 ;"}
{"text":"To make sure that the string can permute to form a palindrome","code":"if ( $ freq [ $ i ] % 2 != 0 ) {"}
{"text":"If there are more than one odd occurring chars","code":"if ( $ oddFreq == true ) return 0 ; $ oddFreq = true ; }"}
{"text":"Divide all permutations with repeated characters","code":"$ res = $ res \/ fact ( $ half ) ; } return $ res ; }"}
{"text":"Driver code","code":"$ str = \" gffg \" ; echo countPalinPermutations ( $ str ) ; ? >"}
{"text":"Function to check if it is possible to convert the string into palindrome","code":"< ? php function checkPalindrome ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Counting number of characters that should be changed .","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ n \/ 2 ; ++ $ i ) if ( $ str [ $ i ] != $ str [ $ n - $ i - 1 ] ) ++ $ count ;"}
{"text":"If count of changes is less than or equal to 1","code":"return ( $ count <= 1 ) ; }"}
{"text":"Driver Code","code":"{ $ str = \" abccaa \" ; if ( checkPalindrome ( $ str ) ) echo \" Yes \" ; else echo \" No \" ; return 0 ; } ? >"}
{"text":"function return count of even decimal value substring","code":"< ? php function evenDecimalValue ( $ str , $ n ) {"}
{"text":"store the count of even decimal value substring","code":"$ result = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"substring started with '0'","code":"if ( $ str [ $ i ] == '0' ) {"}
{"text":"increment result by ( n - i ) because all substring which are generated by this character produce even decimal value .","code":"$ result += ( $ n - $ i ) ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ str = \"10010\" ; $ n = 5 ; echo evenDecimalValue ( $ str , $ n ) ; return 0 ; ? >"}
{"text":"function to count number of substrings with odd decimal representation","code":"< ? php function countSubstr ( $ s ) { $ n = strlen ( $ s ) ;"}
{"text":"auxiliary array to store count of 1 's  before ith index","code":"$ auxArr = array ( ) ; if ( $ s [ 0 ] == '1' ) $ auxArr [ 0 ] = 1 ;"}
{"text":"store count of 1 's  before i-th index","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] == '1' ) $ auxArr [ $ i ] = $ auxArr [ $ i - 1 ] + 1 ; else $ auxArr [ $ i ] = $ auxArr [ $ i - 1 ] ; }"}
{"text":"variable to store answer","code":"$ count = 0 ;"}
{"text":"traverse the string reversely to calculate number of odd substrings before i - th index","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) if ( $ s [ $ i ] == '1' ) $ count += $ auxArr [ $ i ] ; return $ count ; }"}
{"text":"Driver code","code":"$ s = \"1101\" ; echo countSubstr ( $ s ) ; ? >"}
{"text":"PHP program to check whether second string can be formed from first string","code":"< ? php $ MAX = 256 ; function canMakeStr2 ( $ str1 , $ str2 ) {"}
{"text":"Create a count array and count frequencies characters in str1 .","code":"$ count = ( 0 ) ; for ( $ i = 0 ; $ i < strlen ( $ str1 ) ; $ i ++ )"}
{"text":"Now traverse through str2 to check if every character has enough counts","code":"for ( $ i = 0 ; $ i < strlen ( $ str2 ) ; $ i ++ ) { if ( $ count [ $ str2 [ $ i ] ] == 0 ) return -1 ; } return true ; }"}
{"text":"Driver Code","code":"$ str1 = \" geekforgeeks \" ; $ str2 = \" for \" ; if ( canMakeStr2 ( $ str1 , $ str2 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to find final position of robot after the complete movement","code":"< ? php function finalPosition ( $ move ) { $ l = strlen ( $ move ) ; $ countUp = 0 ; $ countDown = 0 ; $ countLeft = 0 ; $ countRight = 0 ;"}
{"text":"traverse the instruction string ' move '","code":"for ( $ i = 0 ; $ i < $ l ; $ i ++ ) {"}
{"text":"for each movement increment its respective counter","code":"if ( $ move [ $ i ] == ' U ' ) $ countUp ++ ; else if ( $ move [ $ i ] == ' D ' ) $ countDown ++ ; else if ( $ move [ $ i ] == ' L ' ) $ countLeft ++ ; else if ( $ move [ $ i ] == ' R ' ) $ countRight ++ ; }"}
{"text":"required final position of robot","code":"echo \" Final \u2581 Position : \u2581 ( \" . ( $ countRight - $ countLeft ) . \" , \u2581 \" , ( $ countUp - $ countDown ) . \" ) \" . \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ move = \" UDDLLRUUUDUURUDDUULLDRRRR \" ; finalPosition ( $ move ) ; ? >"}
{"text":"Return the length of longest balanced parentheses prefix .","code":"< ? php function maxbalancedprefix ( $ str , $ n ) { $ sum = 0 ; $ maxi = 0 ;"}
{"text":"Traversing the string .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If open bracket add 1 to sum .","code":"if ( $ str [ $ i ] == ' ( ' ) $ sum += 1 ;"}
{"text":"If closed bracket subtract 1 from sum","code":"else $ sum -= 1 ;"}
{"text":"if first bracket is closing bracket then this condition would help","code":"if ( $ sum < 0 ) break ;"}
{"text":"If sum is 0 , store the index value .","code":"if ( $ sum == 0 ) $ maxi = $ i + 1 ; } return $ maxi ; }"}
{"text":"Driver Code","code":"$ str = array ( ' ( ' , ' ( ' , ' ( ' , ' ) ' , ' ( ' , ' ) ' , ' ) ' , ' ( ' , ' ) ' , ' ) ' , ' ( ' , ' ( ' ) ; $ n = count ( $ str ) ; echo maxbalancedprefix ( $ str , $ n ) ; ? >"}
{"text":"Function to return cost","code":"< ? php function cost ( $ str ) {"}
{"text":"length of string","code":"$ len = strlen ( $ str ) ;"}
{"text":"Iterate from both sides of string . If not equal , a cost will be there","code":"$ res = 0 ; for ( $ i = 0 , $ j = $ len - 1 ; $ i < $ j ; $ i ++ , $ j -- ) if ( $ str [ $ i ] != $ str [ $ j ] ) $ res += ( min ( ord ( $ str [ $ i ] ) , ord ( $ str [ $ j ] ) ) - ord ( ' a ' ) + 1 ) ; return $ res ; }"}
{"text":"Driver code","code":"$ str = \" abcdef \" ; echo cost ( $ str ) ; ? >"}
{"text":"PHP program to check if a query string is present is given set .","code":"< ? php function isPresent ( $ s , $ q ) {"}
{"text":"Count occurrences of all characters in s .","code":"$ freq = array ( 256 ) ; for ( $ i = 0 ; $ i < 256 ; $ i ++ ) $ freq [ $ i ] = 0 ; for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) $ freq [ ord ( $ s [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"Check if number of occurrences of every character in q is less than or equal to that in s .","code":"for ( $ i = 0 ; $ i < strlen ( $ q ) ; $ i ++ ) { $ freq [ ord ( $ q [ $ i ] ) - ord ( ' a ' ) ] -- ; if ( $ freq [ ord ( $ q [ $ i ] ) - ord ( ' a ' ) ] < 0 ) return false ; } return true ; }"}
{"text":"Driver Code","code":"$ s = \" abctd \" ; $ q = \" cat \" ; if ( isPresent ( $ s , $ q ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns count of minimum character reduce operations to make palindrome .","code":"< ? php function countReduce ( $ str ) { $ n = strlen ( $ str ) ; $ res = 0 ;"}
{"text":"Compare every character of first half with the corresponding character of second half and add difference to result .","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ ) $ res += abs ( ord ( $ str [ $ i ] ) - ord ( $ str [ ( $ n - $ i - 1 ) ] ) ) ; return $ res ; }"}
{"text":"Driver code","code":"$ str = \" abcd \" ; echo countReduce ( $ str ) ; ? >"}
{"text":"function to calculate the minimal changes","code":"< ? php function calculate ( $ s ) {"}
{"text":"maximum digits that can be changed","code":"$ ans = 6 ;"}
{"text":"nested loops to generate all 6 digit numbers","code":"for ( $ i = 0 ; $ i < 10 ; ++ $ i ) { for ( $ j = 0 ; $ j < 10 ; ++ $ j ) { for ( $ k = 0 ; $ k < 10 ; ++ $ k ) { for ( $ l = 0 ; $ l < 10 ; ++ $ l ) { for ( $ m = 0 ; $ m < 10 ; ++ $ m ) { for ( $ n = 0 ; $ n < 10 ; ++ $ n ) { if ( $ i + $ j + $ k == $ l + $ m + $ n ) {"}
{"text":"counter to count the number of change required","code":"$ c = 0 ;"}
{"text":"if first digit is equal","code":"if ( $ i != $ s [ 0 ] - '0' ) $ c ++ ;"}
{"text":"if 2 nd digit is equal","code":"if ( $ j != $ s [ 1 ] - '0' ) $ c ++ ;"}
{"text":"if 3 rd digit is equal","code":"if ( $ k != $ s [ 2 ] - '0' ) $ c ++ ;"}
{"text":"if 4 th digit is equal","code":"if ( $ l != $ s [ 3 ] - '0' ) $ c ++ ;"}
{"text":"if 5 th digit is equal","code":"if ( $ m != $ s [ 4 ] - '0' ) $ c ++ ;"}
{"text":"if 6 th digit is equal","code":"if ( $ n != $ s [ 5 ] - '0' ) $ c ++ ;"}
{"text":"checks if less then the previous calculate changes","code":"if ( $ c < $ ans ) $ ans = $ c ; } } } } } } }"}
{"text":"returns the answer","code":"return $ ans ; }"}
{"text":"number stored in string","code":"$ s = \"123456\" ;"}
{"text":"prints the minimum operations","code":"echo calculate ( $ s ) ; ? >"}
{"text":"Function to check if str can be made using given words","code":"< ? php function makeAndCheckString ( $ words , $ str ) { $ n = sizeof ( $ words ) ; $ first = false ; $ second = false ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If str itself is present","code":"if ( $ words [ $ i ] == $ str ) return true ;"}
{"text":"Match first character of str with second of word and vice versa","code":"if ( $ str [ 0 ] == $ words [ $ i ] [ 1 ] ) $ first = true ; if ( $ str [ 1 ] == $ words [ $ i ] [ 0 ] ) $ second = true ;"}
{"text":"If both characters found .","code":"if ( $ first && $ second ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ str = \" ya \" ; $ words = array ( \" ah \" , \" oy \" , \" to \" , \" ha \" ) ; if ( makeAndCheckString ( $ words , $ str ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"To check sentence is palindrome or not","code":"< ? php function sentencePalindrome ( $ str ) { $ l = 0 ; $ h = strlen ( $ str ) - 1 ;"}
{"text":"Lowercase string","code":"for ( $ i = 0 ; $ i < $ h ; $ i ++ ) $ str [ $ i ] = strtolower ( $ str [ $ i ] ) ;"}
{"text":"Compares character until they are equal","code":"while ( $ l <= $ h ) {"}
{"text":"If there is another symbol in left of sentence","code":"if ( ! ( $ str [ $ l ] >= ' a ' && $ str [ $ l ] <= ' z ' ) ) $ l ++ ;"}
{"text":"If there is another symbol in right of sentence","code":"else if ( ! ( $ str [ $ h ] >= ' a ' && $ str [ $ h ] <= ' z ' ) ) $ h -- ;"}
{"text":"If characters are equal","code":"else if ( $ str [ $ l ] == $ str [ $ h ] ) { $ l ++ ; $ h -- ; }"}
{"text":"If characters are not equal then sentence is not palindrome","code":"else return false ; }"}
{"text":"Returns true if sentence is palindrome","code":"return true ; }"}
{"text":"Driver program to test sentencePalindrome ( )","code":"$ str = \" Too \u2581 hot \u2581 to \u2581 hoot . \" ; if ( sentencePalindrome ( $ str ) ) echo \" Sentence \u2581 is \u2581 palindrome . \" ; else echo \" Sentence \u2581 is \u2581 not \u2581 palindrome . \" ; return 0 ; ? >"}
{"text":"Return number of ways in which XOR become ZERO by remove 1 element","code":"< ? php function xorZero ( $ str ) { $ one_count = 0 ; $ zero_count = 0 ; $ n = strlen ( $ str ) ;"}
{"text":"Counting number of 0 and 1","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ str [ $ i ] == '1' ) $ one_count ++ ; else $ zero_count ++ ;"}
{"text":"If count of ones is even then return count of zero else count of one","code":"if ( $ one_count % 2 == 0 ) return $ zero_count ; return $ one_count ; }"}
{"text":"Driver Code","code":"$ str = \"11111\" ; echo xorZero ( $ str ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to check if it is possible to split string or not","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"function to check if we can split string or not","code":"function checkCorrectOrNot ( $ s ) { global $ MAX_CHAR ;"}
{"text":"Counter array initialized with 0","code":"$ count = array_fill ( 0 , $ MAX_CHAR , NULL ) ;"}
{"text":"Length of the string","code":"$ n = strlen ( $ s ) ; if ( $ n == 1 ) return true ;"}
{"text":"traverse till the middle element is reached","code":"for ( $ i = 0 , $ j = $ n - 1 ; $ i < $ j ; $ i ++ , $ j -- ) {"}
{"text":"First half","code":"$ count [ $ s [ $ i ] - ' a ' ] ++ ;"}
{"text":"Second half","code":"$ count [ $ s [ $ j ] - ' a ' ] -- ; }"}
{"text":"Checking if values are different set flag to 1","code":"for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) if ( $ count [ $ i ] != 0 ) return false ; return true ; }"}
{"text":"String to be checked","code":"$ s = \" abab \" ; if ( checkCorrectOrNot ( $ s ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"PHP program to illustrate string with unique characters using brute force technique","code":"< ? php function uniqueCharacters ( $ str ) {"}
{"text":"Assuming string can have characters a - z , this has 32 bits set to 0","code":"$ checker = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { $ bitAtIndex = $ str [ $ i ] - ' a ' ;"}
{"text":"if that bit is already set in checker , return false","code":"if ( ( $ checker & ( 1 << $ bitAtIndex ) ) > 0 ) { return false ; }"}
{"text":"otherwise update and continue by setting that bit in the checker","code":"$ checker = $ checker | ( 1 << $ bitAtIndex ) ; }"}
{"text":"no duplicates encountered , return true","code":"return true ; }"}
{"text":"Driver Code","code":"$ str = \" geeksforgeeks \" ; if ( uniqueCharacters ( $ str ) ) { echo \" The \u2581 String \u2581 \" , $ str , \" \u2581 has \u2581 all \u2581 unique \u2581 characters STRNEWLINE \" ; } else { echo \" The \u2581 String \u2581 \" , $ str , \" \u2581 has \u2581 duplicate \u2581 characters STRNEWLINE \" ; } ? >"}
{"text":"PHP program to check if k - th bit of a given number is set or not","code":"< ? php function isKthBitSet ( $ n , $ k ) { if ( $ n & ( 1 << ( $ k - 1 ) ) ) echo \" SET \" ; else echo \" NOT \u2581 SET \" ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 1 ; isKthBitSet ( $ n , $ k ) ; ? >"}
{"text":"A recursive function that check a str [ s . . e ] is palindrome or not .","code":"< ? php function isPalRec ( $ str , $ s , $ e ) {"}
{"text":"If there is only one character","code":"if ( $ s == $ e ) return true ;"}
{"text":"If first and last characters do not match","code":"if ( $ str [ $ s ] != $ str [ $ e ] ) return false ;"}
{"text":"If there are more than two characters , check if middle substring is also palindrome or not .","code":"if ( $ s < $ e + 1 ) return isPalRec ( $ str , $ s + 1 , $ e - 1 ) ; return true ; } function isPalindrome ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"An empty string is considered as palindrome","code":"if ( $ n == 0 ) return true ; return isPalRec ( $ str , 0 , $ n - 1 ) ; }"}
{"text":"Driver Code","code":"{ $ str = \" geeg \" ; if ( isPalindrome ( $ str ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; return 0 ; } ? >"}
{"text":"assuming lower case only","code":"< ? php $ MAX_CHAR = 26 ; function countSubstringWithEqualEnds ( $ s ) { global $ MAX_CHAR ; $ result = 0 ; $ n = strlen ( $ s ) ;"}
{"text":"Calculating frequency of each character in the string .","code":"$ count = array_fill ( 0 , $ MAX_CHAR , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count [ ord ( $ s [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"Computing result using counts","code":"for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) $ result += ( $ count [ $ i ] * ( $ count [ $ i ] + 1 ) \/ 2 ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ s = \" abcab \" ; echo countSubstringWithEqualEnds ( $ s ) ; ? >"}
{"text":"Returns the maximum repeating character in a given string","code":"< ? php function maxRepeating ( $ str ) { $ n = strlen ( $ str ) ; $ count = 0 ; $ res = $ str [ 0 ] ; $ cur_count = 1 ;"}
{"text":"Traverse string except last character","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current character matches with next","code":"if ( $ i < $ n - 1 && $ str [ $ i ] == $ str [ $ i + 1 ] ) $ cur_count ++ ;"}
{"text":"If doesn 't match, update result  (if required) and reset count","code":"else { if ( $ cur_count > $ count ) { $ count = $ cur_count ; $ res = $ str [ $ i ] ; } $ cur_count = 1 ; } } return $ res ; }"}
{"text":"Driver code","code":"$ str = \" aaaabbaaccde \" ; echo maxRepeating ( $ str ) ; ? >"}
{"text":"Print whether index i and j have same element or not .","code":"< ? php function query ( $ s , $ i , $ j ) { $ n = strlen ( $ s ) ;"}
{"text":"Finding relative position of index i , j .","code":"$ i %= $ n ; $ j %= $ n ;"}
{"text":"Checking is element are same at index i , j .","code":"if ( ( $ s [ $ i ] == $ s [ $ j ] ) ) echo \" Yes STRNEWLINE \" ; else echo \" No \" ; }"}
{"text":"Driver Code","code":"$ X = \" geeksforgeeks \" ; query ( $ X , 0 , 8 ) ; query ( $ X , 8 , 13 ) ; query ( $ X , 6 , 15 ) ; ? >"}
{"text":"Function to count pairs","code":"< ? php function countPairs ( $ str ) { $ result = 0 ; $ n = strlen ( $ str ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ )"}
{"text":"Increment count if characters are at same distance","code":"if ( abs ( ord ( $ str [ $ i ] ) - ord ( $ str [ $ j ] ) ) == abs ( $ i - $ j ) ) $ result ++ ; return $ result ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; echo countPairs ( $ str ) ; ? >"}
{"text":"Function to calculate longest string str1 -- > first string str2 -- > second string count1 [ ] -- > hash array to calculate frequency of characters in str1 count [ 2 ] -- > hash array to calculate frequency of characters in str2 result -- > resultant longest string whose permutations are sub - sequence of given two strings","code":"< ? php function longestString ( $ str1 , $ str2 ) { $ count1 = array_fill ( 0 , 26 , NULL ) ; $ count2 = array_fill ( 0 , 26 , NULL ) ;"}
{"text":"calculate frequency of characters","code":"for ( $ i = 0 ; $ i < strlen ( $ str1 ) ; $ i ++ ) $ count1 [ ord ( $ str1 [ $ i ] ) - ord ( ' a ' ) ] ++ ; for ( $ i = 0 ; $ i < strlen ( $ str2 ) ; $ i ++ ) $ count2 [ ord ( $ str2 [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"Now traverse hash array","code":"$ result = \" \" ; for ( $ i = 0 ; $ i < 26 ; $ i ++ )"}
{"text":"append character ( ' a ' + i ) in resultant string ' result ' by min ( count1 [ $i ] , count2 [ $i ] ) times","code":"for ( $ j = 1 ; $ j <= min ( $ count1 [ $ i ] , $ count2 [ $ i ] ) ; $ j ++ ) $ result = $ result . chr ( ord ( ' a ' ) + $ i ) ; echo $ result ; }"}
{"text":"Driver Code","code":"$ str1 = \" geeks \" ; $ str2 = \" cake \" ; longestString ( $ str1 , $ str2 ) ; ? >"}
{"text":"Function to count number of substrings with exactly k unique characters","code":"< ? php function countkDist ( $ str , $ k ) {"}
{"text":"Initialize result","code":"$ res = 0 ; $ n = strlen ( $ str ) ;"}
{"text":"To store count of characters from ' a ' to ' z '","code":"$ cnt = array ( ) ;"}
{"text":"Consider all substrings beginning with str [ i ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ dist_count = 0 ;"}
{"text":"Initializing count array with 0","code":"$ cnt = array_fill ( 0 , 0 , true ) ;"}
{"text":"Consider all substrings between str [ i . . j ]","code":"for ( $ j = $ i ; $ j < $ n ; $ j ++ ) {"}
{"text":"If this is a new character for this substring , increment dist_count .","code":"if ( $ cnt [ ord ( $ str [ $ j ] ) - ord ( ' a ' ) ] == 0 ) $ dist_count ++ ;"}
{"text":"Increment count of current character","code":"$ cnt [ ord ( $ str [ $ j ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"If distinct character count becomes k , then increment result .","code":"if ( $ dist_count == $ k ) $ res ++ ; } } return $ res ; }"}
{"text":"Driver code","code":"{ $ ch = \" abcbaa \" ; $ k = 3 ; echo ( \" Total \u2581 substrings \u2581 with \u2581 exactly \u2581 \" . $ k . \" \u2581 distinct \u2581 characters \u2581 : \u2581 \" . countkDist ( $ ch , $ k ) ) ; }"}
{"text":"PHP program to remove repeated digits","code":"< ? php function removeRecur ( $ n ) {"}
{"text":"Store first digits as previous digit","code":"$ prev_digit = $ n % 10 ;"}
{"text":"Initialize power","code":"$ pow = 10 ; $ res = $ prev_digit ;"}
{"text":"Iterate through all digits of n , note that the digits are processed from least significant digit to most significant digit .","code":"while ( $ n ) {"}
{"text":"Store current digit","code":"$ curr_digit = $ n % 10 ; if ( $ curr_digit != $ prev_digit ) {"}
{"text":"Add the current digit to the beginning of result","code":"$ res += $ curr_digit * $ pow ;"}
{"text":"Update previous result and power","code":"$ prev_digit = $ curr_digit ; $ pow *= 10 ; }"}
{"text":"Remove last digit from n","code":"$ n = $ n \/ 10 ; } return $ res ; }"}
{"text":"Driver Code","code":"$ n = 12224 ; echo removeRecur ( $ n ) ; ? >"}
{"text":"Function to print the output","code":"< ? php function printTheArray ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo $ arr [ $ i ] , \" \" ; } echo \" STRNEWLINE \" ; }"}
{"text":"Function to generate all binary strings","code":"function generateAllBinaryStrings ( $ n , $ arr , $ i ) { if ( $ i == $ n ) { printTheArray ( $ arr , $ n ) ; return ; }"}
{"text":"First assign \"0\" at ith position and try for all other permutations for remaining positions","code":"$ arr [ $ i ] = 0 ; generateAllBinaryStrings ( $ n , $ arr , $ i + 1 ) ;"}
{"text":"And then assign \"1\" at ith position and try for all other permutations for remaining positions","code":"$ arr [ $ i ] = 1 ; generateAllBinaryStrings ( $ n , $ arr , $ i + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ arr = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"Print all binary strings","code":"generateAllBinaryStrings ( $ n , $ arr , 0 ) ; ? >"}
{"text":"Utility function to return the first digit of a number .","code":"< ? php function firstDigit ( $ n ) {"}
{"text":"Remove last digit from number till only one digit is left","code":"while ( $ n >= 10 ) { $ n = ( int ) ( $ n \/ 10 ) ; }"}
{"text":"return the first digit","code":"return $ n ; }"}
{"text":"Utility function that returns the count of numbers written down when starting from n","code":"function getCount ( $ n ) { $ count = 1 ; while ( $ n != 0 ) { $ leadDigit = firstDigit ( $ n ) ; $ n -= $ leadDigit ; $ count ++ ; } return $ count ; }"}
{"text":"Function to find the largest number N which can be reduced to 0 in K steps","code":"function getLargestNumber ( $ k ) { $ left = $ k ; $ right = $ k * 10 ; $ mid = ( int ) ( ( $ left + $ right ) \/ 2 ) ;"}
{"text":"Get the sequence length of the mid point","code":"$ len = getCount ( $ mid ) ;"}
{"text":"Until k sequence length is reached","code":"while ( $ len != $ k ) {"}
{"text":"Update mid point","code":"$ mid = ( int ) ( ( $ left + $ right ) \/ 2 ) ;"}
{"text":"Get count of the new mid point","code":"$ len = getCount ( $ mid ) ; if ( $ len > $ k ) {"}
{"text":"Update right to mid","code":"$ right = $ mid ; } else {"}
{"text":"Update left to mid","code":"$ left = $ mid ; } }"}
{"text":"Increment mid point by one while count is equal to k to get the maximum value of mid point","code":"while ( $ len == $ k ) { if ( $ len != getCount ( $ mid + 1 ) ) { break ; } $ mid ++ ; } return ( $ mid ) ; }"}
{"text":"Driver Code","code":"$ k = 3 ; echo ( getLargestNumber ( $ k ) ) ; ? >"}
{"text":"Function to find the longest chord","code":"< ? php function diameter ( $ r ) { echo \" The \u2581 length \u2581 of \u2581 the \u2581 longest \u2581 chord \" , \" \u2581 or \u2581 diameter \u2581 of \u2581 the \u2581 circle \u2581 is \u2581 \" , 2 * $ r << \" STRNEWLINE \" ; }"}
{"text":"Get the radius","code":"$ r = 4 ;"}
{"text":"Find the diameter","code":"diameter ( $ r ) ; ? >"}
{"text":"Function to return the slope of the line which is parallel to the line with the given slope","code":"< ? php function getSlope ( $ m ) { return $ m ; }"}
{"text":"Driver code","code":"$ m = 2 ; echo getSlope ( $ m ) ; ? >"}
{"text":"Function to return total triangles","code":"< ? php function totalTriangles ( $ h , $ v ) {"}
{"text":"Only possible triangle is the given triangle","code":"if ( $ h == 0 && $ v == 0 ) return 1 ;"}
{"text":"If only vertical lines are present","code":"if ( $ h == 0 ) return ( ( $ v + 1 ) * ( $ v + 2 ) \/ 2 ) ;"}
{"text":"If only horizontal lines are present","code":"if ( $ v == 0 ) return ( $ h + 1 ) ;"}
{"text":"Return total triangles","code":"$ Total = ( $ h + 1 ) * ( ( $ v + 1 ) * ( $ v + 2 ) \/ 2 ) ; return $ Total ; }"}
{"text":"Driver code","code":"$ h = 2 ; $ v = 2 ; echo totalTriangles ( $ h , $ v ) ; ? >"}
{"text":"Function to find the biggest sphere","code":"< ? php function sph ( $ r , $ R , $ h ) {"}
{"text":"the radii and height cannot be negative","code":"if ( $ r < 0 && $ R < 0 && $ h < 0 ) return -1 ;"}
{"text":"radius of the sphere","code":"$ x = $ r ;"}
{"text":"volume of the sphere","code":"$ V = ( 4 * 3.14 * pow ( $ r , 3 ) ) \/ 3 ; return $ V ; }"}
{"text":"Driver code","code":"$ r = 5 ; $ R = 8 ; $ h = 11 ; echo sph ( $ r , $ R , $ h ) ; #This  Code is contributed by ajit.. NEW_LINE ? >"}
{"text":"Function to check if two straight lines are orthogonal or not","code":"< ? php function checkOrtho ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 , $ x4 , $ y4 ) {"}
{"text":"Both lines have infinite slope","code":"if ( $ x2 - $ x1 == 0 && $ x4 - $ x3 == 0 ) return false ;"}
{"text":"Only line 1 has infinite slope","code":"else if ( $ x2 - $ x1 == 0 ) { $ m2 = ( int ) ( ( $ y4 - $ y3 ) \/ ( $ x4 - $ x3 ) ) ; if ( $ m2 == 0 ) return true ; else return false ; }"}
{"text":"Only line 2 has infinite slope","code":"else if ( $ x4 - $ x3 == 0 ) { $ m1 = ( int ) ( ( $ y2 - $ y1 ) \/ ( $ x2 - $ x1 ) ) ; if ( $ m1 == 0 ) return true ; else return false ; } else {"}
{"text":"Find slopes of the lines","code":"$ m1 = ( int ) ( ( $ y2 - $ y1 ) \/ ( $ x2 - $ x1 ) ) ; $ m2 = ( int ) ( ( $ y4 - $ y3 ) \/ ( $ x4 - $ x3 ) ) ;"}
{"text":"Check if their product is - 1","code":"if ( $ m1 * $ m2 == -1 ) return true ; else return false ; } }"}
{"text":"Driver code","code":"$ x1 = 0 ; $ y1 = 4 ; $ x2 = 0 ; $ y2 = -9 ; $ x3 = 2 ; $ y3 = 0 ; $ x4 = -1 ; $ y4 = 0 ; if ( checkOrtho ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 , $ x4 , $ y4 ) ) print ( \" Yes \" ) ; else print ( \" No \" ) ; ? >"}
{"text":"Function to find the diagonal of a regular pentagon","code":"< ? php function pentdiagonal ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Length of the diagonal","code":"$ d = 1.22 * $ a ; return $ d ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo pentdiagonal ( $ a ) ; ? >"}
{"text":"Function to calculate area","code":"< ? php function hexagonArea ( $ d ) {"}
{"text":"Formula to find area","code":"return ( 3 * sqrt ( 3 ) * pow ( $ d , 2 ) ) \/ 8 ; }"}
{"text":"Driver Code","code":"$ d = 10 ; echo \" Area \u2581 of \u2581 hexagon : \u2581 \" , hexagonArea ( $ d ) ; ? >"}
{"text":"function to find number of squares of a * a required to cover n * m rectangle","code":"< ? php function Squares ( $ n , $ m , $ a ) { return ( ( int ) ( ( $ m + $ a - 1 ) \/ $ a ) ) * ( ( int ) ( ( $ n + $ a - 1 ) \/ $ a ) ) ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ m = 6 ; $ a = 4 ;"}
{"text":"function call","code":"echo Squares ( $ n , $ m , $ a ) ; ? >"}
{"text":"Function to find the diagonal of the octagon","code":"< ? php function octadiagonal ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"diagonal of the octagon","code":"return $ a * sqrt ( 4 + ( 2 * sqrt ( 2 ) ) ) ; }"}
{"text":"Driver code","code":"$ a = 4 ; echo octadiagonal ( $ a ) ; ? >"}
{"text":"Function for finding the perimeter","code":"< ? php function CalPeri ( $ s ) { $ Perimeter = 10 * $ s ; echo \" The \u2581 Perimeter \u2581 of \u2581 Decagon \u2581 is \u2581 : \u2581 $ Perimeter \" ; }"}
{"text":"Driver Code","code":"$ s = 5 ; CalPeri ( $ s ) ; ? >"}
{"text":"function to find the sum of all the edges of parallelepiped","code":"< ? php function findEdges ( $ s1 , $ s2 , $ s3 ) {"}
{"text":"to calculate the length of one edge","code":"$ a = sqrt ( $ s1 * $ s2 \/ $ s3 ) ; $ b = sqrt ( $ s3 * $ s1 \/ $ s2 ) ; $ c = sqrt ( $ s3 * $ s2 \/ $ s1 ) ;"}
{"text":"sum of all the edges of one side","code":"$ sum = $ a + $ b + $ c ;"}
{"text":"net sum will be equal to the summation of edges of all the sides","code":"return 4 * $ sum ; }"}
{"text":"initialize the area of three faces which has a common vertex","code":"$ s1 ; $ s2 ; $ s3 ; $ s1 = 65 ; $ s2 = 156 ; $ s3 = 60 ; echo findEdges ( $ s1 , $ s2 , $ s3 ) ; ? >"}
{"text":"Function for finding maximum pieces with n cuts .","code":"< ? php function findMaximumPieces ( $ n ) {"}
{"text":"to maximize number of pieces x is the horizontal cuts","code":"$ x = ( int ) ( $ n \/ 2 ) ;"}
{"text":"Now ( x ) is the horizontal cuts and ( n - x ) is vertical cuts , then maximum number of pieces = ( x + 1 ) * ( n - x + 1 )","code":"return ( ( $ x + 1 ) * ( $ n - $ x + 1 ) ) ; }"}
{"text":"Taking the maximum number of cuts allowed as 3","code":"$ n = 3 ;"}
{"text":"Finding and printing the max number of pieces","code":"echo \" Max \u2581 number \u2581 of \u2581 pieces \u2581 for \u2581 n \u2581 = \u2581 \" . $ n . \" \u2581 is \u2581 \" . findMaximumPieces ( 3 ) ; ? >"}
{"text":"Function to find equation of plane .","code":"< ? php function equation_plane ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 , $ x3 , $ y3 , $ z3 , $ x , $ y , $ z ) { $ a1 = $ x2 - $ x1 ; $ b1 = $ y2 - $ y1 ; $ c1 = $ z2 - $ z1 ; $ a2 = $ x3 - $ x1 ; $ b2 = $ y3 - $ y1 ; $ c2 = $ z3 - $ z1 ; $ a = $ b1 * $ c2 - $ b2 * $ c1 ; $ b = $ a2 * $ c1 - $ a1 * $ c2 ; $ c = $ a1 * $ b2 - $ b1 * $ a2 ; $ d = ( - $ a * $ x1 - $ b * $ y1 - $ c * $ z1 ) ;"}
{"text":"checking if the 4 th point satisfies the above equation","code":"if ( $ a * $ x + $ b * $ y + $ c * $ z + $ d == 0 ) echo ( \" Coplanar \" ) ; else echo ( \" Not \u2581 Coplanar \" ) ; }"}
{"text":"Driver Code","code":"$ x1 = 3 ; $ y1 = 2 ; $ z1 = -5 ; $ x2 = -1 ; $ y2 = 4 ; $ z2 = -3 ; $ x3 = -3 ; $ y3 = 8 ; $ z3 = -5 ; $ x4 = -3 ; $ y4 = 2 ; $ z4 = 1 ;"}
{"text":"function calling","code":"equation_plane ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 , $ x3 , $ y3 , $ z3 , $ x4 , $ y4 , $ z4 ) ; ? >"}
{"text":"Function to find Angle","code":"< ? php function distance ( $ a1 , $ b1 , $ c1 , $ a2 , $ b2 , $ c2 ) { $ d = ( $ a1 * $ a2 + $ b1 * $ b2 + $ c1 * $ c2 ) ; $ e1 = sqrt ( $ a1 * $ a1 + $ b1 * $ b1 + $ c1 * $ c1 ) ; $ e2 = sqrt ( $ a2 * $ a2 + $ b2 * $ b2 + $ c2 * $ c2 ) ; $ d = $ d \/ ( $ e1 * $ e2 ) ; $ pi = 3.14159 ; $ A = ( 180 \/ $ pi ) * ( acos ( $ d ) ) ; echo sprintf ( \" Angle \u2581 is \u2581 % .2f \u2581 degree \" , $ A ) ; }"}
{"text":"Driver Code","code":"$ a1 = 1 ; $ b1 = 1 ; $ c1 = 2 ; $ d1 = 1 ; $ a2 = 2 ; $ b2 = -1 ; $ c2 = 1 ; $ d2 = -4 ; distance ( $ a1 , $ b1 , $ c1 , $ a2 , $ b2 , $ c2 ) ; ? >"}
{"text":"Function to mirror image","code":"< ? php function mirror_point ( $ a , $ b , $ c , $ d , $ x1 , $ y1 , $ z1 ) { $ k = ( - $ a * $ x1 - $ b * $ y1 - $ c * $ z1 - $ d ) \/ ( $ a * $ a + $ b * $ b + $ c * $ c ) ; $ x2 = $ a * $ k + $ x1 ; $ y2 = $ b * $ k + $ y1 ; $ z2 = $ c * $ k + $ z1 ; $ x3 = 2 * $ x2 - $ x1 ; $ y3 = 2 * $ y2 - $ y1 ; $ z3 = 2 * $ z2 - $ z1 ; echo sprintf ( \" x3 \u2581 = \u2581 % .1f \u2581 \" , $ x3 ) ; echo sprintf ( \" y3 \u2581 = \u2581 % .1f \u2581 \" , $ y3 ) ; echo sprintf ( \" z3 \u2581 = \u2581 % .1f \u2581 \" , $ z3 ) ; }"}
{"text":"Driver Code","code":"$ a = 1 ; $ b = -2 ; $ c = 0 ; $ d = 0 ; $ x1 = -1 ; $ y1 = 3 ; $ z1 = 4 ;"}
{"text":"function call","code":"mirror_point ( $ a , $ b , $ c , $ d , $ x1 , $ y1 , $ z1 ) ; ? >"}
{"text":"Function to return the total possible rectangles that can be cut from the circle","code":"< ? php function countRectangles ( $ radius ) { $ rectangles = 0 ;"}
{"text":"Diameter = 2 * $Radius","code":"$ diameter = 2 * $ radius ;"}
{"text":"Square of diameter which is the square of the maximum length diagonal","code":"$ diameterSquare = $ diameter * $ diameter ;"}
{"text":"generate all combinations of a and b in the range ( 1 , ( 2 * Radius - 1 ) ) ( Both inclusive )","code":"for ( $ a = 1 ; $ a < 2 * $ radius ; $ a ++ ) { for ( $ b = 1 ; $ b < 2 * $ radius ; $ b ++ ) {"}
{"text":"Calculate the Diagonal length of this rectangle","code":"$ diagonalLengthSquare = ( $ a * $ a + $ b * $ b ) ;"}
{"text":"If this rectangle 's Diagonal  Length is less than the  Diameter, it is a valid  rectangle, thus increment counter","code":"if ( $ diagonalLengthSquare <= $ diameterSquare ) { $ rectangles ++ ; } } } return $ rectangles ; }"}
{"text":"Radius of the circle","code":"$ radius = 2 ; $ totalRectangles ; $ totalRectangles = countRectangles ( $ radius ) ; echo $ totalRectangles , \" \u2581 rectangles \u2581 can \u2581 be \u2581 \" , \" cut \u2581 from \u2581 a \u2581 circle \u2581 of \u2581 Radius \u2581 \" , $ radius ; ? >"}
{"text":"Function for AAA similarity","code":"< ? php function simi_aaa ( $ a1 , $ a2 ) { sort ( $ a1 ) ; sort ( $ a2 ) ;"}
{"text":"Check for AAA","code":"if ( $ a1 [ 0 ] == $ a2 [ 0 ] && $ a1 [ 1 ] == $ a2 [ 1 ] && $ a1 [ 2 ] == $ a2 [ 2 ] ) return 1 ; else return 0 ; }"}
{"text":"Function for SAS similarity","code":"function simi_sas ( $ s1 , $ s2 , $ a1 , $ a2 ) { sort ( $ a1 ) ; sort ( $ a2 ) ; sort ( $ s1 ) ; sort ( $ s2 ) ;"}
{"text":"angle b \/ w two smallest sides is largest .","code":"if ( $ s1 [ 0 ] \/ $ s2 [ 0 ] == $ s1 [ 1 ] \/ $ s2 [ 1 ] ) {"}
{"text":"since we take angle b \/ w the sides .","code":"if ( $ a1 [ 2 ] == $ a2 [ 2 ] ) return 1 ; } if ( $ s1 [ 1 ] \/ $ s2 [ 1 ] == $ s1 [ 2 ] \/ $ s2 [ 2 ] ) { if ( $ a1 [ 0 ] == $ a2 [ 0 ] ) return 1 ; } if ( $ s1 [ 2 ] \/ $ s2 [ 2 ] == $ s1 [ 0 ] \/ $ s2 [ 0 ] ) { if ( $ a1 [ 1 ] == $ a2 [ 1 ] ) return 1 ; } return 0 ; }"}
{"text":"Function for SSS similarity","code":"function simi_sss ( $ s1 , $ s2 ) { sort ( $ s1 ) ; sort ( $ s2 ) ;"}
{"text":"Check for SSS","code":"if ( $ s1 [ 0 ] \/ $ s2 [ 0 ] == $ s1 [ 1 ] \/ $ s2 [ 1 ] && $ s1 [ 1 ] \/ $ s2 [ 1 ] == $ s1 [ 2 ] \/ $ s2 [ 2 ] && $ s1 [ 2 ] \/ $ s2 [ 2 ] == $ s1 [ 0 ] \/ $ s2 [ 0 ] ) return 1 ; return 0 ; }"}
{"text":"Driver Code","code":"$ s1 = array ( 2 , 3 , 3 ) ; $ s2 = array ( 4 , 6 , 6 ) ; $ a1 = array ( 80 , 60 , 40 ) ; $ a2 = array ( 40 , 60 , 80 ) ;"}
{"text":"function call for AAA similarity","code":"$ aaa = simi_aaa ( $ a1 , $ a2 ) ;"}
{"text":"function call for SSS similarity","code":"$ sss = simi_sss ( $ s1 , $ s2 ) ;"}
{"text":"function call for SAS similarity","code":"$ sas = simi_sas ( $ s1 , $ s2 , $ a1 , $ a2 ) ;"}
{"text":"Check if triangles are similar or not","code":"if ( $ aaa == 1 $ sss == 1 $ sas == 1 ) { echo \" Triangles \u2581 are \u2581 similar \u2581 by \u2581 \" ; if ( $ aaa == 1 ) echo \" AAA \u2581 \" ; if ( $ sss == 1 ) echo \" SSS \u2581 \" ; if ( $ sas == 1 ) echo \" SAS . \" ; } else echo \" Triangles \u2581 are \u2581 not \u2581 similar \" ; ? >"}
{"text":"centered pentadecagonal function","code":"< ? php function center_pentadecagonal_num ( $ n ) {"}
{"text":"Formula to calculate nth centered pentadecagonal number","code":"return ( 15 * $ n * $ n - 15 * $ n + 2 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo $ n , \" th \u2581 number \u2581 : \u2581 \" , center_pentadecagonal_num ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 10 ; echo $ n , \" th \u2581 number \u2581 : \u2581 \" , center_pentadecagonal_num ( $ n ) ; ? >"}
{"text":"centered nonadecagonal function","code":"< ? php function center_nonadecagon_num ( $ n ) {"}
{"text":"Formula to calculate nth centered nonadecagonal number","code":"return ( 19 * $ n * $ n - 19 * $ n + 2 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo $ n , \" th \u2581 centered \u2581 \" + \" nonadecagonal \u2581 number \u2581 : \u2581 \" , center_nonadecagon_num ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 7 ; echo $ n , \" th \u2581 centered \u2581 \" + \" nonadecagonal \u2581 number \u2581 : \u2581 \" , center_nonadecagon_num ( $ n ) ; ? >"}
{"text":"Function to find Hendecagonal number","code":"< ? php function hendecagonal_num ( $ n ) {"}
{"text":"Formula to calculate nth Hendecagonal number","code":"return ( 9 * $ n * $ n - 7 * $ n ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo $ n , \" th \u2581 Hendecagonal \u2581 number : \u2581 \" ; echo hendecagonal_num ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 10 ; echo $ n , \" th \u2581 Hendecagonal \u2581 number : \u2581 \" ; echo hendecagonal_num ( $ n ) ; ? >"}
{"text":"Centered octagonal number function","code":"< ? php function cen_octagonalnum ( $ n ) {"}
{"text":"Formula to calculate nth centered octagonal number & return it into main function .","code":"return ( 4 * $ n * $ n - 4 * $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo $ n , \" th \u2581 centered \" , \" \u2581 octagonal \u2581 number \u2581 : \u2581 \" ; echo cen_octagonalnum ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 11 ; echo $ n , \" th \u2581 centered \" , \" \u2581 octagonal \u2581 number \u2581 : \u2581 \" ; echo cen_octagonalnum ( $ n ) ; ? >"}
{"text":"Checks if ( i , j ) is valid , a point ( i , j ) is valid if point ( arr [ i ] , arr [ j ] ) satisfies the equation y = mx + c And i is not equal to j","code":"< ? php function isValid ( $ arr , $ i , $ j , $ m , $ c ) {"}
{"text":"check if i equals to j","code":"if ( $ i == $ j ) return false ;"}
{"text":"Equation LHS = y , and RHS = mx + c","code":"$ lhs = $ arr [ $ j ] ; $ rhs = $ m * $ arr [ $ i ] + $ c ; return ( $ lhs == $ rhs ) ; }"}
{"text":"Returns the number of ordered pairs ( i , j ) for which point ( arr [ i ] , arr [ j ] ) satisfies the equation of the line y = mx + c","code":"function findOrderedPoints ( $ arr , $ n , $ m , $ c ) { $ counter = 0 ;"}
{"text":"for every possible ( i , j ) check if ( a [ i ] , a [ j ] ) satisfies the equation y = mx + c","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"( firstIndex , secondIndex ) is same as ( i , j )","code":"$ firstIndex = $ i ; $ secondIndex = $ j ;"}
{"text":"check if ( firstIndex , secondIndex ) is a valid point","code":"if ( isValid ( $ arr , $ firstIndex , $ secondIndex , $ m , $ c ) ) $ counter ++ ; } } return $ counter ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 2 ) ; $ n = count ( $ arr ) ;"}
{"text":"equation of line is y = mx + c","code":"$ m = 1 ; $ c = 1 ; echo ( findOrderedPoints ( $ arr , $ n , $ m , $ c ) ) ; ? >"}
{"text":"Function to check if circle lies in the ring","code":"< ? php function checkcircle ( $ r , $ R , $ r1 , $ x1 , $ y1 ) {"}
{"text":"distance between center of circle center of concentric circles ( origin ) using Pythagoras theorem","code":"$ dis = sqrt ( $ x1 * $ x1 + $ y1 * $ y1 ) ;"}
{"text":"Condition to check if circle is strictly inside the ring","code":"return ( $ dis - $ r1 >= $ R && $ dis + $ r1 <= $ r ) ; }"}
{"text":"Both circle with radius ' r ' and ' R ' have center ( 0 , 0 )","code":"$ r = 8 ; $ R = 4 ; $ r1 = 2 ; $ x1 = 6 ; $ y1 = 0 ; if ( checkcircle ( $ r , $ R , $ r1 , $ x1 , $ y1 ) ) echo \" yes \" , \" STRNEWLINE \" ; else echo \" no \" , \" STRNEWLINE \" ; ? >"}
{"text":"utility Function","code":"< ? php function surface_area_octahedron ( $ side ) { return ( 2 * ( sqrt ( 3 ) ) * ( $ side * $ side ) ) ; }"}
{"text":"Driver Code","code":"$ side = 7 ; echo ( \" Surface \u2581 area \u2581 of \u2581 octahedron \u2581 = \" ) ; echo ( surface_area_octahedron ( $ side ) ) ; ? >"}
{"text":"Returns value of binomial coefficient","code":"< ? php function nCk ( $ n , $ k ) { $ C = array_fill ( 0 , $ k + 1 , NULL ) ;"}
{"text":"$C [ 0 ] = 1 ; nC0 is 1","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Compute next row of pascal triangle using the previous row","code":"for ( $ j = min ( $ i , $ k ) ; $ j > 0 ; $ j -- ) $ C [ $ j ] = $ C [ $ j ] + $ C [ $ j - 1 ] ; } return $ C [ $ k ] ; }"}
{"text":"function to calculate number of straight lines can be formed","code":"function count_Straightlines ( $ n , $ m ) { return ( nCk ( $ n , 2 ) - nCk ( $ m , 2 ) + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ m = 3 ; echo ( count_Straightlines ( $ n , $ m ) ) ; ? >"}
{"text":"utility Function","code":"< ? php function vol_of_dodecahedron ( $ side ) { return ( ( ( 15 + ( 7 * ( sqrt ( 5 ) ) ) ) \/ 4 ) * ( pow ( $ side , 3 ) ) ) ; }"}
{"text":"Driver Function","code":"$ side = 4 ; echo ( \" Volume \u2581 of \u2581 dodecahedron \u2581 = \u2581 \" ) ; echo ( vol_of_dodecahedron ( $ side ) ) ; ? >"}
{"text":"function to find if tank will overflow or not","code":"< ? php function overflow ( $ H , $ r , $ h , $ N , $ R ) {"}
{"text":"cylinder capacity","code":"$ tank_cap = 3.14 * $ r * $ r * $ H ;"}
{"text":"volume of water in tank","code":"$ water_vol = 3.14 * $ r * $ r * $ h ;"}
{"text":"volume of n balls","code":"$ balls_vol = $ N * ( 4 \/ 3 ) * 3.14 * $ R * $ R * $ R ;"}
{"text":"total volume of water and n dipped balls","code":"$ vol = $ water_vol + $ balls_vol ;"}
{"text":"condition to check if tank is in overflow state or not","code":"if ( $ vol > $ tank_cap ) { echo \" Overflow \" , \" STRNEWLINE \" ; } else { echo \" Not \u2581 in \u2581 overflow \u2581 state \" , \" STRNEWLINE \" ; } }"}
{"text":"giving dimensions","code":"$ H = 10 ; $ r = 5 ; $ h = 5 ; $ N = 2 ; $ R = 2 ;"}
{"text":"calling function","code":"overflow ( $ H , $ r , $ h , $ N , $ R ) ; ? >"}
{"text":"function to calculate the volume of tank","code":"< ? php function volume ( $ radius , $ height ) { return ( ( 22 \/ 7 ) * $ radius * $ radius * $ height ) ; }"}
{"text":"function to print overflow \/ filled \/ underflow accordingly","code":"function check_and_print ( $ required_time , $ given_time ) { if ( $ required_time < $ given_time ) echo ( \" Overflow \" ) ; else if ( $ required_time > $ given_time ) echo ( \" Underflow \" ) ; else echo ( \" Filled \" ) ; }"}
{"text":"radius of the tank","code":"$ radius = 5 ;"}
{"text":"height of the tank","code":"$ height = 10 ;"}
{"text":"rate of flow of water","code":"$ rate_of_flow = 10 ;"}
{"text":"time given","code":"$ given_time = 70.0 ;"}
{"text":"calculate the required time","code":"$ required_time = volume ( $ radius , $ height ) \/ $ rate_of_flow ;"}
{"text":"printing the result","code":"check_and_print ( $ required_time , $ given_time ) ; ? >"}
{"text":"Function to calculate cos value of angle c","code":"< ? php function cal_cos ( $ n ) { $ accuracy = 0.0001 ; $ x1 ; $ denominator ; $ cosx ; $ cosval ;"}
{"text":"Converting degrees to radian","code":"$ n = $ n * ( 3.142 \/ 180.0 ) ; $ x1 = 1 ;"}
{"text":"Maps the sum along the series","code":"$ cosx = $ x1 ;"}
{"text":"Holds the actual value of sin ( n )","code":"$ cosval = cos ( $ n ) ; $ i = 1 ; do { $ denominator = 2 * $ i * ( 2 * $ i - 1 ) ; $ x1 = - $ x1 * $ n * $ n \/ $ denominator ; $ cosx = $ cosx + $ x1 ; $ i = $ i + 1 ; } while ( $ accuracy <= ( $ cosval - $ cosx ) ) ; return $ cosx ; }"}
{"text":"Function to find third side","code":"function third_side ( $ a , $ b , $ c ) { $ angle = cal_cos ( $ c ) ; return sqrt ( ( $ a * $ a ) + ( $ b * $ b ) - 2 * $ a * $ b * $ angle ) ; }"}
{"text":"Driver Code","code":"$ c = 49 ; $ a = 5 ; $ b = 8 ;"}
{"text":"function call","code":"echo third_side ( $ a , $ b , $ c ) ; ? >"}
{"text":"function to check if given circle fit in boundary or not","code":"< ? php function fitOrNotFit ( $ R , $ r , $ x , $ y , $ rad ) {"}
{"text":"Distance from the center","code":"$ val = sqrt ( pow ( $ x , 2 ) + pow ( $ y , 2 ) ) ;"}
{"text":"Checking the corners of circle","code":"if ( $ val + $ rad <= $ R && $ val - $ rad >= $ R - $ r ) echo \" Fits STRNEWLINE \" ; else echo \" Doesn ' t \u2581 Fit STRNEWLINE \" ; }"}
{"text":"Radius of outer circle and inner circle respectively","code":"$ R = 8 ; $ r = 4 ;"}
{"text":"Co - ordinates and radius of the circle to be checked","code":"$ x = 5 ; $ y = 3 ; $ rad = 3 ; fitOrNotFit ( $ R , $ r , $ x , $ y , $ rad ) ; ? >"}
{"text":"method returns true if polygon is possible with ' midpoints ' number of midpoints","code":"< ? php function checkPolygonWithMidpoints ( $ arr , $ N , $ midpoints ) {"}
{"text":"loop for getting first vertex of polygon","code":"for ( $ j = 0 ; $ j < $ midpoints ; $ j ++ ) { $ val = 1 ;"}
{"text":"loop over array values at ' midpoints ' distance","code":"for ( $ k = $ j ; $ k < $ N ; $ k += $ midpoints ) {"}
{"text":"and ( & ) all those values , if even one of them is 0 , val will be 0","code":"$ val &= $ arr [ $ k ] ; }"}
{"text":"if val is still 1 and ( N \/ midpoints ) or ( number of vertices ) are more than two ( for a polygon minimum ) print result and return true","code":"if ( $ val && $ N \/ $ midpoints > 2 ) { echo \" Polygon \u2581 possible \u2581 with \u2581 side \u2581 length \u2581 \" , ( $ N \/ $ midpoints ) , \" STRNEWLINE \" ; return true ; } } return false ; }"}
{"text":"method prints sides in the polygon or print not possible in case of no possible polygon","code":"function isPolygonPossible ( $ arr , $ N ) {"}
{"text":"limit for iterating over divisors","code":"$ limit = sqrt ( $ N ) ; for ( $ i = 1 ; $ i <= $ limit ; $ i ++ ) {"}
{"text":"If i divides N then i and ( N \/ i ) will be divisors","code":"if ( $ N % $ i == 0 ) {"}
{"text":"check polygon for both divisors","code":"if ( checkPolygonWithMidpoints ( $ arr , $ N , $ i ) || checkPolygonWithMidpoints ( $ arr , $ N , ( $ N \/ $ i ) ) ) return ; } } echo \" Not \u2581 possiblen \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 ) ; $ N = sizeof ( $ arr ) ; isPolygonPossible ( $ arr , $ N ) ; ? >"}
{"text":"Returns the square root of n . Note that the function","code":"< ? php function squareRoot ( $ n ) {"}
{"text":"We are using n itself as initial approximation This can definitely be improved","code":"$ x = $ n ; $ y = 1 ;"}
{"text":"e decides the accuracy level","code":"$ e = 0.000001 ; while ( $ x - $ y > $ e ) { $ x = ( $ x + $ y ) \/ 2 ; $ y = $ n \/ $ x ; } return $ x ; }"}
{"text":"Method to find maximum height of arrangement of coins","code":"function findMaximumHeight ( $ N ) {"}
{"text":"calculating portion inside the square root","code":"$ n = 1 + 8 * $ N ; $ maxH = ( -1 + squareRoot ( $ n ) ) \/ 2 ; return floor ( $ maxH ) ; }"}
{"text":"Driver code to test above method","code":"$ N = 12 ; echo findMaximumHeight ( $ N ) ; ? >"}
{"text":"Fills array S [ ] with span values","code":"< ? php function calculateSpan ( $ price , $ n , $ S ) {"}
{"text":"Span value of first day is always 1","code":"$ S [ 0 ] = 1 ;"}
{"text":"Calculate span value of remaining days by linearly checking previous days","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Initialize span value","code":"$ S [ $ i ] = 1 ;"}
{"text":"Traverse left while the next element on left is smaller than price [ i ]","code":"for ( $ j = $ i - 1 ; ( $ j >= 0 ) && ( $ price [ $ i ] >= $ price [ $ j ] ) ; $ j -- ) $ S [ $ i ] ++ ; }"}
{"text":"print the calculated span values","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ S [ $ i ] . \" \u2581 \" ; ; }"}
{"text":"Driver Code","code":"$ price = array ( 10 , 4 , 5 , 90 , 120 , 80 ) ; $ n = count ( $ price ) ; $ S = array ( $ n ) ;"}
{"text":"Fill the span values in array S [ ]","code":"calculateSpan ( $ price , $ n , $ S ) ; ? >"}
{"text":"prints element and NGE pair for all elements of arr [ ] of size n","code":"< ? php function printNGE ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ next = -1 ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { if ( $ arr [ $ i ] < $ arr [ $ j ] ) { $ next = $ arr [ $ j ] ; break ; } } echo $ arr [ $ i ] . \" -- \" . \u2581 $ next . \" \" } }"}
{"text":"Driver Code","code":"$ arr = array ( 11 , 13 , 21 , 3 ) ; $ n = count ( $ arr ) ; printNGE ( $ arr , $ n ) ; ? >"}
{"text":"Tower of Hanoi ( n - disk ) algorithm in PHP with Display of Pole \/ rod Contents the 3 poles representation","code":"< ? php $ poles = array ( array ( ) , array ( ) , array ( ) ) ; function TOH ( $ n , $ A = \" A \" , $ B = \" B \" , $ C = \" C \" ) { if ( $ n > 0 ) { TOH ( $ n - 1 , $ A , $ C , $ B ) ; echo \" Move \u2581 disk \u2581 from \u2581 rod \u2581 $ A \u2581 to \u2581 rod \u2581 $ C \u2581 STRNEWLINE \" ; move ( $ A , $ C ) ; dispPoles ( ) ; TOH ( $ n - 1 , $ B , $ A , $ C ) ; } else { return ; } } function initPoles ( $ n ) { global $ poles ; for ( $ i = $ n ; $ i >= 1 ; -- $ i ) { $ poles [ 0 ] [ ] = $ i ; } } function move ( $ source , $ destination ) { global $ poles ; if ( $ source == \" A \" ) $ ptr1 = 0 ; elseif ( $ source == \" B \" ) $ ptr1 = 1 ; else $ ptr1 = 2 ; if ( $ destination == \" A \" ) $ ptr2 = 0 ; elseif ( $ destination == \" B \" ) $ ptr2 = 1 ; else $ ptr2 = 2 ; $ top = array_pop ( $ poles [ $ ptr1 ] ) ; array_push ( $ poles [ $ ptr2 ] , $ top ) ; } function dispPoles ( ) { global $ poles ; echo \" A : \u2581 [ \" . implode ( \" , \u2581 \" , $ poles [ 0 ] ) . \" ] \u2581 \" ; echo \" B : \u2581 [ \" . implode ( \" , \u2581 \" , $ poles [ 1 ] ) . \" ] \u2581 \" ; echo \" C : \u2581 [ \" . implode ( \" , \u2581 \" , $ poles [ 2 ] ) . \" ] \u2581 \" ; echo \" STRNEWLINE STRNEWLINE \" ; }"}
{"text":"Number of disks","code":"$ numdisks = 4 ;"}
{"text":"A , B and C are names of rods","code":"initPoles ( $ numdisks ) ; echo \" Tower \u2581 of \u2581 Hanoi \u2581 Solution \u2581 for \u2581 $ numdisks \u2581 disks : \u2581 STRNEWLINE STRNEWLINE \" ; dispPoles ( ) ; TOH ( $ numdisks ) ; ? >"}
{"text":"PHP program to find maximum of minimum of all windows of different sizes Method to find maximum of minimum of all windows of different sizes","code":"< ? php function printMaxOfMin ( $ arr , $ n ) {"}
{"text":"Consider all windows of different sizes starting from size 1","code":"for ( $ k = 1 ; $ k <= $ n ; $ k ++ ) {"}
{"text":"Initialize max of min for current window size k","code":"$ maxOfMin = PHP_INT_MIN ;"}
{"text":"Traverse through all windows of current size k","code":"for ( $ i = 0 ; $ i <= $ n - $ k ; $ i ++ ) {"}
{"text":"Find minimum of current window","code":"$ min = $ arr [ $ i ] ; for ( $ j = 1 ; $ j < $ k ; $ j ++ ) { if ( $ arr [ $ i + $ j ] < $ min ) $ min = $ arr [ $ i + $ j ] ; }"}
{"text":"Update maxOfMin if required","code":"if ( $ min > $ maxOfMin ) $ maxOfMin = $ min ; }"}
{"text":"Print max of min for current window size","code":"echo $ maxOfMin , \" \" ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 20 , 30 , 50 , 10 , 70 , 30 ) ; $ n = sizeof ( $ arr ) ; printMaxOfMin ( $ arr , $ n ) ; ? >"}
{"text":"Stack to maintain order of digits","code":"< ? php $ st = array ( ) ;"}
{"text":"Function to push digits into stack","code":"function push_digits ( $ number ) { global $ st ; while ( $ number != 0 ) { array_push ( $ st , $ number % 10 ) ; $ number = ( int ) ( $ number \/ 10 ) ; } }"}
{"text":"Function to reverse the number","code":"function reverse_number ( $ number ) { global $ st ;"}
{"text":"Function call to push number 's   digits to stack","code":"push_digits ( $ number ) ; $ reverse = 0 ; $ i = 1 ;"}
{"text":"Popping the digits and forming the reversed number","code":"while ( ! empty ( $ st ) ) { $ reverse = $ reverse + ( $ st [ count ( $ st ) - 1 ] * $ i ) ; array_pop ( $ st ) ; $ i = $ i * 10 ; }"}
{"text":"Return the reversed number formed","code":"return $ reverse ; }"}
{"text":"Driver Code","code":"$ number = 39997 ;"}
{"text":"Function call to reverse number","code":"echo reverse_number ( $ number ) ; ? >"}
{"text":"To heapify a subtree rooted with node i which is an index in arr [ ] . n is size of heap","code":"< ? php function heapify ( & $ arr , $ n , $ i ) {"}
{"text":"Initialize largest as root","code":"$ largest = $ i ;"}
{"text":"left = 2 * i + 1","code":"$ l = 2 * $ i + 1 ;"}
{"text":"right = 2 * i + 2","code":"$ r = 2 * $ i + 2 ;"}
{"text":"If left child is larger than root","code":"if ( $ l < $ n && $ arr [ $ l ] > $ arr [ $ largest ] ) $ largest = $ l ;"}
{"text":"If right child is larger than largest so far","code":"if ( $ r < $ n && $ arr [ $ r ] > $ arr [ $ largest ] ) $ largest = $ r ;"}
{"text":"If largest is not root","code":"if ( $ largest != $ i ) { $ swap = $ arr [ $ i ] ; $ arr [ $ i ] = $ arr [ $ largest ] ; $ arr [ $ largest ] = $ swap ;"}
{"text":"Recursively heapify the affected sub - tree","code":"heapify ( $ arr , $ n , $ largest ) ; } }"}
{"text":"main function to do heap sort","code":"function heapSort ( & $ arr , $ n ) {"}
{"text":"Build heap ( rearrange array )","code":"for ( $ i = $ n \/ 2 - 1 ; $ i >= 0 ; $ i -- ) heapify ( $ arr , $ n , $ i ) ;"}
{"text":"One by one extract an element from heap","code":"for ( $ i = $ n - 1 ; $ i > 0 ; $ i -- ) {"}
{"text":"Move current root to end","code":"$ temp = $ arr [ 0 ] ; $ arr [ 0 ] = $ arr [ $ i ] ; $ arr [ $ i ] = $ temp ;"}
{"text":"call max heapify on the reduced heap","code":"heapify ( $ arr , $ i , 0 ) ; } }"}
{"text":"A utility function to print array of size n","code":"function printArray ( & $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; ++ $ i ) echo ( $ arr [ $ i ] . \" \u2581 \" ) ; }"}
{"text":"Driver program","code":"$ arr = array ( 12 , 11 , 13 , 5 , 6 , 7 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; heapSort ( $ arr , $ n ) ; echo ' Sorted array is ' . \" STRNEWLINE \" ; printArray ( $ arr , $ n ) ; ? >"}
{"text":"Returns true if arr [ i . . n - 1 ] represents a max - heap","code":"< ? php function isHeap ( $ arr , $ i , $ n ) {"}
{"text":"If a leaf node","code":"if ( $ i >= ( $ n - 2 ) \/ 2 ) return true ;"}
{"text":"If an internal node and is greater than its children , and same is recursively true for the children","code":"if ( $ arr [ $ i ] >= $ arr [ 2 * $ i + 1 ] && $ arr [ $ i ] >= $ arr [ 2 * $ i + 2 ] && isHeap ( $ arr , 2 * $ i + 1 , $ n ) && isHeap ( $ arr , 2 * $ i + 2 , $ n ) ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ arr = array ( 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 ) ; $ n = sizeof ( $ arr ) ; if ( isHeap ( $ arr , 0 , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns true if arr [ i . . n - 1 ] represents a max - heap","code":"< ? php function isHeap ( $ arr , $ i , $ n ) {"}
{"text":"Start from root and go till the last internal node","code":"for ( $ i = 0 ; $ i < ( ( $ n - 2 ) \/ 2 ) + 1 ; $ i ++ ) {"}
{"text":"If left child is greater , return false","code":"if ( $ arr [ 2 * $ i + 1 ] > $ arr [ $ i ] ) return False ;"}
{"text":"If right child is greater , return false","code":"if ( 2 * $ i + 2 < $ n && $ arr [ 2 * $ i + 2 ] > $ arr [ $ i ] ) return False ; return True ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 90 , 15 , 10 , 7 , 12 , 2 , 7 , 3 ) ; $ n = sizeof ( $ arr ) ; if ( isHeap ( $ arr , 0 , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Efficient PHP program to find smallest derangement .","code":"< ? php function generate_derangement ( $ N ) {"}
{"text":"Generate Sequence S","code":"$ S = array ( ) ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) $ S [ $ i ] = $ i ;"}
{"text":"Generate Derangement","code":"$ D = array ( ) ; for ( $ i = 1 ; $ i <= $ N ; $ i += 2 ) { if ( $ i == $ N ) {"}
{"text":"Only if i is odd Swap S [ N - 1 ] and S [ N ]","code":"$ D [ $ N ] = $ S [ $ N - 1 ] ; $ D [ $ N - 1 ] = $ S [ $ N ] ; } else { $ D [ $ i ] = $ i + 1 ; $ D [ $ i + 1 ] = $ i ; } }"}
{"text":"Print Derangement","code":"for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) echo $ D [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Program","code":"generate_derangement ( 10 ) ; ? >"}
{"text":"Function to calculate Profit .","code":"< ? php function Profit ( $ costPrice , $ sellingPrice ) { $ profit = ( $ sellingPrice - $ costPrice ) ; return $ profit ; }"}
{"text":"Function to calculate Loss .","code":"function Loss ( $ costPrice , $ sellingPrice ) { $ Loss = ( $ costPrice - $ sellingPrice ) ; return $ Loss ; }"}
{"text":"Driver Code .","code":"$ costPrice = 1500 ; $ sellingPrice = 2000 ; if ( $ sellingPrice == $ costPrice ) echo \" No \u2581 profit \u2581 nor \u2581 Loss \" ; else if ( $ sellingPrice > $ costPrice ) echo Profit ( $ costPrice , $ sellingPrice ) . \" \u2581 Profit \u2581 \" ; else echo Loss ( $ costPrice , $ sellingPrice ) . \" \u2581 Loss \u2581 \" ; ? >"}
{"text":"Function to find the next perfect square","code":"< ? php function nextPerfectSquare ( $ N ) { $ nextN = floor ( sqrt ( $ N ) ) + 1 ; return $ nextN * $ nextN ; }"}
{"text":"Driver Code","code":"$ n = 35 ; echo nextPerfectSquare ( $ n ) ; ? >"}
{"text":"Function to print the substrings of a number","code":"< ? php function printSubstrings ( $ n ) {"}
{"text":"Calculate the total number of digits","code":"$ s = ( int ) log10 ( $ n ) ;"}
{"text":"0.5 has been added because of it will return double value like 99.556","code":"$ d = ( int ) ( pow ( 10 , $ s ) + 0.5 ) ; $ k = $ d ; while ( $ n ) {"}
{"text":"Print all the numbers from starting position","code":"while ( $ d ) { echo ( int ) ( $ n \/ $ d ) . \" STRNEWLINE \" ; $ d = ( int ) ( $ d \/ 10 ) ; }"}
{"text":"Update the no .","code":"$ n = $ n % $ k ;"}
{"text":"Update the no . of digits","code":"$ k = ( int ) ( $ k \/ 10 ) ; $ d = $ k ; } }"}
{"text":"Driver code","code":"$ n = 123 ; printSubstrings ( $ n ) ; ? >"}
{"text":"PHP program to find ( a ^ b ) % MOD where a and b may be very large and represented as strings .","code":"< ? php $ MOD = 1000000007 ;"}
{"text":"Returns modulo exponentiation for two numbers represented as long long int . It is used by powerStrings ( ) . Its complexity is log ( n )","code":"function powerLL ( $ x , $ n ) { global $ MOD ; $ result = 1 ; while ( $ n ) { if ( $ n & 1 ) $ result = $ result * $ x % $ MOD ; $ n = ( int ) $ n \/ 2 ; $ x = $ x * $ x % $ MOD ; } return $ result ; }"}
{"text":"Returns modulo exponentiation for two numbers represented as strings . It is used by powerStrings ( )","code":"function powerStrings ( $ sa , $ sb ) { global $ MOD ;"}
{"text":"We convert strings to number","code":"$ a = 0 ; $ b = 0 ;"}
{"text":"calculating a % MOD","code":"for ( $ i = 0 ; $ i < strlen ( $ sa ) ; $ i ++ ) $ a = ( $ a * 10 + ( $ sa [ $ i ] - '0' ) ) % $ MOD ;"}
{"text":"calculating b % ( MOD - 1 )","code":"for ( $ i = 0 ; $ i < strlen ( $ sb ) ; $ i ++ ) $ b = ( $ b * 10 + ( $ sb [ $ i ] - '0' ) ) % ( $ MOD - 1 ) ;"}
{"text":"Now a and b are long long int . We calculate a ^ b using modulo exponentiation","code":"return powerLL ( $ a , $ b ) ; }"}
{"text":"As numbers are very large that is it may contains upto 10 ^ 6 digits . So , we use string .","code":"$ sa = \"2\" ; $ sb = \"3\" ; echo powerStrings ( $ sa , $ sb ) ; ? >"}
{"text":"Utility function to check if a number is power of 2 or not","code":"< ? php function isPowerOfTwo ( $ n ) { return ( $ n and ! ( $ n & ( $ n - 1 ) ) ) ; }"}
{"text":"Utility function to determine the value of previous power of 2","code":"function previousPowerOfTwo ( $ n ) { while ( $ n & $ n - 1 ) { $ n = $ n & $ n - 1 ; } return $ n ; }"}
{"text":"function to check if n can be expressed as 2 ^ x + 2 ^ y or not","code":"function checkSum ( $ n ) {"}
{"text":"if value of n is 0 or 1 it can not be expressed as 2 ^ x + 2 ^ y","code":"if ( $ n == 0 or $ n == 1 ) return false ;"}
{"text":"if a number is power of 2 then it can be expressed as 2 ^ x + 2 ^ y","code":"else if ( isPowerOfTwo ( $ n ) ) { echo \" \" \u2581 , \u2581 $ n \u2581 \/ \u2581 2 \u2581 , \u2581 \" \" return true ; } else {"}
{"text":"if the remainder after subtracting previous power of 2 is also a power of 2 then it can be expressed as 2 ^ x + 2 ^ y","code":"$ x = previousPowerOfTwo ( $ n ) ; $ y = $ n - $ x ; if ( isPowerOfTwo ( $ y ) ) { echo $ x , \" \" , $ y ; return true ; } } return false ; }"}
{"text":"Driver code","code":"$ n1 = 20 ; if ( checkSum ( $ n1 ) == false ) echo \" No \" ; echo \" STRNEWLINE \" ; $ n2 = 11 ; if ( checkSum ( $ n2 ) == false ) echo \" No \" ; ? >"}
{"text":"Function to find 10 's complement","code":"< ? php function complement ( $ num ) { $ i ; $ len = 0 ; $ comp ;"}
{"text":"Calculating total digits in num","code":"$ temp = $ num ; while ( 1 ) { $ len ++ ; $ num = ( int ) ( $ num \/ 10 ) ; if ( abs ( $ num ) == 0 ) break ; }"}
{"text":"restore num","code":"$ num = $ temp ;"}
{"text":"calculate 10 's complement","code":"$ comp = pow ( 10 , $ len ) - $ num ; return $ comp ; }"}
{"text":"Driver code","code":"echo complement ( 25 ) . \" STRNEWLINE \" ; echo complement ( 456 ) ; ? >"}
{"text":"Recursive function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) {"}
{"text":"Everything divides 0","code":"if ( $ a == 0 && $ b == 0 ) return 0 ; if ( $ a == 0 ) return $ b ; if ( $ b == 0 ) return $ a ;"}
{"text":"base case","code":"if ( $ a == $ b ) return $ a ;"}
{"text":"a is greater","code":"if ( $ a > $ b ) return gcd ( $ a - $ b , $ b ) ; return gcd ( $ a , $ b - $ a ) ; }"}
{"text":"Driver code","code":"$ a = 98 ; $ b = 56 ; echo \" GCD \u2581 of \u2581 $ a \u2581 and \u2581 $ b \u2581 is \u2581 \" , gcd ( $ a , $ b ) ; ? >"}
{"text":"Function to find sum of all elements upto nth row .","code":"< ? php function calculateSum ( $ n ) {"}
{"text":"Initialize sum with 0","code":"$ sum = 0 ;"}
{"text":"Loop to calculate power of 2 upto n and add them","code":"for ( $ row = 0 ; $ row < $ n ; $ row ++ ) { $ sum = $ sum + ( 1 << $ row ) ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo \" \u2581 Sum \u2581 of \u2581 all \u2581 elements \u2581 : \u2581 \" . calculateSum ( $ n ) ; ? >"}
{"text":"function to calculate total sequences possible","code":"< ? php function findAllSequence ( $ N ) {"}
{"text":"Value of N is even","code":"if ( $ N % 2 == 0 ) { return pow ( 2 , $ N \/ 2 + 1 ) + pow ( 2 , $ N \/ 2 ) - 2 ; }"}
{"text":"Value of N is odd","code":"else { return pow ( 2 , ( $ N + 1 ) \/ 2 ) + pow ( 2 , ( $ N + 1 ) \/ 2 ) - 2 ; } }"}
{"text":"Driver code","code":"$ N = 2 ; echo findAllSequence ( $ N ) ; ? >"}
{"text":"Function to find number of 1 s in smallest repunit multiple of the number","code":"< ? php function countOnes ( $ n ) {"}
{"text":"to store number of 1 s in smallest repunit multiple of the number .","code":"$ count = 1 ;"}
{"text":"initialize rem with 1","code":"$ rem = 1 ;"}
{"text":"run loop until rem becomes zero","code":"while ( $ rem != 0 ) {"}
{"text":"rem * 10 + 1 here represents the repunit modulo n","code":"$ rem = ( $ rem * 10 + 1 ) % $ n ; $ count ++ ; }"}
{"text":"when remainder becomes 0 return count","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ n = 13 ;"}
{"text":"Calling function","code":"echo countOnes ( $ n ) ; ? >"}
{"text":"Function to find the largest number","code":"< ? php function largestNum ( $ a , $ b ) { return ( $ a * ( boolean ) floor ( ( $ a \/ $ b ) ) ) + ( $ b * ( boolean ) floor ( ( $ b \/ $ a ) ) ) ; }"}
{"text":"Drivers code","code":"$ a = 22 ; $ b = 1231 ; echo ( largestNum ( $ a , $ b ) ) ;"}
{"text":"Returns the GCD of two number .","code":"< ? php function gcd ( $ a , $ b ) { $ c = $ a % $ b ; while ( $ c != 0 ) { $ a = $ b ; $ b = $ c ; $ c = $ a % $ b ; } return $ b ; }"}
{"text":"Returns the number of distinct meeting points .","code":"function numberOfmeet ( $ a , $ b ) { $ ans ;"}
{"text":"Find the relative speed .","code":"if ( $ a > $ b ) $ ans = $ a - $ b ; else $ ans = $ b - $ a ;"}
{"text":"convert the negative value to positive .","code":"if ( $ a < 0 ) $ a = $ a * ( -1 ) ; if ( $ b < 0 ) $ b = $ b * ( -1 ) ; return $ ans \/ gcd ( $ a , $ b ) ; }"}
{"text":"Driver Code","code":"$ a = 1 ; $ b = -1 ; echo numberOfmeet ( $ a , $ b ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to print greater of x ^ y and y ^ x","code":"< ? php function printGreater ( $ x , $ y ) { $ X = $ y * log ( $ x ) ; $ Y = $ x * log ( $ y ) ; if ( abs ( $ X - $ Y ) < 1e-9 ) { echo \" Equal \" ; } else if ( $ X > $ Y ) { echo $ x . \" ^ \" . $ y ; } else { echo $ y . \" ^ \" . $ x ; } }"}
{"text":"Driver Code","code":"$ x = 5 ; $ y = 8 ; printGreater ( $ x , $ y ) ; ? >"}
{"text":"Function to find nth term","code":"< ? php function sumOfSeries ( $ n ) { return $ n * ( $ n + 1 ) * ( 6 * $ n * $ n * $ n + 9 * $ n * $ n + $ n - 1 ) \/ 30 ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo sumOfSeries ( $ n ) ; ? >"}
{"text":"To compute ( a * b ) % MOD","code":"< ? php function mulmod ( $ a , $ b , $ mod ) {"}
{"text":"$res = 0 ; Initialize result","code":"$ a = $ a % $ mod ; while ( $ b > 0 ) {"}
{"text":"If b is odd , add ' a ' to result","code":"if ( $ b % 2 == 1 ) $ res = ( $ res + $ a ) % $ mod ;"}
{"text":"Multiply ' a ' with 2","code":"$ a = ( $ a * 2 ) % $ mod ;"}
{"text":"Divide b by 2","code":"$ b \/= 2 ; }"}
{"text":"Return result","code":"return $ res % $ mod ; }"}
{"text":"This function computes factorials and product by using above function i . e . modular multiplication","code":"function findProduct ( $ N ) {"}
{"text":"Initialize product and fact with 1","code":"$ product = 1 ; $ fact = 1 ; $ MOD = 1000000000 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) {"}
{"text":"ith factorial","code":"$ fact = mulmod ( $ fact , $ i , $ MOD ) ;"}
{"text":"product of first i factorials","code":"$ product = mulmod ( $ product , $ fact , $ MOD ) ;"}
{"text":"If at any iteration , product becomes divisible by MOD , simply return 0 ;","code":"if ( $ product == 0 ) return 0 ; } return $ product ; }"}
{"text":"Driver Code","code":"$ N = 3 ; echo findProduct ( $ N ) , \" STRNEWLINE \" ; $ N = 5 ; echo findProduct ( $ N ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to calculate sum of all proper divisors num -- > given natural number","code":"< ? php function divSum ( $ n ) {"}
{"text":"To store sum of divisors","code":"$ sum = 1 ;"}
{"text":"Find all divisors and add them","code":"for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) if ( $ n % $ i == 0 ) $ sum = $ sum + $ i + floor ( $ n \/ $ i ) ; return $ sum ; }"}
{"text":"Function to check if both numbers are equivalent or not","code":"function areEquivalent ( $ num1 , $ num2 ) { return divSum ( $ num1 ) == divSum ( $ num2 ) ; }"}
{"text":"Driver code","code":"$ num1 = 559 ; $ num2 = 703 ; if ( areEquivalent ( $ num1 , $ num2 ) == true ) echo \" Equivalent \" ; else echo \" Not \u2581 Equivalent \" ; ? >"}
{"text":"Function to find dodecahedral number","code":"< ? php function dodecahedral_num ( $ n ) {"}
{"text":"Formula to calculate nth dodecahedral number and return it into main function .","code":"return $ n * ( 3 * $ n - 1 ) * ( 3 * $ n - 2 ) \/ 2 ; }"}
{"text":"Drivers Code","code":"$ n = 5 ;"}
{"text":"print result","code":"echo $ n , \" th \u2581 Dodecahedral \u2581 number : \u2581 \" ; echo dodecahedral_num ( $ n ) ; ? >"}
{"text":"Return the count of set bit .","code":"< ? php function bit ( $ x ) { $ ans = 0 ; while ( $ x ) { $ x \/= 2 ; $ ans ++ ; } return $ ans ; }"}
{"text":"check if q and d have same number of set bit .","code":"function check ( $ d , $ x ) { if ( bit ( $ x \/ $ d ) <= bit ( $ d ) ) return true ; return false ; }"}
{"text":"Binary Search to find the point at which number of set in q is less than or equal to d .","code":"function bs ( int $ n ) { $ l = 1 ; $ r = sqrt ( $ n ) ;"}
{"text":"while left index is less than right index","code":"while ( $ l < $ r ) {"}
{"text":"finding the middle .","code":"$ m = ( $ l + $ r ) \/ 2 ;"}
{"text":"check if q and d have same number of set it or not .","code":"if ( check ( $ m , $ n ) ) $ r = $ m ; else $ l = $ m + 1 ; } if ( ! check ( $ l , $ n ) ) return floor ( $ l + 1 ) ; else return floor ( $ l ) ; } function countDivisor ( $ n ) { return $ n - bs ( $ n ) + 1 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo countDivisor ( $ n ) ; ? >"}
{"text":"PHP program to find if two people starting from different positions ever meet or not .","code":"< ? php function everMeet ( $ x1 , $ x2 , $ v1 , $ v2 ) {"}
{"text":"If speed of a person at a position before other person is smaller , then return false .","code":"if ( $ x1 < $ x2 && $ v1 <= $ v2 ) return false ; if ( $ x1 > $ x2 && $ v1 >= $ v2 ) return false ;"}
{"text":"Making sure that x1 is greater","code":"if ( $ x1 < $ x2 ) { list ( $ x1 , $ x2 ) = array ( $ x2 , $ x1 ) ; list ( $ v1 , $ v2 ) = array ( $ v2 , $ v1 ) ; }"}
{"text":"Until one person crosses other","code":"while ( $ x1 >= $ x2 ) { if ( $ x1 == $ x2 ) return true ;"}
{"text":"first person taking one jump in each iteration","code":"$ x1 = $ x1 + $ v1 ;"}
{"text":"second person taking one jump in each iteration","code":"$ x2 = $ x2 + $ v2 ; } return false ; }"}
{"text":"Driver code","code":"$ x1 = 5 ; $ v1 = 8 ; $ x2 = 4 ; $ v2 = 7 ; if ( everMeet ( $ x1 , $ x2 , $ v1 , $ v2 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to check the divisibility","code":"< ? php function check ( $ k , $ d0 , $ d1 ) {"}
{"text":"Cycle","code":"$ s = ( 2 * ( $ d0 + $ d1 ) ) % 10 + ( 4 * ( $ d0 + $ d1 ) ) % 10 + ( 8 * ( $ d0 + $ d1 ) ) % 10 + ( 6 * ( $ d0 + $ d1 ) ) % 10 ;"}
{"text":"no of residual terms","code":"$ a = ( $ k - 3 ) % 4 ;"}
{"text":"sum of residual terms","code":"$ x ; switch ( $ a ) {"}
{"text":"if no of residue term = 0","code":"case 0 : $ x = 0 ; break ;"}
{"text":"if no of residue term = 1","code":"case 1 : $ x = ( 2 * ( $ d0 + $ d1 ) ) % 10 ; break ;"}
{"text":"if no of residue term = 2","code":"case 2 : $ x = ( 2 * ( $ d0 + $ d1 ) ) % 10 + ( 4 * ( $ d0 + $ d1 ) ) % 10 ; break ;"}
{"text":"if no of residue term = 3","code":"case 3 : $ x = ( 2 * ( $ d0 + $ d1 ) ) % 10 + ( 4 * ( $ d0 + $ d1 ) ) % 10 + ( 8 * ( $ d0 + $ d1 ) ) % 10 ; break ; }"}
{"text":"sum of all digits","code":"$ sum = $ d0 + $ d1 + ( int ) ( ( $ k - 3 ) \/ 4 ) * $ s + $ x ;"}
{"text":"divisibility check","code":"if ( $ sum % 3 == 0 ) return \" YES \" ; return \" NO \" ; }"}
{"text":"Driver code","code":"$ k ; $ d0 ; $ d1 ; $ k = 13 ; $ d0 = 8 ; $ d1 = 1 ; echo check ( $ k , $ d0 , $ d1 ) , \" STRNEWLINE \" ; $ k = 5 ; $ d0 = 3 ; $ d1 = 4 ; echo check ( $ k , $ d0 , $ d1 ) , \" STRNEWLINE \" ; ? >"}
{"text":"taking input 1","code":"< ? php $ a = 4 ; $ b = 3 ; $ val = ( $ a \/ $ b ) + ( ( $ a % $ b ) != 0 ) ; echo \" The \u2581 ceiling \u2581 value \u2581 of \u2581 4\/3 \u2581 is \u2581 \" , floor ( $ val ) , \" STRNEWLINE \" ;"}
{"text":"example of perfect division taking input 2","code":"$ a = 6 ; $ b = 3 ; $ val = ( $ a \/ $ b ) + ( ( $ a % $ b ) != 0 ) ; echo \" The \u2581 ceiling \u2581 value \u2581 of \u2581 6\/3 \u2581 is \u2581 \" , $ val ; ? >"}
{"text":"PHP program to print Collatz sequence","code":"< ? php function printCollatz ( $ n ) {"}
{"text":"We simply follow steps while we do not reach 1","code":"while ( $ n != 1 ) { echo $ n . \" \" ;"}
{"text":"If $n is odd","code":"if ( $ n & 1 ) $ n = 3 * $ n + 1 ;"}
{"text":"If even","code":"else $ n = $ n \/ 2 ; }"}
{"text":"Print 1 at the end","code":"echo $ n ; }"}
{"text":"Driver code","code":"printCollatz ( 6 ) ; ? >"}
{"text":"PHP program to find the blocks for given number .","code":"< ? php function block ( $ x ) { $ v = array ( ) ;"}
{"text":"Convert decimal number to its binary equivalent","code":"echo ' Blocks for ' . $ x . ' : ' ; while ( $ x > 0 ) { array_push ( $ v , intval ( $ x % 2 ) ) ; $ x = intval ( $ x \/ 2 ) ; }"}
{"text":"Displaying the output when the bit is '1' in binary equivalent of number .","code":"for ( $ i = 0 ; $ i < sizeof ( $ v ) ; $ i ++ ) { if ( $ v [ $ i ] == 1 ) { print $ i ; if ( $ i != sizeof ( $ v ) - 1 ) echo ' , \u2581 ' ; } } echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"block ( 71307 ) ; block ( 1213 ) ; block ( 29 ) ; block ( 100 ) ; ? >"}
{"text":"function to print number of digits","code":"< ? php function findNumberOfDigits ( $ n , $ b ) {"}
{"text":"Calculating log using base changing property and then taking it floor and then adding 1.","code":"$ dig = ( int ) ( floor ( log ( $ n ) \/ log ( $ b ) ) + 1 ) ;"}
{"text":"printing output","code":"echo ( \" The \u2581 Number \u2581 of \u2581 digits \" . \" \u2581 of \u2581 Number \u2581 \" . $ n . \" \u2581 in \u2581 base \u2581 \" . $ b . \" \u2581 is \u2581 \" . $ dig ) ; }"}
{"text":"taking inputs","code":"$ n = 1446 ; $ b = 7 ;"}
{"text":"calling the method","code":"findNumberOfDigits ( $ n , $ b ) ; ? >"}
{"text":"PHP code to verify Nesbitt 's Inequality","code":"< ? php function isValidNesbitt ( $ a , $ b , $ c ) {"}
{"text":"3 parts of the inequality sum","code":"$ A = $ a \/ ( $ b + $ c ) ; $ B = $ b \/ ( $ a + $ c ) ; $ C = $ c \/ ( $ a + $ b ) ; $ inequality = $ A + $ B + $ C ; return ( $ inequality >= 1.5 ) ; }"}
{"text":"Driver Code","code":"$ a = 1.0 ; $ b = 2.0 ; $ c = 3.0 ; if ( isValidNesbitt ( $ a , $ b , $ c ) ) echo \" Nesbitt ' s \u2581 inequality \u2581 satisfied . \" , \" for \u2581 real \u2581 numbers \u2581 \" , $ a , \" , \u2581 \" , $ b , \" , \u2581 \" , $ c , \" STRNEWLINE \" ; else cout << \" Not \u2581 satisfied \" ; ? >"}
{"text":"Efficient PHP Program to print all cube free numbers smaller than or equal to n .","code":"< ? php function printCubeFree ( $ n ) {"}
{"text":"Initialize all numbers as not cube free","code":"$ cubFree = array_fill ( 0 , ( $ n + 1 ) , 1 ) ;"}
{"text":"Traverse through all possible cube roots","code":"$ i = 2 ; while ( $ i * $ i * $ i <= $ n ) {"}
{"text":"If i itself is cube free","code":"if ( $ cubFree [ $ i ] == 1 ) {"}
{"text":"Mark all multiples of i as not cube free","code":"$ multiple = 1 ; while ( $ i * $ i * $ i * $ multiple <= $ n ) { $ cubFree [ $ i * $ i * $ i * $ multiple ] = 0 ; $ multiple += 1 ; } } $ i += 1 ; }"}
{"text":"Print all cube free numbers","code":"for ( $ i = 2 ; $ i < $ n + 1 ; $ i ++ ) if ( $ cubFree [ $ i ] == 1 ) echo $ i . \" \" ; }"}
{"text":"Driver Code","code":"printCubeFree ( 20 ) ; ? >"}
{"text":"Returns root of n ( n + 1 ) \/ 2 = num if num is triangular ( or integerroot exists ) . Else returns - 1.","code":"< ? php function isTriangular ( $ num ) { if ( $ num < 0 ) return false ;"}
{"text":"Considering the equation n * ( n + 1 ) \/ 2 = num . The equation is : a ( n ^ 2 ) + bn + c = 0 \";","code":"$ c = ( -2 * $ num ) ; $ b = 1 ; $ a = 1 ; $ d = ( $ b * $ b ) - ( 4 * $ a * $ c ) ; if ( $ d < 0 ) return -1 ;"}
{"text":"Find roots of equation","code":"$ root1 = ( - $ b + sqrt ( $ d ) ) \/ ( 2 * $ a ) ; $ root2 = ( - $ b - sqrt ( $ d ) ) \/ ( 2 * $ a ) ;"}
{"text":"checking if root1 is natural","code":"if ( $ root1 > 0 && floor ( $ root1 ) == $ root1 ) return $ root1 ;"}
{"text":"checking if root2 is natural","code":"if ( $ root2 > 0 && floor ( $ root2 ) == $ root2 ) return $ root2 ; return -1 ; }"}
{"text":"Returns square root of x if it is perfect square . Else returns - 1.","code":"function isPerfectSquare ( $ x ) {"}
{"text":"Find floating point value of square root of x .","code":"$ sr = sqrt ( $ x ) ;"}
{"text":"If square root is an integer","code":"if ( ( $ sr - floor ( $ sr ) ) == 0 ) return floor ( $ sr ) ; else return -1 ; }"}
{"text":"Function to find if the given number is sum of the cubes of first n natural numbers","code":"function findS ( $ s ) { $ sr = isPerfectSquare ( $ s ) ; if ( $ sr == -1 ) return -1 ; return isTriangular ( $ sr ) ; }"}
{"text":"Driver code","code":"$ s = 9 ; $ n = findS ( $ s ) ; if ( $ n == -1 ) echo \" - 1\" ; else echo $ n ; ? >"}
{"text":"function to return the answer when the first odd digit is 9","code":"< ? php function trickyCase ( $ s , $ index ) { $ index1 = -1 ;"}
{"text":"traverse towwars the left to find the non - 8 digit","code":"for ( $ i = $ index - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"index digit","code":"$ digit = $ s [ $ i ] - '0' ;"}
{"text":"if digit is not 8 , then break","code":"if ( $ digit != 8 ) { $ index1 = $ i ; break ; } }"}
{"text":"if on the left side of the '9' , no 8 is found then we return by adding a 2 and 0 's","code":"if ( $ index1 == -1 ) return 2 * pow ( 10 , strlen ( $ s ) ) ; $ num = 0 ;"}
{"text":"till non - 8 digit add all numbers","code":"for ( $ i = 0 ; $ i < $ index1 ; $ i ++ ) $ num = $ num * 10 + ( $ s [ $ i ] - '0' ) ;"}
{"text":"if non - 8 is even or odd than add the next even .","code":"if ( $ s [ $ index1 ] % 2 == 0 ) $ num = $ num * 10 + ( $ s [ $ index1 ] - '0' + 2 ) ; else $ num = $ num * 10 + ( $ s [ $ index1 ] - '0' + 1 ) ;"}
{"text":"add 0 to right of 9","code":"for ( $ i = $ index1 + 1 ; $ i < strlen ( $ s ) ; $ i ++ ) $ num = $ num * 10 ; return $ num ; }"}
{"text":"function to return the smallest number with all digits even","code":"function smallestNumber ( $ n ) { $ num = 0 ; $ s = \" \" ; $ duplicate = $ n ;"}
{"text":"convert the number to string to perform operations","code":"while ( $ n ) { $ s = chr ( $ n % 10 + 48 ) . $ s ; $ n = ( int ) ( $ n \/ 10 ) ; } $ index = -1 ;"}
{"text":"find out the first odd number","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) { $ digit = $ s [ $ i ] - '0' ; if ( $ digit & 1 ) { $ index = $ i ; break ; } }"}
{"text":"if no odd numbers are there , than n is the answer","code":"if ( $ index == -1 ) return $ duplicate ;"}
{"text":"if the odd number is 9 , than tricky case handles it","code":"if ( $ s [ $ index ] == '9' ) { $ num = trickyCase ( $ s , $ index ) ; return $ num ; }"}
{"text":"add all digits till first odd","code":"for ( $ i = 0 ; $ i < $ index ; $ i ++ ) $ num = $ num * 10 + ( $ s [ $ i ] - '0' ) ;"}
{"text":"increase the odd digit by 1","code":"$ num = $ num * 10 + ( $ s [ $ index ] - '0' + 1 ) ;"}
{"text":"add 0 to the right of the odd number","code":"for ( $ i = $ index + 1 ; $ i < strlen ( $ s ) ; $ i ++ ) $ num = $ num * 10 ; return $ num ; }"}
{"text":"Driver Code","code":"$ N = 2397 ; echo smallestNumber ( $ N ) ; ? >"}
{"text":"Simple PHP program to find n - th number with sum of digits as 10.","code":"< ? php function findNth ( $ n ) { $ count = 0 ; for ( $ curr = 19 ; ; $ curr += 9 ) {"}
{"text":"Find sum of digits in current no .","code":"$ sum = 0 ; for ( $ x = $ curr ; $ x > 0 ; $ x = ( int ) $ x \/ 10 ) $ sum = $ sum + $ x % 10 ;"}
{"text":"If sum is 10 , we increment count","code":"if ( $ sum == 10 ) $ count ++ ;"}
{"text":"If count becomes n , we return current number .","code":"if ( $ count == $ n ) return $ curr ; } return -1 ; }"}
{"text":"Driver Code","code":"echo findNth ( 5 ) ; ? >"}
{"text":"Simple PHP program to find sum of given series .","code":"< ? php function findSum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) for ( $ j = $ i ; $ j <= $ n ; $ j ++ ) $ sum = $ sum + $ i * $ j ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo findSum ( $ n ) ; ? >"}
{"text":"Efficient PHP program to find sum of given series .","code":"< ? php function findSum ( $ n ) { $ multiTerms = ( int ) ( $ n * ( $ n + 1 ) \/ 2 ) ;"}
{"text":"Sum of multiples of 1 is 1 * ( 1 + 2 + . . )","code":"$ sum = $ multiTerms ;"}
{"text":"Adding sum of multiples of numbers other than 1 , starting from 2.","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Subtract previous number from current multiple .","code":"$ multiTerms = $ multiTerms - ( $ i - 1 ) ;"}
{"text":"For example , for 2 , we get sum as ( 2 + 3 + 4 + ... . ) * 2","code":"$ sum = $ sum + $ multiTerms * $ i ; } return $ sum ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo findSum ( $ n ) ; ? >"}
{"text":"find the Sum of having n digit and divisible by the number","code":"< ? php function totalSumDivisibleByNum ( $ digit , $ number ) {"}
{"text":"compute the first and last term","code":"$ firstnum = pow ( 10 , $ digit - 1 ) ; $ lastnum = pow ( 10 , $ digit ) ;"}
{"text":"first number which is divisible by given number","code":"$ firstnum = ( $ firstnum - $ firstnum % $ number ) + $ number ;"}
{"text":"last number which is divisible by given number","code":"$ lastnum = ( $ lastnum - $ lastnum % $ number ) ;"}
{"text":"total divisible number","code":"$ count = ( ( $ lastnum - $ firstnum ) \/ $ number + 1 ) ;"}
{"text":"return the total sum","code":"return ( ( $ lastnum + $ firstnum ) * $ count ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ number = 7 ; echo totalSumDivisibleByNum ( $ n , $ number ) ; ? >"}
{"text":"PHP Program to find nth term of Arithmetic progression","code":"< ? php function Nth_of_AP ( $ a , $ d , $ N ) {"}
{"text":"using formula to find the Nth term t ( n ) = a ( 1 ) + ( n - 1 ) * d","code":"return ( $ a + ( $ N - 1 ) * $ d ) ; }"}
{"text":"starting number","code":"$ a = 2 ;"}
{"text":"Common difference","code":"$ d = 1 ;"}
{"text":"N th term to be find","code":"$ N = 5 ;"}
{"text":"Display the output","code":"echo ( \" The \u2581 \" . $ N . \" th \u2581 term \u2581 of \u2581 the \u2581 series \u2581 is \u2581 : \u2581 \" . Nth_of_AP ( $ a , $ d , $ N ) ) ; ? >"}
{"text":"function to check if binary representation of an integer has consecutive 1 s","code":"< ? php function checkFibinnary ( $ n ) {"}
{"text":"stores the previous last bit initially as 0","code":"$ prev_last = 0 ; while ( $ n ) {"}
{"text":"if current last bit and previous last bit is 1","code":"if ( ( $ n & 1 ) && $ prev_last ) return false ;"}
{"text":"stores the last bit","code":"$ prev_last = $ n & 1 ;"}
{"text":"right shift the number","code":"$ n >>= 1 ; } return true ; }"}
{"text":"Driver code","code":"$ n = 10 ; if ( checkFibinnary ( $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"function which return the the sum of series","code":"< ? php function sumOfSeries ( $ n ) { return ( int ) ( 0.6172 * ( pow ( 10 , $ n ) - 1 ) - 0.55 * $ n ) ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"Function to find nth nonagonal number .","code":"< ? php function Nonagonal ( $ n ) {"}
{"text":"Formula to find nth nonagonal number .","code":"return $ n * ( 7 * $ n - 5 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo Nonagonal ( $ n ) ; ? >"}
{"text":"PHP program to check if a large number is divisible by 20.","code":"< ? php function divisibleBy20 ( $ num ) {"}
{"text":"Get number with last two digits","code":"$ lastTwoDigits = intval ( substr ( $ num , ( strlen ( $ num ) - 2 ) , 2 ) ) ;"}
{"text":"Check if the number formed by last two digits is divisible by 5 and 4.","code":"return ( ( $ lastTwoDigits % 5 == 0 ) && ( $ lastTwoDigits % 4 == 0 ) ) ; }"}
{"text":"Driver Code","code":"$ num = \"63284689320\" ; if ( divisibleBy20 ( $ num ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP Program to check if number is divisible by 12","code":"< ? php function isDvisibleBy12 ( $ num ) {"}
{"text":"if number greater then 3","code":"if ( strlen ( $ num ) >= 3 ) {"}
{"text":"find last digit","code":"$ d1 = ( int ) $ num [ strlen ( $ num ) - 1 ] ;"}
{"text":"no is odd","code":"if ( $ d1 % 2 != 0 ) return ( 0 ) ;"}
{"text":"find second last digit","code":"$ d2 = ( int ) $ num [ strlen ( $ num ) - 2 ] ;"}
{"text":"find sum of all digits","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < strlen ( $ num ) ; $ i ++ ) $ sum += $ num [ $ i ] ; return ( $ sum % 3 == 0 && ( $ d2 * 10 + $ d1 ) % 4 == 0 ) ; } else {"}
{"text":"if number is less then or equal to 100","code":"$ number = stoi ( $ num ) ; return ( $ number % 12 == 0 ) ; } }"}
{"text":"Driver Code","code":"$ num = \"12244824607284961224\" ; if ( isDvisibleBy12 ( $ num ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"PHP program to find the largest non perfect square number among n numbers","code":"< ? php function check ( $ n ) {"}
{"text":"takes the sqrt of the number","code":"$ d = sqrt ( $ n ) ;"}
{"text":"checks if it is a perfect square number","code":"if ( $ d * $ d == $ n ) return true ; return false ; }"}
{"text":"function to find the largest non perfect square number","code":"function largestNonPerfectSquareNumber ( $ a , $ n ) {"}
{"text":"stores the maximum of all non perfect square numbers","code":"$ maxi = -1 ;"}
{"text":"traverse for all elements in the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"store the maximum if not a perfect square","code":"if ( ! check ( $ a [ $ i ] ) ) $ maxi = max ( $ a [ $ i ] , $ maxi ) ; } return $ maxi ; }"}
{"text":"Driver Code","code":"$ a = array ( 16 , 20 , 25 , 2 , 3 , 10 ) ; $ n = count ( $ a ) ;"}
{"text":"function call","code":"echo largestNonPerfectSquareNumber ( $ a , $ n ) ; ? >"}
{"text":"PHP Program to print an arithmetic progression series","code":"< ? php function printAP ( $ a , $ d , $ n ) {"}
{"text":"Printing AP by simply adding d to previous term .","code":"$ curr_term ; $ curr_term = a ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { echo ( $ curr_term . \" \" ) ; $ curr_term += $ d ; } }"}
{"text":"starting number","code":"$ a = 2 ;"}
{"text":"Common difference","code":"$ d = 1 ;"}
{"text":"N th term to be find","code":"$ n = 5 ; printAP ( $ a , $ d , $ n ) ; ? >"}
{"text":"PHP program to print first n non - square numbers .","code":"< ? php function printNonSquare ( $ n ) { $ curr_count = 2 ; $ num = 2 ; $ count = 0 ; while ( $ count < $ n ) {"}
{"text":"Print curr_count numbers . curr_count is current gap between two square numbers .","code":"for ( $ i = 0 ; $ i < $ curr_count && $ count < $ n ; $ i ++ ) { echo ( $ num . \" \" ) ; $ count ++ ; $ num ++ ; }"}
{"text":"skip a square number .","code":"$ num ++ ;"}
{"text":"Count of next non - square numbers is next even number .","code":"$ curr_count += 2 ; } }"}
{"text":"Driver code","code":"$ n = 10 ; printNonSquare ( $ n ) ; ? >"}
{"text":"Returns count of zeros in product of array","code":"< ? php function countZeros ( $ a , $ n ) { $ count2 = 0 ; $ count5 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"count number of 2 s in each element","code":"while ( $ a [ $ i ] % 2 == 0 ) { $ a [ $ i ] = $ a [ $ i ] \/ 2 ; $ count2 ++ ; }"}
{"text":"count number of 5 s in each element","code":"while ( $ a [ $ i ] % 5 == 0 ) { $ a [ $ i ] = $ a [ $ i ] \/ 5 ; $ count5 ++ ; } }"}
{"text":"return the minimum","code":"return ( $ count2 < $ count5 ) ? $ count2 : $ count5 ; }"}
{"text":"Driver Code","code":"$ a = array ( 10 , 100 , 20 , 30 , 50 , 90 , 12 , 80 ) ; $ n = sizeof ( $ a ) ; echo ( countZeros ( $ a , $ n ) ) ; ? >"}
{"text":"Efficient PHP method to find sum of square of first n even numbers .","code":"< ? php function squareSum ( $ n ) { return 2 * $ n * ( $ n + 1 ) * ( 2 * $ n + 1 ) \/ 3 ; }"}
{"text":"Driver code","code":"echo squareSum ( 8 ) ; ? >"}
{"text":"pwr [ i ] is going to store i raised to power i .","code":"< ? php $ pwr = array_fill ( 0 , 10 , 0 ) ;"}
{"text":"Function to check out whether the number is MA14nchhausen Number or not","code":"function isMunchhausen ( $ n ) { global $ pwr ; $ sm = 0 ; $ temp = $ n ; while ( $ temp ) { $ sm = $ sm + $ pwr [ ( $ temp % 10 ) ] ; $ temp = ( int ) ( $ temp \/ 10 ) ; } return ( $ sm == $ n ) ; } function printMunchhausenNumbers ( $ n ) { global $ pwr ;"}
{"text":"Precompute i raised to power i for every i","code":"for ( $ i = 0 ; $ i < 10 ; $ i ++ ) $ pwr [ $ i ] = pow ( ( float ) ( $ i ) , ( float ) ( $ i ) ) ;"}
{"text":"The input here is fixed i . e . it will check up to n","code":"for ( $ i = 1 ; $ i < $ n + 1 ; $ i ++ )"}
{"text":"check the integer for MA14nchhausen Number , if yes then print out the number","code":"if ( isMunchhausen ( $ i ) ) print ( $ i . \" STRNEWLINE \" ) ; }"}
{"text":"Driver Code","code":"$ n = 10000 ; printMunchhausenNumbers ( $ n ) ; ? >"}
{"text":"To compute k - th digit in a ^ b","code":"< ? php function kthdigit ( $ a , $ b , $ k ) {"}
{"text":"computing a ^ b","code":"$ p = pow ( $ a , $ b ) ; $ count = 0 ; while ( $ p > 0 and $ count < $ k ) {"}
{"text":"getting last digit","code":"$ rem = $ p % 10 ;"}
{"text":"increasing count by 1","code":"$ count ++ ;"}
{"text":"if current number is required digit","code":"if ( $ count == $ k ) return $ rem ;"}
{"text":"remove last digit","code":"$ p = $ p \/ 10 ; } return 0 ; }"}
{"text":"Driver Code","code":"$ a = 5 ; $ b = 2 ; $ k = 1 ; echo kthdigit ( $ a , $ b , $ k ) ; ? >"}
{"text":"function to get sum of digits of a number","code":"< ? php function digSum ( $ n ) { if ( $ n == 0 ) return 0 ; return ( $ n % 9 == 0 ) ? 9 : ( $ n % 9 ) ; }"}
{"text":"function to return sum","code":"function PowDigSum ( $ n , $ x ) {"}
{"text":"Find sum of digits in n","code":"$ sum = digSum ( $ n ) ;"}
{"text":"Find remainder of exponent","code":"$ rem = $ x % 6 ; if ( ( $ sum == 3 $ sum == 6 ) && $ x > 1 ) return 9 ; else if ( $ x == 1 ) return $ sum ; else if ( $ x == 0 ) return 1 ; else if ( $ rem == 0 ) return digSum ( pow ( $ sum , 6 ) ) ; else return digSum ( pow ( $ sum , $ rem ) ) ; }"}
{"text":"Driver code","code":"$ n = 33333 ; $ x = 332654 ; echo PowDigSum ( $ n , $ x ) ; ? >"}
{"text":"PHP code for Max Water Container","code":"< ? php function maxArea ( $ A , $ len ) { $ l = 0 ; $ r = $ len - 1 ; $ area = 0 ; while ( $ l < $ r ) {"}
{"text":"Calculating the max area","code":"$ area = max ( $ area , min ( $ A [ $ l ] , $ A [ $ r ] ) * ( $ r - $ l ) ) ; if ( $ A [ $ l ] < $ A [ $ r ] ) $ l += 1 ; else $ r -= 1 ; } return $ area ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 5 , 4 , 3 ) ; $ b = array ( 3 , 1 , 2 , 4 , 5 ) ; $ len1 = sizeof ( $ a ) \/ sizeof ( $ a [ 0 ] ) ; echo maxArea ( $ a , $ len1 ) . \" STRNEWLINE \" ; $ len2 = sizeof ( $ b ) \/ sizeof ( $ b [ 0 ] ) ; echo maxArea ( $ b , $ len2 ) ; ? >"}
{"text":"Returns value of mobius ( )","code":"< ? php function mobius ( $ n ) { $ p = 0 ;"}
{"text":"Handling 2 separately","code":"if ( $ n % 2 == 0 ) { $ n = $ n \/ 2 ; $ p ++ ;"}
{"text":"If 2 ^ 2 also divides N","code":"if ( $ n % 2 == 0 ) return 0 ; }"}
{"text":"Check for all other prime factors","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) {"}
{"text":"If i divides n","code":"if ( $ n % $ i == 0 ) { $ n = $ n \/ $ i ; $ p ++ ;"}
{"text":"If i ^ 2 also divides N","code":"if ( $ n % $ i == 0 ) return 0 ; } } return ( $ p % 2 == 0 ) ? -1 : 1 ; }"}
{"text":"Driver code","code":"$ N = 17 ; echo \" Mobius \u2581 Functions \u2581 M ( N ) \u2581 at \u2581 N \u2581 = \u2581 \" , $ N , \" \u2581 is : \u2581 \" , mobius ( $ N ) , \" STRNEWLINE \" ; echo \" Mobius \u2581 Functions \u2581 M ( N ) \u2581 at \u2581 N \u2581 = \u2581 \" , 25 , \" \u2581 is : \u2581 \" , mobius ( 25 ) , \" STRNEWLINE \" ; echo \" Mobius \u2581 Functions \u2581 M ( N ) \u2581 at \u2581 N \u2581 = \u2581 \" , 6 , \" \u2581 is : \u2581 \" , mobius ( 6 ) ; ? >"}
{"text":"function to return product of number from start to end .","code":"< ? php function factorial ( $ start , $ end ) { $ res = 1 ; for ( $ i = $ start ; $ i <= $ end ; $ i ++ ) $ res *= $ i ; return $ res ; }"}
{"text":"Return the sum of square of binomial coefficient","code":"function sumofsquare ( $ n ) { return factorial ( $ n + 1 , 2 * $ n ) \/ factorial ( 1 , $ n ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo sumofsquare ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Approximate value of golden ratio","code":"< ? php $ PHI = 1.6180339 ;"}
{"text":"Function to find nth Fibonacci number","code":"function fib ( $ n ) { global $ PHI ; $ f = array ( 0 , 1 , 1 , 2 , 3 , 5 ) ;"}
{"text":"Fibonacci numbers for n < 6","code":"if ( $ n < 6 ) return $ f [ $ n ] ;"}
{"text":"Else start counting from 5 th term","code":"$ t = 5 ; $ fn = 5 ; while ( $ t < $ n ) { $ fn = round ( $ fn * $ PHI ) ; $ t ++ ; } return $ fn ; }"}
{"text":"Driver Code","code":"$ n = 9 ; echo $ n , \" th \u2581 Fibonacci \u2581 Number \u2581 = \u2581 \" , fib ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Consider a differential equation dy \/ dx = ( x + y + xy )","code":"< ? php function func ( $ x , $ y ) { return ( $ x + $ y + $ x * $ y ) ; }"}
{"text":"Function for Euler formula","code":"function euler ( $ x0 , $ y , $ h , $ x ) { $ temp = -0 ;"}
{"text":"Iterating till the point at which we need approximation","code":"while ( $ x0 < $ x ) { $ temp = $ y ; $ y = $ y + $ h * func ( $ x0 , $ y ) ; $ x0 = $ x0 + $ h ; }"}
{"text":"Printing approximation","code":"echo \" Approximate \u2581 solution \u2581 at \u2581 x \u2581 = \u2581 \" , $ x , \" \u2581 is \u2581 \" , $ y , \" STRNEWLINE \" ; }"}
{"text":"Initial Values","code":"$ x0 = 0 ; $ y0 = 1 ; $ h = 0.025 ;"}
{"text":"Value of x at which we need approximation","code":"$ x = 0.1 ; euler ( $ x0 , $ y0 , $ h , $ x ) ; ? >"}
{"text":"function to find the solution","code":"< ? php function solution ( $ a , $ b , $ n ) {"}
{"text":"traverse for all possible values","code":"for ( $ i = 0 ; $ i * $ a <= $ n ; $ i ++ ) {"}
{"text":"check if it is satisfying the equation","code":"if ( ( $ n - ( $ i * $ a ) ) % $ b == 0 ) { echo \" x = \" \u2581 , \u2581 $ i \u2581 , \u2581 \" , y = \" ( $ n - ( $ i * $ a ) ) \/ $ b ; return ; } } echo \" No \u2581 solution \" ; }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 3 ; $ n = 7 ; solution ( $ a , $ b , $ n ) ; ? >"}
{"text":"Returns value of Binomial Coefficient Sum which is 2 raised to power n .","code":"< ? php function binomialCoeffSum ( $ n ) { return ( 1 << $ n ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo binomialCoeffSum ( $ n ) ; ? >"}
{"text":"PHP program to compute division upto n decimal places .","code":"< ? php function precisionCompute ( $ x , $ y , $ n ) {"}
{"text":"Base cases","code":"if ( $ y == 0 ) { echo \" Infinite \" , \" STRNEWLINE \" ; return ; } if ( $ x == 0 ) { echo 0 , \" STRNEWLINE \" ; return ; } if ( $ n <= 0 ) {"}
{"text":"Since n <= 0 , don 't   compute after the decimal","code":"echo $ x \/ $ y , \" STRNEWLINE \" ; return ; }"}
{"text":"Handling negative numbers","code":"if ( ( ( $ x > 0 ) && ( $ y < 0 ) ) || ( ( $ x < 0 ) && ( $ y > 0 ) ) ) { echo \" - \" $ x = $ x > 0 ? $ x : - $ x ; $ y = $ y > 0 ? $ y : - $ y ; }"}
{"text":"Integral division","code":"$ d = $ x \/ $ y ;"}
{"text":"Now one by print digits after dot using school division method .","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { echo $ d ; $ x = $ x - ( $ y * $ d ) ; if ( $ x == 0 ) break ; $ x = $ x * 10 ; $ d = $ x \/ $ y ; if ( $ i == 0 ) echo \" . \" ; } }"}
{"text":"Driver Code","code":"$ x = 22 ; $ y = 7 ; $ n = 15 ; precisionCompute ( $ x , $ y , $ n ) ; ? >"}
{"text":"Function to check quadrant","code":"< ? php function quadrant ( $ x , $ y ) { if ( $ x > 0 and $ y > 0 ) echo ( \" lies \u2581 in \u2581 First \u2581 quadrant \" ) ; else if ( $ x < 0 and $ y > 0 ) echo ( \" lies \u2581 in \u2581 Second \u2581 quadrant \" ) ; else if ( $ x < 0 and $ y < 0 ) echo ( \" lies \u2581 in \u2581 Third \u2581 quadrant \" ) ; else if ( $ x > 0 and $ y < 0 ) echo ( \" lies \u2581 in \u2581 Fourth \u2581 quadrant \" ) ; else if ( $ x == 0 and $ y > 0 ) echo ( \" lies \u2581 at \u2581 positive \u2581 y \u2581 axis \" ) ; else if ( $ x == 0 and $ y < 0 ) echo ( \" lies \u2581 at \u2581 negative \u2581 y \u2581 axis \" ) ; else if ( $ y == 0 and $ x < 0 ) echo ( \" lies \u2581 at \u2581 negative \u2581 x \u2581 axis \" ) ; else if ( $ y == 0 and $ x > 0 ) echo ( \" lies \u2581 at \u2581 positive \u2581 x \u2581 axis \" ) ; else echo ( \" lies \u2581 at \u2581 origin \" ) ; }"}
{"text":"Driver code","code":"$ x = 1 ; $ y = 1 ;"}
{"text":"Function call","code":"quadrant ( $ x , $ y ) ; ? >"}
{"text":"function to check digits","code":"< ? php function checkDigits ( $ n ) {"}
{"text":"check all digits are prime or not","code":"while ( $ n ) { $ dig = $ n % 10 ;"}
{"text":"check if digits are prime or not","code":"if ( $ dig != 2 && $ dig != 3 && $ dig != 5 && $ dig != 7 ) return false ; $ n = ( int ) ( $ n \/ 10 ) ; } return true ; }"}
{"text":"To check if n is prime or not","code":"function prime ( $ n ) { if ( $ n == 1 ) return false ;"}
{"text":"check for all factors","code":"for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ n % $ i == 0 ) return false ; } return true ; }"}
{"text":"To check if n is Full Prime","code":"function isFullPrime ( $ n ) {"}
{"text":"The order is important here for efficiency .","code":"return ( checkDigits ( $ n ) && prime ( $ n ) ) ; }"}
{"text":"Driver Code","code":"$ n = 53 ; if ( isFullPrime ( $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"A memoization based optimized PHP program to find n - th SchrAderaHipparchus number","code":"< ? php $ MAX = 500 ; function nthSHN ( $ n , $ dp ) { if ( $ n == 1 $ n == 2 ) return $ dp [ $ n ] = 1 ; if ( $ dp [ $ n ] != -1 ) return $ dp [ $ n ] ; return $ dp [ $ n ] = ( ( 6 * $ n - 9 ) * nthSHN ( $ n - 1 , $ dp ) - ( $ n - 3 ) * nthSHN ( $ n - 2 , $ dp ) ) \/ $ n ; }"}
{"text":"Driver Code","code":"$ n = 6 ; $ dp = array_fill ( 0 , $ MAX , true ) ; echo nthSHN ( $ n , $ dp ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to find sum of first n even numbers","code":"< ? php function evenSum ( $ n ) { $ curr = 2 ; $ sum = 0 ;"}
{"text":"sum of first n even numbers","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ sum += $ curr ;"}
{"text":"next even number","code":"$ curr += 2 ; }"}
{"text":"required sum","code":"return $ sum ; }"}
{"text":"Driver program to test above","code":"$ n = 20 ; echo \" Sum \u2581 of \u2581 first \u2581 \" . $ n . \" \u2581 Even \u2581 numbers \u2581 is : \u2581 \" . evenSum ( $ n ) ; ? >"}
{"text":"function to find sum of first n even numbers","code":"< ? php function evenSum ( $ n ) {"}
{"text":"required sum","code":"return ( $ n * ( $ n + 1 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 20 ; echo \" Sum \u2581 of \u2581 first \u2581 \" , $ n , \" \u2581 Even \u2581 numbers \u2581 is : \u2581 \" , evenSum ( $ n ) ; ? >"}
{"text":"Function to convert kmph to mph","code":"< ? php function kmphTOmph ( $ kmph ) { return 0.6214 * $ kmph ; }"}
{"text":"Function to convert mph to kmph","code":"function mphTOkmph ( $ mph ) { return $ mph * 1.60934 ; }"}
{"text":"Driver Code","code":"$ kmph = 150 ; $ mph = 100 ; echo \" speed \u2581 in \u2581 mph \u2581 is \u2581 \" , kmphTOmph ( $ kmph ) , \" STRNEWLINE \" ; echo \" speed \u2581 in \u2581 kmph \u2581 is \u2581 \" , mphTOkmph ( $ mph ) ; ? >"}
{"text":"Returns gcd of two numbers","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to return the desired number if exists","code":"function findNumber ( $ arr , $ n ) {"}
{"text":"Find GCD of array","code":"$ ans = $ arr [ 0 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ ans = gcd ( $ ans , $ arr [ $ i ] ) ;"}
{"text":"Check if GCD is present in array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] == $ ans ) return $ ans ; return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 2 , 4 ) ; $ n = sizeof ( $ arr ) ; echo findNumber ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to check whether there exist at least k or not in range [ 2. . n ]","code":"< ? php $ primes = array ( ) ;"}
{"text":"Generating all the prime numbers from 2 to n .","code":"function SieveofEratosthenes ( $ n ) { global $ primes ; $ visited = array_fill ( 0 , $ n , false ) ; for ( $ i = 2 ; $ i <= $ n + 1 ; $ i ++ ) if ( ! $ visited [ $ i ] ) { for ( $ j = $ i * $ i ; $ j <= $ n + 1 ; $ j += $ i ) $ visited [ $ j ] = true ; array_push ( $ primes , $ i ) ; } } function specialPrimeNumbers ( $ n , $ k ) { global $ primes ; SieveofEratosthenes ( $ n ) ; $ count = 0 ; for ( $ i = 0 ; $ i < count ( $ primes ) ; $ i ++ ) { for ( $ j = 0 ; $ j < $ i - 1 ; $ j ++ ) {"}
{"text":"If a prime number is Special prime number , then we increments the value of k .","code":"if ( $ primes [ $ j ] + $ primes [ $ j + 1 ] + 1 == $ primes [ $ i ] ) { $ count ++ ; break ; } }"}
{"text":"If at least k Special prime numbers are present , then we return 1. else we return 0 from outside of the outer loop .","code":"if ( $ count == $ k ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ n = 27 ; $ k = 2 ; if ( specialPrimeNumbers ( $ n , $ k ) ) echo \" YES STRNEWLINE \" ; else echo \" NO STRNEWLINE \" ; ? >"}
{"text":"function to calculate all the prime factors and count of every prime factor","code":"< ? php function factorize ( $ n ) { $ count = 0 ;"}
{"text":"count the number of times 2 divides","code":"while ( ! ( $ n % 2 ) ) {"}
{"text":"equivalent to n = n \/ 2 ;","code":"$ n >>= 1 ; $ count ++ ; }"}
{"text":"if 2 divides it","code":"if ( $ count ) echo ( 2 . \" \" \u2581 . \u2581 $ count \u2581 . \u2581 \" \""}
{"text":"check for all the possible numbers that can divide it","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i += 2 ) { $ count = 0 ; while ( $ n % $ i == 0 ) { $ count ++ ; $ n = $ n \/ $ i ; } if ( $ count ) echo ( $ i . \" \u2581 \" . $ count ) ; }"}
{"text":"if n at the end is a prime number .","code":"if ( $ n > 2 ) echo ( $ n . \" \u2581 \" . 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 1000000000000000000 ; factorize ( $ n ) ; ? >"}
{"text":"__gcd function","code":"< ? php function __gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return __gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to count number of moves .","code":"function minimumMoves ( $ A , $ N ) {"}
{"text":"Counting Number of ones .","code":"$ one = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( $ A [ $ i ] == 1 ) $ one ++ ;"}
{"text":"If there is a one","code":"if ( $ one != 0 ) return $ N - $ one ;"}
{"text":"Find smallest subarray with GCD equals to one .","code":"$ minimum = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"to calculate GCD","code":"$ g = $ A [ $ i ] ; for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { $ g = __gcd ( $ A [ $ j ] , $ g ) ; if ( $ g == 1 ) { $ minimum = min ( $ minimum , $ j - $ i ) ; break ; } } }"}
{"text":"Not Possible","code":"if ( $ minimum == PHP_INT_MAX ) return -1 ; else"}
{"text":"Final answer","code":"return $ N + $ minimum - 1 ; }"}
{"text":"Driver code","code":"$ A = array ( 2 , 4 , 3 , 9 ) ; $ N = sizeof ( $ A ) ; echo ( minimumMoves ( $ A , $ N ) ) ; ? >"}
{"text":"function to print series of n elements","code":"< ? php function series ( $ n , $ d ) {"}
{"text":"if S . D . is 0 then print all elements as 0.","code":"if ( $ d == 0 ) {"}
{"text":"print n 0 's","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo \"0 \u2581 \" ; echo \" STRNEWLINE \" ; return ; }"}
{"text":"if S . D . is even","code":"if ( $ n % 2 == 0 ) {"}
{"text":"print - SD , + SD , - SD , + SD","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { echo pow ( -1 , $ i ) * $ d , \" \" ; } echo \" STRNEWLINE \" ; }"}
{"text":"if odd","code":"else {"}
{"text":"convert n to a float integer","code":"$ m = $ n ; $ r = ( $ m \/ ( $ m - 1 ) ) ; $ g = ( $ d * sqrt ( $ r ) ) ;"}
{"text":"print one element to be 0","code":"echo \"0 \u2581 \" ;"}
{"text":"print ( n - 1 ) elements as xi derived from the formula","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { echo pow ( -1 , $ i ) * $ g , \" \" ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ n = 3 ; $ d = 3 ; series ( $ n , $ d ) ; ? >"}
{"text":"PHP code to count the frequency of 1 in numbers less than or equal to the given number .","code":"< ? php function countDigitOne ( $ n ) { $ countr = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ str = strval ( $ i ) ; $ countr += substr_count ( $ str , '1' ) ; } return $ countr ; }"}
{"text":"Driver Code","code":"$ n = 13 ; echo countDigitOne ( $ n ) . \" STRNEWLINE \" ; $ n = 131 ; echo countDigitOne ( $ n ) . \" STRNEWLINE \" ; $ n = 159 ; echo countDigitOne ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"prime modulo value","code":"< ? php $ N = 1000000007 ; function exponentiation ( $ bas , $ exp ) { global $ N ; $ t = 1 ; while ( $ exp > 0 ) {"}
{"text":"for cases where exponent is not an even value","code":"if ( $ exp % 2 != 0 ) $ t = ( $ t * $ bas ) % $ N ; $ bas = ( $ bas * $ bas ) % $ N ; $ exp = ( int ) $ exp \/ 2 ; } return $ t % $ N ; }"}
{"text":"Driver Code","code":"$ bas = 5 ; $ exp = 100000 ; $ modulo = exponentiation ( $ bas , $ exp ) ; echo ( $ modulo ) ; ? >"}
{"text":"PHP program to find GCD of factorial of two numbers .","code":"< ? php function factorial ( $ x ) { if ( $ x <= 1 ) return 1 ; $ res = 2 ; for ( $ i = 3 ; $ i <= $ x ; $ i ++ ) $ res = $ res * $ i ; return $ res ; } function gcdOfFactorial ( $ m , $ n ) { return factorial ( min ( $ m , $ n ) ) ; }"}
{"text":"Driver Code","code":"$ m = 5 ; $ n = 9 ; echo gcdOfFactorial ( $ m , $ n ) ; ? >"}
{"text":"Function for recursive digit sum","code":"< ? php function recDigSum ( $ n ) { if ( $ n == 0 ) return 0 ; else { if ( $ n % 9 == 0 ) return 9 ; else return $ n % 9 ; } }"}
{"text":"function to check if prime or not the single digit","code":"function check ( $ n ) {"}
{"text":"calls function which returns sum till single digit","code":"$ n = recDigSum ( $ n ) ;"}
{"text":"checking prime","code":"if ( $ n == 2 or $ n == 3 or $ n == 5 or $ n == 7 ) echo \" Yes \" ; else echo \" No \" ; }"}
{"text":"Driver code","code":"$ n = 5602 ; check ( $ n ) ; ? >"}
{"text":"Definition of findNumber function","code":"< ? php function findNumber ( $ n ) {"}
{"text":"Finding x from equation n = x ( x + 1 ) \/ 2 + 1","code":"$ x = floor ( ( -1 + sqrt ( 1 + 8 * $ n - 8 ) ) \/ 2 ) ;"}
{"text":"Base of current block","code":"$ base = ( $ x * ( $ x + 1 ) ) \/ 2 + 1 ;"}
{"text":"Value of n - th element","code":"return $ n - $ base + 1 ; }"}
{"text":"Driver code","code":"$ n = 55 ; echo findNumber ( $ n ) ; ? >"}
{"text":"Returns weighted mean assuming for numbers { 1 , 2 , . . n } and weights { 1 , 2 , . . n }","code":"< ? php function weightedMean ( $ n ) { return ( 2 * $ n + 1 ) \/ 3 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo ( weightedMean ( $ n ) ) ; ? >"}
{"text":"Function to calculate the quotient of every element of the array","code":"< ? php function calculate ( $ a , $ b , $ n , $ m ) { $ mul = 1 ;"}
{"text":"Calculate the product of all elements","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) if ( $ b [ $ i ] != 0 ) $ mul = $ mul * $ b [ $ i ] ;"}
{"text":"To calculate the quotient of every array element","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x = floor ( $ a [ $ i ] \/ $ mul ) ; echo $ x , \" \" ; } }"}
{"text":"Driver code","code":"$ a = array ( 5 , 100 , 8 ) ; $ b = array ( 2 , 3 ) ; $ n = count ( $ a ) ; $ m = count ( $ b ) ; calculate ( $ a , $ b , $ n , $ m ) ; ? >"}
{"text":"function to print where to shoot","code":"< ? php function p_rint ( $ n ) {"}
{"text":"no . of bombs required","code":"echo floor ( $ n + $ n \/ 2 ) , \" STRNEWLINE \" ;"}
{"text":"bomb all the even positions","code":"for ( $ i = 2 ; $ i <= $ n ; $ i += 2 ) echo $ i , \" \u2581 \" ;"}
{"text":"bomb all the odd positions","code":"for ( $ i = 1 ; $ i <= $ n ; $ i += 2 ) echo $ i , \" \u2581 \" ;"}
{"text":"bomb all the even positions again","code":"for ( $ i = 2 ; $ i <= $ n ; $ i += 2 ) echo $ i , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 3 ; p_rint ( $ n ) ; ? >"}
{"text":"define lcm function","code":"< ? php function lcm_fun ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return lcm_fun ( $ b , $ a % $ b ) ; } function digitLCM ( $ n ) { $ lcm = 1 ; while ( $ n > 0 ) { $ lcm = ( int ) ( ( $ n % 10 * $ lcm ) \/ lcm_fun ( $ n % 10 , $ lcm ) ) ;"}
{"text":"If at any point LCM become 0. return it","code":"if ( $ lcm == 0 ) return 0 ; $ n = ( int ) ( $ n \/ 10 ) ; } return $ lcm ; }"}
{"text":"Driver code","code":"$ n = 397 ; echo digitLCM ( $ n ) ; ? >"}
{"text":"PHP Program to test 1 \/ e law for Secretary Problem :","code":"< ? php $ e = 2.71828 ;"}
{"text":"To find closest integer of num .","code":"function roundNo ( $ num ) { return $ num < 0 ? $ num - 0.5 : $ num + 0.5 ; }"}
{"text":"Finds best candidate using n \/ e rule . candidate [ ] represents talents of n candidates .","code":"function printBestCandidate ( $ candidate , $ n ) { global $ e ;"}
{"text":"Calculating sample size for benchmarking .","code":"$ sample_size = roundNo ( $ n \/ $ e ) ; echo \" Sample size is \" floor ( $ sample_size ) . \" STRNEWLINE \" ;"}
{"text":"Finding best candidate in sample size","code":"$ best = 0 ; for ( $ i = 1 ; $ i < $ sample_size ; $ i ++ ) if ( $ candidate [ $ i ] > $ candidate [ $ best ] ) $ best = $ i ;"}
{"text":"Finding the first best candidate that is better than benchmark set .","code":"for ( $ i = $ sample_size ; $ i < $ n ; $ i ++ ) if ( $ candidate [ $ i ] >= $ candidate [ $ best ] ) { $ best = $ i ; break ; } if ( $ best >= $ sample_size ) echo \" Best candidate found is \" . floor ( $ best + 1 ) . \" \u2581 with \u2581 talent \u2581 \" . floor ( $ candidate [ $ best ] ) . \" STRNEWLINE \" ; else echo \" Couldn ' t \u2581 find \u2581 a \u2581 best \u2581 candidate STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ n = 8 ;"}
{"text":"n = 8 candidates and candidate array contains talents of n candidate where the largest number means highest talented candidate .","code":"$ candidate = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"generating random numbers between 1 to 8 for talent of candidate","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ candidate [ $ i ] = 1 + rand ( 1 , 8 ) ; echo \" Candidate \u2581 : \u2581 \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( $ i + 1 ) . \" \u2581 \" ; echo \" Talents : \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ candidate [ $ i ] . \" \u2581 \" ; printBestCandidate ( $ candidate , $ n ) ; ? >"}
{"text":"Calculation of u mentioned in formula","code":"< ? php function u_cal ( $ u , $ n ) { $ temp = $ u ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ temp = $ temp * ( $ u + $ i ) ; return $ temp ; }"}
{"text":"Calculating factorial of given n","code":"function fact ( $ n ) { $ f = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ f *= $ i ; return $ f ; }"}
{"text":"number of values given","code":"$ n = 5 ; $ x = array ( 1891 , 1901 , 1911 , 1921 , 1931 ) ;"}
{"text":"y [ ] [ ] is used for difference table and y [ ] [ 0 ] used for input","code":"$ y = array_fill ( 0 , $ n , array_fill ( 0 , $ n , 0 ) ) ; $ y [ 0 ] [ 0 ] = 46 ; $ y [ 1 ] [ 0 ] = 66 ; $ y [ 2 ] [ 0 ] = 81 ; $ y [ 3 ] [ 0 ] = 93 ; $ y [ 4 ] [ 0 ] = 101 ;"}
{"text":"Calculating the backward difference table","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ n - 1 ; $ j >= $ i ; $ j -- ) $ y [ $ j ] [ $ i ] = $ y [ $ j ] [ $ i - 1 ] - $ y [ $ j - 1 ] [ $ i - 1 ] ; }"}
{"text":"Displaying the backward difference table","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) print ( $ y [ $ i ] [ $ j ] . \" TABSYMBOL \" ) ; print ( \" STRNEWLINE \" ) ; }"}
{"text":"Value to interpolate at","code":"$ value = 1925 ;"}
{"text":"Initializing u and sum","code":"$ sum = $ y [ $ n - 1 ] [ 0 ] ; $ u = ( $ value - $ x [ $ n - 1 ] ) \/ ( $ x [ 1 ] - $ x [ 0 ] ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + ( u_cal ( $ u , $ i ) * $ y [ $ n - 1 ] [ $ i ] ) \/ fact ( $ i ) ; } print ( \" Value at \" \u2581 . \u2581 $ value \u2581 . STRNEWLINE \" is \" ? >"}
{"text":"Returns sum of squares of digits of a number n . For example for n = 12 it returns 1 + 4 = 5","code":"< ? php function sumDigitSquare ( $ n ) { $ sq = 0 ; while ( $ n ) { $ digit = $ n % 10 ; $ sq += $ digit * $ digit ; $ n = $ n \/ 10 ; } return $ sq ; }"}
{"text":"Returns true if n is Happy number else returns false .","code":"function isHappy ( $ n ) {"}
{"text":"Keep replacing n with sum of squares of digits until we either reach 1 or we end up in a cycle","code":"while ( 1 ) {"}
{"text":"Number is Happy if we reach 1","code":"if ( $ n == 1 ) return true ;"}
{"text":"Replace n with sum of squares of digits","code":"$ n = sumDigitSquare ( $ n ) ;"}
{"text":"Number is not Happy if we reach 4","code":"if ( $ n == 4 ) return false ; } return false ; }"}
{"text":"Driver code","code":"$ n = 23 ; if ( isHappy ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find sum of all subsets of a set","code":"< ? php function findSumSubsets ( $ n ) {"}
{"text":"sum of subsets is ( n * ( n + 1 ) \/ 2 ) * pow ( 2 , n - 1 )","code":"return ( $ n * ( $ n + 1 ) \/ 2 ) * ( 1 << ( $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo findSumSubsets ( $ n ) ; ? >"}
{"text":"function to find the minimum element","code":"< ? php function findMin ( $ a , $ n ) {"}
{"text":"loop to traverse and store the sum of log","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ )"}
{"text":"computes sum","code":"$ sum += log ( $ a [ $ i ] ) ;"}
{"text":"calculates the elements according to formula .","code":"$ x = exp ( $ sum \/ $ n ) ;"}
{"text":"returns the minimal element","code":"return ( int ) ( $ x + 1 ) ; }"}
{"text":"initialised array","code":"$ a = array ( 3 , 2 , 1 , 4 ) ;"}
{"text":"computes the size of array","code":"$ n = sizeof ( $ a ) ;"}
{"text":"prints out the minimal element","code":"echo ( findMin ( $ a , $ n ) ) ; ? >"}
{"text":"Function to count the total number of digits in a number .","code":"< ? php function countdigits ( $ N ) { $ count = 0 ; while ( $ N ) { $ count ++ ; $ N = floor ( $ N \/ 10 ) ; } return $ count ; }"}
{"text":"Function to generate all cyclic permutations of a number","code":"function cyclic ( $ N ) { $ num = $ N ; $ n = countdigits ( $ N ) ; while ( 1 ) { echo ( $ num ) ; echo \" STRNEWLINE \" ;"}
{"text":"Following three lines generates a circular pirmutation of a number .","code":"$ rem = $ num % 10 ; $ div = floor ( $ num \/ 10 ) ; $ num = ( pow ( 10 , $ n - 1 ) ) * $ rem + $ div ;"}
{"text":"If all the permutations are checked and we obtain original number exit from loop .","code":"if ( $ num == $ N ) break ; } }"}
{"text":"Driver Code","code":"$ N = 5674 ; cyclic ( $ N ) ; ? >"}
{"text":"Function to check if a number is prime or not .","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return -1 ; return true ; }"}
{"text":"Function to check if the number is circular prime or not .","code":"function checkCircular ( $ N ) {"}
{"text":"Count digits .","code":"$ count = 0 ; $ temp = $ N ; while ( $ temp ) { $ count ++ ; $ temp = ( int ) $ temp \/ 10 ; } $ num = $ N ; while ( isPrime ( $ num ) ) {"}
{"text":"Following three lines generate the next circular permutation of a number . We move last digit to first position .","code":"$ rem = $ num % 10 ; $ div = ( int ) $ num \/ 10 ; $ num = ( pow ( 10 , $ count - 1 ) ) * $ rem + $ div ;"}
{"text":"If all the permutations are checked and we obtain original number exit from loop .","code":"if ( $ num == $ N ) return true ; } return -1 ; }"}
{"text":"Driver Code","code":"$ N = 1193 ; if ( checkCircular ( $ N ) ) echo \" Yes \" , \" STRNEWLINE \" ; else echo \" No \" , \" STRNEWLINE \" ; ? >"}
{"text":"function to find if any one of them can overtake the other","code":"< ? php function sackRace ( $ p1 , $ s1 , $ p2 , $ s2 ) {"}
{"text":"Since starting points are always different , they will meet if following conditions are met . ( 1 ) Speeds are not same ( 2 ) Difference between speeds divide the total distance between initial points .","code":"return ( ( $ s1 > $ s2 && ( $ p2 - $ p1 ) % ( $ s1 - $ s2 ) == 0 ) || ( $ s2 > $ s1 && ( $ p1 - $ p2 ) % ( $ s2 - $ s1 ) == 0 ) ) ; }"}
{"text":"Driver Code","code":"$ p1 = 4 ; $ s1 = 4 ; $ p2 = 8 ; $ s2 = 2 ; if ( sackRace ( $ p1 , $ s1 , $ p2 , $ s2 ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"PHP program to find the largest fraction a \/ b such that a + b is equal to given number and a < b .","code":"< ? php function solve ( $ n ) {"}
{"text":"Calculate N \/ 2 ;","code":"$ a = ( float ) $ n \/ 2 ;"}
{"text":"Check if N is odd or even","code":"if ( $ n % 2 != 0 )"}
{"text":"If N is odd answer will be ceil ( n \/ 2 ) - 1 and floor ( n \/ 2 ) + 1","code":"echo ceil ( $ a ) - 1 , \" \u2581 \" , floor ( $ a ) + 1 , \" STRNEWLINE \" ; else {"}
{"text":"If N is even check if N \/ 2 i . e a is even or odd","code":"if ( $ a % 2 == 0 ) {"}
{"text":"If N \/ 2 is even apply the previous formula","code":"echo ceil ( $ a ) - 1 , \" \u2581 \" , floor ( $ a ) + 1 , \" STRNEWLINE \" ; } else {"}
{"text":"If N \/ 2 is odd answer will be ceil ( N \/ 2 ) - 2 and floor ( N \/ 2 ) + 2","code":"echo ceil ( $ a ) - 2 , \" \u2581 \" , floor ( $ a ) + 2 , \" STRNEWLINE \" ; } } }"}
{"text":"driver function","code":"$ n = 34 ; solve ( $ n ) ; ? >"}
{"text":"We can change values here for different inputs","code":"< ? php $ P = 1 ; $ R = 1 ; $ T = 1 ;"}
{"text":"Calculate simple interest","code":"$ SI = ( $ P * $ T * $ R ) \/ 100 ;"}
{"text":"Print the resultant value of SI","code":"echo \" Simple \u2581 Interest \u2581 = \u2581 \" . $ SI ; ? >"}
{"text":"function to count number of digits in the product of two numbers","code":"< ? php function countDigits ( $ a , $ b ) { $ count = 0 ;"}
{"text":"absolute value of the product of two numbers","code":"$ p = abs ( $ a * $ b ) ;"}
{"text":"if product is 0","code":"if ( $ p == 0 ) return 1 ;"}
{"text":"count number of digits in the product ' p '","code":"while ( $ p > 0 ) { $ count ++ ; $ p = ( int ) ( $ p \/ 10 ) ; }"}
{"text":"required count of digits","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ a = 33 ; $ b = -24 ; echo \" Number \u2581 of \u2581 digits \u2581 = \u2581 \" . countDigits ( $ a , $ b ) ; ? >"}
{"text":"function to find closest multiple of x to a ^ b","code":"< ? php function multiple ( $ a , $ b , $ x ) { if ( $ b < 0 ) { if ( $ a == 1 && $ x == 1 ) echo \"1\" ; else echo \"0\" ; }"}
{"text":"calculate a ^ b \/ x","code":"$ mul = pow ( $ a , $ b ) ; $ ans = $ mul \/ $ x ;"}
{"text":"Answer is either ( ans * x ) or ( ans + 1 ) * x","code":"$ ans1 = $ x * $ ans ; $ ans2 = $ x * ( $ ans + 1 ) ;"}
{"text":"Printing nearest answer","code":"$ k = ( ( ( $ mul - $ ans1 ) <= ( $ ans2 - $ mul ) ) ? $ ans1 : $ ans2 ) ; echo ( $ k ) ; }"}
{"text":"Driver Code","code":"$ a = 348 ; $ b = 1 ; $ x = 4 ; multiple ( $ a , $ b , $ x ) ; ? >"}
{"text":"To find max sum of permutation","code":"< ? php function maxSum ( $ n ) {"}
{"text":"Base case","code":"if ( $ n == 1 ) return 1 ;"}
{"text":"Otherwise max sum will be ( n * ( n - 1 ) \/ 2 ) - 1 + n \/ 2","code":"else return ( $ n * ( $ n - 1 ) \/ 2 ) - 1 + $ n \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo intval ( maxSum ( $ n ) ) ; ? >"}
{"text":"Function to find out minimum number","code":"< ? php function minNum ( $ arr , $ n ) {"}
{"text":"Count odd number of terms in array","code":"$ odd = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] % 2 ) $ odd = ! $ odd ; if ( $ odd ) return 1 ; return 2 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) ; $ n = sizeof ( $ arr ) ; echo minNum ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to check if a number is jumbled or not","code":"< ? php function checkJumbled ( $ num ) {"}
{"text":"Single digit number","code":"if ( $ num \/ 10 == 0 ) return true ;"}
{"text":"Checking every digit through a loop","code":"while ( $ num != 0 ) {"}
{"text":"All digits were checked","code":"if ( $ num \/ 10 == 0 ) return true ;"}
{"text":"Digit at index i","code":"$ digit1 = $ num % 10 ;"}
{"text":"Digit at index i - 1","code":"$ digit2 = ( $ num \/ 10 ) % 10 ;"}
{"text":"If difference is greater than 1","code":"if ( abs ( $ digit2 - $ digit1 ) > 1 ) return false ; $ num = $ num \/ 10 ; }"}
{"text":"Number checked","code":"return true ; }"}
{"text":"- 1234 to be checked","code":"$ num = -1234 ; if ( checkJumbled ( $ num ) ) echo \" True \u2581 STRNEWLINE \" ; else echo \" False \u2581 STRNEWLINE \" ;"}
{"text":"287 to be checked","code":"$ num = -1247 ; if ( checkJumbled ( $ num ) ) echo \" True \u2581 STRNEWLINE \" ; else echo \" False \u2581 STRNEWLINE \" ; ? >"}
{"text":"function to find the position of the Most Significant Bit","code":"< ? php function msbPos ( $ n ) { $ pos = 0 ; while ( $ n != 0 ) { $ pos ++ ;"}
{"text":"keeps shifting bits to the right until we are left with 0","code":"$ n = $ n >> 1 ; } return $ pos ; }"}
{"text":"function to return at which place Josephus should sit to avoid being killed","code":"function josephify ( $ n ) {"}
{"text":"Getting the position of the Most Significant Bit ( MSB ) . The leftmost '1' . If the number is '41' then its binary is '101001' . So msbPos ( 41 ) = 6","code":"$ position = msbPos ( $ n ) ;"}
{"text":"' j ' stores the number with which to XOR the number ' n ' . Since we need '100000' . We will do 1 << 6 - 1 to get '100000'","code":"$ j = 1 << ( $ position - 1 ) ;"}
{"text":"Toggling the Most Significant Bit . Changing the leftmost '1' to '0' . 101001 ^ 100000 = 001001 ( 9 )","code":"$ n = $ n ^ $ j ;"}
{"text":"Left - shifting once to add an extra '0' to the right end of the binary number 001001 = 010010 ( 18 )","code":"$ n = $ n << 1 ;"}
{"text":"Toggling the '0' at the end to '1' which is essentially the same as putting the MSB at the rightmost place . 010010 | 1 = 010011 ( 19 )","code":"$ n = $ n | 1 ; return $ n ; }"}
{"text":"Driver Code","code":"$ n = 41 ; print ( josephify ( $ n ) ) ; ? >"}
{"text":"A function will return number of pair whose XOR is odd","code":"< ? php function countXorPair ( $ arr , $ n ) {"}
{"text":"To store count of XOR pair","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ )"}
{"text":"If XOR is odd increase count","code":"if ( ( $ arr [ $ i ] ^ $ arr [ $ j ] ) % 2 == 1 ) $ count ++ ; }"}
{"text":"Return count","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 ) ; $ n = count ( $ arr ) ; echo countXorPair ( $ arr , $ n ) ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function powmod ( $ x , $ y , $ p ) {"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Function to calculate k for given a , b , m","code":"function discreteLogarithm ( $ a , $ b , $ m ) { $ n = ( int ) sqrt ( $ m ) + 1 ; $ value = array_fill ( 0 , $ m , NULL ) ;"}
{"text":"Store all values of a ^ ( n * i ) of LHS","code":"for ( $ i = $ n ; $ i >= 1 ; -- $ i ) $ value [ powmod ( $ a , $ i * $ n , $ m ) ] = $ i ; for ( $ j = 0 ; $ j < $ n ; ++ $ j ) {"}
{"text":"Calculate ( a ^ j ) * b and check for collision","code":"$ cur = ( powmod ( $ a , $ j , $ m ) * $ b ) % $ m ;"}
{"text":"If collision occurs i . e . , LHS = RHS","code":"if ( $ value [ $ cur ] ) { $ ans = $ value [ $ cur ] * $ n - $ j ;"}
{"text":"Check whether ans lies below m or not","code":"if ( $ ans < $ m ) return $ ans ; } } return -1 ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 3 ; $ m = 5 ; echo discreteLogarithm ( $ a , $ b , $ m ) , \" \" ; $ a = 3 ; $ b = 7 ; $ m = 11 ; echo discreteLogarithm ( $ a , $ b , $ m ) , \" \" ; ? >"}
{"text":"PHP program to calculate discrete logarithm","code":"< ? php function discreteLogarithm ( $ a , $ b , $ m ) { $ n = ( int ) sqrt ( $ m ) + 1 ;"}
{"text":"Calculate a ^ n","code":"$ an = 1 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ an = ( $ an * $ a ) % $ m ; $ value = array_fill ( 0 , $ m , NULL ) ;"}
{"text":"Store all values of a ^ ( n * i ) of LHS","code":"for ( $ i = 1 , $ cur = $ an ; $ i <= $ n ; ++ $ i ) { if ( ! $ value [ $ cur ] ) $ value [ $ cur ] = $ i ; $ cur = ( $ cur * $ an ) % $ m ; } for ( $ i = 0 , $ cur = $ b ; $ i <= $ n ; ++ $ i ) {"}
{"text":"Calculate ( a ^ j ) * b and check for collision","code":"if ( $ value [ $ cur ] ) { $ ans = $ value [ $ cur ] * $ n - $ i ; if ( $ ans < $ m ) return $ ans ; } $ cur = ( $ cur * $ a ) % $ m ; } return -1 ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 3 ; $ m = 5 ; echo discreteLogarithm ( $ a , $ b , $ m ) , \" \" ; $ a = 3 ; $ b = 7 ; $ m = 11 ; echo discreteLogarithm ( $ a , $ b , $ m ) ; ? >"}
{"text":"PHP program to find n - th number with prime digits 2 , 3 and 7","code":"< ? php function nthprimedigitsnumber ( $ number ) { $ num = \" \" ; while ( $ number > 0 ) {"}
{"text":"remainder for check element position","code":"$ rem = $ number % 4 ; switch ( $ rem ) {"}
{"text":"if number is 1 st position in tree","code":"case 1 : $ num . = '2' ; break ;"}
{"text":"if number is 2 nd position in tree","code":"case 2 : $ num . = '3' ; break ;"}
{"text":"if number is 3 rd position in tree","code":"case 3 : $ num . = '5' ; break ;"}
{"text":"if number is 4 th position in tree","code":"case 0 : $ num . = '7' ; break ; } if ( $ number % 4 == 0 ) $ number -- ; $ number = ( int ) ( $ number \/ 4 ) ; } return strrev ( $ num ) ; }"}
{"text":"Driver code","code":"$ number = 21 ; print ( nthprimedigitsnumber ( 10 ) . \" STRNEWLINE \" ) ; print ( nthprimedigitsnumber ( $ number ) ) ;"}
{"text":"Function to count the pairs satisfying a ^ 3 + b ^ 3 = N","code":"< ? php function countPairs ( $ N ) { $ count = 0 ;"}
{"text":"Check for each number 1 to cbrt ( N )","code":"for ( $ i = 1 ; $ i <= ( int ) pow ( $ N , 1 \/ 3 ) ; $ i ++ ) {"}
{"text":"Store cube of a number","code":"$ cb = $ i * $ i * $ i ;"}
{"text":"Subtract the cube from given N","code":"$ diff = ( $ N - $ cb ) ;"}
{"text":"Check if the difference is also a perfect cube","code":"$ cbrtDiff = ( int ) pow ( $ diff , 1 \/ 3 ) ;"}
{"text":"If yes , then increment count","code":"if ( $ cbrtDiff * $ cbrtDiff * $ cbrtDiff == $ diff ) $ count ++ ; }"}
{"text":"Return count","code":"return $ count ; }"}
{"text":"Loop to Count no . of pairs satisfying a ^ 3 + b ^ 3 = i for N = 1 to 10","code":"for ( $ i = 1 ; $ i <= 10 ; $ i ++ ) echo \" For \u2581 n \u2581 = \u2581 \" , $ i , \" , \u2581 \" , countPairs ( $ i ) , \" \u2581 pair \u2581 exists STRNEWLINE \" ; ? >"}
{"text":"Prints all k such that arr [ i ] % k is same for all i","code":"< ? php function printEqualModNumbers ( $ arr , $ n ) {"}
{"text":"sort the numbers","code":"sort ( $ arr ) ;"}
{"text":"max difference will be the difference between first and last element of sorted array","code":"$ d = $ arr [ $ n - 1 ] - $ arr [ 0 ] ;"}
{"text":"Case when all the array elements are same","code":"if ( d == 0 ) { print ( \" Infinite \u2581 solution \" ) ; return ; }"}
{"text":"Find all divisors of d and store in a vector v [ ]","code":"$ v = array ( ) ; for ( $ i = 1 ; $ i * $ i <= $ d ; $ i ++ ) { if ( $ d % $ i == 0 ) { array_push ( $ v , $ i ) ; if ( $ i != $ d \/ $ i ) array_push ( $ v , $ d \/ $ i ) ; } }"}
{"text":"check for each v [ i ] if its modulus with each array element is same or not","code":"for ( $ i = 0 ; $ i < count ( $ v ) ; $ i ++ ) { $ temp = $ arr [ 0 ] % $ v [ $ i ] ;"}
{"text":"checking for each array element if its modulus with k is equal to k or not","code":"$ j = 1 ; for ( ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ j ] % $ v [ $ i ] != $ temp ) break ;"}
{"text":"if check is true print v [ i ]","code":"if ( $ j == $ n ) print ( $ v [ $ i ] . \" \u2581 \" ) ; } }"}
{"text":"Driver method","code":"$ arr = array ( 38 , 6 , 34 ) ; printEqualModNumbers ( $ arr , count ( $ arr ) ) ; ? >"}
{"text":"Returns the first digit of product of elements of arr [ ]","code":"< ? php function FirstDigit ( $ arr , $ n ) {"}
{"text":"stores the logarithm of product of elements of arr [ ]","code":"$ S = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ S = $ S + log10 ( $ arr [ $ i ] * 1.0 ) ;"}
{"text":"fractional ( s ) = s - floor ( s )","code":"$ fract_S = $ S - floor ( $ S ) ;"}
{"text":"ans = 10 ^ fract_s","code":"$ ans = pow ( 10 , $ fract_S ) ; return floor ( $ ans ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 8 , 3 , 7 ) ; $ n = sizeof ( $ arr ) ; echo FirstDigit ( $ arr , $ n ) ; ? >"}
{"text":"Return the number of digits that divides the number .","code":"< ? php function countDigit ( $ n ) { $ temp = $ n ; $ count = 0 ; while ( $ temp != 0 ) {"}
{"text":"Fetching each digit of the number","code":"$ d = $ temp % 10 ; $ temp \/= 10 ;"}
{"text":"Checking if digit is greater than 0 and can divides n .","code":"if ( $ d > 0 && $ n % $ d == 0 ) $ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ n = 1012 ; echo countDigit ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the value","code":"< ? php function makeOdd ( $ n ) {"}
{"text":"Return 1 if already odd","code":"if ( $ n % 2 != 0 ) return 1 ;"}
{"text":"Check how many times it is divided by 2","code":"$ resul = 1 ; while ( $ n % 2 == 0 ) { $ n \/= 2 ; $ resul *= 2 ; } return $ resul ; }"}
{"text":"Driver code","code":"$ n = 36 ; echo makeOdd ( $ n ) ; ? >"}
{"text":"Function to calculate the smallest multiple","code":"< ? php function closestMultiple ( $ n , $ x ) { if ( $ x > $ n ) return $ x ; $ n = $ n + $ x \/ 2 ; $ n = $ n - ( $ n % $ x ) ; return $ n ; }"}
{"text":"Driver Code","code":"$ n = 9 ; $ x = 4 ; echo closestMultiple ( $ n , $ x ) ; ? >"}
{"text":"An efficient solution to print perfect cubes between a and b","code":"< ? php function printCubes ( $ a , $ b ) {"}
{"text":"Find cube root of both a and b","code":"$ acrt = ( int ) pow ( $ a , 1 \/ 3 ) ; $ bcrt = ( int ) pow ( $ b , 1 \/ 3 ) ;"}
{"text":"Print cubes between acrt and bcrt","code":"for ( $ i = $ acrt ; $ i <= $ bcrt ; $ i ++ ) if ( $ i * $ i * $ i >= $ a && $ i * $ i * $ i <= $ b ) echo $ i * $ i * $ i , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ a = 24 ; $ b = 576 ; echo \" Perfect \u2581 cubes \u2581 in \u2581 given \u2581 range : STRNEWLINE \" , printCubes ( $ a , $ b ) ; ? >"}
{"text":"Counts the number of '2' digits in a single number","code":"< ? php function number0f2s ( $ n ) { $ count = 0 ; while ( $ n > 0 ) { if ( $ n % 10 == 2 ) $ count ++ ; $ n = $ n \/ 10 ; } return $ count ; }"}
{"text":"Counts the number of '2' digits between 0 and n","code":"function numberOf2sinRange ( $ n ) {"}
{"text":"Initialize result","code":"$ count = 0 ;"}
{"text":"Count 2 's in every number  from 2 to n","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ count += number0f2s ( $ i ) ; return $ count ; }"}
{"text":"Driver Code","code":"echo ( numberOf2sinRange ( 22 ) ) ; echo \" STRNEWLINE \" ; echo numberOf2sinRange ( 100 ) ; ? >"}
{"text":"Function to calculate minimum toggling required by using Dynamic programming","code":"< ? php function minToggle ( $ arr , $ n ) { $ zero [ 0 ] = 0 ; $ zero [ $ n + 1 ] = 0 ;"}
{"text":"Fill entries in zero [ ] such that zero [ i ] stores count of zeroes to the left of i ( exl","code":"for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) {"}
{"text":"If zero found update zero [ ] array","code":"if ( $ arr [ $ i - 1 ] == 0 ) $ zero [ $ i ] = $ zero [ $ i - 1 ] + 1 ; else $ zero [ $ i ] = $ zero [ $ i - 1 ] ; }"}
{"text":"Finding the minimum toggle required from every index ( 0 to n - 1 )","code":"$ ans = $ n ; for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) $ ans = min ( $ ans , $ i - $ zero [ $ i ] + $ zero [ $ n ] - $ zero [ $ i ] ) ; return $ ans ; }"}
{"text":"Driver Program","code":"$ arr = array ( 1 , 0 , 1 , 1 , 0 ) ; $ n = sizeof ( $ arr ) ; echo minToggle ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find that number divisible by 6 or not","code":"< ? php function check ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Return false if number is not divisible by 2.","code":"if ( ( $ str [ $ n - 1 ] - '0' ) % 2 != 0 ) return false ;"}
{"text":"Compute sum of digits","code":"$ digitSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ digitSum += ( $ str [ $ i ] - '0' ) ;"}
{"text":"Check if sum of digits is divisible by 3","code":"return ( $ digitSum % 3 == 0 ) ; }"}
{"text":"Driver code","code":"$ str = \"1332\" ; if ( check ( $ str ) ) echo \" Yes \" ; else echo \" \u2581 No \u2581 \" ; return 0 ; ? >"}
{"text":"PHP program to find number of ways to express a number as sum of n - th powers of numbers .","code":"< ? php $ res = 0 ; function checkRecursive ( $ num , $ x , $ k , $ n ) { global $ res ; if ( $ x == 0 ) $ res ++ ; $ r = ( int ) floor ( pow ( $ num , 1.0 \/ $ n ) ) ; for ( $ i = $ k + 1 ; $ i <= $ r ; $ i ++ ) { $ a = $ x - ( int ) pow ( $ i , $ n ) ; if ( $ a >= 0 ) checkRecursive ( $ num , $ x - ( int ) pow ( $ i , $ n ) , $ i , $ n ) ; } return $ res ; }"}
{"text":"Wrapper over checkRecursive ( )","code":"function check ( $ x , $ n ) { return checkRecursive ( $ x , $ x , 0 , $ n ) ; }"}
{"text":"Driver Code","code":"echo ( check ( 10 , 2 ) ) ; ? >"}
{"text":"Utility function to reverse the number n","code":"< ? php function reverseNum ( $ n ) { $ rem ; $ rev = 0 ; while ( $ n ) { $ rem = $ n % 10 ; $ rev = ( $ rev * 10 ) + $ rem ; $ n = ( int ) ( $ n \/ 10 ) ; } return $ rev ; }"}
{"text":"Boolean Function to check for palindromic number","code":"function isPalindrom ( $ num ) { return $ num == reverseNum ( $ num ) ; }"}
{"text":"Function for finding nth palindrome of k digits","code":"function nthPalindrome ( $ n , $ k ) {"}
{"text":"Get the smallest k digit number","code":"$ num = pow ( 10 , $ k - 1 ) ; while ( true ) {"}
{"text":"check the number is palindrom or not","code":"if ( isPalindrom ( $ num ) ) -- $ n ;"}
{"text":"if n 'th palindrome found  break the loop","code":"if ( ! $ n ) break ;"}
{"text":"Increment number for checking next palindrome","code":"++ $ num ; } return $ num ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ k = 5 ; echo $ n , \" th \u2581 palindrome \u2581 of \u2581 \" , $ k , \" \u2581 digit \u2581 = \u2581 \" , nthPalindrome ( $ n , $ k ) , \" STRNEWLINE \" ; $ n = 10 ; $ k = 6 ; echo $ n , \" th \u2581 palindrome \u2581 of \u2581 \" , $ k , \" \u2581 digit \u2581 = \u2581 \" , nthPalindrome ( $ n , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program of finding nth palindrome of k digit","code":"< ? php function nthPalindrome ( $ n , $ k ) {"}
{"text":"Determine the first half digits","code":"$ temp = ( $ k & 1 ) ? ( int ) ( $ k \/ 2 ) : ( int ) ( $ k \/ 2 - 1 ) ; $ palindrome = ( int ) pow ( 10 , $ temp ) ; $ palindrome += $ n - 1 ;"}
{"text":"Print the first half digits of palindrome","code":"print ( $ palindrome ) ;"}
{"text":"If k is odd , truncate the last digit","code":"if ( $ k & 1 ) $ palindrome = ( int ) ( $ palindrome \/ 10 ) ;"}
{"text":"print the last half digits of palindrome","code":"while ( $ palindrome > 0 ) { print ( $ palindrome % 10 ) ; $ palindrome = ( int ) ( $ palindrome \/ 10 ) ; } print ( \" STRNEWLINE \" ) ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ k = 5 ; print ( $ n . \" th \u2581 palindrome \u2581 of \u2581 $ k \u2581 digit \u2581 = \u2581 \" ) ; nthPalindrome ( $ n , $ k ) ; $ n = 10 ; $ k = 6 ; print ( $ n . \" th \u2581 palindrome \u2581 of \u2581 $ k \u2581 digit \u2581 = \u2581 \" ) ; nthPalindrome ( $ n , $ k ) ; ? >"}
{"text":"PHP approach of finding sum of GCD of all pairs","code":"< ? php $ MAX = 100001 ;"}
{"text":"phi [ i ] stores euler totient function for i result [ j ] stores result for value j","code":"$ phi = array_fill ( 0 , $ MAX , 0 ) ; $ result = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Precomputation of phi [ ] numbers . Refer link for details : https : goo . gl \/ LUqdtY","code":"function computeTotient ( ) { global $ MAX , $ phi ;"}
{"text":"Refer https : goo . gl \/ LUqdtY","code":"$ phi [ 1 ] = 1 ; for ( $ i = 2 ; $ i < $ MAX ; $ i ++ ) { if ( ! $ phi [ $ i ] ) { $ phi [ $ i ] = $ i - 1 ; for ( $ j = ( $ i << 1 ) ; $ j < $ MAX ; $ j += $ i ) { if ( ! $ phi [ $ j ] ) $ phi [ $ j ] = $ j ; $ phi [ $ j ] = ( $ phi [ $ j ] \/ $ i ) * ( $ i - 1 ) ; } } } }"}
{"text":"Precomputes result for all numbers till MAX","code":"function sumOfGcdPairs ( ) { global $ MAX , $ phi , $ result ;"}
{"text":"Precompute all phi value","code":"computeTotient ( ) ; for ( $ i = 1 ; $ i < $ MAX ; ++ $ i ) {"}
{"text":"Iterate throght all the divisors of i .","code":"for ( $ j = 2 ; $ i * $ j < $ MAX ; ++ $ j ) $ result [ $ i * $ j ] += $ i * $ phi [ $ j ] ; }"}
{"text":"Add summation of previous calculated sum","code":"for ( $ i = 2 ; $ i < $ MAX ; $ i ++ ) $ result [ $ i ] += $ result [ $ i - 1 ] ; }"}
{"text":"Function to calculate sum of all the GCD pairs","code":"sumOfGcdPairs ( ) ; $ N = 4 ; echo \" Summation \u2581 of \u2581 \" . $ N . \" \u2581 = \u2581 \" . $ result [ $ N ] . \" STRNEWLINE \" ; $ N = 12 ; echo \" Summation \u2581 of \u2581 \" . $ N . \" \u2581 = \u2581 \" . $ result [ $ N ] . \" STRNEWLINE \" ; $ N = 5000 ; echo \" Summation \u2581 of \u2581 \" . $ N . \" \u2581 = \u2581 \" . $ result [ $ N ] . \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find coordinate of the triangle given midpoint of each side","code":"< ? php $ N = 3 ;"}
{"text":"Return after solving the equations and finding the vertices coordinate .","code":"function solve ( $ v ) { $ res = array ( ) ;"}
{"text":"Finding sum of all three coordinate .","code":"$ all3 = $ v [ 0 ] + $ v [ 1 ] + $ v [ 2 ] ;"}
{"text":"Solving the equation .","code":"array_push ( $ res , $ all3 - $ v [ 1 ] * 2 ) ; array_push ( $ res , $ all3 - $ v [ 2 ] * 2 ) ; array_push ( $ res , $ all3 - $ v [ 0 ] * 2 ) ; return $ res ; }"}
{"text":"Finds vertices of a triangles from given middle vertices .","code":"function findVertex ( $ xmid , $ ymid ) {"}
{"text":"Find X coordinates of vertices .","code":"$ V1 = solve ( $ xmid ) ;"}
{"text":"Find Y coordinates of vertices .","code":"$ V2 = solve ( $ ymid ) ;"}
{"text":"Output the solution .","code":"for ( $ i = 0 ; $ i < 3 ; $ i ++ ) print ( $ V1 [ $ i ] . \" \u2581 \" . $ V2 [ $ i ] . \" STRNEWLINE \" ) ; }"}
{"text":"Driver code","code":"$ xmid = array ( 5 , 4 , 5 ) ; $ ymid = array ( 3 , 4 , 5 ) ; findVertex ( $ xmid , $ ymid ) ? >"}
{"text":"Return the n - th number in the sorted list of multiples of two numbers .","code":"< ? php function nthElement ( $ a , $ b , $ n ) { $ seq = array ( ) ;"}
{"text":"Generating first n multiple of a .","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) array_push ( $ seq , $ a * $ i ) ;"}
{"text":"Sorting the sequence .","code":"sort ( $ seq ) ;"}
{"text":"Generating and storing first n multiple of b and storing if not present in the sequence .","code":"for ( $ i = 1 , $ k = $ n ; $ i <= $ n && $ k > 0 ; $ i ++ ) {"}
{"text":"If not present in the sequence","code":"if ( array_search ( $ b * $ i , $ seq ) == 0 ) {"}
{"text":"Storing in the sequence .","code":"array_push ( $ seq , $ b * $ i ) ; sort ( $ seq ) ; $ k -- ; } } return $ seq [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ a = 3 ; $ b = 5 ; $ n = 5 ; echo nthElement ( $ a , $ b , $ n ) ; ? >"}
{"text":"Return the GCD of two numbers .","code":"< ? php function gcd ( $ a , $ b ) { return $ b ? gcd ( $ b , $ a % $ b ) : $ a ; }"}
{"text":"Return the count of pairs having GCD equal to g .","code":"function countGCD ( $ L , $ R , $ g ) {"}
{"text":"Setting the value of L , R .","code":"$ L = ( $ L + $ g - 1 ) \/ $ g ; $ R = $ R \/ $ g ;"}
{"text":"For each possible pair check if GCD is 1.","code":"$ ans = 0 ; for ( $ i = $ L ; $ i <= $ R ; $ i ++ ) for ( $ j = $ L ; $ j <= $ R ; $ j ++ ) if ( gcd ( $ i , $ j ) == 1 ) $ ans ++ ; return $ ans ; }"}
{"text":"Driver Code","code":"$ L = 1 ; $ R = 11 ; $ g = 5 ; echo countGCD ( $ L , $ R , $ g ) ; ? >"}
{"text":"Initialize values of last non - zero digit of numbers from 0 to 9","code":"< ? php $ dig = array ( 1 , 1 , 2 , 6 , 4 , 2 , 2 , 4 , 2 , 8 ) ; function lastNon0Digit ( $ n ) { global $ dig ; if ( $ n < 10 ) return $ dig [ $ n ] ;"}
{"text":"Check whether tens ( or second last ) digit is odd or even If n = 375 , So n \/ 10 = 37 and ( n \/ 10 ) % 10 = 7 Applying formula for even and odd cases .","code":"if ( ( ( $ n \/ 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( $ n \/ 5 ) * $ dig [ $ n % 10 ] ) % 10 ; else return ( 4 * lastNon0Digit ( $ n \/ 5 ) * $ dig [ $ n % 10 ] ) % 10 ; }"}
{"text":"Driver code","code":"$ n = 14 ; echo ( lastNon0Digit ( $ n ) ) ; ? >"}
{"text":"GCD function to compute the greatest divisor among a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( ( $ a % $ b ) == 0 ) return $ b ; return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Returns first number whose factorial divides x .","code":"function firstFactorialDivisibleNumber ( $ x ) {"}
{"text":"Result","code":"$ i = 1 ; $ new_x = $ x ; for ( $ i = 1 ; $ i < $ x ; $ i ++ ) {"}
{"text":"Remove common factors","code":"$ new_x \/= gcd ( $ i , $ new_x ) ;"}
{"text":"We found first i .","code":"if ( $ new_x == 1 ) break ; } return $ i ; }"}
{"text":"Driver code","code":"$ x = 16 ; echo ( firstFactorialDivisibleNumber ( $ x ) ) ; ? >"}
{"text":"Sieve of Eratosthenes","code":"< ? php function sieve ( & $ prime , $ n ) { for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) { if ( $ prime [ $ p ] == false ) for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = true ; } }"}
{"text":"Returns maximum occurring digits in primes from l to r .","code":"function maxDigitInPrimes ( $ L , $ R ) { $ prime = array_fill ( 0 , $ R + 1 , false ) ;"}
{"text":"Finding the prime number up to R .","code":"sieve ( $ prime , $ R ) ;"}
{"text":"Initialise frequency of all digit to 0.","code":"$ freq = array_fill ( 0 , 10 , 0 ) ;"}
{"text":"For all number between L to R , check if prime or not . If prime , incrementing the frequency of digits present in the prime number .","code":"for ( $ i = $ L ; $ i <= $ R ; $ i ++ ) { if ( ! $ prime [ $ i ] ) {"}
{"text":"$p = $i ; If i is prime","code":"while ( $ p ) { $ freq [ $ p % 10 ] ++ ; $ p = ( int ) ( $ p \/ 10 ) ; } } }"}
{"text":"Finding digit with highest frequency .","code":"$ max = $ freq [ 0 ] ; $ ans = 0 ; for ( $ j = 1 ; $ j < 10 ; $ j ++ ) { if ( $ max <= $ freq [ $ j ] ) { $ max = $ freq [ $ j ] ; $ ans = $ j ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ L = 1 ; $ R = 20 ; echo maxDigitInPrimes ( $ L , $ R ) ; ? >"}
{"text":"Function to calculate gcd of two numbers","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to calculate all common divisors of two given numbers a , b -- > input integer numbers","code":"function commDiv ( $ a , $ b ) {"}
{"text":"find gcd of a , b","code":"$ n = gcd ( $ a , $ b ) ;"}
{"text":"Count divisors of n .","code":"$ result = 0 ; for ( $ i = 1 ; $ i <= sqrt ( $ n ) ; $ i ++ ) {"}
{"text":"if ' i ' is factor of n","code":"if ( $ n % $ i == 0 ) {"}
{"text":"check if divisors are equal","code":"if ( $ n \/ $ i == $ i ) $ result += 1 ; else $ result += 2 ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ a = 12 ; $ b = 24 ; echo ( commDiv ( $ a , $ b ) ) ; ? >"}
{"text":"Function to calculate all possible spells of a number with repeated digits num -- > string which is favourite number","code":"< ? php function spellsCount ( $ num ) { $ n = strlen ( $ num ) ;"}
{"text":"final count of total possible spells","code":"$ result = 1 ;"}
{"text":"iterate through complete number","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"count contiguous frequency of particular digit num [ i ]","code":"$ count = 1 ; while ( $ i < $ n - 1 && $ num [ $ i + 1 ] == $ num [ $ i ] ) { $ count ++ ; $ i ++ ; }"}
{"text":"Compute 2 ^ ( count - 1 ) and multiply with result","code":"$ result = $ result * pow ( 2 , $ count - 1 ) ; } return $ result ; }"}
{"text":"Driver Code","code":"$ num = \"11112\" ; echo spellsCount ( $ num ) ; ? >"}
{"text":"Utility method to return sum of square of digit of n","code":"< ? php function numSquareSum ( $ n ) { $ squareSum = 0 ; while ( $ n ) { $ squareSum += ( $ n % 10 ) * ( $ n % 10 ) ; $ n \/= 10 ; } return $ squareSum ; }"}
{"text":"method return true if n is Happy number","code":"function isHappynumber ( $ n ) { $ slow ; $ fast ;"}
{"text":"initialize slow and fast by n","code":"$ slow = $ n ; $ fast = $ n ; do {"}
{"text":"move slow number by one iteration","code":"$ slow = numSquareSum ( $ slow ) ;"}
{"text":"move fast number by two iteration","code":"$ fast = numSquareSum ( numSquareSum ( $ fast ) ) ; } while ( $ slow != $ fast ) ;"}
{"text":"if both number meet at 1 , then return true","code":"return ( $ slow == 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 13 ; if ( isHappynumber ( $ n ) ) echo $ n , \" \u2581 is \u2581 a \u2581 Happy \u2581 number STRNEWLINE \" ; else echo n , \" \u2581 is \u2581 not \u2581 a \u2581 Happy \u2581 number STRNEWLINE \" ; ? >"}
{"text":"allPrimes [ ] stores all prime numbers less than or equal to n .","code":"< ? php $ allPrimes = array ( ) ;"}
{"text":"Fills above vector allPrimes [ ] for a given n","code":"function sieve ( $ n ) { global $ allPrimes ;"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is not a prime , else true .","code":"$ prime = array_fill ( 0 , $ n + 1 , true ) ;"}
{"text":"Loop to update prime [ ]","code":"for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Store primes in the vector allPrimes","code":"for ( $ p = 2 ; $ p <= $ n ; $ p ++ ) if ( $ prime [ $ p ] ) array_push ( $ allPrimes , $ p ) ; }"}
{"text":"Function to find all result of factorial number","code":"function factorialDivisors ( $ n ) { global $ allPrimes ;"}
{"text":"Initialize result","code":"$ result = 1 ;"}
{"text":"find exponents of all primes which divides n and less than n","code":"for ( $ i = 0 ; $ i < count ( $ allPrimes ) ; $ i ++ ) {"}
{"text":"Current divisor","code":"$ p = $ allPrimes [ $ i ] ;"}
{"text":"Find the highest power ( stored in exp ) of allPrimes [ i ] that divides n using Legendre 's formula.","code":"$ exp = 0 ; while ( $ p <= $ n ) { $ exp = $ exp + ( int ) ( $ n \/ $ p ) ; $ p = $ p * $ allPrimes [ $ i ] ; }"}
{"text":"Multiply exponents of all primes less than n","code":"$ result = $ result * ( $ exp + 1 ) ; }"}
{"text":"return total divisors","code":"return $ result ; }"}
{"text":"Driver Code","code":"echo factorialDivisors ( 6 ) ; ? >"}
{"text":"Returns n 'th Non- Fibonacci number","code":"< ? php function nonFibonacci ( $ n ) {"}
{"text":"curr is to keep track of current fibonacci number , prev is previous , prevPrev is previous of previous .","code":"$ prevPrev = 1 ; $ prev = 2 ; $ curr = 3 ;"}
{"text":"While count of non - fibonacci numbers doesn 't become  negative or zero","code":"while ( $ n > 0 ) {"}
{"text":"Simple Fibonacci number logic","code":"$ prevPrev = $ prev ; $ prev = $ curr ; $ curr = $ prevPrev + $ prev ;"}
{"text":"( curr - prev - 1 ) is count of non - Fibonacci numbers between curr and prev .","code":"$ n = $ n - ( $ curr - $ prev - 1 ) ; }"}
{"text":"n might be negative now . Make sure it becomes positive by removing last added gap .","code":"$ n = $ n + ( $ curr - $ prev - 1 ) ;"}
{"text":"Now add the positive n to previous Fibonacci number to find the n 'th non-fibonacci.","code":"return $ prev + $ n ; }"}
{"text":"Driver code","code":"echo nonFibonacci ( 5 ) ; ? >"}
{"text":"Function to implement Stein 's Algorithm","code":"< ? php function gcd ( $ a , $ b ) {"}
{"text":"GCD ( 0 , b ) == b ; GCD ( a , 0 ) == a , GCD ( 0 , 0 ) == 0","code":"if ( $ a == 0 ) return $ b ; if ( $ b == 0 ) return $ a ;"}
{"text":"Finding K , where K is the greatest power of 2 that divides both a and b .","code":"$ k ; for ( $ k = 0 ; ( ( $ a $ b ) & 1 ) == 0 ; ++ $ k ) { $ a >>= 1 ; $ b >>= 1 ; }"}
{"text":"Dividing a by 2 until a becomes odd","code":"while ( ( $ a & 1 ) == 0 ) $ a >>= 1 ;"}
{"text":"From here on , ' a ' is always odd .","code":"do {"}
{"text":"If b is even , remove all factor of 2 in b","code":"while ( ( $ b & 1 ) == 0 ) $ b >>= 1 ;"}
{"text":"Now a and b are both odd . Swap if necessary so a <= b , then set b = b - a ( which is even )","code":"if ( $ a > $ b ) swap ( $ a , $ b ) ; $ b = ( $ b - $ a ) ; } while ( $ b != 0 ) ;"}
{"text":"restore common factors of 2","code":"return $ a << $ k ; }"}
{"text":"Driver code","code":"$ a = 34 ; $ b = 17 ; echo \" Gcd \u2581 of \u2581 given \u2581 numbers \u2581 is \u2581 \" . gcd ( $ a , $ b ) ; ? >"}
{"text":"n -- > value of input out -- > output array index -- > index of next digit to be filled in output array evenSum , oddSum -- > sum of even and odd digits so far","code":"< ? php function findNDigitNumsUtil ( $ n , $ out , $ index , $ evenSum , $ oddSum ) {"}
{"text":"Base case","code":"if ( $ index > $ n ) return ;"}
{"text":"If number becomes n - digit","code":"if ( $ index == $ n ) {"}
{"text":"if absolute difference between sum of even and odd digits is 1 , print the number","code":"if ( abs ( $ evenSum - $ oddSum ) == 1 ) { echo implode ( \" \" , $ out ) . \" \" } return ; }"}
{"text":"If current index is odd , then add it to odd sum and recurse","code":"if ( $ index & 1 ) { for ( $ i = 0 ; $ i <= 9 ; $ i ++ ) { $ out [ $ index ] = $ i + '0' ; findNDigitNumsUtil ( $ n , $ out , $ index + 1 , $ evenSum , $ oddSum + $ i ) ; } }"}
{"text":"else else add to even sum and recurse","code":"{ for ( $ i = 0 ; $ i <= 9 ; $ i ++ ) { $ out [ $ index ] = $ i + '0' ; findNDigitNumsUtil ( $ n , $ out , $ index + 1 , $ evenSum + $ i , $ oddSum ) ; } } }"}
{"text":"This is mainly a wrapper over findNDigitNumsUtil . It explicitly handles leading digit and calls findNDigitNumsUtil ( ) for remaining indexes .","code":"function findNDigitNums ( $ n ) {"}
{"text":"output array to store n - digit numbers","code":"$ out = array_fill ( 0 , $ n + 1 , \" \" ) ;"}
{"text":"Initialize number index considered so far","code":"$ index = 0 ;"}
{"text":"Initialize even and odd sums","code":"$ evenSum = 0 ; $ oddSum = 0 ;"}
{"text":"Explicitly handle first digit and call recursive function findNDigitNumsUtil for remaining indexes . Note that the first digit is considered to be present in even position .","code":"for ( $ i = 1 ; $ i <= 9 ; $ i ++ ) { $ out [ $ index ] = $ i + '0' ; findNDigitNumsUtil ( $ n , $ out , $ index + 1 , $ evenSum + $ i , $ oddSum ) ; } }"}
{"text":"Driver program","code":"$ n = 3 ; findNDigitNums ( $ n ) ; ? >"}
{"text":"strings at index 0 is not used , it is to make array indexing simple","code":"< ? php $ one = array ( \" \" , \" one \u2581 \" , \" two \u2581 \" , \" three \u2581 \" , \" four \u2581 \" , \" five \u2581 \" , \" six \u2581 \" , \" seven \u2581 \" , \" eight \u2581 \" , \" nine \u2581 \" , \" ten \u2581 \" , \" eleven \u2581 \" , \" twelve \u2581 \" , \" thirteen \u2581 \" , \" fourteen \u2581 \" , \" fifteen \u2581 \" , \" sixteen \u2581 \" , \" seventeen \u2581 \" , \" eighteen \u2581 \" , \" nineteen \u2581 \" ) ;"}
{"text":"strings at index 0 and 1 are not used , they is to make array indexing simple","code":"$ ten = array ( \" \" , \" \" , \" twenty \u2581 \" , \" thirty \u2581 \" , \" forty \u2581 \" , \" fifty \u2581 \" , \" sixty \u2581 \" , \" seventy \u2581 \" , \" eighty \u2581 \" , \" ninety \u2581 \" ) ;"}
{"text":"n is 1 - or 2 - digit number","code":"function numToWords ( $ n , $ s ) { global $ one , $ ten ; $ str = \" \" ;"}
{"text":"if n is more than 19 , divide it","code":"if ( $ n > 19 ) { $ str . = $ ten [ ( int ) ( $ n \/ 10 ) ] ; $ str . = $ one [ $ n % 10 ] ; } else $ str . = $ one [ $ n ] ;"}
{"text":"if n is non - zero","code":"if ( $ n != 0 ) $ str . = $ s ; return $ str ; }"}
{"text":"Function to print a given number in words","code":"function convertToWords ( $ n ) {"}
{"text":"stores word representation of given number n","code":"$ out = \" \" ;"}
{"text":"handles digits at ten millions and hundred millions places ( if any )","code":"$ out . = numToWords ( ( int ) ( $ n \/ 10000000 ) , \" crore \u2581 \" ) ;"}
{"text":"handles digits at hundred thousands and one millions places ( if any )","code":"$ out . = numToWords ( ( ( int ) ( $ n \/ 100000 ) % 100 ) , \" lakh \u2581 \" ) ;"}
{"text":"handles digits at thousands and tens thousands places ( if any )","code":"$ out . = numToWords ( ( ( int ) ( $ n \/ 1000 ) % 100 ) , \" thousand \u2581 \" ) ;"}
{"text":"handles digit at hundreds places ( if any )","code":"$ out . = numToWords ( ( ( int ) ( $ n \/ 100 ) % 10 ) , \" hundred \u2581 \" ) ; if ( $ n > 100 && $ n % 100 ) $ out . = \" and \u2581 \" ;"}
{"text":"handles digits at ones and tens places ( if any )","code":"$ out . = numToWords ( ( $ n % 100 ) , \" \" ) ; return $ out ; }"}
{"text":"long handles upto 9 digit no change to unsigned long long int to handle more digit number","code":"$ n = 438237764 ;"}
{"text":"convert given number in words","code":"echo convertToWords ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"utility function to find the GCD of two numbers","code":"< ? php function gcd ( $ a , $ b ) { return ( $ a % $ b == 0 ) ? abs ( $ b ) : gcd ( $ b , $ a % $ b ) ; }"}
{"text":"This function checks if integral solutions are possible","code":"function isPossible ( $ a , $ b , $ c ) { return ( $ c % gcd ( $ a , $ b ) == 0 ) ; }"}
{"text":"First example","code":"$ a = 3 ; $ b = 6 ; $ c = 9 ; if ( isPossible ( $ a , $ b , $ c ) == true ) echo \" Possible STRNEWLINE \" ; else echo \" Not \u2581 Possible STRNEWLINE \" ;"}
{"text":"Second example","code":"$ a = 3 ; $ b = 6 ; $ c = 8 ; if ( isPossible ( $ a , $ b , $ c ) == true ) echo \" Possible STRNEWLINE \" ; else echo \" Not \u2581 Possible STRNEWLINE \" ;"}
{"text":"Third example","code":"$ a = 2 ; $ b = 5 ; $ c = 1 ; if ( isPossible ( $ a , $ b , $ c ) == true ) echo \" Possible STRNEWLINE \" ; else echo \" Not \u2581 Possible STRNEWLINE \" ; ? >"}
{"text":"Optimized function to print Farey sequence of order n","code":"< ? php function farey ( $ n ) {"}
{"text":"We know first two terms are 0 \/ 1 and 1 \/ n","code":"$ x1 = 0 ; $ y1 = 1 ; $ x2 = 1 ; $ y2 = $ n ; echo $ x1 , \" \/ \" , $ y1 , \" \u2581 \" , $ x2 , \" \/ \" , $ y2 , \" \u2581 \" ;"}
{"text":"For next terms to be evaluated","code":"$ x ; $ y = 0 ; while ( $ y != 1.0 ) {"}
{"text":"Using recurrence relation to find the next term","code":"$ x = floor ( ( $ y1 + $ n ) \/ $ y2 ) * $ x2 - $ x1 ; $ y = floor ( ( $ y1 + $ n ) \/ $ y2 ) * $ y2 - $ y1 ;"}
{"text":"Print next term","code":"echo $ x , \" \/ \" , $ y , \" \u2581 \" ;"}
{"text":"Update x1 , y1 , x2 and y2 for next iteration","code":"$ x1 = $ x2 ; $ x2 = $ x ; $ y1 = $ y2 ; $ y2 = $ y ; } }"}
{"text":"Driver Code","code":"$ n = 7 ; echo \" Farey \u2581 Sequence \u2581 of \u2581 order \u2581 \" , $ n , \" \u2581 is STRNEWLINE \" ; farey ( $ n ) ; ? >"}
{"text":"To find GCD using Eculcid 's algorithm","code":"< ? php function gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return ( gcd ( $ b , $ a % $ b ) ) ; }"}
{"text":"Prints smallest values of x and y that satisfy \" ax \u2581 - \u2581 by \u2581 = \u2581 0\"","code":"function findSmallest ( $ a , $ b ) {"}
{"text":"Find LCM","code":"$ lcm = ( $ a * $ b ) \/ gcd ( $ a , $ b ) ; echo \" x \u2581 = \u2581 \" , $ lcm \/ $ a , \" y = \" }"}
{"text":"Driver Code","code":"$ a = 25 ; $ b = 35 ; findSmallest ( $ a , $ b ) ; ? >"}
{"text":"Utility function to do modular exponentiation . It returns ( x ^ y ) % p","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"$res = 1 ; Initialize result $x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Function to find modular inverse of a under modulo p using Fermat 's method. Assumption: p is prime","code":"function modInverse ( $ a , $ p ) { return power ( $ a , $ p - 2 , $ p ) ; }"}
{"text":"Returns n ! % p using Wilson 's Theorem","code":"function modFact ( $ n , $ p ) {"}
{"text":"n ! % p is 0 if n >= p","code":"if ( $ p <= $ n ) return 0 ;"}
{"text":"Initialize result as ( p - 1 ) ! which is - 1 or ( p - 1 )","code":"$ res = ( $ p - 1 ) ;"}
{"text":"Multiply modulo inverse of all numbers from ( n + 1 ) to p","code":"for ( $ i = $ n + 1 ; $ i < $ p ; $ i ++ ) $ res = ( $ res * modInverse ( $ i , $ p ) ) % $ p ; return $ res ; }"}
{"text":"Driver Code","code":"$ n = 25 ; $ p = 29 ; echo modFact ( $ n , $ p ) ; ? >"}
{"text":"Returns count of ways","code":"< ? php function countWays ( $ n ) {"}
{"text":"Initialize result","code":"$ counter = 0 ;"}
{"text":"Generate all possible quadruplet and increment counter when sum of a quadruplet is equal to n","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i ; $ j < $ n ; $ j ++ ) for ( $ k = $ j ; $ k < $ n ; $ k ++ ) for ( $ l = $ k ; $ l < $ n ; $ l ++ ) if ( $ i + $ j + $ k + $ l == $ n ) $ counter ++ ; return $ counter ; }"}
{"text":"Driver Code","code":"$ n = 8 ; echo countWays ( $ n ) ; ? >"}
{"text":"Returns value of \" arr [ 0 ] \u2581 & \u2581 arr [ 1 ] \u2581 + \u2581 arr [ 0 ] \u2581 & \u2581 arr [ 2 ] \u2581 + \u2581 . . . \u2581 arr [ i ] \u2581 & \u2581 arr [ j ] \u2581 + \u2581 . . . . . \u2581 arr [ n - 2 ] \u2581 & \u2581 arr [ n - 1 ] \"","code":"< ? php function pairAndSum ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ ans = 0 ;"}
{"text":"Consider all pairs ( arr [ i ] , arr [ j ) such that i < j","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) $ ans += $ arr [ $ i ] & $ arr [ $ j ] ; return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 10 , 15 ) ; $ n = sizeof ( $ arr ) ; echo pairAndSum ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Returns value of \" arr [ 0 ] \u2581 & \u2581 arr [ 1 ] \u2581 + \u2581 arr [ 0 ] \u2581 & \u2581 arr [ 2 ] \u2581 + \u2581 . . . \u2581 arr [ i ] \u2581 & \u2581 arr [ j ] \u2581 + \u2581 . . . . . \u2581 arr [ n - 2 ] \u2581 & \u2581 arr [ n - 1 ] \"","code":"< ? php function pairAndSum ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ ans = 0 ;"}
{"text":"Traverse over all bits","code":"for ( $ i = 0 ; $ i < 32 ; $ i ++ ) {"}
{"text":"Count number of elements with i 'th bit set  Initialize the count","code":"$ k = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( ( $ arr [ $ j ] & ( 1 << $ i ) ) ) $ k ++ ;"}
{"text":"There are k set bits , means k ( k - 1 ) \/ 2 pairs . Every pair adds 2 ^ i to the answer . Therefore , we add \"2 ^ i \u2581 * \u2581 [ k * ( k - 1 ) \/ 2 ] \" to the answer .","code":"$ ans += ( 1 << $ i ) * ( $ k * ( $ k - 1 ) \/ 2 ) ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 10 , 15 ) ; $ n = sizeof ( $ arr ) ; echo pairAndSum ( $ arr , $ n ) ; ? >"}
{"text":"A school method based PHP program to check if a number is prime","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner case","code":"if ( $ n <= 1 ) return false ;"}
{"text":"Check from 2 to n - 1","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) if ( $ n % $ i == 0 ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ tet = isPrime ( 11 ) ? \" \u2581 true STRNEWLINE \" : \" \u2581 false STRNEWLINE \" ; echo $ tet ; $ tet = isPrime ( 15 ) ? \" \u2581 true STRNEWLINE \" : \" \u2581 false STRNEWLINE \" ; echo $ tet ; ? >"}
{"text":"Computes and prints totient of all numbers smaller than or equal to n .","code":"< ? php function computeTotient ( $ n ) {"}
{"text":"Create and initialize an array to store phi or totient values","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ )"}
{"text":"indicates not evaluated yet and initializes for product formula .","code":"$ phi [ $ i ] = $ i ;"}
{"text":"Compute other Phi values","code":"for ( $ p = 2 ; $ p <= $ n ; $ p ++ ) {"}
{"text":"If phi [ p ] is not computed already , then number p is prime","code":"if ( $ phi [ $ p ] == $ p ) {"}
{"text":"Phi of a prime number p is always equal to p - 1.","code":"$ phi [ $ p ] = $ p - 1 ;"}
{"text":"Update phi values of all multiples of p","code":"for ( $ i = 2 * $ p ; $ i <= $ n ; $ i += $ p ) {"}
{"text":"Add contribution of p to its multiple i by multiplying with ( 1 - 1 \/ $p )","code":"$ phi [ $ i ] = ( $ phi [ $ i ] \/ $ p ) * ( $ p - 1 ) ; } } }"}
{"text":"Print precomputed phi values","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) echo \" Totient \u2581 of \u2581 \" , $ i , \" \u2581 is \u2581 \" , $ phi [ $ i ] , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ n = 12 ; computeTotient ( $ n ) ; ? >"}
{"text":"Returns sum between two kth smallest elements of the array","code":"< ? php function sumBetweenTwoKth ( $ arr , $ n , $ k1 , $ k2 ) {"}
{"text":"Sort the given array","code":"sort ( $ arr ) ;"}
{"text":"Below code is equivalent to","code":"$ result = 0 ; for ( $ i = $ k1 ; $ i < $ k2 - 1 ; $ i ++ ) $ result += $ arr [ $ i ] ; return $ result ; }"}
{"text":"Driver program","code":"$ arr = array ( 20 , 8 , 22 , 4 , 12 , 10 , 14 ) ; $ k1 = 3 ; $ k2 = 6 ; $ n = count ( $ arr ) ; ; echo sumBetweenTwoKth ( $ arr , $ n , $ k1 , $ k2 ) ; ? >"}
{"text":"Function to return count of squares ;","code":"< ? php function countSquares ( $ n ) {"}
{"text":"A better way to write n * ( n + 1 ) * ( 2 n + 1 ) \/ 6","code":"return ( $ n * ( $ n + 1 ) \/ 2 ) * ( 2 * $ n + 1 ) \/ 3 ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo \" Count \u2581 of \u2581 squares \u2581 is \u2581 \" , countSquares ( $ n ) ; ? >"}
{"text":"Function to find nth magic number","code":"< ? php function nthMagicNo ( $ n ) { $ pow = 1 ; $ answer = 0 ;"}
{"text":"Go through every bit of n","code":"while ( $ n ) { $ pow = $ pow * 5 ;"}
{"text":"If last bit of n is set","code":"if ( $ n & 1 ) $ answer += $ pow ;"}
{"text":"proceed to next bit $n >>= 1 ; or $n = $n \/ 2","code":"} return $ answer ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo \" nth \u2581 magic \u2581 number \u2581 is \u2581 \" , nthMagicNo ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find count of multiples of 3 and 5 in { 1 , 2 , 3 , . . n }","code":"< ? php function countOfMultiples ( $ n ) {"}
{"text":"Add multiples of 3 and 5. Since common multiples are counted twice in n \/ 3 + n \/ 15 , subtract common multiples","code":"return floor ( floor ( $ n \/ 3 ) + floor ( $ n \/ 5 ) - floor ( $ n \/ 15 ) ) ; }"}
{"text":"Driver Code","code":"echo countOfMultiples ( 6 ) , \" STRNEWLINE \" ; echo countOfMultiples ( 16 ) ; ? >"}
{"text":"Recursive function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) {"}
{"text":"Everything divides 0","code":"if ( $ a == 0 ) return $ b ; if ( $ b == 0 ) return $ a ;"}
{"text":"base case","code":"if ( $ a == $ b ) return $ a ;"}
{"text":"a is greater","code":"if ( $ a > $ b ) return gcd ( $ a - $ b , $ b ) ; return gcd ( $ a , $ b - $ a ) ; }"}
{"text":"Driver code","code":"$ a = 98 ; $ b = 56 ; echo \" GCD \u2581 of \u2581 $ a \u2581 and \u2581 $ b \u2581 is \u2581 \" , gcd ( $ a , $ b ) ; ? >"}
{"text":"Function that returns true if the game cannot be won","code":"< ? php function isDefeat ( $ s1 , $ s2 , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( ( $ s1 [ $ i ] == '0' && $ s2 [ $ i ] == '1' ) || ( $ s1 [ $ i ] == '1' && $ s2 [ $ i ] == '0' ) ) continue ; else if ( ( $ s1 [ $ i ] == '0' && $ s2 [ $ i ] == ' Z ' ) || ( $ s1 [ $ i ] == ' Z ' && $ s2 [ $ i ] == '0' ) ) continue ; else { return true ; } } return false ; }"}
{"text":"Driver code","code":"$ s1 = ( \"01001101ZZ \" ) ; $ s2 = ( \"10Z1001000\" ) ;"}
{"text":"Common length","code":"$ n = 10 ; if ( isDefeat ( $ s1 , $ s2 , $ n ) ) echo ( \" Defeat \" ) ; else echo ( \" Victory \" ) ;"}
{"text":"PHP implementation of the above approach","code":"< ? php $ N = 3 ; $ M = 3 ;"}
{"text":"Boolean function that returns true or false","code":"function check ( $ a , $ b ) {"}
{"text":"Traverse for all elements","code":"for ( $ i = 1 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) { for ( $ j = 1 ; $ j < $ GLOBALS [ ' M ' ] ; $ j ++ ) {"}
{"text":"If both are not equal","code":"if ( $ a [ $ i ] [ $ j ] != $ b [ $ i ] [ $ j ] ) {"}
{"text":"Change the parity of all corner elements","code":"$ a [ $ i ] [ $ j ] ^= 1 ; $ a [ 0 ] [ 0 ] ^= 1 ; $ a [ 0 ] [ $ j ] ^= 1 ; $ a [ $ i ] [ 0 ] ^= 1 ; } } }"}
{"text":"Check if A is equal to B","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) { for ( $ j = 0 ; $ j < $ GLOBALS [ ' M ' ] ; $ j ++ ) {"}
{"text":"Not equal","code":"if ( $ a [ $ i ] [ $ j ] != $ b [ $ i ] [ $ j ] ) return false ; } } return true ; }"}
{"text":"First binary matrix","code":"$ a = array ( array ( 0 , 1 , 0 ) , array ( 0 , 1 , 0 ) , array ( 1 , 0 , 0 ) ) ;"}
{"text":"Second binary matrix","code":"$ b = array ( array ( 1 , 0 , 0 ) , array ( 1 , 0 , 0 ) , array ( 1 , 0 , 0 ) ) ; if ( check ( $ a , $ b ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function that returns the Kth set bit","code":"< ? php function FindIndexKthBit ( $ n , $ k ) { $ cnt = 0 ; $ ind = 0 ;"}
{"text":"Traverse in the binary","code":"while ( $ n ) {"}
{"text":"Check if the last bit is set or not","code":"if ( $ n & 1 ) $ cnt ++ ;"}
{"text":"Check if count is equal to k then return the index","code":"if ( $ cnt == $ k ) return $ ind ;"}
{"text":"Increase the index as we move right","code":"$ ind ++ ;"}
{"text":"Right shift the number by 1","code":"$ n = $ n >> 1 ; } return -1 ; }"}
{"text":"Driver Code","code":"$ n = 15 ; $ k = 3 ; $ ans = FindIndexKthBit ( $ n , $ k ) ; if ( $ ans != -1 ) echo $ ans ; else echo \" No \u2581 k - th \u2581 set \u2581 bit \" ; ? >"}
{"text":"Function to get minimum path distance","code":"< ? php function minDistance ( $ n1 , $ n2 ) {"}
{"text":"count bit length of n1 and n2","code":"$ bitCount1 = floor ( log ( $ n1 , 2 ) ) + 1 ; $ bitCount2 = floor ( log ( $ n2 , 2 ) ) + 1 ;"}
{"text":"find bit difference and maxBit","code":"$ bitDiff = abs ( $ bitCount1 - $ bitCount2 ) ; $ maxBitCount = max ( $ bitCount1 , $ bitCount2 ) ; if ( $ bitCount1 > $ bitCount2 ) { $ n2 = $ n2 * pow ( 2 , $ bitDiff ) ; } else { $ n1 = $ n1 * pow ( 2 , $ bitDiff ) ; } $ xorValue = $ n1 ^ $ n2 ; $ bitCountXorValue = floor ( log ( $ xorValue , 2 ) ) + 1 ; $ disSimilarBitPosition = $ maxBitCount - $ bitCountXorValue ;"}
{"text":"calculate result by formula","code":"$ result = $ bitCount1 + $ bitCount2 - 2 * $ disSimilarBitPosition ; return $ result ; }"}
{"text":"Driver Code","code":"$ n1 = 12 ; $ n2 = 5 ; echo minDistance ( $ n1 , $ n2 ) ; ? >"}
{"text":"Function to find the maximum binary number","code":"< ? php function printMaxAfterRemoval ( $ s ) { $ flag = false ; $ n = strlen ( $ s ) ;"}
{"text":"Traverse the binary number","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Try finding a 0 and skip it","code":"if ( $ s [ $ i ] == '0' && $ flag == false ) { $ flag = true ; continue ; } else echo $ s [ $ i ] ; } }"}
{"text":"Get the binary number","code":"$ s = \"1001\" ;"}
{"text":"Find the maximum binary number","code":"printMaxAfterRemoval ( $ s ) ; ? >"}
{"text":"Function to find first dis - similar bit","code":"< ? php function bitPos ( $ n1 , $ n2 ) {"}
{"text":"return zero for equal number","code":"if ( $ n1 == $ n2 ) return 0 ;"}
{"text":"count bit length of n1 and n2","code":"$ bitCount1 = floor ( log ( $ n1 , 2 ) ) + 1 ; $ bitCount2 = floor ( log ( $ n2 , 2 ) ) + 1 ;"}
{"text":"find bit difference and maxBit","code":"$ bitDiff = abs ( $ bitCount1 - $ bitCount2 ) ; $ maxBitCount = max ( $ bitCount1 , $ bitCount2 ) ; if ( $ bitCount1 > $ bitCount2 ) { $ n2 = $ n2 * pow ( 2 , $ bitDiff ) ; } else { $ n1 = $ n1 * pow ( 2 , $ bitDiff ) ; } $ xorValue = $ n1 ^ $ n2 ; $ bitCountXorValue = floor ( log ( $ xorValue , 2 ) ) + 1 ; $ disSimilarBitPosition = $ maxBitCount - $ bitCountXorValue + 1 ; return $ disSimilarBitPosition ; }"}
{"text":"Driver Code","code":"$ n1 = 53 ; $ n2 = 55 ; echo bitPos ( $ n1 , $ n2 ) ; ? >"}
{"text":"Function to count pairs with odd OR","code":"< ? php function countOddPair ( $ A , $ N ) {"}
{"text":"Count total even numbers in array","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( ! ( $ A [ $ i ] & 1 ) ) $ count ++ ;"}
{"text":"Even pair count","code":"$ evenPairCount = $ count * ( $ count - 1 ) \/ 2 ;"}
{"text":"Total pairs","code":"$ totPairs = $ N * ( $ N - 1 ) \/ 2 ;"}
{"text":"Return Odd pair count","code":"return ( $ totPairs - $ evenPairCount ) ; }"}
{"text":"Driver main","code":"$ A = array ( 5 , 6 , 2 , 8 ) ; $ N = sizeof ( $ A ) ; echo countOddPair ( $ A , $ N ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to update every array element with sum of previous and next numbers in array","code":"< ? php function ReplaceElements ( & $ arr , $ n ) {"}
{"text":"Nothing to do when array size is 1","code":"if ( $ n <= 1 ) return ;"}
{"text":"store current value of arr [ 0 ] and update it","code":"$ prev = $ arr [ 0 ] ; $ arr [ 0 ] = $ arr [ 0 ] ^ $ arr [ 1 ] ;"}
{"text":"Update rest of the array elements","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Store current value of next interaction","code":"$ curr = $ arr [ $ i ] ;"}
{"text":"Update current value using previous value","code":"$ arr [ $ i ] = $ prev ^ $ arr [ $ i + 1 ] ;"}
{"text":"Update previous value","code":"$ prev = $ curr ; }"}
{"text":"Update last array element separately","code":"$ arr [ $ n - 1 ] = $ prev ^ $ arr [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 4 , 5 , 6 ) ; $ n = sizeof ( $ arr ) ; ReplaceElements ( $ arr , $ n ) ;"}
{"text":"Print the modified array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"function to return OR of sub - arrays","code":"< ? php function O_R ( $ a , $ n ) { $ ans = $ a [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; ++ $ i ) $ ans |= $ a [ $ i ] ; return $ ans ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 4 , 6 ) ; $ n = count ( $ a ) ;"}
{"text":"print OR of all subarrays","code":"echo O_R ( $ a , $ n ) ; ? >"}
{"text":"Function to count total number of set bits in an integer","code":"< ? php function bit ( $ n ) { $ count = 0 ; while ( $ n ) { $ count ++ ; $ n = $ n & ( $ n - 1 ) ; } return $ count ; }"}
{"text":"Maximum sum of set bits","code":"function maxSumOfBits ( $ arr , $ n ) {"}
{"text":"Calculate total number of set bits for every element of the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"find total set bits for each number and store back into the array","code":"$ arr [ $ i ] = bit ( $ arr [ $ i ] ) ; } $ incl = $ arr [ 0 ] ; $ excl = 0 ; $ excl_new ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"current max excluding i","code":"$ excl_new = ( $ incl > $ excl ) ? $ incl : $ excl ;"}
{"text":"current max including i","code":"$ incl = $ excl + $ arr [ $ i ] ; $ excl = $ excl_new ; }"}
{"text":"return max of incl and excl","code":"return ( ( $ incl > $ excl ) ? $ incl : $ excl ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 4 , 5 , 6 , 7 , 20 , 25 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo maxSumOfBits ( $ arr , $ n ) ; #This  Code is Contributed by ajit  NEW_LINE ? >"}
{"text":"function that increment the value .","code":"< ? php function increment ( $ i ) {"}
{"text":"Invert bits and apply negative sign","code":"$ i = - ( ~ ord ( $ i ) ) ; return chr ( $ i ) ; }"}
{"text":"Driver code","code":"$ n = ' a ' ; echo increment ( $ n ) ; ? >"}
{"text":"Function to count number of odd pairs","code":"< ? php function findOddPair ( $ A , $ N ) { $ count = 0 ;"}
{"text":"find all pairs","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ A [ $ i ] % 2 == 0 ) $ count ++ ; }"}
{"text":"return number of odd pair","code":"return $ count * ( $ N - $ count ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 5 , 4 , 7 , 2 , 1 ) ; $ n = count ( $ a ) ;"}
{"text":"calling function findOddPair and print number of odd pair","code":"echo ( findOddPair ( $ a , $ n ) ) ; ? >"}
{"text":"Returns the Most Significant Bit Position ( MSB )","code":"< ? php function MSBPosition ( $ N ) { $ msb_p = -1 ; while ( $ N ) { $ N = $ N >> 1 ; $ msb_p ++ ; } return $ msb_p ; }"}
{"text":"Returns the Bitwise OR of all integers between L and R","code":"function findBitwiseOR ( $ L , $ R ) { $ res = 0 ;"}
{"text":"Find the MSB position in L","code":"$ msb_p1 = MSBPosition ( $ L ) ;"}
{"text":"Find the MSB position in R","code":"$ msb_p2 = MSBPosition ( $ R ) ; while ( $ msb_p1 == $ msb_p2 ) { $ res_val = ( 1 << $ msb_p1 ) ;"}
{"text":"Add this value until msb_p1 and msb_p2 are same ;","code":"$ res += $ res_val ; $ L -= $ res_val ; $ R -= $ res_val ;"}
{"text":"Calculate msb_p1 and msb_p2","code":"$ msb_p1 = MSBPosition ( $ L ) ; $ msb_p2 = MSBPosition ( $ R ) ; }"}
{"text":"Find the max of msb_p1 and msb_p2","code":"$ msb_p1 = max ( $ msb_p1 , $ msb_p2 ) ;"}
{"text":"Set all the bits from msb_p1 upto 0 th bit in the result","code":"for ( $ i = $ msb_p1 ; $ i >= 0 ; $ i -- ) { $ res_val = ( 1 << $ i ) ; $ res += $ res_val ; } return $ res ; }"}
{"text":"Driver Code","code":"$ L = 12 ; $ R = 18 ; echo findBitwiseOR ( $ L , $ R ) ; ? >"}
{"text":"Function to maximize the bitwise OR sum","code":"< ? php function maxOR ( $ arr , $ n , $ k , $ x ) { $ res ; $ pow = 1 ;"}
{"text":"Compute x ^ k","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ pow *= $ x ;"}
{"text":"Find prefix bitwise OR","code":"$ preSum [ 0 ] = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ preSum [ $ i + 1 ] = $ preSum [ $ i ] | $ arr [ $ i ] ;"}
{"text":"Find suffix bitwise OR","code":"$ suffSum [ $ n ] = 0 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) $ suffSum [ $ i ] = $ suffSum [ $ i + 1 ] | $ arr [ $ i ] ;"}
{"text":"Find maximum OR value","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ res = max ( $ res , $ preSum [ $ i ] | ( $ arr [ $ i ] * $ pow ) $ suffSum [ $ i + 1 ] ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 4 , 8 ) ; $ n = sizeof ( $ arr ) ; $ k = 2 ; $ x = 3 ; echo maxOR ( $ arr , $ n , $ k , $ x ) , \" STRNEWLINE \" ; ? >"}
{"text":"Returns a number that has all bits same as n except the k 'th bit which is made 1","code":"< ? php function turnOnK ( $ n , $ k ) {"}
{"text":"k must be greater than 0","code":"if ( $ k <= 0 ) return $ n ;"}
{"text":"Do | of n with a number with all unset bits except the k 'th bit","code":"return ( $ n | ( 1 << ( $ k - 1 ) ) ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ k = 2 ; echo turnOnK ( $ n , $ k ) ; ? >"}
{"text":"Returns sum of two numbers formed from all digits in a [ ]","code":"< ? php function minSum ( $ a , $ n ) {"}
{"text":"sort the elements","code":"sort ( $ a ) ; $ num1 = 0 ; $ num2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ i % 2 == 0 ) $ num1 = $ num1 * 10 + $ a [ $ i ] ; else $ num2 = $ num2 * 10 + $ a [ $ i ] ; } return ( $ num2 + $ num1 ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 3 , 0 , 7 , 4 ) ; $ n = sizeof ( $ arr ) ; echo \" The \u2581 required \u2581 sum \u2581 is \u2581 \" , minSum ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find k - th bit from right","code":"< ? php function printKthBit ( $ n , $ k ) { echo ( $ n & ( 1 << ( $ k - 1 ) ) ) ; }"}
{"text":"Driver Code","code":"$ n = 13 ; $ k = 2 ;"}
{"text":"Function Call","code":"printKthBit ( $ n , $ k ) ; ? >"}
{"text":"Function to get no of set bits in binary representation of positive integer n","code":"< ? php function countSetBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ count += $ n & 1 ; $ n >>= 1 ; } return $ count ; } function countOfOddsPascal ( $ n ) {"}
{"text":"Count number of 1 's in binary  representation of n.","code":"$ c = countSetBits ( $ n ) ;"}
{"text":"Number of odd numbers in n - th row is 2 raised to power the count .","code":"return pow ( 2 , $ c ) ; }"}
{"text":"Driver code","code":"$ n = 20 ; echo countOfOddsPascal ( $ n ) ; ? >"}
{"text":"Output for each query","code":"< ? php function ansQueries ( $ prefeven , $ prefodd , $ l , $ r ) {"}
{"text":"If number of element is even .","code":"if ( ( $ r - $ l + 1 ) % 2 == 0 ) { echo \"0\" ; }"}
{"text":"If number of element is odd .","code":"else {"}
{"text":"if l is even","code":"if ( $ l % 2 == 0 ) echo ( $ prefeven [ $ r ] ^ $ prefeven [ $ l - 1 ] ) ;"}
{"text":"if l is odd","code":"else echo ( $ prefodd [ $ r ] ^ $ prefodd [ $ l - 1 ] ) ; } echo \" \" }"}
{"text":"Wrapper Function","code":"function wrapper ( array $ arr , $ n , array $ l , array $ r , $ q ) { $ prefodd = array_fill ( 0 , 100 , 0 ) ; $ prefeven = array_fill ( 0 , 100 , 0 ) ;"}
{"text":"Evaluating prefixodd and prefixeven","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { if ( ( $ i ) % 2 == 0 ) { $ prefeven [ $ i ] = $ arr [ $ i - 1 ] ^ $ prefeven [ $ i - 1 ] ; $ prefodd [ $ i ] = $ prefodd [ $ i - 1 ] ; } else { $ prefeven [ $ i ] = $ prefeven [ $ i - 1 ] ; $ prefodd [ $ i ] = $ prefodd [ $ i - 1 ] ^ $ arr [ $ i - 1 ] ; } } $ i = 0 ; while ( $ i != $ q ) { ansQueries ( $ prefeven , $ prefodd , $ l [ $ i ] , $ r [ $ i ] ) ; $ i ++ ; } }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; $ l = array ( 1 , 1 , 2 ) ; $ r = array ( 2 , 3 , 4 ) ; $ q = sizeof ( $ l ) \/ sizeof ( $ l [ 0 ] ) ; wrapper ( $ arr , $ n , $ l , $ r , $ q ) ; ? >"}
{"text":"Function to return final grundy Number ( G ) of game","code":"< ? php function solve ( $ p , $ n ) { $ G = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if pile size is odd","code":"if ( $ p [ $ i ] & 1 )"}
{"text":"We XOR pile size + 1","code":"$ G ^= ( $ p [ $ i ] + 1 ) ;"}
{"text":"We XOR pile size - 1","code":"$ G ^= ( $ p [ $ i ] - 1 ) ; } return $ G ; }"}
{"text":"Game with 3 piles","code":"$ n = 3 ;"}
{"text":"pile with different sizes","code":"$ p = array ( 32 , 49 , 58 ) ;"}
{"text":"Function to return result of game","code":"$ res = solve ( $ p , $ n ) ;"}
{"text":"if ( $res == 0 ) if G is zero","code":"echo \" Player \u2581 2 \u2581 wins \" ;"}
{"text":"else if G is non zero","code":"echo \" Player \u2581 1 \u2581 wins \" ; ? >"}
{"text":"Utility function to check number of elements having set msb as of pattern","code":"< ? php function checkBit ( $ pattern , $ arr , $ n ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( ( $ pattern & $ arr [ $ i ] ) == $ pattern ) $ count ++ ; return $ count ; }"}
{"text":"Function for finding maximum and value pair","code":"function maxAND ( $ arr , $ n ) { $ res = 0 ; $ count ;"}
{"text":"iterate over total of 30 bits from msb to lsb","code":"for ( $ bit = 31 ; $ bit >= 0 ; $ bit -- ) {"}
{"text":"find the count of element having set msb","code":"$ count = checkBit ( $ res | ( 1 << $ bit ) , $ arr , $ n ) ;"}
{"text":"if count >= 2 set particular bit in result","code":"if ( $ count >= 2 ) $ res |= ( 1 << $ bit ) ; } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 8 , 6 , 2 ) ; $ n = count ( $ arr ) ; echo \" Maximum \u2581 AND \u2581 Value \u2581 = \u2581 \" , maxAND ( $ arr , $ n ) ; ? >"}
{"text":"function to check if power of 8","code":"< ? php function checkPowerof8 ( $ n ) {"}
{"text":"calculate log8 ( n )","code":"$ i = log ( $ n ) \/ log ( 8 ) ;"}
{"text":"check if i is an integer or not","code":"return ( $ i - floor ( $ i ) < 0.000001 ) ; }"}
{"text":"Driver Code","code":"$ n = 65 ; if ( checkPowerof8 ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns true if binary representations of a and b are anagram .","code":"< ? php function bit_anagram_check ( $ a ) { $ longSize = 8 ; $ ULL_SIZE = 8 * $ longSize ;"}
{"text":"_popcnt64 ( a ) gives number of 1 's present  in binary representation of a. If number  of 1s is half of total bits, return true.","code":"return ( BitCount ( $ a ) == ( $ ULL_SIZE >> 1 ) ) ; } function BitCount ( $ n ) { $ count = 0 ; while ( $ n != 0 ) { $ count ++ ; $ n &= ( $ n - 1 ) ; } return $ count ; }"}
{"text":"Driver code","code":"$ a = 4294967295 ; echo ( bit_anagram_check ( $ a ) ) ; ? >"}
{"text":"To calculate sum of numbers","code":"< ? php function findSum ( $ n ) { $ sum = 0 ;"}
{"text":"Find numbers whose 2 bits are set","code":"for ( $ i = 1 ; ( 1 << $ i ) < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { $ num = ( 1 << $ i ) + ( 1 << $ j ) ;"}
{"text":"If number is greater then n we don 't include this in sum","code":"if ( $ num <= $ n ) $ sum += $ num ; } }"}
{"text":"Return sum of numbers","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo findSum ( $ n ) ; ? >"}
{"text":"function to find rightmost different bit in two numbers .","code":"< ? php function posOfRightMostDiffBit ( $ m , $ n ) { $ t = floor ( log ( $ m ^ $ n , 2 ) ) ; return $ t ; }"}
{"text":"Driver code","code":"$ m = 52 ; $ n = 4 ; echo \" Position \u2581 = \u2581 \" , posOfRightMostDiffBit ( $ m , $ n ) ; ? >"}
{"text":"function to set the kth bit","code":"< ? php function setKthBit ( $ n , $ k ) {"}
{"text":"kth bit of n is being set by this operation","code":"return ( ( 1 << $ k ) $ n ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; $ k = 2 ; echo \" Kth \u2581 bit \u2581 set \u2581 number \u2581 = \u2581 \" , setKthBit ( $ n , $ k ) ; ? >"}
{"text":"Function to reverse array","code":"< ? php function reverseArray ( & $ arr , $ n ) {"}
{"text":"Trick to assign - 1 to a variable","code":"$ x = ( PHP_INT_MIN \/ PHP_INT_MAX ) ;"}
{"text":"Reverse array in simple manner","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ )"}
{"text":"Swap ith index value with ( n - i - 1 ) th index value","code":"swap ( $ arr , $ i , $ n + ( $ x * $ i ) + $ x ) ; } function swap ( & $ arr , $ i , $ j ) { $ temp = $ arr [ $ i ] ; $ arr [ $ i ] = $ arr [ $ j ] ; $ arr [ $ j ] = $ temp ; return $ arr ; }"}
{"text":"Drivers code","code":"$ arr = array ( 5 , 3 , 7 , 2 , 1 , 6 ) ; $ n = sizeof ( $ arr ) ; reverseArray ( $ arr , $ n ) ;"}
{"text":"print the reversed array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( $ arr [ $ i ] . \" \u2581 \" ) ;"}
{"text":"Function to reverse array","code":"< ? php function reverseArray ( & $ arr , $ n ) {"}
{"text":"Reverse array in simple manner","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ )"}
{"text":"Swap ith index value with ( n - i - 1 ) th index value Note : A - B = A + ~ B + 1 So n - i = n + ~ i + 1 then n - i - 1 = ( n + ~ i + 1 ) + 1 + 1","code":"{ swap ( $ arr , $ i , ( $ n + ~ $ i + 1 ) + ~ 1 + 1 ) ; } } function swap ( & $ arr , $ i , $ j ) { $ temp = $ arr [ $ i ] ; $ arr [ $ i ] = $ arr [ $ j ] ; $ arr [ $ j ] = $ temp ; return $ arr ; }"}
{"text":"Driver code","code":"{ $ arr = array ( 5 , 3 , 7 , 2 , 1 , 6 ) ; $ n = sizeof ( $ arr ) ; reverseArray ( $ arr , $ n ) ;"}
{"text":"print the reversed array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo ( $ arr [ $ i ] . \" \" ) ; } }"}
{"text":"method to get maximum xor value in range [ L , R ]","code":"< ? php function maxXORInRange ( $ L , $ R ) {"}
{"text":"get xor of limits","code":"$ LXR = $ L ^ $ R ;"}
{"text":"loop to get msb position of L ^ R","code":"$ msbPos = 0 ; while ( $ LXR ) { $ msbPos ++ ; $ LXR >>= 1 ; }"}
{"text":"construct result by adding 1 , msbPos times","code":"$ maxXOR = 0 ; $ two = 1 ; while ( $ msbPos -- ) { $ maxXOR += $ two ; $ two <<= 1 ; } return $ maxXOR ; }"}
{"text":"Driver Code","code":"$ L = 8 ; $ R = 20 ; echo maxXORInRange ( $ L , $ R ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find total 0 bit in a number","code":"< ? php function CountZeroBit ( $ n ) { $ count = 0 ; while ( $ n ) { if ( ! ( $ n & 1 ) ) $ count ++ ; $ n >>= 1 ; } return $ count ; }"}
{"text":"Function to find Count of non - negative numbers less than or equal to N , whose bitwise OR and SUM with N are equal .","code":"function CountORandSumEqual ( $ N ) {"}
{"text":"count number of zero bit in N","code":"$ count = CountZeroBit ( $ N ) ;"}
{"text":"power of 2 to count","code":"return ( 1 << $ count ) ; }"}
{"text":"Driver code","code":"$ N = 10 ; echo CountORandSumEqual ( $ N ) ; ? >"}
{"text":"PHP program to count numbers whose XOR with n produces a value more than n .","code":"< ? php function countNumbers ( $ n ) {"}
{"text":"Position of current bit in n","code":"$ k = 0 ;"}
{"text":"Initialize result","code":"$ count = 0 ; while ( $ n > 0 ) {"}
{"text":"If current bit is 0 , then there are 2 ^ k numbers with current bit 1 and whose XOR with n produces greater value","code":"if ( ( $ n & 1 ) == 0 ) $ count += pow ( 2 , $ k ) ;"}
{"text":"Increase position for next bit","code":"$ k += 1 ;"}
{"text":"Reduce n to find next bit","code":"$ n >>= 1 ; } return $ count ; }"}
{"text":"Driver code","code":"$ n = 11 ; echo countNumbers ( $ n ) ; ? >"}
{"text":"Returns true if n is a multiple of 4.","code":"< ? php function isMultipleOf4 ( $ n ) { if ( $ n == 1 ) return false ;"}
{"text":"Find XOR of all numbers from 1 to n","code":"$ XOR = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ XOR = $ XOR ^ $ i ;"}
{"text":"If XOR is equal n , then return true","code":"return ( $ XOR == $ n ) ; }"}
{"text":"Printing multiples of 4 using above method","code":"for ( $ n = 0 ; $ n <= 42 ; $ n ++ ) if ( isMultipleOf4 ( $ n ) ) echo $ n , \" \u2581 \" ; ? >"}
{"text":"Returns true if n is a multiple of 4.","code":"< ? php function isMultipleOf4 ( $ n ) { if ( $ n == 0 ) return true ; return ( ( ( $ n >> 2 ) << 2 ) == $ n ) ; }"}
{"text":"Printing multiples of 4 using above method","code":"for ( $ n = 0 ; $ n <= 42 ; $ n ++ ) if ( isMultipleOf4 ( $ n ) ) echo $ n , \" \u2581 \" ; ? >"}
{"text":"Function to get no of set bits in binary representation of passed binary no .","code":"< ? php function countSetBits ( $ x ) { $ count = 0 ; while ( $ x ) { $ x &= ( $ x - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"A function to return ceiling of log x in base 2. For example , it returns 3 for 8 and 4 for 9.","code":"function ceilLog2 ( $ x ) { $ count = 0 ; $ x -- ; while ( $ x > 0 ) { $ x = $ x >> 1 ; $ count ++ ; } return $ count ; }"}
{"text":"Returns true if n is Bleak","code":"function isBleak ( $ n ) {"}
{"text":"Check for all numbers ' x ' smaller than n . If x + countSetBits ( x ) becomes n , then n can 't be Bleak","code":"for ( $ x = $ n - ceilLog2 ( $ n ) ; $ x < $ n ; $ x ++ ) if ( $ x + countSetBits ( $ x ) == $ n ) return false ; return true ; }"}
{"text":"Driver code","code":"if ( isBleak ( 3 ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; if ( isBleak ( 4 ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"Returns count of n length binary strings with consecutive 1 's","code":"< ? php function countStrings ( $ n ) {"}
{"text":"Count binary strings without consecutive 1 's.  See the approach discussed on be  ( http:goo.gl\/p8A3sW )","code":"$ a [ $ n ] = 0 ; $ b [ $ n ] = 0 ; $ a [ 0 ] = $ b [ 0 ] = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ a [ $ i ] = $ a [ $ i - 1 ] + $ b [ $ i - 1 ] ; $ b [ $ i ] = $ a [ $ i - 1 ] ; }"}
{"text":"Subtract a [ n - 1 ] + b [ n - 1 ] from 2 ^ n","code":"return ( 1 << $ n ) - $ a [ $ n - 1 ] - $ b [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"echo countStrings ( 5 ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find distance of nearest cell having 1 in a binary matrix .","code":"< ? php $ N = 3 ; $ M = 4 ;"}
{"text":"Print the distance of nearest cell having 1 for each cell .","code":"function printDistance ( $ mat ) { global $ N , $ M ; $ ans = array ( array ( ) ) ;"}
{"text":"Initialize the answer matrix with INT_MAX .","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) for ( $ j = 0 ; $ j < $ M ; $ j ++ ) $ ans [ $ i ] [ $ j ] = PHP_INT_MAX ;"}
{"text":"For each cell","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) for ( $ j = 0 ; $ j < $ M ; $ j ++ ) {"}
{"text":"Traversing the whole matrix to find the minimum distance .","code":"for ( $ k = 0 ; $ k < $ N ; $ k ++ ) for ( $ l = 0 ; $ l < $ M ; $ l ++ ) {"}
{"text":"If cell contain 1 , check for minimum distance .","code":"if ( $ mat [ $ k ] [ $ l ] == 1 ) $ ans [ $ i ] [ $ j ] = min ( $ ans [ $ i ] [ $ j ] , abs ( $ i - $ k ) + abs ( $ j - $ l ) ) ; } }"}
{"text":"Printing the answer .","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ M ; $ j ++ ) echo $ ans [ $ i ] [ $ j ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 0 , 0 , 0 , 1 ) , array ( 0 , 0 , 1 , 1 ) , array ( 0 , 1 , 1 , 0 ) ) ; printDistance ( $ mat ) ; ? >"}
{"text":"Returns true if given level order traversal is Min Heap .","code":"< ? php function isMinHeap ( $ level , $ n ) {"}
{"text":"First non leaf node is at index ( n \/ 2 - 1 ) . Check whether each parent is greater than child","code":"for ( $ i = ( $ n \/ 2 - 1 ) ; $ i >= 0 ; $ i -- ) {"}
{"text":"Left child will be at index 2 * i + 1 Right child will be at index 2 * i + 2","code":"if ( $ level [ $ i ] > $ level [ 2 * $ i + 1 ] ) return false ; if ( 2 * $ i + 2 < $ n ) {"}
{"text":"If parent is greater than right child","code":"if ( $ level [ $ i ] > $ level [ 2 * $ i + 2 ] ) return false ; } } return true ; }"}
{"text":"Driver code","code":"$ level = array ( 10 , 15 , 14 , 25 , 30 ) ; $ n = sizeof ( $ level ) ; if ( isMinHeap ( $ level , $ n ) ) echo \" True \" ; else echo \" False \" ;"}
{"text":"PHP program to find the most frequent element in an array .","code":"< ? php function mostFrequent ( $ arr , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ; sort ( $ arr , $ n ) ;"}
{"text":"find the max frequency using linear traversal","code":"$ max_count = 1 ; $ res = $ arr [ 0 ] ; $ curr_count = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] == $ arr [ $ i - 1 ] ) $ curr_count ++ ; else { if ( $ curr_count > $ max_count ) { $ max_count = $ curr_count ; $ res = $ arr [ $ i - 1 ] ; } $ curr_count = 1 ; } }"}
{"text":"If last element is most frequent","code":"if ( $ curr_count > $ max_count ) { $ max_count = $ curr_count ; $ res = $ arr [ $ n - 1 ] ; } return $ res ; }"}
{"text":"Driver Code","code":"{ $ arr = array ( 1 , 5 , 2 , 1 , 3 , 2 , 1 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo mostFrequent ( $ arr , $ n ) ; return 0 ; } ? >"}
{"text":"Returns true if set1 [ ] and set2 [ ] are disjoint , else false","code":"< ? php function areDisjoint ( $ set1 , $ set2 , $ m , $ n ) {"}
{"text":"Take every element of set1 [ ] and search it in set2","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( $ set1 [ $ i ] == $ set2 [ $ j ] ) return false ;"}
{"text":"If no element of set1 is present in set2","code":"return true ; }"}
{"text":"Driver Code","code":"$ set1 = array ( 12 , 34 , 11 , 9 , 3 ) ; $ set2 = array ( 7 , 2 , 1 , 5 ) ; $ m = sizeof ( $ set1 ) ; $ n = sizeof ( $ set2 ) ; if ( areDisjoint ( $ set1 , $ set2 , $ m , $ n ) == true ) echo \" Yes \" ; else echo \" \u2581 No \" ; ? >"}
{"text":"Function for finding elements which are there in a [ ] but not in b [ ] .","code":"< ? php function findMissing ( $ a , $ b , $ n , $ m ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ j ; for ( $ j = 0 ; $ j < $ m ; $ j ++ ) if ( $ a [ $ i ] == $ b [ $ j ] ) break ; if ( $ j == $ m ) echo $ a [ $ i ] , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 6 , 3 , 4 , 5 ) ; $ b = array ( 2 , 4 , 3 , 1 , 0 ) ; $ n = count ( $ a ) ; $ m = count ( $ b ) ; findMissing ( $ a , $ b , $ n , $ m ) ; ? >"}
{"text":"Returns true if arr1 [ 0. . n - 1 ] and arr2 [ 0. . m - 1 ] contain same elements .","code":"< ? php function areEqual ( $ arr1 , $ arr2 , $ n , $ m ) {"}
{"text":"If lengths of array are not equal means array are not equal","code":"if ( $ n != $ m ) return false ;"}
{"text":"Sort both arrays","code":"sort ( $ arr1 ) ; sort ( $ arr2 ) ;"}
{"text":"Linearly compare elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr1 [ $ i ] != $ arr2 [ $ i ] ) return false ;"}
{"text":"If all elements were same .","code":"return true ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 3 , 5 , 2 , 5 , 2 ) ; $ arr2 = array ( 2 , 3 , 5 , 5 , 2 ) ; $ n = count ( $ arr1 ) ; $ m = count ( $ arr2 ) ; if ( areEqual ( $ arr1 , $ arr2 , $ n , $ m ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns true if there is a pair in arr [ 0. . n - 1 ] with product equal to x .","code":"< ? php function isProduct ( $ arr , $ n , $ x ) {"}
{"text":"Consider all possible pairs and check for every pair .","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) for ( $ j = $ i + 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] * $ arr [ $ j ] == $ x ) return true ; return false ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 20 , 9 , 40 ) ; $ x = 400 ; $ n = count ( $ arr ) ; if ( isProduct ( $ arr , $ n , $ x ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; $ x = 190 ; if ( isProduct ( $ arr , $ n , $ x ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"Function to find greatest number","code":"< ? php function findGreatest ( $ arr , $ n ) { $ result = -1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n - 1 ; $ j ++ ) for ( $ k = $ j + 1 ; $ k < $ n ; $ k ++ ) if ( $ arr [ $ j ] * $ arr [ $ k ] == $ arr [ $ i ] ) $ result = max ( $ result , $ arr [ $ i ] ) ; return $ result ; }"}
{"text":"Driver code","code":"$ arr = array ( 30 , 10 , 9 , 3 , 35 ) ; $ n = count ( $ arr ) ; echo findGreatest ( $ arr , $ n ) ; ? >"}
{"text":"Returns number of pairs in arr [ 0. . n - 1 ] with sum equal to ' sum '","code":"< ? php function getPairsCount ( $ arr , $ n , $ sum ) {"}
{"text":"Initialize result","code":"$ count = 0 ;"}
{"text":"Consider all possible pairs and check their sums","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ i ] + $ arr [ $ j ] == $ sum ) $ count ++ ; return $ count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 5 , 7 , -1 , 5 ) ; $ n = sizeof ( $ arr ) ; $ sum = 6 ; echo \" Count \u2581 of \u2581 pairs \u2581 is \u2581 \" , getPairsCount ( $ arr , $ n , $ sum ) ; ? >"}
{"text":"function to count all pairs from both the sorted arrays whose sum is equal to a given value","code":"< ? php function countPairs ( $ arr1 , $ arr2 , $ m , $ n , $ x ) { $ count = 0 ;"}
{"text":"generating pairs from both the arrays","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ )"}
{"text":"if sum of pair is equal to ' x ' increment count","code":"if ( ( $ arr1 [ $ i ] + $ arr2 [ $ j ] ) == $ x ) $ count ++ ;"}
{"text":"required count of pairs","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 3 , 5 , 7 ) ; $ arr2 = array ( 2 , 3 , 5 , 8 ) ; $ m = count ( $ arr1 ) ; $ n = count ( $ arr2 ) ; $ x = 10 ; echo \" Count \u2581 = \u2581 \" , countPairs ( $ arr1 , $ arr2 , $ m , $ n , $ x ) ; ? >"}
{"text":"function to search ' value ' in the given array ' arr [ ] ' it uses binary search technique as ' arr [ ] ' is sorted","code":"< ? php function isPresent ( $ arr , $ low , $ high , $ value ) { while ( $ low <= $ high ) { $ mid = ( $ low + $ high ) \/ 2 ;"}
{"text":"value found","code":"if ( $ arr [ $ mid ] == $ value ) return true ; else if ( $ arr [ $ mid ] > $ value ) $ high = $ mid - 1 ; else $ low = $ mid + 1 ; }"}
{"text":"value not found","code":"return false ; }"}
{"text":"function to count all pairs from both the sorted arrays whose sum is equal to a given value","code":"function countPairs ( $ arr1 , $ arr2 , $ m , $ n , $ x ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) {"}
{"text":"for each arr1 [ i ]","code":"$ value = $ x - $ arr1 [ $ i ] ;"}
{"text":"check if the ' value ' is present in ' arr2 [ ] '","code":"if ( isPresent ( $ arr2 , 0 , $ n - 1 , $ value ) ) $ count ++ ; }"}
{"text":"required count of pairs","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 3 , 5 , 7 ) ; $ arr2 = array ( 2 , 3 , 5 , 8 ) ; $ m = count ( $ arr1 ) ; $ n = count ( $ arr2 ) ; $ x = 10 ; echo \" Count \u2581 = \u2581 \" , countPairs ( $ arr1 , $ arr2 , $ m , $ n , $ x ) ; ? >"}
{"text":"function to count all pairs from both the sorted arrays whose sum is equal to a given value","code":"< ? php function countPairs ( $ arr1 , $ arr2 , $ m , $ n , $ x ) { $ count = 0 ; $ l = 0 ; $ r = $ n - 1 ;"}
{"text":"traverse ' arr1 [ ] ' from left to right traverse ' arr2 [ ] ' from right to left","code":"while ( $ l < $ m and $ r >= 0 ) {"}
{"text":"if this sum is equal to ' x ' , then increment ' l ' , decrement ' r ' and increment ' count '","code":"if ( ( $ arr1 [ $ l ] + $ arr2 [ $ r ] ) == $ x ) { $ l ++ ; $ r -- ; $ count ++ ; }"}
{"text":"if this sum is less than x , then increment l","code":"else if ( ( $ arr1 [ $ l ] + $ arr2 [ $ r ] ) < $ x ) $ l ++ ;"}
{"text":"else decrement ' r '","code":"else $ r -- ; }"}
{"text":"required count of pairs","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 3 , 5 , 7 ) ; $ arr2 = array ( 2 , 3 , 5 , 8 ) ; $ m = count ( $ arr1 ) ; $ n = count ( $ arr2 ) ; $ x = 10 ; echo \" Count \u2581 = \u2581 \" , countPairs ( $ arr1 , $ arr2 , $ m , $ n , $ x ) ; ? >"}
{"text":"find the ' value ' in the given array ' arr [ ] ' binary search technique is applied","code":"< ? php function isPresent ( $ arr , $ low , $ high , $ value ) { while ( $ low <= $ high ) { $ mid = ( $ low + $ high ) \/ 2 ;"}
{"text":"' value ' found","code":"if ( $ arr [ $ mid ] == $ value ) return true ; else if ( $ arr [ $ mid ] > $ value ) $ high = $ mid - 1 ; else $ low = $ mid + 1 ; }"}
{"text":"' value ' not found","code":"return false ; }"}
{"text":"function to count all quadruples from four sorted arrays whose sum is equal to a given value x","code":"function countQuadruples ( $ arr1 , $ arr2 , $ arr3 , $ arr4 , $ n , $ x ) { $ count = 0 ;"}
{"text":"generate all triplets from the 1 st three arrays","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) for ( $ k = 0 ; $ k < $ n ; $ k ++ ) {"}
{"text":"calculate the sum of elements in the triplet so generated","code":"$ T = $ arr1 [ $ i ] + $ arr2 [ $ j ] + $ arr3 [ $ k ] ;"}
{"text":"check if ' x - T ' is present in 4 th array or not","code":"if ( isPresent ( $ arr4 , 0 , $ n , $ x - $ T ) )"}
{"text":"increment count","code":"$ count ++ ; }"}
{"text":"required count of quadruples","code":"return $ count ; }"}
{"text":"four sorted arrays each of size ' n '","code":"$ arr1 = array ( 1 , 4 , 5 , 6 ) ; $ arr2 = array ( 2 , 3 , 7 , 8 ) ; $ arr3 = array ( 1 , 4 , 6 , 10 ) ; $ arr4 = array ( 2 , 4 , 7 , 8 ) ; $ n = sizeof ( $ arr1 ) ; $ x = 30 ; echo \" Count = \" ? >"}
{"text":"Returns count of pairs whose product exists in arr [ ]","code":"< ? php function countPairs ( $ arr , $ n ) { $ result = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ product = $ arr [ $ i ] * $ arr [ $ j ] ;"}
{"text":"find product in an array","code":"for ( $ k = 0 ; $ k < $ n ; $ k ++ ) {"}
{"text":"if product found increment counter","code":"if ( $ arr [ $ k ] == $ product ) { $ result ++ ; break ; } } } }"}
{"text":"return Count of all pair whose product exist in array","code":"return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( 6 , 2 , 4 , 12 , 5 , 3 ) ; $ n = sizeof ( $ arr ) ; echo countPairs ( $ arr , $ n ) ;"}
{"text":"PHP code for the above approach","code":"< ? php function fib ( $ n ) { if ( $ n <= 1 ) return $ n ; return fib ( $ n - 1 ) + fib ( $ n - 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 9 ; echo fib ( $ n ) ; ? >"}
{"text":"A tail recursive function to calculate factorial","code":"< ? php function factTR ( $ n , $ a ) { if ( $ n == 0 ) return $ a ; return factTR ( $ n - 1 , $ n * $ a ) ; }"}
{"text":"A wrapper over factTR","code":"function fact ( $ n ) { return factTR ( $ n , 1 ) ; }"}
{"text":"Driver program to test above function","code":"echo fact ( 5 ) ; ? >"}
{"text":"Function to print all pairs in both arrays whose sum is equal to given value x","code":"< ? php function findPairs ( $ arr1 , $ arr2 , $ n , $ m , $ x ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ m ; $ j ++ ) if ( $ arr1 [ $ i ] + $ arr2 [ $ j ] == $ x ) echo $ arr1 [ $ i ] . \" \u2581 \" . $ arr2 [ $ j ] . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ arr1 = array ( 1 , 2 , 3 , 7 , 5 , 4 ) ; $ arr2 = array ( 0 , 7 , 4 , 3 , 2 , 1 ) ; $ n = count ( $ arr1 ) ; $ m = count ( $ arr2 ) ; $ x = 8 ; findPairs ( $ arr1 , $ arr2 , $ n , $ m , $ x ) ; ? >"}
{"text":"Function to find pair whose sum exists in arr [ ]","code":"< ? php function findPair ( $ arr , $ n ) { $ found = false ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { for ( $ k = 0 ; $ k < $ n ; $ k ++ ) { if ( $ arr [ $ i ] + $ arr [ $ j ] == $ arr [ $ k ] ) { echo $ arr [ $ i ] , \" \u2581 \" , $ arr [ $ j ] ; $ found = true ; } } } } if ( $ found == false ) echo \" Not \u2581 exist \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 4 , 8 , 13 , 5 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; findPair ( $ arr , $ n ) ; ? >"}
{"text":"Function to find pair such that ( a % b = k )","code":"< ? php function printPairs ( $ arr , $ n , $ k ) { $ isPairFound = true ;"}
{"text":"Consider each and every pair","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Print if their modulo equals to k","code":"if ( $ i != $ j && $ arr [ $ i ] % $ arr [ $ j ] == $ k ) { echo \" ( \" , $ arr [ $ i ] , \" , \u2581 \" , $ arr [ $ j ] , \" ) \" , \" \u2581 \" ; $ isPairFound = true ; } } } return $ isPairFound ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 5 , 4 , 7 ) ; $ n = sizeof ( $ arr ) ; $ k = 3 ; if ( printPairs ( $ arr , $ n , $ k ) == false ) echo \" No \u2581 such \u2581 pair \u2581 exists \" ; ? >"}
{"text":"PHP program to output the maximum occurring character in a string","code":"< ? php $ ASCII_SIZE = 256 ; function getMaxOccuringChar ( $ str ) { global $ ASCII_SIZE ;"}
{"text":"Create array to keep the count of individual characters and initialize the array as 0","code":"$ count = array_fill ( 0 , $ ASCII_SIZE , NULL ) ;"}
{"text":"Construct character count array from the input string .","code":"$ len = strlen ( $ str ) ;"}
{"text":"Initialize max count","code":"$ max = 0 ;"}
{"text":"Traversing through the string and maintaining the count of each character","code":"for ( $ i = 0 ; $ i < ( $ len ) ; $ i ++ ) { $ count [ ord ( $ str [ $ i ] ) ] ++ ; if ( $ max < $ count [ ord ( $ str [ $ i ] ) ] ) { $ max = $ count [ ord ( $ str [ $ i ] ) ] ; $ result = $ str [ $ i ] ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ str = \" sample \u2581 string \" ; echo \" Max \u2581 occurring \u2581 character \u2581 is \u2581 \" . getMaxOccuringChar ( $ str ) ; ? >"}
{"text":"Simple PHP program to find first non - repeating element .","code":"< ? php function firstNonRepeating ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ j ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( $ i != $ j && $ arr [ $ i ] == $ arr [ $ j ] ) break ; if ( $ j == $ n ) return $ arr [ $ i ] ; } return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 9 , 4 , 9 , 6 , 7 , 4 ) ; $ n = sizeof ( $ arr ) ; echo firstNonRepeating ( $ arr , $ n ) ; ? >"}
{"text":"function to find the subarray with no pair sum divisible by k","code":"< ? php function subarrayDivisibleByK ( $ arr , $ n , $ k ) {"}
{"text":"hash table to store the remainders obtained on dividing by K","code":"$ mp = array_fill ( 0 , 1000 , 0 ) ;"}
{"text":"s : starting index of the current subarray , e : ending index of the current subarray , maxs : starting index of the maximum size subarray so far , maxe : ending index of the maximum size subarray so far","code":"$ s = 0 ; $ e = 0 ; $ maxs = 0 ; $ maxe = 0 ;"}
{"text":"insert the first element in the set","code":"$ mp [ $ arr [ 0 ] % $ k ] ++ ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ mod = $ arr [ $ i ] % $ k ;"}
{"text":"Removing starting elements of current subarray while there is an element in set which makes a pair with mod [ i ] such that the pair sum is divisible .","code":"while ( $ mp [ $ k - $ mod ] != 0 || ( $ mod == 0 && $ mp [ $ mod ] != 0 ) ) { $ mp [ $ arr [ $ s ] % $ k ] -- ; $ s ++ ; }"}
{"text":"include the current element in the current subarray the ending index of the current subarray increments by one","code":"$ mp [ $ mod ] ++ ; $ e ++ ;"}
{"text":"compare the size of the current subarray with the maximum size so far","code":"if ( ( $ e - $ s ) > ( $ maxe - $ maxs ) ) { $ maxe = $ e ; $ maxs = $ s ; } } echo ( \" The \u2581 maximum \u2581 size \u2581 is \u2581 \" . ( $ maxe - $ maxs + 1 ) . \" \u2581 and \u2581 the \u2581 subarray \u2581 is \" . \" \u2581 as \u2581 follows STRNEWLINE \" ) ; for ( $ i = $ maxs ; $ i <= $ maxe ; $ i ++ ) echo ( $ arr [ $ i ] . \" \u2581 \" ) ; }"}
{"text":"Driver Code","code":"$ k = 3 ; $ arr = array ( 5 , 10 , 15 , 20 , 25 ) ; $ n = count ( $ arr ) ; subarrayDivisibleByK ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to check if there is an element from each array such that sum of the three elements is equal to given sum .","code":"< ? php function findTriplet ( $ a1 , $ a2 , $ a3 , $ n1 , $ n2 , $ n3 , $ sum ) { for ( $ i = 0 ; $ i < $ n1 ; $ i ++ ) for ( $ j = 0 ; $ j < $ n2 ; $ j ++ ) for ( $ k = 0 ; $ k < $ n3 ; $ k ++ ) if ( $ a1 [ $ i ] + $ a2 [ $ j ] + $ a3 [ $ k ] == $ sum ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ a1 = array ( 1 , 2 , 3 , 4 , 5 ) ; $ a2 = array ( 2 , 3 , 6 , 1 , 2 ) ; $ a3 = array ( 3 , 2 , 4 , 5 , 6 ) ; $ sum = 9 ; $ n1 = count ( $ a1 ) ; $ n2 = count ( $ a2 ) ; $ n3 = count ( $ a3 ) ; if ( findTriplet ( $ a1 , $ a2 , $ a3 , $ n1 , $ n2 , $ n3 , $ sum ) == true ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function will return number of characters to be added","code":"< ? php function minInsertion ( $ str ) {"}
{"text":"To store string length","code":"$ n = strlen ( $ str ) ;"}
{"text":"To store number of characters occurring odd number of times","code":"$ res = 0 ;"}
{"text":"To store count of each character","code":"$ count = array ( 26 ) ;"}
{"text":"To store occurrence of each character","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"To count characters with odd occurrence","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ count [ $ i ] % 2 == 1 ) $ res ++ ; }"}
{"text":"As one character can be odd return res - 1 but if string is already palindrome return 0","code":"return ( $ res == 0 ) ? 0 : $ res - 1 ; }"}
{"text":"Driver program","code":"$ str = \" geeksforgeeks \" ; echo ( minInsertion ( $ str ) ) ; ? >"}
{"text":"PHP code to find the difference between highest and least frequencies function that returns difference","code":"< ? php function findDiff ( $ arr , $ n ) {"}
{"text":"sort the array","code":"sort ( $ arr ) ; $ count = 0 ; $ max_count = 0 ; $ min_count = $ n ; for ( $ i = 0 ; $ i < ( $ n - 1 ) ; $ i ++ ) {"}
{"text":"checking consecutive elements","code":"if ( $ arr [ $ i ] == $ arr [ $ i + 1 ] ) { $ count += 1 ; continue ; } else { $ max_count = max ( $ max_count , $ count ) ; $ min_count = min ( $ min_count , $ count ) ; $ count = 0 ; } } return ( $ max_count - $ min_count ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 7 , 8 , 4 , 5 , 4 , 1 , 1 , 7 , 7 , 2 , 5 ) ; $ n = sizeof ( $ arr ) ; echo ( findDiff ( $ arr , $ n ) . \" \" ) ; ? >"}
{"text":"function for maximum subset diff","code":"< ? php function maxDiff ( $ arr , $ n ) { $ SubsetSum_1 = 0 ; $ SubsetSum_2 = 0 ; for ( $ i = 0 ; $ i <= $ n - 1 ; $ i ++ ) { $ isSingleOccurance = true ; for ( $ j = $ i + 1 ; $ j <= $ n - 1 ; $ j ++ ) {"}
{"text":"if frequency of any element is two make both equal to zero","code":"if ( $ arr [ $ i ] == $ arr [ $ j ] ) { $ isSingleOccurance = false ; $ arr [ $ i ] = $ arr [ $ j ] = 0 ; break ; } } if ( $ isSingleOccurance ) { if ( $ arr [ $ i ] > 0 ) $ SubsetSum_1 += $ arr [ $ i ] ; else $ SubsetSum_2 += $ arr [ $ i ] ; } } return abs ( $ SubsetSum_1 - $ SubsetSum_2 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 2 , -3 , 3 , -2 , -2 , 8 ) ; $ n = sizeof ( $ arr ) ; echo \" Maximum \u2581 Difference \u2581 = \u2581 \" , maxDiff ( $ arr , $ n ) ; ? >"}
{"text":"function for maximum subset diff","code":"< ? php function maxDiff ( $ arr , $ n ) { $ result = 0 ;"}
{"text":"sort the array","code":"sort ( $ arr ) ;"}
{"text":"calculate the result","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ arr [ $ i ] != $ arr [ $ i + 1 ] ) $ result += abs ( $ arr [ $ i ] ) ; else $ i ++ ; }"}
{"text":"check for last element","code":"if ( $ arr [ $ n - 2 ] != $ arr [ $ n - 1 ] ) $ result += abs ( $ arr [ $ n - 1 ] ) ;"}
{"text":"return result","code":"return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 2 , -3 , 3 , -2 , -2 , 8 ) ; $ n = count ( $ arr ) ; echo \" Maximum \u2581 Difference \u2581 = \u2581 \" , maxDiff ( $ arr , $ n ) ; ? >"}
{"text":"Function to print all triplets in given sorted array that forms AP","code":"< ? php function printAllAPTriplets ( $ arr , $ n ) { $ s = array ( ) ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Use hash to find if there is a previous element with difference equal to arr [ j ] - arr [ i ]","code":"$ diff = $ arr [ $ j ] - $ arr [ $ i ] ; if ( in_array ( $ arr [ $ i ] - $ diff , $ arr ) ) echo ( ( $ arr [ $ i ] - $ diff ) . \" \" \u2581 . \u2581 $ arr [ $ i ] \u2581 . \u2581 \" \" \u2581 . \u2581 $ arr [ $ j ] \u2581 . \u2581 \" \" } array_push ( $ s , $ arr [ $ i ] ) ; } }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 6 , 9 , 12 , 17 , 22 , 31 , 32 , 35 , 42 ) ; $ n = count ( $ arr ) ; printAllAPTriplets ( $ arr , $ n ) ; ? >"}
{"text":"Function to print all triplets in given sorted array that forms AP","code":"< ? php function findAllTriplets ( $ arr , $ n ) { for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Search other two elements of AP with arr [ i ] as middle .","code":"for ( $ j = $ i - 1 , $ k = $ i + 1 ; $ j >= 0 && $ k < $ n {"}
{"text":"if a triplet is found","code":"if ( $ arr [ $ j ] + $ arr [ $ k ] == 2 * $ arr [ $ i ] ) { echo $ arr [ $ j ] . \" \u2581 \" . $ arr [ $ i ] . \" \u2581 \" . $ arr [ $ k ] . \" STRNEWLINE \" ;"}
{"text":"Since elements are distinct , arr [ k ] and arr [ j ] cannot form any more triplets with arr [ i ]","code":"$ k ++ ; $ j -- ; }"}
{"text":"If middle element is more move to higher side , else move lower side .","code":"else if ( $ arr [ $ j ] + $ arr [ $ k ] < 2 * $ arr [ $ i ] ) $ k ++ ; else $ j -- ; } } }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 6 , 9 , 12 , 17 , 22 , 31 , 32 , 35 , 42 ) ; $ n = count ( $ arr ) ; findAllTriplets ( $ arr , $ n ) ; ? >"}
{"text":"Function to count such triplets","code":"< ? php function countTriplets ( $ arr , $ n , $ m ) { $ count = 0 ;"}
{"text":"Consider all triplets and count if their product is equal to m","code":"for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n - 1 ; $ j ++ ) for ( $ k = $ j + 1 ; $ k < $ n ; $ k ++ ) if ( $ arr [ $ i ] * $ arr [ $ j ] * $ arr [ $ k ] == $ m ) $ count ++ ; return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 4 , 6 , 2 , 3 , 8 ) ; $ n = sizeof ( $ arr ) ; $ m = 24 ; echo countTriplets ( $ arr , $ n , $ m ) ; ? >"}
{"text":"Return the number of pairs with equal values .","code":"< ? php function countPairs ( $ arr , $ n ) { $ ans = 0 ;"}
{"text":"for each index i and j","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ )"}
{"text":"finding the index with same value but different index .","code":"if ( $ arr [ $ i ] == $ arr [ $ j ] ) $ ans ++ ; return $ ans ; }"}
{"text":"Driven Code","code":"$ arr = array ( 1 , 1 , 2 ) ; $ n = count ( $ arr ) ; echo countPairs ( $ arr , $ n ) ; ? >"}
{"text":"Function to pre - calculate the left [ ] array","code":"< ? php function preCalculate ( $ binary , $ n ) { $ left = array ( ) ; $ count1 = 0 ; $ count0 = 0 ;"}
{"text":"Iterate in the binary array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Initialize the number of 1 and 0","code":"$ left [ $ i ] = array ( $ count1 , $ count0 ) ;"}
{"text":"Increase the count","code":"if ( $ binary [ $ i ] ) $ count1 ++ ; else $ count0 ++ ; } return $ left ; }"}
{"text":"Driver code","code":"$ binary = array ( 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ) ; $ n = count ( $ binary ) ; $ left = preCalculate ( $ binary , $ n ) ;"}
{"text":"Queries","code":"$ queries = array ( 0 , 1 , 2 , 4 ) ; $ q = count ( $ queries ) ;"}
{"text":"Solve queries","code":"for ( $ i = 0 ; $ i < $ q ; $ i ++ ) echo $ left [ $ queries [ $ i ] ] [ 0 ] , \" \u2581 ones \u2581 \" , $ left [ $ queries [ $ i ] ] [ 1 ] , \" \u2581 zeros STRNEWLINE \" ; ? >"}
{"text":"First segment 's end index","code":"< ? php $ pos1 = -1 ;"}
{"text":"Third segment 's start index","code":"$ pos2 = -1 ;"}
{"text":"This function returns true if the array can be divided into three equal sum segments","code":"function equiSumUtil ( $ arr ) { global $ pos2 , $ pos1 ; $ n = count ( $ arr ) ;"}
{"text":"Prefix Sum Array","code":"$ pre = array_fill ( 0 , $ n , 0 ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum += $ arr [ $ i ] ; $ pre [ $ i ] = $ sum ; }"}
{"text":"Suffix Sum Array","code":"$ suf = array_fill ( 0 , $ n , 0 ) ; $ sum = 0 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { $ sum += $ arr [ $ i ] ; $ suf [ $ i ] = $ sum ; }"}
{"text":"Stores the total sum of the array","code":"$ total_sum = $ sum ; $ i = 0 ; $ j = $ n - 1 ; while ( $ i < $ j - 1 ) { if ( $ pre [ $ i ] == $ total_sum \/ 3 ) { $ pos1 = $ i ; } if ( $ suf [ $ j ] == $ total_sum \/ 3 ) { $ pos2 = $ j ; } if ( $ pos1 != -1 && $ pos2 != -1 ) {"}
{"text":"We can also take pre [ pos2 - 1 ] - pre [ pos1 ] == total_sum \/ 3 here .","code":"if ( $ suf [ $ pos1 + 1 ] - $ suf [ $ pos2 ] == $ total_sum \/ 3 ) { return true ; } else { return false ; } } if ( $ pre [ $ i ] < $ suf [ $ j ] ) { $ i ++ ; } else { $ j -- ; } } return false ; } function equiSum ( $ arr ) { global $ pos2 , $ pos1 ; $ ans = equiSumUtil ( $ arr ) ; if ( $ ans ) { print ( \" First \u2581 Segment \u2581 : \u2581 \" ) ; for ( $ i = 0 ; $ i <= $ pos1 ; $ i ++ ) { print ( $ arr [ $ i ] . \" \" ) ; } print ( \" STRNEWLINE \" ) ; print ( \" Second \u2581 Segment \u2581 : \u2581 \" ) ; for ( $ i = $ pos1 + 1 ; $ i < $ pos2 ; $ i ++ ) { print ( $ arr [ $ i ] . \" \" ) ; } print ( \" STRNEWLINE \" ) ; print ( \" Third \u2581 Segment \u2581 : \u2581 \" ) ; for ( $ i = $ pos2 ; $ i < count ( $ arr ) ; $ i ++ ) { print ( $ arr [ $ i ] . \" \" ) ; } print ( \" STRNEWLINE \" ) ; } else { println ( \" Array \u2581 cannot \u2581 be \u2581 divided \u2581 into \u2581 \" , \" three \u2581 equal \u2581 sum \u2581 segments \" ) ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 6 , 2 , 7 , 1 , 2 , 8 ) ; equiSum ( $ arr ) ; ? >"}
{"text":"Function to return the index of the rightmost minimum element from the array","code":"< ? php function getRightMin ( $ arr , $ n ) {"}
{"text":"First element is the minimum in a sorted array","code":"$ min = $ arr [ 0 ] ; $ rightMin = 0 ; $ i = 1 ; while ( $ i < $ n ) {"}
{"text":"While the elements are equal to the minimum update rightMin","code":"if ( $ arr [ $ i ] == $ min ) $ rightMin = $ i ; $ i *= 2 ; } $ i = $ rightMin + 1 ;"}
{"text":"Final check whether there are any elements which are equal to the minimum","code":"while ( $ i < $ n && $ arr [ $ i ] == $ min ) { $ rightMin = $ i ; $ i ++ ; } return $ rightMin ; }"}
{"text":"Function to return the index of the leftmost maximum element from the array","code":"function getLeftMax ( $ arr , $ n ) {"}
{"text":"Last element is the maximum in a sorted array","code":"$ max = $ arr [ $ n - 1 ] ; $ leftMax = $ n - 1 ; $ i = $ n - 2 ; while ( $ i > 0 ) {"}
{"text":"While the elements are equal to the maximum update leftMax","code":"if ( $ arr [ $ i ] == $ max ) $ leftMax = $ i ; $ i \/= 2 ; } $ i = $ leftMax - 1 ;"}
{"text":"Final check whether there are any elements which are equal to the maximum","code":"while ( $ i >= 0 && $ arr [ $ i ] == $ max ) { $ leftMax = $ i ; $ i -- ; } return $ leftMax ; }"}
{"text":"Driver code","code":"$ arr = array ( 0 , 0 , 1 , 2 , 5 , 5 , 6 , 8 , 8 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"First element is the leftmost minimum in a sorted array","code":"echo \" Minimum \u2581 left \u2581 : \u2581 \" , 0 , \" STRNEWLINE \" ; echo \" Minimum \u2581 right \u2581 : \u2581 \" , getRightMin ( $ arr , $ n ) , \" STRNEWLINE \" ; echo \" Maximum \u2581 left \u2581 : \u2581 \" , getLeftMax ( $ arr , $ n ) , \" STRNEWLINE \" ;"}
{"text":"Last element is the rightmost maximum in a sorted array","code":"echo \" Maximum \u2581 right \u2581 : \u2581 \" , ( $ n - 1 ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to count numbers to be added","code":"< ? php function countNum ( $ arr , $ n ) { $ count = 0 ;"}
{"text":"Sort the array","code":"sort ( $ arr ) ;"}
{"text":"Check if elements are consecutive or not . If not , update count","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ arr [ $ i ] != $ arr [ $ i + 1 ] && $ arr [ $ i ] != $ arr [ $ i + 1 ] - 1 ) $ count += $ arr [ $ i + 1 ] - $ arr [ $ i ] - 1 ; return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 5 , 8 , 6 ) ; $ n = count ( $ arr ) ; echo countNum ( $ arr , $ n ) ; ? >"}
{"text":"function that returns the count of subarrays that contain equal number of odd as well as even numbers","code":"< ? php function countSubarrays ( & $ arr , $ n ) {"}
{"text":"initialize difference and answer with 0","code":"$ difference = 0 ; $ ans = 0 ;"}
{"text":"initialize these auxiliary arrays with 0","code":"$ hash_positive = array_fill ( 0 , $ n + 1 , NULL ) ; $ hash_negative = array_fill ( 0 , $ n + 1 , NULL ) ;"}
{"text":"since the difference is initially 0 , we have to initialize hash_positive [ 0 ] with 1","code":"$ hash_positive [ 0 ] = 1 ;"}
{"text":"for loop to iterate through whole array ( zero - based indexing is used )","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"incrementing or decrementing difference based on arr [ i ] being even or odd , check if arr [ i ] is odd","code":"if ( $ arr [ $ i ] & 1 == 1 ) $ difference ++ ; else $ difference -- ;"}
{"text":"adding hash value of ' difference ' to our answer as all the previous occurrences of the same difference value will make even - odd subarray ending at index ' i ' . After that , we will increment hash array for that ' difference ' value for its occurrence at index ' i ' . if difference is negative then use hash_negative","code":"if ( $ difference < 0 ) { $ ans += $ hash_negative [ - $ difference ] ; $ hash_negative [ - $ difference ] ++ ; }"}
{"text":"else use hash_positive","code":"else { $ ans += $ hash_positive [ $ difference ] ; $ hash_positive [ $ difference ] ++ ; } }"}
{"text":"return total number of even - odd subarrays","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 4 , 6 , 8 , 1 , 10 , 5 , 7 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Printing total number of even - odd subarrays","code":"echo \" Total \u2581 Number \u2581 of \u2581 Even - Odd \u2581 subarrays \" . \" \u2581 are \u2581 \" . countSubarrays ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to search an element in row - wise and column - wise sorted matrix","code":"< ? php $ MAX = 100 ;"}
{"text":"Searches the element x in mat [ m ] [ n ] . If the element is found , then prints its position and returns true , otherwise prints \" not \u2581 found \" and returns false","code":"function search ( $ mat , $ m , $ n , $ x ) { $ i = $ m - 1 ;"}
{"text":"set indexes for bottom left element","code":"$ j = 0 ; while ( $ i >= 0 && $ j < $ n ) { if ( $ mat [ $ i ] [ $ j ] == $ x ) return true ; if ( $ mat [ $ i ] [ $ j ] > $ x ) $ i -- ;"}
{"text":"if mat [ i ] [ j ] < x","code":"else $ j ++ ; } return false ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 10 , 20 , 30 , 40 ) , array ( 15 , 25 , 35 , 45 ) , array ( 27 , 29 , 37 , 48 ) , array ( 32 , 33 , 39 , 50 ) , array ( 50 , 60 , 70 , 80 ) ) ; if ( search ( $ mat , 5 , 4 , 29 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find counts of right greater characters for every character .","code":"< ? php function printGreaterCount ( $ str ) { $ len = strlen ( $ str ) ; $ right = array_fill ( 0 , $ len , 0 ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ len ; $ j ++ ) if ( $ str [ $ i ] < $ str [ $ j ] ) $ right [ $ i ] ++ ; } for ( $ i = 0 ; $ i < $ len ; $ i ++ ) echo $ right [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ str = ' bcd ' printGreaterCount ( $ str ) ; ? >"}
{"text":"PHP program to find if any element appears more than n \/ 3.","code":"< ? php function appearsNBy3 ( $ arr , $ n ) { $ count1 = 0 ; $ count2 = 0 ;"}
{"text":"take the integers as the maximum value of integer hoping the integer would not be present in the array","code":"$ first = PHP_INT_MAX ; $ second = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if this element is previously seen , increment count1 .","code":"if ( $ first == $ arr [ $ i ] ) $ count1 ++ ;"}
{"text":"if this element is previously seen , increment count2 .","code":"else if ( $ second == $ arr [ $ i ] ) $ count2 ++ ; else if ( $ count1 == 0 ) { $ count1 ++ ; $ first = $ arr [ $ i ] ; } else if ( $ count2 == 0 ) { $ count2 ++ ; $ second = $ arr [ $ i ] ; }"}
{"text":"if current element is different from both the previously seen variables , decrement both the counts .","code":"else { $ count1 -- ; $ count2 -- ; } } $ count1 = 0 ; $ count2 = 0 ;"}
{"text":"Again traverse the array and find the actual counts .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] == $ first ) $ count1 ++ ; else if ( $ arr [ $ i ] == $ second ) $ count2 ++ ; } if ( $ count1 > $ n \/ 3 ) return $ first ; if ( $ count2 > $ n \/ 3 ) return $ second ; return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 1 , 1 ) ; $ n = count ( $ arr ) ; echo appearsNBy3 ( $ arr , $ n ) ; ? >"}
{"text":"Program to count pairs whose sum divisible by '4'","code":"< ? php function count4Divisibiles ( $ arr , $ n ) {"}
{"text":"Create a frequency array to count occurrences of all remainders when divided by 4","code":"$ freq = array ( 0 , 0 , 0 , 0 ) ;"}
{"text":"Count occurrences of all remainders","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) ++ $ freq [ $ arr [ $ i ] % 4 ] ;"}
{"text":"If both pairs are divisible by '4'","code":"$ ans = $ freq [ 0 ] * ( $ freq [ 0 ] - 1 ) \/ 2 ;"}
{"text":"If both pairs are 2 modulo 4","code":"$ ans += $ freq [ 2 ] * ( $ freq [ 2 ] - 1 ) \/ 2 ;"}
{"text":"If one of them is equal to 1 modulo 4 and the other is equal to 3 modulo 4","code":"$ ans += $ freq [ 1 ] * $ freq [ 3 ] ; return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 2 , 1 , 7 , 5 ) ; $ n = sizeof ( $ arr ) ; echo count4Divisibiles ( $ arr , $ n ) ; ? >"}
{"text":"Returns smallest number whose set bits are maximum in given range .","code":"< ? php function countMaxSetBits ( $ left , $ right ) {"}
{"text":"Initialize the maximum count and final answer as ' num '","code":"$ max_count = -1 ; $ num ; for ( $ i = $ left ; $ i <= $ right ; ++ $ i ) { $ temp = $ i ; $ cnt = 0 ;"}
{"text":"Traverse for every bit of ' i ' number","code":"while ( $ temp ) { if ( $ temp & 1 ) ++ $ cnt ; $ temp >>= 1 ; }"}
{"text":"If count is greater than previous calculated max_count , update it","code":"if ( $ cnt > $ max_count ) { $ max_count = $ cnt ; $ num = $ i ; } } return $ num ; }"}
{"text":"Driver code","code":"$ l = 1 ; $ r = 5 ; echo countMaxSetBits ( $ l , $ r ) , \" STRNEWLINE \" ; $ l = 1 ; $ r = 10 ; echo countMaxSetBits ( $ l , $ r ) ; ? >"}
{"text":"Prints first n terms of Recaman sequence","code":"< ? php function recaman ( $ n ) {"}
{"text":"First term of the sequence is always 0","code":"$ arr [ 0 ] = 0 ; echo $ arr [ 0 ] , \" , \u2581 \" ;"}
{"text":"Fill remaining terms using recursive formula .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ curr = $ arr [ $ i - 1 ] - $ i ; $ j ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) {"}
{"text":"If arr [ i - 1 ] - i is negative or already exists .","code":"if ( ( $ arr [ $ j ] == $ curr ) $ curr < 0 ) { $ curr = $ arr [ $ i - 1 ] + $ i ; break ; } } $ arr [ $ i ] = $ curr ; echo $ arr [ $ i ] , \" , \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ n = 17 ; recaman ( $ n ) ; ? >"}
{"text":"Prints first n terms of Recaman sequence","code":"< ? php function recaman ( $ n ) { if ( $ n <= 0 ) return ;"}
{"text":"Print first term and store it in a hash","code":"print ( \"0 , \u2581 \" ) ; $ s = array ( ) ; array_push ( $ s , 0 ) ;"}
{"text":"Print remaining terms using recursive formula .","code":"$ prev = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ curr = $ prev - $ i ;"}
{"text":"If arr [ i - 1 ] - i is negative or already exists .","code":"if ( $ curr < 0 or in_array ( $ curr , $ s ) ) $ curr = $ prev + $ i ; array_push ( $ s , $ curr ) ; print ( $ curr . \" , \" ) ; $ prev = $ curr ; } }"}
{"text":"Driver code","code":"$ n = 17 ; recaman ( $ n ) ; ? >"}
{"text":"function for finding max area","code":"< ? php function findArea ( $ arr , $ n ) {"}
{"text":"sort array in non - increasing order","code":"rsort ( $ arr ) ;"}
{"text":"Initialize two sides of rectangle","code":"$ dimension = array ( 0 , 0 ) ;"}
{"text":"traverse through array","code":"for ( $ i = 0 , $ j = 0 ; $ i < $ n - 1 && $ j < 2 ; $ i ++ )"}
{"text":"if any element occurs twice store that as dimension","code":"if ( $ arr [ $ i ] == $ arr [ $ i + 1 ] ) $ dimension [ $ j ++ ] = $ arr [ $ i ++ ] ;"}
{"text":"return the product of dimensions","code":"return ( $ dimension [ 0 ] * $ dimension [ 1 ] ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 2 , 1 , 4 , 6 , 6 , 2 , 5 ) ; $ n = count ( $ arr ) ; echo findArea ( $ arr , $ n ) ; ? >"}
{"text":"This function returns true if arr [ 0. . n - 1 ] has a pair with sum equals to x .","code":"< ? php function pairInSortedRotated ( $ arr , $ n , $ x ) {"}
{"text":"Find the pivot element","code":"$ i ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ arr [ $ i ] > $ arr [ $ i + 1 ] ) break ;"}
{"text":"l is now index of smallest element","code":"$ l = ( $ i + 1 ) % $ n ;"}
{"text":"r is now index of largest element","code":"$ r = $ i ;"}
{"text":"Keep moving either l or r till they meet","code":"while ( $ l != $ r ) {"}
{"text":"If we find a pair with sum x , we return true","code":"if ( $ arr [ $ l ] + $ arr [ $ r ] == $ x ) return true ;"}
{"text":"If current pair sum is less , move to the higher sum","code":"if ( $ arr [ $ l ] + $ arr [ $ r ] < $ x ) $ l = ( $ l + 1 ) % $ n ;"}
{"text":"Move to the lower sum side","code":"else $ r = ( $ n + $ r - 1 ) % $ n ; } return false ; }"}
{"text":"Driver Code","code":"$ arr = array ( 11 , 15 , 6 , 8 , 9 , 10 ) ; $ sum = 16 ; $ n = sizeof ( $ arr ) ; if ( pairInSortedRotated ( $ arr , $ n , $ sum ) ) echo \" Array \u2581 has \u2581 two \u2581 elements \u2581 \" . \" with \u2581 sum \u2581 16\" ; else echo \" Array \u2581 doesn ' t \u2581 have \u2581 two \u2581 \" . \" elements \u2581 with \u2581 sum \u2581 16 \u2581 \" ; ? >"}
{"text":"This function returns count of number of pairs with sum equals to x .","code":"< ? php function pairsInSortedRotated ( $ arr , $ n , $ x ) {"}
{"text":"Find the pivot element . Pivot element is largest element of array .","code":"$ i ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ arr [ $ i ] > $ arr [ $ i + 1 ] ) break ;"}
{"text":"l is index of smallest element .","code":"$ l = ( $ i + 1 ) % $ n ;"}
{"text":"r is index of largest element .","code":"$ r = $ i ;"}
{"text":"Variable to store count of number of pairs .","code":"$ cnt = 0 ;"}
{"text":"Find sum of pair formed by arr [ l ] and arr [ r ] and update l , r and cnt accordingly .","code":"while ( $ l != $ r ) {"}
{"text":"If we find a pair with sum x , then increment cnt , move l and r to next element .","code":"if ( $ arr [ $ l ] + $ arr [ $ r ] == $ x ) { $ cnt ++ ;"}
{"text":"This condition is required to be checked , otherwise l and r will cross each other and loop will never terminate .","code":"if ( $ l == ( $ r - 1 + $ n ) % $ n ) { return $ cnt ; } $ l = ( $ l + 1 ) % $ n ; $ r = ( $ r - 1 + $ n ) % $ n ; }"}
{"text":"If current pair sum is less , move to the higher sum side .","code":"else if ( $ arr [ $ l ] + $ arr [ $ r ] < $ x ) $ l = ( $ l + 1 ) % $ n ;"}
{"text":"If current pair sum is greater , move to the lower sum side .","code":"else $ r = ( $ n + $ r - 1 ) % $ n ; } return $ cnt ; }"}
{"text":"Driver Code","code":"$ arr = array ( 11 , 15 , 6 , 7 , 9 , 10 ) ; $ sum = 16 ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo pairsInSortedRotated ( $ arr , $ n , $ sum ) ; ? >"}
{"text":"Returns max possible value of i * arr [ i ]","code":"< ? php function maxSum ( $ arr , $ n ) {"}
{"text":"Find array sum and i * arr [ i ] with no rotation Stores sum of arr [ i ]","code":"$ arrSum = 0 ;"}
{"text":"Stores sum of i * arr [ i ]","code":"$ currVal = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arrSum = $ arrSum + $ arr [ $ i ] ; $ currVal = $ currVal + ( $ i * $ arr [ $ i ] ) ; }"}
{"text":"Initialize result as 0 rotation sum","code":"$ maxVal = $ currVal ;"}
{"text":"Try all rotations one by one and find the maximum rotation sum .","code":"for ( $ j = 1 ; $ j < $ n ; $ j ++ ) { $ currVal = $ currVal + $ arrSum - $ n * $ arr [ $ n - $ j ] ; if ( $ currVal > $ maxVal ) $ maxVal = $ currVal ; }"}
{"text":"Return result","code":"return $ maxVal ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) ; $ n = sizeof ( $ arr ) ; echo \" Max \u2581 sum \u2581 is \u2581 \" , maxSum ( $ arr , $ n ) ; ? >"}
{"text":"Returns maximum value of i * arr [ i ]","code":"< ? php function maxSum ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ res = PHP_INT_MIN ;"}
{"text":"Consider rotation beginning with i for all possible values of i .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Initialize sum of current rotation","code":"$ curr_sum = 0 ;"}
{"text":"Compute sum of all values . We don 't actually rotate  the array, but compute sum  by finding indexes when  arr[i] is first element","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ index = ( $ i + $ j ) % $ n ; $ curr_sum += $ j * $ arr [ $ index ] ; }"}
{"text":"Update result if required","code":"$ res = max ( $ res , $ curr_sum ) ; } return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 8 , 3 , 1 , 2 ) ; $ n = sizeof ( $ arr ) ; echo maxSum ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"An efficient PHP program to compute maximum sum of i * arr [ i ]","code":"< ? php function maxSum ( $ arr , $ n ) {"}
{"text":"Compute sum of all array elements","code":"$ cum_sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ cum_sum += $ arr [ $ i ] ;"}
{"text":"Compute sum of i * arr [ i ] for initial configuration .","code":"$ curr_val = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ curr_val += $ i * $ arr [ $ i ] ;"}
{"text":"Initialize result","code":"$ res = $ curr_val ;"}
{"text":"Compute values for other iterations","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Compute next value using previous value in O ( 1 ) time","code":"$ next_val = $ curr_val - ( $ cum_sum - $ arr [ $ i - 1 ] ) + $ arr [ $ i - 1 ] * ( $ n - 1 ) ;"}
{"text":"Update current value","code":"$ curr_val = $ next_val ;"}
{"text":"Update result if required","code":"$ res = max ( $ res , $ next_val ) ; } return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 8 , 3 , 1 , 2 ) ; $ n = sizeof ( $ arr ) ; echo maxSum ( $ arr , $ n ) ; ? >"}
{"text":"Returns count of rotations for an array which is first sorted in ascending order , then rotated","code":"< ? php function countRotations ( $ arr , $ n ) {"}
{"text":"We basically find index of minimum element","code":"$ min = $ arr [ 0 ] ; $ min_index ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ min > $ arr [ $ i ] ) { $ min = $ arr [ $ i ] ; $ min_index = $ i ; } } return $ min_index ; }"}
{"text":"Driver code","code":"$ arr = array ( 15 , 18 , 2 , 3 , 6 , 12 ) ; $ n = sizeof ( $ arr ) ; echo countRotations ( $ arr , $ n ) ; ? >"}
{"text":"Returns count of rotations for an array which is first sorted in ascending order , then rotated","code":"< ? php function countRotations ( $ arr , $ low , $ high ) {"}
{"text":"This condition is needed to handle the case when array is not rotated at all","code":"if ( $ high < $ low ) return 0 ;"}
{"text":"If there is only one element left","code":"if ( $ high == $ low ) return $ low ;"}
{"text":"Find mid","code":"$ mid = $ low + ( $ high - $ low ) \/ 2 ;"}
{"text":"Check if element ( mid + 1 ) is minimum element . Consider the cases like { 3 , 4 , 5 , 1 , 2 }","code":"if ( $ mid < $ high && $ arr [ $ mid + 1 ] < $ arr [ $ mid ] ) return ( int ) ( $ mid + 1 ) ;"}
{"text":"Check if mid itself is minimum element","code":"if ( $ mid > $ low && $ arr [ $ mid ] < $ arr [ $ mid - 1 ] ) return ( int ) ( $ mid ) ;"}
{"text":"Decide whether we need to go to left half or right half","code":"if ( $ arr [ $ high ] > $ arr [ $ mid ] ) return countRotations ( $ arr , $ low , $ mid - 1 ) ; return countRotations ( $ arr , $ mid + 1 , $ high ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 15 , 18 , 2 , 3 , 6 , 12 ) ; $ n = sizeof ( $ arr ) ; echo countRotations ( $ arr , 0 , $ n - 1 ) ; ? >"}
{"text":"Fills $temp with two copies of $arr","code":"< ? php function preprocess ( & $ arr , $ n , & $ temp ) {"}
{"text":"Store $arr elements at i and i + n","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ temp [ $ i ] = $ temp [ $ i + $ n ] = $ arr [ $ i ] ; }"}
{"text":"Function to left rotate an array k times","code":"function leftRotate ( & $ arr , $ n , $ k , & $ temp ) {"}
{"text":"Starting position of array after k rotations in temp [ ] will be k % n","code":"$ start = $ k % $ n ;"}
{"text":"Print array after k rotations","code":"for ( $ i = $ start ; $ i < $ start + $ n ; $ i ++ ) echo $ temp [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 5 , 7 , 9 ) ; $ n = sizeof ( $ arr ) ; $ temp [ 2 * $ n ] = array ( ) ; preprocess ( $ arr , $ n , $ temp ) ; $ k = 2 ; leftRotate ( $ arr , $ n , $ k , $ temp ) ; $ k = 3 ; leftRotate ( $ arr , $ n , $ k , $ temp ) ; $ k = 4 ; leftRotate ( $ arr , $ n , $ k , $ temp ) ; ? >"}
{"text":"Function to left rotate an array k times","code":"< ? php function leftRotate ( $ arr , $ n , $ k ) {"}
{"text":"Print array after k rotations","code":"for ( $ i = $ k ; $ i < $ k + $ n ; $ i ++ ) echo $ arr [ $ i % $ n ] , \" \u2581 \" ; }"}
{"text":"Driver program","code":"$ arr = array ( 1 , 3 , 5 , 7 , 9 ) ; $ n = sizeof ( $ arr ) ; $ k = 2 ; leftRotate ( $ arr , $ n , $ k ) ; echo \" STRNEWLINE \" ; $ k = 3 ; leftRotate ( $ arr , $ n , $ k ) ; echo \" STRNEWLINE \" ; $ k = 4 ; leftRotate ( $ arr , $ n , $ k ) ; echo \" STRNEWLINE \" ; ? >"}
{"text":"Function to reverse arr [ ] from index start to end","code":"< ? php function reverseArray ( & $ arr , $ start , $ end ) { while ( $ start < $ end ) { $ temp = $ arr [ $ start ] ; $ arr [ $ start ] = $ arr [ $ end ] ; $ arr [ $ end ] = $ temp ; $ start ++ ; $ end -- ; } }"}
{"text":"Function to right rotate arr [ ] of size n by d","code":"function rightRotate ( & $ arr , $ d , $ n ) { reverseArray ( $ arr , 0 , $ n - 1 ) ; reverseArray ( $ arr , 0 , $ d - 1 ) ; reverseArray ( $ arr , $ d , $ n - 1 ) ; }"}
{"text":"function to print an array","code":"function printArray ( & $ arr , $ size ) { for ( $ i = 0 ; $ i < $ size ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ) ; $ n = sizeof ( $ arr ) ; $ k = 3 ; rightRotate ( $ arr , $ k , $ n ) ; printArray ( $ arr , $ n ) ; ? >"}
{"text":"Return the maximum hamming distance of a rotation","code":"< ? php function maxHamming ( $ arr , $ n ) {"}
{"text":"arr [ ] to brr [ ] two times so that we can traverse through all rotations .","code":"$ brr = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ brr [ $ i ] = $ arr [ $ i ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ brr [ $ n + $ i ] = $ arr [ $ i ] ;"}
{"text":"We know hamming distance with 0 rotation would be 0.","code":"$ maxHam = 0 ;"}
{"text":"We try other rotations one by one and compute Hamming distance of every rotation","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ currHam = 0 ; for ( $ j = $ i , $ k = 0 ; $ j < ( $ i + $ n ) ; $ j ++ , $ k ++ ) if ( $ brr [ $ j ] != $ arr [ $ k ] ) $ currHam ++ ;"}
{"text":"We can never get more than n .","code":"if ( $ currHam == $ n ) return $ n ; $ maxHam = max ( $ maxHam , $ currHam ) ; } return $ maxHam ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 4 , 6 , 80 ) ; $ n = count ( $ arr ) ; echo maxHamming ( $ arr , $ n ) ; ? >"}
{"text":"Function to leftRotate array multiple times","code":"< ? php function leftRotate ( $ arr , $ n , $ k ) {"}
{"text":"To get the starting point of rotated array","code":"$ mod = $ k % $ n ;"}
{"text":"Prints the rotated array from start position","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( $ arr [ ( $ mod + $ i ) % $ n ] ) , \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 5 , 7 , 9 ) ; $ n = sizeof ( $ arr ) ; $ k = 2 ;"}
{"text":"Function Call","code":"leftRotate ( $ arr , $ n , $ k ) ; $ k = 3 ;"}
{"text":"Function Call","code":"leftRotate ( $ arr , $ n , $ k ) ; $ k = 4 ;"}
{"text":"Function Call","code":"leftRotate ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to compute the element at given index","code":"< ? php function findElement ( $ arr , $ ranges , $ rotations , $ index ) { for ( $ i = $ rotations - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Range [ left ... right ]","code":"$ left = $ ranges [ $ i ] [ 0 ] ; $ right = $ ranges [ $ i ] [ 1 ] ;"}
{"text":"Rotation will not have any effect","code":"if ( $ left <= $ index && $ right >= $ index ) { if ( $ index == $ left ) $ index = $ right ; else $ index -- ; } }"}
{"text":"Returning new element","code":"return $ arr [ $ index ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 ) ;"}
{"text":"No . of rotations","code":"$ rotations = 2 ;"}
{"text":"Ranges according to 0 - based indexing","code":"$ ranges = array ( array ( 0 , 2 ) , array ( 0 , 3 ) ) ; $ index = 1 ; echo findElement ( $ arr , $ ranges , $ rotations , $ index ) ; ? >"}
{"text":"PHP program to split array and move first part to end .","code":"< ? php function splitArr ( & $ arr , $ n , $ k ) { for ( $ i = 0 ; $ i < $ k ; $ i ++ ) {"}
{"text":"Rotate array by 1.","code":"$ x = $ arr [ 0 ] ; for ( $ j = 0 ; $ j < $ n - 1 ; ++ $ j ) $ arr [ $ j ] = $ arr [ $ j + 1 ] ; $ arr [ $ n - 1 ] = $ x ; } }"}
{"text":"Driver code","code":"$ arr = array ( 12 , 10 , 5 , 6 , 52 , 36 ) ; $ n = sizeof ( $ arr ) ; $ position = 2 ; splitArr ( $ arr , 6 , $ position ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Function to sort arr [ ] using Shell Metzner sort","code":"< ? php function sort_shell_metzner ( $ arr , $ n ) {"}
{"text":"Set initial step size to the size of the array","code":"$ m = $ n ; while ( $ m > 0 ) {"}
{"text":"Step size decreases by half each time","code":"$ m = $ m \/ 2 ;"}
{"text":"k is the upper limit for j","code":"$ k = $ n - $ m ;"}
{"text":"j is the starting point","code":"$ j = 0 ; do {"}
{"text":"i equals to smaller value","code":"$ i = $ j ; do {"}
{"text":"l equals to larger value","code":"$ l = $ i + $ m ;"}
{"text":"Compare and swap arr [ i ] with arr [ l ]","code":"if ( $ arr [ $ i ] > $ arr [ $ l ] ) { $ temp = $ arr [ $ i ] ; $ arr [ $ i ] = $ arr [ $ l ] ; $ arr [ $ l ] = $ temp ;"}
{"text":"Decrease smaller value by step size","code":"$ i -= $ m ; } else break ; } while ( $ i >= 0 ) ;"}
{"text":"Increment the lower limit of i","code":"$ j ++ ; } while ( $ j <= $ k ) ; } return $ arr ; }"}
{"text":"Function to print the contents of an array","code":"function printArray ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 0 , -2 , 8 , 5 , 1 ) ; $ n = count ( $ arr ) ;"}
{"text":"Sort the array using Shell Metzner Sort","code":"$ result_array = sort_shell_metzner ( $ arr , $ n ) ;"}
{"text":"Print the sorted array","code":"printArray ( $ result_array , $ n ) ; ? >"}
{"text":"function to rearrange the array","code":"< ? php function rearrangeArr ( & $ arr , $ n ) {"}
{"text":"total even positions","code":"$ evenPos = intval ( $ n \/ 2 ) ;"}
{"text":"total odd positions","code":"$ oddPos = $ n - $ evenPos ; $ tempArr = array_fill ( 0 , $ n , NULL ) ;"}
{"text":"copy original array in an auxiliary array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ tempArr [ $ i ] = $ arr [ $ i ] ;"}
{"text":"sort the auxiliary array","code":"sort ( $ tempArr ) ; $ j = $ oddPos - 1 ;"}
{"text":"fill up odd position in original array","code":"for ( $ i = 0 ; $ i < $ n ; $ i += 2 ) { $ arr [ $ i ] = $ tempArr [ $ j ] ; $ j -- ; } $ j = $ oddPos ;"}
{"text":"fill up even positions in original array","code":"for ( $ i = 1 ; $ i < $ n ; $ i += 2 ) { $ arr [ $ i ] = $ tempArr [ $ j ] ; $ j ++ ; }"}
{"text":"display array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 ) ; $ size = sizeof ( $ arr ) ; rearrangeArr ( $ arr , $ size ) ; ? >"}
{"text":"PHP implementation of above algorithm","code":"< ? php function MaxSumDifference ( & $ a , $ n ) {"}
{"text":"final sequence stored in the vector","code":"$ finalSequence = array ( ) ;"}
{"text":"sort the original array so that we can retrieve the large elements from the end of array elements","code":"sort ( $ a ) ;"}
{"text":"In this loop first we will insert one smallest element not entered till that time in final sequence and then enter a highest element ( not entered till that time ) in final sequence so that we have large difference value . This process is repeated till all array has completely entered in sequence . Here , we have loop till n \/ 2 because we are inserting two elements at a time in loop .","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; ++ $ i ) { array_push ( $ finalSequence , $ a [ $ i ] ) ; array_push ( $ finalSequence , $ a [ $ n - $ i - 1 ] ) ; }"}
{"text":"If there are odd elements , push the middle element at the end .","code":"if ( $ n % 2 != 0 ) array_push ( $ finalSequence , $ a [ $ n - 1 ] ) ;"}
{"text":"variable to store the maximum sum of absolute difference","code":"$ MaximumSum = 0 ;"}
{"text":"In this loop absolute difference of elements for the final sequence is calculated .","code":"for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { $ MaximumSum = $ MaximumSum + abs ( $ finalSequence [ $ i ] - $ finalSequence [ $ i + 1 ] ) ; }"}
{"text":"absolute difference of last element and 1 st element","code":"$ MaximumSum = $ MaximumSum + abs ( $ finalSequence [ $ n - 1 ] - $ finalSequence [ 0 ] ) ;"}
{"text":"return the value","code":"return $ MaximumSum ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 2 , 4 , 8 ) ; $ n = sizeof ( $ a ) ; echo MaxSumDifference ( $ a , $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Utility function to find minimum swaps required to club all elements less than or equals to k together","code":"< ? php function minSwap ( $ arr , $ n , $ k ) {"}
{"text":"Find count of elements which are less than equals to k","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) if ( $ arr [ $ i ] <= $ k ) ++ $ count ;"}
{"text":"Find unwanted elements in current window of size ' count '","code":"$ bad = 0 ; for ( $ i = 0 ; $ i < $ count ; ++ $ i ) if ( $ arr [ $ i ] > $ k ) ++ $ bad ;"}
{"text":"Initialize answer with ' bad ' value of current window","code":"$ ans = $ bad ; for ( $ i = 0 , $ j = $ count ; $ j < $ n ; ++ $ i , ++ $ j ) {"}
{"text":"Decrement count of previous window","code":"if ( $ arr [ $ i ] > $ k ) -- $ bad ;"}
{"text":"Increment count of current window","code":"if ( $ arr [ $ j ] > $ k ) ++ $ bad ;"}
{"text":"Update ans if count of ' bad ' is less in current window","code":"$ ans = min ( $ ans , $ bad ) ; } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 1 , 5 , 6 , 3 ) ; $ n = sizeof ( $ arr ) ; $ k = 3 ; echo ( minSwap ( $ arr , $ n , $ k ) . \" \" ) ; $ arr1 = array ( 2 , 7 , 9 , 5 , 8 , 7 , 4 ) ; $ n = sizeof ( $ arr1 ) ; $ k = 5 ; echo ( minSwap ( $ arr1 , $ n , $ k ) ) ; ? >"}
{"text":"Required function","code":"< ? php function maxProductSubarrayOfSizeK ( $ A , $ n , $ k ) {"}
{"text":"sorting given input array","code":"sort ( $ A ) ;"}
{"text":"variable to store final product of all element of sub - sequence of size k","code":"$ product = 1 ;"}
{"text":"CASE I If max element is 0 and k is odd then max product will be 0","code":"if ( $ A [ $ n - 1 ] == 0 && ( $ k & 1 ) ) return 0 ;"}
{"text":"CASE II If all elements are negative and k is odd then max product will be product of rightmost - subarray of size k","code":"if ( $ A [ $ n - 1 ] <= 0 && ( $ k & 1 ) ) { for ( $ i = $ n - 1 ; $ i >= $ n - $ k ; $ i -- ) $ product *= $ A [ $ i ] ; return $ product ; }"}
{"text":"else i is current left pointer index","code":"$ i = 0 ;"}
{"text":"j is current right pointer index","code":"$ j = $ n - 1 ;"}
{"text":"CASE III if k is odd and rightmost element in sorted array is positive then it must come in subsequence Multiplying A [ j ] with product and correspondingly changing j","code":"if ( $ k & 1 ) { $ product *= $ A [ $ j ] ; $ j -- ; $ k -- ; }"}
{"text":"CASE IV Now k is even Now we deal with pairs Each time a pair is multiplied to product ie . . two elements are added to subsequence each time Effectively k becomes half Hence , k >>= 1 means k \/= 2","code":"$ k >>= 1 ;"}
{"text":"Now finding k corresponding pairs to get maximum possible value of product","code":"for ( $ itr = 0 ; $ itr < $ k ; $ itr ++ ) {"}
{"text":"product from left pointers","code":"$ left_product = $ A [ $ i ] * $ A [ $ i + 1 ] ;"}
{"text":"product from right pointers","code":"$ right_product = $ A [ $ j ] * $ A [ $ j - 1 ] ;"}
{"text":"Taking the max product from two choices Correspondingly changing the pointer 's position","code":"if ( $ left_product > $ right_product ) { $ product *= $ left_product ; $ i += 2 ; } else { $ product *= $ right_product ; $ j -= 2 ; } }"}
{"text":"Finally return product","code":"return $ product ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 2 , -1 , -3 , -6 , 4 ) ; $ n = count ( $ A ) ; $ k = 4 ; echo maxProductSubarrayOfSizeK ( $ A , $ n , $ k ) ; ? >"}
{"text":"Function to reorder elements of arr [ ] according to index [ ]","code":"< ? php function reorder ( $ arr , $ index , $ n ) {"}
{"text":"$temp [ $n ] ; arr [ i ] should be present at index [ i ] index","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ temp [ $ index [ $ i ] ] = $ arr [ $ i ] ; }"}
{"text":"Copy temp [ ] to arr [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ $ i ] = $ temp [ $ i ] ; $ index [ $ i ] = $ i ; } echo \" Reordered \u2581 array \u2581 is : \u2581 STRNEWLINE \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo $ arr [ $ i ] . \" \" ; } echo \" Modified Index array is : \" for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo $ index [ $ i ] . \" \" ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 50 , 40 , 70 , 60 , 90 ) ; $ index = array ( 3 , 0 , 4 , 1 , 2 ) ; $ n = sizeof ( $ arr ) ; reorder ( $ arr , $ index , $ n ) ; ? >"}
{"text":"Returns count of subsets with consecutive numbers","code":"< ? php function numofsubset ( $ arr , $ n ) {"}
{"text":"Sort the array so that elements which are consecutive in nature became consecutive in the array .","code":"sort ( $ arr ) ;"}
{"text":"Initialize result","code":"$ count = 1 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Check if there is beginning of another subset of consecutive number","code":"if ( $ arr [ $ i ] + 1 != $ arr [ $ i + 1 ] ) $ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 100 , 56 , 5 , 6 , 102 , 58 , 101 , 57 , 7 , 103 , 59 ) ; $ n = sizeof ( $ arr ) ; echo numofsubset ( $ arr , $ n ) ; ? >"}
{"text":"A function to sort the algorithm using gnome sort","code":"< ? php function gnomeSort ( $ arr , $ n ) { $ index = 0 ; while ( $ index < $ n ) { if ( $ index == 0 ) $ index ++ ; if ( $ arr [ $ index ] >= $ arr [ $ index - 1 ] ) $ index ++ ; else { $ temp = 0 ; $ temp = $ arr [ $ index ] ; $ arr [ $ index ] = $ arr [ $ index - 1 ] ; $ arr [ $ index - 1 ] = $ temp ; $ index -- ; } }"}
{"text":"Driver Code","code":"echo \" Sorted \u2581 sequence \u2581 \" , \" after \u2581 Gnome \u2581 sort : \u2581 \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; } $ arr = array ( 34 , 2 , 10 , -9 ) ; $ n = count ( $ arr ) ; gnomeSort ( $ arr , $ n ) ; ? >"}
{"text":"PHP Program to find maximum guest at any time in a party","code":"< ? php function findMaxGuests ( $ arrl , $ exit , $ n ) {"}
{"text":"Sort arrival and exit arrays","code":"sort ( $ arrl ) ; sort ( $ exit ) ;"}
{"text":"guests_in indicates number of guests at a time","code":"$ guests_in = 1 ; $ max_guests = 1 ; $ time = $ arrl [ 0 ] ; $ i = 1 ; $ j = 0 ;"}
{"text":"Similar to merge in merge sort to process all events in sorted order","code":"while ( $ i < $ n and $ j < $ n ) {"}
{"text":"If next event in sorted order is arrival , increment count of guests","code":"if ( $ arrl [ $ i ] <= $ exit [ $ j ] ) { $ guests_in ++ ;"}
{"text":"Update max_guests if needed","code":"if ( $ guests_in > $ max_guests ) { $ max_guests = $ guests_in ; $ time = $ arrl [ $ i ] ; }"}
{"text":"increment index of arrival array","code":"$ i ++ ; }"}
{"text":"If event is exit , decrement count of guests .","code":"else {"}
{"text":"of guests .","code":"$ guests_in -- ; $ j ++ ; } } echo \" Maximum \u2581 Number \u2581 of \u2581 Guests \u2581 = \u2581 \" , $ max_guests , \" \u2581 at \u2581 time \u2581 \" , $ time ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 2 , 10 , 5 , 5 ) ; $ exit = array ( 4 , 5 , 12 , 9 , 120 ) ; $ n = count ( $ arr1 ) ; findMaxGuests ( $ arr1 , $ exit , $ n ) ; ? >"}
{"text":"Finding maximum starting time O ( n )","code":"$ maxa = max ( $ start ) ;"}
{"text":"Finding maximum ending time O ( n )","code":"$ maxb = max ( $ end ) ; $ maxc = max ( $ maxa , $ maxb ) ; $ x = array_fill ( 0 , $ maxc + 2 , 0 ) ; $ cur = 0 ;"}
{"text":"Creating and auxiliary array O ( n )","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Lazy addition","code":"++ $ x [ $ start [ $ i ] ] ; -- $ x [ $ end [ $ i ] + 1 ] ; } $ maxy = - PHP_INT_MAX ;"}
{"text":"Lazily Calculating value at index i O ( n )","code":"for ( $ i = 0 ; $ i <= $ maxc ; $ i ++ ) { $ cur += $ x [ $ i ] ; if ( $ maxy < $ cur ) { $ maxy = $ cur ; $ idx = $ i ; } } echo \" Maximum \u2581 value \u2581 is \u2581 \" . $ maxy . \" \u2581 at \u2581 position \u2581 \" . $ idx . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ start = array ( 13 , 28 , 29 , 14 , 40 , 17 , 3 ) ; $ end = array ( 107 , 95 , 111 , 105 , 70 , 127 , 74 ) ; maxOverlap ( $ start , $ end ) ; ? >"}
{"text":"Prints max at first position , min at second position second max at third position , second min at fourth position and so on .","code":"< ? php function rearrange ( & $ arr , $ n ) {"}
{"text":"Auxiliary array to hold modified array","code":"$ temp = array ( ) ;"}
{"text":"Indexes of smallest and largest elements from remaining array .","code":"$ small = 0 ; $ large = $ n - 1 ;"}
{"text":"To indicate whether we need to copy remaining largest or remaining smallest at next position","code":"$ flag = true ;"}
{"text":"Store result in temp [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ flag ) $ temp [ $ i ] = $ arr [ $ large -- ] ; else $ temp [ $ i ] = $ arr [ $ small ++ ] ; $ flag = ! $ flag ; }"}
{"text":"Copy temp [ ] to arr [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = $ temp [ $ i ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 ) ; $ n = count ( $ arr ) ; echo \" Original \u2581 Arrayn STRNEWLINE \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; rearrange ( $ arr , $ n ) ; echo \" Modified Arrayn \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Prints max at first position , min at second position second max at third position , second min at fourth position and so on .","code":"< ? php function rearrange ( & $ arr , $ n ) {"}
{"text":"initialize index of first minimum and first maximum element","code":"$ max_idx = $ n - 1 ; $ min_idx = 0 ;"}
{"text":"store maximum element of array","code":"$ max_elem = $ arr [ $ n - 1 ] + 1 ;"}
{"text":"traverse array elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"at even index : we have to put maximum element","code":"if ( $ i % 2 == 0 ) { $ arr [ $ i ] += ( $ arr [ $ max_idx ] % $ max_elem ) * $ max_elem ; $ max_idx -- ; }"}
{"text":"at odd index : we have to put minimum element","code":"else { $ arr [ $ i ] += ( $ arr [ $ min_idx ] % $ max_elem ) * $ max_elem ; $ min_idx ++ ; } }"}
{"text":"array elements back to it 's original form","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = ( int ) ( $ arr [ $ i ] \/ $ max_elem ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) ; $ n = sizeof ( $ arr ) ; echo \" Original \u2581 Array \" . \" STRNEWLINE \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; rearrange ( $ arr , $ n ) ; echo \" Modified Array \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ;"}
{"text":"A PHP program to put all negative numbers before positive numbers","code":"< ? php function rearrange ( & $ arr , $ n ) { $ j = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] < 0 ) { if ( $ i != $ j ) { $ temp = $ arr [ $ i ] ; $ arr [ $ i ] = $ arr [ $ j ] ; $ arr [ $ j ] = $ temp ; } $ j ++ ; } } }"}
{"text":"A utility function to print an array","code":"function printArray ( & $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( -1 , 2 , -3 , 4 , 5 , 6 , -7 , 8 , 9 ) ; $ n = sizeof ( $ arr ) ; rearrange ( $ arr , $ n ) ; printArray ( $ arr , $ n ) ; ? >"}
{"text":"Moves all - ve element to end of array in same order .","code":"< ? php function segregateElements ( & $ arr , $ n ) {"}
{"text":"Create an empty array to store result","code":"$ temp = array ( 0 , $ n , NULL ) ;"}
{"text":"Traversal array and store + ve element in temp array index of temp","code":"$ j = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] >= 0 ) $ temp [ $ j ++ ] = $ arr [ $ i ] ;"}
{"text":"If array contains all positive or all negative .","code":"if ( $ j == $ n $ j == 0 ) return ;"}
{"text":"Store - ve element in temp array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] < 0 ) $ temp [ $ j ++ ] = $ arr [ $ i ] ;"}
{"text":"Copy contents of temp [ ] to arr [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = $ temp [ $ i ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , -1 , -3 , -2 , 7 , 5 , 11 , 6 ) ; $ n = sizeof ( $ arr ) ; segregateElements ( $ arr , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Swap","code":"< ? php function swap ( & $ a , & $ b ) { $ temp = $ a ; $ a = $ b ; $ b = $ temp ; }"}
{"text":"Rearrange","code":"function rearrange ( & $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ i % 2 == 0 && $ arr [ $ i ] > $ arr [ $ i + 1 ] ) swap ( $ arr [ $ i ] , $ arr [ $ i + 1 ] ) ; if ( $ i % 2 != 0 && $ arr [ $ i ] < $ arr [ $ i + 1 ] ) swap ( $ arr [ $ i ] , $ arr [ $ i + 1 ] ) ; } }"}
{"text":"Utility that prints out an array in a line","code":"function printArray ( & $ arr , $ size ) { for ( $ i = 0 ; $ i < $ size ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 6 , 4 , 2 , 1 , 8 , 3 ) ; $ n = sizeof ( $ arr ) ; echo \" Before \u2581 rearranging : \u2581 STRNEWLINE \" ; printArray ( $ arr , $ n ) ; rearrange ( $ arr , $ n ) ; echo \" After \u2581 rearranging : \u2581 STRNEWLINE \" ; printArray ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to rearrange positive and negative numbers","code":"< ? php function rearrange ( & $ a , $ size ) { $ positive = 0 ; $ negative = 1 ; while ( true ) {"}
{"text":"Move forward the positive pointer till negative number number not encountered","code":"while ( $ positive < $ size && $ a [ $ positive ] >= 0 ) $ positive += 2 ;"}
{"text":"Move forward the negative pointer till positive number number not encountered","code":"while ( $ negative < $ size && $ a [ $ negative ] <= 0 ) $ negative += 2 ;"}
{"text":"Swap array elements to fix their position .","code":"if ( $ positive < $ size && $ negative < $ size ) { $ temp = $ a [ $ positive ] ; $ a [ $ positive ] = $ a [ $ negative ] ; $ a [ $ negative ] = $ temp ; }"}
{"text":"Break from the while loop when any index exceeds the size of the array","code":"else break ; } }"}
{"text":"Driver code","code":"$ arr = array ( 1 , -3 , 5 , 6 , -3 , 6 , 7 , -4 , 9 , 10 ) ; $ n = sizeof ( $ arr ) ; rearrange ( $ arr , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Function to segregate even odd numbers","code":"< ? php function arrayEvenAndOdd ( $ arr , $ n ) { $ i = -1 ; $ j = 0 ; $ t ; while ( $ j != $ n ) { if ( $ arr [ $ j ] % 2 == 0 ) { $ i ++ ;"}
{"text":"Swapping even and odd numbers","code":"$ x = $ arr [ $ i ] ; $ arr [ $ i ] = $ arr [ $ j ] ; $ arr [ $ j ] = $ x ; } $ j ++ ; }"}
{"text":"Printing segregated array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 3 , 2 , 4 , 7 , 6 , 9 , 10 ) ; $ n = sizeof ( $ arr ) ; arrayEvenAndOdd ( $ arr , $ n ) ; ? >"}
{"text":"PHP function to find maximum in arr [ ] of size n","code":"< ? php function largest ( $ arr , $ n ) { $ i ;"}
{"text":"Initialize maximum element","code":"$ max = $ arr [ 0 ] ;"}
{"text":"Traverse array elements from second and compare every element with current max","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] > $ max ) $ max = $ arr [ $ i ] ; return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 324 , 45 , 90 , 9808 ) ; $ n = sizeof ( $ arr ) ; echo \" Largest \u2581 in \u2581 given \u2581 array \u2581 is \u2581 \" , largest ( $ arr , $ n ) ; ? >"}
{"text":"returns maximum in arr [ ] of size n","code":"< ? php function largest ( $ arr , $ n ) { return max ( $ arr ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 324 , 45 , 90 , 9808 ) ; $ n = count ( $ arr ) ; echo largest ( $ arr , $ n ) ; ? >"}
{"text":"Function for calculating mean","code":"< ? php function findMean ( & $ a , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ a [ $ i ] ; return ( double ) $ sum \/ ( double ) $ n ; }"}
{"text":"Function for calculating median","code":"function findMedian ( & $ a , $ n ) {"}
{"text":"First we sort the array","code":"sort ( $ a ) ;"}
{"text":"check for even case","code":"if ( $ n % 2 != 0 ) return ( double ) $ a [ $ n \/ 2 ] ; return ( double ) ( $ a [ ( $ n - 1 ) \/ 2 ] + $ a [ $ n \/ 2 ] ) \/ 2.0 ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 3 , 4 , 2 , 7 , 5 , 8 , 6 ) ; $ n = sizeof ( $ a ) ;"}
{"text":"Function call","code":"echo \" Mean \u2581 = \u2581 \" . findMean ( $ a , $ n ) . \" STRNEWLINE \" ; echo \" Median \u2581 = \u2581 \" . findMedian ( $ a , $ n ) ; ? >"}
{"text":"Function to print smallest k numbers in arr [ 0. . n - 1 ]","code":"< ? php function printSmall ( $ arr , $ n , $ k ) {"}
{"text":"For each arr [ i ] find whether it is a part of n - smallest with insertion sort concept","code":"for ( $ i = $ k ; $ i < $ n ; ++ $ i ) {"}
{"text":"find largest from first k - elements","code":"$ max_var = $ arr [ $ k - 1 ] ; $ pos = $ k - 1 ; for ( $ j = $ k - 2 ; $ j >= 0 ; $ j -- ) { if ( $ arr [ $ j ] > $ max_var ) { $ max_var = $ arr [ $ j ] ; $ pos = $ j ; } }"}
{"text":"if largest is greater than arr [ i ] shift all element one place left","code":"if ( $ max_var > $ arr [ $ i ] ) { $ j = $ pos ; while ( $ j < $ k - 1 ) { $ arr [ $ j ] = $ arr [ $ j + 1 ] ; $ j ++ ; }"}
{"text":"make arr [ k - 1 ] = arr [ i ]","code":"$ arr [ $ k - 1 ] = $ arr [ $ i ] ; } }"}
{"text":"print result","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 ) ; $ n = count ( $ arr ) ; $ k = 5 ; printSmall ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to print the second largest elements","code":"< ? php function print2largest ( $ arr , $ arr_size ) {"}
{"text":"There should be atleast two elements","code":"if ( $ arr_size < 2 ) { echo ( \" \u2581 Invalid \u2581 Input \u2581 \" ) ; return ; } $ first = $ second = PHP_INT_MIN ; for ( $ i = 0 ; $ i < $ arr_size ; $ i ++ ) {"}
{"text":"If current element is smaller than first then update both first and second","code":"if ( $ arr [ $ i ] > $ first ) { $ second = $ first ; $ first = $ arr [ $ i ] ; }"}
{"text":"If arr [ i ] is in between first and second then update second","code":"else if ( $ arr [ $ i ] > $ second && $ arr [ $ i ] != $ first ) $ second = $ arr [ $ i ] ; } if ( $ second == PHP_INT_MIN ) echo ( \" There \u2581 is \u2581 no \u2581 second \u2581 largest \u2581 element STRNEWLINE \" ) ; else echo ( \" The \u2581 second \u2581 largest \u2581 element \u2581 is \u2581 \" . $ second . \" STRNEWLINE \" ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 35 , 1 , 10 , 34 , 1 ) ; $ n = sizeof ( $ arr ) ; print2largest ( $ arr , $ n ) ; ? >"}
{"text":"function to find sum of all of the nodes of given perfect binary tree","code":"< ? php function sumNodes ( $ l ) {"}
{"text":"no of leaf nodes","code":"$ leafNodeCount = ( $ l - 1 ) * ( $ l - 1 ) ; $ sumLastLevel = 0 ;"}
{"text":"sum of nodes at last level","code":"$ sumLastLevel = ( $ leafNodeCount * ( $ leafNodeCount + 1 ) ) \/ 2 ;"}
{"text":"sum of all nodes","code":"$ sum = $ sumLastLevel * $ l ; return $ sum ; }"}
{"text":"Driver Code","code":"$ l = 3 ; echo ( sumNodes ( $ l ) ) ; ? >"}
{"text":"Utility method to add value val , to range [ lo , hi ]","code":"< ? php function add ( & $ arr , $ N , $ lo , $ hi , $ val ) { $ arr [ $ lo ] += $ val ; if ( $ hi != $ N - 1 ) $ arr [ $ hi + 1 ] -= $ val ; }"}
{"text":"Utility method to get actual array from operation array","code":"function updateArray ( & $ arr , $ N ) {"}
{"text":"convert array into prefix sum array","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) $ arr [ $ i ] += $ arr [ $ i - 1 ] ; }"}
{"text":"method to print final updated array","code":"function printArr ( & $ arr , $ N ) { updateArray ( $ arr , $ N ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ N = 6 ; $ arr = array_fill ( 0 , $ N , NULL ) ;"}
{"text":"Range add Queries","code":"add ( $ arr , $ N , 0 , 2 , 100 ) ; add ( $ arr , $ N , 1 , 5 , 100 ) ; add ( $ arr , $ N , 2 , 3 , 100 ) ; printArr ( $ arr , $ N ) ; ? >"}
{"text":"Calculating GCD using euclid algorithm","code":"< ? php function GCD ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return GCD ( $ b , $ a % $ b ) ; }"}
{"text":"Filling the prefix and suffix array","code":"function FillPrefixSuffix ( & $ prefix , & $ arr , & $ suffix , $ n ) {"}
{"text":"Filling the prefix array following relation prefix ( i ) = GCD ( prefix ( i - 1 ) , arr ( i ) )","code":"$ prefix [ 0 ] = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ prefix [ $ i ] = GCD ( $ prefix [ $ i - 1 ] , $ arr [ $ i ] ) ;"}
{"text":"Filling the suffix array following the relation suffix ( i ) = GCD ( suffix ( i + 1 ) , arr ( i ) )","code":"$ suffix [ $ n - 1 ] = $ arr [ $ n - 1 ] ; for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) $ suffix [ $ i ] = GCD ( $ suffix [ $ i + 1 ] , $ arr [ $ i ] ) ; }"}
{"text":"To calculate gcd of the numbers outside range","code":"function GCDoutsideRange ( $ l , $ r , & $ prefix , & $ suffix , $ n ) {"}
{"text":"If l = 0 , we need to tell GCD of numbers from r + 1 to n","code":"if ( $ l == 0 ) return $ suffix [ $ r + 1 ] ;"}
{"text":"If r = n - 1 we need to return the gcd of numbers from 1 to l","code":"if ( $ r == $ n - 1 ) return $ prefix [ $ l - 1 ] ; return GCD ( $ prefix [ $ l - 1 ] , $ suffix [ $ r + 1 ] ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 6 , 9 ) ; $ n = sizeof ( $ arr ) ; $ prefix = array_fill ( 0 , $ n , NULL ) ; $ suffix = array_fill ( 0 , $ n , NULL ) ; FillPrefixSuffix ( $ prefix , $ arr , $ suffix , $ n ) ; $ l = 0 ; $ r = 0 ; echo GCDoutsideRange ( $ l , $ r , $ prefix , $ suffix , $ n ) . \" \" ; $ l = 1 ; $ r = 1 ; echo GCDoutsideRange ( $ l , $ r , $ prefix , $ suffix , $ n ) . \" \" ; $ l = 1 ; $ r = 2 ; echo GCDoutsideRange ( $ l , $ r , $ prefix , $ suffix , $ n ) . \" \" ; ? >"}
{"text":"function to count elements within given range","code":"< ? php function countInRange ( $ arr , $ n , $ x , $ y ) {"}
{"text":"initialize result","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"check if element is in range","code":"if ( $ arr [ $ i ] >= $ x && $ arr [ $ i ] <= $ y ) $ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 4 , 9 , 10 , 3 ) ; $ n = count ( $ arr ) ;"}
{"text":"Answer queries","code":"$ i = 1 ; $ j = 4 ; echo countInRange ( $ arr , $ n , $ i , $ j ) . \" \" ; $ i = 9 ; $ j = 12 ; echo countInRange ( $ arr , $ n , $ i , $ j ) . \" \" ; ? >"}
{"text":"function to find first index >= x","code":"< ? php function lowerIndex ( $ arr , $ n , $ x ) { $ l = 0 ; $ h = $ n - 1 ; while ( $ l <= $ h ) { $ mid = ( $ l + $ h ) \/ 2 ; if ( $ arr [ $ mid ] >= $ x ) $ h = $ mid - 1 ; else $ l = $ mid + 1 ; } return $ l ; }"}
{"text":"function to find last index <= y","code":"function upperIndex ( $ arr , $ n , $ y ) { $ l = 0 ; $ h = $ n - 1 ; while ( $ l <= $ h ) { $ mid = ( $ l + $ h ) \/ 2 ; if ( $ arr [ $ mid ] <= $ y ) $ l = $ mid + 1 ; else $ h = $ mid - 1 ; } return $ h ; }"}
{"text":"function to count elements within given range","code":"function countInRange ( $ arr , $ n , $ x , $ y ) {"}
{"text":"initialize result","code":"$ count = 0 ; $ count = ( upperIndex ( $ arr , $ n , $ y ) - lowerIndex ( $ arr , $ n , $ x ) + 1 ) ; $ t = floor ( $ count ) ; return $ t ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 4 , 4 , 9 , 10 , 3 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Preprocess array","code":"sort ( $ arr ) ;"}
{"text":"Answer queries","code":"$ i = 1 ; $ j = 4 ; echo countInRange ( $ arr , $ n , $ i , $ j ) , \" \" ; $ i = 9 ; $ j = 12 ; echo countInRange ( $ arr , $ n , $ i , $ j ) , \" \" ; ? >"}
{"text":"Fills pre [ ]","code":"< ? php function precompute ( & $ arr , $ n , & $ pre ) { $ pre [ $ n - 1 ] = $ arr [ $ n - 1 ] * pow ( 2 , 0 ) ; for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) $ pre [ $ i ] = $ pre [ $ i + 1 ] + $ arr [ $ i ] * ( 1 << ( $ n - 1 - $ i ) ) ; }"}
{"text":"returns the number represented by a binary subarray l to r","code":"function decimalOfSubarr ( & $ arr , $ l , $ r , $ n , & $ pre ) {"}
{"text":"if r is equal to n - 1 r + 1 does not exist","code":"if ( $ r != $ n - 1 ) return ( $ pre [ $ l ] - $ pre [ $ r + 1 ] ) \/ ( 1 << ( $ n - 1 - $ r ) ) ; return $ pre [ $ l ] \/ ( 1 << ( $ n - 1 - $ r ) ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 0 , 1 , 0 , 1 , 1 ) ; $ n = sizeof ( $ arr ) ; $ pre = array_fill ( 0 , $ n , NULL ) ; precompute ( $ arr , $ n , $ pre ) ; echo decimalOfSubarr ( $ arr , 2 , 4 , $ n , $ pre ) . \" \" ; echo decimalOfSubarr ( $ arr , 4 , 5 , $ n , $ pre ) . \" \" ; ? >"}
{"text":"function to count element Time complexity O ( n ^ 2 ) worst case","code":"< ? php function answerQuery ( $ a , $ n , $ l , $ r ) {"}
{"text":"answer for query","code":"$ count = 0 ;"}
{"text":"0 based index","code":"$ l = $ l - 1 ;"}
{"text":"iterate for all elements","code":"for ( $ i = $ l ; $ i < $ r ; $ i ++ ) { $ element = $ a [ $ i ] ; $ divisors = 0 ;"}
{"text":"check if the element divides all numbers in range","code":"for ( $ j = $ l ; $ j < $ r ; $ j ++ ) {"}
{"text":"no of elements","code":"if ( $ a [ $ j ] % $ a [ $ i ] == 0 ) $ divisors ++ ; else break ; }"}
{"text":"if all elements are divisible by a [ i ]","code":"if ( $ divisors == ( $ r - $ l ) ) $ count ++ ; }"}
{"text":"answer for every query","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 2 , 3 , 5 ) ; $ n = sizeof ( $ a ) ; $ l = 1 ; $ r = 4 ; echo answerQuery ( $ a , $ n , $ l , $ r ) . \" STRNEWLINE \" ; $ l = 2 ; $ r = 4 ; echo answerQuery ( $ a , $ n , $ l , $ r ) . \" STRNEWLINE \" ;"}
{"text":"PHP program to find smallest integer X such that sum of its XOR with range is maximum .","code":"< ? php $ one = array ( ) ; $ MAX = 2147483647 ;"}
{"text":"Function to make prefix array which counts 1 's of each bit up to that number","code":"function make_prefix ( $ A , $ n ) { global $ one , $ MAX ; for ( $ j = 0 ; $ j < 32 ; $ j ++ ) $ one [ 0 ] [ $ j ] = 0 ;"}
{"text":"Making a prefix array which sums number of 1 's up to  that position","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ a = $ A [ $ i - 1 ] ; for ( $ j = 0 ; $ j < 32 ; $ j ++ ) { $ x = pow ( 2 , $ j ) ;"}
{"text":"If j - th bit of a number is set then add one to previously counted 1 's","code":"if ( $ a & $ x ) $ one [ $ i ] [ $ j ] = 1 + $ one [ $ i - 1 ] [ $ j ] ; else $ one [ $ i ] [ $ j ] = $ one [ $ i - 1 ] [ $ j ] ; } } }"}
{"text":"Function to find X","code":"function Solve ( $ L , $ R ) { global $ one , $ MAX ; $ l = $ L ; $ r = $ R ; $ tot_bits = $ r - $ l + 1 ;"}
{"text":"Initially taking maximum value all bits 1","code":"$ X = $ MAX ;"}
{"text":"Iterating over each bit","code":"for ( $ i = 0 ; $ i < 31 ; $ i ++ ) {"}
{"text":"get 1 ' s \u2581 at \u2581 ith \u2581 bit \u2581 between \u2581 the \u2581 \u2581 range \u2581 L - R \u2581 by \u2581 subtracting \u2581 1' s till Rth number - 1 's till L-1th number","code":"$ x = $ one [ $ r ] [ $ i ] - $ one [ $ l - 1 ] [ $ i ] ;"}
{"text":"If 1 ' s \u2581 are \u2581 more \u2581 than \u2581 or \u2581 equal \u2581 \u2581 to \u2581 0' s then unset the ith bit from answer","code":"if ( $ x >= ( $ tot_bits - $ x ) ) { $ ith_bit = pow ( 2 , $ i ) ;"}
{"text":"Set ith bit to 0 by doing Xor with 1","code":"$ X = $ X ^ $ ith_bit ; } } return $ X ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ q = 3 ; $ A = [ 210 , 11 , 48 , 22 , 133 ] ; $ L = [ 1 , 4 , 2 ] ; $ R = [ 3 , 14 , 4 ] ; make_prefix ( $ A , $ n ) ; for ( $ j = 0 ; $ j < $ q ; $ j ++ ) echo ( Solve ( $ L [ $ j ] , $ R [ $ j ] ) . \" STRNEWLINE \" ) ; ? >"}
{"text":"Function to find the distinct pairs from 1 - a & 1 - b such that their sum is divisible by n .","code":"< ? php function findCountOfPairs ( $ a , $ b , $ n ) { $ ans = 0 ;"}
{"text":"Iterate over 1 to a to find distinct pairs","code":"for ( $ i = 1 ; $ i <= $ a ; $ i ++ ) {"}
{"text":"For each integer from 1 to a b \/ n integers exists such that pair sum is divisible by n","code":"$ ans += ( int ) ( $ b \/ $ n ) ;"}
{"text":"If ( i % n + b % n ) >= n one more pair is possible","code":"$ ans += ( ( $ i % $ n ) + ( $ b % $ n ) ) >= $ n ? 1 : 0 ; }"}
{"text":"Return answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ a = 5 ; $ b = 13 ; $ n = 3 ; echo findCountOfPairs ( $ a , $ b , $ n ) ; ? >"}
{"text":"See if we can buy less than 10 items Using 10 Rs coins and one r Rs coin","code":"< ? php function minItems ( $ k , $ r ) { for ( $ i = 1 ; $ i < 10 ; $ i ++ ) if ( ( $ i * $ k - $ r ) % 10 == 0 || ( $ i * $ k ) % 10 == 0 ) return $ i ;"}
{"text":"We can always buy 10 items","code":"return 10 ; }"}
{"text":"Driver Code","code":"$ k = 15 ; $ r = 2 ; echo minItems ( $ k , $ r ) ; ? >"}
{"text":"function that answers every query in O ( r - l )","code":"< ? php function answer_query ( $ a , $ n , $ l , $ r ) {"}
{"text":"traverse from l to r and count the required indexes","code":"$ count = 0 ; for ( $ i = $ l ; $ i < $ r ; $ i ++ ) if ( $ a [ $ i ] == $ a [ $ i + 1 ] ) $ count += 1 ; return $ count ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 2 , 2 , 2 , 3 , 3 , 4 , 4 , 4 ) ; $ n = count ( $ a ) ;"}
{"text":"1 - st query","code":"$ L = 1 ; $ R = 8 ; echo ( answer_query ( $ a , $ n , $ L , $ R ) . \" \" ) ;"}
{"text":"2 nd query","code":"$ L = 0 ; $ R = 4 ; echo ( answer_query ( $ a , $ n , $ L , $ R ) . \" \" ) ; ? >"}
{"text":"PHP program to count the number of indexes in range L R such that Ai = Ai + 1","code":"< ? php $ N = 1000 ;"}
{"text":"array to store count of index from 0 to i that obey condition","code":"$ prefixans = array_fill ( 0 , $ N , 0 ) ;"}
{"text":"precomputing prefixans [ ] array","code":"function countIndex ( $ a , $ n ) { global $ N , $ prefixans ;"}
{"text":"traverse to compute the prefixans [ ] array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ a [ $ i ] == $ a [ $ i + 1 ] ) $ prefixans [ $ i ] = 1 ; if ( $ i != 0 ) $ prefixans [ $ i ] += $ prefixans [ $ i - 1 ] ; } }"}
{"text":"function that answers every query in O ( 1 )","code":"function answer_query ( $ l , $ r ) { global $ N , $ prefixans ; if ( $ l == 0 ) return $ prefixans [ $ r - 1 ] ; else return ( $ prefixans [ $ r - 1 ] - $ prefixans [ $ l - 1 ] ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 2 , 2 , 2 , 3 , 3 , 4 , 4 , 4 ) ; $ n = count ( $ a ) ;"}
{"text":"pre - computation","code":"countIndex ( $ a , $ n ) ;"}
{"text":"1 - st query","code":"$ L = 1 ; $ R = 8 ; echo ( answer_query ( $ L , $ R ) . \" \" ) ;"}
{"text":"2 nd query","code":"$ L = 0 ; $ R = 4 ; echo ( answer_query ( $ L , $ R ) . \" \" ) ; ? >"}
{"text":"Function to count subarrays with Prime sum","code":"< ? php function primeSubarrays ( $ A , $ n ) { $ max_val = pow ( 10 , 5 ) ;"}
{"text":"USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array \" prime [ 0 . . n ] \" . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ max_val + 1 , true ) ;"}
{"text":"Remaining part of SIEVE","code":"$ prime [ 0 ] = false ; $ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ max_val ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ max_val ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Initialize result","code":"$ cnt = 0 ;"}
{"text":"Traverse through the array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { $ val = $ A [ $ i ] ; for ( $ j = $ i + 1 ; $ j < $ n ; ++ $ j ) { $ val += $ A [ $ j ] ; if ( $ prime [ $ val ] ) ++ $ cnt ; } }"}
{"text":"return answer","code":"return $ cnt ; }"}
{"text":"Driver program","code":"$ A = array ( 1 , 2 , 3 , 4 , 5 ) ; $ n = count ( $ A ) ; echo primeSubarrays ( $ A , $ n ) ; ? >"}
{"text":"Function to check if the given number has repeated digit or not","code":"< ? php function repeated_digit ( $ n ) { $ c = 10 ; $ a = array_fill ( 0 , $ c , 0 ) ;"}
{"text":"Traversing through each digit","code":"while ( $ n > 0 ) { $ d = $ n % 10 ;"}
{"text":"if the digit is present more than once in the number","code":"if ( $ a [ $ d ] > 0 ) {"}
{"text":"return 0 if the number has repeated digit","code":"return 0 ; } $ a [ $ d ] ++ ; $ n = ( int ) ( $ n \/ 10 ) ; }"}
{"text":"return 1 if the number has no repeated digit","code":"return 1 ; }"}
{"text":"Function to find total number in the given range which has no repeated digit","code":"function calculate ( $ L , $ R ) { $ answer = 0 ;"}
{"text":"Traversing through the range","code":"for ( $ i = $ L ; $ i <= $ R ; $ i ++ ) {"}
{"text":"Add 1 to the answer if i has no repeated digit else 0","code":"$ answer += repeated_digit ( $ i ) ; } return $ answer ; }"}
{"text":"Driver Code","code":"$ L = 1 ; $ R = 100 ;"}
{"text":"Calling the calculate","code":"echo calculate ( $ L , $ R ) ; ? >"}
{"text":"returns the minimum number of swaps of a binary string passed as the argument to make it alternating","code":"< ? php function countMinSwaps ( $ st ) { $ min_swaps = 0 ;"}
{"text":"counts number of zeroes at odd and even positions","code":"$ odd_0 = 0 ; $ even_0 = 0 ;"}
{"text":"counts number of ones at odd and even positions","code":"$ odd_1 = 0 ; $ even_1 = 0 ; $ n = strlen ( $ st ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ i % 2 == 0 ) { if ( $ st [ $ i ] == '1' ) { $ even_1 ++ ; } else { $ even_0 ++ ; } } else { if ( $ st [ $ i ] == '1' ) { $ odd_1 ++ ; } else { $ odd_0 ++ ; } } }"}
{"text":"alternating string starts with 0","code":"$ cnt_swaps_1 = min ( $ even_0 , $ odd_1 ) ;"}
{"text":"alternating string starts with 1","code":"$ cnt_swaps_2 = min ( $ even_1 , $ odd_0 ) ;"}
{"text":"calculates the minimum number of swaps","code":"return min ( $ cnt_swaps_1 , $ cnt_swaps_2 ) ; }"}
{"text":"Driver code","code":"$ st = \"000111\" ; echo ( countMinSwaps ( $ st ) ) ; ? >"}
{"text":"computing ( a ^ b ) % c","code":"< ? php function modpow ( $ base , $ exp , $ modulus ) { $ base %= $ modulus ; $ result = 1 ; while ( $ exp > 0 ) { if ( $ exp & 1 ) $ result = ( $ result * $ base ) % $ modulus ; $ base = ( $ base * $ base ) % $ modulus ; $ exp >>= 1 ; } return $ result ; }"}
{"text":"Driver code","code":"$ n = 654654 ; $ mod = 971 ; echo ( ( ( modpow ( $ n , 6 , $ mod ) + modpow ( $ n , 2 , $ mod ) ) % $ mod + 355 ) % $ mod ) ; ? >"}
{"text":"PHP program to print largest contiguous array sum","code":"< ? php function maxSubArraySum ( $ a , $ size ) { $ max_so_far = PHP_INT_MIN ; $ max_ending_here = 0 ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { $ max_ending_here = $ max_ending_here + $ a [ $ i ] ; if ( $ max_so_far < $ max_ending_here ) $ max_so_far = $ max_ending_here ; if ( $ max_ending_here < 0 ) $ max_ending_here = 0 ; } return $ max_so_far ; }"}
{"text":"Driver code","code":"$ a = array ( -2 , -3 , 4 , -1 , -2 , 1 , 5 , -3 ) ; $ n = count ( $ a ) ; $ max_sum = maxSubArraySum ( $ a , $ n ) ; echo \" Maximum \u2581 contiguous \u2581 sum \u2581 is \u2581 \" , $ max_sum ; ? >"}
{"text":"Do not compare for all elements . Compare only when max_ending_here > 0","code":"else if ( $ max_so_far < $ max_ending_here ) $ max_so_far = $ max_ending_here ; } return $ max_so_far ; ? >"}
{"text":"Returns minimum number of rooms required to perform classes of n groups in m slots with given schedule .","code":"< ? php function findMinRooms ( $ slots , $ n , $ m ) {"}
{"text":"Store count of classes happening in every slot .","code":"$ counts = array_fill ( 0 , $ m , 0 ) ;"}
{"text":"initialize all values to zero","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ m ; $ j ++ ) if ( $ slots [ $ i ] [ $ j ] == '1' ) $ counts [ $ j ] ++ ;"}
{"text":"Number of rooms required is equal to maximum classes happening in a particular slot .","code":"return max ( $ counts ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ m = 7 ; $ slots = array ( \"0101011\" , \"0011001\" , \"0110111\" ) ; echo findMinRooms ( $ slots , $ n , $ m ) ; ? >"}
{"text":"Driver Code","code":"$ a = array ( -2 , -3 , 4 , -1 , -2 , 1 , 5 , -3 ) ; $ n = sizeof ( $ a ) ; $ max_sum = maxSubArraySum ( $ a , $ n ) ; echo \" Maximum \u2581 contiguous \u2581 sum \u2581 is \u2581 \" . $ max_sum ; ? >"}
{"text":"PHP program to print largest contiguous array sum","code":"< ? php function maxSubArraySum ( $ a , $ size ) { $ max_so_far = PHP_INT_MIN ; $ max_ending_here = 0 ; $ start = 0 ; $ end = 0 ; $ s = 0 ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { $ max_ending_here += $ a [ $ i ] ; if ( $ max_so_far < $ max_ending_here ) { $ max_so_far = $ max_ending_here ; $ start = $ s ; $ end = $ i ; } if ( $ max_ending_here < 0 ) { $ max_ending_here = 0 ; $ s = $ i + 1 ; } } echo \" Maximum \u2581 contiguous \u2581 sum \u2581 is \u2581 \" . $ max_so_far . \" STRNEWLINE \" ; echo \" Starting \u2581 index \u2581 \" . $ start . \" \" . STRNEWLINE \" Ending index \" \u2581 . \u2581 $ end \u2581 . \u2581 \" \" }"}
{"text":"Driver Code","code":"$ a = array ( -2 , -3 , 4 , -1 , -2 , 1 , 5 , -3 ) ; $ n = sizeof ( $ a ) ; $ max_sum = maxSubArraySum ( $ a , $ n ) ; ? >"}
{"text":"function to count and prcurrency notes","code":"< ? php function countCurrency ( $ amount ) { $ notes = array ( 2000 , 500 , 200 , 100 , 50 , 20 , 10 , 5 , 1 ) ; $ noteCounter = array ( 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ) ;"}
{"text":"count notes using Greedy approach","code":"for ( $ i = 0 ; $ i < 9 ; $ i ++ ) { if ( $ amount >= $ notes [ $ i ] ) { $ noteCounter [ $ i ] = intval ( $ amount \/ $ notes [ $ i ] ) ; $ amount = $ amount - $ noteCounter [ $ i ] * $ notes [ $ i ] ; } }"}
{"text":"Print notes","code":"echo ( \" Currency \u2581 Count \u2581 - > \" . \" STRNEWLINE \" ) ; for ( $ i = 0 ; $ i < 9 ; $ i ++ ) { if ( $ noteCounter [ $ i ] != 0 ) { echo ( $ notes [ $ i ] . \" : \" \u2581 . \u2581 $ noteCounter [ $ i ] \u2581 . \u2581 \" \" } } }"}
{"text":"Driver Code","code":"$ amount = 868 ; countCurrency ( $ amount ) ; ? >"}
{"text":"Returns minimum possible sum in array B [ ]","code":"< ? php function minSum ( $ A , $ n ) { $ min_val = min ( $ A ) ; return ( $ min_val * ( $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ A = array ( 3 , 6 , 2 , 8 , 7 , 5 ) ; $ n = count ( $ A ) ; echo minSum ( $ A , $ n ) ; ? >"}
{"text":"Function to allocate memory to blocks as per Next fit algorithm","code":"< ? php function NextFit ( $ blockSize , $ m , $ processSize , $ n ) {"}
{"text":"Stores block id of the block allocated to a process","code":"$ allocation = array_fill ( 0 , $ n , -1 ) ; $ j = 0 ;"}
{"text":"pick each process and find suitable blocks according to its size ad assign to it","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Do not start from beginning","code":"while ( $ j < $ m ) { if ( $ blockSize [ $ j ] >= $ processSize [ $ i ] ) {"}
{"text":"allocate block j to p [ i ] process","code":"$ allocation [ $ i ] = $ j ;"}
{"text":"Reduce available memory in this block .","code":"$ blockSize [ $ j ] -= $ processSize [ $ i ] ; break ; }"}
{"text":"mod m will help in traversing the blocks from starting block after we reach the end .","code":"$ j = ( $ j + 1 ) % $ m ; } } echo \" Process No . Process Size Block no . \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo \" \" . ( $ i \u2581 + \u2581 1 ) . \" \" . $ processSize [ $ i ] . \" \" if ( $ allocation [ $ i ] != -1 ) echo ( $ allocation [ $ i ] + 1 ) ; else echo \" Not \u2581 Allocated \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driver program","code":"$ blockSize = array ( 5 , 10 , 20 ) ; $ processSize = array ( 10 , 20 , 5 ) ; $ m = count ( $ blockSize ) ; $ n = count ( $ processSize ) ; NextFit ( $ blockSize , $ m , $ processSize , $ n ) ; ? >"}
{"text":"Prints beginning and ending indexes of subarray of size k with minimum average","code":"< ? php function findMinAvgSubarray ( $ arr , $ n , $ k ) {"}
{"text":"k must be smaller than or equal to n","code":"if ( $ n < $ k ) return ;"}
{"text":"Initialize beginning index of result","code":"$ res_index = 0 ;"}
{"text":"Compute sum of first subarray of size k","code":"$ curr_sum = 0 ; for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ curr_sum += $ arr [ $ i ] ;"}
{"text":"Initialize minimum sum as current sum","code":"$ min_sum = $ curr_sum ;"}
{"text":"Traverse from ( k + 1 ) ' th \u2581 element \u2581 \u2581 to \u2581 n ' th element","code":"for ( $ i = $ k ; $ i < $ n ; $ i ++ ) {"}
{"text":"Add current item and remove first item of previous subarray","code":"$ curr_sum += $ arr [ $ i ] - $ arr [ $ i - $ k ] ;"}
{"text":"Update result if needed","code":"if ( $ curr_sum < $ min_sum ) { $ min_sum = $ curr_sum ; $ res_index = ( $ i - $ k + 1 ) ; } } echo \" Subarray between [ \" \u2581 , $ res _ index \u2581 , \u2581 \" , \" \u2581 , $ res _ index \u2581 + \u2581 $ k \u2581 - \u2581 1 , \u2581 \" ] has minimum average \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 7 , 90 , 20 , 10 , 50 , 40 ) ;"}
{"text":"Subarray size","code":"$ k = 3 ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; findMinAvgSubarray ( $ arr , $ n , $ k ) ; return 0 ; ? >"}
{"text":"Precomputed values of segment used by digit 0 to 9.","code":"< ? php $ seg = array ( 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 ) ;"}
{"text":"Return the number of segments used by x .","code":"function computeSegment ( $ x ) { global $ seg ; if ( $ x == 0 ) return $ seg [ 0 ] ; $ count = 0 ;"}
{"text":"Finding sum of the segment used by each digit of a number .","code":"while ( $ x ) { $ count += $ seg [ $ x % 10 ] ; $ x = ( int ) $ x \/ 10 ; } return $ count ; } function elementMinSegment ( $ arr , $ n ) {"}
{"text":"Initialising the minimum segment and minimum number index .","code":"$ minseg = computeSegment ( $ arr [ 0 ] ) ; $ minindex = 0 ;"}
{"text":"Finding and comparing segment used by each number arr [ i ] .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ temp = computeSegment ( $ arr [ $ i ] ) ;"}
{"text":"If arr [ i ] used less segment then update minimum segment and minimum number .","code":"if ( $ temp < $ minseg ) { $ minseg = $ temp ; $ minindex = $ i ; } } return $ arr [ $ minindex ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 489 , 206 , 745 , 123 , 756 ) ; $ n = sizeof ( $ arr ) ; echo elementMinSegment ( $ arr , $ n ) , \" \" ; ? >"}
{"text":"Prints the smalles possible number with digit sum ' s ' and ' m ' number of digits .","code":"< ? php function findLargest ( $ m , $ s ) {"}
{"text":"If sum of digits is 0 , then a number is possible only if number of digits is 1.","code":"if ( $ s == 0 ) { if ( ( $ m == 1 ) == true ) echo \" Largest \u2581 number \u2581 is \u2581 \" , 0 ; else echo \" Not \u2581 possible \" ; return ; }"}
{"text":"Sum greater than the maximum possible sum .","code":"if ( $ s > 9 * $ m ) { echo \" Not \u2581 possible \" ; return ; }"}
{"text":"Fill from most significant digit to least significant digit .","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) {"}
{"text":"Fill 9 first to make the number largest","code":"if ( $ s >= 9 ) { $ res [ $ i ] = 9 ; $ s -= 9 ; }"}
{"text":"If remaining sum becomes less than 9 , then fill the remaining sum","code":"else { $ res [ $ i ] = $ s ; $ s = 0 ; } } echo \" Largest \u2581 number \u2581 is \u2581 \" ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) echo $ res [ $ i ] ; }"}
{"text":"Driver code","code":"$ s = 9 ; $ m = 2 ; findLargest ( $ m , $ s ) ; ? >"}
{"text":"Returns minimum number of jumps to reach arr [ h ] from arr [ l ]","code":"< ? php function minJumps ( $ arr , $ l , $ h ) {"}
{"text":"Base case : when source and destination are same","code":"if ( $ h == $ l ) return 0 ;"}
{"text":"When nothing is reachable from the given source","code":"if ( $ arr [ $ l ] == 0 ) return INT_MAX ;"}
{"text":"Traverse through all the points reachable from arr [ l ] . Recursively get the minimum number of jumps needed to reach arr [ h ] from these reachable points .","code":"$ min = 999999 ; for ( $ i = $ l + 1 ; $ i <= $ h && $ i <= $ l + $ arr [ $ l ] ; $ i ++ ) { $ jumps = minJumps ( $ arr , $ i , $ h ) ; if ( $ jumps != 999999 && $ jumps + 1 < $ min ) $ min = $ jumps + 1 ; } return $ min ; }"}
{"text":"Driver program to test above function","code":"$ arr = array ( 1 , 3 , 6 , 3 , 2 , 3 , 6 , 8 , 9 , 5 ) ; $ n = count ( $ arr ) ; echo \" Minimum \u2581 number \u2581 of \u2581 jumps \u2581 to \u2581 reach \u2581 \" . \" end \u2581 is \u2581 \" . minJumps ( $ arr , 0 , $ n - 1 ) ; ? >"}
{"text":"Returns Minimum number of jumps to reach end","code":"< ? php function minJumps ( $ arr , $ n ) {"}
{"text":"jumps [ 0 ] will hold the result","code":"$ jumps [ $ n ] = array ( ) ; $ min ;"}
{"text":"Minimum number of jumps needed to reach last element from last elements itself is always 0","code":"$ jumps [ $ n - 1 ] = array ( 0 ) ;"}
{"text":"Start from the second element , move from right to left and construct the jumps [ ] array where jumps [ i ] represents minimum number of jumps needed to reach arr [ m - 1 ] from arr [ i ]","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"If arr [ i ] is 0 then arr [ n - 1 ] can 't be reached from here","code":"if ( $ arr [ $ i ] == 0 ) $ jumps [ $ i ] = PHP_INT_MAX ;"}
{"text":"If we can direcly reach to the end point from here then jumps [ i ] is 1","code":"else if ( $ arr [ $ i ] >= ( $ n - $ i ) - 1 ) $ jumps [ $ i ] = 1 ;"}
{"text":"Otherwise , to find out the minimum number of jumps needed to reach arr [ n - 1 ] , check all the points reachable from here and jumps [ ] value for those points","code":"else {"}
{"text":"initialize min value","code":"$ min = PHP_INT_MAX ;"}
{"text":"following loop checks with all reachable points and takes the minimum","code":"for ( $ j = $ i + 1 ; $ j < $ n && $ j <= $ arr [ $ i ] + $ i ; $ j ++ ) { if ( $ min > $ jumps [ $ j ] ) $ min = $ jumps [ $ j ] ; }"}
{"text":"Handle overflow","code":"if ( $ min != PHP_INT_MAX ) $ jumps [ $ i ] = $ min + 1 ; else"}
{"text":"or INT_MAX","code":"$ jumps [ $ i ] = $ min ; } } return $ jumps [ 0 ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 6 , 1 , 0 , 9 ) ; $ size = sizeof ( $ arr ) ; echo \" Minimum \u2581 number \u2581 of \u2581 jumps \u2581 to \u2581 reach \" , \" \u2581 end \u2581 is \u2581 \" , minJumps ( $ arr , $ size ) ; ? >"}
{"text":"Returns length of smallest subarray with sum greater than x . If there is no subarray with given sum , then returns n + 1","code":"< ? php function smallestSubWithSum ( $ arr , $ n , $ x ) {"}
{"text":"Initialize length of smallest subarray as n + 1","code":"$ min_len = $ n + 1 ;"}
{"text":"Pick every element as starting point","code":"for ( $ start = 0 ; $ start < $ n ; $ start ++ ) {"}
{"text":"Initialize sum starting with current start","code":"$ curr_sum = $ arr [ $ start ] ;"}
{"text":"If first element itself is greater","code":"if ( $ curr_sum > $ x ) return 1 ;"}
{"text":"Try different ending points for curremt start","code":"for ( $ end = $ start + 1 ; $ end < $ n ; $ end ++ ) {"}
{"text":"add last element to current sum","code":"$ curr_sum += $ arr [ $ end ] ;"}
{"text":"If sum becomes more than x and length of this subarray is smaller than current smallest length , update the smallest length ( or result )","code":"if ( $ curr_sum > $ x && ( $ end - $ start + 1 ) < $ min_len ) $ min_len = ( $ end - $ start + 1 ) ; } } return $ min_len ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 4 , 45 , 6 , 10 , 19 ) ; $ x = 51 ; $ n1 = sizeof ( $ arr1 ) ; $ res1 = smallestSubWithSum ( $ arr1 , $ n1 , $ x ) ; if ( ( $ res1 == $ n1 + 1 ) == true ) echo \" Not \u2581 possible STRNEWLINE \" ; else echo $ res1 , \" STRNEWLINE \" ; $ arr2 = array ( 1 , 10 , 5 , 2 , 7 ) ; $ n2 = sizeof ( $ arr2 ) ; $ x = 9 ; $ res2 = smallestSubWithSum ( $ arr2 , $ n2 , $ x ) ; if ( ( $ res2 == $ n2 + 1 ) == true ) echo \" Not \u2581 possible STRNEWLINE \" ; else echo $ res2 , \" STRNEWLINE \" ; $ arr3 = array ( 1 , 11 , 100 , 1 , 0 , 200 , 3 , 2 , 1 , 250 ) ; $ n3 = sizeof ( $ arr3 ) ; $ x = 280 ; $ res3 = smallestSubWithSum ( $ arr3 , $ n3 , $ x ) ; if ( ( $ res3 == $ n3 + 1 ) == true ) echo \" Not \u2581 possible STRNEWLINE \" ; else echo $ res3 , \" STRNEWLINE \" ; ? >"}
{"text":"Returns length of smallest subarray with sum greater than x . If there is no subarray with given sum , then returns n + 1","code":"< ? php function smallestSubWithSum ( $ arr , $ n , $ x ) {"}
{"text":"Initialize current sum and minimum length","code":"$ curr_sum = 0 ; $ min_len = $ n + 1 ;"}
{"text":"Initialize starting and ending indexes","code":"$ start = 0 ; $ end = 0 ; while ( $ end < $ n ) {"}
{"text":"Keep adding array elements while current sum is smaller than or equal to x","code":"while ( $ curr_sum <= $ x && $ end < $ n ) $ curr_sum += $ arr [ $ end ++ ] ;"}
{"text":"If current sum becomes greater than x .","code":"while ( $ curr_sum > $ x && $ start < $ n ) {"}
{"text":"Update minimum length if needed","code":"if ( $ end - $ start < $ min_len ) $ min_len = $ end - $ start ;"}
{"text":"remove starting elements","code":"$ curr_sum -= $ arr [ $ start ++ ] ; } } return $ min_len ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 4 , 45 , 6 , 10 , 19 ) ; $ x = 51 ; $ n1 = sizeof ( $ arr1 ) ; $ res1 = smallestSubWithSum ( $ arr1 , $ n1 , $ x ) ; if ( $ res1 == $ n1 + 1 ) echo \" Not \u2581 possible STRNEWLINE \" ; else echo $ res1 , \" STRNEWLINE \" ; $ arr2 = array ( 1 , 10 , 5 , 2 , 7 ) ; $ n2 = sizeof ( $ arr2 ) ; $ x = 9 ; $ res2 = smallestSubWithSum ( $ arr2 , $ n2 , $ x ) ; if ( $ res2 == $ n2 + 1 ) echo \" Not \u2581 possible STRNEWLINE \" ; else echo $ res2 , \" STRNEWLINE \" ; $ arr3 = array ( 1 , 11 , 100 , 1 , 0 , 200 , 3 , 2 , 1 , 250 ) ; $ n3 = sizeof ( $ arr3 ) ; $ x = 280 ; $ res3 = smallestSubWithSum ( $ arr3 , $ n3 , $ x ) ; if ( $ res3 == $ n3 + 1 ) echo \" Not \u2581 possible STRNEWLINE \" ; else echo $ res3 , \" STRNEWLINE \" ; ? >"}
{"text":"Returns count of minimum operations to convert a zero array to target array with increment and doubling operations . This function computes count by doing reverse steps , i . e . , convert target to zero array .","code":"< ? php function countMinOperations ( $ target , $ n ) {"}
{"text":"Initialize result ( Count of minimum moves )","code":"$ result = 0 ;"}
{"text":"Keep looping while all elements of target don 't become 0.","code":"while ( 1 ) {"}
{"text":"To store count of zeroes in current target array","code":"$ zero_count = 0 ;"}
{"text":"To find first odd element","code":"$ i = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If odd number found","code":"if ( $ target [ $ i ] & 1 ) break ;"}
{"text":"If 0 , then increment zero_count","code":"else if ( $ target [ $ i ] == 0 ) $ zero_count ++ ; }"}
{"text":"All numbers are 0","code":"if ( $ zero_count == $ n ) return $ result ;"}
{"text":"All numbers are even","code":"if ( $ i == $ n ) {"}
{"text":"Divide the whole array by 2 and increment result","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ target [ $ j ] = $ target [ $ j ] \/ 2 ; $ result ++ ; }"}
{"text":"Make all odd numbers even by subtracting one and increment result .","code":"for ( $ j = $ i ; $ j < $ n ; $ j ++ ) { if ( $ target [ $ j ] & 1 ) { $ target [ $ j ] -- ; $ result ++ ; } } } }"}
{"text":"Driver Code","code":"$ arr = array ( 16 , 16 , 16 ) ; $ n = sizeof ( $ arr ) ; echo \" Minimum \u2581 number \u2581 of \u2581 steps \u2581 required \u2581 to \u2581 STRNEWLINE \" . \" get \u2581 the \u2581 given \u2581 target \u2581 array \u2581 is \u2581 \" . countMinOperations ( $ arr , $ n ) ; ? >"}
{"text":"Returns minimum number of count operations required to make arr [ ] palindrome","code":"< ? php function findMinOps ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ ans = 1 ;"}
{"text":"Start from two corners","code":"for ( $ i = 0 , $ j = $ n - 1 ; $ i <= $ j {"}
{"text":"If corner elements are same , problem reduces arr [ i + 1. . j - 1 ]","code":"if ( $ arr [ $ i ] == $ arr [ $ j ] ) { $ i ++ ; $ j -- ; }"}
{"text":"If left element is greater , then we merge right two elements","code":"else if ( $ arr [ $ i ] > $ arr [ $ j ] ) {"}
{"text":"need to merge from tail .","code":"$ j -- ; $ arr [ $ j ] += $ arr [ $ j + 1 ] ; $ ans ++ ; }"}
{"text":"Else we merge left two elements","code":"else { $ i ++ ; $ arr [ $ i ] += $ arr [ $ i - 1 ] ; $ ans ++ ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr [ ] = array ( 1 , 4 , 5 , 9 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" Count \u2581 of \u2581 minimum \u2581 operations \u2581 is \u2581 \" , findMinOps ( $ arr , $ n ) ; ? >"}
{"text":"Returns the smallest number that cannot be represented as sum of subset of elements from set represented by sorted array arr [ 0. . n - 1 ]","code":"< ? php function findSmallest ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ res = 1 ;"}
{"text":"Traverse the array and increment ' res ' if arr [ i ] is smaller than or equal to ' res ' .","code":"for ( $ i = 0 ; $ i < $ n and $ arr [ $ i ] <= $ res ; $ i ++ ) $ res = $ res + $ arr [ $ i ] ; return $ res ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 3 , 4 , 5 ) ; $ n1 = count ( $ arr1 ) ; echo findSmallest ( $ arr1 , $ n1 ) , \" STRNEWLINE \" ; $ arr2 = array ( 1 , 2 , 6 , 10 , 11 , 15 ) ; $ n2 = count ( $ arr2 ) ; echo findSmallest ( $ arr2 , $ n2 ) , \" STRNEWLINE \" ; $ arr3 = array ( 1 , 1 , 1 , 1 ) ; $ n3 = count ( $ arr3 ) ; echo findSmallest ( $ arr3 , $ n3 ) , \" STRNEWLINE \" ; $ arr4 = array ( 1 , 1 , 3 , 4 ) ; $ n4 = count ( $ arr4 ) ; echo findSmallest ( $ arr4 , $ n4 ) ; ? >"}
{"text":"Returns minimum difference between any pair","code":"< ? php function findMinDiff ( $ arr , $ n ) {"}
{"text":"Initialize difference as infinite","code":"$ diff = PHP_INT_MAX ;"}
{"text":"Find the min diff by comparing difference of all possible pairs in given array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( abs ( $ arr [ $ i ] - $ arr [ $ j ] ) < $ diff ) $ diff = abs ( $ arr [ $ i ] - $ arr [ $ j ] ) ;"}
{"text":"Return min diff","code":"return $ diff ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 5 , 3 , 19 , 18 , 25 ) ; $ n = sizeof ( $ arr ) ; echo \" Minimum \u2581 difference \u2581 is \u2581 \" , findMinDiff ( $ arr , $ n ) ; ? >"}
{"text":"Returns minimum difference between any pair","code":"< ? php function findMinDiff ( $ arr , $ n ) {"}
{"text":"Sort array in non - decreasing order","code":"sort ( $ arr ) ;"}
{"text":"Initialize difference as infinite","code":"$ diff = PHP_INT_MAX ;"}
{"text":"Find the min diff by comparing adjacent pairs in sorted array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ arr [ $ i + 1 ] - $ arr [ $ i ] < $ diff ) $ diff = $ arr [ $ i + 1 ] - $ arr [ $ i ] ;"}
{"text":"Return min diff","code":"return $ diff ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 5 , 3 , 19 , 18 , 25 ) ; $ n = sizeof ( $ arr ) ; echo \" Minimum \u2581 difference \u2581 is \u2581 \" , findMinDiff ( $ arr , $ n ) ; ? >"}
{"text":"Driver Code","code":"< ? php $ a = 2 ; $ b = 10 ; $ size = abs ( $ b - $ a ) + 1 ; $ array = array_fill ( 0 , $ size , 0 ) ;"}
{"text":"Iterate through a to b , If it is a multiple of 2 or 5 Mark index in array as 1","code":"for ( $ i = $ a ; $ i <= $ b ; $ i ++ ) if ( $ i % 2 == 0 $ i % 5 == 0 ) $ array [ $ i - $ a ] = 1 ; echo \" MULTIPLES \u2581 of \u2581 2 \u2581 and \u2581 5 : STRNEWLINE \" ; for ( $ i = $ a ; $ i <= $ b ; $ i ++ ) if ( $ array [ $ i - $ a ] == 1 ) echo $ i . \" \" ; ? >"}
{"text":"Returns length of the longest common subarray with same sum","code":"< ? php function longestCommonSum ( $ arr1 , $ arr2 , $ n ) {"}
{"text":"Initialize result","code":"$ maxLen = 0 ;"}
{"text":"One by one pick all possible starting points of subarrays","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Initialize sums of current subarrays","code":"$ sum1 = 0 ; $ sum2 = 0 ;"}
{"text":"Conider all points for starting with arr [ i ]","code":"for ( $ j = $ i ; $ j < $ n ; $ j ++ ) {"}
{"text":"Update sums","code":"$ sum1 += $ arr1 [ $ j ] ; $ sum2 += $ arr2 [ $ j ] ;"}
{"text":"If sums are same and current length is more than maxLen , update maxLen","code":"if ( $ sum1 == $ sum2 ) { $ len = $ j - $ i + 1 ; if ( $ len > $ maxLen ) $ maxLen = $ len ; } } } return $ maxLen ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 0 , 1 , 0 , 1 , 1 , 1 , 1 ) ; $ arr2 = array ( 1 , 1 , 1 , 1 , 1 , 0 , 1 ) ; $ n = sizeof ( $ arr1 ) ; echo \" Length \u2581 of \u2581 the \u2581 longest \u2581 common \u2581 span \u2581 \" . \" with \u2581 same \u2581 \" , \" sum \u2581 is \u2581 \" , longestCommonSum ( $ arr1 , $ arr2 , $ n ) ; ? >"}
{"text":"Assuming - 1 is filled for the places where element is not available","code":"< ? php $ NA = -1 ;"}
{"text":"Function to move m elements at the end of array mPlusN [ ]","code":"function moveToEnd ( & $ mPlusN , $ size ) { global $ NA ; $ j = $ size - 1 ; for ( $ i = $ size - 1 ; $ i >= 0 ; $ i -- ) if ( $ mPlusN [ $ i ] != $ NA ) { $ mPlusN [ $ j ] = $ mPlusN [ $ i ] ; $ j -- ; } }"}
{"text":"Merges array N [ ] of size n into array mPlusN [ ] of size m + n","code":"function merge ( & $ mPlusN , & $ N , $ m , $ n ) { $ i = $ n ;"}
{"text":"Current index of i \/ p part of mPlusN [ ]","code":"$ j = 0 ;"}
{"text":"Current index of N [ ]","code":"$ k = 0 ;"}
{"text":"Current index of output mPlusN [ ]","code":"while ( $ k < ( $ m + $ n ) ) {"}
{"text":"Take an element from mPlusN [ ] if a ) value of the picked element is smaller and we have not reached end of it b ) We have reached end of N [ ]","code":"if ( ( $ j == $ n ) || ( $ i < ( $ m + $ n ) && $ mPlusN [ $ i ] <= $ N [ $ j ] ) ) { $ mPlusN [ $ k ] = $ mPlusN [ $ i ] ; $ k ++ ; $ i ++ ; }"}
{"text":"Otherwise take element from N [ ]","code":"else { $ mPlusN [ $ k ] = $ N [ $ j ] ; $ k ++ ; $ j ++ ; } } }"}
{"text":"Utility that prints out an array on a line","code":"function printArray ( & $ arr , $ size ) { for ( $ i = 0 ; $ i < $ size ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Initialize arrays","code":"$ mPlusN = array ( 2 , 8 , $ NA , $ NA , $ NA , 13 , $ NA , 15 , 20 ) ; $ N = array ( 5 , 7 , 9 , 25 ) ; $ n = sizeof ( $ N ) ; $ m = sizeof ( $ mPlusN ) - $ n ;"}
{"text":"Move the m elements at the end of mPlusN","code":"moveToEnd ( $ mPlusN , $ m + $ n ) ;"}
{"text":"Merge N [ ] into mPlusN [ ]","code":"merge ( $ mPlusN , $ N , $ m , $ n ) ;"}
{"text":"Print the resultant mPlusN","code":"printArray ( $ mPlusN , $ m + $ n ) ; ? >"}
{"text":"Return true if array can be sorted otherwise false","code":"< ? php function sortedAfterSwap ( $ A , $ B , $ n ) {"}
{"text":"Check bool array B and sorts elements for continuous sequence of 1","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ B [ $ i ] ) { $ j = $ i ; while ( $ B [ $ j ] ) $ j ++ ;"}
{"text":"Sort array A from i to j","code":"sort ( $ A ) ; $ i = $ j ; } }"}
{"text":"Check if array is sorted or not","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ A [ $ i ] != $ i + 1 ) return false ; } return true ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 2 , 5 , 3 , 4 , 6 ) ; $ B = array ( 0 , 1 , 1 , 1 , 0 ) ; $ n = count ( $ A ) ; if ( sortedAfterSwap ( $ A , $ B , $ n ) ) echo \" A \u2581 can \u2581 be \u2581 sorted STRNEWLINE \" ; else echo \" A \u2581 can \u2581 not \u2581 be \u2581 sorted STRNEWLINE \" ; ? >"}
{"text":"Return true if array can be sorted otherwise false","code":"< ? php function sortedAfterSwap ( & $ A , & $ B , $ n ) { for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ B [ $ i ] ) { if ( $ A [ $ i ] != $ i + 1 ) { $ t = $ A [ $ i ] ; $ A [ $ i ] = $ A [ $ i + 1 ] ; $ A [ $ i + 1 ] = $ t ; } } }"}
{"text":"Check if array is sorted or not","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ A [ $ i ] != $ i + 1 ) return false ; } return true ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 2 , 5 , 3 , 4 , 6 ) ; $ B = array ( 0 , 1 , 1 , 1 , 0 ) ; $ n = sizeof ( $ A ) ; if ( sortedAfterSwap ( $ A , $ B , $ n ) ) echo \" A \u2581 can \u2581 be \u2581 sorted STRNEWLINE \" ; else echo \" A \u2581 can \u2581 not \u2581 be \u2581 sorted STRNEWLINE \" ; ? >"}
{"text":"Method for segregation 0 and 1 given input array","code":"< ? php function segregate0and1 ( $ arr , $ n ) { $ type0 = 0 ; $ type1 = $ n - 1 ; while ( $ type0 < $ type1 ) { if ( $ arr [ $ type0 ] == 1 ) { $ temp = $ arr [ $ type0 ] ; $ arr [ $ type0 ] = $ arr [ $ type1 ] ; $ arr [ $ type1 ] = $ temp ; $ type1 -- ; } else { $ type0 ++ ; } } return $ arr ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 ) ; $ n = count ( $ arr ) ; $ arr1 = segregate0and1 ( $ arr , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr1 [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"PHP program to Count Inversions in an array","code":"< ? php function getInvCount ( & $ arr , $ n ) { $ inv_count = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ i ] > $ arr [ $ j ] ) $ inv_count ++ ; return $ inv_count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 20 , 6 , 4 , 5 ) ; $ n = sizeof ( $ arr ) ; echo \" Number \u2581 of \u2581 inversions \u2581 are \u2581 \" , getInvCount ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find the Two elements whose sum is closest to zero","code":"< ? php function minAbsSumPair ( $ arr , $ arr_size ) { $ inv_count = 0 ;"}
{"text":"Array should have at least two elements","code":"if ( $ arr_size < 2 ) { echo \" Invalid \u2581 Input \" ; return ; }"}
{"text":"Initialization of values","code":"$ min_l = 0 ; $ min_r = 1 ; $ min_sum = $ arr [ 0 ] + $ arr [ 1 ] ; for ( $ l = 0 ; $ l < $ arr_size - 1 ; $ l ++ ) { for ( $ r = $ l + 1 ; $ r < $ arr_size ; $ r ++ ) { $ sum = $ arr [ $ l ] + $ arr [ $ r ] ; if ( abs ( $ min_sum ) > abs ( $ sum ) ) { $ min_sum = $ sum ; $ min_l = $ l ; $ min_r = $ r ; } } } echo \" The \u2581 two \u2581 elements \u2581 whose \u2581 sum \u2581 is \u2581 minimum \u2581 are \u2581 \" . $ arr [ $ min_l ] . \" \u2581 and \u2581 \" . $ arr [ $ min_r ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 60 , -10 , 70 , -80 , 85 ) ; minAbsSumPair ( $ arr , 6 ) ; ? >"}
{"text":"bool function for checking an array elements are in increasing .","code":"< ? php function increasing ( $ a , $ n ) { for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ a [ $ i ] >= $ a [ $ i + 1 ] ) return false ; return true ; }"}
{"text":"bool function for checking an array elements are in decreasing .","code":"function decreasing ( $ a , $ n ) { for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ a [ $ i ] < $ a [ $ i + 1 ] ) return false ; return true ; } function shortestUnsorted ( $ a , $ n ) {"}
{"text":"increasing and decreasing are two functions . if function return true value then print 0 otherwise 3.","code":"if ( increasing ( $ a , $ n ) == true || decreasing ( $ a , $ n ) == true ) return 0 ; else return 3 ; }"}
{"text":"Driver code","code":"$ ar = array ( 7 , 9 , 10 , 8 , 11 ) ; $ n = sizeof ( $ ar ) ; echo shortestUnsorted ( $ ar , $ n ) ; ? >"}
{"text":"Function prints union of arr1 [ ] and arr2 [ ] m is the number of elements in arr1 [ ] n is the number of elements in arr2 [ ]","code":"< ? php function printUnion ( $ arr1 , $ arr2 , $ m , $ n ) { $ i = 0 ; $ j = 0 ; while ( $ i < $ m && $ j < $ n ) { if ( $ arr1 [ $ i ] < $ arr2 [ $ j ] ) echo ( $ arr1 [ $ i ++ ] . \" \u2581 \" ) ; else if ( $ arr2 [ $ j ] < $ arr1 [ $ i ] ) echo ( $ arr2 [ $ j ++ ] . \" \u2581 \" ) ; else { echo ( $ arr2 [ $ j ++ ] . \" \" ) ; $ i ++ ; } }"}
{"text":"Print remaining elements of the larger array","code":"while ( $ i < $ m ) echo ( $ arr1 [ $ i ++ ] . \" \u2581 \" ) ; while ( $ j < $ n ) echo ( $ arr2 [ $ j ++ ] . \" \u2581 \" ) ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 2 , 4 , 5 , 6 ) ; $ arr2 = array ( 2 , 3 , 5 , 7 ) ; $ m = sizeof ( $ arr1 ) ; $ n = sizeof ( $ arr2 ) ; printUnion ( $ arr1 , $ arr2 , $ m , $ n ) ; ? >"}
{"text":"Function prints Intersection of arr1 [ ] and arr2 [ ] m is the number of elements in arr1 [ ] n is the number of elements in arr2 [ ]","code":"< ? php function printIntersection ( $ arr1 , $ arr2 , $ m , $ n ) { $ i = 0 ; $ j = 0 ; while ( $ i < $ m && $ j < $ n ) { if ( $ arr1 [ $ i ] < $ arr2 [ $ j ] ) $ i ++ ; else if ( $ arr2 [ $ j ] < $ arr1 [ $ i ] ) $ j ++ ; else { echo $ arr2 [ $ j ] , \" \" ; $ i ++ ; $ j ++ ; } } }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 2 , 4 , 5 , 6 ) ; $ arr2 = array ( 2 , 3 , 5 , 7 ) ; $ m = count ( $ arr1 ) ; $ n = count ( $ arr2 ) ;"}
{"text":"Function calling","code":"printIntersection ( $ arr1 , $ arr2 , $ m , $ n ) ; ? >"}
{"text":"Prints union of arr1 [ 0. . m - 1 ] and arr2 [ 0. . n - 1 ]","code":"< ? php function printUnion ( $ arr1 , $ arr2 , $ m , $ n ) {"}
{"text":"Before finding union , make sure arr1 [ 0. . m - 1 ] is smaller","code":"if ( $ m > $ n ) { $ tempp = $ arr1 ; $ arr1 = $ arr2 ; $ arr2 = $ tempp ; $ temp = $ m ; $ m = $ n ; $ n = $ temp ; }"}
{"text":"Now arr1 [ ] is smaller Sort the first array and print its elements ( these two steps can be swapped as order in output is not important )","code":"sort ( $ arr1 ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) echo $ arr1 [ $ i ] . \" \u2581 \" ;"}
{"text":"Search every element of bigger array in smaller array and print the element if not found","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( binarySearch ( $ arr1 , 0 , $ m - 1 , $ arr2 [ $ i ] ) == -1 ) echo $ arr2 [ $ i ] . \" \u2581 \" ; }"}
{"text":"Prints intersection of arr1 [ 0. . m - 1 ] and arr2 [ 0. . n - 1 ]","code":"function printIntersection ( $ arr1 , $ arr2 , $ m , $ n ) {"}
{"text":"Before finding intersection , make sure arr1 [ 0. . m - 1 ] is smaller","code":"if ( $ m > $ n ) { $ tempp = $ arr1 ; $ arr1 = $ arr2 ; $ arr2 = $ tempp ; $ temp = $ m ; $ m = $ n ; $ n = $ temp ; }"}
{"text":"Now arr1 [ ] is smaller Sort smaller array arr1 [ 0. . m - 1 ]","code":"sort ( $ arr1 ) ;"}
{"text":"Search every element of bigger array in smaller array and print the element if found","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( binarySearch ( $ arr1 , 0 , $ m - 1 , $ arr2 [ $ i ] ) != -1 ) echo $ arr2 [ $ i ] . \" \u2581 \" ; }"}
{"text":"A recursive binary search function . It returns location of x in given array arr [ l . . r ] is present , otherwise - 1","code":"function binarySearch ( $ arr , $ l , $ r , $ x ) { if ( $ r >= $ l ) { $ mid = ( int ) ( $ l + ( $ r - $ l ) \/ 2 ) ;"}
{"text":"If the element is present at the middle itself","code":"if ( $ arr [ $ mid ] == $ x ) return $ mid ;"}
{"text":"If element is smaller than mid , then it can only be presen in left subarray","code":"if ( $ arr [ $ mid ] > $ x ) return binarySearch ( $ arr , $ l , $ mid - 1 , $ x ) ;"}
{"text":"Else the element can only be present in right subarray","code":"return binarySearch ( $ arr , $ mid + 1 , $ r , $ x ) ; }"}
{"text":"We reach here when element is not present in array","code":"return -1 ; }"}
{"text":"Driver program to test above function","code":"$ arr1 = array ( 7 , 1 , 5 , 2 , 3 , 6 ) ; $ arr2 = array ( 3 , 8 , 6 , 20 , 7 ) ; $ m = count ( $ arr1 ) ; $ n = count ( $ arr2 ) ;"}
{"text":"Function call","code":"echo \" Union \u2581 of \u2581 two \u2581 arrays \u2581 is \u2581 STRNEWLINE \" ; printUnion ( $ arr1 , $ arr2 , $ m , $ n ) ; echo \" Intersection of two arrays is \" ; printIntersection ( $ arr1 , $ arr2 , $ m , $ n ) ; ? >"}
{"text":"Function to find intersection","code":"< ? php function intersection ( $ a , $ b , $ n , $ m ) { $ i = 0 ; $ j = 0 ; while ( $ i < $ n && $ j < $ m ) { if ( $ a [ $ i ] > $ b [ $ j ] ) { $ j ++ ; } else if ( $ b [ $ j ] > $ a [ $ i ] ) { $ i ++ ; } else {"}
{"text":"when both are equal","code":"echo ( $ a [ $ i ] . \" \" ) ; $ i ++ ; $ j ++ ; } } }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 3 , 2 , 3 , 4 , 5 , 5 , 6 ) ; $ b = array ( 3 , 3 , 5 ) ; $ n = sizeof ( $ a ) ; $ m = sizeof ( $ b ) ;"}
{"text":"sort","code":"sort ( $ a ) ; sort ( $ b ) ;"}
{"text":"Function call","code":"intersection ( $ a , $ b , $ n , $ m ) ; ? >"}
{"text":"UTILITY FUNCTIONS","code":"< ? php function swap ( & $ a , & $ b ) { $ temp = $ a ; $ a = $ b ; $ b = $ temp ; }"}
{"text":"Sort the input array , the array is assumed to have values in { 0 , 1 , 2 }","code":"function sort012 ( & $ a , $ arr_size ) { $ lo = 0 ; $ hi = $ arr_size - 1 ; $ mid = 0 ; while ( $ mid <= $ hi ) { switch ( $ a [ $ mid ] ) { case 0 : swap ( $ a [ $ lo ++ ] , $ a [ $ mid ++ ] ) ; break ; case 1 : $ mid ++ ; break ; case 2 : swap ( $ a [ $ mid ] , $ a [ $ hi -- ] ) ; break ; } } }"}
{"text":"Utility function to print array arr [ ]","code":"function printArray ( & $ arr , $ arr_size ) { for ( $ i = 0 ; $ i < $ arr_size ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 0 , 1 , 1 , 0 , 1 , 2 , 1 , 2 , 0 , 0 , 0 , 1 ) ; $ arr_size = sizeof ( $ arr ) ; sort012 ( $ arr , $ arr_size ) ; echo \" array \u2581 after \u2581 segregation \u2581 \" ; printArray ( $ arr , $ arr_size ) ; ? >"}
{"text":"PHP program to find the Minimum length Unsorted Subarray , sorting which makes the complete array sorted","code":"< ? php function printUnsorted ( & $ arr , $ n ) { $ s = 0 ; $ e = $ n - 1 ;"}
{"text":"step 1 ( a ) of above algo","code":"for ( $ s = 0 ; $ s < $ n - 1 ; $ s ++ ) { if ( $ arr [ $ s ] > $ arr [ $ s + 1 ] ) break ; } if ( $ s == $ n - 1 ) { echo \" The \u2581 complete \u2581 array \u2581 is \u2581 sorted \" ; return ; }"}
{"text":"step 1 ( b ) of above algo","code":"for ( $ e = $ n - 1 ; $ e > 0 ; $ e -- ) { if ( $ arr [ $ e ] < $ arr [ $ e - 1 ] ) break ; }"}
{"text":"step 2 ( a ) of above algo","code":"$ max = $ arr [ $ s ] ; $ min = $ arr [ $ s ] ; for ( $ i = $ s + 1 ; $ i <= $ e ; $ i ++ ) { if ( $ arr [ $ i ] > $ max ) $ max = $ arr [ $ i ] ; if ( $ arr [ $ i ] < $ min ) $ min = $ arr [ $ i ] ; }"}
{"text":"step 2 ( b ) of above algo","code":"for ( $ i = 0 ; $ i < $ s ; $ i ++ ) { if ( $ arr [ $ i ] > $ min ) { $ s = $ i ; break ; } }"}
{"text":"step 2 ( c ) of above algo","code":"for ( $ i = $ n - 1 ; $ i >= $ e + 1 ; $ i -- ) { if ( $ arr [ $ i ] < $ max ) { $ e = $ i ; break ; } }"}
{"text":"step 3 of above algo","code":"echo \" \u2581 The \u2581 unsorted \u2581 subarray \u2581 which \u2581 makes \u2581 \" . \" the \u2581 given \u2581 array \u2581 \" . \" STRNEWLINE \" . \" \u2581 sorted \u2581 lies \u2581 between \u2581 the \u2581 indees \u2581 \" . $ s . \" \u2581 and \u2581 \" . $ e ; return ; } $ arr = array ( 10 , 12 , 20 , 30 , 25 , 40 , 32 , 31 , 35 , 50 , 60 ) ; $ arr_size = sizeof ( $ arr ) ; printUnsorted ( $ arr , $ arr_size ) ; ? >"}
{"text":"Function to count all possible triangles with arr [ ] element","code":"< ? php function findNumberOfTriangles ( $ arr ) { $ n = count ( $ arr ) ;"}
{"text":"Sort the array elements in non - decreasing order","code":"sort ( $ arr ) ;"}
{"text":"Initialize count of triangles","code":"$ count = 0 ;"}
{"text":"Fix the first element . We need to run till n - 3 as the other two elements are selected from arr [ i + 1. . . n - 1 ]","code":"for ( $ i = 0 ; $ i < $ n - 2 ; ++ $ i ) {"}
{"text":"Initialize index of the rightmost third element","code":"$ k = $ i + 2 ;"}
{"text":"Fix the second element","code":"for ( $ j = $ i + 1 ; $ j < $ n ; ++ $ j ) {"}
{"text":"Find the rightmost element which is smaller than the sum of two fixed elements . The important thing to note here is , we use the previous value of k . If value of arr [ i ] + arr [ j - 1 ] was greater than arr [ k ] , then arr [ i ] + arr [ j ] must be greater than k , because the array is sorted .","code":"while ( $ k < $ n && $ arr [ $ i ] + $ arr [ $ j ] > $ arr [ $ k ] ) ++ $ k ;"}
{"text":"Total number of possible triangles that can be formed with the two fixed elements is k - j - 1. The two fixed elements are arr [ i ] and arr [ j ] . All elements between arr [ j + 1 ] to arr [ k - 1 ] can form a triangle with arr [ i ] and arr [ j ] . One is subtracted from k because k is incremented one extra in above while loop . k will always be greater than j . If j becomes equal to k , then above loop will increment k , because arr [ k ] + arr [ i ] is always \/ greater than arr [ k ]","code":"if ( $ k > $ j ) $ count += $ k - $ j - 1 ; } } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 21 , 22 , 100 , 101 , 200 , 300 ) ; echo \" Total \u2581 number \u2581 of \u2581 triangles \u2581 is \u2581 \" , findNumberOfTriangles ( $ arr ) ; ? >"}
{"text":"A simple PHP program to count pairs with difference k","code":"< ? php function countPairsWithDiffK ( $ arr , $ n , $ k ) { $ count = 0 ;"}
{"text":"Pick all elements one by one","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"See if there is a pair of this picked element","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ i ] - $ arr [ $ j ] == $ k or $ arr [ $ j ] - $ arr [ $ i ] == $ k ) $ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 5 , 3 , 4 , 2 ) ; $ n = count ( $ arr ) ; $ k = 3 ; echo \" Count \u2581 of \u2581 pairs \u2581 with \u2581 given \u2581 diff \u2581 is \u2581 \" , countPairsWithDiffK ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Standard binary search function","code":"< ? php function binarySearch ( $ arr , $ low , $ high , $ x ) { if ( $ high >= $ low ) { $ mid = $ low + ( $ high - $ low ) \/ 2 ; if ( $ x == $ arr [ $ mid ] ) return $ mid ; if ( $ x > $ arr [ $ mid ] ) return binarySearch ( $ arr , ( $ mid + 1 ) , $ high , $ x ) ; else return binarySearch ( $ arr , $ low , ( $ mid - 1 ) , $ x ) ; } return -1 ; }"}
{"text":"Returns count of pairs with difference k in arr [ ] of size n .","code":"function countPairsWithDiffK ( $ arr , $ n , $ k ) { $ count = 0 ; $ i ;"}
{"text":"Sort array elements","code":"sort ( $ arr ) ;"}
{"text":"Pick a first element point","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( binarySearch ( $ arr , $ i + 1 , $ n - 1 , $ arr [ $ i ] + $ k ) != -1 ) $ count ++ ; return $ count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 5 , 3 , 4 , 2 ) ; $ n = count ( $ arr ) ; $ k = 3 ; echo \" Count \u2581 of \u2581 pairs \u2581 with \u2581 given \u2581 diff \u2581 is \u2581 \" , countPairsWithDiffK ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Returns count of pairs with difference k in arr [ ] of size n .","code":"< ? php function countPairsWithDiffK ( $ arr , $ n , $ k ) { $ count = 0 ;"}
{"text":"Sort array elements","code":"sort ( $ arr ) ; $ l = 0 ; $ r = 0 ; while ( $ r < $ n ) { if ( $ arr [ $ r ] - $ arr [ $ l ] == $ k ) { $ count ++ ; $ l ++ ; $ r ++ ; } else if ( $ arr [ $ r ] - $ arr [ $ l ] > $ k ) $ l ++ ;"}
{"text":"arr [ r ] - arr [ l ] < k","code":"else $ r ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 5 , 3 , 4 , 2 ) ; $ n = count ( $ arr ) ; $ k = 3 ; echo \" Count \u2581 of \u2581 pairs \u2581 with \u2581 given \u2581 diff \u2581 is \u2581 \" , countPairsWithDiffK ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Fills element in arr [ ] from its pair sum array pair [ ] . n is size of arr [ ]","code":"< ? php function constructArr ( $ pair ) { $ arr = array ( ) ; $ n = 5 ; $ arr [ 0 ] = intval ( ( $ pair [ 0 ] + $ pair [ 1 ] - $ pair [ $ n - 1 ] ) \/ 2 ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = $ pair [ $ i - 1 ] - $ arr [ 0 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ pair = array ( 15 , 13 , 11 , 10 , 12 , 10 , 9 , 8 , 7 , 5 ) ; constructArr ( $ pair ) ; ? >"}
{"text":"Merge ar1 [ ] and ar2 [ ] with O ( 1 ) extra space","code":"< ? php function merge ( & $ ar1 , & $ ar2 , $ m , $ n ) {"}
{"text":"Iterate through all elements of ar2 [ ] starting from the last element","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Find the smallest element greater than ar2 [ i ] . Move all elements one position ahead till the smallest greater element is not found","code":"$ last = $ ar1 [ $ m - 1 ] ; for ( $ j = $ m - 2 ; $ j >= 0 && $ ar1 [ $ j ] > $ ar2 [ $ i ] ; $ j -- ) $ ar1 [ $ j + 1 ] = $ ar1 [ $ j ] ;"}
{"text":"If there was a greater element","code":"if ( $ j != $ m - 2 $ last > $ ar2 [ $ i ] ) { $ ar1 [ $ j + 1 ] = $ ar2 [ $ i ] ; $ ar2 [ $ i ] = $ last ; } } }"}
{"text":"Driver program","code":"$ ar1 = array ( 1 , 5 , 9 , 10 , 15 , 20 ) ; $ ar2 = array ( 2 , 3 , 8 , 13 ) ; $ m = sizeof ( $ ar1 ) \/ sizeof ( $ ar1 [ 0 ] ) ; $ n = sizeof ( $ ar2 ) \/ sizeof ( $ ar2 [ 0 ] ) ; merge ( $ ar1 , $ ar2 , $ m , $ n ) ; echo \" First Array : \" for ( $ i = 0 ; $ i < $ m ; $ i ++ ) echo $ ar1 [ $ i ] . \" \u2581 \" ; echo \" Second Array : \" for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ ar2 [ $ i ] . \" \u2581 \" ; return 0 ; ? >"}
{"text":"Function to generate gould 's Sequence","code":"< ? php function gouldSequence ( $ n ) {"}
{"text":"loop to generate each row of pascal 's Triangle up to nth row","code":"for ( $ row_num = 1 ; $ row_num <= $ n ; $ row_num ++ ) { $ count = 1 ; $ c = 1 ;"}
{"text":"Loop to generate each element of ith row","code":"for ( $ i = 1 ; $ i <= $ row_num ; $ i ++ ) { $ c = $ c * ( $ row_num - $ i ) \/ $ i ;"}
{"text":"if c is odd increment count","code":"if ( $ c % 2 == 1 ) $ count ++ ; }"}
{"text":"print count of odd elements","code":"echo $ count , \" \" ; } }"}
{"text":"Get n","code":"$ n = 16 ;"}
{"text":"Function call","code":"gouldSequence ( $ n ) ; ? >"}
{"text":"Function to calculate the product","code":"< ? php function minMaxProduct ( $ arr1 , $ arr2 , $ n1 , $ n2 ) {"}
{"text":"Sort the arrays to find the maximum and minimum elements in given arrays","code":"sort ( $ arr1 ) ; sort ( $ arr2 ) ;"}
{"text":"Return product of maximum and minimum .","code":"return $ arr1 [ $ n1 - 1 ] * $ arr2 [ 0 ] ; }"}
{"text":"Driver code","code":"$ arr1 = array ( 10 , 2 , 3 , 6 , 4 , 1 ) ; $ arr2 = array ( 5 , 1 , 4 , 2 , 6 , 9 ) ; $ n1 = count ( $ arr1 ) ; $ n2 = count ( $ arr2 ) ; echo minMaxProduct ( $ arr1 , $ arr2 , $ n1 , $ n2 ) ; ? >"}
{"text":"PHP program to find Minimum odd cost path in a matrix","code":"< ? php $ M = 100 ; $ N = 100 ;"}
{"text":"Function to find the minimum cost","code":"function find_min_odd_cost ( $ given , $ m , $ n ) { global $ M , $ N ; $ floor1 [ $ M ] [ $ N ] = array ( array ( 0 ) , array ( 0 ) ) ; $ min_odd_cost = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ floor1 [ 0 ] [ $ j ] = $ given [ 0 ] [ $ j ] ; for ( $ i = 1 ; $ i < $ m ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"leftmost element","code":"if ( $ j == 0 ) { $ floor1 [ $ i ] [ $ j ] = $ given [ $ i ] [ $ j ] ; $ floor1 [ $ i ] [ $ j ] += min ( $ floor1 [ $ i - 1 ] [ $ j ] , $ floor1 [ $ i - 1 ] [ $ j + 1 ] ) ; }"}
{"text":"rightmost element","code":"else if ( $ j == $ n - 1 ) { $ floor1 [ $ i ] [ $ j ] = $ given [ $ i ] [ $ j ] ; $ floor1 [ $ i ] [ $ j ] += min ( $ floor1 [ $ i - 1 ] [ $ j ] , $ floor1 [ $ i - 1 ] [ $ j - 1 ] ) ; }"}
{"text":"Any element except leftmost and rightmost element of a row is reachable from direct upper or left upper or right upper row 's block","code":"else {"}
{"text":"Counting the minimum cost","code":"$ temp = min ( $ floor1 [ $ i - 1 ] [ $ j ] , $ floor1 [ $ i - 1 ] [ $ j - 1 ] ) ; $ temp = min ( $ temp , $ floor1 [ $ i - 1 ] [ $ j + 1 ] ) ; $ floor1 [ $ i ] [ $ j ] = $ given [ $ i ] [ $ j ] + $ temp ; } } $ min_odd_cost = PHP_INT_MAX ;"}
{"text":"Find the minimum cost","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ floor1 [ $ n - 1 ] [ $ j ] % 2 == 1 ) { if ( $ min_odd_cost > $ floor1 [ $ n - 1 ] [ $ j ] ) $ min_odd_cost = $ floor1 [ $ n - 1 ] [ $ j ] ; } } if ( $ min_odd_cost == PHP_INT_MIN ) return -1 ; return $ min_odd_cost ; }"}
{"text":"Driver code","code":"$ m = 5 ; $ n = 5 ; $ given = array ( array ( 1 , 2 , 3 , 4 , 6 ) , array ( 1 , 2 , 3 , 4 , 5 ) , array ( 1 , 2 , 3 , 4 , 5 ) , array ( 1 , 2 , 3 , 4 , 5 ) , array ( 100 , 2 , 3 , 4 , 5 ) ) ; echo \" Minimum \u2581 odd \u2581 cost \u2581 is \u2581 \" . find_min_odd_cost ( $ given , $ m , $ n ) ; ? >"}
{"text":"Function to calculate the product","code":"< ? php function minMaxProduct ( $ arr1 , $ arr2 , $ n1 , $ n2 ) {"}
{"text":"Initialize max of first array","code":"$ max = $ arr1 [ 0 ] ;"}
{"text":"initialize min of second array","code":"$ min = $ arr2 [ 0 ] ; $ i ; for ( $ i = 1 ; $ i < $ n1 && $ i < $ n2 ; ++ $ i ) {"}
{"text":"To find the maximum element in first array","code":"if ( $ arr1 [ $ i ] > $ max ) $ max = $ arr1 [ $ i ] ;"}
{"text":"To find the minimum element in second array","code":"if ( $ arr2 [ $ i ] < $ min ) $ min = $ arr2 [ $ i ] ; }"}
{"text":"Process remaining elements","code":"while ( $ i < $ n1 ) { if ( $ arr1 [ $ i ] > $ max ) $ max = $ arr1 [ $ i ] ; $ i ++ ; } while ( $ i < $ n2 ) { if ( $ arr2 [ $ i ] < $ min ) $ min = $ arr2 [ $ i ] ; $ i ++ ; } return $ max * $ min ; }"}
{"text":"Driven code","code":"$ arr1 = array ( 10 , 2 , 3 , 6 , 4 , 1 ) ; $ arr2 = array ( 5 , 1 , 4 , 2 , 6 , 9 ) ; $ n1 = count ( $ arr1 ) ; $ n2 = count ( $ arr2 ) ; echo minMaxProduct ( $ arr1 , $ arr2 , $ n1 , $ n2 ) ; ? >"}
{"text":"Function to implement search operation","code":"< ? php function findElement ( $ arr , $ n , $ key ) { $ i ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] == $ key ) return $ i ; return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 34 , 10 , 6 , 40 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Using a last element as search element","code":"$ key = 40 ; $ position = findElement ( $ arr , $ n , $ key ) ; if ( $ position == - 1 ) echo ( \" Element \u2581 not \u2581 found \" ) ; else echo ( \" Element \u2581 Found \u2581 at \u2581 Position : \u2581 \" . ( $ position + 1 ) ) ; ? >"}
{"text":"Inserts a key in arr [ ] of given capacity . n is current size of arr [ ] . This function returns n + 1 if insertion is successful , else n .","code":"< ? php function insertSorted ( & $ arr , $ n , $ key , $ capacity ) {"}
{"text":"Cannot insert more elements if n is already more than or equal to capcity","code":"if ( $ n >= $ capacity ) return $ n ; array_push ( $ arr , $ key ) ; return ( $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 16 , 20 , 40 , 50 , 70 ) ; $ capacity = 20 ; $ n = 6 ; $ key = 26 ; echo \" Before \u2581 Insertion : \u2581 \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ;"}
{"text":"Inserting key","code":"$ n = insertSorted ( $ arr , $ n , $ key , $ capacity ) ; echo \" After Insertion : \" for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"To search a key to be deleted","code":"< ? php function findElement ( & $ arr , $ n , $ key ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] == $ key ) return $ i ; return -1 ; }"}
{"text":"Function to delete an element","code":"function deleteElement ( & $ arr , $ n , $ key ) {"}
{"text":"Find position of element to be deleted","code":"$ pos = findElement ( $ arr , $ n , $ key ) ; if ( $ pos == -1 ) { echo \" Element \u2581 not \u2581 found \" ; return $ n ; }"}
{"text":"Deleting element","code":"for ( $ i = $ pos ; $ i < $ n - 1 ; $ i ++ ) $ arr [ $ i ] = $ arr [ $ i + 1 ] ; return $ n - 1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 50 , 30 , 40 , 20 ) ; $ n = count ( $ arr ) ; $ key = 30 ; echo \" Array \u2581 before \u2581 deletion STRNEWLINE \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; $ n = deleteElement ( $ arr , $ n , $ key ) ; echo \" Array after deletion \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"function to implement binary search","code":"< ? php function binarySearch ( $ arr , $ low , $ high , $ key ) { if ( $ high < $ low ) return -1 ;"}
{"text":"low + ( high - low ) \/ 2","code":"$ mid = ( $ low + $ high ) \/ 2 ; if ( $ key == $ arr [ ( int ) $ mid ] ) return $ mid ; if ( $ key > $ arr [ ( int ) $ mid ] ) return binarySearch ( $ arr , ( $ mid + 1 ) , $ high , $ key ) ; return ( binarySearch ( $ arr , $ low , ( $ mid -1 ) , $ key ) ) ; }"}
{"text":"Driver Code Let us search 3 in below array","code":"$ arr = array ( 5 , 6 , 7 , 8 , 9 , 10 ) ; $ n = count ( $ arr ) ; $ key = 10 ; echo \" Index : \u2581 \" , ( int ) binarySearch ( $ arr , 0 , $ n -1 , $ key ) ; ? >"}
{"text":"function to find nth stern ' diatomic series","code":"< ? php function findSDSFunc ( $ n ) {"}
{"text":"SET the Base case","code":"$ DP [ 0 ] = 0 ; $ DP [ 1 ] = 1 ;"}
{"text":"Traversing the array from 2 nd Element to nth Element","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Case 1 : for even n","code":"if ( $ i % 2 == 0 ) $ DP [ $ i ] = $ DP [ $ i \/ 2 ] ;"}
{"text":"Case 2 : for odd n","code":"else $ DP [ $ i ] = $ DP [ ( $ i - 1 ) \/ 2 ] + $ DP [ ( $ i + 1 ) \/ 2 ] ; } return $ DP [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 15 ; echo ( findSDSFunc ( $ n ) ) ; ? >"}
{"text":"This function prints common elements in ar1","code":"< ? php function findCommon ( $ ar1 , $ ar2 , $ ar3 , $ n1 , $ n2 , $ n3 ) {"}
{"text":"Initialize starting indexes for ar1 [ ] , ar2 [ ] and ar3 [ ]","code":"$ i = 0 ; $ j = 0 ; $ k = 0 ;"}
{"text":"Iterate through three arrays while all arrays have elements","code":"while ( $ i < $ n1 && $ j < $ n2 && $ k < $ n3 ) {"}
{"text":"If x = y and y = z , print any of them and move ahead in all arrays","code":"if ( $ ar1 [ $ i ] == $ ar2 [ $ j ] && $ ar2 [ $ j ] == $ ar3 [ $ k ] ) { echo $ ar1 [ $ i ] , \" \" ; $ i ++ ; $ j ++ ; $ k ++ ; }"}
{"text":"x < y","code":"else if ( $ ar1 [ $ i ] < $ ar2 [ $ j ] ) $ i ++ ;"}
{"text":"y < z","code":"else if ( $ ar2 [ $ j ] < $ ar3 [ $ k ] ) $ j ++ ;"}
{"text":"We reach here when x > y and z < y , i . e . , z is smallest","code":"else $ k ++ ; } }"}
{"text":"Driver program to test above function","code":"$ ar1 = array ( 1 , 5 , 10 , 20 , 40 , 80 ) ; $ ar2 = array ( 6 , 7 , 20 , 80 , 100 ) ; $ ar3 = array ( 3 , 4 , 15 , 20 , 30 , 70 , 80 , 120 ) ; $ n1 = count ( $ ar1 ) ; $ n2 = count ( $ ar2 ) ; $ n3 = count ( $ ar3 ) ; echo \" Common \u2581 Elements \u2581 are \u2581 \" ; findCommon ( $ ar1 , $ ar2 , $ ar3 , $ n1 , $ n2 , $ n3 ) ; ? >"}
{"text":"Return nth Jacobsthal number .","code":"< ? php function Jacobsthal ( $ n ) { $ dp [ $ n + 1 ] ;"}
{"text":"base case","code":"$ dp [ 0 ] = 0 ; $ dp [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] = $ dp [ $ i - 1 ] + 2 * $ dp [ $ i - 2 ] ; return $ dp [ $ n ] ; }"}
{"text":"Return nth Jacobsthal - Lucas number .","code":"function Jacobsthal_Lucas ( $ n ) { $ dp [ $ n + 1 ] ;"}
{"text":"base case","code":"$ dp [ 0 ] = 2 ; $ dp [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] = $ dp [ $ i - 1 ] + 2 * $ dp [ $ i - 2 ] ; return $ dp [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo \" Jacobsthal \u2581 number : \u2581 \" , Jacobsthal ( $ n ) , \" STRNEWLINE \" ; echo \" Jacobsthal - Lucas \u2581 number : \u2581 \" , Jacobsthal_Lucas ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Simple binary search algorithm","code":"< ? php function binarySearch ( $ arr , $ l , $ r , $ x ) { if ( $ r >= $ l ) { $ mid = $ l + ( $ r - $ l ) \/ 2 ; if ( $ arr [ $ mid ] == $ x ) return $ mid ; if ( $ arr [ $ mid ] > $ x ) return binarySearch ( $ arr , $ l , $ mid - 1 , $ x ) ; return binarySearch ( $ arr , $ mid + 1 , $ r , $ x ) ; } return -1 ; }"}
{"text":"function takes an infinite size array and a key to be searched and returns its position if found else - 1. We don 't know size of arr[] and we can assume size to be infinite in this function. NOTE THAT THIS FUNCTION ASSUMES arr[] TO BE OF INFINITE SIZE THEREFORE, THERE IS NO INDEX OUT OF BOUND CHECKING","code":"function findPos ( $ arr , $ key ) { $ l = 0 ; $ h = 1 ; $ val = $ arr [ 0 ] ;"}
{"text":"Find h to do binary search","code":"while ( $ val < $ key ) {"}
{"text":"store previous high","code":"$ l = $ h ;"}
{"text":"double high index","code":"$ h = 2 * $ h ;"}
{"text":"update new val","code":"$ val = $ arr [ $ h ] ; }"}
{"text":"at this point we have updated low and high indices , Thus use binary search between them","code":"return binarySearch ( $ arr , $ l , $ h , $ key ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 5 , 7 , 9 , 10 , 90 , 100 , 130 , 140 , 160 , 170 ) ; $ ans = findPos ( $ arr , 10 ) ; if ( $ ans == -1 ) echo \" Element \u2581 not \u2581 found \" ; else echo \" Element \u2581 found \u2581 at \u2581 index \u2581 \" , $ ans ; ? >"}
{"text":"function that calculates the answer","code":"< ? php function answer ( $ n ) {"}
{"text":"if n is 1 then answer will be 10.","code":"if ( $ n == 1 ) return 10 ; for ( $ j = 0 ; $ j <= 9 ; $ j ++ ) $ dp [ 1 ] [ $ j ] = 1 ;"}
{"text":"Compute values for count of digits more than 1.","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= 9 ; $ j ++ ) {"}
{"text":"If ending digit is 0","code":"if ( $ j == 0 ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j + 1 ] ;"}
{"text":"If ending digit is 9","code":"else if ( $ j == 9 ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j - 1 ] ;"}
{"text":"For other digits .","code":"else $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j - 1 ] + $ dp [ $ i - 1 ] [ $ j + 1 ] ; } }"}
{"text":"stores the final answer","code":"$ sum = 0 ; for ( $ j = 1 ; $ j <= 9 ; $ j ++ ) $ sum += $ dp [ $ n ] [ $ j ] ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo answer ( $ n ) ; ? >"}
{"text":"Return the maximum Sum of difference between consecutive elements .","code":"< ? php function findSingle ( $ ar , $ ar_size ) {"}
{"text":"Do XOR of all elements and return","code":"$ res = $ ar [ 0 ] ; for ( $ i = 1 ; $ i < $ ar_size ; $ i ++ ) $ res = $ res ^ $ ar [ $ i ] ; return $ res ; }"}
{"text":"Driver code","code":"$ ar = array ( 2 , 3 , 5 , 4 , 5 , 3 , 4 ) ; $ n = count ( $ ar ) ; echo \" Element \u2581 occurring \u2581 once \u2581 is \u2581 \" , findSingle ( $ ar , $ n ) ; ? >"}
{"text":"PHP program to calculate all triplets whose sum is perfect cube .","code":"< ? php $ dp = array_fill ( 0 , 1001 , array_fill ( 0 , 15001 , NULL ) ) ;"}
{"text":"Function to calculate all occurrence of a number in a given range","code":"function computeDpArray ( & $ arr , $ n ) { global $ dp ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { for ( $ j = 1 ; $ j <= 15000 ; ++ $ j ) {"}
{"text":"if i == 0 assign 1 to present state","code":"if ( $ i == 0 ) $ dp [ $ i ] [ $ j ] = ( $ j == $ arr [ $ i ] ) ;"}
{"text":"else add + 1 to current state with previous state","code":"else $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j ] + ( $ arr [ $ i ] == $ j ) ; } } }"}
{"text":"Function to calculate triplets whose sum is equal to the perfect cube","code":"function countTripletSum ( & $ arr , $ n ) { global $ dp ; computeDpArray ( $ arr , $ n ) ;"}
{"text":"Initialize answer","code":"$ ans = 0 ; for ( $ i = 0 ; $ i < $ n - 2 ; ++ $ i ) { for ( $ j = $ i + 1 ; $ j < $ n - 1 ; ++ $ j ) { for ( $ k = 1 ; $ k <= 24 ; ++ $ k ) { $ cube = $ k * $ k * $ k ; $ rem = $ cube - ( $ arr [ $ i ] + $ arr [ $ j ] ) ;"}
{"text":"count all occurrence of third triplet in range from j + 1 to n","code":"if ( $ rem > 0 ) $ ans += $ dp [ $ n - 1 ] [ $ rem ] - $ dp [ $ j ] [ $ rem ] ; } } } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 5 , 1 , 20 , 6 ) ; $ n = sizeof ( $ arr ) ; echo countTripletSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to check the element present in array B","code":"< ? php function isPresent ( $ B , $ m , $ x ) { for ( $ i = 0 ; $ i < $ m ; $ i ++ ) if ( $ B [ $ i ] == $ x ) return true ; return false ; }"}
{"text":"Utility function for findMaxSubarraySum ( ) with the following parameters A = > Array A , B = > Array B , n = > Number of elements in Array A , m = > Number of elements in Array B","code":"function findMaxSubarraySumUtil ( $ A , $ B , $ n , $ m ) {"}
{"text":"set max_so_far to INT_MIN","code":"$ max_so_far = PHP_INT_MIN ; $ curr_max = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if the element is present in B , set current max to 0 and move to the next element","code":"if ( isPresent ( $ B , $ m , $ A [ $ i ] ) ) { $ curr_max = 0 ; continue ; }"}
{"text":"Proceed as in Kadane 's Algorithm","code":"$ curr_max = max ( $ A [ $ i ] , $ curr_max + $ A [ $ i ] ) ; $ max_so_far = max ( $ max_so_far , $ curr_max ) ; } return $ max_so_far ; }"}
{"text":"Wrapper for findMaxSubarraySumUtil ( )","code":"function findMaxSubarraySum ( $ A , $ B , $ n , $ m ) { $ maxSubarraySum = findMaxSubarraySumUtil ( $ A , $ B , $ n , $ m ) ;"}
{"text":"This case will occour when all elements of A are present in B , thus no subarray can be formed","code":"if ( $ maxSubarraySum == PHP_INT_MIN ) { echo ( \" Maximum \u2581 Subarray \u2581 \" . \" Sum \u2581 cant \u2581 be \u2581 found STRNEWLINE \" ) ; } else { echo ( \" The \u2581 Maximum \u2581 Subarray \u2581 Sum \u2581 = \u2581 \" . $ maxSubarraySum . \" STRNEWLINE \" ) ; } }"}
{"text":"Driver Code","code":"$ A = array ( 3 , 4 , 5 , -4 , 6 ) ; $ B = array ( 1 , 8 , 5 ) ; $ n = count ( $ A ) ; $ m = count ( $ B ) ;"}
{"text":"Function call","code":"findMaxSubarraySum ( $ A , $ B , $ n , $ m ) ; ? >"}
{"text":"Returns count of non - decreasing numbers with n digits .","code":"< ? php function nonDecNums ( $ n ) {"}
{"text":"Initialization of all 0 - digit number","code":"for ( $ i = 0 ; $ i <= 9 ; $ i ++ ) $ a [ 0 ] [ $ i ] = 1 ;"}
{"text":"Initialization of all i - digit non - decreasing number leading with 9","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ a [ $ i ] [ 9 ] = 1 ;"}
{"text":"for all digits we should calculate number of ways depending upon leading digits","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) for ( $ j = 8 ; $ j >= 0 ; $ j -- ) $ a [ $ i ] [ $ j ] = $ a [ $ i - 1 ] [ $ j ] + $ a [ $ i ] [ $ j + 1 ] ; return $ a [ $ n ] [ 0 ] ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo \" Non - decreasing \u2581 digits \u2581 = \u2581 \" , nonDecNums ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to count number of balanced","code":"< ? php $ mod = 1000000007 ; function countBT ( $ h ) { global $ mod ;"}
{"text":"base cases","code":"$ dp [ 0 ] = $ dp [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ h ; $ i ++ ) { $ dp [ $ i ] = ( $ dp [ $ i - 1 ] * ( ( 2 * $ dp [ $ i - 2 ] ) % $ mod + $ dp [ $ i - 1 ] ) % $ mod ) % $ mod ; } return $ dp [ $ h ] ; }"}
{"text":"Driver Code","code":"$ h = 3 ; echo \" No . \u2581 of \u2581 balanced \u2581 binary \u2581 trees \" , \" \u2581 of \u2581 height \u2581 h \u2581 is : \u2581 \" , countBT ( $ h ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to find the equilibrium index","code":"< ? php function equilibrium ( $ arr , $ n ) { $ i ; $ j ; $ leftsum ; $ rightsum ;"}
{"text":"Check for indexes one by one until an equilibrium index is found","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ leftsum = 0 ; $ rightsum = 0 ;"}
{"text":"get left sum","code":"for ( $ j = 0 ; $ j < $ i ; $ j ++ ) $ leftsum += $ arr [ $ j ] ;"}
{"text":"get right sum","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) $ rightsum += $ arr [ $ j ] ;"}
{"text":"if leftsum and rightsum are same , then we are done","code":"if ( $ leftsum == $ rightsum ) return $ i ; }"}
{"text":"return - 1 if no equilibrium index is found","code":"return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( -7 , 1 , 5 , 2 , -4 , 3 , 0 ) ; $ arr_size = sizeof ( $ arr ) ; echo equilibrium ( $ arr , $ arr_size ) ; ? >"}
{"text":"Returns count of endless points","code":"< ? php function countEndless ( $ input , $ n ) {"}
{"text":"Fills column matrix . For every column , start from every last row and fill every entry as blockage after a 0 is found .","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"flag which will be zero once we get a '0' and it will be 1 otherwise","code":"$ isEndless = 1 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"encountered a '0' , set the isEndless variable to false","code":"if ( $ input [ $ i ] [ $ j ] == 0 ) $ isEndless = 0 ; $ col [ $ i ] [ $ j ] = $ isEndless ; } }"}
{"text":"Similarly , fill row matrix","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ isEndless = 1 ; for ( $ j = $ n - 1 ; $ j >= 0 ; $ j -- ) { if ( $ input [ $ i ] [ $ j ] == 0 ) $ isEndless = 0 ; $ row [ $ i ] [ $ j ] = $ isEndless ; } }"}
{"text":"Calculate total count of endless points","code":"$ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 1 ; $ j < $ n ; $ j ++ )"}
{"text":"If there is NO blockage or column after this point , increment result .","code":"if ( $ row [ $ i ] [ $ j ] && $ col [ $ i ] [ $ j ] ) $ ans ++ ; return $ ans ; }"}
{"text":"Driver code","code":"$ input = array ( array ( 1 , 0 , 1 , 1 ) , array ( 0 , 1 , 1 , 1 ) , array ( 1 , 1 , 1 , 1 ) , array ( 0 , 1 , 1 , 0 ) ) ; $ n = 4 ; echo countEndless ( $ input , $ n ) ; ? >"}
{"text":"function to find the equilibrium index","code":"< ? php function equilibrium ( $ arr , $ n ) {"}
{"text":"initialize sum of whole array","code":"$ sum = 0 ;"}
{"text":"initialize leftsum","code":"$ leftsum = 0 ;"}
{"text":"Find sum of the whole array","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ sum += $ arr [ $ i ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) {"}
{"text":"sum is now right sum for index i","code":"$ sum -= $ arr [ $ i ] ; if ( $ leftsum == $ sum ) return $ i ; $ leftsum += $ arr [ $ i ] ; }"}
{"text":"If no equilibrium index found , then return 0","code":"return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( -7 , 1 , 5 , 2 , -4 , 3 , 0 ) ; $ arr_size = sizeof ( $ arr ) ; echo \" First \u2581 equilibrium \u2581 index \u2581 is \u2581 \" , equilibrium ( $ arr , $ arr_size ) ; ? >"}
{"text":"Method to convert character digit to integer digit","code":"< ? php function toDigit ( $ ch ) { return ( $ ch - '0' ) ; }"}
{"text":"Returns sum of all substring of num","code":"function sumOfSubstrings ( $ num ) { $ n = strlen ( $ num ) ;"}
{"text":"allocate memory equal to length of string","code":"$ sumofdigit [ $ n ] = 0 ;"}
{"text":"initialize first value with first digit","code":"$ sumofdigit [ 0 ] = toDigit ( $ num [ 0 ] ) ; $ res = $ sumofdigit [ 0 ] ;"}
{"text":"loop over all digits of string","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ numi = toDigit ( $ num [ $ i ] ) ;"}
{"text":"update each sumofdigit from previous value","code":"$ sumofdigit [ $ i ] = ( $ i + 1 ) * $ numi + 10 * $ sumofdigit [ $ i - 1 ] ;"}
{"text":"add current value to the result","code":"$ res += $ sumofdigit [ $ i ] ; } return $ res ; }"}
{"text":"Driver Code","code":"$ num = \"1234\" ; echo sumOfSubstrings ( $ num ) ; ? >"}
{"text":"PHP Function to print leaders in an array","code":"< ? php function printLeaders ( $ arr , $ size ) { for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ size ; $ j ++ ) { if ( $ arr [ $ i ] <= $ arr [ $ j ] ) break ; }"}
{"text":"the loop didn 't break","code":"if ( $ j == $ size ) echo ( $ arr [ $ i ] . \" \u2581 \" ) ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 16 , 17 , 4 , 3 , 5 , 2 ) ; $ n = sizeof ( $ arr ) ; printLeaders ( $ arr , $ n ) ; ? >"}
{"text":"PHP Function to print leaders in an array","code":"< ? php function printLeaders ( & $ arr , $ size ) { $ max_from_right = $ arr [ $ size - 1 ] ;"}
{"text":"Rightmost element is always leader","code":"echo ( $ max_from_right ) ; echo ( \" \u2581 \" ) ; for ( $ i = $ size - 2 ; $ i >= 0 ; $ i -- ) { if ( $ max_from_right < $ arr [ $ i ] ) { $ max_from_right = $ arr [ $ i ] ; echo ( $ max_from_right ) ; echo ( \" \u2581 \" ) ; } } }"}
{"text":"Driver Code","code":"$ arr = array ( 16 , 17 , 4 , 3 , 5 , 2 ) ; $ n = sizeof ( $ arr ) ; printLeaders ( $ arr , $ n ) ; ? >"}
{"text":"Returns the maximum value with knapsack of W capacity","code":"< ? php function unboundedKnapsack ( $ W , $ n , $ val , $ wt ) {"}
{"text":"dp [ i ] is going to store maximum value with knapsack capacity i .","code":"for ( $ i = 0 ; $ i <= $ W ; $ i ++ ) $ dp [ $ i ] = 0 ; $ ans = 0 ;"}
{"text":"Fill dp [ ] using above recursive formula","code":"for ( $ i = 0 ; $ i <= $ W ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( $ wt [ $ j ] <= $ i ) $ dp [ $ i ] = max ( $ dp [ $ i ] , $ dp [ $ i - $ wt [ $ j ] ] + $ val [ $ j ] ) ; return $ dp [ $ W ] ; }"}
{"text":"Driver Code","code":"$ W = 100 ; $ val = array ( 10 , 30 , 20 ) ; $ wt = array ( 5 , 10 , 15 ) ; $ n = count ( $ val ) ; sizeof ( $ val ) \/ sizeof ( $ val [ 0 ] ) ; echo unboundedKnapsack ( $ W , $ n , $ val , $ wt ) ; ? >"}
{"text":"Function to get index of ceiling of x in arr [ low . . high ]","code":"< ? php function ceilSearch ( $ arr , $ low , $ high , $ x ) {"}
{"text":"If x is smaller than or equal to first element , then return the first element","code":"if ( $ x <= $ arr [ $ low ] ) return $ low ;"}
{"text":"Otherwise , linearly search for ceil value","code":"for ( $ i = $ low ; $ i < $ high ; $ i ++ ) { if ( $ arr [ $ i ] == $ x ) return $ i ;"}
{"text":"if x lies between arr [ i ] and arr [ i + 1 ] including arr [ i + 1 ] , then return arr [ i + 1 ]","code":"if ( $ arr [ $ i ] < $ x && $ arr [ $ i + 1 ] >= $ x ) return $ i + 1 ; }"}
{"text":"If we reach here then x is greater than the last element of the array , return - 1 in this case","code":"return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 8 , 10 , 10 , 12 , 19 ) ; $ n = sizeof ( $ arr ) ; $ x = 3 ; $ index = ceilSearch ( $ arr , 0 , $ n - 1 , $ x ) ; if ( $ index == -1 ) echo ( \" Ceiling \u2581 of \u2581 \" . $ x . \" \u2581 doesn ' t \u2581 exist \u2581 in \u2581 array \u2581 \" ) ; else echo ( \" ceiling \u2581 of \u2581 \" . $ x . \" \u2581 is \u2581 \" . $ arr [ $ index ] ) ; ? >"}
{"text":"Method returns maximum sum of all subarray where removing one element is also allowed","code":"< ? php function maxSumSubarrayRemovingOneEle ( $ arr , $ n ) {"}
{"text":"Maximum sum subarrays in forward and backward directions","code":"$ fw = array ( ) ; $ bw = array ( ) ;"}
{"text":"Initialize current max and max so far .","code":"$ cur_max = $ arr [ 0 ] ; $ max_so_far = $ arr [ 0 ] ;"}
{"text":"calculating maximum sum subarrays in forward direction","code":"$ fw [ 0 ] = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ cur_max = max ( $ arr [ $ i ] , $ cur_max + $ arr [ $ i ] ) ; $ max_so_far = max ( $ max_so_far , $ cur_max ) ;"}
{"text":"storing current maximum till ith , in forward array","code":"$ fw [ $ i ] = $ cur_max ; }"}
{"text":"calculating maximum sum subarrays in backward direction","code":"$ cur_max = $ max_so_far = $ bw [ $ n - 1 ] = $ arr [ $ n - 1 ] ; for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { $ cur_max = max ( $ arr [ $ i ] , $ cur_max + $ arr [ $ i ] ) ; $ max_so_far = max ( $ max_so_far , $ cur_max ) ;"}
{"text":"storing current maximum from ith , in backward array","code":"$ bw [ $ i ] = $ cur_max ; }"}
{"text":"Initializing final ans by max_so_far so that , case when no element is removed to get max sum subarray is also handled","code":"$ fans = $ max_so_far ;"}
{"text":"choosing maximum ignoring ith element","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) $ fans = max ( $ fans , $ fw [ $ i - 1 ] + $ bw [ $ i + 1 ] ) ; return $ fans ; }"}
{"text":"Driver Code","code":"$ arr = array ( -2 , -3 , 4 , -1 , -2 , 1 , 5 , -3 ) ; $ n = count ( $ arr ) ; echo maxSumSubarrayRemovingOneEle ( $ arr , $ n ) ; ? >"}
{"text":"Function to get index of ceiling of x in arr [ low . . high ]","code":"< ? php function ceilSearch ( $ arr , $ low , $ high , $ x ) { $ mid ;"}
{"text":"If x is smaller than or equal to the first element , then return the first element","code":"if ( $ x <= $ arr [ $ low ] ) return $ low ;"}
{"text":"If x is greater than the last element , then return - 1","code":"if ( $ x > $ arr [ $ high ] ) return -1 ;"}
{"text":"get the index of middle element of arr [ low . . high ]","code":"$ mid = ( $ low + $ high ) \/ 2 ;"}
{"text":"If x is same as middle element , then return mid","code":"if ( $ arr [ $ mid ] == $ x ) return $ mid ;"}
{"text":"If x is greater than arr [ mid ] , then either arr [ mid + 1 ] is ceiling of x or ceiling lies in arr [ mid + 1. . . high ]","code":"else if ( $ arr [ $ mid ] < $ x ) { if ( $ mid + 1 <= $ high && $ x <= $ arr [ $ mid + 1 ] ) return $ mid + 1 ; else return ceilSearch ( $ arr , $ mid + 1 , $ high , $ x ) ; }"}
{"text":"If x is smaller than arr [ mid ] , then either arr [ mid ] is ceiling of x or ceiling lies in arr [ low ... . mid - 1 ]","code":"else { if ( $ mid - 1 >= $ low && $ x > $ arr [ $ mid - 1 ] ) return $ mid ; else return ceilSearch ( $ arr , $ low , $ mid - 1 , $ x ) ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 8 , 10 , 10 , 12 , 19 ) ; $ n = sizeof ( $ arr ) ; $ x = 20 ; $ index = ceilSearch ( $ arr , 0 , $ n - 1 , $ x ) ; if ( $ index == -1 ) echo ( \" Ceiling \u2581 of \u2581 $ x \u2581 doesn ' t \u2581 exist \u2581 in \u2581 array \u2581 \" ) ; else echo ( \" ceiling \u2581 of \u2581 $ x \u2581 is \" ) ; echo ( isset ( $ arr [ $ index ] ) ) ; ? >"}
{"text":"method returns maximum average of all path of cost matrix","code":"< ? php function maxAverageOfPath ( $ cost , $ N ) { $ dp = array ( array ( ) ) ; $ dp [ 0 ] [ 0 ] = $ cost [ 0 ] [ 0 ] ;"}
{"text":"Initialize first column of total cost ( dp ) array","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) $ dp [ $ i ] [ 0 ] = $ dp [ $ i - 1 ] [ 0 ] + $ cost [ $ i ] [ 0 ] ;"}
{"text":"Initialize first row of dp array","code":"for ( $ j = 1 ; $ j < $ N ; $ j ++ ) $ dp [ 0 ] [ $ j ] = $ dp [ 0 ] [ $ j - 1 ] + $ cost [ 0 ] [ $ j ] ;"}
{"text":"Construct rest of the dp array","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ N ; $ j ++ ) $ dp [ $ i ] [ $ j ] = max ( $ dp [ $ i - 1 ] [ $ j ] , $ dp [ $ i ] [ $ j - 1 ] ) + $ cost [ $ i ] [ $ j ] ; }"}
{"text":"divide maximum sum by constant path length : ( 2 N - 1 ) for getting average","code":"return $ dp [ $ N - 1 ] [ $ N - 1 ] \/ ( 2 * $ N - 1 ) ; }"}
{"text":"Driver code","code":"$ cost = array ( array ( 1 , 2 , 3 ) , array ( 6 , 5 , 4 ) , array ( 7 , 3 , 9 ) ) ; echo maxAverageOfPath ( $ cost , 3 ) ; ? >"}
{"text":"Function which return the maximum weight path sum","code":"< ? php function maxCost ( $ mat , $ N ) {"}
{"text":"creat 2D matrix to store the sum of the path","code":"$ dp = array ( array ( ) ) ; memset ( dp , 0 , sizeof ( dp ) ) ; $ dp [ 0 ] [ 0 ] = $ mat [ 0 ] [ 0 ] ;"}
{"text":"Initialize first column of total weight array ( dp [ i to N ] [ 0 ] )","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) $ dp [ $ i ] [ 0 ] = $ mat [ $ i ] [ 0 ] + $ dp [ $ i - 1 ] [ 0 ] ;"}
{"text":"Calculate rest path sum of weight matrix","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { for ( $ j = 1 ; $ j < $ i + 1 && $ j < $ N ; $ j ++ ) $ dp [ $ i ] [ $ j ] = $ mat [ $ i ] [ $ j ] + max ( $ dp [ $ i - 1 ] [ $ j - 1 ] , $ dp [ $ i - 1 ] [ $ j ] ) ; }"}
{"text":"find the max weight path sum to rech the last row","code":"$ result = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( $ result < $ dp [ $ N - 1 ] [ $ i ] ) $ result = $ dp [ $ N - 1 ] [ $ i ] ;"}
{"text":"return maximum weight path sum","code":"return $ result ; }"}
{"text":"Driver program","code":"$ mat = array ( array ( 4 , 1 , 5 , 6 , 1 ) , array ( 2 , 9 , 2 , 11 , 10 ) , array ( 15 , 1 , 3 , 15 , 2 ) , array ( 16 , 92 , 41 , 4 , 3 ) , array ( 8 , 142 , 6 , 4 , 8 ) ) ; $ N = 5 ; echo \" Maximum \u2581 Path \u2581 Sum \u2581 : \u2581 \" , maxCost ( $ mat , $ N ) ; ? >"}
{"text":"Function to find out maximum profit by buying & selling a share atmost k times given stock price of n days","code":"< ? php function maxProfit ( $ price , $ n , $ k ) {"}
{"text":"table to store results of subproblems profit [ t ] [ i ] stores maximum profit using atmost t transactions up to day i ( including day i )","code":"$ profit [ $ k + 1 ] [ $ n + 1 ] = 0 ;"}
{"text":"For day 0 , you can 't  earn money irrespective  of how many times you trade","code":"for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) $ profit [ $ i ] [ 0 ] = 0 ;"}
{"text":"profit is 0 if we don 't  do any transaction  (i.e. k =0)","code":"for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ profit [ 0 ] [ $ j ] = 0 ;"}
{"text":"fill the table in bottom - up fashion","code":"$ prevDiff = NULL ; for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) { for ( $ j = 1 ; $ j < $ n ; $ j ++ ) { $ prevDiff = max ( $ prevDiff , $ profit [ $ i - 1 ] [ $ j - 1 ] - $ price [ $ j - 1 ] ) ; $ profit [ $ i ] [ $ j ] = max ( $ profit [ $ i ] [ $ j - 1 ] , $ price [ $ j ] + $ prevDiff ) ; } } return $ profit [ $ k ] [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ k = 3 ; $ price = array ( 12 , 14 , 17 , 10 , 14 , 13 , 12 , 15 ) ; $ n = sizeof ( $ price ) ; echo \" Maximum \u2581 profit \u2581 is : \u2581 \" , maxProfit ( $ price , $ n , $ k ) ; ? >"}
{"text":"diff is difference between sums first n bits and last n bits respectively","code":"< ? php function countSeq ( $ n , $ diff ) {"}
{"text":"We can 't cover difference of  more than n with 2n bits","code":"if ( abs ( $ diff ) > $ n ) return 0 ;"}
{"text":"n == 1 , i . e . , 2 bit long sequences","code":"if ( $ n == 1 && $ diff == 0 ) return 2 ; if ( $ n == 1 && abs ( $ diff ) == 1 ) return 1 ;"}
{"text":"First bit is 0 & last bit is 1","code":"$ res = countSeq ( $ n - 1 , $ diff + 1 ) +"}
{"text":"First and last bits are same","code":"2 * countSeq ( $ n - 1 , $ diff ) +"}
{"text":"First bit is 1 & last bit is 0","code":"countSeq ( $ n - 1 , $ diff - 1 ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo \" Count \u2581 of \u2581 sequences \u2581 is \u2581 \" , countSeq ( $ n , 0 ) ; ? >"}
{"text":"A memoization based PHP program to count even length binary sequences such that the sum of first and second half bits is same","code":"< ? php $ MAX = 1000 ;"}
{"text":"A lookup table to store the results of subproblems","code":"$ lookup = array_fill ( 0 , $ MAX , array_fill ( 0 , $ MAX , -1 ) ) ;"}
{"text":"dif is difference between sums of first n bits and last n bits i . e . , dif = ( Sum of first n bits ) - ( Sum of last n bits )","code":"function countSeqUtil ( $ n , $ dif ) { global $ lookup ;"}
{"text":"We can 't cover difference of more  than n with 2n bits","code":"if ( abs ( $ dif ) > $ n ) return 0 ;"}
{"text":"n == 1 , i . e . , 2 bit long sequences","code":"if ( $ n == 1 && $ dif == 0 ) return 2 ; if ( $ n == 1 && abs ( $ dif ) == 1 ) return 1 ;"}
{"text":"Check if this subproblem is already solved n is added to dif to make sure index becomes positive","code":"if ( $ lookup [ $ n ] [ $ n + $ dif ] != -1 ) return $ lookup [ $ n ] [ $ n + $ dif ] ;"}
{"text":"$res = First bit is 0 & last bit is 1","code":"countSeqUtil ( $ n - 1 , $ dif + 1 ) +"}
{"text":"First and last bits are same","code":"2 * countSeqUtil ( $ n - 1 , $ dif ) +"}
{"text":"First bit is 1 & last bit is 0","code":"countSeqUtil ( $ n - 1 , $ dif - 1 ) ;"}
{"text":"Store result in lookup table and return the result","code":"return $ lookup [ $ n ] [ $ n + $ dif ] = $ res ; }"}
{"text":"A Wrapper over countSeqUtil ( ) . It mainly initializes lookup table , then calls countSeqUtil ( )","code":"function countSeq ( $ n ) {"}
{"text":"call countSeqUtil ( )","code":"return countSeqUtil ( $ n , 0 ) ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo \" Count \u2581 of \u2581 sequences \u2581 is \u2581 \" . countSeq ( $ n ) ; ? >"}
{"text":"A utility function to find minimum in arr [ l . . h ]","code":"< ? php function min_1 ( & $ arr , $ l , $ h ) { $ mn = $ arr [ $ l ] ; for ( $ i = $ l + 1 ; $ i <= $ h ; $ i ++ ) if ( $ mn > $ arr [ $ i ] ) $ mn = $ arr [ $ i ] ; return $ mn ; }"}
{"text":"A utility function to find maximum in arr [ l . . h ]","code":"function max_1 ( & $ arr , $ l , $ h ) { $ mx = $ arr [ $ l ] ; for ( $ i = $ l + 1 ; $ i <= $ h ; $ i ++ ) if ( $ mx < $ arr [ $ i ] ) $ mx = $ arr [ $ i ] ; return $ mx ; }"}
{"text":"Returns the minimum number of removals from either end in arr [ l . . h ] so that 2 * min becomes greater than max .","code":"function minRemovals ( & $ arr , $ l , $ h ) {"}
{"text":"If there is 1 or less elements , return 0. For a single element , 2 * min > max . ( Assumption : All elements are positive in arr [ ] )","code":"if ( $ l >= $ h ) return 0 ;"}
{"text":"1 ) Find minimum and maximum in arr [ l . . h ]","code":"$ mn = min_1 ( $ arr , $ l , $ h ) ; $ mx = max_1 ( $ arr , $ l , $ h ) ;"}
{"text":"If the property is followed , no removals needed","code":"if ( 2 * $ mn > $ mx ) return 0 ;"}
{"text":"Otherwise remove a character from left end and recur , then remove a character from right end and recur , take the minimum of two is returned","code":"return min ( minRemovals ( $ arr , $ l + 1 , $ h ) , minRemovals ( $ arr , $ l , $ h - 1 ) ) + 1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 5 , 100 , 9 , 10 , 11 , 12 , 15 , 200 ) ; $ n = sizeof ( $ arr ) ; echo minRemovals ( $ arr , 0 , $ n - 1 ) ; ? >"}
{"text":"Returns count of possible paths to reach cell at row number m and column number n from the topmost leftmost cell ( cell at 1 , 1 )","code":"< ? php function numberOfPaths ( $ m , $ n ) {"}
{"text":"Create a 2D table to store results of subproblems","code":"$ count = array ( ) ;"}
{"text":"Count of paths to reach any cell in first column is 1","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) $ count [ $ i ] [ 0 ] = 1 ;"}
{"text":"Count of paths to reach any cell in first column is 1","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ count [ 0 ] [ $ j ] = 1 ;"}
{"text":"Calculate count of paths for other cells in bottom - up manner using the recursive solution","code":"for ( $ i = 1 ; $ i < $ m ; $ i ++ ) { for ( $ j = 1 ; $ j < $ n ; $ j ++ )"}
{"text":"By uncommenting the last part the code calculated the total possible paths if the diagonal Movements are allowed","code":"$ count [ $ i ] [ $ j ] = $ count [ $ i - 1 ] [ $ j ] + $ count [ $ i ] [ $ j - 1 ] + count [ i - 1 ] [ j - 1 ] ; } return $ count [ $ m - 1 ] [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"echo numberOfPaths ( 3 , 3 ) ; ? >"}
{"text":"Utility function to get the maximum of two and three integers","code":"< ? php function max_1 ( $ a , $ b , $ c ) { return max ( $ a , max ( $ b , $ c ) ) ; }"}
{"text":"The main function that returns maximum product obtainable from a rope of length n","code":"function maxProd ( $ n ) {"}
{"text":"Base cases","code":"if ( $ n == 0 $ n == 1 ) return 0 ;"}
{"text":"Make a cut at different places and take the maximum of all","code":"$ max_val = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ max_val = max_1 ( $ max_val , $ i * ( $ n - $ i ) , maxProd ( $ n - $ i ) * $ i ) ;"}
{"text":"Return the maximum of all values","code":"return $ max_val ; }"}
{"text":"Driver Code","code":"echo \" Maximum \u2581 Product \u2581 is \u2581 \" . maxProd ( 10 ) ; ? >"}
{"text":"A PHP program to find minimum possible time by the car chassis to complete","code":"< ? php $ NUM_LINE = 2 ; $ NUM_STATION = 4 ;"}
{"text":"Utility function to find minimum of two numbers","code":"function carAssembly ( $ a , $ t , $ e , $ x ) { global $ NUM_LINE , $ NUM_STATION ; $ T1 = array ( ) ; $ T2 = array ( ) ; $ i ;"}
{"text":"time taken to leave first station in line 1","code":"$ T1 [ 0 ] = $ e [ 0 ] + $ a [ 0 ] [ 0 ] ;"}
{"text":"time taken to leave first station in line 2","code":"$ T2 [ 0 ] = $ e [ 1 ] + $ a [ 1 ] [ 0 ] ;"}
{"text":"Fill tables T1 [ ] and T2 [ ] using the above given recursive relations","code":"for ( $ i = 1 ; $ i < $ NUM_STATION ; ++ $ i ) { $ T1 [ $ i ] = min ( $ T1 [ $ i - 1 ] + $ a [ 0 ] [ $ i ] , $ T2 [ $ i - 1 ] + $ t [ 1 ] [ $ i ] + $ a [ 0 ] [ $ i ] ) ; $ T2 [ $ i ] = min ( $ T2 [ $ i - 1 ] + $ a [ 1 ] [ $ i ] , $ T1 [ $ i - 1 ] + $ t [ 0 ] [ $ i ] + $ a [ 1 ] [ $ i ] ) ; }"}
{"text":"Consider exit times and return minimum","code":"return min ( $ T1 [ $ NUM_STATION - 1 ] + $ x [ 0 ] , $ T2 [ $ NUM_STATION - 1 ] + $ x [ 1 ] ) ; }"}
{"text":"Driver Code","code":"$ a = array ( array ( 4 , 5 , 3 , 2 ) , array ( 2 , 10 , 1 , 4 ) ) ; $ t = array ( array ( 0 , 7 , 4 , 5 ) , array ( 0 , 9 , 2 , 8 ) ) ; $ e = array ( 10 , 12 ) ; $ x = array ( 18 , 7 ) ; echo carAssembly ( $ a , $ t , $ e , $ x ) ; ? >"}
{"text":"Returns length of longest common substring of X [ 0. . m - 1 ] and Y [ 0. . n - 1 ]","code":"< ? php function LCSubStr ( $ X , $ Y , $ m , $ n ) {"}
{"text":"Create a table to store lengths of longest common suffixes of substrings . Notethat LCSuff [ i ] [ j ] contains length of longest common suffix of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ] . The first row and first column entries have no logical meaning , they are used only for simplicity of program","code":"$ LCSuff = array_fill ( 0 , $ m + 1 , array_fill ( 0 , $ n + 1 , NULL ) ) ;"}
{"text":"To store length of the longest common substring","code":"$ result = 0 ;"}
{"text":"Following steps build LCSuff [ m + 1 ] [ n + 1 ] in bottom up fashion .","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 0 $ j == 0 ) $ LCSuff [ $ i ] [ $ j ] = 0 ; else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) { $ LCSuff [ $ i ] [ $ j ] = $ LCSuff [ $ i - 1 ] [ $ j - 1 ] + 1 ; $ result = max ( $ result , $ LCSuff [ $ i ] [ $ j ] ) ; } else $ LCSuff [ $ i ] [ $ j ] = 0 ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ X = \" OldSite : GeeksforGeeks . org \" ; $ Y = \" NewSite : GeeksQuiz . com \" ; $ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ; echo \" Length \u2581 of \u2581 Longest \u2581 Common \u2581 Substring \u2581 is \u2581 \" . LCSubStr ( $ X , $ Y , $ m , $ n ) ; ? >"}
{"text":"Find the maximum possible sum in arr [ ] such that arr [ m ] is part of it","code":"< ? php function maxCrossingSum ( & $ arr , $ l , $ m , $ h ) {"}
{"text":"Include elements on left of mid .","code":"$ sum = 0 ; $ left_sum = PHP_INT_MIN ; for ( $ i = $ m ; $ i >= $ l ; $ i -- ) { $ sum = $ sum + $ arr [ $ i ] ; if ( $ sum > $ left_sum ) $ left_sum = $ sum ; }"}
{"text":"Include elements on right of mid","code":"$ sum = 0 ; $ right_sum = PHP_INT_MIN ; for ( $ i = $ m + 1 ; $ i <= $ h ; $ i ++ ) { $ sum = $ sum + $ arr [ $ i ] ; if ( $ sum > $ right_sum ) $ right_sum = $ sum ; }"}
{"text":"Return sum of elements on left and right of mid returning only left_sum + right_sum will fail for [ - 2 , 1 ]","code":"return max ( $ left_sum + $ right_sum , $ left_sum , $ right_sum ) ; }"}
{"text":"Returns sum of maximum sum subarray in aa [ l . . h ]","code":"function maxSubArraySum ( & $ arr , $ l , $ h ) {"}
{"text":"Base Case : Only one element","code":"if ( $ l == $ h ) return $ arr [ $ l ] ;"}
{"text":"Find middle point","code":"$ m = intval ( ( $ l + $ h ) \/ 2 ) ;"}
{"text":"Return maximum of following three possible cases a ) Maximum subarray sum in left half b ) Maximum subarray sum in right half c ) Maximum subarray sum such that the subarray crosses the midpoint","code":"return max ( maxSubArraySum ( $ arr , $ l , $ m ) , maxSubArraySum ( $ arr , $ m + 1 , $ h ) , maxCrossingSum ( $ arr , $ l , $ m , $ h ) ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 4 , 5 , 7 ) ; $ n = count ( $ arr ) ; $ max_sum = maxSubArraySum ( $ arr , 0 , $ n - 1 ) ; echo \" Maximum \u2581 contiguous \u2581 sum \u2581 is \u2581 \" . $ max_sum ; ? >"}
{"text":"Returns the amount of water in jth glass of ith row","code":"< ? php function findWater ( $ i , $ j , $ X ) {"}
{"text":"A row number i has maximum i columns . So input column number must be less than i","code":"if ( $ j > $ i ) { echo \" Incorrect \u2581 Input STRNEWLINE \" ; return ; }"}
{"text":"There will be i * ( i + 1 ) \/ 2 glasses till ith row ( including ith row ) and Initialize all glasses as empty","code":"$ glass = array_fill ( 0 , ( int ) ( $ i * ( $ i + 1 ) \/ 2 ) , 0 ) ;"}
{"text":"Put all water in first glass","code":"$ index = 0 ; $ glass [ $ index ] = $ X ;"}
{"text":"Now let the water flow to the downward glasses till the row number is less than or \/ equal to i ( given row ) correction : X can be zero for side glasses as they have lower rate to fill","code":"for ( $ row = 1 ; $ row < $ i ; ++ $ row ) {"}
{"text":"Fill glasses in a given row . Number of columns in a row is equal to row number","code":"for ( $ col = 1 ; $ col <= $ row ; ++ $ col , ++ $ index ) {"}
{"text":"Get the water from current glass","code":"$ X = $ glass [ $ index ] ;"}
{"text":"Keep the amount less than or equal to capacity in current glass","code":"$ glass [ $ index ] = ( $ X >= 1.0 ) ? 1.0 : $ X ;"}
{"text":"Get the remaining amount","code":"$ X = ( $ X >= 1.0 ) ? ( $ X - 1 ) : 0.0 ;"}
{"text":"Distribute the remaining amount to the down two glasses","code":"$ glass [ $ index + $ row ] += ( double ) ( $ X \/ 2 ) ; $ glass [ $ index + $ row + 1 ] += ( double ) ( $ X \/ 2 ) ; } }"}
{"text":"The index of jth glass in ith row will be i * ( i - 1 ) \/ 2 + j - 1","code":"return $ glass [ ( int ) ( $ i * ( $ i - 1 ) \/ 2 + $ j - 1 ) ] ; }"}
{"text":"Driver Code","code":"$ i = 2 ; $ j = 2 ;"}
{"text":"Total amount of water","code":"$ X = 2.0 ; echo \" Amount \u2581 of \u2581 water \u2581 in \u2581 jth \u2581 \" , \" glass \u2581 of \u2581 ith \u2581 row \u2581 is : \u2581 \" . str_pad ( findWater ( $ i , $ j , $ X ) , 8 , '0' ) ; ? >"}
{"text":"Returns the minimum number of cuts needed to partition a string such that every part is a palindrome","code":"< ? php function minPalPartion ( $ str ) {"}
{"text":"Get the length of the string","code":"$ n = strlen ( $ str ) ;"}
{"text":"Create two arrays to build the solution in bottom up manner C [ i ] [ j ] = Minimum number of cuts needed for palindrome partitioning of substring str [ i . . j ] P [ i ] [ j ] = true if substring str [ i . . j ] is palindrome , else false Note that C [ i ] [ j ] is 0 if P [ i ] [ j ] is true","code":"$ C = array_fill ( 0 , $ n , array_fill ( 0 , $ n , NULL ) ) ; $ P = array_fill ( false , $ n , array_fill ( false , $ n , NULL ) ) ;"}
{"text":"Every substring of length 1 is a palindrome","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ P [ $ i ] [ $ i ] = true ; $ C [ $ i ] [ $ i ] = 0 ; }"}
{"text":"L is substring length . Build the solution in a bottom - up manner by considering all substrings of length starting from 2 to n . The loop structure is same as Matrix Chain Multiplication problem ( See https : www . geeksforgeeks . org \/ matrix - chain - multiplication - dp - 8 \/ )","code":"for ( $ L = 2 ; $ L <= $ n ; $ L ++ ) {"}
{"text":"For substring of length L , set different possible starting indexes","code":"for ( $ i = 0 ; $ i < $ n - $ L + 1 ; $ i ++ ) {"}
{"text":"Set ending index","code":"$ j = $ i + $ L - 1 ;"}
{"text":"If L is 2 , then we just need to compare two characters . Else need to check two corner characters and value of P [ i + 1 ] [ j - 1 ]","code":"if ( $ L == 2 ) $ P [ $ i ] [ $ j ] = ( $ str [ $ i ] == $ str [ $ j ] ) ; else $ P [ $ i ] [ $ j ] = ( $ str [ $ i ] == $ str [ $ j ] ) && $ P [ $ i + 1 ] [ $ j - 1 ] ;"}
{"text":"IF str [ i . . j ] is palindrome , then C [ i ] [ j ] is 0","code":"if ( $ P [ $ i ] [ $ j ] == true ) $ C [ $ i ] [ $ j ] = 0 ; else {"}
{"text":"Make a cut at every possible location starting from i to j , and get the minimum cost cut .","code":"$ C [ $ i ] [ $ j ] = PHP_INT_MAX ; for ( $ k = $ i ; $ k <= $ j - 1 ; $ k ++ ) $ C [ $ i ] [ $ j ] = min ( $ C [ $ i ] [ $ j ] , $ C [ $ i ] [ $ k ] + $ C [ $ k + 1 ] [ $ j ] + 1 ) ; } } }"}
{"text":"Return the min cut value for complete string . i . e . , str [ 0. . n - 1 ]","code":"return $ C [ 0 ] [ $ n - 1 ] ; }"}
{"text":"Driver program to test the above function","code":"$ str = \" ababbbabbababa \" ; echo \" Min \u2581 cuts \u2581 needed \u2581 for \u2581 Palindrome \u2581 Partitioning \u2581 is \u2581 \" . minPalPartion ( $ str ) ; return 0 ; ? >"}
{"text":"Function to check if the two strings can be matched or not","code":"< ? php function doMatch ( $ A , $ B ) { for ( $ i = 0 ; $ i < strlen ( $ A ) ; $ i ++ )"}
{"text":"if the string don 't have *  then character at that position  must be same.","code":"if ( $ A [ $ i ] != ' * ' && $ B [ $ i ] != ' * ' ) if ( $ A [ $ i ] != $ B [ $ i ] ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ A = \" gee * sforgeeks \" ; $ B = \" geeksforgeeks \" ; echo doMatch ( $ A , $ B ) ; ? >"}
{"text":"Calculate Nth term of series","code":"< ? php function nthTerm ( $ N ) { return ( int ) ( ( $ N + $ N * ( $ N - 1 ) ) \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ N = 5 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"PHP program to count number of substrings of s1 present in s2 .","code":"< ? php function countSubstrs ( $ s1 , $ s2 ) { $ ans = 0 ; for ( $ i = 0 ; $ i < strlen ( $ s1 ) ; $ i ++ ) {"}
{"text":"s3 stores all substrings of s1","code":"$ s3 = \" \" ; for ( $ j = $ i ; $ j < strlen ( $ s1 ) ; $ j ++ ) { $ s3 += $ s1 [ $ j ] ;"}
{"text":"check the presence of s3 in s2","code":"if ( stripos ( $ s2 , $ s3 , 0 ) != -1 ) $ ans ++ ; } } return $ ans ; }"}
{"text":"Driver code","code":"$ s1 = \" aab \" ; $ s2 = \" aaaab \" ; echo countSubstrs ( $ s1 , $ s2 ) ; ? >"}
{"text":"Function for finding factorial of N","code":"< ? php function factorial ( $ N ) { $ fact = 1 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) $ fact = $ fact * $ i ;"}
{"text":"return factorial of N","code":"return $ fact ; }"}
{"text":"Function for calculating Nth term of series","code":"function nthTerm ( $ N ) { return ( factorial ( $ N ) * ( $ N + 2 ) \/ 2 ) ; }"}
{"text":"Driver code","code":"$ N = 6 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"Returns true if pat matches with text","code":"< ? php function regexMatch ( $ text , $ pat ) { $ lenText = strlen ( $ text ) ; $ letPat = strlen ( $ pat ) ;"}
{"text":"i is used as an index in pattern and j as an index in text","code":"$ i = 0 ; $ j = 0 ;"}
{"text":"Traverse through pattern","code":"while ( $ i < $ letPat ) {"}
{"text":"If current character of pattern is not ' # '","code":"if ( $ pat [ $ i ] != ' # ' ) {"}
{"text":"If does not match with text","code":"if ( $ pat [ $ i ] != $ text [ $ j ] ) return false ;"}
{"text":"If matches , increment i and j","code":"$ i ++ ; $ j ++ ; }"}
{"text":"Current character is ' # '","code":"else {"}
{"text":"At least one character must match with #","code":"$ j ++ ;"}
{"text":"Match characters with # until a matching character is found .","code":"while ( $ text [ $ j ] != $ pat [ $ i + 1 ] ) $ j ++ ;"}
{"text":"Matching with # is over , move ahead in pattern","code":"$ i ++ ; } } return ( $ j == $ lenText ) ; }"}
{"text":"Driver code","code":"$ str = \" ABABABA \" ; $ pat = \" A # B # A \" ; if ( regexMatch ( $ str , $ pat ) ) echo \" yes \" ; else echo \" no \" ; ? >"}
{"text":"Updates such that getElement ( ) gets an increased value when queried from l to r .","code":"< ? php function update ( & $ arr , $ l , $ r , $ val ) { $ arr [ $ l ] += $ val ; if ( $ r + 1 < sizeof ( $ arr ) ) $ arr [ $ r + 1 ] -= $ val ; }"}
{"text":"Get the element indexed at i","code":"function getElement ( & $ arr , $ i ) {"}
{"text":"To get ith element sum of all the elements from 0 to i need to be computed","code":"$ res = 0 ; for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) $ res += $ arr [ $ j ] ; return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 0 , 0 , 0 , 0 , 0 ) ; $ n = sizeof ( $ arr ) ; $ l = 2 ; $ r = 4 ; $ val = 2 ; update ( $ arr , $ l , $ r , $ val ) ;"}
{"text":"Find the element at Index 4","code":"$ index = 4 ; echo ( \" Element \u2581 at \u2581 index \u2581 \" . $ index . \" \u2581 is \u2581 \" . getElement ( $ arr , $ index ) . \" STRNEWLINE \" ) ; $ l = 0 ; $ r = 3 ; $ val = 4 ; update ( $ arr , $ l , $ r , $ val ) ;"}
{"text":"Find the element at Index 3","code":"$ index = 3 ; echo ( \" Element \u2581 at \u2581 index \u2581 \" . $ index . \" \u2581 is \u2581 \" . getElement ( $ arr , $ index ) ) ; ? >"}
{"text":"Function to find factorial of a number","code":"< ? php function factorial ( $ n ) { if ( $ n <= 1 ) return 1 ; return $ n * factorial ( $ n - 1 ) ; }"}
{"text":"Function to find nCr","code":"function nCr ( $ n , $ r ) { return factorial ( $ n ) \/ ( factorial ( $ n - $ r ) * factorial ( $ r ) ) ; }"}
{"text":"Function to find the number of ways to arrange 2 * N persons","code":"function NumberOfWays ( $ n , $ x , $ y ) { return nCr ( 2 * $ n - $ x - $ y , $ n - $ x ) * factorial ( $ n ) * factorial ( $ n ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ x = 4 ; $ y = 2 ;"}
{"text":"Function call","code":"echo ( NumberOfWays ( $ n , $ x , $ y ) ) ; ? >"}
{"text":"Function to return count of required pairs","code":"< ? php function count_pairs ( $ a , $ b , $ n , $ m ) {"}
{"text":"Count of odd and even numbers from both the arrays","code":"$ odd1 = 0 ; $ even1 = 0 ; $ odd2 = 0 ; $ even2 = 0 ;"}
{"text":"Find the count of odd and even elements in a [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] % 2 == 1 ) $ odd1 ++ ; else $ even1 ++ ; }"}
{"text":"Find the count of odd and even elements in b [ ]","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { if ( $ b [ $ i ] % 2 == 1 ) $ odd2 ++ ; else $ even2 ++ ; }"}
{"text":"Count the number of pairs","code":"$ pairs = min ( $ odd1 , $ odd2 ) + min ( $ even1 , $ even2 ) ;"}
{"text":"Return the number of pairs","code":"return $ pairs ; }"}
{"text":"Driver code","code":"$ a = array ( 9 , 14 , 6 , 2 , 11 ) ; $ b = array ( 8 , 4 , 7 , 20 ) ; $ n = count ( $ a ) ; $ m = count ( $ b ) ; echo count_pairs ( $ a , $ b , $ n , $ m ) ;"}
{"text":"This code is contributes by AnkitRai01","code":"? >"}
{"text":"Function to return the value of F ( N )","code":"< ? php function getValueOfF ( $ n ) {"}
{"text":"Base cases","code":"if ( $ n == 1 ) return 0 ; if ( $ n == 2 ) return 1 ; $ cnt = 0 ;"}
{"text":"Count the number of times a number if divisible by 2","code":"while ( $ n % 2 == 0 ) { $ cnt += 1 ; $ n \/= 2 ; }"}
{"text":"Return the summation","code":"return 2 * $ cnt ; }"}
{"text":"Driver code","code":"$ n = 20 ; echo getValueOfF ( $ n ) ; ? >"}
{"text":"Function to return A mod B","code":"< ? php function A_mod_B ( $ N , $ a ) {"}
{"text":"length of the string","code":"$ len = strlen ( $ N ) ;"}
{"text":"to store required answer","code":"$ ans = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) $ ans = ( $ ans * 10 + ( int ) $ N [ $ i ] - '0' ) % $ a ; return $ ans % $ a ; }"}
{"text":"Function to return ( 1 ^ n + 2 ^ n + 3 ^ n + 4 ^ n ) % 5","code":"function findMod ( $ N ) {"}
{"text":"Calculate and return ans","code":"$ mod = A_mod_B ( $ N , 4 ) ; $ ans = ( 1 + pow ( 2 , $ mod ) + pow ( 3 , $ mod ) + pow ( 4 , $ mod ) ) ; return ( $ ans % 5 ) ; }"}
{"text":"Driver code","code":"$ N = \"4\" ; echo findMod ( $ N ) ; ? >"}
{"text":"Function to print elements greater than the previous and next element in an Array","code":"< ? php function printElements ( $ arr , $ n ) {"}
{"text":"Traverse array from index 1 to n - 2 and check for the given condition","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ arr [ $ i ] > $ arr [ $ i - 1 ] and $ arr [ $ i ] > $ arr [ $ i + 1 ] ) echo $ arr [ $ i ] . \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 1 , 5 , 4 , 9 , 8 , 7 , 5 ) ; $ n = sizeof ( $ arr ) ; printElements ( $ arr , $ n ) ;"}
{"text":"Recursive C program to compute modular power","code":"< ? php function exponent ( $ A , $ B ) {"}
{"text":"Base cases","code":"if ( $ A == 0 ) return 0 ; if ( $ B == 0 ) return 1 ;"}
{"text":"If B is even","code":"if ( $ B % 2 == 0 ) { $ y = exponent ( $ A , $ B \/ 2 ) ; $ y = ( $ y * $ y ) ; }"}
{"text":"If B is odd","code":"else { $ y = $ A ; $ y = ( $ y * exponent ( $ A , $ B - 1 ) ) ; } return $ y ; }"}
{"text":"Function to return sum","code":"function sum ( $ k , $ n ) { $ sum = exponent ( $ k , $ n + 1 ) - exponent ( $ k - 1 , $ n + 1 ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ K = 3 ; echo sum ( $ K , $ n ) ; ? >"}
{"text":"check if a number is prime or not","code":"< ? php function isPrime ( $ x ) {"}
{"text":"run a loop upto square root of x","code":"for ( $ i = 2 ; $ i * $ i <= $ x ; $ i ++ ) { if ( $ x % $ i == 0 ) return 0 ; } return 1 ; }"}
{"text":"Function to return the minimized cost","code":"function minimumCost ( $ n ) {"}
{"text":"If n is prime","code":"if ( isPrime ( $ n ) ) return 1 ;"}
{"text":"If n is odd and can be split into ( prime + 2 ) then cost will be 1 + 1 = 2","code":"if ( $ n % 2 == 1 && isPrime ( $ n - 2 ) ) return 2 ;"}
{"text":"Every non - prime even number can be expressed as the sum of two primes","code":"if ( $ n % 2 == 0 ) return 2 ;"}
{"text":"n is odd so n can be split into ( 3 + even ) further even part can be split into ( prime + prime ) ( 3 + prime + prime ) will cost 3","code":"return 3 ; }"}
{"text":"Driver code","code":"$ n = 6 ; echo ( minimumCost ( $ n ) ) ;"}
{"text":"Function to calculate amount of wasted water","code":"< ? php function wastedWater ( $ V , $ M , $ N ) {"}
{"text":"filled amount of water in one minute","code":"$ amt_per_min = $ M - $ N ;"}
{"text":"total time taken to fill the tank because of leakage","code":"$ time_to_fill = $ V \/ $ amt_per_min ;"}
{"text":"wasted amount of water","code":"$ wasted_amt = $ N * $ time_to_fill ; return $ wasted_amt ; }"}
{"text":"Driver code","code":"$ V = 700 ; $ M = 10 ; $ N = 3 ; echo wastedWater ( $ V , $ M , $ N ) , \" STRNEWLINE \" ; $ V = 1000 ; $ M = 100 ; $ N = 50 ; echo wastedWater ( $ V , $ M , $ N ) ;"}
{"text":"Function to print the largest and the smallest n - digit perfect cube","code":"< ? php function nDigitPerfectCubes ( $ n ) {"}
{"text":"Smallest n - digit perfect cube","code":"print ( pow ( ceil ( pow ( pow ( 10 , ( $ n - 1 ) ) , 1 \/ 3 ) ) , 3 ) . \" \u2581 \" ) ;"}
{"text":"Largest n - digit perfect cube","code":"print ( ( int ) pow ( ceil ( pow ( pow ( 10 , ( $ n ) ) , 1 \/ 3 ) ) - 1 , 3 ) ) ; }"}
{"text":"Driver code","code":"$ n = 3 ; nDigitPerfectCubes ( $ n ) ; ? >"}
{"text":"Function to return the count of numbers from 1 to n which are divisible by all the numbers from 2 to 10","code":"< ? php function countNumbers ( $ n ) { return ( int ) ( $ n \/ 2520 ) ; }"}
{"text":"Driver code","code":"$ n = 3000 ; echo ( countNumbers ( $ n ) ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ MAX = 10001 ; $ prefix = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Function to calculate the prefix sum of all the odd factors","code":"function sieve_modified ( ) { global $ prefix , $ MAX ; for ( $ i = 1 ; $ i < $ MAX ; $ i += 2 ) {"}
{"text":"Add i to all the multiples of i","code":"for ( $ j = $ i ; $ j < $ MAX ; $ j += $ i ) $ prefix [ $ j ] += $ i ; }"}
{"text":"Update the prefix sum","code":"for ( $ i = 1 ; $ i < $ MAX ; $ i ++ ) $ prefix [ $ i ] += $ prefix [ $ i - 1 ] ; }"}
{"text":"Function to return the sum of all the odd factors of the numbers in the given range","code":"function sumOddFactors ( $ L , $ R ) { global $ prefix ; return ( $ prefix [ $ R ] - $ prefix [ $ L - 1 ] ) ; }"}
{"text":"Driver code","code":"sieve_modified ( ) ; $ l = 6 ; $ r = 10 ; echo sumOddFactors ( $ l , $ r ) ;"}
{"text":"PHP implementation of the approach","code":"< ? php $ n = 3 ;"}
{"text":"Function to pre - compute the xor","code":"function preComputeXor ( $ arr , & $ prefix_xor ) { global $ n ;"}
{"text":"Left to right prefix xor for each row","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ j == 0 ) $ prefix_xor [ $ i ] [ $ j ] = $ arr [ $ i ] [ $ j ] ; else $ prefix_xor [ $ i ] [ $ j ] = ( $ prefix_xor [ $ i ] [ $ j - 1 ] ^ $ arr [ $ i ] [ $ j ] ) ; }"}
{"text":"Top to bottom prefix xor for each column","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 1 ; $ j < $ n ; $ j ++ ) $ prefix_xor [ $ j ] [ $ i ] = ( $ prefix_xor [ $ j - 1 ] [ $ i ] ^ $ prefix_xor [ $ j ] [ $ i ] ) ; }"}
{"text":"Function to process the queries x1 , x2 , y1 , y2 represent the positions of the top - left and bottom right corners","code":"function ansQuerie ( $ prefix_xor , $ x1 , $ y1 , $ x2 , $ y2 ) {"}
{"text":"To store the xor values","code":"$ xor_1 = $ xor_2 = $ xor_3 = 0 ;"}
{"text":"Finding the values we need to xor with value at ( x2 , y2 ) in prefix - xor matrix","code":"if ( $ x1 != 0 ) $ xor_1 = $ prefix_xor [ $ x1 - 1 ] [ $ y2 ] ; if ( $ y1 != 0 ) $ xor_2 = $ prefix_xor [ $ x2 ] [ $ y1 - 1 ] ; if ( $ x1 != 0 and $ y1 != 0 ) $ xor_3 = $ prefix_xor [ $ x1 - 1 ] [ $ y1 - 1 ] ;"}
{"text":"Return the required prefix xor","code":"return ( ( $ prefix_xor [ $ x2 ] [ $ y2 ] ^ $ xor_1 ) ^ ( $ xor_2 ^ $ xor_3 ) ) ; }"}
{"text":"Driver code","code":"$ arr = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ;"}
{"text":"To store pre - computed xor","code":"$ prefix_xor = array_fill ( 0 , $ n , array_fill ( 0 , $ n , 0 ) ) ;"}
{"text":"Pre - computing xor","code":"preComputeXor ( $ arr , $ prefix_xor ) ;"}
{"text":"Queries","code":"echo ansQuerie ( $ prefix_xor , 1 , 1 , 2 , 2 ) . \" \" ; echo ansQuerie ( $ prefix_xor , 1 , 2 , 2 , 2 ) ; ? >"}
{"text":"Function that returns true if the eventual digit sum of number nm is 1","code":"< ? php function isDigitSumOne ( $ nm ) {"}
{"text":"if reminder will 1 then eventual sum is 1","code":"if ( $ nm % 9 == 1 ) return true ; else return false ; }"}
{"text":"Function to print the required numbers less than n","code":"function printValidNums ( $ n ) { $ cbrt_n = ceil ( pow ( $ n , 1 \/ 3 ) ) ; for ( $ i = 1 ; $ i <= $ cbrt_n ; $ i ++ ) { $ cube = pow ( $ i , 3 ) ;"}
{"text":"If it is the required perfect cube","code":"if ( $ cube >= 1 && $ cube <= $ n && isDigitSumOne ( $ cube ) ) echo $ cube , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ n = 1000 ; printValidNums ( $ n ) ; ? >"}
{"text":"Function to return the count of rhombi possible","code":"< ? php function countRhombi ( $ h , $ w ) { $ ct = 0 ;"}
{"text":"All possible diagonal lengths","code":"for ( $ i = 2 ; $ i <= $ h ; $ i += 2 ) for ( $ j = 2 ; $ j <= $ w ; $ j += 2 )"}
{"text":"Update rhombi possible with the current diagonal lengths","code":"$ ct += ( $ h - $ i + 1 ) * ( $ w - $ j + 1 ) ;"}
{"text":"Return the total count of rhombi possible","code":"return $ ct ; }"}
{"text":"Driver code","code":"$ h = 2 ; $ w = 2 ; echo ( countRhombi ( $ h , $ w ) ) ; ? >"}
{"text":"Function to find area between the two given concentric circles","code":"< ? php function calculateArea ( $ x , $ y ) {"}
{"text":"Declare value of pi","code":"$ pi = 3.1415926536 ;"}
{"text":"Calculate area of outer circle","code":"$ arx = $ pi * $ x * $ x ;"}
{"text":"Calculate area of inner circle","code":"$ ary = $ pi * $ y * $ y ;"}
{"text":"Difference in areas","code":"return ( $ arx - $ ary ) ; }"}
{"text":"Driver Code","code":"$ x = 2 ; $ y = 1 ; echo calculateArea ( $ x , $ y ) ; ? >"}
{"text":"Function to calculate gcd","code":"< ? php function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to return the winner of the game","code":"function getWinner ( $ arr , $ n ) {"}
{"text":"To store the gcd of the original array","code":"$ gcd = $ arr [ 0 ] ;"}
{"text":"To store the maximum element from the original array","code":"$ maxEle = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ gcd = __gcd ( $ gcd , $ arr [ $ i ] ) ; $ maxEle = max ( $ maxEle , $ arr [ $ i ] ) ; } $ totalMoves = ( $ maxEle \/ $ gcd ) - $ n ;"}
{"text":"If number of moves are odd","code":"if ( $ totalMoves % 2 == 1 ) return ' A ' ; return ' B ' ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 6 , 7 ) ; $ n = sizeof ( $ arr ) ; echo getWinner ( $ arr , $ n ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function countPairs ( $ n ) {"}
{"text":"Number which will give the max value for ( ( n % i ) % j ) % n","code":"$ num = ( ( $ n \/ 2 ) + 1 ) ;"}
{"text":"To store the maximum possible value of ( ( n % i ) % j ) % n","code":"$ max = $ n % $ num ;"}
{"text":"To store the count of possible pairs","code":"$ count = 0 ;"}
{"text":"Check all possible pairs","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"Calculating the value of ( ( n % i ) % j ) % n","code":"$ val = ( ( $ n % $ i ) % $ j ) % $ n ;"}
{"text":"If value is equal to maximum","code":"if ( $ val == $ max ) $ count ++ ; } }"}
{"text":"Return the number of possible pairs","code":"return $ count ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo ( countPairs ( $ n ) ) ; ? >"}
{"text":"Function to check if given number is divisible by any of its digits","code":"< ? php function isDivisible ( $ n ) { $ temp = $ n ;"}
{"text":"check if any of digit divides n","code":"while ( $ n ) { $ k = $ n % 10 ;"}
{"text":"check if K divides N","code":"if ( $ temp % $ k == 0 ) return \" YES \" ; $ n = floor ( $ n \/ 10 ) ; } return \" NO \" ; }"}
{"text":"Driver Code","code":"$ n = 9876543 ; echo isDivisible ( $ n ) ; ? >"}
{"text":"Function to return sum of harmonic series","code":"< ? php function sum ( $ n ) { $ i ; $ s = 0.0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ s = $ s + 1 \/ $ i ; return $ s ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( \" Sum \u2581 is \u2581 \" ) ; echo ( sum ( $ n ) ) ; ? >"}
{"text":"Function to return all abundant numbers This function will be helpful for multiple queries","code":"< ? php function ABUNDANT ( ) { $ N = 100005 ;"}
{"text":"To store abundant numbers","code":"$ v = array ( ) ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) {"}
{"text":"to store sum of the divisors include 1 in the sum","code":"$ sum = 1 ; for ( $ j = 2 ; $ j * $ j <= $ i ; $ j ++ ) {"}
{"text":"if j is proper divisor","code":"if ( $ i % $ j == 0 ) { $ sum += $ j ;"}
{"text":"if i is not a perfect square","code":"if ( $ i \/ $ j != $ j ) $ sum += $ i \/ $ j ; } }"}
{"text":"if sum is greater than i then i is a abundant number","code":"if ( $ sum > $ i ) array_push ( $ v , $ i ) ; } $ v = array_unique ( $ v ) ; return $ v ; }"}
{"text":"Check if number n is expressed as sum of two abundant numbers","code":"function SumOfAbundant ( $ n ) { $ v = ABUNDANT ( ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"if both i and n - i are abundant numbers","code":"if ( in_array ( $ i , $ v ) && in_array ( $ n - $ i , $ v ) ) { echo $ i , \" \u2581 \" , $ n - $ i ; return ; } }"}
{"text":"can not be expressed","code":"echo - 1 ; }"}
{"text":"Driver code","code":"$ n = 24 ; SumOfAbundant ( $ n ) ; ? >"}
{"text":"function to calculate nth term of the series","code":"< ? php function nthTermOfTheSeries ( $ n ) {"}
{"text":"if n is even number","code":"if ( $ n % 2 == 0 ) $ nthTerm = pow ( $ n - 1 , 2 ) + $ n ;"}
{"text":"if n is odd number","code":"else $ nthTerm = pow ( $ n + 1 , 2 ) + $ n ;"}
{"text":"return nth term","code":"return $ nthTerm ; }"}
{"text":"Driver code","code":"$ n = 8 ; echo nthTermOfTheSeries ( $ n ) . \" STRNEWLINE \" ; $ n = 12 ; echo nthTermOfTheSeries ( $ n ) . \" STRNEWLINE \" ; $ n = 102 ; echo nthTermOfTheSeries ( $ n ) . \" STRNEWLINE \" ; $ n = 999 ; echo nthTermOfTheSeries ( $ n ) . \" STRNEWLINE \" ; $ n = 9999 ; echo nthTermOfTheSeries ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to calculate cost price with profit","code":"< ? php function CPwithProfit ( $ sellingPrice , $ profit ) {"}
{"text":"required formula to calculate CP with profit","code":"$ costPrice = ( $ sellingPrice * 100.0 ) \/ ( 100 + $ profit ) ; return $ costPrice ; }"}
{"text":"Function to calculate cost price with loss","code":"function CPwithLoss ( $ sellingPrice , $ loss ) {"}
{"text":"required formula to calculate CP with loss","code":"$ costPrice = ( $ sellingPrice * 100.0 ) \/ ( 100 - $ loss ) ; return $ costPrice ; }"}
{"text":"Driver code","code":"$ SP = 1020 ; $ profit = 20 ; echo ( \" Cost \u2581 Price \u2581 = \u2581 \" ) ; echo ( CPwithProfit ( $ SP , $ profit ) ) ; echo ( \" STRNEWLINE \" ) ; $ SP = 900 ; $ loss = 10 ; echo ( \" Cost \u2581 Price \u2581 = \u2581 \" ) ; echo ( CPwithLoss ( $ SP , $ loss ) ) ; echo ( \" STRNEWLINE \" ) ; $ SP = 42039 ; $ profit = 8 ; echo ( \" Cost \u2581 Price \u2581 = \u2581 \" ) ; echo ( CPwithProfit ( $ SP , $ profit ) ) ; echo ( \" STRNEWLINE \" ) ; ? >"}
{"text":"Function to find prime factor and check if it is of the form 4 k + 1 or not","code":"< ? php function isNonHypotenuse ( $ n ) {"}
{"text":"2 is a prime number but not of the form 4 k + 1 so , keep Dividing n by 2 until n is divisible by 2","code":"while ( $ n % 2 == 0 ) { $ n = $ n \/ 2 ; }"}
{"text":"n must be odd at this point . So we can skip one element ( Note i = i + 2 )","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) {"}
{"text":"if i divides n check if i is of the form 4 k + 1 or not","code":"if ( $ n % $ i == 0 ) { if ( ( $ i - 1 ) % 4 == 0 ) return false ;"}
{"text":"while i divides n divide n by i and update n","code":"while ( $ n % $ i == 0 ) { $ n = $ n \/ $ i ; } } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( $ n > 2 && ( $ n - 1 ) % 4 == 0 ) return false ; else return true ; }"}
{"text":"Test function","code":"function test ( $ n ) { echo \" Testing \u2581 for \u2581 \" , $ n , \" \u2581 : \u2581 \" ; if ( isNonHypotenuse ( $ n ) ) echo \" YES \" . \" STRNEWLINE \" ; else echo \" NO \" . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ n = 11 ; test ( $ n ) ; $ n = 10 ; test ( $ n ) ; ? >"}
{"text":"Function to return the nth string in the required sequence","code":"< ? php function obtain_str ( $ n ) {"}
{"text":"Length of the resultant string","code":"$ len = ( int ) ( log ( $ n + 1 ) \/ log ( 2 ) ) ;"}
{"text":"Relative index","code":"$ rel_ind = $ n + 1 - pow ( 2 , $ len ) ; $ i = 0 ; $ str = \" \" ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) {"}
{"text":"Initial string of length len consists of all a 's since the  list is sorted","code":"$ str . = ' a ' ; } $ i = 0 ;"}
{"text":"Convert relative index to Binary form and set 0 = a and 1 = b","code":"while ( $ rel_ind > 0 ) { if ( $ rel_ind % 2 == 1 ) $ str [ $ i ] = ' b ' ; $ rel_ind = ( int ) ( $ rel_ind \/ 2 ) ; $ i ++ ; }"}
{"text":"Reverse and return the string","code":"return strrev ( $ str ) ; }"}
{"text":"Driver Code","code":"$ n = 11 ; echo obtain_str ( $ n ) ; ? >"}
{"text":"Function to return the nth term of the given series","code":"< ? php function Nthterm ( $ n ) {"}
{"text":"nth term","code":"$ numerator = ( pow ( $ n , 2 ) ) -1 ; $ denomenator = 2 * $ n - 3 ; echo $ numerator , \" \/ \" , $ denomenator ; return $ Tn ; }"}
{"text":"Driver code","code":"$ n = 3 ; Nthterm ( $ n ) ; ? >"}
{"text":"Function to return the required sum","code":"< ? php function getSum ( $ arr , $ p ) { return count ( $ arr ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 6 , 8 ) ; $ p = 7 ; echo ( getSum ( $ arr , $ p ) ) ; ? >"}
{"text":"Function to return required count","code":"< ? php function SquareCube ( $ N ) { $ cnt = 0 ; $ i = 1 ; while ( ( pow ( $ i , 6 ) ) <= $ N ) { ++ $ cnt ; ++ $ i ; } return $ cnt ; }"}
{"text":"Driver Code","code":"$ N = 100000 ;"}
{"text":"function call to print required answer","code":"echo SquareCube ( $ N ) ; ? >"}
{"text":"Function to return the required sum","code":"< ? php function getSum ( $ n , $ d ) { $ sum = 0 ; while ( $ d <= $ n ) { $ sum += $ d ; $ d += 10 ; } return $ sum ; }"}
{"text":"Driver code","code":"$ n = 30 ; $ d = 3 ; echo ( getSum ( $ n , $ d ) ) ; ? >"}
{"text":"Function to calculate twice of sum of first N natural numbers","code":"< ? php function sum ( $ N ) { $ MOD = 1000000007 ; $ val = $ N * ( $ N + 1 ) ; $ val = $ val % $ MOD ; return $ val ; }"}
{"text":"Function to calculate the terms of summing of sum series","code":"function sumX ( $ N , $ M , $ K ) { $ MOD = 1000000007 ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { $ N = sum ( $ K + $ N ) ; } $ N = $ N % $ MOD ; return $ N ; }"}
{"text":"Driver Code","code":"$ N = 1 ; $ M = 2 ; $ K = 3 ; echo ( sumX ( $ N , $ M , $ K ) ) ; ? >"}
{"text":"PHP program to find log ( n ) using Recursion","code":"< ? php function Log2n ( $ n ) { return ( $ n > 1 ) ? 1 + Log2n ( $ n \/ 2 ) : 0 ; }"}
{"text":"Drive main","code":"$ n = 32 ; echo Log2n ( $ n ) ; ? >"}
{"text":"PHP program to check if a given array can form harmonic progression","code":"< ? php function checkIsHP ( $ arr ) { $ n = count ( $ arr ) ; if ( $ n == 1 ) return true ;"}
{"text":"Find reciprocal of arr [ ]","code":"$ rec = array ( ) ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { $ a = 1 \/ $ arr [ $ i ] ; array_push ( $ rec , $ a ) ; } return ( $ rec ) ;"}
{"text":"After finding reciprocal , check if the reciprocal is in A . P . To check for A . P . , first Sort the reciprocal array , then check difference between consecutive elements","code":"sort ( $ rec ) ; $ d = $ rec [ 1 ] - $ rec [ 0 ] ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) if ( $ rec [ $ i ] - $ rec [ $ i - 1 ] != $ d ) return false ; return true ; }"}
{"text":"series to check whether it is in H . P","code":"$ arr = array ( 1 \/ 5 , 1 \/ 10 , 1 \/ 15 , 1 \/ 20 , 1 \/ 25 ) ;"}
{"text":"Checking a series is in H . P or not","code":"if ( checkIsHP ( $ arr ) ) print ( \" Yes \" ) ; else print ( \" No \" ) ; ? >"}
{"text":"Prints N arithmetic means between A and B .","code":"< ? php function printAMeans ( $ A , $ B , $ N ) {"}
{"text":"calculate common difference ( d )","code":"$ d = ( $ B - $ A ) \/ ( $ N + 1 ) ;"}
{"text":"for finding N the arithmetic mean between A and B","code":"for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) echo ( $ A + $ i * $ d ) , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ A = 20 ; $ B = 32 ; $ N = 5 ; printAMeans ( $ A , $ B , $ N ) ;"}
{"text":"function to print all prime factors of a given number n","code":"< ? php function primeFactors ( $ n ) {"}
{"text":"Print the number of 2 s that divide n","code":"while ( $ n % 2 == 0 ) { echo 2 , \" \u2581 \" ; $ n = $ n \/ 2 ; }"}
{"text":"n must be odd at this point . So we can skip one element ( Note i = i + 2 )","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) {"}
{"text":"While i divides n , print i and divide n","code":"while ( $ n % $ i == 0 ) { echo $ i , \" \" ; $ n = $ n \/ $ i ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( $ n > 2 ) echo $ n , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 315 ; primeFactors ( $ n ) ; ? >"}
{"text":"PHP implementation of above approach","code":"< ? php function gcd ( $ a , $ b ) { return $ b ? gcd ( $ b , $ a % $ b ) : $ a ; }"}
{"text":"Function to return the time when both the persons will meet at the starting point","code":"function startingPoint ( $ Length , $ Speed1 , $ Speed2 ) { $ result1 = 0 ; $ result2 = 0 ;"}
{"text":"Time to cover 1 round by both","code":"$ time1 = $ Length \/ $ Speed1 ; $ time2 = $ Length \/ $ Speed2 ; $ result1 = gcd ( $ time1 , $ time2 ) ;"}
{"text":"Finding LCM to get the meeting point","code":"$ result2 = $ time1 * $ time2 \/ ( $ result1 ) ; return $ result2 ; }"}
{"text":"Function to return the time when both the persons will meet for the first time","code":"function firstTime ( $ Length , $ Speed1 , $ Speed2 ) { $ result = 0 ; $ relativeSpeed = abs ( $ Speed1 - $ Speed2 ) ; $ result = ( ( float ) $ Length \/ $ relativeSpeed ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ L = 30 ; $ S1 = 5 ; $ S2 = 2 ;"}
{"text":"Calling function","code":"$ first_Time = firstTime ( $ L , $ S1 , $ S2 ) ; $ starting_Point = startingPoint ( $ L , $ S1 , $ S2 ) ; echo \" Met \u2581 first \u2581 time \u2581 after \u2581 \" . $ first_Time . \" \u2581 hrs \" . \" STRNEWLINE \" ; echo \" Met \u2581 at \u2581 starting \u2581 point \u2581 after \u2581 \" . $ starting_Point . \" \u2581 hrs \" . \" STRNEWLINE \" ; ? >"}
{"text":"Function to Check if the array has an element which is equal to product of all the remaining elements","code":"< ? php function CheckArray ( $ arr , $ n ) { $ prod = 1 ;"}
{"text":"Calculate the product of all the elements","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ prod *= $ arr [ $ i ] ;"}
{"text":"Return true if any such element is found","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) if ( $ arr [ $ i ] == $ prod \/ $ arr [ $ i ] ) return true ;"}
{"text":"If no element is found","code":"return false ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 12 , 3 , 2 ) ; $ n = sizeof ( $ arr ) ; if ( CheckArray ( $ arr , $ n ) ) echo \" YES \" ; else echo \" NO \" ;"}
{"text":"print the sum of common factors","code":"< ? php function sum ( $ a , $ b ) {"}
{"text":"sum of common factors","code":"$ sum = 0 ;"}
{"text":"iterate from 1 to minimum of a and b","code":"for ( $ i = 1 ; $ i <= min ( $ a , $ b ) ; $ i ++ )"}
{"text":"if i is the common factor of both the numbers","code":"if ( $ a % $ i == 0 && $ b % $ i == 0 ) $ sum += $ i ; return $ sum ; }"}
{"text":"Driver code","code":"$ A = 10 ; $ B = 15 ;"}
{"text":"print the sum of common factors","code":"echo \" Sum = \" ? >"}
{"text":"Recursive function to return gcd of two nos","code":"< ? php function findgcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return findgcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to find the minimum number of additional cuts required to make circle segments are equal sized","code":"function minimumCuts ( $ a , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ a ) ;"}
{"text":"Initial gcd value","code":"$ gcd = $ a [ 1 ] - $ a [ 0 ] ; $ s = $ gcd ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) { $ gcd = findgcd ( $ gcd , $ a [ $ i ] - $ a [ $ i - 1 ] ) ; $ s += $ a [ $ i ] - $ a [ $ i - 1 ] ; }"}
{"text":"Including the last segment","code":"if ( 360 - $ s > 0 ) $ gcd = findgcd ( $ gcd , 360 - $ s ) ; return ( 360 \/ $ gcd ) - $ n ; }"}
{"text":"Driver Code","code":"$ arr = array ( 30 , 60 , 180 ) ; $ n = sizeof ( $ arr ) ; echo ( minimumCuts ( $ arr , $ n ) ) ; ? >"}
{"text":"Function to calculate the Selling Price","code":"< ? php function SellingPrice ( $ CP , $ PP ) {"}
{"text":"Decimal Equivalent of Profit Percentage","code":"$ P_decimal = 1 + ( $ PP \/ 100 ) ;"}
{"text":"Find the Selling Price","code":"$ res = $ P_decimal * $ CP ;"}
{"text":"return the calculated Selling Price","code":"return $ res ; }"}
{"text":"Get the CP and Profit %","code":"$ C = 720 ; $ P = 13 ;"}
{"text":"Printing the returned value","code":"echo SellingPrice ( $ C , $ P ) ; ? >"}
{"text":"Function that returns the the product of all composite numbers","code":"< ? php function compositeProduct ( $ arr , $ n ) {"}
{"text":"Find maximum value in the array","code":"$ max_val = max ( $ arr ) ;"}
{"text":"Use sieve to find all prime numbers less than or equal to max_val Create a boolean array \" prime [ 0 . . n ] \" . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ max_val + 1 , true ) ;"}
{"text":"Set 0 and 1 as primes as they don 't need to be  counted as composite numbers","code":"$ prime [ 0 ] = true ; $ prime [ 1 ] = true ; for ( $ p = 2 ; $ p * $ p <= $ max_val ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ max_val ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Find the product of all composite numbers in the arr [ ]","code":"$ product = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( ! $ prime [ $ arr [ $ i ] ] ) { $ product *= $ arr [ $ i ] ; } return $ product ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 4 , 5 , 6 , 7 ) ; $ n = count ( $ arr ) ; echo compositeProduct ( $ arr , $ n ) ; ? >"}
{"text":"Function that return sum of the digits at odd places","code":"< ? php function sum_odd ( $ n ) { $ sum = 0 ; $ pos = 1 ; while ( $ n ) { if ( $ pos % 2 == 1 ) $ sum += $ n % 10 ; $ n = ( int ) ( $ n \/ 10 ) ; $ pos ++ ; } return $ sum ; }"}
{"text":"Function that returns true if the number is prime else false","code":"function check_prime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This condition is checked so that we can skip middle five numbers in the below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = ( $ i + 6 ) ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Driver code","code":"$ n = 223 ;"}
{"text":"Get the sum of the digits at odd places","code":"$ sum = sum_odd ( $ n ) ; if ( check_prime ( $ sum ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"PHP program to find amount of water to be added to achieve given target ratio .","code":"< ? php function findAmount ( $ X , $ W , $ Y ) { return ( $ X * ( $ Y - $ W ) ) \/ ( 100 - $ Y ) ; }"}
{"text":"Driver Code","code":"$ X = 100 ; $ W = 50 ; $ Y = 60 ; echo \" Water \u2581 to \u2581 be \u2581 added \u2581 = \u2581 \" . findAmount ( $ X , $ W , $ Y ) ; ? >"}
{"text":"Finds reverse of given num x .","code":"< ? php function reverseNum ( $ x ) { $ s = ( string ) $ x ; $ s = strrev ( $ s ) ; $ rev = ( int ) $ s ; return $ rev ; } function isMysteryNumber ( $ n ) { for ( $ i = 1 ; $ i <= $ n \/ 2 ; $ i ++ ) {"}
{"text":"if found print the pair , return","code":"$ j = reverseNum ( $ i ) ; if ( $ i + $ j == $ n ) { echo $ i . \" \u2581 \" . $ j ; return true ; } } echo \" Not \u2581 a \u2581 Mystery \u2581 Number \" ; return false ; } $ n = 121 ; isMysteryNumber ( $ n ) ; return 0 ; ? >"}
{"text":"PHP program to Replace every element by the product of all other elements","code":"< ? php function ReplaceElements ( $ arr , $ n ) { $ prod = 1 ;"}
{"text":"Calculate the product of all the elements","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ prod *= $ arr [ $ i ] ; }"}
{"text":"Replace every element product of all other elements","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ arr [ $ i ] = ( int ) ( $ prod \/ $ arr [ $ i ] ) ; } return $ arr ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 3 , 5 , 7 ) ; $ n = sizeof ( $ arr ) ; $ arr1 = ReplaceElements ( $ arr , $ n ) ;"}
{"text":"Print the modified array .","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { echo $ arr1 [ $ i ] . \" \" ; } ? >"}
{"text":"function to count such possible numbers","code":"< ? php function Check_is_possible ( $ l , $ r , $ k ) { $ count = 0 ; for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) {"}
{"text":"if i is divisible by k","code":"if ( $ i % $ k == 0 ) $ count ++ ; }"}
{"text":"if count of such numbers is greater than one","code":"return ( $ count > 1 ) ; }"}
{"text":"Driver code","code":"$ l = 4 ; $ r = 12 ; $ k = 5 ; if ( Check_is_possible ( $ l , $ r , $ k ) ) echo \" YES STRNEWLINE \" ; else echo \" NO STRNEWLINE \" ; ? >"}
{"text":"Function to calculate the sum of numbers divisible by 2 or 7","code":"< ? php function sum ( $ N ) { $ S1 = ( int ) ( ( $ N \/ 2 ) ) * ( int ) ( 2 * 2 + ( int ) ( $ N \/ 2 - 1 ) * 2 ) \/ 2 ; $ S2 = ( int ) ( ( $ N \/ 7 ) ) * ( int ) ( 2 * 7 + ( int ) ( $ N \/ 7 - 1 ) * 7 ) \/ 2 ; $ S3 = ( int ) ( ( $ N \/ 14 ) ) * ( int ) ( 2 * 14 + ( int ) ( $ N \/ 14 - 1 ) * 14 ) \/ 2 ; return ( $ S1 + $ S2 ) - $ S3 ; }"}
{"text":"Driver code","code":"$ N = 20 ; echo sum ( $ N ) ;"}
{"text":"fast_way is recursive method to calculate power","code":"< ? php function fastPow ( $ N , $ K ) { if ( $ K == 0 ) return 1 ; $ temp = fastPow ( $ N , $ K \/ 2 ) ; if ( $ K % 2 == 0 ) return $ temp * $ temp ; else return $ N * $ temp * $ temp ; } function countWays ( $ N , $ K ) { return $ K * fastPow ( $ K - 1 , $ N - 1 ) ; }"}
{"text":"Driver Code","code":"$ N = 3 ; $ K = 3 ; echo countWays ( $ N , $ K ) ; ? >"}
{"text":"PHP program to find sum of n - th terms of a Fibonacci like series formed using first two terms of two arrays .","code":"< ? php function sumNth ( & $ A , & $ B , & $ m , & $ n ) { $ res = 0 ;"}
{"text":"if sum of first term is required","code":"if ( $ n == 1 ) { for ( $ i = 0 ; $ i < $ m ; $ i ++ ) $ res = $ res + $ A [ $ i ] ; }"}
{"text":"if sum of second term is required","code":"else if ( $ n == 2 ) { for ( $ i = 0 ; $ i < $ m ; $ i ++ ) $ res = $ res + $ B [ $ i ] * $ m ; } else {"}
{"text":"fibonacci series used to find the nth term of every series","code":"$ f = array ( ) ; $ f [ 0 ] = 0 ; $ f [ 1 ] = 1 ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) $ f [ $ i ] = $ f [ $ i - 1 ] + $ f [ $ i - 2 ] ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) {"}
{"text":"as every b [ i ] term appears m times and every a [ i ] term also appears m times","code":"$ res = $ res + ( $ m * ( $ B [ $ i ] * $ f [ $ n - 1 ] ) ) + ( $ m * ( $ A [ $ i ] * $ f [ $ n - 2 ] ) ) ; } } return $ res ; }"}
{"text":"m is the size of the array","code":"$ A = array ( 1 , 2 , 3 ) ; $ B = array ( 4 , 5 , 6 ) ; $ n = 3 ; $ m = sizeof ( $ A ) ; echo ( sumNth ( $ A , $ B , $ m , $ n ) ) ; ? >"}
{"text":"side of cube","code":"< ? php $ a = 5 ;"}
{"text":"understand from diagram","code":"$ AC = $ a ;"}
{"text":"understand from diagram","code":"$ CE = 2 * $ a ;"}
{"text":"minimum distance","code":"$ shortestDistance = ( double ) ( sqrt ( $ AC * $ AC + $ CE * $ CE ) ) ; echo $ shortestDistance . \" STRNEWLINE \" ; ? >"}
{"text":"Function to find sum of series","code":"< ? php function sum_of_series ( $ n ) { $ result = 0 ;"}
{"text":"If n is even","code":"if ( $ n % 2 == 0 ) { $ result = - ( $ n * ( $ n + 1 ) ) \/ 2 ; }"}
{"text":"If n is odd","code":"else { $ result = ( $ n * ( $ n + 1 ) ) \/ 2 ; }"}
{"text":"return the result","code":"return $ result ; }"}
{"text":"Get n","code":"$ n = 3 ;"}
{"text":"Find the sum","code":"echo sum_of_series ( $ n ) ; echo ( \" STRNEWLINE \" ) ;"}
{"text":"Get n","code":"$ n = 10 ;"}
{"text":"Find the sum","code":"echo sum_of_series ( $ n ) ; echo ( \" STRNEWLINE \" ) ; ? >"}
{"text":"Function to check if the given Number is prime or not","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Returns true if n1 and n2 are Cousin primes","code":"function isCousinPrime ( $ n1 , $ n2 ) {"}
{"text":"Check if the given number differ by 4 or not","code":"if ( abs ( $ n1 - $ n2 ) != 4 ) return false ;"}
{"text":"Check if both numbers are prime or not","code":"else return ( isPrime ( $ n1 ) && isPrime ( $ n2 ) ) ; }"}
{"text":"Get the 2 numbers","code":"$ n1 = 7 ; $ n2 = 11 ;"}
{"text":"Check the numbers for cousin prime","code":"if ( isCousinPrime ( $ n1 , $ n2 ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Utility function to check power of two","code":"< ? php function isPowerOfTwo ( $ n ) { return ( $ n && ! ( $ n & ( $ n - 1 ) ) ) ; }"}
{"text":"function to check if the given number is Thabit Number","code":"function isThabitNumber ( $ n ) {"}
{"text":"Add 1 to the number","code":"$ n = $ n + 1 ;"}
{"text":"Divide the number by 3","code":"if ( $ n % 3 == 0 ) $ n = $ n \/ 3 ; else return false ;"}
{"text":"Check if the given number is power of 2","code":"if ( isPowerOfTwo ( $ n ) ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ n = 47 ;"}
{"text":"Check if number is thabit number","code":"if ( isThabitNumber ( $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to find the minimum value to be added","code":"< ? php function findMinEqualSums ( $ a , $ N ) {"}
{"text":"Variable to store entire array sum","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ sum += $ a [ $ i ] ; }"}
{"text":"Variables to store sum of subarray1 and subarray 2","code":"$ sum1 = 0 ; $ sum2 = 0 ;"}
{"text":"minimum value to be added","code":"$ min = PHP_INT_MAX ;"}
{"text":"Traverse through the array","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"Sum of both halves","code":"$ sum1 += $ a [ $ i ] ; $ sum2 = $ sum - $ sum1 ;"}
{"text":"Calculate minimum number to be added","code":"if ( abs ( $ sum1 - $ sum2 ) < $ min ) { $ min = abs ( $ sum1 - $ sum2 ) ; } if ( $ min == 0 ) { break ; } } return $ min ; }"}
{"text":"Driver code","code":"$ a = array ( 3 , 2 , 1 , 5 , 7 , 8 ) ;"}
{"text":"Length of array","code":"$ N = count ( $ a ) ; echo ( findMinEqualSums ( $ a , $ N ) ) ; ? >"}
{"text":"Function to find the total Number of Digits in ( N ! ) ^ N","code":"< ? php function CountDigits ( $ n ) { if ( $ n == 1 ) return 1 ; $ sum = 0 ;"}
{"text":"Finding X","code":"for ( $ i = 2 ; $ i <= $ n ; ++ $ i ) { $ sum += log ( $ i ) \/ log ( 10 ) ; }"}
{"text":"Calculating N * X","code":"$ sum *= $ n ;"}
{"text":"Floor ( N * X ) + 1 return ceil ( $sum ) ; equivalent to floor ( sum ) + 1","code":"}"}
{"text":"Driver code","code":"$ N = 5 ; echo CountDigits ( $ N ) ; ? >"}
{"text":"PHP implementation of above approach","code":"< ? php $ MAX = 200006 ; $ CONS = 32766 ;"}
{"text":"Function to calculate the value","code":"function calc ( $ a , $ b , $ lr , $ q , $ n ) { global $ MAX ; global $ CONS ; $ M ; $ m ; $ i ; $ j ; $ k ; $ l ; $ r ; $ suma ; $ sumb ; $ cc ; $ cc = 0 ;"}
{"text":"forming the prefix sum arrays","code":"for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { $ a [ $ i + 1 ] += $ a [ $ i ] ; $ b [ $ i + 1 ] += $ b [ $ i ] ; } while ( $ q -- ) {"}
{"text":"Taking the query","code":"$ l = $ lr [ $ cc ++ ] ; $ r = $ lr [ $ cc ++ ] ; $ l -= 2 ; $ r -= 1 ;"}
{"text":"finding the sum in the range l to r in array a","code":"$ suma = $ a [ $ r ] ;"}
{"text":"finding the sum in the range l to r in array b","code":"$ sumb = $ b [ $ r ] ; if ( $ l >= 0 ) { $ suma -= $ a [ $ l ] ; $ sumb -= $ b [ $ l ] ; }"}
{"text":"Finding the max value of the function","code":"$ M = max ( $ CONS * $ suma + $ CONS * $ sumb , - $ CONS * $ suma - $ CONS * $ sumb ) ; $ M = max ( $ M , max ( $ CONS * $ suma - $ CONS * $ sumb , - $ CONS * $ suma + $ CONS * $ sumb ) ) ;"}
{"text":"Finding the min value of the function","code":"$ m = min ( $ CONS * $ suma + $ CONS * $ sumb , - $ CONS * $ suma - $ CONS * $ sumb ) ; $ m = min ( $ m , min ( $ CONS * $ suma - $ CONS * $ sumb , - $ CONS * $ suma + $ CONS * $ sumb ) ) ; echo ( $ M - $ m ) , \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ n = 5 ; $ q = 2 ; $ a = array ( 0 , 7 , 3 , 4 , 5 ) ; $ b = array ( 0 , 3 , 1 , 2 , 3 ) ; $ lr [ 0 ] = 1 ; $ lr [ 1 ] = 1 ; $ lr [ 2 ] = 1 ; $ lr [ 3 ] = 3 ; calc ( $ a , $ b , $ lr , $ q , $ n ) ; ? >"}
{"text":"function to return Nth term of the series","code":"< ? php function NthTerm ( $ n ) { $ mod = 1000000009 ; $ x = ( 3 * $ n * $ n ) % $ mod ; return ( $ x - $ n + $ mod ) % $ mod ; }"}
{"text":"Taking n as 4","code":"let N = 4 ;"}
{"text":"Get Nth term","code":"echo NthTerm ( $ N ) ; ? >"}
{"text":"to store power of 2","code":"< ? php $ power = array_fill ( 0 , 31 , 0 ) ;"}
{"text":"to store presum of the power of 2 's","code":"$ pre = array_fill ( 0 , 31 , 0 ) ;"}
{"text":"function to find power of 2","code":"function PowerOfTwo ( ) { global $ power , $ pre ;"}
{"text":"to store power of 2","code":"$ x = 1 ; for ( $ i = 0 ; $ i < 31 ; $ i ++ ) { $ power [ $ i ] = $ x ; $ x *= 2 ; }"}
{"text":"to store pre sum","code":"$ pre [ 0 ] = 1 ; for ( $ i = 1 ; $ i < 31 ; $ i ++ ) $ pre [ $ i ] = $ pre [ $ i - 1 ] + $ power [ $ i ] ; }"}
{"text":"Function to find the sum","code":"function Sum ( $ n ) { global $ power , $ pre ;"}
{"text":"first store sum of first n natural numbers .","code":"$ ans = $ n * ( $ n + 1 ) \/ 2 ;"}
{"text":"find the first greater number than given number then minus double of this from answer","code":"for ( $ i = 0 ; $ i < 31 ; $ i ++ ) if ( $ power [ $ i ] > $ n ) { $ ans -= 2 * $ pre [ $ i - 1 ] ; break ; } return $ ans ; }"}
{"text":"function call","code":"PowerOfTwo ( ) ; $ n = 4 ;"}
{"text":"function call","code":"print ( Sum ( $ n ) ) ; ? >"}
{"text":"Function to check if a number is prime or not","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) { if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) { return false ; } } return true ; }"}
{"text":"Driver Code","code":"$ n = 17 ;"}
{"text":"Check if number is prime and of the form 16 * n + 1","code":"if ( isPrime ( $ n ) && ( $ n % 16 == 1 ) ) { echo \" YES \" ; } else { echo \" NO \" ; }"}
{"text":"Function to find a number less than n such that all its digits are distinct","code":"< ? php function findNumber ( $ n ) {"}
{"text":"looping through numbers less than n","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"initializing a hash array","code":"$ count = array_fill ( 0 , 10 , 0 ) ;"}
{"text":"creating a copy of i","code":"$ x = $ i ;"}
{"text":"initializing variables to compare lengths of digits","code":"$ count1 = 0 ; $ count2 = 0 ;"}
{"text":"counting frequency of the digits","code":"while ( $ x ) { $ count [ $ x % 10 ] ++ ; $ x = ( int ) ( $ x \/ 10 ) ; $ count1 ++ ; }"}
{"text":"checking if each digit is present once","code":"for ( $ j = 0 ; $ j < 10 ; $ j ++ ) { if ( $ count [ $ j ] == 1 ) $ count2 ++ ; } if ( $ count1 == $ count2 ) return $ i ; } }"}
{"text":"Driver code","code":"$ n = 8490 ; echo findNumber ( $ n ) ; ? >"}
{"text":"Function to generate all prime numbers less than n","code":"< ? php function SieveOfEratosthenes ( $ n , & $ isPrime ) {"}
{"text":"Initialize all entries of boolean array as true . A value in isPrime [ i ] will finally be false if i is Not a prime , else true bool isPrime [ n + 1 ] ;","code":"$ isPrime [ 0 ] = false ; $ isPrime [ 1 ] = false ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ isPrime [ $ i ] = true ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If isPrime [ p ] is not changed , then it is a prime","code":"if ( $ isPrime [ $ p ] ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ isPrime [ $ i ] = false ; } } }"}
{"text":"Function to print a prime pair with given product","code":"function findPrimePair ( $ n ) { $ flag = 0 ;"}
{"text":"Generating primes using Sieve","code":"$ isPrime = array_fill ( 0 , ( $ n + 1 ) , false ) ; SieveOfEratosthenes ( $ n , $ isPrime ) ;"}
{"text":"Traversing all numbers to find first pair","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) { $ x = ( int ) ( $ n \/ $ i ) ; if ( $ isPrime [ $ i ] && $ isPrime [ $ x ] and $ x != $ i and $ x * $ i == $ n ) { echo $ i . \" \u2581 \" . $ x ; $ flag = 1 ; return ; } } if ( ! $ flag ) echo \" No \u2581 such \u2581 pair \u2581 found \" ; }"}
{"text":"Driver Code","code":"$ n = 39 ; findPrimePair ( $ n ) ; ? >"}
{"text":"Utility function","code":"< ? php function __gcd ( $ a , $ b ) { return $ b == 0 ? $ a : __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to print a : b : c","code":"function solveProportion ( $ a , $ b1 , $ b2 , $ c ) { $ A = $ a * $ b2 ; $ B = $ b1 * $ b2 ; $ C = $ b1 * $ c ;"}
{"text":"To print the given proportion in simplest form .","code":"$ gcd = __gcd ( __gcd ( $ A , $ B ) , $ C ) ; echo ( $ A \/ $ gcd ) . \" : \" . ( $ B \/ $ gcd ) . \" : \" . ( $ C \/ $ gcd ) ; }"}
{"text":"Get the ratios Get ratio a : b1","code":"$ a = 3 ; $ b1 = 4 ;"}
{"text":"Get ratio b2 : c","code":"$ b2 = 8 ; $ c = 9 ;"}
{"text":"Find the ratio a : b : c","code":"solveProportion ( $ a , $ b1 , $ b2 , $ c ) ; ? >"}
{"text":"Function to count number of divisors of N which are divisible by K","code":"< ? php function countDivisors ( $ n , $ k ) {"}
{"text":"Variable to store count of divisors","code":"$ count = 0 ;"}
{"text":"Traverse from 1 to n","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"increase the count if both the conditions are satisfied","code":"if ( $ n % $ i == 0 && $ i % $ k == 0 ) { $ count ++ ; } } return $ count ; }"}
{"text":"Driver code","code":"$ n = 12 ; $ k = 3 ; echo countDivisors ( $ n , $ k ) ;"}
{"text":"Function to calculate Volume of cone","code":"< ? php function volume ( $ r , $ h ) { $ pi = 3.14159 ; return ( 1 \/ 3 ) * $ pi * $ r * $ r * $ h ; }"}
{"text":"Function to calculate Surface area of cone","code":"function surface_area ( $ r , $ s ) { $ pi = 3.14159 ; return $ pi * $ r * $ s + $ pi * $ r * $ r ; }"}
{"text":"Driver Code","code":"$ radius = 5 ; $ slant_height = 13 ; $ height = 12 ;"}
{"text":"Printing value of volume and surface area","code":"echo ( \" Volume \u2581 Of \u2581 Cone \u2581 : \u2581 \" ) ; echo ( volume ( $ radius , $ height ) ) ; echo ( \" STRNEWLINE \" ) ; echo ( \" Surface \u2581 Area \u2581 Of \u2581 Cone \u2581 : \u2581 \" ) ; echo ( surface_area ( $ radius , $ slant_height ) ) ; ? >"}
{"text":"calculate sum upto Nth term of series","code":"< ? php function nthTerm ( $ n ) {"}
{"text":"return the final sum","code":"return 6 * pow ( $ n , 2 ) - 4 * $ n - 2 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) ;"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) {"}
{"text":"return the final sum","code":"return pow ( $ n , 2 ) + 2 * $ n + 2 ; }"}
{"text":"Driver Code","code":"$ N = 4 ; echo nthTerm ( $ N ) ;"}
{"text":"function to return required value","code":"< ? php function sum ( $ n ) {"}
{"text":"Get the answer","code":"$ ans = ( $ n * ( $ n - 1 ) ) \/ 2 ;"}
{"text":"Return the answer","code":"return $ ans ; }"}
{"text":"Get the value of n","code":"$ n = 5 ;"}
{"text":"function call to print result","code":"echo sum ( $ n ) ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function getNthTerm ( $ N ) {"}
{"text":"Return Nth term","code":"return 4 * pow ( $ N , 2 ) - 3 * $ N + 2 ; }"}
{"text":"declaration of number of terms","code":"$ N = 10 ;"}
{"text":"Get the Nth term","code":"echo getNthTerm ( $ N ) ; ? >"}
{"text":"function to calculate ( a ^ b ) % p","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"Initialize result","code":"$ res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"$ x = $ x % $ p ; while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"function to return required answer","code":"function sumProd ( $ n , $ t ) { $ MOD = 1000000007 ;"}
{"text":"modulo inverse of denominator","code":"$ dino = power ( $ t + 1 , $ MOD - 2 , $ MOD ) ;"}
{"text":"calculating commentator part","code":"$ ans = 1 ; for ( $ i = $ n + $ t + 1 ; $ i > $ n ; -- $ i ) $ ans = ( $ ans % $ MOD * $ i % $ MOD ) % $ MOD ;"}
{"text":"calculating t !","code":"$ tfact = 1 ; for ( $ i = 1 ; $ i <= $ t ; ++ $ i ) $ tfact = ( $ tfact * $ i ) % $ MOD ;"}
{"text":"accumulating the final answer","code":"$ ans = $ ans * $ dino - $ tfact + $ MOD ; return $ ans % $ MOD ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ t = 2 ;"}
{"text":"function call to print required sum","code":"echo sumProd ( $ n , $ t ) ; ? >"}
{"text":"Function to calculate sum","code":"< ? php function findSum ( $ n ) {"}
{"text":"Return sum","code":"return ( $ n * ( pow ( $ n , 2 ) + 3 * $ n + 5 ) ) \/ 3 ; }"}
{"text":"Driver code","code":"$ n = 25 ; echo findSum ( $ n ) ; ? >"}
{"text":"function to calculate ( a ^ b ) % ( 10 ^ 9 + 7 ) .","code":"< ? php function power ( $ a , $ b ) { $ mod = 1000000007 ; $ res = 1 ; while ( $ b ) { if ( $ b & 1 ) { $ res *= $ a ; $ res %= $ mod ; } $ b \/= 2 ; $ a *= $ a ; $ a %= $ mod ; } return $ res ; }"}
{"text":"function to find the minimum required player","code":"function minPlayer ( $ n , $ k ) { $ mod = 1000000007 ;"}
{"text":"computing the nenomenator","code":"$ num = ( ( power ( $ k , $ n ) - 1 ) + $ mod ) % $ mod ;"}
{"text":"computing modulo inverse of denominator","code":"$ den = ( power ( $ k - 1 , $ mod - 2 ) + $ mod ) % $ mod ;"}
{"text":"final result","code":"$ ans = ( ( ( $ num * $ den ) % $ mod ) * $ k ) % $ mod ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ k = 3 ; echo minPlayer ( $ n , $ k ) ; ? >"}
{"text":"Using SieveOfEratosthenes to find smallest prime factor of all the numbers . For example , if N is 10 , s [ 2 ] = s [ 4 ] = s [ 6 ] = s [ 10 ] = 2 s [ 3 ] = s [ 9 ] = 3 s [ 5 ] = 5 s [ 7 ] = 7","code":"< ? php function sieveOfEratosthenes ( $ N , & $ s ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries in it as false .","code":"$ prime = array_fill ( 0 , $ N + 1 , false ) ;"}
{"text":"Initializing smallest factor equal to 2 for all the even numbers","code":"for ( $ i = 2 ; $ i <= $ N ; $ i += 2 ) $ s [ $ i ] = 2 ;"}
{"text":"For odd numbers less then equal to n","code":"for ( $ i = 3 ; $ i <= $ N ; $ i += 2 ) { if ( $ prime [ $ i ] == false ) {"}
{"text":"s ( i ) for a prime is the number itself","code":"$ s [ $ i ] = $ i ;"}
{"text":"For all multiples of current prime number","code":"for ( $ j = $ i ; $ j * $ i <= $ N ; $ j += 2 ) { if ( $ prime [ $ i * $ j ] == false ) { $ prime [ $ i * $ j ] = true ;"}
{"text":"i is the smallest prime factor for number \" i * j \" .","code":"$ s [ $ i * $ j ] = $ i ; } } } } }"}
{"text":"Function to find sum of all prime factors","code":"function findSum ( $ N ) {"}
{"text":"Declaring array to store smallest prime factor of i at i - th index","code":"$ s = array_fill ( 0 , $ N + 1 , 0 ) ; $ ans = 1 ;"}
{"text":"Filling values in s [ ] using sieve","code":"sieveOfEratosthenes ( $ N , $ s ) ;"}
{"text":"Current prime factor of N","code":"$ currFactor = $ s [ $ N ] ;"}
{"text":"Power of current prime factor","code":"$ power = 1 ; while ( $ N > 1 ) { $ N \/= $ s [ $ N ] ;"}
{"text":"N is now N \/ s [ N ] . If new N als has smallest prime factor as currFactor , increment power","code":"if ( $ currFactor == $ s [ $ N ] ) { $ power ++ ; continue ; } $ sum = 0 ; for ( $ i = 0 ; $ i <= $ power ; $ i ++ ) $ sum += ( int ) pow ( $ currFactor , $ i ) ; $ ans *= $ sum ;"}
{"text":"Update current prime factor as s [ N ] and initializing power of factor as 1.","code":"$ currFactor = $ s [ $ N ] ; $ power = 1 ; } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 12 ; echo \" Sum \u2581 of \u2581 the \u2581 factors \u2581 is \u2581 : \u2581 \" ; echo findSum ( $ n ) ; ? >"}
{"text":"Bit count function","code":"< ? php function popcount ( $ value ) { $ count = 0 ; while ( $ value ) { $ count += ( $ value & 1 ) ; $ value = $ value >> 1 ; } return $ count ; }"}
{"text":"Function to count number of multiples of 2 or 3 or 5 less than or equal to N","code":"function countMultiples ( $ n ) {"}
{"text":"As we have to check divisibility by three numbers , So we can implement bit masking","code":"$ multiple = array ( 2 , 3 , 5 ) ; $ count = 0 ; $ mask = pow ( 2 , 3 ) ; for ( $ i = 1 ; $ i < $ mask ; $ i ++ ) {"}
{"text":"we check whether jth bit is set or not , if jth bit is set , simply multiply to prod","code":"$ prod = 1 ; for ( $ j = 0 ; $ j < 3 ; $ j ++ ) {"}
{"text":"check for set bit","code":"if ( $ i & 1 << $ j ) $ prod = $ prod * $ multiple [ $ j ] ; }"}
{"text":"check multiple of product","code":"if ( popcount ( $ i ) % 2 == 1 ) $ count = $ count + ( int ) ( $ n \/ $ prod ) ; else $ count = $ count - ( int ) ( $ n \/ $ prod ) ; } return $ count ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo countMultiples ( $ n ) ; ? >"}
{"text":"Function to find the value of N","code":"< ? php function findN ( $ k ) {"}
{"text":"variable to store the result","code":"$ ans ;"}
{"text":"handling case for '0'","code":"if ( $ k == 0 ) $ ans = 3 ;"}
{"text":"handling case for '1'","code":"if ( $ k == 1 ) $ ans = 1 ;"}
{"text":"when number is completely divided by 4 then minimum ' x ' will be ' k '","code":"else if ( $ k % 4 == 0 ) $ ans = $ k ;"}
{"text":"when number divided by 4 gives 3 as remainder then minimum ' x ' will be ' k - 1'","code":"else if ( $ k % 4 == 3 ) $ ans = $ k - 1 ;"}
{"text":"else it is not possible to get k for any value of x","code":"else $ ans = -1 ; return $ ans ; }"}
{"text":"let the given number be 7","code":"$ k = 7 ; $ res = findN ( $ k ) ; if ( $ res == -1 ) echo \" Not \u2581 possible \" ; else echo $ res ; ? >"}
{"text":"Function to find no . of permutations","code":"< ? php function Circular ( $ n ) { $ Result = 1 ; while ( $ n > 0 ) { $ Result = $ Result * $ n ; $ n -- ; } return $ Result ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo Circular ( $ n - 1 ) ; ? >"}
{"text":"Function to calculate the time","code":"< ? php function calTime ( & $ arr , $ n ) { $ work = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ work += 1 \/ $ arr [ $ i ] ; return 1 \/ $ work ; }"}
{"text":"Driver Code","code":"$ arr = array ( 6.0 , 3.0 , 4.0 ) ; $ n = sizeof ( $ arr ) ; echo calTime ( $ arr , $ n ) ; echo \" \u2581 Hours \" ;"}
{"text":"Function to find twins","code":"< ? php function printTwins ( $ low , $ high ) {"}
{"text":"Create a boolean array \" prime [ 0 . . high ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime [ $ high + 1 ] = array ( ) ; $ twin = false ; $ prime = array_fill ( 0 , ( $ high + 1 ) , true ) ; $ prime [ 0 ] = $ prime [ 1 ] = false ;"}
{"text":"Look for the smallest twin","code":"for ( $ p = 2 ; $ p <= floor ( sqrt ( $ high ) ) + 1 ; $ p ++ ) {"}
{"text":"If p is not marked , then it is a prime","code":"if ( $ prime [ $ p ] ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ high ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Now print the largest twin in range","code":"for ( $ i = $ high ; $ i >= $ low ; $ i -- ) { if ( $ prime [ $ i ] && ( $ i - 2 >= $ low && $ prime [ $ i - 2 ] == true ) ) { echo \" Largest \u2581 twins \u2581 in \u2581 given \u2581 range : \u2581 ( \" , $ i - 2 , \" , \u2581 \" , $ i , \" ) \" ; $ twin = true ; break ; } } if ( $ twin == false ) echo \" No \u2581 such \u2581 pair \u2581 exists \" ; }"}
{"text":"Driver program","code":"printTwins ( 10 , 100 ) ; ? >"}
{"text":"Function to find ( b - 1 ) 's complement","code":"< ? php function prevComplement ( $ n , $ b ) { $ maxNum = 0 ; $ digits = 0 ; $ num = $ n ;"}
{"text":"Calculate number of digits in the given number","code":"while ( ( int ) $ n != 0 ) { $ digits ++ ; $ n = $ n \/ 10 ; }"}
{"text":"Largest digit in the number system with base b","code":"$ maxDigit = $ b - 1 ;"}
{"text":"Largest number in the number system with base b","code":"while ( $ digits -- ) { $ maxNum = $ maxNum * 10 + $ maxDigit ; }"}
{"text":"return Complement","code":"return $ maxNum - $ num ; }"}
{"text":"Function to find b 's complement","code":"function complement ( $ n , $ b ) {"}
{"text":"b ' s \u2581 complement \u2581 = \u2581 ( b - 1 ) ' s complement + 1","code":"return prevComplement ( $ n , $ b ) + 1 ; }"}
{"text":"Driver code","code":"echo prevComplement ( 25 , 7 ) , \" STRNEWLINE \" ; echo ( complement ( 25 , 7 ) ) ; ? >"}
{"text":"Function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 4 ; echo gcd ( $ a , $ b ) ; ? >"}
{"text":"Function to count the elements with maximum number of divisors","code":"< ? php function MaximumDivisors ( $ X , $ Y ) {"}
{"text":"to store number of divisors initialise with zero","code":"$ arr = array_fill ( 0 , ( $ Y - $ X + 1 ) , NULL ) ;"}
{"text":"to store the maximum number of divisors","code":"$ mx = PHP_INT_MIN ;"}
{"text":"to store required answer","code":"$ cnt = 0 ; for ( $ i = 1 ; $ i * $ i <= $ Y ; $ i ++ ) { $ sq = $ i * $ i ;"}
{"text":"Find the first divisible number","code":"if ( ( $ X \/ $ i ) * $ i >= $ X ) $ first_divisible = ( $ X \/ $ i ) * $ i ; else $ first_divisible = ( $ X \/ $ i + 1 ) * $ i ;"}
{"text":"Count number of divisors","code":"for ( $ j = $ first_divisible ; $ j < $ Y ; $ j += $ i ) { if ( $ j < $ sq ) continue ; else if ( $ j == $ sq ) $ arr [ $ j - $ X ] ++ ; else $ arr [ $ j - $ X ] += 2 ; } }"}
{"text":"Find number of elements with maximum number of divisors","code":"for ( $ i = $ X ; $ i <= $ Y ; $ i ++ ) { if ( $ arr [ $ i - $ X ] > $ mx ) { $ cnt = 1 ; $ mx = $ arr [ $ i - $ X ] ; } else if ( $ arr [ $ i - $ X ] == $ mx ) $ cnt ++ ; } return $ cnt ; }"}
{"text":"Driver code","code":"$ X = 1 ; $ Y = 10 ; echo MaximumDivisors ( $ X , $ Y ) . \" STRNEWLINE \" ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"Initialize result","code":"$ res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"$ x = $ x % $ p ; while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"function to find nearest element in common","code":"function NearestElement ( $ A , $ D , $ P ) {"}
{"text":"base conditions","code":"if ( $ A == 0 ) return 0 ; else if ( $ D == 0 ) return -1 ; else { $ X = power ( $ D , $ P - 2 , $ P ) ; return ( $ X * ( $ P - $ A ) ) % $ P ; } }"}
{"text":"Driver code","code":"$ A = 4 ; $ D = 9 ; $ P = 11 ;"}
{"text":"module both A and D","code":"$ A %= $ P ; $ D %= $ P ;"}
{"text":"function call","code":"echo NearestElement ( $ A , $ D , $ P ) ; ? >"}
{"text":"Function to print Cunningham chain of the first kind","code":"< ? php function print_C ( $ p0 ) { $ p1 = 0 ; $ i = 0 ; $ x ; $ flag ; $ k ;"}
{"text":"Iterate till all elements are printed","code":"while ( 1 ) { $ flag = 1 ; $ x = pow ( 2 , $ i ) ; $ p1 = $ x * $ p0 + ( $ x - 1 ) ;"}
{"text":"check prime or not","code":"for ( $ k = 2 ; $ k < $ p1 ; $ k ++ ) { if ( $ p1 % $ k == 0 ) { $ flag = 0 ; break ; } } if ( $ flag == 0 ) break ; echo $ p1 . \" \" ; $ i ++ ; } }"}
{"text":"Driver Code","code":"$ p0 = 2 ; print_C ( $ p0 ) ;"}
{"text":"Function to count number of odd pairs","code":"< ? php function findOddPair ( & $ A , $ N ) {"}
{"text":"variable for counting odd pairs","code":"$ oddPair = 0 ;"}
{"text":"find all pairs","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) {"}
{"text":"find AND operation check odd or even","code":"if ( ( $ A [ $ i ] & $ A [ $ j ] ) % 2 != 0 ) $ oddPair = $ oddPair + 1 ; } }"}
{"text":"return number of odd pair","code":"return $ oddPair ; }"}
{"text":"Driver Code","code":"$ a = array ( 5 , 1 , 3 , 2 ) ; $ n = sizeof ( $ a ) ;"}
{"text":"calling function findOddPair and print number of odd pair","code":"echo ( findOddPair ( $ a , $ n ) ) ; ? >"}
{"text":"Function to find sum of all elements upto nth row .","code":"< ? php function calculateSum ( $ n ) {"}
{"text":"Initialize sum with 0","code":"$ sum = 0 ;"}
{"text":"Calculate 2 ^ n","code":"$ sum = 1 << $ n ; return ( $ sum - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo \" \u2581 Sum \u2581 of \u2581 all \u2581 elements : \" , calculateSum ( $ n ) ; ? >"}
{"text":"Returns the quotient of dividend \/ divisor .","code":"< ? php function Divide ( $ a , $ b ) { $ dividend = $ a ; $ divisor = $ b ;"}
{"text":"Calculate sign of divisor i . e . , sign will be negative only if either one of them is negative otherwise it will be positive","code":"$ sign = ( $ dividend < 0 ) ^ ( $ divisor < 0 ) ? -1 : 1 ;"}
{"text":"Remove signs of dividend and divisor","code":"$ dividend = abs ( $ dividend ) ; $ divisor = abs ( $ divisor ) ;"}
{"text":"Zero division Exception .","code":"if ( $ divisor == 0 ) { echo \" Cannot \u2581 Divide \u2581 by \u2581 0\" ; echo \" \" ; } if ( $ dividend == 0 ) { echo $ a , \" \u2581 \/ \u2581 \" , $ b , \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \" , 0 ; echo \" \" ; } if ( $ divisor == 1 ) { echo $ a , \" \u2581 \/ \u2581 \" , $ b , \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \" , $ sign * $ dividend . \" STRNEWLINE \" ; echo \" \" ; }"}
{"text":"Using Formula derived above .","code":"echo $ a , \" \u2581 \/ \u2581 \" , $ b , \" \u2581 is \u2581 equal \u2581 to \u2581 : \u2581 \" , $ sign * exp ( log ( $ dividend ) - log ( $ divisor ) ) . \" STRNEWLINE \" ; echo \" \" ; }"}
{"text":"Driver code","code":"$ a = 10 ; $ b = 5 ; Divide ( $ a , $ b ) ; $ a = 49 ; $ b = -7 ; Divide ( $ a , $ b ) ; ? >"}
{"text":"Return if the nth term is even or odd .","code":"< ? php function findNature ( $ a , $ b , $ n ) { if ( $ n == 0 ) return ( $ a & 1 ) ; if ( $ n == 1 ) return ( $ b & 1 ) ;"}
{"text":"If a is even","code":"if ( ! ( $ a & 1 ) ) {"}
{"text":"If b is even","code":"if ( ! ( $ b & 1 ) ) return false ;"}
{"text":"If b is odd","code":"else return ( $ n % 3 != 0 ) ; }"}
{"text":"If a is odd","code":"else {"}
{"text":"If b is odd","code":"if ( ! ( $ b & 1 ) ) return ( ( $ n - 1 ) % 3 != 0 ) ;"}
{"text":"If b is eve","code":"else return ( ( $ n + 1 ) % 3 != 0 ) ; } }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 4 ; $ n = 3 ; if ( findNature ( $ a , $ b , $ n ) == true ) echo \" Odd \" , \" \u2581 \" ; else echo \" Even \" , \" \u2581 \" ; ? >"}
{"text":"Return \" Yes \" , if the mirror image of number is same as the given number Else return \" No \"","code":"< ? php function checkEqual ( $ S ) {"}
{"text":"Checking if the number contain only 0 , 1 , 8.","code":"for ( $ i = 0 ; $ i < strlen ( $ S ) ; $ i ++ ) { if ( $ S [ $ i ] != '1' && $ S [ $ i ] != '0' && $ S [ $ i ] != '8' ) { return \" No \" ; } } $ start = 0 ; $ end = strlen ( $ S ) - 1 ;"}
{"text":"Checking if the number is palindrome or not .","code":"while ( $ start < $ end ) {"}
{"text":"If corresponding index is not equal .","code":"if ( $ S [ $ start ] != $ S [ $ end ] ) { return \" No \" ; } $ start ++ ; $ end -- ; } return \" Yes \" ; }"}
{"text":"Driver Code","code":"$ S = \"101\" ; echo checkEqual ( $ S ) ; ? >"}
{"text":"PHP program to find if a number is power of d where d is power of 2.","code":"< ? php function Log2n ( $ n ) { return ( $ n > 1 ) ? 1 + Log2n ( $ n \/ 2 ) : 0 ; }"}
{"text":"Function to count the number of ways to paint N * 3 grid based on given conditions","code":"function isPowerOfd ( $ n , $ d ) { $ count = 0 ;"}
{"text":"Check if there is only one bit set in n","code":"if ( $ n && ! ( $ n & ( $ n - 1 ) ) ) {"}
{"text":"count 0 bits before set bit","code":"while ( $ n > 1 ) { $ n >>= 1 ; $ count += 1 ; }"}
{"text":"If count is a multiple of log2 ( d ) then return true else false","code":"return ( $ count % ( Log2n ( $ d ) ) == 0 ) ; }"}
{"text":"If there are more than 1 bit set then n is not a power of 4","code":"return false ; }"}
{"text":"Driver Code","code":"$ n = 64 ; $ d = 8 ; if ( isPowerOfd ( $ n , $ d ) ) echo $ n , \" \u2581 \" , \" is \u2581 a \u2581 power \u2581 of \u2581 \" , $ d ; else echo $ n , \" \u2581 \" , \" is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 \" , $ d ; ? >"}
{"text":"Function to find octahedral number","code":"< ? php function octahedral_num ( $ n ) {"}
{"text":"Formula to calculate nth octahedral number and return it into main function .","code":"return $ n * ( 2 * $ n * $ n + 1 ) \/ 3 ; }"}
{"text":"Drivers Code","code":"$ n = 5 ;"}
{"text":"print result","code":"echo $ n , \" th \u2581 Octahedral \u2581 number : \u2581 \" ; echo octahedral_num ( $ n ) ; ? >"}
{"text":"Function to find centered Centered tetrahedral number","code":"< ? php function centeredTetrahedralNumber ( $ n ) {"}
{"text":"Formula to calculate nth Centered tetrahedral number and return it into main function .","code":"return ( 2 * $ n + 1 ) * ( $ n * $ n + $ n + 3 ) \/ 3 ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo centeredTetrahedralNumber ( $ n ) ; ? >"}
{"text":"PHP program to swap 4 variables without using temporary variable","code":"< ? php function swap ( $ a , $ b , $ c , $ d ) {"}
{"text":"swapping a and b variables","code":"$ a = $ a + $ b ; $ b = $ a - $ b ; $ a = $ a - $ b ;"}
{"text":"swapping b and c variables","code":"$ b = $ b + $ c ; $ c = $ b - $ c ; $ b = $ b - $ c ;"}
{"text":"swapping c and d variables","code":"$ c = $ c + $ d ; $ d = $ c - $ d ; $ c = $ c - $ d ; echo \" values \u2581 after \u2581 swapping \u2581 are \u2581 : \u2581 \" , \" STRNEWLINE \" ; echo \" a = \" \u2581 , \u2581 $ a \u2581 , \" \" ; STRNEWLINE echo \u2581 \" b = \" \u2581 , \u2581 $ b \u2581 , \" \" ; STRNEWLINE echo \u2581 \" c = \" \u2581 , $ c \u2581 , \" \" ; STRNEWLINE echo \u2581 \" d = \" \u2581 , \u2581 $ d \u2581 , \" \" }"}
{"text":"initialising variables","code":"$ a = 1 ; $ b = 2 ; $ c = 3 ; $ d = 4 ; echo \" Values \u2581 before \u2581 swapping \u2581 are \u2581 : \" , \" STRNEWLINE \" ; echo \" a = \" \u2581 , \u2581 $ a \u2581 , \" \" ; STRNEWLINE echo \u2581 \" b = \" \u2581 , $ b , \" \" ; STRNEWLINE echo \u2581 \" c = \" \u2581 , \u2581 $ c \u2581 , \" \" ; STRNEWLINE echo \u2581 \" d = \" \u2581 , \u2581 $ d \u2581 , \" \" , \" \""}
{"text":"Function call","code":"swap ( $ a , $ b , $ c , $ d ) ; ? >"}
{"text":"Function to find the sum of series","code":"< ? php function seriesSum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += $ i * ( $ i + 1 ) \/ 2 ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo ( seriesSum ( $ n ) ) ; ? >"}
{"text":"PHP Program to check whether given matrix is centrosymmetric or not .","code":"< ? php function checkCentrosymmetricted ( $ n , $ m ) { $ mid_row ;"}
{"text":"Finding the middle row of the matrix","code":"if ( $ n & 1 ) $ mid_row = $ n \/ 2 + 1 ; else $ mid_row = $ n \/ 2 ;"}
{"text":"for each row upto middle row .","code":"for ( $ i = 0 ; $ i < $ mid_row ; $ i ++ ) {"}
{"text":"If each element and its corresponding element is not equal then return false .","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ m [ $ i ] [ $ j ] != $ m [ $ n - $ i - 1 ] [ $ n - $ j - 1 ] ) return false ; } } return true ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ m = array ( array ( 1 , 3 , 5 ) , array ( 6 , 8 , 6 ) , array ( 5 , 3 , 1 ) ) ; if ( checkCentrosymmetricted ( $ n , $ m ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function for Centered Triangular number","code":"< ? php function Centered_Triangular_num ( $ n ) {"}
{"text":"formula for find Centered Triangular number nth term","code":"return ( 3 * $ n * $ n + 3 * $ n + 2 ) \/ 2 ; }"}
{"text":"For 3 rd Centered Triangular number","code":"$ n = 3 ; echo Centered_Triangular_num ( $ n ) , \" STRNEWLINE \" ;"}
{"text":"For 12 th Centered Triangular number","code":"$ n = 12 ; echo Centered_Triangular_num ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function returns value of Binomial Coefficient C ( n , k )","code":"< ? php function binomialCoeff ( $ n , $ k ) { $ C = array ( array ( ) ) ; $ i ; $ j ;"}
{"text":"Calculate value of Binomial Coefficient in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= min ( $ i , $ k ) ; $ j ++ ) {"}
{"text":"Base Cases","code":"if ( $ j == 0 or $ j == $ i ) $ C [ $ i ] [ $ j ] = 1 ;"}
{"text":"Calculate value using previously stored values","code":"else $ C [ $ i ] [ $ j ] = $ C [ $ i - 1 ] [ $ j - 1 ] + $ C [ $ i - 1 ] [ $ j ] ; } } return $ C [ $ n ] [ $ k ] ; }"}
{"text":"Function to calculate the number of trees with exactly k leaves .","code":"function k_Leaves ( $ n , $ k ) { $ ans = ( binomialCoeff ( $ n , $ k ) * binomialCoeff ( $ n , $ k - 1 ) ) \/ $ n ; echo \" Number \u2581 of \u2581 trees \u2581 having \u2581 4 \u2581 edges \u2581 and \u2581 \" , \" exactly \u2581 2 \u2581 leaves \u2581 : \u2581 \" , $ ans , \" STRNEWLINE \" ; return 0 ; }"}
{"text":"Function to calculate total number of nodes of degree d in these trees .","code":"function numberOfNodes ( $ n , $ d ) { $ ans = binomialCoeff ( 2 * $ n - 1 - $ d , $ n - 1 ) ; echo \" Number \u2581 of \u2581 nodes \u2581 of \u2581 degree \u2581 1 \u2581 in \" , \" \u2581 a \u2581 tree \u2581 having \u2581 4 \u2581 edges \u2581 : \u2581 \" , $ ans , \" STRNEWLINE \" ; return 0 ; }"}
{"text":"Function to calculate the number of trees in which the root has degree r .","code":"function rootDegreeR ( $ n , $ r ) { $ ans = $ r * binomialCoeff ( 2 * $ n - 1 - $ r , $ n - 1 ) ; $ ans = $ ans \/ $ n ; echo \" Number \u2581 of \u2581 trees \u2581 having \u2581 4 \u2581 edges \" , \" \u2581 where \u2581 root \u2581 has \u2581 degree \u2581 2 \u2581 : \u2581 \" , $ ans ; return 0 ; }"}
{"text":"Driver program to test above functions Number of trees having 3 edges and exactly 2 leaves","code":"k_Leaves ( 3 , 2 ) ;"}
{"text":"Number of nodes of degree 3 in a tree having 4 edges","code":"numberOfNodes ( 3 , 1 ) ;"}
{"text":"Number of trees having 3 edges where root has degree 2","code":"rootDegreeR ( 3 , 2 ) ; ? >"}
{"text":"To find least value of k","code":"< ? php function repUnitValue ( $ n ) {"}
{"text":"To check n is coprime or not","code":"if ( $ n % 2 == 0 $ n % 5 == 0 ) return 0 ;"}
{"text":"to store R ( k ) mod n and 10 ^ k mod n value","code":"$ rem = 1 ; $ power = 1 ; $ k = 1 ; while ( $ rem % $ n != 0 ) { $ k ++ ; $ power = $ power * 10 % $ n ; $ rem = ( $ rem + $ power ) % $ n ; } return $ k ; }"}
{"text":"Driver Code","code":"$ n = 13 ; echo repUnitValue ( $ n ) ; ? >"}
{"text":"PHP code to determine whether numbers 1 to N can be divided into two sets such that absolute difference between sum of these two sets is M and these two sum are co - prime","code":"< ? php function __gcd ( $ a , $ b ) { return $ b == 0 ? $ a : __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"function that returns boolean value on the basis of whether it is possible to divide 1 to N numbers into two sets that satisfy given conditions .","code":"function isSplittable ( $ n , $ m ) {"}
{"text":"initializing total sum of 1 to n numbers","code":"$ total_sum = ( int ) ( ( $ n * ( $ n + 1 ) ) \/ 2 ) ;"}
{"text":"since ( 1 ) total_sum = sum_s1 + sum_s2 and ( 2 ) m = sum_s1 - sum_s2 assuming sum_s1 > sum_s2 . solving these 2 equations to get sum_s1 and sum_s2","code":"$ sum_s1 = ( int ) ( ( $ total_sum + $ m ) \/ 2 ) ;"}
{"text":"total_sum = sum_s1 + sum_s2 and therefore","code":"$ sum_s2 = $ total_sum - $ sum_s1 ;"}
{"text":"if total sum is less than the absolute difference then there is no way we can split n numbers into two sets so return false","code":"if ( $ total_sum < $ m ) return false ;"}
{"text":"check if these two sums are integers and they add up to total sum and also if their absolute difference is m .","code":"if ( $ sum_s1 + $ sum_s2 == $ total_sum && $ sum_s1 - $ sum_s2 == $ m )"}
{"text":"Now if two sum are co - prime then return true , else return false .","code":"return ( __gcd ( $ sum_s1 , $ sum_s2 ) == 1 ) ;"}
{"text":"if two sums don 't add up to total  sum or if their absolute difference  is not m, then there is no way to  split n numbers, hence return false","code":"return false ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ m = 7 ;"}
{"text":"function call to determine answer","code":"if ( isSplittable ( $ n , $ m ) ) echo \" Yes \" ; else echo \" No \" ;"}
{"text":"PHP implementation of the above approach","code":"< ? php function isPossibleToZero ( $ a , $ n ) {"}
{"text":"converting array element into number","code":"$ num = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ num = $ num * 10 + $ a [ $ i ] ;"}
{"text":"Check if divisible by 11","code":"return ( $ num % 11 == 0 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 0 , 1 , 1 , 0 ) ; $ n = sizeof ( $ arr ) ; if ( isPossibleToZero ( $ arr , $ n ) ) echo \" YES \" ; else echo \" NO \" ;"}
{"text":"Function to cheek if number is Blum Integer","code":"< ? php function isBlumInteger ( $ n ) { $ prime = array_fill ( 0 , $ n + 1 , true ) ;"}
{"text":"to store prime numbers from 2 to n","code":"for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) {"}
{"text":"If prime [ i ] is not changed , then it is a prime","code":"if ( $ prime [ $ i ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ j = $ i * 2 ; $ j <= $ n ; $ j += $ i ) $ prime [ $ j ] = false ; } }"}
{"text":"to check if the given odd integer is Blum Integer or not","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { if ( $ prime [ $ i ] ) {"}
{"text":"checking the factors are of 4 t + 3 form or not","code":"if ( ( $ n % $ i == 0 ) && ( ( $ i - 3 ) % 4 ) == 0 ) { $ q = ( int ) $ n \/ $ i ; return ( $ q != $ i && $ prime [ $ q ] && ( $ q - 3 ) % 4 == 0 ) ; } } } return false ; }"}
{"text":"give odd integer greater than 20","code":"$ n = 249 ; if ( isBlumInteger ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program To calculate the Value Of nCr","code":"< ? php function nCr ( $ n , $ r ) { return fact ( $ n ) \/ ( fact ( $ r ) * fact ( $ n - $ r ) ) ; }"}
{"text":"Returns factorial of n","code":"function fact ( $ n ) { $ res = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res = $ res * $ i ; return $ res ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ r = 3 ; echo nCr ( $ n , $ r ) ; ? >"}
{"text":"function to calculate sum of series","code":"< ? php function summingSeries ( $ n ) {"}
{"text":"Sum of n terms is n ^ 2","code":"return pow ( $ n , 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 100 ; echo \" The \u2581 sum \u2581 of \u2581 n \u2581 term \u2581 is : \u2581 \" , summingSeries ( $ n ) ; ? >"}
{"text":"PHP code to verify Brahmagupta Fibonacci identity","code":"< ? php function find_sum_of_two_squares ( $ a , $ b ) { $ ab = $ a * $ b ;"}
{"text":"represent the product as sum of 2 squares","code":"for ( $ i = 0 ; $ i * $ i <= $ ab ; $ i ++ ) { for ( $ j = $ i ; $ i * $ i + $ j * $ j <= $ ab ; $ j ++ ) {"}
{"text":"check identity criteria","code":"if ( $ i * $ i + $ j * $ j == $ ab ) echo $ i , \" ^ 2 \u2581 + \u2581 \" , $ j , \" ^ 2 \u2581 = \u2581 \" , $ ab , \" STRNEWLINE \" ; } } }"}
{"text":"1 ^ 2 + 2 ^ 2","code":"$ a = 1 * 1 + 2 * 2 ;"}
{"text":"3 ^ 2 + 4 ^ 2","code":"$ b = 3 * 3 + 4 * 4 ; echo \" Representation \u2581 of \u2581 a \u2581 * \u2581 b \u2581 \" . \" as \u2581 sum \u2581 of \u2581 2 \u2581 squares : STRNEWLINE \" ;"}
{"text":"express product of sum of 2 squares as sum of ( sumof 2 squares )","code":"find_sum_of_two_squares ( $ a , $ b ) ; ? >"}
{"text":"Function to find Tetrahedral Number","code":"< ? php function tetrahedralNumber ( $ n ) { return ( $ n * ( $ n + 1 ) * ( $ n + 2 ) ) \/ 6 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo tetrahedralNumber ( $ n ) ; ? >"}
{"text":"function to check euler four square identity","code":"< ? php function check_euler_four_square_identity ( $ a , $ b , $ ab ) { $ s = 0 ;"}
{"text":"loops checking the sum of squares","code":"for ( $ i = 0 ; $ i * $ i <= $ ab ; $ i ++ ) { $ s = $ i * $ i ; for ( $ j = $ i ; $ j * $ j <= $ ab ; $ j ++ ) {"}
{"text":"sum of 2 squares","code":"$ s = $ j * $ j + $ i * $ i ; for ( $ k = $ j ; $ k * $ k <= $ ab ; $ k ++ ) {"}
{"text":"sum of 3 squares","code":"$ s = $ k * $ k + $ j * $ j + $ i * $ i ; for ( $ l = $ k ; $ l * $ l <= $ ab ; $ l ++ ) {"}
{"text":"sum of 4 squares","code":"$ s = $ l * $ l + $ k * $ k + $ j * $ j + $ i * $ i ;"}
{"text":"product of 2 numbers represented as sum of four squares i , j , k , l","code":"if ( $ s == $ ab ) {"}
{"text":"product of 2 numbers a and b represented as sum of four squares i , j , k , l","code":"echo ( \" i \u2581 = \u2581 \" . $ i . \" STRNEWLINE \" ) ; echo ( \" j \u2581 = \u2581 \" . $ j . \" STRNEWLINE \" ) ; echo ( \" k \u2581 = \u2581 \" . $ k . \" STRNEWLINE \" ) ; echo ( \" l \u2581 = \u2581 \" . $ l . \" STRNEWLINE \" ) ; echo \" \" . \u2581 \" Product of \" $ a . \" \u2581 and \u2581 \" . $ b ; echo \" \u2581 can \u2581 be \u2581 written \" . \" \u2581 as \u2581 sum \u2581 of \u2581 squares \u2581 of \u2581 i , \u2581 \" . \" j , \u2581 k , \u2581 l STRNEWLINE \" ; echo $ ab . \" \u2581 = \u2581 \" ; echo $ i . \" * \" \u2581 . \u2581 $ i . \u2581 \" + \" echo $ j . \" * \" . $ j . \" \u2581 + \u2581 \" ; echo $ k . \" * \" \u2581 . \u2581 $ k \u2581 . \u2581 \" + \" echo $ l . \" * \" . $ l . \" STRNEWLINE \" ; echo \" STRNEWLINE \" ; } } } } } }"}
{"text":"given numbers can be represented as sum of 4 squares By euler 's four square identity product also can be represented as sum of 4 squares","code":"$ ab = $ a * $ b ; check_euler_four_square_identity ( $ a , $ b , $ ab ) ; ? >"}
{"text":"Returns the number of divisors of ( A - B ) greater than B","code":"< ? php function calculateDivisors ( $ A , $ B ) { $ N = ( $ A - $ B ) ; $ noOfDivisors = 0 ; for ( $ i = 1 ; $ i <= sqrt ( $ N ) ; $ i ++ ) {"}
{"text":"if N is divisible by i","code":"if ( ( $ N % $ i ) == 0 ) {"}
{"text":"count only the divisors greater than B","code":"if ( $ i > $ B ) $ noOfDivisors ++ ;"}
{"text":"checking if a divisor isnt counted twice","code":"if ( ( $ N \/ $ i ) != $ i && ( $ N \/ $ i ) > $ B ) $ noOfDivisors ++ ; } } return $ noOfDivisors ; }"}
{"text":"Utility function to calculate number of all possible values of X for which the modular equation holds true","code":"function numberOfPossibleWaysUtil ( $ A , $ B ) {"}
{"text":"if A = B there are infinitely many solutions to equation or we say X can take infinitely many values > A . We return - 1 in this case","code":"if ( $ A == $ B ) return -1 ;"}
{"text":"if A < B , there are no possible values of X satisfying the equation","code":"if ( $ A < $ B ) return 0 ;"}
{"text":"the last case is when A > B , here we calculate the number of divisors of ( A - B ) , which are greater than B","code":"$ noOfDivisors = 0 ; $ noOfDivisors = calculateDivisors ( $ A , $ B ) ; return $ noOfDivisors ; }"}
{"text":"Wrapper function for numberOfPossibleWaysUtil ( )","code":"function numberOfPossibleWays ( $ A , $ B ) { $ noOfSolutions = numberOfPossibleWaysUtil ( $ A , $ B ) ;"}
{"text":"if infinitely many solutions available","code":"if ( $ noOfSolutions == -1 ) { echo \" For A = \" \u2581 , \u2581 $ A , \u2581 \" and B = \" \u2581 , $ B , STRNEWLINE \" X can take Infinitely many values greater than \" \u2581 , \u2581 $ A \u2581 , \u2581 \" \" ; STRNEWLINE } STRNEWLINE else \u2581 { STRNEWLINE echo \u2581 \" For A = \" , \u2581 $ A \u2581 , \u2581 \" and B = \" \u2581 , $ B , STRNEWLINE \" X can take \" , $ noOfSolutions , STRNEWLINE \" values \" } }"}
{"text":"Driver code","code":"$ A = 26 ; $ B = 2 ; numberOfPossibleWays ( $ A , $ B ) ; $ A = 21 ; $ B = 5 ; numberOfPossibleWays ( $ A , $ B ) ;"}
{"text":"Function that keeps all the odd power numbers upto n","code":"< ? php function powerNumbers ( $ n ) { $ v = array ( ) ; for ( $ i = 2 ; $ i * $ i * $ i <= $ n ; $ i ++ ) { $ j = $ i * $ i ; while ( $ j * $ i <= $ n ) { $ j *= $ i ;"}
{"text":"We need exclude perfect squares .","code":"$ s = sqrt ( $ j ) ; if ( $ s * $ s != $ j ) array_push ( $ v , $ j ) ; } }"}
{"text":"sort the vector","code":"sort ( $ v ) ; $ uni = array_unique ( $ v ) ; for ( $ i = 0 ; $ i < count ( $ uni ) ; $ i ++ ) { $ key = array_search ( $ uni [ $ i ] , $ v ) ; unset ( $ v [ $ key ] ) ; }"}
{"text":"Return sum of odd and even powers .","code":"return count ( $ v ) + 3 + intval ( sqrt ( $ n ) ) ; }"}
{"text":"Driver Code","code":"echo ( powerNumbers ( 50 ) ) ; ? >"}
{"text":"variance function declaration Function for calculating mean","code":"< ? php function mean ( $ a , $ n ) {"}
{"text":"Calculating sum","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ sum += $ a [ $ i ] [ $ j ] ;"}
{"text":"Returning mean","code":"return floor ( ( int ) $ sum \/ ( $ n * $ n ) ) ; }"}
{"text":"Function for calculating variance","code":"function variance ( $ a , $ n , $ m ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"subtracting mean from elements","code":"$ a [ $ i ] [ $ j ] -= $ m ;"}
{"text":"a [ i ] [ j ] = fabs ( a [ i ] [ j ] ) ; squaring each terms","code":"$ a [ $ i ] [ $ j ] *= $ a [ $ i ] [ $ j ] ; } }"}
{"text":"taking sum","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ sum += $ a [ $ i ] [ $ j ] ; return floor ( ( int ) $ sum \/ ( $ n * $ n ) ) ; }"}
{"text":"declaring and initializing matrix","code":"$ mat = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ;"}
{"text":"for mean","code":"$ m = mean ( $ mat , 3 ) ;"}
{"text":"for variance","code":"$ var = variance ( $ mat , 3 , $ m ) ;"}
{"text":"for standard deviation","code":"$ dev = sqrt ( $ var ) ;"}
{"text":"displaying variance and deviation","code":"echo \" Mean : \" \u2581 , \u2581 $ m \u2581 , \u2581 \" \" , STRNEWLINE \" Variance : \" \u2581 , \u2581 $ var \u2581 , STRNEWLINE \" \" , \u2581 \" Deviation : \" floor ( $ dev ) , \" STRNEWLINE \" ; ? >"}
{"text":"Prints N arithmetic means between A and B .","code":"< ? php function printAMeans ( $ A , $ B , $ N ) {"}
{"text":"calculate common difference ( d )","code":"$ d = ( $ B - $ A ) \/ ( $ N + 1 ) ;"}
{"text":"for finding N the arithmetic mean between A and B","code":"for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) echo ( $ A + $ i * $ d ) , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ A = 20 ; $ B = 32 ; $ N = 5 ; printAMeans ( $ A , $ B , $ N ) ; ? >"}
{"text":"function to calculate sum of series","code":"< ? php function sumofseries ( $ n ) { return ( $ n * ( $ n + 1 ) * ( $ n + 2 ) * ( $ n + 3 ) \/ 4 ) ; }"}
{"text":"Driver Code","code":"echo sumofseries ( 3 ) ; ? >"}
{"text":"Returns true if i is co - prime with numbers in set [ 2 , 3 , ... m ]","code":"< ? php function isValid ( $ i , $ m ) {"}
{"text":"Running the loop till square root of n to reduce the time complexity from n","code":"$ sq_i = sqrt ( $ i ) ;"}
{"text":"Find the minimum of square root of n and m to run the loop until the smaller one","code":"$ sq = min ( $ m , $ sq_i ) ;"}
{"text":"Check from 2 to min ( m , sqrt ( n ) )","code":"for ( $ j = 2 ; $ j <= $ sq ; $ j ++ ) if ( $ i % $ j == 0 ) return false ; return true ; }"}
{"text":"Function to find the largest number less than n which is Co - prime with all numbers from 2 to m","code":"function findLargestNum ( $ n , $ m ) {"}
{"text":"Iterating from n to m + 1 to find the number","code":"for ( $ i = $ n ; $ i > $ m ; $ i -- ) {"}
{"text":"checking every number for the given conditions","code":"if ( isValid ( $ i , $ m ) ) {"}
{"text":"The first number which satisfy the conditions is the answer","code":"echo $ i , \" STRNEWLINE \" ; return ; } }"}
{"text":"If there is no number which satisfy the conditions , then print number does not exist .","code":"echo \" Number \u2581 Doesn ' t \u2581 Exists STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ n = 16 ; $ m = 3 ; findLargestNum ( $ n , $ m ) ; ? >"}
{"text":"Function to check orthogonalilty","code":"< ? php function isOrthogonal ( $ a , $ m , $ n ) { if ( $ m != $ n ) return false ;"}
{"text":"Find transpose","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ trans [ $ i ] [ $ j ] = $ a [ $ j ] [ $ i ] ;"}
{"text":"Find product of a [ ] [ ] and its transpose","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ sum = 0 ; for ( $ k = 0 ; $ k < $ n ; $ k ++ ) {"}
{"text":"Since we are multiplying with transpose of itself . We use","code":"$ sum = $ sum + ( $ a [ $ i ] [ $ k ] * $ a [ $ j ] [ $ k ] ) ; } $ prod [ $ i ] [ $ j ] = $ sum ; } }"}
{"text":"Check if product is identity matrix","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i != $ j && $ prod [ $ i ] [ $ j ] != 0 ) return false ; if ( $ i == $ j && $ prod [ $ i ] [ $ j ] != 1 ) return false ; } } return true ; }"}
{"text":"Driver Code","code":"$ a = array ( array ( 1 , 0 , 0 ) , array ( 0 , 1 , 0 ) , array ( 0 , 0 , 1 ) ) ; if ( isOrthogonal ( $ a , 3 , 3 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find if x is a perfect square .","code":"< ? php function isPerfectSquare ( $ x ) {"}
{"text":"Find floating point value of square root of x .","code":"$ sr = sqrt ( $ x ) ;"}
{"text":"If square root is an integer","code":"return ( ( $ sr - floor ( $ sr ) ) == 0 ) ; }"}
{"text":"Driver code","code":"$ x = 2502 ; if ( isPerfectSquare ( $ x ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"function to print GP","code":"< ? php function printGP ( $ a , $ r , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ curr_term = $ a * pow ( $ r , $ i ) ; echo $ curr_term , \" \" ; } }"}
{"text":"starting number","code":"$ a = 2 ;"}
{"text":"Common ratio","code":"$ r = 3 ;"}
{"text":"N th term to be find","code":"$ n = 5 ; printGP ( $ a , $ r , $ n ) ; ? >"}
{"text":"get second MSB","code":"< ? php function getMSB ( $ n ) {"}
{"text":"consectutively set all the bits","code":"$ n |= $ n >> 1 ; $ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ;"}
{"text":"returns the second MSB","code":"return ( ( $ n + 1 ) >> 2 ) ; }"}
{"text":"Multiply function","code":"function multiply ( & $ F , & $ M ) { $ x = $ F [ 0 ] [ 0 ] * $ M [ 0 ] [ 0 ] + $ F [ 0 ] [ 1 ] * $ M [ 1 ] [ 0 ] ; $ y = $ F [ 0 ] [ 0 ] * $ M [ 0 ] [ 1 ] + $ F [ 0 ] [ 1 ] * $ M [ 1 ] [ 1 ] ; $ z = $ F [ 1 ] [ 0 ] * $ M [ 0 ] [ 0 ] + $ F [ 1 ] [ 1 ] * $ M [ 1 ] [ 0 ] ; $ w = $ F [ 1 ] [ 0 ] * $ M [ 0 ] [ 1 ] + $ F [ 1 ] [ 1 ] * $ M [ 1 ] [ 1 ] ; $ F [ 0 ] [ 0 ] = $ x ; $ F [ 0 ] [ 1 ] = $ y ; $ F [ 1 ] [ 0 ] = $ z ; $ F [ 1 ] [ 1 ] = $ w ; }"}
{"text":"Function to calculate F [ ] [ ] raise to the power n","code":"function power ( & $ F , $ n ) {"}
{"text":"Base case","code":"if ( $ n == 0 $ n == 1 ) return ;"}
{"text":"take 2D array to store number 's","code":"$ M = array ( array ( 1 , 1 ) , array ( 1 , 0 ) ) ;"}
{"text":"run loop till MSB > 0","code":"for ( $ m = getMSB ( $ n ) ; $ m ; $ m = $ m >> 1 ) { multiply ( $ F , $ F ) ; if ( $ n & $ m ) { multiply ( $ F , $ M ) ; } } }"}
{"text":"To return fibonacci number","code":"function fib ( $ n ) { $ F = array ( array ( 1 , 1 ) , array ( 1 , 0 ) ) ; if ( $ n == 0 ) return 0 ; power ( $ F , $ n - 1 ) ; return $ F [ 0 ] [ 0 ] ; }"}
{"text":"Given n","code":"$ n = 6 ; echo fib ( $ n ) . \" \" ; ? >"}
{"text":"PHP program to print Brocot Sequence","code":"< ? php function SternSequenceFunc ( & $ BrocotSequence , $ n ) {"}
{"text":"loop to create sequence","code":"for ( $ i = 1 ; count ( $ BrocotSequence ) < $ n ; $ i ++ ) { $ considered_element = $ BrocotSequence [ $ i ] ; $ precedent = $ BrocotSequence [ $ i - 1 ] ;"}
{"text":"adding sum of considered element and it 's precedent","code":"array_push ( $ BrocotSequence , $ considered_element + $ precedent ) ;"}
{"text":"adding next considered element","code":"array_push ( $ BrocotSequence , $ considered_element ) ; }"}
{"text":"printing sequence . .","code":"for ( $ i = 0 ; $ i < 15 ; ++ $ i ) echo ( $ BrocotSequence [ $ i ] . \" \u2581 \" ) ; }"}
{"text":"Driver code","code":"$ n = 15 ; $ BrocotSequence = array ( ) ;"}
{"text":"adding first two element in the sequence","code":"array_push ( $ BrocotSequence , 1 ) ; array_push ( $ BrocotSequence , 1 ) ; SternSequenceFunc ( $ BrocotSequence , $ n ) ; ? >"}
{"text":"PHP program to Count the numbers within a given range in which when you subtract a number from its reverse , the difference is a product of k","code":"< ? php function isRevDiffDivisible ( $ x , $ k ) {"}
{"text":"function to check if the number and its reverse have their absolute difference divisible by k","code":"$ n = $ x ; $ m = 0 ; $ flag ; while ( $ x > 0 ) {"}
{"text":"reverse the number","code":"$ m = $ m * 10 + $ x % 10 ; $ x = ( int ) $ x \/ 10 ; } return ( abs ( $ n - $ m ) % $ k == 0 ) ; } function countNumbers ( $ l , $ r , $ k ) { $ count = 0 ; for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) if ( isRevDiffDivisible ( $ i , $ k ) ) ++ $ count ; return $ count ; }"}
{"text":"Driver code","code":"$ l = 20 ; $ r = 23 ; $ k = 6 ; echo countNumbers ( $ l , $ r , $ k ) ; ? >"}
{"text":"Function to calculate sum of all proper divisors of a given number","code":"< ? php function divSum ( $ n ) {"}
{"text":"Sum of divisors","code":"$ result = 0 ;"}
{"text":"find all divisors which divides ' num '","code":"for ( $ i = 2 ; $ i <= sqrt ( $ n ) ; $ i ++ ) {"}
{"text":"if ' i ' is divisor of ' n '","code":"if ( $ n % $ i == 0 ) {"}
{"text":"if both divisors are same then add it once else add both","code":"if ( $ i == ( $ n \/ $ i ) ) $ result += $ i ; else $ result += ( $ i + $ n \/ $ i ) ; } }"}
{"text":"Add 1 and n to result as above loop considers proper divisors greater than 1.","code":"return ( $ result + 1 ) ; }"}
{"text":"Returns true if x and y are Amicable else false .","code":"function areAmicable ( $ x , $ y ) { if ( divSum ( $ x ) != $ y ) return false ; return ( divSum ( $ y ) == $ x ) ; }"}
{"text":"Driver Code","code":"$ x = 220 ; $ y = 284 ; if ( areAmicable ( $ x , $ y ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to check perfect square","code":"< ? php function isPerfectSquare ( $ n ) { if ( $ n < 0 ) return false ; $ root = round ( sqrt ( $ n ) ) ; return $ n == $ root * $ root ; }"}
{"text":"function to print all non square number","code":"function printnonsquare ( $ n ) {"}
{"text":"variable which stores the count","code":"$ count = 0 ; for ( $ i = 1 ; $ count < $ n ; ++ $ i ) {"}
{"text":"not perfect square","code":"if ( ! isPerfectSquare ( $ i ) ) { echo $ i . \" \" ; $ count ++ ; } } }"}
{"text":"Driver Code","code":"$ n = 10 ; printnonsquare ( $ n ) ; ? >"}
{"text":"Returns n - th non - square number .","code":"< ? php function nonsquare ( $ n ) { return $ n + ( int ) ( 0.5 + sqrt ( $ n ) ) ; } function printNonSquare ( $ n ) {"}
{"text":"loop to print non squares below n","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) printf ( nonsquare ( $ i ) . \" \u2581 \" ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; printNonSquare ( $ n ) ; ? >"}
{"text":"Get max of the two fractions","code":"< ? php function maxFraction ( $ first , $ sec ) {"}
{"text":"Declare nume1 and nume2 for get the value of first numerator and second numerator","code":"$ a = $ first [ 0 ] ; $ b = $ first [ 1 ] ; $ c = $ sec [ 0 ] ; $ d = $ sec [ 1 ] ;"}
{"text":"Compute ad - bc","code":"$ Y = $ a * $ d - $ b * $ c ; return ( $ Y ) ? $ first : $ sec ; }"}
{"text":"Driver Code","code":"$ first = array ( 3 , 2 ) ; $ sec = array ( 3 , 4 ) ; $ res = maxFraction ( $ first , $ sec ) ; echo $ res [ 0 ] . \" \/ \" . $ res [ 1 ] ; ? >"}
{"text":"Function to determine if N is pentagonal or not .","code":"< ? php function isPentagonal ( int $ N ) { $ i = 1 ; $ M ; do {"}
{"text":"Substitute values of i in the formula .","code":"$ M = ( 3 * $ i * $ i - $ i ) \/ 2 ; $ i += 1 ; } while ( $ M < $ N ) ; return ( $ M == $ N ) ; }"}
{"text":"Driver Code","code":"$ N = 12 ; if ( isPentagonal ( $ N ) ) echo $ N , \" \u2581 is \u2581 pentagonal \u2581 \" ; else echo $ N , \" \u2581 is \u2581 not \u2581 pentagonal \" ; ? >"}
{"text":"Return the sum of fourth power of first n natural numbers","code":"< ? php function fourthPowerSum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum = $ sum + ( $ i * $ i * $ i * $ i ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo ( fourthPowerSum ( $ n ) ) ; ? >"}
{"text":"Return the sum of fourth power of first n natural numbers","code":"< ? php function fourthPowerSum ( $ n ) { return ( ( 6 * $ n * $ n * $ n * $ n * $ n ) + ( 15 * $ n * $ n * $ n * $ n ) + ( 10 * $ n * $ n * $ n ) - $ n ) \/ 30 ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo ( fourthPowerSum ( $ n ) ) ; ? >"}
{"text":"find unit digit","code":"< ? php function unitnumber ( $ x , $ y ) {"}
{"text":"Get last digit of x","code":"$ x = $ x % 10 ;"}
{"text":"Last cyclic modular value","code":"if ( $ y != 0 ) $ y = $ y % 4 + 4 ;"}
{"text":"here we simply return the unit digit or the power of a number","code":"return ( ( ( int ) ( pow ( $ x , $ y ) ) ) % 10 ) ; }"}
{"text":"Driver code","code":"$ x = 133 ; $ y = 5 ;"}
{"text":"get unit digit number here we pass the unit digit of x and the last cyclicity number that is y % 4","code":"echo ( unitnumber ( $ x , $ y ) ) ; ? >"}
{"text":"Function to calculate sum of all proper divisors","code":"< ? php function aliquotSum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ n % $ i == 0 ) $ sum += $ i ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 12 ; echo ( aliquotSum ( $ n ) ) ; ? >"}
{"text":"PHP program to multiply two complex numbers given as strings .","code":"< ? php function complexNumberMultiply ( $ a , $ b ) {"}
{"text":"Spiting the real and imaginary parts of the given complex strings based on ' + ' and ' i ' symbols .","code":"$ x = preg_split ( \" \/ [ \\s + ] + \u2581 i \/ \" , $ a ) ; $ y = preg_split ( \" \/ [ \\s + ] + \u2581 i \/ \" , $ b ) ;"}
{"text":"Storing the real part of complex string a","code":"$ a_real = intval ( $ x [ 0 ] ) ;"}
{"text":"Storing the imaginary part of complex string a","code":"$ a_img = intval ( $ x [ 1 ] ) ;"}
{"text":"Storing the real part of complex string b","code":"$ b_real = intval ( $ y [ 0 ] ) ;"}
{"text":"Storing the imaginary part of complex string b","code":"$ b_img = intval ( $ y [ 1 ] ) ;"}
{"text":"Returns the product .","code":"return ( $ a_real * $ b_real - $ a_img * $ b_img ) . \" + \" ( $ a_real * $ b_img + $ a_img * $ b_real ) . \" i \" ; }"}
{"text":"Driver Code","code":"$ str1 = \"1 + 1i \" ; $ str2 = \"1 + 1i \" ; echo complexNumberMultiply ( $ str1 , $ str2 ) ; ? >"}
{"text":"Function to get the average","code":"< ? php function AvgofSquareN ( $ n ) { return ( ( $ n + 1 ) * ( 2 * $ n + 1 ) ) \/ 6 ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo ( AvgofSquareN ( $ n ) ) ; ? >"}
{"text":"Given function to be integrated","code":"< ? php function func ( $ x ) { return ( 1 \/ ( 1 + $ x * $ x ) ) ; }"}
{"text":"Function to perform calculations","code":"function calculate ( $ lower_limit , $ upper_limit , $ interval_limit ) { $ interval_size = ( $ upper_limit - $ lower_limit ) \/ $ interval_limit ; $ sum = func ( $ lower_limit ) + func ( $ upper_limit ) ;"}
{"text":"Calculates value till integral limit","code":"for ( $ i = 1 ; $ i < $ interval_limit ; $ i ++ ) { if ( $ i % 3 == 0 ) $ sum = $ sum + 2 * func ( $ lower_limit + $ i * $ interval_size ) ; else $ sum = $ sum + 3 * func ( $ lower_limit + $ i * $ interval_size ) ; } return ( 3 * $ interval_size \/ 8 ) * $ sum ; }"}
{"text":"Driver Code","code":"$ interval_limit = 10 ; $ lower_limit = 1 ; $ upper_limit = 10 ; $ integral_res = calculate ( $ lower_limit , $ upper_limit , $ interval_limit ) ; echo $ integral_res ; ? >"}
{"text":"Function to determine the focal length of a lens","code":"< ? php function focal_length ( $ image_distance , $ object_distance ) { return 1 \/ ( ( 1 \/ $ image_distance ) + ( 1 \/ $ object_distance ) ) ; }"}
{"text":"variable to store the distance between the lens and the image","code":"$ image_distance = 2 ;"}
{"text":"variable to store the distance between the lens and the object","code":"$ object_distance = 50 ; echo \" Focal \u2581 length \u2581 of \u2581 a \u2581 lens \u2581 is \u2581 \" , focal_length ( $ image_distance , $ object_distance ) , \" \u2581 units \u2581 . \" ; ? >"}
{"text":"check if the number is divisible by the digits .","code":"< ? php function check ( $ n ) { $ m = $ n ; while ( $ n ) { $ r = $ n % 10 ; if ( $ r > 0 ) if ( ( $ m % $ r ) != 0 ) return false ; $ n \/= 10 ; } return true ; }"}
{"text":"function to calculate the number of numbers","code":"function countIn ( $ l , $ r ) { $ ans = 0 ; for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) if ( check ( $ i ) ) $ ans += 1 ; return $ ans ; }"}
{"text":"Driver function","code":"$ l = 10 ; $ r = 20 ; echo countIn ( $ l , $ r ) ;"}
{"text":"function to find the sum of given series","code":"< ? php function sumOfTheSeries ( $ n ) {"}
{"text":"Computing sum term by term","code":"$ sum = 0.0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += 1.0 \/ ( $ i * ( $ i + 1 ) ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo sumOfTheSeries ( $ n ) ; ? >"}
{"text":"function to find sum of series","code":"< ? php function sum ( $ n ) { $ root = intval ( sqrt ( $ n ) ) ; $ ans = 0 ; for ( $ i = 1 ; $ i <= $ root ; $ i ++ ) $ ans += intval ( $ n \/ $ i ) ; $ ans = ( 2 * $ ans ) - ( $ root * $ root ) ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 35 ; echo ( sum ( $ n ) ) ; ? >"}
{"text":"function to find the sum of the given series","code":"< ? php function sumOfTheSeries ( $ n ) {"}
{"text":"sum of 1 st n natural numbers","code":"$ sum_n = ( $ n * ( $ n + 1 ) \/ 2 ) ;"}
{"text":"sum of squares of 1 st n natural numbers","code":"$ sum_sq_n = ( $ n * ( $ n + 1 ) \/ 2 ) * ( 2 * $ n + 1 ) \/ 3 ;"}
{"text":"required sum","code":"return ( $ sum_n + $ sum_sq_n ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( \" Sum \u2581 = \u2581 \" . sumOfTheSeries ( $ n ) ) ; ? >"}
{"text":"Return the sum of square of binomial coefficient","code":"< ? php function sumofsquare ( $ n ) { $ i ; $ j ;"}
{"text":"Calculate value of Binomial Coefficient in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= min ( $ i , $ n ) ; $ j ++ ) {"}
{"text":"Base Cases","code":"if ( $ j == 0 $ j == $ i ) $ C [ $ i ] [ $ j ] = 1 ;"}
{"text":"Calculate value using previously stored values","code":"else $ C [ $ i ] [ $ j ] = $ C [ $ i - 1 ] [ $ j - 1 ] + $ C [ $ i - 1 ] [ $ j ] ; } }"}
{"text":"Finding the sum of square of binomial coefficient .","code":"$ sum = 0 ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ sum += ( $ C [ $ n ] [ $ i ] * $ C [ $ n ] [ $ i ] ) ; return $ sum ; }"}
{"text":"Driven Program","code":"$ n = 4 ; echo sumofsquare ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function that find sum of series .","code":"< ? php function sumOfSeries ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) $ sum = $ sum + $ i ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ;"}
{"text":"Function call","code":"echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"Return the sum of even index term","code":"< ? php function evenSum ( $ n ) { $ C = array ( array ( ) ) ; $ i ; $ j ;"}
{"text":"Calculate value of Binomial Coefficient in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= min ( $ i , $ n ) ; $ j ++ ) {"}
{"text":"Base Cases","code":"if ( $ j == 0 or $ j == $ i ) $ C [ $ i ] [ $ j ] = 1 ;"}
{"text":"Calculate value using previously stored values","code":"else $ C [ $ i ] [ $ j ] = $ C [ $ i - 1 ] [ $ j - 1 ] + $ C [ $ i - 1 ] [ $ j ] ; } }"}
{"text":"finding sum of even index term .","code":"$ sum = 0 ; for ( $ i = 0 ; $ i <= $ n ; $ i += 2 ) $ sum += $ C [ $ n ] [ $ i ] ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo evenSum ( $ n ) ; ? >"}
{"text":"Function to find triangular number","code":"< ? php function triangular_series ( $ n ) { for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) echo ( \" \u2581 \" . $ i * ( $ i + 1 ) \/ 2 . \" \u2581 \" ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; triangular_series ( $ n ) ; ? >"}
{"text":"function to check if a number can be written as sum of three consecutive integers .","code":"< ? php function checksum ( $ n ) {"}
{"text":"if n is multiple of 3","code":"if ( $ n % 3 == 0 ) echo $ n \/ 3 - 1 , \" \u2581 \" , $ n \/ 3 , \" \u2581 \" , $ n \/ 3 + 1 ;"}
{"text":"else print \" - 1\" .","code":"else echo \" - 1\" ; }"}
{"text":"Driver Program","code":"$ n = 6 ; checksum ( $ n ) ; ? >"}
{"text":"Utility function to find sum of all divisor of number up to ' n '","code":"< ? php function divisorSum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) $ sum += floor ( $ n \/ $ i ) * $ i ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo divisorSum ( $ n ) , \" STRNEWLINE \" ; $ n = 5 ; echo divisorSum ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to evaluate Nth polite number","code":"< ? php function polite ( $ n ) { $ n += 1 ; $ base = 2 ; return $ n + ( log ( ( $ n + ( log ( $ n ) \/ log ( $ base ) ) ) ) ) \/ log ( $ base ) ; }"}
{"text":"Driver code","code":"$ n = 7 ; echo ( ( int ) polite ( $ n ) ) ; ? >"}
{"text":"Modified Binary search function to solve the equation","code":"< ? php function solve ( $ low , $ high , $ T ) { while ( $ low <= $ high ) { $ mid = ( $ low + $ high ) \/ 2 ;"}
{"text":"if mid is solution to equation","code":"if ( ( $ mid * ( $ mid + 1 ) ) == $ T ) return $ mid ;"}
{"text":"if our solution to equation lies between mid and mid - 1","code":"if ( $ mid > 0 && ( $ mid * ( $ mid + 1 ) ) > $ T && ( $ mid * ( $ mid - 1 ) ) <= $ T ) return $ mid - 1 ;"}
{"text":"if solution to equation is greater than mid","code":"if ( ( $ mid * ( $ mid + 1 ) ) > $ T ) $ high = $ mid - 1 ;"}
{"text":"if solution to equation is less than mid","code":"else $ low = $ mid + 1 ; } return -1 ; }"}
{"text":"Driver Code","code":"$ T = 15 ;"}
{"text":"call binary search method to solve for limits 1 to T","code":"$ ans = solve ( 1 , $ T , 2 * $ T ) ;"}
{"text":"Because our pattern starts from 2 , 3 , 4 , 5. . . so , we subtract 1 from ans","code":"if ( $ ans != -1 ) $ ans -- ; echo \" Number \u2581 of \u2581 stair \u2581 steps \u2581 = \u2581 \" , $ ans , \" STRNEWLINE \" ; ? >"}
{"text":"Function to check whether there is overflow in a * b or not . It returns true if there is overflow .","code":"< ? php function isOverflow ( $ a , $ b ) {"}
{"text":"Check if either of them is zero","code":"if ( $ a == 0 $ b == 0 ) return false ; $ result = $ a * $ b ; if ( $ a == ( int ) $ result \/ $ b ) return false ; else return true ; }"}
{"text":"Driver code","code":"$ a = 10000000000 ; $ b = -10000000000 ; if ( isOverflow ( $ a , $ b ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns the sum of first n odd numbers","code":"< ? php function oddSum ( $ n ) { $ sum = 0 ; $ curr = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum += $ curr ; $ curr += 2 ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 20 ; echo \" \u2581 Sum \u2581 of \u2581 first \u2581 \" , $ n , \" \u2581 Odd \u2581 Numbers \u2581 is : \u2581 \" , oddSum ( $ n ) ; ? >"}
{"text":"Returns the sum of first n odd numbers","code":"< ? php function oddSum ( $ n ) { return ( $ n * $ n ) ; }"}
{"text":"Driver Code","code":"$ n = 20 ; echo \" \u2581 Sum \u2581 of \u2581 first \u2581 \" , $ n , \" \u2581 Odd \u2581 Numbers \u2581 is : \u2581 \" , oddSum ( $ n ) ; ? >"}
{"text":"Returns the sum of first n odd numbers","code":"< ? php function printKPFNums ( $ A , $ B , $ K ) {"}
{"text":"Count prime factors of all numbers till B .","code":"$ prime = array_fill ( true , $ B + 1 , NULL ) ; $ p_factors = array_fill ( 0 , $ B + 1 , NULL ) ; for ( $ p = 2 ; $ p <= $ B ; $ p ++ ) if ( $ p_factors [ $ p ] == 0 ) for ( $ i = $ p ; $ i <= $ B ; $ i += $ p ) $ p_factors [ $ i ] ++ ;"}
{"text":"Print all numbers with k prime factors","code":"for ( $ i = $ A ; $ i <= $ B ; $ i ++ ) if ( $ p_factors [ $ i ] == $ K ) echo $ i . \" \" ; }"}
{"text":"Driver code","code":"$ A = 14 ; $ B = 18 ; $ K = 2 ; printKPFNums ( $ A , $ B , $ K ) ; ? >"}
{"text":"PHP program to find maximum differences between two prime numbers in given ranges","code":"< ? php $ MAX = 100005 ;"}
{"text":"Precompute Sieve , Prefix array , Suffix array","code":"function precompute ( & $ prefix , & $ suffix ) { global $ MAX ; $ prime = array_fill ( 0 , $ MAX , true ) ;"}
{"text":"Sieve of Eratosthenes","code":"for ( $ i = 2 ; $ i * $ i < $ MAX ; $ i ++ ) { if ( $ prime [ $ i ] ) { for ( $ j = $ i * $ i ; $ j < $ MAX ; $ j += $ i ) $ prime [ $ j ] = false ; } } $ prefix [ 1 ] = 1 ; $ suffix [ $ MAX - 1 ] = 1e9 + 7 ;"}
{"text":"Precomputing Prefix array .","code":"for ( $ i = 2 ; $ i < $ MAX ; $ i ++ ) { if ( $ prime [ $ i ] ) $ prefix [ $ i ] = $ i ; else $ prefix [ $ i ] = $ prefix [ $ i - 1 ] ; }"}
{"text":"Precompute Suffix array .","code":"for ( $ i = $ MAX - 1 ; $ i > 1 ; $ i -- ) { if ( $ prime [ $ i ] ) $ suffix [ $ i ] = $ i ; else $ suffix [ $ i ] = $ suffix [ $ i + 1 ] ; } }"}
{"text":"Function to solve each query","code":"function query ( $ prefix , $ suffix , $ L , $ R ) { if ( $ prefix [ $ R ] < $ L $ suffix [ $ L ] > $ R ) return 0 ; else return $ prefix [ $ R ] - $ suffix [ $ L ] ; }"}
{"text":"Driver Code","code":"$ q = 3 ; $ L = array ( 2 , 2 , 24 ) ; $ R = array ( 5 , 2 , 28 ) ; $ prefix = array_fill ( 0 , $ MAX + 1 , 0 ) ; $ suffix = array_fill ( 0 , $ MAX + 1 , 0 ) ; precompute ( $ prefix , $ suffix ) ; for ( $ i = 0 ; $ i < $ q ; $ i ++ ) echo query ( $ prefix , $ suffix , $ L [ $ i ] , $ R [ $ i ] ) . \" STRNEWLINE \" ; ? >"}
{"text":"Code to print the sum of the series","code":"< ? php function sum ( $ x , $ n ) { $ i ; $ total = 1.0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ total = $ total + ( pow ( $ x , $ i ) \/ $ i ) ; return $ total ; }"}
{"text":"Driver code","code":"$ x = 2 ; $ n = 5 ; echo ( sum ( $ x , $ n ) ) ; ? >"}
{"text":"returns yes if exist else no .","code":"< ? php function isMember ( $ a , $ d , $ x ) {"}
{"text":"If difference is 0 , then x must be same as a","code":"if ( $ d == 0 ) return ( $ x == $ a ) ;"}
{"text":"Else difference between x and a must be divisible by d .","code":"return ( ( $ x - $ a ) % $ d == 0 && ( $ x - $ a ) \/ $ d >= 0 ) ; }"}
{"text":"Driver code .","code":"$ a = 1 ; $ x = 7 ; $ d = 3 ; if ( isMember ( $ a , $ d , $ x ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to check if there exist two numbers sum of whose squares is n .","code":"< ? php function sumSquare ( int $ n ) { for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) for ( $ j = 1 ; $ j * $ j <= $ n ; $ j ++ ) if ( $ i * $ i + $ j * $ j == $ n ) { echo $ i , \" ^ 2 \u2581 + \u2581 \" , $ j , \" ^ 2\" ; return true ; } return false ; }"}
{"text":"Driver Code","code":"$ n = 25 ; if ( sumSquare ( $ n ) ) echo \" \u2581 STRNEWLINE \" , \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to check if the sum of digits is equal to the summation assumed","code":"< ? php function check ( $ a , $ b ) { $ c = 0 ;"}
{"text":"calculate the sum of digit","code":"while ( $ a != 0 ) { $ c = $ c + $ a % 10 ; $ a = ( int ) ( $ a \/ 10 ) ; } return ( $ c == $ b ) ? true : false ; }"}
{"text":"function to find the largest root possible .","code":"function root ( $ n ) { $ found = false ; $ mx = 1000000000000000001 ;"}
{"text":"iterate for all possible sum of digits .","code":"for ( $ i = 0 ; $ i <= 90 ; $ i ++ ) {"}
{"text":"check if discriminent is a perfect square .","code":"$ s = $ i * $ i + 4 * $ n ; $ sq = ( int ) ( sqrt ( $ s ) ) ;"}
{"text":"check if discriminent is a perfect square and if it as perefect root of the equation","code":"if ( $ sq * $ sq == $ s && check ( ( int ) ( ( $ sq - $ i ) \/ 2 ) , $ i ) ) { $ found = true ; $ mx = min ( $ mx , ( int ) ( ( $ sq - $ i ) \/ 2 ) ) ; } }"}
{"text":"function returns answer","code":"if ( $ found ) return $ mx ; else return -1 ; }"}
{"text":"Driver Code","code":"$ n = 110 ; echo root ( $ n ) ; ? >"}
{"text":"Function to calculate sum","code":"< ? php function calculate ( $ n , $ power ) { $ sum = 0 ; $ bp = ( int ) pow ( $ n , $ power ) ; while ( $ bp != 0 ) { $ d = $ bp % 10 ; $ sum += $ d ; $ bp \/= 10 ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ power = 4 ; echo ( calculate ( $ n , $ power ) ) ; ? >"}
{"text":"Utility function","code":"< ? php function gcd ( $ num1 , $ num2 ) { while ( $ num2 != 0 ) { $ t = $ num1 % $ num2 ; $ num1 = $ num2 ; $ num2 = $ t ; } return $ num1 ; }"}
{"text":"function to check if pair is co - prime or not","code":"function coprime ( $ a , $ b ) { if ( gcd ( $ a , $ b ) == 1 ) return 1 ; else return 0 ; }"}
{"text":"function to find and print co - prime pair","code":"function pairSum ( $ n ) { $ mid = ( int ) ( ( $ n \/ 2 ) ) ; for ( $ i = $ mid ; $ i >= 1 ; $ i -- ) { if ( coprime ( $ i , $ n - $ i ) == 1 ) { echo $ i . \" \u2581 \" . ( $ n - $ i ) ; break ; } } }"}
{"text":"Driver code","code":"$ n = 11 ; pairSum ( $ n ) ; ? >"}
{"text":"Function to calculate the modulus","code":"< ? php function modBigNumber ( $ num , $ m ) {"}
{"text":"Store the modulus of big number","code":"$ vec ; $ x = 0 ; $ mod = 0 ;"}
{"text":"Do step by step division","code":"for ( $ i = 0 ; $ i < strlen ( $ num ) ; $ i ++ ) { $ digit = $ num [ $ i ] - '0' ;"}
{"text":"Update modulo by concatenating current digit .","code":"$ mod = $ mod * 10 + $ digit ;"}
{"text":"Update quotient","code":"$ quo = ( int ) ( $ mod \/ $ m ) ; $ vec [ $ x ++ ] = $ quo ;"}
{"text":"Update mod for next iteration .","code":"$ mod = $ mod % $ m ; } echo \" Remainder \u2581 : \u2581 \" . $ mod . \" STRNEWLINE \" ; echo \" Quotient \u2581 : \u2581 \" ;"}
{"text":"Flag used to remove starting zeros","code":"$ zeroflag = 0 ; for ( $ i = 0 ; $ i < $ x ; $ i ++ ) { if ( $ vec [ $ i ] == 0 && $ zeroflag == 0 ) continue ; $ zeroflag = 1 ; echo $ vec [ $ i ] ; } return ; }"}
{"text":"Driver Code","code":"$ num = \"14598499948265358486\" ; $ m = 487 ; modBigNumber ( $ num , $ m ) ; ? >"}
{"text":"Initialize global variable according to given condition so that it can be accessible to all function","code":"< ? php $ N = 1000001 ; $ fourDiv = array_fill ( 0 , $ N + 1 , false ) ;"}
{"text":"Function to calculate all number having four distinct factors","code":"function fourDistinctFactors ( ) { global $ N ; global $ fourDiv ;"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is not a prime , else true .","code":"$ primeAll = array_fill ( 0 , $ N + 1 , true ) ; for ( $ p = 2 ; $ p * $ p <= $ N ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ primeAll [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ N ; $ i += $ p ) $ primeAll [ $ i ] = false ; } }"}
{"text":"Initialize prime [ ] array which will contains all the primes from 1 - N","code":"$ prime ; $ x = 0 ; for ( $ p = 2 ; $ p <= $ N ; $ p ++ ) if ( $ primeAll [ $ p ] ) $ prime [ $ x ++ ] = $ p ;"}
{"text":"Iterate over all the prime numbers","code":"for ( $ i = 0 ; $ i < $ x ; ++ $ i ) { $ p = $ prime [ $ i ] ;"}
{"text":"Mark cube root of prime numbers","code":"if ( 1 * $ p * $ p * $ p <= $ N ) $ fourDiv [ $ p * $ p * $ p ] = true ; for ( $ j = $ i + 1 ; $ j < $ x ; ++ $ j ) { $ q = $ prime [ $ j ] ; if ( 1 * $ p * $ q > $ N ) break ;"}
{"text":"Mark product of prime numbers","code":"$ fourDiv [ $ p * $ q ] = true ; } } }"}
{"text":"Driver Code","code":"fourDistinctFactors ( ) ; $ num = 10 ; if ( $ fourDiv [ $ num ] ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; $ num = 12 ; if ( $ fourDiv [ $ num ] ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"A simple recursive program to find n - th leonardo number .","code":"< ? php function leonardo ( $ n ) { $ dp [ 0 ] = $ dp [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] = $ dp [ $ i - 1 ] + $ dp [ $ i - 2 ] + 1 ; return $ dp [ $ n ] ; }"}
{"text":"Driver code","code":"echo leonardo ( 3 ) ; ? >"}
{"text":"PHP program to decompose a matrix using Cholesky Decomposition","code":"< ? php $ MAX = 100 ; function Cholesky_Decomposition ( $ matrix , $ n ) { $ lower ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ lower [ $ i ] [ $ j ] = 0 ;"}
{"text":"Decomposing a matrix into Lower Triangular","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) { $ sum = 0 ;"}
{"text":"summation for diagonals","code":"if ( $ j == $ i ) { for ( $ k = 0 ; $ k < $ j ; $ k ++ ) $ sum += pow ( $ lower [ $ j ] [ $ k ] , 2 ) ; $ lower [ $ j ] [ $ j ] = sqrt ( $ matrix [ $ j ] [ $ j ] - $ sum ) ; } else {"}
{"text":"Evaluating L ( i , j ) using L ( j , j )","code":"for ( $ k = 0 ; $ k < $ j ; $ k ++ ) $ sum += ( $ lower [ $ i ] [ $ k ] * $ lower [ $ j ] [ $ k ] ) ; $ lower [ $ i ] [ $ j ] = ( $ matrix [ $ i ] [ $ j ] - $ sum ) \/ $ lower [ $ j ] [ $ j ] ; } } }"}
{"text":"Displaying Lower Triangular and its Transpose","code":"echo \" Lower \u2581 Triangular \" . str_pad ( \" Transpose \" , 30 , \" \u2581 \" , STR_PAD_BOTH ) . \" STRNEWLINE \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Lower Triangular","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) echo str_pad ( $ lower [ $ i ] [ $ j ] , 6 , \" \u2581 \" , STR_PAD_BOTH ) . \" TABSYMBOL \" ; echo \" TABSYMBOL \" ;"}
{"text":"Transpose of Lower Triangular","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) echo str_pad ( $ lower [ $ j ] [ $ i ] , 6 , \" \u2581 \" , STR_PAD_BOTH ) . \" TABSYMBOL \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ n = 3 ; $ matrix = array ( array ( 4 , 12 , -16 ) , array ( 12 , 37 , -43 ) , array ( -16 , -43 , 98 ) ) ; Cholesky_Decomposition ( $ matrix , $ n ) ; ? >"}
{"text":"Efficient PHP code to find sum of arithmetic series .","code":"< ? php function sumOfAP ( $ a , $ d , $ n ) { $ sum = ( $ n \/ 2 ) * ( 2 * $ a + ( $ n - 1 ) * $ d ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 20 ; $ a = 2.5 ; $ d = 1.5 ; echo ( sumOfAP ( $ a , $ d , $ n ) ) ; ? >"}
{"text":"Returns sum of first n natural numbers","code":"< ? php function sumOfSeries ( $ n ) { $ x ; if ( $ n % 2 == 0 ) $ x = ( $ n \/ 2 ) * ( $ n + 1 ) ; else $ x = ( ( $ n + 1 ) \/ 2 ) * $ n ; return $ x * $ x ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo sumOfSeries ( $ n ) ; ? >"}
{"text":"PHP program to find maximum value of | arr [ i ] - arr [ j ] | + | i - j |","code":"< ? php $ MAX = 10 ;"}
{"text":"Return maximum value of | arr [ i ] - arr [ j ] | + | i - j |","code":"function findValue ( $ arr , $ n ) { $ ans = 0 ;"}
{"text":"Iterating two for loop , one for i and another for j .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ )"}
{"text":"Evaluating | arr [ i ] - arr [ j ] | + | i - j | and compare with previous maximum .","code":"$ ans = max ( $ ans , abs ( $ arr [ $ i ] - $ arr [ $ j ] ) + abs ( $ i - $ j ) ) ; return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 1 ) ; $ n = count ( $ arr ) ; echo findValue ( $ arr , $ n ) ; ? >"}
{"text":"Return maximum | arr [ i ] - arr [ j ] | + | i - j |","code":"< ? php function findValue ( $ arr , $ n ) { $ a [ ] = array ( ) ; $ b = array ( ) ; $ tmp ;"}
{"text":"Calculating first_array and second_array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ i ] = ( $ arr [ $ i ] + $ i ) ; $ b [ $ i ] = ( $ arr [ $ i ] - $ i ) ; } $ x = $ a [ 0 ] ; $ y = $ a [ 0 ] ;"}
{"text":"Finding maximum and minimum value in first_array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] > $ x ) $ x = $ a [ $ i ] ; if ( $ a [ $ i ] < $ y ) $ y = $ a [ $ i ] ; }"}
{"text":"Storing the difference between maximum and minimum value in first_array","code":"$ ans1 = ( $ x - $ y ) ; $ x = $ b [ 0 ] ; $ y = $ b [ 0 ] ;"}
{"text":"Finding maximum and minimum value in second_array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ b [ $ i ] > $ x ) $ x = $ b [ $ i ] ; if ( $ b [ $ i ] < $ y ) $ y = $ b [ $ i ] ; }"}
{"text":"Storing the difference between maximum and minimum value in second_array","code":"$ ans2 = ( $ x - $ y ) ; return max ( $ ans1 , $ ans2 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 1 ) ; $ n = count ( $ arr ) ; echo findValue ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to count subarrays having product less than k .","code":"< ? php function countsubarray ( $ array , $ n , $ k ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Counter for single element","code":"if ( $ array [ $ i ] < $ k ) $ count ++ ; $ mul = $ array [ $ i ] ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Multiple subarray","code":"$ mul = $ mul * $ array [ $ j ] ;"}
{"text":"If this multiple is less than k , then increment","code":"if ( $ mul < $ k ) $ count ++ ; else break ; } } return $ count ; }"}
{"text":"Driver Code","code":"$ array = array ( 1 , 2 , 3 , 4 ) ; $ k = 10 ; $ size = sizeof ( $ array ) ; $ count = countsubarray ( $ array , $ size , $ k ) ; echo ( $ count . \" \" ) ; ? >"}
{"text":"PHP program to count number of factors of an array of integers","code":"< ? php $ MAX = 1000001 ; $ factor = array_fill ( 0 , $ MAX + 1 , 0 ) ;"}
{"text":"function to generate all prime factors of numbers from 1 to 10 ^ 6","code":"function generatePrimeFactors ( ) { global $ factor ; global $ MAX ; $ factor [ 1 ] = 1 ;"}
{"text":"Initializes all the positions with their value .","code":"for ( $ i = 2 ; $ i < $ MAX ; $ i ++ ) $ factor [ $ i ] = $ i ;"}
{"text":"Initializes all multiples of 2 with 2","code":"for ( $ i = 4 ; $ i < $ MAX ; $ i += 2 ) $ factor [ $ i ] = 2 ;"}
{"text":"A modified version of Sieve of Eratosthenes to store the smallest prime factor that divides every number .","code":"for ( $ i = 3 ; $ i * $ i < $ MAX ; $ i ++ ) {"}
{"text":"check if it has no prime factor .","code":"if ( $ factor [ $ i ] == $ i ) {"}
{"text":"Initializes of j starting from i * i","code":"for ( $ j = $ i * $ i ; $ j < $ MAX ; $ j += $ i ) {"}
{"text":"if it has no prime factor before , then stores the smallest prime divisor","code":"if ( $ factor [ $ j ] == $ j ) $ factor [ $ j ] = $ i ; } } } }"}
{"text":"function to calculate number of factors","code":"function calculateNoOFactors ( $ n ) { global $ factor ; if ( $ n == 1 ) return 1 ; $ ans = 1 ;"}
{"text":"stores the smallest prime number that divides n","code":"$ dup = $ factor [ $ n ] ;"}
{"text":"stores the count of number of times a prime number divides n .","code":"$ c = 1 ;"}
{"text":"reduces to the next number after prime factorization of n","code":"$ j = ( int ) ( $ n \/ $ factor [ $ n ] ) ;"}
{"text":"false when prime factorization is done","code":"while ( $ j != 1 ) {"}
{"text":"if the same prime number is dividing n , then we increase the count","code":"if ( $ factor [ $ j ] == $ dup ) $ c += 1 ;"}
{"text":"if its a new prime factor that is factorizing n , then we again set c = 1 and change dup to the new prime factor , and apply the formula explained above .","code":"else { $ dup = $ factor [ $ j ] ; $ ans = $ ans * ( $ c + 1 ) ; $ c = 1 ; }"}
{"text":"prime factorizes a number","code":"$ j = ( int ) ( $ j \/ $ factor [ $ j ] ) ; }"}
{"text":"for the last prime factor","code":"$ ans = $ ans * ( $ c + 1 ) ; return $ ans ; }"}
{"text":"generate prime factors of number upto 10 ^ 6","code":"generatePrimeFactors ( ) ; $ a = array ( 10 , 30 , 100 , 450 , 987 ) ; $ q = sizeof ( $ a ) ; for ( $ i = 0 ; $ i < $ q ; $ i ++ ) echo calculateNoOFactors ( $ a [ $ i ] ) . \" \u2581 \" ; ? >"}
{"text":"function to produce and print Digit Product Sequence","code":"< ? php function digit_product_Sum ( $ N ) {"}
{"text":"Array which store sequence","code":"$ a = array_fill ( 0 , $ N , 0 ) ;"}
{"text":"Temporary variable to store product","code":"$ product = 1 ;"}
{"text":"Initialize first element of the array with 1","code":"$ a [ 0 ] = 1 ;"}
{"text":"Run a loop from 1 to N . Check if previous number is single digit or not . If yes then product = 1 else take modulus . Then again check if previous number is single digit or not if yes then store previous number , else store its first value Then for every i store value in the array .","code":"for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { $ product = ( int ) ( $ a [ $ i - 1 ] \/ 10 ) ; if ( $ product == 0 ) $ product = 1 ; else $ product = $ a [ $ i - 1 ] % 10 ; $ val = ( int ) ( $ a [ $ i - 1 ] \/ 10 ) ; if ( $ val == 0 ) $ val = $ a [ $ i - 1 ] ; $ a [ $ i ] = $ a [ $ i - 1 ] + ( $ val * $ product ) ; }"}
{"text":"Print sequence","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) echo $ a [ $ i ] . \" \u2581 \" ; }"}
{"text":"Value of N","code":"$ N = 10 ;"}
{"text":"Calling function","code":"digit_product_Sum ( $ N ) ; ? >"}
{"text":"function to calculate geometric mean and return float value .","code":"< ? php function geometricMean ( $ arr , $ n ) {"}
{"text":"declare product variable and initialize it to 1.","code":"$ product = 1 ;"}
{"text":"Compute the product of all the elements in the array .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ product = $ product * $ arr [ $ i ] ;"}
{"text":"compute geometric mean through formula pow ( product , 1 \/ n ) and return the value to main function .","code":"$ gm = pow ( $ product , ( float ) ( 1 \/ $ n ) ) ; return $ gm ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ) ; $ n = sizeof ( $ arr ) ; echo ( geometricMean ( $ arr , $ n ) ) ; ? >"}
{"text":"function to check whether a number can be expressed as a product of single digit numbers","code":"< ? php function productOfSingelDgt ( $ n , $ SIZE ) {"}
{"text":"if ' n ' is a single digit number , then it can be expressed","code":"if ( $ n >= 0 && $ n <= 9 ) return true ;"}
{"text":"define single digit prime numbers array","code":"$ prime = array ( 2 , 3 , 5 , 7 ) ;"}
{"text":"repeatedly divide ' n ' by the given prime numbers until all the numbers are used or ' n ' > 1","code":"for ( $ i = 0 ; $ i < $ SIZE && $ n > 1 ; $ i ++ ) while ( $ n % $ prime [ $ i ] == 0 ) $ n = $ n \/ $ prime [ $ i ] ;"}
{"text":"if true , then ' n ' can be expressed","code":"return ( $ n == 1 ) ; }"}
{"text":"Driver Code","code":"$ SIZE = 4 ; $ n = 24 ; if ( productOfSingelDgt ( $ n , $ SIZE ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns sum of first n natural numbers","code":"< ? php function findSum ( $ n ) { if ( $ n % 2 == 0 ) return ( $ n \/ 2 ) * ( $ n + 1 ) ;"}
{"text":"If n is odd , ( n + 1 ) must be even","code":"else return ( ( $ n + 1 ) \/ 2 ) * $ n ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo findSum ( $ n ) ; ? >"}
{"text":"Return maximum number of prime factors for any number in [ 1 , N ]","code":"< ? php function maxPrimefactorNum ( $ N ) { if ( $ N < 2 ) return 0 ;"}
{"text":"Based on Sieve of Eratosthenes","code":"$ arr = array_fill ( 0 , ( $ N + 1 ) , true ) ; $ prod = 1 ; $ res = 0 ; for ( $ p = 2 ; $ p * $ p <= $ N ; $ p ++ ) {"}
{"text":"If p is prime","code":"if ( $ arr [ $ p ] == true ) { for ( $ i = $ p * 2 ; $ i <= $ N ; $ i += $ p ) $ arr [ $ i ] = false ;"}
{"text":"We simply multiply first set of prime numbers while the product is smaller than N .","code":"$ prod *= $ p ; if ( $ prod > $ N ) return $ res ; $ res ++ ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ N = 500 ; echo maxPrimefactorNum ( $ N ) . \" STRNEWLINE \" ; ? >"}
{"text":"change input number Change here to","code":"< ? php $ n = 8 ;"}
{"text":"change result .","code":"$ range = 12 ; for ( $ i = 1 ; $ i <= $ range ; ++ $ i ) echo $ n , \" \u2581 * \u2581 \" , $ i , \" \u2581 = \u2581 \" , $ n * $ i , \" STRNEWLINE \" ; ? >"}
{"text":"Function to check if given number is palindrome or not without using the extra space","code":"< ? php function isPalindrome ( $ n ) {"}
{"text":"Find the appropriate divisor to extract the leading digit","code":"$ divisor = 1 ; while ( $ n \/ $ divisor >= 10 ) $ divisor *= 10 ; while ( $ n != 0 ) { $ leading = floor ( $ n \/ $ divisor ) ; $ trailing = $ n % 10 ;"}
{"text":"If first and last digit not same return false","code":"if ( $ leading != $ trailing ) return false ;"}
{"text":"Removing the leading and trailing digit from number","code":"$ n = ( $ n % $ divisor ) \/ 10 ;"}
{"text":"Reducing divisor by a factor of 2 as 2 digits are dropped","code":"$ divisor = $ divisor \/ 100 ; } return true ; }"}
{"text":"Driver code","code":"if ( isPalindrome ( 1001 ) == true ) echo \" Yes , \u2581 it \u2581 is \u2581 Palindrome \" ; else echo \" No , \u2581 not \u2581 Palindrome \" ; ? >"}
{"text":"Returns true if n is power of 3 , else false","code":"< ? php function check ( $ n ) {"}
{"text":"The maximum power of 3 value that integer can hold is 1162261467 ( 3 ^ 19 ) .","code":"return 1162261467 % $ n == 0 ; }"}
{"text":"Driver code","code":"$ n = 9 ; if ( check ( $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"To return demlo number . This function assumes that the length of str is smaller than 10.","code":"< ? php function printDemlo ( $ str ) { $ len = strlen ( $ str ) ; $ res = \" \" ;"}
{"text":"Add numbers to res upto size of str and then add number reverse to it","code":"for ( $ i = 1 ; $ i <= $ len ; $ i ++ ) $ res . = chr ( $ i + 48 ) ; for ( $ i = $ len - 1 ; $ i >= 1 ; $ i -- ) $ res . = chr ( $ i + 48 ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ str = \"111111\" ; echo printDemlo ( $ str ) ; ? >"}
{"text":"PHP program to count number of times we need to add digits to get a single digit .","code":"< ? php function NumberofTimes ( $ str ) {"}
{"text":"Here the count variable store how many times we do sum of digits and temporary_sum always store the temporary sum we get at each iteration .","code":"$ temporary_sum = 0 ; $ count = 0 ;"}
{"text":"In this loop we always compute the sum of digits in temporary_ sum variable and convert it into string str till its length become 1 and increase the count in each iteration .","code":"while ( strlen ( $ str ) > 1 ) { $ temporary_sum = 0 ;"}
{"text":"computing sum of its digits","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) $ temporary_sum += ( $ str [ $ i ] - '0' ) ;"}
{"text":"converting temporary_sum into string str again .","code":"$ str = ( string ) ( $ temporary_sum ) ;"}
{"text":"increase the count","code":"$ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ s = \"991\" ; echo NumberofTimes ( $ s ) ; ? >"}
{"text":"function return the number of ways","code":"< ? php function calculateLeaps ( $ n ) { if ( $ n == 0 $ n == 1 ) { return 1 ; } else { $ leaps = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ leaps += calculateLeaps ( $ i ) ; return $ leaps ; } }"}
{"text":"Driver Code","code":"echo calculateLeaps ( 4 ) , \" STRNEWLINE \" ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"Initialize result","code":"$ res = 1 ;"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"function to calculate number of digits in x","code":"function numberOfDigits ( $ x ) { $ i = 0 ; while ( $ x ) { $ x = ( int ) $ x \/ 10 ; $ i ++ ; } return $ i ; }"}
{"text":"function to print last k digits of a ^ b","code":"function printLastKDigits ( $ a , $ b , $ k ) { echo \" Last \u2581 \" , $ k ; echo \" \u2581 digits \u2581 of \u2581 \" , $ a ; echo \" ^ \" , $ b , \" \u2581 = \u2581 \" ;"}
{"text":"Generating 10 ^ k","code":"$ temp = 1 ; for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) $ temp *= 10 ;"}
{"text":"Calling modular exponentiation","code":"$ temp = power ( $ a , $ b , $ temp ) ;"}
{"text":"Printing leftmost zeros . Since ( a ^ b ) % k can have digits less then k . In that case we need to print zeros","code":"for ( $ i = 0 ; $ i < $ k - numberOfDigits ( $ temp ) ; $ i ++ ) echo 0 ;"}
{"text":"If temp is not zero then print temp If temp is zero then already printed","code":"if ( $ temp ) echo $ temp ; }"}
{"text":"Driver Code","code":"$ a = 11 ; $ b = 3 ; $ k = 2 ; printLastKDigits ( $ a , $ b , $ k ) ; ? >"}
{"text":"To reverse Digits of numbers","code":"< ? php function reverseDigits ( $ num ) { $ rev = 0 ; while ( $ num > 0 ) { $ rev = $ rev * 10 + $ num % 10 ; $ num = ( int ) $ num \/ 10 ; } return $ rev ; }"}
{"text":"To square number","code":"function square ( $ num ) { return ( $ num * $ num ) ; }"}
{"text":"To check Adam Number","code":"function checkAdamNumber ( $ num ) {"}
{"text":"Square first number and square reverse digits of second number","code":"$ a = square ( $ num ) ; $ b = square ( reverseDigits ( $ num ) ) ;"}
{"text":"If reverse of b equals a then given number is Adam number","code":"if ( $ a == reverseDigits ( $ b ) ) return 0 ; return -1 ; }"}
{"text":"Driver Code","code":"$ num = 12 ; if ( checkAdamNumber ( $ num ) ) echo \" Adam \u2581 Number \" ; else echo \" Not \u2581 a \u2581 Adam \u2581 Number \" ; ? >"}
{"text":"Generating the look - up table while pre - processing","code":"< ? php #define P2 ( n )  n, n ^ 1, n ^ 1, n NEW_LINE #define P4 ( n )  P2(n), P2(n ^ 1),  NEW_LINE P2 ( n ^ 1 ) , P2 ( n ) #define P6 ( n )  P4(n), P4(n ^ 1),  NEW_LINE P4 ( n ^ 1 ) , P4 ( n ) #define LOOK_UP  P6(0), P6(1),  NEW_LINE P6 ( 1 ) , P6 ( 0 )"}
{"text":"LOOK_UP is the macro expansion to generate the table","code":"$ table = array ( LOOK_UP ) ;"}
{"text":"Function to find the parity","code":"function Parity ( $ num ) { global $ table ;"}
{"text":"Number is considered to be of 32 bits","code":"$ max = 16 ;"}
{"text":"Dividing the number into 8 - bit chunks while performing X - OR","code":"while ( $ max >= 8 ) { $ num = $ num ^ ( $ num >> $ max ) ; $ max = ( int ) $ max \/ 2 ; }"}
{"text":"Masking the number with 0xff ( 11111111 ) to produce valid 8 - bit result","code":"return $ table [ $ num & 0xff ] ; }"}
{"text":"Driver code","code":"$ num = 1742346774 ;"}
{"text":"Result is 1 for odd parity , 0 for even parity","code":"$ result = Parity ( $ num ) ;"}
{"text":"Printing the desired result","code":"if ( $ result == true ) echo \" Odd \u2581 Parity \" ; else echo \" Even \u2581 Parity \" ; ? >"}
{"text":"PHP program to count total number of digits we have to write from 1 to n","code":"< ? php function totalDigits ( $ n ) {"}
{"text":"number_of_digits store total digits we have to write","code":"$ number_of_digits = 0 ;"}
{"text":"In the loop we are decreasing 0 , 9 , 99 ... from n till ( n - i + 1 ) is greater than 0 and sum them to number_of_digits to get the required sum","code":"for ( $ i = 1 ; $ i <= $ n ; $ i *= 10 ) $ number_of_digits += ( $ n - $ i + 1 ) ; return $ number_of_digits ; }"}
{"text":"Driver Code","code":"$ n = 13 ; echo totalDigits ( $ n ) ; ? >"}
{"text":"Generates all primes upto n and prints their squares","code":"< ? php function numbersWith3Divisors ( $ n ) { $ prime = array_fill ( 0 , $ n + 1 , true ) ; $ prime [ 0 ] = $ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"print squares of primes upto n .","code":"echo \" Numbers \u2581 with \u2581 3 \u2581 divisors \u2581 : STRNEWLINE \" ; for ( $ i = 0 ; $ i * $ i <= $ n ; $ i ++ ) if ( $ prime [ $ i ] ) echo $ i * $ i . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 96 ; numbersWith3Divisors ( $ n ) ; ? >"}
{"text":"function to convert decimal to hexadecimal","code":"< ? php function decToHexa ( $ n ) {"}
{"text":"char array to store hexadecimal number","code":"$ hexaDeciNum ;"}
{"text":"counter for hexadecimal number array","code":"$ i = 0 ; while ( $ n != 0 ) {"}
{"text":"temporary variable to store remainder","code":"$ temp = 0 ;"}
{"text":"storing remainder in temp variable .","code":"$ temp = $ n % 16 ;"}
{"text":"check if temp < 10","code":"if ( $ temp < 10 ) { $ hexaDeciNum [ $ i ] = chr ( $ temp + 48 ) ; $ i ++ ; } else { $ hexaDeciNum [ $ i ] = chr ( $ temp + 55 ) ; $ i ++ ; } $ n = ( int ) ( $ n \/ 16 ) ; }"}
{"text":"printing hexadecimal number array in reverse order","code":"for ( $ j = $ i - 1 ; $ j >= 0 ; $ j -- ) echo $ hexaDeciNum [ $ j ] ; }"}
{"text":"Driver Code","code":"$ n = 2545 ; decToHexa ( $ n ) ; ? >"}
{"text":"function to convert decimal to binary","code":"< ? php function decToBinary ( $ n ) {"}
{"text":"array to store binary number","code":"$ binaryNum ;"}
{"text":"counter for binary array","code":"$ i = 0 ; while ( $ n > 0 ) {"}
{"text":"storing remainder in binary array","code":"$ binaryNum [ $ i ] = $ n % 2 ; $ n = ( int ) ( $ n \/ 2 ) ; $ i ++ ; }"}
{"text":"printing binary array in reverse order","code":"for ( $ j = $ i - 1 ; $ j >= 0 ; $ j -- ) echo $ binaryNum [ $ j ] ; }"}
{"text":"Driver Code","code":"$ n = 17 ; decToBinary ( $ n ) ; ? >"}
{"text":"Function to count number of ways to make the given number n","code":"< ? php function count_of_ways ( $ n ) { $ count ; $ count = ( $ n + 1 ) * ( $ n + 2 ) \/ 2 ; return $ count ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo count_of_ways ( $ n ) ; ? >"}
{"text":"Function to flip the sign using only \" + \" operator ( It is simple with ' * ' allowed . We need to do a = ( - 1 ) * a","code":"< ? php function flipSign ( $ a ) { $ neg = 0 ;"}
{"text":"If sign is + ve turn it - ve and vice - versa","code":"$ tmp = $ a < 0 ? 1 : -1 ; while ( $ a != 0 ) { $ neg += $ tmp ; $ a += $ tmp ; } return $ neg ; }"}
{"text":"Check if a and b are of different signs","code":"function areDifferentSign ( $ a , $ b ) { return ( ( $ a < 0 && $ b > 0 ) || ( $ a > 0 && $ b < 0 ) ) ; }"}
{"text":"Function to subtract two numbers by negating b and adding them","code":"function sub ( $ a , $ b ) {"}
{"text":"Negating b","code":"return $ a + flipSign ( $ b ) ; }"}
{"text":"Function to multiply a by b by adding a to itself b times","code":"function mul ( $ a , $ b ) {"}
{"text":"because algo is faster if b < a","code":"if ( $ a < $ b ) return mul ( $ b , $ a ) ;"}
{"text":"Adding a to itself b times","code":"$ sum = 0 ; for ( $ i = abs ( $ b ) ; $ i > 0 ; $ i -- ) $ sum += $ a ;"}
{"text":"Check if final sign must be - ve or + ve","code":"if ( $ b < 0 ) $ sum = flipSign ( $ sum ) ; return $ sum ; }"}
{"text":"Function to divide a by b by counting how many times ' b ' can be subtracted from ' a ' before getting 0","code":"function division ( $ a , $ b ) { $ quotient = 0 ;"}
{"text":"Negating b to subtract from a","code":"$ divisor = flipSign ( abs ( $ b ) ) ;"}
{"text":"Subtracting divisor from dividend","code":"for ( $ dividend = abs ( $ a ) ; $ dividend >= abs ( $ divisor ) ; $ dividend += $ divisor ) $ quotient ++ ;"}
{"text":"Check if a and b are of similar symbols or not","code":"if ( areDifferentSign ( $ a , $ b ) ) $ quotient = flipSign ( $ quotient ) ; return $ quotient ; }"}
{"text":"Driver code","code":"print ( \" Subtraction \u2581 is \u2581 \" . sub ( 4 , -2 ) . \" STRNEWLINE \" ) ; print ( \" Product \u2581 is \u2581 \" . mul ( -9 , 6 ) . \" STRNEWLINE \" ) ; list ( $ a , $ b ) = array ( 8 , 2 ) ; if ( $ b ) print ( \" Division \u2581 is \u2581 \" . division ( $ a , $ b ) ) ; else print ( \" Exception \u2581 : - \u2581 Divide \u2581 by \u2581 0\" ) ; ? >"}
{"text":"PHP Program to find groups of 2 or 3 whose sum is divisible by 3","code":"< ? php function numOfCombinations ( $ arr , $ N ) {"}
{"text":"Initialize groups to 0","code":"$ C = array ( 0 , 0 , 0 ) ;"}
{"text":"Increment group with specified remainder","code":"for ( $ i = 0 ; $ i < $ N ; ++ $ i ) ++ $ C [ $ arr [ $ i ] % 3 ] ;"}
{"text":"Return groups using the formula","code":"return $ C [ 1 ] * $ C [ 2 ] + $ C [ 0 ] * ( $ C [ 0 ] - 1 ) \/ 2 + $ C [ 0 ] * ( $ C [ 0 ] - 1 ) * ( $ C [ 0 ] - 2 ) \/ 6 + $ C [ 1 ] * ( $ C [ 1 ] - 1 ) * ( $ C [ 1 ] - 2 ) \/ 6 + $ C [ 2 ] * ( $ C [ 2 ] - 1 ) * ( $ C [ 2 ] - 2 ) \/ 6 + $ C [ 0 ] * $ C [ 1 ] * $ C [ 2 ] ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 5 , 7 , 2 , 9 , 14 ) ; echo numOfCombinations ( $ arr1 , 6 ) , \" STRNEWLINE \" ; $ arr2 = array ( 3 , 6 , 9 , 12 ) ; echo numOfCombinations ( $ arr2 , 4 ) , \" STRNEWLINE \" ; ? >"}
{"text":"Checking if a number is prime or not","code":"< ? php function isprime ( $ x ) {"}
{"text":"check for numbers from 2 to sqrt ( x ) if it is divisible return false","code":"for ( $ i = 2 ; $ i * $ i <= $ x ; $ i ++ ) if ( $ x % $ i == 0 ) return false ; return true ; }"}
{"text":"Returns true if N can be written as sum of K primes","code":"function isSumOfKprimes ( $ N , $ K ) {"}
{"text":"N < 2 K directly return false","code":"if ( $ N < 2 * $ K ) return false ;"}
{"text":"If K = 1 return value depends on primality of N","code":"if ( $ K == 1 ) return isprime ( $ N ) ; if ( $ K == 2 ) {"}
{"text":"if N is even directly return true ;","code":"if ( $ N % 2 == 0 ) return true ;"}
{"text":"If N is odd , then one prime must be 2. All other primes are odd and cannot have a pair sum as even .","code":"return isprime ( $ N - 2 ) ; }"}
{"text":"If K >= 3 return true ;","code":"return true ; }"}
{"text":"Driver Code","code":"$ n = 10 ; $ k = 2 ; if ( isSumOfKprimes ( $ n , $ k ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Utility function to find GCD of two numbers","code":"< ? php function gcd ( $ a , $ b ) { return ( $ a % $ b ) ? gcd ( $ b , $ a % $ b ) : $ b ; }"}
{"text":"Utility function to find LCM of two numbers","code":"function FindLCM ( $ a , $ b ) { return ( $ a * $ b ) \/ gcd ( $ a , $ b ) ; }"}
{"text":"Function to calculate all divisors in given range","code":"function rangeDivisor ( $ m , $ n , $ a , $ b ) {"}
{"text":"Find LCM of a and b","code":"$ lcm = FindLCM ( $ a , $ b ) ; $ a_divisor = $ n \/ $ a - ( $ m - 1 ) \/ $ a ; $ b_divisor = $ n \/ $ b - ( $ m - 1 ) \/ $ b ;"}
{"text":"Find common divisor by using LCM","code":"$ common_divisor = $ n \/ $ lcm - ( $ m - 1 ) \/ $ lcm ; $ ans = $ a_divisor + $ b_divisor - $ common_divisor ; return $ ans ; }"}
{"text":"Driver Code","code":"$ m = 3 ; $ n = 11 ; $ a = 2 ; $ b = 3 ; print ( ceil ( rangeDivisor ( $ m , $ n , $ a , $ b ) ) ) ; echo \" STRNEWLINE \" ; $ m = 11 ; $ n = 1000000 ; $ a = 6 ; $ b = 35 ; print ( ceil ( rangeDivisor ( $ m , $ n , $ a , $ b ) ) ) ; ? >"}
{"text":"Function to print unique digit numbers in range from l to r .","code":"< ? php function printUnique ( $ l , $ r ) {"}
{"text":"Start traversing the numbers","code":"for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) { $ num = $ i ; $ visited = ( false ) ;"}
{"text":"Find digits and maintain its hash","code":"while ( $ num ) {"}
{"text":"if a digit occurs more than 1 time then break","code":"if ( $ visited [ $ num % 10 ] ) $ visited [ $ num % 10 ] = true ; $ num = ( int ) $ num \/ 10 ; }"}
{"text":"num will be 0 only when above loop doesn 't get break that  means the number is unique  so print it.","code":"if ( $ num == 0 ) echo $ i , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ l = 1 ; $ r = 20 ; printUnique ( $ l , $ r ) ; ? >"}
{"text":"Returns position of first Fibonacci number whose modulo p is 0.","code":"< ? php function findMinZero ( $ p ) { $ first = 1 ; $ second = 1 ; $ number = 2 ; $ next = 1 ; while ( $ next ) {"}
{"text":"add previous two remainders and then take its modulo p .","code":"$ next = ( $ first + $ second ) % $ p ; $ first = $ second ; $ second = $ next ; $ number ++ ; } return $ number ; }"}
{"text":"Driver code","code":"$ p = 7 ; echo \" Minimal \u2581 zero \u2581 is : \u2581 \" , findMinZero ( $ p ) , \" STRNEWLINE \" ; ? >"}
{"text":"A Simple Method to count cubes between a and b","code":"< ? php function printCubes ( $ a , $ b ) {"}
{"text":"Traverse through all numbers in given range and one by one check if number is prime","code":"for ( $ i = $ a ; $ i <= $ b ; $ i ++ ) {"}
{"text":"Check if current number ' i ' is perfect cube","code":"for ( $ j = 1 ; $ j * $ j * $ j <= $ i ; $ j ++ ) { if ( $ j * $ j * $ j == $ i ) { echo $ j * $ j * $ j , \" \" ; break ; } } } }"}
{"text":"Driver Code","code":"$ a = 1 ; $ b = 100 ; echo \" Perfect \u2581 cubes \u2581 in \u2581 given \u2581 range : STRNEWLINE \u2581 \" ; printCubes ( $ a , $ b ) ; ? >"}
{"text":"Function to convert Binary real number to String","code":"< ? php function toBinary ( $ n ) {"}
{"text":"Check if the number is Between 0 to 1 or Not","code":"if ( $ n >= 1 $ n <= 0 ) return \" ERROR \" ; $ frac = 0.5 ; $ answer = \" . \" ; while ( $ n > 0 ) {"}
{"text":"Setting a limit on length : 32 characters .","code":"if ( strlen ( $ answer ) >= 32 ) return \" ERROR \" ;"}
{"text":"compare the number to .5","code":"if ( $ n >= $ frac ) { $ answer . = \"1\" ; $ n = $ n - $ frac ; } else { $ answer . = \"0\" ; }"}
{"text":"Now it become 0.25","code":"$ frac = ( $ frac \/ 2 ) ; } return $ answer ; }"}
{"text":"Input value","code":"$ n = 0.625 ; $ result = toBinary ( $ n ) ; print ( \" ( 0\" . $ result . \" ) \u2581 in \u2581 base \u2581 2 STRNEWLINE \" ) ; $ m = 0.72 ; $ result = toBinary ( $ m ) ; print ( \" ( \" . $ result . \" ) \" ) ; ? >"}
{"text":"function that manually calculates n ^ n and then removes digits until k digits remain","code":"< ? php function firstkdigits ( $ n , $ k ) { $ product = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ product *= $ n ;"}
{"text":"loop will terminate when there are only k digits left","code":"while ( ( int ) ( $ product \/ pow ( 10 , $ k ) ) != 0 ) $ product = ( int ) $ product \/ 10 ; return floor ( $ product ) ; }"}
{"text":"Driver Code","code":"$ n = 15 ; $ k = 4 ; echo firstkdigits ( $ n , $ k ) ; ? >"}
{"text":"Function to find that number divisible by 9 or not","code":"< ? php function check ( $ str ) {"}
{"text":"Compute sum of digits","code":"$ n = strlen ( $ str ) ; $ digitSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ digitSum += ( $ str [ $ i ] - '0' ) ;"}
{"text":"Check if sum of digits is divisible by 9.","code":"return ( $ digitSum % 9 == 0 ) ; }"}
{"text":"Driver code","code":"$ str = \"99333\" ; $ x = check ( $ str ) ? \" Yes \" : \" No \u2581 \" ; echo ( $ x ) ; ? >"}
{"text":"Returns XOR of all subarray xors","code":"< ? php function getTotalXorOfSubarrayXors ( $ arr , $ N ) {"}
{"text":"initialize result by 0 as ( a xor 0 = a )","code":"$ res = 0 ;"}
{"text":"select the starting element","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ )"}
{"text":"select the eNding element","code":"for ( $ j = $ i ; $ j < $ N ; $ j ++ )"}
{"text":"Do XOR of elements in current subarray","code":"for ( $ k = $ i ; $ k <= $ j ; $ k ++ ) $ res = $ res ^ $ arr [ $ k ] ; return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 5 , 2 , 4 , 6 ) ; $ N = sizeof ( $ arr ) ; echo getTotalXorOfSubarrayXors ( $ arr , $ N ) ; ? >"}
{"text":"Returns XOR of all subarray xors","code":"< ? php function getTotalXorOfSubarrayXors ( $ arr , $ N ) {"}
{"text":"initialize result by 0 as ( a XOR 0 = a )","code":"$ res = 0 ;"}
{"text":"loop over all elements once","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"get the frequency of current element","code":"$ freq = ( $ i + 1 ) * ( $ N - $ i ) ;"}
{"text":"if frequency is odd , then include it in the result","code":"if ( $ freq % 2 == 1 ) $ res = $ res ^ $ arr [ $ i ] ; }"}
{"text":"return the result","code":"return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 5 , 2 , 4 , 6 ) ; $ N = count ( $ arr ) ; echo getTotalXorOfSubarrayXors ( $ arr , $ N ) ; ? >"}
{"text":"Function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to find gcd of array of numbers","code":"function findGCD ( $ arr , $ n ) { $ result = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ result = gcd ( $ arr [ $ i ] , $ result ) ; if ( $ result == 1 ) { return 1 ; } } return $ result ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 4 , 6 , 8 , 16 ) ; $ n = sizeof ( $ arr ) ; echo ( findGCD ( $ arr , $ n ) ) ; ? >"}
{"text":"Function to calculate sum of all divisors","code":"< ? php function divSum ( $ num ) {"}
{"text":"Final result of summation of divisors","code":"$ result = 0 ;"}
{"text":"find all divisors which divides ' num '","code":"for ( $ i = 1 ; $ i * $ i <= $ num ; ++ $ i ) {"}
{"text":"if ' i ' is divisor of ' num '","code":"if ( $ num % $ i == 0 ) {"}
{"text":"if both divisors are same then add it only once else add both","code":"if ( $ i == ( $ num \/ $ i ) ) $ result += $ i ; else $ result += ( $ i + $ num \/ $ i ) ; } } return $ result ; }"}
{"text":"Returns true if n is Super Perfect else false .","code":"function isSuperPerfect ( $ n ) {"}
{"text":"Find the sum of all divisors of number n","code":"$ n1 = divSum ( $ n ) ;"}
{"text":"Again find the sum of all divisors of n1 and check if sum is equal to n1","code":"return ( 2 * $ n == divSum ( $ n1 ) ) ; }"}
{"text":"Driver code","code":"$ n = 16 ; $ hh = ( isSuperPerfect ( $ n ) ? \" Yes STRNEWLINE \" : \" No STRNEWLINE \" ) ; echo ( $ hh ) ; $ n = 6 ; $ hh = ( isSuperPerfect ( $ n ) ? \" Yes STRNEWLINE \" : \" No STRNEWLINE \" ) ; echo ( $ hh ) ; ? >"}
{"text":"Function to count all divisors","code":"< ? php function isRefactorableNumber ( $ n ) {"}
{"text":"Initialize result","code":"$ divCount = 0 ; for ( $ i = 1 ; $ i <= sqrt ( $ n ) ; ++ $ i ) { if ( $ n % $ i == 0 ) {"}
{"text":"If divisors are equal , count only one .","code":"if ( $ n \/ $ i == $ i ) ++ $ divCount ;"}
{"text":"Otherwise count both","code":"else $ divCount += 2 ; } } return $ n % $ divCount == 0 ; }"}
{"text":"Driver Code","code":"$ n = 8 ; if ( isRefactorableNumber ( $ n ) ) echo \" yes \" ; else echo \" no \" ; echo \" STRNEWLINE \" ; $ n = 14 ; if ( isRefactorableNumber ( $ n ) ) echo \" yes \" ; else echo \" no \" ; ? >"}
{"text":"function to check perfect square number","code":"< ? php function isPerfectSquare ( $ n ) { $ sq = sqrt ( $ n ) ; return ( $ n == $ sq * $ sq ) ; }"}
{"text":"Returns count all perfect divisors of n","code":"function countPerfectDivisors ( $ n ) {"}
{"text":"Initialize result","code":"$ count = 0 ;"}
{"text":"Consider every number that can be a divisor of n","code":"for ( $ i = 1 ; $ i * $ i <= $ n ; ++ $ i ) {"}
{"text":"If i is a divisor","code":"if ( $ n % $ i == 0 ) { if ( isPerfectSquare ( $ i ) ) ++ $ count ; if ( $ n \/ $ i != $ i && isPerfectSquare ( $ n \/ $ i ) ) ++ $ count ; } } return $ count ; }"}
{"text":"Driver Code","code":"$ n = 16 ; echo \" Total \u2581 perfect \u2581 divisors \u2581 of \u2581 \" , $ n , \" \u2581 = \u2581 \" , countPerfectDivisors ( $ n ) , \" STRNEWLINE \" ; $ n = 12 ; echo \" Total \u2581 perfect \u2581 divisors \u2581 of \u2581 \" , $ n , \" \u2581 = \u2581 \" , countPerfectDivisors ( $ n ) ; ? >"}
{"text":"PHP program to print nearest element with at least one common prime factor .","code":"< ? php function nearestGcd ( $ arr , $ n ) {"}
{"text":"Loop covers the every element of arr [ ]","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ closest = -1 ;"}
{"text":"Loop that covers from 0 to i - 1 and i + 1 to n - 1 indexes simultaneously","code":"for ( $ j = $ i - 1 , $ k = $ i + 1 ; $ j > 0 $ k <= $ n ; -- $ j , ++ $ k ) { if ( $ j >= 0 && __gcd ( $ arr [ $ i ] , $ arr [ $ j ] ) > 1 ) { $ closest = $ j + 1 ; break ; } if ( $ k < $ n && __gcd ( $ arr [ $ i ] , $ arr [ $ k ] ) > 1 ) { $ closest = $ k + 1 ; break ; } }"}
{"text":"print position of closest element","code":"echo $ closest . \" \" ; } }"}
{"text":"Recursive function to return gcd of a and b","code":"function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 9 , 4 , 3 , 13 ) ; $ n = sizeof ( $ arr ) ; nearestGcd ( $ arr , $ n ) ; ? >"}
{"text":"Efficient PHP program to find length of the largest subsequence with GCD greater than 1.","code":"< ? php $ MAX = 10001 ;"}
{"text":"prime [ ] for storing smallest prime divisor of element count [ ] for storing the number of times a particular divisor occurs in a subsequence","code":"$ prime = array_fill ( 0 , $ MAX , 0 ) ; $ countdiv = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Simple sieve to find smallest prime factors of numbers smaller than MAX","code":"function SieveOfEratosthenes ( ) { global $ MAX , $ prime ; for ( $ i = 2 ; $ i * $ i <= $ MAX ; ++ $ i ) { if ( $ prime [ $ i ] == 0 ) for ( $ j = $ i * 2 ; $ j <= $ MAX ; $ j += $ i ) $ prime [ $ j ] = $ i ; }"}
{"text":"Prime number will have same divisor","code":"for ( $ i = 1 ; $ i < $ MAX ; ++ $ i ) if ( $ prime [ $ i ] == 0 ) $ prime [ $ i ] = $ i ; }"}
{"text":"Returns length of the largest subsequence with GCD more than 1.","code":"function largestGCDSubsequence ( $ arr , $ n ) { global $ countdiv , $ prime ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ element = $ arr [ $ i ] ;"}
{"text":"Fetch total unique prime divisor of element","code":"while ( $ element > 1 ) { $ div = $ prime [ $ element ] ;"}
{"text":"Increment count [ ] of Every unique divisor we get till now","code":"++ $ countdiv [ $ div ] ;"}
{"text":"Find maximum frequency of divisor","code":"$ ans = max ( $ ans , $ countdiv [ $ div ] ) ; while ( $ element % $ div == 0 ) $ element = ( int ) ( $ element \/ $ div ) ; } } return $ ans ; }"}
{"text":"Pre - compute smallest divisor of all numbers","code":"SieveOfEratosthenes ( ) ; $ arr = array ( 10 , 15 , 7 , 25 , 9 , 35 ) ; $ size = count ( $ arr ) ; echo largestGCDSubsequence ( $ arr , $ size ) ; ? >"}
{"text":"method returns count of binary digit numbers smaller than N","code":"< ? php function countOfBinaryNumberLessThanN ( $ N ) {"}
{"text":"queue to store all intermediate binary digit numbers","code":"$ q = array ( ) ;"}
{"text":"binary digits start with 1","code":"array_push ( $ q , 1 ) ; $ cnt = 0 ; $ t = 0 ;"}
{"text":"loop until we have element in queue","code":"while ( ! empty ( $ q ) ) { $ t = array_pop ( $ q ) ;"}
{"text":"push next binary digit numbers only if current popped element is N","code":"if ( $ t <= $ N ) { $ cnt ++ ;"}
{"text":"uncomment below line to print actual number in sorted order cout << t << \" \u2581 \" ;","code":"array_push ( $ q , $ t * 10 ) ; array_push ( $ q , ( $ t * 10 + 1 ) ) ; } } return $ cnt ; }"}
{"text":"Driver Code","code":"$ N = 200 ; echo countOfBinaryNumberLessThanN ( $ N ) ; ? >"}
{"text":"Return the sum of product x * y .","code":"< ? php function sumofproduct ( $ n ) { $ ans = 0 ;"}
{"text":"Iterating x from 1 to n","code":"for ( $ x = 1 ; $ x <= $ n ; $ x ++ ) {"}
{"text":"Finding y = n \/ x .","code":"$ y = ( int ) ( $ n \/ $ x ) ;"}
{"text":"Adding product of x and y to answer .","code":"$ ans += ( $ y * $ x ) ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo sumofproduct ( $ n ) ; ? >"}
{"text":"Optimized PHP program for n 'th perrin number","code":"< ? php function per ( $ n ) { $ a = 3 ; $ b = 0 ; $ c = 2 ; $ i ; $ m ; if ( $ n == 0 ) return $ a ; if ( $ n == 1 ) return $ b ; if ( $ n == 2 ) return $ c ; while ( $ n > 2 ) { $ m = $ a + $ b ; $ a = $ b ; $ b = $ c ; $ c = $ m ; $ n -- ; } return $ m ; }"}
{"text":"Driver code","code":"$ n = 9 ; echo per ( $ n ) ; ? >"}
{"text":"function for calculating factorial","code":"< ? php function fact ( $ n ) { $ num = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ num = $ num * $ i ; return $ num ; }"}
{"text":"function for check Special_Factorial_Number","code":"function Special_Factorial_Number ( $ k ) { for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) {"}
{"text":"call fact function and the Modulo with k and check if condition is TRUE then return i","code":"if ( ( fact ( $ i ) % $ k ) == 0 ) { return $ i ; } } }"}
{"text":"taking input","code":"$ k = 16 ; echo Special_Factorial_Number ( $ k ) ; ? >"}
{"text":"Returns maximum number of chocolates we can eat with given money , price of chocolate and number of wrapprices required to get a chocolate .","code":"< ? php function countMaxChoco ( $ money , $ price , $ wrap ) {"}
{"text":"Corner case","code":"if ( $ money < $ price ) return 0 ;"}
{"text":"First find number of chocolates that can be purchased with the given amount","code":"$ choc = $ money \/ $ price ;"}
{"text":"Now just add number of chocolates with the chocolates gained by wrapprices","code":"$ choc = $ choc + ( $ choc - 1 ) \/ ( $ wrap - 1 ) ; return $ choc ; }"}
{"text":"total money","code":"$ money = 15 ;"}
{"text":"cost of each candy","code":"$ price = 1 ;"}
{"text":"no of wrappers needs to be","code":"$ wrap = 3 ;"}
{"text":"exchanged for one chocolate .","code":"echo countMaxChoco ( $ money , $ price , $ wrap ) ; ? >"}
{"text":"Returns GCD of i and j","code":"< ? php function gcd ( $ i , $ j ) { if ( $ i == $ j ) return $ i ; if ( $ i > $ j ) return gcd ( $ i - $ j , $ j ) ; return gcd ( $ i , $ j - $ i ) ; }"}
{"text":"Returns true if it is possible to go to ( a , b ) from ( x , y )","code":"function ispossible ( $ x , $ y , $ a , $ b ) {"}
{"text":"Find absolute values of all as sign doesn 't  matter.","code":"$ x = abs ( $ x ) ; $ y = abs ( $ y ) ; $ a = abs ( $ a ) ; $ b = abs ( $ b ) ;"}
{"text":"If gcd is equal then it is possible to reach . Else not possible .","code":"return ( gcd ( $ x , $ y ) == gcd ( $ a , $ b ) ) ; }"}
{"text":"Driver Code","code":"{"}
{"text":"Converting coordinate into positive integer","code":"$ x = 35 ; $ y = 15 ; $ a = 20 ; $ b = 25 ; if ( ispossible ( $ x , $ y , $ a , $ b ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; return 0 ; } ? >"}
{"text":"PHP Program to find Equidigital Numbers till n","code":"< ? php $ MAX = 10000 ;"}
{"text":"Array to store all prime less than and equal to MAX .","code":"$ primes = array ( ) ;"}
{"text":"Utility function for sieve of sundaram","code":"function sieveSundaram ( ) { global $ primes , $ MAX ;"}
{"text":"In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than MAX , we reduce MAX to half This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j","code":"$ marked = array_fill ( 0 , ( $ MAX \/ 2 + 1 ) , false ) ;"}
{"text":"Main logic of Sundaram . Mark all numbers which do not generate prime number by doing 2 * i + 1","code":"for ( $ i = 1 ; $ i <= ( ( int ) sqrt ( $ MAX ) - 1 ) \/ 2 ; $ i ++ ) for ( $ j = ( $ i * ( $ i + 1 ) ) << 1 ; $ j <= ( int ) ( $ MAX \/ 2 ) ; $ j = $ j + 2 * $ i + 1 ) $ marked [ $ j ] = true ;"}
{"text":"Since 2 is a prime number","code":"array_push ( $ primes , 2 ) ;"}
{"text":"Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .","code":"for ( $ i = 1 ; $ i <= ( int ) ( $ MAX \/ 2 ) ; $ i ++ ) if ( $ marked [ $ i ] == false ) array_push ( $ primes , 2 * $ i + 1 ) ; }"}
{"text":"Returns true if n is a Equidigital number , else false .","code":"function isEquidigital ( $ n ) { global $ primes , $ MAX ; if ( $ n == 1 ) return true ;"}
{"text":"Count digits in original number","code":"$ original_no = $ n ; $ sumDigits = 0 ; while ( $ original_no > 0 ) { $ sumDigits ++ ; $ original_no = ( int ) ( $ original_no \/ 10 ) ; }"}
{"text":"Count all digits in prime factors of n pDigit is going to hold this value .","code":"$ pDigit = 0 ; $ count_exp = 0 ; $ p = 0 ; for ( $ i = 0 ; $ primes [ $ i ] <= ( int ) ( $ n \/ 2 ) ; $ i ++ ) {"}
{"text":"Count powers of p in n","code":"while ( $ n % $ primes [ $ i ] == 0 ) {"}
{"text":"If primes [ i ] is a prime factor ,","code":"$ p = $ primes [ $ i ] ; $ n = ( int ) ( $ n \/ $ p ) ;"}
{"text":"Count the power of prime factors","code":"$ count_exp ++ ; }"}
{"text":"Add its digits to pDigit .","code":"while ( $ p > 0 ) { $ pDigit ++ ; $ p = ( int ) ( $ p \/ 10 ) ; }"}
{"text":"Add digits of power of prime factors to pDigit .","code":"while ( $ count_exp > 1 ) { $ pDigit ++ ; $ count_exp = ( int ) ( $ count_exp \/ 10 ) ; } }"}
{"text":"If n != 1 then one prime factor still to be summed up ;","code":"if ( $ n != 1 ) { while ( $ n > 0 ) { $ pDigit ++ ; $ n = ( int ) ( $ n \/ 10 ) ; } }"}
{"text":"If digits in prime factors and digits in original number are same , then return true . Else return false .","code":"return ( $ pDigit == $ sumDigits ) ; }"}
{"text":"Finding all prime numbers before limit . These numbers are used to find prime factors .","code":"sieveSundaram ( ) ; echo \" Printing \u2581 first \u2581 few \u2581 Equidigital \u2581 Numbers \u2581 using \u2581 isEquidigital ( ) STRNEWLINE \" ; for ( $ i = 1 ; $ i < 20 ; $ i ++ ) if ( isEquidigital ( $ i ) ) echo $ i . \" \" ; ? >"}
{"text":"Returns maximum sum of numbers with LCM as N","code":"< ? php function maxSumLCM ( $ n ) { $ max_sum = 0 ;"}
{"text":"Finding a divisor of n and adding it to max_sum","code":"for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) {"}
{"text":"if ' i ' is divisor of ' N '","code":"if ( $ n % $ i == 0 ) {"}
{"text":"if both divisors are same then add it only once else add both","code":"$ max_sum += $ i ; if ( $ n \/ $ i != $ i ) $ max_sum += ( $ n \/ $ i ) ; } } return $ max_sum ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo MaxSumLCM ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function returns the lcm of first n numbers","code":"< ? php function lcm ( $ n ) { $ ans = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ ans = ( $ ans * $ i ) \/ ( gmp_gcd ( strval ( ans ) , strval ( i ) ) ) ; return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 20 ; echo lcm ( $ n ) ; ? >"}
{"text":"A sample function whose definite integral 's approximate value is computed using Trapezoidal rule","code":"< ? php function y ( $ x ) {"}
{"text":"Declaring the function f ( x ) = 1 \/ ( 1 + x * x )","code":"return 1 \/ ( 1 + $ x * $ x ) ; }"}
{"text":"Function to evaluate the value of integral","code":"function trapezoidal ( $ a , $ b , $ n ) {"}
{"text":"Grid spacing","code":"$ h = ( $ b - $ a ) \/ $ n ;"}
{"text":"Computing sum of first and last terms in above formula","code":"$ s = y ( $ a ) + y ( $ b ) ;"}
{"text":"Adding middle terms in above formula","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ s += 2 * Y ( $ a + $ i * $ h ) ;"}
{"text":"h \/ 2 indicates ( b - a ) \/ 2 n . Multiplying h \/ 2 with s .","code":"return ( $ h \/ 2 ) * $ s ; }"}
{"text":"Range of definite integral","code":"$ x0 = 0 ; $ xn = 1 ;"}
{"text":"Number of grids . Higher value means more accuracy","code":"$ n = 6 ; echo ( \" Value \u2581 of \u2581 integral \u2581 is \u2581 \" ) ; echo ( trapezoidal ( $ x0 , $ xn , $ n ) ) ; ? >"}
{"text":"This function returns the number of digits in nth Fibonacci number after ceiling it Formula used ( n * log ( phi ) - ( log 5 ) \/ 2 )","code":"< ? php function numberOfDigits ( $ n ) { if ( $ n == 1 ) return 1 ;"}
{"text":"using phi = 1.6180339887498948","code":"$ d = ( $ n * log10 ( 1.6180339887498948 ) ) - ( ( log10 ( 5 ) ) \/ 2 ) ; return ceil ( $ d ) ; }"}
{"text":"Driver Code","code":"$ i ; for ( $ i = 1 ; $ i <= 10 ; $ i ++ ) echo \" Number \u2581 of \u2581 Digits \u2581 in \u2581 F ( $ i ) \u2581 - \u2581 \" , numberOfDigits ( $ i ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to count odd squares","code":"< ? php function countOddSquares ( $ n , $ m ) { return pow ( $ m , 0.5 ) - pow ( $ n - 1 , 0.5 ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ m = 100 ; echo \" Count \u2581 is \u2581 \" , countOddSquares ( $ n , $ m ) ; ? >"}
{"text":"Returns 1 if y is a power of x","code":"< ? php function isPower ( $ x , $ y ) {"}
{"text":"The only power of 1 is 1 itself","code":"if ( $ x == 1 ) return ( $ y == 1 ? 1 : 0 ) ;"}
{"text":"Repeatedly comput power of x","code":"$ pow = 1 ; while ( $ pow < $ y ) $ pow *= $ x ;"}
{"text":"Check if power of x becomes y","code":"return ( $ pow == $ y ? 1 : 0 ) ; }"}
{"text":"check the result for true \/ false and print .","code":"echo isPower ( 10 , 1 ) . \" STRNEWLINE \" ; echo isPower ( 1 , 20 ) . \" STRNEWLINE \" ; echo isPower ( 2 , 128 ) . \" STRNEWLINE \" ; echo isPower ( 2 , 30 ) . \" STRNEWLINE \" ; ? >"}
{"text":"Method to count square between a and b","code":"< ? php function countSquares ( $ a , $ b ) { return ( floor ( sqrt ( $ b ) ) - ceil ( sqrt ( $ a ) ) + 1 ) ; }"}
{"text":"Driver code","code":"{ $ a = 9 ; $ b = 25 ; echo \" Count \u2581 of \u2581 squares \u2581 is \u2581 \" , countSquares ( $ a , $ b ) ; return 0 ; } ? >"}
{"text":"function to calculate the count of natural numbers upto a given number of digits that contain atleast one zero","code":"< ? php function findCountUpto ( $ d ) {"}
{"text":"Sum of two GP series","code":"$ GP1_Sum = 9 * ( ( pow ( 10 , $ d ) - 1 ) \/ 9 ) ; $ GP2_Sum = 9 * ( ( pow ( 9 , $ d ) - 1 ) \/ 8 ) ; return $ GP1_Sum - $ GP2_Sum ; }"}
{"text":"Driver Code","code":"$ d = 1 ; echo findCountUpto ( $ d ) , \" STRNEWLINE \" ; $ d = 2 ; echo findCountUpto ( $ d ) , \" STRNEWLINE \" ; $ d = 4 ; echo findCountUpto ( $ d ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to count the divisors","code":"< ? php function countDivisors ( $ n ) {"}
{"text":"Initialize count of divisors","code":"$ count = 0 ;"}
{"text":"Note that this loop runs till square root","code":"for ( $ i = 1 ; $ i <= sqrt ( $ n ) + 1 ; $ i ++ ) { if ( $ n % $ i == 0 )"}
{"text":"If divisors are equal increment count by one Otherwise increment count by 2","code":"$ count += ( $ n \/ $ i == $ i ) ? 1 : 2 ; } if ( $ count % 2 == 0 ) echo \" Even STRNEWLINE \" ; else echo \" Odd STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"echo \" The \u2581 count \u2581 of \u2581 divisor : \u2581 \" ; countDivisors ( 10 ) ; ? >"}
{"text":"Returns largest power of p that divides n !","code":"< ? php function largestPower ( $ n , $ p ) {"}
{"text":"Initialize result","code":"$ x = 0 ;"}
{"text":"Calculate x = n \/ p + n \/ ( p ^ 2 ) + n \/ ( p ^ 3 ) + ... .","code":"while ( $ n ) { $ n = ( int ) ( $ n \/ $ p ) ; $ x += $ n ; } return $ x ; }"}
{"text":"Utility function to do modular exponentiation . It returns ( x ^ y ) % p","code":"function power ( $ x , $ y , $ p ) {"}
{"text":"$res = 1 ; Initialize result $x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Returns n ! % p","code":"function modFact ( $ n , $ p ) { if ( $ n >= $ p ) return 0 ; $ res = 1 ;"}
{"text":"Use Sieve of Eratosthenes to find all primes smaller than n","code":"$ isPrime = array_fill ( 0 , $ n + 1 , true ) ; for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ isPrime [ $ i ] ) { for ( $ j = 2 * $ i ; $ j <= $ n ; $ j += $ i ) $ isPrime [ $ j ] = 0 ; } }"}
{"text":"Consider all primes found by Sieve","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { if ( $ isPrime [ $ i ] ) {"}
{"text":"Find the largest power of prime ' i ' that divides n","code":"$ k = largestPower ( $ n , $ i ) ;"}
{"text":"Multiply result with ( i ^ k ) % p","code":"$ res = ( $ res * power ( $ i , $ k , $ p ) ) % $ p ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ n = 25 ; $ p = 29 ; echo modFact ( $ n , $ p ) ; ? >"}
{"text":"Returns count of all squares in a rectangle of size m x n","code":"< ? php function countSquares ( $ m , $ n ) {"}
{"text":"If n is smaller , swap m and n","code":"if ( $ n < $ m ) list ( $ m , $ n ) = array ( $ n , $ m ) ;"}
{"text":"Now n is greater dimension , apply formula","code":"return $ m * ( $ m + 1 ) * ( 2 * $ m + 1 ) \/ 6 + ( $ n - $ m ) * $ m * ( $ m + 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ m = 4 ; $ n = 3 ; echo ( \" Count \u2581 of \u2581 squares \u2581 is \u2581 \" . countSquares ( $ m , $ n ) ) ; ? >"}
{"text":"Returns value of x + y without using +","code":"< ? php function add ( $ x , $ y ) {"}
{"text":"If y is positive , y times add 1 to x","code":"while ( $ y > 0 && $ y -- ) $ x ++ ;"}
{"text":"If y is negative , y times subtract 1 from x","code":"while ( $ y < 0 && $ y ++ ) $ x -- ; return $ x ; }"}
{"text":"Driver Code","code":"echo add ( 43 , 23 ) , \" STRNEWLINE \" ; echo add ( 43 , -23 ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to count factorial","code":"< ? php function countFact ( $ low , $ high ) {"}
{"text":"Find the first factorial number ' fact ' greater than or equal to ' low '","code":"$ fact = 1 ; $ x = 1 ; while ( $ fact < $ low ) { $ fact = $ fact * $ x ; $ x ++ ; }"}
{"text":"Count factorial numbers in range [ low , high ]","code":"$ res = 0 ; while ( $ fact <= $ high ) { $ res ++ ; $ fact = $ fact * $ x ; $ x ++ ; }"}
{"text":"Return the count","code":"return $ res ; }"}
{"text":"Driver Code","code":"echo \" Count \u2581 is \u2581 \" , countFact ( 2 , 720 ) ; ? >"}
{"text":"Function to find length of period in 1 \/ n","code":"< ? php function getPeriod ( $ n ) {"}
{"text":"Find the ( n + 1 ) th remainder after decimal point in value of 1 \/ n","code":"$ rem = 1 ; for ( $ i = 1 ; $ i <= $ n + 1 ; $ i ++ ) $ rem = ( 10 * $ rem ) % $ n ;"}
{"text":"Store ( n + 1 ) th remainder","code":"$ d = $ rem ;"}
{"text":"Count the number of remainders before next occurrence of ( n + 1 ) ' th \u2581 \u2581 remainder \u2581 ' d '","code":"$ count = 0 ; do { $ rem = ( 10 * $ rem ) % $ n ; $ count ++ ; } while ( $ rem != $ d ) ; return $ count ; }"}
{"text":"Driver Code","code":"echo getPeriod ( 3 ) , \" STRNEWLINE \" ; echo getPeriod ( 7 ) , \" STRNEWLINE \" ; ? >"}
{"text":"This function returns remainder of num \/ divisor without using % ( modulo ) operator","code":"< ? php function getRemainder ( $ num , $ divisor ) { $ t = ( $ num - $ divisor * ( int ) ( $ num \/ $ divisor ) ) ; return $ t ; }"}
{"text":"Driver Code","code":"echo getRemainder ( 100 , 7 ) ; ? >"}
{"text":"An Efficient Function to return value of 1 \/ 1 ! + 1 \/ 2 ! + . . + 1 \/ n !","code":"< ? php function sum ( $ n ) { $ sum = 0 ; $ fact = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Update factorial","code":"$ fact *= $ i ;"}
{"text":"Update series sum","code":"$ sum += 1.0 \/ $ fact ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo sum ( $ n ) ; ? >"}
{"text":"Function to print first k digits after dot in value of 1 \/ n . n is assumed to be a positive integer .","code":"< ? php function println ( $ n , $ k ) {"}
{"text":"Initialize remainder","code":"$ rem = 1 ;"}
{"text":"Run a loop k times to print k digits","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) {"}
{"text":"The next digit can always be obtained as doing ( 10 * rem ) \/ 10","code":"echo floor ( ( 10 * $ rem ) \/ $ n ) ;"}
{"text":"Update remainder","code":"$ rem = ( 10 * $ rem ) % $ n ; } }"}
{"text":"Driver Code","code":"$ n = 7 ; $ k = 3 ; println ( $ n , $ k ) ; echo \" STRNEWLINE \" ; $ n = 21 ; $ k = 4 ; println ( $ n , $ k ) ; ? >"}
{"text":"Function to return sum of 1 \/ 1 + 1 \/ 2 + 1 \/ 3 + . . + 1 \/ n","code":"< ? php function sum ( $ n ) { $ i ; $ s = 0.0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ s = $ s + 1 \/ $ i ; return $ s ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( \" Sum \u2581 is \u2581 \" ) ; echo ( sum ( $ n ) ) ; ? >"}
{"text":"Recursive function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Driver code","code":"$ a = 98 ; $ b = 56 ; echo \" GCD \u2581 of \u2581 $ a \u2581 and \u2581 $ b \u2581 is \u2581 \" , gcd ( $ a , $ b ) ; ? >"}
{"text":"The function to rearrange an array in - place so that arr [ i ] becomes arr [ arr [ i ] ] .","code":"< ? php function rearrange ( & $ arr , $ n ) {"}
{"text":"First step : Increase all values by ( arr [ arr [ i ] ] % n ) * n","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] += ( $ arr [ $ arr [ $ i ] ] % $ n ) * $ n ;"}
{"text":"Second Step : Divide all values by n","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = intval ( $ arr [ $ i ] \/ $ n ) ; }"}
{"text":"A utility function to print an array of size n","code":"function printArr ( & $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 2 , 0 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" Given \u2581 array \u2581 is \u2581 STRNEWLINE \" ; printArr ( $ arr , $ n ) ; rearrange ( $ arr , $ n ) ; echo \" Modified \u2581 array \u2581 is \u2581 STRNEWLINE \" ; printArr ( $ arr , $ n ) ; ? >"}
{"text":"A utility function that prints a given arr [ ] of length size","code":"< ? php function printArray ( $ arr , $ size ) { for ( $ i = 0 ; $ i < $ size ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; return ; }"}
{"text":"The core function that recursively generates and prints all sequences of length k","code":"function printSequencesRecur ( $ arr , $ n , $ k , $ index ) { if ( $ k == 0 ) { printArray ( $ arr , $ index ) ; } if ( $ k > 0 ) { for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) { $ arr [ $ index ] = $ i ; printSequencesRecur ( $ arr , $ n , $ k - 1 , $ index + 1 ) ; } } }"}
{"text":"A function that uses printSequencesRecur ( ) to prints all sequences from 1 , 1 , . .1 to n , n , . . n","code":"function printSequences ( $ n , $ k ) { $ arr = array ( ) ; printSequencesRecur ( $ arr , $ n , $ k , 0 ) ; return ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ k = 2 ; printSequences ( $ n , $ k ) ; ? >"}
{"text":"assumes that n is a positive integer","code":"< ? php function isMultipleof5 ( $ n ) { while ( $ n > 0 ) $ n = $ n - 5 ; if ( $ n == 0 ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ n = 19 ; if ( isMultipleof5 ( $ n ) == true ) echo ( \" $ n \u2581 is \u2581 multiple \u2581 of \u2581 5\" ) ; else echo ( \" $ n \u2581 is \u2581 not \u2581 a \u2581 multiple \u2581 of \u2581 5\" ) ; ? >"}
{"text":"Function to find the count of required pairs","code":"< ? php function CalculatePairs ( $ a , $ n ) {"}
{"text":"To store the count of elements which give remainder 0 i . e . even values","code":"$ cnt_zero = 0 ;"}
{"text":"To store the count of elements which give remainder 1 i . e . odd values","code":"$ cnt_one = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] % 2 == 0 ) $ cnt_zero += 1 ; else $ cnt_one += 1 ; } $ total_XOR_pairs = $ cnt_zero * $ cnt_one ; $ total_AND_pairs = ( $ cnt_one ) * ( $ cnt_one - 1 ) \/ 2 ; $ total_OR_pairs = $ cnt_zero * $ cnt_one + ( $ cnt_one ) * ( $ cnt_one - 1 ) \/ 2 ; echo ( \" cntXOR \u2581 = \u2581 $ total _ XOR _ pairs STRNEWLINE \" ) ; echo ( \" cntAND \u2581 = \u2581 $ total _ AND _ pairs STRNEWLINE \" ) ; echo ( \" cntOR \u2581 = \u2581 $ total _ OR _ pairs STRNEWLINE \" ) ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 3 , 4 , 2 ) ; $ n = count ( $ a ) ; CalculatePairs ( $ a , $ n ) ; ? >"}
{"text":"Function to alternate the values","code":"< ? php function alternate ( & $ a , & $ b , & $ x ) { $ x = $ a + $ b - $ x ; }"}
{"text":"Driver Code","code":"$ a = -10 ; $ b = 15 ; $ x = $ a ; echo \" x \u2581 is \u2581 : \u2581 \" , $ x ; alternate ( $ a , $ b , $ x ) ; echo \" After change \" ; echo \" x is : \" ? >"}
{"text":"PHP program to find highest power of 2 that divides n .","code":"< ? php function highestPowerOf2 ( $ n ) { return ( $ n & ( ~ ( $ n - 1 ) ) ) ; }"}
{"text":"Driver Code","code":"$ n = 48 ; echo highestPowerOf2 ( $ n ) ; ? >"}
{"text":"Function to check whether bitwise AND of a number with any subset of an array is zero or not","code":"< ? php function isSubsetAndZero ( $ array , $ length , $ N ) {"}
{"text":"variable to store the AND of all the elements","code":"$ arrAnd = $ array [ 0 ] ;"}
{"text":"find the AND of all the elements of the array","code":"for ( $ i = 1 ; $ i < $ length ; $ i ++ ) { $ arrAnd = $ arrAnd & $ array [ $ i ] ; }"}
{"text":"if the AND of all the array elements and N is equal to zero","code":"if ( ( $ arrAnd & $ N ) == 0 ) echo ( \" YES \" ) ; else echo ( \" NO \" ) ; }"}
{"text":"Driver Code","code":"$ array = array ( 1 , 2 , 4 ) ; $ length = count ( $ array ) ; $ N = 3 ; isSubsetAndZero ( $ array , $ length , $ N ) ; ? >"}
{"text":"Function to find the parity","code":"< ? php function findParity ( $ x ) { $ y = $ x ^ ( $ x >> 1 ) ; $ y = $ y ^ ( $ y >> 2 ) ; $ y = $ y ^ ( $ y >> 4 ) ; $ y = $ y ^ ( $ y >> 8 ) ; $ y = $ y ^ ( $ y >> 16 ) ;"}
{"text":"Rightmost bit of y holds the parity value if ( y & 1 ) is 1 then parity is odd else even","code":"if ( $ y & 1 ) return 1 ; return 0 ; }"}
{"text":"Driver code","code":"( findParity ( 9 ) == 0 ) ? print ( \" Even \u2581 Parity STRNEWLINE \" ) : print ( \" Odd \u2581 Parity STRNEWLINE \" ) ; ( findParity ( 13 ) == 0 ) ? print ( \" Even \u2581 Parity STRNEWLINE \" ) : print ( \" Odd \u2581 Parity STRNEWLINE \" ) ; ? >"}
{"text":"function to check whether all the bits are set in the given range or not","code":"< ? php function allBitsSetInTheGivenRange ( $ n , $ l , $ r ) {"}
{"text":"calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits","code":"$ num = ( ( 1 << $ r ) - 1 ) ^ ( ( 1 << ( $ l - 1 ) ) - 1 ) ;"}
{"text":"new number which will only have one or more set bits in the range l to r and nowhere else","code":"$ new_num = ( $ n & $ num ) ;"}
{"text":"if both are equal , then all bits are set in the given range","code":"if ( $ num == $ new_num ) return true ;"}
{"text":"else all bits are not set","code":"return false ; }"}
{"text":"function to check whether all the bits in the given range of two numbers are complement of each other","code":"function bitsAreComplement ( $ a , $ b , $ l , $ r ) { $ xor_value = $ a ^ $ b ; return allBitsSetInTheGivenRange ( $ xor_value , $ l , $ r ) ; }"}
{"text":"Driver Code","code":"$ a = 10 ; $ b = 5 ; $ l = 1 ; $ r = 3 ; if ( bitsAreComplement ( $ a , $ b , $ l , $ r ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to calculate sum of series","code":"< ? php function calculateSum ( $ n ) {"}
{"text":"initialize sum as 0","code":"$ sum = 0 ;"}
{"text":"loop to calculate sum of series","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"calculate 2 ^ i and add it to sum","code":"$ sum = $ sum + ( 1 << $ i ) ; } return $ sum ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo \" Sum \u2581 of \u2581 the \u2581 series \u2581 of \u2581 \" . \" power \u2581 2 \u2581 is \u2581 : \u2581 \" , calculateSum ( $ n ) ; ? >"}
{"text":"Function to print all the combinations","code":"< ? php function printCombinations ( $ a , $ n , $ m ) {"}
{"text":"Iterate for all combinations","code":"for ( $ i = 0 ; $ i < ( 1 << $ n ) ; $ i ++ ) { $ sum = 0 ;"}
{"text":"Initially 100 in binary if n is 3 as 1 << ( 3 - 1 ) = 100 in binary","code":"$ num = 1 << ( $ n - 1 ) ;"}
{"text":"Iterate in the array and assign signs to the array elements","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"If the j - th bit from left is set take ' + ' sign","code":"if ( $ i & $ num ) $ sum += $ a [ $ j ] ; else $ sum += ( -1 * $ a [ $ j ] ) ;"}
{"text":"Right shift to check if jth bit is set or not","code":"$ num = $ num >> 1 ; } if ( $ sum % $ m == 0 ) {"}
{"text":"re - initialize","code":"$ num = 1 << ( $ n - 1 ) ;"}
{"text":"Iterate in the array elements","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"If the jth from left is set","code":"if ( ( $ i & $ num ) ) echo \" + \" \u2581 , \u2581 $ a [ $ j ] \u2581 , \u2581 \" \" ; STRNEWLINE else STRNEWLINE echo \u2581 \" - \" \u2581 , \u2581 $ a [ $ j ] \u2581 , \u2581 \" \""}
{"text":"right shift","code":"$ num = $ num >> 1 ; } echo \" STRNEWLINE \" ; } } }"}
{"text":"Driver Code","code":"$ a = array ( 3 , 5 , 6 , 8 ) ; $ n = sizeof ( $ a ) ; $ m = 5 ; printCombinations ( $ a , $ n , $ m ) ; ? >"}
{"text":"returns number of set bits in a number","code":"< ? php function __builtin_popcount ( $ n ) { $ t = 0 ; while ( $ n > 0 ) { $ d = $ n % 2 ; $ n = intval ( $ n \/ 2 ) ; if ( $ d == 1 ) $ t ++ ; } return $ t ; }"}
{"text":"function","code":"function smallerNumsWithSameSetBits ( $ n ) {"}
{"text":"__builtin_popcount function that count set bits in n","code":"$ temp = __builtin_popcount ( $ n ) ;"}
{"text":"Iterate from n - 1 to 1","code":"$ count = 0 ; for ( $ i = $ n - 1 ; $ i > 0 ; $ i -- ) {"}
{"text":"check if the number of set bits equals to temp increment count","code":"if ( $ temp == __builtin_popcount ( $ i ) ) $ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo ( smallerNumsWithSameSetBits ( $ n ) ) ; ? >"}
{"text":"function the return multiply a number with 4 using bitwise operator","code":"< ? php function multiplyWith4 ( $ n ) {"}
{"text":"returning a number with multiply with 4 using2 bit shifting right","code":"return ( $ n << 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo multiplyWith4 ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Sets even bits of n and returns modified number .","code":"< ? php function evenbitsetnumber ( $ n ) {"}
{"text":"Generate 101010. . .10 number and store in res .","code":"$ count = 0 ; $ res = 0 ; for ( $ temp = $ n ; $ temp > 0 ; $ temp >>= 1 ) {"}
{"text":"if bit is even then generate number and or with res","code":"if ( $ count % 2 == 1 ) $ res |= ( 1 << $ count ) ; $ count ++ ; }"}
{"text":"return OR number","code":"return ( $ n $ res ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo evenbitsetnumber ( $ n ) ; ? >"}
{"text":"return msb set number","code":"< ? php function getmsb ( $ n ) {"}
{"text":"set all bits","code":"$ n |= $ n >> 1 ; $ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ;"}
{"text":"return msb increment n by 1 and shift by 1","code":"return ( $ n + 1 ) >> 1 ; }"}
{"text":"return even seted number","code":"function getevenbits ( $ n ) {"}
{"text":"get msb here","code":"$ n = getmsb ( $ n ) ;"}
{"text":"generate even bits like 101010. .","code":"$ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ;"}
{"text":"if bits is odd then shift by 1","code":"if ( $ n & 1 ) $ n = $ n >> 1 ;"}
{"text":"return even set bits number","code":"return $ n ; }"}
{"text":"set all even bits here","code":"function setallevenbits ( $ n ) {"}
{"text":"take or with even set bits number","code":"return $ n | getevenbits ( $ n ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo setallevenbits ( $ n ) ; ? >"}
{"text":"set all odd bit","code":"< ? php function oddbitsetnumber ( $ n ) { $ count = 0 ;"}
{"text":"res for store 010101. . number","code":"$ res = 0 ;"}
{"text":"generate number form of 010101. . . till temp size","code":"for ( $ temp = $ n ; $ temp > 0 ; $ temp >>= 1 ) {"}
{"text":"if bit is odd , then generate number and or with res","code":"if ( $ count % 2 == 0 ) $ res |= ( 1 << $ count ) ; $ count ++ ; } return ( $ n $ res ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo oddbitsetnumber ( $ n ) ; ? >"}
{"text":"return MSB set number","code":"< ? php function getmsb ( $ n ) {"}
{"text":"set all bits including MSB .","code":"$ n |= $ n >> 1 ; $ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ;"}
{"text":"return MSB","code":"return ( $ n + 1 ) >> 1 ; }"}
{"text":"Returns a number of same size ( MSB atsame position ) as n and all odd bits set","code":"function getevenbits ( $ n ) { $ n = getmsb ( $ n ) ;"}
{"text":"generate odd bits like 010101. .","code":"$ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ;"}
{"text":"if bits is even then shift by 1","code":"if ( ( $ n & 1 ) == 0 ) $ n = $ n >> 1 ;"}
{"text":"return odd set bits number","code":"return $ n ; }"}
{"text":"set all odd bits here","code":"function setalloddbits ( $ n ) {"}
{"text":"take OR with odd set bits number","code":"return $ n | getevenbits ( $ n ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo setalloddbits ( $ n ) ; ? >"}
{"text":"function to print numbers in the range 1 to n having bits in alternate pattern","code":"< ? php function printNumHavingAltBitPatrn ( $ n ) {"}
{"text":"first number having bits in alternate pattern","code":"$ curr_num = 1 ;"}
{"text":"display","code":"echo $ curr_num . \" \" ;"}
{"text":"loop until n < curr_num","code":"while ( 1 ) {"}
{"text":"generate next number having alternate bit pattern","code":"$ curr_num <<= 1 ;"}
{"text":"if true then break","code":"if ( $ n < $ curr_num ) break ;"}
{"text":"display","code":"echo $ curr_num . \" \" ;"}
{"text":"generate next number having alternate bit pattern","code":"$ curr_num = ( ( $ curr_num ) << 1 ) ^ 1 ;"}
{"text":"if true then break","code":"if ( $ n < $ curr_num ) break ;"}
{"text":"display","code":"echo $ curr_num . \" \" ; } }"}
{"text":"Driver code","code":"$ n = 50 ; printNumHavingAltBitPatrn ( $ n ) ; ? >"}
{"text":"Function to find smallest perfect power of 2 greater than n","code":"< ? php function perfectPowerOf2 ( $ n ) {"}
{"text":"To store perfect power of 2","code":"$ per_pow = 1 ; while ( $ n > 0 ) {"}
{"text":"bitwise left shift by 1","code":"$ per_pow = $ per_pow << 1 ;"}
{"text":"bitwise right shift by 1","code":"$ n = $ n >> 1 ; }"}
{"text":"Required perfect power of 2","code":"return $ per_pow ; }"}
{"text":"Driver code","code":"$ n = 128 ; echo \" Perfect \u2581 power \u2581 of \u2581 2 \u2581 greater \u2581 than \u2581 \" . $ n . \" : \u2581 \" . perfectPowerOf2 ( $ n ) ; ? >"}
{"text":"PHP program to find a unique pair in an array of pairs .","code":"< ? php function findUniquePair ( $ arr , $ n ) {"}
{"text":"XOR each element and get XOR of two unique elements ( ans )","code":"$ XOR = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ XOR = $ XOR ^ $ arr [ $ i ] ;"}
{"text":"Get a set bit of XOR ( We get the rightmost set bit )","code":"$ set_bit_no = $ XOR & ~ ( $ XOR - 1 ) ;"}
{"text":"Now divide elements in two sets by comparing rightmost set bit of XOR with bit at same position in each element . Initialize missing numbers","code":"$ x = 0 ; $ y = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] & $ set_bit_no )"}
{"text":"XOR of first set in arr [ ]","code":"$ x = $ x ^ $ arr [ $ i ] ; else"}
{"text":"XOR of second set in arr [ ]","code":"$ y = $ y ^ $ arr [ $ i ] ; } echo \" The \u2581 unique \u2581 pair \u2581 is \u2581 \" , \" ( \" , $ x , \" \u2581 \" , $ y , \" ) \" ; }"}
{"text":"Driver code","code":"$ a = array ( 6 , 1 , 3 , 5 , 1 , 3 , 7 , 6 ) ; $ n = count ( $ a ) ; findUniquePair ( $ a , $ n ) ; ? >"}
{"text":"An optimized PHP program to count unset bits in an integer .","code":"< ? php function countUnsetBits ( $ n ) { $ x = $ n ;"}
{"text":"This makes sure two bits ( From MSB and including MSB ) are set","code":"$ n |= $ n >> 1 ;"}
{"text":"This makes sure 4 bits ( From MSB and including MSB ) are set","code":"$ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ; $ t = log ( $ x ^ $ n , 2 ) ;"}
{"text":"Count set bits in toggled number","code":"return floor ( $ t ) ; }"}
{"text":"Driver code","code":"$ n = 17 ; echo countUnsetBits ( $ n ) ; ? >"}
{"text":"Function to get no of bits in binary representation of positive integer","code":"< ? php function countBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ count ++ ; $ n >>= 1 ; } return $ count ; }"}
{"text":"Driver Code","code":"$ i = 65 ; echo ( countBits ( $ i ) ) ; ? >"}
{"text":"Function to toggle bits starting from MSB","code":"< ? php function toggle ( & $ n ) {"}
{"text":"temporary variable to use XOR with one of a n","code":"$ temp = 1 ;"}
{"text":"Run loop until the only set bit in temp crosses MST of n .","code":"while ( $ temp <= $ n ) {"}
{"text":"Toggle bit of n corresponding to current set bit in temp .","code":"$ n = $ n ^ $ temp ;"}
{"text":"Move set bit to next higher position .","code":"$ temp = $ temp << 1 ; } }"}
{"text":"Driver code","code":"$ n = 10 ; toggle ( $ n ) ; echo $ n ; ? >"}
{"text":"Finds if the kth bit is set in the binary representation","code":"< ? php function isKthBitSet ( $ x , $ k ) { return ( $ x & ( 1 << ( $ k - 1 ) ) ) ? 1 : 0 ; }"}
{"text":"Returns the position of leftmost set bit in the binary representation","code":"function leftmostSetBit ( $ x ) { $ count = 0 ; while ( $ x ) { $ count ++ ; $ x = $ x >> 1 ; } return $ count ; }"}
{"text":"Finds whether the integer in binary representation is palindrome or not","code":"function isBinPalindrome ( $ x ) { $ l = leftmostSetBit ( $ x ) ; $ r = 1 ;"}
{"text":"One by one compare bits","code":"while ( $ l > $ r ) {"}
{"text":"Compare left and right bits and converge","code":"if ( isKthBitSet ( $ x , $ l ) != isKthBitSet ( $ x , $ r ) ) return 0 ; $ l -- ; $ r ++ ; } return 1 ; } function findNthPalindrome ( $ n ) { $ pal_count = 0 ;"}
{"text":"Start from 1 , traverse through all the integers","code":"$ i = 0 ; for ( $ i = 1 ; $ i <= PHP_INT_MAX ; $ i ++ ) { if ( isBinPalindrome ( $ i ) ) { $ pal_count ++ ; }"}
{"text":"If we reach n , break the loop","code":"if ( $ pal_count == $ n ) break ; } return $ i ; }"}
{"text":"Driver code","code":"$ n = 9 ;"}
{"text":"Function Call","code":"echo ( findNthPalindrome ( $ n ) ) ; ? >"}
{"text":"Function returns 1 if set , 0 if not","code":"< ? php function LSB ( $ num , $ K ) { return ( $ num & ( 1 << ( $ K - 1 ) ) ) ; }"}
{"text":"Driver code","code":"$ num = 10 ; $ K = 4 ;"}
{"text":"Function call","code":"$ r = LSB ( $ num , $ K ) ; if ( $ r ) echo '1' ; else echo '0' ; ? >"}
{"text":"Finds if a and b are same","code":"< ? php function areSame ( $ a , $ b ) { if ( ! ( $ a - $ b ) ) echo \" Same \" ; else echo \" Not \u2581 Same \" ; }"}
{"text":"Driver code","code":"areSame ( 10 , 20 ) ; ? >"}
{"text":"function to toggle bits in the given range","code":"< ? php function toggleBitsFromLToR ( $ n , $ l , $ r ) {"}
{"text":"calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits","code":"$ num = ( ( 1 << $ r ) - 1 ) ^ ( ( 1 << ( $ l - 1 ) ) - 1 ) ;"}
{"text":"toggle bits in the range l to r in ' n ' Besides this , we can calculate num as : $num = ( 1 << $r ) - $l . and return the number","code":"return ( $ n ^ $ num ) ; }"}
{"text":"Driver Code","code":"$ n = 50 ; $ l = 2 ; $ r = 5 ; echo toggleBitsFromLToR ( $ n , $ l , $ r ) ; ? >"}
{"text":"Function to find the position of rightmost set bit in ' n '","code":"< ? php function getRightMostSetBit ( $ n ) {"}
{"text":"to handle edge case when n = 0.","code":"if ( $ n == 0 ) return 0 ; return log ( $ n & - $ n , ( 2 ) ) + 1 ; }"}
{"text":"Function to find the position of rightmost different bit in the binary representations of ' m ' and ' n '","code":"function posOfRightMostDiffBit ( $ m , $ n ) {"}
{"text":"position of rightmost different bit","code":"return getRightMostSetBit ( $ m ^ $ n ) ; }"}
{"text":"Driver Code","code":"$ m = 52 ; $ n = 4 ; echo posOfRightMostDiffBit ( $ m , $ n ) ; ? >"}
{"text":"Main Function to find next smallest number bigger than n","code":"< ? php function getNext ( $ n ) {"}
{"text":"Compute c0 and c1","code":"$ c = $ n ; $ c0 = 0 ; $ c1 = 0 ; while ( ( ( $ c & 1 ) == 0 ) && ( $ c != 0 ) ) { $ c0 ++ ; $ c >>= 1 ; } while ( ( $ c & 1 ) == 1 ) { $ c1 ++ ; $ c >>= 1 ; }"}
{"text":"If there is no bigger number with the same no . of 1 's","code":"if ( $ c0 + $ c1 == 31 $ c0 + $ c1 == 0 ) return -1 ; return $ n + ( 1 << $ c0 ) + ( 1 << ( $ c1 - 1 ) ) - 1 ; }"}
{"text":"input 1","code":"$ n = 5 ; echo getNext ( $ n ) ;"}
{"text":"input 2","code":"$ n = 8 ; echo \" STRNEWLINE \" ; echo getNext ( $ n ) ; ? >"}
{"text":"PHP code to count the Minimum bits in A and B","code":"< ? php function totalFlips ( $ A , $ B , $ C , $ N ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ N ; ++ $ i ) {"}
{"text":"If both A [ i ] and B [ i ] are equal","code":"if ( $ A [ $ i ] == $ B [ $ i ] && $ C [ $ i ] == '1' ) ++ $ count ;"}
{"text":"If Both A and B are unequal","code":"else if ( $ A [ $ i ] != $ B [ $ i ] && $ C [ $ i ] == ' 0 ' ) ++ $ count ; } return $ count ; }"}
{"text":"N represent total count of Bits","code":"$ N = 5 ; $ a = \"10100\" ; $ b = \"00010\" ; $ c = \"10011\" ; echo totalFlips ( $ a , $ b , $ c , $ N ) ; ? >"}
{"text":"Assign c ' s \u2581 value \u2581 to \u2581 a , \u2581 a ' s value to b and b 's value to c.","code":"< ? php function swapThree ( & $ a , & $ b , & $ c ) {"}
{"text":"Store XOR of all in a","code":"$ a = $ a ^ $ b ^ $ c ;"}
{"text":"After this , b has value of a","code":"$ b = $ a ^ $ b ^ $ c ;"}
{"text":"After this , c has value of b","code":"$ c = $ a ^ $ b ^ $ c ;"}
{"text":"After this , a has value of c","code":"$ a = $ a ^ $ b ^ $ c ; }"}
{"text":"Driver code","code":"$ a = 10 ; $ b = 20 ; $ c = 30 ; echo \" Before \u2581 swapping \u2581 a \u2581 = \u2581 \" , $ a , \" , \u2581 b \u2581 = \u2581 \" , $ b , \" , \u2581 c \u2581 = \u2581 \" , $ c , \" STRNEWLINE \" ;"}
{"text":"Calling Function","code":"swapThree ( $ a , $ b , $ c ) ; echo \" After \u2581 swapping \u2581 a \u2581 = \u2581 \" , $ a , \" , \u2581 b \u2581 = \u2581 \" , $ b , \" , \u2581 c \u2581 = \u2581 \" , $ c , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find two missing numbers in range [ 1 , n ] . This function assumes that size of array is n - 2 and all array elements are distinct","code":"< ? php function findTwoMissingNumbers ( $ arr , $ n ) {"}
{"text":"Get the XOR of all elements in arr [ ] and { 1 , 2 . . n }","code":"$ XOR = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n - 2 ; $ i ++ ) $ XOR ^= $ arr [ $ i ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ XOR ^= $ i ;"}
{"text":"Get a set bit of XOR ( We get the rightmost set bit )","code":"$ set_bit_no = $ XOR & ~ ( $ XOR - 1 ) ;"}
{"text":"Now divide elements in two sets by comparing rightmost set bit of XOR with bit at same position in each element .","code":"$ x = 0 ; $ y = 0 ; for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) { if ( $ arr [ $ i ] & $ set_bit_no )"}
{"text":"XOR of first set in arr [ ]","code":"$ x = $ x ^ $ arr [ $ i ] ; else"}
{"text":"XOR of second set in arr [ ]","code":"$ y = $ y ^ $ arr [ $ i ] ; } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { if ( $ i & $ set_bit_no )"}
{"text":"XOR of first set in arr [ ] and { 1 , 2 , ... n }","code":"$ x = $ x ^ $ i ; else"}
{"text":"XOR of second set in arr [ ] and { 1 , 2 , ... n }","code":"$ y = $ y ^ $ i ; } echo \" Two \u2581 Missing \u2581 Numbers \u2581 are STRNEWLINE \" , $ x ; echo \" STRNEWLINE \" , $ y ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 5 , 6 ) ;"}
{"text":"Range of numbers is 2 plus size of array","code":"$ n = 2 + count ( $ arr ) ; findTwoMissingNumbers ( $ arr , $ n ) ; ? >"}
{"text":"Function to get no of set bits in binary representation of passed binary no .","code":"< ? php function countSetBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ n &= ( $ n - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"Returns ' e ' if profession of node at given level and position is engineer . Else doctor . The function assumes that given position and level have valid values .","code":"function findProffesion ( $ level , $ pos ) {"}
{"text":"Count set bits in ' pos - 1'","code":"$ c = countSetBits ( $ pos - 1 ) ;"}
{"text":"If set bit count is odd , then doctor , else engineer","code":"return ( $ c % 2 ) ? ' d ' : ' e ' ; }"}
{"text":"Driver Code","code":"$ level = 3 ; $ pos = 4 ; if ( ( findProffesion ( $ level , $ pos ) == ' e ' ) == true ) echo \" Engineer \u2581 STRNEWLINE \" ; else echo \" Doctor \u2581 STRNEWLINE \" ; ? >"}
{"text":"Random Function to that returns 0 or 1 with equal probability","code":"< ? php function rand2 ( ) {"}
{"text":"rand ( ) function will generate odd or even number with equal probability . If rand ( ) generates odd number , the function will return 1 else it will return 0.","code":"return rand ( ) & 1 ; }"}
{"text":"Random Function to that returns 0 , 1 or 2 with equal probability 1 with 75 %","code":"function rand3 ( ) {"}
{"text":"returns 0 , 1 , 2 or 3 with 25 % probability","code":"$ r = 2 * rand2 ( ) + rand2 ( ) ; if ( $ r < 3 ) return $ r ; return rand3 ( ) ; }"}
{"text":"Driver Code","code":"srand ( time ( NULL ) ) ; for ( $ i = 0 ; $ i < 100 ; $ i ++ ) echo rand3 ( ) ; ? >"}
{"text":"Function to return the possible pair","code":"< ? php function findpair ( $ l , $ r ) {"}
{"text":"ans1 , ans2 store value of x and y respectively","code":"$ ans1 = $ l ; $ ans2 = 2 * $ l ; echo ( $ ans1 . \" , \u2581 \" . $ ans2 ) ; }"}
{"text":"Driver Code","code":"$ l = 1 ; $ r = 10 ; findpair ( $ l , $ r ) ;"}
{"text":"Function to calculate the maximum number of equal elements possible with atmost K increment of values . Here we have done sliding window to determine that whether there are x number of elements present which on increment will become equal . The loop here will run in fashion like 0. . . x - 1 , 1. . . x , 2. . . x + 1 , ... . , n - x - 1. . . n - 1","code":"< ? php function ElementsCalculationFunc ( $ pre , $ maxx , $ x , $ k , $ n ) { for ( $ i = 0 , $ j = $ x ; $ j <= $ n ; $ j ++ , $ i ++ ) {"}
{"text":"It can be explained with the reasoning that if for some x number of elements we can update the values then the increment to the segment ( i to j having length -> x ) so that all will be equal is ( x * maxx [ j ] ) this is the total sum of segment and ( pre [ j ] - pre [ i ] ) is present sum So difference of them should be less than k if yes , then that segment length ( x ) can be possible return true","code":"if ( $ x * $ maxx [ $ j ] - ( $ pre [ $ j ] - $ pre [ $ i ] ) <= $ k ) return true ; } return false ; } function MaxNumberOfElements ( $ a , $ n , $ k ) {"}
{"text":"sort the array in ascending order","code":"sort ( $ a ) ;"}
{"text":"Initializing the prefix array and maximum array","code":"for ( $ i = 0 ; $ i <= $ n ; ++ $ i ) { $ pre [ $ i ] = 0 ; $ maxx [ $ i ] = 0 ; } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Calculating prefix sum of the array","code":"$ pre [ $ i ] = $ pre [ $ i - 1 ] + $ a [ $ i - 1 ] ;"}
{"text":"Calculating max value upto that position in the array","code":"$ maxx [ $ i ] = max ( $ maxx [ $ i - 1 ] , $ a [ $ i - 1 ] ) ; }"}
{"text":"Binary search applied for computation here","code":"$ l = 1 ; $ r = $ n ; $ ans ; while ( $ l < $ r ) { $ mid = ( $ l + $ r ) \/ 2 ; if ( ElementsCalculationFunc ( $ pre , $ maxx , $ mid - 1 , $ k , $ n ) ) { $ ans = $ mid ; $ l = $ mid + 1 ; } else $ r = $ mid - 1 ; }"}
{"text":"printing result","code":"echo $ ans , \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 4 , 9 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; $ k = 3 ; MaxNumberOfElements ( $ arr , $ n , $ k ) ; #This  code is contributed by akt_mit. NEW_LINE ? >"}
{"text":"PHP program which counts different palindromic characteristics of a string .","code":"< ? php $ MAX_STR_LEN = 1000 ; $ P = array ( array ( ) ) ; $ Kpal = array_fill ( 0 , $ MAX_STR_LEN , 0 ) ; for ( $ i = 0 ; $ i < $ MAX_STR_LEN ; $ i ++ ) { for ( $ j = 0 ; $ j < $ MAX_STR_LEN ; $ j ++ ) $ P [ $ i ] [ $ j ] = false ; }"}
{"text":"function which checks whether a substr [ i . . j ] of a given is a palindrome or not .","code":"function checkSubStrPal ( $ str , $ n ) { global $ P , $ Kpal , $ MAX_STR_LEN ;"}
{"text":"P [ i , j ] = true if substr [ i . . j ] is palindrome , else false","code":"for ( $ i = 0 ; $ i < $ MAX_STR_LEN ; $ i ++ ) { for ( $ j = 0 ; $ j < $ MAX_STR_LEN ; $ j ++ ) $ P [ $ i ] [ $ j ] = false ; $ Kpal [ $ i ] = 0 ; }"}
{"text":"palindrome of single length","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ P [ $ i ] [ $ i ] = true ;"}
{"text":"palindrome of length 2","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ str [ $ i ] == $ str [ $ i + 1 ] ) $ P [ $ i ] [ $ i + 1 ] = true ;"}
{"text":"Palindromes of length more then 2. This loop is similar to Matrix Chain Multiplication . We start with a gap of length 2 and fill P table in a way that gap between starting and ending indexes increases one by one by outer loop .","code":"for ( $ gap = 2 ; $ gap < $ n ; $ gap ++ ) {"}
{"text":"Pick starting point for current gap","code":"for ( $ i = 0 ; $ i < $ n - $ gap ; $ i ++ ) {"}
{"text":"Set ending point","code":"$ j = $ gap + $ i ;"}
{"text":"If current string is palindrome","code":"if ( $ str [ $ i ] == $ str [ $ j ] && $ P [ $ i + 1 ] [ $ j - 1 ] ) $ P [ $ i ] [ $ j ] = true ; } } }"}
{"text":"function which recursively counts if a str [ i . . j ] is a k - palindromic or not .","code":"function countKPalindromes ( $ i , $ j , $ k ) { global $ Kpal , $ P ;"}
{"text":"terminating condition for a which is a k - palindrome .","code":"if ( $ i == $ j ) { $ Kpal [ $ k ] ++ ; return ; }"}
{"text":"terminating condition for a which is not a k - palindrome .","code":"if ( $ P [ $ i ] [ $ j ] == false ) return ;"}
{"text":"increases the counter for the if it is a k - palindrome .","code":"$ Kpal [ $ k ] ++ ;"}
{"text":"mid is middle pointer of the str [ i ... j ] .","code":"$ mid = ( $ i + $ j ) \/ 2 ;"}
{"text":"if length of which is ( j - i + 1 ) is odd than we have to subtract one from mid else if even then no change .","code":"if ( ( $ j - $ i + 1 ) % 2 == 1 ) $ mid -- ;"}
{"text":"if the is k - palindrome then we check if it is a ( k + 1 ) - palindrome or not by just sending any of one half of the to the Count_k_Palindrome function .","code":"countKPalindromes ( $ i , $ mid , $ k + 1 ) ; } function printKPalindromes ( $ s ) { global $ P , $ Kpal , $ MAX_STR_LEN ;"}
{"text":"Finding all palindromic substrings of given string","code":"$ n = strlen ( $ s ) ; checkSubStrPal ( $ s , $ n ) ;"}
{"text":"counting k - palindromes for each and every sub of given string . .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n - $ i ; $ j ++ ) countKPalindromes ( $ j , $ j + $ i , 1 ) ;"}
{"text":"Output the number of K - palindromic substrings of a given string .","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) echo ( $ Kpal [ $ i ] . \" \u2581 \" ) ; echo ( \" STRNEWLINE \" ) ; }"}
{"text":"Driver code","code":"$ s = \" abacaba \" ; printKPalindromes ( $ s ) ; ? >"}
{"text":"PHP program to count no of distinct countries from a given group of people","code":"< ? php function countCountries ( $ ans , $ N ) { $ total_countries = 0 ; $ i = 0 ; $ invalid = false ; while ( $ i < $ N ) { $ curr_size = $ ans [ $ i ] ;"}
{"text":"Answer is valid if adjacent sitting num people give same answer","code":"$ num = $ ans [ $ i ] ; while ( $ num > 0 ) {"}
{"text":"someone gives different answer","code":"if ( $ ans [ $ i ] != $ curr_size ) { echo \" Invalid \u2581 Answer STRNEWLINE \" ; return ; } else $ num -- ;"}
{"text":"check next person","code":"$ i ++ ; }"}
{"text":"one valid country group has been found","code":"$ total_countries ++ ; } echo \" There \u2581 are \u2581 \" , $ total_countries , \" \u2581 distinct \u2581 companies \u2581 in \u2581 the \u2581 group . STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ ans = array ( 1 , 1 , 2 , 2 , 4 , 4 , 4 , 4 ) ; $ n = sizeof ( $ ans ) ; countCountries ( $ ans , $ n ) ; ? >"}
{"text":"Function to check the array for elements in given range","code":"< ? php function check_elements ( $ arr , $ n , $ A , $ B ) {"}
{"text":"Range is the no . of elements that are to be checked","code":"$ range = $ B - $ A ;"}
{"text":"Traversing the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If an element is in range","code":"if ( abs ( $ arr [ $ i ] ) >= $ z = abs ( $ arr [ $ i ] ) - $ A ; if ( $ arr [ $ z ] > 0 ) { $ arr [ $ z ] = $ arr [ $ z ] * -1 ; } } } $ A && abs ( $ arr [ $ i ] ) <= $ B ) {"}
{"text":"Checking whether elements in range 0 - range are negative","code":"$ count = 0 ; for ( $ i = 0 ; $ i <= $ range && $ i < $ n ; $ i ++ ) {"}
{"text":"Element from range is missing from array","code":"if ( $ arr [ $ i ] > 0 ) return -1 ; else $ count ++ ; } if ( $ count != ( $ range + 1 ) ) return -1 ;"}
{"text":"All range elements are present","code":"return true ; }"}
{"text":"Defining Array and size","code":"$ arr = array ( 1 , 4 , 5 , 2 , 7 , 8 , 3 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"A is lower limit and B is the upper limit of range","code":"$ A = 2 ; $ B = 5 ;"}
{"text":"True denotes all elements were present","code":"if ( ( check_elements ( $ arr , $ n , $ A , $ B ) ) == true ) echo \" Yes \" ;"}
{"text":"False denotes any element was not present","code":"else echo \" No \" ; ? >"}
{"text":"function to print Minimum element using recursion","code":"< ? php function findMinRec ( $ A , $ n ) {"}
{"text":"if size = 0 means whole array has been traversed","code":"if ( $ n == 1 ) return $ A [ 0 ] ; return min ( $ A [ $ n - 1 ] , findMinRec ( $ A , $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 4 , 45 , 6 , -50 , 10 , 2 ) ; $ n = sizeof ( $ A ) ; echo findMinRec ( $ A , $ n ) ; ? >"}
{"text":"Utility function to check if current minimum value is feasible or not .","code":"< ? php function isPossible ( $ arr , $ n , $ m , $ curr_min ) { $ studentsRequired = 1 ; $ curr_sum = 0 ;"}
{"text":"iterate over all books","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"check if current number of pages are greater than curr_min that means we will get the result after mid no . of pages","code":"if ( $ arr [ $ i ] > $ curr_min ) return false ;"}
{"text":"count how many students are required to distribute curr_min pages","code":"if ( $ curr_sum + $ arr [ $ i ] > $ curr_min ) {"}
{"text":"increment student count","code":"$ studentsRequired ++ ;"}
{"text":"update curr_sum","code":"$ curr_sum = $ arr [ $ i ] ;"}
{"text":"if students required becomes greater than given no . of students , return false","code":"if ( $ studentsRequired > $ m ) return false ; }"}
{"text":"else update curr_sum","code":"else $ curr_sum += $ arr [ $ i ] ; } return true ; }"}
{"text":"function to find minimum pages","code":"function findPages ( $ arr , $ n , $ m ) { $ sum = 0 ;"}
{"text":"return - 1 if no . of books is less than no . of students","code":"if ( $ n < $ m ) return -1 ;"}
{"text":"Count total number of pages","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] ;"}
{"text":"initialize start as 0 pages and end as total pages","code":"$ start = 0 ; $ end = $ sum ; $ result = PHP_INT_MAX ;"}
{"text":"traverse until start <= end","code":"while ( $ start <= $ end ) {"}
{"text":"check if it is possible to distribute books by using mid as current minimum","code":"$ mid = ( int ) ( $ start + $ end ) \/ 2 ; if ( isPossible ( $ arr , $ n , $ m , $ mid ) ) {"}
{"text":"update result to current distribution as it 's the best we have found till now","code":"$ result = $ mid ;"}
{"text":"as we are finding minimum and books are sorted so reduce end = mid - 1 that means","code":"$ end = $ mid - 1 ; } else"}
{"text":"if not possible means pages should be increased so update start = mid + 1","code":"$ start = $ mid + 1 ; }"}
{"text":"at - last return minimum no . of pages","code":"return $ result ; }"}
{"text":"Number of pages in books","code":"$ arr = array ( 12 , 34 , 67 , 90 ) ; $ n = count ( $ arr ) ;"}
{"text":"$m = 2 ; No . of students","code":"echo \" Minimum \u2581 number \u2581 of \u2581 pages \u2581 = \u2581 \" , findPages ( $ arr , $ n , $ m ) , \" STRNEWLINE \" ; ? >"}
{"text":"This function prints all distinct elements","code":"< ? php function countDistinct ( $ arr , $ n ) {"}
{"text":"Creates an empty hashset","code":"$ s = array ( ) ;"}
{"text":"Traverse the input array","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If not present , then put it in hashtable and increment result","code":"array_push ( $ s , $ arr [ $ i ] ) ; } $ s = array_unique ( $ s ) ; return count ( $ s ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 ) ; $ n = count ( $ arr ) ; echo countDistinct ( $ arr , $ n ) ; ? >"}
{"text":"Function to calculate the maximum points earned by making an optimal selection on the given array","code":"< ? php function findOptimalSolution ( $ a , $ N ) {"}
{"text":"Sorting the array","code":"sort ( $ a ) ;"}
{"text":"Variable to store the total points earned","code":"$ points = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ points += $ a [ $ i ] * $ i ; } return $ points ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 4 , 2 , 3 , 9 ) ; $ N = sizeof ( $ a ) ; echo ( findOptimalSolution ( $ a , $ N ) ) ; ? >"}
{"text":"Function to count the number of tower","code":"< ? php function number_of_tower ( $ house , $ range , $ n ) {"}
{"text":"first we sort the house numbers","code":"sort ( $ house ) ;"}
{"text":"for count number of towers","code":"$ numOfTower = 0 ;"}
{"text":"for iterate all houses","code":"$ i = 0 ; while ( $ i < $ n ) {"}
{"text":"count number of towers","code":"$ numOfTower ++ ;"}
{"text":"find find the middle location","code":"$ loc = $ house [ $ i ] + $ range ;"}
{"text":"traverse till middle location","code":"while ( $ i < $ n && $ house [ $ i ] <= $ loc ) $ i ++ ;"}
{"text":"this is point to middle house where we insert the tower","code":"-- $ i ;"}
{"text":"now find the last location","code":"$ loc = $ house [ $ i ] + $ range ;"}
{"text":"traverse till last house of the range","code":"while ( $ i < $ n && $ house [ $ i ] <= $ loc ) $ i ++ ; }"}
{"text":"return the number of tower","code":"return $ numOfTower ; }"}
{"text":"given elements","code":"$ house = array ( 7 , 2 , 4 , 6 , 5 , 9 , 12 , 11 ) ; $ range = 2 ; $ n = sizeof ( $ house ) \/ sizeof ( $ house [ 0 ] ) ;"}
{"text":"print number of towers","code":"echo number_of_tower ( $ house , $ range , $ n ) ; ? >"}
{"text":"Function that checks whether the string is in alphabetical order or not","code":"< ? php Function isAlphabaticOrder ( $ s ) {"}
{"text":"length of the string","code":"$ n = strlen ( $ s ) ;"}
{"text":"create a character array of the length of the string","code":"$ c = array ( ) ;"}
{"text":"assign the string to character array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ c [ $ i ] = $ s [ $ i ] ; }"}
{"text":"sort the character array","code":"sort ( $ c ) ;"}
{"text":"check if the character array is equal to the string or not","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ c [ $ i ] != $ s [ $ i ] ) return false ; return true ; }"}
{"text":"Driver code","code":"$ s = \" aabbbcc \" ;"}
{"text":"check whether the string is in alphabetical order or not","code":"if ( isAlphabaticOrder ( $ s ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to sort the array","code":"< ? php function printOrder ( $ arr , $ n , $ k ) {"}
{"text":"Sort first k elements in ascending order","code":"$ a = array_slice ( $ arr , 0 , $ k ) ; sort ( $ a ) ;"}
{"text":"Sort remaining n - k elements in descending order","code":"$ b = array_slice ( $ arr , $ k , $ n ) ; sort ( $ b ) ; $ b = array_reverse ( $ b ) ; unset ( $ arr ) ; $ arr = $ a ; return array_merge ( $ arr , $ b ) ; }"}
{"text":"Our arr contains 8 elements","code":"$ arr = array ( 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , -1 ) ; $ k = 4 ; $ n = count ( $ arr ) ; $ arr = printOrder ( $ arr , $ n , $ k ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"PHP program to sort a string in descending order using library function","code":"< ? php function descOrder ( $ s ) { $ s = str_split ( $ s ) ; rsort ( $ s ) ; echo implode ( ' ' , $ s ) ; }"}
{"text":"Driver Code","code":"$ s = \" geeksforgeeks \" ;"}
{"text":"descOrder ( $s ) ; function call","code":"? >"}
{"text":"PHP program to find smallest number in array that is repeated exactly ' k ' times .","code":"< ? php $ MAX = 1000 ;"}
{"text":"finds the smallest number in arr that is repeated k times","code":"function findDuplicate ( $ arr , $ n , $ k ) { global $ MAX ;"}
{"text":"Computing frequencies of all elements","code":"$ freq = array_fill ( 0 , $ MAX , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] < 1 && $ arr [ $ i ] > $ MAX ) { echo \" Out \u2581 of \u2581 range \" ; return -1 ; } $ freq [ $ arr [ $ i ] ] += 1 ; }"}
{"text":"Finding the smallest element with frequency as k","code":"for ( $ i = 0 ; $ i < $ MAX ; $ i ++ ) {"}
{"text":"If frequency of any of the number is equal to k starting from 0 then return the number","code":"if ( $ freq [ $ i ] == $ k ) return $ i ; } return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 2 , 1 , 3 , 1 ) ; $ k = 2 ; $ n = count ( $ arr ) ; echo findDuplicate ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Prints pendulam arrangement of arr [ ]","code":"< ? php function pendulumArrangement ( $ arr , $ n ) {"}
{"text":"sorting the elements","code":"sort ( $ arr , $ n ) ; sort ( $ arr ) ;"}
{"text":"Auxiliary array to store output","code":"$ op [ $ n ] = NULL ;"}
{"text":"calculating the middle index","code":"$ mid = floor ( ( $ n - 1 ) \/ 2 ) ;"}
{"text":"storing the minimum element in the middle i is index for output array and j is for input array .","code":"$ j = 1 ; $ i = 1 ; $ op [ $ mid ] = $ arr [ 0 ] ; for ( $ i = 1 ; $ i <= $ mid ; $ i ++ ) { $ op [ $ mid + $ i ] = $ arr [ $ j ++ ] ; $ op [ $ mid - $ i ] = $ arr [ $ j ++ ] ; }"}
{"text":"adjustment for when no . of elements is even","code":"if ( $ n % 2 == 0 ) $ op [ $ mid + $ i ] = $ arr [ $ j ] ;"}
{"text":"Printing the pendulum arrangement","code":"echo \" Pendulum \u2581 arrangement : \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ op [ $ i ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"input Array","code":"$ arr = array ( 14 , 6 , 19 , 21 , 12 ) ;"}
{"text":"calling pendulum function","code":"$ n = sizeof ( $ arr ) ; pendulumArrangement ( $ arr , $ n ) ; ? >"}
{"text":"Returns minimum sum of product of two arrays with permutations allowed","code":"< ? php function minValue ( $ A , $ B , $ n ) {"}
{"text":"Sort A and B so that minimum and maximum value can easily be fetched .","code":"sort ( $ A ) ; sort ( $ A , $ n ) ; sort ( $ B ) ; sort ( $ B , $ n ) ;"}
{"text":"Multiplying minimum value of A and maximum value of B","code":"$ result = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ result += ( $ A [ $ i ] * $ B [ $ n - $ i - 1 ] ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ A = array ( 3 , 1 , 1 ) ; $ B = array ( 6 , 5 , 4 ) ; $ n = sizeof ( $ A ) \/ sizeof ( $ A [ 0 ] ) ; echo minValue ( $ A , $ B , $ n ) ; ? >"}
{"text":"Function to print maximum number that can be formed using N segments","code":"< ? php function printMaxNumber ( $ n ) {"}
{"text":"If n is odd","code":"if ( $ n & 1 ) {"}
{"text":"use 3 three segment to print 7","code":"echo \"7\" ;"}
{"text":"remaining to print 1","code":"for ( $ i = 0 ; $ i < ( $ n - 3 ) \/ 2 ; $ i ++ ) echo \"1\" ; }"}
{"text":"If n is even","code":"else {"}
{"text":"print n \/ 2 1 s .","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ ) echo \"1\" ; } }"}
{"text":"Driver 's Code","code":"$ n = 5 ; printMaxNumber ( $ n ) ; ? >"}
{"text":"Returns the maximum number of sorted subarrays in a valid partition","code":"< ? php function sorted_partitions ( $ arr , $ n ) {"}
{"text":"Find minimum value from right for every index","code":"$ right_min [ $ n + 1 ] = array ( ) ; $ right_min [ $ n ] = PHP_INT_MAX ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { $ right_min [ $ i ] = min ( $ right_min [ $ i + 1 ] , $ arr [ $ i ] ) ; }"}
{"text":"Finding the shortest prefix such that all the elements in the prefix are less than or equal to the elements in the rest of the array .","code":"$ partitions = 0 ; for ( $ current_max = $ arr [ 0 ] , $ i = 0 ; $ i < $ n ; $ i ++ ) { $ current_max = max ( $ current_max , $ arr [ $ i ] ) ;"}
{"text":"if current max is less than the right prefix min , we increase number of partitions .","code":"if ( $ current_max <= $ right_min [ $ i + 1 ] ) $ partitions ++ ; } return $ partitions ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 1 , 2 , 4 , 100 , 7 , 9 ) ;"}
{"text":"Find minimum value from right for every index","code":"$ n = sizeof ( $ arr ) ; $ ans = sorted_partitions ( $ arr , $ n ) ; echo $ ans , \" STRNEWLINE \" ; ? >"}
{"text":"this function returns the minimum cost of the array","code":"< ? php function getMinCost ( $ arr , $ n ) { $ min_ele = min ( $ arr ) ; return $ min_ele * ( $ n - 1 ) ; }"}
{"text":"Code driven","code":"$ arr = array ( 4 , 2 , 5 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo getMinCost ( $ arr , $ n ) ; #This  code contributed by ajit NEW_LINE ? >"}
{"text":"Main method","code":"< ? php $ st = \" NNNWEWESSS \" ; $ len = strlen ( $ st ) ;"}
{"text":"$n = 0 ; Count of North $s = 0 ; Count of South $e = 0 ; Count of East $w = 0 ; Count of West","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ st [ $ i ] == ' N ' ) $ n += 1 ; if ( $ st [ $ i ] == ' S ' ) $ s += 1 ; if ( $ st [ $ i ] == ' W ' ) $ w += 1 ; if ( $ st [ $ i ] == ' E ' ) $ e += 1 ; } if ( $ n == $ s && $ w == $ e ) echo \" YES STRNEWLINE \" ; else echo \" NO STRNEWLINE \" ; ? >"}
{"text":"function to calculate the minimum cost","code":"< ? php function cost ( $ a , $ n ) {"}
{"text":"Minimum cost is n - 1 multiplied with minimum element .","code":"return ( $ n - 1 ) * ( min ( $ a ) ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 4 , 3 , 2 ) ; $ n = count ( $ a ) ; echo cost ( $ a , $ n ) ; ? >"}
{"text":"function to calculate min cost","code":"< ? php function minCost ( $ coin , $ n , $ k ) {"}
{"text":"sort the coins value","code":"sort ( $ coin ) ; sort ( $ coin , $ n ) ;"}
{"text":"calculate no . of coins needed","code":"$ coins_needed = ceil ( 1.0 * $ n \/ ( $ k + 1 ) ) ;"}
{"text":"calculate sum of all selected coins","code":"$ ans = 0 ; for ( $ i = 0 ; $ i <= $ coins_needed - 1 ; $ i ++ ) $ ans += $ coin [ $ i ] ; return $ ans ; }"}
{"text":"Driver Code","code":"{ $ coin = array ( 8 , 5 , 3 , 10 , 2 , 1 , 15 , 25 ) ; $ n = sizeof ( $ coin ) \/ sizeof ( $ coin [ 0 ] ) ; $ k = 3 ; echo minCost ( $ coin , $ n , $ k ) ; return 0 ; } ? >"}
{"text":"Utility function to count odd numbers in ith row of Pascals 's triangle","code":"< ? php function countOddNumber ( $ row_num ) {"}
{"text":"Initialize count as zero","code":"$ count = 0 ; while ( $ row_num ) { $ count += $ row_num & 1 ; $ row_num >>= 1 ; }"}
{"text":"Return 2 ^ count","code":"return ( 1 << $ count ) ; }"}
{"text":"Function to generate gould 's Sequence","code":"function gouldSequence ( $ n ) {"}
{"text":"loop to generate gould 's Sequence up to n","code":"for ( $ row_num = 0 ; $ row_num < $ n ; $ row_num ++ ) { echo countOddNumber ( $ row_num ) , \" \" ; } }"}
{"text":"Get n","code":"$ n = 16 ;"}
{"text":"Function call","code":"gouldSequence ( $ n ) ; ? >"}
{"text":"PHP program to find no . of ways to fill a 3 xn board with 2 x1 dominoes .","code":"< ? php function countWays ( $ n ) { $ A = array ( ) ; $ B = array ( ) ; $ A [ 0 ] = 1 ; $ A [ 1 ] = 0 ; $ B [ 0 ] = 0 ; $ B [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ A [ $ i ] = $ A [ $ i - 2 ] + 2 * $ B [ $ i - 1 ] ; $ B [ $ i ] = $ A [ $ i - 1 ] + $ B [ $ i - 2 ] ; } return $ A [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 8 ; echo countWays ( $ n ) ; ? >"}
{"text":"Recursive Function to find the n - th element","code":"< ? php function sequence ( $ n ) { if ( $ n == 1 $ n == 2 ) return 1 ; else return sequence ( sequence ( $ n - 1 ) ) + sequence ( $ n - sequence ( $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo ( sequence ( $ n ) ) ; ? >"}
{"text":"Number of ways in which participant can take part .","code":"< ? php function numberOfWays ( $ x ) {"}
{"text":"Base condition","code":"if ( $ x == 0 $ x == 1 ) return 1 ;"}
{"text":"A participant can choose to consider ( 1 ) Remains single . Number of people reduce to ( x - 1 ) ( 2 ) Pairs with one of the ( x - 1 ) others . For every pairing , number of peopl reduce to ( x - 2 ) .","code":"else return numberOfWays ( $ x - 1 ) + ( $ x - 1 ) * numberOfWays ( $ x - 2 ) ; }"}
{"text":"Driver code","code":"$ x = 3 ; echo numberOfWays ( $ x ) ; ? >"}
{"text":"PHP program for Number of ways in which participant can take part .","code":"< ? php function numberOfWays ( $ x ) { $ dp [ 0 ] = 1 ; $ dp [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ x ; $ i ++ ) $ dp [ $ i ] = $ dp [ $ i - 1 ] + ( $ i - 1 ) * $ dp [ $ i - 2 ] ; return $ dp [ $ x ] ; }"}
{"text":"Driver code","code":"$ x = 3 ; echo numberOfWays ( $ x ) ; ? >"}
{"text":"Refer https : www . geeksforgeeks . org \/ longest - repeating - subsequence \/ for complete code . This function mainly returns LCS ( str , str ) with a condition that same characters at same index are not considered .","code":"< ? php function findLongestRepeatingSubSeq ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Create and initialize DP table","code":"$ dp = array_fill ( 0 , $ n + 1 , array_fill ( 0 , $ n + 1 , NULL ) ) ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ;"}
{"text":"Fill dp table ( similar to LCS loops )","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"If characters match and indexes are not same","code":"if ( $ str [ $ i - 1 ] == $ str [ $ j - 1 ] && $ i != $ j ) $ dp [ $ i ] [ $ j ] = 1 + $ dp [ $ i - 1 ] [ $ j - 1 ] ;"}
{"text":"If characters do not match","code":"else $ dp [ $ i ] [ $ j ] = max ( $ dp [ $ i ] [ $ j - 1 ] , $ dp [ $ i - 1 ] [ $ j ] ) ; } } return $ dp [ $ n ] [ $ n ] ; } ? >"}
{"text":"method returns number of ways with which items can be arranged","code":"< ? php function waysToArrange ( $ N , $ K , $ k ) { $ C [ $ N + 1 ] [ $ N + 1 ] = array ( array ( ) ) ;"}
{"text":"Calculate value of Binomial Coefficient in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ N ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) {"}
{"text":"Base Cases","code":"if ( $ j == 0 $ j == $ i ) $ C [ $ i ] [ $ j ] = 1 ;"}
{"text":"Calculate value using previously stored values","code":"else $ C [ $ i ] [ $ j ] = ( $ C [ $ i - 1 ] [ $ j - 1 ] + $ C [ $ i - 1 ] [ $ j ] ) ; } }"}
{"text":"declare dp array to store result up to ith colored item","code":"$ dp [ $ K ] = array ( ) ;"}
{"text":"variable to keep track of count of items considered till now","code":"$ count = 0 ; $ dp [ 0 ] = 1 ;"}
{"text":"loop over all different colors","code":"for ( $ i = 0 ; $ i < $ K ; $ i ++ ) {"}
{"text":"populate next value using current value and stated relation","code":"$ dp [ $ i + 1 ] = ( $ dp [ $ i ] * $ C [ $ count + $ k [ $ i ] - 1 ] [ $ k [ $ i ] - 1 ] ) ; $ count += $ k [ $ i ] ; }"}
{"text":"return value stored at last index","code":"return $ dp [ $ K ] ; }"}
{"text":"Driver code","code":"$ N = 4 ; $ k = array ( 2 , 2 ) ; $ K = sizeof ( $ k ) ; echo waysToArrange ( $ N , $ K , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to count minimum cells required to be covered to reach destination","code":"< ? php function minCells ( $ mat , $ m , $ n ) {"}
{"text":"to store min cells required to be covered to reach a particular cell","code":"$ dp = array ( array ( ) ) ;"}
{"text":"initially no cells can be reached","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = PHP_INT_MAX ;"}
{"text":"base case","code":"$ dp [ 0 ] [ 0 ] = 1 ;"}
{"text":"building up the dp [ ] [ ] matrix","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"dp [ i ] [ j ] != INT_MAX denotes that cell ( i , j ) can be reached from cell ( 0 , 0 ) and the other half of the condition finds the cell on the right that can be reached from ( i , j )","code":"if ( $ dp [ $ i ] [ $ j ] != PHP_INT_MAX and ( $ j + $ mat [ $ i ] [ $ j ] ) < $ n and ( $ dp [ $ i ] [ $ j ] + 1 ) < $ dp [ $ i ] [ $ j + $ mat [ $ i ] [ $ j ] ] ) $ dp [ $ i ] [ $ j + $ mat [ $ i ] [ $ j ] ] = $ dp [ $ i ] [ $ j ] + 1 ;"}
{"text":"the other half of the condition finds the cell right below that can be reached from ( i , j )","code":"if ( $ dp [ $ i ] [ $ j ] != PHP_INT_MAX and ( $ i + $ mat [ $ i ] [ $ j ] ) < $ m and ( $ dp [ $ i ] [ $ j ] + 1 ) < $ dp [ $ i + $ mat [ $ i ] [ $ j ] ] [ $ j ] ) $ dp [ $ i + $ mat [ $ i ] [ $ j ] ] [ $ j ] = $ dp [ $ i ] [ $ j ] + 1 ; } }"}
{"text":"it true then cell ( m - 1 , n - 1 ) can be reached from cell ( 0 , 0 ) and returns the minimum number of cells covered","code":"if ( $ dp [ $ m - 1 ] [ $ n - 1 ] != PHP_INT_MAX ) return $ dp [ $ m - 1 ] [ $ n - 1 ] ;"}
{"text":"cell ( m - 1 , n - 1 ) cannot be reached from cell ( 0 , 0 )","code":"return -1 ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 2 , 3 , 2 , 1 , 4 ) , array ( 3 , 2 , 5 , 8 , 2 ) , array ( 1 , 1 , 2 , 2 , 1 ) ) ; $ m = 3 ; $ n = 5 ; echo \" Minimum \u2581 number \u2581 of \u2581 cells \u2581 = \u2581 \" , minCells ( $ mat , $ m , $ n ) ; ? >"}
{"text":"PHP program to find maximum number of ones after one flipping in Binary Matrix","code":"< ? php $ R = 3 ; $ C = 3 ;"}
{"text":"Return number of ones in square submatrix of size k x k starting from ( x , y )","code":"function cal ( $ ones , $ x , $ y , $ k ) { return $ ones [ $ x + $ k - 1 ] [ $ y + $ k - 1 ] - $ ones [ $ x - 1 ] [ $ y + $ k - 1 ] - $ ones [ $ x + $ k - 1 ] [ $ y - 1 ] + $ ones [ $ x - 1 ] [ $ y - 1 ] ; }"}
{"text":"Return maximum number of 1 s after flipping a submatrix","code":"function sol ( $ mat ) { global $ C , $ R ; $ ans = 0 ;"}
{"text":"Precomputing the number of 1 s","code":"$ ones = array_fill ( 0 , $ R + 1 , array_fill ( 0 , $ C + 1 , 0 ) ) ; for ( $ i = 1 ; $ i <= $ R ; $ i ++ ) for ( $ j = 1 ; $ j <= $ C ; $ j ++ ) $ ones [ $ i ] [ $ j ] = $ ones [ $ i - 1 ] [ $ j ] + $ ones [ $ i ] [ $ j - 1 ] - $ ones [ $ i - 1 ] [ $ j - 1 ] + ( int ) ( $ mat [ $ i - 1 ] [ $ j - 1 ] == 1 ) ;"}
{"text":"Finding the maximum number of 1 s after flipping","code":"for ( $ k = 1 ; $ k <= min ( $ R , $ C ) ; $ k ++ ) for ( $ i = 1 ; $ i + $ k - 1 <= $ R ; $ i ++ ) for ( $ j = 1 ; $ j + $ k - 1 <= $ C ; $ j ++ ) $ ans = max ( $ ans , ( $ ones [ $ R ] [ $ C ] + $ k * $ k - 2 * cal ( $ ones , $ i , $ j , $ k ) ) ) ; return $ ans ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( 0 , 0 , 1 ) , array ( 0 , 0 , 1 ) , array ( 1 , 0 , 1 ) ) ; echo sol ( $ mat ) ; ? >"}
{"text":"A tabulation based solution in PHP","code":"< ? php function getMinSteps ( $ n ) { $ table = array ( ) ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ table [ $ i ] = $ n - $ i ; for ( $ i = $ n ; $ i >= 1 ; $ i -- ) { if ( ! ( $ i % 2 ) ) $ table [ $ i \/ 2 ] = min ( $ table [ $ i ] + 1 , $ table [ $ i \/ 2 ] ) ; if ( ! ( $ i % 3 ) ) $ table [ $ i \/ 3 ] = min ( $ table [ $ i ] + 1 , $ table [ $ i \/ 3 ] ) ; } return $ table [ 1 ] ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo getMinSteps ( $ n ) ; ? >"}
{"text":"Function to find the length of longest subsequence","code":"< ? php function longestSubseqWithDiffOne ( $ arr , $ n ) {"}
{"text":"Initialize the dp [ ] array with 1 as a single element will be of 1 length","code":"$ dp [ $ n ] = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ dp [ $ i ] = 1 ;"}
{"text":"Start traversing the given array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Compare with all the previous elements","code":"for ( $ j = 0 ; $ j < $ i ; $ j ++ ) {"}
{"text":"If the element is consecutive then consider this subsequence and update dp [ i ] if required .","code":"if ( ( $ arr [ $ i ] == $ arr [ $ j ] + 1 ) || ( $ arr [ $ i ] == $ arr [ $ j ] - 1 ) ) $ dp [ $ i ] = max ( $ dp [ $ i ] , $ dp [ $ j ] + 1 ) ; } }"}
{"text":"Longest length will be the maximum value of dp array .","code":"$ result = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ result < $ dp [ $ i ] ) $ result = $ dp [ $ i ] ; return $ result ; }"}
{"text":"Longest subsequence with one difference is { 1 , 2 , 3 , 4 , 3 , 2 }","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 3 , 2 ) ; $ n = sizeof ( $ arr ) ; echo longestSubseqWithDiffOne ( $ arr , $ n ) ; ? >"}
{"text":"A dynamic programming based function to find nth Catalan number","code":"< ? php function catalanDP ( $ n ) {"}
{"text":"Initialize first two values in table","code":"$ catalan [ 0 ] = $ catalan [ 1 ] = 1 ;"}
{"text":"Fill entries in catalan [ ] using recursive formula","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ catalan [ $ i ] = 0 ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) $ catalan [ $ i ] += $ catalan [ $ j ] * $ catalan [ $ i - $ j - 1 ] ; }"}
{"text":"Return last entry","code":"return $ catalan [ $ n ] ; }"}
{"text":"Returns count of ways to connect n points on a circle such that no two connecting lines cross each other and every point is connected with one other point .","code":"function countWays ( $ n ) {"}
{"text":"Throw error if n is odd","code":"if ( $ n & 1 ) { echo \" Invalid \" ; return 0 ; }"}
{"text":"Else return n \/ 2 'th Catalan number","code":"return catalanDP ( $ n \/ 2 ) ; }"}
{"text":"Driver Code","code":"echo countWays ( 6 ) , \" \" ; ? >"}
{"text":"PHP program to count number of ways to arrange three types of balls such that no two balls of same color are adjacent to each other","code":"< ? php $ MAX = 100 ;"}
{"text":"table to store to store results of subproblems","code":"$ dp = array_fill ( 0 , $ MAX , array_fill ( 0 , $ MAX , array_fill ( 0 , $ MAX , array_fill ( 0 , 3 , -1 ) ) ) ) ;"}
{"text":"Returns count of arrangements where last placed ball is ' last ' . ' last ' is 0 for ' p ' , 1 for ' q ' and 2 for ' r '","code":"function countWays ( $ p , $ q , $ r , $ last ) { global $ dp ;"}
{"text":"if number of balls of any color becomes less than 0 the number of ways arrangements is 0.","code":"if ( $ p < 0 $ q < 0 $ r < 0 ) return 0 ;"}
{"text":"If last ball required is of type P and the number of balls of P type is 1 while number of balls of other color is 0 the number of ways is 1.","code":"if ( $ p == 1 && $ q == 0 && $ r == 0 && $ last == 0 ) return 1 ;"}
{"text":"Same case as above for ' q ' and ' r '","code":"if ( $ p == 0 && $ q == 1 && $ r == 0 && $ last == 1 ) return 1 ; if ( $ p == 0 && $ q == 0 && $ r == 1 && $ last == 2 ) return 1 ;"}
{"text":"If this subproblem is already evaluated","code":"if ( $ dp [ $ p ] [ $ q ] [ $ r ] [ $ last ] != -1 ) return $ dp [ $ p ] [ $ q ] [ $ r ] [ $ last ] ;"}
{"text":"if last ball required is P and the number of ways is the sum of number of ways to form sequence with ' p - 1' P balls , q Q Balls and r R balls ending with Q and R .","code":"if ( $ last == 0 ) $ dp [ $ p ] [ $ q ] [ $ r ] [ $ last ] = countWays ( $ p - 1 , $ q , $ r , 1 ) + countWays ( $ p - 1 , $ q , $ r , 2 ) ;"}
{"text":"Same as above case for ' q ' and ' r '","code":"else if ( $ last == 1 ) $ dp [ $ p ] [ $ q ] [ $ r ] [ $ last ] = countWays ( $ p , $ q - 1 , $ r , 0 ) + countWays ( $ p , $ q - 1 , $ r , 2 ) ;"}
{"text":"else ( last == 2 )","code":"$ dp [ $ p ] [ $ q ] [ $ r ] [ $ last ] = countWays ( $ p , $ q , $ r - 1 , 0 ) + countWays ( $ p , $ q , $ r - 1 , 1 ) ; return $ dp [ $ p ] [ $ q ] [ $ r ] [ $ last ] ; }"}
{"text":"Returns count of required arrangements","code":"function countUtil ( $ p , $ q , $ r ) {"}
{"text":"Three cases arise : return countWays ( $p , $q , $r , 0 ) + Last required balls is type P countWays ( $p , $q , $r , 1 ) + Last required balls is type Q countWays ( $p , $q , $r , 2 ) ; Last required balls is type R","code":"}"}
{"text":"Driver code","code":"$ p = 1 ; $ q = 1 ; $ r = 1 ; print ( countUtil ( $ p , $ q , $ r ) ) ; ? >"}
{"text":"Function to count derangements","code":"< ? php function countDer ( $ n ) {"}
{"text":"Base cases","code":"if ( $ n == 1 ) return 0 ; if ( $ n == 2 ) return 1 ;"}
{"text":"countDer ( n ) = ( n - 1 ) [ countDer ( n - 1 ) + der ( n - 2 ) ]","code":"return ( $ n - 1 ) * ( countDer ( $ n - 1 ) + countDer ( $ n - 2 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo \" Count \u2581 of \u2581 Derangements \u2581 is \u2581 \" , countDer ( $ n ) ; ? >"}
{"text":"Function to count derangements","code":"< ? php function countDer ( $ n ) {"}
{"text":"Base cases","code":"$ der [ 1 ] = 0 ; $ der [ 2 ] = 1 ;"}
{"text":"Fill der [ 0. . n ] in bottom up manner using above recursive formula","code":"for ( $ i = 3 ; $ i <= $ n ; ++ $ i ) $ der [ $ i ] = ( $ i - 1 ) * ( $ der [ $ i - 1 ] + $ der [ $ i - 2 ] ) ;"}
{"text":"Return result for n","code":"return $ der [ $ n ] ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo \" Count \u2581 of \u2581 Derangements \u2581 is \u2581 \" , countDer ( $ n ) ; ? >"}
{"text":"Returns count of solutions for given rhs and coefficients coeff [ 0. . n - 1 ]","code":"< ? php function countSol ( $ coeff , $ n , $ rhs ) {"}
{"text":"Create and initialize a table to store results of subproblems","code":"$ dp = str_repeat ( \" \\0\" , 256 ) ; $ dp [ 0 ] = 1 ;"}
{"text":"Fill table in bottom up manner","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ coeff [ $ i ] ; $ j <= $ rhs ; $ j ++ ) $ dp [ $ j ] = $ dp [ $ j ] + ( $ dp [ $ j - $ coeff [ $ i ] ] ) ; return $ dp [ $ rhs ] ; }"}
{"text":"Driver Code","code":"$ coeff = array ( 2 , 2 , 5 ) ; $ rhs = 4 ; $ n = sizeof ( $ coeff ) \/ sizeof ( $ coeff [ 0 ] ) ; echo countSol ( $ coeff , $ n , $ rhs ) ; ? >"}
{"text":"The main function that returns the max possible product","code":"< ? php function maxProd ( $ n ) {"}
{"text":"n equals to 2 or 3 must be handled explicitly","code":"if ( $ n == 2 $ n == 3 ) return ( $ n - 1 ) ;"}
{"text":"Keep removing parts of size 3 while n is greater than 4","code":"$ res = 1 ; while ( $ n > 4 ) { $ n = $ n - 3 ;"}
{"text":"Keep multiplying 3 to res","code":"$ res = $ res * 3 ; }"}
{"text":"The last part multiplied by previous parts","code":"return ( $ n * $ res ) ; }"}
{"text":"Driver code","code":"echo ( \" Maximum \u2581 Product \u2581 is \u2581 \" ) ; echo ( maxProd ( 10 ) ) ; ? >"}
{"text":"The main function that returns number of ways to get sum ' x ' with ' n ' dice and ' m ' with m faces .","code":"< ? php function findWays ( $ m , $ n , $ x ) {"}
{"text":"Create a table to store results of subproblems . One extra row and column are used for simpilicity ( Number of dice is directly used as row index and sum is directly used as column index ) . The entries in 0 th row and 0 th column are never used .","code":"$ table ; for ( $ i = 1 ; $ i < $ n + 1 ; $ i ++ ) for ( $ j = 1 ; $ j < $ x + 1 ; $ j ++ ) $ table [ $ i ] [ $ j ] = 0 ;"}
{"text":"Table entries for only one dice","code":"for ( $ j = 1 ; $ j <= $ m && $ j <= $ x ; $ j ++ ) $ table [ 1 ] [ $ j ] = 1 ;"}
{"text":"Fill rest of the entries in table using recursive relation i : number of dice , j : sum","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) for ( $ j = 1 ; $ j <= $ x ; $ j ++ ) for ( $ k = 1 ; $ k <= $ m && $ k < $ j ; $ k ++ ) $ table [ $ i ] [ $ j ] += $ table [ $ i - 1 ] [ $ j - $ k ] ;"}
{"text":"Return value","code":"return $ table [ $ n ] [ $ x ] ; }"}
{"text":"Driver Code","code":"echo findWays ( 4 , 2 , 1 ) . \" STRNEWLINE \" ; echo findWays ( 2 , 2 , 3 ) . \" STRNEWLINE \" ; echo findWays ( 6 , 3 , 8 ) . \" STRNEWLINE \" ; echo findWays ( 4 , 2 , 5 ) . \" STRNEWLINE \" ; echo findWays ( 4 , 3 , 5 ) . \" STRNEWLINE \" ; ? >"}
{"text":"Returns the length of the longest palindromic subsequence in seq","code":"< ? php function lps ( $ seq , $ i , $ j ) {"}
{"text":"Base Case 1 : If there is only 1 character","code":"if ( $ i == $ j ) return 1 ;"}
{"text":"Base Case 2 : If there are only 2 characters and both are same","code":"if ( $ seq [ $ i ] == $ seq [ $ j ] && $ i + 1 == $ j ) return 2 ;"}
{"text":"If the first and last characters match","code":"if ( $ seq [ $ i ] == $ seq [ $ j ] ) return lps ( $ seq , $ i + 1 , $ j - 1 ) + 2 ;"}
{"text":"If the first and last characters do not match","code":"return max ( lps ( $ seq , $ i , $ j - 1 ) , lps ( $ seq , $ i + 1 , $ j ) ) ; }"}
{"text":"Driver Code","code":"$ seq = \" GEEKSFORGEEKS \" ; $ n = strlen ( $ seq ) ; echo \" The \u2581 length \u2581 of \u2581 the \u2581 LPS \u2581 is \u2581 \" . lps ( $ seq , 0 , $ n - 1 ) ; ? >"}
{"text":"Function to find the count","code":"< ? php function findCount ( $ str1 , $ str2 ) { $ len = strlen ( $ str1 ) ; $ len2 = strlen ( $ str1 ) ; $ ans = PHP_INT_MAX ;"}
{"text":"Initialize hash for both strings","code":"$ hash1 = array_fill ( 0 , 26 , 0 ) ; $ hash2 = array_fill ( 0 , 26 , 0 ) ;"}
{"text":"hash the frequency of letters of str1","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) $ hash1 [ ord ( $ str1 [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"hash the frequency of letters of str2","code":"for ( $ i = 0 ; $ i < $ len2 ; $ i ++ ) $ hash2 [ ord ( $ str2 [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"Find the count of str2 constructed from str1","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) if ( $ hash2 [ $ i ] ) $ ans = min ( $ ans , $ hash1 [ $ i ] \/ $ hash2 [ $ i ] ) ;"}
{"text":"Return answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ str1 = \" geeksclassesatnoida \" ; $ str2 = \" sea \" ; echo findCount ( $ str1 , $ str2 ) ; ? >"}
{"text":"Check if the character is vowel or not","code":"< ? php function isVowel ( $ c ) { $ vowel = \" aeiou \" ; for ( $ i = 0 ; $ i < strlen ( $ vowel ) ; ++ $ i ) if ( $ vowel [ $ i ] == $ c ) return true ; return false ; }"}
{"text":"Returns true if ' typed ' is a typed name given str","code":"function printRLE ( $ str , $ typed ) { $ n = strlen ( $ str ) ; $ m = strlen ( $ typed ) ;"}
{"text":"Traverse through all characters of str .","code":"$ j = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current characters do not match","code":"if ( $ str [ $ i ] != $ typed [ $ j ] ) return false ;"}
{"text":"If not vowel , simply move ahead in both","code":"if ( isVowel ( $ str [ $ i ] ) == false ) { $ j ++ ; continue ; }"}
{"text":"Count occurrences of current vowel in str","code":"$ count1 = 1 ; while ( $ i < $ n - 1 && $ str [ $ i ] == $ str [ $ i + 1 ] ) { $ count1 ++ ; $ i ++ ; }"}
{"text":"Count occurrences of current vowel in typed .","code":"$ count2 = 1 ; while ( $ j < $ m - 1 && $ typed [ $ j ] == $ str [ $ i ] ) { $ count2 ++ ; $ j ++ ; } if ( $ count1 > $ count2 ) return false ; } return true ; }"}
{"text":"Driver code","code":"$ name = \" alex \" ; $ typed = \" aaalaeex \" ; if ( printRLE ( $ name , $ typed ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function takes two parameter","code":"< ? php function censor ( $ text , $ word ) {"}
{"text":"Break down sentence by ' \u2581 ' spaces and store each individual word in a different list","code":"$ word_list = explode ( \" \u2581 \" , $ text ) ;"}
{"text":"A new string to store the result","code":"$ result = ' ' ;"}
{"text":"Creating the censor which is an asterisks \" * \" text of the length of censor word","code":"$ stars = \" \" ; for ( $ i = 0 ; $ i < strlen ( $ word ) ; $ i ++ ) $ stars . = \" * \" ;"}
{"text":"count variable to access our word_list","code":"$ count = 0 ;"}
{"text":"Iterating through our list of extracted words","code":"$ index = 0 ; for ( $ i = 0 ; $ i < sizeof ( $ word_list ) ; $ i ++ ) { if ( $ word_list [ $ i ] == $ word )"}
{"text":"changing the censored word to created asterisks censor","code":"$ word_list [ $ index ] = $ stars ; $ index += 1 ; }"}
{"text":"join the words","code":"return implode ( ' \u2581 ' , $ word_list ) ; }"}
{"text":"Driver code","code":"$ extract = \" GeeksforGeeks \u2581 is \u2581 a \u2581 computer \u2581 science \u2581 \" . \" portal for geeks . I am pursuing my \" . STRNEWLINE \" major in computer science . \" ; $ cen = \" computer \" ; echo censor ( $ extract , $ cen ) ; ? >"}
{"text":"Function to return the required time","code":"< ? php function getTime ( $ s , $ n ) {"}
{"text":"To store the resultant time","code":"$ res = \" \" ;"}
{"text":"Hours are stored in h as integer","code":"$ h = intval ( $ s . substr ( 0 , 2 ) ) ;"}
{"text":"Minutes are stored in m as integer","code":"$ m = intval ( $ s . substr ( 3 , 2 ) ) ;"}
{"text":"Reverse of h","code":"$ rev_h = ( $ h % 10 ) * 10 + ( ( $ h % 100 ) - ( $ h % 10 ) ) \/ 10 ;"}
{"text":"Reverse of h as a string","code":"$ rev_hs = strval ( $ rev_h ) ; if ( $ h == 23 && $ m >= 32 ) { $ res = \" - 1\" ; }"}
{"text":"If MM < reverse of ( HH )","code":"else if ( $ m < $ rev_h ) { $ temp = \" \" ;"}
{"text":"0 is added if HH < 10","code":"if ( $ h < 10 ) $ temp = \"0\" ; $ temp = $ temp . strval ( $ h ) ;"}
{"text":"0 is added if rev_h < 10","code":"if ( $ rev_h < 10 ) $ res = $ res . $ temp . \" : 0\" . $ rev_hs ; else $ res = $ res . $ temp . \" : \" . $ rev_hs ; } else {"}
{"text":"Increment hours","code":"$ h ++ ;"}
{"text":"Reverse of the hour after incrementing 1","code":"$ rev_h = ( $ h % 10 ) * 10 + ( ( $ h % 100 ) - ( $ h % 10 ) ) \/ 10 ; $ rev_hs = strval ( $ rev_h ) ; $ temp = \" \" ;"}
{"text":"0 is added if HH < 10","code":"if ( $ h < 10 ) $ temp = \"0\" ; $ temp = $ temp . strval ( $ h ) ;"}
{"text":"0 is added if rev_h < 10","code":"if ( $ rev_h < 10 ) $ res = $ res . $ temp . \" : 0\" . $ rev_hs ; else $ res = $ res . $ temp . \" : \" . $ rev_hs ; } return $ res ; }"}
{"text":"Driver code","code":"$ s = \"21:12\" ; $ n = strlen ( $ s ) ; echo getTime ( $ s , $ n ) ; return 0 ; ? >"}
{"text":"Function to return the count of valid sub - strings","code":"< ? php function CountSubstring ( $ str , $ n ) {"}
{"text":"Variable ans to store all the possible substrings Initialize its value as total number of substrings that can be formed from the given string","code":"$ ans = ( $ n * ( $ n + 1 ) ) \/ 2 ;"}
{"text":"Stores recent index of the characters","code":"$ a_index = 0 ; $ b_index = 0 ; $ c_index = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If character is a update a 's index  and the variable ans","code":"if ( $ str [ $ i ] == ' a ' ) { $ a_index = $ i + 1 ; $ ans -= min ( $ b_index , $ c_index ) ; }"}
{"text":"If character is b update b 's index  and the variable ans","code":"else if ( $ str [ $ i ] == ' b ' ) { $ b_index = $ i + 1 ; $ ans -= min ( $ a_index , $ c_index ) ; }"}
{"text":"If character is c update c 's index  and the variable ans","code":"else { $ c_index = $ i + 1 ; $ ans -= min ( $ a_index , $ b_index ) ; } } return $ ans ; }"}
{"text":"Driver code","code":"{ $ str = str_split ( \" babac \" ) ; $ n = sizeof ( $ str ) ; echo ( CountSubstring ( $ str , $ n ) ) ; }"}
{"text":"Function that returns true is str is valid","code":"< ? php function isValid ( $ str , $ len ) {"}
{"text":"Assuming the string is binary If any two consecutive characters are equal then the string is invalid","code":"for ( $ i = 1 ; $ i < $ len ; $ i ++ ) { if ( $ str [ $ i ] == $ str [ $ i - 1 ] ) return false ; }"}
{"text":"If the string is alternating","code":"return true ; }"}
{"text":"Driver code","code":"$ str = \"0110\" ; $ len = strlen ( $ str ) ; if ( isValid ( $ str , $ len ) ) echo \" Valid \" ; else echo \" Invalid \" ; ? >"}
{"text":"This function checks if there exists some character which appears in all K length substrings","code":"< ? php function check ( $ s , $ K ) {"}
{"text":"Iterate over all possible characters","code":"for ( $ ch = 0 ; $ ch < 26 ; $ ch ++ ) { $ c = chr ( ord ( ' a ' ) + $ ch ) ;"}
{"text":"stores the last occurrence","code":"$ last = -1 ;"}
{"text":"set answer as true ;","code":"$ found = true ; for ( $ i = 0 ; $ i < $ K ; $ i ++ ) if ( $ s [ $ i ] == $ c ) $ last = $ i ;"}
{"text":"No occurrence found of current character in first substring of length K","code":"if ( $ last == -1 ) continue ;"}
{"text":"Check for every last substring of length K where last occurr - ence exists in substring","code":"for ( $ i = $ K ; $ i < strlen ( $ s ) ; $ i ++ ) { if ( $ s [ $ i ] == $ c ) $ last = $ i ;"}
{"text":"If last occ is not present in substring","code":"if ( $ last <= ( $ i - $ K ) ) { $ found = false ; break ; } }"}
{"text":"current character is K amazing","code":"if ( $ found ) return 1 ; } return 0 ; }"}
{"text":"This function performs binary search over the answer to minimise it","code":"function binarySearch ( $ s ) { $ low = 1 ; $ high = strlen ( $ s ) ; while ( $ low <= $ high ) { $ mid = ( $ high + $ low ) >> 1 ;"}
{"text":"Check if answer is found try to minimise it","code":"if ( check ( $ s , $ mid ) ) { $ ans = $ mid ; $ high = $ mid - 1 ; } else $ low = $ mid + 1 ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ s = \" abcde \" ; echo binarySearch ( $ s ) . \" STRNEWLINE \" ; $ s = \" aaaa \" ; echo binarySearch ( $ s ) . \" STRNEWLINE \" ; ? >"}
{"text":"Pre - computed values of segment used by digit 0 to 9.","code":"< ? php $ seg = array ( 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 6 ) ;"}
{"text":"Check if it is possible to display the number","code":"function LedRequired ( $ s , $ led ) { $ count = 0 ; global $ seg ;"}
{"text":"Finding sum of the segments used by each digit of the number","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; ++ $ i ) { $ count += $ seg [ ord ( $ s [ $ i ] ) - 48 ] ; } if ( $ count <= $ led ) return \" YES \" ; else return \" NO \" ; }"}
{"text":"Driver Code","code":"$ S = \"123456789\" ; $ led = 20 ;"}
{"text":"Function call to print required answer","code":"echo LedRequired ( $ S , $ led ) ; ? >"}
{"text":"Returns the total sum of occurrences of all vowels","code":"< ? php function vowel_calc ( $ s ) { $ n = strlen ( $ s ) ; $ arr = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ i == 0 )"}
{"text":"No . of occurrences of 0 th character in all the substrings","code":"$ arr [ $ i ] = $ n ; else"}
{"text":"No . of occurrences of ith character in all the substrings","code":"$ arr [ $ i ] = ( $ n - $ i ) + $ arr [ $ i - 1 ] - $ i ; } $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Check if ith character is a vowel","code":"if ( $ s [ $ i ] == ' a ' $ s [ $ i ] == ' e ' $ s [ $ i ] == ' i ' $ s [ $ i ] == ' o ' $ s [ $ i ] == ' u ' ) $ sum += $ arr [ $ i ] ; }"}
{"text":"Return the total sum of occurrences of vowels","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ s = \" daceh \" ; echo ( vowel_calc ( $ s ) ) ; ? >"}
{"text":"check if a number is a palindrome","code":"< ? php function ispalindrome ( $ x ) { $ ans = 0 ; $ temp = $ x ; while ( $ temp > 0 ) { $ ans = ( 10 * $ ans ) + ( $ temp % 10 ) ; $ temp = ( int ) ( $ temp \/ 10 ) ; } return $ ans == $ x ; }"}
{"text":"Function to return required count of palindromes","code":"function SuperPalindromes ( $ L , $ R ) {"}
{"text":"Range [ L , R ]","code":"$ L = ( int ) $ L ; $ R = ( int ) $ R ;"}
{"text":"Upper limit","code":"$ LIMIT = 100000 ; $ ans = 0 ;"}
{"text":"count odd length palindromes","code":"for ( $ i = 0 ; $ i < $ LIMIT ; $ i ++ ) {"}
{"text":"if s = '1234'","code":"$ s = ( string ) $ i ; $ rs = substr ( $ s , 0 , strlen ( $ s ) - 1 ) ;"}
{"text":"then , t = '1234321'","code":"$ p = $ s . strrev ( $ rs ) ; $ p_sq = ( int ) $ p * * 2 ; if ( $ p_sq > $ R ) { break ; } if ( $ p_sq >= $ L and ispalindrome ( $ p_sq ) ) { $ ans = $ ans + 1 ; } }"}
{"text":"count even length palindromes","code":"for ( $ i = 0 ; $ i < $ LIMIT ; $ i ++ ) {"}
{"text":"if s = '1234'","code":"$ s = ( string ) $ i ;"}
{"text":"then , t = '12344321'","code":"$ p = $ s . strrev ( $ s ) ; $ p_sq = ( int ) $ p * * 2 ; if ( $ p_sq > $ R ) { break ; } if ( $ p_sq >= $ L and ispalindrome ( $ p_sq ) ) { $ ans = $ ans + 1 ; } }"}
{"text":"Return count of super - palindromes","code":"return $ ans ; }"}
{"text":"Driver Code","code":"$ L = \"4\" ; $ R = \"1000\" ;"}
{"text":"function call to get required answer","code":"echo SuperPalindromes ( $ L , $ R ) ; ? >"}
{"text":"Function that counts all the sub - strings of length ' k ' which have all identical characters","code":"< ? php function solve ( $ s , $ k ) {"}
{"text":"count of sub - strings , length , initial position of sliding window","code":"$ count = 0 ; $ length = 0 ; $ pos = 0 ;"}
{"text":"map to store the frequency of the characters of sub - string","code":"$ m = array ( ) ; for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"increase the frequency of the character and length of the sub - string","code":"$ m [ $ s [ $ i ] ] ++ ; $ length ++ ;"}
{"text":"if the length of the sub - string is greater than K","code":"if ( $ length > $ k ) {"}
{"text":"remove the character from the beginning of sub - string","code":"$ m [ $ s [ $ pos ++ ] ] -- ; $ length -- ; }"}
{"text":"if the length of the sub string is equal to k and frequency of one of its characters is equal to the length of the sub - string i . e . all the characters are same increase the count","code":"if ( $ length == $ k && $ m [ $ s [ $ i ] ] == $ length ) $ count ++ ; }"}
{"text":"display the number of valid sub - strings","code":"echo $ count . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ s = \" aaaabbbccdddd \" ; $ k = 4 ; solve ( $ s , $ k ) ; ? >"}
{"text":"Get the String","code":"< ? php $ str = \" A \u2581 computer \u2581 science \u2581 portal \u2581 for \u2581 geeks \" ;"}
{"text":"Traverse the string character by character .","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; ++ $ i ) {"}
{"text":"Changing the ith character to ' - ' if it 's a space.","code":"if ( $ str [ $ i ] == ' \u2581 ' ) { $ str [ $ i ] = ' - ' ; } }"}
{"text":"Print the modified string .","code":"echo $ str . \" STRNEWLINE \" ;"}
{"text":"PHP program to check if any permutation of a large number is divisible by 8 or not","code":"< ? php error_reporting ( 0 ) ;"}
{"text":"Function to check if any permutation of a large number is divisible by 8","code":"function solve ( $ n , $ l ) {"}
{"text":"Less than three digit number can be checked directly .","code":"if ( $ l < 3 ) { if ( intval ( $ n ) % 8 == 0 ) return true ;"}
{"text":"check for the reverse of a number","code":"strrev ( $ n ) ; if ( intval ( $ n ) % 8 == 0 ) return true ; return false ; }"}
{"text":"Stores the Frequency of characters in the n .","code":"$ hash [ 10 ] = array ( 0 ) ; for ( $ i = 0 ; $ i < $ l ; $ i ++ ) $ hash [ $ n [ $ i ] - '0' ] ++ ;"}
{"text":"Iterates for all three digit numbers divisible by 8","code":"for ( $ i = 104 ; $ i < 1000 ; $ i += 8 ) { $ dup = $ i ;"}
{"text":"stores the frequency of all single digit in three - digit number","code":"$ freq [ 10 ] = array ( 0 ) ; $ freq [ $ dup % 10 ] ++ ; $ dup = $ dup \/ 10 ; $ freq [ $ dup % 10 ] ++ ; $ dup = $ dup \/ 10 ; $ freq [ $ dup % 10 ] ++ ; $ dup = $ i ;"}
{"text":"check if the original number has the digit","code":"if ( $ freq [ $ dup % 10 ] > $ hash [ $ dup % 10 ] ) continue ; $ dup = $ dup \/ 10 ; if ( $ freq [ $ dup % 10 ] > $ hash [ $ dup % 10 ] ) continue ; $ dup = $ dup \/ 10 ; if ( $ freq [ $ dup % 10 ] > $ hash [ $ dup % 10 ] ) continue ; return true ; }"}
{"text":"when all are checked its not possible","code":"return false ; }"}
{"text":"Driver Code","code":"$ number = \"31462708\" ; $ l = strlen ( $ number ) ; if ( solve ( $ number , $ l ) ) echo \" Yes \" ; else echo \" No \" ;"}
{"text":"Function to find the new string thus formed by removing characters","code":"< ? php function newString ( $ s , $ k ) {"}
{"text":"new string","code":"$ X = \" \" ;"}
{"text":"Remove characters until the string is empty","code":"while ( strlen ( $ s ) > 0 ) { $ temp = $ s [ 0 ] ;"}
{"text":"Traverse to find the smallest character in the first k characters","code":"for ( $ i = 1 ; $ i < $ k && $ i < strlen ( $ s ) ; $ i ++ ) { if ( $ s [ $ i ] < $ temp ) { $ temp = $ s [ $ i ] ; } }"}
{"text":"append the smallest character","code":"$ X = $ X . $ temp ;"}
{"text":"removing the lexicographically smallest character from the string","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) { if ( $ s [ $ i ] == $ temp ) { $ s = substr ( $ s , 0 , $ i ) . substr ( $ s , $ i + 1 , strlen ( $ s ) ) ; break ; } } } return $ X ; }"}
{"text":"Driver code","code":"$ s = \" gaurang \" ; $ k = 3 ; echo ( newString ( $ s , $ k ) ) ; ? >"}
{"text":"utility function","code":"< ? php function strToBinary ( $ s ) { $ n = strlen ( $ s ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"convert each char to ASCII value","code":"$ val = ord ( $ s [ $ i ] ) ;"}
{"text":"Convert ASCII value to binary","code":"$ bin = \" \" ; while ( $ val > 0 ) { ( $ val % 2 ) ? $ bin = $ bin . '1' : $ bin = $ bin . '0' ; $ val = floor ( $ val \/ 2 ) ; } for ( $ x = strlen ( $ bin ) - 1 ; $ x >= 0 ; $ x -- ) echo $ bin [ $ x ] ; echo \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ s = \" geeks \" ; strToBinary ( $ s ) ; ? >"}
{"text":"Function which computes the sequence","code":"< ? php function printSequence ( & $ arr , $ input ) { $ output = \" \" ;"}
{"text":"length of input string","code":"$ n = strlen ( $ input ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Checking for space","code":"if ( $ input [ $ i ] == ' \u2581 ' ) $ output = $ output + \"0\" ; else {"}
{"text":"Calculating index for each character","code":"$ position = ord ( $ input [ $ i ] ) - ord ( ' A ' ) ; $ output = $ output . $ arr [ $ position ] ; } }"}
{"text":"Output sequence","code":"return $ output ; }"}
{"text":"storing the sequence in array","code":"$ str = array ( \"2\" , \"22\" , \"222\" , \"3\" , \"33\" , \"333\" , \"4\" , \"44\" , \"444\" , \"5\" , \"55\" , \"555\" , \"6\" , \"66\" , \"666\" , \"7\" , \"77\" , \"777\" , \"7777\" , \"8\" , \"88\" , \"888\" , \"9\" , \"99\" , \"999\" , \"9999\" ) ; $ input = \" GEEKSFORGEEKS \" ; echo printSequence ( $ str , $ input ) ; ? >"}
{"text":"Function to check even or odd .","code":"< ? php function isEven ( $ s ) { $ l = strlen ( $ s ) ;"}
{"text":"Loop to traverse number from LSB","code":"$ dotSeen = false ; for ( $ i = $ l - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"We ignore trailing 0 s after dot","code":"if ( $ s [ $ i ] == '0' && $ dotSeen == false ) continue ;"}
{"text":"If it is ' . ' we will check next digit and it means decimal part is traversed .","code":"if ( $ s [ $ i ] == ' . ' ) { $ dotSeen = true ; continue ; }"}
{"text":"If digit is divisible by 2 means even number .","code":"if ( ( $ s [ $ i ] - '0' ) % 2 == 0 ) return true ; return false ; } }"}
{"text":"Driver Code","code":"$ s = \"100.70\" ; if ( isEven ( $ s ) ) echo \" Even \" ; else echo \" Odd \" ; ? >"}
{"text":"PHP program to find the length of the smallest substring consisting of maximum distinct characters","code":"< ? php $ NO_OF_CHARS = 256 ;"}
{"text":"Find maximum distinct characters in any string","code":"function max_distinct_char ( $ str , $ n ) { global $ NO_OF_CHARS ;"}
{"text":"Initialize all character 's count with 0","code":"$ count = array_fill ( 0 , $ NO_OF_CHARS , 0 ) ;"}
{"text":"Increase the count in array if a character is found","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count [ ord ( $ str [ $ i ] ) ] ++ ; $ max_distinct = 0 ; for ( $ i = 0 ; $ i < $ NO_OF_CHARS ; $ i ++ ) if ( $ count [ $ i ] != 0 ) $ max_distinct ++ ; return $ max_distinct ; } function smallesteSubstr_maxDistictChar ( $ str ) {"}
{"text":"size of given string","code":"$ n = strlen ( $ str ) ;"}
{"text":"Find maximum distinct characters in any string","code":"$ max_distinct = max_distinct_char ( $ str , $ n ) ;"}
{"text":"result","code":"$ minl = $ n ;"}
{"text":"Brute force approach to find all substrings","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ subs = substr ( $ str , $ i , $ j ) ; $ subs_lenght = strlen ( $ subs ) ; $ sub_distinct_char = max_distinct_char ( $ subs , $ subs_lenght ) ;"}
{"text":"We have to check here both conditions together 1. substring ' s \u2581 distinct \u2581 characters \u2581 is \u2581 equal \u2581 \u2581 to \u2581 maximum \u2581 distinct \u2581 characters \u2581 \u2581 2 . \u2581 substring ' s length should be minimum","code":"if ( $ subs_lenght < $ minl && $ max_distinct == $ sub_distinct_char ) { $ minl = $ subs_lenght ; } } } return $ minl ; }"}
{"text":"Input String","code":"$ str = \" AABBBCBB \" ; $ len = smallesteSubstr_maxDistictChar ( $ str ) ; echo \" \u2581 The \u2581 length \u2581 of \u2581 the \u2581 smallest \u2581 substring \" . \" \u2581 consisting \u2581 of \u2581 maximum \u2581 distinct \u2581 characters \u2581 : \u2581 \" . $ len ; ? >"}
{"text":"Evaluates boolean expression and returns the result","code":"< ? php function evaluateBoolExpr ( $ s ) { $ n = strlen ( $ s ) ;"}
{"text":"Traverse all operands by jumping a character after every iteration .","code":"for ( $ i = 0 ; $ i < $ n ; $ i += 2 ) {"}
{"text":"If operator next to current operand is AND .","code":"if ( ( $ i + 1 ) < $ n && $ s [ $ i + 1 ] == ' A ' ) { if ( $ s [ $ i + 2 ] == '0' $ s [ $ i ] == '0' ) $ s [ $ i + 2 ] = '0' ; else $ s [ $ i + 2 ] = '1' ; }"}
{"text":"If operator next to current operand is OR .","code":"else if ( ( $ i + 1 ) < $ n && $ s [ $ i + 1 ] = = ' B ' ) { if ( $ s [ $ i + 2 ] == '1' $ s [ $ i ] == '1' ) $ s [ $ i + 2 ] = '1' ; else $ s [ $ i + 2 ] = '0' ; }"}
{"text":"If operator next to current operand is XOR ( Assuming a valid input )","code":"else { if ( ( $ i + 2 ) < $ n && $ s [ $ i + 2 ] == $ s [ $ i ] ) $ s [ $ i + 2 ] = '0' ; else $ s [ $ i + 2 ] = '1' ; } } return $ s [ $ n - 1 ] - '0' ; }"}
{"text":"Driver code","code":"$ s = \"1C1B1B0A0\" ; echo evaluateBoolExpr ( $ s ) ;"}
{"text":"Returns - 1 if all characters of str are unique . Assumptions : ( 1 ) str contains only characters from ' a ' to ' z ' ( 2 ) integers are stored using 32 bits","code":"< ? php function FirstRepeated ( $ str ) {"}
{"text":"An integer to store presence \/ absence of 26 characters using its 32 bits .","code":"$ checker = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; ++ $ i ) { $ val = ( ord ( $ str [ $ i ] ) - ord ( ' a ' ) ) ;"}
{"text":"If bit corresponding to current character is already set","code":"if ( ( $ checker & ( 1 << $ val ) ) > 0 ) return $ i ;"}
{"text":"set bit in checker","code":"$ checker |= ( 1 << $ val ) ; } return -1 ; }"}
{"text":"Driver code","code":"$ s = \" abcfdeacf \" ; $ i = FirstRepeated ( $ s ) ; if ( $ i != -1 ) echo \" Char \u2581 = \u2581 \" . $ s [ $ i ] . \" \u2581 and \u2581 Index \u2581 = \u2581 \" . $ i ; else echo \" No \u2581 repeated \u2581 Char \" ; ? >"}
{"text":"Return the even number substrings .","code":"< ? php function evenNumSubstring ( $ str ) { $ len = strlen ( $ str ) ; $ count = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ temp = $ str [ $ i ] - '0' ;"}
{"text":"If current digit is even , add count of substrings ending with it . The count is ( i + 1 )","code":"if ( $ temp % 2 == 0 ) $ count += ( $ i + 1 ) ; } return $ count ; }"}
{"text":"Driver Code","code":"$ str = \"1234\" ; echo evenNumSubstring ( $ str ) , \" STRNEWLINE \" ; ? >"}
{"text":"Returns true if str1 [ ] is a subsequence of str2 [ ] . m is length of str1 and n is length of str2","code":"< ? php function isSubSequence ( $ str1 , $ str2 ) { $ m = strlen ( $ str1 ) ; $ n = strlen ( $ str2 ) ;"}
{"text":"Traverse str2 and str1 , and compare current character of str2 with first unmatched char of str1 , if matched then move ahead in str1","code":"for ( $ i = 0 ; $ i < $ n && $ j < $ m ; $ i ++ ) if ( $ str1 [ $ j ] == $ str2 [ $ i ] ) $ j ++ ;"}
{"text":"If all characters of str1 were found in str2","code":"return ( $ j == $ m ) ; }"}
{"text":"Returns the longest string in dictionary which is a subsequence of str .","code":"function findLongestString ( $ dict , $ str ) { $ result = \" \" ; $ length = 0 ;"}
{"text":"Traverse through all words of dictionary","code":"foreach ( $ dict as $ word ) {"}
{"text":"If current word is subsequence of str and is largest such word so far .","code":"if ( $ length < strlen ( $ word ) && isSubSequence ( $ word , $ str ) ) { $ result = $ word ; $ length = strlen ( $ word ) ; } }"}
{"text":"Return longest string","code":"return $ result ; }"}
{"text":"Driver code","code":"$ dict = array ( \" ale \" , \" apple \" , \" monkey \" , \" plea \" ) ; $ str = \" abpcplea \" ; echo findLongestString ( $ dict , $ str ) ; ? >"}
{"text":"Returns true if edit distance between s1 and s2 is one , else false","code":"< ? php function isEditDistanceOne ( $ s1 , $ s2 ) {"}
{"text":"Find lengths of given strings","code":"$ m = strlen ( $ s1 ) ; $ n = strlen ( $ s2 ) ;"}
{"text":"If difference between lengths is more than 1 , then strings can 't  be at one distance","code":"if ( abs ( $ m - $ n ) > 1 ) return false ;"}
{"text":"Count of edits","code":"$ count = 0 ; $ i = 0 ; $ j = 0 ; while ( $ i < $ m && $ j < $ n ) {"}
{"text":"If current characters don 't match","code":"if ( $ s1 [ $ i ] != $ s2 [ $ j ] ) { if ( $ count == 1 ) return false ;"}
{"text":"If length of one string is more , then only possible edit is to remove a character","code":"if ( $ m > $ n ) $ i ++ ; else if ( $ m < $ n ) $ j ++ ;"}
{"text":"If lengths of both strings is same","code":"else { $ i ++ ; $ j ++ ; }"}
{"text":"Increment count of edits","code":"$ count ++ ; }"}
{"text":"If current characters match","code":"else { $ i ++ ; $ j ++ ; } }"}
{"text":"If last character is extra in any string","code":"if ( $ i < $ m $ j < $ n ) $ count ++ ; return $ count == 1 ; }"}
{"text":"Driver Code","code":"$ s1 = \" gfg \" ; $ s2 = \" gf \" ; if ( isEditDistanceOne ( $ s1 , $ s2 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"A simple PHP program to count number of substrings starting and ending with 1","code":"< ? php function countSubStr ( $ str ) {"}
{"text":"Initialize result","code":"$ res = 0 ;"}
{"text":"Pick a starting point","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] == '1' ) {"}
{"text":"Search for all possible ending point","code":"for ( $ j = $ i + 1 ; $ j < strlen ( $ str ) ; $ j ++ ) if ( $ str [ $ j ] == '1' ) $ res ++ ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ str = \"00100101\" ; echo countSubStr ( $ str ) ; ? >"}
{"text":"Recursive PHP program to compute modular power","code":"< ? php function exponentMod ( $ A , $ B , $ C ) {"}
{"text":"Base cases","code":"if ( $ A == 0 ) return 0 ; if ( $ B == 0 ) return 1 ;"}
{"text":"If B is even","code":"if ( $ B % 2 == 0 ) { $ y = exponentMod ( $ A , $ B \/ 2 , $ C ) ; $ y = ( $ y * $ y ) % $ C ; }"}
{"text":"If B is odd","code":"else { $ y = $ A % $ C ; $ y = ( $ y * exponentMod ( $ A , $ B - 1 , $ C ) % $ C ) % $ C ; } return ( ( $ y + $ C ) % $ C ) ; }"}
{"text":"Driver Code","code":"$ A = 2 ; $ B = 5 ; $ C = 13 ; echo \" Power \u2581 is \u2581 \" . exponentMod ( $ A , $ B , $ C ) ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"Initialize result","code":"$ res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"$ x = $ x % $ p ; if ( $ x == 0 ) return 0 ; while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now","code":"y = $ y \/ 2 $ y = $ y >> 1 ; $ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Driver Code","code":"$ x = 2 ; $ y = 5 ; $ p = 13 ; echo \" Power \u2581 is \u2581 \" , power ( $ x , $ y , $ p ) ; ? >"}
{"text":"Function to find the area of the triangle","code":"< ? php function trianglearea ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"area of the triangle","code":"$ area = ( 3 * sqrt ( 3 ) * pow ( $ a , 2 ) ) \/ 4 ; return $ area ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo trianglearea ( $ a ) ; ? >"}
{"text":"Function to find equation of ellipse .","code":"< ? php function equation_ellipse ( $ x1 , $ y1 , $ a , $ b , $ c , $ e ) { $ t = ( $ a * $ a ) + ( $ b * $ b ) ; $ a1 = $ t - $ e * ( $ a * $ a ) ; $ b1 = $ t - $ e * ( $ b * $ b ) ; $ c1 = ( -2 * $ t * $ x1 ) - ( 2 * $ e * $ c * $ a ) ; $ d1 = ( -2 * $ t * $ y1 ) - ( 2 * $ e * $ c * $ b ) ; $ e1 = -2 * $ e * $ a * $ b ; $ f1 = ( - $ e * $ c * $ c ) + ( $ t * $ x1 * $ x1 ) + ( $ t * $ y1 * $ y1 ) ; $ fixed ; echo \" Equation \u2581 of \u2581 ellipse \u2581 is \u2581 STRNEWLINE \" , $ a1 , \" \u2581 x ^ 2 \u2581 + \u2581 \" , $ b1 , \" \u2581 y ^ 2 \u2581 + \u2581 \" , $ c1 , \" \u2581 x \u2581 + \u2581 \" , $ d1 , \" \u2581 y \u2581 + \u2581 \" , $ e1 , \" \u2581 xy \u2581 + \u2581 \" , $ f1 , \" \u2581 = \u2581 0\" ; }"}
{"text":"Driver Code","code":"$ x1 = 1 ; $ y1 = 1 ; $ a = 1 ; $ b = -1 ; $ c = 3 ; $ e = 0.5 * 0.5 ; equation_ellipse ( $ x1 , $ y1 , $ a , $ b , $ c , $ e ) ; ? >"}
{"text":"Function return the area of circle inscribed in equilateral triangle","code":"< ? php function circle_inscribed ( $ a ) { return 3.14 * ( $ a * $ a ) \/ 12 ; }"}
{"text":"Driver code","code":"$ a = 4 ; echo circle_inscribed ( $ a ) ;"}
{"text":"Function to find the volume","code":"< ? php function findVolume ( $ u , $ v , $ w , $ U , $ V , $ W , $ b ) {"}
{"text":"Steps to calculate volume of a Tetrahedron using formula","code":"$ uPow = pow ( $ u , 2 ) ; $ vPow = pow ( $ v , 2 ) ; $ wPow = pow ( $ w , 2 ) ; $ UPow = pow ( $ U , 2 ) ; $ VPow = pow ( $ V , 2 ) ; $ WPow = pow ( $ W , 2 ) ; $ a = 4 * ( $ uPow * $ vPow * $ wPow ) - $ uPow * pow ( ( $ vPow + $ wPow - $ UPow ) , 2 ) - $ vPow * pow ( ( $ wPow + $ uPow - $ VPow ) , 2 ) - $ wPow * pow ( ( $ uPow + $ vPow - $ WPow ) , 2 ) + ( $ vPow + $ wPow - $ UPow ) * ( $ wPow + $ uPow - $ VPow ) * ( $ uPow + $ vPow - $ WPow ) ; $ vol = sqrt ( $ a ) ; $ vol \/= $ b ; echo $ vol ; }"}
{"text":"edge lengths","code":"$ u = 1000 ; $ v = 1000 ; $ w = 1000 ; $ U = 3 ; $ V = 4 ; $ W = 5 ; $ b = 12 ; findVolume ( $ u , $ v , $ w , $ U , $ V , $ W , $ b ) ; ? >"}
{"text":"Function to check whether it is possible to make a regular polygon with a given angle .","code":"< ? php function makePolygon ( $ a ) {"}
{"text":"N denotes the number of sides of polygons possible","code":"$ n = 360 \/ ( 180 - $ a ) ; if ( $ n == ( int ) $ n ) echo \" YES \" ; else echo \" NO \" ; }"}
{"text":"Driver code","code":"$ a = 90 ;"}
{"text":"function to print the required answer","code":"makePolygon ( $ a ) ; ? >"}
{"text":"Thus function returns the quadrant number","code":"< ? php function getQuadrant ( $ X , $ Y , $ R , $ PX , $ PY ) {"}
{"text":"Coincides with center","code":"if ( $ PX == $ X and $ PY == $ Y ) return 0 ; $ val = pow ( ( $ PX - $ X ) , 2 ) + pow ( ( $ PY - $ Y ) , 2 ) ;"}
{"text":"Outside circle","code":"if ( $ val > pow ( $ R , 2 ) ) return -1 ;"}
{"text":"1 st quadrant","code":"if ( $ PX > $ X and $ PY >= $ Y ) return 1 ;"}
{"text":"2 nd quadrant","code":"if ( $ PX <= $ X and $ PY > $ Y ) return 2 ;"}
{"text":"3 rd quadrant","code":"if ( $ PX < $ X and $ PY <= $ Y ) return 3 ;"}
{"text":"4 th quadrant","code":"if ( $ PX >= $ X and $ PY < $ Y ) return 4 ; }"}
{"text":"Coordinates of centre","code":"$ X = 0 ; $ Y = 3 ;"}
{"text":"Radius of circle","code":"$ R = 2 ;"}
{"text":"Coordinates of the given po$","code":"$ PX = 1 ; $ PY = 4 ; $ ans = getQuadrant ( $ X , $ Y , $ R , $ PX , $ PY ) ; if ( $ ans == -1 ) echo \" Lies \u2581 Outside \u2581 the \u2581 circle \" ; else if ( $ ans == 0 ) echo \" Coincides \u2581 with \u2581 centre \" ; else echo $ ans , \" \u2581 Quadrant \" ; ? >"}
{"text":"Function to calculate hexadecagonal number","code":"< ? php function hexadecagonalNum ( $ n ) { return ( ( 14 * $ n * $ n ) - 12 * $ n ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo $ n , \" th \u2581 Hexadecagonal \u2581 number \u2581 : \u2581 \" ; echo hexadecagonalNum ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 9 ; echo $ n , \" th \u2581 Hexadecagonal \u2581 number \u2581 : \u2581 \" ; echo hexadecagonalNum ( $ n ) ;"}
{"text":"Function to calculate perimeter","code":"< ? php function perimeter ( $ diameter , $ height ) { return 2 * ( $ diameter + $ height ) ; }"}
{"text":"Driver Code","code":"$ diameter = 5 ; $ height = 10 ; echo ( \" Perimeter \u2581 = \u2581 \" ) ; echo ( perimeter ( $ diameter , $ height ) ) ; echo ( \" \u2581 units \" ) ; ? >"}
{"text":"coordinates of A","code":"< ? php $ ax = 5 ; $ ay = 0 ;"}
{"text":"coordinates of B","code":"$ bx = 1 ; $ by = 1 ;"}
{"text":"coordinates of C","code":"$ cx = 2 ; $ cy = 5 ; echo $ ax + $ bx - $ cx , \" , \u2581 \" , $ ay + $ by - $ cy , \" STRNEWLINE \" ; echo $ ax + $ cx - $ bx , \" , \u2581 \" , $ ay + $ cy - $ by , \" STRNEWLINE \" ; echo $ cx + $ bx - $ ax , \" , \u2581 \" , $ cy + $ by - $ ax ; ? >"}
{"text":"A utility function to calculate area of triangle formed by ( x1 , y1 ) , ( x2 , y2 ) and ( x3 , y3 )","code":"< ? php function area ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 ) { return abs ( ( $ x1 * ( $ y2 - $ y3 ) + $ x2 * ( $ y3 - $ y1 ) + $ x3 * ( $ y1 - $ y2 ) ) \/ 2.0 ) ; }"}
{"text":"A function to check whether point P ( x , y ) lies inside the rectangle formed by A ( x1 , y1 ) , B ( x2 , y2 ) , C ( x3 , y3 ) and D ( x4 , y4 )","code":"function check ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 , $ x4 , $ y4 , $ x , $ y ) {"}
{"text":"Calculate area of rectangle ABCD","code":"$ A = area ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 ) + area ( $ x1 , $ y1 , $ x4 , $ y4 , $ x3 , $ y3 ) ;"}
{"text":"Calculate area of triangle PAB","code":"$ A1 = area ( $ x , $ y , $ x1 , $ y1 , $ x2 , $ y2 ) ;"}
{"text":"Calculate area of triangle PBC","code":"$ A2 = area ( $ x , $ y , $ x2 , $ y2 , $ x3 , $ y3 ) ;"}
{"text":"Calculate area of triangle PCD","code":"$ A3 = area ( $ x , $ y , $ x3 , $ y3 , $ x4 , $ y4 ) ;"}
{"text":"Calculate area of triangle PAD","code":"$ A4 = area ( $ x , $ y , $ x1 , $ y1 , $ x4 , $ y4 ) ;"}
{"text":"Check if sum of A1 , A2 , A3 and A4 is same as A","code":"return ( $ A == $ A1 + $ A2 + $ A3 + $ A4 ) ; }"}
{"text":"Let us check whether the point P ( 10 , 15 ) lies inside the rectangle formed by A ( 0 , 10 ) , B ( 10 , 0 ) C ( 0 , - 10 ) D ( - 10 , 0 )","code":"if ( check ( 0 , 10 , 10 , 0 , 0 , -10 , -10 , 0 , 10 , 15 ) ) echo \" yes \" ; else echo \" no \" ; ? >"}
{"text":"Function for finding maximum pieces with n cuts .","code":"< ? php function findMaximumPieces ( $ n ) { return 1 + $ n * ( $ n + 1 ) \/ 2 ; }"}
{"text":"Driver code","code":"echo findMaximumPieces ( 3 ) ; ? >"}
{"text":"val [ ] is for storing maximum profit for each weight wt [ ] is for storing weights n number of item W maximum capacity of bag mat [ 2 ] [ W + 1 ] to store final result","code":"< ? php function KnapSack ( & $ val , & $ wt , $ n , $ W ) {"}
{"text":"matrix to store final result","code":"$ mat = array_fill ( 0 , 2 , array_fill ( 0 , $ W + 1 , NULL ) ) ;"}
{"text":"iterate through all items","code":"$ i = 0 ;"}
{"text":"one by one traverse each element","code":"while ( $ i < $ n ) {"}
{"text":"traverse all weights j <= W","code":"$ j = 0 ;"}
{"text":"if i is odd that mean till now we have odd number of elements so we store result in 1 th indexed row","code":"if ( $ i % 2 != 0 ) {"}
{"text":"check for each value","code":"{ while ( ++ $ j <= $ W )"}
{"text":"include element","code":"if ( $ wt [ $ i ] <= $ j ) $ mat [ 1 ] [ $ j ] = max ( $ val [ $ i ] + $ mat [ 0 ] [ $ j - $ wt [ $ i ] ] , $ mat [ 0 ] [ $ j ] ) ;"}
{"text":"exclude element","code":"else $ mat [ 1 ] [ $ j ] = $ mat [ 0 ] [ $ j ] ; } }"}
{"text":"if i is even that mean till now we have even number of elements so we store result in 0 th indexed row","code":"else { while ( ++ $ j <= $ W ) { if ( $ wt [ $ i ] <= $ j ) $ mat [ 0 ] [ $ j ] = max ( $ val [ $ i ] + $ mat [ 1 ] [ $ j - $ wt [ $ i ] ] , $ mat [ 1 ] [ $ j ] ) ; else $ mat [ 0 ] [ $ j ] = $ mat [ 1 ] [ $ j ] ; } } $ i ++ ; }"}
{"text":"Return mat [ 0 ] [ W ] if n is odd , else mat [ 1 ] [ W ]","code":"if ( $ n % 2 != 0 ) return $ mat [ 0 ] [ $ W ] ; else return $ mat [ 1 ] [ $ W ] ; }"}
{"text":"Driver Code","code":"$ val = array ( 7 , 8 , 4 ) ; $ wt = array ( 3 , 8 , 6 ) ; $ W = 10 ; $ n = 3 ; echo KnapSack ( $ val , $ wt , $ n , $ W ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function gcd ( $ a , $ b ) { return ( $ a % $ b ) ? gcd ( $ b , $ a % $ b ) : $ b ; }"}
{"text":"Utility function to print the contents of an array","code":"function printArr ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Function to find the required numbers","code":"function findNumbers ( $ arr , $ n ) {"}
{"text":"Sort array in decreasing order","code":"rsort ( $ arr ) ; $ freq = array_fill ( 0 , $ arr [ 0 ] + 1 , 0 ) ;"}
{"text":"Count frequency of each element","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ freq [ $ arr [ $ i ] ] ++ ;"}
{"text":"Size of the resultant array","code":"$ size = floor ( sqrt ( $ n ) ) ; $ brr = array_fill ( 0 , $ size , 0 ) ; $ l = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ freq [ $ arr [ $ i ] ] > 0 ) {"}
{"text":"Store the highest element in the resultant array","code":"$ brr [ $ l ] = $ arr [ $ i ] ;"}
{"text":"Decrement the frequency of that element","code":"$ freq [ $ brr [ $ l ] ] -- ; $ l ++ ; for ( $ j = 0 ; $ j < $ l ; $ j ++ ) { if ( $ i != $ j ) {"}
{"text":"Compute GCD","code":"$ x = gcd ( $ arr [ $ i ] , $ brr [ $ j ] ) ;"}
{"text":"Decrement GCD value by 2","code":"$ freq [ $ x ] -= 2 ; } } } } printArr ( $ brr , $ size ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 5 , 5 , 5 , 7 , 10 , 12 , 2 , 2 ) ; $ n = count ( $ arr ) ; findNumbers ( $ arr , $ n ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php function AlternateRearrange ( $ arr , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ;"}
{"text":"$v1 = array ( ) ; to insert even values $v2 = array ( ) ; to insert odd values","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] % 2 == 0 ) array_push ( $ v1 , $ arr [ $ i ] ) ; else array_push ( $ v2 , $ arr [ $ i ] ) ; $ index = 0 ; $ i = 0 ; $ j = 0 ; $ flag = false ;"}
{"text":"Set flag to true if first element is even","code":"if ( $ arr [ 0 ] % 2 == 0 ) $ flag = true ;"}
{"text":"Start rearranging array","code":"while ( $ index < $ n ) {"}
{"text":"If first element is even","code":"if ( $ flag == true ) { $ arr [ $ index ++ ] = $ v1 [ $ i ++ ] ; $ flag = ! $ flag ; }"}
{"text":"Else , first element is Odd","code":"else { $ arr [ $ index ++ ] = $ v2 [ $ j ++ ] ; $ flag = ! $ flag ; } }"}
{"text":"Print the rearranged array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 9 , 8 , 13 , 2 , 19 , 14 ) ; $ n = sizeof ( $ arr ) ; AlternateRearrange ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the number to be added","code":"< ? php function getNumToAdd ( $ arr , $ n ) { sort ( $ arr ) ; $ d = $ arr [ 1 ] - $ arr [ 0 ] ; $ numToAdd = -1 ; $ numAdded = false ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) { $ diff = $ arr [ $ i ] - $ arr [ $ i - 1 ] ;"}
{"text":"If difference of the current consecutive elements is different from the common difference","code":"if ( $ diff != $ d ) {"}
{"text":"If number has already been chosen then it 's not possible  to add another number","code":"if ( $ numAdded ) return -1 ;"}
{"text":"If the current different is twice the common difference then a number can be added midway from current and previous element","code":"if ( $ diff == 2 * $ d ) { $ numToAdd = $ arr [ $ i ] - $ d ;"}
{"text":"Number has been chosen","code":"$ numAdded = true ; }"}
{"text":"It 's not possible to maintain  the common difference","code":"else return -1 ; } }"}
{"text":"Return last element + common difference if no element is chosen and the array is already in AP","code":"if ( $ numToAdd == -1 ) return ( $ arr [ $ n - 1 ] + $ d ) ;"}
{"text":"Else return the chosen number","code":"return $ numToAdd ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 3 , 5 , 7 , 11 , 13 , 15 ) ; $ n = sizeof ( $ arr ) ; echo getNumToAdd ( $ arr , $ n ) ; ? >"}
{"text":"Function to count the total number of items","code":"< ? php function items ( $ n , $ a ) {"}
{"text":"Sort the prices","code":"sort ( $ a ) ;"}
{"text":"Choose the last element","code":"$ z = $ a [ $ n - 1 ] ;"}
{"text":"Initial count of item","code":"$ x = 1 ;"}
{"text":"Sum to keep track of the total price of free items","code":"$ s = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ s += $ a [ $ i ] ;"}
{"text":"If total is less than or equal to z then we will add 1 to the answer","code":"if ( $ s <= $ z ) $ x += 1 ; else break ; } return $ x ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ a = array ( 5 , 3 , 1 , 5 , 6 ) ; echo items ( $ n , $ a ) ; ? >"}
{"text":"Function to return number of boxes","code":"< ? php function numBoxes ( $ A , $ n , $ K ) {"}
{"text":"Sort the boxes in ascending order","code":"sort ( $ A ) ;"}
{"text":"Try to fit smallest box with current heaviest box ( from right side )","code":"$ i = 0 ; $ j = $ n - 1 ; $ ans = 0 ; while ( $ i <= $ j ) { $ ans ++ ; if ( $ A [ $ i ] + $ A [ $ j ] <= $ K ) $ i ++ ; $ j -- ; } return $ ans ; }"}
{"text":"Driver program","code":"$ A = array ( 3 , 2 , 2 , 1 ) ; $ K = 3 ; $ n = sizeof ( $ A ) \/ sizeof ( $ A [ 0 ] ) ; echo numBoxes ( $ A , $ n , $ K ) ; ? >"}
{"text":"Function to find profit","code":"< ? php function solve ( $ N , $ M , & $ cp , & $ sp ) { $ profit = array_fill ( 0 , $ N , NULL ) ;"}
{"text":"Calculating profit for each gadget","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ profit [ $ i ] = $ sp [ $ i ] - $ cp [ $ i ] ;"}
{"text":"sort the profit array in descending order","code":"rsort ( $ profit ) ;"}
{"text":"variable to calculate total profit","code":"$ sum = 0 ;"}
{"text":"check for best M profits","code":"for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { if ( $ profit [ $ i ] > 0 ) $ sum += $ profit [ $ i ] ; else break ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ N = 5 ; $ M = 3 ; $ CP = array ( 5 , 10 , 35 , 7 , 23 ) ; $ SP = array ( 11 , 10 , 0 , 9 , 19 ) ; echo solve ( $ N , $ M , $ CP , $ SP ) ; ? >"}
{"text":"Function to generate largest possible number with given digits","code":"< ? php function findMaxNum ( & $ arr , $ n ) {"}
{"text":"sort the given array in descending order","code":"rsort ( $ arr ) ; $ num = $ arr [ 0 ] ;"}
{"text":"generate the number","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ num = $ num * 10 + $ arr [ $ i ] ; } return $ num ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 0 ) ; $ n = sizeof ( $ arr ) ; echo findMaxNum ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to count minimum number of partitions of size 2 and sum smaller than or equal to given key .","code":"< ? php function minimumSets ( $ arr , $ n , $ key ) { $ i ; $ j ;"}
{"text":"sort the array","code":"sort ( $ arr ) ;"}
{"text":"if sum of ith smaller and jth larger element is less than key , then pack both numbers in a set otherwise pack the jth larger number alone in the set","code":"for ( $ i = 0 , $ j = $ n - 1 ; $ i <= $ j ; ++ $ i ) if ( $ arr [ $ i ] + $ arr [ $ j ] <= $ key ) $ j -- ;"}
{"text":"After ending of loop i will contain minimum number of sets","code":"return $ i ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 5 , 3 , 4 ) ; $ n = count ( $ arr ) ; $ key = 5 ; echo minimumSets ( $ arr , $ n , $ key ) ; ? >"}
{"text":"return the minimum number of visible boxes","code":"< ? php function minimumBox ( $ arr , $ n ) {"}
{"text":"New Queue of integers .","code":"$ q = array ( ) ;"}
{"text":"sorting the array","code":"sort ( $ arr ) ; array_push ( $ q , $ arr [ 0 ] ) ;"}
{"text":"traversing the array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ now = $ q [ 0 ] ;"}
{"text":"checking if current element is greater than or equal to twice of front element","code":"if ( $ arr [ $ i ] >= 2 * $ now ) array_pop ( $ q ) ;"}
{"text":"Pushing each element of array","code":"array_push ( $ q , $ arr [ $ i ] ) ; } return count ( $ q ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 1 , 2 , 8 ) ; $ n = count ( $ arr ) ; echo minimumBox ( $ arr , $ n ) ; ? >"}
{"text":"PHP Code for Sort a binary array using one traversal","code":"< ? php function sortBinaryArray ( $ a , $ n ) { $ j = -1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if number is smaller than 1 then swap it with j - th number","code":"if ( $ a [ $ i ] < 1 ) { $ j ++ ; $ temp = $ a [ $ j ] ; $ a [ $ j ] = $ a [ $ i ] ; $ a [ $ i ] = $ temp ; } } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ a [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 ) ; $ n = count ( $ a ) ; sortBinaryArray ( $ a , $ n ) ; ? >"}
{"text":"finds the smallest number in arr [ ] that is repeated k times","code":"< ? php function findDuplicate ( $ arr , $ n , $ k ) {"}
{"text":"Since arr [ ] has numbers in range from 1 to MAX","code":"$ MAX = 1000 ; $ res = $ MAX + 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] > 0 ) {"}
{"text":"set count to 1 as number is present once","code":"$ count = 1 ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ i ] == $ arr [ $ j ] ) $ count += 1 ;"}
{"text":"If frequency of number is equal to ' k '","code":"if ( $ count == $ k ) $ res = min ( $ res , $ arr [ $ i ] ) ; } } return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 2 , 1 , 3 , 1 ) ; $ k = 2 ; $ n = count ( $ arr ) ; echo findDuplicate ( $ arr , $ n , $ k ) ; ? >"}
{"text":"finds the smallest number in arr [ ] that is repeated k times","code":"< ? php function findDuplicate ( $ arr , $ n , $ k ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ;"}
{"text":"Find the first element with exactly k occurrences .","code":"$ i = 0 ; while ( $ i < $ n ) { $ j ; $ count = 1 ; for ( $ j = $ i + 1 ; $ j < $ n && $ arr [ $ j ] == $ arr [ $ i ] ; $ j ++ ) $ count ++ ; if ( $ count == $ k ) return $ arr [ $ i ] ; $ i = $ j ; } return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 2 , 1 , 3 , 1 ) ; $ k = 2 ; $ n = sizeof ( $ arr ) ; echo ( findDuplicate ( $ arr , $ n , $ k ) ) ; ? >"}
{"text":"Returns true if it is possible to sort else false","code":"< ? php function checkForSorting ( $ arr , $ n ) { $ temp = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"We need to do something only if previousl element is greater","code":"if ( $ arr [ $ i ] > $ arr [ $ i + 1 ] ) { if ( $ arr [ $ i ] - $ arr [ $ i + 1 ] == 1 ) { $ temp = $ arr [ $ i ] ; $ arr [ $ i ] = $ arr [ $ i + 1 ] ; $ arr [ $ i + 1 ] = $ temp ; }"}
{"text":"If difference is more than one , then not possible","code":"else return false ; } } return true ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 0 , 3 , 2 ) ; $ n = sizeof ( $ arr ) ; if ( checkForSorting ( $ arr , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Return the K - th smallest element .","code":"< ? php function ksmallest ( $ arr , $ n , $ k ) {"}
{"text":"sort ( arr , arr + n ) ;","code":"sort ( $ arr ) ;"}
{"text":"Checking if k lies before 1 st element","code":"if ( $ k < $ arr [ 0 ] ) return $ k ;"}
{"text":"If k is the first element of array arr [ ] .","code":"if ( $ k == $ arr [ 0 ] ) return $ arr [ 0 ] + 1 ;"}
{"text":"If k is more than last element","code":"if ( $ k > $ arr [ $ n - 1 ] ) return $ k + $ n ;"}
{"text":"If first element of array is 1.","code":"if ( $ arr [ 0 ] == 1 ) $ k -- ;"}
{"text":"Reducing k by numbers before arr [ 0 ] .","code":"else $ k -= ( $ arr [ 0 ] - 1 ) ;"}
{"text":"Finding k 'th smallest element  after removing array elements.","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Finding count of element between i - th and ( i - 1 ) - th element .","code":"$ c = $ arr [ $ i ] - $ arr [ $ i - 1 ] - 1 ; if ( $ k <= $ c ) return $ arr [ $ i - 1 ] + $ k ; else $ k -= $ c ; } return $ arr [ $ n - 1 ] + $ k ; }"}
{"text":"Driver Code","code":"$ k = 1 ; $ arr = array ( 1 ) ; $ n = sizeof ( $ arr ) ; echo ksmallest ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Returns true if n is even , else odd","code":"< ? php function isEven ( $ n ) {"}
{"text":"n & 1 is 1 , then odd , else even","code":"return ( ! ( n & 1 ) ) ; }"}
{"text":"Driver code","code":"$ n = 101 ; if ( isEven ( $ n ) == true ) echo \" Even \" ; else echo \" Odd \" ; ? >"}
{"text":"PHP program to count number of times S appears as a subsequence in T","code":"< ? php function findSubsequenceCount ( $ S , $ T ) { $ m = strlen ( $ T ) ; $ n = strlen ( $ S ) ;"}
{"text":"T can 't appear as a subsequence in S","code":"if ( $ m > $ n ) return 0 ;"}
{"text":"mat [ i ] [ j ] stores the count of occurrences of T ( 1. . i ) in S ( 1. . j ) .","code":"$ mat = array ( array ( ) ) ;"}
{"text":"Initializing first column with all 0 s . An empty string can 't have another  string as suhsequence","code":"for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) $ mat [ $ i ] [ 0 ] = 0 ;"}
{"text":"Initializing first row with all 1 s . An empty string is subsequence of all .","code":"for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ mat [ 0 ] [ $ j ] = 1 ;"}
{"text":"Fill mat [ ] [ ] in bottom up manner","code":"for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"If last characters don 't match,  then value is same as the value  without last character in S.","code":"if ( $ T [ $ i - 1 ] != $ S [ $ j - 1 ] ) $ mat [ $ i ] [ $ j ] = $ mat [ $ i ] [ $ j - 1 ] ;"}
{"text":"Else value is obtained considering two cases . a ) All substrings without last character in S b ) All substrings without last characters in both .","code":"else $ mat [ $ i ] [ $ j ] = $ mat [ $ i ] [ $ j - 1 ] + $ mat [ $ i - 1 ] [ $ j - 1 ] ; } }"}
{"text":"uncomment this to print matrix mat for ( int i = 1 ; i <= m ; i ++ , cout << endl ) for ( int j = 1 ; j <= n ; j ++ ) cout << mat [ i ] [ j ] << \" \u2581 \" ;","code":"return $ mat [ $ m ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ T = \" ge \" ; $ S = \" geeksforgeeks \" ; echo findSubsequenceCount ( $ S , $ T ) . \" \" ;"}
{"text":"Function to check whether the matrices can be made strictly increasing with the given operation","code":"< ? php function Check ( $ a , $ b , $ n , $ m ) {"}
{"text":"Swap only when a [ i ] [ j ] > b [ i ] [ j ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ a [ $ i ] [ $ j ] > $ b [ $ i ] [ $ j ] ) { $ temp = $ a [ $ i ] [ $ j ] ; $ a [ $ i ] [ $ j ] = $ b [ $ i ] [ $ j ] ; $ b [ $ i ] [ $ j ] = $ temp ; } } }"}
{"text":"Check if rows are strictly increasing","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ m - 1 ; $ j ++ ) { if ( $ a [ $ i ] [ $ j ] >= $ a [ $ i ] [ $ j + 1 ] or $ b [ $ i ] [ $ j ] >= $ b [ $ i ] [ $ j + 1 ] ) return \" No \" ; } }"}
{"text":"Check if columns are strictly increasing","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ m ; $ j ++ ) { if ( $ a [ $ i ] [ $ j ] >= $ a [ $ i + 1 ] [ $ j ] or $ b [ $ i ] [ $ j ] >= $ b [ $ i + 1 ] [ $ j ] ) return \" No \" ; } } return \" Yes \" ; }"}
{"text":"Driver code","code":"$ n = 2 ; $ m = 2 ; $ a = array ( array ( 2 , 10 ) , array ( 11 , 5 ) ) ; $ b = array ( array ( 9 , 4 ) , array ( 3 , 12 ) ) ; print ( Check ( $ a , $ b , $ n , $ m ) ) ; ? >"}
{"text":"Function to return the required string","code":"< ? php function smallestString ( $ N , $ A ) {"}
{"text":"First character will always be ' a '","code":"$ ch = ' a ' ;"}
{"text":"To store the resultant string","code":"$ S = \" \" ;"}
{"text":"Since length of the string should be greater than 0 and first element of array should be 1","code":"if ( $ N < 1 $ A [ 0 ] != 1 ) { $ S = \" - 1\" ; return $ S ; } $ S . = $ ch ; $ ch ++ ;"}
{"text":"Check one by one all element of given prefix array","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { $ diff = $ A [ $ i ] - $ A [ $ i - 1 ] ;"}
{"text":"If the difference between any two consecutive elements of the prefix array is greater than 1 then there will be no such string possible that satisfies the given array Also , string cannot have more than 26 distinct characters","code":"if ( $ diff > 1 $ diff < 0 $ A [ $ i ] > 26 ) { $ S = \" - 1\" ; return $ S ; }"}
{"text":"If difference is 0 then the ( i + 1 ) th character will be same as the ith character","code":"else if ( $ diff == 0 ) $ S . = ' a ' ;"}
{"text":"If difference is 1 then the ( i + 1 ) th character will be different from the ith character","code":"else { $ S . = $ ch ; $ ch ++ ; } }"}
{"text":"Return the resultant string","code":"return $ S ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 1 , 2 , 3 , 3 ) ; $ n = sizeof ( $ arr ) ; echo ( smallestString ( $ n , $ arr ) ) ; ? >"}
{"text":"Function that returns true if num can be formed with the digits in digits [ ] array","code":"< ? php function canBePicked ( $ digits , $ num ) { $ copyDigits = array ( ) ;"}
{"text":"Copy of the digits array","code":"for ( $ i = 0 ; $ i < sizeof ( $ digits ) ; $ i ++ ) $ copyDigits [ $ i ] = $ digits [ $ i ] ; while ( $ num > 0 ) {"}
{"text":"Get last digit","code":"$ digit = $ num % 10 ;"}
{"text":"If digit array doesn 't contain  current digit","code":"if ( $ copyDigits [ $ digit ] == 0 ) return false ;"}
{"text":"One occurrence is used","code":"else $ copyDigits [ $ digit ] -- ;"}
{"text":"Remove the last digit","code":"$ num = floor ( $ num \/ 10 ) ; } return true ; }"}
{"text":"Function to return the count of required alphabets","code":"function countAlphabets ( $ n ) { $ count = 0 ;"}
{"text":"To store the occurrences of digits ( 0 - 9 )","code":"$ digits = array_fill ( 0 , 10 , 0 ) ; while ( $ n > 0 ) {"}
{"text":"Get last digit","code":"$ digit = $ n % 10 ;"}
{"text":"Update the occurrence of the digit","code":"$ digits [ $ digit ] ++ ;"}
{"text":"Remove the last digit","code":"$ n = floor ( $ n \/ 10 ) ; }"}
{"text":"If any lowercase character can be picked from the current digits","code":"for ( $ i = ord ( ' a ' ) ; $ i <= ord ( ' z ' ) ; $ i ++ ) if ( canBePicked ( $ digits , $ i ) ) $ count ++ ;"}
{"text":"If any uppercase character can be picked from the current digits","code":"for ( $ i = ord ( ' A ' ) ; $ i <= ord ( ' Z ' ) ; $ i ++ ) if ( canBePicked ( $ digits , $ i ) ) $ count ++ ;"}
{"text":"Return the required count of alphabets","code":"return $ count ; }"}
{"text":"Driver code","code":"$ n = 1623455078 ; echo countAlphabets ( $ n ) ; ? >"}
{"text":"Function to find gcd of two numbers","code":"< ? php function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to find two numbers whose sum and gcd is given","code":"function findTwoNumbers ( $ sum , $ gcd ) {"}
{"text":"sum != gcd checks that both the numbers are positive or not","code":"if ( __gcd ( $ gcd , $ sum - $ gcd ) == $ gcd && $ sum != $ gcd ) echo \" a = \" \u2581 , \u2581 min ( $ gcd , \u2581 $ sum \u2581 - \u2581 $ gcd ) , STRNEWLINE \" b = \" else echo ( -1 ) ; }"}
{"text":"Driver code","code":"$ sum = 8 ; $ gcd = 2 ; findTwoNumbers ( $ sum , $ gcd ) ; ? >"}
{"text":"Function to calculate the maximum distance between any city and its nearest station","code":"< ? php function findMaxDistance ( $ numOfCities , $ station , $ n ) {"}
{"text":"Initialize boolean list","code":"$ hasStation = array_fill ( 0 , $ numOfCities + 1 , false ) ;"}
{"text":"Assign True to cities containing station","code":"for ( $ city = 0 ; $ city < $ n ; $ city ++ ) { $ hasStation [ $ station [ $ city ] ] = true ; } $ dist = 0 ; $ maxDist = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ maxDist = min ( $ station [ $ i ] , $ maxDist ) ; } for ( $ city = 0 ; $ city < $ numOfCities ; $ city ++ ) { if ( $ hasStation [ $ city ] == true ) { $ maxDist = max ( ( int ) ( ( $ dist + 1 ) \/ 2 ) , $ maxDist ) ; $ dist = 0 ; } else $ dist += 1 ; } return max ( $ maxDist , $ dist ) ; }"}
{"text":"Driver code","code":"$ numOfCities = 6 ; $ station = array ( 3 , 1 ) ; $ n = count ( $ station ) ; echo \" Max \u2581 Distance : \u2581 \" . findMaxDistance ( $ numOfCities , $ station , $ n ) ; ? >"}
{"text":"Function that prints the required sequence","code":"< ? php function split ( $ x , $ n ) {"}
{"text":"If we cannot split the number into exactly ' N ' parts","code":"if ( $ x < $ n ) echo ( -1 ) ;"}
{"text":"If x % n == 0 then the minimum difference is 0 and all numbers are x \/ n","code":"else if ( $ x % $ n == 0 ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo ( $ x \/ $ n ) ; echo ( \" \u2581 \" ) ; } } else {"}
{"text":"upto n - ( x % n ) the values will be x \/ n after that the values will be x \/ n + 1","code":"$ zp = $ n - ( $ x % $ n ) ; $ pp = $ x \/ $ n ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ i >= $ zp ) { echo ( int ) $ pp + 1 ; echo ( \" \u2581 \" ) ; } else { echo ( int ) $ pp ; echo ( \" \u2581 \" ) ; } } } }"}
{"text":"Driver code","code":"$ x = 5 ; $ n = 3 ; split ( $ x , $ n ) ; ? >"}
{"text":"returns the minimum time required to reach ' X '","code":"< ? php function cal_minimum_time ( $ X ) {"}
{"text":"Stores the minimum time","code":"$ t = 0 ; $ sum = 0 ; while ( $ sum < $ X ) {"}
{"text":"increment ' t ' by 1","code":"$ t ++ ;"}
{"text":"update the sum","code":"$ sum = $ sum + $ t ; } return $ t ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ ans = cal_minimum_time ( $ n ) ; echo \" The \u2581 minimum \u2581 time \u2581 required \u2581 is \u2581 : \u2581 \" . $ ans ; ? >"}
{"text":"function to find minimum sum of difference of consecutive element","code":"< ? php function solve ( $ v , $ n ) {"}
{"text":"ul to store upper limit ll to store lower limit","code":"$ ans ; $ ul ; $ ll ; $ first = 0 ; $ second = 1 ;"}
{"text":"storethe lower range in ll and upper range in ul","code":"$ ll = $ v [ 0 ] [ $ first ] ; $ ul = $ v [ 0 ] [ $ second ] ;"}
{"text":"initialize the answer with 0","code":"$ ans = 0 ;"}
{"text":"iterate for all ranges","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"case 1 , in this case the difference will be 0","code":"if ( ( $ v [ $ i ] [ $ first ] <= $ ul and $ v [ $ i ] [ $ first ] >= $ ll ) or ( $ v [ $ i ] [ $ second ] >= $ ll and $ v [ $ i ] [ $ second ] <= $ ul ) ) {"}
{"text":"change upper limit and lower limit","code":"if ( $ v [ $ i ] [ $ first ] > $ ll ) { $ ll = $ v [ $ i ] [ $ first ] ; } if ( $ v [ $ i ] [ $ second ] < $ ul ) { $ ul = $ v [ $ i ] [ $ second ] ; } }"}
{"text":"case 2","code":"else if ( $ v [ $ i ] [ $ first ] > $ ul ) {"}
{"text":"store the difference","code":"$ ans += abs ( $ ul - $ v [ $ i ] [ $ first ] ) ; $ ul = $ v [ $ i ] [ $ first ] ; $ ll = $ v [ $ i ] [ $ first ] ; }"}
{"text":"case 3","code":"else if ( $ v [ $ i ] [ $ second ] < $ ll ) {"}
{"text":"store the difference","code":"$ ans += abs ( $ ll - $ v [ $ i ] [ $ second ] ) ; $ ul = $ v [ $ i ] [ $ second ] ; $ ll = $ v [ $ i ] [ $ second ] ; } } return $ ans ; }"}
{"text":"array of range","code":"$ v = array ( array ( 1 , 3 ) , array ( 2 , 5 ) , array ( 6 , 8 ) , array ( 1 , 2 ) , array ( 2 , 3 ) ) ; $ n = 5 ; echo ( solve ( $ v , $ n ) ) ; ? >"}
{"text":"Returns vector of Pre Processed perfect cubes","code":"< ? php function preProcess ( $ n ) { $ preProcessedCubes = array ( ) ; for ( $ i = 1 ; $ i * $ i * $ i < $ n ; $ i ++ ) { $ iThCube = $ i * $ i * $ i ;"}
{"text":"convert the cube to string and push into preProcessedCubes vector","code":"$ cubeString = strval ( $ iThCube ) ; array_push ( $ preProcessedCubes , $ cubeString ) ; } return $ preProcessedCubes ; }"}
{"text":"Utility function for findLargestCube ( ) . Returns the Largest cube number that can be formed","code":"function findLargestCubeUtil ( $ num , $ preProcessedCubes ) {"}
{"text":"reverse the preProcessed cubes so that we have the largest cube in the beginning of the vector","code":"$ preProcessedCubes = array_reverse ( $ preProcessedCubes ) ; $ totalCubes = count ( $ preProcessedCubes ) ;"}
{"text":"iterate over all cubes","code":"for ( $ i = 0 ; $ i < $ totalCubes ; $ i ++ ) { $ currCube = $ preProcessedCubes [ $ i ] ; $ digitsInCube = strlen ( $ currCube ) ; $ index = 0 ; $ digitsInNumber = strlen ( $ num ) ; for ( $ j = 0 ; $ j < $ digitsInNumber ; $ j ++ ) {"}
{"text":"check if the current digit of the cube matches with that of the number num","code":"if ( $ num [ $ j ] == $ currCube [ $ index ] ) $ index += 1 ; if ( $ digitsInCube == $ index ) return $ currCube ; } }"}
{"text":"if control reaches here , the its not possible to form a perfect cube","code":"return \" Not \u2581 Possible \" ; }"}
{"text":"wrapper for findLargestCubeUtil ( )","code":"function findLargestCube ( $ n ) {"}
{"text":"pre process perfect cubes","code":"$ preProcessedCubes = preProcess ( $ n ) ;"}
{"text":"convert number n to String","code":"$ num = strval ( $ n ) ; $ ans = findLargestCubeUtil ( $ num , $ preProcessedCubes ) ; print ( \" Largest \u2581 Cube \u2581 that \u2581 can \u2581 be \u2581 formed \u2581 from \u2581 \" . $ n . \" \u2581 is \u2581 \" . $ ans . \" STRNEWLINE \" ) ; }"}
{"text":"Driver Code","code":"$ n = 4125 ; findLargestCube ( $ n ) ; $ n = 876 ; findLargestCube ( $ n ) ? >"}
{"text":"Function to print simple string","code":"< ? php function noAdjacentDup ( $ s ) { $ n = strlen ( $ s ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If any two adjacent characters are equal","code":"if ( $ s [ $ i ] == $ s [ $ i - 1 ] ) {"}
{"text":"Initialize it to ' a '","code":"$ s [ $ i ] = ' a ' ;"}
{"text":"Traverse the loop until it is different from the left and right letter .","code":"while ( $ s [ $ i ] == $ s [ $ i - 1 ] || ( $ i + 1 < $ n && $ s [ $ i ] == $ s [ $ i + 1 ] ) ) $ s [ $ i ] ++ ; $ i ++ ; } } return $ s ; }"}
{"text":"Driver Code","code":"$ s = \" geeksforgeeks \" ; echo ( noAdjacentDup ( $ s ) ) ; ? >"}
{"text":"PHP program to find winner of game","code":"< ? php function winner ( $ a , $ n , $ k ) {"}
{"text":"if the number of steps is more then n - 1 ,","code":"if ( $ k >= $ n - 1 ) return $ n ;"}
{"text":"initially the best is 0 and no . of wins is 0.","code":"$ best = 0 ; $ times = 0 ;"}
{"text":"traverse through all the numbers","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if the value of array is more then that of previous best","code":"if ( $ a [ $ i ] > $ best ) {"}
{"text":"best is replaced by a [ i ]","code":"$ best = $ a [ $ i ] ;"}
{"text":"if not the first index","code":"if ( $ i )"}
{"text":"no of wins is 1 now","code":"$ times = 1 ; } else"}
{"text":"if it wins","code":"$ times += 1 ;"}
{"text":"if any position has more then k wins then return","code":"if ( $ times >= $ k ) return $ best ; }"}
{"text":"Maximum element will be winner because we move smaller element at end and repeat the process .","code":"return $ best ; }"}
{"text":"Driver Code","code":"$ a = array ( 2 , 1 , 3 , 4 , 5 ) ; $ n = sizeof ( $ a ) ; $ k = 2 ; echo ( winner ( $ a , $ n , $ k ) ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ MAX = 100000 ; $ bitscount = 32 ;"}
{"text":"Array to store bit - wise prefix count","code":"$ prefix_count = array_fill ( 0 , $ bitscount , array_fill ( 0 , $ MAX , NULL ) ) ;"}
{"text":"Function to find the prefix sum","code":"function findPrefixCount ( & $ arr , $ n ) { global $ MAX , $ bitscount , $ prefix_count ;"}
{"text":"Loop for each bit","code":"for ( $ i = 0 ; $ i < $ bitscount ; $ i ++ ) {"}
{"text":"Loop to find prefix count","code":"$ prefix_count [ $ i ] [ 0 ] = ( ( $ arr [ 0 ] >> $ i ) & 1 ) ; for ( $ j = 1 ; $ j < $ n ; $ j ++ ) { $ prefix_count [ $ i ] [ $ j ] = ( ( $ arr [ $ j ] >> $ i ) & 1 ) ; $ prefix_count [ $ i ] [ $ j ] += $ prefix_count [ $ i ] [ $ j - 1 ] ; } } }"}
{"text":"Function to answer query","code":"function rangeOr ( $ l , $ r ) { global $ MAX , $ bitscount , $ prefix_count ;"}
{"text":"To store the answer","code":"$ ans = 0 ;"}
{"text":"Loop for each bit","code":"for ( $ i = 0 ; $ i < $ bitscount ; $ i ++ ) {"}
{"text":"To store the number of variables with ith bit set","code":"if ( $ l == 0 ) $ x = $ prefix_count [ $ i ] [ $ r ] ; else $ x = $ prefix_count [ $ i ] [ $ r ] - $ prefix_count [ $ i ] [ l - 1 ] ;"}
{"text":"Condition for ith bit of answer to be set","code":"if ( $ x != 0 ) $ ans = ( $ ans | ( 1 << $ i ) ) ; } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 7 , 5 , 3 , 5 , 2 , 3 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; findPrefixCount ( $ arr , $ n ) ; $ queries = array ( array ( 1 , 3 ) , array ( 4 , 5 ) ) ; $ q = sizeof ( $ queries ) \/ sizeof ( $ queries [ 0 ] ) ; for ( $ i = 0 ; $ i < $ q ; $ i ++ ) echo rangeOr ( $ queries [ $ i ] [ 0 ] , $ queries [ $ i ] [ 1 ] ) . \" STRNEWLINE \" ; return 0 ; ? >"}
{"text":"The main function that finds shortest distances from src to all other vertices using Bellman - Ford algorithm . The function also detects negative weight cycle The row graph [ i ] represents i - th edge with three values u , v and w .","code":"< ? php function BellmanFord ( $ graph , $ V , $ E , $ src ) {"}
{"text":"Initialize distance of all vertices as infinite .","code":"$ dis = array ( ) ; for ( $ i = 0 ; $ i < $ V ; $ i ++ ) $ dis [ $ i ] = PHP_INT_MAX ;"}
{"text":"initialize distance of source as 0","code":"$ dis [ $ src ] = 0 ;"}
{"text":"Relax all edges | V | - 1 times . A simple shortest path from src to any other vertex can have at - most | V | - 1 edges","code":"for ( $ i = 0 ; $ i < $ V - 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ E ; $ j ++ ) { if ( $ dis [ $ graph [ $ j ] [ 0 ] ] != PHP_INT_MAX && $ dis [ $ graph [ $ j ] [ 0 ] ] + $ graph [ $ j ] [ 2 ] < $ dis [ $ graph [ $ j ] [ 1 ] ] ) $ dis [ $ graph [ $ j ] [ 1 ] ] = $ dis [ $ graph [ $ j ] [ 0 ] ] + $ graph [ $ j ] [ 2 ] ; } }"}
{"text":"check for negative - weight cycles . The above step guarantees shortest distances if graph doesn 't contain  negative weight cycle. If we get a  shorter path, then there is a cycle.","code":"for ( $ i = 0 ; $ i < $ E ; $ i ++ ) { $ x = $ graph [ $ i ] [ 0 ] ; $ y = $ graph [ $ i ] [ 1 ] ; $ weight = $ graph [ $ i ] [ 2 ] ; if ( $ dis [ $ x ] != PHP_INT_MAX && $ dis [ $ x ] + $ weight < $ dis [ $ y ] ) echo \" Graph \u2581 contains \u2581 negative \u2581 weight \u2581 cycle \u2581 STRNEWLINE \" ; } echo \" Vertex \u2581 Distance \u2581 from \u2581 Source \u2581 STRNEWLINE \" ; for ( $ i = 0 ; $ i < $ V ; $ i ++ ) echo $ i , \" TABSYMBOL TABSYMBOL \" , $ dis [ $ i ] , \" STRNEWLINE \" ; }"}
{"text":"Every edge has three values ( u , v , w ) where the edge is from vertex u to v . And weight of the edge is w .","code":"$ graph = array ( array ( 0 , 1 , -1 ) , array ( 0 , 2 , 4 ) , array ( 1 , 2 , 3 ) , array ( 1 , 3 , 2 ) , array ( 1 , 4 , 2 ) , array ( 3 , 2 , 5 ) , array ( 3 , 1 , 1 ) , array ( 4 , 3 , -3 ) ) ; BellmanFord ( $ graph , $ V , $ E , 0 ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php $ maxn = 16 ;"}
{"text":"Function to generate the dp array","code":"function precompute ( ) { $ dp = array_fill ( 0 , $ GLOBALS [ ' axn ' , -1 ) ; $ dp [ 0 ] = 0 ; $ v = array ( 4 , 6 , 9 ) ; for ( $ i = 1 ; $ i < $ GLOBALS [ ' axn ' ; ++ $ i ) {"}
{"text":"combination of three integers","code":"for ( $ k = 0 ; $ k < 3 ; $ k ++ ) { $ j = $ v [ $ k ] ;"}
{"text":"take the maximum number of summands","code":"if ( $ i >= $ j && $ dp [ $ i - $ j ] != -1 ) { $ dp [ $ i ] = max ( $ dp [ $ i ] , $ dp [ $ i - $ j ] + 1 ) ; } } } return $ dp ; }"}
{"text":"Function to find the maximum number of summands","code":"function Maximum_Summands ( $ dp , $ n ) {"}
{"text":"If n is a smaller number , less than 16 return dp [ n ]","code":"if ( $ n < $ GLOBALS [ ' axn ' ) return $ dp [ $ n ] ; else {"}
{"text":"Else , find a minimal number t as explained in solution","code":"$ t = ( $ n - $ GLOBALS [ ' axn ' ) \/ 4 + 1 ; return $ t + $ dp [ $ n - 4 * $ t ] ; } }"}
{"text":"Driver code","code":"$ n = 12 ;"}
{"text":"Generate dp array","code":"$ dp = precompute ( ) ; echo Maximum_Summands ( $ dp , $ n ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ GLOBALS [ ' N ' ] = 4 ;"}
{"text":"Function to return the sum of the sub - matrix","code":"function getSum ( $ r1 , $ r2 , $ c1 , $ c2 , $ dp ) { return $ dp [ $ r2 ] [ $ c2 ] - $ dp [ $ r2 ] [ $ c1 ] - $ dp [ $ r1 ] [ $ c2 ] + $ dp [ $ r1 ] [ $ c1 ] ; }"}
{"text":"Function that returns true if it is possible to find the sub - matrix with required sum","code":"function sumFound ( $ K , $ S , $ grid ) {"}
{"text":"2 - D array to store the sum of all the sub - matrices","code":"$ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) for ( $ j = 0 ; $ j < $ GLOBALS [ ' N ' ] ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ;"}
{"text":"Filling of dp [ ] [ ] array","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) for ( $ j = 0 ; $ j < $ GLOBALS [ ' N ' ] ; $ j ++ ) $ dp [ $ i + 1 ] [ $ j + 1 ] = $ dp [ $ i + 1 ] [ $ j ] + $ dp [ $ i ] [ $ j + 1 ] - $ dp [ $ i ] [ $ j ] + $ grid [ $ i ] [ $ j ] ;"}
{"text":"Checking for each possible sub - matrix of size k X k","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) for ( $ j = 0 ; $ j < $ GLOBALS [ ' N ' ] ; $ j ++ ) { $ sum = getSum ( $ i , $ i + $ K , $ j , $ j + $ K , $ dp ) ; if ( $ sum == $ S ) return true ; }"}
{"text":"Sub - matrix with the given sum not found","code":"return false ; }"}
{"text":"Driver code","code":"$ grid = array ( array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) , array ( 9 , 10 , 11 , 12 ) , array ( 13 , 14 , 15 , 16 ) ) ; $ K = 2 ; $ S = 14 ;"}
{"text":"Function call","code":"if ( sumFound ( $ K , $ S , $ grid ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to return the minimum operations required to sum to a number reprented by the binary string S","code":"< ? php function findMinOperations ( $ S ) {"}
{"text":"Reverse the string to consider it from LSB to MSB","code":"$ p = strrev ( $ S ) ; $ n = strlen ( $ p ) ;"}
{"text":"initialise the dp table","code":"$ dp = array_fill ( 0 , $ n + 1 , array_fill ( 0 , 2 , NULL ) ) ;"}
{"text":"If S [ 0 ] = '0' , there is no need to perform any operation","code":"if ( $ p [ 0 ] == '0' ) { $ dp [ 0 ] [ 0 ] = 0 ; } else {"}
{"text":"If S [ 0 ] = '1' , just perform a single operation ( i . e Add 2 ^ 0 )","code":"$ dp [ 0 ] [ 0 ] = 1 ; }"}
{"text":"Irrespective of the LSB , dp [ 0 ] [ 1 ] is always 1 as there is always the need of making the suffix of the binary string of the form \"11 . . . . 1\" as suggested by the definition of dp [ i ] [ 1 ]","code":"$ dp [ 0 ] [ 1 ] = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ p [ $ i ] == '0' ) {"}
{"text":"Transition from dp [ i - 1 ] [ 0 ]","code":"$ dp [ $ i ] [ 0 ] = $ dp [ $ i - 1 ] [ 0 ] ;"}
{"text":"1. Transition from dp [ i - 1 ] [ 1 ] by just doing 1 extra operation of subtracting 2 ^ i 2. Transition from dp [ i - 1 ] [ 0 ] by just doing 1 extra operation of subtracting 2 ^ ( i + 1 )","code":"$ dp [ $ i ] [ 1 ] = 1 + min ( $ dp [ $ i - 1 ] [ 1 ] , $ dp [ $ i - 1 ] [ 0 ] ) ; } else {"}
{"text":"Transition from dp [ i - 1 ] [ 1 ]","code":"$ dp [ $ i ] [ 1 ] = $ dp [ $ i - 1 ] [ 1 ] ;"}
{"text":"1. Transition from dp [ i - 1 ] [ 1 ] by just doing 1 extra operation of adding 2 ^ ( i + 1 ) 2. Transition from dp [ i - 1 ] [ 0 ] by just doing 1 extra operation of adding 2 ^ i","code":"$ dp [ $ i ] [ 0 ] = 1 + min ( $ dp [ $ i - 1 ] [ 0 ] , $ dp [ $ i - 1 ] [ 1 ] ) ; } } return $ dp [ $ n - 1 ] [ 0 ] ; }"}
{"text":"Driver Code","code":"$ S = \"100\" ; echo findMinOperations ( $ S ) . \" STRNEWLINE \" ; $ S = \"111\" ; echo findMinOperations ( $ S ) . \" STRNEWLINE \" ; return 0 ; ? >"}
{"text":"Function that finds the Nth element of K - Fibonacci series","code":"< ? php function solve ( $ N , $ K ) { $ Array = array_fill ( 0 , $ N + 1 , NULL ) ;"}
{"text":"If N is less than K then the element is '1'","code":"if ( $ N <= $ K ) { echo \"1\" . \" STRNEWLINE \" ; return ; } $ i = 0 ; $ sum = $ K ;"}
{"text":"first k elements are 1","code":"for ( $ i = 1 ; $ i <= $ K ; ++ $ i ) { $ Array [ $ i ] = 1 ; }"}
{"text":"( K + 1 ) th element is K","code":"$ Array [ $ i ] = $ sum ;"}
{"text":"find the elements of the K - Fibonacci series","code":"for ( $ i = $ K + 2 ; $ i <= $ N ; ++ $ i ) {"}
{"text":"subtract the element at index i - k - 1 and add the element at index i - i from the sum ( sum contains the sum of previous ' K ' elements )","code":"$ Array [ $ i ] = $ sum - $ Array [ $ i - $ K - 1 ] + $ Array [ $ i - 1 ] ;"}
{"text":"set the new sum","code":"$ sum = $ Array [ $ i ] ; } echo $ Array [ $ N ] . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ N = 4 ; $ K = 2 ;"}
{"text":"get the Nth value of K - Fibonacci series","code":"solve ( $ N , $ K ) ; ? >"}
{"text":"PHP program to find the Minimum sum possible of any bracket sequence of length N using the given values for brackets","code":"< ? php $ MAX_VAL = 10000000 ;"}
{"text":"DP array","code":"$ dp = array_fill ( 0 , 100 , array_fill ( 0 , 100 , -1 ) ) ;"}
{"text":"Recursive function to check for correct bracket expression","code":"function find ( $ index , $ openbrk , $ n , $ adj ) { global $ MAX_VAL ; global $ dp ;"}
{"text":"\/ Not a proper bracket expression","code":"if ( $ openbrk < 0 ) return $ MAX_VAL ;"}
{"text":"If reaches at end","code":"if ( $ index == $ n ) {"}
{"text":"\/ If proper bracket expression","code":"if ( $ openbrk == 0 ) { return 0 ; }"}
{"text":"else if not , return max","code":"return $ MAX_VAL ; }"}
{"text":"If already visited","code":"if ( $ dp [ $ index ] [ $ openbrk ] != -1 ) return $ dp [ $ index ] [ $ openbrk ] ;"}
{"text":"To find out minimum sum","code":"$ dp [ $ index ] [ $ openbrk ] = min ( $ adj [ $ index ] [ 1 ] + find ( $ index + 1 , $ openbrk + 1 , $ n , $ adj ) , $ adj [ $ index ] [ 0 ] + find ( $ index + 1 , $ openbrk - 1 , $ n , $ adj ) ) ; return $ dp [ $ index ] [ $ openbrk ] ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ adj = array ( array ( 5000 , 3000 ) , array ( 6000 , 2000 ) , array ( 8000 , 1000 ) , array ( 9000 , 6000 ) ) ; echo find ( 1 , 1 , $ n , $ adj ) + $ adj [ 0 ] [ 1 ] ; ? >"}
{"text":"Recursive Function to find total length of the array where 1 is greater than zero","code":"< ? php function find ( $ start , $ adj , $ n , $ dp ) {"}
{"text":"If reaches till end","code":"if ( $ start == $ n ) return 0 ;"}
{"text":"If $dp is saved","code":"if ( $ dp [ $ start ] != -1 ) return $ dp [ $ start ] ; $ dp [ $ start ] = 0 ; $ one = 0 ; $ zero = 0 ;"}
{"text":"Finding for each length","code":"for ( $ k = $ start ; $ k < $ n ; $ k ++ ) {"}
{"text":"If the character scanned is 1","code":"if ( $ adj [ $ k ] == '1' ) $ one ++ ; else $ zero ++ ;"}
{"text":"If one is greater than zero , add total length scanned till now","code":"if ( $ one > $ zero ) $ dp [ $ start ] = max ( $ dp [ $ start ] , find ( $ k + 1 , $ adj , $ n , $ dp ) + $ k - $ start + 1 ) ;"}
{"text":"Continue with next length","code":"else $ dp [ $ start ] = max ( $ dp [ $ start ] , find ( $ k + 1 , $ adj , $ n , $ dp ) ) ; }"}
{"text":"Return the value for $start index","code":"return $ dp [ $ start ] ; }"}
{"text":"Driver Code","code":"$ adj = \"100110001010001\" ;"}
{"text":"Size of string","code":"$ n = strlen ( $ adj ) ; $ dp = array_fill ( 0 , $ n + 1 , -1 ) ;"}
{"text":"Calling the function to find the value of function","code":"echo find ( 0 , $ adj , $ n , $ dp ) ; ? >"}
{"text":"function to check whether ' ch ' is a vowel or not","code":"< ? php function isVowel ( $ ch ) { if ( $ ch == ' a ' $ ch == ' e ' $ ch == ' i ' $ ch == ' o ' $ ch == ' u ' ) return true ; return false ; }"}
{"text":"function to find the length of longest common subsequence which contains all vowel characters","code":"function lcs ( $ X , $ Y , $ m , $ n ) { $ L = array_fill ( 0 , $ m + 1 , array_fill ( 0 , $ n + 1 , NULL ) ) ;"}
{"text":"Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 0 $ j == 0 ) $ L [ $ i ] [ $ j ] = 0 ; else if ( ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) && isVowel ( $ X [ $ i - 1 ] ) ) $ L [ $ i ] [ $ j ] = $ L [ $ i - 1 ] [ $ j - 1 ] + 1 ; else $ L [ $ i ] [ $ j ] = max ( $ L [ $ i - 1 ] [ $ j ] , $ L [ $ i ] [ $ j - 1 ] ) ; } }"}
{"text":"L [ m ] [ n ] contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ] which contains all vowel characters","code":"return $ L [ $ m ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ X = \" aieef \" ; $ Y = \" klaief \" ; $ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ; echo \" Length \u2581 of \u2581 LCS \u2581 = \u2581 \" . lcs ( $ X , $ Y , $ m , $ n ) ; ? >"}
{"text":"function to check if i - th index is valid or not","code":"< ? php function check ( $ i , $ val ) { if ( $ i - $ val < 0 ) return false ; return true ; }"}
{"text":"function to find the minimum number of single digit prime numbers required which when summed up equals to a given number N .","code":"function MinimumPrimes ( $ n ) { for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] = 1e9 ; $ dp [ 0 ] = $ dp [ 2 ] = $ dp [ 3 ] = $ dp [ 5 ] = $ dp [ 7 ] = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { if ( check ( $ i , 2 ) ) $ dp [ $ i ] = min ( $ dp [ $ i ] , 1 + $ dp [ $ i - 2 ] ) ; if ( check ( $ i , 3 ) ) $ dp [ $ i ] = min ( $ dp [ $ i ] , 1 + $ dp [ $ i - 3 ] ) ; if ( check ( $ i , 5 ) ) $ dp [ $ i ] = min ( $ dp [ $ i ] , 1 + $ dp [ $ i - 5 ] ) ; if ( check ( $ i , 7 ) ) $ dp [ $ i ] = min ( $ dp [ $ i ] , 1 + $ dp [ $ i - 7 ] ) ; }"}
{"text":"Not possible","code":"if ( $ dp [ $ n ] == ( 1e9 ) ) return -1 ; else return $ dp [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 12 ; $ minimal = MinimumPrimes ( $ n ) ; if ( $ minimal != -1 ) { echo ( \" Minimum \u2581 number \u2581 of \u2581 single \u2581 \" . \" digit \u2581 primes \u2581 required \u2581 : \" ) ; echo ( $ minimal ) ; } else { echo ( \" Not \u2581 possible \" ) ; } ? >"}
{"text":"Function to find number of unique BST","code":"< ? php function numberOfBST ( $ n ) {"}
{"text":"DP to store the number of unique BST with key i","code":"$ dp = array ( $ n + 1 ) ; for ( $ i = 0 ; $ i <= $ n + 1 ; $ i ++ ) $ dp [ $ i ] = 0 ;"}
{"text":"Base case","code":"$ dp [ 0 ] = 1 ; $ dp [ 1 ] = 1 ;"}
{"text":"fill the dp table in top - down approach .","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) {"}
{"text":"n - i in right * i - 1 in left","code":"$ dp [ $ i ] += ( ( $ dp [ $ i - $ j ] ) * ( $ dp [ $ j - 1 ] ) ) ; } } return $ dp [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo \" Number \u2581 of \u2581 structurally \u2581 \" . \" Unique \u2581 BST \u2581 with \u2581 \" , $ n , \" \u2581 keys \u2581 are \u2581 : \u2581 \" , numberOfBST ( $ n ) ; ? >"}
{"text":"Return summation of r * nCr","code":"< ? php function summation ( $ n ) { return $ n << ( $ n - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo summation ( $ n ) ; ? >"}
{"text":"Function to find maximum subarray product .","code":"< ? php function findMaxProduct ( & $ arr , $ n ) {"}
{"text":"As maximum product can be negative , so initialize ans with minimum integer value .","code":"$ ans = 0 ;"}
{"text":"Variable to store maximum product until current value .","code":"$ maxval = 1 ;"}
{"text":"Variable to store minimum product until current value .","code":"$ minval = 1 ;"}
{"text":"Variable used during updation of maximum product and minimum product . is prevMax","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current element is positive , update maxval . Update minval if it is negative .","code":"if ( $ arr [ $ i ] > 0 ) { $ maxval = $ maxval * $ arr [ i ] ; $ minval = min ( 1 , $ minval * $ arr [ $ i ] ) ; }"}
{"text":"If current element is zero , maximum product cannot end at current element . Update minval with 1 and maxval with 0. maxval is updated to 0 as in case all other elements are negative , then maxval is 0.","code":"else if ( $ arr [ $ i ] == 0 ) { $ minval = 1 ; $ maxval = 0 ; }"}
{"text":"If current element is negative , then new value of maxval is previous minval * arr [ i ] and new value of minval is previous maxval * arr [ i ] . Before updating maxval , store its previous value in prevMax to be used to update minval .","code":"else if ( $ arr [ $ i ] < 0 ) { $ prevMax = $ maxval ; $ maxval = $ minval * $ arr [ $ i ] ; $ minval = $ prevMax * $ arr [ $ i ] ; }"}
{"text":"Update ans if necessary .","code":"$ ans = max ( $ ans , $ maxval ) ;"}
{"text":"If maxval is zero , then to calculate product for next iteration , it should be set to 1 as maximum product subarray does not include 0. The minimum possible value to be considered in maximum product subarray is already stored in minval , so when maxval is negative it is set to 1.","code":"if ( $ maxval <= 0 ) { $ maxval = 1 ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 0 , -4 , 0 , -2 ) ; $ n = sizeof ( $ arr ) ; echo findMaxProduct ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find the maximum and minimum values of an Algebraic expression of given form","code":"< ? php function minMaxValues ( $ arr , $ n , $ m ) {"}
{"text":"Finding sum of array elements","code":"$ sum = 0 ; $ INF = 1000000000 ; $ MAX = 50 ; for ( $ i = 0 ; $ i < ( $ n + $ m ) ; $ i ++ ) { $ sum += $ arr [ $ i ] ;"}
{"text":"shifting the integers by 50 so that they become positive","code":"$ arr [ $ i ] += 50 ; }"}
{"text":"dp [ i ] [ j ] represents true if sum j can be reachable by choosing i numbers","code":"$ dp = array ( ) ; for ( $ i = 0 ; $ i < $ MAX + 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ MAX * $ MAX + 1 ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ; } $ dp [ 0 ] [ 0 ] = 1 ;"}
{"text":"if dp [ i ] [ j ] is true , that means it is possible to select i numbers from ( n + m ) numbers to sum upto j","code":"for ( $ i = 0 ; $ i < ( $ n + $ m ) ; $ i ++ ) {"}
{"text":"k can be at max n because the left expression has n numbers","code":"for ( $ k = min ( $ n , $ i + 1 ) ; $ k >= 1 ; $ k -- ) { for ( $ j = 0 ; $ j < $ MAX * $ MAX + 1 ; $ j ++ ) { if ( $ dp [ $ k - 1 ] [ $ j ] ) $ dp [ $ k ] [ $ j + $ arr [ $ i ] ] = 1 ; } } } $ max_value = -1 * $ INF ; $ min_value = $ INF ; for ( $ i = 0 ; $ i < $ MAX * $ MAX + 1 ; $ i ++ ) {"}
{"text":"checking if a particular sum can be reachable by choosing n numbers","code":"if ( $ dp [ $ n ] [ $ i ] ) {"}
{"text":"getting the actual sum as we shifted the numbers by 50 to avoid negative indexing in array","code":"$ temp = $ i - 50 * $ n ; $ max_value = max ( $ max_value , $ temp * ( $ sum - $ temp ) ) ; $ min_value = min ( $ min_value , $ temp * ( $ sum - $ temp ) ) ; } } echo ( \" Maximum \u2581 Value : \u2581 \" . $ max_value . \" \" . \u2581 \" Minimum Value : \" . \u2581 $ min _ value . \u2581 \" \" }"}
{"text":"Driver Code","code":"$ n = 2 ; $ m = 2 ; $ arr = [ 1 , 2 , 3 , 4 ] ; minMaxValues ( $ arr , $ n , $ m ) ; ? >"}
{"text":"Return the nth element of Golomb sequence","code":"< ? php function findGolomb ( $ n ) {"}
{"text":"base case","code":"if ( $ n == 1 ) return 1 ;"}
{"text":"Recursive Step","code":"return 1 + findGolomb ( $ n - findGolomb ( findGolomb ( $ n - 1 ) ) ) ; }"}
{"text":"Print the first n term of Golomb Sequence","code":"function printGolomb ( $ n ) {"}
{"text":"Finding first n terms of Golomb Sequence .","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) echo findGolomb ( $ i ) , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 9 ; printGolomb ( $ n ) ; ? >"}
{"text":"Prints the items which are kept in a knapsack of capacity W","code":"< ? php function printknapSack ( $ W , & $ wt , & $ val , $ n ) { $ K = array_fill ( 0 , $ n + 1 , array_fill ( 0 , $ W + 1 , NULL ) ) ;"}
{"text":"Build table K [ ] [ ] in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ w = 0 ; $ w <= $ W ; $ w ++ ) { if ( $ i == 0 $ w == 0 ) $ K [ $ i ] [ $ w ] = 0 ; else if ( $ wt [ $ i - 1 ] <= $ w ) $ K [ $ i ] [ $ w ] = max ( $ val [ $ i - 1 ] + $ K [ $ i - 1 ] [ $ w - $ wt [ $ i - 1 ] ] , $ K [ $ i - 1 ] [ $ w ] ) ; else $ K [ $ i ] [ $ w ] = $ K [ $ i - 1 ] [ $ w ] ; } }"}
{"text":"stores the result of Knapsack","code":"$ res = $ K [ $ n ] [ $ W ] ; echo $ res . \" STRNEWLINE \" ; $ w = $ W ; for ( $ i = $ n ; $ i > 0 && $ res > 0 ; $ i -- ) {"}
{"text":"either the result comes from the top ( K [ i - 1 ] [ w ] ) or from ( val [ i - 1 ] + K [ i - 1 ] [ w - wt [ i - 1 ] ] ) as in Knapsack table . If it comes from the latter one \/ it means the item is included .","code":"if ( $ res == $ K [ $ i - 1 ] [ $ w ] ) continue ; else {"}
{"text":"This item is included .","code":"echo $ wt [ $ i - 1 ] . \" \" ;"}
{"text":"Since this weight is included its value is deducted","code":"$ res = $ res - $ val [ $ i - 1 ] ; $ w = $ w - $ wt [ $ i - 1 ] ; } } }"}
{"text":"Driver code","code":"$ val = array ( 60 , 100 , 120 ) ; $ wt = array ( 10 , 20 , 30 ) ; $ W = 50 ; $ n = sizeof ( $ val ) ; printknapSack ( $ W , $ wt , $ val , $ n ) ; ? >"}
{"text":"function to find the maximum number of segments","code":"< ? php function maximumSegments ( $ n , $ a , $ b , $ c ) {"}
{"text":"stores the maximum number of segments each index can have","code":"$ dp = array ( ) ;"}
{"text":"initialize with - 1","code":"for ( $ i = 0 ; $ i < $ n + 10 ; $ i ++ ) $ dp [ $ i ] = -1 ;"}
{"text":"0 th index will have 0 segments base case","code":"$ dp [ 0 ] = 0 ;"}
{"text":"traverse for all possible segments till n","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ dp [ $ i ] != -1 ) {"}
{"text":"conditions if ( $i + $a <= $n ) avoid buffer overflow","code":"$ dp [ $ i + $ a ] = max ( $ dp [ $ i ] + 1 , $ dp [ $ i + $ a ] ) ;"}
{"text":"if ( $i + $b <= $n ) avoid buffer overflow","code":"$ dp [ $ i + $ b ] = max ( $ dp [ $ i ] + 1 , $ dp [ $ i + $ b ] ) ;"}
{"text":"if ( $i + $c <= $n ) avoid buffer overflow","code":"$ dp [ $ i + $ c ] = max ( $ dp [ $ i ] + 1 , $ dp [ $ i + $ c ] ) ; } } return $ dp [ $ n ] ; }"}
{"text":"Driver code","code":"$ n = 7 ; $ a = 5 ; $ b = 2 ; $ c = 5 ; echo ( maximumSegments ( $ n , $ a , $ b , $ c ) ) ; ? >"}
{"text":"Function to find the n - th element","code":"< ? php function sequence ( $ n ) {"}
{"text":"Declare array to store sequence","code":"$ f = array ( 0 ) ; $ f [ 0 ] = 0 ; $ f [ 1 ] = 1 ; $ f [ 2 ] = 1 ; echo $ f [ 1 ] , \" \" \u2581 , \u2581 $ f [ 2 ] \u2581 , \u2581 \" \" for ( $ i = 3 ; $ i <= $ n ; $ i ++ ) { $ f [ $ i ] = $ f [ $ f [ $ i - 1 ] ] + $ f [ $ i - $ f [ $ i - 1 ] ] ; echo $ f [ $ i ] , \" \" ; } }"}
{"text":"Driver Code","code":"{ $ n = 13 ; sequence ( $ n ) ; return 0 ; } ? >"}
{"text":"Return Entringer Number E ( n , k )","code":"< ? php function zigzag ( $ n , $ k ) { $ dp = array ( array ( ) ) ;"}
{"text":"Base cases","code":"$ dp [ 0 ] [ 0 ] = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] [ 0 ] = 0 ;"}
{"text":"Finding dp [ i ] [ j ]","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i ] [ $ j - 1 ] + $ dp [ $ i - 1 ] [ $ i - $ j ] ; } return $ dp [ $ n ] [ $ k ] ; }"}
{"text":"Driven Code","code":"$ n = 4 ; $ k = 3 ; echo zigzag ( $ n , $ k ) ; ? >"}
{"text":"PHP Program to find Ln , m Lobb Number .","code":"< ? php $ MAXN = 109 ;"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"function binomialCoeff ( $ n , $ k ) { $ C = array ( array ( ) ) ;"}
{"text":"Calculate value of Binomial Coefficient in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= min ( $ i , $ k ) ; $ j ++ ) {"}
{"text":"Base Cases","code":"if ( $ j == 0 $ j == $ i ) $ C [ $ i ] [ $ j ] = 1 ;"}
{"text":"Calculate value using p reviously stored values","code":"else $ C [ $ i ] [ $ j ] = $ C [ $ i - 1 ] [ $ j - 1 ] + $ C [ $ i - 1 ] [ $ j ] ; } } return $ C [ $ n ] [ $ k ] ; }"}
{"text":"Return the Lm , n Lobb Number .","code":"function lobb ( $ n , int $ m ) { return ( ( 2 * $ m + 1 ) * binomialCoeff ( 2 * $ n , $ m + $ n ) ) \/ ( $ m + $ n + 1 ) ; }"}
{"text":"Driven Code","code":"$ n = 5 ; $ m = 3 ; echo lobb ( $ n , $ m ) ; ? >"}
{"text":"PHP Program to find count of arrays .","code":"< ? php $ MAXN = 109 ;"}
{"text":"Return the number of arrays with given constartints .","code":"function countarray ( $ n , $ k , $ x ) { $ dp = array ( 0 ) ;"}
{"text":"Initialising dp [ 0 ] and dp [ 1 ] .","code":"$ dp [ 0 ] = 0 ; $ dp [ 1 ] = 1 ;"}
{"text":"Computing f ( i ) for each 2 <= i <= n .","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) $ dp [ $ i ] = ( $ k - 2 ) * $ dp [ $ i - 1 ] + ( $ k - 1 ) * $ dp [ $ i - 2 ] ; return ( $ x == 1 ? ( $ k - 1 ) * $ dp [ $ n - 2 ] : $ dp [ $ n - 1 ] ) ; }"}
{"text":"Driven Code","code":"$ n = 4 ; $ k = 3 ; $ x = 2 ; echo countarray ( $ n , $ k , $ x ) ; ? >"}
{"text":"PHP program to count number of subsequences of given length .","code":"< ? php $ MAX = 100 ; $ MAX_CHAR = 26 ;"}
{"text":"Precompute the prefix and suffix array .","code":"function precompute ( $ s , $ n , & $ l , & $ r ) { global $ MAX , $ MAX_CHAR ; $ l [ ord ( $ s [ 0 ] ) - ord ( ' a ' ) ] [ 0 ] = 1 ;"}
{"text":"Precompute the prefix 2D array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ MAX_CHAR ; $ j ++ ) $ l [ $ j ] [ $ i ] += $ l [ $ j ] [ $ i - 1 ] ; $ l [ ord ( $ s [ $ i ] ) - ord ( ' a ' ) ] [ $ i ] ++ ; } $ r [ ord ( $ s [ $ n - 1 ] ) - ord ( ' a ' ) ] [ $ n - 1 ] = 1 ;"}
{"text":"Precompute the Suffix 2D array .","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { for ( $ j = 0 ; $ j < $ MAX_CHAR ; $ j ++ ) $ r [ $ j ] [ $ i ] += $ r [ $ j ] [ $ i + 1 ] ; $ r [ ord ( $ s [ $ i ] ) - ord ( ' a ' ) ] [ $ i ] ++ ; } }"}
{"text":"Find the number of palindromic subsequence of length k","code":"function countPalindromes ( $ k , $ n , & $ l , & $ r ) { global $ MAX , $ MAX_CHAR ; $ ans = 0 ;"}
{"text":"If k is 1.","code":"if ( $ k == 1 ) { for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) $ ans += $ l [ $ i ] [ $ n - 1 ] ; return $ ans ; }"}
{"text":"If k is 2","code":"if ( $ k == 2 ) {"}
{"text":"Adding all the products of prefix array","code":"for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) $ ans += ( ( $ l [ $ i ] [ $ n - 1 ] * ( $ l [ $ i ] [ $ n - 1 ] - 1 ) ) \/ 2 ) ; return $ ans ; }"}
{"text":"For k greater than 2. Adding all the products of value of prefix and suffix array .","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) for ( $ j = 0 ; $ j < $ MAX_CHAR ; $ j ++ ) $ ans += $ l [ $ j ] [ $ i - 1 ] * $ r [ $ j ] [ $ i + 1 ] ; return $ ans ; }"}
{"text":"Driver Code","code":"$ s = \" aabab \" ; $ k = 2 ; $ n = strlen ( $ s ) ; $ l = array_fill ( 0 , $ MAX_CHAR , array_fill ( 0 , $ MAX , NULL ) ) ; $ r = array_fill ( 0 , $ MAX_CHAR , array_fill ( 0 , $ MAX , NULL ) ) ; precompute ( $ s , $ n , $ l , $ r ) ; echo countPalindromes ( $ k , $ n , $ l , $ r ) . \" \" ; ? >"}
{"text":"PHP implementation to find the maximum sum path in a matrix","code":"< ? php $ SIZE = 10 ;"}
{"text":"function to find the maximum sum path in a matric","code":"function maxSum ( $ mat , $ n ) {"}
{"text":"if there is a single element only","code":"if ( $ n == 1 ) return $ mat [ 0 ] [ 0 ] ;"}
{"text":"dp [ ] [ ] matrix to store the results of each iteration","code":"$ dp = array ( array ( ) ) ; $ maxSum = PHP_INT_MIN ; $ max ;"}
{"text":"base case , copying elements of last row","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ dp [ $ n - 1 ] [ $ j ] = $ mat [ $ n - 1 ] [ $ j ] ;"}
{"text":"building up the dp [ ] [ ] matrix from bottom to the top row","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ max = PHP_INT_MIN ;"}
{"text":"finding the maximum diagonal element in the ( i + 1 ) th row if that cell exists","code":"if ( ( ( $ j - 1 ) >= 0 ) and ( $ max < $ dp [ $ i + 1 ] [ $ j - 1 ] ) ) $ max = $ dp [ $ i + 1 ] [ $ j - 1 ] ; if ( ( ( $ j + 1 ) < $ n ) and ( $ max < $ dp [ $ i + 1 ] [ $ j + 1 ] ) ) $ max = $ dp [ $ i + 1 ] [ $ j + 1 ] ;"}
{"text":"adding that ' max ' element to the mat [ i ] [ j ] element","code":"$ dp [ $ i ] [ $ j ] = $ mat [ $ i ] [ $ j ] + $ max ; } }"}
{"text":"finding the maximum value from the first row of dp [ ] [ ]","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( $ maxSum < $ dp [ 0 ] [ $ j ] ) $ maxSum = $ dp [ 0 ] [ $ j ] ;"}
{"text":"required maximum sum","code":"return $ maxSum ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 5 , 6 , 1 , 7 ) , array ( -2 , 10 , 8 , -1 ) , array ( 3 , -7 , -9 , 11 ) , array ( 12 , -4 , 2 , 6 ) ) ; $ n = 4 ; echo \" Maximum \u2581 Sum \u2581 = \u2581 \" , maxSum ( $ mat , $ n ) ; ? >"}
{"text":"This function mainly returns LCS ( str , str ) with a condition that same characters at same index are not considered .","code":"< ? php function longestRepeatedSubSeq ( $ str ) {"}
{"text":"THIS PART OF CODE IS SAME AS BELOW POST . IT FILLS dp [ ] [ ] https : www . geeksforgeeks . org \/ longest - repeating - subsequence \/ OR the code mentioned above .","code":"$ n = strlen ( $ str ) ; $ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) if ( $ str [ $ i - 1 ] == $ str [ $ j - 1 ] && $ i != $ j ) $ dp [ $ i ] [ $ j ] = 1 + $ dp [ $ i - 1 ] [ $ j - 1 ] ; else $ dp [ $ i ] [ $ j ] = max ( $ dp [ $ i ] [ $ j - 1 ] , $ dp [ $ i - 1 ] [ $ j ] ) ;"}
{"text":"THIS PART OF CODE FINDS THE RESULT STRING USING DP [ ] [ ] , Initialize result","code":"$ res = \" \" ;"}
{"text":"Traverse dp [ ] [ ] from bottom right","code":"$ i = $ n ; $ j = $ n ; while ( $ i > 0 && $ j > 0 ) {"}
{"text":"If this cell is same as diagonally adjacent cell just above it , then same characters are present at str [ i - 1 ] and str [ j - 1 ] . Append any of them to result .","code":"if ( $ dp [ $ i ] [ $ j ] == $ dp [ $ i - 1 ] [ $ j - 1 ] + 1 ) { $ res = $ res . $ str [ $ i - 1 ] ; $ i -- ; $ j -- ; }"}
{"text":"Otherwise we move to the side that that gave us maximum result","code":"else if ( $ dp [ $ i ] [ $ j ] == $ dp [ $ i - 1 ] [ $ j ] ) $ i -- ; else $ j -- ; }"}
{"text":"Since we traverse dp [ ] [ ] from bottom , we get result in reverse order .","code":"return strrev ( $ res ) ; }"}
{"text":"Driver Code","code":"$ str = \" AABEBCDD \" ; echo longestRepeatedSubSeq ( $ str ) ; ? >"}
{"text":"PHP program to find maximum elements that can be made equal with k","code":"< ? php function ElementsCalculationFunc ( $ pre , $ maxx , $ x , $ k , $ n ) { for ( $ i = 0 , $ j = $ x ; $ j <= $ n ; $ j ++ , $ i ++ ) {"}
{"text":"Function to calculate the maximum number of equal elements possible with atmost K increment of values . Here we have done sliding window to determine that whether there are x number of elements present which on increment will become equal . The loop here will run in fashion like 0. . . x - 1 , 1. . . x , 2. . . x + 1 , ... . , n - x - 1. . . n - 1","code":"function ElementsCalculationFunc ( $ pre , $ maxx , $ x , $ k , $ n ) { for ( $ i = 0 , $ j = $ x ; $ j <= $ n ; $ j ++ , $ i ++ ) {"}
{"text":"It can be explained with the reasoning that if for some x number of elements we can update the values then the increment to the segment ( i to j having length -> x ) so that all will be equal is ( x * maxx [ j ] ) this is the total sum of segment and ( pre [ j ] - pre [ i ] ) is present sum So difference of them should be less than k if yes , then that segment length ( x ) can be possible return true","code":"if ( $ x * $ maxx [ $ j ] - ( $ pre [ $ j ] - $ pre [ $ i ] ) <= $ k ) return true ; } return false ; } function MaxNumberOfElements ( $ a , $ n , $ k ) {"}
{"text":"sort the array in ascending order","code":"sort ( $ a ) ;"}
{"text":"Initializing the prefix array and maximum array","code":"for ( $ i = 0 ; $ i <= $ n ; ++ $ i ) { $ pre [ $ i ] = 0 ; $ maxx [ $ i ] = 0 ; } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Calculating prefix sum of the array","code":"$ pre [ $ i ] = $ pre [ $ i - 1 ] + $ a [ $ i - 1 ] ;"}
{"text":"Calculating max value upto that position in the array","code":"$ maxx [ $ i ] = max ( $ maxx [ $ i - 1 ] , $ a [ $ i - 1 ] ) ; }"}
{"text":"Binary search applied for computation here","code":"$ l = 1 ; $ r = $ n ; $ ans ; while ( $ l < $ r ) { $ mid = ( $ l + $ r ) \/ 2 ; if ( ElementsCalculationFunc ( $ pre , $ maxx , $ mid - 1 , $ k , $ n ) ) { $ ans = $ mid ; $ l = $ mid + 1 ; } else $ r = $ mid - 1 ; }"}
{"text":"printing result","code":"echo $ ans , \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 4 , 9 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; $ k = 3 ; MaxNumberOfElements ( $ arr , $ n , $ k ) ; #This  code is contributed by akt_mit. NEW_LINE ? >"}
{"text":"PHP program to find maximum score we can get by removing elements from either end .","code":"< ? php $ MAX = 50 ; function solve ( $ dp , $ a , $ low , $ high , $ turn ) {"}
{"text":"If only one element left .","code":"if ( $ low == $ high ) return $ a [ $ low ] * $ turn ;"}
{"text":"If already calculated , return the value .","code":"if ( $ dp [ $ low ] [ $ high ] != 0 ) return $ dp [ $ low ] [ $ high ] ;"}
{"text":"Computing Maximum value when element at index i and index j is to be choosed .","code":"$ dp [ $ low ] [ $ high ] = max ( $ a [ $ low ] * $ turn + solve ( $ dp , $ a , $ low + 1 , $ high , $ turn + 1 ) , $ a [ $ high ] * $ turn + solve ( $ dp , $ a , $ low , $ high - 1 , $ turn + 1 ) ) ; return $ dp [ $ low ] [ $ high ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 1 , 5 , 2 ) ; $ n = count ( $ arr ) ; $ dp = array ( ) ; for ( $ i = 0 ; $ i < $ MAX ; $ i ++ ) { $ dp [ $ i ] = array_fill ( $ i , $ MAX , 0 ) ; } echo solve ( $ dp , $ arr , 0 , $ n - 1 , 1 ) ; ? >"}
{"text":"function to find the maximum sum bitonic subarray","code":"< ? php function maxSumBitonicSubArr ( $ arr , $ n ) {"}
{"text":"' msis [ ] ' to store the maximum sum increasing subarray up to each index of ' arr ' from the beginning ' msds [ ] ' to store the maximum sum decreasing subarray from each index of ' arr ' up to the end","code":"$ msis = array ( ) ; $ msds = array ( ) ;"}
{"text":"to store the maximum sum bitonic subarray","code":"$ max_sum = PHP_INT_MIN ;"}
{"text":"building up the maximum sum increasing subarray for each array index","code":"$ msis [ 0 ] = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] > $ arr [ $ i - 1 ] ) $ msis [ $ i ] = $ msis [ $ i - 1 ] + $ arr [ $ i ] ; else $ msis [ $ i ] = $ arr [ $ i ] ;"}
{"text":"building up the maximum sum decreasing subarray for each array index","code":"$ msds [ $ n - 1 ] = $ arr [ $ n - 1 ] ; for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) if ( $ arr [ $ i ] > $ arr [ $ i + 1 ] ) $ msds [ $ i ] = $ msds [ $ i + 1 ] + $ arr [ $ i ] ; else $ msds [ $ i ] = $ arr [ $ i ] ;"}
{"text":"for each array index , calculating the maximum sum of bitonic subarray of which it is a part of","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ )"}
{"text":"if true , then update ' max ' bitonic subarray sum","code":"if ( $ max_sum < ( $ msis [ $ i ] + $ msds [ $ i ] - $ arr [ $ i ] ) ) $ max_sum = $ msis [ $ i ] + $ msds [ $ i ] - $ arr [ $ i ] ;"}
{"text":"required maximum sum","code":"return $ max_sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 3 , 9 , 2 , 7 , 6 , 4 ) ; $ n = sizeof ( $ arr ) ; echo \" Maximum \u2581 Sum \u2581 = \u2581 \" , maxSumBitonicSubArr ( $ arr , $ n ) ; ? >"}
{"text":"function to count the total number of ways","code":"< ? php function countWays ( $ n , $ m ) {"}
{"text":"table to store values of subproblems","code":"$ count [ 0 ] = 0 ;"}
{"text":"Fill the table upto value n","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"recurrence relation","code":"if ( $ i > $ m ) $ count [ $ i ] = $ count [ $ i - 1 ] + $ count [ $ i - $ m ] ;"}
{"text":"base cases","code":"else if ( $ i < $ m or $ i == 1 ) $ count [ $ i ] = 1 ;"}
{"text":"i = = m","code":"else $ count [ $ i ] = 2 ; }"}
{"text":"required number of ways","code":"return $ count [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 7 ; $ m = 4 ; echo \" Number \u2581 of \u2581 ways \u2581 = \u2581 \" , countWays ( $ n , $ m ) ; ? >"}
{"text":"PHP program to find the largest sum zigzag sequence","code":"< ? php $ MAX = 100 ;"}
{"text":"Returns largest sum of a Zigzag sequence starting from ( i , j ) and ending at a bottom cell .","code":"function largestZigZagSumRec ( $ mat , $ i , $ j , $ n ) {"}
{"text":"If we have reached bottom","code":"if ( $ i == $ n - 1 ) return $ mat [ $ i ] [ $ j ] ;"}
{"text":"Find the largest sum by considering all possible next elements in sequence .","code":"$ zzs = 0 ; for ( $ k = 0 ; $ k < $ n ; $ k ++ ) if ( $ k != $ j ) $ zzs = max ( $ zzs , largestZigZagSumRec ( $ mat , $ i + 1 , $ k , $ n ) ) ; return $ zzs + $ mat [ $ i ] [ $ j ] ; }"}
{"text":"Returns largest possible sum of a Zizag sequence starting from top and ending at bottom .","code":"function largestZigZag ( $ mat , $ n ) {"}
{"text":"Consider all cells of top row as starting point","code":"$ res = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ res = max ( $ res , largestZigZagSumRec ( $ mat , 0 , $ j , $ n ) ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ mat = array ( array ( 4 , 2 , 1 ) , array ( 3 , 9 , 6 ) , array ( 11 , 3 , 15 ) ) ; echo \" Largest \u2581 zigzag \u2581 sum : \u2581 \" , largestZigZag ( $ mat , $ n ) ; ? >"}
{"text":"n is total number of characters . bCount and cCount are counts of ' b ' and ' c ' respectively .","code":"< ? php function countStr ( $ n , $ bCount , $ cCount ) {"}
{"text":"Base cases","code":"if ( $ bCount < 0 $ cCount < 0 ) return 0 ; if ( $ n == 0 ) return 1 ; if ( $ bCount == 0 && $ cCount == 0 ) return 1 ;"}
{"text":"Three cases , we choose , a or b or c . In all three cases n decreases by 1.","code":"$ res = countStr ( $ n - 1 , $ bCount , $ cCount ) ; $ res += countStr ( $ n - 1 , $ bCount - 1 , $ cCount ) ; $ res += countStr ( $ n - 1 , $ bCount , $ cCount - 1 ) ; return $ res ; }"}
{"text":"Total number of characters","code":"$ n = 3 ; echo countStr ( $ n , 1 , 2 ) ; ? >"}
{"text":"PHP program to find Maximum path sum start any column in row '0' and ends up to any column in row ' n - 1'","code":"< ? php $ N = 4 ;"}
{"text":"function find maximum sum path","code":"function MaximumPath ( & $ Mat ) { global $ N ; $ result = 0 ;"}
{"text":"create 2D matrix to store the sum of the path","code":"$ dp = array_fill ( 0 , $ N , array_fill ( 0 , $ N + 2 , NULL ) ) ;"}
{"text":"copy all element of first column into ' dp ' first column","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ dp [ 0 ] [ $ i + 1 ] = $ Mat [ 0 ] [ $ i ] ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) for ( $ j = 1 ; $ j <= $ N ; $ j ++ ) $ dp [ $ i ] [ $ j ] = max ( $ dp [ $ i - 1 ] [ $ j - 1 ] , max ( $ dp [ $ i - 1 ] [ $ j ] , $ dp [ $ i - 1 ] [ $ j + 1 ] ) ) + $ Mat [ $ i ] [ $ j - 1 ] ;"}
{"text":"Find maximum path sum that end ups at any column of last row ' N - 1'","code":"for ( $ i = 0 ; $ i <= $ N ; $ i ++ ) $ result = max ( $ result , $ dp [ $ N - 1 ] [ $ i ] ) ;"}
{"text":"return maximum sum path","code":"return $ result ; }"}
{"text":"Driver Code","code":"$ Mat = array ( array ( 4 , 2 , 3 , 4 ) , array ( 2 , 9 , 1 , 10 ) , array ( 15 , 1 , 3 , 0 ) , array ( 16 , 92 , 41 , 44 ) ) ; echo MaximumPath ( $ Mat ) . \" STRNEWLINE \" ; ? >"}
{"text":"Dynamic and Logarithm approach find probability of at least k heads","code":"< ? php $ MAX = 100001 ;"}
{"text":"dp [ i ] is going to store Log ( i ! ) in base 2","code":"$ dp = array_fill ( 0 , $ MAX , 0 ) ; function probability ( $ k , $ n ) { global $ MAX , $ dp ;"}
{"text":"Initialize result","code":"$ ans = 0 ;"}
{"text":"Iterate from k heads to n heads","code":"for ( $ i = $ k ; $ i <= $ n ; ++ $ i ) { $ res = $ dp [ $ n ] - $ dp [ $ i ] - $ dp [ $ n - $ i ] - $ n ; $ ans += pow ( 2.0 , $ res ) ; } return $ ans ; } function precompute ( ) { global $ MAX , $ dp ;"}
{"text":"Preprocess all the logarithm value on base 2","code":"for ( $ i = 2 ; $ i < $ MAX ; ++ $ i )"}
{"text":"Driver code","code":"precompute ( ) ;"}
{"text":"Probability of getting 2 head out of 3 coins","code":"echo probability ( 2 , 3 ) . \" STRNEWLINE \" ;"}
{"text":"Probability of getting 3 head out of 6 coins","code":"echo probability ( 3 , 6 ) . \" STRNEWLINE \" ;"}
{"text":"Probability of getting 500 head out of 10000 coins","code":"echo probability ( 500 , 1000 ) ; ? >"}
{"text":"PHP program to print maximum path sum ending with each position x such that all path step positions divide x .","code":"< ? php function printMaxSum ( $ arr , $ n ) {"}
{"text":"Create an array such that dp [ i ] stores maximum path sum ending with i .","code":"$ dp = array ( ) ;"}
{"text":"Calculating maximum sum path for each element .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ dp [ $ i ] = $ arr [ $ i ] ;"}
{"text":"Finding previous step for arr [ i ] Moving from 1 to sqrt ( i + 1 ) since all the divisors are present from sqrt ( i + 1 ) .","code":"$ maxi = 0 ; for ( $ j = 1 ; $ j <= sqrt ( $ i + 1 ) ; $ j ++ ) {"}
{"text":"Checking if j is divisor of i + 1.","code":"if ( ( ( $ i + 1 ) % $ j == 0 ) && ( $ i + 1 ) != $ j ) {"}
{"text":"Checking which divisor will provide greater value .","code":"if ( $ dp [ $ j - 1 ] > $ maxi ) $ maxi = $ dp [ $ j - 1 ] ; if ( $ dp [ ( $ i + 1 ) \/ $ j - 1 ] > $ maxi && $ j != 1 ) $ maxi = $ dp [ ( $ i + 1 ) \/ $ j - 1 ] ; } } $ dp [ $ i ] += $ maxi ; }"}
{"text":"Printing the answer ( Maximum path sum ending with every position i + 1.","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ dp [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driven Program","code":"$ arr = array ( 2 , 3 , 1 , 4 , 6 , 5 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Function calling","code":"printMaxSum ( $ arr , $ n ) ; ? >"}
{"text":"Return sum of maximum sum alternating sequence starting with arr [ 0 ] and is first decreasing .","code":"< ? php function maxAlternateSum ( $ arr , $ n ) { if ( $ n == 1 ) return $ arr [ 0 ] ;"}
{"text":"handling the edge case","code":"$ min = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ min = max ( $ min , $ arr [ $ i ] ) ; } if ( $ arr [ 0 ] == $ min ) return $ arr [ 0 ] ;"}
{"text":"stores sum of decreasing and increasing sub - sequence","code":"$ dec = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"store sum of increasing and decreasing sun - sequence","code":"$ inc = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"As per question , first element must be part of solution .","code":"$ dec [ 0 ] = $ inc [ 0 ] = $ arr [ 0 ] ; $ flag = 0 ;"}
{"text":"Traverse remaining elements of array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ i ; $ j ++ ) {"}
{"text":"IF current sub - sequence is decreasing the update dec [ j ] if needed . dec [ i ] by current inc [ j ] + arr [ i ]","code":"if ( $ arr [ $ j ] > $ arr [ $ i ] ) { $ dec [ $ i ] = max ( $ dec [ $ i ] , $ inc [ $ j ] + $ arr [ $ i ] ) ;"}
{"text":"Revert the flag , if first decreasing is found","code":"$ flag = 1 ; }"}
{"text":"If next element is greater but flag should be 1 i . e . this element should be counted after the first decreasing element gets counted","code":"else if ( $ arr [ $ j ] < $ arr [ $ i ] && $ flag == 1 )"}
{"text":"If current sub - sequence is increasing then update inc [ i ]","code":"$ inc [ $ i ] = max ( $ inc [ $ i ] , $ dec [ $ j ] + $ arr [ $ i ] ) ; } }"}
{"text":"find maximum sum in b \/ w inc [ ] and dec [ ]","code":"$ result = - ( PHP_INT_MAX - 1 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ result < $ inc [ $ i ] ) $ result = $ inc [ $ i ] ; if ( $ result < $ dec [ $ i ] ) $ result = $ dec [ $ i ] ; }"}
{"text":"return maximum sum alternate sun - sequence","code":"return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( 8 , 2 , 3 , 5 , 7 , 9 , 10 ) ; $ n = sizeof ( $ arr ) ; echo \" Maximum \u2581 sum \u2581 = \u2581 \" , maxAlternateSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to calculate padovan number P ( n )","code":"< ? php function pad ( $ n ) {"}
{"text":"0 th , 1 st and 2 nd number of the series are 1","code":"$ pPrevPrev = 1 ; $ pPrev = 1 ; $ pCurr = 1 ; $ pNext = 1 ; for ( $ i = 3 ; $ i <= $ n ; $ i ++ ) { $ pNext = $ pPrevPrev + $ pPrev ; $ pPrevPrev = $ pPrev ; $ pPrev = $ pCurr ; $ pCurr = $ pNext ; } return $ pNext ; }"}
{"text":"Driver Code","code":"$ n = 12 ; echo ( pad ( $ n ) ) ; ? >"}
{"text":"Iterative function","code":"< ? php function lucas ( $ n ) {"}
{"text":"declaring base values for positions 0 and 1","code":"$ a = 2 ; $ b = 1 ; $ c ; $ i ; if ( $ n == 0 ) return $ a ;"}
{"text":"generating number","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ c = $ a + $ b ; $ a = $ b ; $ b = $ c ; } return $ b ; }"}
{"text":"Driver Code","code":"$ n = 9 ; echo lucas ( $ n ) ; ? >"}
{"text":"Function to find the maximum sum","code":"< ? php function breakSum ( $ n ) { $ dp = array_fill ( 0 , $ n + 1 , 0 ) ;"}
{"text":"base conditions","code":"$ dp [ 0 ] = 0 ; $ dp [ 1 ] = 1 ;"}
{"text":"Fill in bottom - up manner using recursive formula .","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] = max ( $ dp [ ( int ) ( $ i \/ 2 ) ] + $ dp [ ( int ) ( $ i \/ 3 ) ] + $ dp [ ( int ) ( $ i \/ 4 ) ] , $ i ) ; return $ dp [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 24 ; echo breakSum ( $ n ) ; ? >"}
{"text":"arr [ ] represents time taken by n given tasks","code":"< ? php function minTime ( $ arr , $ n ) {"}
{"text":"Corner Cases","code":"if ( $ n <= 0 ) return 0 ;"}
{"text":"First task is exluded","code":"$ excl = 0 ;"}
{"text":"Process remaining n - 1 tasks","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Time taken if current task is included There are two possibilities ( a ) Previous task is also included ( b ) Previous task is not included","code":"$ incl_new = $ arr [ $ i ] + min ( $ excl , $ incl ) ;"}
{"text":"Time taken when current task is not included . There is only one possibility that previous task is also included .","code":"$ excl_new = $ incl ;"}
{"text":"Update incl and excl for next iteration","code":"$ incl = $ incl_new ; $ excl = $ excl_new ; }"}
{"text":"Return maximum of two values for last task","code":"return min ( $ incl , $ excl ) ; }"}
{"text":"Driver code","code":"$ arr1 = array ( 10 , 5 , 2 , 7 , 10 ) ; $ n1 = sizeof ( $ arr1 ) ; echo minTime ( $ arr1 , $ n1 ) , \" STRNEWLINE \" ; $ arr2 = array ( 10 , 5 , 7 , 10 ) ; $ n2 = sizeof ( $ arr2 ) ; echo minTime ( $ arr2 , $ n2 ) , \" STRNEWLINE \" ; $ arr3 = array ( 10 , 5 , 2 , 4 , 8 , 6 , 7 , 10 ) ; $ n3 = sizeof ( $ arr3 ) ; echo minTime ( $ arr3 , $ n3 ) ; ? >"}
{"text":"A utility function to multiply two matrices a [ ] [ ] and b [ ] [ ] . Multiplication result is stored back in b [ ] [ ]","code":"< ? php function multiply ( & $ a , & $ b ) {"}
{"text":"Creating an auxiliary matrix to store elements of the multiplication matrix","code":"$ mul = array_fill ( 0 , 3 , array_fill ( 0 , 3 , 0 ) ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) { for ( $ j = 0 ; $ j < 3 ; $ j ++ ) { $ mul [ $ i ] [ $ j ] = 0 ; for ( $ k = 0 ; $ k < 3 ; $ k ++ ) $ mul [ $ i ] [ $ j ] += $ a [ $ i ] [ $ k ] * $ b [ $ k ] [ $ j ] ; } }"}
{"text":"storing the multiplication result in a [ ] [ ]","code":"for ( $ i = 0 ; $ i < 3 ; $ i ++ ) for ( $ j = 0 ; $ j < 3 ; $ j ++ )"}
{"text":"Updating our matrix","code":"$ a [ $ i ] [ $ j ] = $ mul [ $ i ] [ $ j ] ; }"}
{"text":"Function to compute F raise to power n - 2.","code":"function power ( $ F , $ n ) { $ M = array ( array ( 1 , 1 , 1 ) , array ( 1 , 0 , 0 ) , array ( 0 , 1 , 0 ) ) ;"}
{"text":"Multiply it with initial values i . e with F ( 0 ) = 0 , F ( 1 ) = 1 , F ( 2 ) = 1","code":"if ( $ n == 1 ) return $ F [ 0 ] [ 0 ] + $ F [ 0 ] [ 1 ] ; power ( $ F , ( int ) ( $ n \/ 2 ) ) ; multiply ( $ F , $ F ) ; if ( $ n % 2 != 0 ) multiply ( $ F , $ M ) ;"}
{"text":"Multiply it with initial values i . e with F ( 0 ) = 0 , F ( 1 ) = 1 , F ( 2 ) = 1","code":"return $ F [ 0 ] [ 0 ] + $ F [ 0 ] [ 1 ] ; }"}
{"text":"Return n 'th term of a series defined using below recurrence relation. f(n) is defined as f(n) = f(n-1) + f(n-2) + f(n-3), n>=3 Base Cases : f(0) = 0, f(1) = 1, f(2) = 1","code":"function findNthTerm ( $ n ) { $ F = array ( array ( 1 , 1 , 1 ) , array ( 1 , 0 , 0 ) , array ( 0 , 1 , 0 ) ) ; return power ( $ F , $ n - 2 ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo \" F ( 5 ) \u2581 is \u2581 \" . findNthTerm ( $ n ) ; ? >"}
{"text":"Returns count of count of ways to place 1 x 4 tiles on n x 4 grid .","code":"< ? php function countt ( $ n ) {"}
{"text":"Create a table to store results of subproblems dp [ i ] stores count of ways for i x 4 grid .","code":"$ dp [ $ n + 1 ] = 0 ; $ dp [ 0 ] = 0 ;"}
{"text":"Fill the table from d [ 1 ] to dp [ n ]","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Base cases","code":"if ( $ i >= 1 && $ i <= 3 ) $ dp [ $ i ] = 1 ; else if ( $ i == 4 ) $ dp [ $ i ] = 2 ; else"}
{"text":"dp ( i - 1 ) : Place first tile horizontally dp ( n - 4 ) : Place first tile vertically which means 3 more tiles have to be placed vertically .","code":"$ dp [ $ i ] = $ dp [ $ i - 1 ] + $ dp [ $ i - 4 ] ; } return $ dp [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo \" Count \u2581 of \u2581 ways \u2581 is \u2581 \" , countt ( $ n ) ; ? >"}
{"text":"Returns nCr % p","code":"< ? php function nCrModp ( $ n , $ r , $ p ) {"}
{"text":"Optimization for the cases when r is large","code":"if ( $ r > $ n - $ r ) $ r = $ n - $ r ;"}
{"text":"The array C is going to store last row of pascal triangle at the end . And last entry of last row is nCr","code":"$ C = array ( ) ; for ( $ i = 0 ; $ i < $ r + 1 ; $ i ++ ) $ C [ $ i ] = 0 ;"}
{"text":"Top row of Pascal Triangle","code":"$ C [ 0 ] = 1 ;"}
{"text":"One by constructs remaining rows of Pascal Triangle from top to bottom","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Fill entries of current row using previous row values","code":"for ( $ j = Min ( $ i , $ r ) ; $ j > 0 ; $ j -- )"}
{"text":"nCj = ( n - 1 ) Cj + ( n - 1 ) C ( j - 1 ) ;","code":"$ C [ $ j ] = ( $ C [ $ j ] + $ C [ $ j - 1 ] ) % $ p ; } return $ C [ $ r ] ; }"}
{"text":"Driver Code","code":"$ n = 10 ; $ r = 2 ; $ p = 13 ; echo \" Value \u2581 of \u2581 nCr \u2581 % \u2581 p \u2581 is \u2581 \" , nCrModp ( $ n , $ r , $ p ) ; ? >"}
{"text":"function that returns n 'th bell number","code":"< ? php function bellNumber ( $ n ) { $ bell [ 0 ] [ 0 ] = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Explicitly fill for j = 0","code":"$ bell [ $ i ] [ 0 ] = $ bell [ $ i - 1 ] [ $ i - 1 ] ;"}
{"text":"Fill for remaining values of j","code":"for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) $ bell [ $ i ] [ $ j ] = $ bell [ $ i - 1 ] [ $ j - 1 ] + $ bell [ $ i ] [ $ j - 1 ] ; } return $ bell [ $ n ] [ 0 ] ; }"}
{"text":"Driver Code","code":"for ( $ n = 0 ; $ n <= 5 ; $ n ++ ) echo ( \" Bell \u2581 Number \u2581 \" . $ n . \" \u2581 is \u2581 \" . bellNumber ( $ n ) . \" STRNEWLINE \" ) ; ? >"}
{"text":"Function returns count of ways to cover ' dist '","code":"< ? php function printCountDP ( $ dist ) { $ count = array ( ) ;"}
{"text":"Initialize base values . There is one way to cover 0 and 1 distances and two ways to cover 2 distance","code":"$ count [ 0 ] = 1 ; $ count [ 1 ] = 1 ; $ count [ 2 ] = 2 ;"}
{"text":"Fill the count array in bottom up manner","code":"for ( $ i = 3 ; $ i <= $ dist ; $ i ++ ) $ count [ $ i ] = $ count [ $ i - 1 ] + $ count [ $ i - 2 ] + $ count [ $ i - 3 ] ; return $ count [ $ dist ] ; }"}
{"text":"Driver Code","code":"$ dist = 4 ; echo printCountDP ( $ dist ) ; ? >"}
{"text":"Returns the count of even length sequences","code":"< ? php function countSeq ( $ n ) { $ nCr = 1 ; $ res = 1 ;"}
{"text":"Calculate SUM ( ( nCr ) ^ 2 )","code":"for ( $ r = 1 ; $ r <= $ n ; $ r ++ ) {"}
{"text":"Compute nCr using nC ( r - 1 ) nCr \/ nC ( r - 1 ) = ( n + 1 - r ) \/ r ;","code":"$ nCr = ( $ nCr * ( $ n + 1 - $ r ) ) \/ $ r ; $ res = $ res + ( $ nCr * $ nCr ) ; } return $ res ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo ( \" Count \u2581 of \u2581 sequences \u2581 is \u2581 \" ) ; echo countSeq ( $ n ) ; ? >"}
{"text":"A utility function to find minimum in arr [ l . . h ]","code":"< ? php function min1 ( $ arr , $ l , $ h ) { $ mn = $ arr [ $ l ] ; for ( $ i = $ l + 1 ; $ i <= $ h ; $ i ++ ) if ( $ mn > $ arr [ $ i ] ) $ mn = $ arr [ $ i ] ; return $ mn ; }"}
{"text":"A utility function to find maximum in arr [ l . . h ]","code":"function max1 ( $ arr , $ l , $ h ) { $ mx = $ arr [ $ l ] ; for ( $ i = $ l + 1 ; $ i <= $ h ; $ i ++ ) if ( $ mx < $ arr [ $ i ] ) $ mx = $ arr [ $ i ] ; return $ mx ; }"}
{"text":"Returns the minimum number of removals from either end in arr [ l . . h ] so that 2 * min becomes greater than max .","code":"function minRemovalsDP ( $ arr , $ n ) {"}
{"text":"Create a table to store solutions of subproblems","code":"$ table = array_fill ( 0 , $ n , array_fill ( 0 , $ n , 0 ) ) ;"}
{"text":"Fill table using above recursive formula . Note that the table is filled in diagonal fashion ( similar to http : goo . gl \/ PQqoS ) , from diagonal elements to table [ 0 ] [ n - 1 ] which is the result .","code":"for ( $ gap = 0 ; $ gap < $ n ; ++ $ gap ) { for ( $ i = 0 , $ j = $ gap ; $ j < $ n ; ++ $ i , ++ $ j ) { $ mn = min1 ( $ arr , $ i , $ j ) ; $ mx = max1 ( $ arr , $ i , $ j ) ; $ table [ $ i ] [ $ j ] = ( 2 * $ mn > $ mx ) ? 0 : min ( $ table [ $ i ] [ $ j - 1 ] + 1 , $ table [ $ i + 1 ] [ $ j ] + 1 ) ; } } return $ table [ 0 ] [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 20 , 4 , 1 , 3 ) ; $ n = count ( $ arr ) ; echo minRemovalsDP ( $ arr , $ n ) ; ? >"}
{"text":"Returns count of possible paths to reach cell at row number m and column number n from the topmost leftmost cell ( cell at 1 , 1 )","code":"< ? php function numberOfPaths ( $ m , $ n ) {"}
{"text":"If either given row number is first or given column number is first","code":"if ( $ m == 1 $ n == 1 ) return 1 ;"}
{"text":"If diagonal movements are allowed then the last addition is required .","code":"return numberOfPaths ( $ m - 1 , $ n ) + numberOfPaths ( $ m , $ n - 1 ) ; }"}
{"text":"Driver Code","code":"echo numberOfPaths ( 3 , 3 ) ; ? >"}
{"text":"PHP program to count all possible paths from top left to top bottom using combinatorics","code":"< ? php function numberOfPaths ( $ m , $ n ) {"}
{"text":"We have to calculate m + n - 2 C n - 1 here which will be ( m + n - 2 ) ! \/ ( n - 1 ) ! ( m - 1 ) !","code":"$ path = 1 ; for ( $ i = $ n ; $ i < ( $ m + $ n - 1 ) ; $ i ++ ) { $ path *= $ i ; $ path \/= ( $ i - $ n + 1 ) ; } return $ path ; }"}
{"text":"Driver code","code":"{ echo ( numberOfPaths ( 3 , 3 ) ) ; }"}
{"text":"Returns length of the longest AP subset in a given set","code":"< ? php function lenghtOfLongestAP ( $ set , $ n ) { if ( $ n <= 2 ) return $ n ;"}
{"text":"Create a table and initialize all values as 2. The value of L [ i ] [ j ] stores LLAP with set [ i ] and set [ j ] as first two elements of AP . Only valid entries are the entries where j > i","code":"$ L [ $ n ] [ $ n ] = array ( array ( ) ) ;"}
{"text":"Fill entries in last column as 2. There will always be two elements in AP with last number of set as second element in AP","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ L [ $ i ] [ $ n - 1 ] = 2 ;"}
{"text":"Consider every element as second element of AP","code":"for ( $ j = $ n - 2 ; $ j >= 1 ; $ j -- ) {"}
{"text":"Search for i and k for j","code":"$ i = $ j - 1 ; $ k = $ j + 1 ; while ( $ i >= 0 && $ k <= $ n - 1 ) { if ( $ set [ $ i ] + $ set [ $ k ] < 2 * $ set [ $ j ] ) $ k ++ ;"}
{"text":"Before changing i , set L [ i ] [ j ] as 2","code":"else if ( $ set [ $ i ] + $ set [ $ k ] > 2 * $ set [ $ j ] ) { $ L [ $ i ] [ $ j ] = 2 ; $ i -- ; } else {"}
{"text":"Found i and k for j , LLAP with i and j as first two elements is equal to LLAP with j and k as first two elements plus 1. L [ j ] [ k ] must have been filled before as we run the loop from right side","code":"$ L [ $ i ] [ $ j ] = $ L [ $ j ] [ $ k ] + 1 ;"}
{"text":"Update overall LLAP , if needed","code":"$ llap = max ( $ llap , $ L [ $ i ] [ $ j ] ) ;"}
{"text":"Change i and k to fill more L [ i ] [ j ] values for current j","code":"$ i -- ; $ k ++ ; } }"}
{"text":"If the loop was stopped due to k becoming more than n - 1 , set the remaining entities in column j as 2","code":"while ( $ i >= 0 ) { $ L [ $ i ] [ $ j ] = 2 ; $ i -- ; } } return $ llap ; }"}
{"text":"Driver Code","code":"$ set1 = array ( 1 , 7 , 10 , 13 , 14 , 19 ) ; $ n1 = sizeof ( $ set1 ) ; echo lenghtOfLongestAP ( $ set1 , $ n1 ) , \" \" ; $ set2 = array ( 1 , 7 , 10 , 15 , 27 , 29 ) ; $ n2 = sizeof ( $ set2 ) ; echo lenghtOfLongestAP ( $ set2 , $ n2 ) , \" \" ; $ set3 = array ( 2 , 4 , 6 , 8 , 10 ) ; $ n3 = sizeof ( $ set3 ) ; echo lenghtOfLongestAP ( $ set3 , $ n3 ) , \" \" ; ? >"}
{"text":"lbs ( ) returns the length of the Longest Bitonic Subsequence in arr [ ] of size n . The function mainly creates two temporary arrays lis [ ] and lds [ ] and returns the maximum lis [ i ] + lds [ i ] - 1. lis [ i ] == > Longest Increasing subsequence ending with arr [ i ] lds [ i ] == > Longest decreasing subsequence starting with arr [ i ]","code":"< ? php function lbs ( & $ arr , $ n ) {"}
{"text":"Allocate memory for LIS [ ] and initialize LIS values as 1 for all indexes","code":"$ lis = array_fill ( 0 , $ n , NULL ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ lis [ $ i ] = 1 ;"}
{"text":"Compute LIS values from left to right","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ arr [ $ i ] > $ arr [ $ j ] && $ lis [ $ i ] < $ lis [ $ j ] + 1 ) $ lis [ $ i ] = $ lis [ $ j ] + 1 ;"}
{"text":"Allocate memory for lds and initialize LDS values for all indexes","code":"$ lds = array_fill ( 0 , $ n , NULL ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ lds [ $ i ] = 1 ;"}
{"text":"Compute LDS values from right to left","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) for ( $ j = $ n - 1 ; $ j > $ i ; $ j -- ) if ( $ arr [ $ i ] > $ arr [ $ j ] && $ lds [ $ i ] < $ lds [ $ j ] + 1 ) $ lds [ $ i ] = $ lds [ $ j ] + 1 ;"}
{"text":"Return the maximum value of lis [ i ] + lds [ i ] - 1","code":"$ max = $ lis [ 0 ] + $ lds [ 0 ] - 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ lis [ $ i ] + $ lds [ $ i ] - 1 > $ max ) $ max = $ lis [ $ i ] + $ lds [ $ i ] - 1 ; return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 0 , 8 , 4 , 12 , 2 , 10 , 6 , 14 , 1 , 9 , 5 , 13 , 3 , 11 , 7 , 15 ) ; $ n = sizeof ( $ arr ) ; echo \" Length \u2581 of \u2581 LBS \u2581 is \u2581 \" . lbs ( $ arr , $ n ) ; ? >"}
{"text":"Function to get minimum number of trials needed in worst case with n eggs and k floors","code":"< ? php function eggDrop ( $ n , $ k ) {"}
{"text":"A 2D table where entry eggFloor [ i ] [ j ] will represent minimum number of trials needed for i eggs and j floors .","code":"$ eggFloor = array ( array ( ) ) ; ;"}
{"text":"We need one trial for one floor and0 trials for 0 floors","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ eggFloor [ $ i ] [ 1 ] = 1 ; $ eggFloor [ $ i ] [ 0 ] = 0 ; }"}
{"text":"We always need j trials for one egg and j floors .","code":"for ( $ j = 1 ; $ j <= $ k ; $ j ++ ) $ eggFloor [ 1 ] [ $ j ] = $ j ;"}
{"text":"Fill rest of the entries in table using optimal substructure property","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 2 ; $ j <= $ k ; $ j ++ ) { $ eggFloor [ $ i ] [ $ j ] = 999999 ; for ( $ x = 1 ; $ x <= $ j ; $ x ++ ) { $ res = 1 + max ( $ eggFloor [ $ i - 1 ] [ $ x - 1 ] , $ eggFloor [ $ i ] [ $ j - $ x ] ) ; if ( $ res < $ eggFloor [ $ i ] [ $ j ] ) $ eggFloor [ $ i ] [ $ j ] = $ res ; } } }"}
{"text":"eggFloor [ n ] [ k ] holds the result","code":"return $ eggFloor [ $ n ] [ $ k ] ; }"}
{"text":"Driver Code","code":"$ n = 2 ; $ k = 36 ; echo \" Minimum \u2581 number \u2581 of \u2581 trials \u2581 in \u2581 worst \u2581 case \u2581 with \u2581 \" . $ n . \" \u2581 eggs \u2581 and \u2581 \" . $ k . \" \u2581 floors \u2581 is \u2581 \" . eggDrop ( $ n , $ k ) ; ? >"}
{"text":"Returns the maximum value that can be put in a knapsack of capacity W","code":"< ? php function knapSack ( $ W , $ wt , $ val , $ n ) {"}
{"text":"Base Case","code":"if ( $ n == 0 $ W == 0 ) return 0 ;"}
{"text":"If weight of the nth item is more than Knapsack capacity W , then this item cannot be included in the optimal solution","code":"if ( $ wt [ $ n - 1 ] > $ W ) return knapSack ( $ W , $ wt , $ val , $ n - 1 ) ;"}
{"text":"Return the maximum of two cases : ( 1 ) nth item included ( 2 ) not included","code":"else return max ( $ val [ $ n - 1 ] + knapSack ( $ W - $ wt [ $ n - 1 ] , $ wt , $ val , $ n - 1 ) , knapSack ( $ W , $ wt , $ val , $ n -1 ) ) ; }"}
{"text":"Driver Code","code":"$ val = array ( 60 , 100 , 120 ) ; $ wt = array ( 10 , 20 , 30 ) ; $ W = 50 ; $ n = count ( $ val ) ; echo knapSack ( $ W , $ wt , $ val , $ n ) ; ? >"}
{"text":"A function to find factorial of a given number","code":"< ? php function factorial ( $ n ) { $ res = 1 ;"}
{"text":"Calculate value of [ 1 * ( 2 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) { $ res *= $ i ; } return $ res ; } function binomialCoeff ( $ n , $ k ) { $ res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( $ k > $ n - $ k ) $ k = $ n - $ k ;"}
{"text":"Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) { $ res *= ( $ n - $ i ) ; $ res = ( int ) $ res \/ ( $ i + 1 ) ; } return $ res ; }"}
{"text":"A Binomial coefficient based function to find nth catalan number in O ( n ) time","code":"function catalan ( $ n ) {"}
{"text":"Calculate value of 2 nCn","code":"$ c = binomialCoeff ( 2 * $ n , $ n ) ;"}
{"text":"return 2 nCn \/ ( n + 1 )","code":"return ( int ) $ c \/ ( $ n + 1 ) ; }"}
{"text":"A function to count number of BST with n nodes using catalan","code":"function countBST ( $ n ) {"}
{"text":"find nth catalan number","code":"$ count = catalan ( $ n ) ;"}
{"text":"return nth catalan number","code":"return $ count ; }"}
{"text":"A function to count number of binary trees with n nodes","code":"function countBT ( $ n ) {"}
{"text":"find count of BST with n numbers","code":"$ count = catalan ( $ n ) ;"}
{"text":"return count * n !","code":"return $ count * factorial ( $ n ) ; }"}
{"text":"Driver Code","code":"$ count1 ; $ count2 ; $ n = 5 ;"}
{"text":"find count of BST and binary trees with n nodes","code":"$ count1 = countBST ( $ n ) ; $ count2 = countBT ( $ n ) ;"}
{"text":"print count of BST and binary trees with n nodes","code":"echo \" Count \u2581 of \u2581 BST \u2581 with \u2581 \" , $ n , \" \u2581 nodes \u2581 is \u2581 \" , $ count1 , \" STRNEWLINE \" ; echo \" Count \u2581 of \u2581 binary \u2581 trees \u2581 with \u2581 \" , $ n , \" \u2581 nodes \u2581 is \u2581 \" , $ count2 ; ? >"}
{"text":"Function to generate a permutation of integers from 1 to N such that the absolute difference of all the two consecutive integers give K distinct integers","code":"< ? php function printPermutation ( $ N , $ K ) {"}
{"text":"To store the permutation","code":"$ res = array ( ) ; $ l = 1 ; $ r = $ N ; $ flag = 0 ; for ( $ i = 0 ; $ i < $ K ; $ i ++ ) { if ( ! $ flag ) {"}
{"text":"For sequence 1 2 3. . .","code":"array_push ( $ res , $ l ) ; $ l ++ ; } else {"}
{"text":"For sequence N , N - 1 , N - 2. . .","code":"array_push ( $ res , $ r ) ; $ r -- ; }"}
{"text":"Flag is used to alternate between the above if else statements","code":"$ flag ^= 1 ; }"}
{"text":"If last element added was r + 1","code":"if ( ! $ flag ) { for ( $ i = $ r ; $ i >= $ l ; $ i -- ) array_push ( $ res , $ i ) ; }"}
{"text":"If last element added was l - 1","code":"else { for ( $ i = l ; $ i <= $ r ; $ i ++ ) array_push ( $ res , $ i ) ; }"}
{"text":"Print the permutation","code":"for ( $ i = 0 ; $ i < sizeof ( $ res ) ; $ i ++ ) echo $ res [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ N = 10 ; $ K = 4 ; printPermutation ( $ N , $ K ) ; ? >"}
{"text":"calculate factorial of N","code":"< ? php function fact ( $ N ) { $ product = 1 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) $ product = $ product * $ i ; return $ product ; }"}
{"text":"calculate Nth term of series","code":"function nthTerm ( $ N ) { return ( $ N * $ N ) * fact ( $ N ) ; }"}
{"text":"Driver Code","code":"$ N = 4 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"d is the number of characters in the input alphabet","code":"< ? php $ d = 256 ;"}
{"text":"pat -> pattern txt -> text q -> A prime number","code":"function search ( $ pat , $ txt , $ q ) { $ M = strlen ( $ pat ) ; $ N = strlen ( $ txt ) ; $ i ; $ j ;"}
{"text":"$p = 0 ; hash value for pattern $t = 0 ; hash value for txt","code":"$ h = 1 ; $ d = 1 ;"}
{"text":"The value of h would be \" pow ( d , \u2581 M - 1 ) % q \"","code":"for ( $ i = 0 ; $ i < $ M - 1 ; $ i ++ ) $ h = ( $ h * $ d ) % $ q ;"}
{"text":"Calculate the hash value of pattern and first window of text","code":"for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { $ p = ( $ d * $ p + $ pat [ $ i ] ) % $ q ; $ t = ( $ d * $ t + $ txt [ $ i ] ) % $ q ; }"}
{"text":"Slide the pattern over text one by one","code":"for ( $ i = 0 ; $ i <= $ N - $ M ; $ i ++ ) {"}
{"text":"Check the hash values of current window of text and pattern . If the hash values match then only check for characters on by one","code":"if ( $ p == $ t ) {"}
{"text":"Check for characters one by one","code":"for ( $ j = 0 ; $ j < $ M ; $ j ++ ) { if ( $ txt [ $ i + $ j ] != $ pat [ $ j ] ) break ; }"}
{"text":"if p == t and pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]","code":"if ( $ j == $ M ) echo \" Pattern \u2581 found \u2581 at \u2581 index \u2581 \" , $ i , \" STRNEWLINE \" ; }"}
{"text":"Calculate hash value for next window of text : Remove leading digit , add trailing digit","code":"if ( $ i < $ N - $ M ) { $ t = ( $ d * ( $ t - $ txt [ $ i ] * $ h ) + $ txt [ $ i + $ M ] ) % $ q ;"}
{"text":"We might get negative value of t , converting it to positive","code":"if ( $ t < 0 ) $ t = ( $ t + $ q ) ; } } }"}
{"text":"Driver Code","code":"$ txt = \" GEEKS \u2581 FOR \u2581 GEEKS \" ; $ pat = \" GEEK \" ;"}
{"text":"A prime number","code":"$ q = 101 ;"}
{"text":"Function Call","code":"search ( $ pat , $ txt , $ q ) ; ? >"}
{"text":"Function to count the number of tower","code":"< ? php function number_of_tower ( $ house , $ range , $ n ) {"}
{"text":"first we sort the house numbers","code":"sort ( $ house ) ;"}
{"text":"for count number of towers","code":"$ numOfTower = 0 ;"}
{"text":"for iterate all houses","code":"$ i = 0 ; while ( $ i < $ n ) {"}
{"text":"count number of towers","code":"$ numOfTower ++ ;"}
{"text":"find find the middle location","code":"$ loc = $ house [ $ i ] + $ range ;"}
{"text":"traverse till middle location","code":"while ( $ i < $ n && $ house [ $ i ] <= $ loc ) $ i ++ ;"}
{"text":"this is point to middle house where we insert the tower","code":"-- $ i ;"}
{"text":"now find the last location","code":"$ loc = $ house [ $ i ] + $ range ;"}
{"text":"traverse till last house of the range","code":"while ( $ i < $ n && $ house [ $ i ] <= $ loc ) $ i ++ ; }"}
{"text":"return the number of tower","code":"return $ numOfTower ; }"}
{"text":"given elements","code":"$ house = array ( 7 , 2 , 4 , 6 , 5 , 9 , 12 , 11 ) ; $ range = 2 ; $ n = sizeof ( $ house ) \/ sizeof ( $ house [ 0 ] ) ;"}
{"text":"print number of towers","code":"echo number_of_tower ( $ house , $ range , $ n ) ; ? >"}
{"text":"PHP program to find smallest number in array that is repeated exactly ' k ' times .","code":"< ? php $ MAX = 1000 ; function findDuplicate ( $ arr , $ n , $ k ) { global $ MAX ;"}
{"text":"Computing frequencies of all elements","code":"$ freq = array_fill ( 0 , $ MAX , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] < 1 && $ arr [ $ i ] > $ MAX ) { echo \" Out \u2581 of \u2581 range \" ; return -1 ; } $ freq [ $ arr [ $ i ] ] += 1 ; }"}
{"text":"Finding the smallest element with frequency as k","code":"for ( $ i = 0 ; $ i < $ MAX ; $ i ++ ) {"}
{"text":"If frequency of any of the number is equal to k starting from 0 then return the number","code":"if ( $ freq [ $ i ] == $ k ) return $ i ; } return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 2 , 1 , 3 , 1 ) ; $ k = 2 ; $ n = count ( $ arr ) ; echo findDuplicate ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Prints pendulam arrangement of arr [ ]","code":"< ? php function pendulumArrangement ( $ arr , $ n ) {"}
{"text":"sorting the elements","code":"sort ( $ arr , $ n ) ; sort ( $ arr ) ;"}
{"text":"Auxiliary array to store output","code":"$ op [ $ n ] = NULL ;"}
{"text":"calculating the middle index","code":"$ mid = floor ( ( $ n - 1 ) \/ 2 ) ;"}
{"text":"storing the minimum element in the middle i is index for output array and j is for input array .","code":"$ j = 1 ; $ i = 1 ; $ op [ $ mid ] = $ arr [ 0 ] ; for ( $ i = 1 ; $ i <= $ mid ; $ i ++ ) { $ op [ $ mid + $ i ] = $ arr [ $ j ++ ] ; $ op [ $ mid - $ i ] = $ arr [ $ j ++ ] ; }"}
{"text":"adjustment for when no . of elements is even","code":"if ( $ n % 2 == 0 ) $ op [ $ mid + $ i ] = $ arr [ $ j ] ;"}
{"text":"Printing the pendulum arrangement","code":"echo \" Pendulum \u2581 arrangement : \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ op [ $ i ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"input Array","code":"arr = array ( 14 , 6 , 19 , 21 , 12 ) ;"}
{"text":"calculating the length of array A","code":"$ n = sizeof ( $ arr ) ;"}
{"text":"calling pendulum function","code":"pendulumArrangement ( $ arr , $ n ) ; ? >"}
{"text":"Maximum distinct characters possible","code":"< ? php $ MAX = 256 ;"}
{"text":"To store the frequency of the characters","code":"$ freq = array_fill ( 0 , 256 , array_fill ( 0 , 1000 , 0 ) ) ;"}
{"text":"Function to pre - calculate the frequency array","code":"function preCalculate ( $ str , $ n ) { global $ freq ; global $ MAX ;"}
{"text":"Only the first character has frequency 1 till index 0","code":"$ freq [ ord ( $ str [ 0 ] ) ] [ 0 ] = 1 ;"}
{"text":"Starting from the second character of the string","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ ch = $ str [ $ i ] ;"}
{"text":"For every possible character","code":"for ( $ j = 0 ; $ j < $ MAX ; $ j ++ ) {"}
{"text":"Current character under consideration","code":"$ charToUpdate = chr ( $ j ) ;"}
{"text":"If it is equal to the character at the current index","code":"if ( $ charToUpdate == $ ch ) $ freq [ $ j ] [ $ i ] = $ freq [ $ j ] [ $ i - 1 ] + 1 ; else $ freq [ $ j ] [ $ i ] = $ freq [ $ j ] [ $ i - 1 ] ; } } }"}
{"text":"Function to return the frequency of the given character in the sub - string $str [ $l ... $r ]","code":"function getFrequency ( $ ch , $ l , $ r ) { global $ freq ; if ( $ l == 0 ) return $ freq [ ord ( $ ch ) ] [ $ r ] ; else return ( $ freq [ ord ( $ ch ) ] [ $ r ] - $ freq [ ord ( $ ch ) ] [ $ l - 1 ] ) ; }"}
{"text":"Function to return the last non - repeating character","code":"function lastNonRepeating ( $ str , $ n , $ l , $ r ) {"}
{"text":"Starting from the last character","code":"for ( $ i = $ r ; $ i >= $ l ; $ i -- ) {"}
{"text":"Current character","code":"$ ch = $ str [ $ i ] ;"}
{"text":"If frequency of the current character is 1 then return the character","code":"if ( getFrequency ( $ ch , $ l , $ r ) == 1 ) return $ ch ; }"}
{"text":"All the characters of the sub - string are repeating","code":"return \" - 1\" ; }"}
{"text":"Driver code","code":"$ str = \" GeeksForGeeks \" ; $ n = strlen ( $ str ) ; $ queries = array ( array ( 2 , 9 ) , array ( 2 , 3 ) , array ( 0 , 12 ) ) ; $ q = 3 ;"}
{"text":"Pre - calculate the frequency array","code":"preCalculate ( $ str , $ n ) ; for ( $ i = 0 ; $ i < $ q ; $ i ++ ) { echo ( lastNonRepeating ( $ str , $ n , $ queries [ $ i ] [ 0 ] , $ queries [ $ i ] [ 1 ] ) ) , \" STRNEWLINE \" ; } ? >"}
{"text":"Function to return the minimum cost","code":"< ? php function minCost ( $ str , $ K ) { $ n = strlen ( $ str ) ;"}
{"text":"Initialize result","code":"$ res = 999999999 ; $ count = 0 ;"}
{"text":"To store the frequency of characters of the string Initialize array with 0","code":"$ cnt = array_fill ( 0 , 27 , 0 ) ;"}
{"text":"Update the frequencies of the characters of the string","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ cnt [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) + 1 ] ++ ;"}
{"text":"Loop to check all windows from a - z where window size is K","code":"for ( $ i = 1 ; $ i < ( 26 - $ K + 1 ) ; $ i ++ ) {"}
{"text":"Starting index of window","code":"$ a = $ i ;"}
{"text":"Ending index of window","code":"$ b = $ i + $ K ; $ count = 0 ; for ( $ j = 1 ; $ j <= 26 ; $ j ++ ) {"}
{"text":"Check if the string contains character","code":"if ( $ cnt [ $ j ] > 0 ) {"}
{"text":"Check if the character is on left side of window find the cost of modification for character add value to count calculate nearest distance of modification","code":"if ( $ j >= $ a && $ j >= $ b ) $ count = $ count + ( min ( $ j - $ b , 25 - $ j + $ a + 1 ) ) * $ cnt [ $ j ] ;"}
{"text":"Check if the character is on right side of window find the cost of modification for character add value to count calculate nearest distance of modification","code":"else if ( $ j <= $ a && $ j <= $ b ) $ count = $ count + ( min ( $ a - $ j , 25 + $ j - $ b + 1 ) ) * $ cnt [ $ j ] ; } }"}
{"text":"Find the minimum of all costs for modifying the string","code":"$ res = min ( $ res , $ count ) ; }"}
{"text":"Loop to check all windows Here window contains characters before z and after z of window size K","code":"for ( $ i = 26 - $ K + 1 ; $ i <= 26 ; $ i ++ ) {"}
{"text":"Starting index of window","code":"$ a = $ i ;"}
{"text":"Ending index of window","code":"$ b = ( $ i + $ K ) % 26 ; $ count = 0 ; for ( $ j = 1 ; $ j <= 26 ; $ j ++ ) {"}
{"text":"Check if the string contains character","code":"if ( $ cnt [ $ j ] > 0 ) {"}
{"text":"If characters are outside window find the cost for modifying character add value to count","code":"if ( $ j >= $ b and $ j <= $ a ) $ count = $ count + ( min ( $ j - $ b , $ a - $ j ) ) * $ cnt [ $ j ] ; } }"}
{"text":"Find the minimum of all costs for modifying the string","code":"$ res = min ( $ res , $ count ) ; } return $ res ; }"}
{"text":"Driver code","code":"$ str = \" abcdefghi \" ; $ K = 2 ; echo minCost ( $ str , $ K ) ; ? >"}
{"text":"Function to print the last character of each word in the given string","code":"< ? php function printLastChar ( $ str ) {"}
{"text":"Now , last word is also followed by a space","code":"$ str = $ str . \" \u2581 \" ; for ( $ i = 1 ; $ i < strlen ( $ str ) ; $ i ++ ) {"}
{"text":"If current character is a space","code":"if ( ! strcmp ( $ str [ $ i ] , ' \u2581 ' ) )"}
{"text":"Then previous character must be the last character of some word","code":"echo ( $ str [ $ i - 1 ] . \" \" ) ; } }"}
{"text":"Driver code","code":"$ str = \" Geeks \u2581 for \u2581 Geeks \" ; printLastChar ( $ str ) ; ? >"}
{"text":"PHP implementation of the approach Function to return the length of the longest balanced sub - string","code":"< ? php function maxBalancedStr ( $ s ) {"}
{"text":"To store the count of parentheses","code":"$ open1 = 0 ; $ close1 = 0 ; $ open2 = 0 ; $ close2 = 0 ; $ open3 = 0 ; $ close3 = 0 ;"}
{"text":"Traversing the string","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"Check type of parentheses and incrementing count for it","code":"switch ( $ s [ $ i ] ) { case ' ( ' : $ open1 ++ ; break ; case ' ) ' : $ close1 ++ ; break ; case ' { ' : $ open2 ++ ; break ; case ' } ' : $ close2 ++ ; break ; case ' [ ' : $ open3 ++ ; break ; case ' ] ' : $ close3 ++ ; break ; } }"}
{"text":"Sum all pair of balanced parentheses","code":"$ maxLen = 2 * min ( $ open1 , $ close1 ) + 2 * min ( $ open2 , $ close2 ) + 2 * min ( $ open3 , $ close3 ) ; return $ maxLen ; }"}
{"text":"Driven code","code":"{ $ s = \" ) ) [ ] ] ( ( \" ; echo ( maxBalancedStr ( $ s ) ) ; }"}
{"text":"Function to extract the secret message","code":"< ? php function extractSecretMessage ( $ Str , $ Sub ) {"}
{"text":"Replacing all occurrences of Sub in Str by empty spaces","code":"$ Str = str_replace ( $ Sub , \" \u2581 \" , $ Str ) ;"}
{"text":"Removing unwanted spaces in the start and end of the string","code":"return trim ( $ Str ) ; }"}
{"text":"Driver code","code":"$ Str = \" LIELIEILIEAMLIECOOL \" ; $ Sub = \" LIE \" ; echo extractSecretMessage ( $ Str , $ Sub ) ; ? >"}
{"text":"Returns index of x if it is present in arr [ ] , else return - 1","code":"< ? php function binarySearch ( $ arr , $ x ) { $ l = 0 ; $ r = count ( $ arr ) ; while ( $ l <= $ r ) { $ m = $ l + ( int ) ( ( $ r - $ l ) \/ 2 ) ; $ res = strcmp ( $ x , $ arr [ $ m ] ) ;"}
{"text":"Check if x is present at mid","code":"if ( $ res == 0 ) return $ m - 1 ;"}
{"text":"If x greater , ignore left half","code":"if ( $ res > 0 ) $ l = $ m + 1 ;"}
{"text":"If x is smaller , ignore right half","code":"else $ r = $ m - 1 ; } return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( \" contribute \" , \" geeks \" , \" ide \" , \" practice \" ) ; $ x = \" ide \" ; $ result = binarySearch ( $ arr , $ x ) ; if ( $ result == -1 ) print ( \" Element \u2581 not \u2581 present \" ) ; else print ( \" Element \u2581 found \u2581 at \u2581 index \u2581 \" . $ result ) ; ? >"}
{"text":"Function to find the list of students having maximum average score","code":"< ? php function getStudentsList ( $ file , $ n ) {"}
{"text":"Variables to store average score of a student and maximum average score","code":"$ maxAvgScore = PHP_INT_MIN ;"}
{"text":"List to store names of students having maximum average score","code":"$ names = array ( ) ; $ avgScore = 0 ;"}
{"text":"Traversing the file data","code":"for ( $ i = 0 ; $ i < $ n ; $ i += 4 ) {"}
{"text":"finding average score of a student","code":"$ avgScore = ( int ) ( ( intval ( $ file [ $ i + 1 ] ) + intval ( $ file [ $ i + 2 ] ) + intval ( $ file [ $ i + 3 ] ) ) \/ 3 ) ; if ( $ avgScore > $ maxAvgScore ) { $ maxAvgScore = $ avgScore ;"}
{"text":"Clear the list and add name of student having current maximum average score in the list","code":"unset ( $ names ) ; $ names = array ( ) ; array_push ( $ names , $ file [ $ i ] ) ; } else if ( $ avgScore == $ maxAvgScore ) array_push ( $ names , $ file [ $ i ] ) ; }"}
{"text":"Printing the maximum average score and names of students having this maximum average score as per the order in the file .","code":"for ( $ i = 0 ; $ i < count ( $ names ) ; $ i ++ ) { echo $ names [ $ i ] . \" \" ; } echo $ maxAvgScore ; }"}
{"text":"Driver code","code":"$ file = array ( \" Shrikanth \" , \"20\" , \"30\" , \"10\" , \" Ram \" , \"100\" , \"50\" , \"10\" ) ;"}
{"text":"Number of elements in string array","code":"$ n = count ( $ file ) ; getStudentsList ( $ file , $ n ) ; ? >"}
{"text":"Function to find string score","code":"< ? php function strScore ( $ str , $ s , $ n ) { $ score = 0 ; $ index ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ str [ $ i ] == $ s ) { for ( $ j = 0 ; $ j < strlen ( $ s ) ; $ j ++ ) $ score += ( ord ( $ s [ $ j ] ) - ord ( ' a ' ) ) + 1 ; $ index = ( $ i + 1 ) ; break ; } } $ score = $ score * $ index ; return $ score ; }"}
{"text":"Driver code","code":"$ str = array ( \" sahil \" , \" shashanak \" , \" sanjit \" , \" abhinav \" , \" mohit \" ) ; $ s = \" abhinav \" ; $ n = sizeof ( $ str ) ; $ score = strScore ( $ str , $ s , $ n ) ; echo $ score , \" STRNEWLINE \" ; ? >"}
{"text":"Function to return required minimum number","code":"< ? php function minParentheses ( $ p ) {"}
{"text":"maintain balance of string","code":"$ bal = 0 ; $ ans = 0 ; for ( $ i = 0 ; $ i < strlen ( $ p ) ; ++ $ i ) { if ( $ p [ $ i ] == ' ( ' ) $ bal += 1 ; else $ bal += -1 ;"}
{"text":"It is guaranteed bal >= - 1","code":"if ( $ bal == -1 ) { $ ans += 1 ; $ bal += 1 ; } } return $ bal + $ ans ; }"}
{"text":"Driver code","code":"$ p = \" ( ) ) \" ;"}
{"text":"Function to print required answer","code":"echo minParentheses ( $ p ) ; ? >"}
{"text":"Function to check whether the string is a palindrome","code":"< ? php function isPalindrome ( $ r ) { $ p = $ r ;"}
{"text":"reverse the string to compare with the original string","code":"strrev ( $ p ) ;"}
{"text":"check if both are same","code":"return ( $ r == $ p ) ; }"}
{"text":"Function to check whether the string has prefix and suffix substrings of length greater than 1 which are palindromes .","code":"function CheckStr ( $ s ) { $ l = strlen ( $ s ) ;"}
{"text":"check all prefix substrings","code":"for ( $ i = 2 ; $ i <= $ l ; $ i ++ ) {"}
{"text":"check if the prefix substring is a palindrome","code":"if ( isPalindrome ( substr ( $ s , 0 , $ i ) ) ) break ; }"}
{"text":"If we did not find any palindrome prefix of length greater than 1.","code":"if ( $ i == ( $ l + 1 ) ) return false ;"}
{"text":"check all suffix substrings , as the string is reversed now","code":"$ i = 2 ; for ( $ i = 2 ; $ i <= $ l ; $ i ++ ) {"}
{"text":"check if the suffix substring is a palindrome","code":"if ( isPalindrome ( substr ( $ s , $ l - $ i , $ i ) ) ) return true ; }"}
{"text":"If we did not find a suffix","code":"return false ; }"}
{"text":"Driver code","code":"$ s = \" abccbarfgdbd \" ; if ( CheckStr ( $ s ) ) echo ( \" YES STRNEWLINE \" ) ; else echo ( \" NO STRNEWLINE \" ) ; ? >"}
{"text":"function to calculate total odd decimal equivalent","code":"< ? php function oddEquivalent ( $ s , $ n ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] == '1' ) $ count ++ ; } return $ count ; }"}
{"text":"Driver code","code":"$ s = \"1011011\" ; $ n = strlen ( $ s ) ; echo ( oddEquivalent ( $ s , $ n ) ) ; ? >"}
{"text":"Function to find the number of str2 that can be formed using characters of str1","code":"< ? php function findNumberOfTimes ( $ str1 , $ str2 ) { $ freq = array_fill ( 0 , 26 , NULL ) ; $ l1 = strlen ( $ str1 ) ; $ freq2 = array_fill ( 0 , 26 , NULL ) ; $ l2 = strlen ( $ str2 ) ;"}
{"text":"iterate and mark the frequencies of all characters in str1","code":"for ( $ i = 0 ; $ i < $ l1 ; $ i ++ ) $ freq [ ord ( $ str1 [ $ i ] ) - ord ( ' a ' ) ] += 1 ; for ( $ i = 0 ; $ i < $ l2 ; $ i ++ ) $ freq2 [ ord ( $ str2 [ $ i ] ) - ord ( ' a ' ) ] += 1 ; $ count = PHP_INT_MAX ;"}
{"text":"find the minimum frequency of every character in str1","code":"for ( $ i = 0 ; $ i < $ l2 ; $ i ++ ) $ count = min ( $ count , $ freq [ ord ( $ str2 [ $ i ] ) - ord ( ' a ' ) ] \/ $ freq2 [ ord ( $ str2 [ $ i ] ) - ord ( ' a ' ) ] ) ; return $ count ; }"}
{"text":"Driver Code","code":"$ str1 = \" foreeksgekseg \" ; $ str2 = \" geeks \" ; echo findNumberOfTimes ( $ str1 , $ str2 ) . \" \" ; ? >"}
{"text":"function to check if conversion is possible or not","code":"< ? php function solve ( $ s1 , $ s2 ) {"}
{"text":"if lengths are different","code":"if ( strlen ( $ s1 ) != strlen ( $ s2 ) ) return false ; $ l = strlen ( $ s1 ) ;"}
{"text":"iterate to check if both strings have 1","code":"for ( $ i = 0 ; $ i < 1 ; $ i ++ ) {"}
{"text":"to check if there is even one 1 in string s1","code":"if ( $ s1 [ $ i ] == '1' ) $ flag1 = 1 ;"}
{"text":"to check if there is even one 1 in string s2","code":"if ( $ s2 [ $ i ] == '1' ) $ flag2 = 1 ; if ( ! $ flag1 && ! $ flag2 ) return true ; }"}
{"text":"if both string do not have a '1' .","code":"return false ; }"}
{"text":"Driver code","code":"$ s1 = \"100101\" ; $ s2 = \"100000\" ; if ( solve ( $ s1 , $ s2 ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Function to calculate maximum length of substring containing only zero","code":"< ? php function subzero ( $ str , $ k ) { $ ans = 0 ; $ curr = 0 ; $ len = strlen ( $ str ) ;"}
{"text":"loop to first calculate longest substring in string","code":"for ( $ i = 0 ; $ i < $ len ; ++ $ i ) { if ( $ str [ $ i ] == '0' ) $ curr ++ ; else $ curr = 0 ; $ ans = max ( $ ans , $ curr ) ; }"}
{"text":"if all elements in string are '0'","code":"if ( $ ans == $ len ) return $ len * $ k ;"}
{"text":"Else , find size of prefix and suffix containing only zeroes","code":"else { $ pre = 0 ; $ suff = 0 ;"}
{"text":"Calculate prefix containing only zeroes","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ str [ $ i ] == '0' ) $ pre ++ ; else break ; }"}
{"text":"Calculate suffix containing only zeroes","code":"for ( $ i = $ len - 1 ; $ i >= 0 ; $ i -- ) { if ( $ str [ $ i ] == '0' ) $ suff ++ ; else break ; }"}
{"text":"if k <= 1 then there is no need to take prefix + suffix into account","code":"if ( $ k > 1 ) $ ans = max ( $ ans , $ pre + $ suff ) ; return $ ans ; } }"}
{"text":"Driver code","code":"$ str = \"00100110\" ; $ k = 5 ; echo subzero ( $ str , $ k ) ; ? >"}
{"text":"function to generate the nth term","code":"< ? php function Dragon_Curve_Sequence ( $ n ) {"}
{"text":"first term","code":"$ s = \"1\" ;"}
{"text":"generating each term of the sequence","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ temp = \"1\" ; $ prev = '1' ; $ zero = '0' ; $ one = '1' ;"}
{"text":"loop to generate the ith term","code":"for ( $ j = 0 ; $ j < strlen ( $ s ) ; $ j ++ ) {"}
{"text":"add character from the original string","code":"$ temp . = $ s [ $ j ] ;"}
{"text":"add alternate 0 and 1 in between","code":"if ( $ prev == '0' ) {"}
{"text":"if previous added term was '0' then add '1'","code":"$ temp . = $ one ;"}
{"text":"now current term becomes previous term","code":"$ prev = $ one ; } else {"}
{"text":"if previous added term was '1' , then add '0'","code":"$ temp . = $ zero ;"}
{"text":"now current term becomes previous term","code":"$ prev = $ zero ; } }"}
{"text":"s becomes the ith term of the sequence","code":"$ s = $ temp ; } return $ s ; }"}
{"text":"Taking inputs","code":"$ n = 4 ;"}
{"text":"generate nth term of dragon curve sequence","code":"$ s = Dragon_Curve_Sequence ( $ n ) ;"}
{"text":"Printing output","code":"echo $ s . \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to count number of substrings of a string","code":"< ? php function countNonEmptySubstr ( $ str ) { $ n = strlen ( $ str ) ; return $ n * ( $ n + 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ s = \" abcde \" ; echo countNonEmptySubstr ( $ s ) ; ? >"}
{"text":"PHP program to check if characters of one string can be swapped to form other","code":"< ? php $ MAX = 26 ; function targetstring ( $ str1 , $ str2 ) { global $ MAX ; $ l1 = strlen ( $ str1 ) ; $ l2 = strlen ( $ str2 ) ;"}
{"text":"if length is not same print no","code":"if ( $ l1 != $ l2 ) return false ; $ map [ $ MAX ] = array ( 0 ) ;"}
{"text":"Count frequencies of character in first string .","code":"for ( $ i = 0 ; $ i < $ l1 ; $ i ++ ) $ map [ $ str1 [ $ i ] - ' a ' ] ++ ;"}
{"text":"iterate through the second string decrement counts of characters in second string","code":"for ( $ i = 0 ; $ i < $ l2 ; $ i ++ ) { $ map [ $ str2 [ $ i ] - ' a ' ] -- ;"}
{"text":"Since lengths are same , some value would definitely become negative if result is false .","code":"if ( $ map [ $ str2 [ $ i ] - ' a ' ] < 0 ) return false ; } return true ; }"}
{"text":"Driver Code","code":"$ str1 = \" geeksforgeeks \" ; $ str2 = \" geegeeksksfor \" ; if ( targetstring ( $ str1 , $ str2 ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Returns true if d is present as digit in number x .","code":"< ? php function isDigitPresent ( $ x , $ d ) {"}
{"text":"Breal loop if d is present as digit","code":"while ( $ x > 0 ) { if ( $ x % 10 == $ d ) break ; $ x = $ x \/ 10 ; }"}
{"text":"If loop broke","code":"return ( $ x > 0 ) ; }"}
{"text":"function to display the values","code":"function printNumbers ( $ n , $ d ) {"}
{"text":"Check all numbers one by one","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ )"}
{"text":"checking for digit","code":"if ( $ i == $ d || isDigitPresent ( $ i , $ d ) ) echo $ i , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 47 ; $ d = 7 ; printNumbers ( $ n , $ d ) ; ? >"}
{"text":"PHP program to find extra character in one string","code":"< ? php function findExtraCharcter ( $ strA , $ strB ) {"}
{"text":"result store the result","code":"$ res = 0 ;"}
{"text":"traverse string A till end and xor with res","code":"for ( $ i = 0 ; $ i < strlen ( $ strA ) ; $ i ++ ) {"}
{"text":"xor with res","code":"$ res ^= ord ( $ strA [ $ i ] ) ; }"}
{"text":"traverse string B till end and xor with res","code":"for ( $ i = 0 ; $ i < strlen ( $ strB ) ; $ i ++ ) {"}
{"text":"xor with res","code":"$ res ^= ord ( $ strB [ $ i ] ) ; }"}
{"text":"print result at the end","code":"return $ res ; }"}
{"text":"given string","code":"$ strA = \" abcd \" ; $ strB = \" cbdad \" ; echo chr ( findExtraCharcter ( $ strA , $ strB ) ) ; ? >"}
{"text":"Function to find the sum of given array","code":"< ? php function calculateSum ( $ arr , $ n ) {"}
{"text":"if string is empty","code":"if ( $ n == 0 ) return 0 ; $ s = $ arr [ 0 ] ;"}
{"text":"stoi function to convert string into integer","code":"$ value = ( int ) $ s ; $ sum = $ value ; for ( $ i = 2 ; $ i < $ n ; $ i = $ i + 2 ) { $ s = $ arr [ $ i ] ;"}
{"text":"cast to convert string into integer","code":"$ value = ( int ) $ s ;"}
{"text":"Find operator","code":"$ operation = $ arr [ $ i - 1 ] ;"}
{"text":"If operator is equal to ' + ' , add value in sum variable else subtract","code":"if ( $ operation == ' + ' ) $ sum += $ value ; else if ( $ operation == ' - ' ) $ sum -= $ value ; } return $ sum ; }"}
{"text":"Driver code","code":"$ arr = array ( \"3\" , \" + \" , \"4\" , \" - \" , \"7\" , \" + \" , \"13\" ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo calculateSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to find string with maximum number of unique characters","code":"< ? php function LargestString ( $ na ) { $ N = sizeof ( $ na ) ; $ c = array_fill ( 0 , $ N , 0 ) ;"}
{"text":"Index of string with maximum unique characters","code":"$ m = 0 ;"}
{"text":"iterate through all strings","code":"for ( $ j = 0 ; $ j < $ N ; $ j ++ ) {"}
{"text":"array indicating any alphabet included or not included","code":"$ character = array_fill ( 0 , 26 , false ) ;"}
{"text":"count number of unique alphabets in each string","code":"for ( $ k = 0 ; $ k < strlen ( $ na [ $ j ] ) ; $ k ++ ) { $ x = ord ( $ na [ $ j ] [ $ k ] ) - 65 ; if ( ( $ na [ $ j ] [ $ k ] != ' \u2581 ' ) && ( $ character [ $ x ] == false ) ) { $ c [ $ j ] ++ ; $ character [ $ x ] = true ; } }"}
{"text":"keep track of maximum number of alphabets","code":"if ( $ c [ $ j ] > $ c [ $ m ] ) $ m = $ j ; }"}
{"text":"print result","code":"echo $ na [ $ m ] . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ na = array ( \" BOB \" , \" A \u2581 AB \u2581 C \u2581 JOHNSON \" , \" ASKRIT \" , \" ARMAN \u2581 MALLIK \" , \" ANJALI \" ) ; LargestString ( $ na ) ; ? >"}
{"text":"function to encode a alphabet as Morse code","code":"< ? php function morseEncode ( $ x ) {"}
{"text":"refer to the Morse table image attached in the article","code":"switch ( $ x ) { case ' a ' : return \" . - \" ; case ' b ' : return \" - . . . \" ; case ' c ' : return \" - . - . \" ; case ' d ' : return \" - . . \" ; case ' e ' : return \" . \" ; case ' f ' : return \" . . - . \" ; case ' g ' : return \" - - . \" ; case ' h ' : return \" . . . . \" ; case ' i ' : return \" . . \" ; case ' j ' : return \" . - - - \" ; case ' k ' : return \" - . - \" ; case ' l ' : return \" . - . . \" ; case ' m ' : return \" - - \" ; case ' n ' : return \" - . \" ; case ' o ' : return \" - - - \" ; case ' p ' : return \" . - - . \" ; case ' q ' : return \" - - . - \" ; case ' r ' : return \" . - . \" ; case ' s ' : return \" . . . \" ; case ' t ' : return \" - \" ; case ' u ' : return \" . . - \" ; case ' v ' : return \" . . . - \" ; case ' w ' : return \" . - - \" ; case ' x ' : return \" - . . - \" ; case ' y ' : return \" - . - - \" ;"}
{"text":"for space","code":"case ' z ' : return \" - - . . \" ; case '1' : return \" . - - - - \" ; case '2' : return \" . . - - - \" ; case '3' : return \" . . . - - \" ; case '4' : return \" . . . . - \" ; case '5' : return \" . . . . . \" ; case '6' : return \" - . . . . \" ; case '7' : return \" - - . . . \" ; case '8' : return \" - - - . . \" ; case '9' : return \" - - - - . \" ; case '0' : return \" - - - - - \" ; } } function morseCode ( $ s ) {"}
{"text":"Character by character print Morse code","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) echo morseEncode ( $ s [ $ i ] ) ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ s = \" geeksforgeeks \" ; morseCode ( $ s ) ; ? >"}
{"text":"function to display polybius cipher text","code":"< ? php function polybiusCipher ( $ s ) { $ row = 0 ; $ col = 0 ;"}
{"text":"convert each character to its encrypted code","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"finding row of the table","code":"$ row = floor ( ( ord ( $ s [ $ i ] ) - ord ( ' a ' ) ) \/ 5 ) + 1 ;"}
{"text":"finding column of the table","code":"$ col = ( ( ord ( $ s [ $ i ] ) - ord ( ' a ' ) ) % 5 ) + 1 ;"}
{"text":"if character is ' k '","code":"if ( $ s [ $ i ] == ' k ' ) { $ row = $ row - 1 ; $ col = 5 - $ col + 1 ; }"}
{"text":"if character is greater than ' j '","code":"else if ( $ s [ $ i ] >= ' j ' ) { if ( $ col == 1 ) { $ col = 6 ; $ row = $ row - 1 ; } $ col = $ col - 1 ; } echo ( $ row . $ col ) ; } echo ( \" STRNEWLINE \" ) ; }"}
{"text":"Driver Code","code":"$ s = \" geeksforgeeks \" ;"}
{"text":"print the cipher of \"geeksforgeeks","code":"polybiusCipher ( $ s ) ; ? >"}
{"text":"function to find minimum removal of characters","code":"< ? php function minRemoval ( $ str ) {"}
{"text":"hash to store frequency of each character and to set hash array to zeros","code":"$ hash = array_fill ( 0 , 26 , 0 ) ;"}
{"text":"count frequency of each character","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) $ hash [ ord ( $ str [ $ i ] ) - 97 ] ++ ;"}
{"text":"count the odd frequency characters","code":"$ count = 0 ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) if ( $ hash [ $ i ] % 2 ) $ count ++ ;"}
{"text":"if count is - 1 return 0 otherwise return count","code":"return ( $ count == 0 ) ? 0 : $ count - 1 ; }"}
{"text":"Driver Code","code":"$ str = \" geeksforgeeks \" ; echo minRemoval ( $ str ) . \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate length of longest uncommon subsequence","code":"< ? php function findLUSlength ( $ a , $ b ) {"}
{"text":"Case 1 : If strings are equal","code":"if ( ! strcmp ( $ a , $ b ) ) return 0 ;"}
{"text":"for case 2 and case 3","code":"return max ( strlen ( $ a ) , strlen ( $ b ) ) ; }"}
{"text":"input strings","code":"$ a = \" abcdabcd \" ; $ b = \" abcabc \" ; echo ( findLUSlength ( $ a , $ b ) ) ; ? >"}
{"text":"Function to concatenate two different halves of given strings","code":"< ? php function swapTwoHalves ( $ a , $ b ) { $ la = strlen ( $ a ) ; $ lb = strlen ( $ b ) ;"}
{"text":"Creating new strings by exchanging the first half of a and b .","code":"$ c = substr ( $ a , 0 , intval ( $ la \/ 2 ) ) . substr ( $ b , intval ( $ lb \/ 2 ) , $ lb ) ; $ d = substr ( $ b , 0 , intval ( $ lb \/ 2 ) ) . substr ( $ a , intval ( $ la \/ 2 ) , $ la ) ; echo ( $ c . \" \" \u2581 . \u2581 $ d \u2581 . \u2581 \" \" }"}
{"text":"Driver Code","code":"$ a = \" remuneration \" ; $ b = \" day \" ;"}
{"text":"Calling function","code":"swapTwoHalves ( $ a , $ b ) ; ? >"}
{"text":"PHP implementation to find the length of the longest sub$having frequency of each character less than equal to k","code":"< ? php $ SIZE = 26 ;"}
{"text":"function to find the length of the longest sub$ having frequency of each character less than equal to k","code":"function longSubstring ( $ str , $ k ) { global $ SIZE ;"}
{"text":"hash table to store frequency of each table","code":"$ freq = array ( ) ; for ( $ i = 0 ; $ i < $ SIZE ; $ i ++ ) $ freq [ $ i ] = 0 ;"}
{"text":"' start ' index of the current substring","code":"$ start = 0 ;"}
{"text":"to store the maximum length","code":"$ maxLen = 0 ; $ ch = ' ' $ n = strlen ( $ str ) ;"}
{"text":"traverse the $ ' str '","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"get the current character as ' ch '","code":"$ ch = $ str [ $ i ] ;"}
{"text":"increase frequency of ' ch ' in ' freq [ ] '","code":"$ freq [ ord ( $ ch ) - ord ( ' a ' ) ] ++ ;"}
{"text":"if frequency of ' ch ' becomes more than ' k '","code":"if ( $ freq [ ord ( $ ch ) - ord ( ' a ' ) ] > $ k ) {"}
{"text":"update ' maxLen '","code":"if ( $ maxLen < ( $ i - $ start ) ) $ maxLen = $ i - $ start ;"}
{"text":"decrease frequency of each character as they are encountered from the ' start ' index until frequency of ' ch ' is greater than ' k '","code":"while ( $ freq [ ord ( $ ch ) - ord ( ' a ' ) ] > $ k ) {"}
{"text":"decrement frequency by '1'","code":"$ freq [ ord ( $ str [ $ start ] ) - ord ( ' a ' ) ] -- ;"}
{"text":"increment ' start '","code":"$ start ++ ; } } }"}
{"text":"update maxLen","code":"if ( $ maxLen < ( $ n - $ start ) ) $ maxLen = $ n - $ start ;"}
{"text":"required length","code":"return $ maxLen ; }"}
{"text":"Driver Code","code":"$ str = \" babcaag \" ; $ k = 1 ; echo ( \" Length \u2581 = \u2581 \" . longSubstring ( $ str , $ k ) ) ; ? >"}
{"text":"Function to count number of magical indices .","code":"< ? php function solve ( $ A , $ n ) { $ i = 0 ; $ cnt = 0 ; $ j = 0 ;"}
{"text":"Array to store parent node of traversal .","code":"$ parent = array ( ) ;"}
{"text":"Array to determine whether current node is already counted in the cycle .","code":"$ vis = array ( ) ;"}
{"text":"Initialize the arrays .","code":"for ( $ i = 0 ; $ i < $ n + 1 ; $ i ++ ) { $ parent [ $ i ] = -1 ; $ vis [ $ i ] = 0 ; } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ j = $ i ;"}
{"text":"Check if current node is already traversed or not . If node is not traversed yet then parent value will be - 1.","code":"if ( $ parent [ $ j ] == -1 ) {"}
{"text":"Traverse the graph until an already visited node is not found .","code":"while ( $ parent [ $ j ] == -1 ) { $ parent [ $ j ] = $ i ; $ j = ( $ j + $ A [ $ j ] + 1 ) % $ n ; }"}
{"text":"Check parent value to ensure a cycle is present .","code":"if ( $ parent [ $ j ] == $ i ) {"}
{"text":"Count number of nodes in the cycle .","code":"while ( $ vis [ $ j ] == 0 ) { $ vis [ $ j ] = 1 ; $ cnt ++ ; $ j = ( $ j + $ A [ $ j ] + 1 ) % $ n ; } } } } return $ cnt ; }"}
{"text":"Driver code","code":"$ A = array ( 0 , 0 , 0 , 2 ) ; $ n = count ( $ A ) ; echo ( solve ( $ A , $ n ) ) ; ? >"}
{"text":"solution by calling itself recursively","code":"< ? php function TOWUtil ( & $ arr , $ n , & $ curr_elements , $ no_of_selected_elements , & $ soln , & $ min_diff , $ sum , $ curr_sum , $ curr_position ) {"}
{"text":"checks whether the it is going out of bound","code":"if ( $ curr_position == $ n ) return ;"}
{"text":"checks that the numbers of elements left are not less than the number of elements required to form the solution","code":"if ( ( intval ( $ n \/ 2 ) - $ no_of_selected_elements ) > ( $ n - $ curr_position ) ) return ;"}
{"text":"consider the cases when current element is not included in the solution","code":"TOWUtil ( $ arr , $ n , $ curr_elements , $ no_of_selected_elements , $ soln , $ min_diff , $ sum , $ curr_sum , $ curr_position + 1 ) ;"}
{"text":"add the current element to the solution","code":"$ no_of_selected_elements ++ ; $ curr_sum = ( $ curr_sum + $ arr [ $ curr_position ] ) ; $ curr_elements [ $ curr_position ] = true ;"}
{"text":"checks if a solution is formed","code":"if ( $ no_of_selected_elements == intval ( $ n \/ 2 ) ) {"}
{"text":"checks if the solution formed is better than the best solution so far","code":"if ( abs ( intval ( $ sum \/ 2 ) - $ curr_sum ) < $ min_diff ) { $ min_diff = abs ( intval ( $ sum \/ 2 ) - $ curr_sum ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ soln [ $ i ] = $ curr_elements [ $ i ] ; } } else {"}
{"text":"consider the cases where current element is included in the solution","code":"TOWUtil ( $ arr , $ n , $ curr_elements , $ no_of_selected_elements , $ soln , $ min_diff , $ sum , $ curr_sum , $ curr_position + 1 ) ; }"}
{"text":"removes current element before returning to the caller of this function","code":"$ curr_elements [ $ curr_position ] = false ; }"}
{"text":"main function that generate an arr","code":"function tugOfWar ( & $ arr , $ n ) {"}
{"text":"the boolean array that contains the inclusion and exclusion of an element in current set . The number excluded automatically form the other set","code":"$ curr_elements = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"The inclusion \/ exclusion array for final solution","code":"$ soln = array_fill ( 0 , $ n , 0 ) ; $ min_diff = PHP_INT_MAX ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum += $ arr [ $ i ] ; $ curr_elements [ $ i ] = $ soln [ $ i ] = false ; }"}
{"text":"Find the solution using recursive function TOWUtil ( )","code":"TOWUtil ( $ arr , $ n , $ curr_elements , 0 , $ soln , $ min_diff , $ sum , 0 , 0 ) ;"}
{"text":"Print the solution","code":"echo \" The \u2581 first \u2581 subset \u2581 is : \u2581 \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ soln [ $ i ] == true ) echo $ arr [ $ i ] . \" \u2581 \" ; } echo \" The second subset is : \" for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ soln [ $ i ] == false ) echo $ arr [ $ i ] . \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 23 , 45 , -34 , 12 , 0 , 98 , -99 , 4 , 189 , -1 , 4 ) ; $ n = count ( $ arr ) ; tugOfWar ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find the length of the smallest substring consisting of maximum distinct characters","code":"< ? php $ NO_OF_CHARS = 256 ;"}
{"text":"Find maximum distinct characters in any string","code":"function max_distinct_char ( $ str , $ n ) { global $ NO_OF_CHARS ;"}
{"text":"Initialize all character 's count with 0","code":"$ count = array_fill ( 0 , $ NO_OF_CHARS , 0 ) ;"}
{"text":"Increase the count in array if a character is found","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count [ ord ( $ str [ $ i ] ) ] ++ ; $ max_distinct = 0 ; for ( $ i = 0 ; $ i < $ NO_OF_CHARS ; $ i ++ ) if ( $ count [ $ i ] != 0 ) $ max_distinct ++ ; return $ max_distinct ; } function smallesteSubstr_maxDistictChar ( $ str ) {"}
{"text":"size of given string","code":"$ n = strlen ( $ str ) ;"}
{"text":"Find maximum distinct characters in any string","code":"$ max_distinct = max_distinct_char ( $ str , $ n ) ;"}
{"text":"result","code":"$ minl = $ n ;"}
{"text":"Brute force approach to find all substrings","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ subs = substr ( $ str , $ i , $ j ) ; $ subs_lenght = strlen ( $ subs ) ; $ sub_distinct_char = max_distinct_char ( $ subs , $ subs_lenght ) ;"}
{"text":"We have to check here both conditions together 1. substring ' s \u2581 distinct \u2581 characters \u2581 is \u2581 equal \u2581 \u2581 to \u2581 maximum \u2581 distinct \u2581 characters \u2581 \u2581 2 . \u2581 substring ' s length should be minimum","code":"if ( $ subs_lenght < $ minl && $ max_distinct == $ sub_distinct_char ) { $ minl = $ subs_lenght ; } } } return $ minl ; }"}
{"text":"Input String","code":"$ str = \" AABBBCBB \" ; $ len = smallesteSubstr_maxDistictChar ( $ str ) ; echo \" \u2581 The \u2581 length \u2581 of \u2581 the \u2581 smallest \u2581 substring \" . \" \u2581 consisting \u2581 of \u2581 maximum \u2581 distinct \u2581 characters \u2581 : \u2581 \" . $ len ; ? >"}
{"text":"Return the even number substrings .","code":"< ? php function evenNumSubstring ( $ str ) { $ len = strlen ( $ str ) ; $ count = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ temp = $ str [ $ i ] - '0' ;"}
{"text":"If current digit is even , add count of substrings ending with it . The count is ( i + 1 )","code":"if ( $ temp % 2 == 0 ) $ count += ( $ i + 1 ) ; } return $ count ; }"}
{"text":"Driver Code","code":"$ str = \"1234\" ; echo evenNumSubstring ( $ str ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to return the index i such that the absolute difference between product of elements up to that index and the product of rest of the elements of the array is minimum","code":"< ? php function findIndex ( $ a , $ n ) {"}
{"text":"To store the required index","code":"$ min_diff = PHP_INT_MAX ;"}
{"text":"Prefix product array","code":"$ prod = array ( ) ; $ prod [ 0 ] = $ a [ 0 ] ;"}
{"text":"Compute the product array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ prod [ $ i ] = $ prod [ $ i - 1 ] * $ a [ $ i ] ;"}
{"text":"Iterate the product array to find the index","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ curr_diff = abs ( ( $ prod [ $ n - 1 ] \/ $ prod [ $ i ] ) - $ prod [ $ i ] ) ; if ( $ curr_diff < $ min_diff ) { $ min_diff = $ curr_diff ; $ res = $ i ; } } return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 2 , 5 , 7 , 2 , 9 ) ; $ N = count ( $ arr ) ; echo findIndex ( $ arr , $ N ) ; ? >"}
{"text":"Function to print all the numbers","code":"< ? php function printNumbers ( $ a , $ n , $ x ) { $ flag = false ;"}
{"text":"Iterate for every element in the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ num = $ a [ $ i ] ;"}
{"text":"Find the gcd","code":"$ g = __gcd ( $ num , $ x ) ;"}
{"text":"Iterate till gcd is 1 of number and x","code":"while ( $ g != 1 ) {"}
{"text":"Divide the number by gcd","code":"$ num \/= $ g ;"}
{"text":"Find the new gcdg","code":"$ g = __gcd ( $ num , $ x ) ; }"}
{"text":"If the number is 1 at the end then print the number","code":"if ( $ num == 1 ) { $ flag = true ; echo $ a [ $ i ] , \" \" ; } }"}
{"text":"If no numbers have been there","code":"if ( ! $ flag ) echo ( \" There \u2581 are \u2581 no \u2581 such \u2581 numbers \" ) ; } function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Driver code","code":"$ x = 60 ; $ a = array ( 2 , 5 , 10 , 7 , 17 ) ; $ n = count ( $ a ) ; printNumbers ( $ a , $ n , $ x ) ; ? >"}
{"text":"Function to print the final radiations","code":"< ? php function print_radiation ( $ rStation , $ n ) { for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { echo $ rStation [ $ i ] . \" \" ; } echo \" STRNEWLINE \" ; }"}
{"text":"Function to create the array of the resultant radiations","code":"function radiated_Station ( $ station , $ n ) {"}
{"text":"Resultant radiations","code":"$ rStation = array ( ) ; $ rStation = array_fill ( 0 , $ n + 1 , 0 ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Declaring index counter for left and right radiation","code":"$ li = $ i - 1 ; $ ri = $ i + 1 ;"}
{"text":"Effective radiation for left and right case","code":"$ lRad = $ station [ $ i ] - 1 ; $ rRad = $ station [ $ i ] - 1 ;"}
{"text":"Radiation for i - th station","code":"$ rStation [ $ i ] += $ station [ $ i ] ;"}
{"text":"Radiation increment for left stations","code":"while ( $ li >= 1 && $ lRad >= 1 ) { $ rStation [ $ li -- ] += $ lRad -- ; }"}
{"text":"Radiation increment for right stations","code":"while ( $ ri <= $ n && $ rRad >= 1 ) { $ rStation [ $ ri ++ ] += $ rRad -- ; } }"}
{"text":"Print the resultant radiation for each of the stations","code":"print_radiation ( $ rStation , $ n ) ; }"}
{"text":"1 - based indexing","code":"$ station = array ( 0 , 7 , 9 , 12 , 2 , 5 ) ; $ n = ( sizeof ( $ station ) \/ sizeof ( $ station [ 0 ] ) ) - 1 ; radiated_Station ( $ station , $ n ) ; ? >"}
{"text":"Function to return the maximum difference","code":"< ? php function findMaximumDiff ( $ a , $ n ) { $ ind1 = 0 ;"}
{"text":"Iteratively check from back","code":"for ( $ i = $ n - 1 ; $ i > 0 ; $ i -- ) {"}
{"text":"Different numbers","code":"if ( $ a [ 0 ] != $ a [ $ i ] ) { $ ind1 = $ i ; break ; } } $ ind2 = 0 ;"}
{"text":"Iteratively check from the beginning","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Different numbers","code":"if ( $ a [ $ n - 1 ] != $ a [ $ i ] ) { $ ind2 = ( $ n - 1 - $ i ) ; break ; } } return max ( $ ind1 , $ ind2 ) ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 3 , 2 , 3 ) ; $ n = count ( $ a ) ; echo findMaximumDiff ( $ a , $ n ) ; ? >"}
{"text":"Function to return sum","code":"< ? php function sum ( $ k , $ n ) { $ sum = pow ( $ k , $ n + 1 ) - pow ( $ k - 1 , $ n + 1 ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ K = 3 ; echo sum ( $ K , $ n ) ;"}
{"text":"Function to check whether a number is prime or not .","code":"< ? php function is_prime ( $ num ) {"}
{"text":"Count variable to store the number of factors of ' num '","code":"$ count1 = 0 ;"}
{"text":"Counting the number of factors","code":"for ( $ i = 1 ; $ i * $ i <= ( $ num ) ; $ i ++ ) { if ( ( $ num ) % $ i == 0 ) { if ( $ i * $ i != ( $ num ) ) $ count1 += 2 ; else $ count1 ++ ; } }"}
{"text":"If number is prime return true","code":"if ( $ count1 == 2 ) return true ; else return false ; }"}
{"text":"Function to check for divisibility","code":"function is_divisible ( $ n ) {"}
{"text":"if ' n ' equals 1 then divisibility is possible","code":"if ( $ n == 1 ) { return \" YES \" ; }"}
{"text":"Else check whether ' n + 1' is prime or not","code":"else {"}
{"text":"If ' n + 1' is prime then ' n ! ' is not divisible by ' n * ( n + 1 ) \/ 2'","code":"if ( is_prime ( $ n + 1 ) ) return \" NO \" ;"}
{"text":"else divisibility occurs","code":"else return \" YES \" ; } }"}
{"text":"Test for n = 3","code":"$ n = 3 ; echo is_divisible ( $ n ) . \" STRNEWLINE \" ;"}
{"text":"Test for n = 4","code":"$ n = 4 ; echo is_divisible ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ GLOBALS [ ' mod ' ] = ( 1e9 + 7 ) ;"}
{"text":"Function to return the required result","code":"function BitOperations ( $ a , $ n , $ b , $ m ) {"}
{"text":"Reverse the strings","code":"$ a = strrev ( $ a ) ; $ b = strrev ( $ b ) ;"}
{"text":"Count the number of set bits in b","code":"$ c = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) if ( $ b [ $ i ] == '1' ) $ c ++ ;"}
{"text":"To store the powers of 2","code":"$ power = array ( ) ; $ power [ 0 ] = 1 ;"}
{"text":"power [ i ] = pow ( 2 , i ) % mod","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ power [ $ i ] = ( $ power [ $ i - 1 ] * 2 ) % $ GLOBALS [ ' mod ' ] ;"}
{"text":"To store the final answer","code":"$ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] == '1' ) {"}
{"text":"Add power [ i ] to the ans after multiplying it with the number of set bits in b","code":"$ ans += $ c * $ power [ $ i ] ; if ( $ ans >= $ GLOBALS [ ' mod ' ] ) $ ans %= $ GLOBALS [ ' mod ' ] ; }"}
{"text":"Divide by 2 means right shift b >> 1 if b has 1 at right most side than number of set bits will get decreased","code":"if ( $ b [ $ i ] == '1' ) $ c -- ;"}
{"text":"If no more set bits in b i . e . b = 0","code":"if ( $ c == 0 ) break ; }"}
{"text":"Return the required answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ a = \"1001\" ; $ b = \"10101\" ; $ n = strlen ( $ a ) ; $ m = strlen ( $ b ) ; echo BitOperations ( $ a , $ n , $ b , $ m ) ; ? >"}
{"text":"Function to store the primes","code":"< ? php function sieve ( $ maxEle , & $ prime ) { $ prime [ 0 ] = $ prime [ 1 ] = 1 ; for ( $ i = 2 ; $ i * $ i <= $ maxEle ; $ i ++ ) { if ( ! $ prime [ $ i ] ) { for ( $ j = 2 * $ i ; $ j <= $ maxEle ; $ j += $ i ) $ prime [ $ j ] = 1 ; } } }"}
{"text":"Function to return the sum of digits","code":"function digitSum ( $ n ) { $ sum = 0 ; while ( $ n ) { $ sum += $ n % 10 ; $ n = $ n \/ 10 ; } return $ sum ; }"}
{"text":"Function to print additive primes","code":"function printAdditivePrime ( $ arr , $ n ) { $ maxEle = max ( $ arr ) ; $ prime = array_fill ( 0 , $ maxEle + 1 , 0 ) ; sieve ( $ maxEle , $ prime ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If the number is prime","code":"if ( $ prime [ $ arr [ $ i ] ] == 0 ) { $ sum = digitSum ( $ arr [ $ i ] ) ;"}
{"text":"Check if it 's digit sum is prime","code":"if ( $ prime [ $ sum ] == 0 ) print ( $ arr [ $ i ] . \" \u2581 \" ) ; } } }"}
{"text":"Driver code","code":"$ a = array ( 2 , 4 , 6 , 11 , 12 , 18 , 7 ) ; $ n = count ( $ a ) ; printAdditivePrime ( $ a , $ n ) ; ? >"}
{"text":"function to calculate nth term of the series","code":"< ? php function nthTerm ( $ n ) {"}
{"text":"variable nth will store the nth term of series","code":"$ nth ;"}
{"text":"if n is even","code":"if ( $ n % 2 == 0 ) $ nth = 2 * ( ( $ n * $ n ) - $ n ) ;"}
{"text":"if n is odd","code":"else $ nth = ( 2 * $ n * $ n ) - $ n ;"}
{"text":"return nth term","code":"return $ nth ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo nthTerm ( $ n ) , \" STRNEWLINE \" ; $ n = 25 ; echo nthTerm ( $ n ) , \" STRNEWLINE \" ; $ n = 25000000 ; echo nthTerm ( $ n ) , \" STRNEWLINE \" ; $ n = 250000007 ; echo nthTerm ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to return the nth term of the given series","code":"< ? php function nthterm ( $ n ) {"}
{"text":"nth term of the given series","code":"$ An = ( pow ( 1 , $ n ) + pow ( 2 , $ n ) ) * pow ( 3 , $ n ) ; return $ An ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo nthterm ( $ n ) ; ? >"}
{"text":"Function to return the count of the divisors of a number","code":"< ? php function countDivisors ( $ n ) {"}
{"text":"Count the number of 2 s that divide n","code":"$ x = 0 ; $ ans = 1 ; while ( $ n % 2 == 0 ) { $ x ++ ; $ n = $ n \/ 2 ; } $ ans = $ ans * ( $ x + 1 ) ;"}
{"text":"n must be odd at this point . So we can skip one element","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) {"}
{"text":"While i divides n","code":"$ x = 0 ; while ( $ n % $ i == 0 ) { $ x ++ ; $ n = $ n \/ $ i ; } $ ans = $ ans * ( $ x + 1 ) ; }"}
{"text":"This condition is to handle the case when n is a prime number > 2","code":"if ( $ n > 2 ) $ ans = $ ans * 2 ; return $ ans ; } function getTotalCount ( $ n , $ k ) { $ k_count = countDivisors ( $ k ) ;"}
{"text":"Count the total elements that have divisors exactly equal to as that of k 's","code":"$ count = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ k_count == countDivisors ( $ i ) ) $ count ++ ;"}
{"text":"Exclude k from the result if it is smaller than n .","code":"if ( $ k < $ n ) $ count = $ count - 1 ; return $ count ; }"}
{"text":"Driver code","code":"$ n = 500 ; $ k = 6 ; echo getTotalCount ( $ n , $ k ) ; #This  code is contributed by Sachin.. NEW_LINE ? >"}
{"text":"Function to return the nth term of the given series","code":"< ? php function term ( $ n ) {"}
{"text":"Common difference","code":"$ d = 2 ;"}
{"text":"First term","code":"$ a1 = 0 ;"}
{"text":"nth term","code":"$ An = $ a1 + ( $ n - 1 ) * $ d ;"}
{"text":"nth term of the given series","code":"return pow ( $ An , 3 ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo term ( $ n ) ; ? >"}
{"text":"PHP program to count the number of intervals in which a given value lies","code":"< ? php $ MAX_VAL = 200000 ;"}
{"text":"Function to count the number of intervals in which a given value lies","code":"function countIntervals ( $ arr , $ V , $ N ) { global $ MAX_VAL ;"}
{"text":"Variables to store overall minimum and maximum of the intervals","code":"$ min = PHP_INT_MAX ; $ max = 0 ;"}
{"text":"Variables to store start and end of an interval","code":"$ li = 0 ; $ ri = 0 ;"}
{"text":"Frequency array to keep track of how many of the given intervals an element lies in","code":"$ freq = array_fill ( 0 , $ MAX_VAL , 0 ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ li = $ arr [ $ i ] [ 0 ] ; $ freq [ $ li ] = $ freq [ $ li ] + 1 ; $ ri = $ arr [ $ i ] [ 1 ] ; $ freq [ $ ri + 1 ] = $ freq [ $ ri + 1 ] - 1 ; if ( $ li < $ min ) $ min = $ li ; if ( $ ri > $ max ) $ max = $ ri ; }"}
{"text":"Constructing the frequency array","code":"for ( $ i = $ min ; $ i <= $ max ; $ i ++ ) $ freq [ $ i ] = $ freq [ $ i ] + $ freq [ $ i - 1 ] ; return $ freq [ $ V ] ; }"}
{"text":"Driver code","code":"$ arr = array ( array ( 1 , 10 ) , array ( 5 , 10 ) , array ( 15 , 25 ) , array ( 7 , 12 ) , array ( 20 , 25 ) ) ; $ V = 7 ;"}
{"text":"length of the array","code":"$ N = count ( $ arr ) ; echo ( countIntervals ( $ arr , $ V , $ N ) ) ; ? >"}
{"text":"Function to print N groups of equal sum","code":"< ? php function printGroups ( $ n ) { $ x = 1 ; $ y = $ n * $ n ;"}
{"text":"No . of Groups","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"n \/ 2 pairs","code":"for ( $ j = 1 ; $ j <= $ n \/ 2 ; $ j ++ ) { echo \" { \" \u2581 , \u2581 $ x \u2581 , \u2581 \" , \" \u2581 , \u2581 $ y \u2581 , \u2581 \" } \" $ x ++ ; $ y -- ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ n = 4 ; printGroups ( $ n ) ; ? >"}
{"text":"Function to calculate Break Even Point","code":"< ? php function breakEvenPoint ( $ exp , $ S , $ M ) { $ earn = $ S - $ M ;"}
{"text":"Calculating number of articles to be sold","code":"$ res = ceil ( $ exp \/ $ earn ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ exp = 3550 ; $ S = 90 ; $ M = 65 ; echo breakEvenPoint ( $ exp , $ S , $ M ) ; ? >"}
{"text":"function to return the product of distinct prime factors of a number","code":"< ? php function minimum ( $ n ) { $ product = 1 ;"}
{"text":"find distinct prime","code":"for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ n % $ i == 0 ) { while ( $ n % $ i == 0 ) $ n = $ n \/ $ i ; $ product = $ product * $ i ; } } if ( $ n >= 2 ) $ product = $ product * $ n ; return $ product ; }"}
{"text":"Driver code","code":"$ n = 20 ; echo minimum ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the count of all possible N digit numbers which are divisible by 5 formed from M digits","code":"< ? php function numbers ( $ n , $ arr , $ m ) { $ isZero = 0 ; $ isFive = 0 ; $ result = 0 ;"}
{"text":"If it is not possible to form n digit number from the given m digits without repetition","code":"if ( $ m < $ n ) { return -1 ; } for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { if ( $ arr [ $ i ] == 0 ) $ isZero = 1 ; if ( $ arr [ $ i ] == 5 ) $ isFive = 1 ; }"}
{"text":"If both zero and five exists","code":"if ( $ isZero && $ isFive ) { $ result = 2 ;"}
{"text":"Remaining N - 1 iterations","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ result = $ result * ( -- $ m ) ; } } else if ( $ isZero $ isFive ) { $ result = 1 ;"}
{"text":"Remaining N - 1 iterations","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { $ result = $ result * ( -- $ m ) ; } } else $ result = -1 ; return $ result ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ m = 6 ; $ arr = array ( 2 , 3 , 5 , 6 , 7 , 9 ) ; echo numbers ( $ n , $ arr , $ m ) ; ? >"}
{"text":"PHP implementation to find the smallest of three elements","code":"< ? php $ a = 5 ; $ b = 7 ; $ c = 10 ; if ( $ a <= $ b && $ a <= $ c ) echo $ a . \" \u2581 is \u2581 the \u2581 smallest \" ; else if ( $ b <= $ a && $ b <= $ c ) echo $ b . \" \u2581 is \u2581 the \u2581 smallest \" ; else echo $ c . \" \u2581 is \u2581 the \u2581 smallest \" ;"}
{"text":"Function to find the maximum sum","code":"< ? php function maxSum ( $ a , $ n ) {"}
{"text":"Maximum AND is maximum element","code":"$ maxAnd = max ( $ a ) ;"}
{"text":"Maximum OR is bitwise OR of all .","code":"$ maxOR = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ maxOR |= $ a [ $ i ] ; print ( $ maxAnd + $ maxOR ) ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ a = array ( 3 , 5 , 6 , 1 ) ; maxSum ( $ a , $ n ) ; ? >"}
{"text":"Function to find the minimum element","code":"< ? php function getMin ( $ arr , $ n , $ k ) { $ res = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] % $ k == 0 ) $ res = min ( $ res , $ arr [ $ i ] ) ; } return $ res ; }"}
{"text":"Function to find the maximum element","code":"function getMax ( $ arr , $ n , $ k ) { $ res = PHP_INT_MIN ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] % $ k == 0 ) $ res = max ( $ res , $ arr [ $ i ] ) ; } return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 1230 , 45 , 67 , 1 ) ; $ k = 10 ; $ n = sizeof ( $ arr ) ; echo \" Minimum \u2581 element \u2581 of \u2581 array \u2581 which \u2581 is \u2581 \" . \" divisible \u2581 by \u2581 k : \u2581 \" , getMin ( $ arr , $ n , $ k ) , \" STRNEWLINE \" ; echo \" Maximum \u2581 element \u2581 of \u2581 array \u2581 which \u2581 is \u2581 \" . \" divisible \u2581 by \u2581 k : \u2581 \" , getMax ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to find a number","code":"< ? php function printNumberWithDR ( $ k , $ d ) {"}
{"text":"If d is 0 k has to be 1","code":"if ( $ d == 0 && $ k != 1 ) echo \" - 1\" ; else { echo $ d ; $ k -- ;"}
{"text":"Print k - 1 zeroes","code":"while ( $ k -- ) echo \"0\" ; } }"}
{"text":"Driver code","code":"$ k = 4 ; $ d = 4 ; printNumberWithDR ( $ k , $ d ) ; ? >"}
{"text":"PHP implementation of above approach Function to count numbers having exactly 9 divisors","code":"< ? php function countNumbers ( $ n ) { $ c = 0 ; $ limit = sqrt ( $ n ) ;"}
{"text":"Sieve array","code":"$ prime [ $ limit + 1 ] = array ( 0 ) ;"}
{"text":"initially prime [ i ] = i","code":"for ( $ i = 1 ; $ i <= $ limit ; $ i ++ ) $ prime [ $ i ] = $ i ;"}
{"text":"use sieve concept to store the first prime factor of every number","code":"for ( $ i = 2 ; $ i * $ i <= $ limit ; $ i ++ ) { if ( $ prime [ $ i ] == $ i ) {"}
{"text":"mark all factors of i","code":"for ( $ j = $ i * $ i ; $ j <= $ limit ; $ j += $ i ) if ( $ prime [ $ j ] == $ j ) $ prime [ $ j ] = $ i ; } }"}
{"text":"check for all numbers if they can be expressed in form p * q","code":"for ( $ i = 2 ; $ i <= $ limit ; $ i ++ ) {"}
{"text":"p prime factor","code":"$ p = $ prime [ $ i ] ;"}
{"text":"q prime factor","code":"$ q = $ prime [ $ i \/ $ prime [ $ i ] ] ;"}
{"text":"if both prime factors are different if p * q <= n and q !=","code":"if ( $ p * $ q == $ i && $ q != 1 && $ p != $ q ) { $ c += 1 ; } else if ( $ prime [ $ i ] == $ i ) {"}
{"text":"Check if it can be expressed as p ^ 8","code":"if ( pow ( $ i , 8 ) <= $ n ) { $ c += 1 ; } } } return $ c ; }"}
{"text":"Driver Code","code":"$ n = 1000 ; echo countNumbers ( $ n ) ; ? >"}
{"text":"Function to check if a number is prime or not","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 or $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) { if ( $ n % $ i == 0 or $ n % ( $ i + 2 ) == 0 ) { return false ; } } return true ; }"}
{"text":"Function to check if the given number is interprime or not","code":"function isInterprime ( $ n ) {"}
{"text":"Smallest Interprime is 4 So the number less than 4 can not be a Interprime","code":"if ( $ n < 4 ) return false ; $ prev_prime = $ n ; $ next_prime = $ n ;"}
{"text":"Calculate first prime number < n","code":"while ( ! isPrime ( $ prev_prime ) ) { $ prev_prime -- ; }"}
{"text":"Calculate first prime number > n","code":"while ( ! isPrime ( $ next_prime ) ) { $ next_prime ++ ; }"}
{"text":"Check if prev_prime and next_prime have the same average","code":"if ( ( $ prev_prime + $ next_prime ) == 2 * $ n ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ n = 9 ; if ( isInterprime ( $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to find the unit 's place digit","code":"< ? php function get_unit_digit ( $ N ) {"}
{"text":"Let us write for cases when N is smaller than or equal to 4.","code":"if ( $ N == 0 $ N == 1 ) return 1 ; else if ( $ N == 2 ) return 3 ; else if ( $ N == 3 ) return 9 ;"}
{"text":"We know following ( 1 ! + 2 ! + 3 ! + 4 ! ) % 10 = 3 else ( N >= 4 )","code":"return 3 ; }"}
{"text":"Driver code","code":"$ N = 1 ; for ( $ N = 0 ; $ N <= 10 ; $ N ++ ) echo \" For \u2581 N \u2581 = \u2581 \" . $ N . \" \u2581 : \u2581 \" . get_unit_digit ( $ N ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP Program to find sum of squares of Fibonacci numbers in O ( Log n ) time .","code":"< ? php $ MAX = 1000 ; global $ f ;"}
{"text":"Create an array for memoization","code":"$ f = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Returns n 'th Fibonacci number using table f[]","code":"function fib ( $ n ) {"}
{"text":"Base cases","code":"if ( $ n == 0 ) return 0 ; if ( $ n == 1 $ n == 2 ) return ( $ f [ $ n ] = 1 ) ;"}
{"text":"If fib ( n ) is already computed","code":"$ k = ( $ n & 1 ) ? ( $ n + 1 ) \/ 2 : $ n \/ 2 ;"}
{"text":"Applying above formula [ Note value n & 1 is 1 if n is odd , else 0 ] .","code":"$ f [ $ n ] = ( $ n & 1 ) ? ( fib ( $ k ) * fib ( $ k ) + fib ( $ k - 1 ) * fib ( $ k - 1 ) ) : ( 2 * fib ( $ k - 1 ) + fib ( $ k ) ) * fib ( $ k ) ; return $ f [ $ n ] ; }"}
{"text":"Function to calculate sum of squares of Fibonacci numbers","code":"function calculateSumOfSquares ( $ n ) { return fib ( $ n ) * fib ( $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo \" Sum \u2581 of \u2581 Squares \u2581 of \u2581 Fibonacci \u2581 numbers \u2581 is \u2581 : \u2581 \" ; echo calculateSumOfSquares ( $ n ) ; ? >"}
{"text":"function to find the number of solutions for the equation x + y + z <= n , such that 0 <= x <= X , 0 <= y <= Y , 0 <= z <= Z .","code":"< ? php function NumberOfSolutions ( $ x , $ y , $ z , $ n ) {"}
{"text":"to store answer","code":"$ ans = 0 ;"}
{"text":"for values of x","code":"for ( $ i = 0 ; $ i <= $ x ; $ i ++ ) {"}
{"text":"for values of y","code":"for ( $ j = 0 ; $ j <= $ y ; $ j ++ ) {"}
{"text":"maximum possible value of z","code":"$ temp = $ n - $ i - $ j ;"}
{"text":"if z value greater than equals to 0 then only it is valid","code":"if ( $ temp >= 0 ) {"}
{"text":"find minimum of temp and z","code":"$ temp = min ( $ temp , $ z ) ; $ ans += $ temp + 1 ; } } }"}
{"text":"return required answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ x = 1 ; $ y = 2 ; $ z = 3 ; $ n = 4 ; echo NumberOfSolutions ( $ x , $ y , $ z , $ n ) ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return pow ( $ n , 2 ) + 4 * $ n ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"Function to check whether a number is a PerfectSquare or not","code":"< ? php function isPerfectSquare ( $ x ) { $ sr = sqrt ( $ x ) ; return ( ( $ sr - floor ( $ sr ) ) == 0 ) ; }"}
{"text":"Function to check if a number is a product of exactly two distinct primes","code":"function isProduct ( $ num ) { $ cnt = 0 ; for ( $ i = 2 ; $ cnt < 2 && $ i * $ i <= $ num ; ++ $ i ) { while ( $ num % $ i == 0 ) { $ num \/= $ i ; ++ $ cnt ; } } if ( $ num > 1 ) ++ $ cnt ; return $ cnt == 2 ; }"}
{"text":"Function to find numbers that are product of exactly two distinct prime numbers .","code":"function findNumbers ( $ N ) {"}
{"text":"Vector to store such numbers","code":"$ vec = array ( ) ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { if ( isProduct ( $ i ) && ! isPerfectSquare ( $ i ) ) {"}
{"text":"insert in the vector","code":"array_push ( $ vec , $ i ) ; } }"}
{"text":"Print all numbers till n from the vector","code":"for ( $ i = 0 ; $ i < sizeof ( $ vec ) ; $ i ++ ) { echo $ vec [ $ i ] . \" \" ; } }"}
{"text":"Driver Code","code":"$ N = 30 ; findNumbers ( $ N ) ;"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) {"}
{"text":"return final sum","code":"return 2 * pow ( $ n , 3 ) + pow ( $ n , 2 ) ; }"}
{"text":"Driver code","code":"$ N = 3 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"PHP program to find Nth term of the series","code":"< ? php $ mod = 1000000009 ;"}
{"text":"function to return nth term of the series","code":"function NthTerm ( $ n ) { global $ mod ; $ x = ( 2 * $ n * $ n ) % $ mod ; return ( $ x - $ n + $ mod ) % $ mod ; }"}
{"text":"Taking n as 4","code":"$ N = 4 ;"}
{"text":"function call","code":"echo NthTerm ( $ N ) ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function findSum ( $ N ) { return ( $ N * ( $ N + 1 ) * ( 2 * $ N - 5 ) + 4 * $ N ) \/ 2 ; }"}
{"text":"Get the value of N","code":"$ N = 3 ;"}
{"text":"Get the sum of the series","code":"echo findSum ( $ N ) . \" STRNEWLINE \" ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ N ) { return ( ( 3 * $ N * $ N ) - ( 6 * $ N ) + 2 ) ; }"}
{"text":"Get the value of N","code":"$ N = 3 ;"}
{"text":"Find the Nth term and print it","code":"echo nthTerm ( $ N ) ; ? >"}
{"text":"PHP program to find the value of cos ( n - theta )","code":"< ? php $ MAX = 16 ; $ nCr = array_fill ( 0 , $ MAX , array_fill ( 0 , $ MAX , 0 ) ) ;"}
{"text":"This function use to calculate the binomial coefficient upto 15","code":"function binomial ( ) { global $ MAX , $ nCr ;"}
{"text":"use simple DP to find coefficient","code":"for ( $ i = 0 ; $ i < $ MAX ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) { if ( $ j == 0 $ j == $ i ) $ nCr [ $ i ] [ $ j ] = 1 ; else $ nCr [ $ i ] [ $ j ] = $ nCr [ $ i - 1 ] [ $ j ] + $ nCr [ $ i - 1 ] [ $ j - 1 ] ; } } }"}
{"text":"Function to find the value of","code":"function findTanNTheta ( $ tanTheta , $ n ) { global $ MAX , $ nCr ;"}
{"text":"store required answer","code":"$ ans = 0 ; $ numerator = 0 ; $ denominator = 0 ;"}
{"text":"use to toggle sign in sequence .","code":"$ toggle = 1 ;"}
{"text":"calculate numerator","code":"for ( $ i = 1 ; $ i <= $ n ; $ i += 2 ) { $ numerator = $ numerator + $ nCr [ $ n ] [ $ i ] * pow ( $ tanTheta , $ i ) * $ toggle ; $ toggle = $ toggle * -1 ; }"}
{"text":"calculate denominator","code":"$ denominator = 1 ; $ toggle = -1 ; for ( $ i = 2 ; $ i <= $ n ; $ i += 2 ) { $ numerator = $ numerator + $ nCr [ $ n ] [ $ i ] * pow ( $ tanTheta , $ i ) * $ toggle ; $ toggle = $ toggle * -1 ; } $ ans = $ numerator \/ $ denominator ; return $ ans ; }"}
{"text":"Driver code .","code":"binomial ( ) ; $ tanTheta = 0.3 ; $ n = 10 ; echo findTanNTheta ( $ tanTheta , $ n ) ; ? >"}
{"text":"Function for finding maximum pieces with n cuts .","code":"< ? php function findMaximumPieces ( $ n ) { return 1 + $ n * ( $ n + 1 ) \/ 2 ; }"}
{"text":"Driver code","code":"echo findMaximumPieces ( 3 ) ; ? >"}
{"text":"Function to check if the number is divisible by 19 or not","code":"< ? php function isDivisible ( $ n ) { while ( 1 ) {"}
{"text":"Extracting the last digit","code":"$ d = $ n % 10 ;"}
{"text":"Truncating the number","code":"$ n = $ n \/ 10 ;"}
{"text":"Adding twice the last digit to the remaining number","code":"$ n = $ n + $ d * 2 ; if ( $ n < 100 ) break ; }"}
{"text":"return true if number is divisible by 19","code":"return ( $ n % 19 == 0 ) ; }"}
{"text":"Driver code","code":"$ n = 38 ; if ( isDivisible ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find sum of first n terms","code":"< ? php function calculateSum ( $ n ) {"}
{"text":"Sn = n * ( 4 * n * n + 6 * n - 1 ) \/ 3","code":"return ( $ n * ( 4 * $ n * $ n + 6 * $ n - 1 ) \/ 3 ) ; }"}
{"text":"number of terms to be included in the sum","code":"$ n = 4 ;"}
{"text":"find the Sn","code":"echo \" Sum = \" ? >"}
{"text":"Function to print a , b and c","code":"< ? php function printCombination ( $ n ) {"}
{"text":"first loop","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"check for 1 st number","code":"if ( $ i % 3 != 0 ) {"}
{"text":"second loop","code":"for ( $ j = 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"check for 2 nd number","code":"if ( $ j % 3 != 0 ) {"}
{"text":"third loop","code":"for ( $ k = 1 ; $ k < $ n ; $ k ++ ) {"}
{"text":"Check for 3 rd number","code":"if ( $ k % 3 != 0 && ( $ i + $ j + $ k ) == $ n ) { echo $ i , \" \" \u2581 , \u2581 $ j \u2581 , \u2581 \" \" return ; } } } } } } }"}
{"text":"Driver Code","code":"$ n = 233 ; printCombination ( $ n ) ;"}
{"text":"Function to calculate the percentage","code":"< ? php function percent ( $ a , $ b ) { $ result = 0 ; $ result = ( ( $ b - $ a ) * 100 ) \/ $ a ; return $ result ; }"}
{"text":"Driver Code","code":"$ a = 20 ; $ b = 25 ;"}
{"text":"Function calling","code":"echo percent ( $ a , $ b ) . \" % \" ; ? >"}
{"text":"Function to calculate count","code":"< ? php function calculate ( & $ array , $ size ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) if ( $ array [ $ i ] % 2 == 0 && $ array [ $ i ] != 0 && $ array [ $ i ] != 2 ) $ count ++ ; return $ count ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 3 , 4 , 6 ) ; $ size = sizeof ( $ a ) ; echo calculate ( $ a , $ size ) ; ? >"}
{"text":"Recursive function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Driver code","code":"$ a = 98 ; $ b = 56 ; echo \" GCD \u2581 of \u2581 $ a \u2581 and \u2581 $ b \u2581 is \u2581 \" , gcd ( $ a , $ b ) ; ? >"}
{"text":"function to count no of digits","code":"< ? php function dig ( $ a ) { $ count = 0 ; while ( $ a > 0 ) { $ a = ( int ) ( $ a \/ 10 ) ; $ count ++ ; } return $ count ; }"}
{"text":"function to implement above approach","code":"function required_number ( $ num , $ n , $ d ) { $ flag = 0 ; for ( $ i = $ num ; $ i >= 1 ; $ i -- ) { $ power = pow ( 10 , $ i ) ; $ a = $ n % $ power ;"}
{"text":"if difference between power and n doesn 't exceed d","code":"if ( $ d > $ a ) { $ flag = 1 ; break ; } } if ( $ flag ) { $ t = 0 ;"}
{"text":"loop to build a number from the appropriate no of digits containing only 9","code":"for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { $ t += 9 * pow ( 10 , $ j ) ; }"}
{"text":"if the build number is same as original number ( n )","code":"if ( $ n % $ power == $ t ) echo $ n ; else {"}
{"text":"observation","code":"echo ( $ n - ( $ n % $ power ) - 1 ) ; } } else echo $ n ; }"}
{"text":"Driver Code","code":"$ n = 1029 ; $ d = 102 ;"}
{"text":"variable that stores no of digits in n","code":"$ num = dig ( $ n ) ; required_number ( $ num , $ n , $ d ) ; ? >"}
{"text":"PHP program to find optimal number of trials for k floors and 2 eggs .","code":"< ? php function twoEggDrop ( $ k ) { return ceil ( ( -1.0 + sqrt ( 1 + 8 * $ k ) ) \/ 2.0 ) ; }"}
{"text":"Driver Code","code":"$ k = 100 ; echo twoEggDrop ( $ k ) ;"}
{"text":"Function to find area of Icosahedron","code":"< ? php function findArea ( $ a ) { $ area ;"}
{"text":"Formula to calculating area","code":"$ area = 5 * sqrt ( 3 ) * $ a * $ a ; return $ area ; }"}
{"text":"Function to find volume of Icosahedron","code":"function findVolume ( $ a ) { $ volume ;"}
{"text":"Formula to calculating volume","code":"$ volume = ( ( float ) 5 \/ 12 ) * ( 3 + sqrt ( 5 ) ) * $ a * $ a * $ a ; return $ volume ; }"}
{"text":"Driver Code","code":"$ a = 5 ;"}
{"text":"Function call to find area of Icosahedron .","code":"echo \" Area : \" \u2581 , \u2581 findArea ( $ a ) , \u2581 \" \""}
{"text":"Function call to find volume of Icosahedron .","code":"echo \" Volume : \u2581 \" , findVolume ( $ a ) ; ? >"}
{"text":"Function to return number of ways","code":"< ? php function ways ( $ n ) {"}
{"text":"for n = 1","code":"$ first = 2 ;"}
{"text":"for n = 2","code":"$ second = 3 ; $ res = 0 ;"}
{"text":"iterate to find Fibonacci term","code":"for ( $ i = 3 ; $ i <= $ n ; $ i ++ ) { $ res = $ first + $ second ; $ first = $ second ; $ second = $ res ; } return $ res ; }"}
{"text":"total number of places","code":"$ n = 7 ; echo \" Total \u2581 ways \u2581 are : \u2581 \" , ways ( $ n ) ; ? >"}
{"text":"PHP program to find count of digits in N factorial raised to N","code":"< ? php function countDigits ( $ n ) {"}
{"text":"we take sum of logarithms as explained in the approach","code":"$ ans = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ ans += log10 ( $ i ) ;"}
{"text":"multiply the result with n","code":"$ ans = $ ans * $ n ; return 1 + floor ( $ ans ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo countDigits ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Driver Code","code":"< ? php $ cm ; $ meter ; $ kilometer ; $ cm = 1000 ;"}
{"text":"Converting centimeter into meter and kilometer","code":"$ meter = $ cm \/ 100.0 ; $ kilometer = $ cm \/ 100000.0 ; echo \" Length \u2581 in \u2581 meter \u2581 = \u2581 \" , $ meter , \" m \" , \" STRNEWLINE \" ; echo \" Length \u2581 in \u2581 Kilometer \u2581 = \u2581 \" , $ kilometer , \" km \" , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find if two people starting from different positions ever meet or not .","code":"< ? php function everMeet ( $ x1 , $ x2 , $ v1 , $ v2 ) {"}
{"text":"If speed of a person at a position before other person is smaller , then return false .","code":"if ( $ x1 < $ x2 && $ v1 <= $ v2 ) return false ; if ( $ x1 > $ x2 && $ v1 >= $ v2 ) return false ;"}
{"text":"Making sure that x1 is greater","code":"if ( $ x1 < $ x2 ) { list ( $ x1 , $ x2 ) = array ( $ x2 , $ x1 ) ; list ( $ v2 , $ v1 ) = array ( $ v1 , $ v2 ) ; }"}
{"text":"checking if relative speed is a factor of relative distance or not","code":"return ( ( $ x1 - $ x2 ) % ( $ v1 - $ v2 ) == 0 ) ; }"}
{"text":"Driver code","code":"$ x1 = 5 ; $ v1 = 8 ; $ x2 = 4 ; $ v2 = 7 ; if ( everMeet ( $ x1 , $ x2 , $ v1 , $ v2 ) ) print ( \" Yes \" ) ; else print ( \" No \" ) ; ? >"}
{"text":"taking input 1","code":"< ? php $ a = 4 ; $ b = 3 ; $ val = ( $ a + $ b - 1 ) \/ $ b ; echo \" The \u2581 ceiling \u2581 value \u2581 of \u2581 4\/3 \u2581 is \u2581 \" , floor ( $ val ) , \" STRNEWLINE \" ;"}
{"text":"example of perfect division taking input 2","code":"$ a = 6 ; $ b = 3 ; $ val = ( $ a + $ b - 1 ) \/ $ b ; echo \" The \u2581 ceiling \u2581 value \u2581 of \u2581 6\/3 \u2581 is \u2581 \" , floor ( $ val ) ; ? >"}
{"text":"Function that returns sum in the range 1 to x in the sequence 1 3 5 7. ... . N 2 4 6. . . N - 1","code":"< ? php function sumTillX ( $ x , $ n ) {"}
{"text":"number of odd numbers","code":"$ odd = ceil ( $ n \/ 2.0 ) ; if ( $ x <= $ odd ) return $ x * $ x ;"}
{"text":"number of extra even numbers required","code":"$ even = $ x - $ odd ; return ( ( $ odd * $ odd ) + ( $ even * $ even ) + $ even ) ; } function rangeSum ( $ N , $ L , $ R ) { return sumTillX ( $ R , $ N ) - sumTillX ( $ L - 1 , $ N ) ; }"}
{"text":"Driver code","code":"$ N = 10 ; $ L = 1 ; $ R = 6 ; echo ( rangeSum ( $ N , $ L , $ R ) ) ; ? >"}
{"text":"PHP program to print all twin primes using Sieve of Eratosthenes .","code":"< ? php function printTwinPrime ( $ n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ n + 1 , true ) ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"to check for twin prime numbers display the twin primes","code":"for ( $ p = 2 ; $ p <= $ n - 2 ; $ p ++ ) if ( $ prime [ $ p ] && $ prime [ $ p + 2 ] ) echo \" ( \" . $ p . \" , \u2581 \" . ( $ p + 2 ) . \" ) \" ; }"}
{"text":"Driver Code","code":"$ n = 25 ;"}
{"text":"Calling the function","code":"printTwinPrime ( $ n ) ; ? >"}
{"text":"Returns true if n is a cube free number , else returns false .","code":"< ? php function isCubeFree ( $ n ) { if ( $ n == 1 ) return false ;"}
{"text":"check for all possible divisible cubes","code":"for ( $ i = 2 ; $ i * $ i * $ i <= $ n ; $ i ++ ) if ( $ n % ( $ i * $ i * $ i ) == 0 ) return false ; return true ; }"}
{"text":"Print all cube free numbers smaller than n .","code":"function printCubeFree ( $ n ) { for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) if ( isCubeFree ( $ i ) ) echo $ i . \" \" ; }"}
{"text":"Driver code","code":"$ n = 20 ; printCubeFree ( $ n ) ; ? >"}
{"text":"Function to convert given decimal number of gray code into its inverse in decimal form","code":"< ? php function inversegrayCode ( $ n ) { $ inv = 0 ;"}
{"text":"Taking xor until n becomes zero","code":"for ( ; $ n ; $ n = $ n >> 1 ) $ inv ^= $ n ; return $ inv ; }"}
{"text":"Driver Code","code":"$ n = 15 ; echo inversegrayCode ( $ n ) ; ? >"}
{"text":"A function to print all prime factors of a given number n","code":"< ? php function productPrimeFactors ( $ n ) { $ product = 1 ;"}
{"text":"Handle prime factor 2 explicitly so that can optimally handle other prime factors .","code":"if ( $ n % 2 == 0 ) { $ product *= 2 ; while ( $ n % 2 == 0 ) $ n = $ n \/ 2 ; }"}
{"text":"n must be odd at this point . So we can skip one element ( Note i = i + 2 )","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) {"}
{"text":"While i divides n , print i and divide n","code":"if ( $ n % $ i == 0 ) { $ product = $ product * $ i ; while ( $ n % $ i == 0 ) $ n = $ n \/ $ i ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( $ n > 2 ) $ product = $ product * $ n ; return $ product ; }"}
{"text":"Driver Code","code":"$ n = 44 ; echo productPrimeFactors ( $ n ) ; ? >"}
{"text":"Returns the Maximum probability for Drawing 1 copy of number A from N containers with N copies each of numbers A and B","code":"< ? php function calculateProbability ( $ N ) {"}
{"text":"Pmax = N \/ ( N + 1 )","code":"$ probability = $ N \/ ( $ N + 1 ) ; return $ probability ; }"}
{"text":"1. N = 1","code":"$ N = 1 ; $ probabilityMax = calculateProbability ( $ N ) ; echo ( \" Maximum \u2581 Probability \u2581 for \u2581 N \u2581 = \u2581 \" . $ N . \" is , \" round ( $ probabilityMax , 4 ) . \" STRNEWLINE \" ) ;"}
{"text":"2. N = 2","code":"$ N = 2 ; $ probabilityMax = calculateProbability ( $ N ) ; echo ( \" Maximum \u2581 Probability \u2581 for \u2581 N \u2581 = \u2581 \" . $ N . \" is , \" round ( $ probabilityMax , 4 ) . \" STRNEWLINE \" ) ;"}
{"text":"3. N = 10","code":"$ N = 10 ; $ probabilityMax = calculateProbability ( $ N ) ; echo ( \" Maximum \u2581 Probability \u2581 for \u2581 N \u2581 = \u2581 \" . $ N . \" is , \" round ( $ probabilityMax , 4 ) . \" STRNEWLINE \" ) ; ? >"}
{"text":"Function to find mean of grouped data .","code":"< ? php function mean ( $ mid , $ freq , $ n ) { $ sum = 0 ; $ freqSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + $ mid [ $ i ] * $ freq [ $ i ] ; $ freqSum = $ freqSum + $ freq [ $ i ] ; } return $ sum \/ $ freqSum ; }"}
{"text":"Function to find standard deviation of grouped data .","code":"function groupedSD ( $ lower_limit , $ upper_limit , $ freq , $ n ) { $ mid = array ( ) ; $ sum = 0 ; $ freqSum = 0 ; $ sd ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ mid [ $ i ] = ( $ lower_limit [ $ i ] + $ upper_limit [ $ i ] ) \/ 2 ; $ sum = $ sum + $ freq [ $ i ] * $ mid [ $ i ] * $ mid [ $ i ] ; $ freqSum = $ freqSum + $ freq [ $ i ] ; }"}
{"text":"Formula to find standard deviation of grouped data .","code":"$ sd = sqrt ( ( $ sum - $ freqSum * mean ( $ mid , $ freq , $ n ) * mean ( $ mid , $ freq , $ n ) ) \/ ( $ freqSum - 1 ) ) ; return $ sd ; }"}
{"text":"Declare and initialize the upper limit of interval .","code":"$ lower_limit = array ( 50 , 61 , 71 , 86 , 96 ) ;"}
{"text":"Declare and initialize the upper limit of interval .","code":"$ upper_limit = array ( 60 , 70 , 85 , 95 , 100 ) ; $ freq = array ( 9 , 7 , 9 , 12 , 8 ) ;"}
{"text":"Calculating the size of array .","code":"$ n = count ( $ lower_limit ) ; echo groupedSD ( $ lower_limit , $ upper_limit , $ freq , $ n ) ; ? >"}
{"text":"function to find average of sum of first n even numbers","code":"< ? php function avg_of_even_num ( $ n ) {"}
{"text":"sum of first n even numbers","code":"$ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += 2 * $ i ;"}
{"text":"calculating Average","code":"return $ sum \/ $ n ; }"}
{"text":"Driver Code","code":"$ n = 9 ; echo ( avg_of_even_num ( $ n ) ) ; ? >"}
{"text":"Return the average of sum of first n even numbers","code":"< ? php function avg_of_even_num ( $ n ) { return $ n + 1 ; }"}
{"text":"Driver Code","code":"$ n = 8 ; echo ( avg_of_even_num ( $ n ) ) ; ? >"}
{"text":"Efficient PHP method to find sum of square of first n odd numbers .","code":"< ? php < ? php function squareSum ( $ n ) { return $ n * ( 4 * $ n * $ n - 1 ) \/ 3 ; }"}
{"text":"driver code","code":"echo squareSum ( 8 ) ; ? >"}
{"text":"checks weather given number is prime or not .","code":"< ? php function isPrime ( $ n ) {"}
{"text":"check if n is a multiple of 2","code":"if ( $ n % 2 == 0 ) return false ;"}
{"text":"if not , then just check the odds","code":"for ( $ i = 3 ; $ i * $ i <= $ n ; $ i += 2 ) if ( $ n % $ i == 0 ) return false ; return true ; }"}
{"text":"return next prime number","code":"function nextPrime ( $ start ) {"}
{"text":"start with next number .","code":"$ next = $ start + 1 ;"}
{"text":"breaks after finding next prime number","code":"while ( ! isPrime ( $ next ) ) $ next ++ ; return $ next ; }"}
{"text":"check given three numbers are adjacent primes are not .","code":"function areAdjacentPrimes ( $ a , $ b , $ c ) {"}
{"text":"check given three numbers are primes are not .","code":"if ( ! isPrime ( $ a ) || ! isPrime ( $ b ) || ! isPrime ( $ c ) ) return false ;"}
{"text":"find next prime of a","code":"$ next = nextPrime ( $ a ) ;"}
{"text":"If next is not same as ' a '","code":"if ( $ next != $ b ) return false ;"}
{"text":"If next next is not same as ' c '","code":"if ( nextPrime ( $ b ) != $ c ) return false ; return true ; }"}
{"text":"Driver code","code":"if ( areAdjacentPrimes ( 11 , 13 , 19 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Utility function to check whether number is semiprime or not","code":"< ? php function checkSemiprime ( $ num ) { $ cnt = 0 ; for ( $ i = 2 ; $ cnt < 2 && $ i * $ i <= $ num ; ++ $ i ) while ( $ num % $ i == 0 ) $ num \/= $ i ; ++ $ cnt ;"}
{"text":"If number is greater than 1 , add it to the count variable as it indicates the number remain is prime number","code":"if ( $ num > 1 ) ++ $ cnt ;"}
{"text":"Return '1' if count is equal to '2' else return '0'","code":"return $ cnt == 2 ; }"}
{"text":"Function to print ' True ' or ' False ' according to condition of semiprime","code":"function semiprime ( $ n ) { if ( checkSemiprime ( $ n ) ) echo \" True STRNEWLINE \" ; else echo \" False STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ n = 6 ; semiprime ( $ n ) ; $ n = 8 ; semiprime ( $ n ) ; ? >"}
{"text":"Function to find sum of series .","code":"< ? php function sumOfSeries ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum = $ sum + $ i * $ i ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ;"}
{"text":"Function call","code":"echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"Function to find sum of series .","code":"< ? php function sumOfSeries ( $ n ) { return ( $ n * ( $ n + 1 ) * ( 2 * $ n + 1 ) ) \/ 6 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"< ? php function binomialCoeff ( $ n , $ k ) { $ C [ $ n + 1 ] [ $ k + 1 ] = array ( 0 ) ;"}
{"text":"Calculate value of Binomial Coefficient in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= min ( $ i , $ k ) ; $ j ++ ) {"}
{"text":"Base Cases","code":"if ( $ j == 0 $ j == $ i ) $ C [ $ i ] [ $ j ] = 1 ;"}
{"text":"Calculate value using previously stored values","code":"else $ C [ $ i ] [ $ j ] = $ C [ $ i - 1 ] [ $ j - 1 ] + $ C [ $ i - 1 ] [ $ j ] ; } } return $ C [ $ n ] [ $ k ] ; }"}
{"text":"Return maximum binomial coefficient term value .","code":"function maxcoefficientvalue ( $ n ) {"}
{"text":"if n is even","code":"if ( $ n % 2 == 0 ) return binomialCoeff ( $ n , $ n \/ 2 ) ;"}
{"text":"if n is odd","code":"else return binomialCoeff ( $ n , ( $ n + 1 ) \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo maxcoefficientvalue ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"LCM for x , y , z","code":"function LCM ( $ x , $ y , $ z ) { $ ans = floor ( ( $ x * $ y ) \/ ( gcd ( $ x , $ y ) ) ) ; return floor ( ( $ z * $ ans ) \/ ( gcd ( $ ans , $ z ) ) ) ; }"}
{"text":"returns smallest n digit number divisible by x , y and z","code":"function findDivisible ( $ n , $ x , $ y , $ z ) {"}
{"text":"find the LCM","code":"$ lcm = LCM ( $ x , $ y , $ z ) ;"}
{"text":"find power of 10 for least number","code":"$ ndigitnumber = pow ( 10 , $ n - 1 ) ;"}
{"text":"reminder after","code":"$ reminder = $ ndigitnumber % $ lcm ;"}
{"text":"If smallest number itself divides lcm .","code":"if ( $ reminder == 0 ) return $ ndigitnumber ;"}
{"text":"add lcm - reminder number for next n digit number","code":"$ ndigitnumber += $ lcm - $ reminder ;"}
{"text":"this condition check the n digit number is possible or not if it is possible it return the number else return 0","code":"if ( $ ndigitnumber < pow ( 10 , $ n ) ) return $ ndigitnumber ; else return 0 ; }"}
{"text":"driver code","code":"$ n = 4 ; $ x = 2 ; $ y = 3 ; $ z = 5 ; $ res = findDivisible ( $ n , $ x , $ y , $ z ) ;"}
{"text":"if number is possible then it print the number","code":"if ( $ res != 0 ) echo $ res ; else echo \" Not \u2581 possible \" ; ? >"}
{"text":"Return the sum of square of first n natural numbers","code":"< ? php function squaresum ( $ n ) { return ( $ n * ( $ n + 1 ) \/ 2 ) * ( 2 * $ n + 1 ) \/ 3 ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo squaresum ( $ n ) ; ? >"}
{"text":"Function to calculate distance","code":"< ? php function distance ( $ x1 , $ y1 , $ x2 , $ y2 ) {"}
{"text":"Calculating distance","code":"return sqrt ( pow ( $ x2 - $ x1 , 2 ) + pow ( $ y2 - $ y1 , 2 ) * 1.0 ) ; }"}
{"text":"Driver Code","code":"echo ( distance ( 3 , 4 , 4 , 3 ) ) ; ? >"}
{"text":"to find sum","code":"< ? php function accumulate ( $ s ) { $ acc = 0 ; for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) { $ acc += $ s [ $ i ] - '0' ; } return $ acc ; }"}
{"text":"function to check if a large number is divisible by 15","code":"function isDivisible ( $ s ) {"}
{"text":"length of string","code":"$ n = strlen ( $ s ) ;"}
{"text":"check divisibility by 5","code":"if ( $ s [ $ n - 1 ] != '5' && $ s [ $ n - 1 ] != '0' ) return false ;"}
{"text":"Sum of digits","code":"$ sum = accumulate ( $ s ) ;"}
{"text":"if divisible by 3","code":"return ( $ sum % 3 == 0 ) ; }"}
{"text":"Driver Code","code":"$ s = \"15645746327462384723984023940239\" ; isDivisible ( $ s ) ? print ( \" Yes STRNEWLINE \" ) : print ( \" No STRNEWLINE \" ) ; $ s = \"15645746327462384723984023940235\" ; isDivisible ( $ s ) ? print ( \" Yes STRNEWLINE \" ) : print ( \" No STRNEWLINE \" ) ; ? >"}
{"text":"Function to check if a number is perfect square number or not","code":"< ? php function checkPerfectSquare ( $ n ) {"}
{"text":"takes the sqrt of the number","code":"$ d = sqrt ( $ n ) ;"}
{"text":"checks if it is a perfect square number","code":"if ( $ d * $ d == $ n ) return true ; return false ; }"}
{"text":"Function to find the largest perfect square number in the array","code":"function largestPerfectSquareNumber ( $ a , $ n ) {"}
{"text":"stores the maximum of all perfect square numbers","code":"$ maxi = -1 ;"}
{"text":"Traverse all elements in the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"store the maximum if current element is a perfect square","code":"if ( checkPerfectSquare ( $ a [ $ i ] ) ) $ maxi = max ( $ a [ $ i ] , $ maxi ) ; } return $ maxi ; }"}
{"text":"Driver Code","code":"$ a = array ( 16 , 20 , 25 , 2 , 3 , 10 ) ; $ n = count ( $ a ) ; echo largestPerfectSquareNumber ( $ a , $ n ) ; ? >"}
{"text":"PHP implementation of above approach","code":"< ? php function gcd ( $ a , $ b ) { return $ b == 0 ? $ a : gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to find the LCM","code":"function find_LCM ( $ x , $ y ) { return ( int ) ( ( $ x * $ y ) \/ gcd ( $ x , $ y ) ) ; }"}
{"text":"Function to count the pairs","code":"function CountPairs ( $ n , $ m , $ A , $ B ) { $ cnt = 0 ; $ lcm = find_LCM ( $ A , $ B ) ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ cnt += ( int ) ( ( $ m + ( $ i % $ lcm ) ) \/ $ lcm ) ; return $ cnt ; }"}
{"text":"Driver code","code":"$ n = 60 ; $ m = 90 ; $ A = 5 ; $ B = 10 ; echo CountPairs ( $ n , $ m , $ A , $ B ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ MAX = 101 ; $ prefix = array_fill ( 0 , $ MAX , array_fill ( 0 , $ MAX , 0 ) ) ; $ ar = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Function to calculate the prefix","code":"function cal_prefix ( $ n , $ arr ) { global $ prefix , $ ar , $ MAX ;"}
{"text":"Creating one based indexing","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ ar [ $ i + 1 ] = $ arr [ $ i ] ;"}
{"text":"Initializing and creating prefix array","code":"for ( $ i = 1 ; $ i < $ MAX ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ prefix [ $ i ] [ $ j ] = 0 ; for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"Creating a prefix array for every possible value in a given range","code":"$ prefix [ $ i ] [ $ j ] = $ prefix [ $ i ] [ $ j - 1 ] + ( int ) ( $ ar [ $ j ] <= $ i ? 1 : 0 ) ; } } }"}
{"text":"Function to return the kth largest element in the index range [ l , r ]","code":"function ksub ( $ l , $ r , $ n , $ k ) { global $ prefix , $ ar , $ MAX ; $ lo = 1 ; $ hi = $ MAX - 1 ;"}
{"text":"Binary searching through the 2d array and only checking the range in which the sub array is a part","code":"while ( $ lo + 1 < $ hi ) { $ mid = ( int ) ( ( $ lo + $ hi ) \/ 2 ) ; if ( $ prefix [ $ mid ] [ $ r ] - $ prefix [ $ mid ] [ $ l - 1 ] >= $ k ) $ hi = $ mid ; else $ lo = $ mid + 1 ; } if ( $ prefix [ $ lo ] [ $ r ] - $ prefix [ $ lo ] [ $ l - 1 ] >= $ k ) $ hi = $ lo ; return $ hi ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 4 , 2 , 3 , 5 , 7 , 6 ) ; $ n = count ( $ arr ) ; $ k = 4 ;"}
{"text":"Creating the prefix array for the given array","code":"cal_prefix ( $ n , $ arr ) ;"}
{"text":"Queries","code":"$ queries = array ( array ( 1 , $ n , 1 ) , array ( 2 , $ n - 2 , 2 ) , array ( 3 , $ n - 1 , 3 ) ) ; $ q = count ( $ queries ) ;"}
{"text":"Perform queries","code":"for ( $ i = 0 ; $ i < $ q ; $ i ++ ) echo ksub ( $ queries [ $ i ] [ 0 ] , $ queries [ $ i ] [ 1 ] , $ n , $ queries [ $ i ] [ 2 ] ) . \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate max - min","code":"< ? php function max_min ( $ a , $ n ) {"}
{"text":"There should be at - least two elements","code":"if ( $ n <= 1 ) return PHP_INT_MAX ;"}
{"text":"To store first and second minimums","code":"$ f_min = $ a [ 0 ] ; $ s_min = PHP_INT_MAX ;"}
{"text":"To store first and second maximums","code":"$ f_max = $ a [ 0 ] ; $ s_max = ~ PHP_INT_MAX ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] <= $ f_min ) { $ s_min = $ f_min ; $ f_min = $ a [ $ i ] ; } else if ( $ a [ $ i ] < $ s_min ) { $ s_min = $ a [ $ i ] ; } if ( $ a [ $ i ] >= $ f_max ) { $ s_max = $ f_max ; $ f_max = $ a [ $ i ] ; } else if ( $ a [ $ i ] > $ s_max ) { $ s_max = $ a [ $ i ] ; } } return min ( ( $ f_max - $ s_min ) , ( $ s_max - $ f_min ) ) ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 3 , 3 , 7 ) ; $ n = sizeof ( $ a ) ; echo ( max_min ( $ a , $ n ) ) ; ? >"}
{"text":"Function to find the smallest number 's index","code":"< ? php function minimal ( $ a , $ n ) { $ lo = 0 ; $ hi = $ n - 1 ;"}
{"text":"Do a binary search","code":"while ( $ lo < $ hi ) {"}
{"text":"Find the mid element","code":"$ mid = ( $ lo + $ hi ) >> 1 ;"}
{"text":"Check for break point","code":"if ( $ a [ $ mid ] < $ a [ $ mid + 1 ] ) { $ hi = $ mid ; } else { $ lo = $ mid + 1 ; } }"}
{"text":"Return the index","code":"return $ lo ; }"}
{"text":"Driver Code","code":"$ a = array ( 8 , 5 , 4 , 3 , 4 , 10 ) ; $ n = sizeof ( $ a ) ; $ ind = minimal ( $ a , $ n ) ;"}
{"text":"Print the smallest number","code":"echo $ a [ $ ind ] ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function findIndices ( $ arr , $ n ) { $ leftMin = 0 ; $ rightMin = 0 ; $ leftMax = 0 ; $ rightMax = 0 ; $ min = $ arr [ 0 ] ; $ max = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If found new minimum","code":"if ( $ arr [ $ i ] < $ min ) { $ leftMin = $ rightMin = $ i ; $ min = $ arr [ $ i ] ; }"}
{"text":"If arr [ i ] = min then rightmost index for min will change","code":"else if ( $ arr [ $ i ] == $ min ) $ rightMin = $ i ;"}
{"text":"If found new maximum","code":"if ( $ arr [ $ i ] > $ max ) { $ leftMax = $ rightMax = $ i ; $ max = $ arr [ $ i ] ; }"}
{"text":"If arr [ i ] = max then rightmost index for max will change","code":"else if ( $ arr [ $ i ] == $ max ) $ rightMax = $ i ; } echo \" Minimum \u2581 left \u2581 : \u2581 \" , $ leftMin , \" STRNEWLINE \" ; echo \" Minimum \u2581 right \u2581 : \u2581 \" , $ rightMin , \" STRNEWLINE \" ; echo \" Maximum \u2581 left \u2581 : \u2581 \" , $ leftMax , \" STRNEWLINE \" ; echo \" Maximum \u2581 right \u2581 : \u2581 \" , $ rightMax , \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 1 , 1 , 2 , 1 , 5 , 6 , 5 ) ; $ n = sizeof ( $ arr ) ; findIndices ( $ arr , $ n ) ; ? >"}
{"text":"Function to find smallest and largest element from principal and secondary diagonal","code":"< ? php function diagonalsMinMax ( $ mat ) {"}
{"text":"take length of $matrix","code":"$ n = count ( $ mat ) ; if ( $ n == 0 ) return ;"}
{"text":"declare and initialize variables with appropriate value","code":"$ principalMin = $ mat [ 0 ] [ 0 ] ; $ principalMax = $ mat [ 0 ] [ 0 ] ; $ secondaryMin = $ mat [ $ n - 1 ] [ 0 ] ; $ secondaryMax = $ mat [ $ n - 1 ] [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Condition for principal diagonal","code":"if ( $ i == $ j ) {"}
{"text":"take new smallest value","code":"if ( $ mat [ $ i ] [ $ j ] < $ principalMin ) { $ principalMin = $ mat [ $ i ] [ $ j ] ; }"}
{"text":"take new largest value","code":"if ( $ mat [ $ i ] [ $ j ] > $ principalMax ) { $ principalMax = $ mat [ $ i ] [ $ j ] ; } }"}
{"text":"Condition for secondary diagonal","code":"if ( ( $ i + $ j ) == ( $ n - 1 ) ) {"}
{"text":"take new smallest value","code":"if ( $ mat [ $ i ] [ $ j ] < $ secondaryMin ) { $ secondaryMin = $ mat [ $ i ] [ $ j ] ; }"}
{"text":"take new largest value","code":"if ( $ mat [ $ i ] [ $ j ] > $ secondaryMax ) { $ secondaryMax = $ mat [ $ i ] [ $ j ] ; } } } } echo \" Principal \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \" , $ principalMin , \" STRNEWLINE \" ; echo \" Principal \u2581 Diagonal \u2581 Greatest \u2581 Element \u2581 : \u2581 \" , $ principalMax , \" STRNEWLINE \" ; echo \" Secondary \u2581 Diagonal \u2581 Smallest \u2581 Element : \u2581 \" , $ secondaryMin , \" STRNEWLINE \" ; echo \" Secondary \u2581 Diagonal \u2581 Greatest \u2581 Element : \u2581 \" , $ secondaryMax , \" STRNEWLINE \" ; }"}
{"text":"Declare and initialize 5 X5 matrix","code":"$ matrix = array ( array ( 1 , 2 , 3 , 4 , -10 ) , array ( 5 , 6 , 7 , 8 , 6 ) , array ( 1 , 2 , 11 , 3 , 4 ) , array ( 5 , 6 , 70 , 5 , 8 ) , array ( 4 , 9 , 7 , 1 , -5 ) ) ; diagonalsMinMax ( $ matrix ) ; ? >"}
{"text":"PHP program for Indexed Sequential Search","code":"< ? php function indexedSequentialSearch ( $ arr , $ n , $ k ) { $ elements = array ( ) ; $ indices = array ( ) ; $ temp = array ( ) ; $ j = 0 ; $ ind = 0 ; $ start = 0 ; $ end = 0 ; $ set = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i += 3 ) {"}
{"text":"Storing element","code":"$ elements [ $ ind ] = $ arr [ $ i ] ;"}
{"text":"Storing the index","code":"$ indices [ $ ind ] = $ i ; $ ind ++ ; } if ( $ k < $ elements [ 0 ] ) { echo \" Not \u2581 found \" ; } else { for ( $ i = 1 ; $ i <= $ ind ; $ i ++ ) if ( $ k < $ elements [ $ i ] ) { $ start = $ indices [ $ i - 1 ] ; $ set = 1 ; $ end = $ indices [ $ i ] ; break ; } } if ( $ set == 1 ) { $ start = $ indices [ $ i - 1 ] ; $ end = $ n ; } for ( $ i = $ start ; $ i <= $ end ; $ i ++ ) { if ( $ k == $ arr [ $ i ] ) { $ j = 1 ; break ; } } if ( $ j == 1 ) echo \" Found \u2581 at \u2581 index \u2581 \" , $ i ; else echo \" Not \u2581 found \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 6 , 7 , 8 , 9 , 10 ) ; $ n = count ( $ arr ) ;"}
{"text":"Element to search","code":"$ k = 8 ;"}
{"text":"Function call","code":"indexedSequentialSearch ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to count number of segments","code":"< ? php function countSegments ( $ a , $ n , $ x ) { $ flag = false ; $ count = 0 ;"}
{"text":"Iterate in the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"check if array element greater then X or not","code":"if ( $ a [ $ i ] > $ x ) { $ flag = true ; } else {"}
{"text":"if flag is true","code":"if ( $ flag ) $ count += 1 ; $ flag = false ; } }"}
{"text":"After iteration complete check for the last segment","code":"if ( $ flag ) $ count += 1 ; return $ count ; }"}
{"text":"Driver Code","code":"$ a = array ( 8 , 25 , 10 , 19 , 19 , 18 , 20 , 11 , 18 ) ; $ n = sizeof ( $ a ) ; $ x = 13 ; echo countSegments ( $ a , $ n , $ x ) ; ? >"}
{"text":"Function to find the quadratic equation whose roots are a and b","code":"< ? php function count_triples ( $ n , $ k ) { $ i = 0 ; $ j = 0 ; $ l = 0 ; $ count = 0 ;"}
{"text":"iterate for all triples pairs ( i , j , l )","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) { for ( $ l = 1 ; $ l <= $ n ; $ l ++ ) {"}
{"text":"if the condition is satisfied","code":"if ( ( $ i + $ j ) % $ k == 0 && ( $ i + $ l ) % $ k == 0 && ( $ j + $ l ) % $ k == 0 ) $ count ++ ; } } } return $ count ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ k = 2 ; $ ans = count_triples ( $ n , $ k ) ; echo ( $ ans ) ; ? >"}
{"text":"PHP program of kth smallest \/ largest in a small range unsorted array","code":"< ? php $ maxs = 1000001 ; function kthSmallestLargest ( & $ arr , $ n , $ k ) { global $ maxs ; $ max_val = max ( $ arr ) ; $ hash = array_fill ( 0 , $ max_val + 1 , NULL ) ;"}
{"text":"Storing counts of elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ hash [ $ arr [ $ i ] ] ++ ;"}
{"text":"Traverse hash array build above until we reach k - th smallest element .","code":"$ count = 0 ; for ( $ i = 0 ; $ i <= $ max_val ; $ i ++ ) { while ( $ hash [ $ i ] > 0 ) { $ count ++ ; if ( $ count == $ k ) return $ i ; $ hash [ $ i ] -- ; } } return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 11 , 6 , 2 , 9 , 4 , 3 , 16 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; $ k = 3 ; echo \" kth \u2581 smallest \u2581 number \u2581 is : \u2581 \" . kthSmallestLargest ( $ arr , $ n , $ k ) . \" STRNEWLINE \" ; return 0 ; ? >"}
{"text":"Function to show the working of Meta binary search","code":"< ? php function bsearch ( $ A , $ key_to_search , $ n ) {"}
{"text":"Set number of bits to represent","code":"$ lg = log ( $ n - 1 , 2 ) + 1 ;"}
{"text":"largest array index This is redundant and will cause error for some case while ( ( 1 << $lg ) < $n - 1 ) $lg += 1 ;","code":"$ pos = 0 ; for ( $ i = $ lg - 1 ; $ i >= 0 ; $ i -- ) { if ( $ A [ $ pos ] == $ key_to_search ) return $ pos ;"}
{"text":"Incrementally construct the index of the target value","code":"$ new_pos = $ pos | ( 1 << $ i ) ;"}
{"text":"find the element in one direction and update $position","code":"if ( ( $ new_pos < $ n ) && ( $ A [ $ new_pos ] <= $ key_to_search ) ) $ pos = $ new_pos ; }"}
{"text":"if element found return $pos otherwise - 1","code":"return ( ( $ A [ $ pos ] == $ key_to_search ) ? $ pos : -1 ) ; }"}
{"text":"Driver code","code":"$ A = [ -2 , 10 , 100 , 250 , 32315 ] ; $ ans = bsearch ( $ A , 10 , 5 ) ; echo $ ans ; ? >"}
{"text":"This function returns median of a [ ] and b [ ] . Assumptions in this function : Both a [ ] and b [ ] are sorted arrays","code":"< ? php function findmedian ( $ a , $ n1 , $ b , $ n2 ) { $ i = 0 ;"}
{"text":"Current index of i \/ p array a [ ]","code":"$ j = 0 ;"}
{"text":"Current index of i \/ p array b [ ]","code":"$ k ; $ m1 = -1 ; $ m2 = -1 ; for ( $ k = 0 ; $ k <= ( $ n1 + $ n2 ) \/ 2 ; $ k ++ ) { if ( $ i < $ n1 and $ j < $ n2 ) { if ( $ a [ $ i ] < $ b [ $ j ] ) { $ m2 = $ m1 ; $ m1 = $ a [ $ i ] ; $ i ++ ; } else { $ m2 = $ m1 ; $ m1 = $ b [ $ j ] ; $ j ++ ; } }"}
{"text":"Below is to handle the case where all elements of a [ ] are smaller than smallest ( or first ) element of b [ ] or a [ ] is empty","code":"else if ( i == n1 ) { $ m2 = $ m1 ; $ m1 = $ b [ j ] ; $ j ++ ; }"}
{"text":"Below is to handle case where all elements of b [ ] are smaller than smallest ( or first ) element of a [ ] or b [ ] is empty","code":"else if ( $ j == $ n2 ) { $ m2 = $ m1 ; $ m1 = $ a [ $ i ] ; $ i ++ ; } }"}
{"text":"Below is to handle the case where sum of number of elements of the arrays is even","code":"if ( ( $ n1 + $ n2 ) % 2 == 0 ) return ( $ m1 + $ m2 ) * 1.0 \/ 2 ;"}
{"text":"Below is to handle the case where sum of number of elements of the arrays is odd","code":"return m1 ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 12 , 15 , 26 , 38 ) ; $ b = array ( 2 , 13 , 24 ) ; $ n1 = count ( $ a ) ; $ n2 = count ( $ b ) ; echo ( findmedian ( $ a , $ n1 , $ b , $ n2 ) ) ; ? >"}
{"text":"prints element and NSE pair for all elements of arr [ ] of size n","code":"< ? php function printNSE ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ next = -1 ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { if ( $ arr [ $ i ] > $ arr [ $ j ] ) { $ next = $ arr [ $ j ] ; break ; } } echo $ arr [ $ i ] . \" -- \" . \u2581 $ next . \" \" } }"}
{"text":"Driver Code","code":"$ arr = array ( 11 , 13 , 21 , 3 ) ; $ n = count ( $ arr ) ; printNSE ( $ arr , $ n ) ; ? >"}
{"text":"PHP code to find longest subarray with difference between max and min as at - most 1.","code":"< ? php function longestSubarray ( $ input , $ length ) { $ prev = -1 ; $ prevCount = 0 ; $ currentCount = 1 ;"}
{"text":"longest constant range length","code":"$ longest = 1 ;"}
{"text":"first number","code":"$ current = $ input [ 0 ] ; for ( $ i = 1 ; $ i < $ length ; $ i ++ ) { $ next = $ input [ $ i ] ;"}
{"text":"If we see same number","code":"if ( $ next == $ current ) { $ currentCount ++ ; }"}
{"text":"If we see different number , but same as previous .","code":"else if ( $ next == $ prev ) { $ prevCount += $ currentCount ; $ prev = $ current ; $ current = $ next ; $ currentCount = 1 ; }"}
{"text":"If number is neither same as previous nor as current .","code":"else { $ longest = max ( $ longest , $ currentCount + $ prevCount ) ; $ prev = $ current ; $ prevCount = $ currentCount ; $ current = $ next ; $ currentCount = 1 ; } } return max ( $ longest , $ currentCount + $ prevCount ) ; }"}
{"text":"Driver Code","code":"$ input = array ( 5 , 5 , 6 , 7 , 6 ) ; echo ( longestSubarray ( $ input , count ( $ input ) ) ) ; ? >"}
{"text":"Search function for searching the first element of the subarray which is greater or equal to the last element ( num )","code":"< ? php function binarySearch ( $ searchSpace , $ s , $ e , $ num ) { $ ans = 0 ; while ( $ s <= $ e ) { $ mid = ( $ s + $ e ) \/ 2 ; if ( $ searchSpace [ $ mid ] >= $ num ) { $ ans = $ mid ; $ e = $ mid - 1 ; } else { $ s = $ mid + 1 ; } } return $ ans ; }"}
{"text":"Returns length of the longest array with first element smaller than the last element .","code":"function longestSubArr ( & $ arr , $ n ) {"}
{"text":"Initially the search space is empty .","code":"$ j = 0 ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) {"}
{"text":"We will add an ith element in the search space if the search space is empty or if the ith element is greater than the last element of the search space .","code":"if ( $ j == 0 or $ searchSpace [ $ j - 1 ] < $ arr [ $ i ] ) { $ searchSpace [ $ j ] = $ arr [ $ i ] ; $ index [ $ j ] = $ i ; $ j ++ ; }"}
{"text":"we will search for the index first element in the search space and we will use it find the index of it in the original array .","code":"$ idx = binarySearch ( $ searchSpace , 0 , $ j - 1 , $ arr [ $ i ] ) ;"}
{"text":"Update the answer if the length of the subarray is greater than the previously calculated lengths .","code":"$ ans = max ( $ ans , $ i - $ index [ $ idx ] + 1 ) ; } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( -5 , -1 , 7 , 5 , 1 , -2 ) ; $ n = sizeof ( $ arr ) ; echo ( longestSubArr ( $ arr , $ n ) ) ; ? >"}
{"text":"PHP program to find if a string is suffix of another","code":"< ? php function isSuffix ( $ s1 , $ s2 ) { $ n1 = ( $ s1 ) ; $ n2 = strlen ( $ s2 ) ; if ( $ n1 > $ n2 ) return false ; for ( $ i = 0 ; $ i < $ n1 ; $ i ++ ) if ( $ s1 [ $ n1 - $ i - 1 ] != $ s2 [ $ n2 - $ i - 1 ] ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ s1 = \" geeks \" ; $ s2 = \" geeksforgeeks \" ;"}
{"text":"Test case - sensitive implementation of endsWith function","code":"$ result = isSuffix ( $ s1 , $ s2 ) ; if ( $ result ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"To indicate if one or more occurrences of ' c ' are seen or not .","code":"< ? php $ oneSeen = false ;"}
{"text":"Traverse given string","code":"$ i = 0 ; $ n = strlen ( $ s ) ; while ( $ i < $ n ) {"}
{"text":"If current character is same as c , we first check if c is already seen .","code":"if ( $ s [ $ i ] == $ c ) { if ( $ oneSeen == true ) return false ;"}
{"text":"If this is very first appearance of c , we traverse all consecutive occurrences .","code":"while ( $ i < $ n && $ s [ $ i ] == $ c ) $ i ++ ;"}
{"text":"To indicate that character is seen once .","code":"$ oneSeen = true ; } else $ i ++ ; } return true ; }"}
{"text":"Driver Code","code":"$ s = \"110029\" ; if ( checkIfAllTogether ( $ s , '1' ) ) echo ( \" Yes STRNEWLINE \" ) ; else echo ( \" No STRNEWLINE \" ) ; ? >"}
{"text":"PHP program to implement front and back search","code":"< ? php function search ( $ arr , $ n , $ x ) {"}
{"text":"Start searching from both ends","code":"$ front = 0 ; $ back = $ n - 1 ;"}
{"text":"Keep searching while two indexes do not cross .","code":"while ( $ front <= $ back ) { if ( $ arr [ $ front ] == $ x $ arr [ $ back ] == $ x ) return true ; $ front ++ ; $ back -- ; } return false ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 20 , 80 , 30 , 60 , 50 , 110 , 100 , 130 , 170 ) ; $ x = 130 ; $ n = sizeof ( $ arr ) ; if ( search ( $ arr , $ n , $ x ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find max ( X , Y ) \/ min ( X , Y ) after P turns","code":"< ? php function findValue ( $ X , $ Y , $ P ) { if ( $ P % 2 == 0 ) return ( int ) ( max ( $ X , $ Y ) \/ min ( $ X , $ Y ) ) ; else return ( int ) ( max ( 2 * $ X , $ Y ) \/ min ( 2 * $ X , $ Y ) ) ; }"}
{"text":"1 st test case","code":"$ X = 1 ; $ Y = 2 ; $ P = 1 ; echo findValue ( $ X , $ Y , $ P ) , \" STRNEWLINE \" ;"}
{"text":"2 nd test case","code":"$ X = 3 ; $ Y = 7 ; $ P = 2 ; echo findValue ( $ X , $ Y , $ P ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate sum between two indices in array","code":"< ? php function sum ( $ arr , $ from , $ to ) { $ total = 0 ; for ( $ i = $ from ; $ i <= $ to ; $ i ++ ) $ total += $ arr [ $ i ] ; return $ total ; }"}
{"text":"bottom up tabular dp","code":"function findMax ( $ arr , $ n , $ k ) {"}
{"text":"initialize table","code":"$ dp [ $ k + 1 ] [ $ n + 1 ] = array ( 0 ) ;"}
{"text":"base cases k = 1","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ dp [ 1 ] [ $ i ] = sum ( $ arr , 0 , $ i - 1 ) ;"}
{"text":"n = 1","code":"for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) $ dp [ $ i ] [ 1 ] = $ arr [ 0 ] ;"}
{"text":"2 to k partitions","code":"for ( $ i = 2 ; $ i <= $ k ; $ i ++ ) {"}
{"text":"track minimum","code":"$ best = PHP_INT_MAX ;"}
{"text":"i - 1 th separator before position arr [ p = 1. . j ]","code":"for ( $ p = 1 ; $ p <= $ j ; $ p ++ ) $ best = min ( $ best , max ( $ dp [ $ i - 1 ] [ $ p ] , sum ( $ arr , $ p , $ j - 1 ) ) ) ; $ dp [ $ i ] [ $ j ] = $ best ; } }"}
{"text":"required","code":"return $ dp [ $ k ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 20 , 60 , 50 , 30 , 40 ) ;"}
{"text":"Calculate size of array .","code":"$ n = sizeof ( $ arr ) ; $ k = 3 ; echo findMax ( $ arr , $ n , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function return count of cross line in an array","code":"< ? php function countCrossLine ( $ arr , $ n ) { $ count_crossline = 0 ; $ i ; $ key ; $ j ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ key = $ arr [ $ i ] ; $ j = $ i - 1 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position","code":"while ( $ j >= 0 and $ arr [ $ j ] > $ key ) { $ arr [ $ j + 1 ] = $ arr [ $ j ] ; $ j = $ j - 1 ;"}
{"text":"increment cross line by one","code":"$ count_crossline ++ ; } $ arr [ $ j + 1 ] = $ key ; } return $ count_crossline ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 3 , 1 , 2 ) ; $ n = count ( $ arr ) ; echo countCrossLine ( $ arr , $ n ) ; ? >"}
{"text":"function to return maximum element using recursion","code":"< ? php function findMaxRec ( $ A , $ n ) {"}
{"text":"if n = 0 means whole array has been traversed","code":"if ( $ n == 1 ) return $ A [ 0 ] ; return max ( $ A [ $ n - 1 ] , findMaxRec ( $ A , $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 4 , 45 , 6 , -50 , 10 , 2 ) ; $ n = sizeof ( $ A ) ;"}
{"text":"Function calling","code":"echo findMaxRec ( $ A , $ n ) ; ? >"}
{"text":"Function to Calculate Absolute Value","code":"< ? php function mod ( $ x ) { if ( $ x >= 0 ) return $ x ; return - $ x ; }"}
{"text":"Function to Calculate the Minimum value of M","code":"function findSquare ( $ n ) { $ points = array ( array ( 1 , 2 ) , array ( -3 , 4 ) , array ( 1 , 78 ) , array ( -3 , -7 ) ) ; $ a [ $ n ] = array ( ) ;"}
{"text":"To store the minimum M for each point in array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x ; $ y ; $ x = $ points [ $ i ] [ 0 ] ; $ y = $ points [ $ i ] [ 1 ] ; $ a [ $ i ] = max ( mod ( $ x ) , mod ( $ y ) ) ; }"}
{"text":"Sort the array","code":"sort ( $ a ) ;"}
{"text":"Index at which atleast required point are inside square of length 2 * M","code":"$ index = floor ( $ n \/ 2 ) - 1 ; echo \" Minimum \u2581 M \u2581 required \u2581 is : \u2581 \" , $ a [ $ index ] , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ N = 4 ; findSquare ( $ N ) ; ? >"}
{"text":"function to prin the odd and even indexed digits","code":"< ? php function odd_even ( $ n ) {"}
{"text":"lists to store the odd and even positioned digits","code":"$ odd_indexes = array ( ) ; $ even_indexes = array ( ) ;"}
{"text":"traverse through all the indexes in the integer","code":"for ( $ i = 0 ; $ i < sizeof ( $ n ) ; $ i ++ ) {"}
{"text":"if the digit is in odd_index position append it to odd_position list","code":"if ( $ i % 2 == 0 ) array_push ( $ odd_indexes , $ n [ $ i ] ) ;"}
{"text":"else append it to the even_position list","code":"else array_push ( $ even_indexes , $ n [ $ i ] ) ; }"}
{"text":"print the elements in the list in sorted order","code":"sort ( $ odd_indexes ) ; for ( $ i = 0 ; $ i < sizeof ( $ odd_indexes ) ; $ i ++ ) echo $ odd_indexes [ $ i ] , \" \u2581 \" ; sort ( $ even_indexes ) ; for ( $ i = 0 ; $ i < sizeof ( $ even_indexes ) ; $ i ++ ) echo $ even_indexes [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = array ( 3 , 2 , 7 , 6 , 8 ) ; odd_even ( $ n ) ; ? >"}
{"text":"Function to return the minimum increase in side lengths of the triangle","code":"< ? php function minimumIncrease ( $ a , $ b , $ c ) {"}
{"text":"push the three sides to a array","code":"$ arr = array ( $ a , $ b , $ c ) ;"}
{"text":"sort the array","code":"sort ( $ arr ) ;"}
{"text":"check if sum is greater than third side","code":"if ( $ arr [ 0 ] + $ arr [ 1 ] >= $ arr [ 2 ] ) return 0 ; else return $ arr [ 2 ] - ( $ arr [ 0 ] + $ arr [ 1 ] ) ; }"}
{"text":"Driver Code","code":"$ a = 3 ; $ b = 5 ; $ c = 10 ; echo minimumIncrease ( $ a , $ b , $ c ) ; ? >"}
{"text":"function to find min sum after operation","code":"< ? php function absSumDidd ( $ a , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ a ) ;"}
{"text":"Pick middle value","code":"$ midValue = $ a [ ( $ n \/ 2 ) ] ;"}
{"text":"Sum of absolute differences .","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + abs ( $ a [ $ i ] - $ midValue ) ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 11 , 14 , 10 , 17 , 15 ) ; $ n = count ( $ arr ) ; echo absSumDidd ( $ arr , $ n ) ; ? >"}
{"text":"PHP implementation to count subsequences in first $which are anagrams of the second string","code":"< ? php $ SIZE = 26 ;"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"function binomialCoeff ( $ n , $ k ) { $ res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( $ k > $ n - $ k ) $ k = $ n - $ k ;"}
{"text":"Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- -- * 1 ]","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) { $ res *= ( $ n - $ i ) ; $ res \/= ( $ i + 1 ) ; } return $ res ; }"}
{"text":"function to count subsequences in first string which are anagrams of the second string","code":"function countSubsequences ( $ str1 , $ str2 ) { global $ SIZE ;"}
{"text":"hash tables to store frequencies of each character","code":"$ freq1 = array ( ) ; $ freq2 = array ( ) ; for ( $ i = 0 ; $ i < $ SIZE ; $ i ++ ) { $ freq1 [ $ i ] = 0 ; $ freq2 [ $ i ] = 0 ; } $ n1 = strlen ( $ str1 ) ; $ n2 = strlen ( $ str2 ) ;"}
{"text":"store frequency of each character of ' str1'","code":"for ( $ i = 0 ; $ i < $ n1 ; $ i ++ ) $ freq1 [ ord ( $ str1 [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"store frequency of each character of ' str2'","code":"for ( $ i = 0 ; $ i < $ n2 ; $ i ++ ) $ freq2 [ ord ( $ str2 [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"to store the total count of subsequences","code":"$ count = 1 ; for ( $ i = 0 ; $ i < $ SIZE ; $ i ++ )"}
{"text":"if character ( i + ' a ' ) exists in ' str2'","code":"if ( $ freq2 [ $ i ] != 0 ) {"}
{"text":"if this character ' s \u2581 frequency \u2581 \u2581 in \u2581 ' str2 ' \u2581 in \u2581 less \u2581 than \u2581 or \u2581 \u2581 equal \u2581 to \u2581 its \u2581 frequency \u2581 in \u2581 \u2581 ' str1 ' \u2581 then \u2581 accumulate \u2581 its \u2581 \u2581 contribution \u2581 to \u2581 the \u2581 count \u2581 \u2581 of \u2581 subsequences . \u2581 If \u2581 its \u2581 \u2581 frequency \u2581 in \u2581 ' str1 ' \u2581 is \u2581 ' n ' \u2581 \u2581 and \u2581 in \u2581 ' str2 ' \u2581 is \u2581 ' r ', then  its contribution will be nCr,  where C is the binomial  coefficient.","code":"if ( $ freq2 [ $ i ] <= $ freq1 [ $ i ] ) $ count = $ count * binomialCoeff ( $ freq1 [ $ i ] , $ freq2 [ $ i ] ) ;"}
{"text":"else return 0 as there could be no subsequence which is an anagram of ' str2'","code":"else return 0 ; }"}
{"text":"required count of subsequences","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ str1 = \" abacd \" ; $ str2 = \" abc \" ; echo ( \" Count \u2581 = \u2581 \" . countSubsequences ( $ str1 , $ str2 ) ) ; ? >"}
{"text":"Function to find number of occurrences of a subsequence of length three in a string","code":"< ? php function findOccurrences ( $ str , $ substr ) {"}
{"text":"variable to store no of occurrences","code":"$ counter = 0 ;"}
{"text":"loop to find first character","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] == $ substr [ 0 ] ) {"}
{"text":"loop to find 2 nd character","code":"for ( $ j = $ i + 1 ; $ j < strlen ( $ str ) ; $ j ++ ) { if ( $ str [ $ j ] == $ substr [ 1 ] ) {"}
{"text":"loop to find 3 rd character","code":"for ( $ k = $ j + 1 ; $ k < strlen ( $ str ) ; $ k ++ ) {"}
{"text":"increment count if subsequence is found","code":"if ( $ str [ $ k ] == $ substr [ 2 ] ) $ counter ++ ; } } } } } return $ counter ; }"}
{"text":"Driver Code","code":"$ str = \" GFGFGYSYIOIWIN \" ; $ substr = \" GFG \" ; echo findOccurrences ( $ str , $ substr ) ; ? >"}
{"text":"Function to find number of occurrences of a subsequence of length three in a string","code":"< ? php function findOccurrences ( $ str , $ substr ) {"}
{"text":"calculate length of string","code":"$ n = strlen ( $ str ) ;"}
{"text":"auxiliary array to store occurrences of first character","code":"$ preLeft = array ( 0 ) ;"}
{"text":"auxiliary array to store occurrences of third character","code":"$ preRight = array ( 0 ) ; if ( $ str [ 0 ] == $ substr [ 0 ] ) $ preLeft [ 0 ] ++ ;"}
{"text":"calculate occurrences of first character upto ith index from left","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ str [ $ i ] == $ substr [ 0 ] ) $ preLeft [ $ i ] = $ preLeft [ $ i - 1 ] + 1 ; else $ preLeft [ $ i ] = $ preLeft [ $ i - 1 ] ; } if ( $ str [ $ n - 1 ] == $ substr [ 2 ] ) $ preRight [ $ n - 1 ] ++ ;"}
{"text":"calculate occurrences of third character upto ith index from right","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { if ( $ str [ $ i ] == $ substr [ 2 ] ) $ preRight [ $ i ] = ( $ preRight [ $ i + 1 ] + 1 ) ; else $ preRight [ $ i ] = $ preRight [ $ i + 1 ] ; }"}
{"text":"variable to store total number of occurrences","code":"$ counter = 0 ;"}
{"text":"loop to find the occurrences of middle element","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"if middle character of subsequence is found in the string","code":"if ( $ str [ $ i ] == $ str [ 1 ] ) {"}
{"text":"multiply the total occurrences of first character before middle character with the total occurrences of third character after middle character","code":"$ total = $ preLeft [ $ i - 1 ] * $ preRight [ $ i + 1 ] ; $ counter += $ total ; } } return $ counter ; }"}
{"text":"Driver Code","code":"$ str = \" GFGFGYSYIOIWIN \" ; $ substr = \" GFG \" ; echo findOccurrences ( $ str , $ substr ) ; ? >"}
{"text":"function to find Lexicographically smallest string with hamming distance k","code":"< ? php function findString ( $ str , $ n , $ k ) {"}
{"text":"If k is 0 , output input string","code":"if ( $ k == 0 ) { echo $ str . \" STRNEWLINE \" ; return ; }"}
{"text":"Copying input string into output string","code":"$ str2 = $ str ; $ p = 0 ;"}
{"text":"Traverse all the character of the string","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current character is not ' a '","code":"if ( $ str2 [ $ i ] != ' a ' ) {"}
{"text":"copy character ' a ' to output string","code":"$ str2 [ $ i ] = ' a ' ; $ p ++ ;"}
{"text":"str2 [ i ] = ' a ' ;","code":"p ++ ;"}
{"text":"If hamming distance became k , break ;","code":"if ( $ p == $ k ) break ; } }"}
{"text":"If k is less than p","code":"if ( $ p < $ k ) {"}
{"text":"Traversing string in reverse order","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) if ( $ str [ $ i ] == ' a ' ) { $ str2 [ $ i ] = ' b ' ; $ p ++ ; if ( $ p == $ k ) break ; } } echo $ str2 . \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ str = \" pqrs \" ; $ n = strlen ( $ str ) ; $ k = 2 ; findString ( $ str , $ n , $ k ) ; ? >"}
{"text":"Function to print all subsequences","code":"< ? php function printSubsequences ( $ str ) { $ n = strlen ( $ str ) ; $ opsize = pow ( 2 , $ n - 1 ) ; for ( $ counter = 0 ; $ counter < $ opsize ; $ counter ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { echo $ str [ $ j ] ; if ( $ counter & ( 1 << $ j ) ) echo \" \u2581 \" ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ str = \" ABC \" ; printSubsequences ( $ str ) ; ? >"}
{"text":"Function for counting deletions","code":"< ? php function countDeletions ( $ str ) { $ ans = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) - 1 ; $ i ++ )"}
{"text":"If two consecutive characters are the same , delete one of them .","code":"if ( $ str [ $ i ] == $ str [ $ i + 1 ] ) $ ans ++ ; return $ ans ; }"}
{"text":"Driver Code","code":"$ str = \" AAABBB \" ;"}
{"text":"Function call to print answer","code":"echo countDeletions ( $ str ) ; ? >"}
{"text":"Function to find nth even length Palindrome","code":"< ? php function evenlength ( $ n ) {"}
{"text":"string r to store resultant palindrome . Initialize same as s","code":"$ res = $ n ;"}
{"text":"In this loop string r stores reverse of string s after the string s in consecutive manner .","code":"for ( $ j = strlen ( $ n ) - 1 ; $ j >= 0 ; -- $ j ) $ res = $ res . $ n [ $ j ] ; return $ res ; }"}
{"text":"Driver code","code":"$ n = \"10\" ;"}
{"text":"Function call","code":"echo evenlength ( $ n ) ; ? >"}
{"text":"PHP program to illustrate string with unique characters using brute force technique","code":"< ? php function uniqueCharacters ( $ str ) {"}
{"text":"If at any time we encounter 2 same characters , return false","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < strlen ( $ str ) ; $ j ++ ) { if ( $ str [ $ i ] == $ str [ $ j ] ) { return false ; } } }"}
{"text":"If no duplicate characters encountered , return true","code":"return true ; }"}
{"text":"Driver Code","code":"$ str = \" GeeksforGeeks \" ; if ( uniqueCharacters ( $ str ) ) { echo \" The \u2581 String \u2581 \" , $ str , \" \u2581 has \u2581 all \u2581 unique \u2581 characters STRNEWLINE \" ; } else { echo \" The \u2581 String \u2581 \" , $ str , \" \u2581 has \u2581 duplicate \u2581 characters STRNEWLINE \" ; } ? >"}
{"text":"Method to find an equal index","code":"< ? php function findIndex ( $ str ) { $ len = strlen ( $ str ) ; $ open = array ( 0 , $ len + 1 , NULL ) ; $ close = array ( 0 , $ len + 1 , NULL ) ; $ index = -1 ; $ open [ 0 ] = 0 ; $ close [ $ len ] = 0 ; if ( $ str [ 0 ] == ' ( ' ) $ open [ 1 ] = 1 ; if ( $ str [ $ len - 1 ] == ' ) ' ) $ close [ $ len - 1 ] = 1 ;"}
{"text":"Store the number of opening brackets at each index","code":"for ( $ i = 1 ; $ i < $ len ; $ i ++ ) { if ( $ str [ $ i ] == ' ( ' ) $ open [ $ i + 1 ] = $ open [ $ i ] + 1 ; else $ open [ $ i + 1 ] = $ open [ $ i ] ; }"}
{"text":"Store the number of closing brackets at each index","code":"for ( $ i = $ len - 2 ; $ i >= 0 ; $ i -- ) { if ( $ str [ $ i ] == ' ) ' ) $ close [ $ i ] = $ close [ $ i + 1 ] + 1 ; else $ close [ $ i ] = $ close [ $ i + 1 ] ; }"}
{"text":"check if there is no opening or closing brackets","code":"if ( $ open [ $ len ] == 0 ) return $ len ; if ( $ close [ 0 ] == 0 ) return 0 ;"}
{"text":"check if there is any index at which both brackets are equal","code":"for ( $ i = 0 ; $ i <= $ len ; $ i ++ ) if ( $ open [ $ i ] == $ close [ $ i ] ) $ index = $ i ; return $ index ; }"}
{"text":"Driver Code","code":"$ str = \" ( ( ) ) ) ( ( ) ( ) ( ) ) ) ) \" ; echo ( findIndex ( $ str ) ) ; ? >"}
{"text":"Function to convert decimal to binary upto k - precision after decimal point","code":"< ? php function decimalToBinary ( $ num , $ k_prec ) { $ binary = \" \" ;"}
{"text":"Fetch the integral part of decimal number","code":"$ Integral = ( int ) ( $ num ) ;"}
{"text":"Fetch the fractional part decimal number","code":"$ fractional = $ num - $ Integral ;"}
{"text":"Conversion of integral part to binary equivalent","code":"while ( $ Integral ) { $ rem = $ Integral % 2 ;"}
{"text":"Append 0 in binary","code":"$ binary . = chr ( $ rem + 48 ) ; $ Integral = ( int ) ( $ Integral \/ 2 ) ; }"}
{"text":"Reverse string to get original binary equivalent","code":"$ binary = strrev ( $ binary ) ;"}
{"text":"Append point before conversion of fractional part","code":"$ binary . = ' . ' ;"}
{"text":"Conversion of fractional part to binary equivalent","code":"while ( $ k_prec -- ) {"}
{"text":"Find next bit in fraction","code":"$ fractional *= 2 ; $ fract_bit = ( int ) $ fractional ; if ( $ fract_bit == 1 ) { $ fractional -= $ fract_bit ; $ binary . = chr ( 1 + 48 ) ; } else $ binary . = chr ( 0 + 48 ) ; } return $ binary ; }"}
{"text":"Driver code","code":"$ n = 4.47 ; $ k = 3 ; echo decimalToBinary ( $ n , $ k ) . \" STRNEWLINE \" ; $ n = 6.986 ; $ k = 5 ; echo decimalToBinary ( $ n , $ k ) ; ? >"}
{"text":"Returns true if str1 is smaller than str2 , else false .","code":"< ? php function isSmaller ( $ str1 , $ str2 ) {"}
{"text":"Calculate lengths of both string","code":"$ n1 = strlen ( $ str1 ) ; $ n2 = strlen ( $ str2 ) ; if ( $ n1 < $ n2 ) return true ; if ( $ n2 < $ n1 ) return false ; for ( $ i = 0 ; $ i < $ n1 ; $ i ++ ) { if ( $ str1 [ $ i ] < $ str2 [ $ i ] ) return true ; else if ( $ str1 [ $ i ] > $ str2 [ $ i ] ) return false ; } return false ; }"}
{"text":"Function for finding difference of larger numbers","code":"function findDiff ( $ str1 , $ str2 ) {"}
{"text":"Before proceeding further , make sure str1 is not smaller","code":"if ( isSmaller ( $ str1 , $ str2 ) ) { $ t = $ str1 ; $ str1 = $ str2 ; $ str2 = $ t ; }"}
{"text":"Take an empty string for storing result","code":"$ str = \" \" ;"}
{"text":"Calculate lengths of both string","code":"$ n1 = strlen ( $ str1 ) ; $ n2 = strlen ( $ str2 ) ; $ diff = $ n1 - $ n2 ;"}
{"text":"Initially take carry zero","code":"$ carry = 0 ;"}
{"text":"Traverse from end of both strings","code":"for ( $ i = $ n2 - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Do school mathematics , compute difference of current digits and carry","code":"$ sub = ( ( ord ( $ str1 [ $ i + $ diff ] ) - ord ( '0' ) ) - ( ord ( $ str2 [ $ i ] ) - ord ( '0' ) ) - $ carry ) ; if ( $ sub < 0 ) { $ sub = $ sub + 10 ; $ carry = 1 ; } else $ carry = 0 ; $ str . = chr ( $ sub + ord ( \"0\" ) ) ; }"}
{"text":"subtract remaining digits of str1 [ ]","code":"for ( $ i = $ n1 - $ n2 - 1 ; $ i >= 0 ; $ i -- ) { if ( $ str1 [ $ i ] == '0' && $ carry > 0 ) { $ str . = \"9\" ; continue ; } $ sub = ( ord ( $ str1 [ $ i ] ) - ord ( '0' ) - $ carry ) ;"}
{"text":"if ( $i > 0 $sub > 0 ) remove preceding 0 's","code":"$ str . = chr ( $ sub + ord ( \"0\" ) ) ; $ carry = 0 ; }"}
{"text":"reverse resultant string","code":"return strrev ( $ str ) ; }"}
{"text":"Driver code","code":"$ str1 = \"88\" ; $ str2 = \"1079\" ;"}
{"text":"Function call","code":"print ( findDiff ( $ str1 , $ str2 ) ) ; ? >"}
{"text":"Optimized PHP program to check if two strings are k anagram or not .","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"Function to check if str1 and str2 are k - anagram or not","code":"function areKAnagrams ( $ str1 , $ str2 , $ k ) { global $ MAX_CHAR ;"}
{"text":"If both strings are not of equal length then return false","code":"$ n = strlen ( $ str1 ) ; if ( strlen ( $ str2 ) != $ n ) return false ; $ hash_str1 = array ( 0 ) ;"}
{"text":"Store the occurrence of all characters in a hash_array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ hash_str1 [ $ str1 [ $ i ] - ' a ' ] ++ ;"}
{"text":"Store the occurrence of all characters in a hash_array","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ hash_str1 [ $ str2 [ $ i ] - ' a ' ] > 0 ) $ hash_str1 [ $ str2 [ $ i ] - ' a ' ] -- ; else $ count ++ ; if ( $ count > $ k ) return false ; }"}
{"text":"Return true if count is less than or equal to k","code":"return true ; }"}
{"text":"Driver code","code":"$ str1 = \" fodr \" ; $ str2 = \" gork \" ; $ k = 2 ; if ( areKAnagrams ( $ str1 , $ str2 , $ k ) == true ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Method to get dth digit of number N","code":"< ? php function getDigit ( $ N , $ d ) { $ string = strval ( $ N ) ; return $ string [ $ d - 1 ] ; }"}
{"text":"Method to return Nth character in concatenated decimal string","code":"function getNthChar ( $ N ) {"}
{"text":"sum will store character escaped till now","code":"$ sum = 0 ; $ nine = 9 ;"}
{"text":"dist will store numbers escaped till now","code":"$ dist = 0 ;"}
{"text":"loop for number lengths","code":"for ( $ len = 1 ; $ len < $ N ; $ len ++ ) {"}
{"text":"nine * len will be incremented characters and nine will be incremented numbers","code":"$ sum += $ nine * $ len ; $ dist += $ nine ; if ( $ sum >= $ N ) {"}
{"text":"restore variables to previous correct state","code":"$ sum -= $ nine * $ len ; $ dist -= $ nine ; $ N -= $ sum ; break ; } $ nine *= 10 ; }"}
{"text":"get distance from last one digit less maximum number","code":"$ diff = ( $ N \/ $ len ) + 1 ;"}
{"text":"d will store dth digit of current number","code":"$ d = $ N % $ len ; if ( $ d == 0 ) $ d = $ len ;"}
{"text":"method will return dth numbered digit of ( dist + diff ) number","code":"return getDigit ( $ dist + $ diff , $ d ) ; }"}
{"text":"Driver code","code":"$ N = 251 ; echo getNthChar ( $ N ) ; ? >"}
{"text":"Function to count the number of characters at same position as in English alphabets","code":"< ? php function findCount ( $ str ) { $ result = 0 ;"}
{"text":"Traverse the input string","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) {"}
{"text":"Check that index of characters of string is same as of English alphabets by using ASCII values and the fact that all lower case alphabetic characters come together in same order in ASCII table . And same is true for upper case .","code":"if ( ( $ i == ord ( $ str [ $ i ] ) - ord ( ' a ' ) ) or ( $ i == ord ( $ str [ $ i ] ) - ord ( ' A ' ) ) ) $ result += 1 ; } return $ result ; }"}
{"text":"Driver Code","code":"$ str = \" AbgdeF \" ; print ( findCount ( $ str ) ) ? >"}
{"text":"Recursive function to generate all binary strings formed by replacing each wildcard character by 0 or 1","code":"< ? php function print1 ( $ str , $ index ) { if ( $ index == strlen ( $ str ) ) { echo $ str . \" STRNEWLINE \" ; return ; } if ( $ str [ $ index ] == ' ? ' ) {"}
{"text":"replace ' ? ' by '0' and recurse","code":"$ str [ $ index ] = '0' ; print1 ( $ str , $ index + 1 ) ;"}
{"text":"replace ' ? ' by '1' and recurse","code":"$ str [ $ index ] = '1' ; print1 ( $ str , $ index + 1 ) ;"}
{"text":"No need to backtrack as string is passed by value to the function","code":"} else print1 ( $ str , $ index + 1 ) ; }"}
{"text":"Driver code","code":"$ str = \"1 ? ? 0?101\" ; print1 ( $ str , 0 ) ; ? >"}
{"text":"Simple function to count occurrences of digit d in x","code":"< ? php function countOccurrences ( $ x , $ d ) {"}
{"text":"Initialize count of digit d","code":"$ count = 0 ; while ( $ x ) {"}
{"text":"Increment count if current digit is same as d","code":"if ( $ x % 10 == $ d ) $ count ++ ; $ x = ( int ) ( $ x \/ 10 ) ; } return $ count ; }"}
{"text":"Returns the max occurring digit in x","code":"function maxOccurring ( $ x ) {"}
{"text":"Handle negative number","code":"if ( $ x < 0 ) $ x = - $ x ;"}
{"text":"Traverse through all digits","code":"for ( $ d = 0 ; $ d <= 9 ; $ d ++ ) {"}
{"text":"Count occurrences of current digit","code":"$ count = countOccurrences ( $ x , $ d ) ;"}
{"text":"Update max_count and result if needed","code":"if ( $ count >= $ max_count ) { $ max_count = $ count ; $ result = $ d ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ x = 1223355 ; echo \" Max \u2581 occurring \u2581 digit \u2581 is \u2581 \" . maxOccurring ( $ x ) ; ? >"}
{"text":"A simple PHP program to find max subarray XOR","code":"< ? php function maxSubarrayXOR ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ ans = PHP_INT_MIN ;"}
{"text":"Pick starting points of subarrays","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"to store xor of current subarray","code":"$ curr_xor = 0 ;"}
{"text":"Pick ending points of subarrays starting with i","code":"for ( $ j = $ i ; $ j < $ n ; $ j ++ ) { $ curr_xor = $ curr_xor ^ $ arr [ $ j ] ; $ ans = max ( $ ans , $ curr_xor ) ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 8 , 1 , 2 , 12 ) ; $ n = count ( $ arr ) ; echo \" Max \u2581 subarray \u2581 XOR \u2581 is \u2581 \" , maxSubarrayXOR ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find first non - repeating character","code":"< ? php $ NO_OF_CHARS = 256 ; $ count = array_fill ( 0 , 200 , 0 ) ;"}
{"text":"calculate count of characters in the passed string","code":"function getCharCountArray ( $ str ) { global $ count ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) $ count [ ord ( $ str [ $ i ] ) ] ++ ; }"}
{"text":"The method returns index of first non - repeating character in a string . If all characters are repeating then returns - 1","code":"function firstNonRepeating ( $ str ) { global $ count ; getCharCountArray ( $ str ) ; $ index = -1 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ count [ ord ( $ str [ $ i ] ) ] == 1 ) { $ index = $ i ; break ; } } return $ index ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ index = firstNonRepeating ( $ str ) ; if ( $ index == -1 ) echo \" Either \u2581 all \u2581 characters \u2581 are \" . \" \u2581 repeating \u2581 or \u2581 string \u2581 is \u2581 empty \" ; else echo \" First \u2581 non - repeating \u2581 \" . \" character \u2581 is \u2581 \" . $ str [ $ index ] ; ? >"}
{"text":"Function to print n equal parts of str","code":"< ? php function divideString ( $ str , $ n ) { $ str_size = strlen ( $ str ) ; $ i ; $ part_size ;"}
{"text":"Check if string can be divided in n equal parts","code":"if ( $ str_size % $ n != 0 ) { echo \" Invalid \u2581 Input : \u2581 String \u2581 size \" ; echo \" \u2581 is \u2581 not \u2581 divisible \u2581 by \u2581 n \" ; return ; }"}
{"text":"Calculate the size of parts to find the division point","code":"$ part_size = $ str_size \/ $ n ; for ( $ i = 0 ; $ i < $ str_size ; $ i ++ ) { if ( $ i % $ part_size == 0 ) echo \" STRNEWLINE \" ; echo $ str [ $ i ] ; } }"}
{"text":"Driver Code length od string is 28","code":"$ str = \" a _ simple _ divide _ string _ quest \" ;"}
{"text":"Print 4 equal parts of the string","code":"divideString ( $ str , 4 ) ; ? >"}
{"text":"PHP program to find n - th term of a recursive function using matrix exponentiation .","code":"< ? php $ MOD = 1000000009 ; function power ( $ n ) { global $ MOD ; if ( $ n <= 1 ) return 1 ;"}
{"text":"This power function returns first row of { Transformation Matrix } ^ n - 1 * Initial Vector","code":"$ n -- ;"}
{"text":"This is an identity matrix .","code":"$ res = array ( array ( 1 , 0 ) , array ( 0 , 1 ) ) ;"}
{"text":"this is Transformation matrix .","code":"$ tMat = array ( array ( 2 , 3 ) , array ( 1 , 0 ) ) ;"}
{"text":"Matrix exponentiation to calculate power of { tMat } ^ n - 1 store res in \" res \" matrix .","code":"while ( $ n ) { if ( $ n & 1 ) { $ tmp = array_fill ( 0 , 2 , array_fill ( 0 , 2 , 0 ) ) ; $ tmp [ 0 ] [ 0 ] = ( $ res [ 0 ] [ 0 ] * $ tMat [ 0 ] [ 0 ] + $ res [ 0 ] [ 1 ] * $ tMat [ 1 ] [ 0 ] ) % $ MOD ; $ tmp [ 0 ] [ 1 ] = ( $ res [ 0 ] [ 0 ] * $ tMat [ 0 ] [ 1 ] + $ res [ 0 ] [ 1 ] * $ tMat [ 1 ] [ 1 ] ) % $ MOD ; $ tmp [ 1 ] [ 0 ] = ( $ res [ 1 ] [ 0 ] * $ tMat [ 0 ] [ 0 ] + $ res [ 1 ] [ 1 ] * $ tMat [ 1 ] [ 0 ] ) % $ MOD ; $ tmp [ 1 ] [ 1 ] = ( $ res [ 1 ] [ 0 ] * $ tMat [ 0 ] [ 1 ] + $ res [ 1 ] [ 1 ] * $ tMat [ 1 ] [ 1 ] ) % $ MOD ; $ res [ 0 ] [ 0 ] = $ tmp [ 0 ] [ 0 ] ; $ res [ 0 ] [ 1 ] = $ tmp [ 0 ] [ 1 ] ; $ res [ 1 ] [ 0 ] = $ tmp [ 1 ] [ 0 ] ; $ res [ 1 ] [ 1 ] = $ tmp [ 1 ] [ 1 ] ; } $ n = ( int ) ( $ n \/ 2 ) ; $ tmp = array_fill ( 0 , 2 , array_fill ( 0 , 2 , 0 ) ) ; $ tmp [ 0 ] [ 0 ] = ( $ tMat [ 0 ] [ 0 ] * $ tMat [ 0 ] [ 0 ] + $ tMat [ 0 ] [ 1 ] * $ tMat [ 1 ] [ 0 ] ) % $ MOD ; $ tmp [ 0 ] [ 1 ] = ( $ tMat [ 0 ] [ 0 ] * $ tMat [ 0 ] [ 1 ] + $ tMat [ 0 ] [ 1 ] * $ tMat [ 1 ] [ 1 ] ) % $ MOD ; $ tmp [ 1 ] [ 0 ] = ( $ tMat [ 1 ] [ 0 ] * $ tMat [ 0 ] [ 0 ] + $ tMat [ 1 ] [ 1 ] * $ tMat [ 1 ] [ 0 ] ) % $ MOD ; $ tmp [ 1 ] [ 1 ] = ( $ tMat [ 1 ] [ 0 ] * $ tMat [ 0 ] [ 1 ] + $ tMat [ 1 ] [ 1 ] * $ tMat [ 1 ] [ 1 ] ) % $ MOD ; $ tMat [ 0 ] [ 0 ] = $ tmp [ 0 ] [ 0 ] ; $ tMat [ 0 ] [ 1 ] = $ tmp [ 0 ] [ 1 ] ; $ tMat [ 1 ] [ 0 ] = $ tmp [ 1 ] [ 0 ] ; $ tMat [ 1 ] [ 1 ] = $ tmp [ 1 ] [ 1 ] ; }"}
{"text":"res store { Transformation matrix } ^ n - 1 hence will be first row of res * Initial Vector .","code":"return ( $ res [ 0 ] [ 0 ] * 1 + $ res [ 0 ] [ 1 ] * 1 ) % $ MOD ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo power ( $ n ) ; ? >"}
{"text":"Returns true if it is possible to arrange k elements of arr [ 0. . n - 1 ] with minimum distance given as mid .","code":"< ? php function isFeasible ( $ mid , $ arr , $ n , $ k ) {"}
{"text":"Place first element at arr [ 0 ] position","code":"$ pos = $ arr [ 0 ] ;"}
{"text":"Initialize count of elements placed .","code":"$ elements = 1 ;"}
{"text":"Try placing k elements with minimum distance mid .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] - $ pos >= $ mid ) {"}
{"text":"Place next element if its distance from the previously placed element is greater than current mid","code":"$ pos = $ arr [ $ i ] ; $ elements ++ ;"}
{"text":"Return if all elements are placed successfully","code":"if ( $ elements == $ k ) return true ; } } return 0 ; }"}
{"text":"Returns largest minimum distance for k elements in arr [ 0. . n - 1 ] . If elements can 't be placed, returns -1.","code":"function largestMinDist ( $ arr , $ n , $ k ) {"}
{"text":"Sort the positions","code":"sort ( $ arr ) ;"}
{"text":"Initialize result .","code":"$ res = -1 ;"}
{"text":"Consider the maximum possible distance","code":"$ left = 1 ; $ right = $ arr [ $ n - 1 ] ;"}
{"text":"Do binary search for largest minimum distance","code":"while ( $ left < $ right ) { $ mid = ( $ left + $ right ) \/ 2 ;"}
{"text":"If it is possible to place k elements with minimum distance mid , search for higher distance .","code":"if ( isFeasible ( $ mid , $ arr , $ n , $ k ) ) {"}
{"text":"Change value of variable max to mid iff all elements can be successfully placed","code":"$ res = max ( $ res , $ mid ) ; $ left = $ mid + 1 ; }"}
{"text":"If not possible to place k elements , search for lower distance","code":"else $ right = $ mid ; } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 8 , 4 , 9 ) ; $ n = sizeof ( $ arr ) ; $ k = 3 ; echo largestMinDist ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Returns floor of square root of x","code":"< ? php function floorSqrt ( $ x ) {"}
{"text":"Base cases","code":"if ( $ x == 0 $ x == 1 ) return $ x ;"}
{"text":"Do Binary Search for floor ( sqrt ( x ) )","code":"$ start = 1 ; $ end = $ x ; $ ans ; while ( $ start <= $ end ) { $ mid = ( $ start + $ end ) \/ 2 ;"}
{"text":"If x is a perfect square","code":"if ( $ mid * $ mid == $ x ) return $ mid ;"}
{"text":"Since we need floor , we update answer when mid * mid is smaller than x , and move closer to sqrt ( x )","code":"if ( $ mid * $ mid < $ x ) { $ start = $ mid + 1 ; $ ans = $ mid ; }"}
{"text":"If mid * mid is greater than x","code":"else $ end = $ mid - 1 ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ x = 11 ; echo floorSqrt ( $ x ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to return the count of rectangles when n is odd","code":"< ? php function countOdd ( $ n ) { $ coun = 0 ; for ( $ i = $ n - 2 ; $ i >= 1 ; $ i -- ) { if ( $ i & 1 ) {"}
{"text":"Calculating number of dots in vertical level","code":"$ m = ( $ n - $ i ) \/ 2 ;"}
{"text":"Calculating number of ways to select two points in the horizontal level i","code":"$ j = ( $ i * ( $ i + 1 ) ) \/ 2 ;"}
{"text":"Multiply both to obtain the number of rectangles formed at that level","code":"$ coun += $ j * $ m ; } else {"}
{"text":"Calculating number of dots in vertical level","code":"$ m = ( ( $ n - 1 ) - $ i ) \/ 2 ;"}
{"text":"Calculating number of ways to select two points in the horizontal level i","code":"$ j = ( $ i * ( $ i + 1 ) ) \/ 2 ;"}
{"text":"Multiply both to obtain the number of rectangles formed at that level","code":"$ coun += $ j * $ m ; } } return $ coun ; }"}
{"text":"Function to return the count of rectangles when n is even","code":"function countEven ( $ n ) { $ coun = 0 ; for ( $ i = $ n - 2 ; $ i >= 1 ; $ i -- ) { if ( $ i & 1 ) { $ m = ( ( $ n - 1 ) - i ) \/ 2 ; $ j = ( $ i * ( $ i + 1 ) ) \/ 2 ; $ coun += $ j * $ m ; } else { $ m = ( $ n - $ i ) \/ 2 ; $ j = ( $ i * ( $ i + 1 ) ) \/ 2 ; $ coun += $ j * $ m ; } } return $ coun ; }"}
{"text":"Driver code","code":"$ n = 5 ;"}
{"text":"If n is odd","code":"if ( $ n & 1 ) echo countOdd ( $ n ) ; else echo countEven ( $ n ) ; ? >"}
{"text":"Function to find the area of the ellipse","code":"< ? php function ellipse ( $ l , $ b ) {"}
{"text":"The sides cannot be negative","code":"if ( $ l < 0 $ b < 0 ) return -1 ;"}
{"text":"Area of the ellipse","code":"$ x = ( 3.14 * $ l * $ b ) \/ 4 ; return $ x ; }"}
{"text":"Driver code","code":"$ l = 5 ; $ b = 3 ; echo ellipse ( $ l , $ b ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to return the required position","code":"< ? php function noOfSquares ( $ x1 , $ y1 , $ x2 , $ y2 ) { $ dx = abs ( $ x2 - $ x1 ) ; $ dy = abs ( $ y2 - $ y1 ) ; $ ans = $ dx + $ dy - gcd ( $ dx , $ dy ) ; echo ( $ ans ) ; }"}
{"text":"Driver Code","code":"$ x1 = 1 ; $ y1 = 1 ; $ x2 = 4 ; $ y2 = 3 ; noOfSquares ( $ x1 , $ y1 , $ x2 , $ y2 ) ; ? >"}
{"text":"Function to return the value of nCk","code":"< ? php function binomialCoeff ( $ n , $ k ) { $ res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( $ k > $ n - $ k ) $ k = $ n - $ k ;"}
{"text":"Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) { $ res *= ( $ n - $ i ) ; $ res \/= ( $ i + 1 ) ; } return $ res ; }"}
{"text":"Function to return the number of paths","code":"function countPaths ( $ x1 , $ y1 , $ x2 , $ y2 ) {"}
{"text":"Difference between the ' x ' coordinates of the given points","code":"$ m = abs ( $ x1 - $ x2 ) ;"}
{"text":"Difference between the ' y ' coordinates of the given points","code":"$ n = abs ( $ y1 - $ y2 ) ; return ( binomialCoeff ( $ m + $ n , $ n ) ) ; }"}
{"text":"Driver code","code":"{ $ x1 = 2 ; $ y1 = 3 ; $ x2 = 4 ; $ y2 = 5 ; echo ( countPaths ( $ x1 , $ y1 , $ x2 , $ y2 ) ) ; }"}
{"text":"PHP program to find the area of the circle","code":"< ? php $ GLOBALS [ ' pi ' ] = 3.1415926 ;"}
{"text":"Area of the Reuleaux triangle","code":"function areaCircle ( $ b ) { $ area = $ GLOBALS [ ' pi ' ] * $ b * $ b ; return $ area ; }"}
{"text":"Driver Code","code":"$ a = 10 ; $ b = 8 ; echo round ( areaCircle ( $ b ) , 3 ) ; ? >"}
{"text":"Function to find the section of the line","code":"< ? php function section ( $ x1 , $ x2 , $ y1 , $ y2 , $ z1 , $ z2 , $ m , $ n ) {"}
{"text":"Applying section formula","code":"$ x = ( ( $ m * $ x2 ) + ( $ n * $ x1 ) ) \/ ( $ m + $ n ) ; $ y = ( ( $ m * $ y2 ) + ( $ n * $ y1 ) ) \/ ( $ m + $ n ) ; $ z = ( ( $ m * $ z2 ) + ( $ n * $ z1 ) ) \/ ( $ m + $ n ) ;"}
{"text":"Printing result","code":"echo \" ( \" . $ x . \" , \u2581 \" ; echo $ y . \" , \u2581 \" ; echo $ z . \" ) \" . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ x1 = 2 ; $ x2 = 4 ; $ y1 = -1 ; $ y2 = 3 ; $ z1 = 4 ; $ z2 = 2 ; $ m = 2 ; $ n = 3 ; section ( $ x1 , $ x2 , $ y1 , $ y2 , $ z1 , $ z2 , $ m , $ n ) ;"}
{"text":"Function to find the radius of the circumcircle","code":"< ? php function findRadiusOfcircumcircle ( $ n , $ a ) {"}
{"text":"these cannot be negative","code":"if ( $ n < 0 $ a < 0 ) return -1 ;"}
{"text":"Radius of the circumcircle","code":"$ radius = $ a \/ sqrt ( 2 - ( 2 * cos ( 360 \/ $ n ) ) ) ;"}
{"text":"Return the radius","code":"return $ radius ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ a = 6 ;"}
{"text":"Find the radius of the circumcircle","code":"echo findRadiusOfcircumcircle ( $ n , $ a ) ; ? >"}
{"text":"Function to find the radius of the incircle","code":"< ? php function findRadiusOfIncircle ( $ a , $ b , $ c ) {"}
{"text":"the sides cannot be negative","code":"if ( $ a < 0 $ b < 0 $ c < 0 ) return -1 ;"}
{"text":"semi - perimeter of the circle","code":"$ p = ( $ a + $ b + $ c ) \/ 2 ;"}
{"text":"area of the triangle","code":"$ area = sqrt ( $ p * ( $ p - $ a ) * ( $ p - $ b ) * ( $ p - $ c ) ) ;"}
{"text":"Radius of the incircle","code":"$ radius = $ area \/ $ p ;"}
{"text":"Return the radius","code":"return $ radius ; }"}
{"text":"Get the sides of the triangle","code":"$ a = 2 ; $ b = 2 ; $ c = 3 ;"}
{"text":"Find the radius of the incircle","code":"echo findRadiusOfIncircle ( $ a , $ b , $ c ) . \" \" ;"}
{"text":"function to calculate area of triangle","code":"< ? php function area ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 ) { $ area = sqrt ( pow ( ( $ y1 * $ z2 - $ y2 * $ z1 ) , 2 ) + pow ( ( $ x1 * $ z2 - $ x2 * $ z1 ) , 2 ) + pow ( ( $ x1 * $ y2 - $ x2 * $ y1 ) , 2 ) ) ; $ area = $ area \/ 2 ; return $ area ; }"}
{"text":"Driver Code","code":"$ x1 = -2 ; $ y1 = 0 ; $ z1 = -5 ; $ x2 = 1 ; $ y2 = -2 ; $ z2 = -1 ; $ a = area ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 ) ; echo \" Area = \" . $ a \u2581 . \" \" ? >"}
{"text":"Function to find the area of the biggest trapezoid","code":"< ? php function trapezoidarea ( $ r ) {"}
{"text":"the radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"area of the trapezoid","code":"$ a = ( 3 * sqrt ( 3 ) * pow ( $ r , 2 ) ) \/ 4 ; return $ a ; }"}
{"text":"Driver code","code":"$ r = 5 ; echo trapezoidarea ( $ r ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the area of the biggest rectangle","code":"< ? php function rectanglearea ( $ r ) {"}
{"text":"the radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"area of the rectangle","code":"$ a = $ r * $ r ; return $ a ; }"}
{"text":"Driver code","code":"$ r = 5 ; echo rectanglearea ( $ r ) . \" STRNEWLINE \" ; ? >"}
{"text":"function to find maximum lines which passes through a single point","code":"< ? php function maxLines ( $ n , $ x1 , $ y1 , $ x2 , $ y2 ) { $ s = array ( ) ; $ slope ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ x1 [ $ i ] == $ x2 [ $ i ] ) $ slope = PHP_INT_MAX ; else $ slope = ( $ y2 [ $ i ] - $ y1 [ $ i ] ) * 1.0 \/ ( $ x2 [ $ i ] - $ x1 [ $ i ] ) * 1.0 ; array_push ( $ s , $ slope ) ; } return count ( $ s ) ; }"}
{"text":"Driver Code","code":"$ n = 2 ; $ x1 = array ( 1 , 2 ) ; $ y1 = array ( 1 , 2 ) ; $ x2 = array ( 2 , 4 ) ; $ y2 = array ( 2 , 10 ) ; echo maxLines ( $ n , $ x1 , $ y1 , $ x2 , $ y2 ) ; ? >"}
{"text":"Function to calculate area of parallelogram","code":"< ? php function area ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 ) { $ area = sqrt ( pow ( ( $ y1 * $ z2 - $ y2 * $ z1 ) , 2 ) + pow ( ( $ x1 * $ z2 - $ x2 * $ z1 ) , 2 ) + pow ( ( $ x1 * $ y2 - $ x2 * $ y1 ) , 2 ) ) ; return $ area ; }"}
{"text":"Driver Code","code":"$ x1 = 3 ; $ y1 = 1 ; $ z1 = -2 ; $ x2 = 1 ; $ y2 = -3 ; $ z2 = 4 ; $ a = area ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 ) ; echo ( \" Area \u2581 = \u2581 \" ) ; echo ( $ a ) ; ? >"}
{"text":"Function to print the maximum intersection","code":"< ? php function max_intersection ( $ center , $ length , $ k ) { sort ( $ center ) ;"}
{"text":"Case 1","code":"if ( $ center [ 2 ] - $ center [ 0 ] >= 2 * $ k + $ length ) { return 0 ; }"}
{"text":"Case 2","code":"else if ( $ center [ 2 ] - $ center [ 0 ] >= 2 * $ k ) { return ( 2 * $ k - ( $ center [ 2 ] - $ center [ 0 ] - $ length ) ) ; }"}
{"text":"Case 3","code":"else return $ length ; }"}
{"text":"Driver Code","code":"$ center = array ( 1 , 2 , 3 ) ; $ L = 1 ; $ K = 1 ; echo max_intersection ( $ center , $ L , $ K ) ; ? >"}
{"text":"PHP program for the haversine formula","code":"< ? php function haversine ( $ lat1 , $ lon1 , $ lat2 , $ lon2 ) {"}
{"text":"distance between latitudes and longitudes","code":"$ dLat = ( $ lat2 - $ lat1 ) * M_PI \/ 180.0 ; $ dLon = ( $ lon2 - $ lon1 ) * M_PI \/ 180.0 ;"}
{"text":"convert to radians","code":"$ lat1 = ( $ lat1 ) * M_PI \/ 180.0 ; $ lat2 = ( $ lat2 ) * M_PI \/ 180.0 ;"}
{"text":"apply formulae","code":"$ a = pow ( sin ( $ dLat \/ 2 ) , 2 ) + pow ( sin ( $ dLon \/ 2 ) , 2 ) * cos ( $ lat1 ) * cos ( $ lat2 ) ; $ rad = 6371 ; $ c = 2 * asin ( sqrt ( $ a ) ) ; return $ rad * $ c ; }"}
{"text":"Driver code","code":"$ lat1 = 51.5007 ; $ lon1 = 0.1246 ; $ lat2 = 40.6892 ; $ lon2 = 74.0445 ; echo haversine ( $ lat1 , $ lon1 , $ lat2 , $ lon2 ) . \" \u2581 K . M . \" ; ? >"}
{"text":"Function that returns nth pentatope number","code":"< ? php function pentatopeNum ( $ n ) { return ( $ n * ( $ n + 1 ) * ( $ n + 2 ) * ( $ n + 3 ) ) \/ 24 ; }"}
{"text":"For 5 th PentaTope Number","code":"$ n = 5 ; echo pentatopeNum ( $ n ) , \" STRNEWLINE \" ;"}
{"text":"For 11 th PentaTope Number","code":"$ n = 11 ; echo pentatopeNum ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to return Nth Heptagonal number","code":"< ? php function heptagonalNumber ( $ n ) { return ( ( 5 * $ n * $ n ) - ( 3 * $ n ) ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo heptagonalNumber ( $ n ) , \" STRNEWLINE \" ; $ n = 15 ; echo heptagonalNumber ( $ n ) ; ? >"}
{"text":"Function to calculate Icosidigonal number","code":"< ? php function icosidigonal_num ( $ n ) {"}
{"text":"Formula for finding nth Icosidigonal number","code":"return ( 20 * $ n * $ n - 18 * $ n ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo $ n , \" th \u2581 Icosidigonal \u2581 number \u2581 : \u2581 \" , icosidigonal_num ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 8 ; echo $ n , \" th \u2581 Icosidigonal \u2581 number \u2581 : \u2581 \" , icosidigonal_num ( $ n ) ; ? >"}
{"text":"PHP program to find vertices in a hypercube graph of order n","code":"< ? php {"}
{"text":"Function to find power of 2","code":"function power ( $ n ) { if ( $ n == 1 ) return 2 ; return 2 * power ( $ n - 1 ) ; }"}
{"text":"Driver Code","code":"{ $ n = 4 ; echo ( power ( $ n ) ) ; } } ? >"}
{"text":"PHP Program for find the 180 degree reflection of one point around another point .","code":"< ? php function findPoint ( $ x1 , $ y1 , $ x2 , $ y2 ) { echo \" ( \" , 2 * $ x2 - $ x1 , \" , \u2581 \" , 2 * $ y2 - $ y1 , \" ) \" ; }"}
{"text":"Driver Code","code":"$ x1 = 0 ; $ y1 = 0 ; $ x2 = 1 ; $ y2 = 1 ; findPoint ( $ x1 , $ y1 , $ x2 , $ y2 ) ; ? >"}
{"text":"To check for parallel line","code":"< ? php function parallel ( $ n , $ a ) { $ x = true ; $ y = true ;"}
{"text":"checking for parallel to X and Y axis condition","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ a [ $ i ] [ 0 ] != $ a [ $ i + 1 ] [ 0 ] ) $ x = false ; if ( $ a [ $ i ] [ 1 ] != $ a [ $ i + 1 ] [ 1 ] ) $ y = false ; }"}
{"text":"To display the output","code":"if ( $ x ) echo \" parallel \u2581 to \u2581 Y \u2581 Axis \" ; else if ( y ) echo \" parallel \u2581 to \u2581 X \u2581 Axis \" ; else echo \" Not \u2581 parallel \u2581 to \u2581 X \" , \" \u2581 and \u2581 Y \u2581 Axis \" ; }"}
{"text":"Driver 's Code","code":"$ a = array ( array ( 1 , 2 ) , array ( 1 , 4 ) , array ( 1 , 6 ) , array ( 1 , 0 ) ) ; $ n = count ( $ a ) ; parallel ( $ n , $ a ) ; ? >"}
{"text":"PHP program to find X - th triangular matchstick number","code":"< ? php function numberOfSticks ( $ x ) { return ( 3 * $ x * ( $ x + 1 ) ) \/ 2 ; }"}
{"text":"Driver code","code":"echo ( numberOfSticks ( 7 ) ) ; ? >"}
{"text":"Function to find area of square","code":"< ? php function find_Area ( $ r ) { return ( 2 * $ r * $ r ) ; }"}
{"text":"Radius of a circle","code":"$ r = 3 ;"}
{"text":"Call Function to find an area of square","code":"echo ( \" Area \u2581 of \u2581 square \u2581 = \u2581 \" ) ; echo ( find_Area ( $ r ) ) ; ? >"}
{"text":"function to check if three sider form a triangle or not","code":"< ? php function checkValidity ( $ a , $ b , $ c ) {"}
{"text":"check condition","code":"if ( $ a + $ b <= $ c $ a + $ c <= $ b $ b + $ c <= $ a ) return false ; else return true ; }"}
{"text":"Driver Code","code":"$ a = 7 ; $ b = 10 ; $ c = 5 ;"}
{"text":"function calling and print output","code":"if ( checkValidity ( $ a , $ b , $ c ) ) echo \" Valid \" ; else echo \" Invalid \" ; ? >"}
{"text":"Declaring the size of the matrix","code":"< ? php $ M = 3 ; $ N = 3 ;"}
{"text":"Absolute Difference between the height of two consecutive blocks","code":"function contribution_height ( $ current , $ previous ) { return abs ( $ current - $ previous ) ; }"}
{"text":"Function To calculate the Total surfaceArea .","code":"function surfaceArea ( $ A ) { global $ M ; global $ N ; $ ans = 0 ;"}
{"text":"Traversing the matrix .","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ M ; $ j ++ ) {"}
{"text":"If we are traveling the topmost row in the matrix , we declare the wall above it as 0 as there is no wall above it .","code":"$ up = 0 ;"}
{"text":"If we are traveling the leftmost column in the matrix , we declare the wall left to it as 0 as there is no wall left it .","code":"$ left = 0 ;"}
{"text":"If its not the topmost row","code":"if ( $ i > 0 ) $ up = $ A [ $ i - 1 ] [ $ j ] ;"}
{"text":"If its not the leftmost column","code":"if ( $ j > 0 ) $ left = $ A [ $ i ] [ $ j - 1 ] ;"}
{"text":"Summing up the contribution of by the current block","code":"$ ans += contribution_height ( $ A [ $ i ] [ $ j ] , $ up ) + contribution_height ( $ A [ $ i ] [ $ j ] , $ left ) ;"}
{"text":"If its the rightmost block of the matrix it will contribute area equal to its height as a wall on the right of the figure","code":"if ( $ i == $ N - 1 ) $ ans += $ A [ $ i ] [ $ j ] ;"}
{"text":"If its the lowest block of the matrix it will contribute area equal to its height as a wall on the bottom of the figure","code":"if ( $ j == $ M - 1 ) $ ans += $ A [ $ i ] [ $ j ] ; } }"}
{"text":"Adding the contribution by the base and top of the figure","code":"$ ans += $ N * $ M * 2 ; return $ ans ; }"}
{"text":"Driver Code","code":"$ A = array ( array ( 1 , 3 , 4 ) , array ( 2 , 2 , 3 ) , array ( 1 , 2 , 4 ) ) ; echo surfaceArea ( $ A ) ;"}
{"text":"Utility Function","code":"< ? php function area_of_tetrahedron ( $ side ) { return ( sqrt ( 3 ) * ( $ side * $ side ) ) ; }"}
{"text":"Driver Code","code":"$ side = 3 ; echo \" Area \u2581 of \u2581 Tetrahedron \u2581 = \u2581 \" , area_of_tetrahedron ( $ side ) ; ? >"}
{"text":"Function to calculate volume","code":"< ? php function vol_tetra ( $ side ) { $ volume = ( pow ( $ side , 3 ) \/ ( 6 * sqrt ( 2 ) ) ) ; return $ volume ; }"}
{"text":"Driver Code","code":"$ side = 3 ; $ vol = vol_tetra ( $ side ) ; echo $ vol ; ? >"}
{"text":"PHP program for Number of ways in which participant can take part .","code":"< ? php function numberOfWays ( $ x ) { $ dp [ 0 ] = 1 ; $ dp [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ x ; $ i ++ ) $ dp [ $ i ] = $ dp [ $ i - 1 ] + ( $ i - 1 ) * $ dp [ $ i - 2 ] ; return $ dp [ $ x ] ; }"}
{"text":"Driver code","code":"$ x = 3 ; echo numberOfWays ( $ x ) ; ? >"}
{"text":"Function to calculate Area of equilateral triangle","code":"< ? php function area_equi_triangle ( $ side ) { return sqrt ( 3 ) \/ 4 * $ side * $ side ; }"}
{"text":"Function to calculate Perimeter of equilateral triangle","code":"function peri_equi_triangle ( $ side ) { return 3 * $ side ; }"}
{"text":"Driver Code","code":"$ side = 4 ; echo ( \" Area \u2581 of \u2581 Equilateral \u2581 Triangle : \u2581 \" ) ; echo ( area_equi_triangle ( $ side ) ) ; echo ( \" STRNEWLINE \" ) ; echo ( \" Perimeter \u2581 of \u2581 Equilateral \u2581 Triangle : \u2581 \" ) ; echo ( peri_equi_triangle ( $ side ) ) ; ? >"}
{"text":"utility function","code":"< ? php function areaCuboid ( $ l , $ h , $ w ) { return ( $ l * $ h * $ w ) ; } function surfaceAreaCuboid ( $ l , $ h , $ w ) { return ( 2 * $ l * $ w + 2 * $ w * $ h + 2 * $ l * $ h ) ; }"}
{"text":"Driver Code","code":"$ l = 1 ; $ h = 5 ; $ w = 7 ; echo \" Area \u2581 = \u2581 \" , areaCuboid ( $ l , $ h , $ w ) , \" STRNEWLINE \" ; echo \" Total \u2581 Surface \u2581 Area \u2581 = \u2581 \" , surfaceAreaCuboid ( $ l , $ h , $ w ) ; ? >"}
{"text":"PHP program to find circumference of circle","code":"< ? php $ PI = 3.1415 ;"}
{"text":"utility function","code":"function circumference ( $ r ) { global $ PI ; $ cir = 2 * $ PI * $ r ; return $ cir ; }"}
{"text":"Driver Code","code":"$ r = 5 ; echo \" Circumference \u2581 = \u2581 \" , circumference ( $ r ) ;"}
{"text":"function to check if point collinear or not","code":"< ? php function collinear ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 ) { if ( ( $ y3 - $ y2 ) * ( $ x2 - $ x1 ) == ( $ y2 - $ y1 ) * ( $ x3 - $ x2 ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; }"}
{"text":"Driver Code","code":"$ x1 = 1 ; $ x2 = 1 ; $ x3 = 0 ; $ y1 = 1 ; $ y2 = 6 ; $ y3 = 9 ; collinear ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 ) ; ? >"}
{"text":"PHP program to count number of rectangles in a n x m grid","code":"< ? php function rectCount ( $ n , $ m ) { return ( $ m * $ n * ( $ n + 1 ) * ( $ m + 1 ) ) \/ 4 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ m = 4 ; echo rectCount ( $ n , $ m ) ; ? >"}
{"text":"height >= length is maintained","code":"< ? php function countRect ( $ n ) { $ ans = 0 ; for ( $ length = 1 ; $ length <= sqrt ( $ n ) ; $ length ++ ) for ( $ height = $ length ; $ height * $ length <= $ n ; $ height ++ ) $ ans ++ ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo countRect ( $ n ) ; ? >"}
{"text":"Driver Code","code":"< ? php $ ax = 5 ;"}
{"text":"coordinates of A","code":"$ ay = 0 ; $ bx = 1 ;"}
{"text":"coordinates of B","code":"$ by = 1 ; $ cx = 2 ;"}
{"text":"coordinates of C","code":"$ cy = 5 ; echo $ ax + $ cx - $ bx , \" , \u2581 \" , $ ay + $ cy - $ by ; ? >"}
{"text":"function to calculate m and c that best fit points represented by x [ ] and y [ ]","code":"< ? php function bestApproximate ( $ x , $ y , $ n ) { $ i ; $ j ; $ m ; $ c ; $ sum_x = 0 ; $ sum_y = 0 ; $ sum_xy = 0 ; $ sum_x2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum_x += $ x [ $ i ] ; $ sum_y += $ y [ $ i ] ; $ sum_xy += $ x [ $ i ] * $ y [ $ i ] ; $ sum_x2 += ( $ x [ $ i ] * $ x [ $ i ] ) ; } $ m = ( $ n * $ sum_xy - $ sum_x * $ sum_y ) \/ ( $ n * $ sum_x2 - ( $ sum_x * $ sum_x ) ) ; $ c = ( $ sum_y - $ m * $ sum_x ) \/ $ n ; echo \" m = \" , \u2581 $ m ; STRNEWLINE echo \u2581 \" c = \" }"}
{"text":"Driver Code","code":"$ x = array ( 1 , 2 , 3 , 4 , 5 ) ; $ y = array ( 14 , 27 , 40 , 55 , 68 ) ; $ n = sizeof ( $ x ) ; bestApproximate ( $ x , $ y , $ n ) ; ? >"}
{"text":"define the size of incidence matrix","code":"< ? php $ size = 4 ;"}
{"text":"function to find star graph","code":"function checkStar ( $ mat ) { global $ size ;"}
{"text":"initialize number of vertex with deg 1 and n - 1","code":"$ vertexD1 = 0 ; $ vertexDn_1 = 0 ;"}
{"text":"check for S1","code":"if ( $ size == 1 ) return ( $ mat [ 0 ] [ 0 ] == 0 ) ;"}
{"text":"check for S2","code":"if ( $ size == 2 ) return ( $ mat [ 0 ] [ 0 ] == 0 && $ mat [ 0 ] [ 1 ] == 1 && $ mat [ 1 ] [ 0 ] == 1 && $ mat [ 1 ] [ 1 ] == 0 ) ;"}
{"text":"check for Sn ( n > 2 )","code":"for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { $ degreeI = 0 ; for ( $ j = 0 ; $ j < $ size ; $ j ++ ) if ( $ mat [ $ i ] [ $ j ] ) $ degreeI ++ ; if ( $ degreeI == 1 ) $ vertexD1 ++ ; else if ( $ degreeI == $ size - 1 ) $ vertexDn_1 ++ ; } return ( $ vertexD1 == ( $ size - 1 ) && $ vertexDn_1 == 1 ) ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( 0 , 1 , 1 , 1 ) , array ( 1 , 0 , 0 , 0 ) , array ( 1 , 0 , 0 , 0 ) , array ( 1 , 0 , 0 , 0 ) ) ; if ( checkStar ( $ mat ) ) echo ( \" Star \u2581 Graph \" ) ; else echo ( \" Not \u2581 a \u2581 Star \u2581 Graph \" ) ; ? >"}
{"text":"A tabulation based solution in PHP","code":"< ? php function getMinSteps ( $ n ) { $ table = array ( ) ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ table [ $ i ] = $ n - $ i ; for ( $ i = $ n ; $ i >= 1 ; $ i -- ) { if ( ! ( $ i % 2 ) ) $ table [ $ i \/ 2 ] = min ( $ table [ $ i ] + 1 , $ table [ $ i \/ 2 ] ) ; if ( ! ( $ i % 3 ) ) $ table [ $ i \/ 3 ] = min ( $ table [ $ i ] + 1 , $ table [ $ i \/ 3 ] ) ; } return $ table [ 1 ] ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo getMinSteps ( $ n ) ; ? >"}
{"text":"Check if the character is vowel or not","code":"< ? php function isVowel ( $ c ) { $ vowel = \" aeiou \" ; for ( $ i = 0 ; $ i < strlen ( $ vowel ) ; ++ $ i ) if ( $ vowel [ $ i ] == $ c ) return true ; return false ; }"}
{"text":"Returns true if ' typed ' is a typed name given str","code":"function printRLE ( $ str , $ typed ) { $ n = strlen ( $ str ) ; $ m = strlen ( $ typed ) ;"}
{"text":"Traverse through all characters of str .","code":"$ j = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current characters do not match","code":"if ( $ str [ $ i ] != $ typed [ $ j ] ) return false ;"}
{"text":"If not vowel , simply move ahead in both","code":"if ( isVowel ( $ str [ $ i ] ) == false ) { $ j ++ ; continue ; }"}
{"text":"Count occurrences of current vowel in str","code":"$ count1 = 1 ; while ( $ i < $ n - 1 && $ str [ $ i ] == $ str [ $ i + 1 ] ) { $ count1 ++ ; $ i ++ ; }"}
{"text":"Count occurrences of current vowel in typed .","code":"$ count2 = 1 ; while ( $ j < $ m - 1 && $ typed [ $ j ] == $ str [ $ i ] ) { $ count2 ++ ; $ j ++ ; } if ( $ count1 > $ count2 ) return false ; } return true ; }"}
{"text":"Driver code","code":"$ name = \" alex \" ; $ typed = \" aaalaeex \" ; if ( printRLE ( $ name , $ typed ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function returns true for tree false for graph","code":"< ? php function check ( & $ degree , $ n ) {"}
{"text":"Find sum of all degrees","code":"$ deg_sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ deg_sum += $ degree [ $ i ] ;"}
{"text":"Graph is tree if sum is equal to 2 ( n - 1 )","code":"return ( 2 * ( $ n - 1 ) == $ deg_sum ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ degree = array ( 2 , 3 , 1 , 1 , 1 ) ; if ( check ( $ degree , $ n ) ) echo \" Tree \" ; else echo \" Graph \" ; ? >"}
{"text":"Function that returns true if array is Inorder traversal of any Binary Search Tree or not .","code":"< ? php function isInorder ( $ arr , $ n ) {"}
{"text":"Array has one or no element","code":"if ( $ n == 0 $ n == 1 ) return true ; for ( $ i = 1 ; $ i < $ n ; $ i ++ )"}
{"text":"Unsorted pair found","code":"if ( $ arr [ $ i - 1 ] > $ arr [ $ i ] ) return false ;"}
{"text":"No unsorted pair found","code":"return true ; }"}
{"text":"Driver code","code":"$ arr = array ( 19 , 23 , 25 , 30 , 45 ) ; $ n = sizeof ( $ arr ) ; if ( isInorder ( $ arr , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP Code for Sorted order printing of a given array that represents a BST","code":"< ? php function printSorted ( $ arr , $ start , $ end ) { if ( $ start > $ end ) return ;"}
{"text":"print left subtree","code":"printSorted ( $ arr , $ start * 2 + 1 , $ end ) ;"}
{"text":"print root","code":"echo ( $ arr [ $ start ] . \" \" ) ;"}
{"text":"print right subtree","code":"printSorted ( $ arr , $ start * 2 + 2 , $ end ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 2 , 5 , 1 , 3 ) ; printSorted ( $ arr , 0 , sizeof ( $ arr ) - 1 ) ;"}
{"text":"Print the leaf node from the given preorder of BST .","code":"< ? php function isLeaf ( $ pre , & $ i , $ n , $ min , $ max ) { if ( $ i >= $ n ) return false ; if ( $ pre [ $ i ] > $ min && $ pre [ $ i ] < $ max ) { $ i ++ ; $ left = isLeaf ( $ pre , $ i , $ n , $ min , $ pre [ $ i - 1 ] ) ; $ right = isLeaf ( $ pre , $ i , $ n , $ pre [ $ i - 1 ] , $ max ) ; if ( ! $ left && ! $ right ) echo $ pre [ $ i - 1 ] , \" \u2581 \" ; return true ; } return false ; } function printLeaves ( $ preorder , $ n ) { $ i = 0 ; isLeaf ( $ preorder , $ i , $ n , PHP_INT_MIN , PHP_INT_MAX ) ; }"}
{"text":"Driver code","code":"$ preorder = array ( 890 , 325 , 290 , 530 , 965 ) ; $ n = sizeof ( $ preorder ) ; printLeaves ( $ preorder , $ n ) ; ? >"}
{"text":"function for finding pairs and min value","code":"< ? php function pairs ( $ arr , $ n , $ k ) {"}
{"text":"initialize smallest and count","code":"$ smallest = PHP_INT_MAX ; $ count = 0 ;"}
{"text":"iterate over all pairs","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"is abs value is smaller than smallest update smallest and reset count to 1","code":"if ( abs ( $ arr [ $ i ] + $ arr [ $ j ] - $ k ) < $ smallest ) { $ smallest = abs ( $ arr [ $ i ] + $ arr [ $ j ] - $ k ) ; $ count = 1 ; }"}
{"text":"if abs value is equal to smallest increment count value","code":"else if ( abs ( $ arr [ $ i ] + $ arr [ $ j ] - $ k ) == $ smallest ) $ count ++ ; }"}
{"text":"print result","code":"echo \" Minimal Value = \" \u2581 , \u2581 $ smallest \u2581 , \u2581 \" \" ; STRNEWLINE echo \u2581 \" Total Pairs = \" , \u2581 $ count \u2581 , \u2581 \" \" }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 5 , 7 , 5 , 1 , 9 , 9 ) ; $ k = 12 ; $ n = sizeof ( $ arr ) ; pairs ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Driver code","code":"< ? php $ a = array ( 5 , 1 , 14 , 4 , 15 , 9 , 7 , 20 , 11 ) ; $ key = 20 ; $ arraySize = sizeof ( $ a ) ; $ count = 0 ; for ( $ i = 0 ; $ i < $ arraySize ; $ i ++ ) { if ( $ a [ $ i ] <= $ key ) { $ count += 1 ; } } echo \" Rank \u2581 of \u2581 \" . $ key . \" \u2581 in \u2581 stream \u2581 is : \u2581 \" . ( $ count - 1 ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find sum of middle row and column in matrix","code":"< ? php function middlesum ( $ mat , $ n ) { $ row_sum = 0 ; $ col_sum = 0 ;"}
{"text":"loop for sum of row","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ row_sum += $ mat [ $ n \/ 2 ] [ $ i ] ; echo \" Sum \u2581 of \u2581 middle \u2581 row \u2581 = \u2581 \" , $ row_sum , \" STRNEWLINE \" ;"}
{"text":"loop for sum of column","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ col_sum += $ mat [ $ i ] [ $ n \/ 2 ] ; echo \" Sum \u2581 of \u2581 middle \u2581 column \u2581 = \u2581 \" , $ col_sum ; }"}
{"text":"Driver function","code":"$ mat = array ( array ( 2 , 5 , 7 ) , array ( 3 , 7 , 2 ) , array ( 5 , 6 , 9 ) ) ; middlesum ( $ mat , 3 ) ; ? >"}
{"text":"size of matrix","code":"< ? php $ M = 3 ; $ N = 3 ;"}
{"text":"function to rotate matrix by k times","code":"function rotateMatrix ( & $ matrix , $ k ) { global $ M , $ N ;"}
{"text":"temporary array of size M","code":"$ temp = array ( ) ;"}
{"text":"within the size of matrix","code":"$ k = $ k % $ M ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"copy first M - k elements to temporary array","code":"for ( $ t = 0 ; $ t < $ M - $ k ; $ t ++ ) $ temp [ $ t ] = $ matrix [ $ i ] [ $ t ] ;"}
{"text":"copy the elements from k to end to starting","code":"for ( $ j = $ M - $ k ; $ j < $ M ; $ j ++ ) $ matrix [ $ i ] [ $ j - $ M + $ k ] = $ matrix [ $ i ] [ $ j ] ;"}
{"text":"copy elements from temporary array to end","code":"for ( $ j = $ k ; $ j < $ M ; $ j ++ ) $ matrix [ $ i ] [ $ j ] = $ temp [ $ j - $ k ] ; } }"}
{"text":"function to display the matrix","code":"function displayMatrix ( & $ matrix ) { global $ M , $ N ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ M ; $ j ++ ) echo ( $ matrix [ $ i ] [ $ j ] . \" \u2581 \" ) ; echo ( \" STRNEWLINE \" ) ; } }"}
{"text":"Driver code","code":"$ matrix = array ( array ( 12 , 23 , 34 ) , array ( 45 , 56 , 67 ) , array ( 78 , 89 , 91 ) ) ; $ k = 2 ;"}
{"text":"rotate matrix by k","code":"rotateMatrix ( $ matrix , $ k ) ;"}
{"text":"display rotated matrix","code":"displayMatrix ( $ matrix ) ; ? >"}
{"text":"Program to implement involutory matrix .","code":"< ? php $ N = 3 ;"}
{"text":"Function for matrix multiplication .","code":"function multiply ( $ mat , $ res ) { global $ N ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ res [ $ i ] [ $ j ] = 0 ; for ( $ k = 0 ; $ k < $ N ; $ k ++ ) $ res [ $ i ] [ $ j ] += $ mat [ $ i ] [ $ k ] * $ mat [ $ k ] [ $ j ] ; } } return $ res ; }"}
{"text":"Function to check involutory matrix .","code":"function InvolutoryMatrix ( $ mat ) { global $ N ; $ res ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) for ( $ j = 0 ; $ j < $ N ; $ j ++ ) $ res [ $ i ] [ $ j ] = 0 ;"}
{"text":"multiply function call .","code":"$ res = multiply ( $ mat , $ res ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { if ( $ i == $ j && $ res [ $ i ] [ $ j ] != 1 ) return false ; if ( $ i != $ j && $ res [ $ i ] [ $ j ] != 0 ) return false ; } } return true ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 1 , 0 , 0 ) , array ( 0 , -1 , 0 ) , array ( 0 , 0 , -1 ) ) ;"}
{"text":"Function call . If function return true then if part will execute otherwise else part will execute .","code":"if ( InvolutoryMatrix ( $ mat ) ) echo \" Involutory \u2581 Matrix \" ; else echo \" Not \u2581 Involutory \u2581 Matrix \" ; ? >"}
{"text":"PHP code to swap the element of first and last row and display the result","code":"< ? php $ n = 4 ; function interchangeFirstLast ( & $ m ) { global $ n ; $ rows = $ n ;"}
{"text":"swapping of element between first and last rows","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ t = $ m [ 0 ] [ $ i ] ; $ m [ 0 ] [ $ i ] = $ m [ $ rows - 1 ] [ $ i ] ; $ m [ $ rows - 1 ] [ $ i ] = $ t ; } }"}
{"text":"input in the array","code":"$ m = array ( array ( 8 , 9 , 7 , 6 ) , array ( 4 , 7 , 6 , 5 ) , array ( 3 , 2 , 1 , 8 ) , array ( 9 , 9 , 7 , 7 ) ) ; interchangeFirstLast ( $ m ) ;"}
{"text":"printing the interchanged matrix","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) echo $ m [ $ i ] [ $ j ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; } ? >"}
{"text":"PHP code to check Markov Matrix","code":"< ? php function checkMarkov ( $ m ) { $ n = 3 ;"}
{"text":"outer loop to access rows and inner to access columns","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Find sum of current row","code":"$ sum = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ sum = $ sum + $ m [ $ i ] [ $ j ] ; if ( $ sum != 1 ) return false ; } return true ; }"}
{"text":"Matrix to check","code":"$ m = array ( array ( 0 , 0 , 1 ) , array ( 0.5 , 0 , 0.5 ) , array ( 1 , 0 , 0 ) ) ;"}
{"text":"calls the function check ( )","code":"if ( checkMarkov ( $ m ) ) echo \" \u2581 yes \u2581 \" ; else echo \" \u2581 no \u2581 \" ; ? >"}
{"text":"Program to check matrix is diagonal matrix or not .","code":"< ? php $ N = 4 ;"}
{"text":"Function to check matrix is diagonal matrix or not .","code":"function isDiagonalMatrix ( $ mat ) { global $ N ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) for ( $ j = 0 ; $ j < $ N ; $ j ++ )"}
{"text":"condition to check other elements except main diagonal are zero or not .","code":"if ( ( $ i != $ j ) && ( $ mat [ $ i ] [ $ j ] != 0 ) ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 4 , 0 , 0 , 0 ) , array ( 0 , 7 , 0 , 0 ) , array ( 0 , 0 , 5 , 0 ) , array ( 0 , 0 , 0 , 1 ) ) ; if ( isDiagonalMatrix ( $ mat ) ) echo \" Yes \" , \" STRNEWLINE \" ; else echo \" No \" , \" STRNEWLINE \" ; ? >"}
{"text":"Program to check matrix is scalar matrix or not .","code":"< ? php $ N = 4 ;"}
{"text":"Function to check matrix is scalar matrix or not .","code":"function isScalarMatrix ( $ mat ) { global $ N ;"}
{"text":"Check all elements except main diagonal are zero or not .","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) for ( $ j = 0 ; $ j < $ N ; $ j ++ ) if ( ( $ i != $ j ) && ( $ mat [ $ i ] [ $ j ] != 0 ) ) return false ;"}
{"text":"Check all diagonal elements are same or not .","code":"for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) if ( $ mat [ $ i ] [ $ i ] != $ mat [ $ i + 1 ] [ $ i + 1 ] ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 2 , 0 , 0 , 0 ) , array ( 0 , 2 , 0 , 0 ) , array ( 0 , 0 , 2 , 0 ) , array ( 0 , 0 , 0 , 2 ) ) ;"}
{"text":"Function call","code":"if ( isScalarMatrix ( $ mat ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns true if mat [ ] [ ] is magic square , else returns false .","code":"< ? php function isMagicSquare ( $ mat ) {"}
{"text":"calculate the sum of the prime diagonal","code":"$ sum = 0 ; $ N = 3 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ sum = $ sum + $ mat [ $ i ] [ $ i ] ;"}
{"text":"the secondary diagonal","code":"$ sum2 = 0 ; $ N = 3 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ sum2 = $ sum2 + $ mat [ $ i ] [ $ N - $ i - 1 ] ; if ( $ sum != $ sum2 ) return false ;"}
{"text":"For sums of Rows","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ rowSum = 0 ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) $ rowSum += $ mat [ $ i ] [ $ j ] ;"}
{"text":"check if every row sum is equal to prime diagonal sum","code":"if ( $ rowSum != $ sum ) return false ; }"}
{"text":"For sums of Columns","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ colSum = 0 ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) $ colSum += $ mat [ $ j ] [ $ i ] ;"}
{"text":"check if every column sum is equal to prime diagonal sum","code":"if ( $ sum != $ colSum ) return false ; } return true ; }"}
{"text":"Driver Code","code":"{ $ mat = array ( array ( 2 , 7 , 6 ) , array ( 9 , 5 , 1 ) , array ( 4 , 3 , 8 ) ) ; if ( isMagicSquare ( $ mat ) ) echo \" Magic \u2581 Square \" ; else echo \" Not \u2581 a \u2581 magic \u2581 Square \" ; return 0 ; } ? >"}
{"text":"function to count all sub - arrays divisible by k","code":"< ? php function subCount ( $ arr , $ n , $ k ) {"}
{"text":"create auxiliary hash array to count frequency of remainders","code":"$ mod = array ( ) ; for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ mod [ $ i ] = 0 ;"}
{"text":"Traverse original array and compute cumulative sum take remainder of this current cumulative sum and increase count by 1 for this remainder in mod array","code":"$ cumSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ cumSum += $ arr [ $ i ] ;"}
{"text":"as the sum can be negative , taking modulo twice","code":"$ mod [ ( ( $ cumSum % $ k ) + $ k ) % $ k ] ++ ; }"}
{"text":"Initialize result","code":"$ result = 0 ;"}
{"text":"Traverse mod","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ )"}
{"text":"If there are more than one prefix subarrays with a particular mod value .","code":"if ( $ mod [ $ i ] > 1 ) $ result += ( $ mod [ $ i ] * ( $ mod [ $ i ] - 1 ) ) \/ 2 ;"}
{"text":"add the subarrays starting from the arr [ i ] which are divisible by k itself","code":"$ result += $ mod [ 0 ] ; return $ result ; }"}
{"text":"function to count all sub - matrices having sum divisible by the value ' k '","code":"function countSubmatrix ( $ mat , $ n , $ k ) {"}
{"text":"Variable to store the final output","code":"$ tot_count = 0 ; $ temp = array ( ) ;"}
{"text":"Set the left column","code":"for ( $ left = 0 ; $ left < $ n ; $ left ++ ) {"}
{"text":"Initialize all elements of temp as 0","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ temp [ $ i ] = 0 ;"}
{"text":"Set the right column for the left column set by outer loop","code":"for ( $ right = $ left ; $ right < $ n ; $ right ++ ) {"}
{"text":"Calculate sum between current left and right for every row ' i '","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ temp [ $ i ] += $ mat [ $ i ] [ $ right ] ;"}
{"text":"Count number of subarrays in temp having sum divisible by ' k ' and then add it to ' tot _ count '","code":"$ tot_count += subCount ( $ temp , $ n , $ k ) ; } }"}
{"text":"required count of sub - matrices having sum divisible by ' k '","code":"return $ tot_count ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 5 , -1 , 6 ) , array ( -2 , 3 , 8 ) , array ( 7 , 4 , -9 ) ) ; $ n = 3 ; $ k = 4 ; echo ( \" Count \u2581 = \u2581 \" . countSubmatrix ( $ mat , $ n , $ k ) ) ; ? >"}
{"text":"PHP program to find the frequency of k in matrix where m ( i , j ) = i + j","code":"< ? php function find ( $ n , $ k ) { if ( $ n + 1 >= $ k ) return ( $ k - 1 ) ; else return ( 2 * $ n + 1 - $ k ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ k = 7 ; $ freq = find ( $ n , $ k ) ; if ( $ freq < 0 ) echo \" \u2581 element \u2581 not \u2581 exist \u2581 STRNEWLINE \u2581 \" ; else echo \" \u2581 Frequency \u2581 of \u2581 \" , $ k , \" \u2581 is \u2581 \" , $ freq , \" STRNEWLINE \" ; ? >"}
{"text":"function that prints given number of 1 ' s , \u2581 2' s , 3 ' s \u2581 . . . . k ' s in zig - zag way .","code":"< ? php function ZigZag ( $ rows , $ columns , $ numbers ) { $ k = 0 ;"}
{"text":"two - dimensional array to store numbers .","code":"$ arr = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ rows ; $ i ++ ) {"}
{"text":"for even row .","code":"if ( $ i % 2 == 0 ) {"}
{"text":"for each column .","code":"for ( $ j = 0 ; $ j < $ columns and $ numbers [ $ k ] > 0 ; $ j ++ ) {"}
{"text":"storing element .","code":"$ arr [ $ i ] [ $ j ] = $ k + 1 ;"}
{"text":"decrement element at kth index .","code":"$ numbers [ $ k ] -- ;"}
{"text":"if array contains zero then increment index to make this next index","code":"if ( $ numbers [ $ k ] == 0 ) $ k ++ ; } }"}
{"text":"for odd row .","code":"else {"}
{"text":"for each column .","code":"for ( $ j = $ columns - 1 ; $ j >= 0 and $ numbers [ $ k ] > 0 ; $ j -- ) {"}
{"text":"storing element .","code":"$ arr [ $ i ] [ $ j ] = $ k + 1 ;"}
{"text":"decrement element at kth index .","code":"$ numbers [ $ k ] -- ;"}
{"text":"if array contains zero then increment index to make this next index .","code":"if ( $ numbers [ $ k ] == 0 ) $ k ++ ; } } }"}
{"text":"printing the stored elements .","code":"for ( $ i = 0 ; $ i < $ rows ; $ i ++ ) { for ( $ j = 0 ; $ j < $ columns ; $ j ++ ) echo $ arr [ $ i ] [ $ j ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ rows = 4 ; $ columns = 5 ; $ Numbers = array ( 3 , 4 , 2 , 2 , 3 , 1 , 5 ) ; ZigZag ( $ rows , $ columns , $ Numbers ) ; ? >"}
{"text":"Return the number of position a Queen can move .","code":"< ? php function numberofPosition ( $ n , $ k , $ x , $ y , $ obstPosx , $ obstPosy ) {"}
{"text":"d11 , d12 , d21 , d22 are for diagnoal distances . r1 , r2 are for vertical distance . c1 , c2 are for horizontal distance .","code":"$ d11 ; $ d12 ; $ d21 ; $ d22 ; $ r1 ; $ r2 ; $ c1 ; $ c2 ;"}
{"text":"Initialise the distance to end of the board .","code":"$ d11 = min ( $ x - 1 , $ y - 1 ) ; $ d12 = min ( $ n - $ x , $ n - $ y ) ; $ d21 = min ( $ n - $ x , $ y - 1 ) ; $ d22 = min ( $ x - 1 , $ n - $ y ) ; $ r1 = $ y - 1 ; $ r2 = $ n - $ y ; $ c1 = $ x - 1 ; $ c2 = $ n - $ x ;"}
{"text":"For each obstacle find the minimum distance . If obstacle is present in any direction , distance will be updated .","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) { if ( $ x > $ obstPosx [ $ i ] && $ y > $ obstPosy [ $ i ] && $ x - $ obstPosx [ $ i ] == $ y - $ obstPosy [ $ i ] ) $ d11 = min ( $ d11 , $ x - $ obstPosx [ $ i ] - 1 ) ; if ( $ obstPosx [ $ i ] > $ x && $ obstPosy [ $ i ] > $ y && $ obstPosx [ $ i ] - $ x == $ obstPosy [ $ i ] - $ y ) $ d12 = min ( $ d12 , $ obstPosx [ $ i ] - $ x - 1 ) ; if ( $ obstPosx [ $ i ] > $ x && $ y > $ obstPosy [ $ i ] && $ obstPosx [ $ i ] - $ x == $ y - $ obstPosy [ $ i ] ) $ d21 = min ( $ d21 , $ obstPosx [ $ i ] - $ x - 1 ) ; if ( $ x > $ obstPosx [ $ i ] && $ obstPosy [ $ i ] > $ y && $ x - $ obstPosx [ $ i ] == $ obstPosy [ $ i ] - $ y ) $ d22 = min ( $ d22 , $ x - $ obstPosx [ $ i ] - 1 ) ; if ( $ x == $ obstPosx [ $ i ] && $ obstPosy [ $ i ] < $ y ) $ r1 = min ( $ r1 , $ y - $ obstPosy [ $ i ] - 1 ) ; if ( $ x == $ obstPosx [ $ i ] && $ obstPosy [ $ i ] > $ y ) $ r2 = min ( $ r2 , $ obstPosy [ $ i ] - $ y - 1 ) ; if ( $ y == $ obstPosy [ $ i ] && $ obstPosx [ $ i ] < $ x ) $ c1 = min ( $ c1 , $ x - $ obstPosx [ $ i ] - 1 ) ; if ( $ y == $ obstPosy [ $ i ] && $ obstPosx [ $ i ] > $ x ) $ c2 = min ( $ c2 , $ obstPosx [ $ i ] - $ x - 1 ) ; } return $ d11 + $ d12 + $ d21 + $ d22 + $ r1 + $ r2 + $ c1 + $ c2 ; }"}
{"text":"Chessboard size","code":"$ n = 8 ;"}
{"text":"number of obstacles","code":"$ k = 1 ;"}
{"text":"Queen x position","code":"$ Qposx = 4 ;"}
{"text":"Queen y position","code":"$ Qposy = 4 ;"}
{"text":"x position of obstacles","code":"$ obstPosx = array ( 3 ) ;"}
{"text":"y position of obstacles","code":"$ obstPosy = array ( 5 ) ; echo numberofPosition ( $ n , $ k , $ Qposx , $ Qposy , $ obstPosx , $ obstPosy ) ; ? >"}
{"text":"PHP program to find out the maximum product in the matrix which four elements are adjacent to each other in one direction","code":"< ? php $ n = 5 ;"}
{"text":"function to find max product","code":"function FindMaxProduct ( $ arr , $ n ) { $ max = 0 ; $ result ;"}
{"text":"iterate the rows .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"iterate the columns .","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"check the maximum product in horizontal row .","code":"if ( ( $ j - 3 ) >= 0 ) { $ result = $ arr [ $ i ] [ $ j ] * $ arr [ $ i ] [ $ j - 1 ] * $ arr [ $ i ] [ $ j - 2 ] * $ arr [ $ i ] [ $ j - 3 ] ; if ( $ max < $ result ) $ max = $ result ; }"}
{"text":"check the maximum product in vertical row .","code":"if ( ( $ i - 3 ) >= 0 ) { $ result = $ arr [ $ i ] [ $ j ] * $ arr [ $ i - 1 ] [ $ j ] * $ arr [ $ i - 2 ] [ $ j ] * $ arr [ $ i - 3 ] [ $ j ] ; if ( $ max < $ result ) $ max = $ result ; }"}
{"text":"check the maximum product in diagonal going through down - right","code":"if ( ( $ i - 3 ) >= 0 and ( $ j - 3 ) >= 0 ) { $ result = $ arr [ $ i ] [ $ j ] * $ arr [ $ i - 1 ] [ $ j - 1 ] * $ arr [ $ i - 2 ] [ $ j - 2 ] * $ arr [ $ i - 3 ] [ $ j - 3 ] ; if ( $ max < $ result ) $ max = $ result ; }"}
{"text":"check the maximum product in diagonal going through up - right","code":"if ( ( $ i - 3 ) >= 0 and ( $ j - 1 ) <= 0 ) { $ result = $ arr [ $ i ] [ $ j ] * $ arr [ $ i - 1 ] [ $ j + 1 ] * $ arr [ $ i - 2 ] [ $ j + 2 ] * $ arr [ $ i - 3 ] [ $ j + 3 ] ; if ( $ max < $ result ) $ max = $ result ; } } } return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( array ( 1 , 2 , 3 , 4 , 5 ) , array ( 6 , 7 , 8 , 9 , 1 ) , array ( 2 , 3 , 4 , 5 , 6 ) , array ( 7 , 8 , 9 , 1 , 0 ) , array ( 9 , 6 , 4 , 2 , 3 ) ) ; echo FindMaxProduct ( $ arr , $ n ) ; ? >"}
{"text":"PHP Program to find minimum flip required to make","code":"< ? php $ N = 3 ;"}
{"text":"Return the minimum flip required to make Binary Matrix symmetric along main diagonal .","code":"function minimumflip ( $ mat , $ n ) { global $ N ; $ transpose ;"}
{"text":"finding the transpose of the matrix","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ transpose [ $ i ] [ $ j ] = $ mat [ $ j ] [ $ i ] ;"}
{"text":"Finding the number of position where element are not same .","code":"$ flip = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( $ transpose [ $ i ] [ $ j ] != $ mat [ $ i ] [ $ j ] ) $ flip ++ ; return $ flip \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ mat = array ( array ( 0 , 0 , 1 ) , array ( 1 , 1 , 1 ) , array ( 1 , 0 , 0 ) ) ; echo minimumflip ( $ mat , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP Program to find minimum flip required to make Binary Matrix symmetric along main diagonal","code":"< ? php $ N = 3 ;"}
{"text":"Return the minimum flip required to make Binary Matrix symmetric along main diagonal .","code":"function minimumflip ( $ mat , $ n ) {"}
{"text":"Comparing elements across diagonal","code":"$ flip = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ mat [ $ i ] [ $ j ] != $ mat [ $ j ] [ $ i ] ) $ flip ++ ; return $ flip ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ mat = array ( array ( 0 , 0 , 1 ) , array ( 1 , 1 , 1 ) , array ( 1 , 0 , 0 ) ) ; echo minimumflip ( $ mat , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP Program to Find the frequency of even and odd numbers in a matrix","code":"< ? php $ MAX = 100 ;"}
{"text":"function for calculating frequency","code":"function freq ( $ ar , $ m , $ n ) { $ even = 0 ; $ odd = 0 ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { for ( $ j = 0 ; $ j < $ n ; ++ $ j ) {"}
{"text":"modulo by 2 to check even and odd","code":"if ( ( $ ar [ $ i ] [ $ j ] % 2 ) == 0 ) ++ $ even ; else ++ $ odd ; } }"}
{"text":"print Frequency of numbers","code":"echo \" \u2581 Frequency \u2581 of \u2581 odd \u2581 number \u2581 = \u2581 \" , $ odd , \" STRNEWLINE \" ; echo \" \u2581 Frequency \u2581 of \u2581 even \u2581 number \u2581 = \u2581 \" , $ even ; }"}
{"text":"Driver code","code":"$ m = 3 ; $ n = 3 ; $ array = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ; freq ( $ array , $ m , $ n ) ; ? >"}
{"text":"PHP Program to check if the center element is equal to the individual sum of all the half diagonals","code":"< ? php $ MAX = 100 ;"}
{"text":"Function to Check center element is equal to the individual sum of all the half diagonals","code":"function HalfDiagonalSums ( $ mat , $ n ) { global $ MAX ;"}
{"text":"Find sums of half diagonals","code":"$ diag1_left = 1 ; $ diag1_right = 1 ; $ diag2_left = 1 ; $ diag2_right = 1 ; for ( $ i = 0 , $ j = $ n - 1 ; $ i < $ n ; $ i ++ , $ j -- ) { if ( $ i < $ n \/ 2 ) { $ diag1_left += $ mat [ $ i ] [ $ i ] ; $ diag2_left += $ mat [ $ j ] [ $ i ] ; } else if ( $ i > $ n \/ 2 ) { $ diag1_right += $ mat [ $ i ] [ $ i ] ; $ diag2_right += $ mat [ $ j ] [ $ i ] ; } } return ( $ diag1_left == $ diag2_right && $ diag2_right == $ diag2_left && $ diag1_right == $ diag2_left && $ diag2_right == $ mat [ $ n \/ 2 ] [ $ n \/ 2 ] ) ; }"}
{"text":"Driver code","code":"$ a = array ( array ( 2 , 9 , 1 , 4 , -2 ) , array ( 6 , 7 , 2 , 11 , 4 ) , array ( 4 , 2 , 9 , 2 , 4 ) , array ( 1 , 9 , 2 , 4 , 4 ) , array ( 0 , 2 , 4 , 2 , 5 ) ) ; if ( HalfDiagonalSums ( $ a , 5 ) == 0 ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to print Identity Matrix","code":"< ? php function Identity ( $ num ) { $ row ; $ col ; for ( $ row = 0 ; $ row < $ num ; $ row ++ ) { for ( $ col = 0 ; $ col < $ num ; $ col ++ ) {"}
{"text":"Checking if row is equal to column","code":"if ( $ row == $ col ) echo 1 , \" \u2581 \" ; else echo 0 , \" \u2581 \" ; } echo \" \" } return 0 ; }"}
{"text":"Driver Code","code":"$ size = 5 ; identity ( $ size ) ; ? >"}
{"text":"PHP program to check if a given matrix is identity $MAX = 100 ;","code":"< ? php function isIdentity ( $ mat , $ N ) { for ( $ row = 0 ; $ row < $ N ; $ row ++ ) { for ( $ col = 0 ; $ col < $ N ; $ col ++ ) { if ( $ row == $ col and $ mat [ $ row ] [ $ col ] != 1 ) return false ; else if ( $ row != $ col && $ mat [ $ row ] [ $ col ] != 0 ) return false ; } } return true ; }"}
{"text":"Driver Code","code":"$ N = 4 ; $ mat = array ( array ( 1 , 0 , 0 , 0 ) , array ( 0 , 1 , 0 , 0 ) , array ( 0 , 0 , 1 , 0 ) , array ( 0 , 0 , 0 , 1 ) ) ; if ( isIdentity ( $ mat , $ N ) ) echo \" Yes \u2581 \" ; else echo \" No \u2581 \" ; ? >"}
{"text":"PHP program to find number of ways to fill a matrix under given constraints","code":"< ? php $ mod = 100000007 ;"}
{"text":"Returns a raised power t under modulo mod","code":"function modPower ( $ a , $ t ) { global $ mod ; $ now = $ a ; $ ret = 1 ;"}
{"text":"Counting number of ways of filling the matrix","code":"while ( $ t ) { if ( $ t & 1 ) $ ret = $ now * ( $ ret % $ mod ) ; $ now = $ now * ( $ now % $ mod ) ; $ t >>= 1 ; } return $ ret ; }"}
{"text":"Function calculating the answer","code":"function countWays ( $ n , $ m , $ k ) { global $ mod ;"}
{"text":"if sum of numbers of rows and columns is odd i . e ( n + m ) % 2 == 1 and k = - 1 then there are 0 ways of filiing the matrix .","code":"if ( $ k == -1 and ( $ n + $ m ) % 2 == 1 ) return 0 ;"}
{"text":"If there is one row or one column then there is only one way of filling the matrix","code":"if ( $ n == 1 or $ m == 1 ) return 1 ;"}
{"text":"If the above cases are not followed then we find ways to fill the n - 1 rows and m - 1 columns which is 2 ^ ( ( m - 1 ) * ( n - 1 ) ) .","code":"return ( modPower ( modPower ( 2 , $ n - 1 ) , $ m - 1 ) % $ mod ) ; }"}
{"text":"Driver Code","code":"$ n = 2 ; $ m = 7 ; $ k = 1 ; echo countWays ( $ n , $ m , $ k ) ; ? >"}
{"text":"Efficient PHP program to find mirror of matrix across diagonal .","code":"< ? php function imageSwap ( & $ mat , $ n ) {"}
{"text":"traverse a matrix and swap mat [ i ] [ j ] with mat [ j ] [ i ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) $ mat [ $ i ] [ $ j ] = $ mat [ $ i ] [ $ j ] + $ mat [ $ j ] [ $ i ] - ( $ mat [ $ j ] [ $ i ] = $ mat [ $ i ] [ $ j ] ) ; }"}
{"text":"Utility function to print a matrix","code":"function printMatrix ( & $ mat , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { echo ( $ mat [ $ i ] [ $ j ] ) ; echo ( \" \u2581 \" ) ; } echo ( \" STRNEWLINE \" ) ; } }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) , array ( 9 , 10 , 11 , 12 ) , array ( 13 , 14 , 15 , 16 ) ) ; $ n = 4 ; imageSwap ( $ mat , $ n ) ; printMatrix ( $ mat , $ n ) ; ? >"}
{"text":"Searches the element $x in mat [ ] [ ] . If the element is found , then prints its position and returns true , otherwise prints \" not \u2581 found \" and returns false","code":"< ? php function search ( & $ mat , $ n , $ x ) { $ i = 0 ;"}
{"text":"set indexes for top right element","code":"$ j = $ n - 1 ; while ( $ i < $ n && $ j >= 0 ) { if ( $ mat [ $ i ] [ $ j ] == $ x ) { echo \" n \u2581 found \u2581 at \u2581 \" . $ i . \" , \u2581 \" . $ j ; return 1 ; } if ( $ mat [ $ i ] [ $ j ] > $ x ) $ j -- ;"}
{"text":"if $mat [ $i ] [ $j ] < $x","code":"else $ i ++ ; } echo \" n \u2581 Element \u2581 not \u2581 found \" ;"}
{"text":"if ( $i == $n $j == - 1 )","code":"return 0 ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 10 , 20 , 30 , 40 ) , array ( 15 , 25 , 35 , 45 ) , array ( 27 , 29 , 37 , 48 ) , array ( 32 , 33 , 39 , 50 ) ) ; search ( $ mat , 4 , 29 ) ; ? >"}
{"text":"Function to print alternating rectangles of 0 and X","code":"< ? php function fill0X ( $ m , $ n ) {"}
{"text":"k - starting row index m - ending row index l - starting column index n - ending column index i - iterator","code":"$ k = 0 ; $ l = 0 ;"}
{"text":"Store given number of rows and columns for later use","code":"$ r = $ m ; $ c = $ n ;"}
{"text":"Iniitialize the character to be stoed in a [ ] [ ]","code":"$ x = ' X ' ;"}
{"text":"Fill characters in a [ ] [ ] in spiral form . Every iteration fills one rectangle of either Xs or Os","code":"while ( $ k < $ m && $ l < $ n ) {"}
{"text":"Fill the first row from the remaining rows","code":"for ( $ i = $ l ; $ i < $ n ; ++ $ i ) $ a [ $ k ] [ $ i ] = $ x ; $ k ++ ;"}
{"text":"Fill the last column from the remaining columns","code":"for ( $ i = $ k ; $ i < $ m ; ++ $ i ) $ a [ $ i ] [ $ n - 1 ] = $ x ; $ n -- ;"}
{"text":"Fill the last row from the remaining rows","code":"if ( $ k < $ m ) { for ( $ i = $ n - 1 ; $ i >= $ l ; -- $ i ) $ a [ $ m - 1 ] [ $ i ] = $ x ; $ m -- ; }"}
{"text":"Print the first column from the remaining columns","code":"if ( $ l < $ n ) { for ( $ i = $ m - 1 ; $ i >= $ k ; -- $ i ) $ a [ $ i ] [ $ l ] = $ x ; $ l ++ ; }"}
{"text":"Flip character for next iteration","code":"$ x = ( $ x == '0' ) ? ' X ' : '0' ; }"}
{"text":"Print the filled matrix","code":"for ( $ i = 0 ; $ i < $ r ; $ i ++ ) { for ( $ j = 0 ; $ j < $ c ; $ j ++ ) echo ( $ a [ $ i ] [ $ j ] . \" \u2581 \" ) ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"echo \" Output \u2581 for \u2581 m \u2581 = \u2581 5 , \u2581 n \u2581 = \u2581 6 STRNEWLINE \" ; fill0X ( 5 , 6 ) ; echo \" Output for m = 4 , n = 4 \" ; fill0X ( 4 , 4 ) ; echo \" Output for m = 3 , n = 4 \" ; fill0X ( 3 , 4 ) ; ? >"}
{"text":"function to find the total energy required to rearrange the numbers","code":"< ? php function calculateEnergy ( $ mat , $ n ) { $ i_des ; $ j_des ; $ q ; $ tot_energy = 0 ;"}
{"text":"nested loops to access the elements of the given matrix","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"store quotient","code":"$ q = ( int ) ( $ mat [ $ i ] [ $ j ] \/ $ n ) ;"}
{"text":"final destination location ( i_des , j_des ) of the element mat [ i ] [ j ] is being calculated","code":"$ i_des = $ q ; $ j_des = $ mat [ $ i ] [ $ j ] - ( $ n * $ q ) ;"}
{"text":"energy required for the movement of the element mat [ i ] [ j ] is calculated and then accumulated in the ' tot _ energy '","code":"$ tot_energy += abs ( $ i_des - $ i ) + abs ( $ j_des - $ j ) ; } }"}
{"text":"required total energy","code":"return $ tot_energy ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 4 , 7 , 0 , 3 ) , array ( 8 , 5 , 6 , 1 ) , array ( 9 , 11 , 10 , 2 ) , array ( 15 , 13 , 14 , 12 ) ) ; $ n = 4 ; echo \" Total \u2581 energy \u2581 required \u2581 = \u2581 \" , calculateEnergy ( $ mat , $ n ) , \" \u2581 units \" ; ? >"}
{"text":"PHP program to count unique cells in a matrix","code":"< ? php $ MAX = 100 ;"}
{"text":"Returns true if mat [ i ] [ j ] is unique","code":"function isUnique ( $ mat , $ i , $ j , $ n , $ m ) { global $ MAX ;"}
{"text":"checking in row calculating sumrow will be moving column wise","code":"$ sumrow = 0 ; for ( $ k = 0 ; $ k < $ m ; $ k ++ ) { $ sumrow += $ mat [ $ i ] [ $ k ] ; if ( $ sumrow > 1 ) return false ; }"}
{"text":"checking in column calculating sumcol will be moving row wise","code":"$ sumcol = 0 ; for ( $ k = 0 ; $ k < $ n ; $ k ++ ) { $ sumcol += $ mat [ $ k ] [ $ j ] ; if ( $ sumcol > 1 ) return false ; } return true ; } function countUnique ( $ mat , $ n , $ m ) { $ uniquecount = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ m ; $ j ++ ) if ( $ mat [ $ i ] [ $ j ] && isUnique ( $ mat , $ i , $ j , $ n , $ m ) ) $ uniquecount ++ ; return $ uniquecount ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( 0 , 1 , 0 , 0 ) , array ( 0 , 0 , 1 , 0 ) , array ( 1 , 0 , 0 , 1 ) ) ; echo countUnique ( $ mat , 3 , 4 ) ; ? >"}
{"text":"PHP code to check if a matrix is sparse .","code":"< ? php $ MAX = 100 ; function isSparse ( $ array , $ m , $ n ) { $ counter = 0 ;"}
{"text":"Count number of zeros in the matrix","code":"for ( $ i = 0 ; $ i < $ m ; ++ $ i ) for ( $ j = 0 ; $ j < $ n ; ++ $ j ) if ( $ array [ $ i ] [ $ j ] == 0 ) ++ $ counter ; return ( $ counter > ( ( $ m * $ n ) \/ 2 ) ) ; }"}
{"text":"Driver Code","code":"$ array = array ( array ( 1 , 0 , 3 ) , array ( 0 , 0 , 4 ) , array ( 6 , 0 , 0 ) ) ; $ m = 3 ; $ n = 3 ; if ( isSparse ( $ array , $ m , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find common elements in two diagonals .","code":"< ? php $ MAX = 100 ;"}
{"text":"Returns count of row wise same elements in two diagonals of mat [ n ] [ n ]","code":"function countCommon ( $ mat , $ n ) { global $ MAX ; $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ mat [ $ i ] [ $ i ] == $ mat [ $ i ] [ $ n - $ i - 1 ] ) $ res ++ ; return $ res ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ; echo countCommon ( $ mat , 3 ) ; ? >"}
{"text":"Function to check the if sum of a row is same as corresponding column","code":"< ? php function areSumSame ( $ a , $ n , $ m ) { $ sum1 = 0 ; $ sum2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum1 = 0 ; $ sum2 = 0 ; for ( $ j = 0 ; $ j < $ m ; $ j ++ ) { $ sum1 += $ a [ $ i ] [ $ j ] ; $ sum2 += $ a [ $ j ] [ $ i ] ; } if ( $ sum1 == $ sum2 ) return true ; } return false ; }"}
{"text":"number of rows","code":"$ n = 4 ;"}
{"text":"number of columns","code":"$ m = 4 ; $ M = array ( array ( 1 , 2 , 3 , 4 ) , array ( 9 , 5 , 3 , 1 ) , array ( 0 , 3 , 5 , 6 ) , array ( 0 , 4 , 5 , 6 ) ) ; echo areSumSame ( $ M , $ n , $ m ) ; ? >"}
{"text":"PHP program to find row with maximum 1 in row sorted binary matrix","code":"< ? php $ N = 4 ;"}
{"text":"function for finding row with maximum 1","code":"function findMax ( $ arr ) { global $ N ; $ row = 0 ; $ i ; $ j = $ N - 1 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"find left most position of 1 in a row find 1 st zero in a row","code":"while ( $ arr [ $ i ] [ $ j ] == 1 && $ j >= 0 ) { $ row = $ i ; $ j -- ; } } echo \" Row \u2581 number \u2581 = \u2581 \" , $ row + 1 ; echo \" , MaxCount = \" }"}
{"text":"Driver Code","code":"$ arr = array ( array ( 0 , 0 , 0 , 1 ) , array ( 0 , 0 , 0 , 1 ) , array ( 0 , 0 , 0 , 0 ) , array ( 0 , 1 , 1 , 1 ) ) ; findMax ( $ arr ) ; ? >"}
{"text":"PHP program to find number of possible moves of knight","code":"< ? php $ n = 4 ; $ m = 4 ;"}
{"text":"To calculate possible moves","code":"function findPossibleMoves ( $ mat , $ p , $ q ) { global $ n ; global $ m ;"}
{"text":"All possible moves of a knight","code":"$ X = array ( 2 , 1 , -1 , -2 , -2 , -1 , 1 , 2 ) ; $ Y = array ( 1 , 2 , 2 , 1 , -1 , -2 , -2 , -1 ) ; $ count = 0 ;"}
{"text":"Check if each possible move is valid or not","code":"for ( $ i = 0 ; $ i < 8 ; $ i ++ ) {"}
{"text":"Position of knight after move","code":"$ x = $ p + $ X [ $ i ] ; $ y = $ q + $ Y [ $ i ] ;"}
{"text":"count valid moves","code":"if ( $ x >= 0 && $ y >= 0 && $ x < $ n && $ y < $ m && $ mat [ $ x ] [ $ y ] == 0 ) $ count ++ ; }"}
{"text":"Return number of possible moves","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 1 , 0 , 1 , 0 ) , array ( 0 , 1 , 1 , 1 ) , array ( 1 , 1 , 0 , 1 ) , array ( 0 , 1 , 1 , 1 ) ) ; $ p = 2 ; $ q = 2 ; echo findPossibleMoves ( $ mat , $ p , $ q ) ; ? >"}
{"text":"A simple PHP program to find sum of diagonals","code":"< ? php $ MAX = 100 ; function printDiagonalSums ( $ mat , $ n ) { global $ MAX ; $ principal = 0 ; $ secondary = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Condition for principal diagonal","code":"if ( $ i == $ j ) $ principal += $ mat [ $ i ] [ $ j ] ;"}
{"text":"Condition for secondary diagonal","code":"if ( ( $ i + $ j ) == ( $ n - 1 ) ) $ secondary += $ mat [ $ i ] [ $ j ] ; } } echo \" Principal \u2581 Diagonal : \" , $ principal , \" STRNEWLINE \" ; echo \" Secondary \u2581 Diagonal : \" , $ secondary , \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ a = array ( array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) , array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) ) ; printDiagonalSums ( $ a , 4 ) ; ? >"}
{"text":"An efficient PHP program to find sum of diagonals","code":"< ? php $ MAX = 100 ; function printDiagonalSums ( $ mat , $ n ) { global $ MAX ; $ principal = 0 ; $ secondary = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ principal += $ mat [ $ i ] [ $ i ] ; $ secondary += $ mat [ $ i ] [ $ n - $ i - 1 ] ; } echo \" Principal \u2581 Diagonal : \" , $ principal , \" STRNEWLINE \" ; echo \" Secondary \u2581 Diagonal : \" , $ secondary , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ a = array ( array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) , array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) ) ; printDiagonalSums ( $ a , 4 ) ; ? >"}
{"text":"PHP program to print boundary element of matrix .","code":"< ? php $ MAX = 100 ; function printBoundary ( $ a , $ m , $ n ) { global $ MAX ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i == 0 ) echo $ a [ $ i ] [ $ j ] , \" \u2581 \" ; else if ( $ i == $ m - 1 ) echo $ a [ $ i ] [ $ j ] , \" \u2581 \" ; else if ( $ j == 0 ) echo $ a [ $ i ] [ $ j ] , \" \u2581 \" ; else if ( $ j == $ n - 1 ) echo $ a [ $ i ] [ $ j ] , \" \u2581 \" ; else echo \" \u2581 \" , \" \u2581 \" ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ a = array ( array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) , array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) ) ; printBoundary ( $ a , 4 , 4 ) ; ? >"}
{"text":"PHP program to find sum of boundary elements of matrix .","code":"< ? php function getBoundarySum ( $ a , $ m , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ i == 0 ) $ sum += $ a [ $ i ] [ $ j ] ; else if ( $ i == $ m - 1 ) $ sum += $ a [ $ i ] [ $ j ] ; else if ( $ j == 0 ) $ sum += $ a [ $ i ] [ $ j ] ; else if ( $ j == $ n - 1 ) $ sum += $ a [ $ i ] [ $ j ] ; } } return $ sum ; }"}
{"text":"Driver code","code":"$ a = array ( array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) , array ( 1 , 2 , 3 , 4 ) , array ( 5 , 6 , 7 , 8 ) ) ; $ sum = getBoundarySum ( $ a , 4 , 4 ) ; echo \" Sum \u2581 of \u2581 boundary \u2581 elements \u2581 is \u2581 \" , $ sum ; ? >"}
{"text":"PHP program to print a matrix in spiral form .","code":"< ? php $ MAX = 100 ; function printSpiral ( $ mat , $ r , $ c ) { global $ MAX ; $ i ; $ a = 0 ; $ b = 2 ; $ low_row = ( 0 > $ a ) ? 0 : $ a ; $ low_column = ( 0 > $ b ) ? 0 : $ b - 1 ; $ high_row = ( ( $ a + 1 ) >= $ r ) ? $ r - 1 : $ a + 1 ; $ high_column = ( ( $ b + 1 ) >= $ c ) ? $ c - 1 : $ b + 1 ; while ( ( $ low_row > 0 - $ r && $ low_column > 0 - $ c ) ) { for ( $ i = $ low_column + 1 ; $ i <= $ high_column && $ i < $ c && $ low_row >= 0 ; ++ $ i ) echo $ mat [ $ low_row ] [ $ i ] , \" \u2581 \" ; $ low_row -= 1 ; for ( $ i = $ low_row + 2 ; $ i <= $ high_row && $ i < $ r && $ high_column < $ c ; ++ $ i ) echo $ mat [ $ i ] [ $ high_column ] , \" \u2581 \" ; $ high_column += 1 ; for ( $ i = $ high_column - 2 ; $ i >= $ low_column && $ i >= 0 && $ high_row < $ r ; -- $ i ) echo $ mat [ $ high_row ] [ $ i ] , \" \u2581 \" ; $ high_row += 1 ; for ( $ i = $ high_row - 2 ; $ i > $ low_row && $ i >= 0 && $ low_column >= 0 ; -- $ i ) echo $ mat [ $ i ] [ $ low_column ] , \" \u2581 \" ; $ low_column -= 1 ; } echo \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ; $ r = 3 ; $ c = 3 ;"}
{"text":"Function calling","code":"printSpiral ( $ mat , $ r , $ c ) ; ? >"}
{"text":"PHP program to find the difference between the sum of diagonal .","code":"< ? php function difference ( $ arr , $ n ) {"}
{"text":"Initialize sums of diagonals","code":"$ d1 = 0 ; $ d2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"finding sum of primary diagonal","code":"if ( $ i == $ j ) $ d1 += $ arr [ $ i ] [ $ j ] ;"}
{"text":"finding sum of secondary diagonal","code":"if ( $ i == $ n - $ j - 1 ) $ d2 += $ arr [ $ i ] [ $ j ] ; } }"}
{"text":"Absolute difference of the sums across the diagonals","code":"return abs ( $ d1 - $ d2 ) ; }"}
{"text":"Driver Code","code":"{ $ n = 3 ; $ arr = array ( array ( 11 , 2 , 4 ) , array ( 4 , 5 , 6 ) , array ( 10 , 8 , -12 ) ) ; echo difference ( $ arr , $ n ) ; return 0 ; } ? >"}
{"text":"PHP program to find the difference between the sum of diagonal .","code":"< ? php function difference ( $ arr , $ n ) {"}
{"text":"Initialize sums of diagonals","code":"$ d1 = 0 ; $ d2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ d1 += $ arr [ $ i ] [ $ i ] ; $ d2 += $ arr [ $ i ] [ $ n - $ i - 1 ] ; }"}
{"text":"Absolute difference of the sums across the diagonals","code":"return abs ( $ d1 - $ d2 ) ; }"}
{"text":"Driver Code","code":"{ $ n = 3 ; $ arr = array ( array ( 11 , 2 , 4 ) , array ( 4 , 5 , 6 ) , array ( 10 , 8 , -12 ) ) ; echo difference ( $ arr , $ n ) ; return 0 ; } ? >"}
{"text":"Fills a [ m ] [ n ] with values from 1 to m * n in spiral fashion .","code":"< ? php function spiralFill ( $ m , $ n , & $ a ) {"}
{"text":"Initialize value to be filled in matrix","code":"$ val = 1 ;"}
{"text":"k - starting row index m - ending row index l - starting column index n - ending column index","code":"$ k = 0 ; $ l = 0 ; while ( $ k < $ m && $ l < $ n ) {"}
{"text":"Print the first row from the remaining rows","code":"for ( $ i = $ l ; $ i < $ n ; ++ $ i ) $ a [ $ k ] [ $ i ] = $ val ++ ; $ k ++ ;"}
{"text":"Print the last column from the remaining columns","code":"for ( $ i = $ k ; $ i < $ m ; ++ $ i ) $ a [ $ i ] [ $ n - 1 ] = $ val ++ ; $ n -- ;"}
{"text":"Print the last row from the remaining rows","code":"if ( $ k < $ m ) { for ( $ i = $ n - 1 ; $ i >= $ l ; -- $ i ) $ a [ $ m - 1 ] [ $ i ] = $ val ++ ; $ m -- ; }"}
{"text":"Print the first column from the remaining columns","code":"if ( $ l < $ n ) { for ( $ i = $ m - 1 ; $ i >= $ k ; -- $ i ) $ a [ $ i ] [ $ l ] = $ val ++ ; $ l ++ ; } } }"}
{"text":"Driver Code","code":"$ m = 4 ; $ n = 4 ; spiralFill ( $ m , $ n , $ a ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { echo ( $ a [ $ i ] [ $ j ] ) ; echo ( \" \u2581 \" ) ; } echo ( \" STRNEWLINE \" ) ; } ? >"}
{"text":"PHP program for finding maximum and minimum in a matrix .","code":"< ? php $ MAX = 100 ;"}
{"text":"Finds maximum and minimum in arr [ 0. . n - 1 ] [ 0. . n - 1 ] using pair wise comparisons","code":"function maxMin ( $ arr , $ n ) { $ min = PHP_INT_MAX ; $ max = PHP_INT_MIN ;"}
{"text":"Traverses rows one by one","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n \/ 2 ; $ j ++ ) {"}
{"text":"Compare elements from beginning and end of current row","code":"if ( $ arr [ $ i ] [ $ j ] > $ arr [ $ i ] [ $ n - $ j - 1 ] ) { if ( $ min > $ arr [ $ i ] [ $ n - $ j - 1 ] ) $ min = $ arr [ $ i ] [ $ n - $ j - 1 ] ; if ( $ max < $ arr [ $ i ] [ $ j ] ) $ max = $ arr [ $ i ] [ $ j ] ; } else { if ( $ min > $ arr [ $ i ] [ $ j ] ) $ min = $ arr [ $ i ] [ $ j ] ; if ( $ max < $ arr [ $ i ] [ $ n - $ j - 1 ] ) $ max = $ arr [ $ i ] [ $ n - $ j - 1 ] ; } } } echo \" Maximum = \" \u2581 , \u2581 $ max STRNEWLINE , \" , Minimum = \" }"}
{"text":"Driver Code","code":"$ arr = array ( array ( 5 , 9 , 11 ) , array ( 25 , 0 , 14 ) , array ( 21 , 6 , 4 ) ) ; maxMin ( $ arr , 3 ) ; ? >"}
{"text":"PHP program to find minimum operations required to set all the element of binary matrix","code":"< ? php $ N = 5 ; $ M = 5 ;"}
{"text":"Return minimum operation required to make all 1 s .","code":"function minOperation ( & $ arr ) { global $ N , $ M ; $ ans = 0 ; for ( $ i = $ N - 1 ; $ i >= 0 ; $ i -- ) { for ( $ j = $ M - 1 ; $ j >= 0 ; $ j -- ) {"}
{"text":"check if this cell equals 0","code":"if ( $ arr [ $ i ] [ $ j ] == 0 ) {"}
{"text":"increase the number of moves","code":"$ ans ++ ;"}
{"text":"flip from this cell to the start point","code":"for ( $ k = 0 ; $ k <= $ i ; $ k ++ ) { for ( $ h = 0 ; $ h <= $ j ; $ h ++ ) {"}
{"text":"flip the cell","code":"if ( $ arr [ $ k ] [ $ h ] == 1 ) $ arr [ $ k ] [ $ h ] = 0 ; else $ arr [ $ k ] [ $ h ] = 1 ; } } } } } return $ ans ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 0 , 0 , 1 , 1 , 1 ) , array ( 0 , 0 , 0 , 1 , 1 ) , array ( 0 , 0 , 0 , 1 , 1 ) , array ( 1 , 1 , 1 , 1 , 1 ) , array ( 1 , 1 , 1 , 1 , 1 ) ) ; echo minOperation ( $ mat ) ; ? >"}
{"text":"Return sum of matrix element where each element is division of its corresponding row and column .","code":"< ? php function findSum ( $ n ) { $ ans = 0 ; $ temp = 0 ; $ num ;"}
{"text":"For each column .","code":"for ( $ i = 1 ; $ i <= $ n and $ temp < $ n ; $ i ++ ) {"}
{"text":"count the number of elements of each column . Initialize to i - 1 because number of zeroes are i - 1.","code":"$ temp = $ i - 1 ;"}
{"text":"For multiply","code":"$ num = 1 ; while ( $ temp < $ n ) { if ( $ temp + $ i <= $ n ) $ ans += ( $ i * $ num ) ; else $ ans += ( ( $ n - $ temp ) * $ num ) ; $ temp += $ i ; $ num ++ ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ N = 2 ; echo findSum ( $ N ) ; ? >"}
{"text":"PHP program to find number of countOpsation to make two matrix equals","code":"< ? php function countOps ( $ A , $ B , $ m , $ n ) { $ MAX = 1000 ;"}
{"text":"Update matrix A [ ] [ ] so that only A [ ] [ ] has to be countOpsed","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ m ; $ j ++ ) $ A [ $ i ] [ $ j ] -= $ B [ $ i ] [ $ j ] ;"}
{"text":"Check necessary condition for condition for existence of full countOpsation","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = 1 ; $ j < $ m ; $ j ++ ) if ( $ A [ $ i ] [ $ j ] - $ A [ $ i ] [ 0 ] - $ A [ 0 ] [ $ j ] + $ A [ 0 ] [ 0 ] != 0 ) return -1 ;"}
{"text":"If countOpsation is possible calculate total countOpsation","code":"$ result = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ result += abs ( $ A [ $ i ] [ 0 ] ) ; for ( $ j = 0 ; $ j < $ m ; $ j ++ ) $ result += abs ( $ A [ 0 ] [ $ j ] - $ A [ 0 ] [ 0 ] ) ; return ( $ result ) ; }"}
{"text":"Driver code","code":"$ A = array ( array ( 1 , 1 , 1 ) , array ( 1 , 1 , 1 ) , array ( 1 , 1 , 1 ) ) ; $ B = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ; echo countOps ( $ A , $ B , 3 , 3 ) ; ? >"}
{"text":"Print coils in a matrix of size 4 n x 4 n","code":"< ? php function printCoils ( $ n ) {"}
{"text":"Number of elements in each coil","code":"$ m = 8 * $ n * $ n ;"}
{"text":"Let us fill elements in coil 1.","code":"$ coil1 = array ( ) ;"}
{"text":"First element of coil1 4 * n * 2 * n + 2 * n ;","code":"$ coil1 [ 0 ] = 8 * $ n * $ n + 2 * $ n ; $ curr = $ coil1 [ 0 ] ; $ nflg = 1 ; $ step = 2 ;"}
{"text":"Fill remaining m - 1 elements in coil1 [ ]","code":"$ index = 1 ; while ( $ index < $ m ) {"}
{"text":"Fill elements of current step from down to up","code":"for ( $ i = 0 ; $ i < $ step ; $ i ++ ) {"}
{"text":"Next element from current element","code":"$ curr = $ coil1 [ $ index ++ ] = ( $ curr - 4 * $ n * $ nflg ) ; if ( $ index >= $ m ) break ; } if ( $ index >= $ m ) break ;"}
{"text":"Fill elements of current step from up to down .","code":"for ( $ i = 0 ; $ i < $ step ; $ i ++ ) { $ curr = $ coil1 [ $ index ++ ] = $ curr + $ nflg ; if ( $ index >= $ m ) break ; } $ nflg = $ nflg * ( -1 ) ; $ step += 2 ; }"}
{"text":"get coil2 from coil1","code":"$ coil2 = array ( ) ; for ( $ i = 0 ; $ i < 8 * $ n * $ n ; $ i ++ ) $ coil2 [ $ i ] = 16 * $ n * $ n + 1 - $ coil1 [ $ i ] ;"}
{"text":"Print both coils","code":"echo \" Coil \u2581 1 \u2581 : \u2581 \" ; for ( $ i = 0 ; $ i < 8 * $ n * $ n ; $ i ++ ) echo $ coil1 [ $ i ] , \" \u2581 \" ; echo \" Coil 2 : \" ; for ( $ i = 0 ; $ i < 8 * $ n * $ n ; $ i ++ ) echo $ coil2 [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 1 ; printCoils ( $ n ) ; ? >"}
{"text":"Retuen the sum of matrix in which each element is absolute difference of its corresponding row and column number row","code":"< ? php function findSum ( $ n ) {"}
{"text":"Generate matrix","code":"$ arr = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ arr [ $ i ] [ $ j ] = abs ( $ i - $ j ) ;"}
{"text":"Compute sum","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ sum += $ arr [ $ i ] [ $ j ] ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo findSum ( $ n ) ; ? >"}
{"text":"Return the sum of matrix in which each element is absolute difference of its corresponding row and column number row","code":"< ? php function findSum ( $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ i * ( $ n - $ i ) ; return 2 * $ sum ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo findSum ( $ n ) ; ? >"}
{"text":"Retuen the sum of matrix in which each element is absolute difference of its corresponding row and column number row","code":"< ? php function findSum ( $ n ) { $ n -- ; $ sum = 0 ; $ sum += ( $ n * ( $ n + 1 ) ) \/ 2 ; $ sum += ( $ n * ( $ n + 1 ) * ( 2 * $ n + 1 ) ) \/ 6 ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo findSum ( $ n ) ; ? >"}
{"text":"function returns sum of diagonals","code":"< ? php function spiralDiaSum ( $ n ) { if ( $ n == 1 ) return 1 ;"}
{"text":"as order should be only odd we should pass only odd - integers","code":"return ( 4 * $ n * $ n - 6 * $ n + 6 + spiralDiaSum ( $ n - 2 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 7 ; echo spiralDiaSum ( $ n ) ; ? >"}
{"text":"PHP program to find perimeter of area covered by 1 in 2D matrix consisits of 0 ' s \u2581 and \u2581 1' s .","code":"< ? php $ R = 3 ; $ C = 5 ;"}
{"text":"Find the number of covered side for mat [ i ] [ j ] .","code":"function numofneighbour ( $ mat , $ i , $ j ) { global $ R ; global $ C ; $ count = 0 ;"}
{"text":"UP","code":"if ( $ i > 0 && ( $ mat [ $ i - 1 ] [ $ j ] ) ) $ count ++ ;"}
{"text":"LEFT","code":"if ( $ j > 0 && ( $ mat [ $ i ] [ $ j - 1 ] ) ) $ count ++ ;"}
{"text":"DOWN","code":"if ( ( $ i < $ R - 1 ) && ( $ mat [ $ i + 1 ] [ $ j ] ) ) $ count ++ ;"}
{"text":"RIGHT","code":"if ( ( $ j < $ C - 1 ) && ( $ mat [ $ i ] [ $ j + 1 ] ) ) $ count ++ ; return $ count ; }"}
{"text":"Returns sum of perimeter of shapes formed with 1 s","code":"function findperimeter ( $ mat ) { global $ R ; global $ C ; $ perimeter = 0 ;"}
{"text":"Traversing the matrix and finding ones to calculate their contribution .","code":"for ( $ i = 0 ; $ i < $ R ; $ i ++ ) for ( $ j = 0 ; $ j < $ C ; $ j ++ ) if ( $ mat [ $ i ] [ $ j ] ) $ perimeter += ( 4 - numofneighbour ( $ mat , $ i , $ j ) ) ; return $ perimeter ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 0 , 1 , 0 , 0 , 0 ) , array ( 1 , 1 , 1 , 0 , 0 ) , array ( 1 , 0 , 0 , 0 , 0 ) ) ; echo findperimeter ( $ mat ) , \" STRNEWLINE \" ; ? >"}
{"text":"php program to print matrix in diagonal order","code":"< ? php $ MAX = 100 ; function printMatrixDiagonal ( $ mat , $ n ) {"}
{"text":"Initialize indexes of element to be printed next","code":"$ i = 0 ; $ j = 0 ;"}
{"text":"Direction is initially from down to up","code":"$ isUp = true ;"}
{"text":"Traverse the matrix till all elements get traversed","code":"for ( $ k = 0 ; $ k < $ n * $ n {"}
{"text":"If isUp = true then traverse from downward to upward","code":"if ( $ isUp ) { for ( ; $ i >= 0 && $ j < $ n ; $ j ++ , $ i -- ) { echo $ mat [ $ i ] [ $ j ] . \" \" ; $ k ++ ; }"}
{"text":"Set i and j according to direction","code":"if ( $ i < 0 && $ j <= $ n - 1 ) $ i = 0 ; if ( $ j == $ n ) { $ i = $ i + 2 ; $ j -- ; } }"}
{"text":"If isUp = 0 then traverse up to down","code":"else { for ( ; $ j >= 0 && $ i < $ n ; $ i ++ , $ j -- ) { echo $ mat [ $ i ] [ $ j ] . \" \" ; $ k ++ ; }"}
{"text":"Set i and j according to direction","code":"if ( $ j < 0 && $ i <= $ n - 1 ) $ j = 0 ; if ( $ i == $ n ) { $ j = $ j + 2 ; $ i -- ; } }"}
{"text":"Revert the isUp to change the direction","code":"$ isUp = ! $ isUp ; } }"}
{"text":"Driver code","code":"$ mat = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ; $ n = 3 ; printMatrixDiagonal ( $ mat , $ n ) ; ? >"}
{"text":"PHP program to find maximum difference of sum of elements of two rows","code":"< ? php $ MAX = 100 ;"}
{"text":"Function to find maximum difference of sum of elements of two rows such that second row appears before first row .","code":"function maxRowDiff ( $ mat , $ m , $ n ) { global $ MAX ;"}
{"text":"auxiliary array to store sum of all elements of each row","code":"$ rowSum = array ( ) ;"}
{"text":"calculate sum of each row and store it in rowSum array","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ sum = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ sum += $ mat [ $ i ] [ $ j ] ; $ rowSum [ $ i ] = $ sum ; }"}
{"text":"calculating maximum difference of two elements such that rowSum [ i ] < rowsum [ j ]","code":"$ max_diff = $ rowSum [ 1 ] - $ rowSum [ 0 ] ; $ min_element = $ rowSum [ 0 ] ; for ( $ i = 1 ; $ i < $ m ; $ i ++ ) {"}
{"text":"if current difference is greater than previous then update it","code":"if ( $ rowSum [ $ i ] - $ min_element > $ max_diff ) $ max_diff = $ rowSum [ $ i ] - $ min_element ;"}
{"text":"if new element is less than previous minimum element then update it so that we may get maximum difference in remaining array","code":"if ( $ rowSum [ $ i ] < $ min_element ) $ min_element = $ rowSum [ $ i ] ; } return $ max_diff ; }"}
{"text":"Driver Code","code":"$ m = 5 ; $ n = 4 ; $ mat = array ( array ( -1 , 2 , 3 , 4 ) , array ( 5 , 3 , -2 , 1 ) , array ( 6 , 7 , 2 , -3 ) , array ( 2 , 9 , 1 , 4 ) , array ( 2 , 1 , -2 , 0 ) ) ; echo maxRowDiff ( $ mat , $ m , $ n ) ; ? >"}
{"text":"PHP program to find number of sorted rows","code":"< ? php $ MAX = 100 ;"}
{"text":"Function to count all sorted rows in a matrix","code":"function sortedCount ( $ mat , $ r , $ c ) {"}
{"text":"Initialize result","code":"$ result = 0 ;"}
{"text":"Start from left side of matrix to count increasing order rows","code":"for ( $ i = 0 ; $ i < $ r ; $ i ++ ) {"}
{"text":"Check if there is any pair ofs element that are not in increasing order .","code":"$ j ; for ( $ j = 0 ; $ j < $ c - 1 ; $ j ++ ) if ( $ mat [ $ i ] [ $ j + 1 ] <= $ mat [ $ i ] [ $ j ] ) break ;"}
{"text":"If the loop didn 't break  (All elements of current row were in increasing order)","code":"if ( $ j == $ c - 1 ) $ result ++ ; }"}
{"text":"Start from right side of matrix to count increasing order rows ( reference to left these are in decreasing order )","code":"for ( $ i = 0 ; $ i < $ r ; $ i ++ ) {"}
{"text":"Check if there is any pair ofs element that are not in decreasing order .","code":"$ j ; for ( $ j = $ c - 1 ; $ j > 0 ; $ j -- ) if ( $ mat [ $ i ] [ $ j - 1 ] <= $ mat [ $ i ] [ $ j ] ) break ;"}
{"text":"Note c > 1 condition is required to make sure that a single column row is not counted twice ( Note that a single column row is sorted both in increasing and decreasing order )","code":"if ( $ c > 1 && $ j == 0 ) $ result ++ ; } return $ result ; }"}
{"text":"Driver Code","code":"$ m = 4 ; $ n = 5 ; $ mat = array ( array ( 1 , 2 , 3 , 4 , 5 ) , array ( 4 , 3 , 1 , 2 , 6 ) , array ( 8 , 7 , 6 , 5 , 4 ) , array ( 5 , 7 , 8 , 9 , 10 ) ) ; echo sortedCount ( $ mat , $ m , $ n ) ; ? >"}
{"text":"PHP program to Find maximum XOR value in matrix either row or column wise maximum number of row and column","code":"< ? php $ MAX = 1000 ;"}
{"text":"function return the maximum xor value that is either row or column wise","code":"function maxXOR ( $ mat , $ N ) {"}
{"text":"for row xor and column xor","code":"$ r_xor ; $ c_xor ; $ max_xor = 0 ;"}
{"text":"traverse matrix","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ r_xor = 0 ; $ c_xor = 0 ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) {"}
{"text":"xor row element","code":"$ r_xor = $ r_xor ^ $ mat [ $ i ] [ $ j ] ;"}
{"text":"for each column : j is act as row & i act as column xor column element","code":"$ c_xor = $ c_xor ^ $ mat [ $ j ] [ $ i ] ; }"}
{"text":"update maximum between r_xor , c_xor","code":"if ( $ max_xor < max ( $ r_xor , $ c_xor ) ) $ max_xor = max ( $ r_xor , $ c_xor ) ; }"}
{"text":"return maximum xor value","code":"return $ max_xor ; }"}
{"text":"Driver Code","code":"$ N = 3 ; $ mat = array ( array ( 1 , 5 , 4 ) , array ( 3 , 7 , 2 ) , array ( 5 , 9 , 10 ) ) ; echo \" maximum \u2581 XOR \u2581 value \u2581 : \u2581 \" , maxXOR ( $ mat , $ N ) ; ? >"}
{"text":"Function which tells the Current direction","code":"< ? php function direction ( $ R , $ C ) { if ( $ R != $ C && $ R % 2 == 0 && $ C % 2 != 0 && $ R < $ C ) { echo \" Left \" , \" STRNEWLINE \" ; return ; } if ( $ R != $ C && $ R % 2 != 0 && $ C % 2 == 0 && $ R > $ C ) { echo \" Up \" , \" STRNEWLINE \" ; return ; } if ( $ R == $ C && $ R % 2 != 0 && $ C % 2 != 0 ) { echo \" Right \" , \" STRNEWLINE \" ; return ; } if ( $ R == $ C && $ R % 2 == 0 && $ C % 2 == 0 ) { echo \" Left \" , \" STRNEWLINE \" ; return ; } if ( $ R != $ C && $ R % 2 != 0 && $ C % 2 != 0 && $ R < $ C ) { echo \" Right \" , \" STRNEWLINE \" ; return ; } if ( $ R != $ C && $ R % 2 != 0 && $ C % 2 != 0 && $ R > $ C ) { echo \" Down \" , \" STRNEWLINE \" ; return ; } if ( $ R != $ C && $ R % 2 == 0 && $ C % 2 == 0 && $ R < $ C ) { echo \" Left \" , \" STRNEWLINE \" ; return ; } if ( $ R != $ C && $ R % 2 == 0 && $ C % 2 == 0 && $ R > $ C ) { echo \" Up \" , \" STRNEWLINE \" ; return ; } if ( $ R != $ C && $ R % 2 == 0 && $ C % 2 != 0 && $ R > $ C ) { echo \" Down \" , \" STRNEWLINE \" ; return ; } if ( $ R != $ C && $ R % 2 != 0 && $ C % 2 == 0 && $ R < $ C ) { echo \" Right \" , \" STRNEWLINE \" ; return ; } }"}
{"text":"Driver Code","code":"$ R = 3 ; $ C = 1 ; direction ( $ R , $ C ) ; ? >"}
{"text":"Function to check if all elements present in descending diagonal starting from position ( i , j ) in the matrix are all same or not","code":"< ? php function checkDiagonal ( $ mat , $ i , $ j ) { $ N = 5 ; $ M = 4 ; $ res = $ mat [ $ i ] [ $ j ] ; while ( ++ $ i < $ N && ++ $ j < $ M ) {"}
{"text":"mismatch found","code":"if ( $ mat [ $ i ] [ $ j ] != $ res ) return false ; }"}
{"text":"we only reach here when all elements in given diagonal are same","code":"return true ; }"}
{"text":"Function to check whether given matrix is a Toeplitz matrix or not","code":"function isToepliz ( $ mat ) { $ N = 5 ; $ M = 4 ;"}
{"text":"do for each element in first row","code":"for ( $ i = 0 ; $ i < $ M ; $ i ++ ) {"}
{"text":"check descending diagonal starting from position ( 0 , j ) in the matrix","code":"if ( ! checkDiagonal ( $ mat , 0 , $ i ) ) return false ; }"}
{"text":"do for each element in first column","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) {"}
{"text":"check descending diagonal starting from position ( i , 0 ) in the matrix","code":"if ( ! checkDiagonal ( $ mat , $ i , 0 ) ) return false ; }"}
{"text":"we only reach here when each descending diagonal from left to right is same","code":"return true ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( 6 , 7 , 8 , 9 ) , array ( 4 , 6 , 7 , 8 ) , array ( 1 , 4 , 6 , 7 ) , array ( 0 , 1 , 4 , 6 ) , array ( 2 , 0 , 1 , 4 ) ) ;"}
{"text":"Function call","code":"if ( isToepliz ( $ mat ) ) echo \" Matrix \u2581 is \u2581 a \u2581 Toepliz \u2581 \" ; else echo \" Matrix \u2581 is \u2581 not \u2581 a \u2581 Toepliz \u2581 \" ; ? >"}
{"text":"PHP program to count number of 0 s in the given row - wise and column - wise sorted binary matrix .","code":"< ? php $ N = 5 ;"}
{"text":"Function to count number of 0 s in the given row - wise and column - wise sorted binary matrix .","code":"function countZeroes ( $ mat ) {"}
{"text":"start from bottom - left corner of the matrix","code":"$ row = $ N - 1 ; $ col = 0 ;"}
{"text":"stores number of zeroes in the matrix","code":"$ count = 0 ; while ( $ col < $ N ) {"}
{"text":"move up until you find a 0","code":"while ( $ mat [ $ row ] [ $ col ] )"}
{"text":"if zero is not found in current column , we are done","code":"if ( -- $ row < 0 ) return $ count ;"}
{"text":"add 0 s present in current column to result","code":"$ count += ( $ row + 1 ) ;"}
{"text":"move right to next column","code":"$ col ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 0 , 0 , 0 , 0 , 1 ) , array ( 0 , 0 , 0 , 1 , 1 ) , array ( 0 , 1 , 1 , 1 , 1 ) , array ( 1 , 1 , 1 , 1 , 1 ) , array ( 1 , 1 , 1 , 1 , 1 ) ) ; echo countZeroes ( $ mat ) ; ? >"}
{"text":"size of binary square matrix","code":"< ? php $ N = 10 ;"}
{"text":"Function to find the size of the largest ' + ' formed by all 1 's in given binary matrix","code":"function findLargestPlus ( $ mat ) { global $ N ;"}
{"text":"left [ j ] [ j ] , right [ i ] [ j ] , top [ i ] [ j ] and bottom [ i ] [ j ] store maximum number of consecutive 1 's present to the left,  right, top and bottom of mat[i][j]  including cell(i, j) respectively","code":"$ left [ $ N ] [ $ N ] = array ( ) ; $ right [ $ N ] [ $ N ] = array ( ) ; $ top [ $ N ] [ $ N ] = array ( ) ; $ bottom [ $ N ] [ $ N ] = array ( ) ;"}
{"text":"initialize above four matrix","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"initialize first row of top","code":"$ top [ 0 ] [ $ i ] = $ mat [ 0 ] [ $ i ] ;"}
{"text":"initialize last row of bottom","code":"$ bottom [ $ N - 1 ] [ $ i ] = $ mat [ $ N - 1 ] [ $ i ] ;"}
{"text":"initialize first column of left","code":"$ left [ $ i ] [ 0 ] = $ mat [ $ i ] [ 0 ] ;"}
{"text":"initialize last column of right","code":"$ right [ $ i ] [ $ N - 1 ] = $ mat [ $ i ] [ $ N - 1 ] ; }"}
{"text":"fill all cells of above four matrix","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 1 ; $ j < $ N ; $ j ++ ) {"}
{"text":"calculate left matrix ( filled left to right )","code":"if ( $ mat [ $ i ] [ $ j ] == 1 ) $ left [ $ i ] [ $ j ] = $ left [ $ i ] [ $ j - 1 ] + 1 ; else $ left [ $ i ] [ $ j ] = 0 ;"}
{"text":"calculate top matrix","code":"if ( $ mat [ $ j ] [ $ i ] == 1 ) $ top [ $ j ] [ $ i ] = $ top [ $ j - 1 ] [ $ i ] + 1 ; else $ top [ $ j ] [ $ i ] = 0 ;"}
{"text":"calculate new value of j to calculate value of bottom ( i , j ) and right ( i , j )","code":"$ j = $ N - 1 - $ j ;"}
{"text":"calculate bottom matrix","code":"if ( $ mat [ $ j ] [ $ i ] == 1 ) $ bottom [ $ j ] [ $ i ] = $ bottom [ $ j + 1 ] [ $ i ] + 1 ; else $ bottom [ $ j ] [ $ i ] = 0 ;"}
{"text":"calculate right matrix","code":"if ( $ mat [ $ i ] [ $ j ] == 1 ) $ right [ $ i ] [ $ j ] = $ right [ $ i ] [ $ j + 1 ] + 1 ; else $ right [ $ i ] [ $ j ] = 0 ;"}
{"text":"revert back to old j","code":"$ j = $ N - 1 - $ j ; } }"}
{"text":"n stores length of longest + found so far","code":"$ n = 0 ;"}
{"text":"compute longest +","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) {"}
{"text":"find minimum of left ( i , j ) , right ( i , j ) , top ( i , j ) , bottom ( i , j )","code":"$ len = min ( min ( $ top [ $ i ] [ $ j ] , $ bottom [ $ i ] [ $ j ] ) , min ( $ left [ $ i ] [ $ j ] , $ right [ $ i ] [ $ j ] ) ) ;"}
{"text":"largest + would be formed by a cell that has maximum value","code":"if ( $ len > $ n ) $ n = $ len ; } }"}
{"text":"4 directions of length n - 1 and 1 for middle cell","code":"if ( $ n ) return 4 * ( $ n - 1 ) + 1 ;"}
{"text":"matrix contains all 0 's","code":"return 0 ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 ) , array ( 1 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 ) , array ( 1 , 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 ) , array ( 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 0 ) , array ( 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 1 ) , array ( 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 ) , array ( 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 ) , array ( 1 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 ) , array ( 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 0 , 1 ) , array ( 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 0 , 0 ) ) ; echo findLargestPlus ( $ mat ) ; ? >"}
{"text":"Returns left of str in an expanding matrix of a , b , c and d .","code":"< ? php function findLeft ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Start from rightmost position","code":"while ( $ n -- ) {"}
{"text":"If the current character is b or d , change to a or c respectively and break the loop","code":"if ( $ str [ $ n ] == ' d ' ) { $ str [ $ n ] = ' c ' ; break ; } if ( $ str [ $ n ] == ' b ' ) { $ str [ $ n ] = ' a ' ; break ; }"}
{"text":"If the current character is a or c , change it to b or d respectively","code":"if ( $ str [ $ n ] == ' a ' ) $ str [ $ n ] = ' b ' ; else if ( $ str [ $ n ] == ' c ' ) $ str [ $ n ] = ' d ' ; } return $ str ; }"}
{"text":"Driver Code","code":"$ str = \" aacbddc \" ; echo \" Left \u2581 of \u2581 \" . $ str . \" \u2581 is \u2581 \" . findLeft ( $ str ) ; return 0 ; ? >"}
{"text":"Prints spiral matrix of size n x n containing numbers from 1 to n x n","code":"< ? php function printSpiral ( $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"x stores the layer in which ( i , j ) th element lies","code":"$ x ;"}
{"text":"Finds minimum of four inputs","code":"$ x = min ( min ( $ i , $ j ) , min ( $ n - 1 - $ i , $ n - 1 - $ j ) ) ;"}
{"text":"For upper right half","code":"if ( $ i <= $ j ) echo \" TABSYMBOL \u2581 \" , ( $ n - 2 * $ x ) * ( $ n - 2 * $ x ) - ( $ i - $ x ) - ( $ j - $ x ) ;"}
{"text":"for lower left half","code":"else echo \" TABSYMBOL \u2581 \" , ( $ n - 2 * $ x - 2 ) * ( $ n - 2 * $ x - 2 ) + ( $ i - $ x ) + ( $ j - $ x ) ; } echo \" \" } }"}
{"text":"Driver code","code":"$ n = 5 ;"}
{"text":"print a n x n spiral matrix in O ( 1 ) space","code":"printSpiral ( $ n ) ; ? >"}
{"text":"PHP Code For A Boolean Matrix Question","code":"< ? php $ R = 3 ; $ C = 4 ; function modifyMatrix ( & $ mat ) { global $ R , $ C ; $ row = array ( ) ; $ col = array ( ) ;"}
{"text":"Initialize all values of row [ ] as 0","code":"for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { $ row [ $ i ] = 0 ; }"}
{"text":"Initialize all values of col [ ] as 0","code":"for ( $ i = 0 ; $ i < $ C ; $ i ++ ) { $ col [ $ i ] = 0 ; }"}
{"text":"Store the rows and columns to be marked as 1 in row [ ] and col [ ] arrays respectively","code":"for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { for ( $ j = 0 ; $ j < $ C ; $ j ++ ) { if ( $ mat [ $ i ] [ $ j ] == 1 ) { $ row [ $ i ] = 1 ; $ col [ $ j ] = 1 ; } } }"}
{"text":"Modify the input matrix mat [ ] using the above constructed row [ ] and col [ ] arrays","code":"for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { for ( $ j = 0 ; $ j < $ C ; $ j ++ ) { if ( $ row [ $ i ] == 1 $ col [ $ j ] == 1 ) { $ mat [ $ i ] [ $ j ] = 1 ; } } } }"}
{"text":"A utility function to print a 2D matrix","code":"function printMatrix ( & $ mat ) { global $ R , $ C ; for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { for ( $ j = 0 ; $ j < $ C ; $ j ++ ) { echo $ mat [ $ i ] [ $ j ] . \" \" ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ mat = array ( array ( 1 , 0 , 0 , 1 ) , array ( 0 , 0 , 1 , 0 ) , array ( 0 , 0 , 0 , 0 ) ) ; echo \" Input \u2581 Matrix \u2581 STRNEWLINE \" ; printMatrix ( $ mat ) ; modifyMatrix ( $ mat ) ; echo \" Matrix \u2581 after \u2581 modification \u2581 STRNEWLINE \" ; printMatrix ( $ mat ) ; ? >"}
{"text":"PHP Code For A Boolean Matrix Question","code":"< ? php $ R = 3 ; $ C = 4 ; function modifyMatrix ( & $ mat ) { global $ R , $ C ;"}
{"text":"variables to check if there are any 1 in first row and column","code":"$ row_flag = false ; $ col_flag = false ;"}
{"text":"updating the first row and col if 1 is encountered","code":"for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { for ( $ j = 0 ; $ j < $ C ; $ j ++ ) { if ( $ i == 0 && $ mat [ $ i ] [ $ j ] == 1 ) $ row_flag = true ; if ( $ j == 0 && $ mat [ $ i ] [ $ j ] == 1 ) $ col_flag = true ; if ( $ mat [ $ i ] [ $ j ] == 1 ) { $ mat [ 0 ] [ $ j ] = 1 ; $ mat [ $ i ] [ 0 ] = 1 ; } } }"}
{"text":"Modify the input matrix mat [ ] using the first row and first column of Matrix mat","code":"for ( $ i = 1 ; $ i < $ R ; $ i ++ ) { for ( $ j = 1 ; $ j < $ C ; $ j ++ ) { if ( $ mat [ 0 ] [ $ j ] == 1 $ mat [ $ i ] [ 0 ] == 1 ) { $ mat [ $ i ] [ $ j ] = 1 ; } } }"}
{"text":"modify first row if there was any 1","code":"if ( $ row_flag == true ) { for ( $ i = 0 ; $ i < $ C ; $ i ++ ) { $ mat [ 0 ] [ $ i ] = 1 ; } }"}
{"text":"modify first col if there was any 1","code":"if ( $ col_flag == true ) { for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { $ mat [ $ i ] [ 0 ] = 1 ; } } }"}
{"text":"A utility function to print a 2D matrix","code":"function printMatrix ( & $ mat ) { global $ R , $ C ; for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { for ( $ j = 0 ; $ j < $ C ; $ j ++ ) { echo $ mat [ $ i ] [ $ j ] . \" \" ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 1 , 0 , 0 , 1 ) , array ( 0 , 0 , 1 , 0 ) , array ( 0 , 0 , 0 , 0 ) ) ; echo \" Input \u2581 Matrix \u2581 : STRNEWLINE \" ; printMatrix ( $ mat ) ; modifyMatrix ( $ mat ) ; echo \" Matrix \u2581 After \u2581 Modification \u2581 : STRNEWLINE \" ; printMatrix ( $ mat ) ; ? >"}
{"text":"PHP program to find i such that all entries in i ' th \u2581 row \u2581 are \u2581 0 \u2581 and \u2581 all \u2581 entries \u2581 in \u2581 i ' th column are 1","code":"< ? php function find ( & $ arr ) { $ n = 5 ;"}
{"text":"Start from top - most rightmost corner ( We could start from other corners also )","code":"$ i = 0 ; $ j = $ n - 1 ;"}
{"text":"Initialize result","code":"$ res = -1 ;"}
{"text":"Find the index ( This loop runs at most 2 n times , we either increment row number or decrement column number )","code":"while ( $ i < $ n && $ j >= 0 ) {"}
{"text":"If current element is 0 , then this row may be a solution","code":"if ( $ arr [ $ i ] [ $ j ] == 0 ) {"}
{"text":"Check for all elements in this row","code":"while ( $ j >= 0 && ( $ arr [ $ i ] [ $ j ] == 0 $ i == $ j ) ) $ j -- ;"}
{"text":"If all values are 0 , then store this row as result","code":"if ( $ j == -1 ) { $ res = $ i ; break ; }"}
{"text":"We reach here if we found a 1 in current row , so this row cannot be a solution , increment row number","code":"else $ i ++ ; }"}
{"text":"If current element is 1","code":"else {"}
{"text":"Check for all elements in this column","code":"while ( $ i < $ n && ( $ arr [ $ i ] [ $ j ] == 1 $ i == $ j ) ) $ i ++ ;"}
{"text":"If all elements are 1","code":"if ( $ i == $ n ) { $ res = $ j ; break ; }"}
{"text":"We reach here if we found a 0 in current column , so this column cannot be a solution , increment column number","code":"else $ j -- ; } }"}
{"text":"If we could not find result in above loop , then result doesn 't exist","code":"if ( $ res == -1 ) return $ res ;"}
{"text":"Check if above computed res is valid","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ res != $ i && $ arr [ $ i ] [ $ res ] != 1 ) return -1 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( $ res != $ j && $ arr [ $ res ] [ $ j ] != 0 ) return -1 ; return $ res ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 0 , 0 , 1 , 1 , 0 ) , array ( 0 , 0 , 0 , 1 , 0 ) , array ( 1 , 1 , 1 , 1 , 0 ) , array ( 0 , 0 , 0 , 0 , 0 ) , array ( 1 , 1 , 1 , 1 , 1 ) ) ; echo ( find ( $ mat ) ) ; ? >"}
{"text":"Function to preprcess input mat [ M ] [ N ] . This function mainly fills aux [ M ] [ N ] such that aux [ i ] [ j ] stores sum of elements from ( 0 , 0 ) to ( i , j )","code":"< ? php function preProcess ( & $ mat , & $ aux ) { $ M = 4 ; $ N = 5 ;"}
{"text":"Copy first row of mat [ ] [ ] to aux [ ] [ ]","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ aux [ 0 ] [ $ i ] = $ mat [ 0 ] [ $ i ] ;"}
{"text":"Do column wise sum","code":"for ( $ i = 1 ; $ i < $ M ; $ i ++ ) for ( $ j = 0 ; $ j < $ N ; $ j ++ ) $ aux [ $ i ] [ $ j ] = $ mat [ $ i ] [ $ j ] + $ aux [ $ i - 1 ] [ $ j ] ;"}
{"text":"Do row wise sum","code":"for ( $ i = 0 ; $ i < $ M ; $ i ++ ) for ( $ j = 1 ; $ j < $ N ; $ j ++ ) $ aux [ $ i ] [ $ j ] += $ aux [ $ i ] [ $ j - 1 ] ; }"}
{"text":"A O ( 1 ) time function to compute sum of submatrix between ( tli , tlj ) and ( rbi , rbj ) using aux [ ] [ ] which is built by the preprocess function","code":"function sumQuery ( & $ aux , $ tli , $ tlj , $ rbi , $ rbj ) {"}
{"text":"result is now sum of elements between ( 0 , 0 ) and ( rbi , rbj )","code":"$ res = $ aux [ $ rbi ] [ $ rbj ] ;"}
{"text":"Remove elements between ( 0 , 0 ) and ( tli - 1 , rbj )","code":"if ( $ tli > 0 ) $ res = $ res - $ aux [ $ tli - 1 ] [ $ rbj ] ;"}
{"text":"Remove elements between ( 0 , 0 ) and ( rbi , tlj - 1 )","code":"if ( $ tlj > 0 ) $ res = $ res - $ aux [ $ rbi ] [ $ tlj - 1 ] ;"}
{"text":"Add aux [ tli - 1 ] [ tlj - 1 ] as elements between ( 0 , 0 ) and ( tli - 1 , tlj - 1 ) are subtracted twice","code":"if ( $ tli > 0 && $ tlj > 0 ) $ res = $ res + $ aux [ $ tli - 1 ] [ $ tlj - 1 ] ; return $ res ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 1 , 2 , 3 , 4 , 6 ) , array ( 5 , 3 , 8 , 1 , 2 ) , array ( 4 , 6 , 7 , 5 , 5 ) , array ( 2 , 4 , 8 , 9 , 4 ) ) ; preProcess ( $ mat , $ aux ) ; $ tli = 2 ; $ tlj = 2 ; $ rbi = 3 ; $ rbj = 4 ; echo ( \" Query1 : \u2581 \" ) ; echo ( sumQuery ( $ aux , $ tli , $ tlj , $ rbi , $ rbj ) ) ; $ tli = 0 ; $ tlj = 0 ; $ rbi = 1 ; $ rbj = 1 ; echo ( \" Query2 : \" echo ( sumQuery ( $ aux , $ tli , $ tlj , $ rbi , $ rbj ) ) ; $ tli = 1 ; $ tlj = 2 ; $ rbi = 3 ; $ rbj = 3 ; echo ( \" Query3 : \" echo ( sumQuery ( $ aux , $ tli , $ tlj , $ rbi , $ rbj ) ) ; ? >"}
{"text":"PHP program to find rank of a matrix","code":"< ? php $ R = 3 ; $ C = 3 ;"}
{"text":"function for exchanging two rows of a matrix","code":"function swap ( & $ mat , $ row1 , $ row2 , $ col ) { for ( $ i = 0 ; $ i < $ col ; $ i ++ ) { $ temp = $ mat [ $ row1 ] [ $ i ] ; $ mat [ $ row1 ] [ $ i ] = $ mat [ $ row2 ] [ $ i ] ; $ mat [ $ row2 ] [ $ i ] = $ temp ; } }"}
{"text":"function for finding rank of matrix","code":"function rankOfMatrix ( $ mat ) { global $ R , $ C ; $ rank = $ C ; for ( $ row = 0 ; $ row < $ rank ; $ row ++ ) {"}
{"text":"Before we visit current row ' row ' , we make sure that mat [ row ] [ 0 ] , ... . mat [ row ] [ row - 1 ] are 0. Diagonal element is not zero","code":"if ( $ mat [ $ row ] [ $ row ] ) { for ( $ col = 0 ; $ col < $ R ; $ col ++ ) { if ( $ col != $ row ) {"}
{"text":"This makes all entries of current column as 0 except entry ' mat [ row ] [ row ] '","code":"$ mult = $ mat [ $ col ] [ $ row ] \/ $ mat [ $ row ] [ $ row ] ; for ( $ i = 0 ; $ i < $ rank ; $ i ++ ) $ mat [ $ col ] [ $ i ] -= $ mult * $ mat [ $ row ] [ $ i ] ; } } }"}
{"text":"Diagonal element is already zero . Two cases arise : 1 ) If there is a row below it with non - zero entry , then swap this row with that row and process that row 2 ) If all elements in current column below mat [ r ] [ row ] are 0 , then remvoe this column by swapping it with last column and reducing number of columns by 1.","code":"else { $ reduce = true ;"}
{"text":"Find the non - zero element in current column","code":"for ( $ i = $ row + 1 ; $ i < $ R ; $ i ++ ) {"}
{"text":"Swap the row with non - zero element with this row .","code":"if ( $ mat [ $ i ] [ $ row ] ) { swap ( $ mat , $ row , $ i , $ rank ) ; $ reduce = false ; break ; } }"}
{"text":"If we did not find any row with non - zero element in current columnm , then all values in this column are 0.","code":"if ( $ reduce ) {"}
{"text":"Reduce number of columns","code":"$ rank -- ;"}
{"text":"Copy the last column here","code":"for ( $ i = 0 ; $ i < $ R ; $ i ++ ) $ mat [ $ i ] [ $ row ] = $ mat [ $ i ] [ $ rank ] ; }"}
{"text":"Process this row again","code":"$ row -- ; }"}
{"text":"Uncomment these lines to see intermediate results display ( mat , R , C ) ; printf ( \" \\n \" ) ;","code":"} return $ rank ; }"}
{"text":"function for displaying the matrix","code":"function display ( $ mat , $ row , $ col ) { for ( $ i = 0 ; $ i < $ row ; $ i ++ ) { for ( $ j = 0 ; $ j < $ col ; $ j ++ ) print ( \" \u2581 $ mat [ $ i ] [ $ j ] \" ) ; print ( \" STRNEWLINE \" ) ; } }"}
{"text":"Driver code","code":"$ mat = array ( array ( 10 , 20 , 10 ) , array ( -20 , -30 , 10 ) , array ( 30 , 50 , 0 ) ) ; print ( \" Rank \u2581 of \u2581 the \u2581 matrix \u2581 is \u2581 : \u2581 \" . rankOfMatrix ( $ mat ) ) ; ? >"}
{"text":"This function takes a matrix of ' X ' and ' O ' and returns the number of rectangular islands of ' X ' where no two islands are row - wise or column - wise adjacent , the islands may be diagonaly adjacent","code":"< ? php function countIslands ( $ mat ) { $ M = 6 ; $ N = 3 ;"}
{"text":"Initialize result","code":"$ count = 0 ;"}
{"text":"Traverse the input matrix","code":"for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) {"}
{"text":"If current cell is ' X ' , then check whether this is top - leftmost of a rectangle . If yes , then increment count","code":"if ( $ mat [ $ i ] [ $ j ] == ' X ' ) { if ( ( $ i == 0 $ mat [ $ i - 1 ] [ $ j ] == ' O ' ) && ( $ j == 0 $ mat [ $ i ] [ $ j - 1 ] == ' O ' ) ) $ count ++ ; } } } return $ count ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( ' O ' , ' O ' , ' O ' ) , array ( ' X ' , ' X ' , ' O ' ) , array ( ' X ' , ' X ' , ' O ' ) , array ( ' O ' , ' O ' , ' X ' ) , array ( ' O ' , ' O ' , ' X ' ) , array ( ' X ' , ' X ' , ' O ' ) ) ; echo \" Number \u2581 of \u2581 rectangular \u2581 islands \u2581 is \u2581 \" , countIslands ( $ mat ) ; ? >"}
{"text":"Size of given matrix is M X N","code":"< ? php $ M = 6 ; $ N = 6 ;"}
{"text":"A recursive function to replace previous value ' prevV ' at ' ( x , \u2581 y ) ' and all surrounding values of ( x , y ) with new value ' newV ' .","code":"function floodFillUtil ( & $ mat , $ x , $ y , $ prevV , $ newV ) {"}
{"text":"Base cases","code":"if ( $ x < 0 $ x >= $ GLOBALS [ ' M ' ] $ y < 0 $ y >= $ GLOBALS [ ' N ' ] ) return ; if ( $ mat [ $ x ] [ $ y ] != $ prevV ) return ;"}
{"text":"Replace the color at ( x , y )","code":"$ mat [ $ x ] [ $ y ] = $ newV ;"}
{"text":"Recur for north , east , south and west","code":"floodFillUtil ( $ mat , $ x + 1 , $ y , $ prevV , $ newV ) ; floodFillUtil ( $ mat , $ x - 1 , $ y , $ prevV , $ newV ) ; floodFillUtil ( $ mat , $ x , $ y + 1 , $ prevV , $ newV ) ; floodFillUtil ( $ mat , $ x , $ y - 1 , $ prevV , $ newV ) ; }"}
{"text":"Returns size of maximum size subsquare matrix surrounded by ' X '","code":"function replaceSurrounded ( & $ mat ) {"}
{"text":"Step 1 : Replace all ' O ' with ' - '","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' M ' ] ; $ i ++ ) for ( $ j = 0 ; $ j < $ GLOBALS [ ' N ' ] ; $ j ++ ) if ( $ mat [ $ i ] [ $ j ] == ' O ' ) $ mat [ $ i ] [ $ j ] = ' - ' ;"}
{"text":"Call floodFill for all ' - ' lying on edges","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' M ' ] ; $ i ++ ) if ( $ mat [ $ i ] [ 0 ] == ' - ' ) floodFillUtil ( $ mat , $ i , 0 , ' - ' , ' O ' ) ;"}
{"text":"Right side","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' M ' ] ; $ i ++ ) if ( $ mat [ $ i ] [ $ GLOBALS [ ' N ' ] - 1 ] == ' - ' ) floodFillUtil ( $ mat , $ i , $ GLOBALS [ ' N ' ] - 1 , ' - ' , ' O ' ) ;"}
{"text":"Top side","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) if ( $ mat [ 0 ] [ $ i ] == ' - ' ) floodFillUtil ( $ mat , 0 , $ i , ' - ' , ' O ' ) ;"}
{"text":"Bottom side","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) if ( $ mat [ $ GLOBALS [ ' M ' ] - 1 ] [ $ i ] == ' - ' ) floodFillUtil ( $ mat , $ GLOBALS [ ' M ' ] - 1 , $ i , ' - ' , ' O ' ) ;"}
{"text":"Step 3 : Replace all ' - ' with ' X '","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' M ' ] ; $ i ++ ) for ( $ j = 0 ; $ j < $ GLOBALS [ ' N ' ] ; $ j ++ ) if ( $ mat [ $ i ] [ $ j ] == ' - ' ) $ mat [ $ i ] [ $ j ] = ' X ' ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( ' X ' , ' O ' , ' X ' , ' O ' , ' X ' , ' X ' ) , array ( ' X ' , ' O ' , ' X ' , ' X ' , ' O ' , ' X ' ) , array ( ' X ' , ' X ' , ' X ' , ' O ' , ' X ' , ' X ' ) , array ( ' O ' , ' X ' , ' X ' , ' X ' , ' X ' , ' X ' ) , array ( ' X ' , ' X ' , ' X ' , ' O ' , ' X ' , ' O ' ) , array ( ' O ' , ' O ' , ' X ' , ' O ' , ' O ' , ' O ' ) ) ; replaceSurrounded ( $ mat ) ; for ( $ i = 0 ; $ i < $ GLOBALS [ ' M ' ] ; $ i ++ ) { for ( $ j = 0 ; $ j < $ GLOBALS [ ' N ' ] ; $ j ++ ) echo $ mat [ $ i ] [ $ j ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; } ? >"}
{"text":"PHP program to find the longest consecutive path","code":"< ? php $ R = 3 ; $ C = 3 ;"}
{"text":"tool matrices to recur for adjacent cells .","code":"$ x = array ( 0 , 1 , 1 , -1 , 1 , 0 , -1 , -1 ) ; $ y = array ( 1 , 0 , 1 , 1 , -1 , -1 , 0 , -1 ) ;"}
{"text":"dp [ i ] [ j ] Stores length of longest consecutive path starting at arr [ i ] [ j ] .","code":"$ dp = array_fill ( 0 , $ R , array_fill ( 0 , $ C , -1 ) ) ;"}
{"text":"check whether mat [ i ] [ j ] is a valid cell or not .","code":"function isvalid ( $ i , $ j ) { global $ R , $ C ; if ( $ i < 0 $ j < 0 $ i >= $ R $ j >= $ C ) return false ; return true ; }"}
{"text":"Check whether current character is adjacent to previous character ( character processed in parent call ) or not .","code":"function isadjacent ( $ prev , $ curr ) { return ( ( ord ( $ curr ) - ord ( $ prev ) ) == 1 ) ; }"}
{"text":"i , j are the indices of the current cell and prev is the character processed in the parent call . . also mat [ i ] [ j ] is our current character .","code":"function getLenUtil ( $ mat , $ i , $ j , $ prev ) { global $ x , $ y , $ dp ;"}
{"text":"If this cell is not valid or current character is not adjacent to previous one ( e . g . d is not adjacent to b ) or if this cell is already included in the path than return 0.","code":"if ( ! isvalid ( $ i , $ j ) || ! isadjacent ( $ prev , $ mat [ $ i ] [ $ j ] ) ) return 0 ;"}
{"text":"If this subproblem is already solved , return the answer","code":"if ( $ dp [ $ i ] [ $ j ] != -1 ) return $ dp [ $ i ] [ $ j ] ;"}
{"text":"Initialize answer","code":"$ ans = 0 ;"}
{"text":"recur for paths with different adjacent cells and store the length of longest path .","code":"for ( $ k = 0 ; $ k < 8 ; $ k ++ ) $ ans = max ( $ ans , 1 + getLenUtil ( $ mat , $ i + $ x [ $ k ] , $ j + $ y [ $ k ] , $ mat [ $ i ] [ $ j ] ) ) ;"}
{"text":"save the answer and return","code":"$ dp [ $ i ] [ $ j ] = $ ans ; return $ ans ; }"}
{"text":"Returns length of the longest path with all characters consecutive to each other . This function first initializes dp array that is used to store results of subproblems , then it calls recursive DFS based function getLenUtil ( ) to find max length path","code":"function getLen ( $ mat , $ s ) { global $ R , $ C , $ x , $ y ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { for ( $ j = 0 ; $ j < $ C ; $ j ++ ) {"}
{"text":"check for each possible starting point","code":"if ( $ mat [ $ i ] [ $ j ] == $ s ) {"}
{"text":"recur for all eight adjacent cells","code":"for ( $ k = 0 ; $ k < 8 ; $ k ++ ) $ ans = max ( $ ans , 1 + getLenUtil ( $ mat , $ i + $ x [ $ k ] , $ j + $ y [ $ k ] , $ s ) ) ; } } } return $ ans ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( ' a ' , ' c ' , ' d ' ) , array ( ' h ' , ' b ' , ' a ' ) , array ( ' i ' , ' g ' , ' f ' ) ) ; print ( getLen ( $ mat , ' a ' ) . \" \" ) ; print ( getLen ( $ mat , ' e ' ) . \" \" ) ; print ( getLen ( $ mat , ' b ' ) . \" \" ) ; print ( getLen ( $ mat , ' f ' ) . \" \" ) ; ? >"}
{"text":"PHP program to find minimum initial points to reach destination","code":"< ? php $ R = 3 ; $ C = 3 ; function minInitialPoints ( $ points ) {"}
{"text":"dp [ i ] [ j ] represents the minimum initial points player should have so that when starts with cell ( i , j ) successfully reaches the destination cell ( m - 1 , n - 1 )","code":"global $ R ; global $ C ; $ dp [ $ R ] [ $ C ] = array ( ) ; $ m = $ R ; $ n = $ C ;"}
{"text":"Base case","code":"$ dp [ $ m - 1 ] [ $ n - 1 ] = $ points [ $ m - 1 ] [ $ n - 1 ] > 0 ? 1 : abs ( $ points [ $ m - 1 ] [ $ n - 1 ] ) + 1 ;"}
{"text":"Fill last row and last column as base to fill entire table","code":"for ( $ i = $ m - 2 ; $ i >= 0 ; $ i -- ) $ dp [ $ i ] [ $ n - 1 ] = max ( $ dp [ $ i + 1 ] [ $ n - 1 ] - $ points [ $ i ] [ $ n - 1 ] , 1 ) ; for ( $ j = $ n - 2 ; $ j >= 0 ; $ j -- ) $ dp [ $ m - 1 ] [ $ j ] = max ( $ dp [ $ m - 1 ] [ $ j + 1 ] - $ points [ $ m - 1 ] [ $ j ] , 1 ) ;"}
{"text":"fill the table in bottom - up fashion","code":"for ( $ i = $ m - 2 ; $ i >= 0 ; $ i -- ) { for ( $ j = $ n - 2 ; $ j >= 0 ; $ j -- ) { $ min_points_on_exit = min ( $ dp [ $ i + 1 ] [ $ j ] , $ dp [ $ i ] [ $ j + 1 ] ) ; $ dp [ $ i ] [ $ j ] = max ( $ min_points_on_exit - $ points [ $ i ] [ $ j ] , 1 ) ; } } return $ dp [ 0 ] [ 0 ] ; }"}
{"text":"Driver Code","code":"$ points = array ( array ( -2 , -3 , 3 ) , array ( -5 , -10 , 1 ) , array ( 10 , 30 , -5 ) ) ; echo \" Minimum \u2581 Initial \u2581 Points \u2581 Required : \u2581 \" , minInitialPoints ( $ points ) ; ? >"}
{"text":"A binary search based function that returns index of a peak element","code":"< ? php function findPeakUtil ( $ arr , $ low , $ high , $ n ) {"}
{"text":"Find index of middle element ( low + high ) \/ 2","code":"$ mid = $ low + ( $ high - $ low ) \/ 2 ;"}
{"text":"Compare middle element with its neighbours ( if neighbours exist )","code":"if ( ( $ mid == 0 $ arr [ $ mid - 1 ] <= $ arr [ $ mid ] ) && ( $ mid == $ n - 1 $ arr [ $ mid + 1 ] <= $ arr [ $ mid ] ) ) return $ mid ;"}
{"text":"If middle element is not peak and its left neighbour is greater than it , then left half must have a peak element","code":"else if ( $ mid > 0 && $ arr [ $ mid - 1 ] > $ arr [ $ mid ] ) return findPeakUtil ( $ arr , $ low , ( $ mid - 1 ) , $ n ) ;"}
{"text":"If middle element is not peak and its right neighbour is greater than it , then right half must have a peak element","code":"else return ( findPeakUtil ( $ arr , ( $ mid + 1 ) , $ high , $ n ) ) ; }"}
{"text":"A wrapper over recursive function findPeakUtil ( )","code":"function findPeak ( $ arr , $ n ) { return floor ( findPeakUtil ( $ arr , 0 , $ n - 1 , $ n ) ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 20 , 4 , 1 , 0 ) ; $ n = sizeof ( $ arr ) ; echo \" Index \u2581 of \u2581 a \u2581 peak \u2581 point \u2581 is \u2581 \" , findPeak ( $ arr , $ n ) ; ? >"}
{"text":"Print Repeating function","code":"< ? php function printRepeating ( $ arr , $ size ) { $ i ; $ j ; echo \" \u2581 Repeating \u2581 elements \u2581 are \u2581 \" ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ size ; $ j ++ ) if ( $ arr [ $ i ] == $ arr [ $ j ] ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 2 , 4 , 5 , 2 , 3 , 1 ) ; $ arr_size = sizeof ( $ arr , 0 ) ; printRepeating ( $ arr , $ arr_size ) ; ? >"}
{"text":"Function","code":"< ? php function printRepeating ( $ arr , $ size ) { $ count = array_fill ( 0 , $ size , 0 ) ; echo \" Repeated \u2581 elements \u2581 are \u2581 \" ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { if ( $ count [ $ arr [ $ i ] ] == 1 ) echo $ arr [ $ i ] . \" \u2581 \" ; else $ count [ $ arr [ $ i ] ] ++ ; } }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 2 , 4 , 5 , 2 , 3 , 1 ) ; $ arr_size = count ( $ arr ) ; printRepeating ( $ arr , $ arr_size ) ; ? >"}
{"text":"printRepeating function","code":"< ? php function printRepeating ( $ arr , $ size ) {"}
{"text":"S is for sum of elements in arr [ ]","code":"$ S = 0 ;"}
{"text":"P is for product of elements in arr [ ]","code":"$ P = 1 ;"}
{"text":"x and y are two repeating elements","code":"$ x ; $ y ;"}
{"text":"D is for difference of x and y , i . e . , x - y","code":"$ D ; $ n = $ size - 2 ;"}
{"text":"Calculate Sum and Product of all elements in arr [ ]","code":"for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { $ S = $ S + $ arr [ $ i ] ; $ P = $ P * $ arr [ $ i ] ; }"}
{"text":"S is x + y now","code":"$ S = $ S - $ n * ( $ n + 1 ) \/ 2 ;"}
{"text":"P is x * y now","code":"$ P = $ P \/ fact ( $ n ) ;"}
{"text":"D is x - y now","code":"$ D = sqrt ( $ S * $ S - 4 * $ P ) ; $ x = ( $ D + $ S ) \/ 2 ; $ y = ( $ S - $ D ) \/ 2 ; echo \" The \u2581 two \u2581 Repeating \u2581 elements \u2581 are \u2581 \" . $ x . \" & \" }"}
{"text":"factorial of n","code":"function fact ( $ n ) { return ( $ n == 0 ) ? 1 : $ n * fact ( $ n - 1 ) ; }"}
{"text":"driver code","code":"$ arr = array ( 4 , 2 , 4 , 5 , 2 , 3 , 1 ) ; $ arr_size = count ( $ arr ) ; printRepeating ( $ arr , $ arr_size ) ; ? >"}
{"text":"PHP code to Find the two repeating elements in a given array","code":"< ? php function printRepeating ( $ arr , $ size ) {"}
{"text":"Will hold xor of all elements","code":"$ xor = $ arr [ 0 ] ;"}
{"text":"Will have only single set bit of xor","code":"$ set_bit_no ; $ i ; $ n = $ size - 2 ; $ x = 0 ; $ y = 0 ;"}
{"text":"Get the xor of all elements in arr [ ] and { 1 , 2 . . n }","code":"for ( $ i = 1 ; $ i < $ size ; $ i ++ ) $ xor ^= $ arr [ $ i ] ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ xor ^= $ i ;"}
{"text":"Get the rightmost set bit in set_bit_no","code":"$ set_bit_no = $ xor & ~ ( $ xor - 1 ) ;"}
{"text":"Now divide elements in two sets by comparing rightmost set bit of xor with bit at same position in each element .","code":"for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { if ( $ arr [ $ i ] & $ set_bit_no ) $ x = $ x ^ $ arr [ $ i ] ;"}
{"text":"XOR of first set in arr [ ]","code":"else $ y = $ y ^ $ arr [ $ i ] ;"}
{"text":"XOR of second set in arr [ ]","code":"} for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { if ( $ i & $ set_bit_no ) $ x = $ x ^ $ i ;"}
{"text":"XOR of first set in arr [ ] and { 1 , 2 , ... n }","code":"else $ y = $ y ^ $ i ; }"}
{"text":"XOR of second set in arr [ ] and { 1 , 2 , ... n }","code":"echo \" n \u2581 The \u2581 two \u2581 repeating \u2581 elements \u2581 are \u2581 \" ; echo $ y . \" \u2581 \" . $ x ; } ? >"}
{"text":"driver code","code":"$ arr = array ( 4 , 2 , 4 , 5 , 2 , 3 , 1 ) ; $ arr_size = count ( $ arr ) ; printRepeating ( $ arr , $ arr_size ) ;"}
{"text":"Function to print repeating","code":"< ? php function printRepeating ( $ arr , $ size ) { $ i ; echo \" The \u2581 repeating \u2581 elements \u2581 are \" , \" \u2581 \" ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { if ( $ arr [ abs ( $ arr [ $ i ] ) ] > 0 ) $ arr [ abs ( $ arr [ $ i ] ) ] = - $ arr [ abs ( $ arr [ $ i ] ) ] ; else echo abs ( $ arr [ $ i ] ) , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 2 , 4 , 5 , 2 , 3 , 1 ) ; $ arr_size = sizeof ( $ arr ) ; printRepeating ( $ arr , $ arr_size ) ; #This  code is contributed by aj_36 NEW_LINE ? >"}
{"text":"Returns true if the there is a subarray of arr [ ] with sum equal to ' sum ' otherwise returns false . Also , prints the result","code":"< ? php function subArraySum ( $ arr , $ n , $ sum ) { $ curr_sum ; $ i ; $ j ;"}
{"text":"Pick a starting point","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ curr_sum = $ arr [ $ i ] ;"}
{"text":"try all subarrays starting with ' i '","code":"for ( $ j = $ i + 1 ; $ j <= $ n ; $ j ++ ) { if ( $ curr_sum == $ sum ) { echo \" Sum \u2581 found \u2581 between \u2581 indexes \u2581 \" , $ i , \" \u2581 and \u2581 \" , $ j - 1 ; return 1 ; } if ( $ curr_sum > $ sum $ j == $ n ) break ; $ curr_sum = $ curr_sum + $ arr [ $ j ] ; } } echo \" No \u2581 subarray \u2581 found \" ; return 0 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 15 , 2 , 4 , 8 , 9 , 5 , 10 , 23 ) ; $ n = sizeof ( $ arr ) ; $ sum = 23 ; subArraySum ( $ arr , $ n , $ sum ) ; return 0 ; ? >"}
{"text":"Returns true if the there is a subarray of arr [ ] with sum equal to ' sum ' otherwise returns false . Also , prints the result","code":"< ? php function subArraySum ( $ arr , $ n , $ sum ) {"}
{"text":"Initialize curr_sum as value of first element and starting point as 0","code":"$ curr_sum = $ arr [ 0 ] ; $ start = 0 ; $ i ;"}
{"text":"Add elements one by one to curr_sum and if the curr_sum exceeds the sum , then remove starting element","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If curr_sum exceeds the sum , then remove the starting elements","code":"while ( $ curr_sum > $ sum and $ start < $ i - 1 ) { $ curr_sum = $ curr_sum - $ arr [ $ start ] ; $ start ++ ; }"}
{"text":"If curr_sum becomes equal to sum , then return true","code":"if ( $ curr_sum == $ sum ) { echo \" Sum \u2581 found \u2581 between \u2581 indexes \" , \" \u2581 \" , $ start , \" \u2581 \" , \" and \u2581 \" , \" \u2581 \" , $ i - 1 ; return 1 ; }"}
{"text":"Add this element to curr_sum","code":"if ( $ i < $ n ) $ curr_sum = $ curr_sum + $ arr [ $ i ] ; }"}
{"text":"If we reach here , then no subarray","code":"echo \" No \u2581 subarray \u2581 found \" ; return 0 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 15 , 2 , 4 , 8 , 9 , 5 , 10 , 23 ) ; $ n = count ( $ arr ) ; $ sum = 23 ; subArraySum ( $ arr , $ n , $ sum ) ;"}
{"text":"function to find maximum number","code":"< ? php function maximum ( $ a , $ b , $ c ) { return max ( max ( $ a , $ b ) , $ c ) ; }"}
{"text":"function to find minimum number","code":"function minimum ( $ a , $ b , $ c ) { return min ( min ( $ a , $ b ) , $ c ) ; }"}
{"text":"Finds and prints the smallest Difference Triplet","code":"function smallestDifferenceTriplet ( $ arr1 , $ arr2 , $ arr3 , $ n ) {"}
{"text":"sorting all the three arrays","code":"sort ( $ arr1 ) ; sort ( $ arr2 ) ; sort ( $ arr3 ) ;"}
{"text":"To store resultant three numbers","code":"$ res_min ; $ res_max ; $ res_mid ;"}
{"text":"pointers to arr1 , arr2 , arr3 respectively","code":"$ i = 0 ; $ j = 0 ; $ k = 0 ;"}
{"text":"Loop until one array reaches to its end Find the smallest difference .","code":"$ diff = PHP_INT_MAX ; while ( $ i < $ n && $ j < $ n && $ k < $ n ) { $ sum = $ arr1 [ $ i ] + $ arr2 [ $ j ] + $ arr3 [ $ k ] ;"}
{"text":"maximum number","code":"$ max = maximum ( $ arr1 [ $ i ] , $ arr2 [ $ j ] , $ arr3 [ $ k ] ) ;"}
{"text":"Find minimum and increment its index .","code":"$ min = minimum ( $ arr1 [ $ i ] , $ arr2 [ $ j ] , $ arr3 [ $ k ] ) ; if ( $ min == $ arr1 [ $ i ] ) $ i ++ ; else if ( $ min == $ arr2 [ $ j ] ) $ j ++ ; else $ k ++ ;"}
{"text":"comparing new difference with the previous one and updating accordingly","code":"if ( $ diff > ( $ max - $ min ) ) { $ diff = $ max - $ min ; $ res_max = $ max ; $ res_mid = $ sum - ( $ max + $ min ) ; $ res_min = $ min ; } }"}
{"text":"Print result","code":"echo $ res_max , \" , \u2581 \" , $ res_mid , \" , \u2581 \" , $ res_min ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 5 , 2 , 8 ) ; $ arr2 = array ( 10 , 7 , 12 ) ; $ arr3 = array ( 9 , 14 , 6 ) ; $ n = sizeof ( $ arr1 ) ; smallestDifferenceTriplet ( $ arr1 , $ arr2 , $ arr3 , $ n ) ; ? >"}
{"text":"returns true if there is triplet with sum equal to ' sum ' present in A [ ] . Also , prints the triplet","code":"< ? php function find3Numbers ( $ A , $ arr_size , $ sum ) { $ l ; $ r ;"}
{"text":"Fix the first element as A [ i ]","code":"for ( $ i = 0 ; $ i < $ arr_size - 2 ; $ i ++ ) {"}
{"text":"Fix the second element as A [ j ]","code":"for ( $ j = $ i + 1 ; $ j < $ arr_size - 1 ; $ j ++ ) {"}
{"text":"Now look for the third number","code":"for ( $ k = $ j + 1 ; $ k < $ arr_size ; $ k ++ ) { if ( $ A [ $ i ] + $ A [ $ j ] + $ A [ $ k ] == $ sum ) { echo \" Triplet \u2581 is \" , \" \u2581 \" , $ A [ $ i ] , \" , \u2581 \" , $ A [ $ j ] , \" , \u2581 \" , $ A [ $ k ] ; return true ; } } } }"}
{"text":"If we reach here , then no triplet was found","code":"return false ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 4 , 45 , 6 , 10 , 8 ) ; $ sum = 22 ; $ arr_size = sizeof ( $ A ) ; find3Numbers ( $ A , $ arr_size , $ sum ) ; ? >"}
{"text":"returns true if there is triplet with sum equal to ' sum ' present in A [ ] . Also , prints the triplet","code":"< ? php function find3Numbers ( $ A , $ arr_size , $ sum ) { $ l ; $ r ;"}
{"text":"Sort the elements","code":"sort ( $ A ) ;"}
{"text":"Now fix the first element one by one and find the other two elements","code":"for ( $ i = 0 ; $ i < $ arr_size - 2 ; $ i ++ ) {"}
{"text":"To find the other two elements , start two index variables from two corners of the array and move them toward each other index of the first element","code":"$ l = $ i + 1 ;"}
{"text":"in the remaining elements index of the last element","code":"$ r = $ arr_size - 1 ; while ( $ l < $ r ) { if ( $ A [ $ i ] + $ A [ $ l ] + $ A [ $ r ] == $ sum ) { echo \" Triplet \u2581 is \u2581 \" , $ A [ $ i ] , \" \u2581 \" , $ A [ $ l ] , \" \u2581 \" , $ A [ $ r ] , \" STRNEWLINE \" ; return true ; } else if ( $ A [ $ i ] + $ A [ $ l ] + $ A [ $ r ] < $ sum ) $ l ++ ;"}
{"text":"A [ i ] + A [ l ] + A [ r ] > sum","code":"else $ r -- ; } }"}
{"text":"If we reach here , then no triplet was found","code":"return false ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 4 , 45 , 6 , 10 , 8 ) ; $ sum = 22 ; $ arr_size = sizeof ( $ A ) ; find3Numbers ( $ A , $ arr_size , $ sum ) ; ? >"}
{"text":"Prints all subarrays in arr [ 0. . n - 1 ]","code":"< ? php function subArray ( $ arr , $ n ) {"}
{"text":"Pick starting point","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Pick ending point","code":"for ( $ j = $ i ; $ j < $ n ; $ j ++ ) {"}
{"text":"Print subarray between current starting and ending points","code":"for ( $ k = $ i ; $ k <= $ j ; $ k ++ ) echo $ arr [ $ k ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; } } }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 ) ; $ n = sizeof ( $ arr ) ; echo \" All \u2581 Non - empty \u2581 Subarrays STRNEWLINE \" ; subArray ( $ arr , $ n ) ; ? >"}
{"text":"PHP code to generate all possible subsequences . Time Complexity O ( n * 2 ^ n )","code":"< ? php function printSubsequences ( $ arr , $ n ) {"}
{"text":"Number of subsequences is ( 2 * * n - 1 )","code":"$ opsize = pow ( 2 , $ n ) ;"}
{"text":"Run from counter 000. . 1 to 111. . 1","code":"for ( $ counter = 1 ; $ counter < $ opsize ; $ counter ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Check if jth bit in the counter is set If set then print jth element from arr [ ]","code":"if ( $ counter & ( 1 << $ j ) ) echo $ arr [ $ j ] , \" \u2581 \" ; } echo \" \" } }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 ) ; $ n = sizeof ( $ arr ) ; echo \" All \u2581 Non - empty \u2581 Subsequences STRNEWLINE \" ; printSubsequences ( $ arr , $ n ) ; ? >"}
{"text":"Function to print product array for a given array arr [ ] of size n","code":"< ? php function productArray ( $ arr , $ n ) {"}
{"text":"Base case","code":"if ( $ n == 1 ) { echo \"0\" ; return ; } $ i ; $ temp = 1 ;"}
{"text":"Allocate memory for the productarray","code":"$ prod = array ( ) ;"}
{"text":"Initialize the product array as 1","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ prod [ $ j ] = 1 ;"}
{"text":"In this loop , temp variable contains product of elements on left side excluding arr [ i ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ prod [ $ i ] = $ temp ; $ temp *= $ arr [ $ i ] ; }"}
{"text":"Initialize temp to 1 for product on right side","code":"$ temp = 1 ;"}
{"text":"In this loop , temp variable contains product of elements on right side excluding arr [ i ]","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { $ prod [ $ i ] *= $ temp ; $ temp *= $ arr [ $ i ] ; }"}
{"text":"print the constructed prod array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ prod [ $ i ] , \" \u2581 \" ; return ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 3 , 5 , 6 , 2 ) ; $ n = count ( $ arr ) ; echo \" The \u2581 product \u2581 array \u2581 is \u2581 : \u2581 STRNEWLINE \" ; productArray ( $ arr , $ n ) ; ? >"}
{"text":"The function checks if the array elements are consecutive . If elements are consecutive , then returns true , else returns false","code":"< ? php function areConsecutive ( $ arr , $ n ) { if ( $ n < 1 ) return false ;"}
{"text":"1 ) Get the minimum element in array","code":"$ min = getMin ( $ arr , $ n ) ;"}
{"text":"2 ) Get the maximum element in array","code":"$ max = getMax ( $ arr , $ n ) ;"}
{"text":"3 ) $max - $min + 1 is equal to $n , then only check all elements","code":"if ( $ max - $ min + 1 == $ n ) {"}
{"text":"Create a temp array to hold visited flag of all elements .","code":"$ visited = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ visited [ $ i ] = false ; } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If we see an element again , then return false","code":"if ( $ visited [ $ arr [ $ i ] - $ min ] != false ) return false ;"}
{"text":"If visited first time , then mark the element as visited","code":"$ visited [ $ arr [ $ i ] - $ min ] = true ; }"}
{"text":"If all elements occur once , then return true","code":"return true ; }"}
{"text":"if ( $max - $min + 1 != $n )","code":"return false ; }"}
{"text":"UTILITY FUNCTIONS","code":"function getMin ( $ arr , $ n ) { $ min = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] < $ min ) $ min = $ arr [ $ i ] ; return $ min ; } function getMax ( $ arr , $ n ) { $ max = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] > $ max ) $ max = $ arr [ $ i ] ; return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 4 , 2 , 3 , 1 , 6 ) ; $ n = count ( $ arr ) ; if ( areConsecutive ( $ arr , $ n ) == true ) echo \" Array \u2581 elements \u2581 are \u2581 consecutive \u2581 \" ; else echo \" Array \u2581 elements \u2581 are \u2581 not \u2581 consecutive \u2581 \" ; ? >"}
{"text":"The function checks if the array elements are consecutive If elements are consecutive , then returns true , else returns false","code":"< ? php function areConsecutive ( $ arr , $ n ) { if ( $ n < 1 ) return false ;"}
{"text":"1 ) Get the minimum element in array","code":"$ min = getMin ( $ arr , $ n ) ;"}
{"text":"2 ) Get the maximum element in array","code":"$ max = getMax ( $ arr , $ n ) ;"}
{"text":"3 ) max - min + 1 is equal to n then only check all elements","code":"if ( $ max - $ min + 1 == $ n ) { $ i ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ j ; if ( $ arr [ $ i ] < 0 ) $ j = - $ arr [ $ i ] - $ min ; else $ j = $ arr [ $ i ] - $ min ;"}
{"text":"if the value at index j is negative then there is repetition","code":"if ( $ arr [ $ j ] > 0 ) $ arr [ $ j ] = - $ arr [ $ j ] ; else return false ; }"}
{"text":"If we do not see a negative value then all elements are distinct","code":"return true ; }"}
{"text":"if ( max - min + 1 != n )","code":"return false ; }"}
{"text":"UTILITY FUNCTIONS","code":"function getMin ( $ arr , $ n ) { $ min = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] < $ min ) $ min = $ arr [ $ i ] ; return $ min ; } function getMax ( $ arr , $ n ) { $ max = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] > $ max ) $ max = $ arr [ $ i ] ; return $ max ; }"}
{"text":"Driver program to test above functions","code":"$ arr = array ( 1 , 4 , 5 , 3 , 2 , 6 ) ; $ n = count ( $ arr ) ; if ( areConsecutive ( $ arr , $ n ) == true ) echo \" \u2581 Array \u2581 elements \u2581 are \u2581 consecutive \u2581 \" ; else echo \" \u2581 Array \u2581 elements \u2581 are \u2581 not \u2581 consecutive \u2581 \" ; ? >"}
{"text":"PHP program to find all those elements of arr1 [ ] that are not present in arr2 [ ]","code":"< ? php function relativeComplement ( $ arr1 , $ arr2 , $ n , $ m ) { $ i = 0 ; $ j = 0 ; while ( $ i < $ n && $ j < $ m ) {"}
{"text":"If current element in arr2 [ ] is greater , then arr1 [ i ] can 't be  present in arr2[j..m-1]","code":"if ( $ arr1 [ $ i ] < $ arr2 [ $ j ] ) { echo $ arr1 [ $ i ] , \" \" ; $ i ++ ;"}
{"text":"Skipping smaller elements of arr2 [ ]","code":"} else if ( $ arr1 [ $ i ] > $ arr2 [ $ j ] ) { $ j ++ ;"}
{"text":"Equal elements found ( skipping in both arrays )","code":"} else if ( $ arr1 [ $ i ] == $ arr2 [ $ j ] ) { $ i ++ ; $ j ++ ; } }"}
{"text":"Printing remaining elements of arr1 [ ]","code":"while ( $ i < $ n ) echo $ arr1 [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"{ $ arr1 = array ( 3 , 6 , 10 , 12 , 15 ) ; $ arr2 = array ( 1 , 3 , 5 , 10 , 16 ) ; $ n = sizeof ( $ arr1 ) \/ sizeof ( $ arr1 [ 0 ] ) ; $ m = sizeof ( $ arr2 ) \/ sizeof ( $ arr2 [ 0 ] ) ; relativeComplement ( $ arr1 , $ arr2 , $ n , $ m ) ; return 0 ; } ? >"}
{"text":"function for calculating min operations","code":"< ? php function minOps ( $ arr , $ n , $ k ) {"}
{"text":"max elements of array","code":"$ max = max ( $ arr ) ; $ res = 0 ;"}
{"text":"iterate for all elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"check if element can make equal to max or not if not then return - 1","code":"if ( ( $ max - $ arr [ $ i ] ) % $ k != 0 ) return -1 ;"}
{"text":"else update res for required operations","code":"else $ res += ( $ max - $ arr [ $ i ] ) \/ $ k ; }"}
{"text":"return result","code":"return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 21 , 33 , 9 , 45 , 63 ) ; $ n = count ( $ arr ) ; $ k = 6 ; print ( minOps ( $ arr , $ n , $ k ) ) ; ? >"}
{"text":"PHP code for above approach","code":"< ? php function solve ( $ A , $ B , $ C , $ i , $ j , $ k ) { $ min_diff ; $ current_diff ; $ max_term ;"}
{"text":"calculating min difference from last index of lists","code":"$ min_diff = abs ( max ( $ A [ $ i ] , max ( $ B [ $ j ] , $ C [ $ k ] ) ) - min ( $ A [ $ i ] , min ( $ B [ $ j ] , $ C [ $ k ] ) ) ) ; while ( $ i != -1 && $ j != -1 && $ k != -1 ) { $ current_diff = abs ( max ( $ A [ $ i ] , max ( $ B [ $ j ] , $ C [ $ k ] ) ) - min ( $ A [ $ i ] , min ( $ B [ $ j ] , $ C [ $ k ] ) ) ) ;"}
{"text":"checking condition","code":"if ( $ current_diff < $ min_diff ) $ min_diff = $ current_diff ;"}
{"text":"calculating max term from list","code":"$ max_term = max ( $ A [ $ i ] , max ( $ B [ $ j ] , $ C [ $ k ] ) ) ;"}
{"text":"Moving to smaller value in the array with maximum out of three .","code":"if ( $ A [ $ i ] == $ max_term ) $ i -= 1 ; else if ( $ B [ $ j ] == $ max_term ) $ j -= 1 ; else $ k -= 1 ; } return $ min_diff ; }"}
{"text":"Driver code","code":"$ D = array ( 5 , 8 , 10 , 15 ) ; $ E = array ( 6 , 9 , 15 , 78 , 89 ) ; $ F = array ( 2 , 3 , 6 , 6 , 8 , 8 , 10 ) ; $ nD = sizeof ( $ D ) ; $ nE = sizeof ( $ E ) ; $ nF = sizeof ( $ F ) ; echo solve ( $ D , $ E , $ F , $ nD - 1 , $ nE - 1 , $ nF - 1 ) ; ? >"}
{"text":"Linearly search x in arr [ ] . If x is present then return the index , otherwise return - 1","code":"< ? php function search ( $ arr , $ n , $ x ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] == $ x ) return $ i ; } return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 10 , 30 , 15 ) ; $ x = 30 ; $ n = sizeof ( $ arr ) ; echo $ x . \" \u2581 is \u2581 present \u2581 at \u2581 index \u2581 \" . search ( $ arr , $ n , $ x ) ;"}
{"text":"A recursive binary search function . It returns location of x in given array arr [ l . . r ] is present , otherwise - 1","code":"< ? php function binarySearch ( $ arr , $ l , $ r , $ x ) { if ( $ r >= $ l ) { $ mid = ceil ( $ l + ( $ r - $ l ) \/ 2 ) ;"}
{"text":"If the element is present at the middle itself","code":"if ( $ arr [ $ mid ] == $ x ) return floor ( $ mid ) ;"}
{"text":"If element is smaller than mid , then it can only be present in left subarray","code":"if ( $ arr [ $ mid ] > $ x ) return binarySearch ( $ arr , $ l , $ mid - 1 , $ x ) ;"}
{"text":"Else the element can only be present in right subarray","code":"return binarySearch ( $ arr , $ mid + 1 , $ r , $ x ) ; }"}
{"text":"We reach here when element is not present in array","code":"return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 4 , 10 , 40 ) ; $ n = count ( $ arr ) ; $ x = 10 ; $ result = binarySearch ( $ arr , 0 , $ n - 1 , $ x ) ; if ( ( $ result == -1 ) ) echo \" Element \u2581 is \u2581 not \u2581 present \u2581 in \u2581 array \" ; else echo \" Element \u2581 is \u2581 present \u2581 at \u2581 index \u2581 \" , $ result ; ? >"}
{"text":"A iterative binary search function . It returns location of x in given array arr [ l . . r ] if present , otherwise - 1","code":"< ? php function binarySearch ( $ arr , $ l , $ r , $ x ) { while ( $ l <= $ r ) { $ m = $ l + ( $ r - $ l ) \/ 2 ;"}
{"text":"Check if x is present at mid","code":"if ( $ arr [ $ m ] == $ x ) return floor ( $ m ) ;"}
{"text":"If x greater , ignore left half","code":"if ( $ arr [ $ m ] < $ x ) $ l = $ m + 1 ;"}
{"text":"If x is smaller , ignore right half","code":"else $ r = $ m - 1 ; }"}
{"text":"if we reach here , then element was not present","code":"return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 4 , 10 , 40 ) ; $ n = count ( $ arr ) ; $ x = 10 ; $ result = binarySearch ( $ arr , 0 , $ n - 1 , $ x ) ; if ( ( $ result == -1 ) ) echo \" Element \u2581 is \u2581 not \u2581 present \u2581 in \u2581 array \" ; else echo \" Element \u2581 is \u2581 present \u2581 at \u2581 index \u2581 \" , $ result ; ? >"}
{"text":"PHP program to implement Jump Search","code":"< ? php function jumpSearch ( $ arr , $ x , $ n ) {"}
{"text":"Finding block size to be jumped","code":"$ step = sqrt ( $ n ) ;"}
{"text":"Finding the block where element is present ( if it is present )","code":"$ prev = 0 ; while ( $ arr [ min ( $ step , $ n ) - 1 ] < $ x ) { $ prev = $ step ; $ step += sqrt ( $ n ) ; if ( $ prev >= $ n ) return -1 ; }"}
{"text":"Doing a linear search for x in block beginning with prev .","code":"while ( $ arr [ $ prev ] < $ x ) { $ prev ++ ;"}
{"text":"If we reached next block or end of array , element is not present .","code":"if ( $ prev == min ( $ step , $ n ) ) return -1 ; }"}
{"text":"If element is found","code":"if ( $ arr [ $ prev ] == $ x ) return $ prev ; return -1 ; }"}
{"text":"Driver program to test function","code":"$ arr = array ( 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 , 89 , 144 , 233 , 377 , 610 ) ; $ x = 55 ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ;"}
{"text":"Find the index of ' $ x ' using Jump Search","code":"$ index = jumpSearch ( $ arr , $ x , $ n ) ;"}
{"text":"Print the index where ' $ x ' is located","code":"echo \" Number \u2581 \" . $ x . \" \u2581 is \u2581 at \u2581 index \u2581 \" . $ index ; return 0 ; ? >"}
{"text":"Returns position of first occurrence of x in array","code":"< ? php function exponentialSearch ( $ arr , $ n , $ x ) {"}
{"text":"If x is present at first location itself","code":"if ( $ arr [ 0 ] == $ x ) return 0 ;"}
{"text":"Find range for binary search by repeated doubling","code":"$ i = 1 ; while ( $ i < $ n and $ arr [ $ i ] <= $ x ) $ i = $ i * 2 ;"}
{"text":"Call binary search for the found range .","code":"return binarySearch ( $ arr , $ i \/ 2 , min ( $ i , $ n - 1 ) , $ x ) ; }"}
{"text":"A recursive binary search function . It returns location of x in given array arr [ l . . r ] is present , otherwise - 1","code":"function binarySearch ( $ arr , $ l , $ r , $ x ) { if ( $ r >= $ l ) { $ mid = $ l + ( $ r - $ l ) \/ 2 ;"}
{"text":"If the element is present at the middle itself","code":"if ( $ arr [ $ mid ] == $ x ) return $ mid ;"}
{"text":"If element is smaller than mid , then it can only be present n left subarray","code":"if ( $ arr [ $ mid ] > $ x ) return binarySearch ( $ arr , $ l , $ mid - 1 , $ x ) ;"}
{"text":"Else the element can only be present in right subarray","code":"return binarySearch ( $ arr , $ mid + 1 , $ r , $ x ) ; }"}
{"text":"We reach here when element is not present in array","code":"return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 4 , 10 , 40 ) ; $ n = count ( $ arr ) ; $ x = 10 ; $ result = exponentialSearch ( $ arr , $ n , $ x ) ; if ( $ result == -1 ) echo \" Element \u2581 is \u2581 not \u2581 present \u2581 in \u2581 array \" ; else echo \" Element \u2581 is \u2581 present \u2581 at \u2581 index \u2581 \" , $ result ; ? >"}
{"text":"A function to do counting sort of arr [ ] according to the digit represented by exp .","code":"< ? php function countSort ( & $ arr , $ n , $ exp ) {"}
{"text":"output array","code":"$ output = array_fill ( 0 , $ n , 0 ) ; $ count = array_fill ( 0 , 10 , 0 ) ;"}
{"text":"Store count of occurrences in count [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count [ ( $ arr [ $ i ] \/ $ exp ) % 10 ] ++ ;"}
{"text":"Change count [ i ] so that count [ i ] now contains actual position of this digit in output [ ]","code":"for ( $ i = 1 ; $ i < 10 ; $ i ++ ) $ count [ $ i ] += $ count [ $ i - 1 ] ;"}
{"text":"Build the output array","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { $ output [ $ count [ ( $ arr [ $ i ] \/ $ exp ) % 10 ] - 1 ] = $ arr [ $ i ] ; $ count [ ( $ arr [ $ i ] \/ $ exp ) % 10 ] -- ; }"}
{"text":"Copy the output array to arr [ ] , so that arr [ ] now contains sorted numbers according to current digit","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = $ output [ $ i ] ; }"}
{"text":"The main function to that sorts arr [ ] of size n using Radix Sort","code":"function radixsort ( & $ arr , $ n ) {"}
{"text":"Find the maximum number to know number of digits","code":"$ m = max ( $ arr ) ;"}
{"text":"Do counting sort for every digit . Note that instead of passing digit number , exp is passed . exp is 10 ^ i where i is current digit number","code":"for ( $ exp = 1 ; $ m \/ $ exp > 0 ; $ exp *= 10 ) countSort ( $ arr , $ n , $ exp ) ; }"}
{"text":"A utility function to print an array","code":"function PrintArray ( & $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 170 , 45 , 75 , 90 , 802 , 24 , 2 , 66 ) ; $ n = count ( $ arr ) ;"}
{"text":"Function Call","code":"radixsort ( $ arr , $ n ) ; PrintArray ( $ arr , $ n ) ; ? >"}
{"text":"Function to swap numbers","code":"< ? php function swap ( & $ a , & $ b ) { $ temp = $ a ; $ a = $ b ; $ b = $ temp ; }"}
{"text":"This function takes last element as pivot , places the pivot element at its correct position in sorted array , and places all smaller ( smaller than pivot ) to left of pivot and all greater elements to right of pivot","code":"function partition ( & $ arr , $ l , $ h ) { $ x = $ arr [ $ h ] ; $ i = ( $ l - 1 ) ; for ( $ j = $ l ; $ j <= $ h - 1 ; $ j ++ ) { if ( $ arr [ $ j ] <= $ x ) { $ i ++ ; swap ( $ arr [ $ i ] , $ arr [ $ j ] ) ; } } swap ( $ arr [ $ i + 1 ] , $ arr [ $ h ] ) ; return ( $ i + 1 ) ; }"}
{"text":"A [ ] -- > Array to be sorted , l -- > Starting index , h -- > Ending index","code":"function quickSort ( & $ A , $ l , $ h ) { if ( $ l < $ h ) {"}
{"text":"Partitioning index","code":"$ p = partition ( $ A , $ l , $ h ) ; quickSort ( $ A , $ l , $ p - 1 ) ; quickSort ( $ A , $ p + 1 , $ h ) ; } }"}
{"text":"Driver code","code":"$ n = 5 ; $ arr = array ( 4 , 2 , 6 , 9 , 2 ) ; quickSort ( $ arr , 0 , $ n - 1 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo $ arr [ $ i ] . \" \u2581 \" ; } ? >"}
{"text":"A utility function to swap two elements","code":"< ? php function swap ( & $ a , & $ b ) { $ t = $ a ; $ a = $ b ; $ b = $ t ; }"}
{"text":"This function is same in both iterative and recursive","code":"function partition ( & $ arr , $ l , $ h ) { $ x = $ arr [ $ h ] ; $ i = ( $ l - 1 ) ; for ( $ j = $ l ; $ j <= $ h - 1 ; $ j ++ ) { if ( $ arr [ $ j ] <= $ x ) { $ i ++ ; swap ( $ arr [ $ i ] , $ arr [ $ j ] ) ; } } swap ( $ arr [ $ i + 1 ] , $ arr [ $ h ] ) ; return ( $ i + 1 ) ; }"}
{"text":"A [ ] -- > Array to be sorted , l -- > Starting index , h -- > Ending index","code":"function quickSortIterative ( & $ arr , $ l , $ h ) {"}
{"text":"Create an auxiliary stack","code":"$ stack = array_fill ( 0 , $ h - $ l + 1 , 0 ) ;"}
{"text":"initialize top of stack","code":"$ top = -1 ;"}
{"text":"push initial values of l and h to stack","code":"$ stack [ ++ $ top ] = $ l ; $ stack [ ++ $ top ] = $ h ;"}
{"text":"Keep popping from stack while is not empty","code":"while ( $ top >= 0 ) {"}
{"text":"Pop h and l","code":"$ h = $ stack [ $ top -- ] ; $ l = $ stack [ $ top -- ] ;"}
{"text":"Set pivot element at its correct position in sorted array","code":"$ p = partition ( $ arr , $ l , $ h ) ;"}
{"text":"If there are elements on left side of pivot , then push left side to stack","code":"if ( $ p - 1 > $ l ) { $ stack [ ++ $ top ] = $ l ; $ stack [ ++ $ top ] = $ p - 1 ; }"}
{"text":"If there are elements on right side of pivot , then push right side to stack","code":"if ( $ p + 1 < $ h ) { $ stack [ ++ $ top ] = $ p + 1 ; $ stack [ ++ $ top ] = $ h ; } } }"}
{"text":"A utility function to print contents of arr","code":"function printArr ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; ++ $ i ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 3 , 5 , 2 , 1 , 3 , 2 , 3 ) ; $ n = count ( $ arr ) ;"}
{"text":"Function calling","code":"quickSortIterative ( $ arr , 0 , $ n - 1 ) ; printArr ( $ arr , $ n ) ; ? >"}
{"text":"A recursive binary search based function . It returns index of x in given array arr [ l . . r ] is present , otherwise - 1","code":"< ? php function binarySearch ( $ arr , $ l , $ r , $ x ) { if ( $ r >= $ l ) { $ mid = $ l + ( $ r - $ l ) \/ 2 ;"}
{"text":"If the element is present at one of the middle 3 positions","code":"if ( $ arr [ $ mid ] == $ x ) return $ mid ; if ( $ mid > $ l && $ arr [ $ mid - 1 ] == $ x ) return ( $ mid - 1 ) ; if ( $ mid < $ r && $ arr [ $ mid + 1 ] == $ x ) return ( $ mid + 1 ) ;"}
{"text":"If element is smaller than mid , then it can only be present in left subarray","code":"if ( $ arr [ $ mid ] > $ x ) return binarySearch ( $ arr , $ l , $ mid - 2 , $ x ) ;"}
{"text":"Else the element can only be present in right subarray","code":"return binarySearch ( $ arr , $ mid + 2 , $ r , $ x ) ; }"}
{"text":"We reach here when element is not present in array","code":"return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 2 , 10 , 4 , 40 ) ; $ n = sizeof ( $ arr ) ; $ x = 4 ; $ result = binarySearch ( $ arr , 0 , $ n - 1 , $ x ) ; if ( $ result == -1 ) echo ( \" Element \u2581 is \u2581 not \u2581 present \u2581 in \u2581 array \" ) ; else echo ( \" Element \u2581 is \u2581 present \u2581 at \u2581 index \u2581 $ result \" ) ; ? >"}
{"text":"ar1 [ 0. . m - 1 ] and ar2 [ 0. . n - 1 ] are two given sorted arrays and x is given number . This function prints the pair from both arrays such that the sum of the pair is closest to x .","code":"< ? php function printClosest ( $ ar1 , $ ar2 , $ m , $ n , $ x ) {"}
{"text":"Initialize the diff between pair sum and x .","code":"$ diff = PHP_INT_MAX ;"}
{"text":"res_l and res_r are result indexes from ar1 [ ] and ar2 [ ] respectively","code":"$ res_l ; $ res_r ;"}
{"text":"Start from left side of ar1 [ ] and right side of ar2 [ ]","code":"$ l = 0 ; $ r = $ n - 1 ; while ( $ l < $ m and $ r >= 0 ) {"}
{"text":"If this pair is closer to x than the previously found closest , then update res_l , res_r and diff","code":"if ( abs ( $ ar1 [ $ l ] + $ ar2 [ $ r ] - $ x ) < $ diff ) { $ res_l = $ l ; $ res_r = $ r ; $ diff = abs ( $ ar1 [ $ l ] + $ ar2 [ $ r ] - $ x ) ; }"}
{"text":"If sum of this pair is more than x , move to smaller side","code":"if ( $ ar1 [ $ l ] + $ ar2 [ $ r ] > $ x ) $ r -- ;"}
{"text":"move to the greater side","code":"else $ l ++ ; }"}
{"text":"Print the result","code":"echo \" The \u2581 closest \u2581 pair \u2581 is \u2581 [ \" , $ ar1 [ $ res_l ] , \" , \u2581 \" , $ ar2 [ $ res_r ] , \" ] \u2581 STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ ar1 = array ( 1 , 4 , 5 , 7 ) ; $ ar2 = array ( 10 , 20 , 30 , 40 ) ; $ m = count ( $ ar1 ) ; $ n = count ( $ ar2 ) ; $ x = 38 ; printClosest ( $ ar1 , $ ar2 , $ m , $ n , $ x ) ; ? >"}
{"text":"Prints the pair with sum closest to x","code":"< ? php function printClosest ( $ arr , $ n , $ x ) {"}
{"text":"To store indexes of result pair","code":"$ res_l ; $ res_r ;"}
{"text":"Initialize left and right indexes and difference between pair sum and x","code":"$ l = 0 ; $ r = $ n - 1 ; $ diff = PHP_INT_MAX ;"}
{"text":"While there are elements between l and r","code":"while ( $ r > $ l ) {"}
{"text":"Check if this pair is closer than the closest pair so far","code":"if ( abs ( $ arr [ $ l ] + $ arr [ $ r ] - $ x ) < $ diff ) { $ res_l = $ l ; $ res_r = $ r ; $ diff = abs ( $ arr [ $ l ] + $ arr [ $ r ] - $ x ) ; }"}
{"text":"If this pair has more sum , move to smaller values .","code":"if ( $ arr [ $ l ] + $ arr [ $ r ] > $ x ) $ r -- ;"}
{"text":"Move to larger values","code":"else $ l ++ ; } echo \" \u2581 The \u2581 closest \u2581 pair \u2581 is \u2581 \" , $ arr [ $ res_l ] , \" \u2581 and \u2581 \" , $ arr [ $ res_r ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 22 , 28 , 29 , 30 , 40 ) ; $ x = 54 ; $ n = count ( $ arr ) ; printClosest ( $ arr , $ n , $ x ) ; ? >"}
{"text":"Returns counts of 1 's in arr[low..high]. The array is assumed to be sorted in non-increasing order","code":"< ? php function countOnes ( $ arr , $ low , $ high ) { if ( $ high >= $ low ) {"}
{"text":"get the middle index","code":"$ mid = $ low + ( $ high - $ low ) \/ 2 ;"}
{"text":"check if the element at middle index is last 1","code":"if ( ( $ mid == $ high or $ arr [ $ mid + 1 ] == 0 ) and ( $ arr [ $ mid ] == 1 ) ) return $ mid + 1 ;"}
{"text":"If element is not last 1 , recur for right side","code":"if ( $ arr [ $ mid ] == 1 ) return countOnes ( $ arr , ( $ mid + 1 ) , $ high ) ;"}
{"text":"else recur for left side","code":"return countOnes ( $ arr , $ low , ( $ mid - 1 ) ) ; } return 0 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ) ; $ n = count ( $ arr ) ; echo \" Count \u2581 of \u2581 1 ' s \u2581 in \u2581 given \u2581 array \u2581 is \u2581 \" , countOnes ( $ arr , 0 , $ n - 1 ) ; ? >"}
{"text":"Function that returns the minimum swaps","code":"< ? php function solve ( $ a , $ n ) { $ maxx = -1 ; $ minn = $ a [ 0 ] ; $ l = 0 ; $ r = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Index of leftmost largest element","code":"if ( $ a [ $ i ] > $ maxx ) { $ maxx = $ a [ $ i ] ; $ l = $ i ; }"}
{"text":"Index of rightmost smallest element","code":"if ( $ a [ $ i ] <= $ minn ) { $ minn = $ a [ $ i ] ; $ r = $ i ; } } if ( $ r < $ l ) echo $ l + ( $ n - $ r - 2 ) ; else echo $ l + ( $ n - $ r - 1 ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 5 , 6 , 1 , 3 ) ; $ n = count ( $ a ) ; solve ( $ a , $ n ) ; ? >"}
{"text":"Prints a maximum set of activities that can be done by a single person , one at a time . n -- > Total number of activities s [ ] -- > An array that contains start time of all activities f [ ] -- > An array that contains finish time of all activities","code":"< ? php function printMaxActivities ( $ s , $ f , $ n ) { echo \" Following \u2581 activities \u2581 are \u2581 selected \u2581 \" . \" STRNEWLINE \" ;"}
{"text":"The first activity always gets selected","code":"$ i = 0 ; echo $ i . \" \" ;"}
{"text":"Consider rest of the activities","code":"for ( $ j = 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"If this activity has start time greater than or equal to the finish time of previously selected activity , then select it","code":"if ( $ s [ $ j ] >= $ f [ $ i ] ) { echo $ j . \" \" ; $ i = $ j ; } } }"}
{"text":"Driver Code","code":"$ s = array ( 1 , 3 , 0 , 5 , 8 , 5 ) ; $ f = array ( 2 , 4 , 6 , 7 , 9 , 9 ) ; $ n = sizeof ( $ s ) ; printMaxActivities ( $ s , $ f , $ n ) ; ? >"}
{"text":"Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]","code":"< ? php function lcs ( $ X , $ Y , $ m , $ n ) { if ( $ m == 0 $ n == 0 ) return 0 ; else if ( $ X [ $ m - 1 ] == $ Y [ $ n - 1 ] ) return 1 + lcs ( $ X , $ Y , $ m - 1 , $ n - 1 ) ; else return max ( lcs ( $ X , $ Y , $ m , $ n - 1 ) , lcs ( $ X , $ Y , $ m - 1 , $ n ) ) ; }"}
{"text":"Driver Code","code":"$ X = \" AGGTAB \" ; $ Y = \" GXTXAYB \" ; echo \" Length \u2581 of \u2581 LCS \u2581 is \u2581 \" ; echo lcs ( $ X , $ Y , strlen ( $ X ) , strlen ( $ Y ) ) ; ? >"}
{"text":"Dynamic Programming C # implementation of LCS problem","code":"< ? php function lcs ( $ X , $ Y ) {"}
{"text":"find the length of the strings","code":"$ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ;"}
{"text":"Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note : L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 0 $ j == 0 ) $ L [ $ i ] [ $ j ] = 0 ; else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) $ L [ $ i ] [ $ j ] = $ L [ $ i - 1 ] [ $ j - 1 ] + 1 ; else $ L [ $ i ] [ $ j ] = max ( $ L [ $ i - 1 ] [ $ j ] , $ L [ $ i ] [ $ j - 1 ] ) ; } }"}
{"text":"L [ m ] [ n ] contains the length of LCS of X [ 0. . n - 1 ] & Y [ 0. . m - 1 ]","code":"return $ L [ $ m ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ X = \" AGGTAB \" ; $ Y = \" GXTXAYB \" ; echo \" Length \u2581 of \u2581 LCS \u2581 is \u2581 \" ; echo lcs ( $ X , $ Y ) ; ? >"}
{"text":"A Naive recursive implementation of MCP ( Minimum Cost Path ) problem","code":"< ? php $ R = 3 ; $ C = 3 ;"}
{"text":"A utility function that returns minimum of 3 integers","code":"function min1 ( $ x , $ y , $ z ) { if ( $ x < $ y ) return ( $ x < $ z ) ? $ x : $ z ; else return ( $ y < $ z ) ? $ y : $ z ; }"}
{"text":"Returns cost of minimum cost path from ( 0 , 0 ) to ( m , n ) in mat [ R ] [ C ]","code":"function minCost ( $ cost , $ m , $ n ) { global $ R ; global $ C ; if ( $ n < 0 $ m < 0 ) return PHP_INT_MAX ; else if ( $ m == 0 && $ n == 0 ) return $ cost [ $ m ] [ $ n ] ; else return $ cost [ $ m ] [ $ n ] + min1 ( minCost ( $ cost , $ m - 1 , $ n - 1 ) , minCost ( $ cost , $ m - 1 , $ n ) , minCost ( $ cost , $ m , $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ cost = array ( array ( 1 , 2 , 3 ) , array ( 4 , 8 , 2 ) , array ( 1 , 5 , 3 ) ) ; echo minCost ( $ cost , 2 , 2 ) ; ? >"}
{"text":"DP implementation of MCP problem","code":"< ? php $ R = 3 ; $ C = 3 ; function minCost ( $ cost , $ m , $ n ) { global $ R ; global $ C ;"}
{"text":"Instead of following line , we can use int tc [ m + 1 ] [ n + 1 ] or dynamically allocate memory to save space . The following line is used to keep the program simple and make it working on all compilers .","code":"$ tc ; for ( $ i = 0 ; $ i <= $ R ; $ i ++ ) for ( $ j = 0 ; $ j <= $ C ; $ j ++ ) $ tc [ $ i ] [ $ j ] = 0 ; $ tc [ 0 ] [ 0 ] = $ cost [ 0 ] [ 0 ] ;"}
{"text":"Initialize first column of total cost ( tc ) array","code":"for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) $ tc [ $ i ] [ 0 ] = $ tc [ $ i - 1 ] [ 0 ] + $ cost [ $ i ] [ 0 ] ;"}
{"text":"Initialize first row of tc array","code":"for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) $ tc [ 0 ] [ $ j ] = $ tc [ 0 ] [ $ j - 1 ] + $ cost [ 0 ] [ $ j ] ;"}
{"text":"Construct rest of the tc array","code":"for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) for ( $ j = 1 ; $ j <= $ n ; $ j ++ )"}
{"text":"returns minimum of 3 integers","code":"$ tc [ $ i ] [ $ j ] = min ( $ tc [ $ i - 1 ] [ $ j - 1 ] , $ tc [ $ i - 1 ] [ $ j ] , $ tc [ $ i ] [ $ j - 1 ] ) + $ cost [ $ i ] [ $ j ] ; return $ tc [ $ m ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ cost = array ( array ( 1 , 2 , 3 ) , array ( 4 , 8 , 2 ) , array ( 1 , 5 , 3 ) ) ; echo minCost ( $ cost , 2 , 2 ) ; ? >"}
{"text":"Returns the maximum value that can be put in a knapsack of capacity W","code":"< ? php function knapSack ( $ W , $ wt , $ val , $ n ) {"}
{"text":"Base Case","code":"if ( $ n == 0 $ W == 0 ) return 0 ;"}
{"text":"If weight of the nth item is more than Knapsack capacity W , then this item cannot be included in the optimal solution","code":"if ( $ wt [ $ n - 1 ] > $ W ) return knapSack ( $ W , $ wt , $ val , $ n - 1 ) ;"}
{"text":"Return the maximum of two cases : ( 1 ) nth item included ( 2 ) not included","code":"else return max ( $ val [ $ n - 1 ] + knapSack ( $ W - $ wt [ $ n - 1 ] , $ wt , $ val , $ n - 1 ) , knapSack ( $ W , $ wt , $ val , $ n -1 ) ) ; }"}
{"text":"Driver Code","code":"$ val = array ( 60 , 100 , 120 ) ; $ wt = array ( 10 , 20 , 30 ) ; $ W = 50 ; $ n = count ( $ val ) ; echo knapSack ( $ W , $ wt , $ val , $ n ) ; ? >"}
{"text":"Returns the maximum value that can be put in a knapsack of capacity W","code":"< ? php function knapSack ( $ W , $ wt , $ val , $ n ) { $ K = array ( array ( ) ) ;"}
{"text":"Build table K [ ] [ ] in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ w = 0 ; $ w <= $ W ; $ w ++ ) { if ( $ i == 0 $ w == 0 ) $ K [ $ i ] [ $ w ] = 0 ; else if ( $ wt [ $ i - 1 ] <= $ w ) $ K [ $ i ] [ $ w ] = max ( $ val [ $ i - 1 ] + $ K [ $ i - 1 ] [ $ w - $ wt [ $ i - 1 ] ] , $ K [ $ i - 1 ] [ $ w ] ) ; else $ K [ $ i ] [ $ w ] = $ K [ $ i - 1 ] [ $ w ] ; } } return $ K [ $ n ] [ $ W ] ; }"}
{"text":"Driver Code","code":"$ val = array ( 60 , 100 , 120 ) ; $ wt = array ( 10 , 20 , 30 ) ; $ W = 50 ; $ n = count ( $ val ) ; echo knapSack ( $ W , $ wt , $ val , $ n ) ; ? >"}
{"text":"Function to get minimum number of trials needed in worst case with n eggs and k floors","code":"< ? php function eggDrop ( $ n , $ k ) {"}
{"text":"A 2D table where entry eggFloor [ i ] [ j ] will represent minimum number of trials needed for i eggs and j floors .","code":"$ eggFloor = array ( array ( ) ) ; ;"}
{"text":"We need one trial for one floor and0 trials for 0 floors","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ eggFloor [ $ i ] [ 1 ] = 1 ; $ eggFloor [ $ i ] [ 0 ] = 0 ; }"}
{"text":"We always need j trials for one egg and j floors .","code":"for ( $ j = 1 ; $ j <= $ k ; $ j ++ ) $ eggFloor [ 1 ] [ $ j ] = $ j ;"}
{"text":"Fill rest of the entries in table using optimal substructure property","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 2 ; $ j <= $ k ; $ j ++ ) { $ eggFloor [ $ i ] [ $ j ] = 999999 ; for ( $ x = 1 ; $ x <= $ j ; $ x ++ ) { $ res = 1 + max ( $ eggFloor [ $ i - 1 ] [ $ x - 1 ] , $ eggFloor [ $ i ] [ $ j - $ x ] ) ; if ( $ res < $ eggFloor [ $ i ] [ $ j ] ) $ eggFloor [ $ i ] [ $ j ] = $ res ; } } }"}
{"text":"eggFloor [ n ] [ k ] holds the result","code":"return $ eggFloor [ $ n ] [ $ k ] ; }"}
{"text":"Driver Code","code":"$ n = 2 ; $ k = 36 ; echo \" Minimum \u2581 number \u2581 of \u2581 trials \u2581 in \u2581 worst \u2581 case \u2581 with \u2581 \" . $ n . \" \u2581 eggs \u2581 and \u2581 \" . $ k . \" \u2581 floors \u2581 is \u2581 \" . eggDrop ( $ n , $ k ) ; ? >"}
{"text":"Returns the length of the longest palindromic subsequence in seq","code":"< ? php function lps ( $ seq , $ i , $ j ) {"}
{"text":"Base Case 1 : If there is only 1 character","code":"if ( $ i == $ j ) return 1 ;"}
{"text":"Base Case 2 : If there are only 2 characters and both are same","code":"if ( $ seq [ $ i ] == $ seq [ $ j ] && $ i + 1 == $ j ) return 2 ;"}
{"text":"If the first and last characters match","code":"if ( $ seq [ $ i ] == $ seq [ $ j ] ) return lps ( $ seq , $ i + 1 , $ j - 1 ) + 2 ;"}
{"text":"If the first and last characters do not match","code":"return max ( lps ( $ seq , $ i , $ j - 1 ) , lps ( $ seq , $ i + 1 , $ j ) ) ; }"}
{"text":"Driver Code","code":"$ seq = \" GEEKSFORGEEKS \" ; $ n = strlen ( $ seq ) ; echo \" The \u2581 length \u2581 of \u2581 the \u2581 LPS \u2581 is \u2581 \" . lps ( $ seq , 0 , $ n - 1 ) ; ? >"}
{"text":"A utility function to get max of two integers","code":"< ? php function max ( $ x , $ y ) { return ( $ x > $ y ) ? $ x : $ y ; }"}
{"text":"Returns the length of the longest palindromic subsequence in seq","code":"function lps ( $ str ) { $ n = strlen ( $ str ) ; $ i ; $ j ; $ cl ;"}
{"text":"Create a table to store results of subproblems","code":"$ L [ ] [ ] = array ( array ( ) ) ;"}
{"text":"Strings of length 1 are palindrome of lentgh 1","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ L [ $ i ] [ $ i ] = 1 ;"}
{"text":"Build the table . Note that the lower diagonal values of table are useless and not filled in the process . The values are filled in a manner similar to Matrix Chain Multiplication DP solution ( Seewww . geeksforgeeks . org \/ matrix - chain - multiplication - dp - 8 \/ ) . https : cl is length of substring","code":"for ( $ cl = 2 ; $ cl <= $ n ; $ cl ++ ) { for ( $ i = 0 ; $ i < $ n - $ cl + 1 ; $ i ++ ) { $ j = $ i + $ cl - 1 ; if ( $ str [ $ i ] == $ str [ $ j ] && $ cl == 2 ) $ L [ $ i ] [ $ j ] = 2 ; else if ( $ str [ $ i ] == $ str [ $ j ] ) $ L [ $ i ] [ $ j ] = $ L [ $ i + 1 ] [ $ j - 1 ] + 2 ; else $ L [ $ i ] [ $ j ] = max ( $ L [ $ i ] [ $ j - 1 ] , $ L [ $ i + 1 ] [ $ j ] ) ; } } return $ L [ 0 ] [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ seq = ' EEKS FOR GEEKS ' $ n = strlen ( $ seq ) ; echo \" The \u2581 length \u2581 of \u2581 the \u2581 \" . \" LPS \u2581 is \u2581 \" , lps ( $ seq ) ; ? >"}
{"text":"lbs ( ) returns the length of the Longest Bitonic Subsequence in arr [ ] of size n . The function mainly creates two temporary arrays lis [ ] and lds [ ] and returns the maximum lis [ i ] + lds [ i ] - 1. lis [ i ] == > Longest Increasing subsequence ending with arr [ i ] lds [ i ] == > Longest decreasing subsequence starting with arr [ i ]","code":"< ? php function lbs ( & $ arr , $ n ) {"}
{"text":"Allocate memory for LIS [ ] and initialize LIS values as 1 for all indexes","code":"$ lis = array_fill ( 0 , $ n , NULL ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ lis [ $ i ] = 1 ;"}
{"text":"Compute LIS values from left to right","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ arr [ $ i ] > $ arr [ $ j ] && $ lis [ $ i ] < $ lis [ $ j ] + 1 ) $ lis [ $ i ] = $ lis [ $ j ] + 1 ;"}
{"text":"Allocate memory for lds and initialize LDS values for all indexes","code":"$ lds = array_fill ( 0 , $ n , NULL ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ lds [ $ i ] = 1 ;"}
{"text":"Compute LDS values from right to left","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) for ( $ j = $ n - 1 ; $ j > $ i ; $ j -- ) if ( $ arr [ $ i ] > $ arr [ $ j ] && $ lds [ $ i ] < $ lds [ $ j ] + 1 ) $ lds [ $ i ] = $ lds [ $ j ] + 1 ;"}
{"text":"Return the maximum value of lis [ i ] + lds [ i ] - 1","code":"$ max = $ lis [ 0 ] + $ lds [ 0 ] - 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ lis [ $ i ] + $ lds [ $ i ] - 1 > $ max ) $ max = $ lis [ $ i ] + $ lds [ $ i ] - 1 ; return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 0 , 8 , 4 , 12 , 2 , 10 , 6 , 14 , 1 , 9 , 5 , 13 , 3 , 11 , 7 , 15 ) ; $ n = sizeof ( $ arr ) ; echo \" Length \u2581 of \u2581 LBS \u2581 is \u2581 \" . lbs ( $ arr , $ n ) ; ? >"}
{"text":"This function divides a by greatest divisible power of b","code":"< ? php function maxDivide ( $ a , $ b ) { while ( $ a % $ b == 0 ) $ a = $ a \/ $ b ; return $ a ; }"}
{"text":"Function to check if a number is ugly or not","code":"function isUgly ( $ no ) { $ no = maxDivide ( $ no , 2 ) ; $ no = maxDivide ( $ no , 3 ) ; $ no = maxDivide ( $ no , 5 ) ; return ( $ no == 1 ) ? 1 : 0 ; }"}
{"text":"Function to get the nth ugly number","code":"function getNthUglyNo ( $ n ) { $ i = 1 ;"}
{"text":"ugly number count","code":"$ count = 1 ;"}
{"text":"Check for all integers untill ugly count becomes n","code":"while ( $ n > $ count ) { $ i ++ ; if ( isUgly ( $ i ) ) $ count ++ ; } return $ i ; }"}
{"text":"Driver Code","code":"$ no = getNthUglyNo ( 150 ) ; echo \"150th \u2581 ugly \u2581 no . \u2581 is \u2581 \" . $ no ; ? >"}
{"text":"Recursive function to count ' n ' digit numbers with sum of digits as ' sum ' . This function considers leading 0 's also as digits, that is why not directly called","code":"< ? php function countRec ( $ n , $ sum ) {"}
{"text":"Base case","code":"if ( $ n == 0 ) return $ sum == 0 ; if ( $ sum == 0 ) return 1 ;"}
{"text":"Initialize answer","code":"$ ans = 0 ;"}
{"text":"Traverse through every digit and count numbers beginning with it using recursion","code":"for ( $ i = 0 ; $ i <= 9 ; $ i ++ ) if ( $ sum - $ i >= 0 ) $ ans += countRec ( $ n - 1 , $ sum - $ i ) ; return $ ans ; }"}
{"text":"This is mainly a wrapper over countRec . It explicitly handles leading digit and calls countRec ( ) for remaining digits .","code":"function finalCount ( $ n , $ sum ) {"}
{"text":"Initialize final answer","code":"$ ans = 0 ;"}
{"text":"Traverse through every digit from 1 to 9 and count numbers beginning with it","code":"for ( $ i = 1 ; $ i <= 9 ; $ i ++ ) if ( $ sum - $ i >= 0 ) $ ans += countRec ( $ n - 1 , $ sum - $ i ) ; return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 2 ; $ sum = 5 ; echo finalCount ( $ n , $ sum ) ; ? >"}
{"text":"A lookup table used for memoization","code":"< ? php $ lookup = array_fill ( 0 , 101 , array_fill ( 0 , 501 , -1 ) ) ;"}
{"text":"Memoization based implementation of recursive function","code":"function countRec ( $ n , $ sum ) { global $ lookup ;"}
{"text":"Base case","code":"if ( $ n == 0 ) return $ sum == 0 ;"}
{"text":"If this subproblem is already evaluated , return the evaluated value","code":"if ( $ lookup [ $ n ] [ $ sum ] != -1 ) return $ lookup [ $ n ] [ $ sum ] ;"}
{"text":"Initialize answer","code":"$ ans = 0 ;"}
{"text":"Traverse through every digit and recursively count numbers beginning with it","code":"for ( $ i = 0 ; $ i < 10 ; $ i ++ ) if ( $ sum - $ i >= 0 ) $ ans += countRec ( $ n - 1 , $ sum - $ i ) ; return $ lookup [ $ n ] [ $ sum ] = $ ans ; }"}
{"text":"This is mainly a wrapper over countRec . It explicitly handles leading digit and calls countRec ( ) for remaining n .","code":"function finalCount ( $ n , $ sum ) {"}
{"text":"Initialize final answer","code":"$ ans = 0 ;"}
{"text":"Traverse through every digit from 1 to 9 and count numbers beginning with it","code":"for ( $ i = 1 ; $ i <= 9 ; $ i ++ ) if ( $ sum - $ i >= 0 ) $ ans += countRec ( $ n - 1 , $ sum - $ i ) ; return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ sum = 5 ; echo finalCount ( $ n , $ sum ) ; ? >"}
{"text":"PHP program to Count of n digit numbers whose sum of digits equals to given sum","code":"< ? php function findCount ( $ n , $ sum ) {"}
{"text":"In case n = 2 start is 10 and end is ( 100 - 1 ) = 99","code":"$ start = ( int ) pow ( 10 , $ n - 1 ) ; $ end = ( int ) pow ( 10 , $ n ) - 1 ; $ count = 0 ; $ i = $ start ; while ( $ i < $ end ) { $ cur = 0 ; $ temp = $ i ; while ( $ temp != 0 ) { $ cur += $ temp % 10 ; $ temp = ( int ) $ temp \/ 10 ; } if ( $ cur == $ sum ) { $ count ++ ; $ i += 9 ; } else $ i ++ ; } echo ( $ count ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ sum = 5 ; findCount ( $ n , $ sum ) ; ? >"}
{"text":"PHP program to count non - decreasing number with n digits","code":"< ? php function countNonDecreasing ( $ n ) {"}
{"text":"dp [ i ] [ j ] contains total count of non decreasing numbers ending with digit i and of length j","code":"$ dp = array_fill ( 0 , 10 , array_fill ( 0 , $ n + 1 , NULL ) ) ;"}
{"text":"Fill table for non decreasing numbers of length 1 Base cases 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9","code":"for ( $ i = 0 ; $ i < 10 ; $ i ++ ) $ dp [ $ i ] [ 1 ] = 1 ;"}
{"text":"Fill the table in bottom - up manner","code":"for ( $ digit = 0 ; $ digit <= 9 ; $ digit ++ ) {"}
{"text":"Compute total numbers of non decreasing numbers of length ' len '","code":"for ( $ len = 2 ; $ len <= $ n ; $ len ++ ) {"}
{"text":"sum of all numbers of length of len - 1 in which last digit x is <= ' digit '","code":"for ( $ x = 0 ; $ x <= $ digit ; $ x ++ ) $ dp [ $ digit ] [ $ len ] += $ dp [ $ x ] [ $ len - 1 ] ; } } $ count = 0 ;"}
{"text":"There total nondecreasing numbers of length n wiint be dp [ 0 ] [ n ] + dp [ 1 ] [ n ] . . + dp [ 9 ] [ n ]","code":"for ( $ i = 0 ; $ i < 10 ; $ i ++ ) $ count += $ dp [ $ i ] [ $ n ] ; return $ count ; }"}
{"text":"Driver program","code":"$ n = 3 ; echo countNonDecreasing ( $ n ) ; return 0 ; ? >"}
{"text":"PHP program to count non - decreasing numner with n digits","code":"< ? php function countNonDecreasing ( $ n ) { $ N = 10 ;"}
{"text":"Compute value of N * ( N + 1 ) \/ 2 * ( N + 2 ) \/ 3 * ... ... . * ( N + n - 1 ) \/ n","code":"$ count = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ count *= ( $ N + $ i - 1 ) ; $ count \/= $ i ; } return $ count ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo countNonDecreasing ( $ n ) ; ? >"}
{"text":"Returns count of minimum squares that sum to n","code":"< ? php function getMinSquares ( $ n ) {"}
{"text":"base cases","code":"if ( $ n <= 3 ) return $ n ;"}
{"text":"getMinSquares rest of the table using recursive formula Maximum squares required is n ( 1 * 1 + 1 * 1 + . . )","code":"$ res = $ n ;"}
{"text":"Go through all smaller numbers to recursively find minimum","code":"for ( $ x = 1 ; $ x <= $ n ; $ x ++ ) { $ temp = $ x * $ x ; if ( $ temp > $ n ) break ; else $ res = min ( $ res , 1 + getMinSquares ( $ n - $ temp ) ) ; } return $ res ; }"}
{"text":"Driver Code","code":"echo getMinSquares ( 6 ) ; ? >"}
{"text":"Returns count of minimum squares that sum to n","code":"< ? php function getMinSquares ( $ n ) {"}
{"text":"Create a dynamic programming table to store sq","code":"$ dp ;"}
{"text":"getMinSquares table for base case entries","code":"$ dp [ 0 ] = 0 ; $ dp [ 1 ] = 1 ; $ dp [ 2 ] = 2 ; $ dp [ 3 ] = 3 ;"}
{"text":"getMinSquares rest of the table using recursive formula","code":"for ( $ i = 4 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"max value is i as i can always be represented as 1 * 1 + 1 * 1 + ...","code":"$ dp [ $ i ] = $ i ;"}
{"text":"Go through all smaller numbers to recursively find minimum","code":"for ( $ x = 1 ; $ x <= ceil ( sqrt ( $ i ) ) ; $ x ++ ) { $ temp = $ x * $ x ; if ( $ temp > $ i ) break ; else $ dp [ $ i ] = min ( $ dp [ $ i ] , ( 1 + $ dp [ $ i - $ temp ] ) ) ; } }"}
{"text":"Store result and free dp [ ]","code":"$ res = $ dp [ $ n ] ; return $ res ; }"}
{"text":"Driver Code","code":"echo getMinSquares ( 6 ) ; ? >"}
{"text":"m is size of coins array ( number of different coins )","code":"< ? php function minCoins ( $ coins , $ m , $ V ) {"}
{"text":"base case","code":"if ( $ V == 0 ) return 0 ;"}
{"text":"Initialize result","code":"$ res = PHP_INT_MAX ;"}
{"text":"Try every coin that has smaller value than V","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { if ( $ coins [ $ i ] <= $ V ) { $ sub_res = minCoins ( $ coins , $ m , $ V - $ coins [ $ i ] ) ;"}
{"text":"Check for INT_MAX to avoid overflow and see if result can minimized","code":"if ( $ sub_res != PHP_INT_MAX && $ sub_res + 1 < $ res ) $ res = $ sub_res + 1 ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ coins = array ( 9 , 6 , 5 , 1 ) ; $ m = sizeof ( $ coins ) ; $ V = 11 ; echo \" Minimum \u2581 coins \u2581 required \u2581 is \u2581 \" , minCoins ( $ coins , $ m , $ V ) ; ? >"}
{"text":"m is size of coins array ( number of different coins )","code":"< ? php function minCoins ( $ coins , $ m , $ V ) {"}
{"text":"table [ i ] will be storing the minimum number of coins required for i value . So table [ V ] will have result","code":"$ table [ $ V + 1 ] = array ( ) ;"}
{"text":"Base case ( If given value V is 0 )","code":"$ table [ 0 ] = 0 ;"}
{"text":"Initialize all table values as Infinite","code":"for ( $ i = 1 ; $ i <= $ V ; $ i ++ ) $ table [ $ i ] = PHP_INT_MAX ;"}
{"text":"Compute minimum coins required for all values from 1 to V","code":"for ( $ i = 1 ; $ i <= $ V ; $ i ++ ) {"}
{"text":"Go through all coins smaller than i","code":"for ( $ j = 0 ; $ j < $ m ; $ j ++ ) if ( $ coins [ $ j ] <= $ i ) { $ sub_res = $ table [ $ i - $ coins [ $ j ] ] ; if ( $ sub_res != PHP_INT_MAX && $ sub_res + 1 < $ table [ $ i ] ) $ table [ $ i ] = $ sub_res + 1 ; } } if ( $ table [ $ V ] == PHP_INT_MAX ) return -1 ; return $ table [ $ V ] ; }"}
{"text":"Driver Code","code":"$ coins = array ( 9 , 6 , 5 , 1 ) ; $ m = sizeof ( $ coins ) ; $ V = 11 ; echo \" Minimum \u2581 coins \u2581 required \u2581 is \u2581 \" , minCoins ( $ coins , $ m , $ V ) ; ? >"}
{"text":"A Naive recursive PHP program to find length of the shortest supersequence","code":"< ? php function superSeq ( $ X , $ Y , $ m , $ n ) { if ( ! $ m ) return $ n ; if ( ! $ n ) return $ m ; if ( $ X [ $ m - 1 ] == $ Y [ $ n - 1 ] ) return 1 + superSeq ( $ X , $ Y , $ m - 1 , $ n - 1 ) ; return 1 + min ( superSeq ( $ X , $ Y , $ m - 1 , $ n ) , superSeq ( $ X , $ Y , $ m , $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ X = \" AGGTAB \" ; $ Y = \" GXTXAYB \" ; echo \" Length \u2581 of \u2581 the \u2581 shortest \u2581 supersequence \u2581 is \u2581 \" , superSeq ( $ X , $ Y , strlen ( $ X ) , strlen ( $ Y ) ) ; ? >"}
{"text":"Returns length of the shortest supersequence of X and Y","code":"< ? php function superSeq ( $ X , $ Y , $ m , $ n ) { $ dp = array_fill ( 0 , $ m + 1 , array_fill ( 0 , $ n + 1 , 0 ) ) ;"}
{"text":"Fill table in bottom up manner","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"Below steps follow above recurrence","code":"if ( ! $ i ) $ dp [ $ i ] [ $ j ] = $ j ; else if ( ! $ j ) $ dp [ $ i ] [ $ j ] = $ i ; else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) $ dp [ $ i ] [ $ j ] = 1 + $ dp [ $ i - 1 ] [ $ j - 1 ] ; else $ dp [ $ i ] [ $ j ] = 1 + min ( $ dp [ $ i - 1 ] [ $ j ] , $ dp [ $ i ] [ $ j - 1 ] ) ; } } return $ dp [ $ m ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ X = \" AGGTAB \" ; $ Y = \" GXTXAYB \" ; echo \" Length \u2581 of \u2581 the \u2581 shortest \u2581 supersequence \u2581 is \u2581 \" . superSeq ( $ X , $ Y , strlen ( $ X ) , strlen ( $ Y ) ) ; ? >"}
{"text":"Returns sum of all digits in numbers from 1 to n","code":"< ? php function sumOfDigitsFrom1ToN ( $ n ) {"}
{"text":"initialize result","code":"$ result = 0 ;"}
{"text":"One by one compute sum of digits in every number from 1 to n","code":"for ( $ x = 1 ; $ x <= $ n ; $ x ++ ) $ result += sumOfDigits ( $ x ) ; return $ result ; }"}
{"text":"A utility function to compute sum of digits in a given number x","code":"function sumOfDigits ( $ x ) { $ sum = 0 ; while ( $ x != 0 ) { $ sum += $ x % 10 ; $ x = $ x \/ 10 ; } return $ sum ; }"}
{"text":"Driver Program","code":"$ n = 328 ; echo \" Sum \u2581 of \u2581 digits \u2581 in \u2581 numbers \u2581 from \" . \" \u2581 1 \u2581 to \u2581 \" . $ n . \" \u2581 is \u2581 \" . sumOfDigitsFrom1ToN ( $ n ) ; ? >"}
{"text":"Function to computer sum of digits in numbers from 1 to n . Comments use example of 328 to explain the code","code":"< ? php function sumOfDigitsFrom1ToN ( $ n ) {"}
{"text":"base case : if n < 10 return sum of first n natural numbers","code":"if ( $ n < 10 ) return ( $ n * ( $ n + 1 ) \/ 2 ) ;"}
{"text":"d = number of digits minus one in n . For 328 , d is 2","code":"$ d = ( int ) ( log10 ( $ n ) ) ;"}
{"text":"computing sum of digits from 1 to 10 ^ d - 1 , d = 1 a [ 0 ] = 0 ; d = 2 a [ 1 ] = sum of digit from 1 to 9 = 45 d = 3 a [ 2 ] = sum of digit from 1 to 99 = a [ 1 ] * 10 + 45 * 10 ^ 1 = 900 d = 4 a [ 3 ] = sum of digit from 1 to 999 = a [ 2 ] * 10 + 45 * 10 ^ 2 = 13500","code":"$ a [ $ d + 1 ] = array ( ) ; $ a [ 0 ] = 0 ; $ a [ 1 ] = 45 ; for ( $ i = 2 ; $ i <= $ d ; $ i ++ ) $ a [ $ i ] = $ a [ $ i - 1 ] * 10 + 45 * ( int ) ( ceil ( pow ( 10 , $ i - 1 ) ) ) ;"}
{"text":"computing 10 ^ d","code":"$ p = ( int ) ( ceil ( pow ( 10 , $ d ) ) ) ;"}
{"text":"Most significant digit ( msd ) of n , For 328 , msd is 3 which can be obtained using 328 \/ 100","code":"$ msd = ( int ) ( $ n \/ $ p ) ;"}
{"text":"EXPLANATION FOR FIRST and SECOND TERMS IN BELOW LINE OF CODE First two terms compute sum of digits from 1 to 299 ( sum of digits in range 1 - 99 stored in a [ d ] ) + ( sum of digits in range 100 - 199 , can be calculated as 1 * 100 + a [ d ] ( sum of digits in range 200 - 299 , can be calculated as 2 * 100 + a [ d ] The above sum can be written as 3 * a [ d ] + ( 1 + 2 ) * 100 EXPLANATION FOR THIRD AND FOURTH TERMS IN BELOW LINE OF CODE The last two terms compute sum of digits in number from 300 to 328. The third term adds 3 * 29 to sum as digit 3 occurs in all numbers from 300 to 328. The fourth term recursively calls for 28","code":"return ( $ msd * $ a [ $ d ] + ( $ msd * ( int ) ( $ msd - 1 ) \/ 2 ) * $ p + $ msd * ( 1 + $ n % $ p ) + sumOfDigitsFrom1ToN ( $ n % $ p ) ) ; }"}
{"text":"Driver Code","code":"$ n = 328 ; echo ( \" Sum \u2581 of \u2581 digits \u2581 in \u2581 numbers \u2581 \" ) , \" from \u2581 1 \u2581 to \u2581 \" , $ n , \" \u2581 is \u2581 \" , sumOfDigitsFrom1ToN ( $ n ) ; ? >"}
{"text":"Returns count of possible ways for N sections","code":"< ? php function countWays ( $ N ) {"}
{"text":"Base case","code":"if ( $ N == 1 )"}
{"text":"2 for one side and 4 for two sides","code":"return 4 ;"}
{"text":"countB is count of ways with a building at the end countS is count of ways with a space at the end prev_countB and prev_countS are previous values of countB and countS respectively . Initialize countB and countS for one side","code":"$ countB = 1 ; $ countS = 1 ; $ prev_countB ; $ prev_countS ;"}
{"text":"Use the above recursive formula for calculating countB and countS using previous values","code":"for ( $ i = 2 ; $ i <= $ N ; $ i ++ ) { $ prev_countB = $ countB ; $ prev_countS = $ countS ; $ countS = $ prev_countB + $ prev_countS ; $ countB = $ prev_countS ; }"}
{"text":"Result for one side is sum of ways ending with building and ending with space","code":"$ result = $ countS + $ countB ;"}
{"text":"Result for 2 sides is square of result for one side","code":"return ( $ result * $ result ) ; }"}
{"text":"Driver Code","code":"$ N = 3 ; echo \" Count \u2581 of \u2581 ways \u2581 for \u2581 \" , $ N , \" \u2581 sections \u2581 is \u2581 \" , countWays ( $ N ) ; ? >"}
{"text":"Returns number of ways to reach score n","code":"< ? php function counts ( $ n ) {"}
{"text":"table [ i ] will store count of solutions for value i . Initialize all table values as 0","code":"for ( $ j = 0 ; $ j < $ n + 1 ; $ j ++ ) $ table [ $ j ] = 0 ;"}
{"text":"Base case ( If given value is 0 )","code":"$ table [ 0 ] = 1 ;"}
{"text":"One by one consider given 3 moves and update the table [ ] values after the index greater than or equal to the value of the picked move","code":"for ( $ i = 3 ; $ i <= $ n ; $ i ++ ) $ table [ $ i ] += $ table [ $ i - 3 ] ; for ( $ i = 5 ; $ i <= $ n ; $ i ++ ) $ table [ $ i ] += $ table [ $ i - 5 ] ; for ( $ i = 10 ; $ i <= $ n ; $ i ++ ) $ table [ $ i ] += $ table [ $ i - 10 ] ; return $ table [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 20 ; echo \" Count \u2581 for \u2581 \" ; echo ( $ n ) ; echo ( \" \u2581 is \u2581 \" ) ; echo counts ( $ n ) ; $ n = 13 ; echo ( \" STRNEWLINE \" ) ; echo \" Count \u2581 for \u2581 \" ; echo ( $ n ) ; echo ( \" \u2581 is \u2581 \" ) ; echo counts ( $ n ) ; ? >"}
{"text":"PHP program for Naive Pattern Searching algorithm","code":"< ? php function search ( $ pat , $ txt ) { $ M = strlen ( $ pat ) ; $ N = strlen ( $ txt ) ;"}
{"text":"A loop to slide pat [ ] one by one","code":"for ( $ i = 0 ; $ i <= $ N - $ M ; $ i ++ ) {"}
{"text":"For current index i , check for pattern match","code":"for ( $ j = 0 ; $ j < $ M ; $ j ++ ) if ( $ txt [ $ i + $ j ] != $ pat [ $ j ] ) break ;"}
{"text":"if pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]","code":"if ( $ j == $ M ) echo \" Pattern \u2581 found \u2581 at \u2581 index \u2581 \" , $ i . \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ txt = \" AABAACAADAABAAABAA \" ; $ pat = \" AABA \" ; search ( $ pat , $ txt ) ; ? >"}
{"text":"d is the number of characters in the input alphabet","code":"< ? php $ d = 256 ;"}
{"text":"pat -> pattern txt -> text q -> A prime number","code":"function search ( $ pat , $ txt , $ q ) { $ M = strlen ( $ pat ) ; $ N = strlen ( $ txt ) ; $ i ; $ j ;"}
{"text":"hash value","code":"$ p = 0 ;"}
{"text":"for pattern hash value","code":"$ t = 0 ; $ h = 1 ; $ d = 1 ;"}
{"text":"The value of h would be \" pow ( d , \u2581 M - 1 ) % q \"","code":"for ( $ i = 0 ; $ i < $ M - 1 ; $ i ++ ) $ h = ( $ h * $ d ) % $ q ;"}
{"text":"Calculate the hash value of pattern and first window of text","code":"for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { $ p = ( $ d * $ p + $ pat [ $ i ] ) % $ q ; $ t = ( $ d * $ t + $ txt [ $ i ] ) % $ q ; }"}
{"text":"Slide the pattern over text one by one","code":"for ( $ i = 0 ; $ i <= $ N - $ M ; $ i ++ ) {"}
{"text":"Check the hash values of current window of text and pattern . If the hash values match then only check for characters on by one","code":"if ( $ p == $ t ) {"}
{"text":"Check for characters one by one","code":"for ( $ j = 0 ; $ j < $ M ; $ j ++ ) { if ( $ txt [ $ i + $ j ] != $ pat [ $ j ] ) break ; }"}
{"text":"if p == t and pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]","code":"if ( $ j == $ M ) echo \" Pattern \u2581 found \u2581 at \u2581 index \u2581 \" , $ i , \" STRNEWLINE \" ; }"}
{"text":"Calculate hash value for next window of text : Remove leading digit , add trailing digit","code":"if ( $ i < $ N - $ M ) { $ t = ( $ d * ( $ t - $ txt [ $ i ] * $ h ) + $ txt [ $ i + $ M ] ) % $ q ;"}
{"text":"We might get negative value of t , converting it to positive","code":"if ( $ t < 0 ) $ t = ( $ t + $ q ) ; } } }"}
{"text":"Driver Code","code":"$ txt = \" GEEKS \u2581 FOR \u2581 GEEKS \" ; $ pat = \" GEEK \" ;"}
{"text":"A prime number","code":"$ q = 101 ;"}
{"text":"Function Call","code":"search ( $ pat , $ txt , $ q ) ; ? >"}
{"text":"A modified Naive Pettern Searching algorithn that is optimized for the cases when all characters of pattern are different","code":"< ? php function search ( $ pat , $ txt ) { $ M = strlen ( $ pat ) ; $ N = strlen ( $ txt ) ; $ i = 0 ; while ( $ i <= $ N - $ M ) { $ j ;"}
{"text":"For current index i , check for pattern match","code":"for ( $ j = 0 ; $ j < $ M ; $ j ++ ) if ( $ txt [ $ i + $ j ] != $ pat [ $ j ] ) break ;"}
{"text":"if pat [ 0. . . M - 1 ] = txt [ i , i + 1 , ... i + M - 1 ]","code":"if ( $ j == $ M ) { echo ( \" Pattern \u2581 found \u2581 at \u2581 index \u2581 $ i \" . \" STRNEWLINE \" ) ; $ i = $ i + $ M ; } else if ( $ j == 0 ) $ i = $ i + 1 ; else"}
{"text":"slide the pattern by j","code":"$ i = $ i + $ j ; } }"}
{"text":"Driver Code","code":"$ txt = \" ABCEABCDABCEABCD \" ; $ pat = \" ABCD \" ; search ( $ pat , $ txt ) ; ? >"}
{"text":"Function recursively prints the strings having space pattern . i and j are indices in ' str [ ] ' and ' buff [ ] ' respectively","code":"< ? php function printPatternUtil ( $ str , $ buff , $ i , $ j , $ n ) { if ( $ i == $ n ) { $ buff [ $ j ] = ' ' ; echo str_replace ( ' , \u2581 ' , ' ' , implode ( ' , \u2581 ' , $ buff ) ) . \" STRNEWLINE \" ; return ; }"}
{"text":"Either put the character","code":"$ buff [ $ j ] = $ str [ $ i ] ; printPatternUtil ( $ str , $ buff , $ i + 1 , $ j + 1 , $ n ) ;"}
{"text":"Or put a space followed by next character","code":"$ buff [ $ j ] = ' \u2581 ' ; $ buff [ $ j + 1 ] = $ str [ $ i ] ; printPatternUtil ( $ str , $ buff , $ i +1 , $ j + 2 , $ n ) ; }"}
{"text":"This function creates buf [ ] to store individual output string and uses printPatternUtil ( ) to print all permutations .","code":"function printPattern ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Buffer to hold the string containing spaces 2 n - 1 characters and 1 string terminator","code":"$ buf = array_fill ( 0 , 2 * $ n , null ) ;"}
{"text":"Copy the first character as it is , since it will be always at first position","code":"$ buf [ 0 ] = $ str [ 0 ] ; printPatternUtil ( $ str , $ buf , 1 , 1 , $ n ) ; }"}
{"text":"Driver code","code":"$ str = \" ABCD \" ; printPattern ( $ str ) ; ? >"}
{"text":"This function returns median of ar1 [ ] and ar2 [ ] . Assumptions in this function : Both ar1 [ ] and ar2 [ ] are sorted arrays Both have n elements","code":"< ? php function getMedian ( $ ar1 , $ ar2 , $ n ) { $ i = 0 ; $ j = 0 ; $ count ; $ m1 = -1 ; $ m2 = -1 ;"}
{"text":"Since there are 2 n elements , median will be average of elements at index n - 1 and n in the array obtained after merging ar1 and ar2","code":"for ( $ count = 0 ; $ count <= $ n ; $ count ++ ) {"}
{"text":"Below is to handle case where all elements of ar1 [ ] are smaller than smallest ( or first ) element of ar2 [ ]","code":"if ( $ i == $ n ) { $ m1 = $ m2 ; $ m2 = $ ar2 [ 0 ] ; break ; }"}
{"text":"Below is to handle case where all elements of ar2 [ ] are smaller than smallest ( or first ) element of ar1 [ ]","code":"else if ( $ j == $ n ) { $ m1 = $ m2 ; $ m2 = $ ar1 [ 0 ] ; break ; }"}
{"text":"equals sign because if two arrays have some common elements","code":"if ( $ ar1 [ $ i ] <= $ ar2 [ $ j ] ) {"}
{"text":"Store the prev median","code":"$ m1 = $ m2 ; $ m2 = $ ar1 [ $ i ] ; $ i ++ ; } else {"}
{"text":"Store the prev median","code":"$ m1 = $ m2 ; $ m2 = $ ar2 [ $ j ] ; $ j ++ ; } } return ( $ m1 + $ m2 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ ar1 = array ( 1 , 12 , 15 , 26 , 38 ) ; $ ar2 = array ( 2 , 13 , 17 , 30 , 45 ) ; $ n1 = sizeof ( $ ar1 ) ; $ n2 = sizeof ( $ ar2 ) ; if ( $ n1 == $ n2 ) echo ( \" Median \u2581 is \u2581 \" . getMedian ( $ ar1 , $ ar2 , $ n1 ) ) ; else echo ( \" Doesn ' t \u2581 work \u2581 for \u2581 arrays \" . \" of \u2581 unequal \u2581 size \" ) ; ? >"}
{"text":"A utility function to calculate area of triangle formed by ( x1 , y1 ) , ( x2 , y2 ) and ( x3 , y3 )","code":"< ? php function area ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 ) { return abs ( ( $ x1 * ( $ y2 - $ y3 ) + $ x2 * ( $ y3 - $ y1 ) + $ x3 * ( $ y1 - $ y2 ) ) \/ 2.0 ) ; }"}
{"text":"A function to check whether P ( x , y ) lies inside the triangle formed by A ( x1 , y1 ) , B ( x2 , y2 ) and C ( x3 , y3 )","code":"function isInside ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 , $ x , $ y ) {"}
{"text":"Calculate area of triangle ABC","code":"$ A = area ( $ x1 , $ y1 , $ x2 , $ y2 , $ x3 , $ y3 ) ;"}
{"text":"Calculate area of triangle PBC","code":"$ A1 = area ( $ x , $ y , $ x2 , $ y2 , $ x3 , $ y3 ) ;"}
{"text":"Calculate area of triangle PAC","code":"$ A2 = area ( $ x1 , $ y1 , $ x , $ y , $ x3 , $ y3 ) ;"}
{"text":"Calculate area of triangle PAB","code":"$ A3 = area ( $ x1 , $ y1 , $ x2 , $ y2 , $ x , $ y ) ;"}
{"text":"Check if sum of A1 , A2 and A3 is same as A","code":"return ( $ A == $ A1 + $ A2 + $ A3 ) ; }"}
{"text":"Let us check whether the P ( 10 , 15 ) lies inside the triangle formed by A ( 0 , 0 ) , B ( 20 , 0 ) and C ( 10 , 30 )","code":"if ( isInside ( 0 , 0 , 20 , 0 , 10 , 30 , 10 , 15 ) ) echo \" Inside \" ; else echo \" Not \u2581 Inside \" ; ? >"}
{"text":"Returns 1 if n is a lucky no . ohterwise returns 0","code":"< ? php function isLucky ( $ n ) { $ counter = 2 ;"}
{"text":"variable next_position is just for readability of the program we can remove it and use n only","code":"$ next_position = $ n ; if ( $ counter > $ n ) return 1 ; if ( $ n % $ counter == 0 ) return 0 ;"}
{"text":"calculate next position of input no","code":"$ next_position -= $ next_position \/ $ counter ; $ counter ++ ; return isLucky ( $ next_position ) ; }"}
{"text":"Driver Code","code":"$ x = 5 ; if ( isLucky ( $ x ) ) echo $ x , \" \u2581 is \u2581 a \u2581 lucky \u2581 no . \" ; else echo $ x , \" \u2581 is \u2581 not \u2581 a \u2581 lucky \u2581 no . \" ; ? >"}
{"text":"Works only if a >= 0 and b >= 0","code":"< ? php function poww ( $ a , $ b ) { if ( $ b == 0 ) return 1 ; $ answer = $ a ; $ increment = $ a ; $ i ; $ j ; for ( $ i = 1 ; $ i < $ b ; $ i ++ ) { for ( $ j = 1 ; $ j < $ a ; $ j ++ ) { $ answer += $ increment ; } $ increment = $ answer ; } return $ answer ; }"}
{"text":"Driver Code","code":"echo ( poww ( 5 , 3 ) ) ; ? >"}
{"text":"A recursive function to get x * y","code":"< ? php function multiply ( $ x , $ y ) { if ( $ y ) return ( $ x + multiply ( $ x , $ y - 1 ) ) ; else return 0 ; }"}
{"text":"A recursive function to get a ^ b Works only if a >= 0 and b >= 0","code":"function p_ow ( $ a , $ b ) { if ( $ b ) return multiply ( $ a , p_ow ( $ a , $ b - 1 ) ) ; else return 1 ; }"}
{"text":"Driver Code","code":"echo pow ( 5 , 3 ) ; ? >"}
{"text":"returns count of numbers which are in range from 1 to n and don 't contain 3 as a digit","code":"< ? php function count1 ( $ n ) {"}
{"text":"Base cases ( Assuming n is not negative )","code":"if ( $ n < 3 ) return $ n ; if ( $ n >= 3 && $ n < 10 ) return $ n - 1 ;"}
{"text":"Calculate 10 ^ ( d - 1 ) ( 10 raise to the power d - 1 ) where d is number of digits in n . po will be 100 for n = 578","code":"$ po = 1 ; for ( $ x = intval ( $ n \/ $ po ) ; $ x > 9 ; $ x = intval ( $ n \/ $ po ) ) $ po = $ po * 10 ;"}
{"text":"find the most significant digit ( msd is 5 for 578 )","code":"$ msd = intval ( $ n \/ $ po ) ; if ( $ msd != 3 )"}
{"text":"For 578 , total will be 4 * count ( 10 ^ 2 - 1 ) + 4 + count ( 78 )","code":"return count1 ( $ msd ) * count1 ( $ po - 1 ) + count1 ( $ msd ) + count1 ( $ n % $ po ) ; else"}
{"text":"For 35 , total will be equal to count ( 29 )","code":"return count1 ( $ msd * $ po - 1 ) ; }"}
{"text":"Driver program to test above function","code":"echo count1 ( 578 ) ; ? >"}
{"text":"Function to return the maximum number","code":"< ? php function maximumNumberDistinctPrimeRange ( $ m , $ n ) {"}
{"text":"array to store the number of distinct primes","code":"$ factorCount = array ( ) ;"}
{"text":"true if index ' i ' is a prime","code":"$ prime = array ( ) ;"}
{"text":"initializing the number of factors to 0 and","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { $ factorCount [ $ i ] = 0 ;"}
{"text":"Used in Sieve","code":"$ prime [ $ i ] = true ; } for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"condition works only when ' i ' is prime , hence for factors of all prime number , the prime status is changed to false","code":"if ( $ prime [ $ i ] == true ) {"}
{"text":"Number is prime","code":"$ factorCount [ $ i ] = 1 ;"}
{"text":"number of factor of a prime number is 1","code":"for ( $ j = $ i * 2 ; $ j <= $ n ; $ j += $ i ) {"}
{"text":"incrementing factorCount all the factors of i","code":"$ factorCount [ $ j ] ++ ;"}
{"text":"and changing prime status to false","code":"$ prime [ $ j ] = false ; } } }"}
{"text":"Initialize the max and num","code":"$ max = $ factorCount [ $ m ] ; $ num = $ m ;"}
{"text":"Gets the maximum number","code":"for ( $ i = $ m ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Gets the maximum number","code":"if ( $ factorCount [ $ i ] > $ max ) { $ max = $ factorCount [ $ i ] ; $ num = $ i ; } } return $ num ; }"}
{"text":"Driver code","code":"$ m = 4 ; $ n = 6 ;"}
{"text":"Calling function","code":"echo maximumNumberDistinctPrimeRange ( $ m , $ n ) ; ? >"}
{"text":"A utility function to find factorial of n","code":"< ? php function fact ( $ n ) { return ( $ n <= 1 ) ? 1 : $ n * fact ( $ n - 1 ) ; }"}
{"text":"A utility function to count smaller characters on right of arr [ low ]","code":"function findSmallerInRight ( $ str , $ low , $ high ) { $ countRight = 0 ; for ( $ i = $ low + 1 ; $ i <= $ high ; ++ $ i ) if ( $ str [ $ i ] < $ str [ $ low ] ) ++ $ countRight ; return $ countRight ; }"}
{"text":"A function to find rank of a string in all permutations of characters","code":"function findRank ( $ str ) { $ len = strlen ( $ str ) ; $ mul = fact ( $ len ) ; $ rank = 1 ; for ( $ i = 0 ; $ i < $ len ; ++ $ i ) { $ mul \/= $ len - $ i ;"}
{"text":"count number of chars smaller than str [ i ] fron str [ i + 1 ] to str [ len - 1 ]","code":"$ countRight = findSmallerInRight ( $ str , $ i , $ len - 1 ) ; $ rank += $ countRight * $ mul ; } return $ rank ; }"}
{"text":"Driver Code","code":"$ str = \" string \" ; echo findRank ( $ str ) ; ? >"}
{"text":"A O ( n ) solution for finding rank of string","code":"< ? php $ MAX_CHAR = 256 ;"}
{"text":"all elements of count [ ] are initialized with 0","code":"$ count = array_fill ( 0 , $ MAX_CHAR + 1 , 0 ) ;"}
{"text":"A utility function to find factorial of n","code":"function fact ( $ n ) { return ( $ n <= 1 ) ? 1 : $ n * fact ( $ n - 1 ) ; }"}
{"text":"Construct a count array where value at every index contains count of smaller characters in whole string","code":"function populateAndIncreaseCount ( & $ count , $ str ) { global $ MAX_CHAR ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; ++ $ i ) ++ $ count [ ord ( $ str [ $ i ] ) ] ; for ( $ i = 1 ; $ i < $ MAX_CHAR ; ++ $ i ) $ count [ $ i ] += $ count [ $ i - 1 ] ; }"}
{"text":"Removes a character ch from count [ ] array constructed by populateAndIncreaseCount ( )","code":"function updatecount ( & $ count , $ ch ) { global $ MAX_CHAR ; for ( $ i = ord ( $ ch ) ; $ i < $ MAX_CHAR ; ++ $ i ) -- $ count [ $ i ] ; }"}
{"text":"A function to find rank of a string in all permutations of characters","code":"function findRank ( $ str ) { global $ MAX_CHAR ; $ len = strlen ( $ str ) ; $ mul = fact ( $ len ) ; $ rank = 1 ;"}
{"text":"Populate the count array such that count [ i ] contains count of characters which are present in str and are smaller than i","code":"populateAndIncreaseCount ( $ count , $ str ) ; for ( $ i = 0 ; $ i < $ len ; ++ $ i ) { $ mul = ( int ) ( $ mul \/ ( $ len - $ i ) ) ;"}
{"text":"count number of chars smaller than str [ i ] fron str [ i + 1 ] to str [ len - 1 ]","code":"$ rank += $ count [ ord ( $ str [ $ i ] ) - 1 ] * $ mul ;"}
{"text":"Reduce count of characters greater than str [ i ]","code":"updatecount ( $ count , $ str [ $ i ] ) ; } return $ rank ; }"}
{"text":"Driver code","code":"$ str = \" string \" ; echo findRank ( $ str ) ; ? >"}
{"text":"Returns approximate value of e ^ x using sum of first n terms of Taylor Series","code":"< ? php function exponential ( $ n , $ x ) {"}
{"text":"initialize sum of series","code":"$ sum = 1.0 ; for ( $ i = $ n - 1 ; $ i > 0 ; -- $ i ) $ sum = 1 + $ x * $ sum \/ $ i ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ; $ x = 1.0 ; echo ( \" e ^ x \u2581 = \u2581 \" . exponential ( $ n , $ x ) ) ; ? >"}
{"text":"A utility function that returns true if x is perfect square","code":"< ? php function isPerfectSquare ( $ x ) { $ s = ( int ) ( sqrt ( $ x ) ) ; return ( $ s * $ s == $ x ) ; }"}
{"text":"Returns true if n is a Fibinacci Number , else false","code":"function isFibonacci ( $ n ) {"}
{"text":"n is Fibinacci if one of 5 * n * n + 4 or 5 * n * n - 4 or both is a perferct square","code":"return isPerfectSquare ( 5 * $ n * $ n + 4 ) || isPerfectSquare ( 5 * $ n * $ n - 4 ) ; }"}
{"text":"Driver Code","code":"for ( $ i = 1 ; $ i <= 10 ; $ i ++ ) if ( isFibonacci ( $ i ) ) echo \" $ i \u2581 is \u2581 a \u2581 Fibonacci \u2581 Number \u2581 STRNEWLINE \" ; else echo \" $ i \u2581 is \u2581 a \u2581 not \u2581 Fibonacci \u2581 Number \u2581 STRNEWLINE \" ; ? >"}
{"text":"Function to return trailing 0 s in factorial of n","code":"< ? php function findTrailingZeros ( $ n ) {"}
{"text":"Initialize result","code":"$ count = 0 ;"}
{"text":"Keep dividing n by powers of 5 and update count","code":"for ( $ i = 5 ; $ n \/ $ i >= 1 ; $ i *= 5 ) $ count += $ n \/ $ i ; return $ count ; }"}
{"text":"Driver Code","code":"$ n = 100 ; echo \" Count \u2581 of \u2581 trailing \u2581 0s \u2581 in \u2581 \" , 100 , \" ! \u2581 is \u2581 \" , findTrailingZeros ( $ n ) ; ? >"}
{"text":"A recursive function to find nth catalan number","code":"< ? php function catalan ( $ n ) {"}
{"text":"Base case","code":"if ( $ n <= 1 ) return 1 ;"}
{"text":"catalan ( n ) is sum of catalan ( i ) * catalan ( n - i - 1 )","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ res += catalan ( $ i ) * catalan ( $ n - $ i - 1 ) ; return $ res ; }"}
{"text":"Driver Code","code":"for ( $ i = 0 ; $ i < 10 ; $ i ++ ) echo catalan ( $ i ) , \" \u2581 \" ; ? >"}
{"text":"PHP program for nth Catalan Number A dynamic programming based function to find nth Catalan number","code":"< ? php function catalanDP ( $ n ) {"}
{"text":"Table to store results of subproblems","code":"$ catalan = array ( ) ;"}
{"text":"Initialize first two values in table","code":"$ catalan [ 0 ] = $ catalan [ 1 ] = 1 ;"}
{"text":"Fill entries in catalan [ ] using recursive formula","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ catalan [ $ i ] = 0 ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) $ catalan [ $ i ] += $ catalan [ $ j ] * $ catalan [ $ i - $ j - 1 ] ; }"}
{"text":"Return last entry","code":"return $ catalan [ $ n ] ; }"}
{"text":"Driver Code","code":"for ( $ i = 0 ; $ i < 10 ; $ i ++ ) echo catalanDP ( $ i ) , \" \u2581 \" ;"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"< ? php function binomialCoeff ( $ n , $ k ) { $ res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( $ k > $ n - $ k ) $ k = $ n - $ k ;"}
{"text":"Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) { $ res *= ( $ n - $ i ) ; $ res = floor ( $ res \/ ( $ i + 1 ) ) ; } return $ res ; }"}
{"text":"A Binomial coefficient based function to find nth catalan number in O ( n ) time","code":"function catalan ( $ n ) {"}
{"text":"Calculate value of 2 nCn","code":"$ c = binomialCoeff ( 2 * ( $ n ) , $ n ) ;"}
{"text":"return 2 nCn \/ ( n + 1 )","code":"return floor ( $ c \/ ( $ n + 1 ) ) ; }"}
{"text":"Driver code","code":"for ( $ i = 0 ; $ i < 10 ; $ i ++ ) echo catalan ( $ i ) , \" \u2581 \" ; ? >"}
{"text":"Utility function to find minimum of two integers","code":"< ? php function mintwo ( $ x , $ y ) { return ( $ x < $ y ) ? $ x : $ y ; }"}
{"text":"Function to calculate the angle","code":"function calcAngle ( $ h , $ m ) {"}
{"text":"validate the input","code":"if ( $ h < 0 $ m < 0 $ h > 12 $ m > 60 ) echo \" Wrong \u2581 input \" ; if ( $ h == 12 ) $ h = 0 ; if ( $ m == 60 ) { $ m = 0 ; $ h += 1 ; if ( $ h > 12 ) $ h = $ h - 12 ; }"}
{"text":"Calculate the angles moved by hour and minute hands with reference to 12 : 00","code":"$ hour_angle = 0.5 * ( $ h * 60 + $ m ) ; $ minute_angle = 6 * $ m ;"}
{"text":"Find the difference between two angles","code":"$ angle = abs ( $ hour_angle - $ minute_angle ) ;"}
{"text":"Return the smaller angle of two possible angles","code":"$ angle = min ( 360 - $ angle , $ angle ) ; return $ angle ; }"}
{"text":"Driver Code","code":"echo calcAngle ( 9 , 60 ) , \" STRNEWLINE \" ; echo calcAngle ( 3 , 30 ) , \" STRNEWLINE \" ; ? >"}
{"text":"A utility function to count inversions in given array ' arr [ ] '","code":"< ? php function getInvCount ( $ arr ) { $ inv_count = 0 ; for ( $ i = 0 ; $ i < 9 - 1 ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < 9 ; $ j ++ )"}
{"text":"Value 0 is used for empty space","code":"$ inv_count ++ ; return $ inv_count ; }"}
{"text":"This function returns true if given 8 puzzle is solvable .","code":"function isSolvable ( $ puzzle ) {"}
{"text":"Count inversions in given 8 puzzle","code":"$ invCount = getInvCount ( $ puzzle ) ;"}
{"text":"return true if inversion count is even .","code":"return ( $ invCount % 2 == 0 ) ; }"}
{"text":"Driver Code","code":"$ puzzle = array ( array ( 1 , 8 , 2 ) , array ( 0 , 4 , 3 ) , array ( 7 , 6 , 5 ) ) ; if ( isSolvable ( $ puzzle ) == true ) echo \" Solvable \" ; else echo \" Not \u2581 Solvable \" ; ? >"}
{"text":"Returns approximate number of people for a given probability","code":"< ? php function find ( $ p ) { return ceil ( sqrt ( 2 * 365 * log ( 1 \/ ( 1 - $ p ) ) ) ) ; }"}
{"text":"Driver Code","code":"echo find ( 0.70 ) ; ? >"}
{"text":"function counts number of pairs ( x , y ) that satisfy the inequality x * x + y * y < n .","code":"< ? php function countSolutions ( $ n ) { $ res = 0 ; for ( $ x = 0 ; $ x * $ x < $ n ; $ x ++ ) for ( $ y = 0 ; $ x * $ x + $ y * $ y < $ n ; $ y ++ ) $ res ++ ; return $ res ; }"}
{"text":"Driver Code","code":"{ echo \" Total \u2581 Number \u2581 of \u2581 distinct \u2581 Non - Negative \u2581 pairs \u2581 is \u2581 \" ; echo countSolutions ( 6 ) ; return 0 ; } ? >"}
{"text":"This function counts number of pairs ( x , y ) that satisfy the inequality x * x + y * y < n .","code":"< ? php function countSolutions ( $ n ) { $ x = 0 ; $ yCount ; $ res = 0 ;"}
{"text":"Find the count of different y values for x = 0.","code":"for ( $ yCount = 0 ; $ yCount * $ yCount < $ n ; $ yCount ++ ) ;"}
{"text":"One by one increase value of x , and find yCount for current x . If yCount becomes 0 , then we have reached maximum possible value of x .","code":"while ( $ yCount != 0 ) {"}
{"text":"Add yCount ( count of different possible values of y for current x ) to result","code":"$ res += $ yCount ;"}
{"text":"Increment x","code":"$ x ++ ;"}
{"text":"Update yCount for current x . Keep reducing yCount while the inequality is not satisfied .","code":"while ( $ yCount != 0 and ( $ x * $ x + ( $ yCount - 1 ) * ( $ yCount - 1 ) >= $ n ) ) $ yCount -- ; } return $ res ; }"}
{"text":"Driver program to test above function","code":"echo \" Total \u2581 Number \u2581 of \u2581 distinct \u2581 Non - Negative \" , \" pairs \u2581 is \u2581 \" , countSolutions ( 6 ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program for implementation of Newton Raphson Method for solving equations","code":"< ? php $ EPSILON = 0.001 ;"}
{"text":"An example function whose solution is determined using Bisection Method . The function is x ^ 3 - x ^ 2 + 2","code":"function func ( $ x ) { return $ x * $ x * $ x - $ x * $ x + 2 ; }"}
{"text":"Derivative of the above function which is 3 * x ^ x - 2 * x","code":"function derivFunc ( $ x ) { return 3 * $ x * $ x - 2 * $ x ; }"}
{"text":"Function to find the root","code":"function newtonRaphson ( $ x ) { global $ EPSILON ; $ h = func ( $ x ) \/ derivFunc ( $ x ) ; while ( abs ( $ h ) >= $ EPSILON ) { $ h = func ( $ x ) \/ derivFunc ( $ x ) ;"}
{"text":"x ( i + 1 ) = x ( i ) - f ( x ) \/ f '(x)","code":"$ x = $ x - $ h ; } echo \" The \u2581 value \u2581 of \u2581 the \u2581 \" . \" root \u2581 is \u2581 : \u2581 \" , $ x ; }"}
{"text":"Initial values assumed","code":"$ x0 = -20 ; newtonRaphson ( $ x0 ) ; ? >"}
{"text":"Method to find the element that occur only once","code":"< ? php function getSingle ( $ arr , $ n ) { $ ones = 0 ; $ twos = 0 ; $ common_bit_mask ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"The expression \" one \u2581 & \u2581 arr [ i ] \" gives the bits that are there in both ' ones ' and new element from arr [ ] . We add these bits to ' twos ' using bitwise OR Value of ' twos ' will be set as 0 , 3 , 3 and 1 after 1 st , 2 nd , 3 rd and 4 th iterations respectively","code":"$ twos = $ twos | ( $ ones & $ arr [ $ i ] ) ;"}
{"text":"XOR the new bits with previous ' ones ' to get all bits appearing odd number of times Value of ' ones ' will be set as 3 , 0 , 2 and 3 after 1 st , 2 nd , 3 rd and 4 th iterations respectively","code":"$ ones = $ ones ^ $ arr [ $ i ] ;"}
{"text":"The common bits are those bits which appear third time . So these bits should not be there in both ' ones ' and ' twos ' . common_bit_mask contains all these bits as 0 , so that the bits can be removed from ' ones ' and ' twos ' Value of ' common _ bit _ mask ' will be set as 00 , 00 , 01 and 10 after 1 st , 2 nd , 3 rd and 4 th iterations respectively","code":"$ common_bit_mask = ~ ( $ ones & $ twos ) ;"}
{"text":"Remove common bits ( the bits that appear third time ) from ' ones ' Value of ' ones ' will be set as 3 , 0 , 0 and 2 after 1 st , 2 nd , 3 rd and 4 th iterations respectively","code":"$ ones &= $ common_bit_mask ;"}
{"text":"Remove common bits ( the bits that appear third time ) from ' twos ' Value of ' twos ' will be set as 0 , 3 , 1 and 0 after 1 st , 2 nd , 3 rd and 4 th itearations respectively","code":"$ twos &= $ common_bit_mask ; } return $ ones ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 3 , 2 , 3 ) ; $ n = sizeof ( $ arr ) ; echo \" The \u2581 element \u2581 with \u2581 single \u2581 \" . \" occurrence \u2581 is \u2581 \" , getSingle ( $ arr , $ n ) ; ? >"}
{"text":"PHP code to find the element that occur only once","code":"< ? php $ INT_SIZE = 32 ; function getSingle ( $ arr , $ n ) { global $ INT_SIZE ;"}
{"text":"Initialize result","code":"$ result = 0 ; $ x ; $ sum ;"}
{"text":"Iterate through every bit","code":"for ( $ i = 0 ; $ i < $ INT_SIZE ; $ i ++ ) {"}
{"text":"Find sum of set bits at ith position in all array elements","code":"$ sum = 0 ; $ x = ( 1 << $ i ) ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ arr [ $ j ] & $ x ) $ sum ++ ; }"}
{"text":"The bits with sum not multiple of 3 , are the bits of element with single occurrence .","code":"if ( ( $ sum % 3 ) != 0 ) $ result |= $ x ; } return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 1 , 12 , 3 , 12 , 1 , 1 , 2 , 3 , 2 , 2 , 3 , 7 ) ; $ n = sizeof ( $ arr ) ; echo \" The \u2581 element \u2581 with \u2581 single \u2581 occurrence \u2581 is \u2581 \" , getSingle ( $ arr , $ n ) ; ? >"}
{"text":"Function to detect signs","code":"< ? php function oppositeSigns ( $ x , $ y ) { return ( ( $ x ^ $ y ) < 0 ) ; }"}
{"text":"Driver Code","code":"$ x = 100 ; $ y = -100 ; if ( oppositeSigns ( $ x , $ y ) == true ) echo ( \" Signs \u2581 are \u2581 opposite \" ) ; else echo ( \" Signs \u2581 are \u2581 not \u2581 opposite \" ) ; ? >"}
{"text":"Returns count of set bits present in all numbers from 1 to n","code":"< ? php function countSetBits ( $ n ) {"}
{"text":"initialize the result","code":"$ bitCount = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ bitCount += countSetBitsUtil ( $ i ) ; return $ bitCount ; }"}
{"text":"A utility function to count set bits in a number x","code":"function countSetBitsUtil ( $ x ) { if ( $ x <= 0 ) return 0 ; return ( $ x % 2 == 0 ? 0 : 1 ) + countSetBitsUtil ( $ x \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo \" Total \u2581 set \u2581 bit \u2581 count \u2581 is \u2581 \" . countSetBits ( $ n ) ; ? >"}
{"text":"Function which counts set bits from 0 to n","code":"< ? php function countSetBits ( $ n ) { $ i = 0 ;"}
{"text":"ans store sum of set bits from 0 to n","code":"$ ans = 0 ;"}
{"text":"while n greater than equal to 2 ^ i","code":"while ( ( 1 << $ i ) <= $ n ) {"}
{"text":"This k will get flipped after 2 ^ i iterations","code":"$ k = 0 ;"}
{"text":"change is iterator from 2 ^ i to 1","code":"$ change = 1 << $ i ;"}
{"text":"This will loop from 0 to n for every bit position","code":"for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { $ ans += $ k ; if ( $ change == 1 ) {"}
{"text":"When change = 1 flip the bit","code":"$ k = ! $ k ;"}
{"text":"again set change to 2 ^ i","code":"$ change = 1 << $ i ; } else { $ change -- ; } }"}
{"text":"increment the position","code":"$ i ++ ; } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 17 ; echo ( countSetBits ( $ n ) ) ; ? >"}
{"text":"PHP Program to swap bits in a given number function returns the swapped bits","code":"< ? php function swapBits ( $ x , $ p1 , $ p2 , $ n ) {"}
{"text":"Move all bits of first set to rightmost side","code":"$ set1 = ( $ x >> $ p1 ) & ( ( 1 << $ n ) - 1 ) ;"}
{"text":"Move all bits of second set to rightmost side","code":"$ set2 = ( $ x >> $ p2 ) & ( ( 1 << $ n ) - 1 ) ;"}
{"text":"XOR the two sets","code":"$ xor = ( $ set1 ^ $ set2 ) ;"}
{"text":"Put the xor bits back to their original positions","code":"$ xor = ( $ xor << $ p1 ) | ( $ xor << $ p2 ) ;"}
{"text":"XOR the ' xor ' with the original number so that the two sets are swapped","code":"$ result = $ x ^ $ xor ; return $ result ; }"}
{"text":"Driver Code","code":"$ res = swapBits ( 28 , 0 , 3 , 2 ) ; echo \" Result = \" ? >"}
{"text":"php program to find Smallest of three integers without comparison operators","code":"< ? php function smallest ( $ x , $ y , $ z ) { $ c = 0 ; while ( $ x && $ y && $ z ) { $ x -- ; $ y -- ; $ z -- ; $ c ++ ; } return $ c ; }"}
{"text":"Driver code","code":"$ x = 12 ; $ y = 15 ; $ z = 5 ; echo \" Minimum \u2581 of \u2581 3 \u2581 numbers \u2581 is \u2581 \" . smallest ( $ x , $ y , $ z ) ; ? >"}
{"text":"This function returns next higher number with same number of set bits as x .","code":"< ? php function snoob ( $ x ) { $ next = 0 ; if ( $ x ) {"}
{"text":"right most set bit","code":"$ rightOne = $ x & - $ x ;"}
{"text":"reset the pattern and set next higher bit left part of x will be here","code":"$ nextHigherOneBit = $ x + $ rightOne ;"}
{"text":"nextHigherOneBit is now part [ D ] of the above explanation . isolate the pattern","code":"$ rightOnesPattern = $ x ^ $ nextHigherOneBit ;"}
{"text":"right adjust pattern","code":"$ rightOnesPattern = intval ( ( $ rightOnesPattern ) \/ $ rightOne ) ;"}
{"text":"correction factor","code":"$ rightOnesPattern >>= 2 ;"}
{"text":"rightOnesPattern is now part [ A ] of the above explanation . integrate new pattern ( Add [ D ] and [ A ] )","code":"$ next = $ nextHigherOneBit | $ rightOnesPattern ; } return $ next ; }"}
{"text":"Driver Code","code":"$ x = 156 ; echo \" Next \u2581 higher \u2581 number \u2581 with \u2581 same \u2581 \" . \" number \u2581 of \u2581 set \u2581 bits \u2581 is \u2581 \" . snoob ( $ x ) ; ? >"}
{"text":"PHP code to add add one to a given number","code":"< ? php function addOne ( $ x ) { $ m = 1 ;"}
{"text":"Flip all the set bits until we find a 0","code":"while ( $ x & $ m ) { $ x = $ x ^ $ m ; $ m <<= 1 ; }"}
{"text":"flip the rightmost 0 bit","code":"$ x = $ x ^ $ m ; return $ x ; }"}
{"text":"Driver Code","code":"echo addOne ( 13 ) ; ? >"}
{"text":"PHP Code to Add 1 to a given number","code":"< ? php function addOne ( $ x ) { return ( - ( ~ $ x ) ) ; }"}
{"text":"Driver Code","code":"echo addOne ( 13 ) ; ? >"}
{"text":"PHP program to multiply a number with 3.5","code":"< ? php function multiplyWith3Point5 ( $ x ) { return ( $ x << 1 ) + $ x + ( $ x >> 1 ) ; }"}
{"text":"Driver Code","code":"$ x = 4 ; echo multiplyWith3Point5 ( $ x ) ; ? >"}
{"text":"unsets the rightmost set bit of n and returns the result","code":"< ? php function fun ( $ n ) { return $ n & ( $ n - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 7 ; echo \" The \u2581 number \u2581 after \u2581 unsetting \u2581 the \" . \" \u2581 rightmost \u2581 set \u2581 bit \u2581 \" , fun ( $ n ) ; ? >"}
{"text":"Function to check if x is power of 4","code":"< ? php function isPowerOfFour ( $ n ) { if ( $ n == 0 ) return 0 ; while ( $ n != 1 ) { if ( $ n % 4 != 0 ) return 0 ; $ n = $ n \/ 4 ; } return 1 ; }"}
{"text":"Driver Code","code":"$ test_no = 64 ; if ( isPowerOfFour ( $ test_no ) ) echo $ test_no , \" \u2581 is \u2581 a \u2581 power \u2581 of \u2581 4\" ; else echo $ test_no , \" \u2581 is \u2581 not \u2581 a \u2581 power \u2581 of \u2581 4\" ; ? >"}
{"text":"Function to check if x is power of 4","code":"< ? php function isPowerOfFour ( $ n ) { $ count = 0 ;"}
{"text":"Check if there is only one bit set in n","code":"if ( $ n && ! ( $ n & ( $ n - 1 ) ) ) {"}
{"text":"count 0 bits before set bit","code":"while ( $ n > 1 ) { $ n >>= 1 ; $ count += 1 ; }"}
{"text":"If count is even then return true else false","code":"return ( $ count % 2 == 0 ) ? 1 : 0 ; }"}
{"text":"If there are more than 1 bit set then n is not a power of 4","code":"return 0 ; }"}
{"text":"Driver program to test above function","code":"$ test_no = 64 ; if ( isPowerOfFour ( $ test_no ) ) echo $ test_no , \" \u2581 is \u2581 a \u2581 power \u2581 of \u2581 4\" ; else echo $ test_no , \" \u2581 not \u2581 is \u2581 a \u2581 power \u2581 of \u2581 4\" ; ? >"}
{"text":"Function to find minimum of x and y","code":"< ? php function m_in ( $ x , $ y ) { return $ y ^ ( ( $ x ^ $ y ) & - ( $ x < $ y ) ) ; }"}
{"text":"Function to find maximum of x and y","code":"function m_ax ( $ x , $ y ) { return $ x ^ ( ( $ x ^ $ y ) & - ( $ x < $ y ) ) ; }"}
{"text":"Driver Code","code":"$ x = 15 ; $ y = 6 ; echo \" Minimum \u2581 of \" , \" \u2581 \" , $ x , \" \u2581 \" , \" and \" , \" \u2581 \" , $ y , \" \u2581 \" , \" \u2581 is \u2581 \" , \" \u2581 \" ; echo m_in ( $ x , $ y ) ; echo \" Maximum of \" , \" \" , $ x , \" \" , STRNEWLINE \" and \" , \" \" , $ y , \" \" , \u2581 \" is \" echo m_ax ( $ x , $ y ) ; ? >"}
{"text":"Function to find the element occurring odd number of times","code":"< ? php function getOddOccurrence ( & $ arr , $ arr_size ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ arr_size ; $ i ++ ) { for ( $ j = 0 ; $ j < $ arr_size ; $ j ++ ) { if ( $ arr [ $ i ] == $ arr [ $ j ] ) $ count ++ ; } if ( $ count % 2 != 0 ) return $ arr [ $ i ] ; } return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 5 , 4 , 5 , 2 , 4 , 3 , 5 , 2 , 4 , 4 , 2 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Function calling","code":"echo ( getOddOccurrence ( $ arr , $ n ) ) ; ? >"}
{"text":"Function that count set bits","code":"< ? php function countSetBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ count += 1 ; $ n &= ( n - 1 ) ; } return $ count ; }"}
{"text":"Function that return count of flipped number","code":"function FlippedCount ( $ a , $ b ) {"}
{"text":"Return count of set bits in a XOR b","code":"return countSetBits ( $ a ^ $ b ) ; }"}
{"text":"Driver code","code":"$ a = 10 ; $ b = 20 ; echo FlippedCount ( $ a , $ b ) ; ? >"}
{"text":"PHP Code for Position of rightmost set bit","code":"< ? php function getFirstSetBitPos ( $ n ) { return ceil ( log ( ( $ n & - $ n ) + 1 , 2 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 12 ; echo getFirstSetBitPos ( $ n ) ; ? >"}
{"text":"function to find the rightmost set bit","code":"< ? php function PositionRightmostSetbit ( $ n ) {"}
{"text":"Position variable initialize with 1 m variable is used to check the set bit","code":"$ position = 1 ; $ m = 1 ; while ( ! ( $ n & $ m ) ) {"}
{"text":"left shift","code":"$ m = $ m << 1 ; $ position ++ ; } return $ position ; }"}
{"text":"Driver Code","code":"$ n = 16 ;"}
{"text":"function call","code":"echo PositionRightmostSetbit ( $ n ) ; ? >"}
{"text":"PHP implementation of above approach","code":"< ? php function Right_most_setbit ( $ num ) { $ pos = 1 ; $ INT_SIZE = 32 ;"}
{"text":"counting the position of first set bit","code":"for ( $ i = 0 ; $ i < $ INT_SIZE ; $ i ++ ) { if ( ! ( $ num & ( 1 << $ i ) ) ) $ pos ++ ; else break ; } return $ pos ; }"}
{"text":"Driver code","code":"$ num = 18 ; $ pos = Right_most_setbit ( $ num ) ; echo $ pos ; echo ( \" STRNEWLINE \" ) ? >"}
{"text":"Function to convert decimal to binary number","code":"< ? php function bin ( $ n ) { if ( $ n > 1 ) bin ( $ n >> 1 ) ; echo ( $ n & 1 ) ; }"}
{"text":"Driver code","code":"bin ( 131 ) ; echo \" STRNEWLINE \" ; bin ( 3 ) ;"}
{"text":"Function to swap even and odd bits","code":"< ? php function swapBits ( $ x ) {"}
{"text":"Get all even bits of x","code":"$ even_bits = $ x & 0xAAAAAAAA ;"}
{"text":"Get all odd bits of x","code":"$ odd_bits = $ x & 0x55555555 ;"}
{"text":"Right shift even bits","code":"$ even_bits >>= 1 ;"}
{"text":"Left shift odd bits","code":"$ odd_bits <<= 1 ;"}
{"text":"Combine even and odd bits","code":"return ( $ even_bits $ odd_bits ) ; }"}
{"text":"00010111","code":"$ x = 23 ;"}
{"text":"Output is 43 ( 00101011 )","code":"echo swapBits ( $ x ) ; ? >"}
{"text":"A utility function to check whether n is power of 2 or goo . gl \/ 17 Arj not . See http :","code":"< ? php function isPowerOfTwo ( $ n ) { return $ n && ( ! ( $ n & ( $ n - 1 ) ) ) ; }"}
{"text":"Returns position of the only set bit in ' n '","code":"function findPosition ( $ n ) { if ( ! isPowerOfTwo ( $ n ) ) return -1 ; $ i = 1 ; $ pos = 1 ;"}
{"text":"Iterate through bits of n till we find a set bit i & n will be non - zero only when ' i ' and ' n ' have a set bit at same position","code":"while ( ! ( $ i & $ n ) ) {"}
{"text":"Unset current bit and set the next bit in ' i '","code":"$ i = $ i << 1 ;"}
{"text":"increment position","code":"++ $ pos ; } return $ pos ; }"}
{"text":"Driver Code","code":"$ n = 16 ; $ pos = findPosition ( $ n ) ; if ( ( $ pos == -1 ) == true ) echo \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Invalid number \" , \u2581 \" \" ; STRNEWLINE else STRNEWLINE echo \u2581 \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Position \" , \u2581 $ pos , \u2581 \" \" $ n = 12 ; $ pos = findPosition ( $ n ) ; if ( ( $ pos == -1 ) == true ) echo \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Invalid number \" , \u2581 \" \" ; STRNEWLINE else STRNEWLINE echo \u2581 \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Position \" , \u2581 $ pos , \u2581 \" \" $ n = 128 ; $ pos = findPosition ( $ n ) ; if ( ( $ pos == -1 ) == true ) echo \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Invalid number \" , \u2581 \" \" ; STRNEWLINE else STRNEWLINE echo \u2581 \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Position \" , \u2581 $ pos , \u2581 \" \" ? >"}
{"text":"A utility function to check whether n is power of 2 or not","code":"< ? php function isPowerOfTwo ( $ n ) { return $ n && ( ! ( $ n & ( $ n - 1 ) ) ) ; }"}
{"text":"Returns position of the only set bit in ' n '","code":"function findPosition ( $ n ) { if ( ! isPowerOfTwo ( $ n ) ) return -1 ; $ count = 0 ;"}
{"text":"One by one move the only set bit to right till it reaches end","code":"while ( $ n ) { $ n = $ n >> 1 ;"}
{"text":"increment count of shifts","code":"++ $ count ; } return $ count ; }"}
{"text":"Driver Code","code":"$ n = 0 ; $ pos = findPosition ( $ n ) ; if ( ( $ pos == -1 ) == true ) echo \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Invalid number \" , \u2581 \" \" ; STRNEWLINE else STRNEWLINE echo \u2581 \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Position \" , \u2581 $ pos , \u2581 \" \" $ n = 12 ; $ pos = findPosition ( $ n ) ; if ( ( $ pos == -1 ) == true ) echo \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Invalid number \" , \u2581 \" \" ; STRNEWLINE else STRNEWLINE echo \u2581 \" n = \" , \u2581 $ n , STRNEWLINE \" Position \" , \u2581 $ pos , \u2581 \" \" $ n = 128 ; $ pos = findPosition ( $ n ) ; if ( ( $ pos == -1 ) == true ) echo \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Invalid number \" , \u2581 \" \" ; STRNEWLINE else STRNEWLINE echo \u2581 \" n = \" , \u2581 $ n , \u2581 \" , \" , STRNEWLINE \" Position \" , \u2581 $ pos , \u2581 \" \" ? >"}
{"text":"Driver code","code":"< ? php $ x = 10 ; $ y = 5 ;"}
{"text":"Code to swap ' x ' and ' y ' x now becomes 50","code":"$ x = $ x * $ y ;"}
{"text":"y becomes 10","code":"$ y = $ x \/ $ y ;"}
{"text":"x becomes 5","code":"$ x = $ x \/ $ y ; echo \" After \u2581 Swapping : \u2581 x \u2581 = \u2581 \" , $ x , \" \u2581 \" , \" y \u2581 = \u2581 \" , $ y ; ? >"}
{"text":"PHP code to swap using XOR","code":"< ? php $ x = 10 ; $ y = 5 ;"}
{"text":"Code to swap ' x ' ( 1010 ) and ' y ' ( 0101 ) x now becomes 15 ( 1111 )","code":"$ x = $ x ^ $ y ;"}
{"text":"y becomes 10 ( 1010 )","code":"$ y = $ x ^ $ y ;"}
{"text":"x becomes 5 ( 0101 )","code":"$ x = $ x ^ $ y ; echo \" After \u2581 Swapping : \u2581 x \u2581 = \u2581 \" , $ x , \" , \u2581 \" , \" y \u2581 = \u2581 \" , $ y ; ? >"}
{"text":"Swap function","code":"< ? php function swap ( & $ xp , & $ yp ) { $ xp = $ xp ^ $ yp ; $ yp = $ xp ^ $ yp ; $ xp = $ xp ^ $ yp ; }"}
{"text":"Driver Code","code":"$ x = 10 ; swap ( $ x , $ x ) ; print ( \" After \u2581 swap ( & x , \u2581 & x ) : \u2581 x \u2581 = \u2581 \" . $ x ) ; ? >"}
{"text":"Returns index of 0 to be replaced with 1 to get longest continuous sequence of 1 s . If there is no 0 in array , then it returns - 1.","code":"< ? php function maxOnesIndex ( $ arr , $ n ) {"}
{"text":"for maximum number of","code":"$ max_count = 0 ;"}
{"text":"1 around a zero for storing result","code":"$ max_index ;"}
{"text":"index of previous zero","code":"$ prev_zero = -1 ;"}
{"text":"index of previous to","code":"$ prev_prev_zero = -1 ;"}
{"text":"previous zero Traverse the input array","code":"for ( $ curr = 0 ; $ curr < $ n ; ++ $ curr ) {"}
{"text":"If current element is 0 , then calculate the difference between curr and prev_prev_zero","code":"if ( $ arr [ $ curr ] == 0 ) {"}
{"text":"Update result if count of 1 s around prev_zero is more","code":"if ( $ curr - $ prev_prev_zero > $ max_count ) { $ max_count = $ curr - $ prev_prev_zero ; $ max_index = $ prev_zero ; }"}
{"text":"Update for next iteration","code":"$ prev_prev_zero = $ prev_zero ; $ prev_zero = $ curr ; } }"}
{"text":"Check for the last encountered zero","code":"if ( $ n - $ prev_prev_zero > $ max_count ) $ max_index = $ prev_zero ; return $ max_index ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 1 , 0 , 1 , 1 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" Index \u2581 of \u2581 0 \u2581 to \u2581 be \u2581 replaced \u2581 is \u2581 \" , maxOnesIndex ( $ arr , $ n ) ; ? >"}
{"text":"Utility functions to find minimum and maximum of two elements","code":"< ? php function mins ( $ x , $ y ) { if ( $ x < $ y ) return $ x ; else return $ y ; } function maxi ( $ a , $ b ) { if ( $ a > $ b ) return $ a ; else return $ b ; }"}
{"text":"Returns length of the longest contiguous subarray","code":"function findLength ( & $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ max_len = 1 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Initialize min and max for all subarrays starting with i","code":"$ mn = $ arr [ $ i ] ; $ mx = $ arr [ $ i ] ;"}
{"text":"Consider all subarrays starting with i and ending with j","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Update min and max in this subarray if needed","code":"$ mn = mins ( $ mn , $ arr [ $ j ] ) ; $ mx = maxi ( $ mx , $ arr [ $ j ] ) ;"}
{"text":"If current subarray has all contiguous elements","code":"if ( ( $ mx - $ mn ) == $ j - $ i ) $ max_len = maxi ( $ max_len , $ mx - $ mn + 1 ) ; } }"}
{"text":"Return result","code":"return $ max_len ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 56 , 58 , 57 , 90 , 92 , 94 , 93 , 91 , 45 ) ; $ n = sizeof ( $ arr ) ; echo ( \" Length \u2581 of \u2581 the \u2581 longest \u2581 contiguous \" . \" \u2581 subarray \u2581 is \u2581 \" ) ; echo ( findLength ( $ arr , $ n ) ) ; ? >"}
{"text":"A utility function to print contents of arr [ 0. . k - 1 ]","code":"< ? php function printArr ( $ arr , $ k ) { for ( $ i = 0 ; $ i < $ k ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"A recursive function to print all increasing sequences of first n natural numbers . Every sequence should be length k . The array arr [ ] is used to store current sequence .","code":"function printSeqUtil ( $ n , $ k , $ len , $ arr ) {"}
{"text":"If length of current increasing sequence becomes k , print it","code":"if ( $ len == $ k ) { printArr ( $ arr , $ k ) ; return ; }"}
{"text":"Decide the starting number to put at current position : If length is 0 , then there are no previous elements in arr [ ] . So start putting new numbers with 1. If length is not 0 , then start from value of previous element plus 1.","code":"$ i = ( $ len == 0 ) ? 1 : $ arr [ $ len - 1 ] + 1 ;"}
{"text":"Increase length","code":"$ len ++ ;"}
{"text":"Put all numbers ( which are greater than the previous element ) at new position .","code":"while ( $ i <= $ n ) { $ arr [ $ len - 1 ] = $ i ; printSeqUtil ( $ n , $ k , $ len , $ arr ) ; $ i ++ ; }"}
{"text":"This is important . The variable ' len ' is shared among all function calls in recursion tree . Its value must be brought back before next iteration of while loop","code":"$ len -- ; }"}
{"text":"This function prints all increasing sequences of first n natural numbers . The length of every sequence must be k . This function mainly uses printSeqUtil ( )","code":"function printSeq ( $ n , $ k ) {"}
{"text":"An array to store individual sequences Initial length of","code":"$ arr = array ( ) ;"}
{"text":"current sequence","code":"$ len = 0 ; printSeqUtil ( $ n , $ k , $ len , $ arr ) ; }"}
{"text":"Driver Code","code":"$ k = 3 ; $ n = 7 ; printSeq ( $ n , $ k ) ; ? >"}
{"text":"Returns true if str1 [ ] is a subsequence of str2 [ ] . m is length of str1 and n is length of str2","code":"< ? php function isSubSequence ( $ str1 , $ str2 , $ m , $ n ) {"}
{"text":"Base Cases","code":"if ( $ m == 0 ) return true ; if ( $ n == 0 ) return false ;"}
{"text":"If last characters of two strings are matching","code":"if ( $ str1 [ $ m - 1 ] == $ str2 [ $ n - 1 ] ) return isSubSequence ( $ str1 , $ str2 , $ m - 1 , $ n - 1 ) ;"}
{"text":"If last characters are not matching","code":"return isSubSequence ( $ str1 , $ str2 , $ m , $ n - 1 ) ; }"}
{"text":"Driver Code","code":"$ str1 = \" gksrek \" ; $ str2 = \" geeksforgeeks \" ; $ m = strlen ( $ str1 ) ; $ n = strlen ( $ str2 ) ; $ t = isSubSequence ( $ str1 , $ str2 , $ m , $ n ) ? \" Yes \u2581 \" : \" No \" ; if ( $ t = true ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to replace every element with the next greatest element","code":"< ? php function nextGreatest ( & $ arr , $ size ) {"}
{"text":"Initialize the next greatest element","code":"$ max_from_right = $ arr [ $ size - 1 ] ;"}
{"text":"The next greatest element for the rightmost element is always - 1","code":"$ arr [ $ size - 1 ] = -1 ;"}
{"text":"Replace all other elements with the next greatest","code":"for ( $ i = $ size - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Store the current element ( needed later for updating the next greatest element )","code":"$ temp = $ arr [ $ i ] ;"}
{"text":"Replace current element with the next greatest","code":"$ arr [ $ i ] = $ max_from_right ;"}
{"text":"Update the greatest element , if needed","code":"if ( $ max_from_right < $ temp ) $ max_from_right = $ temp ; } }"}
{"text":"A utility Function that prints an array","code":"function printArray ( $ arr , $ size ) { for ( $ i = 0 ; $ i < $ size ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 16 , 17 , 4 , 3 , 5 , 2 ) ; $ size = count ( $ arr ) ; nextGreatest ( $ arr , $ size ) ; echo \" The \u2581 modified \u2581 array \u2581 is : \u2581 STRNEWLINE \" ; printArray ( $ arr , $ size ) ; ? >"}
{"text":"Binary search","code":"< ? php function GetCeilIndex ( $ arr , $ T , $ l , $ r , $ key ) { while ( $ r - $ l > 1 ) { $ m = ( int ) ( $ l + ( $ r - $ l ) \/ 2 ) ; if ( $ arr [ $ T [ $ m ] ] >= $ key ) $ r = $ m ; else $ l = $ m ; } return $ r ; } function LongestIncreasingSubsequence ( $ arr , $ n ) {"}
{"text":"Add boundary case , when array n is zero Depend on smart pointers","code":"$ tailIndices = array_fill ( 0 , $ n + 1 , 0 ) ;"}
{"text":"initialized with - 1","code":"$ prevIndices = array_fill ( 0 , $ n + 1 , -1 ) ;"}
{"text":"it will always point to empty location","code":"$ len = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] < $ arr [ $ tailIndices [ 0 ] ] ) {"}
{"text":"new smallest value","code":"$ tailIndices [ 0 ] = $ i ; } else if ( $ arr [ $ i ] > $ arr [ $ tailIndices [ $ len - 1 ] ] ) {"}
{"text":"arr [ i ] wants to extend largest subsequence","code":"$ prevIndices [ $ i ] = $ tailIndices [ $ len - 1 ] ; $ tailIndices [ $ len ++ ] = $ i ; } else {"}
{"text":"arr [ i ] wants to be a potential condidate of future subsequence It will replace ceil value in tailIndices","code":"$ pos = GetCeilIndex ( $ arr , $ tailIndices , -1 , $ len - 1 , $ arr [ $ i ] ) ; $ prevIndices [ $ i ] = $ tailIndices [ $ pos - 1 ] ; $ tailIndices [ $ pos ] = $ i ; } } echo \" LIS \u2581 of \u2581 given \u2581 input STRNEWLINE \" ; for ( $ i = $ tailIndices [ $ len - 1 ] ; $ i >= 0 ; $ i = $ prevIndices [ $ i ] ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; return $ len ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 5 , 3 , 7 , 11 , 8 , 10 , 13 , 6 ) ; $ n = count ( $ arr ) ; print ( \" LIS \u2581 size \u2581 \" . LongestIncreasingSubsequence ( $ arr , $ n ) ) ; ? >"}
{"text":"Function to generates and prints all sorted arrays from alternate elements of ' A [ i . . m - 1 ] ' and ' B [ j . . n - 1 ] ' If ' flag ' is true , then current element is to be included from A otherwise from B . ' len ' is the index in output array C [ ] . We print output array each time before including a character from A only if length of output array is greater than 0. We try than all possible combinations","code":"< ? php function generateUtil ( & $ A , & $ B , & $ C , $ i , $ j , $ m , $ n , $ len , $ flag ) {"}
{"text":"Include valid element from A","code":"if ( $ flag ) {"}
{"text":"Print output if there is at least one ' B ' in output array ' C '","code":"if ( $ len ) printArr ( $ C , $ len + 1 ) ;"}
{"text":"Recur for all elements of A after current index","code":"for ( $ k = $ i ; $ k < $ m ; $ k ++ ) { if ( ! $ len ) {"}
{"text":"this block works for the very first call to include the first element in the output array","code":"$ C [ $ len ] = $ A [ $ k ] ;"}
{"text":"don 't increment lem as B  is included yet","code":"generateUtil ( $ A , $ B , $ C , $ k + 1 , $ j , $ m , $ n , $ len , ! $ flag ) ; } else"}
{"text":"include valid element from A and recur","code":"{ if ( $ A [ $ k ] > $ C [ $ len ] ) { $ C [ $ len + 1 ] = $ A [ $ k ] ; generateUtil ( $ A , $ B , $ C , $ k + 1 , $ j , $ m , $ n , $ len + 1 , ! $ flag ) ; } } } } else"}
{"text":"Include valid element from B and recur","code":"{ for ( $ l = $ j ; $ l < $ n ; $ l ++ ) { if ( $ B [ $ l ] > $ C [ $ len ] ) { $ C [ $ len + 1 ] = $ B [ $ l ] ; generateUtil ( $ A , $ B , $ C , $ i , $ l + 1 , $ m , $ n , $ len + 1 , ! $ flag ) ; } } } }"}
{"text":"Wrapper function","code":"function generate ( & $ A , & $ B , $ m , $ n ) { $ C = array_fill ( 0 , ( $ m + $ n ) , NULL ) ;"}
{"text":"output array","code":"generateUtil ( $ A , $ B , $ C , 0 , 0 , $ m , $ n , 0 , true ) ; }"}
{"text":"A utility function to print an array","code":"function printArr ( & $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ A = array ( 10 , 15 , 25 ) ; $ B = array ( 5 , 20 , 30 ) ; $ n = sizeof ( $ A ) ; $ m = sizeof ( $ B ) ; generate ( $ A , $ B , $ n , $ m ) ; ? >"}
{"text":"Function to replace consecutive equal elements","code":"< ? php function replace_elements ( $ arr , $ n ) {"}
{"text":"Index in result","code":"$ pos = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ arr [ $ pos ++ ] = $ arr [ $ i ] ; while ( $ pos > 1 && $ arr [ $ pos - 2 ] == $ arr [ $ pos - 1 ] ) { $ pos -- ; $ arr [ $ pos - 1 ] ++ ; } }"}
{"text":"to print new array","code":"for ( $ i = 0 ; $ i < $ pos ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 6 , 4 , 3 , 4 , 3 , 3 , 5 ) ; $ n = count ( $ arr ) ; replace_elements ( $ arr , $ n ) ; ? >"}
{"text":"Function which arrange the given string","code":"< ? php function arrangeString ( $ str , $ x , $ y ) { $ count_0 = 0 ; $ count_1 = 0 ; $ len = strlen ( $ str ) ;"}
{"text":"Counting number of 0 ' s \u2581 and \u2581 \u2581 1' s in the given string .","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ str [ $ i ] == '0' ) $ count_0 ++ ; else $ count_1 ++ ; }"}
{"text":"Printing first all 0 ' s \u2581 x - times \u2581 \u2581 and \u2581 decrement \u2581 count \u2581 of \u2581 0' s x - times and do the similar task with '1'","code":"while ( $ count_0 > 0 $ count_1 > 0 ) { for ( $ j = 0 ; $ j < $ x && $ count_0 > 0 ; $ j ++ ) { if ( $ count_0 > 0 ) { echo \"0\" ; $ count_0 -- ; } } for ( $ j = 0 ; $ j < $ y && $ count_1 > 0 ; $ j ++ ) { if ( $ count_1 > 0 ) { echo \"1\" ; $ count_1 -- ; } } } }"}
{"text":"Driver Code","code":"$ str = \"01101101101101101000000\" ; $ x = 1 ; $ y = 2 ; arrangeString ( $ str , $ x , $ y ) ; ? >"}
{"text":"function to rearrange the array","code":"< ? php function rearrange ( & $ arr , $ n ) {"}
{"text":"if size is null or odd return because it is not possible to rearrange","code":"if ( $ arr == NULL $ n % 2 == 1 ) return ;"}
{"text":"start from the middle index","code":"$ currIdx = intval ( ( $ n - 1 ) \/ 2 ) ;"}
{"text":"each time we will set two elements from the start to the valid position by swapping","code":"while ( $ currIdx > 0 ) { $ count = $ currIdx ; $ swapIdx = $ currIdx ; while ( $ count -- > 0 ) { $ temp = $ arr [ $ swapIdx + 1 ] ; $ arr [ $ swapIdx + 1 ] = $ arr [ $ swapIdx ] ; $ arr [ $ swapIdx ] = $ temp ; $ swapIdx ++ ; } $ currIdx -- ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 5 , 2 , 4 , 6 ) ; $ n = count ( $ arr ) ; rearrange ( $ arr , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( $ arr [ $ i ] . \" \u2581 \" ) ; ? >"}
{"text":"The function assumes that there are at least two elements in array . The function returns a negative value if the array is sorted in decreasing order and returns 0 if elements are equal","code":"< ? php function maxDiff ( $ arr , $ arr_size ) { $ max_diff = $ arr [ 1 ] - $ arr [ 0 ] ; for ( $ i = 0 ; $ i < $ arr_size ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ arr_size ; $ j ++ ) { if ( $ arr [ $ j ] - $ arr [ $ i ] > $ max_diff ) $ max_diff = $ arr [ $ j ] - $ arr [ $ i ] ; } } return $ max_diff ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 90 , 10 , 110 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Function calling","code":"echo \" Maximum \u2581 difference \u2581 is \u2581 \" . maxDiff ( $ arr , $ n ) ;"}
{"text":"The function assumes that there are at least two elements in array . The function returns a negative value if the array is sorted in decreasing order and returns 0 if elements are equal","code":"< ? php function maxDiff ( $ arr , $ n ) {"}
{"text":"Initialize Result","code":"$ maxDiff = -1 ;"}
{"text":"Initialize max element from right side","code":"$ maxRight = $ arr [ $ n - 1 ] ; for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { if ( $ arr [ $ i ] > $ maxRight ) $ maxRight = $ arr [ $ i ] ; else { $ diff = $ maxRight - $ arr [ $ i ] ; if ( $ diff > $ maxDiff ) { $ maxDiff = $ diff ; } } } return $ maxDiff ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 90 , 10 , 110 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Function calling","code":"echo \" Maximum \u2581 difference \u2581 is \u2581 \" , maxDiff ( $ arr , $ n ) ; ? >"}
{"text":"The function assumes that there are at least two elements in array . The function returns a negative value if the array is sorted in decreasing order and returns 0 if elements are equal","code":"< ? php function maxDiff ( $ arr , $ n ) {"}
{"text":"Initialize diff , current sum and max sum","code":"$ diff = $ arr [ 1 ] - $ arr [ 0 ] ; $ curr_sum = $ diff ; $ max_sum = $ curr_sum ; for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Calculate current diff","code":"$ diff = $ arr [ $ i + 1 ] - $ arr [ $ i ] ;"}
{"text":"Calculate current sum","code":"if ( $ curr_sum > 0 ) $ curr_sum += $ diff ; else $ curr_sum = $ diff ;"}
{"text":"Update max sum , if needed","code":"if ( $ curr_sum > $ max_sum ) $ max_sum = $ curr_sum ; } return $ max_sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 80 , 2 , 6 , 3 , 100 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Function calling","code":"echo \" Maximum \u2581 difference \u2581 is \u2581 \" , maxDiff ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to Find the maximum element in an array which is first increasing and then decreasing","code":"< ? php function findMaximum ( $ arr , $ low , $ high ) { $ max = $ arr [ $ low ] ; $ i ; for ( $ i = $ low ; $ i <= $ high ; $ i ++ ) { if ( $ arr [ $ i ] > $ max ) $ max = $ arr [ $ i ] ; } return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 30 , 40 , 50 , 60 , 70 , 23 , 20 ) ; $ n = count ( $ arr ) ; echo \" The \u2581 maximum \u2581 element \u2581 is \u2581 \" , findMaximum ( $ arr , 0 , $ n - 1 ) ; ? >"}
{"text":"PHP program to Find the maximum element in an array which is first increasing and then decreasing","code":"< ? php function findMaximum ( $ arr , $ low , $ high ) {"}
{"text":"Base Case : Only one element is present in arr [ low . . high ]","code":"if ( $ low == $ high ) return $ arr [ $ low ] ;"}
{"text":"If there are two elements and first is greater then the first element is maximum","code":"if ( ( $ high == $ low + 1 ) && $ arr [ $ low ] >= $ arr [ $ high ] ) return $ arr [ $ low ] ;"}
{"text":"If there are two elements and second is greater then the second element is maximum","code":"if ( ( $ high == $ low + 1 ) && $ arr [ $ low ] < $ arr [ $ high ] ) return $ arr [ $ high ] ; $ mid = ( $ low + $ high ) \/ 2 ;"}
{"text":"If we reach a point where arr [ mid ] is greater than both of its adjacent elements arr [ mid - 1 ] and arr [ mid + 1 ] , then arr [ mid ] is the maximum element","code":"if ( $ arr [ $ mid ] > $ arr [ $ mid + 1 ] && $ arr [ $ mid ] > $ arr [ $ mid - 1 ] ) return $ arr [ $ mid ] ;"}
{"text":"If arr [ mid ] is greater than the next element and smaller than the previous element then maximum lies on left side of mid","code":"if ( $ arr [ $ mid ] > $ arr [ $ mid + 1 ] && $ arr [ $ mid ] < $ arr [ $ mid - 1 ] ) return findMaximum ( $ arr , $ low , $ mid - 1 ) ;"}
{"text":"when arr [ mid ] is greater than arr [ mid - 1 ] and smaller than arr [ mid + 1 ]","code":"else return findMaximum ( $ arr , $ mid + 1 , $ high ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 50 , 10 , 9 , 7 , 6 ) ; $ n = sizeof ( $ arr ) ; echo ( \" The \u2581 maximum \u2581 element \u2581 is \u2581 \" ) ; echo ( findMaximum ( $ arr , 0 , $ n -1 ) ) ; ? >"}
{"text":"This function returns the sum of elements on maximum path from beginning to end","code":"< ? php function maxPathSum ( $ ar1 , $ ar2 , $ m , $ n ) {"}
{"text":"initialize indexes for ar1 [ ] and ar2 [ ]","code":"$ i = 0 ; $ j = 0 ;"}
{"text":"Initialize result and current sum through ar1 [ ] and ar2 [ ] .","code":"$ result = 0 ; $ sum1 = 0 ; $ sum2 = 0 ;"}
{"text":"Below 3 loops are similar to merge in merge sort","code":"while ( $ i < $ m and $ j < $ n ) {"}
{"text":"Add elements of ar1 [ ] to sum1","code":"if ( $ ar1 [ $ i ] < $ ar2 [ $ j ] ) $ sum1 += $ ar1 [ $ i ++ ] ;"}
{"text":"Add elements of ar2 [ ] to sum2","code":"else if ( $ ar1 [ $ i ] > $ ar2 [ $ j ] ) $ sum2 += $ ar2 [ $ j ++ ] ;"}
{"text":"we reached a common point","code":"else {"}
{"text":"Take the maximum of two sums and add to result Also add the common element of array , once","code":"$ result += max ( $ sum1 , $ sum2 ) + $ ar1 [ $ i ] ;"}
{"text":"Update sum1 and sum2 for elements after this intersection point","code":"$ sum1 = 0 ; $ sum2 = 0 ;"}
{"text":"update i and j to move to next element of each array","code":"$ i ++ ; $ j ++ ; } }"}
{"text":"Add remaining elements of ar1 [ ]","code":"while ( $ i < $ m ) $ sum1 += $ ar1 [ $ i ++ ] ;"}
{"text":"Add remaining elements of ar2 [ ]","code":"while ( $ j < $ n ) $ sum2 += $ ar2 [ $ j ++ ] ;"}
{"text":"Add maximum of two sums of remaining elements","code":"$ result += max ( $ sum1 , $ sum2 ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ ar1 = array ( 2 , 3 , 7 , 10 , 12 , 15 , 30 , 34 ) ; $ ar2 = array ( 1 , 5 , 7 , 8 , 10 , 15 , 16 , 19 ) ; $ m = count ( $ ar1 ) ; $ n = count ( $ ar2 ) ;"}
{"text":"Function call","code":"echo \" Maximum \u2581 sum \u2581 path \u2581 is \u2581 \" , maxPathSum ( $ ar1 , $ ar2 , $ m , $ n ) ; ? >"}
{"text":"Simple PHP program to find smallest greater element in whole array for every element .","code":"< ? php function smallestGreater ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Find the closest greater element for arr [ j ] in the entire array .","code":"$ diff = PHP_INT_MAX ; $ closest = -1 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ arr [ $ i ] < $ arr [ $ j ] && $ arr [ $ j ] - $ arr [ $ i ] < $ diff ) { $ diff = $ arr [ $ j ] - $ arr [ $ i ] ; $ closest = $ j ; } }"}
{"text":"Check if arr [ i ] is largest","code":"if ( $ closest == -1 ) echo \" _ \u2581 \" ; else echo $ arr [ $ closest ] , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ ar = array ( 6 , 3 , 9 , 8 , 10 , 2 , 1 , 15 , 7 ) ; $ n = sizeof ( $ ar ) ; smallestGreater ( $ ar , $ n ) ; ? >"}
{"text":"m is maximum of number zeroes allowed to flip n is size of array","code":"< ? php function findZeroes ( $ arr , $ n , $ m ) {"}
{"text":"Left and right indexes of current window","code":"$ wL = 0 ; $ wR = 0 ;"}
{"text":"Left index and size of the widest window","code":"$ bestL = 0 ; $ bestWindow = 0 ;"}
{"text":"Count of zeroes in current window","code":"$ zeroCount = 0 ;"}
{"text":"While right boundary of current window doesn 't cross  right end","code":"while ( $ wR < $ n ) {"}
{"text":"If zero count of current window is less than m , widen the window toward right","code":"if ( $ zeroCount <= $ m ) { if ( $ arr [ $ wR ] == 0 ) $ zeroCount ++ ; $ wR ++ ; }"}
{"text":"If zero count of current window is more than m , reduce the window from left","code":"if ( $ zeroCount > $ m ) { if ( $ arr [ $ wL ] == 0 ) $ zeroCount -- ; $ wL ++ ; }"}
{"text":"Updqate widest window if this window size is more","code":"if ( ( $ wR - $ wL > $ bestWindow ) && ( $ zeroCount <= $ m ) ) { $ bestWindow = $ wR - $ wL ; $ bestL = $ wL ; } }"}
{"text":"Print positions of zeroes in the widest window","code":"for ( $ i = 0 ; $ i < $ bestWindow ; $ i ++ ) { if ( $ arr [ $ bestL + $ i ] == 0 ) echo $ bestL + $ i . \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 ) ; $ m = 2 ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo \" Indexes \u2581 of \u2581 zeroes \u2581 to \u2581 be \u2581 flipped \u2581 are \u2581 \" ; findZeroes ( $ arr , $ n , $ m ) ; return 0 ; ? >"}
{"text":"PHP program to count number of strictly increasing subarrays","code":"< ? php function countIncreasing ( $ arr , $ n ) {"}
{"text":"Initialize count of subarrays as 0","code":"$ cnt = 0 ;"}
{"text":"Pick starting point","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Pick ending point","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { if ( $ arr [ $ j ] > $ arr [ $ j - 1 ] ) $ cnt ++ ;"}
{"text":"If subarray arr [ i . . j ] is not strictly increasing , then subarrays after it , i . e . , arr [ i . . j + 1 ] , arr [ i . . j + 2 ] , ... . cannot be strictly increasing","code":"else break ; } } return $ cnt ; }"}
{"text":"Driver program","code":"$ arr = array ( 1 , 2 , 2 , 4 ) ; $ n = count ( $ arr ) ; echo \" Count \u2581 of \u2581 strictly \u2581 increasing \u2581 \" , \" subarrays \u2581 is \u2581 \" , countIncreasing ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to count number of strictly increasing subarrays in O ( n ) time .","code":"< ? php function countIncreasing ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ cnt = 0 ;"}
{"text":"Initialize length of current increasing subarray","code":"$ len = 1 ;"}
{"text":"Traverse through the array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) {"}
{"text":"If arr [ i + 1 ] is greater than arr [ i ] , then increment length","code":"if ( $ arr [ $ i + 1 ] > $ arr [ $ i ] ) $ len ++ ;"}
{"text":"Else Update count and reset length","code":"else { $ cnt += ( ( ( $ len - 1 ) * $ len ) \/ 2 ) ; $ len = 1 ; } }"}
{"text":"If last length is more than 1","code":"if ( $ len > 1 ) $ cnt += ( ( ( $ len - 1 ) * $ len ) \/ 2 ) ; return $ cnt ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 2 , 4 ) ; $ n = count ( $ arr ) ; echo \" Count \u2581 of \u2581 strictly \u2581 increasing \u2581 subarrays \u2581 is \u2581 \" , countIncreasing ( $ arr , $ n ) ; ? >"}
{"text":"utility function for array sum","code":"< ? php function arraySum ( $ arr , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + $ arr [ $ i ] ; return $ sum ; }"}
{"text":"function for finding maximum group difference of array","code":"function maxDiff ( $ arr , $ n , $ k ) {"}
{"text":"sort the array","code":"sort ( $ arr ) ;"}
{"text":"find array sum","code":"$ arraysum = arraySum ( $ arr , $ n ) ;"}
{"text":"difference for k - smallest diff1 = ( arraysum - k_smallest ) - k_smallest","code":"$ diff1 = abs ( $ arraysum - 2 * arraySum ( $ arr , $ k ) ) ;"}
{"text":"reverse array for finding sum 0f 1 st k - largest","code":"array_reverse ( $ arr ) ;"}
{"text":"difference for k - largest diff2 = ( arraysum - k_largest ) - k_largest","code":"$ diff2 = abs ( $ arraysum - 2 * arraySum ( $ arr , $ k ) ) ;"}
{"text":"return maximum difference value","code":"return ( max ( $ diff1 , $ diff2 ) ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 7 , 4 , 8 , -1 , 5 , 2 , 1 ) ; $ n = count ( $ arr ) ; $ k = 3 ; echo \" Maximum \u2581 Difference \u2581 = \u2581 \" , maxDiff ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Returns count of elements to be added to make median x . This function assumes that a [ ] has enough extra space .","code":"< ? php function minNumber ( $ a , $ n , $ x ) {"}
{"text":"to sort the array in increasing order .","code":"sort ( $ a ) ; $ k ; for ( $ k = 0 ; $ a [ ( $ n - 1 ) \/ 2 ] != $ x ; $ k ++ ) { $ a [ $ n ++ ] = $ x ; sort ( $ a ) ; } return $ k ; }"}
{"text":"Driver code","code":"$ x = 10 ; $ a = array ( 10 , 20 , 30 ) ; $ n = 3 ; echo minNumber ( $ a , $ n , $ x ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find minimum number of elements to add so that its median equals x .","code":"< ? php function minNumber ( $ a , $ n , $ x ) { $ l = 0 ; $ h = 0 ; $ e = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"no . of elements equals to x , that is , e .","code":"if ( $ a [ $ i ] == $ x ) $ e ++ ;"}
{"text":"no . of elements greater than x , that is , h .","code":"else if ( $ a [ $ i ] > $ x ) $ h ++ ;"}
{"text":"no . of elements smaller than x , that is , l .","code":"else if ( $ a [ $ i ] < $ x ) $ l ++ ; } $ ans = 0 ; if ( $ l > $ h ) $ ans = $ l - $ h ; else if ( $ l < $ h ) $ ans = $ h - $ l - 1 ;"}
{"text":"subtract the no . of elements that are equal to x .","code":"return $ ans + 1 - $ e ; }"}
{"text":"Driver code","code":"$ x = 10 ; $ a = array ( 10 , 20 , 30 ) ; $ n = sizeof ( $ a ) ; echo minNumber ( $ a , $ n , $ x ) , \" STRNEWLINE \" ; ? >"}
{"text":"prints if subarray is even or odd","code":"< ? php function checkEVENodd ( $ arr , $ n , $ l , $ r ) {"}
{"text":"if arr [ r ] = 1 print odd","code":"if ( $ arr [ $ r ] == 1 ) echo \" odd \" , \" STRNEWLINE \" ;"}
{"text":"if arr [ r ] = 0 print even","code":"else echo \" even \" , \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 1 , 0 , 1 ) ; $ n = sizeof ( $ arr ) ; checkEVENodd ( $ arr , $ n , 1 , 3 ) ; ? >"}
{"text":"To find mean of range in l to r","code":"< ? php function findMean ( $ arr , $ l , $ r ) {"}
{"text":"Both sum and count are initialize to 0","code":"$ sum = 0 ; $ count = 0 ;"}
{"text":"To calculate sum and number of elements in range l to r","code":"for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) { $ sum += $ arr [ $ i ] ; $ count ++ ; }"}
{"text":"Calculate floor value of mean","code":"$ mean = floor ( $ sum \/ $ count ) ;"}
{"text":"Returns mean of array in range l to r","code":"return $ mean ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 ) ; echo findMean ( $ arr , 0 , 2 ) , \" STRNEWLINE \" ; echo findMean ( $ arr , 1 , 3 ) , \" STRNEWLINE \" ; echo findMean ( $ arr , 0 , 4 ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to calculate Product in the given range .","code":"< ? php function calculateProduct ( $ A , $ L , $ R , $ P ) {"}
{"text":"As our array is 0 based as and L and R are given as 1 based index .","code":"$ L = $ L - 1 ; $ R = $ R - 1 ; $ ans = 1 ; for ( $ i = $ L ; $ i <= $ R ; $ i ++ ) { $ ans = $ ans * $ A [ $ i ] ; $ ans = $ ans % $ P ; } return $ ans ; }"}
{"text":"Driver code","code":"$ A = array ( 1 , 2 , 3 , 4 , 5 , 6 ) ; $ P = 229 ; $ L = 2 ; $ R = 5 ; echo calculateProduct ( $ A , $ L , $ R , $ P ) , \" \" ; $ L = 1 ; $ R = 3 ; echo calculateProduct ( $ A , $ L , $ R , $ P ) , \" \" ; ? >"}
{"text":"PHP program to answer queries for count of primes in given range .","code":"< ? php $ MAX = 10000 ;"}
{"text":"prefix [ i ] is going to store count of primes till i ( including i ) .","code":"$ prefix = array_fill ( 0 , ( $ MAX + 1 ) , 0 ) ; function buildPrefix ( ) { global $ MAX , $ prefix ;"}
{"text":"Create a boolean array value in prime [ i ] will \" prime [ 0 . . n ] \" . A finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , ( $ MAX + 1 ) , true ) ; for ( $ p = 2 ; $ p * $ p <= $ MAX ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ MAX ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Build prefix array $prefix [ 0 ] = $prefix [ 1 ] = 0 ;","code":"for ( $ p = 2 ; $ p <= $ MAX ; $ p ++ ) { $ prefix [ $ p ] = $ prefix [ $ p - 1 ] ; if ( $ prime [ $ p ] ) $ prefix [ $ p ] ++ ; } }"}
{"text":"Returns count of primes in range from L to R ( both inclusive ) .","code":"function query ( $ L , $ R ) { global $ prefix ; return $ prefix [ $ R ] - $ prefix [ $ L - 1 ] ; }"}
{"text":"Driver code","code":"buildPrefix ( ) ; $ L = 5 ; $ R = 10 ; echo query ( $ L , $ R ) . \" STRNEWLINE \" ; $ L = 1 ; $ R = 10 ; echo query ( $ L , $ R ) . \" STRNEWLINE \" ; ? >"}
{"text":"function for toggle","code":"< ? php function command ( $ arr , $ a , $ b ) { $ arr [ $ a ] = $ arr [ $ a ] ^ 1 ; $ arr [ $ b + 1 ] ^= 1 ; }"}
{"text":"function for final processing of array","code":"function process ( $ arr , $ n ) { for ( $ k = 1 ; $ k <= $ n ; $ k ++ ) { $ arr [ $ k ] = $ arr [ $ k ] ^ $ arr [ $ k - 1 ] ; } }"}
{"text":"function for printing result","code":"function result ( $ arr , $ n ) { for ( $ k = 1 ; $ k <= $ n ; $ k ++ ) echo $ arr [ $ k ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ m = 3 ; $ arr = new SplFixedArray ( 7 ) ; $ arr [ 6 ] = array ( 0 ) ;"}
{"text":"function call for toggle","code":"command ( $ arr , 1 , 5 ) ; command ( $ arr , 2 , 5 ) ; command ( $ arr , 3 , 5 ) ;"}
{"text":"process array","code":"process ( $ arr , $ n ) ;"}
{"text":"print result","code":"result ( $ arr , $ n ) ; ? >"}
{"text":"Function to return probability","code":"< ? php function probability ( $ a , $ b , $ size1 , $ size2 ) {"}
{"text":"Count occurrences of maximum element in A [ ]","code":"$ max1 = PHP_INT_MIN ; $ count1 = 0 ; for ( $ i = 0 ; $ i < $ size1 ; $ i ++ ) { if ( $ a [ $ i ] > $ max1 ) { $ max1 = $ a [ $ i ] ; $ count1 = 1 ; } else if ( $ a [ $ i ] == $ max1 ) { $ count1 ++ ; } }"}
{"text":"Count occurrences of maximum element in B [ ]","code":"$ max2 = PHP_INT_MIN ; $ count2 = 0 ; for ( $ i = 0 ; $ i < $ size2 ; $ i ++ ) { if ( $ b [ $ i ] > $ max2 ) { $ max2 = $ b [ $ i ] ; $ count2 = 1 ; } else if ( $ b [ $ i ] == $ max2 ) { $ count2 ++ ; } }"}
{"text":"Returning probability","code":"return ( double ) ( $ count1 * $ count2 ) \/ ( $ size1 * $ size2 ) ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 3 ) ; $ b = array ( 1 , 3 , 3 ) ; $ size1 = sizeof ( $ a ) ; $ size2 = sizeof ( $ b ) ; echo probability ( $ a , $ b , $ size1 , $ size2 ) ; ? >"}
{"text":"function to count Dearrangement","code":"< ? php function countDe ( $ arr , $ n ) {"}
{"text":"create a copy of original array","code":"$ v = $ arr ;"}
{"text":"sort the array","code":"sort ( $ arr ) ;"}
{"text":"traverse sorted array for counting mismatches","code":"$ count1 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] != $ v [ $ i ] ) $ count1 ++ ;"}
{"text":"reverse the sorted array","code":"rsort ( $ arr ) ;"}
{"text":"traverse reverse sorted array for counting mismatches","code":"$ count2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] != $ v [ $ i ] ) $ count2 ++ ;"}
{"text":"return minimum mismatch count","code":"return ( min ( $ count1 , $ count2 ) ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 9 , 21 , 17 , 13 ) ; $ n = count ( $ arr ) ; echo \" Minimum \u2581 Dearrangement \u2581 = \u2581 \" . countDe ( $ arr , $ n ) ; ? >"}
{"text":"function to calculate the max of all the minimum segments","code":"< ? php function maxOfSegmentMins ( $ a , $ n , $ k ) {"}
{"text":"if we have to divide it into 1 segment then the min will be the answer","code":"if ( $ k == 1 ) return min ( $ a ) ; if ( $ k == 2 ) return max ( $ a [ 0 ] , $ a [ $ n - 1 ] ) ;"}
{"text":"If k >= 3 , return maximum of all elements .","code":"return max ( $ a ) ; }"}
{"text":"Driver Code","code":"$ a = array ( -10 , -9 , -8 , 2 , 7 , -6 , -5 ) ; $ n = count ( $ a ) ; $ k = 2 ; echo maxOfSegmentMins ( $ a , $ n , $ k ) ; ? >"}
{"text":"Function to calculate minimum product of pair","code":"< ? php function printMinimumProduct ( $ arr , $ n ) {"}
{"text":"Initialize first and second minimums . It is assumed that the array has at least two elements .","code":"$ first_min = min ( $ arr [ 0 ] , $ arr [ 1 ] ) ; $ second_min = max ( $ arr [ 0 ] , $ arr [ 1 ] ) ;"}
{"text":"Traverse remaining array and keep track of two minimum elements ( Note that the two minimum elements may be same if minimum element appears more than once ) more than once )","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] < $ first_min ) { $ second_min = $ first_min ; $ first_min = $ arr [ $ i ] ; } else if ( $ arr [ $ i ] < $ second_min ) $ second_min = $ arr [ $ i ] ; } return $ first_min * $ second_min ; }"}
{"text":"Driver Code","code":"$ a = array ( 11 , 8 , 5 , 7 , 5 , 100 ) ; $ n = sizeof ( $ a ) ; echo ( printMinimumProduct ( $ a , $ n ) ) ; ? >"}
{"text":"function to calculate number of triples","code":"< ? php function noOfTriples ( $ arr , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ;"}
{"text":"Count occurrences of third element","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] == $ arr [ 2 ] ) $ count ++ ;"}
{"text":"If all three elements are same ( minimum element appears at least 3 times ) . Answer is nC3 .","code":"if ( $ arr [ 0 ] == $ arr [ 2 ] ) return ( $ count - 2 ) * ( $ count - 1 ) * ( $ count ) \/ 6 ;"}
{"text":"If minimum element appears once . Answer is nC2 .","code":"else if ( $ arr [ 1 ] == $ arr [ 2 ] ) return ( $ count - 1 ) * ( $ count ) \/ 2 ;"}
{"text":"Minimum two elements are distinct . Answer is nC1 .","code":"return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 3 , 3 , 4 ) ; $ n = count ( $ arr ) ; echo noOfTriples ( $ arr , $ n ) ; ? >"}
{"text":"Return true , if reversing the subarray will sort the array , else return false .","code":"< ? php function checkReverse ( $ arr , $ n ) {"}
{"text":"Copying the array .","code":"$ temp [ $ n ] = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ temp [ $ i ] = $ arr [ $ i ] ;"}
{"text":"Sort the copied array .","code":"sort ( $ temp , 0 ) ;"}
{"text":"Finding the first mismatch .","code":"$ front ; for ( $ front = 0 ; $ front < $ n ; $ front ++ ) if ( $ temp [ $ front ] != $ arr [ $ front ] ) break ;"}
{"text":"Finding the last mismatch .","code":"$ back ; for ( $ back = $ n - 1 ; $ back >= 0 ; $ back -- ) if ( $ temp [ $ back ] != $ arr [ $ back ] ) break ;"}
{"text":"If whole array is sorted","code":"if ( $ front >= $ back ) return true ;"}
{"text":"Checking subarray is decreasing or not .","code":"do { $ front ++ ; if ( $ arr [ $ front - 1 ] < $ arr [ $ front ] ) return false ; } while ( $ front != $ back ) ; return true ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 5 , 4 , 3 ) ; $ n = sizeof ( $ arr ) ; if ( checkReverse ( $ arr , $ n ) ) echo \" Yes \" . \" STRNEWLINE \" ; else echo \" No \" . \" STRNEWLINE \" ; ? >"}
{"text":"Return true , if reversing the subarray will sort the array , else return false .","code":"< ? php function checkReverse ( $ arr , $ n ) { if ( $ n == 1 ) return true ;"}
{"text":"Find first increasing part","code":"for ( $ i = 1 ; $ i < $ n && $ arr [ $ i - 1 ] < $ arr [ $ i ] ; $ i ++ ) ; if ( $ i == $ n ) return true ;"}
{"text":"Find reversed part","code":"$ j = $ i ; while ( $ arr [ $ j ] < $ arr [ $ j - 1 ] ) { if ( $ i > 1 && $ arr [ $ j ] < $ arr [ $ i - 2 ] ) return false ; $ j ++ ; } if ( $ j == $ n ) return true ;"}
{"text":"Find last increasing part","code":"$ k = $ j ;"}
{"text":"To handle cases like { 1 , 2 , 3 , 4 , 20 , 9 , 16 , 17 }","code":"if ( $ arr [ $ k ] < $ arr [ $ i - 1 ] ) return false ; while ( $ k > 1 && $ k < $ n ) { if ( $ arr [ $ k ] < $ arr [ $ k - 1 ] ) return false ; $ k ++ ; } return true ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 4 , 10 , 9 , 8 ) ; $ n = sizeof ( $ arr ) ; if ( checkReverse ( $ arr , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find minimum increment \/ decrement operations to make array elements same .","code":"< ? php function MinOperation ( $ a , $ b , $ n ) {"}
{"text":"sorting both arrays in ascending order","code":"sort ( $ a ) ; sort ( $ b ) ;"}
{"text":"variable to store the final result","code":"$ result = 0 ;"}
{"text":"After sorting both arrays Now each array is in non - decreasing order . Thus , we will now compare each element of the array and do the increment or decrement operation depending upon the value of array b [ ] .","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ a [ $ i ] > $ b [ $ i ] ) $ result = $ result + abs ( $ a [ $ i ] - $ b [ $ i ] ) ; else if ( $ a [ $ i ] < $ b [ $ i ] ) $ result = $ result + abs ( $ a [ $ i ] - $ b [ $ i ] ) ; } return $ result ; }"}
{"text":"Driver code","code":"$ a = array ( 3 , 1 , 1 ) ; $ b = array ( 1 , 2 , 2 ) ; $ n = sizeof ( $ a ) ; echo MinOperation ( $ a , $ b , $ n ) ; ? >"}
{"text":"Sort whole array a [ ] except elements in range a [ l . . r ]","code":"< ? php function sortExceptUandL ( $ a , $ l , $ u , $ n ) {"}
{"text":"Copy all those element that need to be sorted to an auxiliary array b [ ]","code":"$ b = array ( ) ; for ( $ i = 0 ; $ i < $ l ; $ i ++ ) $ b [ $ i ] = $ a [ $ i ] ; for ( $ i = $ u + 1 ; $ i < $ n ; $ i ++ ) $ b [ $ l + ( $ i - ( $ u + 1 ) ) ] = $ a [ $ i ] ;"}
{"text":"sort the array b","code":"sort ( $ b ) ;"}
{"text":"Copy sorted elements back to a [ ]","code":"for ( $ i = 0 ; $ i < $ l ; $ i ++ ) $ a [ $ i ] = $ b [ $ i ] ; for ( $ i = $ u + 1 ; $ i < $ n ; $ i ++ ) $ a [ $ i ] = $ b [ $ l + ( $ i - ( $ u + 1 ) ) ] ; }"}
{"text":"Driver code","code":"$ a = array ( 4 , 5 , 3 , 12 , 14 , 9 ) ; $ n = count ( $ a ) ; $ l = 2 ; $ u = 4 ; sortExceptUandL ( $ a , $ l , $ u , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( $ a [ $ i ] . \" \u2581 \" ) ; ? >"}
{"text":"PHP program to sort all elements except element at index k .","code":"< ? php function sortExceptK ( & $ arr , $ k , $ n ) {"}
{"text":"Move k - th element to end","code":"$ t = $ arr [ $ k ] ; $ arr [ $ k ] = $ arr [ $ n - 1 ] ; $ arr [ $ n - 1 ] = $ t ;"}
{"text":"Sort all elements except last","code":"$ t = $ arr [ count ( $ arr ) - 1 ] ; $ arr = array_slice ( $ arr , 0 , -1 ) ; sort ( $ arr ) ; array_push ( $ arr , $ t ) ;"}
{"text":"Store last element ( originally k - th )","code":"$ last = $ arr [ $ n - 1 ] ;"}
{"text":"Move all elements from k - th to one position ahead .","code":"for ( $ i = $ n - 1 ; $ i > $ k ; $ i -- ) $ arr [ $ i ] = $ arr [ $ i - 1 ] ;"}
{"text":"Restore k - th element","code":"$ arr [ $ k ] = $ last ; }"}
{"text":"Driver code","code":"$ a = array ( 10 , 4 , 11 , 7 , 6 , 20 ) ; $ k = 2 ; $ n = count ( $ a ) ; sortExceptK ( $ a , $ k , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( $ a [ $ i ] . \" \u2581 \" ) ; ? >"}
{"text":"Function to find maximum partitions .","code":"< ? php function maxPartitions ( $ arr , $ n ) { $ ans = 0 ; $ max_so_far = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) {"}
{"text":"Find maximum in prefix arr [ 0. . i ]","code":"$ max_so_far = max ( $ max_so_far , $ arr [ $ i ] ) ;"}
{"text":"If maximum so far is equal to index , we can make a new partition ending at index i .","code":"if ( $ max_so_far == $ i ) $ ans ++ ; } return $ ans ; }"}
{"text":"Driver code","code":"{ $ arr = array ( 1 , 0 , 2 , 3 , 4 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo maxPartitions ( $ arr , $ n ) ; return 0 ; } ? >"}
{"text":"Function print how many Ropes are Left AfterEvery Cutting operation","code":"< ? php function cuttringRopes ( $ Ropes , $ n ) {"}
{"text":"sort all Ropes in increase of there length","code":"sort ( $ Ropes ) ; $ singleOperation = 0 ;"}
{"text":"min length rope","code":"$ cuttingLenght = $ Ropes [ 0 ] ;"}
{"text":"now traverse through the given Ropes in increase order of length","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"After cutting if current rope length is greater than '0' that mean all ropes to it 's right side are also  greater than 0","code":"if ( $ Ropes [ $ i ] - $ cuttingLenght > 0 ) { echo ( $ n - $ i ) . \" \u2581 \" ;"}
{"text":"now current rope become min length rope","code":"$ cuttingLenght = $ Ropes [ $ i ] ; $ singleOperation ++ ; } }"}
{"text":"After first operation all ropes length become zero","code":"if ( $ singleOperation == 0 ) echo \"0 \u2581 \" ; }"}
{"text":"Driver Code","code":"$ Ropes = array ( 5 , 1 , 1 , 2 , 3 , 5 ) ; $ n = count ( $ Ropes ) ; cuttringRopes ( $ Ropes , $ n ) ; ? >"}
{"text":"Function to find rank","code":"< ? php function rankify ( $ A , $ n ) {"}
{"text":"Rank Vector","code":"$ R = array ( 0 ) ;"}
{"text":"Sweep through all elements in A for each element count the number of less than and equal elements separately in r and s .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ r = 1 ; $ s = 1 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ j != $ i && $ A [ $ j ] < $ A [ $ i ] ) $ r += 1 ; if ( $ j != $ i && $ A [ $ j ] == $ A [ $ i ] ) $ s += 1 ; }"}
{"text":"Use formula to obtain rank","code":"$ R [ $ i ] = $ r + ( float ) ( $ s - 1 ) \/ ( float ) 2 ; } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) print number_format ( $ R [ $ i ] , 1 ) . ' \u2581 ' ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 2 , 5 , 2 , 1 , 25 , 2 ) ; $ n = count ( $ A ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ A [ $ i ] . ' \u2581 ' ; echo \" STRNEWLINE \" ; rankify ( $ A , $ n ) ; ? >"}
{"text":"Function to count minimum no of operation","code":"< ? php function min_noOf_operation ( $ arr , $ n , $ k ) { $ noOfSubtraction ; $ res = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ noOfSubtraction = 0 ; if ( $ arr [ $ i ] > $ arr [ $ i - 1 ] ) {"}
{"text":"Count how many times we have to subtract .","code":"$ noOfSubtraction = ( $ arr [ $ i ] - $ arr [ $ i - 1 ] ) \/ $ k ;"}
{"text":"Check an additional subtraction is required or not .","code":"if ( ( $ arr [ $ i ] - $ arr [ $ i - 1 ] ) % $ k != 0 ) $ noOfSubtraction ++ ;"}
{"text":"Modify the value of arr [ i ] .","code":"$ arr [ $ i ] = $ arr [ $ i ] - $ k * $ noOfSubtraction ; }"}
{"text":"Count total no of operation \/ subtraction .","code":"$ res = $ res + $ noOfSubtraction ; } return floor ( $ res ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 1 , 2 , 3 ) ; $ N = count ( $ arr ) ; $ k = 5 ; echo min_noOf_operation ( $ arr , $ N , $ k ) ; ? >"}
{"text":"PHP program to find the maximum value of i * arr [ i ]","code":"< ? php function maxSum ( $ arr , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ;"}
{"text":"Finding the sum of arr [ i ] * i","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += ( $ arr [ $ i ] * $ i ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 5 , 6 , 1 ) ; $ n = count ( $ arr ) ; echo maxSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to count pairs","code":"< ? php function countPairs ( $ a , $ n , $ k ) { $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( abs ( $ a [ $ j ] - $ a [ $ i ] ) < $ k ) $ res ++ ; return $ res ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 10 , 4 , 2 ) ; $ k = 3 ; $ n = count ( $ a ) ; echo countPairs ( $ a , $ n , $ k ) ; ? >"}
{"text":"PHP code to find count of Pairs with difference less than K .","code":"< ? php function countPairs ( $ a , $ n , $ k ) {"}
{"text":"to sort the array .","code":"sort ( $ a ) ; $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Keep incrementing result while subsequent elements are within limits .","code":"$ j = $ i + 1 ; while ( $ j < $ n and $ a [ $ j ] - $ a [ $ i ] < $ k ) { $ res ++ ; $ j ++ ; } } return $ res ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 10 , 4 , 2 ) ; $ k = 3 ; $ n = count ( $ a ) ; echo countPairs ( $ a , $ n , $ k ) ; ? >"}
{"text":"function to find the sum of minimum absolute difference","code":"< ? php function sumOfMinAbsDifferences ( $ arr , $ n ) {"}
{"text":"sort the given array","code":"sort ( $ arr ) ; sort ( $ arr , $ n ) ;"}
{"text":"initialize sum","code":"$ sum = 0 ;"}
{"text":"min absolute difference for the 1 st array element","code":"$ sum += abs ( $ arr [ 0 ] - $ arr [ 1 ] ) ;"}
{"text":"min absolute difference for the last array element","code":"$ sum += abs ( $ arr [ $ n - 1 ] - $ arr [ $ n - 2 ] ) ;"}
{"text":"find min absolute difference for rest of the array elements and add them to sum","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) $ sum += min ( abs ( $ arr [ $ i ] - $ arr [ $ i - 1 ] ) , abs ( $ arr [ $ i ] - $ arr [ $ i + 1 ] ) ) ;"}
{"text":"required sum","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 10 , 1 , 4 , 8 , 7 ) ; $ n = sizeof ( $ arr ) ; echo \" Sum \u2581 = \u2581 \" , sumOfMinAbsDifferences ( $ arr , $ n ) ; ? >"}
{"text":"function to calculate Small result between two arrays","code":"< ? php function findSmallestDifference ( $ A , $ B , $ m , $ n ) {"}
{"text":"Sort both arrays using sort function","code":"sort ( $ A ) ; sort ( $ A , $ m ) ; sort ( $ B ) ; sort ( $ B , $ n ) ; $ a = 0 ; $ b = 0 ; $ INT_MAX = 1 ;"}
{"text":"Initialize result as max value","code":"$ result = $ INT_MAX ;"}
{"text":"Scan Both Arrays upto sizeof of the Arrays","code":"while ( $ a < $ m && $ b < $ n ) { if ( abs ( $ A [ $ a ] - $ B [ $ b ] ) < $ result ) $ result = abs ( $ A [ $ a ] - $ B [ $ b ] ) ;"}
{"text":"Move Smaller Value","code":"if ( $ A [ $ a ] < $ B [ $ b ] ) $ a ++ ; else $ b ++ ; }"}
{"text":"return final sma result","code":"return $ result ; }"}
{"text":"Driver Code","code":"{"}
{"text":"Input given array A","code":"$ A = array ( 1 , 2 , 11 , 5 ) ;"}
{"text":"Input given array B","code":"$ B = array ( 4 , 12 , 19 , 23 , 127 , 235 ) ;"}
{"text":"Calculate size of Both arrays","code":"$ m = sizeof ( $ A ) \/ sizeof ( $ A [ 0 ] ) ; $ n = sizeof ( $ B ) \/ sizeof ( $ B [ 0 ] ) ;"}
{"text":"Call function to print smallest result","code":"echo findSmallestDifference ( $ A , $ B , $ m , $ n ) ; return 0 ; } ? >"}
{"text":"Prints elements larger than n \/ 2 element","code":"< ? php function findLarger ( $ arr , $ n ) {"}
{"text":"Sort the array in ascending order","code":"sort ( $ arr ) ;"}
{"text":"Print last ceil ( n \/ 2 ) elements","code":"for ( $ i = $ n - 1 ; $ i >= $ n \/ 2 ; $ i -- ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 6 , 1 , 0 , 9 ) ; $ n = count ( $ arr ) ; findLarger ( $ arr , $ n ) ; ? >"}
{"text":"getMissingNo takes array and size of array as arguments","code":"< ? php function getMissingNo ( $ a , $ n ) { $ total = ( $ n + 1 ) * ( $ n + 2 ) \/ 2 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ total -= $ a [ $ i ] ; return $ total ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 2 , 4 , 5 , 6 ) ; $ miss = getMissingNo ( $ a , 5 ) ; echo ( $ miss ) ; ? >"}
{"text":"Returns number of times x occurs in arr [ 0. . n - 1 ]","code":"< ? php function countOccurrences ( $ arr , $ n , $ x ) { $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ x == $ arr [ $ i ] ) $ res ++ ; return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 2 , 2 , 2 , 3 , 4 , 7 , 8 , 8 ) ; $ n = count ( $ arr ) ; $ x = 2 ; echo countOccurrences ( $ arr , $ n , $ x ) ; ? >"}
{"text":"A recursive binary search function . It returns location of x in given array arr [ l . . r ] is present , otherwise - 1","code":"< ? php function binarySearch ( & $ arr , $ l , $ r , $ x ) { if ( $ r < $ l ) return -1 ; $ mid = $ l + ( $ r - $ l ) \/ 2 ;"}
{"text":"If the element is present at the middle itself","code":"if ( $ arr [ $ mid ] == $ x ) return $ mid ;"}
{"text":"If element is smaller than mid , then it can only be present in left subarray","code":"if ( $ arr [ $ mid ] > $ x ) return binarySearch ( $ arr , $ l , $ mid - 1 , $ x ) ;"}
{"text":"Else the element can only be present in right subarray","code":"return binarySearch ( $ arr , $ mid + 1 , $ r , $ x ) ; }"}
{"text":"Returns number of times x occurs in arr [ 0. . n - 1 ]","code":"function countOccurrences ( $ arr , $ n , $ x ) { $ ind = binarySearch ( $ arr , 0 , $ n - 1 , $ x ) ;"}
{"text":"If element is not present","code":"if ( $ ind == -1 ) return 0 ;"}
{"text":"Count elements on left side .","code":"$ count = 1 ; $ left = $ ind - 1 ; while ( $ left >= 0 && $ arr [ $ left ] == $ x ) { $ count ++ ; $ left -- ; }"}
{"text":"Count elements on right side .","code":"$ right = $ ind + 1 ; while ( $ right < $ n && $ arr [ $ right ] == $ x ) { $ count ++ ; $ right ++ ; } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 2 , 2 , 2 , 3 , 4 , 7 , 8 , 8 ) ; $ n = sizeof ( $ arr ) ; $ x = 2 ; echo countOccurrences ( $ arr , $ n , $ x ) ; ? >"}
{"text":"Prints the pair with sum closest to x","code":"< ? php function printClosest ( $ arr , $ n , $ x ) {"}
{"text":"To store indexes of result pair","code":"$ res_l ; $ res_r ;"}
{"text":"Initialize left and right indexes and difference between pair sum and x","code":"$ l = 0 ; $ r = $ n - 1 ; $ diff = PHP_INT_MAX ;"}
{"text":"While there are elements between l and r","code":"while ( $ r > $ l ) {"}
{"text":"Check if this pair is closer than the closest pair so far","code":"if ( abs ( $ arr [ $ l ] + $ arr [ $ r ] - $ x ) < $ diff ) { $ res_l = $ l ; $ res_r = $ r ; $ diff = abs ( $ arr [ $ l ] + $ arr [ $ r ] - $ x ) ; }"}
{"text":"If this pair has more sum , move to smaller values .","code":"if ( $ arr [ $ l ] + $ arr [ $ r ] > $ x ) $ r -- ;"}
{"text":"Move to larger values","code":"else $ l ++ ; } echo \" \u2581 The \u2581 closest \u2581 pair \u2581 is \u2581 \" , $ arr [ $ res_l ] , \" \u2581 and \u2581 \" , $ arr [ $ res_r ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 22 , 28 , 29 , 30 , 40 ) ; $ x = 54 ; $ n = count ( $ arr ) ; printClosest ( $ arr , $ n , $ x ) ; ? >"}
{"text":"Returns counts of 1 's in arr[low..high]. The array is assumed to be sorted in non-increasing order","code":"< ? php function countOnes ( $ arr , $ low , $ high ) { if ( $ high >= $ low ) {"}
{"text":"get the middle index","code":"$ mid = $ low + ( $ high - $ low ) \/ 2 ;"}
{"text":"check if the element at middle index is last 1","code":"if ( ( $ mid == $ high or $ arr [ $ mid + 1 ] == 0 ) and ( $ arr [ $ mid ] == 1 ) ) return $ mid + 1 ;"}
{"text":"If element is not last 1 , recur for right side","code":"if ( $ arr [ $ mid ] == 1 ) return countOnes ( $ arr , ( $ mid + 1 ) , $ high ) ;"}
{"text":"else recur for left side","code":"return countOnes ( $ arr , $ low , ( $ mid - 1 ) ) ; } return 0 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 1 , 1 , 1 , 0 , 0 , 0 ) ; $ n = count ( $ arr ) ; echo \" Count \u2581 of \u2581 1 ' s \u2581 in \u2581 given \u2581 array \u2581 is \u2581 \" , countOnes ( $ arr , 0 , $ n - 1 ) ; ? >"}
{"text":"Function to find missing element based on binary search approach . arr1 [ ] is of larger size and N is size of it . arr1 [ ] and arr2 [ ] are assumed to be in same order .","code":"< ? php function findMissingUtil ( $ arr1 , $ arr2 , $ N ) {"}
{"text":"special case , for only element which is missing in second array","code":"if ( $ N == 1 ) return $ arr1 [ 0 ] ;"}
{"text":"special case , for first element missing","code":"if ( $ arr1 [ 0 ] != $ arr2 [ 0 ] ) return $ arr1 [ 0 ] ;"}
{"text":"Initialize current corner points","code":"$ lo = 0 ; $ hi = $ N - 1 ;"}
{"text":"loop until lo < hi","code":"while ( $ lo < $ hi ) { $ mid = ( $ lo + $ hi ) \/ 2 ;"}
{"text":"If element at mid indices are equal then go to right subarray","code":"if ( $ arr1 [ $ mid ] == $ arr2 [ $ mid ] ) $ lo = $ mid ; else $ hi = $ mid ;"}
{"text":"if lo , hi becomes contiguous , break","code":"if ( $ lo == $ hi - 1 ) break ; }"}
{"text":"missing element will be at hi index of bigger array","code":"return $ arr1 [ $ hi ] ; }"}
{"text":"This function mainly does basic error checking and calls findMissingUtil","code":"function findMissing ( $ arr1 , $ arr2 , $ M , $ N ) { if ( $ N == $ M - 1 ) echo \" Missing \u2581 Element \u2581 is \u2581 \" , findMissingUtil ( $ arr1 , $ arr2 , $ M ) ; else if ( $ M == $ N - 1 ) echo \" Missing \u2581 Element \u2581 is \u2581 \" , findMissingUtil ( $ arr2 , $ arr1 , $ N ) ; else echo \" Invalid \u2581 Input \" ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 1 , 4 , 5 , 7 , 9 ) ; $ arr2 = array ( 4 , 5 , 7 , 9 ) ; $ M = count ( $ arr1 ) ; $ N = count ( $ arr2 ) ; findMissing ( $ arr1 , $ arr2 , $ M , $ N ) ; ? >"}
{"text":"This function mainly does XOR of all elements of arr1 [ ] and arr2 [ ]","code":"< ? php function findMissing ( $ arr1 , $ arr2 , $ M , $ N ) { if ( $ M != $ N - 1 && $ N != $ M - 1 ) { echo \" Invalid \u2581 Input \" ; return ; }"}
{"text":"Do XOR of all element","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) $ res = $ res ^ $ arr1 [ $ i ] ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ res = $ res ^ $ arr2 [ $ i ] ; echo \" Missing \u2581 element \u2581 is \u2581 \" , $ res ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 4 , 1 , 5 , 9 , 7 ) ; $ arr2 = array ( 7 , 5 , 9 , 4 ) ; $ M = sizeof ( $ arr1 ) ; $ N = sizeof ( $ arr2 ) ; findMissing ( $ arr1 , $ arr2 , $ M , $ N ) ; ? >"}
{"text":"PHP program to Find the repeating and missing elements","code":"< ? php function printTwoElements ( $ arr , $ size ) { $ i ; echo \" The \u2581 repeating \u2581 element \u2581 is \" , \" \u2581 \" ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { if ( $ arr [ abs ( $ arr [ $ i ] ) - 1 ] > 0 ) $ arr [ abs ( $ arr [ $ i ] ) - 1 ] = - $ arr [ abs ( $ arr [ $ i ] ) - 1 ] ; else echo ( abs ( $ arr [ $ i ] ) ) ; } echo \" and the missing element is \" ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { if ( $ arr [ $ i ] > 0 ) echo ( $ i + 1 ) ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 7 , 3 , 4 , 5 , 5 , 6 , 2 ) ; $ n = count ( $ arr ) ; printTwoElements ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to Find the repeating and missing elements","code":"< ? php function getTwoElements ( & $ arr , $ n ) {"}
{"text":"Will hold xor of all elements and numbers from 1 to n","code":"$ xor1 ;"}
{"text":"Will have only single set bit of xor1","code":"$ set_bit_no ; $ i ; $ x = 0 ; $ y = 0 ; $ xor1 = $ arr [ 0 ] ;"}
{"text":"Get the xor of all array elements","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ xor1 = $ xor1 ^ $ arr [ $ i ] ;"}
{"text":"XOR the previous result with numbers from 1 to n","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ xor1 = $ xor1 ^ $ i ;"}
{"text":"Get the rightmost set bit in set_bit_no","code":"$ set_bit_no = $ xor1 & ~ ( $ xor1 - 1 ) ;"}
{"text":"Now divide elements in two sets by comparing rightmost set bit of xor1 with bit at same position in each element . Also , get XORs of two sets . The two XORs are the output elements . The following two for loops serve the purpose","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( ( $ arr [ $ i ] & $ set_bit_no ) != 0 )"}
{"text":"arr [ i ] belongs to first set","code":"$ x = $ x ^ $ arr [ $ i ] ; else"}
{"text":"arr [ i ] belongs to second set","code":"$ y = $ y ^ $ arr [ $ i ] ; } for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { if ( ( $ i & $ set_bit_no ) != 0 )"}
{"text":"i belongs to first set","code":"$ x = $ x ^ $ i ; else"}
{"text":"i belongs to second set","code":"$ y = $ y ^ $ i ; }"}
{"text":"* x and * y hold the desired output elements","code":"}"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 4 , 5 , 1 , 6 , 2 ) ; $ n = sizeof ( $ arr ) ; getTwoElements ( $ arr , $ n ) ;"}
{"text":"A naive solution to print all combination of 4 elements in A [ ] with sum equal to X","code":"< ? php function findFourElements ( $ A , $ n , $ X ) {"}
{"text":"Fix the first element and find other three","code":"for ( $ i = 0 ; $ i < $ n - 3 ; $ i ++ ) {"}
{"text":"Fix the second element and find other two","code":"for ( $ j = $ i + 1 ; $ j < $ n - 2 ; $ j ++ ) {"}
{"text":"Fix the third element and find the fourth","code":"for ( $ k = $ j + 1 ; $ k < $ n - 1 ; $ k ++ ) {"}
{"text":"find the fourth","code":"for ( $ l = $ k + 1 ; $ l < $ n ; $ l ++ ) if ( $ A [ $ i ] + $ A [ $ j ] + $ A [ $ k ] + $ A [ $ l ] == $ X ) echo $ A [ $ i ] , \" , \u2581 \" , $ A [ $ j ] , \" , \u2581 \" , $ A [ $ k ] , \" , \u2581 \" , $ A [ $ l ] ; } } } }"}
{"text":"Driver program to test above function","code":"$ A = array ( 10 , 20 , 30 , 40 , 1 , 2 ) ; $ n = sizeof ( $ A ) ; $ X = 91 ; findFourElements ( $ A , $ n , $ X ) ; ? >"}
{"text":"x is the element to be searched in arr [ 0. . n - 1 ]","code":"< ? php function search ( $ arr , $ n , $ x ) {"}
{"text":"Traverse the given array starting from leftmost element","code":"$ i = 0 ; while ( $ i < $ n ) {"}
{"text":"If x is found at index i","code":"if ( $ arr [ $ i ] == $ x ) return $ i ;"}
{"text":"Jump the difference between current array element and x","code":"$ i = $ i + abs ( $ arr [ $ i ] - $ x ) ; } echo \" number \u2581 is \u2581 not \u2581 present ! \" ; return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 8 , 7 , 6 , 7 , 6 , 5 , 4 , 3 , 2 , 3 , 4 , 3 ) ; $ n = sizeof ( $ arr ) ; $ x = 3 ; echo \" Element \u2581 \" , $ x , \" \u2581 is \u2581 present \u2581 \" , \" at \u2581 index \u2581 \" , search ( $ arr , $ n , 3 ) ; ? >"}
{"text":"PHP program to find third Largest element in an array of distinct elements","code":"< ? php function thirdLargest ( $ arr , $ arr_size ) {"}
{"text":"There should be atleast three elements","code":"if ( $ arr_size < 3 ) { echo \" \u2581 Invalid \u2581 Input \u2581 \" ; return ; }"}
{"text":"Find first largest element","code":"$ first = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ arr_size ; $ i ++ ) if ( $ arr [ $ i ] > $ first ) $ first = $ arr [ $ i ] ;"}
{"text":"Find second largest element","code":"$ second = PHP_INT_MIN ; for ( $ i = 0 ; $ i < $ arr_size ; $ i ++ ) if ( $ arr [ $ i ] > $ second && $ arr [ $ i ] < $ first ) $ second = $ arr [ $ i ] ;"}
{"text":"Find third largest element","code":"$ third = PHP_INT_MIN ; for ( $ i = 0 ; $ i < $ arr_size ; $ i ++ ) if ( $ arr [ $ i ] > $ third && $ arr [ $ i ] < $ second ) $ third = $ arr [ $ i ] ; echo \" The \u2581 third \u2581 Largest \u2581 element \u2581 is \u2581 \" , $ third , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 13 , 1 , 10 , 34 , 16 ) ; $ n = sizeof ( $ arr ) ; thirdLargest ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find third Largest element in an array","code":"< ? php function thirdLargest ( $ arr , $ arr_size ) {"}
{"text":"There should be atleast three elements","code":"if ( $ arr_size < 3 ) { echo \" \u2581 Invalid \u2581 Input \u2581 \" ; return ; }"}
{"text":"Initialize first , second and third Largest element","code":"$ first = $ arr [ 0 ] ; $ second = PHP_INT_MIN ; $ third = PHP_INT_MIN ;"}
{"text":"Traverse array elements to find the third Largest","code":"for ( $ i = 1 ; $ i < $ arr_size ; $ i ++ ) {"}
{"text":"If current element is greater than first , then update first , second and third","code":"if ( $ arr [ $ i ] > $ first ) { $ third = $ second ; $ second = $ first ; $ first = $ arr [ $ i ] ; }"}
{"text":"If arr [ i ] is in between first and second","code":"else if ( $ arr [ $ i ] > $ second ) { $ third = $ second ; $ second = $ arr [ $ i ] ; }"}
{"text":"If arr [ i ] is in between second and third","code":"else if ( $ arr [ $ i ] > $ third ) $ third = $ arr [ $ i ] ; } echo \" The \u2581 third \u2581 Largest \u2581 element \u2581 is \u2581 \" , $ third ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 13 , 1 , 10 , 34 , 16 ) ; $ n = sizeof ( $ arr ) ; thirdLargest ( $ arr , $ n ) ; ? >"}
{"text":"Function to check whether two elements exist whose sum is equal to sum of rest of the elements .","code":"< ? php function checkPair ( & $ arr , $ n ) {"}
{"text":"Find sum of whole array","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] ;"}
{"text":"If sum of array is not even than we can not divide it into two part","code":"if ( $ sum % 2 != 0 ) return false ; $ sum = $ sum \/ 2 ;"}
{"text":"For each element arr [ i ] , see if there is another element with vaalue sum - arr [ i ]","code":"$ s = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ val = $ sum - $ arr [ $ i ] ;"}
{"text":"If element exist than return the pair","code":"if ( array_search ( $ val , $ s ) ) { echo \" Pair \u2581 elements \u2581 are \u2581 \" . $ arr [ $ i ] . \" \u2581 and \u2581 \" . $ val . \" STRNEWLINE \" ; return true ; } array_push ( $ s , $ arr [ $ i ] ) ; } return false ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 11 , 5 , 1 , 4 , 7 ) ; $ n = sizeof ( $ arr ) ; if ( checkPair ( $ arr , $ n ) == false ) echo \" No \u2581 pair \u2581 found \" ; ? >"}
{"text":"function to search an element in minimum number of comparisons","code":"< ? php function search ( $ arr , $ n , $ x ) {"}
{"text":"1 st comparison","code":"if ( $ arr [ $ n - 1 ] == $ x ) return \" Found \" ; $ backup = $ arr [ $ n - 1 ] ; $ arr [ $ n - 1 ] = $ x ;"}
{"text":"no termination condition and thus no comparison","code":"for ( $ i = 0 ; ; $ i ++ ) {"}
{"text":"this would be executed at - most n times and therefore at - most n comparisons","code":"if ( $ arr [ $ i ] == $ x ) {"}
{"text":"replace arr [ n - 1 ] with its actual element as in original ' arr [ ] '","code":"$ arr [ $ n - 1 ] = $ backup ;"}
{"text":"if ' x ' is found before the ' ( n - 1 ) th ' index , then it is present in the array final comparison","code":"if ( $ i < $ n - 1 ) return \" Found \" ;"}
{"text":"else not present in the array","code":"return \" Not \u2581 Found \" ; } } }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 6 , 1 , 5 , 8 ) ; $ n = sizeof ( $ arr ) ; $ x = 1 ; echo ( search ( $ arr , $ n , $ x ) ) ; ? >"}
{"text":"PHP code to find majority element in a sorted array","code":"< ? php function findMajority ( $ arr , $ n ) { return $ arr [ intval ( $ n \/ 2 ) ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 2 , 3 ) ; $ n = count ( $ arr ) ; echo findMajority ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find maximum difference between adjacent elements in a circular array .","code":"< ? php function minAdjDifference ( $ arr , $ n ) { if ( $ n < 2 ) return ;"}
{"text":"Checking normal adjacent elements","code":"$ res = abs ( $ arr [ 1 ] - $ arr [ 0 ] ) ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) $ res = min ( $ res , abs ( $ arr [ $ i ] - $ arr [ $ i - 1 ] ) ) ;"}
{"text":"Checking circular link","code":"$ res = min ( $ res , abs ( $ arr [ $ n - 1 ] - $ arr [ 0 ] ) ) ; echo \" Min \u2581 Difference \u2581 = \u2581 \" , $ res ; }"}
{"text":"Driver Code","code":"$ a = array ( 10 , 12 , 13 , 15 , 10 ) ; $ n = count ( $ a ) ; minAdjDifference ( $ a , $ n ) ; ? >"}
{"text":"php program to find the first , second and third minimum element in an array","code":"< ? php function Print3Smallest ( $ array , $ n ) { $ MAX = 100000 ; $ firstmin = $ MAX ; $ secmin = $ MAX ; $ thirdmin = $ MAX ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Check if current element is less than firstmin , then update first , second and third","code":"if ( $ array [ $ i ] < $ firstmin ) { $ thirdmin = $ secmin ; $ secmin = $ firstmin ; $ firstmin = $ array [ $ i ] ; }"}
{"text":"Check if current element is less than secmin then update second and third","code":"else if ( $ array [ $ i ] < $ secmin ) { $ thirdmin = $ secmin ; $ secmin = $ array [ $ i ] ; }"}
{"text":"Check if current element is less than then update third","code":"else if ( $ array [ $ i ] < $ thirdmin ) $ thirdmin = $ array [ $ i ] ; } echo \" First min = \" . $ firstmin . \" \" ; STRNEWLINE echo \u2581 \" Second min = \" . $ secmin . \" \" ; STRNEWLINE echo \u2581 \" Third min = \" . $ thirdmin . \" \" }"}
{"text":"Driver code","code":"$ array = array ( 4 , 9 , 1 , 32 , 12 ) ; $ n = sizeof ( $ array ) \/ sizeof ( $ array [ 0 ] ) ; Print3Smallest ( $ array , $ n ) ; ? >"}
{"text":"PHP program to find minimum ( or maximum ) element in an array .","code":"< ? php function getMin ( & $ arr , $ n ) { return min ( $ arr ) ; } function getMax ( & $ arr , $ n ) { return max ( $ arr ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 1234 , 45 , 67 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" Minimum \u2581 element \u2581 of \u2581 array : \u2581 \" . getMin ( $ arr , $ n ) . \" STRNEWLINE \" ; echo \" Maximum \u2581 element \u2581 of \u2581 array : \u2581 \" . getMax ( $ arr , $ n ) ; ? >"}
{"text":"Function to find counts of all elements present in arr [ 0. . n - 1 ] . The array elements must be range from 1 to n","code":"< ? php function printfrequency ( $ arr , $ n ) {"}
{"text":"Subtract 1 from every element so that the elements become in range from 0 to n - 1","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ arr [ $ j ] = $ arr [ $ j ] - 1 ;"}
{"text":"Use every element arr [ i ] as index and add ' n ' to element present at arr [ i ] % n to keep track of count of occurrences of arr [ i ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ arr [ $ i ] % $ n ] = $ arr [ $ arr [ $ i ] % $ n ] + $ n ;"}
{"text":"To print counts , simply print the number of times n was added at index corresponding to every element","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ i + 1 , \" \u2581 - > \u2581 \" , ( int ) ( $ arr [ $ i ] \/ $ n ) , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 3 , 2 , 5 ) ; $ n = sizeof ( $ arr ) ; printfrequency ( $ arr , $ n ) ; ? >"}
{"text":"Returns count of inversions of size 3","code":"< ? php function getInvCount ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ invcount = 0 ; for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Count all smaller elements on right of arr [ i ]","code":"$ small = 0 ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ i ] > $ arr [ $ j ] ) $ small ++ ;"}
{"text":"Count all greater elements on left of arr [ i ]","code":"$ great = 0 ; for ( $ j = $ i - 1 ; $ j >= 0 ; $ j -- ) if ( $ arr [ $ i ] < $ arr [ $ j ] ) $ great ++ ;"}
{"text":"Update inversion count by adding all inversions that have arr [ i ] as middle of three elements","code":"$ invcount += $ great * $ small ; } return $ invcount ; }"}
{"text":"Driver Code","code":"$ arr = array ( 8 , 4 , 2 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" Inversion \u2581 Count \u2581 : \u2581 \" , getInvCount ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find maximum amount of water that can be trapped within given set of bars .","code":"< ? php function findWater ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ water = 0 ;"}
{"text":"Fill left array","code":"$ left [ 0 ] = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ left [ $ i ] = max ( $ left [ $ i - 1 ] , $ arr [ $ i ] ) ;"}
{"text":"Fill right array","code":"$ right [ $ n - 1 ] = $ arr [ $ n - 1 ] ; for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) $ right [ $ i ] = max ( $ right [ $ i + 1 ] , $ arr [ $ i ] ) ;"}
{"text":"Calculate the accumulated water element by element consider the amount of water on i 'th bar, the  amount of water accumulated  on this particular  bar will be equal to min(left[i], right[i]) - arr[i] .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ water += min ( $ left [ $ i ] , $ right [ $ i ] ) - $ arr [ $ i ] ; return $ water ; }"}
{"text":"Driver program","code":"$ arr = array ( 0 , 1 , 0 , 2 , 1 , 0 , 1 , 3 , 2 , 1 , 2 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" Maximum \u2581 water \u2581 that \u2581 can \u2581 be \u2581 accumulated \u2581 is \u2581 \" , findWater ( $ arr , $ n ) ; ? >"}
{"text":"Method to find maximum amount of water that can be trapped within given set of bars .","code":"< ? php function findWater ( $ arr , $ n ) {"}
{"text":"initialize output","code":"$ result = 0 ;"}
{"text":"maximum element on left and right","code":"$ left_max = 0 ; $ right_max = 0 ;"}
{"text":"indices to traverse the array","code":"$ lo = 0 ; $ hi = $ n - 1 ; while ( $ lo <= $ hi ) { if ( $ arr [ $ lo ] < $ arr [ $ hi ] ) { if ( $ arr [ $ lo ] > $ left_max )"}
{"text":"update max in left","code":"$ left_max = $ arr [ $ lo ] ; else"}
{"text":"water on curr element = max - curr","code":"$ result += $ left_max - $ arr [ $ lo ] ; $ lo ++ ; } else { if ( $ arr [ $ hi ] > $ right_max )"}
{"text":"update right maximum","code":"$ right_max = $ arr [ $ hi ] ; else $ result += $ right_max - $ arr [ $ hi ] ; $ hi -- ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( 0 , 1 , 0 , 2 , 1 , 0 , 1 , 3 , 2 , 1 , 2 , 1 ) ; $ n = count ( $ arr ) ; echo \" Maximum \u2581 water \u2581 that \u2581 can \u2581 be \u2581 accumulated \u2581 is \u2581 \" , findWater ( $ arr , $ n ) ; ? >"}
{"text":"PHP code for median with case of returning double value when even number of elements are present in both array combinely","code":"< ? php $ median = 0 ; $ i = 0 ; $ j = 0 ;"}
{"text":"Function to find max","code":"function maximum ( $ a , $ b ) { return $ a > $ b ? $ a : $ b ; }"}
{"text":"Function to find minimum","code":"function minimum ( $ a , $ b ) { return $ a < $ b ? $ a : $ b ; }"}
{"text":"Function to find median of two sorted arrays","code":"function findMedianSortedArrays ( & $ a , $ n , & $ b , $ m ) { global $ median , $ i , $ j ; $ min_index = 0 ; $ max_index = $ n ; while ( $ min_index <= $ max_index ) { $ i = intval ( ( $ min_index + $ max_index ) \/ 2 ) ; $ j = intval ( ( ( $ n + $ m + 1 ) \/ 2 ) - $ i ) ;"}
{"text":"if i = n , it means that Elements from a [ ] in the second half is an empty set . and if j = 0 , it means that Elements from b [ ] in the first half is an empty set . so it is necessary to check that , because we compare elements from these two groups . Searching on right","code":"if ( $ i < $ n && $ j > 0 && $ b [ $ j - 1 ] > $ a [ $ i ] ) $ min_index = $ i + 1 ;"}
{"text":"if i = 0 , it means that Elements from a [ ] in the first half is an empty set and if j = m , it means that Elements from b [ ] in the second half is an empty set . so it is necessary to check that , because we compare elements from these two groups . searching on left","code":"else if ( $ i > 0 && $ j < $ m && $ b [ $ j ] < $ a [ $ i - 1 ] ) $ max_index = $ i - 1 ;"}
{"text":"we have found the desired halves .","code":"else {"}
{"text":"this condition happens when we don 't have any elements  in the first half from a[]  so we returning the last  element in b[] from the  first half.","code":"if ( $ i == 0 ) $ median = $ b [ $ j - 1 ] ;"}
{"text":"and this condition happens when we don 't have any  elements in the first half  from b[] so we returning the  last element in a[] from the  first half.","code":"else if ( $ j == 0 ) $ median = $ a [ $ i - 1 ] ; else $ median = maximum ( $ a [ $ i - 1 ] , $ b [ $ j - 1 ] ) ; break ; } }"}
{"text":"calculating the median . If number of elements is odd there is one middle element .","code":"if ( ( $ n + $ m ) % 2 == 1 ) return $ median ;"}
{"text":"Elements from a [ ] in the second half is an empty set .","code":"if ( $ i == $ n ) return ( ( $ median + $ b [ $ j ] ) \/ 2.0 ) ;"}
{"text":"Elements from b [ ] in the second half is an empty set .","code":"if ( $ j == $ m ) return ( ( $ median + $ a [ $ i ] ) \/ 2.0 ) ; return ( ( $ median + minimum ( $ a [ $ i ] , $ b [ $ j ] ) ) \/ 2.0 ) ; }"}
{"text":"Driver code","code":"$ a = array ( 900 ) ; $ b = array ( 10 , 13 , 14 ) ; $ n = count ( $ a ) ; $ m = count ( $ b ) ;"}
{"text":"we need to define the smaller array as the first parameter to make sure that the time complexity will be O ( log ( min ( n , m ) ) )","code":"if ( $ n < $ m ) echo ( \" The \u2581 median \u2581 is \u2581 : \u2581 \" . findMedianSortedArrays ( $ a , $ n , $ b , $ m ) ) ; else echo ( \" The \u2581 median \u2581 is \u2581 : \u2581 \" . findMedianSortedArrays ( $ b , $ m , $ a , $ n ) ) ; ? >"}
{"text":"PHP program to find uncommon elements of two sorted arrays","code":"< ? php function printUncommon ( $ arr1 , $ arr2 , $ n1 , $ n2 ) { $ i = 0 ; $ j = 0 ; $ k = 0 ; while ( $ i < $ n1 && $ j < $ n2 ) {"}
{"text":"If not common , prsmaller","code":"if ( $ arr1 [ $ i ] < $ arr2 [ $ j ] ) { echo $ arr1 [ $ i ] . \" \" ; $ i ++ ; $ k ++ ; } else if ( $ arr2 [ $ j ] < $ arr1 [ $ i ] ) { echo $ arr2 [ $ j ] . \" \" ; $ k ++ ; $ j ++ ; }"}
{"text":"Skip common element","code":"else { $ i ++ ; $ j ++ ; } }"}
{"text":"printing remaining elements","code":"while ( $ i < $ n1 ) { echo $ arr1 [ $ i ] . \" \" ; $ i ++ ; $ k ++ ; } while ( $ j < $ n2 ) { echo $ arr2 [ $ j ] . \" \" ; $ j ++ ; $ k ++ ; } }"}
{"text":"Driver code","code":"$ arr1 = array ( 10 , 20 , 30 ) ; $ arr2 = array ( 20 , 25 , 30 , 40 , 50 ) ; $ n1 = sizeof ( $ arr1 ) ; $ n2 = sizeof ( $ arr2 ) ; printUncommon ( $ arr1 , $ arr2 , $ n1 , $ n2 ) ; ? >"}
{"text":"PHP program to find the least frequent element in an array .","code":"< ? php function leastFrequent ( $ arr , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ; sort ( $ arr , $ n ) ;"}
{"text":"find the min frequency using linear traversal","code":"$ min_count = $ n + 1 ; $ res = -1 ; $ curr_count = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] == $ arr [ $ i - 1 ] ) $ curr_count ++ ; else { if ( $ curr_count < $ min_count ) { $ min_count = $ curr_count ; $ res = $ arr [ $ i - 1 ] ; } $ curr_count = 1 ; } }"}
{"text":"If last element is least frequent","code":"if ( $ curr_count < $ min_count ) { $ min_count = $ curr_count ; $ res = $ arr [ $ n - 1 ] ; } return $ res ; }"}
{"text":"Driver Code","code":"{ $ arr = array ( 1 , 3 , 2 , 1 , 2 , 2 , 3 , 1 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo leastFrequent ( $ arr , $ n ) ; return 0 ; } ? >"}
{"text":"PHP program to find maximum sum by selecting a element from n arrays","code":"< ? php $ M = 4 ;"}
{"text":"To calculate maximum sum by selecting element from each array","code":"function maximumSum ( $ a , $ n ) { global $ M ;"}
{"text":"Sort each array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) sort ( $ a [ $ i ] ) ;"}
{"text":"Store maximum element of last array","code":"$ sum = $ a [ $ n - 1 ] [ $ M - 1 ] ; $ prev = $ a [ $ n - 1 ] [ $ M - 1 ] ; $ i ; $ j ;"}
{"text":"Selecting maximum element from previoulsy selected element","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { for ( $ j = $ M - 1 ; $ j >= 0 ; $ j -- ) { if ( $ a [ $ i ] [ $ j ] < $ prev ) { $ prev = $ a [ $ i ] [ $ j ] ; $ sum += $ prev ; break ; } }"}
{"text":"j = - 1 means no element is found in a [ i ] so return 0","code":"if ( $ j == -1 ) return 0 ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( array ( 1 , 7 , 3 , 4 ) , array ( 4 , 2 , 5 , 1 ) , array ( 9 , 5 , 1 , 8 ) ) ; $ n = sizeof ( $ arr ) ; echo maximumSum ( $ arr , $ n ) ; ? >"}
{"text":"function to count the required pairs","code":"< ? php function countPairs ( $ A , $ n , $ k ) { $ ans = 0 ;"}
{"text":"sort the given array","code":"sort ( $ A ) ;"}
{"text":"for each A [ i ] traverse rest array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"count Aj such that Ai * k ^ x = Aj","code":"$ x = 0 ;"}
{"text":"increase x till Ai * k ^ x <= largest element","code":"while ( ( $ A [ $ i ] * pow ( $ k , $ x ) ) <= $ A [ $ j ] ) { if ( ( $ A [ $ i ] * pow ( $ k , $ x ) ) == $ A [ $ j ] ) { $ ans ++ ; break ; } $ x ++ ; } } } return $ ans ; }"}
{"text":"Driver Code","code":"$ A = array ( 3 , 8 , 9 , 12 , 18 , 4 , 24 , 2 , 6 ) ; $ n = count ( $ A ) ; $ k = 3 ; echo countPairs ( $ A , $ n , $ k ) ; ? >"}
{"text":"function to return min distance","code":"< ? php function minDistance ( $ arr , $ n ) { $ maximum_element = $ arr [ 0 ] ; $ min_dis = $ n ; $ index = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"case a","code":"if ( $ maximum_element == $ arr [ $ i ] ) { $ min_dis = min ( $ min_dis , ( $ i - $ index ) ) ; $ index = $ i ; }"}
{"text":"case b","code":"else if ( $ maximum_element < $ arr [ $ i ] ) { $ maximum_element = $ arr [ $ i ] ; $ min_dis = $ n ; $ index = $ i ; }"}
{"text":"case c","code":"else continue ; } return $ min_dis ; }"}
{"text":"Driver Code","code":"$ arr = array ( 6 , 3 , 1 , 3 , 6 , 4 , 6 ) ; $ n = count ( $ arr ) ; echo \" Minimum \u2581 distance \u2581 = \u2581 \" . minDistance ( $ arr , $ n ) ; ? >"}
{"text":"Function to Find the value of k","code":"< ? php function findValue ( $ arr , $ n , $ k ) {"}
{"text":"Search for k . After every successful search , double k .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] == $ k ) $ k *= 2 ; return $ k ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 4 , 10 , 8 , 1 ) ; $ k = 2 ; $ n = count ( $ arr ) ; echo findValue ( $ arr , $ n , $ k ) ; ? >"}
{"text":"PHP program to print last duplicate element and its index in a sorted array","code":"< ? php function dupLastIndex ( $ arr , $ n ) {"}
{"text":"if array is null or size is less than equal to 0 return","code":"if ( $ arr == null or $ n <= 0 ) return ;"}
{"text":"compare elements and return last duplicate and its index","code":"for ( $ i = $ n - 1 ; $ i > 0 ; $ i -- ) { if ( $ arr [ $ i ] == $ arr [ $ i - 1 ] ) { echo \" Last \u2581 index : \" , $ i , \" STRNEWLINE \" ; echo \" Last \u2581 duplicate \u2581 item : \" , $ arr [ $ i ] ; return ; } }"}
{"text":"If we reach here , then no duplicate found .","code":"echo \" no \u2581 duplicate \u2581 found \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 5 , 5 , 6 , 6 , 7 , 9 ) ; $ n = count ( $ arr ) ; dupLastIndex ( $ arr , $ n ) ; ? >"}
{"text":"function to find smallest num","code":"< ? php function findSmallest ( $ a , $ n ) {"}
{"text":"traverse for all elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ j ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( $ a [ $ j ] % $ a [ $ i ] ) break ;"}
{"text":"stores the minimum if it divides all","code":"if ( $ j == $ n ) return $ a [ $ i ] ; } return -1 ; }"}
{"text":"Driver Code","code":"$ a = array ( 25 , 20 , 5 , 10 , 100 ) ; $ n = sizeof ( $ a ) ; echo findSmallest ( $ a , $ n ) ; ? >"}
{"text":"function to find smallest num","code":"< ? php function findSmallest ( $ a , $ n ) {"}
{"text":"Find the smallest element","code":"$ smallest = min ( $ a ) ;"}
{"text":"Check if all array elements are divisible by smallest .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ a [ $ i ] % $ smallest ) return -1 ; return $ smallest ; }"}
{"text":"Driver Code","code":"$ a = array ( 25 , 20 , 5 , 10 , 100 ) ; $ n = count ( $ a ) ; echo findSmallest ( $ a , $ n ) ; ? >"}
{"text":"Function to find the index of Max element that satisfies the condition","code":"< ? php function findIndex ( $ arr , $ len ) {"}
{"text":"Finding index of max of the array","code":"$ maxIndex = 0 ; for ( $ i = 0 ; $ i < $ len ; ++ $ i ) if ( $ arr [ $ i ] > $ arr [ $ maxIndex ] ) $ maxIndex = $ i ;"}
{"text":"Returns - 1 if the max element is not twice of the i - th element .","code":"for ( $ i = 0 ; $ i < $ len ; ++ $ i ) if ( $ maxIndex != $ i and $ arr [ $ maxIndex ] < 2 * $ arr [ $ i ] ) return -1 ; return $ maxIndex ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 6 , 1 , 0 ) ; $ len = count ( $ arr ) ; echo findIndex ( $ arr , $ len ) ; ? >"}
{"text":"Function to count consecutive steps","code":"< ? php function find_consecutive_steps ( $ arr , $ len ) { $ count = 0 ; $ maximum = 0 ; for ( $ index = 1 ; $ index < $ len ; $ index ++ ) {"}
{"text":"count the number of consecutive increasing height building","code":"if ( $ arr [ $ index ] > $ arr [ $ index - 1 ] ) $ count ++ ; else { $ maximum = max ( $ maximum , $ count ) ; $ count = 0 ; } } return max ( $ maximum , $ count ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 ) ; $ len = count ( $ arr ) ; echo find_consecutive_steps ( $ arr , $ len ) ; ? >"}
{"text":"PHP program to find minimum difference between groups of highest and lowest sums .","code":"< ? php function CalculateMax ( $ arr , $ n ) {"}
{"text":"Sorting the whole array .","code":"sort ( $ arr ) ; $ min_sum = $ arr [ 0 ] + $ arr [ 1 ] ; $ max_sum = $ arr [ $ n - 1 ] + $ arr [ $ n - 2 ] ; return abs ( $ max_sum - $ min_sum ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 6 , 7 , 1 , 11 ) ; $ n = sizeof ( $ arr ) ; echo CalculateMax ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find minimum difference between groups of highest and lowest sums .","code":"< ? php function calculate ( $ a , $ n ) {"}
{"text":"Sorting the whole array .","code":"sort ( $ a ) ;"}
{"text":"Generating sum groups .","code":"$ s = array ( ) ; for ( $ i = 0 , $ j = $ n - 1 ; $ i < $ j ; $ i ++ , $ j -- ) array_push ( $ s , ( $ a [ $ i ] + $ a [ $ j ] ) ) ; $ mini = min ( $ s ) ; $ maxi = max ( $ s ) ; return abs ( $ maxi - $ mini ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 2 , 6 , 4 , 3 ) ; $ n = sizeof ( $ a ) ; echo calculate ( $ a , $ n ) ; ? >"}
{"text":"Returns minimum difference between any two pair in arr [ 0. . n - 1 ]","code":"< ? php function printMinDiffPairs ( $ arr , $ n ) { if ( $ n <= 1 ) return ;"}
{"text":"Sort array elements","code":"sort ( $ arr ) ;"}
{"text":"Compare differences of adjacent pairs to find the minimum difference .","code":"$ minDiff = $ arr [ 1 ] - $ arr [ 0 ] ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) $ minDiff = min ( $ minDiff , $ arr [ $ i ] - $ arr [ $ i - 1 ] ) ;"}
{"text":"Traverse array again and print all pairs with difference as minDiff .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( ( $ arr [ $ i ] - $ arr [ $ i - 1 ] ) == $ minDiff ) echo \" ( \" , $ arr [ $ i - 1 ] , \" , \u2581 \" , $ arr [ $ i ] , \" ) , \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 3 , 2 , 4 , 1 ) ; $ n = sizeof ( $ arr ) ; printMinDiffPairs ( $ arr , $ n ) ; ? >"}
{"text":"Brute force PHP program to calculate the maximum absolute difference of an array .","code":"< ? php function calculateDiff ( $ i , $ j , $ arr ) {"}
{"text":"Utility function to calculate the value of absolute difference for the pair ( i , j ) .","code":"return abs ( $ arr [ $ i ] - $ arr [ $ j ] ) + abs ( $ i - $ j ) ; }"}
{"text":"Function to return maximum absolute difference in brute force .","code":"function maxDistance ( $ arr , $ n ) {"}
{"text":"Variable for storing the maximum absolute distance throughout the traversal of loops .","code":"$ result = 0 ;"}
{"text":"Iterate through all pairs .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i ; $ j < $ n ; $ j ++ ) {"}
{"text":"If the absolute difference of current pair ( i , j ) is greater than the maximum difference calculated till now , update the value of result .","code":"if ( calculateDiff ( $ i , $ j , $ arr ) > $ result ) $ result = calculateDiff ( $ i , $ j , $ arr ) ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( -70 , -64 , -6 , -56 , 64 , 61 , -57 , 16 , 48 , -98 ) ; $ n = sizeof ( $ arr ) ; echo maxDistance ( $ arr , $ n ) ; ? >"}
{"text":"Function to return maximum absolute difference in linear time .","code":"< ? php function maxDistance ( $ arr , $ n ) {"}
{"text":"max and min variables as described in algorithm .","code":"$ max1 = PHP_INT_MIN ; $ min1 = PHP_INT_MAX ; $ max2 = PHP_INT_MIN ; $ min2 = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Updating max and min variables as described in algorithm .","code":"$ max1 = max ( $ max1 , $ arr [ $ i ] + $ i ) ; $ min1 = min ( $ min1 , $ arr [ $ i ] + $ i ) ; $ max2 = max ( $ max2 , $ arr [ $ i ] - $ i ) ; $ min2 = min ( $ min2 , $ arr [ $ i ] - $ i ) ; }"}
{"text":"Calculating maximum absolute difference .","code":"return max ( $ max1 - $ min1 , $ max2 - $ min2 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( -70 , -64 , -6 , -56 , 64 , 61 , -57 , 16 , 48 , -98 ) ; $ n = count ( $ arr ) ; echo maxDistance ( $ arr , $ n ) ; ? >"}
{"text":"function to find local extremum","code":"< ? php function extrema ( $ a , $ n ) { $ count = 0 ;"}
{"text":"start loop from position 1 till n - 1","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"check if a [ i ] is greater than both its neighbours then add 1 to x","code":"$ count += ( $ a [ $ i ] > $ a [ $ i - 1 ] and $ a [ $ i ] > $ a [ $ i + 1 ] ) ;"}
{"text":"check if a [ i ] is less than both its neighbours , then add 1 to x","code":"$ count += ( $ a [ $ i ] < $ a [ $ i - 1 ] and $ a [ $ i ] < $ a [ $ i + 1 ] ) ; } return $ count ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 0 , 2 , 1 ) ; $ n = count ( $ a ) ; echo extrema ( $ a , $ n ) ; ? >"}
{"text":"Returns element closest to target in arr [ ]","code":"< ? php function findClosest ( $ arr , $ n , $ target ) {"}
{"text":"Corner cases","code":"if ( $ target <= $ arr [ 0 ] ) return $ arr [ 0 ] ; if ( $ target >= $ arr [ $ n - 1 ] ) return $ arr [ $ n - 1 ] ;"}
{"text":"Doing binary search","code":"$ i = 0 ; $ j = $ n ; $ mid = 0 ; while ( $ i < $ j ) { $ mid = ( $ i + $ j ) \/ 2 ; if ( $ arr [ $ mid ] == $ target ) return $ arr [ $ mid ] ;"}
{"text":"If target is less than array element , then search in left","code":"if ( $ target < $ arr [ $ mid ] ) {"}
{"text":"If target is greater than previous to mid , return closest of two","code":"if ( $ mid > 0 && $ target > $ arr [ $ mid - 1 ] ) return getClosest ( $ arr [ $ mid - 1 ] , $ arr [ $ mid ] , $ target ) ;"}
{"text":"Repeat for left half","code":"$ j = $ mid ; }"}
{"text":"If target is greater than mid","code":"else { if ( $ mid < $ n - 1 && $ target < $ arr [ $ mid + 1 ] ) return getClosest ( $ arr [ $ mid ] , $ arr [ $ mid + 1 ] , $ target ) ;"}
{"text":"update i","code":"$ i = $ mid + 1 ; } }"}
{"text":"Only single element left after search","code":"return $ arr [ $ mid ] ; }"}
{"text":"Method to compare which one is the more close . We find the closest by taking the difference between the target and both values . It assumes that val2 is greater than val1 and target lies between these two .","code":"function getClosest ( $ val1 , $ val2 , $ target ) { if ( $ target - $ val1 >= $ val2 - $ target ) return $ val2 ; else return $ val1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 4 , 5 , 6 , 6 , 8 , 9 ) ; $ n = sizeof ( $ arr ) ; $ target = 11 ; echo ( findClosest ( $ arr , $ n , $ target ) ) ; ? >"}
{"text":"function to find the number of maximum pair sum","code":"< ? php function sum ( $ a , $ n ) {"}
{"text":"traverse through all the pairs","code":"$ maxSum = PHP_INT_MIN ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) $ maxSum = max ( $ maxSum , $ a [ $ i ] + $ a [ $ j ] ) ;"}
{"text":"traverse through all pairs and keep a count of the number of maximum pairs","code":"$ c = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ a [ $ i ] + $ a [ $ j ] == $ maxSum ) $ c ++ ; return $ c ; }"}
{"text":"Driver Code","code":"$ array = array ( 1 , 1 , 1 , 2 , 2 , 2 ) ; $ n = count ( $ array ) ; echo sum ( $ array , $ n ) ; ? >"}
{"text":"function to find the number of maximum pair sums","code":"< ? php function sum ( $ a , $ n ) {"}
{"text":"Find maximum and second maximum elements . Also find their counts .","code":"$ maxVal = $ a [ 0 ] ; $ maxCount = 1 ; $ secondMax = PHP_INT_MIN ; $ secondMaxCount ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] == $ maxVal ) $ maxCount ++ ; else if ( $ a [ $ i ] > $ maxVal ) { $ secondMax = $ maxVal ; $ secondMaxCount = $ maxCount ; $ maxVal = $ a [ $ i ] ; $ maxCount = 1 ; } else if ( $ a [ $ i ] == $ secondMax ) { $ secondMax = $ a [ $ i ] ; $ secondMaxCount ++ ; } else if ( $ a [ $ i ] > $ secondMax ) { $ secondMax = $ a [ $ i ] ; $ secondMaxCount = 1 ; } }"}
{"text":"If maximum element appears more than once .","code":"if ( $ maxCount > 1 ) return $ maxCount * ( $ maxCount - 1 ) \/ 2 ;"}
{"text":"If maximum element appears only once .","code":"return $ secondMaxCount ; }"}
{"text":"Driver Code","code":"$ array = array ( 1 , 1 , 1 , 2 , 2 , 2 , 3 ) ; $ n = count ( $ array ) ; echo sum ( $ array , $ n ) ; ? >"}
{"text":"Prints first k natural numbers in arr [ 0. . n - 1 ]","code":"< ? php function printKMissing ( $ arr , $ n , $ k ) { sort ( $ arr ) ; sort ( $ arr , $ n ) ;"}
{"text":"Find first positive number","code":"$ i = 0 ; while ( $ i < $ n && $ arr [ $ i ] <= 0 ) $ i ++ ;"}
{"text":"Now find missing numbers between array elements","code":"$ count = 0 ; $ curr = 1 ; while ( $ count < $ k && $ i < $ n ) { if ( $ arr [ $ i ] != $ curr ) { echo $ curr , \" \" ; $ count ++ ; } else $ i ++ ; $ curr ++ ; }"}
{"text":"Find missing numbers after maximum .","code":"while ( $ count < $ k ) { echo $ curr , \" \" ; $ curr ++ ; $ count ++ ; } }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 4 ) ; $ n = sizeof ( $ arr ) ; $ k = 3 ; printKMissing ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Returns a Noble integer if present , else returns - 1.","code":"< ? php function nobleInteger ( $ arr , $ size ) { for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { $ count = 0 ; for ( $ j = 0 ; $ j < $ size ; $ j ++ ) if ( $ arr [ $ i ] < $ arr [ $ j ] ) $ count ++ ;"}
{"text":"If count of greater elements is equal to arr [ i ]","code":"if ( $ count == $ arr [ $ i ] ) return $ arr [ $ i ] ; } return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 3 , 20 , 40 , 2 ) ; $ size = count ( $ arr ) ; $ res = nobleInteger ( $ arr , $ size ) ; if ( $ res != -1 ) echo \" The \u2581 noble \u2581 integer \u2581 is \u2581 \" , $ res ; else echo \" No \u2581 Noble \u2581 Integer \u2581 Found \" ; ? >"}
{"text":"Returns a Noble integer if present , else returns - 1.","code":"< ? php function nobleInteger ( $ arr ) { sort ( $ arr ) ;"}
{"text":"Return a Noble element if present before last .","code":"$ n = count ( $ arr ) ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ arr [ $ i ] == $ arr [ $ i + 1 ] ) continue ;"}
{"text":"In case of duplicates , we reach last occurrence here .","code":"if ( $ arr [ $ i ] == $ n - $ i - 1 ) return $ arr [ $ i ] ; } if ( $ arr [ $ n - 1 ] == 0 ) return $ arr [ $ n - 1 ] ; return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 3 , 20 , 40 , 2 ) ; $ res = nobleInteger ( $ arr ) ; if ( $ res != -1 ) echo \" The \u2581 noble \u2581 integer \u2581 is \u2581 \" , $ res ; else echo \" No \u2581 Noble \u2581 Integer \u2581 Found \" ; ? >"}
{"text":"Returns minimum possible pairwise absolute difference of two arrays .","code":"< ? php function findMinSum ( $ a , $ b , $ n ) {"}
{"text":"Sort both arrays","code":"sort ( $ a ) ; sort ( $ a , $ n ) ; sort ( $ b ) ; sort ( $ b , $ n ) ;"}
{"text":"Find sum of absolute differences","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + abs ( $ a [ $ i ] - $ b [ $ i ] ) ; return $ sum ; }"}
{"text":"Both a [ ] and b [ ] must be of same size .","code":"$ a = array ( 4 , 1 , 8 , 7 ) ; $ b = array ( 2 , 3 , 6 , 5 ) ; $ n = sizeof ( $ a ) ; echo ( findMinSum ( $ a , $ b , $ n ) ) ; ? >"}
{"text":"Function to find maximum product of a subset","code":"< ? php function minProductSubset ( $ a , $ n ) { if ( $ n == 1 ) return $ a [ 0 ] ;"}
{"text":"Find count of negative numbers , count of zeros , maximum valued negative number , minimum valued positive number and product of non - zero numbers","code":"$ max_neg = PHP_INT_MIN ; $ min_pos = PHP_INT_MAX ; $ count_neg = 0 ; $ count_zero = 0 ; $ prod = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If number is 0 , we don 't  multiply it with product.","code":"if ( $ a [ $ i ] == 0 ) { $ count_zero ++ ; continue ; }"}
{"text":"Count negatives and keep track of maximum valued negative .","code":"if ( $ a [ $ i ] < 0 ) { $ count_neg ++ ; $ max_neg = max ( $ max_neg , $ a [ $ i ] ) ; }"}
{"text":"Track minimum positive number of array","code":"if ( $ a [ $ i ] > 0 ) $ min_pos = min ( $ min_pos , $ a [ $ i ] ) ; $ prod = $ prod * $ a [ $ i ] ; }"}
{"text":"If there are all zeros or no negative number present","code":"if ( $ count_zero == $ n || ( $ count_neg == 0 && $ count_zero > 0 ) ) return 0 ;"}
{"text":"If there are all positive","code":"if ( $ count_neg == 0 ) return $ min_pos ;"}
{"text":"If there are even number of negative numbers and count_neg not 0","code":"if ( ! ( $ count_neg & 1 ) && $ count_neg != 0 ) {"}
{"text":"Otherwise result is product of all non - zeros divided by maximum valued negative .","code":"$ prod = $ prod \/ $ max_neg ; } return $ prod ; }"}
{"text":"Driver code","code":"$ a = array ( -1 , -1 , -2 , 4 , 3 ) ; $ n = sizeof ( $ a ) ; echo ( minProductSubset ( $ a , $ n ) ) ; ? >"}
{"text":"Php program to repeatedly search an element by doubling it after every successful search","code":"< ? php function binary_search ( $ a , $ x , $ lo = 0 , $ hi = NULL ) { if ( $ hi == NULL ) $ hi = count ( $ a ) ; while ( $ lo < $ hi ) { $ mid = ( $ lo + $ hi ) \/ 2 ; $ midval = $ a [ $ mid ] ; if ( $ midval < $ x ) $ lo = $ mid + 1 ; else if ( $ midval > $ x ) $ hi = $ mid ; else return $ mid ; } return -1 ; } function findElement ( $ a , $ n , $ b ) {"}
{"text":"Sort the given array so that binary search can be applied on it","code":"sort ( $ a ) ;"}
{"text":"Maximum array element","code":"$ mx = $ a [ $ n - 1 ] ; while ( $ b < max ( $ a ) ) {"}
{"text":"search for the element b present or not in array","code":"if ( binary_search ( $ a , $ b , 0 , $ n ) != -1 ) $ b *= 2 ; else return $ b ; } return $ b ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 3 ) ; $ n = count ( $ a ) ; $ b = 1 ; echo findElement ( $ a , $ n , $ b ) ; ? >"}
{"text":"PHP program for above implementation","code":"< ? php $ Mod = 1000000007 ;"}
{"text":"Function to find the maximum sum","code":"function findSum ( & $ arr , $ n ) { global $ Mod ; $ sum = 0 ;"}
{"text":"Sort the array first","code":"sort ( $ arr ) ;"}
{"text":"First multiply negative numbers pairwise and sum up from starting as to get maximum sum .","code":"$ i = 0 ; while ( $ i < $ n && $ arr [ $ i ] < 0 ) { if ( $ i != $ n - 1 && $ arr [ $ i + 1 ] <= 0 ) { $ sum = ( $ sum + ( $ arr [ $ i ] * $ arr [ $ i + 1 ] ) % $ Mod ) % $ Mod ; $ i += 2 ; } else break ; }"}
{"text":"Second multiply positive numbers pairwise and summed up from the last as to get maximum sum .","code":"$ j = $ n - 1 ; while ( $ j >= 0 && $ arr [ $ j ] > 0 ) { if ( $ j != 0 && $ arr [ $ j - 1 ] > 0 ) { $ sum = ( $ sum + ( $ arr [ $ j ] * $ arr [ $ j - 1 ] ) % $ Mod ) % $ Mod ; $ j -= 2 ; } else break ; }"}
{"text":"To handle case if positive and negative numbers both are odd in counts .","code":"if ( $ j > $ i ) $ sum = ( $ sum + ( $ arr [ $ i ] * $ arr [ $ j ] ) % $ Mod ) % $ Mod ;"}
{"text":"If one of them occurs odd times","code":"else if ( $ i == $ j ) $ sum = ( $ sum + $ arr [ $ i ] ) % Mod ; return $ sum ; }"}
{"text":"Driver code","code":"$ arr = array ( -1 , 9 , 4 , 5 , -4 , 7 ) ; $ n = sizeof ( $ arr ) ; echo findSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to count of all rotations which are odd and even","code":"< ? php function countOddRotations ( $ n ) { $ odd_count = 0 ; $ even_count = 0 ; do { $ digit = $ n % 10 ; if ( $ digit % 2 == 1 ) $ odd_count ++ ; else $ even_count ++ ; $ n = ( int ) ( $ n \/ 10 ) ; } while ( $ n != 0 ) ; echo \" Odd = \" , \u2581 $ odd _ count , \u2581 \" \" ; STRNEWLINE echo \u2581 \" Even = \" , \u2581 $ even _ count , \u2581 \" \" }"}
{"text":"Driver Code","code":"$ n = 1234 ; countOddRotations ( $ n ) ; ? >"}
{"text":"Function to return the count of digits of n","code":"< ? php function numberOfDigits ( $ n ) { $ cnt = 0 ; while ( $ n > 0 ) { $ cnt ++ ; $ n = floor ( $ n \/ 10 ) ; } return $ cnt ; }"}
{"text":"Function to print the left shift numbers","code":"function cal ( $ num ) { $ digits = numberOfDigits ( $ num ) ; $ powTen = pow ( 10 , $ digits - 1 ) ; for ( $ i = 0 ; $ i < $ digits - 1 ; $ i ++ ) { $ firstDigit = floor ( $ num \/ $ powTen ) ;"}
{"text":"Formula to calculate left shift from previous number","code":"$ left = ( ( $ num * 10 ) + $ firstDigit ) - ( $ firstDigit * $ powTen * 10 ) ; echo $ left , \" \" ;"}
{"text":"Update the original number","code":"$ num = $ left ; } }"}
{"text":"Driver Code","code":"$ num = 1445 ; cal ( $ num ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function CheckKCycles ( $ n , $ s ) { $ ff = true ; $ x = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Splitting the number at index i and adding to the front","code":"$ x = strlen ( substr ( $ s , $ i ) . substr ( $ s , 0 , $ i ) ) ;"}
{"text":"Checking if the value is greater than or equal to the given value","code":"if ( $ x >= strlen ( $ s ) ) { continue ; } $ ff = false ; break ; } if ( $ ff ) { print ( \" Yes \" ) ; } else { print ( \" No \" ) ; } }"}
{"text":"Driver code","code":"$ n = 3 ; $ s = \"123\" ; CheckKCycles ( $ n , $ s ) ; ? >"}
{"text":"Function to check if N is a divisor of its right - rotation","code":"< ? php function rightRotationDivisor ( $ N ) { $ lastDigit = $ N % 10 ; $ rightRotation = ( $ lastDigit * pow ( 10 , ( int ) ( log10 ( $ N ) ) ) ) + floor ( $ N \/ 10 ) ; return ( $ rightRotation % $ N == 0 ) ; }"}
{"text":"Function to generate m - digit numbers which are divisor of their right - rotation","code":"function generateNumbers ( $ m ) { for ( $ i = pow ( 10 , ( $ m - 1 ) ) ; $ i < pow ( 10 , $ m ) ; $ i ++ ) if ( rightRotationDivisor ( $ i ) ) echo $ i . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ m = 3 ; generateNumbers ( $ m ) ; ? >"}
{"text":"Function to check if an array is sorted and rotated clockwise","code":"< ? php function checkIfSortRotated ( $ arr , $ n ) { $ minEle = PHP_INT_MAX ; $ maxEle = PHP_INT_MIN ; $ minIndex = -1 ;"}
{"text":"Find the minimum element and it 's index","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] < $ minEle ) { $ minEle = $ arr [ $ i ] ; $ minIndex = $ i ; } } $ flag1 = 1 ;"}
{"text":"Check if all elements before minIndex are in increasing order","code":"for ( $ i = 1 ; $ i < $ minIndex ; $ i ++ ) { if ( $ arr [ $ i ] < $ arr [ $ i - 1 ] ) { $ flag1 = 0 ; break ; } } $ flag2 = 1 ;"}
{"text":"Check if all elements after minIndex are in increasing order","code":"for ( $ i = $ minIndex + 1 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] < $ arr [ $ i - 1 ] ) { $ flag2 = 0 ; break ; } }"}
{"text":"Check if last element of the array is smaller than the element just starting element of the array for arrays like [ 3 , 4 , 6 , 1 , 2 , 5 ] - not sorted circular array","code":"if ( $ flag1 && $ flag2 && ( $ arr [ $ n - 1 ] < $ arr [ $ 0 ] ) ) echo ( \" YES \" ) ; else echo ( \" NO \" ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 4 , 5 , 1 , 2 ) ;"}
{"text":"Function Call","code":"$ n = count ( $ arr ) ; checkIfSortRotated ( $ arr , $ n ) ; ? >"}
{"text":"Function to find the elements that appeared only once in the array","code":"< ? php function occurredOnce ( & $ arr , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ;"}
{"text":"Check for first element","code":"if ( $ arr [ 0 ] != $ arr [ 1 ] ) echo $ arr [ 0 ] . \" \u2581 \" ;"}
{"text":"Check for all the elements if it is different its adjacent elements","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) if ( $ arr [ $ i ] != $ arr [ $ i + 1 ] && $ arr [ $ i ] != $ arr [ $ i - 1 ] ) echo $ arr [ $ i ] . \" \u2581 \" ;"}
{"text":"Check for the last element","code":"if ( $ arr [ $ n - 2 ] != $ arr [ $ n - 1 ] ) echo $ arr [ $ n - 1 ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 7 , 7 , 8 , 8 , 9 , 1 , 1 , 4 , 2 , 2 ) ; $ n = sizeof ( $ arr ) ; occurredOnce ( $ arr , $ n ) ; ? >"}
{"text":"Function to find the elements that appeared only once in the array","code":"< ? php function occurredOnce ( & $ arr , $ n ) { $ i = 1 ; $ len = $ n ;"}
{"text":"Check if the first and last element is equal . If yes , remove those elements","code":"if ( $ arr [ 0 ] == $ arr [ $ len - 1 ] ) { $ i = 2 ; $ len -- ; }"}
{"text":"Start traversing the remaining elements","code":"for ( ; $ i < $ n ; $ i ++ )"}
{"text":"Check if current element is equal to the element at immediate previous index If yes , check the same for next element","code":"if ( $ arr [ $ i ] == $ arr [ $ i - 1 ] ) $ i ++ ;"}
{"text":"Else print the current element","code":"else echo $ arr [ $ i - 1 ] . \" \" ;"}
{"text":"Check for the last element","code":"if ( $ arr [ $ n - 1 ] != $ arr [ 0 ] && $ arr [ $ n - 1 ] != $ arr [ $ n - 2 ] ) echo $ arr [ $ n - 1 ] ; }"}
{"text":"Driver code","code":"$ arr = array ( 7 , 7 , 8 , 8 , 9 , 1 , 1 , 4 , 2 , 2 ) ; $ n = sizeof ( $ arr ) ; occurredOnce ( $ arr , $ n ) ; ? >"}
{"text":"Function to reverse arr [ ] from index start to end","code":"< ? php function rvereseArray ( & $ arr , $ start , $ end ) { while ( $ start < $ end ) { $ temp = $ arr [ $ start ] ; $ arr [ $ start ] = $ arr [ $ end ] ; $ arr [ $ end ] = $ temp ; $ start ++ ; $ end -- ; } }"}
{"text":"Function to print an array","code":"function printArray ( & $ arr , $ size ) { for ( $ i = 0 ; $ i < $ size ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Function to left rotate arr [ ] of size n by k","code":"function splitArr ( & $ arr , $ k , $ n ) { rvereseArray ( $ arr , 0 , $ n - 1 ) ; rvereseArray ( $ arr , 0 , $ n - $ k - 1 ) ; rvereseArray ( $ arr , $ n - $ k , $ n - 1 ) ; }"}
{"text":"Driver program to test above functions","code":"$ arr = array ( 12 , 10 , 5 , 6 , 52 , 36 ) ; $ n = sizeof ( $ arr ) ; $ k = 2 ;"}
{"text":"Function calling","code":"splitArr ( $ arr , $ k , $ n ) ; printArray ( $ arr , $ n ) ; ? >"}
{"text":"function to count of all rotations divisible by 8","code":"< ? php function countRotationsDivBy8 ( $ n ) { $ len = strlen ( $ n ) ; $ count = 0 ;"}
{"text":"For single digit number","code":"if ( $ len == 1 ) { $ oneDigit = $ n [ 0 ] - '0' ; if ( $ oneDigit % 8 == 0 ) return 1 ; return 0 ; }"}
{"text":"For two - digit numbers ( considering all pairs )","code":"if ( $ len == 2 ) {"}
{"text":"first pair","code":"$ first = ( $ n [ 0 ] - '0' ) * 10 + ( $ n [ 1 ] - '0' ) ;"}
{"text":"second pair","code":"$ second = ( $ n [ 1 ] - '0' ) * 10 + ( $ n [ 0 ] - '0' ) ; if ( $ first % 8 == 0 ) $ count ++ ; if ( $ second % 8 == 0 ) $ count ++ ; return $ count ; }"}
{"text":"considering all three - digit sequences","code":"$ threeDigit ; for ( $ i = 0 ; $ i < ( $ len - 2 ) ; $ i ++ ) { $ threeDigit = ( $ n [ $ i ] - '0' ) * 100 + ( $ n [ $ i + 1 ] - '0' ) * 10 + ( $ n [ $ i + 2 ] - '0' ) ; if ( $ threeDigit % 8 == 0 ) $ count ++ ; }"}
{"text":"Considering the number formed by the last digit and the first two digits","code":"$ threeDigit = ( $ n [ $ len - 1 ] - '0' ) * 100 + ( $ n [ 0 ] - '0' ) * 10 + ( $ n [ 1 ] - '0' ) ; if ( $ threeDigit % 8 == 0 ) $ count ++ ;"}
{"text":"Considering the number formed by the last two digits and the first digit","code":"$ threeDigit = ( $ n [ $ len - 2 ] - '0' ) * 100 + ( $ n [ $ len - 1 ] - '0' ) * 10 + ( $ n [ 0 ] - '0' ) ; if ( $ threeDigit % 8 == 0 ) $ count ++ ;"}
{"text":"required count of rotations","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ n = \"43262488612\" ; echo \" Rotations : \u2581 \" . countRotationsDivBy8 ( $ n ) ; ? >"}
{"text":"function to check if two numbers are equal after bit rotation","code":"< ? php function isRotation ( $ x , $ y ) {"}
{"text":"x64 has concatenation of x with itself .","code":"$ x64 = $ x | ( $ x << 32 ) ; while ( $ x64 >= $ y ) {"}
{"text":"comapring only last 32 bits","code":"if ( ( $ x64 ) == $ y ) return 1 ;"}
{"text":"right shift by 1 unit","code":"$ x64 >>= 1 ; } return -1 ; }"}
{"text":"Driver Code","code":"$ x = 122 ; $ y = 2147483678 ; if ( isRotation ( $ x , $ y ) ) echo \" yes \" , \" STRNEWLINE \" ; else echo \" no \" , \" STRNEWLINE \" ; ? >"}
{"text":"Returns count of all rotations divisible by 4","code":"< ? php function countRotations ( $ n ) { $ len = strlen ( $ n ) ;"}
{"text":"For single digit number","code":"if ( $ len == 1 ) { $ oneDigit = $ n [ 0 ] - '0' ; if ( $ oneDigit % 4 == 0 ) return 1 ; return 0 ; }"}
{"text":"At - least 2 digit number ( considering all pairs )","code":"$ twoDigit ; $ count = 0 ; for ( $ i = 0 ; $ i < ( $ len - 1 ) ; $ i ++ ) { $ twoDigit = ( $ n [ $ i ] - '0' ) * 10 + ( $ n [ $ i + 1 ] - '0' ) ; if ( $ twoDigit % 4 == 0 ) $ count ++ ; }"}
{"text":"Considering the number formed by the pair of last digit and 1 st digit","code":"$ twoDigit = ( $ n [ $ len - 1 ] - '0' ) * 10 + ( $ n [ 0 ] - '0' ) ; if ( $ twoDigit % 4 == 0 ) $ count ++ ; return $ count ; }"}
{"text":"Driver Code","code":"$ n = \"4834\" ; echo \" Rotations : \u2581 \" , countRotations ( $ n ) ; ? >"}
{"text":"Function to find length of the longest subarray such that sum of the subarray is even","code":"< ? php function maxLength ( $ a , $ n ) { $ sum = 0 ; $ len = 0 ;"}
{"text":"Check if sum of complete array is even","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ a [ $ i ] ;"}
{"text":"if ( $sum % 2 == 0 ) total sum is already even","code":"return $ n ;"}
{"text":"Find an index i such the a [ i ] is odd and compare length of both halfs excluding a [ i ] to find max length subarray","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] % 2 == 1 ) $ len = max ( $ len , $ max ( $ n - $ i - 1 , $ i ) ) ; } return $ len ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 2 , 3 , 2 ) ; $ n = count ( $ a ) ; echo maxLength ( $ a , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to generate the required matrix","code":"< ? php function solve ( $ n ) { $ initial_array = array ( array ( ) ) ; $ final_array = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) $ initial_array [ 0 ] [ $ i ] = $ i + 1 ;"}
{"text":"Form cyclic array of elements 1 to n - 1","code":"for ( $ i = 1 ; $ i < $ n - 1 ; ++ $ i ) for ( $ j = 0 ; $ j < $ n - 1 ; ++ $ j ) $ initial_array [ $ i ] [ $ j ] = $ initial_array [ $ i - 1 ] [ ( $ j + 1 ) % ( $ n - 1 ) ] ;"}
{"text":"Store initial array into final array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) for ( $ j = 0 ; $ j < $ n - 1 ; ++ $ j ) $ final_array [ $ i ] [ $ j ] = $ initial_array [ $ i ] [ $ j ] ;"}
{"text":"Fill the last row and column with 0 's","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ final_array [ $ i ] [ $ n - 1 ] = $ final_array [ $ n - 1 ] [ $ i ] = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ t0 = $ final_array [ $ i ] [ $ i ] ; $ t1 = $ final_array [ $ i ] [ $ n - 1 ] ;"}
{"text":"Swap 0 and the number present at the current indexed row","code":"$ temp = $ final_array [ $ i ] [ $ i ] ; $ final_array [ $ i ] [ $ i ] = $ final_array [ $ i ] [ $ n - 1 ] ; $ final_array [ $ i ] [ $ n - 1 ] = $ temp ;"}
{"text":"Also make changes in the last row with the number we swapped","code":"$ final_array [ $ n - 1 ] [ $ i ] = $ t0 ; }"}
{"text":"Print the final array","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { for ( $ j = 0 ; $ j < $ n ; ++ $ j ) echo $ final_array [ $ i ] [ $ j ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ n = 5 ; solve ( $ n ) ; ? >"}
{"text":"Function to return the minimum value K such that K % p = 0 and q % k = 0","code":"< ? php function getMinVal ( $ p , $ q ) {"}
{"text":"If K is possible","code":"if ( $ q % $ p == 0 ) return $ p ;"}
{"text":"No such K is possible","code":"return -1 ; }"}
{"text":"Driver code","code":"$ p = 24 ; $ q = 48 ; echo getMinVal ( $ p , $ q ) ; ? >"}
{"text":"Function that returns true if sub - string starting at i and ending at j in str is a palindrome","code":"< ? php function isPalindrome ( $ str , $ i , $ j ) { while ( $ i < $ j ) { if ( $ str [ $ i ] != $ str [ $ j ] ) return false ; $ i ++ ; $ j -- ; } return true ; }"}
{"text":"Function to count all palindromic substring whose lwngth is a prime number","code":"function countPrimePalindrome ( $ str , $ len ) { $ prime = array_fill ( 0 , $ len + 1 , true ) ;"}
{"text":"0 and 1 are non - primes","code":"$ prime [ 0 ] = false ; $ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ len ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] ) {"}
{"text":"Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .","code":"for ( $ i = $ p * $ p ; $ i <= $ len ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"To store the required number of sub - strings","code":"$ count = 0 ;"}
{"text":"Starting from the smallest prime till the largest length of the sub - string possible","code":"for ( $ j = 2 ; $ j <= $ len ; $ j ++ ) {"}
{"text":"If j is prime","code":"if ( $ prime [ $ j ] ) {"}
{"text":"Check all the sub - strings of length j","code":"for ( $ i = 0 ; $ i + $ j - 1 < $ len ; $ i ++ ) {"}
{"text":"If current sub - string is a palindrome","code":"if ( isPalindrome ( $ str , $ i , $ i + $ j - 1 ) ) $ count ++ ; } } } return $ count ; }"}
{"text":"Driver Code","code":"$ s = \" geeksforgeeks \" ; $ len = strlen ( $ s ) ; echo countPrimePalindrome ( $ s , $ len ) ; ? >"}
{"text":"Function to return the minimum number of steps required","code":"< ? php function minOperations ( $ N ) { $ x = log ( $ N , 2 ) ; $ ans = ceil ( $ x ) ; return $ ans ; }"}
{"text":"Driver Code","code":"$ N = 10 ; echo minOperations ( $ N ) ; ? >"}
{"text":"Function to return the greatest divisor that divides all the natural numbers in the range [ l , r ]","code":"< ? php function find_greatest_divisor ( $ l , $ r ) { if ( $ l == $ r ) return $ l ; return 1 ; }"}
{"text":"Driver Code","code":"$ l = 2 ; $ r = 12 ; echo find_greatest_divisor ( $ l , $ r ) ; ? >"}
{"text":"Function to return the probability of getting two consecutive heads","code":"< ? php function getProbability ( $ p , $ q ) { $ p \/= 100 ; $ q \/= 100 ;"}
{"text":"Formula derived from Bayes 's theorem","code":"$ probability = ( $ p * $ p + $ q * $ q ) \/ ( $ p + $ q ) ; return $ probability ; }"}
{"text":"given the probability of getting a head for both the coins","code":"$ p = 80 ; $ q = 40 ; echo getProbability ( $ p , $ q ) ; ? >"}
{"text":"Function to check if bitwise OR of n numbers is even or odd","code":"< ? php function check ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if at least one odd number is found , then the bitwise OR of all numbers will be odd","code":"if ( $ arr [ $ i ] & 1 ) return true ; }"}
{"text":"Bitwise OR is an odd number","code":"return false ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 9 , 12 , 13 , 15 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; if ( check ( $ arr , $ n ) ) echo \" Odd \u2581 Bit - wise \u2581 OR \" ; else echo \" Even \u2581 Bit - wise \u2581 OR \" ; ? >"}
{"text":"Recursive PhP program to find value of Iterated Logarithm","code":"< ? php function _log ( $ x , $ base ) { return ( int ) ( log ( $ x ) \/ log ( $ base ) ) ; } function recursiveLogStar ( $ n , $ b ) { if ( $ n > 1.0 ) return 1.0 + recursiveLogStar ( _log ( $ n , $ b ) , $ b ) ; else return 0 ; }"}
{"text":"Driver code","code":"$ n = 100 ; $ base = 5 ; echo \" Log * ( \" , $ n , \" ) \" , \" \u2581 = \u2581 \" , recursiveLogStar ( $ n , $ base ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function that returns true if it is possible to transport all the boxes in the given amount of time","code":"< ? php function isPossible ( $ box , $ truck , $ n , $ m , $ min_time ) { $ temp = 0 ; $ count = 0 ; while ( $ count < $ m ) { for ( $ j = 0 ; $ j < $ min_time && $ temp < $ n && $ truck [ $ count ] >= $ box [ $ temp ] ; $ j += 2 ) $ temp ++ ; $ count ++ ; }"}
{"text":"If all the boxes can be transported in the given time","code":"if ( $ temp == $ n ) return true ;"}
{"text":"If all the boxes can 't be  transported in the given time","code":"return false ; }"}
{"text":"Function to return the minimum time required","code":"function minTime ( $ box , $ truck , $ n , $ m ) {"}
{"text":"Sort the two arrays","code":"sort ( $ box ) ; sort ( $ truck ) ; $ l = 0 ; $ h = 2 * $ n ;"}
{"text":"Stores minimum time in which all the boxes can be transported","code":"$ min_time = 0 ;"}
{"text":"Check for the minimum time in which all the boxes can be transported","code":"while ( $ l <= $ h ) { $ mid = intdiv ( ( $ l + $ h ) , 2 ) ;"}
{"text":"If it is possible to transport all the boxes in mid amount of time","code":"if ( isPossible ( $ box , $ truck , $ n , $ m , $ mid ) ) { $ min_time = $ mid ; $ h = $ mid - 1 ; } else $ l = $ mid + 1 ; } return $ min_time ; }"}
{"text":"Driver code","code":"$ box = array ( 10 , 2 , 16 , 19 ) ; $ truck = array ( 29 , 25 ) ; $ n = sizeof ( $ box ) ; $ m = sizeof ( $ truck ) ; echo minTime ( $ box , $ truck , $ n , $ m ) ; ? >"}
{"text":"Function that returns true if it is possible to reach end of the array in exactly k jumps","code":"< ? php function isPossible ( $ arr , $ n , $ dist , $ k ) {"}
{"text":"Variable to store the number of steps required to reach the end","code":"$ req = 0 ; $ curr = 0 ; $ prev = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { while ( $ curr != $ n && $ arr [ $ curr ] - $ arr [ $ prev ] <= $ dist ) $ curr ++ ; $ req ++ ; if ( $ curr == $ n ) break ; $ prev = $ curr - 1 ; } if ( $ curr != $ n ) return false ;"}
{"text":"If it is possible to reach the end in exactly k jumps","code":"if ( $ req <= $ k ) return true ; return false ; }"}
{"text":"Returns the minimum maximum distance required to reach the end of the array in exactly k jumps","code":"function minDistance ( $ arr , $ n , $ k ) { $ l = 0 ; $ h = $ arr [ $ n - 1 ] ;"}
{"text":"Stores the answer","code":"$ ans = 0 ;"}
{"text":"Binary search to calculate the result","code":"while ( $ l <= $ h ) { $ m = floor ( ( $ l + $ h ) \/ 2 ) ; if ( isPossible ( $ arr , $ n , $ m , $ k ) ) { $ ans = $ m ; $ h = $ m - 1 ; } else $ l = $ m + 1 ; } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 15 , 36 , 43 ) ; $ n = count ( $ arr ) ; $ k = 2 ; echo minDistance ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to return the kth element of the required series","code":"< ? php function getKthElement ( $ n , $ k , $ L , $ R ) { $ l = 1 ; $ h = $ n ;"}
{"text":"To store the number of integers that lie upto the ith index","code":"$ total = array ( ) ; $ total [ 0 ] = 0 ;"}
{"text":"Compute the number of integers","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ total [ $ i + 1 ] = $ total [ $ i ] + ( $ R [ $ i ] - $ L [ $ i ] ) + 1 ; }"}
{"text":"Stores the index , lying from 1 to n ,","code":"$ index = -1 ;"}
{"text":"Using binary search , find the index in which the kth element will lie","code":"while ( $ l <= $ h ) { $ m = floor ( ( $ l + $ h ) \/ 2 ) ; if ( $ total [ $ m ] > $ k ) { $ index = $ m ; $ h = $ m - 1 ; } else if ( $ total [ $ m ] < $ k ) $ l = $ m + 1 ; else { $ index = $ m ; break ; } } $ l = $ L [ $ index - 1 ] ; $ h = $ R [ $ index - 1 ] ;"}
{"text":"Find the position of the kth element in the interval in which it lies","code":"$ x = $ k - $ total [ $ index - 1 ] ; while ( $ l <= $ h ) { $ m = floor ( ( $ l + $ h ) \/ 2 ) ; if ( ( $ m - $ L [ $ index - 1 ] ) + 1 == $ x ) { return $ m ; } else if ( ( $ m - $ L [ $ index - 1 ] ) + 1 > $ x ) $ h = $ m - 1 ; else $ l = $ m + 1 ; } }"}
{"text":"Driver code","code":"$ L = array ( 1 , 8 , 21 ) ; $ R = array ( 4 , 10 , 23 ) ; $ n = count ( $ L ) ; $ k = 6 ; echo getKthElement ( $ n , $ k , $ L , $ R ) ; ? >"}
{"text":"Function to return the minimum positive integer satisfying the given equation","code":"< ? php function MinimumX ( $ a , $ b , $ c , $ k ) { $ x = PHP_INT_MAX ; if ( $ k <= $ c ) return 0 ; $ h = $ k - $ c ; $ l = 0 ;"}
{"text":"Binary search to find the value of x","code":"while ( $ l <= $ h ) { $ m = floor ( ( $ l + $ h ) \/ 2 ) ; if ( ( $ a * $ m * $ m ) + ( $ b * $ m ) > ( $ k - $ c ) ) { $ x = min ( $ x , $ m ) ; $ h = $ m - 1 ; } else if ( ( $ a * $ m * $ m ) + ( $ b * $ m ) < ( $ k - $ c ) ) $ l = $ m + 1 ; else return $ m ; }"}
{"text":"Return the answer","code":"return $ x ; }"}
{"text":"Driver code","code":"$ a = 3 ; $ b = 2 ; $ c = 4 ; $ k = 15 ; echo MinimumX ( $ a , $ b , $ c , $ k ) ; ? >"}
{"text":"Function that checks if the given conditions are satisfied","code":"< ? php function IfExists ( $ arr , $ n ) {"}
{"text":"To store the prefix $sum of the array elements","code":"$ sum = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"Sort the array","code":"sort ( $ arr ) ; $ sum [ 0 ] = $ arr [ 0 ] ;"}
{"text":"Compute the prefix sum array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ sum [ $ i ] = $ sum [ $ i - 1 ] + $ arr [ $ i ] ;"}
{"text":"Maximum element in the array","code":"$ max = $ arr [ $ n - 1 ] ;"}
{"text":"Variable to check if there exists any number","code":"$ flag = false ; for ( $ i = 1 ; $ i <= $ max ; $ i ++ ) {"}
{"text":"Stores the index of the largest number present in the array smaller than i","code":"$ findex = 0 ;"}
{"text":"Stores the index of the smallest number present in the array greater than i","code":"$ lindex = 0 ; $ l = 0 ; $ r = $ n - 1 ;"}
{"text":"Find index of smallest number greater than i","code":"while ( $ l <= $ r ) { $ m = ( $ l + $ r ) \/ 2 ; if ( $ arr [ $ m ] < $ i ) { $ findex = $ m ; $ l = $ m + 1 ; } else $ r = $ m - 1 ; } $ l = 1 ; $ r = $ n ; $ flag = false ;"}
{"text":"Find index of smallest number greater than i","code":"while ( $ l <= $ r ) { $ m = ( $ r + $ l ) \/ 2 ; if ( $ arr [ $ m ] > $ i ) { $ lindex = $ m ; $ r = $ m - 1 ; } else $ l = $ m + 1 ; }"}
{"text":"If there exists a number","code":"if ( $ sum [ $ findex ] == $ sum [ $ n - 1 ] - $ sum [ $ lindex - 1 ] ) { $ flag = true ; break ; } }"}
{"text":"If no such number exists print no","code":"if ( $ flag == true ) echo \" Yes \" ; else echo \" No \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 2 , 5 ) ; $ n = sizeof ( $ arr ) ; IfExists ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the missing element","code":"< ? php function findMissing ( $ arr , $ n ) { $ l = 0 ; $ h = $ n - 1 ; while ( $ h > $ l ) { $ mid = floor ( $ l + ( $ h - $ l ) \/ 2 ) ;"}
{"text":"Check if middle element is consistent","code":"if ( $ arr [ $ mid ] - $ mid == $ arr [ 0 ] ) {"}
{"text":"No inconsistency till middle elements When missing element is just after the middle element","code":"if ( $ arr [ $ mid + 1 ] - $ arr [ $ mid ] > 1 ) return $ arr [ $ mid ] + 1 ; else {"}
{"text":"Move right","code":"$ l = $ mid + 1 ; } } else {"}
{"text":"Inconsistency found When missing element is just before the middle element","code":"if ( $ arr [ $ mid ] - $ arr [ $ mid - 1 ] > 1 ) return $ arr [ $ mid ] - 1 ; else {"}
{"text":"Move left","code":"$ h = $ mid - 1 ; } } }"}
{"text":"No missing element found","code":"return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( -9 , -8 , -7 , -5 , - 4 , -3 , -2 , -1 , 0 ) ; $ n = count ( $ arr ) ; echo findMissing ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the maximum sum for every possible sequence such that a [ i ] + a [ i + k ] + a [ i + 2 k ] + ... + a [ i + qk ] is maximized","code":"< ? php function maxSum ( $ arr , $ n , $ K ) {"}
{"text":"Initialize the maximum with the smallest value","code":"$ maximum = PHP_INT_MIN ;"}
{"text":"Find maximum from all sequences","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sumk = 0 ;"}
{"text":"Sum of the sequence starting from index i","code":"for ( $ j = $ i ; $ j < $ n ; $ j += $ K ) $ sumk = $ sumk + $ arr [ $ j ] ;"}
{"text":"Update maximum","code":"$ maximum = max ( $ maximum , $ sumk ) ; } return $ maximum ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 6 , 4 , 7 , 2 ) ; $ n = sizeof ( $ arr ) ; $ K = 2 ; echo maxSum ( $ arr , $ n , $ K ) ; ? >"}
{"text":"Function to return the count of elements from the array which are greater than k","code":"< ? php function countGreater ( $ arr , $ n , $ k ) { $ l = 0 ; $ r = $ n - 1 ;"}
{"text":"Stores the index of the left most element from the array which is greater than k","code":"$ leftGreater = $ n ;"}
{"text":"Finds number of elements greater than k","code":"while ( $ l <= $ r ) { $ m = $ l + ( int ) ( ( $ r - $ l ) \/ 2 ) ;"}
{"text":"If mid element is greater than k update leftGreater and r","code":"if ( $ arr [ $ m ] > $ k ) { $ leftGreater = $ m ; $ r = $ m - 1 ; }"}
{"text":"If mid element is less than or equal to k update l","code":"else $ l = $ m + 1 ; }"}
{"text":"Return the count of elements greater than k","code":"return ( $ n - $ leftGreater ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 3 , 4 , 7 , 7 , 7 , 11 , 13 , 13 ) ; $ n = sizeof ( $ arr ) ; $ k = 7 ; echo countGreater ( $ arr , $ n , $ k ) ;"}
{"text":"PHP implementation of the approach","code":"< ? php function operations ( $ op , $ n , $ k ) { $ count = 0 ;"}
{"text":"To store the normalized value of all the operations","code":"$ nVal = 0 ;"}
{"text":"Minimum possible value for a series of operations","code":"$ minimum = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ nVal += $ op [ $ i ] ; $ minimum = min ( $ minimum , $ nVal ) ;"}
{"text":"If k can be reduced with first ( i + 1 ) operations","code":"if ( ( $ k + $ nVal ) <= 0 ) return ( $ i + 1 ) ; }"}
{"text":"Impossible to reduce k","code":"if ( $ nVal >= 0 ) return -1 ;"}
{"text":"Number of times all the operations can be performed on k without reducing it to <= 0","code":"$ times = round ( ( $ k - abs ( $ minimum ) ) \/ abs ( $ nVal ) ) ;"}
{"text":"Perform operations","code":"$ k = ( $ k - ( $ times * abs ( $ nVal ) ) ) ; $ count = ( $ times * $ n ) ;"}
{"text":"Final check","code":"while ( $ k > 0 ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ k = $ k + $ op [ $ i ] ; $ count ++ ; if ( $ k <= 0 ) break ; } } return $ count ; }"}
{"text":"Driver code","code":"$ op = array ( -60 , 65 , -1 , 14 , -25 ) ; $ n = sizeof ( $ op ) ; $ k = 100000 ; echo operations ( $ op , $ n , $ k ) ; ? >"}
{"text":"Function to count the number of factors P in X !","code":"< ? php function countFactor ( $ P , $ X ) { if ( $ X < $ P ) return 0 ; return ( ( int ) ( $ X \/ $ P ) + countFactor ( $ P , ( $ X \/ $ P ) ) ) ; }"}
{"text":"Function to find the smallest X such that X ! contains Y trailing zeros","code":"function findSmallestX ( $ Y ) { $ low = 0 ; $ high = 5 * $ Y ; $ N = 0 ; while ( $ low <= $ high ) { $ mid = ( int ) ( ( $ high + $ low ) \/ 2 ) ; if ( countFactor ( 5 , $ mid ) < $ Y ) { $ low = $ mid + 1 ; } else { $ N = $ mid ; $ high = $ mid - 1 ; } } return $ N ; }"}
{"text":"Driver code","code":"$ Y = 10 ; echo ( findSmallestX ( $ Y ) ) ; ? >"}
{"text":"Function to return the sum of the squares of first N natural numbers","code":"< ? php function squareSum ( $ N ) { $ sum = ( $ N * ( int ) ( $ N + 1 ) * ( 2 * $ N + 1 ) ) \/ 6 ; return $ sum ; }"}
{"text":"Function to return the maximum N such that the sum of the squares of first N natural numbers is not more than X","code":"function findMaxN ( $ X ) { $ low = 1 ; $ high = 100000 ; $ N = 0 ; while ( $ low <= $ high ) { $ mid = ( int ) ( $ high + $ low ) \/ 2 ; if ( squareSum ( $ mid ) <= $ X ) { $ N = $ mid ; $ low = $ mid + 1 ; } else $ high = $ mid - 1 ; } return $ N ; }"}
{"text":"Driver code","code":"$ X = 25 ; echo findMaxN ( $ X ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php $ n = 4 ;"}
{"text":"Function to return the ring , the number x belongs to .","code":"function findRing ( $ arr , $ x ) { global $ n ;"}
{"text":"Returns - 1 if number x is smaller than least element of arr","code":"if ( $ arr [ 0 ] [ 0 ] > $ x ) return -1 ;"}
{"text":"l and r represent the diagonal elements to search in","code":"$ l = 0 ; $ r = ( int ) ( ( $ n + 1 ) \/ 2 - 1 ) ;"}
{"text":"Returns - 1 if number x is greater than the largest element of arr","code":"if ( $ n % 2 == 1 && $ arr [ $ r ] [ $ r ] < $ x ) return -1 ; if ( $ n % 2 == 0 && $ arr [ $ r + 1 ] [ $ r ] < $ x ) return -1 ; while ( $ l < $ r ) { $ mid = ( int ) ( ( $ l + $ r ) \/ 2 ) ; if ( $ arr [ $ mid ] [ $ mid ] <= $ x ) if ( $ mid == ( int ) ( ( $ n + 1 ) \/ 2 - 1 ) $ arr [ $ mid + 1 ] [ $ mid + 1 ] > $ x ) return $ mid ; else $ l = $ mid + 1 ; else $ r = $ mid - 1 ; } return $ r ; }"}
{"text":"Function to perform binary search on an array sorted in increasing order l and r represent the left and right index of the row to be searched","code":"function binarySearchRowInc ( $ arr , $ row , $ l , $ r , $ x ) { while ( $ l <= $ r ) { $ mid = ( int ) ( ( $ l + $ r ) \/ 2 ) ; if ( $ arr [ $ row ] [ $ mid ] == $ x ) return $ mid ; if ( $ arr [ $ row ] [ $ mid ] < $ x ) $ l = $ mid + 1 ; else $ r = $ mid - 1 ; } return -1 ; }"}
{"text":"Function to perform binary search on a particular column of the 2D array t and b represent top and bottom rows","code":"function binarySearchColumnInc ( $ arr , $ col , $ t , $ b , $ x ) { while ( $ t <= $ b ) { $ mid = ( int ) ( ( $ t + b ) \/ 2 ) ; if ( $ arr [ $ mid ] [ $ col ] == $ x ) return $ mid ; if ( $ arr [ $ mid ] [ $ col ] < $ x ) $ t = $ mid + 1 ; else $ b = $ mid - 1 ; } return -1 ; }"}
{"text":"Function to perform binary search on an array sorted in decreasing order","code":"function binarySearchRowDec ( $ arr , $ row , $ l , $ r , $ x ) { while ( $ l <= $ r ) { $ mid = ( int ) ( ( $ l + $ r ) \/ 2 ) ; if ( $ arr [ $ row ] [ $ mid ] == $ x ) return $ mid ; if ( $ arr [ $ row ] [ $ mid ] < $ x ) $ r = $ mid - 1 ; else $ l = $ mid + 1 ; } return -1 ; }"}
{"text":"Function to perform binary search on a particular column of the 2D array","code":"function binarySearchColumnDec ( $ arr , $ col , $ t , $ b , $ x ) { while ( $ t <= $ b ) { $ mid = ( int ) ( ( $ t + $ b ) \/ 2 ) ; if ( $ arr [ $ mid ] [ $ col ] == $ x ) return $ mid ; if ( $ arr [ $ mid ] [ $ col ] < $ x ) $ b = $ mid - 1 ; else $ t = $ mid + 1 ; } return -1 ; }"}
{"text":"Function to find the position of the number x","code":"function spiralBinary ( $ arr , $ x ) { global $ n ;"}
{"text":"Finding the ring","code":"$ f1 = findRing ( $ arr , $ x ) ;"}
{"text":"To store row and column","code":"$ r = -1 ; $ c = -1 ; if ( $ f1 == -1 ) { echo \" - 1\" ; return ; }"}
{"text":"Edge case if n is odd","code":"if ( $ n % 2 == 1 && $ f1 == ( int ) ( ( $ n + 1 ) \/ 2 - 1 ) ) { echo $ f1 . \" \" \u2581 . \u2581 $ f1 \u2581 . \u2581 \" \" return ; }"}
{"text":"Check which of the 4 sides , the number x lies in","code":"if ( $ x < $ arr [ $ f1 ] [ $ n - $ f1 - 1 ] ) { $ c = binarySearchRowInc ( $ arr , $ f1 , $ f1 , $ n - $ f1 - 2 , $ x ) ; $ r = $ f1 ; } else if ( $ x < $ arr [ $ n - $ f1 - 1 ] [ $ n - $ f1 - 1 ] ) { $ c = $ n - $ f1 - 1 ; $ r = binarySearchColumnInc ( $ arr , $ n - $ f1 - 1 , $ f1 , $ n - $ f1 - 2 , $ x ) ; } else if ( $ x < $ arr [ $ n - $ f1 - 1 ] [ $ f1 ] ) { $ c = binarySearchRowDec ( $ arr , $ n - $ f1 - 1 , $ f1 + 1 , $ n - $ f1 - 1 , $ x ) ; $ r = $ n - $ f1 - 1 ; } else { $ r = binarySearchColumnDec ( $ arr , $ f1 , $ f1 + 1 , $ n - $ f1 - 1 , $ x ) ; $ c = $ f1 ; }"}
{"text":"Printing the position","code":"if ( $ c == -1 $ r == -1 ) echo \" - 1\" ; else echo $ r . \" \u2581 \" . $ c ; return ; }"}
{"text":"Driver code","code":"$ arr = array ( array ( 1 , 2 , 3 , 4 ) , array ( 12 , 13 , 14 , 5 ) , array ( 11 , 16 , 15 , 6 ) , array ( 10 , 9 , 8 , 7 ) ) ; spiralBinary ( $ arr , 7 ) ; ? >"}
{"text":"Function to return the count of required sub - arrays","code":"< ? php function countSubArrays ( $ arr , $ n , $ K ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ bitwise_or = 0 ;"}
{"text":"Traverse sub - array [ i . . j ]","code":"for ( $ k = $ i ; $ k < $ j + 1 ; $ k ++ ) $ bitwise_or = $ bitwise_or | $ arr [ $ k ] ; if ( $ bitwise_or >= $ K ) $ count += 1 ; } } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 4 , 5 ) ; $ n = count ( $ arr ) ; $ k = 6 ; print ( countSubArrays ( $ arr , $ n , $ k ) ) ; ? >"}
{"text":"Function to return the count of occurrence of pat in binary representation of n","code":"< ? php function countPattern ( $ n , $ pat ) {"}
{"text":"To store decimal value of the pattern","code":"$ pattern_int = 0 ; $ power_two = 1 ;"}
{"text":"To store a number that has all ones in its binary representation and length of ones equal to length of the pattern","code":"$ all_ones = 0 ;"}
{"text":"Find values of $pattern_int and $all_ones","code":"for ( $ i = strlen ( $ pat ) - 1 ; $ i >= 0 ; $ i -- ) { $ current_bit = $ pat [ $ i ] - '0' ; $ pattern_int += ( $ power_two * $ current_bit ) ; $ all_ones = $ all_ones + $ power_two ; $ power_two = $ power_two * 2 ; } $ count = 0 ; while ( $ n && $ n >= $ pattern_int ) {"}
{"text":"If the pattern occurs in the last digits of $n","code":"if ( ( $ n & $ all_ones ) == $ pattern_int ) { $ count ++ ; }"}
{"text":"Right shift $n by 1 bit","code":"$ n = $ n >> 1 ; } return $ count ; }"}
{"text":"Driver code","code":"$ n = 500 ; $ pat = \"10\" ; echo countPattern ( $ n , $ pat ) ; ? >"}
{"text":"function to calculate max - min","code":"< ? php function max_min ( & $ a , $ n ) { sort ( $ a ) ; return min ( $ a [ $ n - 2 ] - $ a [ 0 ] , $ a [ $ n - 1 ] - $ a [ 1 ] ) ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 3 , 3 , 7 ) ; $ n = sizeof ( $ a ) ; echo ( max_min ( $ a , $ n ) ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php $ MAX = 100001 ;"}
{"text":"primeUpto [ i ] denotes count of prime numbers upto i","code":"$ primeUpto = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Function to compute all prime numbers and update primeUpto array","code":"function SieveOfEratosthenes ( ) { global $ MAX , $ primeUpto ; $ isPrime = array_fill ( 0 , $ MAX , true ) ;"}
{"text":"0 and 1 are not primes","code":"$ isPrime [ 0 ] = $ isPrime [ 1 ] = false ; for ( $ i = 2 ; $ i * $ i < $ MAX ; $ i ++ ) {"}
{"text":"If i is prime","code":"if ( $ isPrime [ $ i ] ) {"}
{"text":"Set all multiples of i as non - prime","code":"for ( $ j = $ i * 2 ; $ j < $ MAX ; $ j += $ i ) $ isPrime [ $ j ] = false ; } }"}
{"text":"Compute primeUpto array","code":"for ( $ i = 1 ; $ i < $ MAX ; $ i ++ ) { $ primeUpto [ $ i ] = $ primeUpto [ $ i - 1 ] ; if ( $ isPrime [ $ i ] ) $ primeUpto [ $ i ] ++ ; } }"}
{"text":"Function to return the count of valid numbers","code":"function countOfNumbers ( $ N , $ K ) {"}
{"text":"Compute primeUpto array","code":"SieveOfEratosthenes ( ) ; global $ primeUpto ; $ low = 1 ; $ high = $ N ; $ ans = 0 ; while ( $ low <= $ high ) { $ mid = ( $ low + $ high ) >> 1 ;"}
{"text":"Check if the number is valid , try to reduce it","code":"if ( $ mid - $ primeUpto [ $ mid ] >= $ K ) { $ ans = $ mid ; $ high = $ mid - 1 ; } else $ low = $ mid + 1 ; }"}
{"text":"ans is the minimum valid number","code":"return ( $ ans ? $ N - $ ans + 1 : 0 ) ; }"}
{"text":"Driver Code","code":"$ N = 10 ; $ K = 3 ; echo countOfNumbers ( $ N , $ K ) ; ? >"}
{"text":"Function to find minimum index such that sum becomes 0 when the element is multiplied by - 1","code":"< ? php function minIndex ( & $ arr , $ n ) {"}
{"text":"Find array sum","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] ;"}
{"text":"Find element with value equal to sum \/ 2","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"when sum is equal to 2 * element then this is our required element","code":"if ( 2 * $ arr [ $ i ] == $ sum ) return ( $ i + 1 ) ; } return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 3 , -5 , 3 , 4 ) ; $ n = sizeof ( $ arr ) ; echo ( minIndex ( $ arr , $ n ) ) ; ? >"}
{"text":"Function to print the resultant matrix","code":"< ? php function printIntersection ( $ A , $ B ) { $ N = 4 ; $ M = 4 ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) {"}
{"text":"print element value for equal elements else *","code":"if ( $ A [ $ i ] [ $ j ] == $ B [ $ i ] [ $ j ] ) echo $ A [ $ i ] [ $ j ] . \" \u2581 \" ; else echo \" * \" } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ A = array ( array ( 2 , 4 , 6 , 8 ) , array ( 1 , 3 , 5 , 7 ) , array ( 8 , 6 , 4 , 2 ) , array ( 7 , 5 , 3 , 1 ) ) ; $ B = array ( array ( 2 , 3 , 6 , 8 ) , array ( 1 , 3 , 5 , 2 ) , array ( 8 , 1 , 4 , 2 ) , array ( 3 , 5 , 4 , 1 ) ) ; printIntersection ( $ A , $ B ) ; ? >"}
{"text":"Function to count the number of ways to choose the triples","code":"< ? php function countWays ( $ arr , $ n ) {"}
{"text":"compute the max value in the array and create frequency array of size max_val + 1. We can also use HashMap to store frequencies . We have used an array to keep remaining code simple .","code":"$ max_val = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ max_val = max ( $ max_val , $ arr [ $ i ] ) ; $ freq = array_fill ( 0 , $ max_val + 1 , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ freq [ $ arr [ $ i ] ] ++ ;"}
{"text":"Case 1 : 0 , 0 , 0","code":"$ ans += ( int ) ( $ freq [ 0 ] * ( $ freq [ 0 ] - 1 ) * ( $ freq [ 0 ] - 2 ) \/ 6 ) ;"}
{"text":"Case 2 : 0 , x , x","code":"for ( $ i = 1 ; $ i <= $ max_val ; $ i ++ ) $ ans += ( int ) ( $ freq [ 0 ] * $ freq [ $ i ] * ( $ freq [ $ i ] - 1 ) \/ 2 ) ;"}
{"text":"Case 3 : x , x , 2 * x","code":"for ( $ i = 1 ; 2 * $ i <= $ max_val ; $ i ++ ) $ ans += ( int ) ( $ freq [ $ i ] * ( $ freq [ $ i ] - 1 ) \/ 2 * $ freq [ 2 * $ i ] ) ;"}
{"text":"Case 4 : x , y , x + y iterate through all pairs ( x , y )","code":"for ( $ i = 1 ; $ i <= $ max_val ; $ i ++ ) { for ( $ j = $ i + 1 ; $ i + $ j <= $ max_val ; $ j ++ ) $ ans += $ freq [ $ i ] * $ freq [ $ j ] * $ freq [ $ i + $ j ] ; } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 ) ; $ n = count ( $ arr ) ; echo countWays ( $ arr , $ n ) ; ? >"}
{"text":"function to find longest sub - array whose elements gives same remainder when divided with K","code":"< ? php function LongestSubarray ( $ arr , $ n , $ k ) { $ cnt = 1 ; $ max_length = 1 ; $ prev_mod = $ arr [ 0 ] % $ k ;"}
{"text":"Iterate in the array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ curr_mod = $ arr [ $ i ] % $ k ;"}
{"text":"check if array element greater then X or not","code":"if ( $ curr_mod == $ prev_mod ) { $ cnt ++ ; } else { $ max_length = max ( $ max_length , $ cnt ) ; $ cnt = 1 ; $ prev_mod = $ curr_mod ; } } return max ( $ max_length , $ cnt ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 9 , 7 , 18 , 29 , 11 ) ; $ n = count ( $ arr ) ; $ k = 11 ; echo LongestSubarray ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Php program to find whether a given element is present in the given 2 - D matrix","code":"< ? php $ M = 3 ; $ N = 4 ;"}
{"text":"Basic binary search to find an element in a 1 - D array","code":"function binarySearch1D ( $ arr , $ K ) { $ low = 0 ; $ high = $ GLOBALS [ ' N ' ] - 1 ; while ( $ low <= $ high ) { $ mid = $ low + ( int ) ( $ high - $ low ) \/ 2 ;"}
{"text":"if element found return true","code":"if ( $ arr [ $ mid ] == $ K ) return True ;"}
{"text":"if middle less than K then skip the left part of the array else skip the right part","code":"if ( $ arr [ $ mid ] < $ K ) $ low = $ mid + 1 ; else $ high = $ mid - 1 ; }"}
{"text":"if not found return false","code":"return False ; }"}
{"text":"Function to search an element in a matrix based on Divide and conquer approach","code":"function searchMatrix ( $ matrix , $ K ) { $ low = 0 ; $ high = $ GLOBALS [ ' M ' ] - 1 ; while ( $ low <= $ high ) { $ mid = $ low + ( int ) ( $ high - $ low ) \/ 2 ;"}
{"text":"if the element lies in the range of this row then call 1 - D binary search on this row","code":"if ( $ K >= $ matrix [ $ mid ] [ 0 ] && $ K <= $ matrix [ $ mid ] [ $ GLOBALS [ ' N ' ] - 1 ] ) return binarySearch1D ( $ matrix [ $ mid ] , $ K ) ;"}
{"text":"if the element is less then the starting element of that row then search in upper rows else search in the lower rows","code":"if ( $ K < $ matrix [ $ mid ] [ 0 ] ) $ high = $ mid - 1 ; else $ low = $ mid + 1 ; }"}
{"text":"if not found","code":"return False ; }"}
{"text":"Driver code","code":"$ matrix = array ( [ 1 , 3 , 5 , 7 ] , [ 10 , 11 , 16 , 20 ] , [ 23 , 30 , 34 , 50 ] ) ; $ K = 3 ; $ M = 3 ; $ N = 4 ; if ( searchMatrix ( $ matrix , $ K ) ) echo \" Found \" ; else echo \" Not \u2581 found \" ; ? >"}
{"text":"PHP program to find number of elements that can be seen from right side .","code":"< ? php function numberOfElements ( $ height , $ n ) { $ max_so_far = 0 ; $ coun = 0 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { if ( $ height [ $ i ] > $ max_so_far ) { $ max_so_far = $ height [ $ i ] ; $ coun ++ ; } } return $ coun ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ height = array ( 4 , 8 , 2 , 0 , 0 , 5 ) ; echo numberOfElements ( $ height , $ n ) ;"}
{"text":"Function that finds the largest element which is repeated ' k ' times","code":"< ? php function solve ( & $ arr , $ n , $ k ) {"}
{"text":"sort the array","code":"sort ( $ arr ) ;"}
{"text":"if the value of ' k ' is 1 and the largest appears only once in the array","code":"if ( $ k == 1 && $ arr [ $ n - 2 ] != $ arr [ $ n - 1 ] ) { echo $ arr [ $ n - 1 ] ; echo ( \" STRNEWLINE \" ) ; return ; }"}
{"text":"counter to count the repeated elements","code":"$ count = 1 ; for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"check if the element at index ' i ' is equal to the element at index ' i + 1' then increase the count","code":"if ( $ arr [ $ i ] == $ arr [ $ i + 1 ] ) $ count ++ ;"}
{"text":"else set the count to 1 to start counting the frequency of the new number","code":"else $ count = 1 ;"}
{"text":"if the count is equal to k and the previous element is not equal to this element","code":"if ( $ count == $ k && ( $ i == 0 || ( $ arr [ $ i - 1 ] != $ arr [ $ i ] ) ) ) { echo ( $ arr [ $ i ] ) ; echo ( \" STRNEWLINE \" ) ; return ; } }"}
{"text":"if there is no such element","code":"echo ( \" No \u2581 such \u2581 element \" ) ; echo ( \" STRNEWLINE \" ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 1 , 2 , 3 , 3 , 4 , 5 , 5 , 6 , 6 , 6 ) ; $ k = 2 ; $ n = sizeof ( $ arr ) ;"}
{"text":"find the largest element that is repeated K times","code":"solve ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to find minimum element","code":"< ? php function getMin ( $ arr , $ n ) { $ res = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ res = min ( $ res , $ arr [ $ i ] ) ; return $ res ; }"}
{"text":"Function to find maximum element","code":"function getMax ( $ arr , $ n ) { $ res = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ res = max ( $ res , $ arr [ $ i ] ) ; return $ res ; }"}
{"text":"Function to get Sum","code":"function findSum ( $ arr , $ n ) { $ min = getMin ( $ arr , $ n ) ; $ max = getMax ( $ arr , $ n ) ; return $ min + $ max ; }"}
{"text":"Function to get product","code":"function findProduct ( $ arr , $ n ) { $ min = getMin ( $ arr , $ n ) ; $ max = getMax ( $ arr , $ n ) ; return $ min * $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 1234 , 45 , 67 , 1 ) ; $ n = sizeof ( $ arr ) ;"}
{"text":"Sum of min and max element","code":"echo \" Sum = \" \u2581 . \u2581 findSum ( $ arr , \u2581 $ n ) \u2581 . \u2581 \" \""}
{"text":"Product of min and max element","code":"echo \" Product = \""}
{"text":"Function to count the characters with same adjacent characters","code":"< ? php function countChar ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"if length is less than 3 then return length as there will be only two characters","code":"if ( $ n <= 2 ) return $ n ; $ count = 2 ;"}
{"text":"Traverse the string","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ )"}
{"text":"Increment the count if the previous and next character is same","code":"if ( $ str [ $ i - 1 ] == $ str [ $ i + 1 ] ) $ count ++ ;"}
{"text":"Return count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ str = \" egeeksk \" ; echo countChar ( $ str ) ; ? >"}
{"text":"PHP program to find first element that is strictly smaller than given target .","code":"< ? php function next0 ( $ arr , $ target ) { $ start = 0 ; $ end = sizeof ( $ arr ) - 1 ;"}
{"text":"Minimum size of the array should be 1","code":"if ( $ end == 0 ) return -1 ;"}
{"text":"If target lies beyond the max element , than the index of strictly smaller value than target should be ( end - 1 )","code":"if ( $ target > $ arr [ $ end ] ) return $ end ; $ ans = -1 ; while ( $ start <= $ end ) { $ mid = ( int ) ( ( $ start + $ end ) \/ 2 ) ;"}
{"text":"Move to the left side if the target is smaller","code":"if ( $ arr [ $ mid ] >= $ target ) { $ end = $ mid - 1 ; }"}
{"text":"Move right side","code":"else { $ ans = $ mid ; $ start = $ mid + 1 ; } } return $ ans ; }"}
{"text":"Driver code","code":"{ $ arr = array ( 1 , 2 , 3 , 5 , 8 , 12 ) ; echo ( next0 ( $ arr , 5 ) ) ; }"}
{"text":"PHP program to find first element that is strictly greater than given target .","code":"< ? php function next0 ( $ arr , $ target ) { $ start = 0 ; $ end = sizeof ( $ arr ) - 1 ; $ ans = -1 ; while ( $ start <= $ end ) { $ mid = ( int ) ( ( $ start + $ end ) \/ 2 ) ;"}
{"text":"Move to right side if target is greater .","code":"if ( $ arr [ $ mid ] <= $ target ) { $ start = $ mid + 1 ; }"}
{"text":"Move left side .","code":"else { $ ans = $ mid ; $ end = $ mid - 1 ; } } return $ ans ; }"}
{"text":"Driver code","code":"{ $ arr = array ( 1 , 2 , 3 , 5 , 8 , 12 ) ; echo ( next0 ( $ arr , 8 ) ) ; } ? >"}
{"text":"A function to perform sequential search .","code":"< ? php function search ( $ arr , $ n , $ x ) {"}
{"text":"Linearly search the element","code":"$ res = -1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ x == $ arr [ $ i ] ) $ res = $ i ;"}
{"text":"If not found","code":"if ( $ res == -1 ) return false ;"}
{"text":"Shift elements before one position","code":"$ temp = $ arr [ $ res ] ; for ( $ i = $ res ; $ i > 0 ; $ i -- ) $ arr [ $ i ] = $ arr [ $ i - 1 ] ; $ arr [ 0 ] = $ temp ; return true ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 25 , 36 , 85 , 98 , 75 , 89 , 15 , 63 , 66 , 64 , 74 , 27 , 83 , 97 ) ; $ q = array ( 63 , 63 , 86 , 63 , 78 ) ; $ n = sizeof ( $ arr ) ; $ m = sizeof ( $ q ) ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) if ( search ( $ arr , $ n , $ q [ $ i ] ) ) echo \" Yes \u2581 \" ; else echo \" No \u2581 \" ;"}
{"text":"Function to find the probability","code":"< ? php function kPresentProbability ( & $ a , $ n , $ k ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ a [ $ i ] == $ k ) $ count ++ ;"}
{"text":"find probability","code":"return $ count \/ $ n ; }"}
{"text":"Driver Code","code":"$ A = array ( 4 , 7 , 2 , 0 , 8 , 7 , 5 ) ; $ K = 2 ; $ N = sizeof ( $ A ) ; echo round ( kPresentProbability ( $ A , $ N , $ K ) , 2 ) ; ? >"}
{"text":"function to find slope of a number","code":"< ? php function slopeOfNum ( $ num , $ n ) {"}
{"text":"to store slope of the given number ' num '","code":"$ slope = 0 ;"}
{"text":"loop from the 2 nd digit up to the 2 nd last digit of the given number ' num '","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"if the digit is a maxima","code":"if ( $ num [ $ i ] > $ num [ $ i - 1 ] && $ num [ $ i ] > $ num [ $ i + 1 ] ) $ slope ++ ;"}
{"text":"if the digit is a minima","code":"else if ( $ num [ $ i ] < $ num [ $ i - 1 ] && $ num [ $ i ] < $ num [ $ i + 1 ] ) $ slope ++ ; }"}
{"text":"required slope","code":"return $ slope ; }"}
{"text":"Driver Code","code":"$ num = \"1213321\" ; $ n = strlen ( $ num ) ; echo \" Slope \u2581 = \u2581 \" . slopeOfNum ( $ num , $ n ) ; ? >"}
{"text":"php program previous greater element A naive solution to print previous greater element for every element in an array .","code":"< ? php function prevGreater ( & $ arr , $ n ) {"}
{"text":"Previous greater for first element never exists , so we print - 1.","code":"echo ( \" - 1 , \u2581 \" ) ;"}
{"text":"Let us process remaining elements .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Find first element on left side that is greater than arr [ i ] .","code":"for ( $ j = $ i - 1 ; $ j >= 0 ; $ j -- ) { if ( $ arr [ $ i ] < $ arr [ $ j ] ) { echo ( $ arr [ $ j ] ) ; echo ( \" , \u2581 \" ) ; break ; } }"}
{"text":"If all elements on left are smaller .","code":"if ( $ j == -1 ) echo ( \" - 1 , \u2581 \" ) ; } }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 4 , 2 , 20 , 40 , 12 , 30 ) ; $ n = sizeof ( $ arr ) ; prevGreater ( $ arr , $ n ) ; ? >"}
{"text":"Function to find repeating elements","code":"< ? php function printDuplicates ( $ arr , $ n ) { $ i ;"}
{"text":"Flag variable used to represent whether repeating element is found or not .","code":"$ fl = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Check if current element is repeating or not . If it is repeating then value will be greater than or equal to n .","code":"if ( $ arr [ $ arr [ $ i ] % $ n ] >= $ n ) {"}
{"text":"Check if it is first repetition or not . If it is first repetition then value at index arr [ i ] is less than 2 * n . Print arr [ i ] if it is first repetition .","code":"if ( $ arr [ $ arr [ $ i ] % $ n ] < 2 * $ n ) { echo $ arr [ $ i ] % $ n . \" \" ; $ fl = 1 ; } }"}
{"text":"Add n to index arr [ i ] to mark presence of arr [ i ] or to mark repetition of arr [ i ] .","code":"$ arr [ $ arr [ $ i ] % $ n ] += $ n ; }"}
{"text":"If flag variable is not set then no repeating element is found . So print - 1.","code":"if ( ! $ fl ) echo \" - 1\" ; }"}
{"text":"Driver Function","code":"$ arr = array ( 1 , 6 , 3 , 1 , 3 , 6 , 6 ) ; $ arr_size = sizeof ( $ arr ) ; printDuplicates ( $ arr , $ arr_size ) ;"}
{"text":"Function to find smallest positive missing number .","code":"< ? php function findMissingNo ( $ arr , $ n ) {"}
{"text":"to store current array element","code":"$ val ;"}
{"text":"to store next array element in current traversal","code":"$ nextval ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if value is negative or greater than array size , then it cannot be marked in array . So move to next element .","code":"if ( $ arr [ $ i ] <= 0 $ arr [ $ i ] > $ n ) continue ; $ val = $ arr [ $ i ] ;"}
{"text":"traverse the array until we reach at an element which is already marked or which could not be marked .","code":"while ( $ arr [ $ val - 1 ] != $ val ) { $ nextval = $ arr [ $ val - 1 ] ; $ arr [ $ val - 1 ] = $ val ; $ val = $ nextval ; if ( $ val <= 0 $ val > $ n ) break ; } }"}
{"text":"find first array index which is not marked which is also the smallest positive missing number .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] != $ i + 1 ) { return $ i + 1 ; } }"}
{"text":"if all indices are marked , then smallest missing positive number is array_size + 1.","code":"return $ n + 1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 7 , 6 , 8 , -1 , -10 , 15 ) ; $ arr_size = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; $ missing = findMissingNo ( $ arr , $ arr_size ) ; echo \" The \u2581 smallest \u2581 positive \u2581 \" . \" missing \u2581 number \u2581 is \u2581 \" , $ missing ; ? >"}
{"text":"Prints all triplets in arr [ ] with given sum","code":"< ? php function findTriplets ( $ arr , $ n , $ sum ) { for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n - 1 ; $ j ++ ) { for ( $ k = $ j + 1 ; $ k < $ n ; $ k ++ ) { if ( $ arr [ $ i ] + $ arr [ $ j ] + $ arr [ $ k ] == $ sum ) { echo $ arr [ $ i ] , \" \" , $ arr [ $ j ] , \" \" , $ arr [ $ k ] , \" \" ; } } } } }"}
{"text":"Driver code","code":"$ arr = array ( 0 , -1 , 2 , -3 , 1 ) ; $ n = sizeof ( $ arr ) ; findTriplets ( $ arr , $ n , -2 ) ; ? >"}
{"text":"Function to find a maximum product of a quadruple in array of integers of size n","code":"< ? php function maxProduct ( $ arr , $ n ) {"}
{"text":"if size is less than 4 , no quadruple exists","code":"if ( $ n < 4 ) return -1 ;"}
{"text":"will contain max product","code":"$ max_product = PHP_INT_MIN ; for ( $ i = 0 ; $ i < $ n - 3 ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n - 2 ; $ j ++ ) for ( $ k = $ j + 1 ; $ k < $ n - 1 ; $ k ++ ) for ( $ l = $ k + 1 ; $ l < $ n ; $ l ++ ) $ max_product = max ( $ max_product , $ arr [ $ i ] * $ arr [ $ j ] * $ arr [ $ k ] * $ arr [ $ l ] ) ; return $ max_product ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 3 , 5 , 6 , 20 ) ; $ n = count ( $ arr ) ; $ max = maxProduct ( $ arr , $ n ) ; if ( $ max == -1 ) echo \" No \u2581 Quadruple \u2581 Exists \" ; else echo \" Maximum \u2581 product \u2581 is \u2581 \" , $ max ; ? >"}
{"text":"Function to find a maximum product of a quadruple in array of integers of size n","code":"< ? php function maxProduct ( $ arr , $ n ) {"}
{"text":"if size is less than 4 , no quadruple exists","code":"if ( $ n < 4 ) return -1 ;"}
{"text":"Sort the array in ascending order","code":"sort ( $ arr ) ; $ x = $ arr [ $ n - 1 ] * $ arr [ $ n - 2 ] * $ arr [ $ n - 3 ] * $ arr [ $ n - 4 ] ; $ y = $ arr [ 0 ] * $ arr [ 1 ] * $ arr [ 2 ] * $ arr [ 3 ] ; $ z = $ arr [ 0 ] * $ arr [ 1 ] * $ arr [ $ n - 1 ] * $ arr [ $ n - 2 ] ;"}
{"text":"Return the maximum of x , y and z","code":"return max ( $ x , max ( $ y , $ z ) ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( -10 , -3 , 5 , 6 , -20 ) ; $ n = sizeof ( $ arr ) ; $ max = maxProduct ( $ arr , $ n ) ; if ( $ max == -1 ) echo \" No \u2581 Quadruple \u2581 Exists \" ; else echo \" Maximum \u2581 product \u2581 is \u2581 \" . $ max ;"}
{"text":"PHP program to find sum of maximum and minimum in any subarray of an array of positive numbers .","code":"< ? php function maxSum ( $ arr , $ n ) { if ( $ n < 2 ) return -1 ; $ ans = $ arr [ 0 ] + $ arr [ 1 ] ; for ( $ i = 1 ; $ i + 1 < $ n ; $ i ++ ) $ ans = min ( $ ans , ( $ arr [ $ i ] + $ arr [ $ i + 1 ] ) ) ; return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 12 , 2 , 2 ) ; $ n = count ( $ arr ) ; echo maxSum ( $ arr , $ n ) ; ? >"}
{"text":"PHP Program to find row - wise maximum element sum considering elements in increasing order .","code":"< ? php $ N = 3 ;"}
{"text":"Function to perform given task","code":"function getGreatestSum ( $ a ) { global $ N ;"}
{"text":"Getting the maximum element from last row","code":"$ prev_max = 0 ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) if ( $ prev_max < $ a [ $ N - 1 ] [ $ j ] ) $ prev_max = $ a [ $ N - 1 ] [ $ j ] ;"}
{"text":"Comparing it with the elements of above rows","code":"$ sum = $ prev_max ; for ( $ i = $ N - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Maximum of current row .","code":"$ curr_max = PHP_INT_MIN ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) if ( $ prev_max > $ a [ $ i ] [ $ j ] and $ a [ $ i ] [ $ j ] > $ curr_max ) $ curr_max = $ a [ $ i ] [ $ j ] ;"}
{"text":"If we could not an element smaller than prev_max .","code":"if ( $ curr_max == PHP_INT_MIN ) return -1 ; $ prev_max = $ curr_max ; $ sum += $ prev_max ; } return $ sum ; }"}
{"text":"Driver code","code":"$ a = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ; echo getGreatestSum ( $ a ) , \" STRNEWLINE \" ; $ b = array ( array ( 4 , 5 , 6 ) , array ( 4 , 5 , 6 ) , array ( 4 , 5 , 6 ) ) ; echo getGreatestSum ( $ b ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to fin k - th element after append and insert middle operations","code":"< ? php function findElement ( $ n , $ k ) {"}
{"text":"Middle element of the sequence","code":"$ ans = $ n ; $ left = 1 ;"}
{"text":"length of the resulting sequence .","code":"$ right = pow ( 2 , $ n ) - 1 ; while ( 1 ) { $ mid = ( $ left + $ right ) \/ 2 ; if ( $ k == $ mid ) { echo $ ans , \" STRNEWLINE \" ; break ; }"}
{"text":"Updating the middle element of next sequence","code":"$ ans -- ;"}
{"text":"Moving to the left side of the middle element .","code":"if ( $ k < $ id ) $ right = $ mid - 1 ;"}
{"text":"Moving to the right side of the middle element .","code":"else $ left = $ mid + 1 ; } }"}
{"text":"Driver code","code":"$ n = 4 ; $ k = 8 ; findElement ( $ n , $ k ) ; ? >"}
{"text":"Utility function to check number of elements having set msb as of pattern","code":"< ? php function checkBit ( $ pattern , $ arr , $ n ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( ( $ pattern & $ arr [ $ i ] ) == $ pattern ) $ count ++ ; return $ count ; }"}
{"text":"Function for finding maximum and value pair","code":"function maxAND ( $ arr , $ n ) { $ res = 0 ;"}
{"text":"iterate over total of 30 bits from msb to lsb","code":"for ( $ bit = 31 ; $ bit >= 0 ; $ bit -- ) {"}
{"text":"find the count of element having set msb","code":"$ count = checkBit ( $ res | ( 1 << $ bit ) , $ arr , $ n ) ;"}
{"text":"if count >= 2 set particular bit in result","code":"if ( $ count >= 2 ) $ res |= ( 1 << $ bit ) ; }"}
{"text":"Find the elements","code":"if ( $ res == 0 ) echo \" Not \u2581 Possible STRNEWLINE \" ; else {"}
{"text":"print the pair of elements","code":"echo \" Pair = \" $ count = 0 ; for ( $ i = 0 ; $ i < $ n && $ count < 2 ; $ i ++ ) {"}
{"text":"inc count value after printing element","code":"if ( ( $ arr [ $ i ] & $ res ) == $ res ) { $ count ++ ; echo $ arr [ $ i ] . \" \" ; } } }"}
{"text":"return the result value","code":"return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 8 , 6 , 2 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo \" Maximum AND Value = \" ? >"}
{"text":"Function to get max first and second","code":"< ? php function countMaxSumPairs ( $ a , $ n ) { $ first = PHP_INT_MIN ; $ second = PHP_INT_MIN ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current element is smaller than first , then update both first and second","code":"if ( $ a [ $ i ] > $ first ) { $ second = $ first ; $ first = $ a [ $ i ] ; }"}
{"text":"If arr [ i ] is in between first and second then update second","code":"else if ( $ a [ $ i ] > $ second && $ a [ $ i ] != $ first ) $ second = $ a [ $ i ] ; } $ cnt1 = 0 ; $ cnt2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] == $ first )"}
{"text":"frequency of first maximum","code":"$ cnt1 ++ ; if ( $ a [ $ i ] == $ second )"}
{"text":"frequency of second maximum","code":"$ cnt2 ++ ; } if ( $ cnt1 == 1 ) return $ cnt2 ; if ( $ cnt1 > 1 ) return $ cnt1 * ( $ cnt1 - 1 ) \/ 2 ; }"}
{"text":"Returns probability of choosing a pair with maximum sum .","code":"function findMaxSumProbability ( $ a , $ n ) { $ total = $ n * ( $ n - 1 ) \/ 2 ; $ max_sum_pairs = countMaxSumPairs ( $ a , $ n ) ; return ( float ) $ max_sum_pairs \/ ( float ) $ total ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 2 , 2 , 3 ) ; $ n = sizeof ( $ a ) ; echo findMaxSumProbability ( $ a , $ n ) ; ? >"}
{"text":"Function to find no . of elements to be added from 1 to get n","code":"< ? php function findS ( $ s ) { $ sum = 0 ;"}
{"text":"Start adding numbers from 1","code":"for ( $ n = 1 ; $ sum < $ s ; $ n ++ ) { $ sum += $ n ;"}
{"text":"If sum becomes equal to s return n","code":"if ( $ sum == $ s ) return $ n ; } return -1 ; }"}
{"text":"Drivers code","code":"$ s = 15 ; $ n = findS ( $ s ) ; if ( $ n == -1 ) echo \" - 1\" ; else echo $ n ; ? >"}
{"text":"function to calculate total safe position","code":"< ? php function calcSafe ( $ pos ) {"}
{"text":"i , j denotes row and column of position of bishop","code":"$ j = $ pos % 10 ; $ i = $ pos \/ 10 ;"}
{"text":"calc distance in four direction","code":"$ dis_11 = min ( abs ( 1 - $ i ) , abs ( 1 - $ j ) ) ; $ dis_18 = min ( abs ( 1 - $ i ) , abs ( 8 - $ j ) ) ; $ dis_81 = min ( abs ( 8 - $ i ) , abs ( 1 - $ j ) ) ; $ dis_88 = min ( abs ( 8 - $ i ) , abs ( 8 - $ j ) ) ;"}
{"text":"calc total sum of distance + 1 for unsafe positions","code":"$ sum = $ dis_11 + $ dis_18 + $ dis_81 + $ dis_88 + 1 ;"}
{"text":"return total safe positions","code":"return ceil ( 64 - $ sum ) ; }"}
{"text":"Driver Code","code":"$ pos = 34 ; echo \" Safe \u2581 Positions \u2581 = \u2581 \" , calcSafe ( $ pos ) ; ? >"}
{"text":"Function to count number of elements occurs between the elements .","code":"< ? php function getCount ( $ arr , $ n , $ num1 , $ num2 ) {"}
{"text":"Find num1","code":"$ i = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] == $ num1 ) break ;"}
{"text":"If num1 is not present or present at end","code":"if ( $ i >= $ n - 1 ) return 0 ;"}
{"text":"Find num2","code":"$ j ; for ( $ j = $ n - 1 ; $ j >= $ i + 1 ; $ j -- ) if ( $ arr [ $ j ] == $ num2 ) break ;"}
{"text":"If num2 is not present","code":"if ( $ j == $ i ) return 0 ;"}
{"text":"return number of elements betweenthe two elements .","code":"return ( $ j - $ i - 1 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 5 , 7 , 6 , 4 , 9 , 12 , 4 , 8 ) ; $ n = sizeof ( $ arr ) ; $ num1 = 5 ; $ num2 = 4 ; echo ( getCount ( $ arr , $ n , $ num1 , $ num2 ) ) ; ? >"}
{"text":"method to get sum of digits of K","code":"< ? php function sumOfDigit ( $ K ) {"}
{"text":"loop until K is not zero","code":"$ sod = 0 ; while ( $ K ) { $ sod += $ K % 10 ; $ K \/= 10 ; } return $ sod ; }"}
{"text":"method returns count of numbers smaller than N , satisfying difference condition","code":"function totalNumbersWithSpecificDifference ( $ N , $ diff ) { $ low = 1 ; $ high = $ N ;"}
{"text":"binary search while loop","code":"while ( $ low <= $ high ) { $ mid = floor ( ( $ low + $ high ) \/ 2 ) ;"}
{"text":"if difference between number and its sum of digit is smaller than given difference then smallest number will be on left side","code":"if ( $ mid - sumOfDigit ( $ mid ) < $ diff ) $ low = $ mid + 1 ;"}
{"text":"if difference between number and its sum of digit is greater than or equal to given difference then smallest number will be on right side","code":"else $ high = $ mid - 1 ; }"}
{"text":"return the difference between ' smallest \u2581 number \u2581 \u2581 found ' and ' N ' as result","code":"return ( $ N - $ high ) ; }"}
{"text":"Driver Code","code":"$ N = 13 ; $ diff = 2 ; echo totalNumbersWithSpecificDifference ( $ N , $ diff ) ; ? >"}
{"text":"Returns count buildings that can see sunlight","code":"< ? php function countBuildings ( $ arr , $ n ) {"}
{"text":"Initialuze result ( Note that first building always sees sunlight )","code":"$ count = 1 ;"}
{"text":"Start traversing element","code":"$ curr_max = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If curr_element is maximum or current element is equal , update maximum and increment count","code":"if ( $ arr [ $ i ] > $ curr_max $ arr [ $ i ] == $ curr_max ) { $ count ++ ; $ curr_max = $ arr [ $ i ] ; } } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 7 , 4 , 8 , 2 , 9 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo countBuildings ( $ arr , $ n ) ; ? >"}
{"text":"Returns index of extra element in arr1 [ ] . n is size of arr2 [ ] . Size of arr1 [ ] is n - 1.","code":"< ? php function findExtra ( $ arr1 , $ arr2 , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr1 [ $ i ] != $ arr2 [ $ i ] ) return $ i ; return $ n ; }"}
{"text":"Driver code","code":"$ arr1 = array ( 2 , 4 , 6 , 8 , 10 , 12 , 13 ) ; $ arr2 = array ( 2 , 4 , 6 , 8 , 10 , 12 ) ; $ n = sizeof ( $ arr2 ) ;"}
{"text":"Solve is passed both arrays","code":"echo findExtra ( $ arr1 , $ arr2 , $ n ) ; ? >"}
{"text":"Returns index of extra element in arr1 [ ] . n is size of arr2 [ ] . Size of arr1 [ ] is n - 1.","code":"< ? php function findExtra ( $ arr1 , $ arr2 , $ n ) {"}
{"text":"Initialize result","code":"$ index = $ n ;"}
{"text":"left and right are end points denoting the current range .","code":"$ left = 0 ; $ right = $ n - 1 ; while ( $ left <= $ right ) { $ mid = ( $ left + $ right ) \/ 2 ;"}
{"text":"If middle element is same of both arrays , it means that extra element is after mid so we update left to mid + 1","code":"if ( $ arr2 [ $ mid ] == $ arr1 [ $ mid ] ) $ left = $ mid + 1 ;"}
{"text":"If middle element is different of the arrays , it means that the index we are searching for is either mid , or before mid . Hence we update right to mid - 1.","code":"else { $ index = $ mid ; $ right = $ mid - 1 ; } }"}
{"text":"when right is greater than left , our search is complete .","code":"return $ index ; }"}
{"text":"Driver code","code":"{ $ arr1 = array ( 2 , 4 , 6 , 8 , 10 , 12 , 13 ) ; $ arr2 = array ( 2 , 4 , 6 , 8 , 10 , 12 ) ; $ n = sizeof ( $ arr2 ) \/ sizeof ( $ arr2 [ 0 ] ) ;"}
{"text":"Solve is passed both arrays","code":"echo findExtra ( $ arr1 , $ arr2 , $ n ) ; return 0 ; } ? >"}
{"text":"Utility method to compute cost , when all values of array are made equal to X","code":"< ? php function computeCost ( $ arr , $ N , $ X ) { $ cost = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ cost += abs ( $ arr [ $ i ] - $ X ) ; return $ cost ; }"}
{"text":"Method to find minimum cost to make all elements equal","code":"function minCostToMakeElementEqual ( $ arr , $ N ) { $ low ; $ high ; $ low = $ high = $ arr [ 0 ] ;"}
{"text":"setting limits for ternary search by smallest and largest element","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ low > $ arr [ $ i ] ) $ low = $ arr [ $ i ] ; if ( $ high < $ arr [ $ i ] ) $ high = $ arr [ $ i ] ; }"}
{"text":"loop until difference between low and high become less than 3 , because after that mid1 and mid2 will start repeating","code":"while ( ( $ high - $ low ) > 2 ) {"}
{"text":"mid1 and mid2 are representative array equal values of search space","code":"$ mid1 = $ low + ( floor ( $ high - $ low ) \/ 3 ) ; $ mid2 = $ high - ( $ high - $ low ) \/ 3 ; $ cost1 = computeCost ( $ arr , $ N , $ mid1 ) ; $ cost2 = computeCost ( $ arr , $ N , $ mid2 ) ;"}
{"text":"if mid2 point gives more total cost , skip third part","code":"if ( $ cost1 < $ cost2 ) $ high = $ mid2 ;"}
{"text":"if mid1 point gives more total cost , skip first part","code":"else $ low = $ mid1 ; }"}
{"text":"computeCost gets optimum cost by sending average of low and high as X","code":"return computeCost ( $ arr , $ N , ( $ low + $ high ) \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 100 , 101 ) ; $ N = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo minCostToMakeElementEqual ( $ arr , $ N ) ; ? >"}
{"text":"Function to return the smallest element greater than x which is not present in a [ ]","code":"< ? php function Next_greater ( $ a , $ n , $ x ) {"}
{"text":"Sort the array","code":"sort ( $ a ) ; $ low = 0 ; $ high = $ n - 1 ; $ ans = $ x + 1 ;"}
{"text":"Continue until low is less than or equals to high","code":"while ( $ low <= $ high ) {"}
{"text":"Find mid","code":"$ mid = ( $ low + $ high ) \/ 2 ;"}
{"text":"If element at mid is less than or equals to searching element","code":"if ( $ a [ $ mid ] <= $ ans ) {"}
{"text":"If mid is equals to searching element","code":"if ( $ a [ $ mid ] == $ ans ) {"}
{"text":"Increment searching element","code":"$ ans ++ ;"}
{"text":"Make high as N - 1","code":"$ high = $ n - 1 ; }"}
{"text":"Make low as mid + 1","code":"$ low = $ mid + 1 ; }"}
{"text":"Make high as mid - 1","code":"else $ high = $ mid - 1 ; }"}
{"text":"Return the next greater element","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 5 , 10 , 4 , 7 ) ; $ x = 4 ; $ n = count ( $ a ) ; echo Next_greater ( $ a , $ n , $ x ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ mod = 1000000007 ;"}
{"text":"Function to return the factorial of a number","code":"function fact ( $ n ) { $ res = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res = $ res * $ i ; return $ res ; }"}
{"text":"Function to return the value of nCr","code":"function nCr ( $ n , $ r ) { return fact ( $ n ) \/ ( fact ( $ r ) * fact ( $ n - $ r ) ) ; }"}
{"text":"Function to return a raised to the power n with complexity O ( log ( n ) )","code":"function powmod ( $ a , $ n ) { global $ mod ; if ( $ n == 0 ) return 1 ; $ pt = powmod ( $ a , $ n \/ 2 ) ; $ pt = ( $ pt * $ pt ) % $ mod ; if ( $ n % 2 == 1 ) return ( $ pt * $ a ) % $ mod ; else return $ pt ; }"}
{"text":"Function to return the number of sub - sets whose median is also present in the set","code":"function CountSubset ( $ arr , $ n ) { global $ mod ;"}
{"text":"Number of odd length sub - sets","code":"$ ans = powmod ( 2 , $ n - 1 ) ;"}
{"text":"Sort the array","code":"sort ( $ arr , 0 ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ j = $ i + 1 ;"}
{"text":"Checking each element for leftmost middle element while they are equal","code":"while ( $ j < $ n && $ arr [ $ j ] == $ arr [ $ i ] ) {"}
{"text":"Calculate the number of elements in right of rightmost middle element","code":"$ r = $ n - 1 - $ j ;"}
{"text":"Calculate the number of elements in left of leftmost middle element","code":"$ l = $ i ;"}
{"text":"Add selected even length subsets to the answer","code":"$ ans = ( $ ans + nCr ( $ l + $ r , $ l ) ) % $ mod ; $ j ++ ; } } return $ ans ; }"}
{"text":"Driver code","code":"{ $ arr = array ( 2 , 3 , 2 ) ; $ n = sizeof ( $ arr ) ; echo ( CountSubset ( $ arr , $ n ) ) ; }"}
{"text":"Function to print the ordering of words","code":"< ? php function reArrange ( $ words , $ n ) {"}
{"text":"Creating list of words and assigning them index numbers","code":"$ freq = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ freq [ $ words [ $ i ] ] = ( $ i + 1 ) ; }"}
{"text":"Sort the list of words lexicographically","code":"sort ( $ words ) ;"}
{"text":"Print the ordering","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ freq [ $ words [ $ i ] ] , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ words = array ( \" live \" , \" place \" , \" travel \" , \" word \" , \" sky \" ) ; $ n = count ( $ words ) ; reArrange ( $ words , $ n ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ MAX = 10000 ;"}
{"text":"Function to return the required sum","code":"function findSumofEle ( $ arr1 , $ m , $ arr2 , $ n ) {"}
{"text":"Creating hash array initially filled with zero","code":"$ hash = array_fill ( 0 , $ GLOBALS [ ' MAX ' ] , 0 ) ;"}
{"text":"Calculate the frequency of elements of arr2 [ ]","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ hash [ $ arr2 [ $ i ] ] ++ ;"}
{"text":"Running sum of hash array such that hash [ i ] will give count of elements less than or equal to i in arr2 [ ]","code":"for ( $ i = 1 ; $ i < $ GLOBALS [ ' MAX ' ] ; $ i ++ ) $ hash [ $ i ] = $ hash [ $ i ] + $ hash [ $ i - 1 ] ;"}
{"text":"To store the maximum value of the number of elements in arr2 [ ] which are smaller than or equal to some element of arr1 [ ]","code":"$ maximumFreq = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) $ maximumFreq = max ( $ maximumFreq , $ hash [ $ arr1 [ $ i ] ] ) ;"}
{"text":"Calculate the sum of elements from arr1 [ ] corresponding to maximum frequency","code":"$ sumOfElements = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) $ sumOfElements += ( $ maximumFreq == $ hash [ $ arr1 [ $ i ] ] ) ? $ arr1 [ $ i ] : 0 ;"}
{"text":"Return the required sum","code":"return $ sumOfElements ; }"}
{"text":"Driver code","code":"$ arr1 = array ( 2 , 5 , 6 , 8 ) ; $ arr2 = array ( 4 , 10 ) ; $ m = count ( $ arr1 ) ; $ n = count ( $ arr2 ) ; echo findSumofEle ( $ arr1 , $ m , $ arr2 , $ n ) ; ? >"}
{"text":"Function to print A and B all of whose divisors are present in the given array","code":"< ? php function printNumbers ( $ arr , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ;"}
{"text":"A is the largest element from the array","code":"$ A = $ arr [ $ n - 1 ] ; $ B = -1 ;"}
{"text":"Iterate from the second largest element","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"If current element is not a divisor of A then it must be B","code":"if ( $ A % $ arr [ $ i ] != 0 ) { $ B = $ arr [ $ i ] ; break ; }"}
{"text":"If current element occurs more than once","code":"if ( $ i - 1 >= 0 && $ arr [ $ i ] == $ arr [ $ i - 1 ] ) { $ B = $ arr [ $ i ] ; break ; } }"}
{"text":"Print A and B","code":"echo ( \" A \u2581 = \u2581 \" . $ A . \" , B = \" }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 4 , 8 , 16 , 1 , 2 , 4 ) ; $ n = sizeof ( $ arr ) ; printNumbers ( $ arr , $ n ) ;"}
{"text":"Utility function to print the contents of an array","code":"< ? php function printArray ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Function to remove the minimum value of the array from every element of the array","code":"function removeMin ( & $ arr , $ n ) { $ minVal = $ arr [ 0 ] ;"}
{"text":"Get the minimum value from the array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ minVal = min ( $ minVal , $ arr [ $ i ] ) ;"}
{"text":"Remove the minimum value from every element of the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = $ arr [ $ i ] - $ minVal ; }"}
{"text":"Function to remove every element of the array from the maximum value of the array","code":"function removeFromMax ( & $ arr , $ n ) { $ maxVal = $ arr [ 0 ] ;"}
{"text":"Get the maximum value from the array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ maxVal = max ( $ maxVal , $ arr [ $ i ] ) ;"}
{"text":"Remove every element of the array from the maximum value of the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = $ maxVal - $ arr [ $ i ] ; }"}
{"text":"Function to print the modified array after k operations","code":"function modifyArray ( $ arr , $ n , $ k ) {"}
{"text":"If k is odd then remove the minimum element of the array from every element of the array","code":"if ( $ k % 2 == 0 ) removeMin ( $ arr , $ n ) ;"}
{"text":"Else remove every element of the array from the maximum value from the array","code":"else removeFromMax ( $ arr , $ n ) ;"}
{"text":"Print the modified array","code":"printArray ( $ arr , $ n ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 8 , 12 , 16 ) ; $ n = count ( $ arr ) ; $ k = 2 ; modifyArray ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to return the minimized sum","code":"< ? php function findAnswer ( $ n , $ arr ) {"}
{"text":"Sort the array to pair the elements","code":"sort ( $ arr ) ;"}
{"text":"Variable to hold the answer","code":"$ sum = 0 ;"}
{"text":"Pair smallest with largest , second smallest with second largest , and so on","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; ++ $ i ) { $ sum += ( $ arr [ $ i ] + $ arr [ $ n - $ i - 1 ] ) * ( $ arr [ $ i ] + $ arr [ $ n - $ i - 1 ] ) ; } return $ sum ; }"}
{"text":"Driver code","code":"$ arr = array ( 53 , 28 , 143 , 5 ) ; $ n = count ( $ arr ) ; echo findAnswer ( $ n , $ arr ) ; ? >"}
{"text":"PHP program to merge K sorted arrays","code":"< ? php $ n = 4 ;"}
{"text":"Function to perform merge operation","code":"function merge ( $ l , $ r , & $ output ) { global $ n ;"}
{"text":"to store the starting point of left and right array","code":"$ l_in = $ l * $ n ; $ r_in = ( ( int ) ( ( $ l + $ r ) \/ 2 ) + 1 ) * $ n ;"}
{"text":"to store the size of left and right array","code":"$ l_c = ( int ) ( ( ( ( $ l + $ r ) \/ 2 ) - $ l + 1 ) * $ n ) ; $ r_c = ( $ r - ( int ) ( ( $ l + $ r ) \/ 2 ) ) * $ n ;"}
{"text":"array to temporarily store left and right array","code":"$ l_arr = array_fill ( 0 , $ l_c , 0 ) ; $ r_arr = array_fill ( 0 , $ r_c , 0 ) ;"}
{"text":"storing data in left array","code":"for ( $ i = 0 ; $ i < $ l_c ; $ i ++ ) $ l_arr [ $ i ] = $ output [ $ l_in + $ i ] ;"}
{"text":"storing data in right array","code":"for ( $ i = 0 ; $ i < $ r_c ; $ i ++ ) $ r_arr [ $ i ] = $ output [ $ r_in + $ i ] ;"}
{"text":"to store the current index of temporary left and right array","code":"$ l_curr = 0 ; $ r_curr = 0 ;"}
{"text":"to store the current index for output array","code":"$ in = $ l_in ;"}
{"text":"two pointer merge for two sorted arrays","code":"while ( $ l_curr + $ r_curr < $ l_c + $ r_c ) { if ( $ r_curr == $ r_c || ( $ l_curr != $ l_c && $ l_arr [ $ l_curr ] < $ r_arr [ $ r_curr ] ) ) { $ output [ $ in ] = $ l_arr [ $ l_curr ] ; $ l_curr ++ ; $ in ++ ; } else { $ output [ $ in ] = $ r_arr [ $ r_curr ] ; $ r_curr ++ ; $ in ++ ; } } }"}
{"text":"Code to drive merge - sort and create recursion tree","code":"function divide ( $ l , $ r , & $ output , $ arr ) { global $ n ; if ( $ l == $ r ) {"}
{"text":"base step to initialize the output array before performing merge operation","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ output [ $ l * $ n + $ i ] = $ arr [ $ l ] [ $ i ] ; return ; }"}
{"text":"to sort left half","code":"divide ( $ l , ( int ) ( ( $ l + $ r ) \/ 2 ) , $ output , $ arr ) ;"}
{"text":"to sort right half","code":"divide ( ( int ) ( ( $ l + $ r ) \/ 2 ) + 1 , $ r , $ output , $ arr ) ;"}
{"text":"merge the left and right half","code":"merge ( $ l , $ r , $ output ) ; }"}
{"text":"input 2D - array","code":"$ arr = array ( array ( 5 , 7 , 15 , 18 ) , array ( 1 , 8 , 9 , 17 ) , array ( 1 , 4 , 7 , 7 ) ) ;"}
{"text":"Number of arrays","code":"$ k = count ( $ arr ) ;"}
{"text":"Output array","code":"$ output = array_fill ( 0 , $ n * $ k , 0 ) ; divide ( 0 , $ k - 1 , $ output , $ arr ) ;"}
{"text":"Print merged array","code":"for ( $ i = 0 ; $ i < $ n * $ k ; $ i ++ ) print ( $ output [ $ i ] . \" \u2581 \" ) ; ? >"}
{"text":"PHP program to count distinct elements in a given array","code":"< ? php function countDistinct ( & $ arr , $ n ) { $ res = 1 ;"}
{"text":"Pick all elements one by one","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ arr [ $ i ] == $ arr [ $ j ] ) break ;"}
{"text":"If not printed earlier , then print it","code":"if ( $ i == $ j ) $ res ++ ; } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 10 , 9 , 45 , 2 , 10 , 10 , 45 ) ; $ n = count ( $ arr ) ; echo countDistinct ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to count all distinct elements in a given array","code":"< ? php function countDistinct ( $ arr , $ n ) {"}
{"text":"First sort the array so that all occurrences become consecutive","code":"sort ( $ arr , 0 ) ;"}
{"text":"Traverse the sorted array","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Move the index ahead while there are duplicates","code":"while ( $ i < $ n - 1 && $ arr [ $ i ] == $ arr [ $ i + 1 ] ) $ i ++ ; $ res ++ ; } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 6 , 10 , 5 , 4 , 9 , 120 , 4 , 6 , 10 ) ; $ n = sizeof ( $ arr ) ; echo countDistinct ( $ arr , $ n ) ; ? >"}
{"text":"Utility function to print the contents of an array","code":"< ? php function printArray ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Function to print the array with maximum mean","code":"function printMaxMean ( $ arr , $ n ) { $ newArr [ $ n ] = array ( ) ;"}
{"text":"Sort the original array","code":"sort ( $ arr , 0 ) ;"}
{"text":"Construct new array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ newArr [ $ i ] = $ arr [ $ i + $ n ] ;"}
{"text":"Print the resultant array","code":"printArray ( $ newArr , $ n ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 8 , 3 , 1 , 3 , 7 , 0 , 4 ) ; $ n = sizeof ( $ arr ) ; printMaxMean ( $ arr , $ n \/ 2 ) ;"}
{"text":"Function to find average","code":"< ? php function average ( $ arr , $ n , $ k ) { $ total = 0 ;"}
{"text":"base case if 2 * k >= n means all element get removed","code":"if ( 2 * $ k >= $ n ) return 0 ;"}
{"text":"first sort all elements","code":"sort ( $ arr ) ; $ start = $ k ; $ end = $ n - $ k - 1 ;"}
{"text":"sum of req number","code":"for ( $ i = $ start ; $ i <= $ end ; $ i ++ ) $ total += $ arr [ $ i ] ;"}
{"text":"find average","code":"return ( $ total \/ ( $ n - 2 * $ k ) ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 4 , 4 , 5 , 6 ) ; $ n = sizeof ( $ arr ) ; $ k = 2 ; echo average ( $ arr , $ n , $ k ) ; ? >"}
{"text":"function to calculate minimum sum after transformation","code":"< ? php function min_sum ( $ n , $ k , $ a ) { sort ( $ a ) ; if ( $ a [ 0 ] < 0 ) return -1 ;"}
{"text":"no element can be reduced further","code":"if ( $ k == 0 ) {"}
{"text":"if all the elements of the array are identical","code":"if ( $ a [ 0 ] == $ a [ $ n - 1 ] ) return ( $ n * $ a [ 0 ] ) ; else return -1 ; } else { $ f = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ p = $ a [ $ i ] - $ a [ 0 ] ;"}
{"text":"check if a [ i ] can be reduced to a [ 0 ]","code":"if ( $ p % $ k == 0 ) continue ; else { $ f = 1 ; break ; } }"}
{"text":"one of the elements cannot be reduced to be equal to the other elements","code":"if ( $ f ) return -1 ; else {"}
{"text":"if k = 1 then all elements can be reduced to 1","code":"if ( $ k == 1 ) return $ n ; else return ( $ n * ( $ a [ 0 ] % $ k ) ) ; } } }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 4 , 5 ) ; $ K = 1 ; $ N = count ( $ arr ) ; echo min_sum ( $ N , $ K , $ arr ) ; ? >"}
{"text":"Function to return minimum operations need to be make each element of array equal","code":"< ? php function minCost ( $ A , $ n ) {"}
{"text":"Initialize cost to 0","code":"$ cost = 0 ;"}
{"text":"Sort the array","code":"sort ( $ A ) ;"}
{"text":"Middle element","code":"$ K = $ A [ $ n \/ 2 ] ;"}
{"text":"Find Cost","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ cost += abs ( $ A [ $ i ] - $ K ) ;"}
{"text":"If n , is even . Take minimum of the Cost obtained by considering both middle elements","code":"if ( $ n % 2 == 0 ) { $ tempCost = 0 ; $ K = $ A [ ( $ n \/ 2 ) - 1 ] ;"}
{"text":"Find cost again","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ tempCost += abs ( $ A [ $ i ] - $ K ) ;"}
{"text":"Take minimum of two cost","code":"$ cost = min ( $ cost , $ tempCost ) ; }"}
{"text":"Return total cost","code":"return $ cost ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 6 , 7 , 10 ) ; $ n = sizeof ( $ A ) ; echo minCost ( $ A , $ n ) ; ? >"}
{"text":"Function to print array elements in alternative increasing and decreasing order","code":"< ? php function printArray ( $ arr , $ n ) {"}
{"text":"First sort the array in increasing order","code":"sort ( $ arr ) ; $ l = 0 ; $ r = $ n - 1 ; $ flag = 0 ;"}
{"text":"start with 2 elements in increasing order","code":"$ k = 2 ;"}
{"text":"till all the elements are not printed","code":"while ( $ l <= $ r ) {"}
{"text":"printing the elements in increasing order","code":"if ( $ flag == 0 ) { for ( $ i = $ l ; $ i < $ l + $ k && $ i <= $ r ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; $ flag = 1 ; $ l = $ i ; }"}
{"text":"else printing the elements in decreasing order","code":"{ for ( $ i = $ r ; $ i > $ r - $ k && $ i >= $ l ; $ i -- ) echo $ arr [ $ i ] , \" \u2581 \" ; $ flag = 0 ; $ r = $ i ; }"}
{"text":"increasing the number of elements to printed in next iteration","code":"$ k ++ ; } }"}
{"text":"Driver Code","code":"$ n = 6 ; $ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 ) ; printArray ( $ arr , $ n ) ; ? >"}
{"text":"Function that checks whether the string is in alphabetical order or not","code":"< ? php function isAlphabaticOrder ( $ s ) { $ n = strlen ( $ s ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if element at index ' i ' is less than the element at index ' i - 1' then the string is not sorted","code":"if ( $ s [ $ i ] < $ s [ $ i - 1 ] ) return false ; } return true ; }"}
{"text":"Driver code","code":"$ s = \" aabbbcc \" ;"}
{"text":"check whether the string is in alphabetical order or not","code":"if ( isAlphabaticOrder ( $ s ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to check if it possible to form rectangles with heights as non - ascending","code":"< ? php function rotateRec ( $ n , $ L , $ B ) {"}
{"text":"set maximum","code":"$ m = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"replace the maximum with previous maximum","code":"if ( max ( $ L [ $ i ] , $ B [ $ i ] ) <= $ m ) $ m = max ( $ L [ $ i ] , $ B [ $ i ] ) ;"}
{"text":"replace the minimum with previous minimum","code":"else if ( min ( $ L [ $ i ] , $ B [ $ i ] ) <= $ m ) $ m = min ( $ L [ $ i ] , $ B [ $ i ] ) ;"}
{"text":"print NO if the above two conditions fail at least once","code":"else { return 0 ; } } return 1 ; }"}
{"text":"initialize the number of rectangles","code":"$ n = 3 ;"}
{"text":"initialize n rectangles with length and breadth","code":"$ L = array ( 5 , 5 , 6 ) ; $ B = array ( 6 , 7 , 8 ) ; if ( rotateRec ( $ n , $ L , $ B ) == 1 ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to print the required points which minimizes the sum of Manhattan distances","code":"< ? php function minDistance ( $ n , $ k , & $ point ) {"}
{"text":"Sorting points in all k dimension","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) sort ( $ point [ $ i ] ) ;"}
{"text":"Output the required k points","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) echo $ point [ $ i ] [ ( ceil ( ( double ) $ n \/ 2 ) - 1 ) ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ k = 4 ; $ point = array ( array ( 1 , 5 , 2 , 4 ) , array ( 6 , 2 , 0 , 6 ) , array ( 9 , 5 , 1 , 3 ) , array ( 6 , 7 , 5 , 9 ) ) ;"}
{"text":"function call to print required points","code":"minDistance ( $ n , $ k , $ point ) ; ? >"}
{"text":"Function to sort the array","code":"< ? php function printOrder ( $ arr , $ n , $ k ) { $ len1 = $ k ; $ len2 = $ n - $ k ; $ arr1 = array_fill ( 0 , $ k , 0 ) ; $ arr2 = array_fill ( 0 , ( $ n - $ k ) , 0 ) ;"}
{"text":"Store the k elements in an array","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ arr1 [ $ i ] = $ arr [ $ i ] ;"}
{"text":"Store the remaining n - k elements in an array","code":"for ( $ i = $ k ; $ i < $ n ; $ i ++ ) $ arr2 [ $ i - $ k ] = $ arr [ $ i ] ;"}
{"text":"sorting the array from 0 to k - 1 places","code":"sort ( $ arr1 ) ;"}
{"text":"sorting the array from k to n places","code":"sort ( $ arr2 ) ;"}
{"text":"storing the values in the final array arr","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ i < $ k ) $ arr [ $ i ] = $ arr1 [ $ i ] ; else { $ arr [ $ i ] = $ arr2 [ $ len2 - 1 ] ; $ len2 -= 1 ; }"}
{"text":"printing the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) print ( $ arr [ $ i ] . \" \u2581 \" ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 4 , 6 , 2 , 1 , 3 , 8 , 9 , -1 ) ; $ k = 4 ; $ n = count ( $ arr ) ; printOrder ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to generate largest possible number with given digits","code":"< ? php function findMaxNum ( $ arr , $ n ) {"}
{"text":"Declare a hash array of size 10 and initialize all the elements to zero","code":"$ hash = array_fill ( 0 , 10 , 0 ) ;"}
{"text":"store the number of occurrences of the digits in the given array into the hash table","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ hash [ $ arr [ $ i ] ] += 1 ;"}
{"text":"Traverse the hash in descending order to print the required number","code":"for ( $ i = 9 ; $ i >= 0 ; $ i -- )"}
{"text":"Print the number of times a digits occurs","code":"for ( $ j = 0 ; $ j < $ hash [ $ i ] ; $ j ++ ) echo $ i ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 0 ) ; $ n = sizeof ( $ arr ) ; findMaxNum ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to equally divide n elements into two sets such that second set has maximum distinct elements .","code":"< ? php function distribution ( $ arr , $ n ) { sort ( $ arr ) ; $ count = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] > $ arr [ $ i - 1 ] ) $ count ++ ; return min ( $ count , $ n \/ 2 ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 1 , 2 , 1 , 3 , 4 ) ; $ n = count ( $ arr ) ; echo ( distribution ( $ arr , $ n ) ) ; ? >"}
{"text":"PHP program to sort an array of size 3","code":"< ? php $ a = array ( 10 , 12 , 5 ) ; sort ( $ a ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) echo $ a [ $ i ] , \" \u2581 \" ; ? >"}
{"text":"A Simple PHP program to count triplets with sum smaller than a given value","code":"< ? php function printTriplets ( & $ arr , $ n , $ sum ) {"}
{"text":"Fix the first element as A [ i ]","code":"for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) {"}
{"text":"Fix the second element as A [ j ]","code":"for ( $ j = $ i + 1 ; $ j < $ n - 1 ; $ j ++ ) {"}
{"text":"Now look for the third number","code":"for ( $ k = $ j + 1 ; $ k < $ n ; $ k ++ ) if ( $ arr [ $ i ] + $ arr [ $ j ] + $ arr [ $ k ] < $ sum ) { echo ( $ arr [ $ i ] ) ; echo ( \" , \u2581 \" ) ; echo ( $ arr [ $ j ] ) ; echo ( \" , \u2581 \" ) ; echo ( $ arr [ $ k ] ) ; echo ( \" STRNEWLINE \" ) ; } } } }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 1 , 3 , 4 , 7 ) ; $ n = sizeof ( $ arr ) ; $ sum = 12 ; printTriplets ( $ arr , $ n , $ sum ) ; ? >"}
{"text":"Function to count triplets","code":"< ? php function countTriplets ( $ arr , $ n , $ a , $ b ) {"}
{"text":"Initialize result","code":"$ ans = 0 ;"}
{"text":"Fix the first element as A [ i ]","code":"for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) {"}
{"text":"Fix the second element as A [ j ]","code":"for ( $ j = $ i + 1 ; $ j < $ n - 1 ; $ j ++ ) {"}
{"text":"Now look for the third number","code":"for ( $ k = $ j + 1 ; $ k < $ n ; $ k ++ ) if ( $ arr [ $ i ] + $ arr [ $ j ] + $ arr [ $ k ] >= $ a && $ arr [ $ i ] + $ arr [ $ j ] + $ arr [ $ k ] <= $ b ) $ ans ++ ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 7 , 5 , 3 , 8 , 4 , 1 , 9 ) ; $ n = sizeof ( $ arr ) ; $ a = 8 ; $ b = 16 ; echo countTriplets ( $ arr , $ n , $ a , $ b ) . \" \" ; ? >"}
{"text":"Function to find count of triplets having sum less than or equal to val .","code":"< ? php function countTripletsLessThan ( $ arr , $ n , $ val ) {"}
{"text":"sort the input array .","code":"sort ( $ arr ) ;"}
{"text":"Initialize result","code":"$ ans = 0 ;"}
{"text":"to store sum","code":"$ sum ;"}
{"text":"Fix the first element","code":"for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) {"}
{"text":"Initialize other two elements as corner elements of subarray arr [ j + 1. . k ]","code":"$ j = $ i + 1 ; $ k = $ n - 1 ;"}
{"text":"Use Meet in the Middle concept .","code":"while ( $ j != $ k ) { $ sum = $ arr [ $ i ] + $ arr [ $ j ] + $ arr [ $ k ] ;"}
{"text":"If sum of current triplet is greater , then to reduce it decrease k .","code":"if ( $ sum > $ val ) $ k -- ;"}
{"text":"If sum is less than or equal to given value , then add possible triplets ( k - j ) to result .","code":"else { $ ans += ( $ k - $ j ) ; $ j ++ ; } } } return $ ans ; }"}
{"text":"Function to return count of triplets having sum in range [ a , b ] .","code":"function countTriplets ( $ arr , $ n , $ a , $ b ) {"}
{"text":"to store count of triplets .","code":"$ res ;"}
{"text":"Find count of triplets having sum less than or equal to b and subtract count of triplets having sum less than or equal to a - 1.","code":"$ res = countTripletsLessThan ( $ arr , $ n , $ b ) - countTripletsLessThan ( $ arr , $ n , $ a - 1 ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 7 , 5 , 3 , 8 , 4 , 1 , 9 ) ; $ n = sizeof ( $ arr ) ; $ a = 8 ; $ b = 16 ; echo countTriplets ( $ arr , $ n , $ a , $ b ) , \" \" ; ? >"}
{"text":"Function to find area of rectangles","code":"< ? php function MaxTotalRectangleArea ( $ a , $ n ) {"}
{"text":"sorting the array in descending order","code":"rsort ( $ a ) ;"}
{"text":"store the final sum of all the rectangles area possible","code":"$ sum = 0 ; $ flag = false ;"}
{"text":"temporary variable to store the length of rectangle","code":"$ len ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Selecting the length of rectangle so that difference between any two number is 1 only . Here length is selected so flag is set","code":"if ( ( $ a [ $ i ] == $ a [ $ i + 1 ] or $ a [ $ i ] - $ a [ $ i + 1 ] == 1 ) and ( ! $ flag ) ) {"}
{"text":"flag is set means we have got length of rectangle","code":"$ flag = true ;"}
{"text":"length is set to a [ i + 1 ] so that if a [ i + 1 ] is less than a [ i ] by 1 then also we have the correct chice for length","code":"$ len = $ a [ $ i + 1 ] ;"}
{"text":"incrementing the counter one time more as we have considered a [ i + 1 ] element also so .","code":"$ i ++ ; }"}
{"text":"Selecting the width of rectangle so that difference between any two number is 1 only . Here width is selected so now flag is again unset for next rectangle","code":"else if ( ( $ a [ $ i ] == $ a [ $ i + 1 ] or $ a [ $ i ] - $ a [ $ i + 1 ] == 1 ) and ( $ flag ) ) {"}
{"text":"area is calculated for rectangle","code":"$ sum = $ sum + $ a [ $ i + 1 ] * $ len ;"}
{"text":"flag is set false for another rectangle which we can get from elements in array","code":"$ flag = false ;"}
{"text":"incrementing the counter one time more as we have considered a [ i + 1 ] element also so .","code":"$ i ++ ; } } return $ sum ; }"}
{"text":"Driver code","code":"$ a = array ( 10 , 10 , 10 , 10 , 11 , 10 , 11 , 10 , 9 , 9 , 8 , 8 ) ; $ n = count ( $ a ) ; echo MaxTotalRectangleArea ( $ a , $ n ) ; ? >"}
{"text":"Bubble sort implementation to sort elements in descending order .","code":"< ? php function swap ( & $ x , & $ y ) { $ x ^= $ y ^= $ x ^= $ y ; } function print1 ( $ a , $ n ) { for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) echo ( $ a [ $ i ] . \" \u2581 \" ) ; echo ( \" STRNEWLINE \" ) ; }"}
{"text":"Sorts a [ ] in descending order using bubble sort .","code":"function sort1 ( $ a , $ n ) { for ( $ i = $ n ; $ i >= 0 ; $ i -- ) { for ( $ j = $ n ; $ j > $ n - $ i ; $ j -- ) { if ( $ a [ $ j ] > $ a [ $ j - 1 ] ) swap ( $ a [ $ j ] , $ a [ $ j - 1 ] ) ; } } print1 ( $ a , $ n ) ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ a = array ( ) ; array_push ( $ a , 2 ) ; array_push ( $ a , 4 ) ; array_push ( $ a , 3 ) ; array_push ( $ a , 2 ) ; array_push ( $ a , 4 ) ; array_push ( $ a , 5 ) ; array_push ( $ a , 3 ) ; sort1 ( $ a , $ n ) ; ? >"}
{"text":"Return the sum of distance between all the pair of points .","code":"< ? php function distancesum ( $ x , $ y , $ n ) { $ sum = 0 ;"}
{"text":"for each point , finding distance to rest of the point","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) $ sum += ( abs ( $ x [ $ i ] - $ x [ $ j ] ) + abs ( $ y [ $ i ] - $ y [ $ j ] ) ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ x = array ( -1 , 1 , 3 , 2 ) ; $ y = array ( 5 , 6 , 5 , 3 ) ; $ n = count ( $ x ) ; echo distancesum ( $ x , $ y , $ n ) ; ? >"}
{"text":"Return the sum of distance of one axis .","code":"< ? php function distancesum ( $ arr , $ n ) {"}
{"text":"sorting the array .","code":"sort ( $ arr ) ;"}
{"text":"for each point , finding the distance .","code":"$ res = 0 ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ res += ( $ arr [ $ i ] * $ i - $ sum ) ; $ sum += $ arr [ $ i ] ; } return $ res ; } function totaldistancesum ( $ x , $ y , $ n ) { return distancesum ( $ x , $ n ) + distancesum ( $ y , $ n ) ; }"}
{"text":"Driver Code","code":"$ x = array ( -1 , 1 , 3 , 2 ) ; $ y = array ( 5 , 6 , 5 , 3 ) ; $ n = sizeof ( $ x ) ; echo totaldistancesum ( $ x , $ y , $ n ) , \" \" ; ? >"}
{"text":"Find median of array after adding k elements","code":"< ? php function printMedian ( $ arr , $ n , $ K ) {"}
{"text":"sorting the array in increasing order .","code":"sort ( $ arr ) ;"}
{"text":"printing the median of array . Since n + K is always odd and K < n , so median of array always lies in the range of n .","code":"echo $ arr [ ( $ n + $ K ) \/ 2 ] ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 3 , 2 , 8 ) ; $ k = 3 ; $ n = count ( $ arr ) ; printMedian ( $ arr , $ n , $ k ) ; ? >"}
{"text":"PHP program to sort an array based on absolute difference with a given value x .","code":"< ? php function arrange ( $ arr , $ n , $ x ) {"}
{"text":"Below lines are similar to insertion sort","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ diff = abs ( $ arr [ $ i ] - $ x ) ;"}
{"text":"Insert arr [ i ] at correct place","code":"$ j = $ i - 1 ; if ( abs ( $ arr [ $ j ] - $ x ) > $ diff ) { $ temp = $ arr [ $ i ] ; while ( abs ( $ arr [ $ j ] - $ x ) > $ diff && $ j >= 0 ) { $ arr [ $ j + 1 ] = $ arr [ $ j ] ; $ j -- ; } $ arr [ $ j + 1 ] = $ temp ; } } return $ arr ; }"}
{"text":"Function to print the array","code":"function print_arr ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 5 , 3 , 9 , 2 ) ; $ n = sizeof ( $ arr ) ; $ x = 7 ; $ arr1 = arrange ( $ arr , $ n , $ x ) ; print_arr ( $ arr1 , $ n ) ; ? >"}
{"text":"function to print half of the array in ascending order and the other half in descending order","code":"< ? php function printOrder ( $ arr , $ n ) {"}
{"text":"sorting the array","code":"sort ( $ arr ) ;"}
{"text":"printing first half in ascending order","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ;"}
{"text":"printing second half in descending order","code":"for ( $ j = $ n - 1 ; $ j >= $ n \/ 2 ; $ j -- ) echo $ arr [ $ j ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 4 , 6 , 2 , 1 , 3 , 8 , -1 ) ; $ n = sizeof ( $ arr ) ; printOrder ( $ arr , $ n ) ; ? >"}
{"text":"Function to find the minimum amount to buy all candies","code":"< ? php function findMinimum ( $ arr , $ n , $ k ) { $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Buy current candy","code":"$ res += $ arr [ $ i ] ;"}
{"text":"And take k candies for free from the last","code":"$ n = $ n - $ k ; } return $ res ; }"}
{"text":"Function to find the maximum amount to buy all candies","code":"function findMaximum ( $ arr , $ n , $ k ) { $ res = 0 ; $ index = 0 ; for ( $ i = $ n - 1 ; $ i >= $ index ; $ i -- ) {"}
{"text":"Buy candy with maximum amount","code":"$ res += $ arr [ $ i ] ;"}
{"text":"And get k candies for free from the starting","code":"$ index += $ k ; } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 2 , 1 , 4 ) ; $ n = sizeof ( $ arr ) ; $ k = 2 ; sort ( $ arr ) ; sort ( $ arr , $ n ) ;"}
{"text":"Function call","code":"echo findMinimum ( $ arr , $ n , $ k ) , \" \" , findMaximum ( $ arr , $ n , $ k ) ; return 0 ; ? >"}
{"text":"Returns maximum number of pyramidcal levels n boxes of given widths .","code":"< ? php function maxLevel ( $ boxes , $ n ) {"}
{"text":"Sort objects in increasing order of widths","code":"sort ( $ boxes ) ;"}
{"text":"Initialize result","code":"$ ans = 1 ;"}
{"text":"Total width of previous level and total number of objects in previous level","code":"$ prev_width = $ boxes [ 0 ] ; $ prev_count = 1 ;"}
{"text":"Number of object in current level .","code":"$ curr_count = 0 ;"}
{"text":"Width of current level .","code":"$ curr_width = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Picking the object . So increase current width and number of object .","code":"$ curr_width += $ boxes [ $ i ] ; $ curr_count += 1 ;"}
{"text":"If current width and number of object are greater than previous .","code":"if ( $ curr_width > $ prev_width and $ curr_count > $ prev_count ) {"}
{"text":"Update previous width , number of object on previous level .","code":"$ prev_width = $ curr_width ; $ prev_count = $ curr_count ;"}
{"text":"Reset width of current level , number of object on current level .","code":"$ curr_count = 0 ; $ curr_width = 0 ;"}
{"text":"Increment number of level .","code":"$ ans ++ ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ boxes = array ( 10 , 20 , 30 , 50 , 60 , 70 ) ; $ n = count ( $ boxes ) ; echo maxLevel ( $ boxes , $ n ) ; ? >"}
{"text":"To do two way sort . First sort even numbers in ascending order , then odd numbers in descending order .","code":"< ? php function twoWaySort ( & $ arr , $ n ) {"}
{"text":"Make all odd numbers negative","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ )"}
{"text":"if ( $arr [ $i ] & 1 ) Check for odd","code":"$ arr [ $ i ] *= -1 ;"}
{"text":"Sort all numbers","code":"sort ( $ arr ) ;"}
{"text":"Retaining original array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] & 1 ) $ arr [ $ i ] *= -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 3 , 2 , 7 , 5 , 4 ) ; $ n = sizeof ( $ arr ) ; twoWaySort ( $ arr , $ n ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Method prints possible triangle when array values are taken as sides","code":"< ? php function isPossibleTriangle ( $ arr , $ N ) {"}
{"text":"If number of elements are less than 3 , then no triangle is possible","code":"if ( $ N < 3 ) return false ;"}
{"text":"first sort the array","code":"sort ( $ arr ) ;"}
{"text":"loop for all 3 consecutive triplets","code":"for ( $ i = 0 ; $ i < $ N - 2 ; $ i ++ )"}
{"text":"If triplet satisfies triangle condition , break","code":"if ( $ arr [ $ i ] + $ arr [ $ i + 1 ] > $ arr [ $ i + 2 ] ) return true ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 4 , 3 , 1 , 2 ) ; $ N = count ( $ arr ) ; if ( isPossibleTriangle ( $ arr , $ N ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find the K - th smallest element after removing some integers from natural number .","code":"< ? php $ MAX = 10000 ;"}
{"text":"Return the K - th smallest element .","code":"function ksmallest ( $ arr , $ n , $ k ) { global $ MAX ;"}
{"text":"Making an array , and mark all number as unmarked .","code":"$ b = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Marking the number present in the given array .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ b [ $ arr [ $ i ] ] = 1 ; for ( $ j = 1 ; $ j < $ MAX ; $ j ++ ) {"}
{"text":"If j is unmarked , reduce k by 1.","code":"if ( $ b [ $ j ] != 1 ) $ k -- ;"}
{"text":"If k is 0 return j .","code":"if ( $ k == 0 ) return $ j ; } }"}
{"text":"Driver code","code":"$ k = 1 ; $ arr = array ( 1 ) ; $ n = count ( $ arr ) ; echo ksmallest ( $ arr , $ n , $ k ) ; ? >"}
{"text":"PHP program to Merge two sorted halves of array Into Single Sorted Array","code":"< ? php function mergeTwoHalf ( & $ A , $ n ) {"}
{"text":"Sort the given array using sort STL","code":"sort ( $ A , 0 ) ; }"}
{"text":"Driver Code","code":"$ A = array ( 2 , 3 , 8 , -1 , 7 , 10 ) ; $ n = sizeof ( $ A ) ; mergeTwoHalf ( $ A , $ n ) ;"}
{"text":"Print sorted Array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ A [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Return minimum difference of maximum and minimum of k elements of arr [ 0. . n - 1 ] .","code":"< ? php function minDiff ( $ arr , $ n , $ k ) { $ INT_MAX = 2147483647 ; $ result = $ INT_MAX ;"}
{"text":"Sorting the array .","code":"sort ( $ arr , $ n ) ; sort ( $ arr ) ;"}
{"text":"Find minimum value among all K size subarray .","code":"for ( $ i = 0 ; $ i <= $ n - $ k ; $ i ++ ) $ result = min ( $ result , $ arr [ $ i + $ k - 1 ] - $ arr [ $ i ] ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 100 , 300 , 200 , 1000 , 20 , 30 ) ; $ n = sizeof ( $ arr ) ; $ k = 3 ; echo minDiff ( $ arr , $ n , $ k ) ; ? >"}
{"text":"This function merges two sorted arrays and returns inversion count in the arrays .","code":"< ? php function merge ( & $ arr , & $ temp , $ left , $ mid , $ right ) { $ inv_count = 0 ; $ i = $ left ;"}
{"text":"i is index for left subarray","code":"$ j = $ mid ;"}
{"text":"j is index for right subarray","code":"$ k = $ left ;"}
{"text":"k is index for resultant merged subarray","code":"while ( ( $ i <= $ mid - 1 ) && ( $ j <= $ right ) ) { if ( $ arr [ $ i ] <= $ arr [ $ j ] ) $ temp [ $ k ++ ] = $ arr [ $ i ++ ] ; else { $ temp [ $ k ++ ] = $ arr [ $ j ++ ] ;"}
{"text":"this is tricky -- see above explanation \/ diagram for merge ( )","code":"$ inv_count = $ inv_count + ( $ mid - $ i ) ; } }"}
{"text":"Copy the remaining elements of left subarray ( if there are any ) to temp","code":"while ( $ i <= $ mid - 1 ) $ temp [ $ k ++ ] = $ arr [ $ i ++ ] ;"}
{"text":"Copy the remaining elements of right subarray ( if there are any ) to temp","code":"while ( $ j <= $ right ) $ temp [ $ k ++ ] = $ arr [ $ j ++ ] ;"}
{"text":"Copy back the merged elements to original array","code":"for ( $ i = $ left ; $ i <= $ right ; $ i ++ ) $ arr [ $ i ] = $ temp [ $ i ] ; return $ inv_count ; }"}
{"text":"An auxiliary recursive function that sorts the input array and returns the number of inversions in the array .","code":"function _mergeSort ( & $ arr , & $ temp , $ left , $ right ) { $ inv_count = 0 ; if ( $ right > $ left ) {"}
{"text":"Divide the array into two parts and call _mergeSortAndCountInv ( ) for each of the parts","code":"$ mid = intval ( ( $ right + $ left ) \/ 2 ) ;"}
{"text":"Inversion count will be sum of inversions in left - part , right - part and number of inversions in merging","code":"$ inv_count = _mergeSort ( $ arr , $ temp , $ left , $ mid ) ; $ inv_count += _mergeSort ( $ arr , $ temp , $ mid + 1 , $ right ) ;"}
{"text":"Merge the two parts","code":"$ inv_count += merge ( $ arr , $ temp , $ left , $ mid + 1 , $ right ) ; } return $ inv_count ; }"}
{"text":"This function sorts the input array and returns the number of inversions in the array","code":"function countSwaps ( & $ arr , $ n ) { $ temp = array_fill ( 0 , $ n , NULL ) ; return _mergeSort ( $ arr , $ temp , 0 , $ n - 1 ) ; }"}
{"text":"Driver progra to test above functions","code":"$ arr = array ( 1 , 20 , 6 , 4 , 5 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo \" Number \u2581 of \u2581 swaps \u2581 is \u2581 \" . countSwaps ( $ arr , $ n ) ; return 0 ; ? >"}
{"text":"Returns true if n is even , else odd","code":"< ? php function isEven ( $ n ) { return ( $ n % 2 == 0 ) ; }"}
{"text":"Driver code","code":"$ n = 101 ; if ( isEven != true ) echo \" Even \" ; else echo \" Odd \" ; ? >"}
{"text":"Function to find surpasser count of each element in array","code":"< ? php function findSurpasser ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"stores surpasser count for element arr [ i ]","code":"$ count = 0 ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ j ] > $ arr [ $ i ] ) $ count ++ ; echo $ count , \" \" ; } }"}
{"text":"Function to print an array","code":"function printArray ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 7 , 5 , 3 , 0 , 8 , 1 ) ; $ n = count ( $ arr ) ; echo \" Given \u2581 array \u2581 is \u2581 STRNEWLINE \" ; printArray ( $ arr , $ n ) ; echo \" Surpasser \u2581 Count \u2581 of \u2581 array \u2581 is \u2581 STRNEWLINE \" ; findSurpasser ( $ arr , $ n ) ; ? >"}
{"text":"Function to find and return minimum sum of two numbers formed from digits of the array .","code":"< ? php function solve ( $ arr , $ n ) {"}
{"text":"sort the array","code":"sort ( $ arr ) ; sort ( $ arr , $ n ) ;"}
{"text":"let two numbers be a and b","code":"$ a = 0 ; $ b = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"fill a and b with every alternate digit of input array","code":"if ( $ i & 1 ) $ a = $ a * 10 + $ arr [ $ i ] ; else $ b = $ b * 10 + $ arr [ $ i ] ; }"}
{"text":"return the sum","code":"return $ a + $ b ; }"}
{"text":"Driver code","code":"$ arr = array ( 6 , 8 , 4 , 5 , 2 , 3 ) ; $ n = sizeof ( $ arr ) ; echo \" Sum \u2581 is \u2581 \" , solve ( $ arr , $ n ) ; ? >"}
{"text":"Function to find a maximum product of a triplet in array of integers of size n","code":"< ? php function maxProduct ( $ arr , $ n ) { $ INT_MIN = 0 ;"}
{"text":"if size is less than 3 , no triplet exists","code":"if ( $ n < 3 ) return -1 ;"}
{"text":"will contain max product","code":"$ max_product = $ INT_MIN ; for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n - 1 ; $ j ++ ) for ( $ k = $ j + 1 ; $ k < $ n ; $ k ++ ) $ max_product = max ( $ max_product , $ arr [ $ i ] * $ arr [ $ j ] * $ arr [ $ k ] ) ; return $ max_product ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 3 , 5 , 6 , 20 ) ; $ n = sizeof ( $ arr ) ; $ max = maxProduct ( $ arr , $ n ) ; if ( $ max == -1 ) echo \" No \u2581 Triplet \u2581 Exists \" ; else echo \" Maximum \u2581 product \u2581 is \u2581 \" , $ max ; ? >"}
{"text":"Function to find a maximum product of a triplet in array of integers of size n","code":"< ? php function maxProduct ( $ arr , $ n ) {"}
{"text":"if size is less than 3 , no triplet exists","code":"if ( $ n < 3 ) return -1 ;"}
{"text":"Construct four auxiliary vectors of size n and initialize them by - 1","code":"$ leftMin = array_fill ( 0 , $ n , -1 ) ; $ rightMin = array_fill ( 0 , $ n , -1 ) ; $ leftMax = array_fill ( 0 , $ n , -1 ) ; $ rightMax = array_fill ( 0 , $ n , -1 ) ;"}
{"text":"will contain max product","code":"$ max_product = PHP_INT_MIN ;"}
{"text":"to store maximum element on left of array","code":"$ max_sum = $ arr [ 0 ] ;"}
{"text":"to store minimum element on left of array","code":"$ min_sum = $ arr [ 0 ] ;"}
{"text":"leftMax [ i ] will contain max element on left of arr [ i ] excluding arr [ i ] . leftMin [ i ] will contain min element on left of arr [ i ] excluding arr [ i ] .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ leftMax [ $ i ] = $ max_sum ; if ( $ arr [ $ i ] > $ max_sum ) $ max_sum = $ arr [ $ i ] ; $ leftMin [ $ i ] = $ min_sum ; if ( $ arr [ $ i ] < $ min_sum ) $ min_sum = $ arr [ $ i ] ; }"}
{"text":"reset max_sum to store maximum element on right of array","code":"$ max_sum = $ arr [ $ n - 1 ] ;"}
{"text":"reset min_sum to store minimum element on right of array","code":"$ min_sum = $ arr [ $ n - 1 ] ;"}
{"text":"rightMax [ i ] will contain max element on right of arr [ i ] excluding arr [ i ] . rightMin [ i ] will contain min element on right of arr [ i ] excluding arr [ i ] .","code":"for ( $ j = $ n - 2 ; $ j >= 0 ; $ j -- ) { $ rightMax [ $ j ] = $ max_sum ; if ( $ arr [ $ j ] > $ max_sum ) $ max_sum = $ arr [ $ j ] ; $ rightMin [ $ j ] = $ min_sum ; if ( $ arr [ $ j ] < $ min_sum ) $ min_sum = $ arr [ $ j ] ; }"}
{"text":"For all array indexes i except first and last , compute maximum of arr [ i ] * x * y where x can be leftMax [ i ] or leftMin [ i ] and y can be rightMax [ i ] or rightMin [ i ] .","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) { $ max1 = max ( $ arr [ $ i ] * $ leftMax [ $ i ] * $ rightMax [ $ i ] , $ arr [ $ i ] * $ leftMin [ $ i ] * $ rightMin [ $ i ] ) ; $ max2 = max ( $ arr [ $ i ] * $ leftMax [ $ i ] * $ rightMin [ $ i ] , $ arr [ $ i ] * $ leftMin [ $ i ] * $ rightMax [ $ i ] ) ; $ max_product = max ( $ max_product , max ( $ max1 , $ max2 ) ) ; } return $ max_product ; }"}
{"text":"Driver program to test above functions","code":"$ arr = array ( 1 , 4 , 3 , -6 , -7 , 0 ) ; $ n = count ( $ arr ) ; $ max = maxProduct ( $ arr , $ n ) ; if ( $ max == -1 ) echo \" No \u2581 Triplet \u2581 Exists \" ; else echo \" Maximum \u2581 product \u2581 is \u2581 \" . $ max ; ? >"}
{"text":"Function to find a maximum product of a triplet in array of integers of size n","code":"< ? php function maxProduct ( $ arr , $ n )"}
{"text":"if size is less than 3 , no triplet exists","code":"{ if ( $ n < 3 ) { return -1 ; }"}
{"text":"Sort the array in ascending order","code":"sort ( $ arr ) ;"}
{"text":"Return the maximum of product of last three elements and product of first two elements and last element","code":"return max ( $ arr [ 0 ] * $ arr [ 1 ] * $ arr [ $ n - 1 ] , $ arr [ $ n - 1 ] * $ arr [ $ n - 2 ] * $ arr [ $ n - 3 ] ) ; }"}
{"text":"Driver code","code":"$ arr = array ( -10 , -3 , 5 , 6 , -20 ) ; $ n = sizeof ( $ arr ) ; $ max = maxProduct ( $ arr , $ n ) ; if ( $ max == -1 ) { echo ( \" No \u2581 Triplet \u2581 Exists \" ) ; } else { echo ( \" Maximum \u2581 product \u2581 is \u2581 \" . $ max ) ; }"}
{"text":"Function to find largest sub string with same characters","code":"< ? php function Substring ( $ s ) { $ ans = 1 ; $ temp = 1 ;"}
{"text":"Traverse the string","code":"for ( $ i = 1 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"If character is same as previous increment temp value","code":"if ( $ s [ $ i ] == $ s [ $ i - 1 ] ) { ++ $ temp ; } else { $ ans = max ( $ ans , $ temp ) ; $ temp = 1 ; } } $ ans = max ( $ ans , $ temp ) ;"}
{"text":"Return the required answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ s = \" abcdddddeff \" ;"}
{"text":"Function call","code":"echo Substring ( $ s ) ; ? >"}
{"text":"Function that print the desired array which satisfies the given conditions","code":"< ? php function solve ( $ n , $ k ) { $ mini = 0 ; $ x1 = 1 ; $ a = array ( ) ; for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) { $ mini += $ x1 ; $ a [ $ i - 1 ] = $ x1 ; $ x1 += 1 ; }"}
{"text":"If the lowest filling condition is void , then it is not possible to generate the required array","code":"if ( $ n < $ mini ) { echo \" - 1\" ; return ; } $ rem = $ n - $ mini ; $ cnt = floor ( $ rem \/ $ k ) ; $ rem = $ rem % $ k ;"}
{"text":"Increase all the elements by cnt","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ a [ $ i ] += $ cnt ;"}
{"text":"Start filling from the back till the number is a [ i + 1 ] <= 2 * a [ i ]","code":"for ( $ i = $ k - 1 ; $ i > 0 && $ rem > 0 ; $ i -- ) {"}
{"text":"Get the number to be filled","code":"$ xx = $ a [ $ i - 1 ] * 2 ; $ left = $ xx - $ a [ $ i ] ;"}
{"text":"If it is less than the remaining numbers to be filled","code":"if ( $ rem >= $ left ) { $ a [ $ i ] = $ xx ; $ rem -= $ left ; }"}
{"text":"less than remaining numbers to be filled","code":"else { $ a [ $ i ] += $ rem ; $ rem = 0 ; } }"}
{"text":"Get the sum of the array","code":"$ sum = $ a [ 0 ] ; for ( $ i = 1 ; $ i < $ k ; $ i ++ ) {"}
{"text":"If this condition is void at any stage during filling up , then print - 1","code":"if ( $ a [ $ i ] > 2 * $ a [ $ i - 1 ] ) { echo \" - 1\" ; return ; }"}
{"text":"Else add it to the sum","code":"$ sum += $ a [ $ i ] ; }"}
{"text":"If the sum condition is not satisified , then print - 1","code":"if ( $ sum != $ n ) { echo \" - 1\" ; return ; }"}
{"text":"Print the generated array","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) echo $ a [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 26 ; $ k = 6 ; solve ( $ n , $ k ) ; ? >"}
{"text":"Function to return the maximum coins we can get","code":"< ? php function maxCoins ( $ X , $ Y ) {"}
{"text":"Update elements such that X > Y","code":"if ( $ X < $ Y ) swap ( $ X , $ Y ) ;"}
{"text":"Take from the maximum","code":"$ coins = $ X ;"}
{"text":"Refill","code":"$ X -- ;"}
{"text":"Again , take the maximum","code":"$ coins += max ( $ X , $ Y ) ; return $ coins ; }"}
{"text":"Driver code","code":"$ X = 7 ; $ Y = 5 ; echo maxCoins ( $ X , $ Y ) ; ? >"}
{"text":"Function to find the number of elements crossed","code":"< ? php function findElementsCrossed ( $ arr , $ a , $ b , $ n ) {"}
{"text":"Keep a copy of a","code":"$ aa = $ a ; $ ans = 0 ;"}
{"text":"Iterate in the binary array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If no a and b left to use","code":"if ( $ a == 0 && $ b == 0 ) break ;"}
{"text":"If there is no a","code":"else if ( $ a == 0 ) {"}
{"text":"use b and increase a by 1 if arr [ i ] is 1","code":"if ( $ arr [ $ i ] == 1 ) { $ b -= 1 ; $ a = min ( $ aa , $ a + 1 ) ; }"}
{"text":"simply use b","code":"else $ b -= 1 ; }"}
{"text":"Use a if theres no b","code":"else if ( $ b == 0 ) $ a -- ;"}
{"text":"Increase a and use b if arr [ i ] == 1","code":"else if ( $ arr [ $ i ] == 1 && $ a < $ aa ) { $ b -= 1 ; $ a = min ( $ aa , $ a + 1 ) ; }"}
{"text":"Use a","code":"else $ a -- ; $ ans ++ ; } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 0 , 0 , 1 , 0 , 1 ) ; $ n = sizeof ( $ arr ) ; $ a = 1 ; $ b = 2 ; echo findElementsCrossed ( $ arr , $ a , $ b , $ n ) ; ? >"}
{"text":"Function that return true if character ch is a vowel","code":"< ? php function isVowel ( $ ch ) { if ( $ ch == ' a ' $ ch == ' e ' $ ch == ' i ' $ ch == ' o ' $ ch == ' u ' ) return true ; return false ; }"}
{"text":"Function to return the count of adjacent vowel pairs in the given string","code":"function vowelPairs ( $ s , $ n ) { $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"If current character and the character after it are both vowels","code":"if ( isVowel ( $ s [ $ i ] ) && isVowel ( $ s [ $ i + 1 ] ) ) $ cnt ++ ; } return $ cnt ; }"}
{"text":"Driver code","code":"$ s = \" abaebio \" ; $ n = strlen ( $ s ) ; echo vowelPairs ( $ s , $ n ) ; ? >"}
{"text":"Function to return the gcd of two numbers","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to return the minimum possible health for the monster","code":"function solve ( $ health , $ n ) {"}
{"text":"gcd of first and second element","code":"$ currentgcd = gcd ( $ health [ 0 ] , $ health [ 1 ] ) ;"}
{"text":"gcd for all subsequent elements","code":"for ( $ i = 2 ; $ i < $ n ; ++ $ i ) { $ currentgcd = gcd ( $ currentgcd , $ health [ $ i ] ) ; } return $ currentgcd ; }"}
{"text":"Driver code","code":"$ health = array ( 4 , 6 , 8 , 12 ) ; $ n = sizeof ( $ health ) ; echo solve ( $ health , $ n ) ; ? >"}
{"text":"Function to print strictly increasing and strictly decreasing sequence if possible","code":"< ? php function Find_Sequence ( $ arr , $ n ) {"}
{"text":"Arrays to store strictly increasing and decreasing sequence","code":"$ inc_arr = array ( ) ; $ dec_arr = array ( ) ;"}
{"text":"Initializing last element of both sequence","code":"$ inc = -1 ; $ dec = 1e7 ;"}
{"text":"Iterating through the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current element can be appended to both the sequences","code":"if ( $ inc < $ arr [ $ i ] && $ arr [ $ i ] < $ dec ) {"}
{"text":"If next element is greater than the current element Then append it to the strictly increasing array","code":"if ( $ arr [ $ i ] < $ arr [ $ i + 1 ] ) { $ inc = $ arr [ $ i ] ; array_push ( $ inc_arr , $ arr [ $ i ] ) ; }"}
{"text":"Otherwise append it to the strictly decreasing array","code":"else { $ dec = $ arr [ $ i ] ; array_push ( $ dec_arr , $ arr [ $ i ] ) ; } }"}
{"text":"If current element can be appended to the increasing sequence only","code":"else if ( $ inc < $ arr [ $ i ] ) { $ inc = $ arr [ $ i ] ; array_push ( $ inc_arr , $ arr [ $ i ] ) ; }"}
{"text":"If current element can be appended to the decreasing sequence only","code":"else if ( $ dec > $ arr [ $ i ] ) { $ dec = $ arr [ $ i ] ; array_push ( $ dec_arr , $ arr [ $ i ] ) ; }"}
{"text":"Else we can not make such sequences from the given array","code":"else { echo ' - 1' ; break ; } }"}
{"text":"Print the required sequences","code":"print_r ( $ inc_arr ) ; print_r ( $ dec_arr ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 1 , 3 , 6 , 8 , 2 , 9 , 0 , 10 ) ; $ n = count ( $ arr ) ; Find_Sequence ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the reverse of a number","code":"< ? php function reverse ( $ n ) { $ rev = 0 ; while ( $ n != 0 ) { $ rev = ( $ rev * 10 ) + ( $ n % 10 ) ; $ n = floor ( $ n \/ 10 ) ; } return $ rev ; }"}
{"text":"Function to find the sum of the odd and even positioned digits in a number","code":"function getSum ( $ n ) { $ n = reverse ( $ n ) ; $ sumOdd = 0 ; $ sumEven = 0 ; $ c = 1 ; while ( $ n != 0 ) {"}
{"text":"If c is even number then it means digit extracted is at even place","code":"if ( $ c % 2 == 0 ) $ sumEven += $ n % 10 ; else $ sumOdd += $ n % 10 ; $ n = floor ( $ n \/ 10 ) ; $ c ++ ; } echo \" Sum odd = \" , \u2581 $ sumOdd , \u2581 \" \" ; STRNEWLINE echo \u2581 \" Sum even = \" }"}
{"text":"Driver code","code":"$ n = 457892 ; getSum ( $ n ) ; ? >"}
{"text":"Function to return the amount of notes with value A required","code":"< ? php function bankNotes ( $ A , $ B , $ S , $ N ) { $ numerator = $ S - ( $ B * $ N ) ; $ denominator = $ A - $ B ;"}
{"text":"If possible","code":"if ( $ numerator % $ denominator == 0 ) return ( $ numerator \/ $ denominator ) ; return -1 ; }"}
{"text":"Driver code","code":"$ A = 1 ; $ B = 2 ; $ S = 7 ; $ N = 5 ; echo ( bankNotes ( $ A , $ B , $ S , $ N ) ) ; ? >"}
{"text":"Function to print the two parts","code":"< ? php function twoParts ( $ str ) { $ flag = 0 ; $ a = \" \" ;"}
{"text":"Find the position of 4","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] == '4' ) { $ str [ $ i ] = '3' ; $ a . = '1' ; $ flag = 1 ; }"}
{"text":"If current character is not '4' but appears after the first occurrence of '4'","code":"else if ( $ flag ) $ a . = '0' ; }"}
{"text":"Print both the parts","code":"echo $ str . \" \u2581 \" . $ a ; }"}
{"text":"Driver code","code":"$ str = \"9441\" ; twoParts ( $ str ) ; ? >"}
{"text":"Function to return the length of the required sub - string","code":"< ? php function longestSubstring ( $ s ) { $ cnt = 1 ; $ maxi = 1 ;"}
{"text":"Get the length of the string","code":"$ n = strlen ( $ s ) ;"}
{"text":"Iterate in the string","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Check for not consecutive","code":"if ( $ s [ $ i ] != $ s [ $ i - 1 ] ) $ cnt ++ ; else {"}
{"text":"If cnt greater than maxi","code":"$ maxi = max ( $ cnt , $ maxi ) ;"}
{"text":"Re - initialize","code":"$ cnt = 1 ; } }"}
{"text":"Check after iteration is complete","code":"$ maxi = max ( $ cnt , $ maxi ) ; return $ maxi ; }"}
{"text":"Driver code","code":"$ s = \" ccccdeededff \" ; echo longestSubstring ( $ s ) ; ? >"}
{"text":"Function to return the count of minimum operations required","code":"< ? php function Minimum_Operations ( $ a , $ n ) {"}
{"text":"To store the count of negative integers on the right of the current index ( inclusive )","code":"$ np = array ( ) ; $ np [ $ n ] = 0 ;"}
{"text":"Find the count of negative integers on the right","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { $ np [ $ i ] = $ np [ $ i + 1 ] ;"}
{"text":"If current element is negative","code":"if ( $ a [ $ i ] <= 0 ) $ np [ $ i ] ++ ; }"}
{"text":"To store the count of positive elements","code":"$ pos = 0 ; $ ans = $ n ;"}
{"text":"Find the positive integers on the left","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"If current element is positive","code":"if ( $ a [ $ i ] >= 0 ) $ pos ++ ;"}
{"text":"Update the answer","code":"$ ans = min ( $ ans , $ pos + $ np [ $ i + 1 ] ) ; }"}
{"text":"Return the required answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ a = array ( -1 , 0 , 1 , 2 ) ; $ n = count ( $ a ) ; echo Minimum_Operations ( $ a , $ n ) ; ? >"}
{"text":"Function for finding sum of elements whose diff with mean is not more than k","code":"< ? php function findSumofEle ( $ arr1 , $ m , $ arr2 , $ n , $ k ) { $ arraySum = 0 ;"}
{"text":"Find the mean of second array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arraySum += $ arr2 [ $ i ] ; $ mean = $ arraySum \/ $ n ;"}
{"text":"Find sum of elements from array1 whose difference with mean is not more than k","code":"$ sumOfElements = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { $ difference = $ arr1 [ $ i ] - $ mean ; if ( ( $ difference < 0 ) && ( $ k > ( -1 ) * $ difference ) ) { $ sumOfElements += $ arr1 [ $ i ] ; } if ( ( $ difference >= 0 ) && ( $ k > $ difference ) ) { $ sumOfElements += $ arr1 [ $ i ] ; } }"}
{"text":"Return result","code":"return $ sumOfElements ; }"}
{"text":"Driver code","code":"$ arr1 = array ( 1 , 2 , 3 , 4 , 7 , 9 ) ; $ arr2 = array ( 0 , 1 , 2 , 1 , 1 , 4 ) ; $ k = 2 ; $ m = count ( $ arr1 ) ; $ n = count ( $ arr2 ) ; print ( findSumofEle ( $ arr1 , $ m , $ arr2 , $ n , $ k ) ) ; ? >"}
{"text":"Function to find n positive integers that satisfy the given conditions","code":"< ? php function findIntegers ( $ n , $ x , $ y ) {"}
{"text":"To store n positive integers","code":"$ ans = array ( ) ;"}
{"text":"Place N - 1 one 's","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) array_push ( $ ans , 1 ) ;"}
{"text":"If can not place ( y - ( n - 1 ) ) as the Nth integer","code":"if ( $ y - ( $ n - 1 ) <= 0 ) { echo \" - 1\" ; return ; }"}
{"text":"Place Nth integer","code":"array_push ( $ ans , $ y - ( $ n - 1 ) ) ;"}
{"text":"To store the sum of squares of N integers","code":"$ store = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ store += $ ans [ $ i ] * $ ans [ $ i ] ;"}
{"text":"If it is less than x","code":"if ( $ store < $ x ) { echo \" - 1\" ; return ; }"}
{"text":"Print the required integers","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ ans [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ x = 254 ; $ y = 18 ; findIntegers ( $ n , $ x , $ y ) ; ? >"}
{"text":"Function to find a minimum number of steps to reach M from N","code":"< ? php function Minsteps ( $ n , $ m ) { $ ans = 0 ;"}
{"text":"Continue till m is greater than n","code":"while ( $ m > $ n ) {"}
{"text":"If m is odd","code":"if ( $ m % 2 != 0 ) {"}
{"text":"add one","code":"$ m ++ ; $ ans ++ ; }"}
{"text":"divide m by 2","code":"$ m \/= 2 ; $ ans ++ ; }"}
{"text":"Return the required answer","code":"return $ ans + $ n - $ m ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ m = 6 ; echo ( Minsteps ( $ n , $ m ) ) ; ? >"}
{"text":"Utility function to calculate sum of numbers from 1 to x","code":"< ? php function getsum ( $ x ) { return ( $ x * ( $ x + 1 ) ) \/ 2 ; }"}
{"text":"Function to find the number of jumps to reach X in the number line from zero","code":"function countJumps ( $ n ) {"}
{"text":"First make number positive Answer will be same either it is Positive or negative","code":"$ n = abs ( $ n ) ;"}
{"text":"To store required answer","code":"$ ans = 0 ;"}
{"text":"Continue till number is lesser or not in same parity","code":"while ( getsum ( $ ans ) < $ n or ( getsum ( $ ans ) - $ n ) & 1 ) $ ans ++ ;"}
{"text":"Return the required answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ n = 9 ; echo countJumps ( $ n ) ; ? >"}
{"text":"Function to return the maximum candies that can be bought","code":"< ? php function maxCandies ( $ arr , $ n ) {"}
{"text":"Buy all the candies of the last type","code":"$ prevBought = $ arr [ $ n - 1 ] ; $ candies = $ prevBought ;"}
{"text":"Starting from second last","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Amount of candies of the current type that can be bought","code":"$ x = min ( $ prevBought - 1 , $ arr [ $ i ] ) ; if ( $ x >= 0 ) {"}
{"text":"Add candies of current type that can be bought","code":"$ candies += $ x ;"}
{"text":"Update the previous bought amount","code":"$ prevBought = $ x ; } } return $ candies ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 1 , 3 , 6 ) ; $ n = sizeof ( $ arr ) ; echo ( maxCandies ( $ arr , $ n ) ) ; ? >"}
{"text":"Function to return the minimum changes required","code":"< ? php function minChanges ( $ str , $ n ) {"}
{"text":"To store the count of minimum changes , number of ones and the number of zeroes","code":"$ count = $ zeros = $ ones = 0 ;"}
{"text":"First character has to be '1'","code":"if ( $ str [ 0 ] != '1' ) { $ count ++ ; $ ones ++ ; } for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ str [ $ i ] == '0' ) $ zeros ++ ; else $ ones ++ ;"}
{"text":"If condition fails changes need to be made","code":"if ( $ zeros > $ ones ) { $ zeros -- ; $ ones ++ ; $ count ++ ; } }"}
{"text":"Return the required count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ str = \"0000\" ; $ n = strlen ( $ str ) ; echo minChanges ( $ str , $ n ) ; ? >"}
{"text":"Function to return the count of possible steps in a single direction","code":"< ? php function steps ( $ cur , $ x , $ n ) {"}
{"text":"It can cover infinite steps","code":"if ( $ x == 0 ) return PHP_INT_MAX ;"}
{"text":"We are approaching towards X = N","code":"if ( $ x > 0 ) return floor ( abs ( ( $ n - $ cur ) \/ $ x ) ) ;"}
{"text":"We are approaching towards X = 1","code":"else return floor ( abs ( ( $ cur - 1 ) \/ $ x ) ) ; }"}
{"text":"Function to return the count of steps","code":"function countSteps ( $ curx , $ cury , $ n , $ m , $ moves ) { $ count = 0 ; $ k = sizeof ( $ moves ) ; for ( $ i = 0 ; $ i < $ k ; $ i ++ ) { $ x = $ moves [ $ i ] [ 0 ] ; $ y = $ moves [ $ i ] [ 1 ] ;"}
{"text":"Take the minimum of both moves independently","code":"$ stepct = min ( steps ( $ curx , $ x , $ n ) , steps ( $ cury , $ y , $ m ) ) ;"}
{"text":"Update count and current positions","code":"$ count += $ stepct ; $ curx += $ stepct * $ x ; $ cury += $ stepct * $ y ; } return $ count ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ m = 5 ; $ x = 1 ; $ y = 1 ; $ moves = array ( array ( 1 , 1 ) , array ( 1 , 1 ) , array ( 0 , -2 ) ) ; $ k = sizeof ( $ moves ) ; echo countSteps ( $ x , $ y , $ n , $ m , $ moves ) ; ? >"}
{"text":"Returns the minimum number of eliminations","code":"< ? php function min_elimination ( $ n , $ arr ) { $ count = 0 ;"}
{"text":"Stores the previous element","code":"$ prev_val = $ arr [ 0 ] ;"}
{"text":"Stores the new value","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ curr_val = $ arr [ $ i ] ;"}
{"text":"Check if the previous and current values are of same parity","code":"if ( $ curr_val % 2 == $ prev_val % 2 ) $ count ++ ;"}
{"text":"Previous value is now the current value","code":"$ prev_val = $ curr_val ; }"}
{"text":"Return the counter variable","code":"return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 7 , 9 ) ; $ n = sizeof ( $ arr ) ; echo min_elimination ( $ n , $ arr ) ; ? >"}
{"text":"Function to return the count of required numbers","code":"< ? php function getCount ( $ N ) {"}
{"text":"If N is odd then return 0","code":"if ( $ N % 2 == 1 ) return 0 ; $ result = \"9\" ; for ( $ i = 1 ; $ i <= $ N \/ 2 - 1 ; $ i ++ ) $ result . = \"0\" ; return $ result ; }"}
{"text":"Driver Code","code":"$ N = 4 ; echo getCount ( $ N ) ; ? >"}
{"text":"Function that returns true if it possible to form a team with the given n and m","code":"< ? php function canFormTeam ( $ n , $ m ) {"}
{"text":"1 person of Type1 and 2 persons of Type2 can be chosen","code":"if ( $ n >= 1 && $ m >= 2 ) return true ;"}
{"text":"1 person of Type2 and 2 persons of Type1 can be chosen","code":"if ( $ m >= 1 && $ n >= 2 ) return true ;"}
{"text":"Cannot from a team","code":"return false ; }"}
{"text":"Function to return the maximum number of teams that can be formed","code":"function maxTeams ( $ n , $ m ) {"}
{"text":"To store the required count of teams formed","code":"$ count = 0 ; while ( canFormTeam ( $ n , $ m ) ) { if ( $ n > $ m ) {"}
{"text":"Choose 2 persons of Type1","code":"$ n -= 2 ;"}
{"text":"And 1 person of Type2","code":"$ m -= 1 ; } else {"}
{"text":"Choose 2 persons of Type2","code":"$ m -= 2 ;"}
{"text":"And 1 person of Type1","code":"$ n -= 1 ; }"}
{"text":"Another team has been formed","code":"$ count ++ ; } return $ count ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ m = 5 ; echo maxTeams ( $ n , $ m ) ; ? >"}
{"text":"Function to find the maximum of two values","code":"< ? php function max1 ( $ a , $ b ) { if ( $ a > $ b ) return $ a ; else return $ b ; }"}
{"text":"Function to find the smallest side of the suitable suitcase","code":"function smallestSide ( $ a ) {"}
{"text":"sort array to find the smallest and largest side of suitcases","code":"sort ( $ a , 0 ) ;"}
{"text":"side of the suitcase will be smallest if they arranged in 2 x 2 way so find all possible sides of that arrangement","code":"$ side1 = $ a [ 0 ] + $ a [ 3 ] ; $ side2 = $ a [ 1 ] + $ a [ 2 ] ; $ side3 = $ a [ 0 ] + $ a [ 1 ] ; $ side4 = $ a [ 2 ] + $ a [ 3 ] ;"}
{"text":"since suitcase should be square so find maximum of all four side","code":"$ side11 = max1 ( $ side1 , $ side2 ) ; $ side12 = max1 ( $ side3 , $ side4 ) ;"}
{"text":"now find greatest side and that will be the smallest square","code":"$ sideOfSquare = max1 ( $ side11 , $ side12 ) ;"}
{"text":"return the result","code":"return $ sideOfSquare ; }"}
{"text":"Driver program","code":"$ side = array ( ) ; echo \" Test \u2581 Case \u2581 1 STRNEWLINE \" ;"}
{"text":"Get the side of the 4 small squares","code":"$ side [ 0 ] = 2 ; $ side [ 1 ] = 2 ; $ side [ 2 ] = 2 ; $ side [ 3 ] = 2 ;"}
{"text":"Find the smallest side","code":"echo smallestSide ( $ side ) . \" STRNEWLINE \" ; echo \" Test Case 2 \""}
{"text":"Get the side of the 4 small squares","code":"$ side [ 0 ] = 100000000000000 ; $ side [ 1 ] = 123450000000000 ; $ side [ 2 ] = 987650000000000 ; $ side [ 3 ] = 987654321000000 ;"}
{"text":"Find the smallest side","code":"echo smallestSide ( $ side ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to print the length ( l ) and breadth ( b ) of the rectangle having area = N and | l - b | as minimum as possible","code":"< ? php function find_rectangle ( $ area ) { $ M = floor ( sqrt ( $ area ) ) ; for ( $ i = $ M ; $ i >= 1 ; $ i -- ) {"}
{"text":"i is a factor","code":"if ( $ area % $ i == 0 ) {"}
{"text":"l >= sqrt ( area ) >= i","code":"$ l = floor ( $ area \/ $ i ) ;"}
{"text":"so here l is + ve always","code":"$ b = $ i ; break ; } }"}
{"text":"Here l and b are length and breadth of the rectangle","code":"echo \" l = \" , \u2581 $ l , \u2581 \" , b = \" , \u2581 $ b , \u2581 \" \" }"}
{"text":"Driver code","code":"$ area = 99 ; find_rectangle ( $ area ) ; ? >"}
{"text":"Function to return the size of the required sub - set","code":"< ? php function sizeSubSet ( $ a , $ k , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ a ) ;"}
{"text":"Set to store the contents of the required sub - set","code":"$ s = array ( ) ;"}
{"text":"Insert the elements satisfying the conditions","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] % $ k != 0 or ! in_array ( floor ( $ a [ $ i ] \/ $ k ) , $ s ) ) array_push ( $ s , $ a [ $ i ] ) ; }"}
{"text":"Return the size of the set","code":"return sizeof ( $ s ) ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ) ; $ n = sizeof ( $ a ) ; $ k = 2 ; echo sizeSubSet ( $ a , $ k , $ n ) ; ? >"}
{"text":"Function to find the minimum number of shets","code":"< ? php function minimumSets ( $ s , $ y ) {"}
{"text":"Variable to count the number of sets","code":"$ cnt = 0 ; $ num = 0 ; $ l = strlen ( $ s ) ; $ f = 0 ;"}
{"text":"Iterate in the string","code":"for ( $ i = 0 ; $ i < $ l ; $ i ++ ) {"}
{"text":"Add the number to string","code":"$ num = $ num * 10 + ( $ s [ $ i ] - '0' ) ;"}
{"text":"Mark that we got a number","code":"if ( $ num <= $ y ) $ f = 1 ;"}
{"text":"else Every time it exceeds","code":"{"}
{"text":"Check if previous was anytime less than Y","code":"if ( $ f ) $ cnt += 1 ;"}
{"text":"Current number","code":"$ num = $ s [ $ i ] - '0' ; $ f = 0 ;"}
{"text":"Check for current number","code":"if ( $ num <= $ y ) $ f = 1 ; else $ num = 0 ; } }"}
{"text":"Check for last added number","code":"if ( $ f ) $ cnt += 1 ; return $ cnt ; }"}
{"text":"Driver Code","code":"$ s = \"1234\" ; $ y = 30 ; echo ( minimumSets ( $ s , $ y ) ) ; ? >"}
{"text":"Utility function to print the contents of the array","code":"< ? php function printArr ( $ b , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ b [ $ i ] . \" \u2581 \" ; }"}
{"text":"Function to build array B [ ]","code":"function ModifiedArray ( $ a , $ n ) {"}
{"text":"Lower and upper limits","code":"$ l = 0 ; $ r = PHP_INT_MAX ;"}
{"text":"To store the required array","code":"$ b = array ( 0 ) ;"}
{"text":"Apply greedy approach","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ ) { $ b [ $ i ] = max ( $ l , $ a [ $ i ] - $ r ) ; $ b [ $ n - $ i - 1 ] = $ a [ $ i ] - $ b [ $ i ] ; $ l = $ b [ $ i ] ; $ r = $ b [ $ n - $ i - 1 ] ; }"}
{"text":"Print the built array b [ ]","code":"printArr ( $ b , $ n ) ; }"}
{"text":"Driver code","code":"$ a = array ( 5 , 6 ) ; $ n = sizeof ( $ a ) ; ModifiedArray ( $ a , 2 * $ n ) ; ? >"}
{"text":"Function to calculate Maximum Subarray Sum or Kadane 's Algorithm","code":"< ? php function maxSubArraySum ( $ a , $ size ) { $ max_so_far = PHP_INT_MIN ; $ max_ending_here = 0 ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) { $ max_ending_here = $ max_ending_here + $ a [ $ i ] ; if ( $ max_so_far < $ max_ending_here ) $ max_so_far = $ max_ending_here ; if ( $ max_ending_here < 0 ) $ max_ending_here = 0 ; } return $ max_so_far ; }"}
{"text":"Function to find the maximum sum after given operations","code":"function maxSum ( $ a , $ n ) {"}
{"text":"To store sum of all elements","code":"$ S = 0 ;"}
{"text":"Maximum sum of a subarray","code":"$ S1 = maxSubArraySum ( $ a , $ n ) ;"}
{"text":"Calculate the sum of all elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ S += $ a [ $ i ] ; return ( 2 * $ S1 - $ S ) ; }"}
{"text":"Driver Code","code":"$ a = array ( -35 , 32 , -24 , 0 , 27 , -10 , 0 , -19 ) ;"}
{"text":"size of an array","code":"$ n = sizeof ( $ a ) ; echo ( maxSum ( $ a , $ n ) ) ;"}
{"text":"Function to minimize the difference between minimum and maximum elements","code":"< ? php function minimizeDiff ( & $ arr , $ n , $ k ) {"}
{"text":"Find max and min elements of the array","code":"$ max = max ( $ arr ) ; $ min = min ( $ arr ) ;"}
{"text":"Check whether the difference between the max and min element is less than or equal to k or not","code":"if ( ( $ max - $ min ) <= $ k ) { return ( $ max - $ min ) ; }"}
{"text":"Calculate average of max and min","code":"$ avg = ( $ max + $ min ) \/ 2 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If the array element is greater than the average then decrease it by k","code":"if ( $ arr [ $ i ] > $ avg ) $ arr [ $ i ] -= $ k ;"}
{"text":"If the array element is smaller than the average then increase it by k","code":"else $ arr [ $ i ] += $ k ; }"}
{"text":"Find max and min of the modified array","code":"$ max = max ( $ arr ) ; $ min = min ( $ arr ) ;"}
{"text":"return the new difference","code":"return ( $ max - $ min ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 16 , 12 , 9 , 20 ) ; $ n = 5 ; $ k = 3 ; echo \" Max \u2581 height \u2581 difference \u2581 = \u2581 \" . minimizeDiff ( $ arr , $ n , $ k ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php function maxLitres ( $ budget , $ plastic , $ glass , $ refund ) {"}
{"text":"if buying glass bottles is profitable","code":"if ( $ glass - $ refund < $ plastic ) {"}
{"text":"Glass bottles that can be bought","code":"$ ans = max ( ( int ) ( $ budget - $ refund ) \/ ( $ glass - $ refund ) , 0 ) ;"}
{"text":"Change budget according the bought bottles","code":"$ budget -= $ ans * ( $ glass - $ refund ) ;"}
{"text":"Plastic bottles that can be bought","code":"$ ans += ( int ) ( $ budget \/ $ plastic ) ; echo $ ans . \" STRNEWLINE \" ; }"}
{"text":"if only plastic bottles need to be bought","code":"else echo ( int ) ( $ budget \/ $ plastic ) . \" \" ; }"}
{"text":"Driver Code","code":"$ budget = 10 ; $ plastic = 11 ; $ glass = 9 ; $ refund = 8 ; maxLitres ( $ budget , $ plastic , $ glass , $ refund ) ; ? >"}
{"text":"Function to find number from given list for which value of the function is closest to A","code":"< ? php function leastValue ( $ P , $ A , $ N , $ a ) {"}
{"text":"Stores the final index","code":"$ ans = -1 ;"}
{"text":"Declaring a variable to store the minimum absolute difference","code":"$ tmp = PHP_INT_MAX ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"Finding F ( n )","code":"$ t = $ P - $ a [ $ i ] * 0.006 ;"}
{"text":"Updating the index of the answer if new absolute difference is less than tmp","code":"if ( abs ( $ t - $ A ) < $ tmp ) { $ tmp = abs ( $ t - $ A ) ; $ ans = $ i ; } } return $ a [ $ ans ] ; }"}
{"text":"Driver Code","code":"$ N = 2 ; $ P = 12 ; $ A = 5 ; $ a = array ( 1000 , 2000 ) ; print ( leastValue ( $ P , $ A , $ N , $ a ) ) ; ? >"}
{"text":"Function to find the permutation","code":"< ? php function findPermutation ( $ n ) {"}
{"text":"length of integer","code":"$ len = ceil ( log10 ( $ n ) ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) {"}
{"text":"if integer is even","code":"if ( $ n % 2 != 0 ) {"}
{"text":"return odd integer","code":"return ( int ) $ n ; } else {"}
{"text":"rotate integer","code":"$ n = ( $ n \/ 10 ) + ( $ n % 10 ) * pow ( 10 , $ len - $ i - 1 ) ; continue ; } }"}
{"text":"return - 1 in case no required permutation exists","code":"return -1 ; }"}
{"text":"Driver Code","code":"$ n = 132 ; echo findPermutation ( $ n ) ; ? >"}
{"text":"Function that returns true is selling of the tickets is possible","code":"< ? php function isSellingPossible ( $ n , $ a ) { $ c25 = 0 ; $ c50 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Nothing to return to the customer","code":"if ( $ a [ $ i ] == 25 ) $ c25 ++ ; else if ( $ a [ $ i ] == 50 ) { $ c50 ++ ;"}
{"text":"Check if 25 can be returned to customer .","code":"if ( $ c25 == 0 ) break ; $ c25 -- ; } else {"}
{"text":"Try returning one 50 and one 25","code":"if ( $ c50 > 0 && $ c25 > 0 ) { $ c50 -- ; $ c25 -- ; }"}
{"text":"Try returning three 25","code":"else if ( $ c25 >= 3 ) $ c25 -= 3 ; else break ; } }"}
{"text":"If the loop did not break , all the tickets were sold","code":"if ( $ i == $ n ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ a = array ( 25 , 25 , 50 , 100 ) ; $ n = sizeof ( $ a ) ; if ( isSellingPossible ( $ n , $ a ) ) { echo \" YES \" ; } else { echo \" NO \" ; } ? >"}
{"text":"Function to check if any cell can be visited more than once","code":"< ? php function checkIfOverlap ( $ str ) { $ len = strlen ( $ str ) ;"}
{"text":"Array to mark cells","code":"$ visited = array_fill ( 0 , $ len + 1 , NULL ) ;"}
{"text":"Traverse the string","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ str [ $ i ] == ' . ' ) continue ;"}
{"text":"Increase the visit count of the left and right cells within the array which can be visited","code":"for ( $ j = max ( 0 , $ i - $ str [ $ i ] ) ; $ j <= min ( $ len , $ i + $ str [ $ i ] ) ; $ j ++ ) $ visited [ $ j ] ++ ; } for ( $ i = 0 ; $ i < $ len ; $ i ++ ) {"}
{"text":"If any cell can be visited more than once , Return True","code":"if ( $ visited [ $ i ] > 1 ) { return true ; } } return false ; }"}
{"text":"Driver code","code":"$ str = \" . 2 . . 2 . \" ; if ( checkIfOverlap ( $ str ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Check if the digits follow the correct order","code":"< ? php function isCorrectOrder ( $ n ) { $ flag = true ;"}
{"text":"to store the previous digit","code":"$ prev = -1 ;"}
{"text":"pointer to tell what type of sequence are we dealing with","code":"$ type = -1 ; while ( $ n != 0 ) { if ( $ type == -1 ) { if ( $ prev == -1 ) { $ prev = $ n % 10 ; $ n = ( int ) $ n \/ 10 ; continue ; }"}
{"text":"check if we have same digit as the previous digit","code":"if ( $ prev == $ n % 10 ) { $ flag = false ; break ; }"}
{"text":"checking the peak point of the number","code":"if ( $ prev > $ n % 10 ) { $ type = 1 ; $ prev = $ n % 10 ; $ n = ( int ) $ n \/ 10 ; continue ; } $ prev = $ n % 10 ; $ n = ( int ) $ n \/ 10 ; } else {"}
{"text":"check if we have same digit as the previous digit","code":"if ( $ prev == $ n % 10 ) { $ flag = false ; break ; }"}
{"text":"check if the digit is greater than the previous one If true , then break from the loop as we are in descending order part","code":"if ( $ prev < $ n % 10 ) { $ flag = false ; break ; } $ prev = $ n % 10 ; $ n = ( int ) $ n \/ 10 ; } } return $ flag ; }"}
{"text":"Driver code","code":"$ n = 123454321 ; if ( isCorrectOrder ( $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Returns optimal value possible that a player can collect from an array of coins of size n . Note than n must be even","code":"< ? php function printCoins ( & $ arr , $ n ) {"}
{"text":"Find sum of odd positioned coins","code":"$ oddSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i += 2 ) $ oddSum += $ arr [ $ i ] ;"}
{"text":"Find sum of even positioned coins","code":"$ evenSum = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i += 2 ) $ evenSum += $ arr [ $ i ] ;"}
{"text":"Print even or odd coins depending upon which sum is greater .","code":"$ start = ( ( $ oddSum > $ evenSum ) ? 0 : 1 ) ; for ( $ i = $ start ; $ i < $ n ; $ i += 2 ) echo $ arr [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 8 , 15 , 3 , 7 ) ; $ n = sizeof ( $ arr1 ) ; printCoins ( $ arr1 , $ n ) ; echo \" STRNEWLINE \" ; $ arr2 = array ( 2 , 2 , 2 , 2 ) ; $ n = sizeof ( $ arr2 ) ; printCoins ( $ arr2 , $ n ) ; echo \" STRNEWLINE \" ; $ arr3 = array ( 20 , 30 , 2 , 2 , 2 , 10 ) ; $ n = sizeof ( $ arr3 ) ; printCoins ( $ arr3 , $ n ) ; ? >"}
{"text":"function to find the final cell position in the given matrix","code":"< ? php function finalPos ( $ command , $ n , $ x , $ y ) {"}
{"text":"to count up , down , left and cright movements","code":"$ cup ; $ cdown ; $ cleft ; $ cright ;"}
{"text":"to store the final coordinate position","code":"$ final_x ; $ final_y ; $ cup = $ cdown = $ cleft = $ cright = 0 ;"}
{"text":"traverse the command array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ command [ $ i ] == ' U ' ) $ cup ++ ; else if ( $ command [ $ i ] == ' D ' ) $ cdown ++ ; else if ( $ command [ $ i ] == ' L ' ) $ cleft ++ ; else if ( $ command [ $ i ] == ' R ' ) $ cright ++ ; }"}
{"text":"calculate final values","code":"$ final_x = $ x + ( $ cright - $ cleft ) ; $ final_y = $ y + ( $ cdown - $ cup ) ; echo \" Final \u2581 Position : \u2581 \" . \" ( \" . $ final_x . \" , \u2581 \" . $ final_y . \" ) \" ; }"}
{"text":"Driver Code","code":"$ command = \" DDLRULL \" ; $ n = strlen ( $ command ) ; $ x = 3 ; $ y = 4 ; finalPos ( $ command , $ n , $ x , $ y ) ;"}
{"text":"Function to find the smallest sum contiguous subarray","code":"< ? php function smallestSumSubarr ( $ arr , $ n ) {"}
{"text":"First invert the sign of the elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ arr [ $ i ] = - $ arr [ $ i ] ;"}
{"text":"Apply the normal Kadane algorithm but on the elements of the array having inverted sign","code":"$ sum_here = $ arr [ 0 ] ; $ max_sum = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ sum_here = max ( $ sum_here + $ arr [ $ i ] , $ arr [ $ i ] ) ; $ max_sum = max ( $ max_sum , $ sum_here ) ; }"}
{"text":"Invert the answer to get minimum val","code":"return ( -1 ) * $ max_sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , -4 , 2 , -3 , -1 , 7 , -5 ) ; $ n = sizeof ( $ arr ) ; echo \" Smallest \u2581 sum : \u2581 \" , smallestSumSubarr ( $ arr , $ n ) ; ? >"}
{"text":"Function to print the largest number","code":"< ? php function printLargest ( $ a , $ n ) {"}
{"text":"store the index of largest left most digit of elements","code":"$ max = -1 ; $ ind = -1 ;"}
{"text":"Iterate for all numbers","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ num = $ a [ $ i ] ;"}
{"text":"check for the the last digit","code":"while ( $ num ) { $ r = $ num % 10 ; $ num = ( int ) $ num \/ 10 ; if ( $ num == 0 ) {"}
{"text":"check for the largest left most digit","code":"if ( $ max < $ r ) { $ max = $ r ; $ ind = $ i ; } } } }"}
{"text":"print the rotation of array","code":"for ( $ i = $ ind ; $ i < $ n ; $ i ++ ) echo $ a [ $ i ] ;"}
{"text":"print the rotation of array","code":"for ( $ i = 0 ; $ i < $ ind ; $ i ++ ) echo $ a [ $ i ] ; }"}
{"text":"Driver Code","code":"$ a = array ( 54 , 546 , 548 , 60 ) ; $ n = sizeof ( $ a ) ; printLargest ( $ a , $ n ) ; ? >"}
{"text":"PHP program to make GCD of array a multiple of k .","code":"< ? php function MinOperation ( $ a , $ n , $ k ) { $ result = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) {"}
{"text":"If array value is not 1 and it is greater than k then we can increase the or decrease the remainder obtained by dividing k from the ith value of array so that we get the number which is either closer to k or its multiple","code":"if ( $ a [ $ i ] != 1 && $ a [ $ i ] > $ k ) { $ result = $ result + min ( $ a [ $ i ] % $ k , $ k - $ a [ $ i ] % $ k ) ; } else {"}
{"text":"Else we only have one choice which is to increment the value to make equal to k","code":"$ result = $ result + $ k - $ a [ $ i ] ; } } return $ result ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 5 , 6 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; $ k = 5 ; echo MinOperation ( $ arr , $ n , $ k ) ; ? >"}
{"text":"PHP program to find maximum product of a subset .","code":"< ? php function maxProductSubset ( $ a , $ n ) { if ( $ n == 1 ) return $ a [ 0 ] ;"}
{"text":"Find count of negative numbers , count of zeros , negative number with least absolute value and product of non - zero numbers","code":"$ max_neg = PHP_INT_MIN ; $ count_neg = 0 ; $ count_zero = 0 ; $ prod = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If number is 0 , we don 't  multiply it with product.","code":"if ( $ a [ $ i ] == 0 ) { $ count_zero ++ ; continue ; }"}
{"text":"Count negatives and keep track of negative number with least absolute value .","code":"if ( $ a [ $ i ] < 0 ) { $ count_neg ++ ; $ max_neg = max ( $ max_neg , $ a [ $ i ] ) ; } $ prod = $ prod * $ a [ $ i ] ; }"}
{"text":"If there are all zeros","code":"if ( $ count_zero == $ n ) return 0 ;"}
{"text":"If there are odd number of negative numbers","code":"if ( $ count_neg & 1 ) {"}
{"text":"Exceptional case : There is only negative and all other are zeros","code":"if ( $ count_neg == 1 && $ count_zero > 0 && $ count_zero + $ count_neg == $ n ) return 0 ;"}
{"text":"Otherwise result is product of all non - zeros divided by negative number with least absolute value .","code":"$ prod = $ prod \/ $ max_neg ; } return $ prod ; }"}
{"text":"Driver Code","code":"$ a = array ( -1 , -1 , -2 , 4 , 3 ) ; $ n = sizeof ( $ a ) ; echo maxProductSubset ( $ a , $ n ) ; ? >"}
{"text":"PHP program to find smallest number to find smallest number with N as sum of digits and divisible by 10 ^ N .","code":"< ? php function digitsNum ( $ N ) {"}
{"text":"If N = 0 the string will be 0","code":"if ( $ N == 0 ) echo \"0 STRNEWLINE \" ;"}
{"text":"If n is not perfectly divisible by 9 output the remainder","code":"if ( $ N % 9 != 0 ) echo ( $ N % 9 ) ;"}
{"text":"Print 9 N \/ 9 times","code":"for ( $ i = 1 ; $ i <= ( $ N \/ 9 ) ; ++ $ i ) echo \"9\" ;"}
{"text":"Append N zero 's to the number so  as to make it divisible by 10^N","code":"for ( $ i = 1 ; $ i <= $ N ; ++ $ i ) echo \"0\" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ N = 5 ; echo \" The \u2581 number \u2581 is \u2581 : \u2581 \" ; digitsNum ( $ N ) ; ? >"}
{"text":"To print vector along size","code":"< ? php function printVector ( $ v ) {"}
{"text":"Print vector size","code":"echo count ( $ v ) . \" STRNEWLINE \" ;"}
{"text":"Print vector elements","code":"for ( $ i = 0 ; $ i < count ( $ v ) ; $ i ++ ) echo $ v [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"To divide n in two groups such that absolute difference of their sum is minimum","code":"function findTwoGroup ( $ n ) {"}
{"text":"Find sum of all elements upto n","code":"$ sum = $ n * ( $ n + 1 ) \/ 2 ;"}
{"text":"Sum of elements of group1","code":"$ group1Sum = ( int ) ( $ sum \/ 2 ) ; $ group1 ; $ group2 ; $ x = 0 ; $ y = 0 ; for ( $ i = $ n ; $ i > 0 ; $ i -- ) {"}
{"text":"If sum is greater then or equal to 0 include i in group 1 otherwise include in group2","code":"if ( $ group1Sum - $ i >= 0 ) { $ group1 [ $ x ++ ] = $ i ;"}
{"text":"Decrease sum of group1","code":"$ group1Sum -= $ i ; } else { $ group2 [ $ y ++ ] = $ i ; } }"}
{"text":"Print both the groups","code":"printVector ( $ group1 ) ; printVector ( $ group2 ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; findTwoGroup ( $ n ) ; ? >"}
{"text":"Function to calculate max_difference","code":"< ? php function maxDifference ( $ arr , $ N , $ k ) { $ M ; $ S = 0 ; $ S1 = 0 ; $ max_difference = 0 ;"}
{"text":"Sum of the array","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ S += $ arr [ $ i ] ;"}
{"text":"Sort the array in descending order","code":"rsort ( $ arr ) ; $ M = max ( $ k , $ N - $ k ) ; for ( $ i = 0 ; $ i < $ M ; $ i ++ ) $ S1 += $ arr [ $ i ] ;"}
{"text":"Calculating max_difference","code":"$ max_difference = $ S1 - ( $ S - $ S1 ) ; return $ max_difference ; }"}
{"text":"Driver Code","code":"$ arr = array ( 8 , 4 , 5 , 2 , 10 ) ; $ N = count ( $ arr ) ; $ k = 2 ; echo maxDifference ( $ arr , $ N , $ k ) ; ? >"}
{"text":"Function to find the minimum product","code":"< ? php function minproduct ( $ a , $ b , $ n , $ k ) { $ diff = 0 ; $ res = 0 ; $ temp ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Find product of current elements and update result .","code":"$ pro = $ a [ $ i ] * $ b [ $ i ] ; $ res = $ res + $ pro ;"}
{"text":"If both product and b [ i ] are negative , we must increase value of a [ i ] to minimize result .","code":"if ( $ pro < 0 and $ b [ $ i ] < 0 ) $ temp = ( $ a [ $ i ] + 2 * $ k ) * $ b [ $ i ] ;"}
{"text":"If both product and a [ i ] are negative , we must decrease value of a [ i ] to minimize result .","code":"else if ( $ pro < 0 and $ a [ $ i ] < 0 ) $ temp = ( $ a [ $ i ] - 2 * $ k ) * $ b [ $ i ] ;"}
{"text":"Similar to above two cases for positive product .","code":"else if ( $ pro > 0 and $ a [ $ i ] < 0 ) $ temp = ( $ a [ $ i ] + 2 * $ k ) * $ b [ $ i ] ; else if ( $ pro > 0 and $ a [ $ i ] > 0 ) $ temp = ( $ a [ $ i ] - 2 * $ k ) * $ b [ $ i ] ;"}
{"text":"Check if current difference becomes higher than the maximum difference so far .","code":"$ d = abs ( $ pro - $ temp ) ; if ( $ d > $ diff ) $ diff = $ d ; } return $ res - $ diff ; }"}
{"text":"Driver Code","code":"$ a = array ( 2 , 3 , 4 , 5 , 4 , 0 ) ; $ b = array ( 3 , 4 , 2 , 3 , 2 ) ; $ n = 5 ; $ k = 3 ; echo minproduct ( $ a , $ b , $ n , $ k ) ; ? >"}
{"text":"function to calculate the maximum number of composite numbers adding upto n","code":"< ? php function c_ount ( $ n ) {"}
{"text":"4 is the smallest composite number","code":"if ( $ n < 4 ) return -1 ;"}
{"text":"stores the remainder when n is divided by 4","code":"$ rem = $ n % 4 ;"}
{"text":"if remainder is 0 , then it is perfectly divisible by 4.","code":"if ( $ rem == 0 ) return $ n \/ 4 ;"}
{"text":"if the remainder is 1","code":"if ( $ rem == 1 ) {"}
{"text":"If the number is less then 9 , that is 5 , then it cannot be expressed as 4 is the only composite number less than 5","code":"if ( $ n < 9 ) return -1 ;"}
{"text":"If the number is greater then 8 , and has a remainder of 1 , then express n as n - 9 a and it is perfectly divisible by 4 and for 9 , count 1.","code":"return ( $ n - 9 ) \/ 4 + 1 ; }"}
{"text":"When remainder is 2 , just subtract 6 from n , so that n is perfectly divisible by 4 and count 1 for 6 which is subtracted .","code":"if ( $ rem == 2 ) return ( $ n - 6 ) \/ 4 + 1 ;"}
{"text":"if the number is 7 , 11 which cannot be expressed as sum of any composite numbers","code":"if ( $ rem == 3 ) { if ( $ n < 15 ) return -1 ;"}
{"text":"when the remainder is 3 , then subtract 15 from it and n becomes perfectly divisible by 4 and we add 2 for 9 and 6 , which is getting subtracted to make n perfectly divisible by 4.","code":"return ( $ n - 15 ) \/ 4 + 2 ; } }"}
{"text":"driver program to test the above function","code":"$ n = 90 ; echo c_ount ( $ n ) , \" STRNEWLINE \" ; $ n = 143 ; echo c_ount ( $ n ) ; ? >"}
{"text":"function for min rotation","code":"< ? php function minRotation ( $ input , $ unlock_code ) { $ rotation = 0 ; $ input_digit ; $ code_digit ;"}
{"text":"iterate till input and unlock code become 0","code":"while ( $ input $ unlock_code ) {"}
{"text":"input and unlock last digit as reminder","code":"$ input_digit = $ input % 10 ; $ code_digit = $ unlock_code % 10 ;"}
{"text":"find min rotation","code":"$ rotation += min ( abs ( $ input_digit - $ code_digit ) , 10 - abs ( $ input_digit - $ code_digit ) ) ;"}
{"text":"update code and input","code":"$ input \/= 10 ; $ unlock_code \/= 10 ; } return $ rotation ; }"}
{"text":"Driver Code","code":"$ input = 28756 ; $ unlock_code = 98234 ; echo \" Minimum \u2581 Rotation \u2581 = \u2581 \" , minRotation ( $ input , $ unlock_code ) ; ? >"}
{"text":"Converts coin [ ] to prefix sum array","code":"< ? php function preprocess ( & $ coin , $ n ) {"}
{"text":"sort the coins value","code":"sort ( $ coin ) ;"}
{"text":"Maintain prefix sum array","code":"for ( $ i = 1 ; $ i <= $ n - 1 ; $ i ++ ) $ coin [ $ i ] += $ coin [ $ i - 1 ] ; }"}
{"text":"Function to calculate min cost when we can get k extra coins after paying cost of one .","code":"function minCost ( & $ coin , $ n , $ k ) {"}
{"text":"calculate no . of coins needed","code":"$ coins_needed = ceil ( 1.0 * $ n \/ ( $ k + 1 ) ) ;"}
{"text":"return sum of from prefix array","code":"return $ coin [ $ coins_needed - 1 ] ; }"}
{"text":"Driver Code","code":"$ coin = array ( 8 , 5 , 3 , 10 , 2 , 1 , 15 , 25 ) ; $ n = sizeof ( $ coin ) ; preprocess ( $ coin , $ n ) ; $ k = 3 ; echo minCost ( $ coin , $ n , $ k ) . \" STRNEWLINE \" ; $ k = 7 ; echo minCost ( $ coin , $ n , $ k ) . \" STRNEWLINE \" ; ? >"}
{"text":"This function does k operations on array in a way that maximize the array sum . index -- > stores the index of current minimum element for j 'th operation","code":"< ? php function maximumSum ( $ arr , $ n , $ k ) { $ INT_MAX = 0 ;"}
{"text":"Modify array K number of times","code":"for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) { $ min = $ INT_MAX ; $ index = -1 ;"}
{"text":"Find minimum element in array for current operation and modify it i . e ; arr [ j ] -- > - arr [ j ]","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ arr [ $ j ] < $ min ) { $ min = $ arr [ $ j ] ; $ index = $ j ; } }"}
{"text":"this the condition if we find 0 as minimum element , so it will useless to replace 0 by - ( 0 ) for remaining operations","code":"if ( $ min == 0 ) break ;"}
{"text":"Modify element of array","code":"$ arr [ $ index ] = - $ arr [ $ index ] ; }"}
{"text":"Calculate sum of array","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] ; return $ sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( -2 , 0 , 5 , -1 , 2 ) ; $ k = 4 ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo maximumSum ( $ arr , $ n , $ k ) ; ? >"}
{"text":"PHP program to implement above approach","code":"< ? php $ maxLen = 10 ;"}
{"text":"variable to store states of dp","code":"$ dp = array_fill ( 0 , $ GLOBALS [ ' axLen ' , 0 ) ;"}
{"text":"variable to check if a given state has been solved","code":"$ v = array_fill ( 0 , $ GLOBALS [ ' axLen ' , 0 ) ;"}
{"text":"Function to find the maximum sum subsequence such that no two elements are adjacent","code":"function maxSum ( $ arr , $ i , $ n ) {"}
{"text":"Base case","code":"if ( $ i >= $ n ) return 0 ;"}
{"text":"To check if a state has been solved","code":"if ( $ GLOBALS [ ' v ' ] [ $ i ] ) return $ GLOBALS [ ' dp ' ] [ $ i ] ; $ GLOBALS [ ' v ' ] [ $ i ] = 1 ;"}
{"text":"Required recurrence relation","code":"$ GLOBALS [ ' dp ' ] [ $ i ] = max ( maxSum ( $ arr , $ i + 1 , $ n ) , $ arr [ $ i ] + maxSum ( $ arr , $ i + 2 , $ n ) ) ;"}
{"text":"Returning the value","code":"return $ GLOBALS [ ' dp ' ] [ $ i ] ; }"}
{"text":"Driver code","code":"$ arr = array ( 12 , 9 , 7 , 33 ) ; $ n = count ( $ arr ) ; echo maxSum ( $ arr , 0 , $ n ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 5 ;"}
{"text":"Function to return the maximum sum","code":"function func ( $ idx , $ cur , $ a , $ dp , $ n , $ x ) {"}
{"text":"Base case","code":"if ( $ idx == $ n ) return 0 ;"}
{"text":"If already calculated","code":"if ( $ dp [ $ idx ] [ $ cur ] != -1 ) return $ dp [ $ idx ] [ $ cur ] ; $ ans = 0 ;"}
{"text":"If no elements have been chosen","code":"if ( $ cur == 0 ) {"}
{"text":"Do not choose any element and use Kadane 's algorithm by taking max","code":"$ ans = max ( $ ans , $ a [ $ idx ] + func ( $ idx + 1 , 0 , $ a , $ dp , $ n , $ x ) ) ;"}
{"text":"Choose the sub - array and multiply x","code":"$ ans = max ( $ ans , $ x * $ a [ $ idx ] + func ( $ idx + 1 , 1 , $ a , $ dp , $ n , $ x ) ) ; } else if ( $ cur == 1 ) {"}
{"text":"Choose the sub - array and multiply x","code":"$ ans = max ( $ ans , $ x * $ a [ $ idx ] + func ( $ idx + 1 , 1 , $ a , $ dp , $ n , $ x ) ) ;"}
{"text":"End the sub - array multiplication","code":"$ ans = max ( $ ans , $ a [ $ idx ] + func ( $ idx + 1 , 2 , $ a , $ dp , $ n , $ x ) ) ; } else"}
{"text":"No more multiplication","code":"$ ans = max ( $ ans , $ a [ $ idx ] + func ( $ idx + 1 , 2 , $ a , $ dp , $ n , $ x ) ) ;"}
{"text":"Memoize and return the answer","code":"return $ dp [ $ idx ] [ $ cur ] = $ ans ; }"}
{"text":"Function to get the maximum sum","code":"function getMaximumSum ( $ a , $ n , $ x ) {"}
{"text":"Initialize dp with - 1","code":"$ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < 3 ; $ j ++ ) { $ dp [ $ i ] [ $ j ] = -1 ; } }"}
{"text":"Iterate from every position and find the maximum sum which is possible","code":"$ maxi = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ maxi = max ( $ maxi , func ( $ i , 0 , $ a , $ dp , $ n , $ x ) ) ; return $ maxi ; }"}
{"text":"Driver code","code":"$ a = array ( -3 , 8 , -2 , 1 , -6 ) ; $ n = count ( $ a ) ; $ x = -1 ; echo getMaximumSum ( $ a , $ n , $ x ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 100 ;"}
{"text":"Pre - processing function","code":"function pre_process ( $ dp , $ s ) {"}
{"text":"Get the size of the string","code":"$ n = strlen ( $ s ) ;"}
{"text":"Initially mark every position as false","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = false ; }"}
{"text":"For the length","code":"for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"Iterate for every index with length j","code":"for ( $ i = 0 ; $ i <= $ n - $ j ; $ i ++ ) {"}
{"text":"If the length is less than 2","code":"if ( $ j <= 2 ) {"}
{"text":"If characters are equal","code":"if ( $ s [ $ i ] == $ s [ $ i + $ j - 1 ] ) $ dp [ $ i ] [ $ i + $ j - 1 ] = true ; }"}
{"text":"Check for equal","code":"else if ( $ s [ $ i ] == $ s [ $ i + $ j - 1 ] ) $ dp [ $ i ] [ $ i + $ j - 1 ] = $ dp [ $ i + 1 ] [ $ i + $ j - 2 ] ; } } return $ dp ; }"}
{"text":"Function to return the number of pairs","code":"function countPairs ( $ s ) {"}
{"text":"Create the dp table initially","code":"$ dp = array ( array ( ) ) ; $ dp = pre_process ( $ dp , $ s ) ; $ n = strlen ( $ s ) ;"}
{"text":"Declare the left array","code":"$ left = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"Declare the right array","code":"$ right = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"Initially left [ 0 ] is 1","code":"$ left [ 0 ] = 1 ;"}
{"text":"Count the number of palindrome pairs to the left","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) { if ( $ dp [ $ j ] [ $ i ] == 1 ) $ left [ $ i ] ++ ; } }"}
{"text":"Initially right most as 1","code":"$ right [ $ n - 1 ] = 1 ;"}
{"text":"Count the number of palindrome pairs to the right","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { $ right [ $ i ] = $ right [ $ i + 1 ] ; for ( $ j = $ n - 1 ; $ j >= $ i ; $ j -- ) { if ( $ dp [ $ i ] [ $ j ] == 1 ) $ right [ $ i ] ++ ; } } $ ans = 0 ;"}
{"text":"Count the number of pairs","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) $ ans += $ left [ $ i ] * $ right [ $ i + 1 ] ; return $ ans ; }"}
{"text":"Driver code","code":"$ s = \" abacaba \" ; echo countPairs ( $ s ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 100 ;"}
{"text":"Pre - processing function","code":"function pre_process ( $ dp , $ s ) {"}
{"text":"Get the size of the string","code":"$ n = strlen ( $ s ) ;"}
{"text":"Initially mark every position as false","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = false ; }"}
{"text":"For the length","code":"for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"Iterate for every index with length j","code":"for ( $ i = 0 ; $ i <= $ n - $ j ; $ i ++ ) {"}
{"text":"If the length is less than 2","code":"if ( $ j <= 2 ) {"}
{"text":"If characters are equal","code":"if ( $ s [ $ i ] == $ s [ $ i + $ j - 1 ] ) $ dp [ $ i ] [ $ i + $ j - 1 ] = true ; }"}
{"text":"Check for equal","code":"else if ( $ s [ $ i ] == $ s [ $ i + $ j - 1 ] ) $ dp [ $ i ] [ $ i + $ j - 1 ] = $ dp [ $ i + 1 ] [ $ i + $ j - 2 ] ; } } return $ dp ; }"}
{"text":"Function to answer every query in O ( 1 )","code":"function answerQuery ( $ l , $ r , $ dp ) { if ( $ dp [ $ l ] [ $ r ] ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ s = \" abaaab \" ; $ dp = array ( array ( ) ) ; $ dp = pre_process ( $ dp , $ s ) ; $ queries = array ( array ( 0 , 1 ) , array ( 1 , 5 ) ) ; $ q = count ( $ queries ) ; for ( $ i = 0 ; $ i < $ q ; $ i ++ ) answerQuery ( $ queries [ $ i ] [ 0 ] , $ queries [ $ i ] [ 1 ] , $ dp ) ; ? >"}
{"text":"PHP program to find the length of the longest increasing sub sequence from the given array such that no two adjacent elements are co prime","code":"< ? php $ N = 100005 ;"}
{"text":"Function to find the length of the longest increasing sub sequence from the given array such that no two adjacent elements are co prime","code":"function LIS ( $ a , $ n ) {"}
{"text":"To store dp and d value","code":"$ dp = array ( ) ; $ d = array ( ) ;"}
{"text":"To store required answer","code":"$ ans = 0 ;"}
{"text":"For all elements in the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Initially answer is one","code":"$ dp [ $ a [ $ i ] ] = 1 ;"}
{"text":"For all it 's divisors","code":"for ( $ j = 2 ; $ j * $ j <= $ a [ $ i ] ; $ j ++ ) { if ( $ a [ $ i ] % $ j == 0 ) {"}
{"text":"Update the dp value","code":"$ dp [ $ a [ $ i ] ] = max ( $ dp [ $ a [ $ i ] ] , $ dp [ $ d [ $ j ] ] + 1 ) ; $ dp [ $ a [ $ i ] ] = max ( $ dp [ $ a [ $ i ] ] , $ dp [ $ d [ $ a [ $ i ] \/ $ j ] ] + 1 ) ;"}
{"text":"Update the divisor value","code":"$ d [ $ j ] = $ a [ $ i ] ; $ d [ $ a [ $ i ] \/ $ j ] = $ a [ $ i ] ; } }"}
{"text":"Check for required answer","code":"$ ans = max ( $ ans , $ dp [ $ a [ $ i ] ] ) ;"}
{"text":"Update divisor of a [ i ]","code":"$ d [ $ a [ $ i ] ] = $ a [ $ i ] ; }"}
{"text":"Return required answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 3 , 4 , 5 , 6 ) ; $ n = sizeof ( $ a ) ; echo LIS ( $ a , $ n ) ; ? >"}
{"text":"Function to return the sum of both the diagonal elements of the required matrix","code":"< ? php function findSum ( $ n ) {"}
{"text":"Array to store sum of diagonal elements","code":"$ dp = array ( ) ;"}
{"text":"Base cases","code":"$ dp [ 1 ] = 1 ; $ dp [ 0 ] = 0 ;"}
{"text":"Computing the value of dp","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ dp [ $ i ] = ( 4 * ( $ i * $ i ) ) - 6 * ( $ i - 1 ) + $ dp [ $ i - 2 ] ; } return $ dp [ $ n ] ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo findSum ( $ n ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ n = 3 ; $ MAX = 30 ;"}
{"text":"To store the states of dp","code":"$ dp = array ( $ n , $ n , $ MAX ) ;"}
{"text":"To check whether a particular state of dp has been solved","code":"$ v = array ( $ n , $ n , $ MAX ) ;"}
{"text":"Function to find the ways using memoization","code":"function findCount ( $ mat , $ i , $ j , $ m ) {"}
{"text":"Base cases","code":"if ( $ i == 0 && $ j == 0 ) { if ( $ m == $ mat [ 0 ] [ 0 ] ) return 1 ; else return 0 ; }"}
{"text":"If required score becomes negative","code":"if ( $ m < 0 ) return 0 ; if ( $ i < 0 $ j < 0 ) return 0 ;"}
{"text":"If current state has been reached before","code":"if ( $ v [ $ i ] [ $ j ] [ $ m ] ) return $ dp [ $ i ] [ $ j ] [ $ m ] ;"}
{"text":"Set current state to visited","code":"$ v [ $ i ] [ $ j ] [ $ m ] = true ; $ dp [ $ i ] [ $ j ] [ $ m ] = findCount ( $ mat , $ i - 1 , $ j , $ m - $ mat [ $ i ] [ $ j ] ) + findCount ( $ mat , $ i , $ j - 1 , $ m - $ mat [ $ i ] [ $ j ] ) ; return $ dp [ $ i ] [ $ j ] [ $ m ] ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( 1 , 1 , 1 ) , array ( 1 , 1 , 1 ) , array ( 1 , 1 , 1 ) ) ; $ m = 5 ; echo ( findCount ( $ mat , $ n - 1 , $ n - 1 , $ m ) ) ;"}
{"text":"PHP implementation of the approach","code":"< ? php $ GLOBALS [ ' N ' ] = 10 ;"}
{"text":"Function to return the minimum number of delete operations","code":"function findMinimumDeletion ( $ l , $ r , $ dp , $ s ) { if ( $ l > $ r ) return 0 ; if ( $ l == $ r ) return 1 ; if ( $ dp [ $ l ] [ $ r ] != -1 ) return $ dp [ $ l ] [ $ r ] ;"}
{"text":"When a single character is deleted","code":"$ res = 1 + findMinimumDeletion ( $ l + 1 , $ r , $ dp , $ s ) ;"}
{"text":"When a group of consecutive characters are deleted if any of them matches","code":"for ( $ i = $ l + 1 ; $ i <= $ r ; ++ $ i ) {"}
{"text":"When both the characters are same then delete the letters in between them","code":"if ( $ s [ $ l ] == $ s [ $ i ] ) $ res = min ( $ res , findMinimumDeletion ( $ l + 1 , $ i - 1 , $ dp , $ s ) + findMinimumDeletion ( $ i , $ r , $ dp , $ s ) ) ; }"}
{"text":"Memoize","code":"return $ dp [ $ l ] [ $ r ] = $ res ; }"}
{"text":"Driver code","code":"$ s = \" abcddcba \" ; $ n = strlen ( $ s ) ; $ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) for ( $ j = 0 ; $ j < $ GLOBALS [ ' N ' ] ; $ j ++ ) $ dp [ $ i ] [ $ j ] = -1 ; echo findMinimumDeletion ( 0 , $ n - 1 , $ dp , $ s ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 5005 ;"}
{"text":"To store vertices and value of k","code":"$ gr = array_fill ( 0 , $ N , array ( ) ) ;"}
{"text":"To store number vertices at a level i","code":"$ d = array_fill ( 0 , $ N , array_fill ( 0 , 505 , 0 ) ) ;"}
{"text":"To store the final answer","code":"$ ans = 0 ;"}
{"text":"Function to add an edge between two nodes","code":"function Add_edge ( $ x , $ y ) { global $ gr ; array_push ( $ gr [ $ x ] , $ y ) ; array_push ( $ gr [ $ y ] , $ x ) ; }"}
{"text":"Function to find the number of distinct pairs of the vertices which have a distance of exactly k in a tree","code":"function dfs ( $ v , $ par ) { global $ d , $ ans , $ k , $ gr ;"}
{"text":"At level zero vertex itself is counted","code":"$ d [ $ v ] [ 0 ] = 1 ; foreach ( $ gr [ $ v ] as & $ i ) { if ( $ i != $ par ) { dfs ( $ i , $ v ) ;"}
{"text":"Count the pair of vertices at distance k","code":"for ( $ j = 1 ; $ j <= $ k ; $ j ++ ) $ ans += $ d [ $ i ] [ $ j - 1 ] * $ d [ $ v ] [ $ k - $ j ] ;"}
{"text":"For all levels count vertices","code":"for ( $ j = 1 ; $ j <= $ k ; $ j ++ ) $ d [ $ v ] [ $ j ] += $ d [ $ i ] [ $ j - 1 ] ; } } }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 2 ;"}
{"text":"Add edges","code":"Add_edge ( 1 , 2 ) ; Add_edge ( 2 , 3 ) ; Add_edge ( 3 , 4 ) ; Add_edge ( 2 , 5 ) ;"}
{"text":"Function call","code":"dfs ( 1 , 0 ) ;"}
{"text":"Required answer","code":"echo $ ans ; ? >"}
{"text":"Function to calculate the sum of XOR of all subarrays","code":"< ? php function findXorSum ( $ arr , $ n ) {"}
{"text":"variable to store the final sum","code":"$ sum = 0 ;"}
{"text":"multiplier","code":"$ mul = 1 ; for ( $ i = 0 ; $ i < 30 ; $ i ++ ) {"}
{"text":"variable to store number of sub - arrays with odd number of elements with ith bits starting from the first element to the end of the array","code":"$ c_odd = 0 ;"}
{"text":"variable to check the status of the odd - even count while calculating c_odd","code":"$ odd = 0 ;"}
{"text":"loop to calculate initial value of c_odd","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( ( $ arr [ $ j ] & ( 1 << $ i ) ) > 0 ) $ odd = ( ! $ odd ) ; if ( $ odd ) $ c_odd ++ ; }"}
{"text":"loop to iterate through all the elements of the array and update sum","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ sum += ( $ mul * $ c_odd ) ; if ( ( $ arr [ $ j ] & ( 1 << $ i ) ) > 0 ) $ c_odd = ( $ n - $ j - $ c_odd ) ; }"}
{"text":"updating the multiplier","code":"$ mul *= 2 ; }"}
{"text":"returning the sum","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 8 , 13 ) ; $ n = sizeof ( $ arr ) ; echo findXorSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to check all combinations","code":"< ? php function checkCombinations ( $ a , $ n ) {"}
{"text":"Generate all power sets","code":"$ pow_set_size = pow ( 2 , $ n ) ;"}
{"text":"Check for every combination","code":"for ( $ counter = 0 ; $ counter < $ pow_set_size ; $ counter ++ ) {"}
{"text":"Store sum for all combinations","code":"$ sum = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Check if jth bit in the counter is set If set then print jth element from set","code":"if ( $ counter & ( 1 << $ j ) )"}
{"text":"$sum += $a [ $j ] ; if set then consider as ' + '","code":"else"}
{"text":"$sum -= $a [ $j ] ; else consider as ' - '","code":"}"}
{"text":"If we can get back to 0","code":"if ( $ sum % ( 24 * 60 ) == 0 ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ a = array ( 60 , 60 , 120 ) ; $ n = sizeof ( $ a ) ; if ( checkCombinations ( $ a , $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to calculate probability","code":"< ? php function calcProbability ( $ M , $ k ) { $ m = 4 ; $ n = 4 ;"}
{"text":"declare dp [ ] [ ] and sum [ ]","code":"$ dp = array ( ) ; $ sum = array ( ) ;"}
{"text":"precalculate the first row","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ dp [ 0 ] [ $ j ] = $ M [ 0 ] [ $ j ] ; $ sum [ 0 ] += $ dp [ 0 ] [ $ j ] ; }"}
{"text":"calculate the probability for each element and update dp table","code":"for ( $ i = 1 ; $ i < $ m ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ dp [ $ i ] [ $ j ] += $ dp [ $ i - 1 ] [ $ j ] \/ $ sum [ $ i - 1 ] + $ M [ $ i ] [ $ j ] ; $ sum [ $ i ] += $ dp [ $ i ] [ $ j ] ; } }"}
{"text":"return result","code":"return $ dp [ $ n - 1 ] [ $ k - 1 ] \/ $ sum [ $ n - 1 ] ; }"}
{"text":"Driver code","code":"$ M = array ( array ( 1 , 1 , 0 , 3 ) , array ( 2 , 3 , 2 , 3 ) , array ( 9 , 3 , 0 , 2 ) , array ( 2 , 3 , 2 , 2 ) ) ; $ k = 3 ; echo calcProbability ( $ M , $ k ) ; ? >"}
{"text":"Function to find the maximum number of numbers divisible by 3 in a large number","code":"< ? php function MaximumNumbers ( $ s ) {"}
{"text":"store size of the string","code":"$ n = strlen ( $ s ) ;"}
{"text":"Stores last index of a remainder","code":"$ remIndex = array_fill ( 0 , 3 , -1 ) ;"}
{"text":"last visited place of remainder zero is at 0.","code":"$ remIndex [ 0 ] = 0 ;"}
{"text":"To store result from 0 to i","code":"$ res = array ( ) ; $ r = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"get the remainder","code":"$ r = ( $ r + $ s [ $ i - 1 ] - '0' ) % 3 ;"}
{"text":"Get maximum res [ i ] value","code":"$ res [ $ i ] = $ res [ $ i - 1 ] ; if ( $ remIndex [ $ r ] != -1 ) $ res [ $ i ] = max ( $ res [ $ i ] , $ res [ $ remIndex [ $ r ] ] + 1 ) ; $ remIndex [ $ r ] = $ i + 1 ; } return $ res [ $ n ] ; }"}
{"text":"Driver Code","code":"$ s = \"12345\" ; print ( MaximumNumbers ( $ s ) ) # This  code is contributed by Ryuga NEW_LINE ? >"}
{"text":"PHP program to count the number of paths","code":"< ? php $ max = 4 ; $ c = 2 ;"}
{"text":"Function to find the number of paths","code":"function countPaths ( $ sum , $ get , $ m , $ n , & $ dp ) { global $ max , $ c ;"}
{"text":"If the summation is more than X","code":"if ( $ sum < 0 ) return 0 ;"}
{"text":"If exactly X weights have reached","code":"if ( $ sum == 0 ) return $ get ;"}
{"text":"Already visited","code":"if ( $ dp [ $ sum ] [ $ get ] != -1 ) return $ dp [ $ sum ] [ $ get ] ;"}
{"text":"Count paths","code":"$ res = 0 ;"}
{"text":"Traverse in all paths","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If the edge weight is M","code":"if ( $ i == $ m ) $ res += countPaths ( $ sum - $ i , 1 , $ m , $ n , $ dp ) ;"}
{"text":"else Edge 's weight is not M","code":"$ res += countPaths ( $ sum - $ i , $ get , $ m , $ n , $ dp ) ; } $ dp [ $ sum ] [ $ get ] = $ res ; return $ dp [ $ sum ] [ $ get ] ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ m = 2 ; $ x = 3 ; $ dp = array_fill ( 0 , $ max + 1 , NULL ) ;"}
{"text":"Initialized the DP array with - 1","code":"for ( $ i = 0 ; $ i <= $ max ; $ i ++ ) for ( $ j = 0 ; $ j < 2 ; $ j ++ ) $ dp [ $ i ] [ $ j ] = -1 ;"}
{"text":"Function to count paths","code":"echo countPaths ( $ x , 0 , $ m , $ n , $ dp ) ; ? >"}
{"text":"A global array to store factorial","code":"< ? php $ MAX_K = 15 ; $ fac [ $ MAX_K ] = array ( ) ;"}
{"text":"Function to calculate the factorials of all the numbers upto k","code":"function factorial ( $ k ) { global $ fac ; $ fac [ 0 ] = 1 ; for ( $ i = 1 ; $ i <= $ k + 1 ; $ i ++ ) { $ fac [ $ i ] = ( $ i * $ fac [ $ i - 1 ] ) ; } }"}
{"text":"Function to return the binomial coefficient","code":"function bin ( $ a , $ b ) { global $ MAX_K ; global $ fac ;"}
{"text":"nCr = ( n ! * ( n - r ) ! ) \/ r !","code":"$ ans = ( ( $ fac [ $ a ] ) \/ ( $ fac [ $ a - $ b ] * $ fac [ $ b ] ) ) ; return $ ans ; }"}
{"text":"Function to return the sum of kth powers of n natural numbers","code":"function sumofn ( $ n , $ k ) { $ p = 0 ; $ num1 ; $ temp ; $ arr [ 1000 ] = array ( ) ; for ( $ j = 1 ; $ j <= $ k ; $ j ++ ) {"}
{"text":"When j is unity","code":"if ( $ j == 1 ) { $ num1 = ( $ n * ( $ n + 1 ) ) \/ 2 ;"}
{"text":"Calculating sum ( n ^ 1 ) of unity powers of n ; storing sum ( n ^ 1 ) for sum ( n ^ 2 )","code":"$ arr [ $ p ++ ] = $ num1 ;"}
{"text":"If k = 1 then temp is the result","code":"$ temp = $ num1 ; } else { $ temp = ( pow ( $ n + 1 , $ j + 1 ) - 1 - $ n ) ;"}
{"text":"For finding sum ( n ^ k ) removing 1 and n * kCk from ( n + 1 ) ^ k","code":"for ( $ s = 1 ; $ s < $ j ; $ s ++ ) {"}
{"text":"Removing all kC2 * sum ( n ^ ( k - 2 ) ) + ... + kCk - 1 * ( sum ( n ^ ( k - ( k - 1 ) )","code":"$ temp = $ temp - ( $ arr [ $ j - $ s - 1 ] * bin ( $ j + 1 , $ s + 1 ) ) ; } $ temp = $ temp \/ ( $ j + 1 ) ;"}
{"text":"Storing the result for next sum of next powers of k","code":"$ arr [ $ p ++ ] = $ temp ; } } $ temp = $ arr [ $ p - 1 ] ; return $ temp ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 2 ; factorial ( $ k ) ; echo sumofn ( $ n , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ GLOBALS [ ' max ' ] = 4 ;"}
{"text":"Recursive function to find the required number of ways","code":"function countWays ( $ index , $ cnt , $ dp , $ n , $ m , $ k ) {"}
{"text":"When all positions are filled","code":"if ( $ index == $ n ) {"}
{"text":"If adjacent pairs are exactly K","code":"if ( $ cnt == $ k ) return 1 ; else return 0 ; }"}
{"text":"If already calculated","code":"if ( $ dp [ $ index ] [ $ cnt ] != -1 ) return $ dp [ $ index ] [ $ cnt ] ; $ ans = 0 ;"}
{"text":"Next position filled with same color","code":"$ ans += countWays ( $ index + 1 , $ cnt , $ dp , $ n , $ m , $ k ) ;"}
{"text":"Next position filled with different color So there can be m - 1 different colors","code":"$ ans += ( $ m - 1 ) * countWays ( $ index + 1 , $ cnt + 1 , $ dp , $ n , $ m , $ k ) ; $ dp [ $ index ] [ $ cnt ] = $ ans ; return $ dp [ $ index ] [ $ cnt ] ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ m = 3 ; $ k = 2 ; $ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ n + 1 ; $ i ++ ) for ( $ j = 0 ; $ j < $ GLOBALS [ ' max ' ] ; $ j ++ ) $ dp [ $ i ] [ $ j ] = -1 ; echo $ m * countWays ( 1 , 0 , $ dp , $ n , $ m , $ k ) ; ? >"}
{"text":"Computes value of first fibonacci numbers and stores the even - indexed sum","code":"< ? php function calculateEvenSum ( $ n ) { if ( $ n <= 0 ) return 0 ; $ fibo [ 2 * $ n + 1 ] = array ( ) ; $ fibo [ 0 ] = 0 ; $ fibo [ 1 ] = 1 ;"}
{"text":"Initialize result","code":"$ sum = 0 ;"}
{"text":"Add remaining terms","code":"for ( $ i = 2 ; $ i <= 2 * $ n ; $ i ++ ) { $ fibo [ $ i ] = $ fibo [ $ i - 1 ] + $ fibo [ $ i - 2 ] ;"}
{"text":"For even indices","code":"if ( $ i % 2 == 0 ) $ sum += $ fibo [ $ i ] ; }"}
{"text":"Return the alternting sum","code":"return $ sum ; }"}
{"text":"Get n","code":"$ n = 8 ;"}
{"text":"Find the even - indiced sum","code":"echo \" Even \u2581 indexed \u2581 Fibonacci \u2581 Sum \u2581 upto \u2581 \" . $ n . \" \u2581 terms : \u2581 \" . calculateEvenSum ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"32768 = 2 ^ 15","code":"< ? php $ MAX = 32768 ;"}
{"text":"Array to store Sequence up to 2 ^ 16 = 65536","code":"$ arr = array_fill ( 0 , 2 * $ MAX , 0 ) ;"}
{"text":"Utility function to pre - compute odd numbers in ith row of Pascals 's triangle","code":"function gouldSequence ( ) { global $ MAX , $ arr ;"}
{"text":"First term of the Sequence is 1","code":"$ arr [ 0 ] = 1 ;"}
{"text":"Initialize i to 1","code":"$ i = 1 ;"}
{"text":"Initialize p to 1 ( i . e 2 ^ i ) in each iteration i will be pth power of 2","code":"$ p = 1 ;"}
{"text":"loop to generate gould 's Sequence","code":"while ( $ i <= $ MAX ) {"}
{"text":"i is pth power of 2 traverse the array from j = 0 to i i . e ( 2 ^ p )","code":"$ j = 0 ; while ( $ j < $ i ) {"}
{"text":"double the value of arr [ j ] and store to arr [ i + j ]","code":"$ arr [ $ i + $ j ] = 2 * $ arr [ $ j ] ; $ j ++ ; }"}
{"text":"update i to next power of 2","code":"$ i = ( 1 << $ p ) ;"}
{"text":"increment p","code":"$ p ++ ; } }"}
{"text":"Function to print gould 's Sequence","code":"function printSequence ( $ n ) { global $ MAX , $ arr ;"}
{"text":"loop to generate gould 's  Sequence up to n","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo $ arr [ $ i ] . \" \" ; } }"}
{"text":"Driver code","code":"gouldSequence ( ) ;"}
{"text":"Get n","code":"$ n = 16 ;"}
{"text":"Function call","code":"printSequence ( $ n ) ; ? >"}
{"text":"Matrix Mi has dimension p [ i - 1 ] x p [ i ] for i = 1. . n","code":"< ? php function MatrixChainOrder ( $ p , $ n ) {"}
{"text":"For simplicity of the program , one extra row and one extra column are allocated in dp [ ] [ ] . 0 th row and 0 th column of dp [ ] [ ] are not used","code":"$ dp = array ( ) ;"}
{"text":"cost is zero when multiplying one matrix .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ dp [ $ i ] [ $ i ] = 0 ;"}
{"text":"Simply following above recursive formula .","code":"for ( $ L = 1 ; $ L < $ n - 1 ; $ L ++ ) for ( $ i = 1 ; $ i < $ n - $ L ; $ i ++ ) $ dp [ $ i ] [ $ i + $ L ] = min ( $ dp [ $ i + 1 ] [ $ i + $ L ] + $ p [ $ i - 1 ] * $ p [ $ i ] * $ p [ $ i + $ L ] , $ dp [ $ i ] [ $ i + $ L - 1 ] + $ p [ $ i - 1 ] * $ p [ $ i + $ L - 1 ] * $ p [ $ i + $ L ] ) ; return $ dp [ 1 ] [ $ n - 1 ] ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 20 , 30 , 40 , 30 ) ; $ size = sizeof ( $ arr ) ; echo \" Minimum \u2581 number \u2581 of \u2581 multiplications \u2581 is \u2581 \" . MatrixChainOrder ( $ arr , $ size ) ; ? >"}
{"text":"return the number of common subsequence in two strings","code":"< ? php function CommomSubsequencesCount ( $ s , $ t ) { $ n1 = strlen ( $ s ) ; $ n2 = strlen ( $ t ) ; $ dp = array ( ) ; for ( $ i = 0 ; $ i <= $ n1 ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n2 ; $ j ++ ) { $ dp [ $ i ] [ $ j ] = 0 ; } }"}
{"text":"for each character of S","code":"for ( $ i = 1 ; $ i <= $ n1 ; $ i ++ ) {"}
{"text":"for each character in T","code":"for ( $ j = 1 ; $ j <= $ n2 ; $ j ++ ) {"}
{"text":"if character are same in both the string","code":"if ( $ s [ $ i - 1 ] == $ t [ $ j - 1 ] ) $ dp [ $ i ] [ $ j ] = 1 + $ dp [ $ i ] [ $ j - 1 ] + $ dp [ $ i - 1 ] [ $ j ] ; else $ dp [ $ i ] [ $ j ] = $ dp [ $ i ] [ $ j - 1 ] + $ dp [ $ i - 1 ] [ $ j ] - $ dp [ $ i - 1 ] [ $ j - 1 ] ; } } return $ dp [ $ n1 ] [ $ n2 ] ; }"}
{"text":"Driver Code","code":"$ s = \" ajblqcpdz \" ; $ t = \" aefcnbtdi \" ; echo CommomSubsequencesCount ( $ s , $ t ) . \" \" ; ? >"}
{"text":"To store fibonacci numbers 42 second number in fibonacci series largest possible integer","code":"< ? php $ fib = array_fill ( 0 , 43 , 0 ) ;"}
{"text":"Function to generate fibonacci series","code":"function fibonacci ( ) { global $ fib ; $ fib [ 0 ] = 1 ; $ fib [ 1 ] = 2 ; for ( $ i = 2 ; $ i < 43 ; $ i ++ ) $ fib [ $ i ] = $ fib [ $ i - 1 ] + $ fib [ $ i - 2 ] ; }"}
{"text":"Recursive function to return the number of ways","code":"function rec ( $ x , $ y , $ last ) { global $ fib ;"}
{"text":"base condition","code":"if ( $ y == 0 ) { if ( $ x == 0 ) return 1 ; return 0 ; } $ sum = 0 ;"}
{"text":"for recursive function call","code":"for ( $ i = $ last ; $ i >= 0 and $ fib [ $ i ] * $ y >= $ x ; $ i -- ) { if ( $ fib [ $ i ] > $ x ) continue ; $ sum += rec ( $ x - $ fib [ $ i ] , $ y - 1 , $ i ) ; } return $ sum ; }"}
{"text":"Driver code","code":"fibonacci ( ) ; $ n = 13 ; $ k = 3 ; echo \" Possible \u2581 ways \u2581 are : \u2581 \" . rec ( $ n , $ k , 42 ) ; ? >"}
{"text":"function to find the minimum cost to reach N - th floor","code":"< ? php function minimumCost ( & $ cost , $ n ) {"}
{"text":"base case","code":"if ( $ n == 1 ) return $ cost [ 0 ] ;"}
{"text":"initially to climb till 0 - th or 1 th stair","code":"$ dp [ 0 ] = $ cost [ 0 ] ; $ dp [ 1 ] = $ cost [ 1 ] ;"}
{"text":"iterate for finding the cost","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) { $ dp [ $ i ] = min ( $ dp [ $ i - 1 ] , $ dp [ $ i - 2 ] ) + $ cost [ $ i ] ; }"}
{"text":"return the minimum","code":"return min ( $ dp [ $ n - 2 ] , $ dp [ $ n - 1 ] ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 16 , 19 , 10 , 12 , 18 ) ; $ n = sizeof ( $ a ) ; echo ( minimumCost ( $ a , $ n ) ) ; ? >"}
{"text":"function to find the minimum cost to reach N - th floor","code":"< ? php function minimumCost ( & $ cost , $ n ) { $ dp1 = 0 ; $ dp2 = 0 ;"}
{"text":"traverse till N - th stair","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ dp0 = $ cost [ $ i ] + min ( $ dp1 , $ dp2 ) ;"}
{"text":"update the last two stairs value","code":"$ dp2 = $ dp1 ; $ dp1 = $ dp0 ; } return min ( $ dp1 , $ dp2 ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 2 , 5 , 3 , 1 , 7 , 3 , 4 ) ; $ n = sizeof ( $ a ) ; echo ( minimumCost ( $ a , $ n ) ) ; ? >"}
{"text":"PHP program to find Edit Distance ( when only two operations are allowed , insert and delete ) using LCS .","code":"< ? php function editDistanceWith2Ops ( $ X , $ Y ) {"}
{"text":"Find LCS","code":"$ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ; $ L [ $ m + 1 ] [ $ n + 1 ] ; for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 0 $ j == 0 ) $ L [ $ i ] [ $ j ] = 0 ; else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) $ L [ $ i ] [ $ j ] = $ L [ $ i - 1 ] [ $ j - 1 ] + 1 ; else $ L [ $ i ] [ $ j ] = max ( $ L [ $ i - 1 ] [ $ j ] , $ L [ $ i ] [ $ j - 1 ] ) ; } } $ lcs = $ L [ $ m ] [ $ n ] ;"}
{"text":"Edit distance is delete operations + insert operations .","code":"return ( $ m - $ lcs ) + ( $ n - $ lcs ) ; }"}
{"text":"Driver Code","code":"$ X = \" abc \" ; $ Y = \" acd \" ; echo editDistanceWith2Ops ( $ X , $ Y ) ; ? >"}
{"text":"Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]","code":"< ? php function lcs ( $ X , $ Y , $ m , $ n ) { if ( $ m == 0 $ n == 0 ) return 0 ; if ( $ X [ $ m - 1 ] == $ Y [ $ n - 1 ] ) return 1 + lcs ( $ X , $ Y , $ m - 1 , $ n - 1 ) ; else return max ( lcs ( $ X , $ Y , $ m , $ n - 1 ) , lcs ( $ X , $ Y , $ m - 1 , $ n ) ) ; }"}
{"text":"Driver Code","code":"$ X = \" AGGTAB \" ; $ Y = \" GXTXAYB \" ;"}
{"text":"Find the length of string","code":"$ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ; echo \" Length \u2581 of \u2581 LCS : \u2581 \" . lcs ( $ X , $ Y , $ m , $ n ) ; ? >"}
{"text":"Function to count the number of steps in a tetrahedron","code":"< ? php function countPaths ( $ n ) {"}
{"text":"initially coming to B is B -> B","code":"$ zB = 1 ;"}
{"text":"cannot reach A , D or C","code":"$ zADC = 0 ;"}
{"text":"iterate for all steps","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"recurrence relation","code":"$ nzB = $ zADC * 3 ; $ nzADC = ( $ zADC * 2 + $ zB ) ;"}
{"text":"memoize previous values","code":"$ zB = $ nzB ; $ zADC = $ nzADC ; }"}
{"text":"returns steps","code":"return $ zB ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo countPaths ( $ n ) ; ? >"}
{"text":"function to find out the minimum penalty","code":"< ? php function getMinimumPenalty ( $ x , $ y , $ pxy , $ pgap ) {"}
{"text":"table for storing optimal substructure answers","code":"$ dp [ $ n + $ m + 1 ] [ $ n + $ m + 1 ] = array ( 0 ) ;"}
{"text":"initialising the table","code":"for ( $ i = 0 ; $ i <= ( $ n + $ m ) ; $ i ++ ) { $ dp [ $ i ] [ 0 ] = $ i * $ pgap ; $ dp [ 0 ] [ $ i ] = $ i * $ pgap ; }"}
{"text":"calculating the minimum penalty","code":"for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) { if ( $ x [ $ i - 1 ] == $ y [ $ j - 1 ] ) { $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j - 1 ] ; } else { $ dp [ $ i ] [ $ j ] = min ( $ dp [ $ i - 1 ] [ $ j - 1 ] + $ pxy , $ dp [ $ i - 1 ] [ $ j ] + $ pgap , $ dp [ $ i ] [ $ j - 1 ] + $ pgap ) ; } } }"}
{"text":"Reconstructing the solution $l = $n + $m ; maximum possible length","code":"$ i = $ m ; $ j = $ n ; $ xpos = $ l ; $ ypos = $ l ;"}
{"text":"Final answers for the respective strings $xans [ $l + 1 ] ; $yans [ $l + 1 ] ;","code":"while ( ! ( $ i == 0 $ j == 0 ) ) { if ( $ x [ $ i - 1 ] == $ y [ $ j - 1 ] ) { $ xans [ $ xpos -- ] = $ x [ $ i - 1 ] ; $ yans [ $ ypos -- ] = $ y [ $ j - 1 ] ; $ i -- ; $ j -- ; } else if ( $ dp [ $ i - 1 ] [ $ j - 1 ] + $ pxy == $ dp [ $ i ] [ $ j ] ) { $ xans [ $ xpos -- ] = $ x [ $ i - 1 ] ; $ yans [ $ ypos -- ] = $ y [ $ j - 1 ] ; $ i -- ; $ j -- ; } else if ( $ dp [ $ i - 1 ] [ $ j ] + $ pgap == $ dp [ $ i ] [ $ j ] ) { $ xans [ $ xpos -- ] = $ x [ $ i - 1 ] ; $ yans [ $ ypos -- ] = ' _ ' ; $ i -- ; } else if ( $ dp [ $ i ] [ $ j - 1 ] + $ pgap == $ dp [ $ i ] [ $ j ] ) { $ xans [ $ xpos -- ] = ' _ ' ; $ yans [ $ ypos -- ] = $ y [ $ j - 1 ] ; $ j -- ; } } while ( $ xpos > 0 ) { if ( $ i > 0 ) $ xans [ $ xpos -- ] = $ x [ -- $ i ] ; else $ xans [ $ xpos -- ] = ' _ ' ; } while ( $ ypos > 0 ) { if ( $ j > 0 ) $ yans [ $ ypos -- ] = $ y [ -- $ j ] ; else $ yans [ $ ypos -- ] = ' _ ' ; }"}
{"text":"Since we have assumed the answer to be n + m long , we need to remove the extra gaps in the starting id represents the index from which the arrays xans , yans are useful","code":"$ id = 1 ; for ( $ i = $ l ; $ i >= 1 ; $ i -- ) { if ( $ yans [ $ i ] == ' _ ' && $ xans [ $ i ] == ' _ ' ) { $ id = $ i + 1 ; break ; } }"}
{"text":"Printing the final answer","code":"echo \" Minimum \u2581 Penalty \u2581 in \u2581 \" . \" aligning \u2581 the \u2581 genes \u2581 = \u2581 \" ; echo $ dp [ $ m ] [ $ n ] . \" STRNEWLINE \" ; echo \" The \u2581 aligned \u2581 genes \u2581 are \u2581 : STRNEWLINE \" ; for ( $ i = $ id ; $ i <= $ l ; $ i ++ ) { echo $ xans [ $ i ] ; } echo \" STRNEWLINE \" ; for ( $ i = $ id ; $ i <= $ l ; $ i ++ ) { echo $ yans [ $ i ] ; } return ; }"}
{"text":"input strings","code":"$ gene1 = \" AGGGCT \" ; $ gene2 = \" AGGCA \" ;"}
{"text":"initialising penalties of different types","code":"$ misMatchPenalty = 3 ; $ gapPenalty = 2 ;"}
{"text":"calling the function to calculate the result","code":"getMinimumPenalty ( $ gene1 , $ gene2 , $ misMatchPenalty , $ gapPenalty ) ; ? >"}
{"text":"Function that returns the length of the longest decreasing subsequence","code":"< ? php function lds ( $ arr , $ n ) { $ lds = array ( ) ; $ i ; $ j ; $ max = 0 ;"}
{"text":"Initialize LDS with 1 for all index The minimum LDS starting with any element is always 1","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ lds [ $ i ] = 1 ;"}
{"text":"Compute LDS from every index in bottom up manner","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ arr [ $ i ] < $ arr [ $ j ] and $ lds [ $ i ] < $ lds [ $ j ] + 1 ) { $ lds [ $ i ] = $ lds [ $ j ] + 1 ; }"}
{"text":"Select the maximum of all the LDS values","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ max < $ lds [ $ i ] ) $ max = $ lds [ $ i ] ;"}
{"text":"returns the length of the LDS","code":"return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 15 , 27 , 14 , 38 , 63 , 55 , 46 , 65 , 85 ) ; $ n = count ( $ arr ) ; echo \" Length \u2581 of \u2581 LDS \u2581 is \u2581 \" , lds ( $ arr , $ n ) ; ? >"}
{"text":"PHP Program to find sum of product of consecutive Binomial Coefficient .","code":"< ? php $ MAX = 100 ;"}
{"text":"Find the binomial coefficient upto nth term","code":"function binomialCoeff ( $ C , $ n ) {"}
{"text":"$C [ 0 ] = 1 ; nC0 is 1","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Compute next row of pascal triangle using the previous row","code":"for ( $ j = min ( $ i , $ n ) ; $ j > 0 ; $ j -- ) $ C [ $ j ] = $ C [ $ j ] + $ C [ $ j - 1 ] ; } return $ C ; }"}
{"text":"Return the sum of the product of consecutive binomial coefficient .","code":"function sumOfproduct ( $ n ) { global $ MAX ; $ sum = 0 ; $ C = array_fill ( 0 , $ MAX , 0 ) ; $ C = binomialCoeff ( $ C , $ n ) ;"}
{"text":"finding the sum of product of consecutive coefficient .","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ sum += $ C [ $ i ] * $ C [ $ i + 1 ] ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo sumOfproduct ( $ n ) ; ? >"}
{"text":"PHP Program to find sum of product of r and rth Binomial Coefficient i . e summation r * nCr","code":"< ? php $ MAX = 100 ;"}
{"text":"Return the first n term of binomial coefficient .","code":"function binomialCoeff ( $ n , & $ C ) {"}
{"text":"$C [ 0 ] = 1 ; nC0 is 1","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Compute next row of pascal triangle using the previous row","code":"for ( $ j = min ( $ i , $ n ) ; $ j > 0 ; $ j -- ) $ C [ $ j ] = $ C [ $ j ] + $ C [ $ j - 1 ] ; } }"}
{"text":"Return summation of r * nCr","code":"function summation ( $ n ) { global $ MAX ; $ C = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"finding the first n term of binomial coefficient","code":"binomialCoeff ( $ n , $ C ) ;"}
{"text":"Iterate a loop to find the sum .","code":"$ sum = 0 ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ sum += ( $ i * $ C [ $ i ] ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo summation ( $ n ) ; ? >"}
{"text":"Return nCr","code":"< ? php function binomialCoeff ( $ n , $ k ) { $ C = array_fill ( 0 , ( $ k + 1 ) , 0 ) ;"}
{"text":"$C [ 0 ] = 1 ; nC0 is 1","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Compute next row of pascal triangle using the previous row","code":"for ( $ j = min ( $ i , $ k ) ; $ j > 0 ; $ j -- ) $ C [ $ j ] = $ C [ $ j ] + $ C [ $ j - 1 ] ; } return $ C [ $ k ] ; }"}
{"text":"Return the number of array that can be formed of size n and sum equals to k .","code":"function countArray ( $ N , $ K ) { return binomialCoeff ( $ K - 1 , $ N - 1 ) ; }"}
{"text":"Driver Code","code":"$ N = 2 ; $ K = 3 ; echo countArray ( $ N , $ K ) ; ? >"}
{"text":"Function to find maximum possible value of number that can be obtained using array elements .","code":"< ? php function findMaxVal ( $ arr , $ n , $ num , $ maxLimit ) {"}
{"text":"Variable to represent current index .","code":"$ ind ;"}
{"text":"Variable to show value between 0 and maxLimit .","code":"$ val ;"}
{"text":"Table to store whether a value can be obtained or not upto a certain index . 1. dp [ i ] [ j ] = 1 if value j can be obtained upto index i . 2. dp [ i ] [ j ] = 0 if value j cannot be obtained upto index i .","code":"$ dp [ $ n ] [ $ maxLimit + 1 ] = array ( ) ; for ( $ ind = 0 ; $ ind < $ n ; $ ind ++ ) { for ( $ val = 0 ; $ val <= $ maxLimit ; $ val ++ ) {"}
{"text":"Check for index 0 if given value val can be obtained by either adding to or subtracting arr [ 0 ] from num .","code":"if ( $ ind == 0 ) { if ( $ num - $ arr [ $ ind ] == $ val $ num + $ arr [ $ ind ] == $ val ) { $ dp [ $ ind ] [ $ val ] = 1 ; } else { $ dp [ $ ind ] [ $ val ] = 0 ; } } else {"}
{"text":"1. If arr [ ind ] is added to obtain given val then val - arr [ ind ] should be obtainable from index ind - 1. 2. If arr [ ind ] is subtracted to obtain given val then val + arr [ ind ] should be obtainable from index ind - 1. Check for both the conditions .","code":"if ( $ val - $ arr [ $ ind ] >= 0 && $ val + $ arr [ $ ind ] <= $ maxLimit ) {"}
{"text":"If either of one condition is true , then val is obtainable at index ind .","code":"$ dp [ $ ind ] [ $ val ] = $ dp [ $ ind - 1 ] [ $ val - $ arr [ $ ind ] ] || $ dp [ $ ind - 1 ] [ $ val + $ arr [ $ ind ] ] ; } else if ( $ val - $ arr [ $ ind ] >= 0 ) { $ dp [ $ ind ] [ $ val ] = $ dp [ $ ind - 1 ] [ $ val - $ arr [ $ ind ] ] ; } else if ( $ val + $ arr [ $ ind ] <= $ maxLimit ) { $ dp [ $ ind ] [ $ val ] = $ dp [ $ ind - 1 ] [ $ val + $ arr [ $ ind ] ] ; } else { $ dp [ $ ind ] [ $ val ] = 0 ; } } } }"}
{"text":"Find maximum value that is obtained at index n - 1.","code":"for ( $ val = $ maxLimit ; $ val >= 0 ; $ val -- ) { if ( $ dp [ $ n - 1 ] [ $ val ] ) { return $ val ; } }"}
{"text":"If no solution exists return - 1.","code":"return -1 ; }"}
{"text":"Driver Code","code":"$ num = 1 ; $ arr = array ( 3 , 10 , 6 , 4 , 5 ) ; $ n = sizeof ( $ arr ) ; $ maxLimit = 15 ; echo findMaxVal ( $ arr , $ n , $ num , $ maxLimit ) ; ? >"}
{"text":"Function to generate nth term of Moser - de Bruijn Sequence","code":"< ? php function gen ( $ n ) {"}
{"text":"S ( 0 ) = 0","code":"if ( $ n == 0 ) return 0 ;"}
{"text":"S ( 1 ) = 1","code":"else if ( $ n == 1 ) return 1 ;"}
{"text":"S ( 2 * n ) = 4 * S ( n )","code":"else if ( $ n % 2 == 0 ) return 4 * gen ( $ n \/ 2 ) ;"}
{"text":"S ( 2 * n + 1 ) = 4 * S ( n ) + 1","code":"else if ( $ n % 2 == 1 ) return 4 * gen ( $ n \/ 2 ) + 1 ; }"}
{"text":"Generating the first ' n ' terms of Moser - de Bruijn Sequence","code":"function moserDeBruijn ( $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( gen ( $ i ) . \" \u2581 \" ) ; echo ( \" STRNEWLINE \" ) ; }"}
{"text":"Driver Code","code":"$ n = 15 ; echo ( \" First \u2581 \" . $ n . \" \u2581 terms \u2581 of \u2581 \" . \" Moser - de \u2581 Bruijn \u2581 Sequence \u2581 : \u2581 STRNEWLINE \" ) ; echo ( moserDeBruijn ( $ n ) ) ; ? >"}
{"text":"Util function to find minimum sum for a path","code":"< ? php function minSumPath ( & $ A ) {"}
{"text":"For storing the result in a 1 - D array , and simultaneously updating the result .","code":"$ memo = array ( ) ; for ( $ i = 0 ; $ i < count ( $ A ) ; $ i ++ ) $ memo [ $ i ] = 0 ; $ n = count ( $ A ) - 1 ;"}
{"text":"For the bottom row","code":"for ( $ i = 0 ; $ i < count ( $ A [ $ n ] ) ; $ i ++ ) $ memo [ $ i ] = $ A [ $ n ] [ $ i ] ;"}
{"text":"Calculation of the remaining rows , in bottom up manner .","code":"for ( $ i = count ( $ A ) - 2 ; $ i >= 0 ; $ i -- ) for ( $ j = 0 ; $ j < count ( $ A [ $ i + 1 ] ) - 1 ; $ j ++ ) $ memo [ $ j ] = $ A [ $ i ] [ $ j ] + min ( $ memo [ $ j ] , $ memo [ $ j + 1 ] ) ;"}
{"text":"return the top element","code":"return $ memo [ 0 ] ; }"}
{"text":"Driver Code","code":"$ A = array ( array ( 2 ) , array ( 3 , 9 ) , array ( 1 , 6 , 7 ) ) ; echo ( minSumPath ( $ A ) ) ; ? >"}
{"text":"PHP program to find minimum removals to make max - min <= K","code":"< ? php $ MAX = 100 ; $ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ MAX ; $ i ++ ) { for ( $ j = 0 ; $ j < $ MAX ; $ j ++ ) $ dp [ $ i ] [ $ j ] = -1 ; }"}
{"text":"function to check all possible combinations of removal and return the minimum one","code":"function countRemovals ( $ a , $ i , $ j , $ k ) { global $ dp ;"}
{"text":"base case when all elements are removed","code":"if ( $ i >= $ j ) return 0 ;"}
{"text":"if condition is satisfied , no more removals are required","code":"else if ( ( $ a [ $ j ] - $ a [ $ i ] ) <= $ k ) return 0 ;"}
{"text":"if the state has already been visited","code":"else if ( $ dp [ $ i ] [ $ j ] != -1 ) return $ dp [ $ i ] [ $ j ] ;"}
{"text":"when Amax - Amin > d","code":"else if ( ( $ a [ $ j ] - $ a [ $ i ] ) > $ k ) {"}
{"text":"minimum is taken of the removal of minimum element or removal of the maximum element","code":"$ dp [ $ i ] [ $ j ] = 1 + min ( countRemovals ( $ a , $ i + 1 , $ j , $ k ) , countRemovals ( $ a , $ i , $ j - 1 , $ k ) ) ; } return $ dp [ $ i ] [ $ j ] ; }"}
{"text":"To sort the array and return the answer","code":"function removals ( $ a , $ n , $ k ) {"}
{"text":"sort the array","code":"sort ( $ a ) ;"}
{"text":"fill all stated with - 1 when only one element","code":"if ( $ n == 1 ) return 0 ; else return countRemovals ( $ a , 0 , $ n - 1 , $ k ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 3 , 4 , 9 , 10 , 11 , 12 , 17 , 20 ) ; $ n = count ( $ a ) ; $ k = 4 ; echo ( removals ( $ a , $ n , $ k ) ) ; ? >"}
{"text":"Naive function to count the number of ordered pairs such that their bitwise and is 0","code":"< ? php function countPairs ( $ a , $ n ) { $ count = 0 ;"}
{"text":"check for all possible pairs","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( ( $ a [ $ i ] & $ a [ $ j ] ) == 0 )"}
{"text":"add 2 as ( i , j ) and ( j , i ) are considered different","code":"$ count += 2 ; } return $ count ; }"}
{"text":"Driver Code","code":"{ $ a = array ( 3 , 4 , 2 ) ; $ n = sizeof ( $ a ) \/ sizeof ( $ a [ 0 ] ) ; echo countPairs ( $ a , $ n ) ; return 0 ; }"}
{"text":"Used in recursive memoized solution","code":"< ? php $ dp = array ( array ( ) ) ;"}
{"text":"function to calculate the cumulative sum from a [ i ] to a [ j ]","code":"function sum ( $ a , $ i , $ j ) { $ ans = 0 ; for ( $ m = $ i ; $ m <= $ j ; $ m ++ ) $ ans = ( $ ans + $ a [ $ m ] ) % 100 ; return $ ans ; } function solve ( $ a , $ i , $ j ) { global $ dp ;"}
{"text":"base case","code":"if ( $ i == $ j ) return 0 ;"}
{"text":"memoization , if the partition has been called before then return the stored value","code":"if ( $ dp [ $ i ] [ $ j ] != -1 ) return $ dp [ $ i ] [ $ j ] ;"}
{"text":"store a max value","code":"$ dp [ $ i ] [ $ j ] = PHP_INT_MAX ;"}
{"text":"we break them into k partitions","code":"for ( $ k = $ i ; $ k < $ j ; $ k ++ ) {"}
{"text":"store the min of the formula thus obtained","code":"$ dp [ $ i ] [ $ j ] = min ( $ dp [ $ i ] [ $ j ] , ( solve ( $ a , $ i , $ k ) + solve ( $ a , $ k + 1 , $ j ) + ( sum ( $ a , $ i , $ k ) * sum ( $ a , $ k + 1 , $ j ) ) ) ) ; }"}
{"text":"return the minimum","code":"return $ dp [ $ i ] [ $ j ] ; } function initialize ( $ n ) { global $ dp ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = -1 ; }"}
{"text":"Driver code","code":"$ a = array ( 40 , 60 , 20 ) ; $ n = count ( $ a ) ; initialize ( $ n ) ; echo solve ( $ a , 0 , $ n - 1 ) ; ? >"}
{"text":"PHP Program to print Fibonacci series in reverse order","code":"< ? php function reverseFibonacci ( $ n ) {"}
{"text":"assigning first and second elements","code":"$ a [ 0 ] = 0 ; $ a [ 1 ] = 1 ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) {"}
{"text":"storing sum in the preceding location","code":"$ a [ $ i ] = $ a [ $ i - 2 ] + $ a [ $ i - 1 ] ; } for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"printing array in reverse order","code":"echo ( $ a [ $ i ] . \" \" ) ; } }"}
{"text":"Driver COde","code":"$ n = 5 ; reverseFibonacci ( $ n ) ; ? >"}
{"text":"Returns probability to reach N","code":"< ? php function find_prob ( $ N , $ P ) { $ dp ; $ dp [ 0 ] = 1 ; $ dp [ 1 ] = 0 ; $ dp [ 2 ] = $ P ; $ dp [ 3 ] = 1 - $ P ; for ( $ i = 4 ; $ i <= $ N ; ++ $ i ) $ dp [ $ i ] = ( $ P ) * $ dp [ $ i - 2 ] + ( 1 - $ P ) * $ dp [ $ i - 3 ] ; return $ dp [ $ N ] ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ p = 0.2 ; echo find_prob ( $ n , $ p ) ; ? >"}
{"text":"PHP Program to print Hosoya 's triangle of height n.","code":"< ? php $ N = 5 ;"}
{"text":"Print the Hosoya triangle of height n .","code":"function printHosoya ( $ n ) { global $ N ; $ dp = array_fill ( 0 , $ N , array_fill ( 0 , $ N , 0 ) ) ;"}
{"text":"base case .","code":"$ dp [ 0 ] [ 0 ] = $ dp [ 1 ] [ 0 ] = $ dp [ 1 ] [ 1 ] = 1 ;"}
{"text":"For each row .","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) {"}
{"text":"for each column ;","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"recursive steps .","code":"if ( $ i > $ j ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j ] + $ dp [ $ i - 2 ] [ $ j ] ; else $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j - 1 ] + $ dp [ $ i - 2 ] [ $ j - 2 ] ; } }"}
{"text":"printing the solution","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) echo $ dp [ $ i ] [ $ j ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driven Program","code":"$ n = 5 ; printHosoya ( $ n ) ; ? >"}
{"text":"PHP Program to find number of ways to which numbers that are greater than given number can be added to get sum .","code":"< ? php $ MAX = 100 ;"}
{"text":"Return number of ways to which numbers that are greater than given number can be added to get sum .","code":"function numberofways ( $ n , $ m ) { global $ MAX ; $ dp = array_fill ( 0 , $ n + 2 , array_fill ( 0 , $ n + 2 , NULL ) ) ; $ dp [ 0 ] [ $ n + 1 ] = 1 ;"}
{"text":"Filling the table . k is for numbers greater than or equal that are allowed .","code":"for ( $ k = $ n ; $ k >= $ m ; $ k -- ) {"}
{"text":"i is for sum","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"initializing dp [ i ] [ k ] to number ways to get sum using numbers greater than or equal k + 1","code":"$ dp [ $ i ] [ $ k ] = $ dp [ $ i ] [ $ k + 1 ] ;"}
{"text":"if i > k","code":"if ( $ i - $ k >= 0 ) $ dp [ $ i ] [ $ k ] = ( $ dp [ $ i ] [ $ k ] + $ dp [ $ i - $ k ] [ $ k ] ) ; } } return $ dp [ $ n ] [ $ m ] ; }"}
{"text":"Driver Program","code":"$ n = 3 ; $ m = 1 ; echo numberofways ( $ n , $ m ) ; return 0 ; ? >"}
{"text":"Return Entringer Number E ( n , k )","code":"< ? php function zigzag ( $ n , $ k ) {"}
{"text":"Base Case","code":"if ( $ n == 0 and $ k == 0 ) return 1 ;"}
{"text":"Base Case","code":"if ( $ k == 0 ) return 0 ;"}
{"text":"Recursive step","code":"return zigzag ( $ n , $ k - 1 ) + zigzag ( $ n - 1 , $ n - $ k ) ; }"}
{"text":"Driven Code","code":"$ n = 4 ; $ k = 3 ; echo zigzag ( $ n , $ k ) ; ? >"}
{"text":"Return euleriannumber A ( n , m )","code":"< ? php function eulerian ( $ n , $ m ) { $ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ n + 1 ; $ i ++ ) for ( $ j = 0 ; $ j < $ m + 1 ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ;"}
{"text":"For each row from 1 to n","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"For each column from 0 to m","code":"for ( $ j = 0 ; $ j <= $ m ; $ j ++ ) {"}
{"text":"If i is greater than j","code":"if ( $ i > $ j ) {"}
{"text":"If j is 0 , then make that state as 1.","code":"if ( $ j == 0 ) $ dp [ $ i ] [ $ j ] = 1 ;"}
{"text":"basic recurrence relation .","code":"else $ dp [ $ i ] [ $ j ] = ( ( $ i - $ j ) * $ dp [ $ i - 1 ] [ $ j - 1 ] ) + ( ( $ j + 1 ) * $ dp [ $ i - 1 ] [ $ j ] ) ; } } } return $ dp [ $ n ] [ $ m ] ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ m = 1 ; echo eulerian ( $ n , $ m ) ; ? >"}
{"text":"Return the nth Delannoy Number .","code":"< ? php function dealnnoy ( $ n , $ m ) {"}
{"text":"Base case","code":"if ( $ m == 0 or $ n == 0 ) return 1 ;"}
{"text":"Recursive step .","code":"return dealnnoy ( $ m - 1 , $ n ) + dealnnoy ( $ m - 1 , $ n - 1 ) + dealnnoy ( $ m , $ n - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ m = 4 ; echo dealnnoy ( $ n , $ m ) ; ? >"}
{"text":"Return the nth Delannoy Number .","code":"< ? php function dealnnoy ( $ n , $ m ) { $ dp [ $ m + 1 ] [ $ n + 1 ] = 0 ;"}
{"text":"Base cases","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) $ dp [ $ i ] [ 0 ] = 1 ; for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) $ dp [ 0 ] [ $ i ] = 1 ; for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i - 1 ] [ $ j ] + $ dp [ $ i - 1 ] [ $ j - 1 ] + $ dp [ $ i ] [ $ j - 1 ] ; return $ dp [ $ m ] [ $ n ] ; }"}
{"text":"Driven Code","code":"$ n = 3 ; $ m = 4 ; echo dealnnoy ( $ n , $ m ) ; ? >"}
{"text":"PHP program to find longest alternating subarray starting from every index .","code":"< ? php function longestAlternating ( $ arr , $ n ) { $ count = array ( ) ;"}
{"text":"Fill count [ ] from end .","code":"$ count [ $ n - 1 ] = 1 ; for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) { if ( $ arr [ $ i ] * $ arr [ $ i + 1 ] < 0 ) $ count [ $ i ] = $ count [ $ i + 1 ] + 1 ; else $ count [ $ i ] = 1 ; }"}
{"text":"Print result","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ count [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ a = array ( -5 , -1 , -1 , 2 , -2 , -3 ) ; $ n = count ( $ a ) ; longestAlternating ( $ a , $ n ) ; ? >"}
{"text":"function for calculating max possible result","code":"< ? php function maxDP ( $ n ) { $ res [ 0 ] = 0 ; $ res [ 1 ] = 1 ;"}
{"text":"Compute remaining values in bottom up manner .","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res [ $ i ] = max ( $ i , ( $ res [ $ i \/ 2 ] + $ res [ $ i \/ 3 ] + $ res [ $ i \/ 4 ] + $ res [ $ i \/ 5 ] ) ) ; return $ res [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 60 ; echo \" MaxSum \u2581 = \" , maxDP ( $ n ) ; ? >"}
{"text":"Recursive PHP program to find minimum jumps to reach last building from first .","code":"< ? php $ R = 4 ; $ C = 3 ; function isSafe ( $ x , $ y ) { global $ R , $ C ; return ( $ x < $ R and $ y < $ C ) ; }"}
{"text":"Returns minimum jump path from ( 0 , 0 ) to ( m , n ) in height [ R ] [ C ]","code":"function minJump ( $ height , $ x , $ y ) { global $ R , $ C ;"}
{"text":"base case","code":"if ( $ x == $ R - 1 and $ y == $ C - 1 ) return 0 ;"}
{"text":"Find minimum jumps if we go through diagonal","code":"$ diag = PHP_INT_MAX ; if ( isSafe ( $ x + 1 , $ y + 1 ) ) $ diag = minJump ( $ height , $ x + 1 , $ y + 1 ) + abs ( $ height [ $ x ] [ $ y ] - $ height [ $ x + 1 ] [ $ y + 1 ] ) ;"}
{"text":"Find minimum jumps if we go through down","code":"$ down = PHP_INT_MAX ; if ( isSafe ( $ x + 1 , $ y ) ) $ down = minJump ( $ height , $ x + 1 , $ y ) + abs ( $ height [ $ x ] [ $ y ] - $ height [ $ x + 1 ] [ $ y ] ) ;"}
{"text":"Find minimum jumps if we go through right","code":"$ right = PHP_INT_MAX ; if ( isSafe ( $ x , $ y + 1 ) ) $ right = minJump ( $ height , $ x , $ y + 1 ) + abs ( $ height [ $ x ] [ $ y ] - $ height [ $ x ] [ $ y + 1 ] ) ;"}
{"text":"return minimum jumps","code":"return min ( $ down , min ( $ right , $ diag ) ) ; }"}
{"text":"Driver Code","code":"$ height = array ( array ( 5 , 4 , 2 ) , array ( 9 , 2 , 1 ) , array ( 2 , 5 , 9 ) , array ( 1 , 3 , 11 ) ) ; echo minJump ( $ height , 0 , 0 ) ; ? >"}
{"text":"PHP program to find maximum sum subsequence such that elements are at least k distance away .","code":"< ? php function maxSum ( $ arr , $ N , $ k ) {"}
{"text":"We fill MS from right to left .","code":"$ MS [ $ N - 1 ] = $ arr [ $ N - 1 ] ; for ( $ i = $ N - 2 ; $ i >= 0 ; $ i -- ) { if ( $ i + $ k + 1 >= $ N ) $ MS [ $ i ] = max ( $ arr [ $ i ] , $ MS [ $ i + 1 ] ) ; else $ MS [ $ i ] = max ( $ arr [ $ i ] + $ MS [ $ i + $ k + 1 ] , $ MS [ $ i + 1 ] ) ; } return $ MS [ 0 ] ; }"}
{"text":"Driver code","code":"$ N = 10 ; $ k = 2 ; $ arr = array ( 50 , 70 , 40 , 50 , 90 , 70 , 60 , 40 , 70 , 50 ) ; echo ( maxSum ( $ arr , $ N , $ k ) ) ; ? >"}
{"text":"Function to calculate alternating sub - array for each index of array elements","code":"< ? php function alternateSubarray ( & $ arr , $ n ) { $ len = array_fill ( 0 , $ n , NULL ) ;"}
{"text":"Initialize the base state of len [ ]","code":"$ len [ $ n - 1 ] = 1 ;"}
{"text":"Calculating value for each element","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; -- $ i ) {"}
{"text":"If both elements are different then add 1 to next len [ i + 1 ]","code":"if ( $ arr [ $ i ] ^ $ arr [ $ i + 1 ] == 1 ) $ len [ $ i ] = $ len [ $ i + 1 ] + 1 ;"}
{"text":"else initialize to 1","code":"else $ len [ $ i ] = 1 ; }"}
{"text":"Print lengths of binary subarrays .","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) echo $ len [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 0 , 1 , 0 , 0 , 1 ) ; $ n = sizeof ( $ arr ) ; alternateSubarray ( $ arr , $ n ) ; ? >"}
{"text":"Function to calculate alternating sub - array for each index of array elements","code":"< ? php function alternateSubarray ( $ arr , $ n ) {"}
{"text":"Initialize count variable for storing length of sub - array","code":"$ count = 1 ;"}
{"text":"Initialize ' prev ' variable which indicates the previous element while traversing for index ' i '","code":"$ prev = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; ++ $ i ) {"}
{"text":"If both elements are same print elements because alternate element is not found for current index","code":"if ( ( $ arr [ $ i ] ^ $ prev ) == 0 ) {"}
{"text":"print count and decrement it .","code":"while ( $ count ) echo $ count -- , \" \u2581 \" ; }"}
{"text":"Increment count for next element","code":"++ $ count ;"}
{"text":"Re - initialize previous variable","code":"$ prev = $ arr [ $ i ] ; }"}
{"text":"If elements are still available after traversing whole array , print it","code":"while ( $ count ) echo $ count -- , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 0 , 1 , 0 , 0 , 1 ) ; $ n = sizeof ( $ arr ) ; alternateSubarray ( $ arr , $ n ) ; ? >"}
{"text":"function to count ways of building a street of n rows","code":"< ? php function countWays ( $ n ) {"}
{"text":"base case","code":"$ dp [ 0 ] [ 1 ] = 1 ; $ dp [ 1 ] [ 1 ] = 2 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"ways of building houses in both the spots of ith row","code":"$ dp [ 0 ] [ $ i ] = $ dp [ 0 ] [ $ i - 1 ] + $ dp [ 1 ] [ $ i - 1 ] ;"}
{"text":"ways of building an office in one of the two spots of ith row","code":"$ dp [ 1 ] [ $ i ] = $ dp [ 0 ] [ $ i - 1 ] * 2 + $ dp [ 1 ] [ $ i - 1 ] ; }"}
{"text":"total ways for n rows","code":"return $ dp [ 0 ] [ $ n ] + $ dp [ 1 ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo \" Total \u2581 no \u2581 of \u2581 ways \u2581 with \u2581 n \u2581 = \u2581 \" , $ n , \" \u2581 are : \u2581 \" , countWays ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to find maximum length subsequence with difference between adjacent elements as either 0 or 1","code":"< ? php function maxLenSub ( $ arr , $ n ) { $ mls = array ( ) ; $ max = 0 ;"}
{"text":"Initialize mls [ ] values for all indexes","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ mls [ $ i ] = 1 ;"}
{"text":"Compute optimized maximum length subsequence values in bottom up manner","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( abs ( $ arr [ $ i ] - $ arr [ $ j ] ) <= 1 and $ mls [ $ i ] < $ mls [ $ j ] + 1 ) $ mls [ $ i ] = $ mls [ $ j ] + 1 ;"}
{"text":"Store maximum of all ' mls ' values in ' max '","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ max < $ mls [ $ i ] ) $ max = $ mls [ $ i ] ;"}
{"text":"required maximum length subsequence","code":"return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 5 , 6 , 3 , 7 , 6 , 5 , 8 ) ; $ n = count ( $ arr ) ; echo \" Maximum \u2581 length \u2581 subsequence \u2581 = \u2581 \" , maxLenSub ( $ arr , $ n ) ; ? >"}
{"text":"To find winner of game","code":"< ? php function findWinner ( $ x , $ y , $ n ) {"}
{"text":"To store results","code":"$ dp = array ( ) ;"}
{"text":"Initial values","code":"$ dp [ 0 ] = false ; $ dp [ 1 ] = true ;"}
{"text":"Computing other values .","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If A losses any of i - 1 or i - x or i - y game then he will definitely win game i","code":"if ( $ i - 1 >= 0 and ! $ dp [ $ i - 1 ] ) $ dp [ $ i ] = true ; else if ( $ i - $ x >= 0 and ! $ dp [ $ i - $ x ] ) $ dp [ $ i ] = true ; else if ( $ i - $ y >= 0 and ! $ dp [ $ i - $ y ] ) $ dp [ $ i ] = true ;"}
{"text":"Else A loses game .","code":"else $ dp [ $ i ] = false ; }"}
{"text":"If dp [ n ] is true then A will game otherwise he losses","code":"return $ dp [ $ n ] ; }"}
{"text":"Driver program to test findWinner ( ) ;","code":"$ x = 3 ; $ y = 4 ; $ n = 5 ; if ( findWinner ( $ x , $ y , $ n ) ) echo ' A ' ; else echo ' B ' ; ? >"}
{"text":"Method returns maximum games a winner needs to play in N - player tournament","code":"< ? php function maxGameByWinner ( $ N ) { $ dp [ $ N ] = 0 ;"}
{"text":"for 0 games , 1 player is needed for 1 game , 2 players are required","code":"$ dp [ 0 ] = 1 ; $ dp [ 1 ] = 2 ;"}
{"text":"loop until i - th Fibonacci number is less than or equal to N","code":"$ i = 2 ; do { $ dp [ $ i ] = $ dp [ $ i - 1 ] + $ dp [ $ i - 2 ] ; } while ( $ dp [ $ i ++ ] <= $ N ) ;"}
{"text":"result is ( i - 2 ) because i will be incremented one extra in while loop and we want the last value which is smaller than N , so one more decrement","code":"return ( $ i - 2 ) ; }"}
{"text":"Driver Code","code":"$ N = 10 ; echo maxGameByWinner ( $ N ) ; ? >"}
{"text":"To find min elements to remove from array to make it strictly increasing","code":"< ? php function minRemove ( $ arr , $ n ) { $ LIS = array ( ) ; $ len = 0 ;"}
{"text":"Mark all elements of LIS as 1","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ LIS [ $ i ] = 1 ;"}
{"text":"Find LIS of array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { if ( $ arr [ $ i ] > $ arr [ $ j ] ) $ LIS [ $ i ] = max ( $ LIS [ $ i ] , $ LIS [ $ j ] + 1 ) ; } $ len = max ( $ len , $ LIS [ $ i ] ) ; }"}
{"text":"Return min changes for array to strictly increasing","code":"return $ n - $ len ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 6 , 5 , 4 ) ; $ n = count ( $ arr ) ; echo minRemove ( $ arr , $ n ) ; ? >"}
{"text":"Return the maximum size of substring of X which is substring in Y .","code":"< ? php function maxSubsequenceSubstring ( $ x , $ y , $ n , $ m ) { $ dp ;"}
{"text":"Initialize the dp [ ] [ ] to 0.","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ;"}
{"text":"Calculating value for each element .","code":"for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"If alphabet of string X and Y are equal make dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]","code":"if ( $ x [ $ j - 1 ] == $ y [ $ i - 1 ] ) $ dp [ $ i ] [ $ j ] = 1 + $ dp [ $ i - 1 ] [ $ j - 1 ] ;"}
{"text":"Else copy the previous value in the row i . e dp [ i - 1 ] [ j - 1 ]","code":"else $ dp [ $ i ] [ $ j ] = $ dp [ $ i ] [ $ j - 1 ] ; } }"}
{"text":"Finding the maximum length .","code":"$ ans = 0 ; for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) $ ans = max ( $ ans , $ dp [ $ i ] [ $ n ] ) ; return $ ans ; }"}
{"text":"Driver Code","code":"{ $ x = \" ABCD \" ; $ y = \" BACDBDCD \" ; $ n = strlen ( $ x ) ; $ m = strlen ( $ y ) ; echo maxSubsequenceSubstring ( $ x , $ y , $ n , $ m ) ; return 0 ; } ? >"}
{"text":"Function to find max sum without adjacent","code":"< ? php function maxSum ( $ grid , $ n ) {"}
{"text":"Sum including maximum element of first column","code":"$ incl = max ( $ grid [ 0 ] [ 0 ] , $ grid [ 1 ] [ 0 ] ) ;"}
{"text":"Not including first column 's element","code":"$ excl = 0 ; $ excl_new ;"}
{"text":"Traverse for further elements","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Update max_sum on including or excluding of previous column","code":"$ excl_new = max ( $ excl , $ incl ) ;"}
{"text":"Include current column . Add maximum element from both row of current column","code":"$ incl = $ excl + max ( $ grid [ 0 ] [ $ i ] , $ grid [ 1 ] [ $ i ] ) ;"}
{"text":"If current column doesn 't  to be included","code":"$ excl = $ excl_new ; }"}
{"text":"Return maximum of excl and incl As that will be the maximum sum","code":"return max ( $ excl , $ incl ) ; }"}
{"text":"Driver code","code":"$ grid = array ( array ( 1 , 2 , 3 , 4 , 5 ) , array ( 6 , 7 , 8 , 9 , 10 ) ) ; $ n = 5 ; echo maxSum ( $ grid , $ n ) ; ? >"}
{"text":"method returns min steps of insertion we need to perform to sort array ' arr '","code":"< ? php function minInsertionStepToSortArray ( $ arr , $ N ) {"}
{"text":"lis [ i ] is going to store length of lis that ends with i .","code":"$ lis [ $ N ] = 0 ;"}
{"text":"Initialize lis values for all indexes","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ lis [ $ i ] = 1 ;"}
{"text":"Compute optimized lis values in bottom up manner","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ arr [ $ i ] >= $ arr [ $ j ] && $ lis [ $ i ] < $ lis [ $ j ] + 1 ) $ lis [ $ i ] = $ lis [ $ j ] + 1 ;"}
{"text":"The overall LIS must end with of the array elements . Pick maximum of all lis values","code":"$ max = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( $ max < $ lis [ $ i ] ) $ max = $ lis [ $ i ] ;"}
{"text":"return size of array minus length of LIS as final result","code":"return ( $ N - $ max ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 5 , 1 , 4 , 7 , 6 ) ; $ N = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo minInsertionStepToSortArray ( $ arr , $ N ) ; ? >"}
{"text":"A dynamic programming based PHP program to find shortest uncommon subsequence .","code":"< ? php $ GLOBALS [ ' MAX ' ] = 1005 ;"}
{"text":"Returns length of shortest common subsequence","code":"function shortestSeq ( $ S , $ T ) { $ m = strlen ( $ S ) ; $ n = strlen ( $ T ) ;"}
{"text":"declaring 2D array of m + 1 rows and n + 1 columns dynamically","code":"$ dp = array ( array ( ) ) ;"}
{"text":"T string is empty","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) $ dp [ $ i ] [ 0 ] = 1 ;"}
{"text":"S string is empty","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ dp [ 0 ] [ $ i ] = $ GLOBALS [ ' MAX ' ] ; for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) { $ ch = $ S [ $ i - 1 ] ; for ( $ k = $ j - 1 ; $ k >= 0 ; $ k -- ) if ( $ T [ $ k ] == $ ch ) break ;"}
{"text":"char not present in T","code":"if ( $ k == -1 ) $ dp [ $ i ] [ $ j ] = 1 ; else $ dp [ $ i ] [ $ j ] = min ( $ dp [ $ i - 1 ] [ $ j ] , $ dp [ $ i - 1 ] [ $ k ] + 1 ) ; } } $ ans = $ dp [ $ m ] [ $ n ] ; if ( $ ans >= $ GLOBALS [ ' MAX ' ] ) $ ans = -1 ; return $ ans ; }"}
{"text":"Driver Code","code":"$ S = \" babab \" ; $ T = \" babba \" ; $ m = strlen ( $ S ) ; $ n = strlen ( $ T ) ; echo \" Length \u2581 of \u2581 shortest \u2581 subsequence \u2581 is \u2581 : \u2581 \" , shortestSeq ( $ S , $ T ) ; ? >"}
{"text":"function to count ways to jump to reach end for each array element","code":"< ? php function countWaysToJump ( $ arr , $ n ) {"}
{"text":"count_jump [ i ] store number of ways arr [ i ] can reach to the end","code":"$ count_jump ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count_jump [ $ i ] = 0 ;"}
{"text":"Last element does not require to jump . Count ways to jump for remaining elements","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"if the element can directly jump to the end","code":"if ( $ arr [ $ i ] >= $ n - $ i - 1 ) $ count_jump [ $ i ] ++ ;"}
{"text":"add the count of all the elements that can reach to end and arr [ i ] can reach to them","code":"for ( $ j = $ i + 1 ; $ j < $ n - 1 && $ j <= $ arr [ $ i ] + $ i ; $ j ++ )"}
{"text":"if element can reach to end then add its count to count_jump [ i ]","code":"if ( $ count_jump [ $ j ] != -1 ) $ count_jump [ $ i ] += $ count_jump [ $ j ] ;"}
{"text":"if arr [ i ] cannot reach to the end","code":"if ( $ count_jump [ $ i ] == 0 ) $ count_jump [ $ i ] = -1 ; }"}
{"text":"print count_jump for each array element","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ count_jump [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 5 , 8 , 9 , 1 , 0 , 7 , 6 , 8 , 9 ) ; $ n = count ( $ arr ) ; countWaysToJump ( $ arr , $ n ) ; ? >"}
{"text":"method returns minimum step for deleting the string , where in one step a palindrome is removed","code":"< ? php function minStepToDeleteString ( $ str ) { $ N = strlen ( $ str ) ;"}
{"text":"declare dp array and initialize it with 0 s","code":"$ dp [ $ N + 1 ] [ $ N + 1 ] = array ( array ( ) ) ; for ( $ i = 0 ; $ i <= $ N ; $ i ++ ) for ( $ j = 0 ; $ j <= $ N ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ;"}
{"text":"loop for substring length we are considering","code":"for ( $ len = 1 ; $ len <= $ N ; $ len ++ ) {"}
{"text":"loop with two variables i and j , denoting starting and ending of substrings","code":"for ( $ i = 0 , $ j = $ len - 1 ; $ j < $ N ; $ i ++ , $ j ++ ) {"}
{"text":"If substring length is 1 , then 1 step will be needed","code":"if ( $ len == 1 ) $ dp [ $ i ] [ $ j ] = 1 ; else {"}
{"text":"delete the ith char individually and assign result for subproblem ( i + 1 , j )","code":"$ dp [ $ i ] [ $ j ] = 1 + $ dp [ $ i + 1 ] [ $ j ] ;"}
{"text":"if current and next char are same , choose min from current and subproblem ( i + 2 , j )","code":"if ( $ str [ $ i ] == $ str [ $ i + 1 ] ) $ dp [ $ i ] [ $ j ] = min ( 1 + $ dp [ $ i + 2 ] [ $ j ] , $ dp [ $ i ] [ $ j ] ) ;"}
{"text":"loop over all right characters and suppose Kth char is same as ith character then choose minimum from current and two substring after ignoring ith and Kth char","code":"for ( $ K = $ i + 2 ; $ K <= $ j ; $ K ++ ) if ( $ str [ $ i ] == $ str [ $ K ] ) $ dp [ $ i ] [ $ j ] = min ( $ dp [ $ i + 1 ] [ $ K - 1 ] + $ dp [ $ K + 1 ] [ $ j ] , $ dp [ $ i ] [ $ j ] ) ; } } }"}
{"text":"Uncomment below snippet to print actual dp tablex for ( int i = 0 ; i < N ; i ++ , cout << endl ) for ( int j = 0 ; j < N ; j ++ ) cout << dp [ i ] [ j ] << \" \u2581 \" ;","code":"return $ dp [ 0 ] [ $ N - 1 ] ; }"}
{"text":"Driver code","code":"$ str = \"2553432\" ; echo minStepToDeleteString ( $ str ) , \" STRNEWLINE \" ; ? >"}
{"text":"Initialize answer as infinite .","code":"< ? php $ inf = 1000000000 ; $ ans = $ inf ;"}
{"text":"function to generate all possible answers . and compute minimum of all costs . i -- > is index of previous partition par -- > is current number of partitions a [ ] and n -- > Input array and its size current_ans -- > Cost of partitions made so far .","code":"function solve ( $ i , $ par , & $ a , $ n , $ k , $ current_ans ) { global $ inf , $ ans ;"}
{"text":"If number of partitions is more than k","code":"if ( $ par > $ k ) return ;"}
{"text":"If we have mad k partitions and have reached last element","code":"if ( $ par == $ k && $ i == $ n - 1 ) { $ ans = min ( $ ans , $ current_ans ) ; return ; }"}
{"text":"1 ) Partition array at different points 2 ) For every point , increase count of partitions , \" par \" by 1. 3 ) Before recursive call , add cost of the partition to current_ans","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) solve ( $ j , $ par + 1 , $ a , $ n , $ k , $ current_ans + ( $ a [ $ j ] - $ a [ $ i + 1 ] ) * ( $ a [ $ j ] - $ a [ $ i + 1 ] ) ) ; }"}
{"text":"Driver code","code":"$ k = 2 ; $ a = array ( 1 , 5 , 8 , 10 ) ; $ n = sizeof ( $ a ) ; solve ( -1 , 0 , $ a , $ n , $ k , 0 ) ; echo $ ans . \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate min steps","code":"< ? php function getMinSteps ( $ n , $ memo ) {"}
{"text":"base case","code":"if ( $ n == 1 ) return 0 ; if ( $ memo [ $ n ] != -1 ) return $ memo [ $ n ] ;"}
{"text":"store temp value for n as min ( f ( n - 1 ) , f ( n \/ 2 ) , f ( n \/ 3 ) ) + 1","code":"$ res = getMinSteps ( $ n - 1 , $ memo ) ; if ( $ n % 2 == 0 ) $ res = min ( $ res , getMinSteps ( $ n \/ 2 , $ memo ) ) ; if ( $ n % 3 == 0 ) $ res = min ( $ res , getMinSteps ( $ n \/ 3 , $ memo ) ) ;"}
{"text":"store memo [ n ] and return","code":"$ memo [ $ n ] = 1 + $ res ; return $ memo [ $ n ] ; }"}
{"text":"This function mainly initializes memo [ ] and calls getMinSteps ( n , memo )","code":"function g_etMinSteps ( $ n ) { $ memo = array ( ) ;"}
{"text":"initialize memoized array","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ memo [ $ i ] = -1 ; return getMinSteps ( $ n , $ memo ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo g_etMinSteps ( $ n ) ; ? >"}
{"text":"Returns smallest possible length with given operation allowed .","code":"< ? php function stringReduction ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Counint occurrences of three different characters ' a ' , ' b ' and ' c ' in str","code":"$ count = array_fill ( 0 , 3 , 0 ) ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ count [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"If all characters are same .","code":"if ( $ count [ 0 ] == $ n $ count [ 1 ] == $ n $ count [ 2 ] == $ n ) return $ n ;"}
{"text":"If all characters are present even number of times or all are present odd number of times .","code":"if ( ( $ count [ 0 ] % 2 ) == ( $ count [ 1 ] % 2 ) && ( $ count [ 1 ] % 2 ) == ( $ count [ 2 ] % 2 ) ) return 2 ;"}
{"text":"Answer is 1 for all other cases .","code":"return 1 ; }"}
{"text":"Driver code","code":"$ str = \" abcbbaacb \" ; print ( stringReduction ( $ str ) ) ; ? >"}
{"text":"Returns count of subsequences of the form a ^ i b ^ j c ^ k","code":"< ? php function countSubsequences ( $ s ) {"}
{"text":"Initialize counts of different subsequences caused by different combination of ' a '","code":"$ aCount = 0 ;"}
{"text":"Initialize counts of different subsequences caused by different combination of ' a ' and different combination of ' b '","code":"$ bCount = 0 ;"}
{"text":"Initialize counts of different subsequences caused by different combination of ' a ' , ' b ' and ' c ' .","code":"$ cCount = 0 ;"}
{"text":"Traverse all characters of given string","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"If current character is ' a ' , then there are following possibilities : a ) Current character begins a new subsequence . b ) Current character is part of aCount subsequences . c ) Current character is not part of aCount subsequences .","code":"if ( $ s [ $ i ] == ' a ' ) $ aCount = ( 1 + 2 * $ aCount ) ;"}
{"text":"If current character is ' b ' , then there are following possibilities : a ) Current character begins a new subsequence of b 's with aCount subsequences. b) Current character is part of bCount subsequences. c) Current character is not part of  bCount subsequences.","code":"else if ( $ s [ $ i ] == ' b ' ) $ bCount = ( $ aCount + 2 * $ bCount ) ;"}
{"text":"If current character is ' c ' , then there are following possibilities : a ) Current character begins a new subsequence of c 's with bCount subsequences. b) Current character is part of cCount subsequences. c) Current character is not part of  cCount subsequences.","code":"else if ( $ s [ $ i ] == ' c ' ) $ cCount = ( $ bCount + 2 * $ cCount ) ; } return $ cCount ; }"}
{"text":"Driver Code","code":"$ s = \" abbc \" ; echo countSubsequences ( $ s ) ; ? >"}
{"text":"PHP program to find maximum revenue by placing billboard on the highway with given constraints .","code":"< ? php function maxRevenue ( $ m , $ x , $ revenue , $ n , $ t ) {"}
{"text":"Array to store maximum revenue at each miles .","code":"$ maxRev = array_fill ( 0 , $ m + 1 , false ) ;"}
{"text":"actual minimum distance between 2 billboards .","code":"$ nxtbb = 0 ; for ( $ i = 1 ; $ i <= $ m ; $ i ++ ) {"}
{"text":"check if all billboards are already placed .","code":"if ( $ nxtbb < $ n ) {"}
{"text":"check if we have billboard for that particular mile . If not , copy the previous maximum revenue .","code":"if ( $ x [ $ nxtbb ] != $ i ) $ maxRev [ $ i ] = $ maxRev [ $ i - 1 ] ;"}
{"text":"we do have billboard for this mile .","code":"else {"}
{"text":"If current position is less than or equal to t , then we can have only one billboard .","code":"if ( $ i <= $ t ) $ maxRev [ $ i ] = max ( $ maxRev [ $ i - 1 ] , $ revenue [ $ nxtbb ] ) ;"}
{"text":"Else we may have to remove previously placed billboard","code":"else $ maxRev [ $ i ] = max ( $ maxRev [ $ i - $ t - 1 ] + $ revenue [ $ nxtbb ] , $ maxRev [ $ i - 1 ] ) ; $ nxtbb ++ ; } } else $ maxRev [ $ i ] = $ maxRev [ $ i - 1 ] ; } return $ maxRev [ $ m ] ; }"}
{"text":"Driver Code","code":"$ m = 20 ; $ x = array ( 6 , 7 , 12 , 13 , 14 ) ; $ revenue = array ( 5 , 6 , 5 , 3 , 1 ) ; $ n = sizeof ( $ x ) ; $ t = 5 ; echo maxRevenue ( $ m , $ x , $ revenue , $ n , $ t ) ; ? >"}
{"text":"Java program to find maximum K such that K x K is a submatrix with equal elements .","code":"< ? php $ Row = 6 ; $ Col = 6 ;"}
{"text":"Returns size of the largest square sub - matrix with all same elements .","code":"function largestKSubmatrix ( & $ a ) { global $ Row , $ Col ; $ result = 0 ; for ( $ i = 0 ; $ i < $ Row ; $ i ++ ) { for ( $ j = 0 ; $ j < $ Col ; $ j ++ ) {"}
{"text":"If elements is at top row or first column , it wont form a square matrix 's   bottom-right","code":"if ( $ i == 0 $ j == 0 ) $ dp [ $ i ] [ $ j ] = 1 ; else {"}
{"text":"Check if adjacent elements are equal","code":"if ( $ a [ $ i ] [ $ j ] == $ a [ $ i - 1 ] [ $ j ] && $ a [ $ i ] [ $ j ] == $ a [ $ i ] [ $ j - 1 ] && $ a [ $ i ] [ $ j ] == $ a [ $ i - 1 ] [ $ j - 1 ] ) $ dp [ $ i ] [ $ j ] = min ( min ( $ dp [ $ i - 1 ] [ $ j ] , $ dp [ $ i ] [ $ j - 1 ] ) , $ dp [ $ i - 1 ] [ $ j - 1 ] ) + 1 ;"}
{"text":"If not equal , then it will form a 1 x1 submatrix","code":"else $ dp [ $ i ] [ $ j ] = 1 ; }"}
{"text":"Update result at each ( i , j )","code":"$ result = max ( $ result , $ dp [ $ i ] [ $ j ] ) ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ a = array ( array ( 2 , 2 , 3 , 3 , 4 , 4 ) , array ( 5 , 5 , 7 , 7 , 7 , 4 ) , array ( 1 , 2 , 7 , 7 , 7 , 4 ) , array ( 4 , 4 , 7 , 7 , 7 , 4 ) , array ( 5 , 5 , 5 , 1 , 2 , 7 ) , array ( 8 , 7 , 9 , 4 , 4 , 4 ) ) ; echo largestKSubmatrix ( $ a ) ; ? >"}
{"text":"Naive approach in PHP to find probability of at least k heads","code":"< ? php $ MAX = 21 ; $ fact = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Returns probability of getting at least k heads in n tosses .","code":"function probability ( $ k , $ n ) { global $ fact ; $ ans = 0 ; for ( $ i = $ k ; $ i <= $ n ; ++ $ i )"}
{"text":"Probability of getting exactly i heads out of n heads","code":"$ ans += $ fact [ $ n ] \/ ( $ fact [ $ i ] * $ fact [ $ n - $ i ] ) ;"}
{"text":"Note : 1 << n = pow ( 2 , n )","code":"$ ans = $ ans \/ ( 1 << $ n ) ; return $ ans ; } function precompute ( ) { global $ fact ;"}
{"text":"Preprocess all factorial only upto 19 , as after that it will overflow","code":"$ fact [ 0 ] = $ fact [ 1 ] = 1 ; for ( $ i = 2 ; $ i < 20 ; ++ $ i ) $ fact [ $ i ] = $ fact [ $ i - 1 ] * $ i ; }"}
{"text":"Driver code","code":"precompute ( ) ;"}
{"text":"Probability of getting 2 head out of 3 coins","code":"echo number_format ( probability ( 2 , 3 ) , 6 ) . \" STRNEWLINE \" ;"}
{"text":"Probability of getting 3 head out of 6 coins","code":"echo number_format ( probability ( 3 , 6 ) , 6 ) . \" STRNEWLINE \" ;"}
{"text":"Probability of getting 12 head out of 18 coins","code":"echo number_format ( probability ( 12 , 18 ) , 6 ) ; ? >"}
{"text":"PHP program to count number of binary strings with k times appearing consecutive 1 's.","code":"< ? php function countStrings ( $ n , $ k ) {"}
{"text":"dp [ i ] [ j ] [ 0 ] stores count of binary strings of length i with j consecutive 1 ' s \u2581 and \u2581 ending \u2581 at \u2581 0 . \u2581 \u2581 dp [ i ] [ j ] [1 ] \u2581 stores \u2581 count \u2581 of \u2581 binary \u2581 \u2581 strings \u2581 of \u2581 length \u2581 i \u2581 with \u2581 j \u2581 consecutive \u2581 \u2581 1' s and ending at 1.","code":"$ dp = array_fill ( 0 , $ n + 1 , array_fill ( 0 , $ k + 1 , array_fill ( 0 , 2 , 0 ) ) ) ;"}
{"text":"If n = 1 and k = 0.","code":"$ dp [ 1 ] [ 0 ] [ 0 ] = 1 ; $ dp [ 1 ] [ 0 ] [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"number of adjacent 1 's can not exceed i-1","code":"for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { if ( isset ( $ dp [ $ i ] [ $ j ] [ 0 ] ) || isset ( $ dp [ $ i ] [ $ j ] [ 1 ] ) ) { $ dp [ $ i ] [ $ j ] [ 0 ] = $ dp [ $ i - 1 ] [ $ j ] [ 0 ] + $ dp [ $ i - 1 ] [ $ j ] [ 1 ] ; $ dp [ $ i ] [ $ j ] [ 1 ] = $ dp [ $ i - 1 ] [ $ j ] [ 0 ] ; } if ( $ j - 1 >= 0 && isset ( $ dp [ $ i ] [ $ j ] [ 1 ] ) ) $ dp [ $ i ] [ $ j ] [ 1 ] += $ dp [ $ i - 1 ] [ $ j - 1 ] [ 1 ] ; } } return $ dp [ $ n ] [ $ k ] [ 0 ] + $ dp [ $ n ] [ $ k ] [ 1 ] ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 2 ; echo countStrings ( $ n , $ k ) ; ? >"}
{"text":"Returns count of ways n people can remain single or paired up .","code":"< ? php function countFriendsPairings ( $ n ) { $ dp = array_fill ( 0 , 1000 , -1 ) ; if ( $ dp [ $ n ] != -1 ) return $ dp [ $ n ] ; if ( $ n > 2 ) { $ dp [ $ n ] = countFriendsPairings ( $ n - 1 ) + ( $ n - 1 ) * countFriendsPairings ( $ n - 2 ) ; return $ dp [ $ n ] ; } else { $ dp [ $ n ] = $ n ; return $ dp [ $ n ] ; } }"}
{"text":"Driver Code","code":"$ n = 4 ; echo countFriendsPairings ( $ n ) ? >"}
{"text":"Function for finding maximum sum","code":"< ? php function maxPathSum ( $ tri , $ m , $ n ) {"}
{"text":"loop for bottom - up calculation","code":"for ( $ i = $ m - 1 ; $ i >= 0 ; $ i -- ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) {"}
{"text":"for each element , check both elements just below the number and below right to the number add the maximum of them to it","code":"if ( $ tri [ $ i + 1 ] [ $ j ] > $ tri [ $ i + 1 ] [ $ j + 1 ] ) $ tri [ $ i ] [ $ j ] += $ tri [ $ i + 1 ] [ $ j ] ; else $ tri [ $ i ] [ $ j ] += $ tri [ $ i + 1 ] [ $ j + 1 ] ; } }"}
{"text":"return the top element which stores the maximum sum","code":"return $ tri [ 0 ] [ 0 ] ; }"}
{"text":"Driver Code","code":"$ tri = array ( array ( 1 , 0 , 0 ) , array ( 4 , 8 , 0 ) , array ( 1 , 5 , 3 ) ) ; echo maxPathSum ( $ tri , 2 , 2 ) ; ? >"}
{"text":"PHP program to find LCS of three strings","code":"< ? php $ X = \" AGGT12\" ; $ Y = \"12TXAYB \" ; $ Z = \"12XBA \" ; $ dp = array_fill ( 0 , 100 , array_fill ( 0 , 100 , array_fill ( 0 , 100 , -1 ) ) ) ;"}
{"text":"Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ] and Z [ 0. . o - 1 ]","code":"function lcsOf3 ( $ i , $ j , $ k ) { global $ dp , $ X , $ Y , $ Z ; if ( $ i == -1 $ j == -1 $ k == -1 ) return 0 ; if ( $ dp [ $ i ] [ $ j ] [ $ k ] != -1 ) return $ dp [ $ i ] [ $ j ] [ $ k ] ; if ( $ X [ $ i ] == $ Y [ $ j ] && $ Y [ $ j ] == $ Z [ $ k ] ) return $ dp [ $ i ] [ $ j ] [ $ k ] = 1 + lcsOf3 ( $ i - 1 , $ j - 1 , $ k - 1 ) ; else return $ dp [ $ i ] [ $ j ] [ $ k ] = max ( max ( lcsOf3 ( $ i - 1 , $ j , $ k ) , lcsOf3 ( $ i , $ j - 1 , $ k ) ) , lcsOf3 ( $ i , $ j , $ k - 1 ) ) ; }"}
{"text":"Driver code","code":"$ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ; $ o = strlen ( $ Z ) ; echo \" Length \u2581 of \u2581 LCS \u2581 is \u2581 \" . lcsOf3 ( $ m - 1 , $ n - 1 , $ o - 1 ) ; ? >"}
{"text":"PHP program to count number of paths in a maze with obstacles .","code":"< ? php $ R = 4 ; $ C = 4 ;"}
{"text":"Returns count of possible paths in a maze [ R ] [ C ] from ( 0 , 0 ) to ( R - 1 , C - 1 )","code":"function countPaths ( $ maze ) { global $ R , $ C ;"}
{"text":"If the initial cell is blocked , there is no way of moving anywhere","code":"if ( $ maze [ 0 ] [ 0 ] == - 1 ) return 0 ;"}
{"text":"Initializing the leftmost column","code":"for ( $ i = 0 ; $ i < $ R ; $ i ++ ) { if ( $ maze [ $ i ] [ 0 ] == 0 ) $ maze [ $ i ] [ 0 ] = 1 ;"}
{"text":"If we encounter a blocked cell in leftmost row , there is no way of visiting any cell directly below it .","code":"else break ; }"}
{"text":"Similarly initialize the topmost row","code":"for ( $ i = 1 ; $ i < $ C ; $ i ++ ) { if ( $ maze [ 0 ] [ $ i ] == 0 ) $ maze [ 0 ] [ $ i ] = 1 ;"}
{"text":"If we encounter a blocked cell in bottommost row , there is no way of visiting any cell directly below it .","code":"else break ; }"}
{"text":"The only difference is that if a cell is - 1 , simply ignore it else recursively compute count value maze [ i ] [ j ]","code":"for ( $ i = 1 ; $ i < $ R ; $ i ++ ) { for ( $ j = 1 ; $ j < $ C ; $ j ++ ) {"}
{"text":"If blockage is found , ignore this cell","code":"if ( $ maze [ $ i ] [ $ j ] == -1 ) continue ;"}
{"text":"If we can reach maze [ i ] [ j ] from maze [ i - 1 ] [ j ] then increment count .","code":"if ( $ maze [ $ i - 1 ] [ $ j ] > 0 ) $ maze [ $ i ] [ $ j ] = ( $ maze [ $ i ] [ $ j ] + $ maze [ $ i - 1 ] [ $ j ] ) ;"}
{"text":"If we can reach maze [ i ] [ j ] from maze [ i ] [ j - 1 ] then increment count .","code":"if ( $ maze [ $ i ] [ $ j - 1 ] > 0 ) $ maze [ $ i ] [ $ j ] = ( $ maze [ $ i ] [ $ j ] + $ maze [ $ i ] [ $ j - 1 ] ) ; } }"}
{"text":"If the final cell is blocked , output 0 , otherwise the answer","code":"return ( $ maze [ $ R - 1 ] [ $ C - 1 ] > 0 ) ? $ maze [ $ R - 1 ] [ $ C - 1 ] : 0 ; }"}
{"text":"Driver Code","code":"$ maze = array ( array ( 0 , 0 , 0 , 0 ) , array ( 0 , -1 , 0 , 0 ) , array ( -1 , 0 , 0 , 0 ) , array ( 0 , 0 , 0 , 0 ) ) ; echo countPaths ( $ maze ) ; ? >"}
{"text":"Returns maximum decimal value in binary matrix . Here p indicate power of 2","code":"< ? php function maxDecimalValue ( $ mat , $ i , $ j , $ p ) { $ N = 4 ;"}
{"text":"Out of matrix boundary","code":"if ( $ i >= $ N $ j >= $ N ) return 0 ; $ result = max ( maxDecimalValue ( $ mat , $ i , $ j + 1 , $ p + 1 ) , maxDecimalValue ( $ mat , $ i + 1 , $ j , $ p + 1 ) ) ;"}
{"text":"If current matrix value is 1 then return result + power ( 2 , p ) else result","code":"if ( $ mat [ $ i ] [ $ j ] == 1 ) return pow ( 2 , $ p ) + $ result ; else return $ result ; }"}
{"text":"Driver Code","code":"$ mat = array ( array ( 1 , 1 , 0 , 1 ) , array ( 0 , 1 , 1 , 0 ) , array ( 1 , 0 , 0 , 1 ) , array ( 1 , 0 , 1 , 1 ) ) ; echo maxDecimalValue ( $ mat , 0 , 0 , 0 ) ; ? >"}
{"text":"Returns total number of palindrome substring of length greater then equal to 2","code":"< ? php function CountPS ( $ str , $ n ) {"}
{"text":"create empty 2 - D matrix that counts all palindrome substring . dp [ i ] [ j ] stores counts of palindromic substrings in st [ i . . j ]","code":"$ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ;"}
{"text":"P [ i ] [ j ] = true if substring str [ i . . j ] is palindrome , else false","code":"$ P = array ( array ( ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) $ P [ $ i ] [ $ j ] = false ;"}
{"text":"palindrome of single length","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ P [ $ i ] [ $ i ] = true ;"}
{"text":"palindrome of length 2","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ str [ $ i ] == $ str [ $ i + 1 ] ) { $ P [ $ i ] [ $ i + 1 ] = true ; $ dp [ $ i ] [ $ i + 1 ] = 1 ; } }"}
{"text":"Palindromes of length more then 2. This loop is similar to Matrix Chain Multiplication . We start with a gap of length 2 and fill DP table in a way that gap between starting and ending indexes increases one by one by outer loop .","code":"for ( $ gap = 2 ; $ gap < $ n ; $ gap ++ ) {"}
{"text":"Pick starting point for current gap","code":"for ( $ i = 0 ; $ i < $ n - $ gap ; $ i ++ ) {"}
{"text":"Set ending point","code":"$ j = $ gap + $ i ;"}
{"text":"If current string is palindrome","code":"if ( $ str [ $ i ] == $ str [ $ j ] && $ P [ $ i + 1 ] [ $ j - 1 ] ) $ P [ $ i ] [ $ j ] = true ;"}
{"text":"Add current palindrome substring ( + 1 ) and rest palindrome substring ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] ) remove common palindrome substrings ( - dp [ i + 1 ] [ j - 1 ] )","code":"if ( $ P [ $ i ] [ $ j ] == true ) $ dp [ $ i ] [ $ j ] = $ dp [ $ i ] [ $ j - 1 ] + $ dp [ $ i + 1 ] [ $ j ] + 1 - $ dp [ $ i + 1 ] [ $ j - 1 ] ; else $ dp [ $ i ] [ $ j ] = $ dp [ $ i ] [ $ j - 1 ] + $ dp [ $ i + 1 ] [ $ j ] - $ dp [ $ i + 1 ] [ $ j - 1 ] ; } }"}
{"text":"return total palindromic substrings","code":"return $ dp [ 0 ] [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ str = \" abaab \" ; $ n = strlen ( $ str ) ; echo CountPS ( $ str , $ n ) ; ? >"}
{"text":"Returns maximum subsequence sum such that no three elements are consecutive","code":"< ? php function maxSumWO3Consec ( $ arr , $ n ) {"}
{"text":"Stores result for subarray arr [ 0. . i ] , i . e . , maximum possible sum in subarray arr [ 0. . i ] such that no three elements are consecutive$ .","code":"$ sum = array ( ) ;"}
{"text":"Base cases ( process first three elements )","code":"if ( $ n >= 1 ) $ sum [ 0 ] = $ arr [ 0 ] ; if ( $ n >= 2 ) $ sum [ 1 ] = $ arr [ 0 ] + $ arr [ 1 ] ; if ( $ n > 2 ) $ sum [ 2 ] = max ( $ sum [ 1 ] , max ( $ arr [ 1 ] + $ arr [ 2 ] , $ arr [ 0 ] + $ arr [ 2 ] ) ) ;"}
{"text":"Process rest of the elements We have three cases 1 ) Exclude arr [ i ] , i . e . , sum [ i ] = sum [ i - 1 ] 2 ) Exclude arr [ i - 1 ] , i . e . , sum [ i ] = sum [ i - 2 ] + arr [ i ] 3 ) Exclude arr [ i - 2 ] , i . e . , sum [ i - 3 ] + arr [ i ] + arr [ i - 1 ]","code":"for ( $ i = 3 ; $ i < $ n ; $ i ++ ) $ sum [ $ i ] = max ( max ( $ sum [ $ i - 1 ] , $ sum [ $ i - 2 ] + $ arr [ $ i ] ) , $ arr [ $ i ] + $ arr [ $ i - 1 ] + $ sum [ $ i - 3 ] ) ; return $ sum [ $ n - 1 ] ; }"}
{"text":"Driver code","code":"$ arr = array ( 100 , 1000 , 100 , 1000 , 1 ) ; $ n = count ( $ arr ) ; echo maxSumWO3Consec ( $ arr , $ n ) ; ? >"}
{"text":"method to return maximum sum we can get by finding less than K difference pair","code":"< ? php function maxSumPairWithDifferenceLessThanK ( $ arr , $ N , $ K ) {"}
{"text":"Sort input array in ascending order .","code":"sort ( $ arr ) ;"}
{"text":"dp [ i ] denotes the maximum disjoint pair sum we can achieve using first i elements","code":"$ dp = array ( ) ;"}
{"text":"if no element then dp value will be 0","code":"$ dp [ 0 ] = 0 ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) {"}
{"text":"first give previous value to dp [ i ] i . e . no pairing with ( i - 1 ) th element","code":"$ dp [ $ i ] = $ dp [ $ i - 1 ] ;"}
{"text":"if current and previous element can form a pair","code":"if ( $ arr [ $ i ] - $ arr [ $ i - 1 ] < $ K ) {"}
{"text":"update dp [ i ] by choosing maximum between pairing and not pairing","code":"if ( $ i >= 2 ) $ dp [ $ i ] = max ( $ dp [ $ i ] , $ dp [ $ i - 2 ] + $ arr [ $ i ] + $ arr [ $ i - 1 ] ) ; else $ dp [ $ i ] = max ( $ dp [ $ i ] , $ arr [ $ i ] + $ arr [ $ i - 1 ] ) ; } }"}
{"text":"last index will have the result","code":"return $ dp [ $ N - 1 ] ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 5 , 10 , 15 , 17 , 12 , 9 ) ; $ N = sizeof ( $ arr ) ; $ K = 4 ; echo maxSumPairWithDifferenceLessThanK ( $ arr , $ N , $ K ) ; ? >"}
{"text":"recursive function","code":"< ? php function lucas ( $ n ) {"}
{"text":"Base cases","code":"if ( $ n == 0 ) return 2 ; if ( $ n == 1 ) return 1 ;"}
{"text":"recurrence relation","code":"return lucas ( $ n - 1 ) + lucas ( $ n - 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 9 ; echo lucas ( $ n ) ; ? >"}
{"text":"Function to find the maximum sum","code":"< ? php function breakSum ( $ n ) {"}
{"text":"base conditions","code":"if ( $ n == 0 $ n == 1 ) return $ n ;"}
{"text":"recursively break the number and return what maximum you can get","code":"return max ( ( breakSum ( intval ( $ n \/ 2 ) ) + breakSum ( intval ( $ n \/ 3 ) ) + breakSum ( intval ( $ n \/ 4 ) ) ) , $ n ) ; }"}
{"text":"Driver program to run the case","code":"$ n = 12 ; echo breakSum ( $ n ) ; ? >"}
{"text":"Function return the total palindromic subsequence","code":"< ? php function countPS ( $ str ) { $ N = strlen ( $ str ) ;"}
{"text":"create a 2D array to store the count of palindromic subsequence","code":"$ cps = array_fill ( 0 , $ N + 1 , array_fill ( 0 , $ N + 1 , NULL ) ) ;"}
{"text":"palindromic subsequence of length 1","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) $ cps [ $ i ] [ $ i ] = 1 ;"}
{"text":"check subsequence of length L is palindrome or not","code":"for ( $ L = 2 ; $ L <= $ N ; $ L ++ ) { for ( $ i = 0 ; $ i <= $ N - $ L ; $ i ++ ) { $ k = $ L + $ i - 1 ; if ( $ str [ $ i ] == $ str [ $ k ] ) $ cps [ $ i ] [ $ k ] = $ cps [ $ i ] [ $ k - 1 ] + $ cps [ $ i + 1 ] [ $ k ] + 1 ; else $ cps [ $ i ] [ $ k ] = $ cps [ $ i ] [ $ k - 1 ] + $ cps [ $ i + 1 ] [ $ k ] - $ cps [ $ i + 1 ] [ $ k - 1 ] ; } }"}
{"text":"return total palindromic subsequence","code":"return $ cps [ 0 ] [ $ N - 1 ] ; }"}
{"text":"Driver Code","code":"$ str = \" abcb \" ; echo \" Total \u2581 palindromic \u2581 subsequence \u2581 are \u2581 : \u2581 \" . countPS ( $ str ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to counts Palindromic Subsequence in a given String using recursion","code":"< ? php $ dp = array_fill ( 0 , 100 , array_fill ( 0 , 1000 , -1 ) ) ; $ str = \" abcb \" ; $ n = strlen ( $ str ) ;"}
{"text":"Function return the total palindromic subsequence","code":"function countPS ( $ i , $ j ) { global $ str , $ dp , $ n ; if ( $ i > $ j ) return 0 ; if ( $ dp [ $ i ] [ $ j ] != -1 ) return $ dp [ $ i ] [ $ j ] ; if ( $ i == $ j ) return $ dp [ $ i ] [ $ j ] = 1 ; else if ( $ str [ $ i ] == $ str [ $ j ] ) return $ dp [ $ i ] [ $ j ] = countPS ( $ i + 1 , $ j ) + countPS ( $ i , $ j - 1 ) + 1 ; else return $ dp [ $ i ] [ $ j ] = countPS ( $ i + 1 , $ j ) + countPS ( $ i , $ j - 1 ) - countPS ( $ i + 1 , $ j - 1 ) ; }"}
{"text":"Driver code","code":"echo \" Total \u2581 palindromic \u2581 subsequence \u2581 are \u2581 : \u2581 \" . countPS ( 0 , $ n - 1 ) ; ? >"}
{"text":"function to find minimum of 3 elements","code":"< ? php function minimum ( $ a , $ b , $ c ) { return min ( min ( $ a , $ b ) , $ c ) ; }"}
{"text":"Returns minimum possible sum of elements such that an element out of every three consecutive elements is picked .","code":"function findMinSum ( $ arr , $ n ) {"}
{"text":"Create a DP table to store results of subproblems . sum [ i ] is going to store minimum possible sum when arr [ i ] is part of the solution .","code":"$ sum [ $ n ] = 0 ;"}
{"text":"When there are less than or equal to 3 elements","code":"$ sum [ 0 ] = $ arr [ 0 ] ; $ sum [ 1 ] = $ arr [ 1 ] ; $ sum [ 2 ] = $ arr [ 2 ] ;"}
{"text":"Iterate through all other elements","code":"for ( $ i = 3 ; $ i < $ n ; $ i ++ ) $ sum [ $ i ] = $ arr [ $ i ] + minimum ( $ sum [ $ i - 3 ] , $ sum [ $ i - 2 ] , $ sum [ $ i - 1 ] ) ; return minimum ( $ sum [ $ n - 1 ] , $ sum [ $ n - 2 ] , $ sum [ $ n - 3 ] ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 20 , 2 , 10 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" Min \u2581 Sum \u2581 is \u2581 \" , findMinSum ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find minimum cost to get exactly W Kg with given packets","code":"< ? php $ INF = 1000000 ;"}
{"text":"cost [ ] initial cost array including unavailable packet W capacity of bag","code":"function MinimumCost ( & $ cost , $ n , $ W ) { global $ INF ;"}
{"text":"val [ ] and wt [ ] arrays val [ ] array to store cost of ' i ' kg packet of orange wt [ ] array weight of packet of orange","code":"$ val = array ( ) ; $ wt = array ( ) ;"}
{"text":"traverse the original cost [ ] array and skip unavailable packets and make val [ ] and wt [ ] array . size variable tells the available number of distinct weighted packets","code":"$ size = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ cost [ $ i ] != -1 ) { array_push ( $ val , $ cost [ $ i ] ) ; array_push ( $ wt , $ i + 1 ) ; $ size ++ ; } } $ n = $ size ; $ min_cost = array_fill ( 0 , $ n + 1 , array_fill ( 0 , $ W + 1 , NULL ) ) ;"}
{"text":"fill 0 th row with infinity","code":"for ( $ i = 0 ; $ i <= $ W ; $ i ++ ) $ min_cost [ 0 ] [ $ i ] = $ INF ;"}
{"text":"fill 0 'th column with 0","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ min_cost [ $ i ] [ 0 ] = 0 ;"}
{"text":"now check for each weight one by one and fill the matrix according to the condition","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ W ; $ j ++ ) {"}
{"text":"wt [ i - 1 ] > j means capacity of bag is less then weight of item","code":"if ( $ wt [ $ i - 1 ] > $ j ) $ min_cost [ $ i ] [ $ j ] = $ min_cost [ $ i - 1 ] [ $ j ] ;"}
{"text":"here we check we get minimum cost either by including it or excluding it","code":"else $ min_cost [ $ i ] [ $ j ] = min ( $ min_cost [ $ i - 1 ] [ $ j ] , $ min_cost [ $ i ] [ $ j - $ wt [ $ i - 1 ] ] + $ val [ $ i - 1 ] ) ; } }"}
{"text":"exactly weight W can not be made by given weights","code":"if ( $ min_cost [ $ n ] [ $ W ] == $ INF ) return -1 ; else return $ min_cost [ $ n ] [ $ W ] ; }"}
{"text":"Driver Code","code":"$ cost = array ( 1 , 2 , 3 , 4 , 5 ) ; $ W = 5 ; $ n = sizeof ( $ cost ) ; echo MinimumCost ( $ cost , $ n , $ W ) ; ? >"}
{"text":"Recursive function to find the number of times the second string occurs in the first string , whether continuous or discontinuous","code":"< ? php function count_1 ( $ a , $ b , $ m , $ n ) {"}
{"text":"If both first and second string is empty , or if second string is empty , return 1","code":"if ( ( $ m == 0 && $ n == 0 ) $ n == 0 ) return 1 ;"}
{"text":"If only first string is empty and second string is not empty , return 0","code":"if ( $ m == 0 ) return 0 ;"}
{"text":"If last characters are same Recur for remaining strings by 1. considering last characters of both strings 2. ignoring last character of first string","code":"if ( $ a [ $ m - 1 ] == $ b [ $ n - 1 ] ) return count_1 ( $ a , $ b , $ m - 1 , $ n - 1 ) + count_1 ( $ a , $ b , $ m - 1 , $ n ) ; else"}
{"text":"If last characters are different , ignore last char of first string and recur for remaining string","code":"return count_1 ( $ a , $ b , $ m - 1 , $ n ) ; }"}
{"text":"Driver code","code":"$ a = \" GeeksforGeeks \" ; $ b = \" Gks \" ; echo count_1 ( $ a , $ b , strlen ( $ a ) , strlen ( $ b ) ) . \" \" ; return 0 ; ? >"}
{"text":"Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ]","code":"< ? php function lcs ( $ X , $ Y , $ m , $ n ) { $ L = array_fill ( 0 , ( $ m + 1 ) , array_fill ( 0 , ( $ n + 1 ) , NULL ) ) ;"}
{"text":"Following steps build L [ m + 1 ] [ n + 1 ] in bottom up fashion . Note that L [ i ] [ j ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ]","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { if ( $ i == 0 $ j == 0 ) $ L [ $ i ] [ $ j ] = 0 ; else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] ) $ L [ $ i ] [ $ j ] = $ L [ $ i - 1 ] [ $ j - 1 ] + 1 ; else $ L [ $ i ] [ $ j ] = max ( $ L [ $ i - 1 ] [ $ j ] , $ L [ $ i ] [ $ j - 1 ] ) ; } }"}
{"text":"L [ m ] [ n ] contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ]","code":"return $ L [ $ m ] [ $ n ] ; }"}
{"text":"Returns cost of making X [ ] and Y [ ] identical . costX is cost of removing a character from X [ ] and costY is cost of removing a character from Y [ ] \/","code":"function findMinCost ( & $ X , & $ Y , $ costX , $ costY ) {"}
{"text":"Find LCS of X [ ] and Y [ ]","code":"$ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ; $ len_LCS = lcs ( $ X , $ Y , $ m , $ n ) ;"}
{"text":"Cost of making two strings identical is SUM of following two 1 ) Cost of removing extra characters from first string 2 ) Cost of removing extra characters from second string","code":"return $ costX * ( $ m - $ len_LCS ) + $ costY * ( $ n - $ len_LCS ) ; }"}
{"text":"Driver program to test above function","code":"$ X = \" ef \" ; $ Y = \" gh \" ; echo \" Minimum \u2581 Cost \u2581 to \u2581 make \u2581 two \u2581 strings \u2581 \" . \" \u2581 identical \u2581 is \u2581 = \u2581 \" . findMinCost ( $ X , $ Y , 10 , 20 ) ; return 0 ; ? >"}
{"text":"Returns count of solutions of a + b + c = n","code":"< ? php function countIntegralSolutions ( $ n ) {"}
{"text":"Initialize result","code":"$ result = 0 ;"}
{"text":"Consider all triplets and increment result whenever sum of a triplet is n .","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n - $ i ; $ j ++ ) for ( $ k = 0 ; $ k <= ( $ n - $ i - $ j ) ; $ k ++ ) if ( $ i + $ j + $ k == $ n ) $ result ++ ; return $ result ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo countIntegralSolutions ( $ n ) ; ? >"}
{"text":"Returns count of solutions of a + b + c = n","code":"< ? php function countIntegralSolutions ( $ n ) { return ( ( $ n + 1 ) * ( $ n + 2 ) ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo countIntegralSolutions ( $ n ) ; ? >"}
{"text":"Find maximum subarray sum for subarray [ 0. . i ] using standard Kadane ' s \u2581 algorithm . \u2581 \u2581 This \u2581 version \u2581 of \u2581 Kadane ' s Algorithm will work if all numbers are negative","code":"< ? php function maxLeftSubArraySum ( & $ a , $ size , & $ sum ) { $ max_so_far = $ a [ 0 ] ; $ curr_max = $ a [ 0 ] ; $ sum [ 0 ] = $ max_so_far ; for ( $ i = 1 ; $ i < $ size ; $ i ++ ) { $ curr_max = max ( $ a [ $ i ] , $ curr_max + $ a [ $ i ] ) ; $ max_so_far = max ( $ max_so_far , $ curr_max ) ; $ sum [ $ i ] = $ max_so_far ; } return $ max_so_far ; }"}
{"text":"Find maximum subarray sum for subarray [ i . . n ] using Kadane ' s \u2581 algorithm . \u2581 This \u2581 \u2581 version \u2581 of \u2581 Kadane ' s Algorithm will work if all numbers are negative","code":"function maxRightSubArraySum ( & $ a , $ n , & $ sum ) { $ max_so_far = $ a [ $ n ] ; $ curr_max = $ a [ $ n ] ; $ sum [ $ n ] = $ max_so_far ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { $ curr_max = max ( $ a [ $ i ] , $ curr_max + $ a [ $ i ] ) ; $ max_so_far = max ( $ max_so_far , $ curr_max ) ; $ sum [ $ i ] = $ max_so_far ; } return $ max_so_far ; }"}
{"text":"The function finds two non - overlapping contiguous sub - arrays such that the absolute difference between the sum of two sub - array is maximum .","code":"function findMaxAbsDiff ( & $ arr , $ n ) {"}
{"text":"create and build an array that stores maximum sums of subarrays that lie in arr [ 0. . . i ]","code":"$ leftMax = array_fill ( 0 , $ n , NULL ) ; maxLeftSubArraySum ( $ arr , $ n , $ leftMax ) ;"}
{"text":"create and build an array that stores maximum sums of subarrays that lie in arr [ i + 1. . . n - 1 ]","code":"$ rightMax = array_fill ( 0 , $ n , NULL ) ; maxRightSubArraySum ( $ arr , $ n - 1 , $ rightMax ) ;"}
{"text":"Invert array ( change sign ) to find minumum sum subarrays","code":"$ invertArr = array_fill ( 0 , $ n , NULL ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ invertArr [ $ i ] = - $ arr [ $ i ] ;"}
{"text":"create and build an array that stores minimum sums of subarrays that lie in arr [ 0. . . i ]","code":"$ leftMin = array_fill ( 0 , $ n , NULL ) ; maxLeftSubArraySum ( $ invertArr , $ n , $ leftMin ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ leftMin [ $ i ] = - $ leftMin [ $ i ] ;"}
{"text":"create and build an array that stores minimum sums of subarrays that lie in arr [ i + 1. . . n - 1 ]","code":"$ rightMin = array_fill ( 0 , $ n , NULL ) ; maxRightSubArraySum ( $ invertArr , $ n - 1 , $ rightMin ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ rightMin [ $ i ] = - $ rightMin [ $ i ] ; $ result = PHP_INT_MIN ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"For each index i , take maximum of 1. abs ( max sum subarray that lies in arr [ 0. . . i ] - min sum subarray that lies in arr [ i + 1. . . n - 1 ] ) 2. abs ( min sum subarray that lies in arr [ 0. . . i ] - max sum subarray that lies in arr [ i + 1. . . n - 1 ] )","code":"$ absValue = max ( abs ( $ leftMax [ $ i ] - $ rightMin [ $ i + 1 ] ) , abs ( $ leftMin [ $ i ] - $ rightMax [ $ i + 1 ] ) ) ; if ( $ absValue > $ result ) $ result = $ absValue ; } return $ result ; }"}
{"text":"Driver Code","code":"$ a = array ( -2 , -3 , 4 , -1 , -2 , 1 , 5 , -3 ) ; $ n = sizeof ( $ a ) ; echo findMaxAbsDiff ( $ a , $ n ) ; ? >"}
{"text":"Returns count of arrangements where last placed ball is ' last ' . ' last ' is 0 for ' p ' , 1 for ' q ' and 2 for ' r '","code":"< ? php function countWays ( $ p , $ q , $ r , $ last ) {"}
{"text":"if number of balls of any color becomes less than 0 the number of ways arrangements is 0.","code":"if ( $ p < 0 $ q < 0 $ r < 0 ) return 0 ;"}
{"text":"If last ball required is of type P and the number of balls of P type is 1 while number of balls of other color is 0 the number of ways is 1.","code":"if ( $ p == 1 && $ q == 0 && $ r == 0 && $ last == 0 ) return 1 ;"}
{"text":"Same case as above for ' q ' and ' r '","code":"if ( $ p == 0 && $ q == 1 && $ r == 0 && $ last == 1 ) return 1 ; if ( $ p == 0 && $ q == 0 && $ r == 1 && $ last == 2 ) return 1 ;"}
{"text":"if last ball required is P and the number of ways is the sum of number of ways to form sequence with ' p - 1' P balls , q Q Balls and r R balls ending with Q and R .","code":"if ( $ last == 0 ) return countWays ( $ p - 1 , $ q , $ r , 1 ) + countWays ( $ p - 1 , $ q , $ r , 2 ) ;"}
{"text":"Same as above case for ' q ' and ' r '","code":"if ( $ last == 1 ) return countWays ( $ p , $ q - 1 , $ r , 0 ) + countWays ( $ p , $ q - 1 , $ r , 2 ) ; if ( $ last == 2 ) return countWays ( $ p , $ q , $ r - 1 , 0 ) + countWays ( $ p , $ q , $ r - 1 , 1 ) ; }"}
{"text":"Returns count of required arrangements","code":"function countUtil ( $ p , $ q , $ r ) {"}
{"text":"Three cases arise : Last required balls is type P Last required balls is type Q Last required balls is type R","code":"return countWays ( $ p , $ q , $ r , 0 ) + countWays ( $ p , $ q , $ r , 1 ) + countWays ( $ p , $ q , $ r , 2 ) ; }"}
{"text":"Driver Code","code":"$ p = 1 ; $ q = 1 ; $ r = 1 ; echo ( countUtil ( $ p , $ q , $ r ) ) ; ? >"}
{"text":"Returns count of different partitions of n elements in k subsets","code":"< ? php function countP ( $ n , $ k ) {"}
{"text":"Base cases","code":"if ( $ n == 0 $ k == 0 $ k > $ n ) return 0 ; if ( $ k == 1 $ k == $ n ) return 1 ;"}
{"text":"S ( n + 1 , k ) = k * S ( n , k ) + S ( n , k - 1 )","code":"return $ k * countP ( $ n - 1 , $ k ) + countP ( $ n - 1 , $ k - 1 ) ; }"}
{"text":"Driver Code","code":"echo countP ( 3 , 2 ) ; ? >"}
{"text":"Returns count of different partitions of n elements in k subsets","code":"< ? php function countP ( $ n , $ k ) {"}
{"text":"Table to store results of subproblems","code":"$ dp [ $ n + 1 ] [ $ k + 1 ] = array ( array ( ) ) ;"}
{"text":"Base cases","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] [ 0 ] = 0 ; for ( $ i = 0 ; $ i <= $ k ; $ i ++ ) $ dp [ 0 ] [ $ k ] = 0 ;"}
{"text":"Fill rest of the entries in dp [ ] [ ] in bottom up manner","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) if ( $ j == 1 $ i == $ j ) $ dp [ $ i ] [ $ j ] = 1 ; else $ dp [ $ i ] [ $ j ] = $ j * $ dp [ $ i - 1 ] [ $ j ] + $ dp [ $ i - 1 ] [ $ j - 1 ] ; return $ dp [ $ n ] [ $ k ] ; }"}
{"text":"Driver Code","code":"echo countP ( 5 , 2 ) ; ? >"}
{"text":"Returns count of ways to cover ' dist '","code":"< ? php function printCountRec ( $ dist ) {"}
{"text":"Base cases","code":"if ( $ dist < 0 ) return 0 ; if ( $ dist == 0 ) return 1 ;"}
{"text":"Recur for all previous 3 and add the results","code":"return printCountRec ( $ dist - 1 ) + printCountRec ( $ dist - 2 ) + printCountRec ( $ dist - 3 ) ; }"}
{"text":"Driver Code","code":"$ dist = 4 ; echo printCountRec ( $ dist ) ; ? >"}
{"text":"Returns sum of all digits in numbers from 1 to n","code":"< ? php function countNumbersWith4 ( $ n ) {"}
{"text":"One by one compute sum of digits in every number from 1 to n","code":"for ( $ x = 1 ; $ x <= $ n ; $ x ++ ) $ result += has4 ( $ x ) ? 1 : 0 ; return $ result ; }"}
{"text":"A utility function to compute sum of digits in a given number x","code":"function has4 ( $ x ) { while ( $ x != 0 ) { if ( $ x % 10 == 4 ) return true ; $ x = intval ( $ x \/ 10 ) ; } return false ; }"}
{"text":"Driver Code","code":"$ n = 328 ; echo \" Count \u2581 of \u2581 numbers \u2581 from \u2581 1 \u2581 to \u2581 \" . $ n . \" \u2581 that \u2581 have \u2581 4 \u2581 as \u2581 a \u2581 a \u2581 digit \u2581 is \u2581 \" . countNumbersWith4 ( $ n ) ; ? >"}
{"text":"Function to count numbers from 1 to n that have 4 as a digit","code":"< ? php function countNumbersWith4 ( $ n ) {"}
{"text":"Base case","code":"if ( $ n < 4 ) return 0 ;"}
{"text":"d = number of digits minus one in n . For 328 , d is 2","code":"$ d = ( int ) log10 ( $ n ) ;"}
{"text":"computing count of numbers from 1 to 10 ^ d - 1 , d = 0 a [ 0 ] = 0 ; d = 1 a [ 1 ] = count of numbers from 0 to 9 is 1 d = 2 a [ 2 ] = count of numbers from 0 to 99 is a [ 1 ] * 9 + 10 = 19 d = 3 a [ 3 ] = count of numbers from 0 to 999 is a [ 2 ] * 19 + 100 = 171","code":"$ a = array_fill ( 0 , $ d + 1 , NULL ) ; $ a [ 0 ] = 0 ; $ a [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ d ; $ i ++ ) $ a [ $ i ] = $ a [ $ i - 1 ] * 9 + ceil ( pow ( 10 , $ i - 1 ) ) ;"}
{"text":"Computing 10 ^ d","code":"$ p = ceil ( pow ( 10 , $ d ) ) ;"}
{"text":"Most significant digit ( msd ) of n , For 328 , msd is 3 which can be obtained using 328 \/ 100","code":"$ msd = intval ( $ n \/ $ p ) ;"}
{"text":"If MSD is 4. For example if n = 428 , then count of numbers is sum of following . 1 ) Count of numbers from 1 to 399 2 ) Count of numbers from 400 to 428 which is 29.","code":"if ( $ msd == 4 ) return ( $ msd ) * $ a [ $ d ] + ( $ n % $ p ) + 1 ;"}
{"text":"IF MSD > 4. For example if n is 728 , then count of numbers is sum of following . 1 ) Count of numbers from 1 to 399 and count of numbers from 500 to 699 , i . e . , \" a [ 2 ] \u2581 * \u2581 6\" 2 ) Count of numbers from 400 to 499 , i . e . 100 3 ) Count of numbers from 700 to 728 , recur for 28","code":"if ( $ msd > 4 ) return ( $ msd - 1 ) * $ a [ $ d ] + $ p + countNumbersWith4 ( $ n % $ p ) ;"}
{"text":"IF MSD < 4. For example if n is 328 , then count of numbers is sum of following . 1 ) Count of numbers from 1 to 299 a 2 ) Count of numbers from 300 to 328 , recur for 28","code":"return ( $ msd ) * $ a [ $ d ] + countNumbersWith4 ( $ n % $ p ) ; }"}
{"text":"Driver Code","code":"$ n = 328 ; echo \" Count \u2581 of \u2581 numbers \u2581 from \u2581 1 \u2581 to \u2581 \" . $ n . \" \u2581 that \u2581 have \u2581 4 \u2581 as \u2581 a \u2581 digit \u2581 is \u2581 \" . countNumbersWith4 ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Returns the minimum number of removals from either end in arr [ l . . h ] so that 2 * min becomes greater than max .","code":"< ? php function minRemovalsDP ( $ arr , $ n ) {"}
{"text":"Initialize starting and ending indexes of the maximum sized subarray with property 2 * min > max","code":"$ longest_start = -1 ; $ longest_end = 0 ;"}
{"text":"Choose different elements as starting point","code":"for ( $ start = 0 ; $ start < $ n ; $ start ++ ) {"}
{"text":"Initialize min and max for the current start","code":"$ min = PHP_INT_MAX ; $ max = PHP_INT_MIN ;"}
{"text":"Choose different ending points for current start","code":"for ( $ end = $ start ; $ end < $ n ; $ end ++ ) {"}
{"text":"Update min and max if necessary","code":"$ val = $ arr [ $ end ] ; if ( $ val < $ min ) $ min = $ val ; if ( $ val > $ max ) $ max = $ val ;"}
{"text":"If the property is violated , then no point to continue for a bigger array","code":"if ( 2 * $ min <= $ max ) break ;"}
{"text":"Update longest_start and longest_end if needed","code":"if ( $ end - $ start > $ longest_end - $ longest_start $ longest_start == -1 ) { $ longest_start = $ start ; $ longest_end = $ end ; } } }"}
{"text":"If not even a single element follow the property , then return n","code":"if ( $ longest_start == -1 ) return $ n ;"}
{"text":"Return the number of elements to be removed","code":"return ( $ n - ( $ longest_end - $ longest_start + 1 ) ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 5 , 100 , 9 , 10 , 11 , 12 , 15 , 200 ) ; $ n = sizeof ( $ arr ) ; echo minRemovalsDP ( $ arr , $ n ) ; ? >"}
{"text":"Returns optimal value possible that a player can collect from an array of coins of size n . Note than n must be even","code":"< ? php function optimalStrategyOfGame ( $ arr , $ n ) {"}
{"text":"Create a table to store solutions of subproblems","code":"$ table = array_fill ( 0 , $ n , array_fill ( 0 , $ n , 0 ) ) ;"}
{"text":"Fill table using above recursive formula . Note that the table is filled in diagonal fashion ( similar to http : goo . gl \/ PQqoS ) , from diagonal elements to table [ 0 ] [ n - 1 ] which is the result .","code":"for ( $ gap = 0 ; $ gap < $ n ; ++ $ gap ) { for ( $ i = 0 , $ j = $ gap ; $ j < $ n ; ++ $ i , ++ $ j ) {"}
{"text":"Here x is value of F ( i + 2 , j ) , y is F ( i + 1 , j - 1 ) and z is F ( i , j - 2 ) in above recursive formula","code":"$ x = ( ( $ i + 2 ) <= $ j ) ? $ table [ $ i + 2 ] [ $ j ] : 0 ; $ y = ( ( $ i + 1 ) <= ( $ j - 1 ) ) ? $ table [ $ i + 1 ] [ $ j - 1 ] : 0 ; $ z = ( $ i <= ( $ j - 2 ) ) ? $ table [ $ i ] [ $ j - 2 ] : 0 ; $ table [ $ i ] [ $ j ] = max ( $ arr [ $ i ] + min ( $ x , $ y ) , $ arr [ $ j ] + min ( $ y , $ z ) ) ; } } return $ table [ 0 ] [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 8 , 15 , 3 , 7 ) ; $ n = count ( $ arr1 ) ; print ( optimalStrategyOfGame ( $ arr1 , $ n ) . \" \" ) ; $ arr2 = array ( 2 , 2 , 2 , 2 ) ; $ n = count ( $ arr2 ) ; print ( optimalStrategyOfGame ( $ arr2 , $ n ) . \" \" ) ; $ arr3 = array ( 20 , 30 , 2 , 2 , 2 , 10 ) ; $ n = count ( $ arr3 ) ; print ( optimalStrategyOfGame ( $ arr3 , $ n ) . \" \" ) ; ? >"}
{"text":"maxSumIS ( ) returns the maximum sum of increasing subsequence in arr [ ] of size n","code":"< ? php function maxSumIS ( $ arr , $ n ) { $ max = 0 ; $ msis = array ( $ n ) ;"}
{"text":"Initialize msis values for all indexes","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ msis [ $ i ] = $ arr [ $ i ] ;"}
{"text":"Compute maximum sum values in bottom up manner","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ arr [ $ i ] > $ arr [ $ j ] && $ msis [ $ i ] < $ msis [ $ j ] + $ arr [ $ i ] ) $ msis [ $ i ] = $ msis [ $ j ] + $ arr [ $ i ] ;"}
{"text":"Pick maximum of all msis values","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ max < $ msis [ $ i ] ) $ max = $ msis [ $ i ] ; return $ max ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 101 , 2 , 3 , 100 , 4 , 5 ) ; $ n = count ( $ arr ) ; echo \" Sum \u2581 of \u2581 maximum \u2581 sum \u2581 increasing \u2581 subsequence \u2581 is \u2581 \" . maxSumIS ( $ arr , $ n ) ; ? >"}
{"text":"Function that return true if str ends with pat","code":"< ? php function endsWith ( $ str , $ pat ) { $ patLen = strlen ( $ pat ) ; $ strLen = strlen ( $ str ) ;"}
{"text":"Pattern is larger in length than the string","code":"if ( $ patLen > $ strLen ) return false ;"}
{"text":"We match starting from the end while patLen is greater than or equal to 0.","code":"$ patLen -- ; $ strLen -- ; while ( $ patLen >= 0 ) {"}
{"text":"If at any index str doesn 't match  with pattern","code":"if ( $ pat [ $ patLen ] != $ str [ $ strLen ] ) return false ; $ patLen -- ; $ strLen -- ; }"}
{"text":"If str ends with the given pattern","code":"return true ; }"}
{"text":"Function to return the count of required strings","code":"function countOfStrings ( $ pat , $ n , $ sArr ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ )"}
{"text":"If current string ends with the given pattern","code":"if ( endsWith ( $ sArr [ $ i ] , $ pat ) ) $ count ++ ; return $ count ; }"}
{"text":"Driver code","code":"$ pat = \" ks \" ; $ n = 4 ; $ sArr = array ( \" geeks \" , \" geeksforgeeks \" , \" games \" , \" unit \" ) ; echo countOfStrings ( $ pat , $ n , $ sArr ) ; ? >"}
{"text":"Function to return the ending index for the largest valid sub - string \/ starting from index i","code":"< ? php function getEndingIndex ( $ str , $ n , $ i ) { $ i ++ ; while ( $ i < $ n ) { $ curr = $ str [ $ i ] ; $ prev = $ str [ $ i - 1 ] ;"}
{"text":"If the current character appears after the previous character according to the given circular alphabetical order","code":"if ( ( $ curr == ' a ' && $ prev == ' z ' ) || ( ord ( $ curr ) - ord ( $ prev ) == 1 ) ) $ i ++ ; else break ; } return $ i - 1 ; }"}
{"text":"Function to return the length of the longest sub - string of consecutive characters from str","code":"function largestSubStr ( $ str , $ n ) { $ len = 0 ; $ i = 0 ; while ( $ i < $ n ) {"}
{"text":"Valid sub - string exists from index i to end","code":"$ end = getEndingIndex ( $ str , $ n , $ i ) ;"}
{"text":"Update the length","code":"$ len = max ( $ end - $ i + 1 , $ len ) ; $ i = $ end + 1 ; } return $ len ; }"}
{"text":"Driver code","code":"$ str = \" abcabcdefabc \" ; $ n = strlen ( $ str ) ; echo largestSubStr ( $ str , $ n ) ; ? >"}
{"text":"Function to return the required sum","code":"< ? php function getSum ( $ n , $ d ) { if ( $ n < $ d ) return 0 ;"}
{"text":"Decrement N","code":"while ( $ n % 10 != $ d ) $ n -- ; $ k = ( int ) ( $ n \/ 10 ) ; return ( $ k + 1 ) * $ d + ( $ k * 10 + 10 * $ k * $ k ) \/ 2 ; }"}
{"text":"Driver code","code":"$ n = 30 ; $ d = 3 ; echo getSum ( $ n , $ d ) ; ? >"}
{"text":"function to calculate minimum characters to replace","code":"< ? php function replace ( $ A , $ B ) { $ n = strlen ( $ A ) ; $ m = strlen ( $ B ) ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ m ; $ j ++ ) {"}
{"text":"mismatch occurs","code":"if ( $ i + $ j >= $ n ) { break ; } else if ( $ A [ $ i + $ j ] != $ B [ $ j ] ) { break ; } }"}
{"text":"if all characters matched , i . e , there is a substring of ' a ' which is same as string ' b '","code":"if ( $ j == $ m ) { $ count ++ ;"}
{"text":"increment i to index m - 1 such that minimum characters are replaced in ' a '","code":"$ i = $ i + $ m - 1 ; } } return $ count ; }"}
{"text":"Driver Code","code":"$ str1 = \" aaaaaaaa \" ; $ str2 = \" aaa \" ; echo ( replace ( $ str1 , $ str2 ) ) ; ? >"}
{"text":"Returns true if s1 is substring of s2","code":"< ? php function isSubstring ( $ s1 , $ s2 ) { $ M = strlen ( $ s1 ) ; $ N = strlen ( $ s2 ) ;"}
{"text":"A loop to slide pat [ ] one by one","code":"for ( $ i = 0 ; $ i <= $ N - $ M ; $ i ++ ) { $ j = 0 ;"}
{"text":"For current index i , check for pattern match","code":"for ( ; $ j < $ M ; $ j ++ ) if ( $ s2 [ $ i + $ j ] != $ s1 [ $ j ] ) break ; if ( $ j == $ M ) return $ i ; } return -1 ; }"}
{"text":"Driver Code","code":"$ s1 = \" for \" ; $ s2 = \" geeksforgeeks \" ; $ res = isSubstring ( $ s1 , $ s2 ) ; if ( $ res == -1 ) echo \" Not \u2581 present \" ; else echo \" Present \u2581 at \u2581 index \u2581 \" . $ res ; ? >"}
{"text":"Function to count patterns","code":"< ? php function patternCount ( $ str ) {"}
{"text":"Variable to store the last character","code":"$ last = $ str [ 0 ] ; $ i = 1 ; $ counter = 0 ; while ( $ i < strlen ( $ str ) ) {"}
{"text":"We found 0 and last character was '1' , state change","code":"if ( $ str [ $ i ] == '0' && $ last == '1' ) { while ( $ str [ $ i ] == '0' ) $ i ++ ;"}
{"text":"After the stream of 0 ' s , \u2581 \u2581 we \u2581 got \u2581 a \u2581 ' 1 ', counter  incremented","code":"if ( $ str [ $ i ] == '1' ) $ counter ++ ; }"}
{"text":"Last character stored","code":"$ last = $ str [ $ i ] ; $ i ++ ; } return $ counter ; }"}
{"text":"Driver Code","code":"$ str = \"1001ab010abc01001\" ; echo patternCount ( $ str ) ; ? >"}
{"text":"Return the maximum length prefix which is subsequence .","code":"< ? php function maxPrefix ( $ s , $ t ) { $ count = 0 ;"}
{"text":"Iterating string T .","code":"for ( $ i = 0 ; $ i < strlen ( $ t ) ; $ i ++ ) {"}
{"text":"If end of string S .","code":"if ( $ count == strlen ( $ s ) ) break ;"}
{"text":"If character match , increment counter .","code":"if ( $ t [ $ i ] == $ s [ $ count ] ) $ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"{ $ S = \" digger \" ; $ T = \" biggerdiagram \" ; echo maxPrefix ( $ S , $ T ) ; return 0 ; } ? >"}
{"text":"PHP program to replace all occurrences of \" AB \" with \" C \"","code":"< ? php function translate ( & $ str ) { if ( $ str [ 0 ] == ' ' ) return ;"}
{"text":"Start traversing from second character","code":"for ( $ i = 1 ; $ i < strlen ( $ str ) ; $ i ++ ) {"}
{"text":"If previous character is ' A ' and current character is 'B\"","code":"if ( $ str [ $ i - 1 ] == ' A ' && $ str [ $ i ] == ' B ' ) {"}
{"text":"Replace previous character with ' C ' and move all subsequent characters one position back","code":"$ str [ $ i - 1 ] = ' C ' ; for ( $ j = $ i ; $ j < strlen ( $ str ) ; $ j ++ ) $ str [ $ j ] = $ str [ $ j + 1 ] ; } } return ; }"}
{"text":"Driver code","code":"$ str = \" helloABworldABGfG \" ; translate ( $ str ) ; echo \" The \u2581 modified \u2581 string \u2581 is \u2581 : STRNEWLINE \" ; echo $ str ; ? >"}
{"text":"Function to calculate the position of characters","code":"< ? php function positions ( $ str , $ n ) { $ a = 31 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Performing AND operation with number 31 $","code":"print ( ( ord ( $ str [ $ i ] ) & ( $ a ) ) . \" \" ) ; } }"}
{"text":"Driver code","code":"$ str = \" Geeks \" ; $ n = strlen ( $ str ) ; positions ( $ str , $ n ) ; ? >"}
{"text":"Function to find the length of the longest substring","code":"< ? php function lenoflongestnonpalindrome ( $ s ) {"}
{"text":"initializing the variables","code":"$ max1 = 1 ; $ len = 0 ; for ( $ i = 0 ; $ i < strlen ( $ s ) - 1 ; $ i ++ ) {"}
{"text":"checking palindrome of size 2 example : aa","code":"if ( $ s [ $ i ] == $ s [ $ i + 1 ] ) $ len = 0 ;"}
{"text":"checking palindrome of size 3 example : aba","code":"else if ( $ s [ $ i + 1 ] == $ s [ $ i - 1 ] && $ i > 0 ) $ len = 1 ;"}
{"text":"else incrementing length of substring","code":"$ len ++ ;"}
{"text":"$max1 = max ( $max1 , $len + 1 ) ; finding maximum","code":"}"}
{"text":"if there exits single character then it is always palindrome","code":"if ( $ max1 == 1 ) return 0 ; else return $ max1 ; }"}
{"text":"Driver Code","code":"$ s = \" synapse \" ; echo lenoflongestnonpalindrome ( $ s ) , \" \" ; ? >"}
{"text":"Function to return the lexicographically smallest palindrome that can be made from the given string after replacing the required characters","code":"< ? php function makePalindrome ( $ str ) { $ i = 0 ; $ j = strlen ( $ str ) - 1 ; while ( $ i <= $ j ) {"}
{"text":"If characters are missing at both the positions then substitute it with ' a '","code":"if ( $ str [ $ i ] == ' * ' && $ str [ $ j ] == ' * ' ) { $ str [ $ i ] = ' a ' ; $ str [ $ j ] = ' a ' ; }"}
{"text":"If only str [ j ] = ' * ' then update it with the value at str [ i ]","code":"else if ( $ str [ $ j ] == ' * ' ) $ str [ $ j ] = $ str [ $ i ] ;"}
{"text":"If only str [ i ] = ' * ' then update it with the value at str [ j ]","code":"else if ( $ str [ $ i ] == ' * ' ) $ str [ $ i ] = $ str [ $ j ] ;"}
{"text":"If characters at both positions are not equal and != ' * ' then the string cannot be made palindrome","code":"else if ( $ str [ $ i ] != $ str [ $ j ] ) return \" - 1\" ; $ i ++ ; $ j -- ; }"}
{"text":"Return the required palindrome","code":"return $ str ; }"}
{"text":"Driver code","code":"$ str = \" na * an \" ; echo makePalindrome ( $ str ) ; ? >"}
{"text":"Function to return the score for the given binary string","code":"< ? php function calcScore ( $ str ) { $ score = 0 ; $ len = strlen ( $ str ) ;"}
{"text":"Traverse through string character","code":"for ( $ i = 0 ; $ i < $ len {"}
{"text":"Initialize current chunk 's size","code":"$ chunkSize = 1 ;"}
{"text":"Get current character","code":"$ currentChar = $ str [ $ i ++ ] ;"}
{"text":"Calculate total chunk size of same characters","code":"while ( $ i < $ len && $ str [ $ i ] == $ currentChar ) { $ chunkSize ++ ; $ i ++ ; }"}
{"text":"Add \/ subtract pow ( chunkSize , 2 ) depending upon character","code":"if ( $ currentChar == '1' ) $ score += pow ( $ chunkSize , 2 ) ; else $ score -= pow ( $ chunkSize , 2 ) ; }"}
{"text":"Return the score","code":"return $ score ; }"}
{"text":"Driver code","code":"$ str = \"11011\" ; echo calcScore ( $ str ) ; ? >"}
{"text":"Function to return the count of required sub - strings","code":"< ? php function countSubString ( $ s , $ c , $ k ) {"}
{"text":"Left and right counters for characters on both sides of sub - string window","code":"$ leftCount = 0 ; $ rightCount = 0 ;"}
{"text":"Left and right pointer on both sides of sub - string window","code":"$ left = 0 ; $ right = 0 ;"}
{"text":"Initialize the frequency","code":"$ freq = 0 ;"}
{"text":"Result and length of string","code":"$ result = 0 ; $ len = strlen ( $ s ) ;"}
{"text":"Initialize the left pointer","code":"while ( $ s [ $ left ] != $ c && $ left < $ len ) { $ left ++ ; $ leftCount ++ ; }"}
{"text":"Initialize the right pointer","code":"$ right = $ left + 1 ; while ( $ freq != ( $ k - 1 ) && ( $ right - 1 ) < $ len ) { if ( $ s [ $ right ] == $ c ) $ freq ++ ; $ right ++ ; }"}
{"text":"Traverse all the window sub - strings","code":"while ( $ left < $ len && ( $ right - 1 ) < $ len ) {"}
{"text":"Counting the characters on left side of the sub - string window","code":"while ( $ s [ $ left ] != $ c && $ left < $ len ) { $ left ++ ; $ leftCount ++ ; }"}
{"text":"Counting the characters on right side of the sub - string window","code":"while ( $ right < $ len && $ s [ $ right ] != $ c ) { if ( $ s [ $ right ] == $ c ) $ freq ++ ; $ right ++ ; $ rightCount ++ ; }"}
{"text":"Add the possible sub - strings on both sides to result","code":"$ result = $ result + ( $ leftCount + 1 ) * ( $ rightCount + 1 ) ;"}
{"text":"Setting the frequency for next sub - string window","code":"$ freq = $ k - 1 ;"}
{"text":"Reset the left and right counters","code":"$ leftCount = 0 ; $ rightCount = 0 ; $ left ++ ; $ right ++ ; } return $ result ; }"}
{"text":"Driver code","code":"$ s = \" abada \" ; $ c = ' a ' ; $ k = 2 ; echo countSubString ( $ s , $ c , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function that returns true if str is a valid identifier","code":"< ? php function isValid ( $ str , $ n ) {"}
{"text":"If first character is invalid","code":"if ( ! ( ( $ str [ 0 ] >= ' a ' && $ str [ 0 ] <= ' z ' ) || ( $ str [ 0 ] >= ' A ' && $ str [ 0 ] <= ' Z ' ) $ str [ 0 ] == ' _ ' ) ) return false ;"}
{"text":"Traverse the string for the rest of the characters","code":"for ( $ i = 1 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( ! ( ( $ str [ $ i ] >= ' a ' && $ str [ $ i ] <= ' z ' ) || ( $ str [ $ i ] >= ' A ' && $ str [ $ i ] <= ' Z ' ) || ( $ str [ $ i ] >= '0' && $ str [ $ i ] <= '9' ) $ str [ $ i ] == ' _ ' ) ) return false ; }"}
{"text":"String is a valid identifier","code":"return true ; }"}
{"text":"Driver code","code":"$ str = \" _ geeks123\" ; $ n = strlen ( $ str ) ; if ( isValid ( $ str , $ n ) ) print ( \" Valid \" ) ; else print ( \" Invalid \" ) ; ? >"}
{"text":"PHP program to capitalise the first and last character of each word in a string .","code":"< ? php function FirstAndLast ( $ str ) {"}
{"text":"Create an equivalent string of the given string","code":"$ ch = $ str ; for ( $ i = 0 ; $ i < strlen ( $ ch ) ; $ i ++ ) {"}
{"text":"$k stores index of first character and $i is going to store index of last character .","code":"$ k = $ i ; while ( $ i < strlen ( $ ch ) && $ ch [ $ i ] != ' \u2581 ' ) $ i ++ ;"}
{"text":"Check if the character is a small letter If yes , then Capitalise","code":"$ ch [ $ k ] = chr ( ( $ ch [ $ k ] >= ' a ' && $ ch [ $ k ] <= ' z ' ) ? ( ord ( $ ch [ $ k ] ) - 32 ) : ( ord ( $ ch [ $ k ] ) ) ) ; $ ch [ $ i - 1 ] = chr ( ( $ ch [ $ i - 1 ] >= ' a ' && $ ch [ $ i - 1 ] <= ' z ' ) ? ( ord ( $ ch [ $ i - 1 ] ) - 32 ) : ( ord ( $ ch [ $ i - 1 ] ) ) ) ; } return $ ch ; }"}
{"text":"Driver code","code":"$ str = \" Geeks \u2581 for \u2581 Geeks \" ; echo $ str , \" STRNEWLINE \" ; echo FirstAndLast ( $ str ) ; ? >"}
{"text":"Function to return the number of players","code":"< ? php function findM ( $ s , $ x ) {"}
{"text":"Initialize cnt as 0","code":"$ cnt = 0 ;"}
{"text":"Iterate in the string","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"Check for numbers other than x","code":"if ( ord ( $ s [ $ i ] ) - ord ( '0' ) != $ x ) $ cnt ++ ; } return $ cnt ; }"}
{"text":"Driver code","code":"$ s = \"3662123\" ; $ x = 6 ; echo findM ( $ s , $ x ) ; ? >"}
{"text":"Function to find longest prefix suffix","code":"< ? php function compute_lps ( $ s ) { $ n = strlen ( $ s ) ;"}
{"text":"To store longest prefix suffix","code":"$ lps = array ( ) ;"}
{"text":"Length of the previous longest prefix suffix","code":"$ len = 0 ;"}
{"text":"lps [ 0 ] is always 0","code":"$ lps [ 0 ] = 0 ; $ i = 1 ;"}
{"text":"Loop calculates lps [ i ] for i = 1 to n - 1","code":"while ( $ i < $ n ) { if ( $ s [ $ i ] == $ s [ $ len ] ) { $ len ++ ; $ lps [ $ i ] = $ len ; $ i ++ ; }"}
{"text":"( pat [ i ] != pat [ len ] )","code":"else { if ( $ len != 0 ) $ len = $ lps [ $ len - 1 ] ;"}
{"text":"If len = 0","code":"else { $ lps [ $ i ] = 0 ; $ i ++ ; } } } return $ lps ; }"}
{"text":"Function to find the longest substring which is prefix as well as a sub - string of s [ 1. . . n - 2 ]","code":"function Longestsubstring ( $ s ) {"}
{"text":"Find longest prefix suffix","code":"$ lps = compute_lps ( $ s ) ; $ n = strlen ( $ s ) ;"}
{"text":"If lps of n - 1 is zero","code":"if ( $ lps [ $ n - 1 ] == 0 ) { echo - 1 ; return ; } for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"At any position lps [ i ] equals to lps [ n - 1 ]","code":"if ( $ lps [ $ i ] == $ lps [ $ n - 1 ] ) { echo substr ( $ s , 0 , $ lps [ $ i ] ) ; return ; } }"}
{"text":"If answer is not possible","code":"if ( $ lps [ $ lps [ $ n - 1 ] - 1 ] == 0 ) echo - 1 ; else echo substr ( $ s , 0 , $ lps [ $ lps [ $ n - 1 ] - 1 ] ) ; }"}
{"text":"Driver code","code":"$ s = \" fixprefixsuffix \" ;"}
{"text":"function call","code":"Longestsubstring ( $ s ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ MAX = 64 ;"}
{"text":"Function to return the bitmask for the string","code":"function getBitmask ( $ s ) { $ temp = 0 ; for ( $ j = 0 ; $ j < strlen ( $ s ) ; $ j ++ ) { if ( $ s [ $ j ] == ' s ' ) { $ temp = $ temp | ( 1 ) ; } else if ( $ s [ $ j ] == ' t ' ) { $ temp = $ temp | ( 2 ) ; } else if ( $ s [ $ j ] == ' r ' ) { $ temp = $ temp | ( 4 ) ; } else if ( $ s [ $ j ] == ' i ' ) { $ temp = $ temp | ( 8 ) ; } else if ( $ s [ $ j ] == ' n ' ) { $ temp = $ temp | ( 16 ) ; } else if ( $ s [ $ j ] == ' g ' ) { $ temp = $ temp | ( 32 ) ; } } return $ temp ; }"}
{"text":"Function to return the count of pairs","code":"function countPairs ( $ arr , $ n ) {"}
{"text":"bitMask [ i ] will store the count of strings from the array whose bitmask is i","code":"$ bitMask = array_fill ( 0 , $ GLOBALS [ ' MAX ' ] , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ bitMask [ getBitmask ( $ arr [ $ i ] ) ] ++ ;"}
{"text":"To store the count of pairs","code":"$ cnt = 0 ; for ( $ i = 0 ; $ i < $ GLOBALS [ ' MAX ' ] ; $ i ++ ) { for ( $ j = $ i ; $ j < $ GLOBALS [ ' MAX ' ] ; $ j ++ ) {"}
{"text":"MAX - 1 = 63 i . e . 111111 in binary","code":"if ( ( $ i $ j ) == ( $ GLOBALS [ ' MAX ' ] - 1 ) ) {"}
{"text":"arr [ i ] cannot make s pair with itself i . e . ( arr [ i ] , arr [ i ] )","code":"if ( $ i == $ j ) $ cnt += floor ( ( $ bitMask [ $ i ] * $ bitMask [ $ i ] - 1 ) \/ 2 ) ; else $ cnt += ( $ bitMask [ $ i ] * $ bitMask [ $ j ] ) ; } } } return $ cnt ; }"}
{"text":"Driver code","code":"$ arr = array ( \" strrr \" , \" string \" , \" gstrin \" ) ; $ n = count ( $ arr ) ; echo countPairs ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the count of required occurrence","code":"< ? php function countOcc ( $ s ) {"}
{"text":"To store the count of occurrences","code":"$ cnt = 0 ;"}
{"text":"Check first four characters from ith position","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) - 3 ; $ i ++ ) {"}
{"text":"Variables for counting the required characters","code":"$ c = 0 ; $ l = 0 ; $ a = 0 ; $ p = 0 ;"}
{"text":"Check the four contiguous characters which can be reordered to form ' clap '","code":"for ( $ j = $ i ; $ j < $ i + 4 ; $ j ++ ) { switch ( $ s [ $ j ] ) { case ' c ' : $ c ++ ; break ; case ' l ' : $ l ++ ; break ; case ' a ' : $ a ++ ; break ; case ' p ' : $ p ++ ; break ; } }"}
{"text":"If all four contiguous characters are present then increment cnt variable","code":"if ( $ c == 1 && $ l == 1 && $ a == 1 && $ p == 1 ) $ cnt ++ ; } return $ cnt ; }"}
{"text":"Driver code","code":"$ s = \" clapc \" ; echo countOcc ( strtolower ( $ s ) ) ; ? >"}
{"text":"Function to return the number of ways to form the sub - string","code":"< ? php function calculateWays ( $ s , $ n , $ l , $ r ) {"}
{"text":"Initialize a hash - table with 0","code":"$ freq = array ( ) ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { $ freq [ $ i ] = 0 ; }"}
{"text":"Iterate in the string and count the frequency of characters that do not lie in the range L and R","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Out of range characters","code":"if ( $ i < $ l $ i > $ r ) $ freq [ ord ( $ s [ $ i ] ) - 97 ] ++ ; }"}
{"text":"Stores the final number of ways","code":"$ ways = 1 ;"}
{"text":"Iterate for the sub - string in the range L and R","code":"for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) {"}
{"text":"If exists then multiply the number of ways and decrement the frequency","code":"if ( $ freq [ ord ( $ s [ $ i ] ) - 97 ] ) { $ ways = $ ways * $ freq [ ord ( $ s [ $ i ] ) - 97 ] ; $ freq [ ord ( $ s [ $ i ] ) - 97 ] -- ; }"}
{"text":"If does not exist the sub - string cannot be formed","code":"else { $ ways = 0 ; break ; } }"}
{"text":"Return the answer","code":"return $ ways ; }"}
{"text":"Driver code","code":"$ s = \" cabcaab \" ; $ n = strlen ( $ s ) ; $ l = 1 ; $ r = 3 ; echo calculateWays ( $ s , $ n , $ l , $ r ) ; ? >"}
{"text":"Function to print the character sequence for the given ASCII sentence","code":"< ? php function asciiToSentence ( $ string , $ length ) { $ num = 0 ; for ( $ i = 0 ; $ i < $ length ; $ i ++ ) {"}
{"text":"Append the current digit","code":"$ num = $ num * 10 + ( ord ( $ string [ $ i ] ) - ord ( '0' ) ) ;"}
{"text":"If num is within the required range","code":"if ( $ num >= 32 && $ num <= 122 ) {"}
{"text":"Convert num to char","code":"$ ch = chr ( $ num ) ; print ( $ ch ) ;"}
{"text":"Reset num to 0","code":"$ num = 0 ; } } }"}
{"text":"Driver code","code":"$ string = \"7110110110711510211111471101101107115\" ; $ length = strlen ( $ string ) ; asciiToSentence ( $ string , $ length ) ; ? >"}
{"text":"Array to store how many times a button has to be pressed for typing a particular character","code":"< ? php $ arr = array ( 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 , 3 , 4 , 1 , 2 , 3 , 1 , 2 , 3 , 4 ) ;"}
{"text":"Function to return the count of buttons pressed to type the given string","code":"function countKeyPressed ( $ str , $ len ) { global $ arr ; $ count = 0 ;"}
{"text":"Count the key presses","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) $ count = $ count + $ arr [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ;"}
{"text":"Return the required count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ str = \" abcdef \" ; $ len = strlen ( $ str ) ; echo countKeyPressed ( $ str , $ len ) ; ? >"}
{"text":"Function that returns true if s1 is equal to reverse of s2","code":"< ? php function isReverseEqual ( $ s1 , $ s2 ) {"}
{"text":"If both the strings differ in length","code":"if ( strlen ( $ s1 ) != strlen ( $ s2 ) ) return false ; $ len = strlen ( $ s1 ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ )"}
{"text":"In case of any character mismatch","code":"if ( $ s1 [ $ i ] != $ s2 [ $ len - $ i - 1 ] ) return false ; return true ; }"}
{"text":"Function to return the first word whose reverse is also present in the array","code":"function getWord ( $ str , $ n ) {"}
{"text":"Check every string","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ )"}
{"text":"Pair with every other string appearing after the current string","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ )"}
{"text":"If first string is equal to the reverse of the second string","code":"if ( isReverseEqual ( $ str [ $ i ] , $ str [ $ j ] ) ) return $ str [ $ i ] ;"}
{"text":"No such string exists","code":"return \" - 1\" ; }"}
{"text":"Driver code","code":"$ str = array ( \" geeks \" , \" for \" , \" skeeg \" ) ; $ n = count ( $ str ) ; print ( getWord ( $ str , $ n ) ) ; ? >"}
{"text":"Function that return true if sub - of length $k starting at index $i is also a prefix of the string","code":"< ? php function isPrefix ( $ str , $ len , $ i , $ k ) {"}
{"text":"$k length sub - cannot start at index $i","code":"if ( $ i + $ k > $ len ) return false ; for ( $ j = 0 ; $ j < $ k ; $ j ++ ) {"}
{"text":"Character mismatch between the prefix and the sub - starting at index $i","code":"if ( $ str [ $ i ] != $ str [ $ j ] ) return false ; $ i ++ ; } return true ; }"}
{"text":"Function that returns true if $str is K - periodic","code":"function isKPeriodic ( $ str , $ len , $ k ) {"}
{"text":"Check whether all the sub - strings $str [ 0 , $k - 1 ] , $str [ $k , 2 k - 1 ] ... are equal to the $k length prefix of the","code":"for ( $ i = $ k ; $ i < $ len ; $ i += $ k ) if ( ! isPrefix ( $ str , $ len , $ i , $ k ) ) return false ; return true ; }"}
{"text":"Driver code","code":"$ str = \" geeksgeeks \" ; $ len = strlen ( $ str ) ; $ k = 5 ; if ( isKPeriodic ( $ str , $ len , $ k ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Function to return the minimum letters required to make a total of n","code":"< ? php function minLettersNeeded ( $ n ) { if ( $ n % 26 == 0 ) return floor ( ( $ n \/ 26 ) ) ; else return floor ( ( $ n \/ 26 ) + 1 ) ; }"}
{"text":"Driver code","code":"$ n = 52 ; echo minLettersNeeded ( $ n ) ; ? >"}
{"text":"Function to return the minimum number of characters of the given binary string to be replaced to make the string alternating","code":"< ? php function minReplacement ( $ s , $ len ) { $ ans = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) {"}
{"text":"If there is 1 at even index positions","code":"if ( $ i % 2 == 0 && $ s [ $ i ] == '1' ) $ ans ++ ;"}
{"text":"If there is 0 at odd index positions","code":"if ( $ i % 2 == 1 && $ s [ $ i ] == '0' ) $ ans ++ ; } return min ( $ ans , $ len - $ ans ) ; }"}
{"text":"Driver code","code":"$ s = \"1100\" ; $ len = strlen ( $ s ) ; echo minReplacement ( $ s , $ len ) ; ? >"}
{"text":"Function to return the modified string","code":"< ? php function groupCharacters ( $ s , $ len ) {"}
{"text":"Store original string","code":"$ temp = \" \" ;"}
{"text":"Remove all white spaces","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) if ( $ s [ $ i ] != ' \u2581 ' ) $ temp = $ temp . $ s [ $ i ] ; $ len = strlen ( $ temp ) ;"}
{"text":"To store the resultant string","code":"$ ans = \" \" ; $ i = 0 ;"}
{"text":"Traverse the string","code":"while ( $ i < $ len ) {"}
{"text":"Group upper case characters","code":"if ( ord ( $ temp [ $ i ] ) >= ord ( ' A ' ) && ord ( $ temp [ $ i ] ) <= ord ( ' Z ' ) ) { while ( $ i < $ len && ord ( $ temp [ $ i ] ) >= ord ( ' A ' ) && ord ( $ temp [ $ i ] ) <= ord ( ' Z ' ) ) { $ ans = $ ans . $ temp [ $ i ] ; $ i ++ ; } $ ans = $ ans . \" \u2581 \" ; }"}
{"text":"Group numeric characters","code":"else if ( ord ( $ temp [ $ i ] ) >= ord ( ' 0 ' ) && ord ( $ temp [ $ i ] ) <= ord ( ' 9 ' ) ) { while ( $ i < $ len && ord ( $ temp [ $ i ] ) >= ord ( '0' ) && ord ( $ temp [ $ i ] ) <= ord ( '9' ) ) { $ ans = $ ans . $ temp [ $ i ] ; $ i ++ ; } $ ans = $ ans . \" \u2581 \" ; }"}
{"text":"Group arithmetic operators","code":"else { while ( $ i < $ len && ord ( $ temp [ $ i ] ) >= ord ( ' * ' ) && ord ( $ temp [ $ i ] ) <= ord ( ' \/ ' ) ) { $ ans = $ ans . $ temp [ $ i ] ; $ i ++ ; } $ ans = $ ans . \" \u2581 \" ; } }"}
{"text":"Return the resultant string","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ s = \"34FTG234 + \u2581 + - \u2581 * \" ; $ len = strlen ( $ s ) ; print ( groupCharacters ( $ s , $ len ) ) ; ? >"}
{"text":"Function to return the minimum number of pre - processing moves required on string A","code":"< ? php function Preprocess ( $ A , $ B ) {"}
{"text":"Length of the given strings","code":"$ n = strlen ( $ A ) ;"}
{"text":"To store the required answer","code":"$ ans = 0 ;"}
{"text":"To store frequency of 4 characters","code":"$ mp = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ mp [ $ A [ $ i ] ] = 0 ;"}
{"text":"Run a loop upto n \/ 2","code":"for ( $ i = 0 ; $ i < floor ( $ n \/ 2 ) ; $ i ++ ) { $ mp [ $ A [ $ i ] ] ++ ; $ mp [ $ A [ $ n - $ i - 1 ] ] ++ ; $ mp [ $ B [ $ i ] ] ++ ; $ mp [ $ B [ $ n - $ i - 1 ] ] ++ ; $ sz = sizeof ( $ mp ) ;"}
{"text":"If size is 4","code":"if ( $ sz == 4 ) $ ans += 2 ;"}
{"text":"If size is 3","code":"else if ( $ sz == 3 ) if ( $ A [ $ i ] == $ A [ $ n - $ i - 1 ] ) $ ans += 1 ; else $ ans += 1 ;"}
{"text":"If size is 2","code":"else if ( $ sz == 2 ) $ ans += $ mp [ $ A [ $ i ] ] != 2 ; }"}
{"text":"If n is odd","code":"if ( $ n % 2 == 1 && ( $ A [ floor ( $ n \/ 2 ) ] != $ B [ floor ( $ n \/ 2 ) ] ) ) $ ans ++ ; return $ ans ; }"}
{"text":"Driver code","code":"$ A = \" abacaba \" ; $ B = \" bacabaa \" ; echo Preprocess ( $ A , $ B ) ; ? >"}
{"text":"This function returns the least lexicogr aphical string obtained from its two halves","code":"< ? php function leastLexiString ( $ s ) {"}
{"text":"Base Case - If string size is 1","code":"if ( strlen ( $ s ) & 1 ) return $ s ;"}
{"text":"Divide the string into its two halves","code":"$ x = leastLexiString ( substr ( $ s , 0 , floor ( strlen ( $ s ) \/ 2 ) ) ) ; $ y = leastLexiString ( substr ( $ s , floor ( strlen ( $ s ) \/ 2 ) , strlen ( $ s ) ) ) ;"}
{"text":"Form least lexicographical string","code":"return min ( $ x . $ y , $ y . $ x ) ; } function areEquivalent ( $ a , $ b ) { return ( leastLexiString ( $ a ) == leastLexiString ( $ b ) ) ; }"}
{"text":"Driver Code","code":"$ a = \" aaba \" ; $ b = \" abaa \" ; if ( areEquivalent ( $ a , $ b ) ) echo \" YES \" , \" STRNEWLINE \" ; else echo \" NO \" , \" STRNEWLINE \" ; $ a = \" aabb \" ; $ b = \" abab \" ; if ( areEquivalent ( $ a , $ b ) ) echo \" YES \" , \" STRNEWLINE \" ; else echo \" NO \" , \" STRNEWLINE \" ; ? >"}
{"text":"Function to generate and print the required string","code":"< ? php function generateString ( $ A , $ B ) { $ rt = \" \" ; while ( 0 < $ A 0 < $ B ) {"}
{"text":"More ' b ' , append \" bba \"","code":"if ( $ A < $ B ) { if ( 0 < $ B -- ) { $ rt . = ( ' b ' ) ; } if ( 0 < $ B -- ) { $ rt . = ( ' b ' ) ; } if ( 0 < $ A -- ) { $ rt . = ( ' a ' ) ; } }"}
{"text":"More ' a ' , append \" aab \"","code":"else if ( $ B < $ A ) { if ( 0 < $ A -- ) { $ rt . = ( ' a ' ) ; } if ( 0 < $ A -- ) { $ rt . = ( ' a ' ) ; } if ( 0 < $ B -- ) { $ rt . = ( ' b ' ) ; } }"}
{"text":"Equal number of ' a ' and ' b ' append \" ab \"","code":"else { if ( 0 < $ A -- ) { $ rt . = ( ' a ' ) ; } if ( 0 < $ B -- ) { $ rt . = ( ' b ' ) ; } } } echo ( $ rt ) ; }"}
{"text":"Driver code","code":"$ A = 2 ; $ B = 6 ; generateString ( $ A , $ B ) ; ? >"}
{"text":"Function to return the lexicographically largest sub - sequence of s","code":"< ? php function getSubSeq ( $ s , $ n ) { $ res = \" \" ; $ cr = 0 ; while ( $ cr < $ n ) {"}
{"text":"Get the max character from the string","code":"$ mx = $ s [ $ cr ] ; for ( $ i = $ cr + 1 ; $ i < $ n ; $ i ++ ) $ mx = max ( $ mx , $ s [ $ i ] ) ; $ lst = $ cr ;"}
{"text":"Use all the occurrences of the current maximum character","code":"for ( $ i = $ cr ; $ i < $ n ; $ i ++ ) if ( $ s [ $ i ] == $ mx ) { $ res . = $ s [ $ i ] ; $ lst = $ i ; }"}
{"text":"Repeat the steps for the remaining string","code":"$ cr = $ lst + 1 ; } return $ res ; }"}
{"text":"Driver code","code":"$ s = \" geeksforgeeks \" ; $ n = strlen ( $ s ) ; echo getSubSeq ( $ s , $ n ) ; ? >"}
{"text":"Function to return the count of sub - strings of str that are divisible by k","code":"< ? php function countSubStr ( $ str , $ len , $ k ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ n = 0 ;"}
{"text":"Take all sub - strings starting from i","code":"for ( $ j = $ i ; $ j < $ len ; $ j ++ ) { $ n = $ n * 10 + ( $ str [ $ j ] - '0' ) ;"}
{"text":"If current sub - string is divisible by k","code":"if ( $ n % $ k == 0 ) $ count ++ ; } }"}
{"text":"Return the required count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ str = \"33445\" ; $ len = strlen ( $ str ) ; $ k = 11 ; echo countSubStr ( $ str , $ len , $ k ) ; ? >"}
{"text":"Function to return Colour Combination","code":"< ? php function Colour_Combination ( $ s ) { $ temp = $ s [ 0 ] ; for ( $ i = 1 ; $ i < strlen ( $ s ) ; $ i ++ ) { if ( $ temp != $ s [ $ i ] ) {"}
{"text":"Check for B * G = Y","code":"if ( ( $ temp == ' B ' $ temp == ' G ' ) && ( $ s [ $ i ] == ' G ' $ s [ $ i ] == ' B ' ) ) $ temp = ' Y ' ;"}
{"text":"Check for B * Y = G","code":"else if ( ( $ temp == ' B ' $ temp == ' Y ' ) && ( $ s [ $ i ] == ' Y ' $ s [ $ i ] == ' B ' ) ) $ temp = ' G ' ;"}
{"text":"Check for Y * G = B","code":"else $ temp = ' B ' ; } } return $ temp ; }"}
{"text":"Driver Code","code":"$ s = \" GBYGB \" ; echo Colour_Combination ( $ s ) ; ? >"}
{"text":"Function to reverse the middle x characters in a string","code":"< ? php function reverse ( $ str , $ x ) {"}
{"text":"Find the position from where the characters have to be reversed","code":"$ n = ( strlen ( $ str ) - $ x ) \/ 2 ;"}
{"text":"Print the first n characters","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( $ str [ $ i ] ) ;"}
{"text":"Print the middle x characters in reverse","code":"for ( $ i = $ n + $ x - 1 ; $ i >= $ n ; $ i -- ) echo ( $ str [ $ i ] ) ;"}
{"text":"Print the last n characters","code":"for ( $ i = $ n + $ x ; $ i < strlen ( $ str ) ; $ i ++ ) echo $ str [ $ i ] ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ x = 3 ; reverse ( $ str , $ x ) ; ? >"}
{"text":"Function to count numbers","code":"< ? php function lexoSmallest ( $ s , $ n ) {"}
{"text":"Count the number of ' a ' , ' b ' and ' c ' in string","code":"$ ca = 0 ; $ cb = 0 ; $ cc = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] == ' a ' ) $ ca ++ ; else if ( $ s [ $ i ] == ' b ' ) $ cb ++ ; else $ cc ++ ; }"}
{"text":"If equal previously","code":"if ( $ ca == $ cb && $ cb == $ cc ) { return $ s ; } $ cnt = floor ( $ n \/ 3 ) ;"}
{"text":"If not a multiple of 3","code":"if ( $ cnt * 3 != $ n ) { return \" - 1\" ; } $ i = 0 ;"}
{"text":"Increase the number of a ' s \u2581 by \u2581 \u2581 \u2581 removing \u2581 extra \u2581 ' b ' and ;c;","code":"while ( $ ca < $ cnt && $ i < $ n ) {"}
{"text":"Check if it is ' b ' and it is more than n \/ 3","code":"if ( $ s [ $ i ] == ' b ' && $ cb > $ cnt ) { $ cb -- ; $ s [ $ i ] = ' a ' ; $ ca ++ ; }"}
{"text":"Check if it is ' c ' and it more than n \/ 3","code":"else if ( $ s [ $ i ] == ' c ' && $ cc > $ cnt ) { $ cc -- ; $ s [ $ i ] = ' a ' ; $ ca ++ ; } $ i ++ ; } $ i = 0 ;"}
{"text":"Increase the number of b ' s \u2581 by \u2581 \u2581 \u2581 removing \u2581 extra \u2581 ' c '","code":"while ( $ cb < $ cnt && $ i < $ n ) {"}
{"text":"Check if it is ' c ' and it more than n \/ 3","code":"if ( $ s [ $ i ] == ' c ' && $ cc > $ cnt ) { $ cc -- ; $ s [ $ i ] = '1' ; $ cb ++ ; } $ i ++ ; } $ i = $ n - 1 ;"}
{"text":"Increase the number of c 's from back","code":"while ( $ cc < $ cnt && $ i >= 0 ) {"}
{"text":"Check if it is ' a ' and it is more than n \/ 3","code":"if ( $ s [ $ i ] == ' a ' && $ ca > $ cnt ) { $ ca -- ; $ s [ $ i ] = ' c ' ; $ cc ++ ; } $ i -- ; } $ i = $ n - 1 ;"}
{"text":"Increase the number of b 's from back","code":"while ( $ cb < $ cnt && $ i >= 0 ) {"}
{"text":"Check if it is ' a ' and it is more than n \/ 3","code":"if ( $ s [ $ i ] == ' a ' && $ ca > $ cnt ) { $ ca -- ; $ s [ $ i ] = ' b ' ; $ cb ++ ; } $ i -- ; } $ i = $ n - 1 ;"}
{"text":"Increase the number of c 's from back","code":"while ( $ cc < $ cnt && $ i >= 0 ) {"}
{"text":"Check if it is ' b ' and it more than n \/ 3","code":"if ( $ s [ $ i ] == ' b ' && $ cb > $ cnt ) { $ cb -- ; $ s [ $ i ] = ' c ' ; $ cc ++ ; } $ i -- ; } return $ s ; }"}
{"text":"Driver Code","code":"$ s = \" aaaaaa \" ; $ n = strlen ( $ s ) ; echo lexoSmallest ( $ s , $ n ) ; ? >"}
{"text":"Function to return the count of steps required to move from i to j","code":"< ? php function getSteps ( $ str , $ i , $ j , $ n ) {"}
{"text":"Starting from i + 1","code":"$ k = $ i + 1 ;"}
{"text":"Count of steps","code":"$ steps = 0 ;"}
{"text":"Current character","code":"$ ch = $ str [ $ i ] ; while ( $ k <= $ j ) {"}
{"text":"If current character is different from previous","code":"if ( $ str [ $ k ] != $ ch ) {"}
{"text":"Increment steps","code":"$ steps ++ ;"}
{"text":"Update current character","code":"$ ch = $ str [ $ k ] ; } $ k ++ ; }"}
{"text":"Return total steps","code":"return $ steps ; }"}
{"text":"Function to return the minimum number of steps required to reach j from i","code":"function getMinSteps ( $ str , $ i , $ j , $ n ) {"}
{"text":"Swap the values so that i <= j","code":"if ( $ j < $ i ) { $ temp = $ i ; $ i = $ j ; $ j = $ temp ; }"}
{"text":"Steps to go from i to j ( left to right )","code":"$ stepsToRight = getSteps ( $ str , $ i , $ j , $ n ) ;"}
{"text":"While going from i to j ( right to left ) First go from i to 0 then from ( n - 1 ) to j","code":"$ stepsToLeft = getSteps ( $ str , 0 , $ i , $ n ) + getSteps ( $ str , $ j , $ n - 1 , $ n ) ;"}
{"text":"If first and last character is different then it 'll add a step to stepsToLeft","code":"if ( $ str [ 0 ] != $ str [ $ n - 1 ] ) $ stepsToLeft ++ ;"}
{"text":"Return the minimum of two paths","code":"return min ( $ stepsToLeft , $ stepsToRight ) ; }"}
{"text":"Driver code","code":"$ str = \" SSNSS \" ; $ n = strlen ( $ str ) ; $ i = 0 ; $ j = 3 ; echo getMinSteps ( $ str , $ i , $ j , $ n ) ; ? >"}
{"text":"Function to return the modified string","code":"< ? php function removeChars ( $ s ) { $ modifiedStr = \" \" ; $ modifiedStr = $ modifiedStr . $ s [ 0 ] ;"}
{"text":"Traverse through the remaining characters in the string","code":"for ( $ i = 1 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"If the current and the previous characters are not in the same case then take the character","code":"if ( ctype_upper ( $ s [ $ i ] ) && ctype_lower ( $ s [ $ i - 1 ] ) || ctype_lower ( $ s [ $ i ] ) && ctype_upper ( $ s [ $ i - 1 ] ) ) $ modifiedStr = $ modifiedStr . $ s [ $ i ] ; } return $ modifiedStr ; }"}
{"text":"Driver code","code":"$ s = \" GeeksForGeeks \" ; echo removeChars ( $ s ) ; ? >"}
{"text":"Function to return the total cost required to make the string Pangram","code":"< ? php function pangramCost ( $ arr , $ str ) { $ cost = 0 ; $ occurred = array ( ) ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) $ occurred [ $ i ] = false ;"}
{"text":"Mark all the alphabets that occurred in the string","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { $ idx = ord ( $ str [ $ i ] ) - 97 ; $ occurred [ $ idx ] = true ; }"}
{"text":"Calculate the total cost for the missing alphabets","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ occurred [ $ i ] == false ) $ cost += $ arr [ $ i ] ; } return $ cost ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 ) ; $ str = \" abcdefghijklmopqrstuvwz \" ; echo pangramCost ( $ arr , $ str ) ; ? >"}
{"text":"Function to insert * at desired position","code":"< ? php function pairStar ( & $ input , & $ output , $ i = 0 ) {"}
{"text":"Append current character","code":"$ output = $ output . $ input [ $ i ] ;"}
{"text":"If we reached last character","code":"if ( $ i == strlen ( $ input ) - 1 ) return ;"}
{"text":"If next character is same , append ' * '","code":"if ( $ input [ $ i ] == $ input [ $ i + 1 ] ) $ output = $ output . ' * ' ; pairStar ( $ input , $ output , $ i +1 ) ; }"}
{"text":"Driver code","code":"$ input = \" geeks \" ; $ output = \" \" ; pairStar ( $ input , $ output ) ; echo $ output ; return 0 ; ? >"}
{"text":"Function to return max possible operation of the given type that can be performed on str","code":"< ? php function maxOperations ( $ str ) { $ i = $ g = $ gk = $ gks = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] == ' g ' ) {"}
{"text":"Increment count of sub - sequence ' g '","code":"$ g ++ ; } else if ( $ str [ $ i ] == ' k ' ) {"}
{"text":"Increment count of sub - sequence ' gk ' if ' g ' is available","code":"if ( $ g > 0 ) { $ g -- ; $ gk ++ ; } } else if ( $ str [ $ i ] == ' s ' ) {"}
{"text":"Increment count of sub - sequence ' gks ' if sub - sequence ' gk ' appeared previously","code":"if ( $ gk > 0 ) { $ gk -- ; $ gks ++ ; } } }"}
{"text":"Return the count of sub - sequence ' gks '","code":"return $ gks ; }"}
{"text":"Driver code","code":"$ a = \" ggkssk \" ; echo maxOperations ( $ a ) ; ? >"}
{"text":"Function to return the modified string","code":"< ? php function printFinalString ( $ s ) { $ n = strlen ( $ s ) ; $ x = 0 ; $ y = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Count number of ' x '","code":"if ( $ s [ $ i ] == ' x ' ) $ x ++ ;"}
{"text":"Count number of ' y '","code":"else $ y ++ ; } $ finalString = ( string ) null ;"}
{"text":"min ( x , y ) number of ' x ' and ' y ' will be deleted","code":"if ( $ x > $ y ) for ( $ i = 0 ; $ i < $ x - $ y ; $ i ++ ) $ finalString . = \" x \" ; else for ( $ i = 0 ; $ i < $ y - $ x ; $ i ++ ) $ finalString . = \" y \" ; return $ finalString ; }"}
{"text":"Driver Code","code":"$ s = \" xxyyxyy \" ; echo printFinalString ( $ s ) ; ? >"}
{"text":"Function to return a string which when repeated exactly k times gives a permutation of s","code":"< ? php function K_String ( $ s , $ k ) {"}
{"text":"size of string","code":"$ n = strlen ( $ s ) ;"}
{"text":"to frequency of each character","code":"$ fre = $ array = array_fill ( 0 , 26 , 0 ) ;"}
{"text":"get frequency of each character","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ fre [ ord ( $ s [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"to store final answer","code":"$ str = \" \" ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) {"}
{"text":"check if frequency is divisible by k","code":"if ( $ fre [ $ i ] % $ k == 0 ) { $ x = $ fre [ $ i ] \/ $ k ;"}
{"text":"add to answer","code":"while ( $ x -- ) { $ str . = chr ( $ i + ord ( ' a ' ) ) ; } }"}
{"text":"if frequency is not divisible by k","code":"else { return \" - 1\" ; } } return $ str ; }"}
{"text":"Driver code","code":"$ s = \" aabb \" ; $ k = 2 ;"}
{"text":"function call","code":"echo K_String ( $ s , $ k ) ; ? >"}
{"text":"Function to count the number of characters whose ascii value not in range [ l , r ]","code":"< ? php function CountCharacters ( $ str , $ l , $ r ) {"}
{"text":"Initializing the count to 0","code":"$ cnt = 0 ;"}
{"text":"using map to print a character only once","code":"$ m = array_fill ( 0 , 256 , NULL ) ; $ len = strlen ( $ str ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) {"}
{"text":"Increment the count if the value is less","code":"if ( ! ( $ l <= ord ( $ str [ $ i ] ) and ord ( $ str [ $ i ] ) <= $ r ) ) { $ cnt ++ ; if ( isset ( $ m [ ord ( $ str [ $ i ] ) ] ) != 1 ) { echo $ str [ $ i ] . \" \" ; $ m [ ord ( $ str [ $ i ] ) ] ++ ; } } }"}
{"text":"return the count","code":"return $ cnt ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ l = 102 ; $ r = 111 ; echo \" Characters \u2581 with \u2581 ASCII \u2581 values \u2581 not \u2581 in \u2581 the \u2581 \" . \" in the given string are : \" echo \" and their count is \" . CountCharacters ( $ str , $ l , $ r ) ; ? >"}
{"text":"Function to count the words","code":"< ? php function CountWords ( $ str , $ k ) {"}
{"text":"Sum of ascii values","code":"$ sum = 0 ; $ NumberOfWords = 0 ;"}
{"text":"Number of words having sum of ascii less than k","code":"$ counter = 0 ; $ len = strlen ( $ str ) ; for ( $ i = 0 ; $ i < $ len ; ++ $ i ) {"}
{"text":"If character is a space","code":"if ( $ str [ $ i ] == ' \u2581 ' ) { if ( $ sum < $ k ) $ counter ++ ; $ sum = 0 ; $ NumberOfWords ++ ; } else"}
{"text":"Add the ascii value to sum","code":"$ sum += ord ( $ str [ $ i ] ) ; }"}
{"text":"Handling the Last word separately","code":"$ NumberOfWords ++ ; if ( $ sum < $ k ) $ counter ++ ; echo \" Number \u2581 of \u2581 words \u2581 having \u2581 sum \u2581 of \u2581 ASCII \" . \" values less than k = \" \u2581 . \u2581 $ counter \u2581 . \u2581 \" \" ; STRNEWLINE echo \u2581 \" Number of words having sum of ASCII \" \u2581 . STRNEWLINE \" values greater than or equal to k = \" ( $ NumberOfWords - $ counter ) ; }"}
{"text":"Driver code","code":"$ str = \" Learn \u2581 how \u2581 to \u2581 code \" ; $ k = 400 ; CountWords ( $ str , $ k ) ; ? >"}
{"text":"PHP program to find the count of palindromic sub - string of a string in it 's ascending form","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"function to return count of palindromic sub - string","code":"function countPalindrome ( $ str ) { global $ MAX_CHAR ; $ n = strlen ( $ str ) ; $ sum = 0 ;"}
{"text":"calculate frequency","code":"$ hashTable = array_fill ( 0 , $ MAX_CHAR , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ hashTable [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"calculate count of palindromic sub - string","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ hashTable [ $ i ] ) $ sum += ( int ) ( $ hashTable [ $ i ] * ( $ hashTable [ $ i ] + 1 ) \/ 2 ) ; }"}
{"text":"return result","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ str = \" ananananddd \" ; echo countPalindrome ( $ str ) ; ? >"}
{"text":"Function to count the minimum number of elements to remove from a number so that pairwise two consecutive digits are same .","code":"< ? php function countConsecutive ( $ s ) {"}
{"text":"initialize counting variable","code":"$ count = 0 ; for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"check if two consecutive digits are same","code":"if ( $ s [ $ i ] == $ s [ $ i + 1 ] ) $ i ++ ; else $ count ++ ; } return $ count ; }"}
{"text":"Driver code","code":"$ str = \"44522255\" ; echo countConsecutive ( $ str ) ; ? >"}
{"text":"function to check if all digits are odd of a given number","code":"< ? php function check_digits ( $ n ) {"}
{"text":"iterate for all digits","code":"while ( $ n > 1 ) {"}
{"text":"if digit is even","code":"if ( ( $ n % 10 ) % 2 == 0 ) return 0 ; $ n = ( int ) $ n \/ 10 ; }"}
{"text":"all digits are odd","code":"return 1 ; }"}
{"text":"function to return the smallest number with all digits odd","code":"function smallest_number ( $ n ) {"}
{"text":"iterate till we find a number with all digits odd","code":"for ( $ i = $ n ; ; $ i ++ ) if ( check_digits ( $ i ) ) return $ i ; }"}
{"text":"Driver Code","code":"$ N = 2397 ; echo smallest_number ( $ N ) ; ? >"}
{"text":"Function to count the number of characters whose ascii value is in range [ l , r ]","code":"< ? php function CountCharacters ( $ str , $ l , $ r ) {"}
{"text":"Initializing the count to 0","code":"$ cnt = 0 ; $ len = strlen ( $ str ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) {"}
{"text":"Increment the count if the value is less","code":"if ( $ l <= ord ( $ str [ $ i ] ) && ord ( $ str [ $ i ] ) <= $ r ) { $ cnt ++ ; echo $ str [ $ i ] . \" \" ; } }"}
{"text":"return the count","code":"return $ cnt ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ l = 102 ; $ r = 111 ; echo \" Characters \u2581 with \u2581 ASCII \u2581 values \" . \" \u2581 in \u2581 the \u2581 range \u2581 [ l , \u2581 r ] \u2581 are \u2581 STRNEWLINE \" ; echo \" and their count is \" . CountCharacters ( $ str , $ l , $ r ) ; ? >"}
{"text":"Function to find the minimum steps","code":"< ? php function minSteps ( $ str ) { $ count = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) - 2 ; $ i ++ ) { if ( $ str [ $ i ] == '0' ) { if ( $ str [ $ i + 1 ] == '1' ) { if ( $ str [ $ i + 2 ] == '0' ) {"}
{"text":"substring \"010\" found","code":"$ count ++ ; $ i += 2 ; } } } } return $ count ; }"}
{"text":"Get the binary string","code":"$ str = \"0101010\" ;"}
{"text":"Find the minimum steps","code":"echo ( minSteps ( $ str ) ) ; ? >"}
{"text":"Function to count the number of characters whose ascii value is less than k","code":"< ? php function CountCharacters ( $ str , $ k ) {"}
{"text":"Initialising the count to 0","code":"$ cnt = 0 ; $ len = strlen ( $ str ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) {"}
{"text":"Incrementing the count if the value is less","code":"if ( $ str [ $ i ] < chr ( $ k ) ) $ cnt += 1 ; }"}
{"text":"return the count","code":"return $ cnt ; }"}
{"text":"Driver code","code":"$ str = \" GeeksForGeeks \" ; $ k = 90 ; $ count = CountCharacters ( $ str , $ k ) ; echo ( \" Characters \u2581 with \u2581 ASCII \u2581 values \" . \" \u2581 less \u2581 than \u2581 K \u2581 are \u2581 \" . $ count ) ; echo ( \" Characters with ASCII values \" \u2581 . STRNEWLINE \" greater than or equal to K are \" ( strlen ( $ str ) - $ count ) ) ; ? >"}
{"text":"Function to return the factorial of a number","code":"< ? php function fact ( $ n ) { $ f = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ f = $ f * $ i ; } return $ f ; }"}
{"text":"calculating nPr","code":"function npr ( $ n , $ r ) { return fact ( $ n ) \/ fact ( $ n - $ r ) ; }"}
{"text":"Function to find the number of $ways in which the characters of the word can be arranged such that the vowels occupy only the odd positions","code":"function countPermutations ( $ str ) {"}
{"text":"Get total even positions","code":"$ even = floor ( strlen ( $ str ) \/ 2 ) ;"}
{"text":"Get total odd positions","code":"$ odd = strlen ( $ str ) - $ even ; $ ways = 0 ;"}
{"text":"Store $frequency of each character of the string","code":"$ freq = array_fill ( 0 , 26 , 0 ) ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { ++ $ freq [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ; }"}
{"text":"Count total number of vowels","code":"$ nvowels = $ freq [ 0 ] + $ freq [ 4 ] + $ freq [ 8 ] + $ freq [ 14 ] + $ freq [ 20 ] ;"}
{"text":"Count total number of consonants","code":"$ nconsonants = strlen ( $ str ) - $ nvowels ;"}
{"text":"Calculate the total number of ways","code":"$ ways = npr ( $ odd , $ nvowels ) * npr ( $ nconsonants , $ nconsonants ) ; return $ ways ; }"}
{"text":"Driver code","code":"$ str = \" geeks \" ; echo countPermutations ( $ str ) ; ? >"}
{"text":"Function to check if a character is vowel or not","code":"< ? php function isVowel ( $ ch ) { if ( $ ch != ' a ' && $ ch != ' e ' && $ ch != ' i ' && $ ch != ' o ' && $ ch != ' u ' ) return false ; return true ; }"}
{"text":"Function that replaces consonant with next immediate consonant alphabatically","code":"function replaceConsonants ( $ s ) {"}
{"text":"Start traversing the string","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) { if ( ! isVowel ( $ s [ $ i ] ) ) {"}
{"text":"if character is z , than replace it with character b","code":"if ( $ s [ $ i ] == ' z ' ) $ s [ $ i ] = ' b ' ;"}
{"text":"if the alphabet is not z","code":"else {"}
{"text":"replace the element with next immediate alphabet","code":"$ s [ $ i ] = chr ( ord ( $ s [ $ i ] ) + 1 ) ;"}
{"text":"if next immediate alphabet is vowel , than take next 2 nd immediate alphabet ( since no two vowels occurs consecutively in alphabets ) hence no further checking is required","code":"if ( isVowel ( $ s [ $ i ] ) ) $ s [ $ i ] = chr ( ord ( $ s [ $ i ] ) + 1 ) ; } } } return $ s ; }"}
{"text":"Driver code","code":"$ s = \" geeksforgeeks \" ; echo replaceConsonants ( $ s ) ; ? >"}
{"text":"PHP program to count number of on offs to display digits of a number .","code":"< ? php function countOnOff ( $ n ) {"}
{"text":"store the led lights required to display a particular number .","code":"$ Led = array ( 6 , 2 , 5 , 5 , 4 , 5 , 6 , 3 , 7 , 5 ) ; $ len = strlen ( $ n ) ;"}
{"text":"compute the change in led and keep on adding the change","code":"$ sum = $ Led [ $ n [ 0 ] - '0' ] ; for ( $ i = 1 ; $ i < $ len ; $ i ++ ) { $ sum = $ sum + abs ( $ Led [ $ n [ $ i ] - '0' ] - $ Led [ $ n [ $ i - 1 ] - '0' ] ) ; } return $ sum ; }"}
{"text":"Driver code","code":"$ n = \"082\" ; echo countOnOff ( $ n ) ; ? >"}
{"text":"returns the maximum size of a substring consisting only of zeroes after k concatenation","code":"< ? php function max_length_substring ( $ st , $ n , $ k ) {"}
{"text":"stores the maximum length of the required substring","code":"$ max_len = 0 ; $ len = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) {"}
{"text":"if the current character is 0","code":"if ( $ st [ $ i ] == '0' ) $ len ++ ; else $ len = 0 ;"}
{"text":"stores maximum length of current substrings with zeroes","code":"$ max_len = max ( $ max_len , $ len ) ; }"}
{"text":"if the whole $is filled with zero","code":"if ( $ max_len == $ n ) return $ n * $ k ; $ pref = 0 ; $ suff = 0 ;"}
{"text":"computes the length of the maximal prefix which contains only zeroes","code":"for ( $ i = 0 ; $ st [ $ i ] == '0' ; ++ $ i , ++ $ pref ) ;"}
{"text":"computes the length of the maximal suffix which contains only zeroes","code":"for ( $ i = $ n - 1 ; $ st [ $ i ] == '0' ; -- $ i , ++ $ suff ) ;"}
{"text":"if more than 1 concatenations are to be made","code":"if ( $ k > 1 ) $ max_len = max ( $ max_len , $ pref + $ suff ) ; return $ max_len ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ k = 3 ; $ st = \"110010\" ; $ ans = max_length_substring ( $ st , $ n , $ k ) ; echo $ ans ; ? >"}
{"text":"Function that counts valid sub - strings","code":"< ? php function countSubStr ( $ S , $ X ) { $ cnt = 0 ; $ N = strlen ( $ S ) ; for ( $ i = 0 ; $ i < $ N ; ++ $ i ) {"}
{"text":"Only take those numbers that do not start w$ith '0' .","code":"if ( $ S [ $ i ] != '0' ) { for ( $ len = 1 ; ( $ i + $ len ) <= $ N ; ++ $ len ) {"}
{"text":"converting the sub - str$ing starting from index ' i ' and having length ' len ' to int and checking if it is greater than X or not","code":"$ num = intval ( substr ( $ S , $ i , $ len ) ) ; if ( $ num > $ X ) $ cnt ++ ; } } } return $ cnt ; }"}
{"text":"Driver code","code":"$ S = \"2222\" ; $ X = 97 ; echo countSubStr ( $ S , $ X ) ; ? >"}
{"text":"Function that returns false if the number passed as argument contains digit ( s ) other than '0' or '1'","code":"< ? php function isBinary ( $ n ) { while ( $ n != 0 ) { $ temp = $ n % 10 ; if ( $ temp != 0 && $ temp != 1 ) { return false ; } $ n = intval ( $ n \/ 10 ) ; } return true ; }"}
{"text":"Function that checks whether the binary string can be formed or not","code":"function formBinaryStr ( $ n , & $ a ) { $ flag = true ;"}
{"text":"Empty string for storing the binary number","code":"$ s = \" \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"check if a [ i ] can be a part of the binary string","code":"if ( isBinary ( $ a [ $ i ] ) )"}
{"text":"Conversion of int into string","code":"$ s = $ s . strval ( $ a [ $ i ] ) ; else {"}
{"text":"if a [ i ] can 't be a part  then break the loop","code":"$ flag = false ; break ; } }"}
{"text":"possible to create binary string","code":"if ( $ flag ) echo $ s . \" STRNEWLINE \" ;"}
{"text":"impossible to create binary string","code":"else echo \" - 1 STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ a = array ( 10 , 1 , 0 , 11 , 10 ) ; $ N = sizeof ( $ a ) \/ sizeof ( $ a [ 0 ] ) ; formBinaryStr ( $ N , $ a ) ; ? >"}
{"text":"Function to check if the string is palindrome","code":"< ? php function checkPalindrome ( $ s ) { for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) { if ( $ s [ $ i ] != $ s [ strlen ( $ s ) - $ i - 1 ] ) return false ; } return true ; }"}
{"text":"Function that checks whether all the palindromic sub - strings are of odd length .","code":"function CheckOdd ( $ s ) { $ n = strlen ( $ s ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Creating each substring","code":"$ x = \" \" ; for ( $ j = $ i ; $ j < $ n ; $ j ++ ) { $ x = $ x . $ s [ $ i ] ;"}
{"text":"If the sub - string is of even length and is a palindrome then , we return False","code":"if ( strlen ( $ x ) % 2 == 0 && checkPalindrome ( $ x ) == true ) return false ; } } return true ; }"}
{"text":"Driver code","code":"$ s = \" geeksforgeeks \" ; if ( CheckOdd ( $ s ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to return factorial of the number passed as argument","code":"< ? php function fact ( $ n ) { $ result = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ result *= $ i ; return $ result ; }"}
{"text":"Function to get the total permutations which satisfy the given condition","code":"function getResult ( $ str , $ ch ) {"}
{"text":"Create has to store count of each character","code":"$ has = array_fill ( 0 , 26 , NULL ) ;"}
{"text":"Store character occurrences","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) $ has [ ord ( $ str [ $ i ] ) - ord ( ' A ' ) ] ++ ;"}
{"text":"Count number of times Particular character comes","code":"$ particular = $ has [ ord ( $ ch ) - ord ( ' A ' ) ] ;"}
{"text":"If particular character isn 't  present in the string then return 0","code":"if ( $ particular == 0 ) return 0 ;"}
{"text":"Remove count of particular character","code":"$ has [ ord ( $ ch ) - ord ( ' A ' ) ] = 0 ;"}
{"text":"Total length of the string","code":"$ total = strlen ( $ str ) ;"}
{"text":"Assume all occurrences of particular character as a single character .","code":"$ total = $ total - $ particular + 1 ;"}
{"text":"Compute factorial of the length","code":"$ result = fact ( $ total ) ;"}
{"text":"Divide by the factorials of the no . of occurrences of all the characters .","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ has [ $ i ] > 1 ) { $ result = $ result \/ fact ( $ has [ $ i ] ) ; } }"}
{"text":"return the result","code":"return $ result ; }"}
{"text":"Driver Code","code":"$ str = \" MISSISSIPPI \" ;"}
{"text":"Assuming the string and the character are all in uppercase","code":"echo getResult ( $ str , ' S ' ) . \" STRNEWLINE \" ; ? >"}
{"text":"this function return n !","code":"< ? php function factorial ( $ n ) { $ res = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ res = $ res * $ i ; return $ res ; }"}
{"text":"this will return total number of ways","code":"function count1 ( $ word ) {"}
{"text":"freq maintains frequency of each character in word","code":"$ freq = array_fill ( 0 , 27 , 0 ) ; for ( $ i = 0 ; $ i < 27 ; $ i ++ ) $ freq [ $ i ] = 0 ; $ vowel = 0 ; $ consonant = 0 ; for ( $ i = 0 ; $ i < strlen ( $ word ) ; $ i ++ ) { $ freq [ ord ( $ word [ $ i ] ) - 65 ] ++ ;"}
{"text":"check character is vowel or not","code":"if ( $ word [ $ i ] == ' A ' $ word [ $ i ] == ' E ' $ word [ $ i ] == ' I ' $ word [ $ i ] == ' O ' $ word [ $ i ] == ' U ' ) { $ vowel ++ ; }"}
{"text":"the characters that are not vowel must be consonant","code":"else $ consonant ++ ; }"}
{"text":"number of ways to arrange vowel","code":"$ vowelArrange = factorial ( $ vowel ) ; $ vowelArrange \/= factorial ( $ freq [ 0 ] ) ; $ vowelArrange \/= factorial ( $ freq [ 4 ] ) ; $ vowelArrange \/= factorial ( $ freq [ 8 ] ) ; $ vowelArrange \/= factorial ( $ freq [ 14 ] ) ; $ vowelArrange \/= factorial ( $ freq [ 20 ] ) ; $ consonantArrange = factorial ( $ consonant ) ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ i != 0 && $ i != 4 && $ i != 8 && $ i != 14 && $ i != 20 ) $ consonantArrange \/= factorial ( $ freq [ $ i ] ) ; }"}
{"text":"multiply both as these are independent","code":"$ total = $ vowelArrange * $ consonantArrange ; return $ total ; }"}
{"text":"string contains only capital letters","code":"$ word = \" COMPUTER \" ;"}
{"text":"this will contain ans","code":"$ ans = count1 ( $ word ) ; echo ( $ ans ) ; ? >"}
{"text":"Function to find product of ASCII value of characters in string","code":"< ? php function productAscii ( $ str ) { $ prod = 1 ;"}
{"text":"Traverse string to find the product","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { $ prod *= ord ( $ str [ $ i ] ) ; }"}
{"text":"Return the product","code":"return $ prod ; }"}
{"text":"Driver code","code":"$ str = \" GfG \" ; echo productAscii ( $ str ) ; ? >"}
{"text":"Print balanced and remove extra brackets from string","code":"< ? php function balancedString ( $ str ) { $ count = 0 ; $ n = strlen ( $ str ) ;"}
{"text":"Maintain a count for opening brackets Traversing string","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"check if opening bracket","code":"if ( $ str [ $ i ] == ' ( ' ) {"}
{"text":"print str [ i ] and increment count by 1","code":"echo $ str [ $ i ] ; $ count ++ ; }"}
{"text":"check if closing bracket and count != 0","code":"else if ( $ str [ $ i ] == ' ) ' && $ count != 0 ) { echo $ str [ $ i ] ;"}
{"text":"decrement count by 1","code":"$ count -- ; }"}
{"text":"if str [ i ] not a closing brackets print it","code":"else if ( $ str [ $ i ] != ' ) ' echo $ str [ $ i ] ; }"}
{"text":"balanced brackets if opening brackets are more then closing brackets","code":"if ( $ count != 0 )"}
{"text":"print remaining closing brackets","code":"for ( $ i = 0 ; $ i < $ count ; $ i ++ ) echo \" ) \" ; }"}
{"text":"Driver code","code":"$ str = \" gau ) ra ) v ( ku ( mar ( rajput ) ) \" ; balancedString ( $ str ) ; ? >"}
{"text":"Function to find the count of strings","code":"< ? php function countStrings ( $ s ) {"}
{"text":"Variable to store the final result","code":"$ sum = 1 ;"}
{"text":"Loop iterating through string","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"If ' $ ' is present at the even position in the string","code":"if ( $ i % 2 == 0 && $ s [ $ i ] == ' $ ' )"}
{"text":"' sum ' is multiplied by 21","code":"$ sum *= 21 ;"}
{"text":"If ' $ ' is present at the odd position in the string","code":"else if ( $ s [ $ i ] == ' $ ' )"}
{"text":"' sum ' is multiplied by 5","code":"$ sum *= 5 ; } return $ sum ; }"}
{"text":"Let the string ' str ' be s$$e$","code":"$ str = \" s\\ $ \\ $ e\\ $ \" ;"}
{"text":"Print result","code":"echo countStrings ( $ str ) ; ? >"}
{"text":"Function to remove duplicates","code":"< ? php function removeDuplicatesFromString ( $ str ) {"}
{"text":"keeps track of visited characters","code":"$ counter = 0 ; $ i = 0 ; $ size = strlen ( $ str ) ;"}
{"text":"gets character value","code":"$ x = 0 ;"}
{"text":"keeps track of length of resultant string","code":"$ length = 0 ; while ( $ i < $ size ) { $ x = ord ( $ str [ $ i ] ) - 97 ;"}
{"text":"check if Xth bit of counter is unset","code":"if ( ( $ counter & ( 1 << $ x ) ) == 0 ) { $ str [ $ length ] = chr ( 97 + $ x ) ;"}
{"text":"mark current character as visited","code":"$ counter = $ counter | ( 1 << $ x ) ; $ length ++ ; } $ i ++ ; } return substr ( $ str , 0 , $ length ) ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; echo removeDuplicatesFromString ( $ str ) ; ? >"}
{"text":"Utility function to get the position of first character in the string","code":"< ? php function firstPos ( $ str , $ start , $ end ) { $ firstChar = -1 ;"}
{"text":"Get the position of first character in the string","code":"for ( $ i = $ start ; $ i <= $ end ; $ i ++ ) { if ( $ str [ $ i ] >= ' a ' and $ str [ $ i ] <= ' z ' ) { $ firstChar = $ i ; break ; } } return $ firstChar ; }"}
{"text":"Utility function to get the position of last character in the string","code":"function lastPos ( $ str , $ start , $ end ) { $ lastChar = -1 ;"}
{"text":"Get the position of last character in the string","code":"for ( $ i = $ start ; $ i >= $ end ; $ i -- ) { if ( $ str [ $ i ] >= ' a ' and $ str [ $ i ] <= ' z ' ) { $ lastChar = $ i ; break ; } } return $ lastChar ; }"}
{"text":"Function to check if the characters in the given string forms a Palindrome in O ( 1 ) extra space","code":"function isPalindrome ( $ str ) { $ firstChar = 0 ; $ lastChar = count ( $ str ) - 1 ; $ ch = true ; for ( $ i = 0 ; $ i < count ( $ str ) ; $ i ++ ) { $ firstChar = firstPos ( $ str , $ firstChar , $ lastChar ) ; $ lastChar = lastPos ( $ str , $ lastChar , $ firstChar ) ;"}
{"text":"break , when all letters are checked","code":"if ( $ lastChar < 0 or $ firstChar < 0 ) break ; if ( $ str [ $ firstChar ] == $ str [ $ lastChar ] ) { $ firstChar ++ ; $ lastChar -- ; continue ; }"}
{"text":"if mismatch found , break the loop","code":"$ ch = false ; break ; } return ( $ ch ) ; }"}
{"text":"Driver code","code":"$ str = \" m \u2581 a \u2581 343 \u2581 la \u2581 y \u2581 a \u2581 l \u2581 am \" ; if ( isPalindrome ( $ str ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to calculate the maximum power of the jump","code":"< ? php function powerOfJump ( $ s ) {"}
{"text":"Initialize the count with 1","code":"$ count = 1 ; $ max_so_far = PHP_INT_MIN ;"}
{"text":"Find the character at last index","code":"$ ch = $ s [ strlen ( $ s ) - 1 ] ;"}
{"text":"Start traversing the string","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"Check if the current char is equal to the last character","code":"if ( $ s [ $ i ] == $ ch ) {"}
{"text":"max_so_far stores maximum value of the power of the jump from starting to ith position","code":"if ( $ count > $ max_so_far ) { $ max_so_far = $ count ; }"}
{"text":"Reset the count to 1","code":"$ count = 1 ; }"}
{"text":"Else , increment the number of jumps \/ count","code":"else $ count ++ ; }"}
{"text":"Return the maximum number of jumps","code":"return $ max_so_far ; }"}
{"text":"Driver code","code":"$ st = \"1010101\" ; echo powerOfJump ( $ st ) ; ? >"}
{"text":"Function to find average of ASCII value of chars","code":"< ? php function averageValue ( $ s ) { $ sum_char = 0 ;"}
{"text":"loop to sum the ascii value of chars","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) { $ sum_char += ord ( $ s [ $ i ] ) ; }"}
{"text":"Returning average of chars","code":"return ( int ) ( $ sum_char \/ strlen ( $ s ) ) ; }"}
{"text":"Driver code","code":"$ s = \" GeeksforGeeks \" ; echo averageValue ( $ s ) ; ? >"}
{"text":"A Utility Function to find the common prefix between first and last strings","code":"< ? php function commonPrefixUtil ( $ str1 , $ str2 ) { $ result = \" \" ; $ n1 = strlen ( $ str1 ) ; $ n2 = strlen ( $ str2 ) ;"}
{"text":"Compare str1 and str2","code":"for ( $ i = 0 , $ j = 0 ; $ i <= $ n1 - 1 && $ j <= $ n2 - 1 ; $ i ++ , $ j ++ ) { if ( $ str1 [ $ i ] != $ str2 [ $ j ] ) break ; $ result = $ result . $ str1 [ $ i ] ; } return ( $ result ) ; }"}
{"text":"A Function that returns the longest common prefix from the array of strings","code":"function commonPrefix ( & $ arr , $ n ) {"}
{"text":"sorts the N set of strings","code":"sort ( $ arr ) ;"}
{"text":"prints the common prefix of the first and the last string of the set of strings","code":"echo commonPrefixUtil ( $ arr [ 0 ] , $ arr [ $ n - 1 ] ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( \" geeksforgeeks \" , \" geeks \" , \" geek \" , \" geezer \" ) ; $ n = sizeof ( $ arr ) ; commonPrefix ( $ arr , $ n ) ; ? >"}
{"text":"This function adds two binary strings and return result as a third string","code":"< ? php function addBinaryUtil ( $ a , $ b ) {"}
{"text":"Initialize result","code":"$ result = \" \" ;"}
{"text":"Initialize digit sum","code":"$ s = 0 ;"}
{"text":"Traverse both strings starting from last characters","code":"$ i = strlen ( $ a ) - 1 ; $ j = strlen ( $ b ) - 1 ; while ( $ i >= 0 $ j >= 0 $ s == 1 ) {"}
{"text":"Compute sum of last digits and carry","code":"$ s += ( ( $ i >= 0 ) ? ord ( $ a [ $ i ] ) - ord ( '0' ) : 0 ) ; $ s += ( ( $ j >= 0 ) ? ord ( $ b [ $ j ] ) - ord ( '0' ) : 0 ) ;"}
{"text":"If current digit sum is 1 or 3 , add 1 to result","code":"$ result = chr ( $ s % 2 + ord ( '0' ) ) . $ result ;"}
{"text":"Compute carry","code":"$ s = ( int ) ( $ s \/ 2 ) ;"}
{"text":"Move to next digits","code":"$ i -- ; $ j -- ; } return $ result ; }"}
{"text":"function to add n binary strings","code":"function addBinary ( $ arr , $ n ) { $ result = \" \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ result = addBinaryUtil ( $ result , $ arr [ $ i ] ) ; return $ result ; }"}
{"text":"Driver code","code":"$ arr = array ( \"1\" , \"10\" , \"11\" ) ; $ n = count ( $ arr ) ; echo addBinary ( $ arr , $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to count prefixes","code":"< ? php function prefix ( $ k , $ n ) { $ a = 0 ; $ b = 0 ; $ count = 0 ; $ i = 0 ; $ len = strlen ( $ k ) ;"}
{"text":"calculating for string S","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ k [ $ i ] == ' a ' ) $ a ++ ; if ( $ k [ $ i ] == ' b ' ) $ b ++ ; if ( $ a > $ b ) { $ count ++ ; } }"}
{"text":"count == 0 or when N == 1","code":"if ( $ count == 0 $ n == 1 ) { echo ( $ count ) ; return 0 ; }"}
{"text":"when all characters are a or a - b == 0","code":"if ( $ count == $ len $ a - $ b == 0 ) { echo ( $ count * $ n ) ; return 0 ; } $ n2 = $ n - 1 ; $ count2 = 0 ;"}
{"text":"checking for saturation of string after repetitive addition","code":"while ( $ n2 != 0 ) { for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { if ( $ k [ $ i ] == ' a ' ) $ a ++ ; if ( $ k [ $ i ] == ' b ' ) $ b ++ ; if ( $ a > $ b ) { $ count2 ++ ; } } $ count += $ count2 ; $ n2 -- ; if ( $ count2 == 0 ) break ; if ( $ count2 == $ len ) { $ count += ( $ n2 * $ count2 ) ; break ; } $ count2 = 0 ; } return $ count ; }"}
{"text":"Driver Code","code":"$ S = \" aba \" ; $ N = 2 ; echo ( prefix ( $ S , $ N ) . \" \" ) ; $ S = \" baa \" ; $ N = 3 ; echo ( prefix ( $ S , $ N ) . \" \" ) ;"}
{"text":"function for finding common divisor .","code":"< ? php function isCommonBase ( $ base , $ s1 , $ s2 ) {"}
{"text":"Checking if ' base ' is base string of ' s1'","code":"for ( $ j = 0 ; $ j < strlen ( $ s1 ) ; ++ $ j ) if ( $ base [ $ j % strlen ( $ base ) ] != $ s1 [ $ j ] ) return false ;"}
{"text":"Checking if ' base ' is base string of ' s2'","code":"for ( $ j = 0 ; $ j < strlen ( $ s2 ) ; ++ $ j ) if ( $ base [ $ j % strlen ( $ base ) ] != $ s2 [ $ j ] ) return false ; return true ; } function countCommonBases ( $ s1 , $ s2 ) { $ n1 = strlen ( $ s1 ) ; $ n2 = strlen ( $ s2 ) ; $ count = 0 ; for ( $ i = 1 ; $ i <= min ( $ n1 , $ n2 ) ; $ i ++ ) { $ base = substr ( $ s1 , 0 , $ i ) ; if ( isCommonBase ( $ base , $ s1 , $ s2 ) ) $ count ++ ; } return $ count ; }"}
{"text":"Driver code","code":"$ s1 = \" pqrspqrs \" ; $ s2 = \" pqrspqrspqrspqrs \" ; echo countCommonBases ( $ s1 , $ s2 ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find if string is a perfect square or not .","code":"< ? php function isPerfectSquareString ( $ str ) { $ sum = 0 ;"}
{"text":"calculating the length of the string","code":"$ len = strlen ( $ str ) ;"}
{"text":"calculating the ASCII value of the string","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) $ sum += ( int ) $ str [ $ i ] ;"}
{"text":"Find floating point value of square root of x .","code":"$ squareRoot = sqrt ( $ sum ) ;"}
{"text":"If square root is an integer","code":"return ( ( $ squareRoot - floor ( $ squareRoot ) ) == 0 ) ; }"}
{"text":"Driver code","code":"$ str = \" d \" ; if ( isPerfectSquareString ( $ str ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function which returns True or False for occurrence of a vowel","code":"< ? php function is_vow ( $ c ) {"}
{"text":"this compares vowel with character ' c '","code":"return ( $ c == ' a ' ) || ( $ c == ' e ' ) || ( $ c == ' i ' ) || ( $ c == ' o ' ) || ( $ c == ' u ' ) ; }"}
{"text":"function to print resultant string","code":"function removeVowels ( $ str ) {"}
{"text":"print 1 st character","code":"printf ( $ str [ 0 ] ) ;"}
{"text":"loop to check for each character","code":"for ( $ i = 1 ; $ i < strlen ( $ str ) ; $ i ++ )"}
{"text":"comparison of consecutive characters","code":"if ( ( ! is_vow ( $ str [ $ i - 1 ] ) ) || ( ! is_vow ( $ str [ $ i ] ) ) ) printf ( $ str [ $ i ] ) ; }"}
{"text":"Driver code","code":"$ str = \" \u2581 geeks \u2581 for \u2581 geeks \" ; removeVowels ( $ str ) ; ? >"}
{"text":"function to transform string with string passed as reference","code":"< ? php function transformString ( & $ s ) {"}
{"text":"initializing the variable ch to ' a '","code":"$ ch = \" a \" ;"}
{"text":"if the length of string is less than 26 , we can 't obtain the required  subsequence","code":"if ( strlen ( $ s ) < 26 ) return false ; for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"if ch has reached ' z ' , it means we have transformed our string such that required subsequence can be obtained","code":"if ( ord ( $ ch ) > ord ( \" z \" ) ) break ;"}
{"text":"current character is not greater than ch , then replace it with ch and increment ch","code":"if ( $ s [ $ i ] <= $ ch ) { $ s [ $ i ] = $ ch ; $ ch = chr ( ord ( $ ch ) + 1 ) ; } } if ( $ ch <= \" z \" ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ str = \" aaaaaaaaaaaaaaaaaaaaaaaaaa \" ; if ( transformString ( $ str ) ) echo $ str ; else echo \" Not \u2581 Possible \" ; ? >"}
{"text":"Checks if a given $is Pandigital","code":"< ? php function isPanDigital ( $ s ) { $ digits = array ( ) ; $ digits = array_fill ( 0 , 10 , false ) ; for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) $ digits [ ord ( $ s [ $ i ] ) - ord ( '0' ) ] = true ;"}
{"text":"digit i is not present thus not pandigital","code":"for ( $ i = 0 ; $ i <= 9 ; $ i ++ ) if ( $ digits [ $ i ] == false ) return false ; return true ; }"}
{"text":"Returns number of pairs of strings resulting in Pandigital Concatenations","code":"function countPandigitalPairs ( & $ v ) {"}
{"text":"iterate over all pair of strings","code":"$ pairs = 0 ; for ( $ i = 0 ; $ i < count ( $ v ) ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < count ( $ v ) ; $ j ++ ) { if ( isPanDigital ( $ v [ $ i ] . $ v [ $ j ] ) ) { $ pairs ++ ; } } } return $ pairs ; }"}
{"text":"Driver code","code":"$ v = array ( \"123567\" , \"098234\" , \"14765\" , \"19804\" ) ; echo ( countPandigitalPairs ( $ v ) ) ; ? >"}
{"text":"Returns minimum changes to str so that no substring is repeated .","code":"< ? php function minChanges ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"If length is more than maximum allowed characters , we cannot get the required string .","code":"if ( $ n > 26 ) return -1 ;"}
{"text":"Variable to store count of distinct characters","code":"$ dist_count = 0 ;"}
{"text":"To store counts of different characters","code":"$ count = array_fill ( 0 , 26 , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ count [ ord ( $ str [ $ i ] ) - 97 ] == 0 ) $ dist_count ++ ; $ count [ ord ( $ str [ $ i ] ) - 97 ] ++ ; }"}
{"text":"Answer is , n - number of distinct char","code":"return ( $ n - $ dist_count ) ; }"}
{"text":"Driver Code","code":"$ str = \" aebaecedabbee \" ; echo minChanges ( $ str ) ; ? >"}
{"text":"Return the count of strings with no palindromic substring .","code":"< ? php function numofstring ( $ n , $ m ) { if ( $ n == 1 ) return $ m ; if ( $ n == 2 ) return $ m * ( $ m - 1 ) ; return $ m * ( $ m - 1 ) * pow ( $ m - 2 , $ n - 2 ) ; }"}
{"text":"Driver Code","code":"{ $ n = 2 ; $ m = 3 ; echo numofstring ( $ n , $ m ) ; return 0 ; } ? >"}
{"text":"Function to count special Palindromic susbstring","code":"< ? php function CountSpecialPalindrome ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"store count of special Palindromic substring","code":"$ result = 0 ;"}
{"text":"it will store the count of continues same char","code":"$ sameChar = array_fill ( 0 , $ n , 0 ) ; $ i = 0 ;"}
{"text":"traverse string character from left to right","code":"while ( $ i < $ n ) {"}
{"text":"store same character count","code":"$ sameCharCount = 1 ; $ j = $ i + 1 ;"}
{"text":"count smiler character","code":"while ( $ j < $ n ) { if ( $ str [ $ i ] != $ str [ $ j ] ) break ; $ sameCharCount ++ ; $ j ++ ; }"}
{"text":"Case : 1 so total number of substring that we can generate are : K * ( K + 1 ) \/ 2 here K is sameCharCount","code":"$ result += ( int ) ( $ sameCharCount * ( $ sameCharCount + 1 ) \/ 2 ) ;"}
{"text":"store current same char count in sameChar [ ] array","code":"$ sameChar [ $ i ] = $ sameCharCount ;"}
{"text":"increment i","code":"$ i = $ j ; }"}
{"text":"Case 2 : Count all odd length Special Palindromic substring","code":"for ( $ j = 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"if current character is equal to previous one then we assign Previous same character count to current one","code":"if ( $ str [ $ j ] == $ str [ $ j - 1 ] ) $ sameChar [ $ j ] = $ sameChar [ $ j - 1 ] ;"}
{"text":"case 2 : odd length","code":"if ( $ j > 0 && $ j < ( $ n - 1 ) && ( $ str [ $ j - 1 ] == $ str [ $ j + 1 ] && $ str [ $ j ] != $ str [ $ j - 1 ] ) ) $ result += $ sameChar [ $ j - 1 ] < $ sameChar [ $ j + 1 ] ? $ sameChar [ $ j - 1 ] : $ sameChar [ $ j + 1 ] ; }"}
{"text":"subtract all single length substring","code":"return $ result - $ n ; }"}
{"text":"Driver Code","code":"$ str = \" abccba \" ; echo CountSpecialPalindrome ( $ str ) ; ? >"}
{"text":"function to print the bracket number","code":"< ? php function printBracketNumber ( $ exp , $ n ) {"}
{"text":"used to print the bracket number for the left bracket","code":"$ left_bnum = 1 ;"}
{"text":"used to obtain the bracket number for the right bracket","code":"$ right_bnum = array ( ) ; $ t = 0 ;"}
{"text":"traverse the given expression ' exp '","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if current character is a left bracket","code":"if ( $ exp [ $ i ] == ' ( ' ) {"}
{"text":"print ' left _ bnum ' ,","code":"echo $ left_bnum . \" \" ;"}
{"text":"push ' left _ bum ' on to the stack ' right _ bnum '","code":"$ right_bnum [ $ t ++ ] = $ left_bnum ;"}
{"text":"increment ' left _ bnum ' by 1","code":"$ left_bnum ++ ; }"}
{"text":"else if current character is a right bracket","code":"else if ( $ exp [ $ i ] == ' ) ' {"}
{"text":"print the top element of stack ' right _ bnum ' it will be the right bracket number","code":"echo $ right_bnum [ $ t - 1 ] . \" \" ;"}
{"text":"pop the top element from the stack","code":"$ right_bnum [ $ t - 1 ] = 1 ; $ t -- ; } } }"}
{"text":"Driver Code","code":"$ exp = \" ( a + ( b * c ) ) + ( d \/ e ) \" ; $ n = strlen ( $ exp ) ; printBracketNumber ( $ exp , $ n ) ; ? >"}
{"text":"PHP program to find if a given corner string is present at corners .","code":"< ? php function isCornerPresent ( $ str , $ corner ) { $ n = strlen ( $ str ) ; $ cl = strlen ( $ corner ) ;"}
{"text":"If length of corner string is more , it cannot be present at corners .","code":"if ( $ n < $ cl ) return false ;"}
{"text":"Return true if corner string is present at both corners of given string .","code":"return ( ! strcmp ( substr ( $ str , 0 , $ cl ) , $ corner ) && ! strcmp ( substr ( $ str , $ n - $ cl , $ cl ) , $ corner ) ) ; }"}
{"text":"Driver Code","code":"$ str = \" geeksforgeeks \" ; $ corner = \" geeks \" ; if ( isCornerPresent ( $ str , $ corner ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Returns true if it is possible to convert str1 to str2 using k operations .","code":"< ? php function isConvertible ( $ str1 , $ str2 , $ k ) {"}
{"text":"Case A ( i )","code":"if ( ( strlen ( $ str1 ) + strlen ( $ str2 ) ) < $ k ) return true ;"}
{"text":"finding common length of both string","code":"$ commonLength = 0 ; for ( $ i = 0 ; $ i < min ( strlen ( $ str1 ) , strlen ( $ str2 ) ) ; $ i ++ ) { if ( $ str1 == $ str2 ) $ commonLength += 1 ; else break ; }"}
{"text":"Case A ( ii ) -","code":"if ( ( $ k - strlen ( $ str1 ) - strlen ( $ str2 ) + 2 * $ commonLength ) % 2 == 0 ) return true ;"}
{"text":"Case B","code":"return false ; }"}
{"text":"Driver Code","code":"$ str1 = \" geek \" ; $ str2 = \" geek \" ; $ k = 7 ; if ( isConvertible ( $ str1 , $ str2 , $ k ) ) echo \" Yes \" . \" STRNEWLINE \" ; else echo \" No \" . \" STRNEWLINE \" ; $ str1 = \" geeks \" ; $ str2 = \" geek \" ; $ k = 5 ; if ( isConvertible ( $ str1 , $ str2 , $ k ) ) echo \" Yes \" . \" STRNEWLINE \" ; else echo \" No \" . \" STRNEWLINE \" ; ? >"}
{"text":"PHP Program to find maximum lowercase alphabets present between two uppercase alphabets","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"Function which computes the maximum number of distinct lowercase alphabets between two uppercase alphabets","code":"function maxLower ( $ str ) { global $ MAX_CHAR ; $ n = strlen ( $ str ) ;"}
{"text":"Ignoring lowercase characters in the beginning .","code":"$ i = 0 ; for ( ; $ i < $ n ; $ i ++ ) { if ( $ str [ $ i ] >= ' A ' && $ str [ $ i ] <= ' Z ' ) { $ i ++ ; break ; } }"}
{"text":"We start from next of first capital letter and traverse through remaining character .","code":"$ maxCount = 0 ; $ count = array_fill ( 0 , $ MAX_CHAR , NULL ) ; for ( ; $ i < $ n ; $ i ++ ) {"}
{"text":"If character is in uppercase ,","code":"if ( $ str [ $ i ] >= ' A ' && $ str [ $ i ] <= ' Z ' ) {"}
{"text":"Count all distinct lower case characters","code":"$ currCount = 0 ; for ( $ j = 0 ; $ j < $ MAX_CHAR ; $ j ++ ) if ( $ count [ $ j ] > 0 ) $ currCount ++ ;"}
{"text":"Update maximum count","code":"$ maxCount = max ( $ maxCount , $ currCount ) ;"}
{"text":"Reset count array","code":"$ count = array_fill ( 0 , $ MAX_CHAR , NULL ) ; }"}
{"text":"If character is in lowercase","code":"if ( $ str [ $ i ] >= ' a ' && $ str [ $ i ] <= ' z ' ) $ count [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ; } return $ maxCount ; }"}
{"text":"Driver Code","code":"$ str = \" zACaAbbaazzC \" ; echo maxLower ( $ str ) ; ? >"}
{"text":"Function to find string which has first character of each word .","code":"< ? php function first ( $ str ) { for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) if ( ctype_upper ( $ str [ $ i ] ) ) { return $ str [ $ i ] ; } return 0 ; }"}
{"text":"Driver code","code":"$ str = \" geeksforGeeKS \" ; $ res = first ( $ str ) ; if ( ord ( $ res ) == ord ( 0 ) ) echo \" No \u2581 uppercase \u2581 letter \" ; else echo $ res . \" STRNEWLINE \" ; ? >"}
{"text":"generate all substring in arr [ 0. . n - 1 ]","code":"< ? php function evenDecimalValue ( $ str , $ n ) {"}
{"text":"store the count","code":"$ result = 0 ;"}
{"text":"Pick starting point","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Pick ending point","code":"for ( $ j = $ i ; $ j < $ n ; $ j ++ ) { $ decimalValue = 0 ; $ powerOf2 = 1 ;"}
{"text":"substring between current starting and ending points","code":"for ( $ k = $ i ; $ k <= $ j ; $ k ++ ) { $ decimalValue += ( ( $ str [ $ k ] - '0' ) * $ powerOf2 ) ;"}
{"text":"increment power of 2 by one","code":"$ powerOf2 *= 2 ; } if ( $ decimalValue % 2 == 0 ) $ result ++ ; } } return $ result ; }"}
{"text":"Driver Code","code":"$ str = \"10010\" ; $ n = 5 ; echo evenDecimalValue ( $ str , $ n ) ; ? >"}
{"text":"Function performing calculations","code":"< ? php function solve ( $ s ) { $ l = strlen ( $ s ) ; $ x = $ l \/ 2 ; $ y = $ l ;"}
{"text":"Calculating the two halves of string s as first and second . The final string p","code":"$ p = \" \" ; while ( $ x > 0 && $ y > $ l \/ 2 ) {"}
{"text":"It joins the characters to final string in reverse order","code":"$ p = $ p . $ s [ $ x - 1 ] ; $ x -- ;"}
{"text":"It joins the characters to final string in reverse order","code":"$ p = $ p . $ s [ $ y - 1 ] ; $ y -- ; } if ( $ y > $ l \/ 2 ) { $ p = $ p . $ s [ $ y - 1 ] ; $ y -- ; } echo $ p ; }"}
{"text":"Driver code","code":"$ s = \" sunshine \" ;"}
{"text":"Calling function","code":"solve ( $ s ) ; ? >"}
{"text":"Function to calculate length","code":"< ? php function recLen ( & $ str , $ i ) {"}
{"text":"if we reach at the end of the string","code":"if ( $ i == strlen ( $ str ) ) return 0 ; else return 1 + recLen ( $ str , $ i + 1 ) ; }"}
{"text":"Driver Code","code":"$ str = \" GeeksforGeeks \" ; echo ( recLen ( $ str , 0 ) ) ; ? >"}
{"text":"Function to check for consonant","code":"< ? php function isConsonant ( $ ch ) {"}
{"text":"To handle lower case","code":"$ ch = strtoupper ( $ ch ) ; return ! ( $ ch == ' A ' $ ch == ' E ' $ ch == ' I ' $ ch == ' O ' $ ch == ' U ' ) && ord ( $ ch ) >= 65 && ord ( $ ch ) <= 90 ; } function totalConsonants ( $ str ) { $ count = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ )"}
{"text":"To check is character is Consonant","code":"if ( isConsonant ( $ str [ $ i ] ) ) ++ $ count ; return $ count ; }"}
{"text":"Driver code","code":"$ str = \" abc \u2581 de \" ; echo totalConsonants ( $ str ) ; return 0 ; ? >"}
{"text":"function to reverse bits of a number","code":"< ? php function reverseBits ( $ n ) { $ rev = 0 ;"}
{"text":"traversing bits of ' n ' from the right","code":"while ( $ n > 0 ) {"}
{"text":"bitwise left shift ' rev ' by 1","code":"$ rev <<= 1 ;"}
{"text":"if current bit is '1'","code":"if ( $ n & 1 == 1 ) $ rev ^= 1 ;"}
{"text":"bitwise right shift ' n ' by 1","code":"$ n >>= 1 ; }"}
{"text":"required number","code":"return $ rev ; }"}
{"text":"function to check whether binary representation of a number is palindrome or not","code":"function isPalindrome ( $ n ) {"}
{"text":"get the number by reversing bits in the binary representation of ' n '","code":"$ rev = reverseBits ( $ n ) ; return ( $ n == $ rev ) ; }"}
{"text":"Driver code","code":"$ n = 9 ; if ( isPalindrome ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; return 0 ; ? >"}
{"text":"prints the arrangement at time = t","code":"< ? php function solve ( $ n , $ t , $ s ) {"}
{"text":"Checking the entire queue for every moment from time = 1 to time = t .","code":"for ( $ i = 0 ; $ i < $ t ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n - 1 ; $ j ++ ) {"}
{"text":"If current index contains ' B ' and next index contains ' G ' then swap","code":"if ( $ s [ $ j ] == ' B ' && $ s [ $ j + 1 ] == ' G ' ) { $ temp = $ s [ $ j ] ; $ s [ $ j ] = $ s [ $ j + 1 ] ; $ s [ $ j + 1 ] = $ temp ; $ j ++ ; } } } echo ( $ s ) ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ t = 2 ; $ s = \" BBGBBG \" ; solve ( $ n , $ t , $ s ) ; ? >"}
{"text":"Return sum of two number represented by the arrays . Size of a [ ] is greater than b [ ] . It is made sure be the wrapper function","code":"< ? php function calSumUtil ( $ a , $ b , $ n , $ m ) {"}
{"text":"array to store sum .","code":"$ sum = array ( ) ; $ i = $ n - 1 ; $ j = $ m - 1 ; $ k = $ n - 1 ; $ carry = 0 ; $ s = 0 ;"}
{"text":"Until we reach beginning of array . we are comparing only for second array because we have already compare the size of array in wrapper function .","code":"while ( $ j >= 0 ) {"}
{"text":"find sum of corresponding element of both array .","code":"$ s = $ a [ $ i ] + $ b [ $ j ] + $ carry ; $ sum [ $ k ] = ( $ s % 10 ) ;"}
{"text":"Finding carry for next sum .","code":"$ carry = $ s \/ 10 ; $ k -- ; $ i -- ; $ j -- ; }"}
{"text":"If second array size is less than the first array size .","code":"while ( $ i >= 0 ) {"}
{"text":"Add carry to first array elements .","code":"$ s = $ a [ $ i ] + $ carry ; $ sum [ $ k ] = ( $ s % 10 ) ; $ carry = $ s \/ 10 ; $ i -- ; $ k -- ; } $ ans = 0 ;"}
{"text":"If there is carry on adding 0 index elements . append 1 to total sum .","code":"if ( $ carry ) $ ans = 10 ;"}
{"text":"Converting array into number .","code":"for ( $ i = 0 ; $ i <= $ n - 1 ; $ i ++ ) { $ ans += $ sum [ $ i ] ; $ ans *= 10 ; } return $ ans \/ 10 ; }"}
{"text":"Wrapper Function","code":"function calSum ( $ a , $ b , $ n , $ m ) {"}
{"text":"Making first array which have greater number of element","code":"if ( $ n >= $ m ) return calSumUtil ( $ a , $ b , $ n , $ m ) ; else return calSumUtil ( $ b , $ a , $ m , $ n ) ; }"}
{"text":"Driven Code","code":"$ a = array ( 9 , 3 , 9 ) ; $ b = array ( 6 , 1 ) ; $ n = count ( $ a ) ; $ m = count ( $ b ) ; echo calSum ( $ a , $ b , $ n , $ m ) ; ? >"}
{"text":"PHP implementation to find the length of the longest common anagram subsequence","code":"< ? php $ SIZE = 26 ;"}
{"text":"function to find the length of the longest common anagram subsequence","code":"function longCommomAnagramSubseq ( $ str1 , $ str2 , $ n1 , $ n2 ) { global $ SIZE ;"}
{"text":"hash tables for storing frequencies of each character","code":"$ freq1 = array ( ) ; $ freq2 = array ( ) ; for ( $ i = 0 ; $ i < $ SIZE ; $ i ++ ) { $ freq1 [ $ i ] = 0 ; $ freq2 [ $ i ] = 0 ; } $ len = 0 ;"}
{"text":"calculate frequency of each character of ' str1'","code":"for ( $ i = 0 ; $ i < $ n1 ; $ i ++ ) $ freq1 [ ord ( $ str1 [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"calculate frequency of each character of ' str2'","code":"for ( $ i = 0 ; $ i < $ n2 ; $ i ++ ) $ freq2 [ ord ( $ str2 [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"for each character add its minimum frequency out of the two strings in ' len '","code":"for ( $ i = 0 ; $ i < $ SIZE ; $ i ++ ) { $ len += min ( $ freq1 [ $ i ] , $ freq2 [ $ i ] ) ; }"}
{"text":"required length","code":"return $ len ; }"}
{"text":"Driver Code","code":"$ str1 = \" abdacp \" ; $ str2 = \" ckamb \" ; $ n1 = strlen ( $ str1 ) ; $ n2 = strlen ( $ str2 ) ; echo ( \" Length \u2581 = \u2581 \" . longCommomAnagramSubseq ( $ str1 , $ str2 , $ n1 , $ n2 ) ) ; ? >"}
{"text":"Return if given string contain panalphabetic window .","code":"< ? php function isPanalphabeticWindow ( $ s , $ n ) { $ ch = ' a ' ;"}
{"text":"traversing the string","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if character of string is equal to ch , increment ch .","code":"if ( $ s [ $ i ] == $ ch ) $ ch ++ ;"}
{"text":"if all characters are found , return true .","code":"if ( $ ch == ' z ' ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ s = \" abujm \u2581 zvcd \u2581 acefc \u2581 deghf \u2581 gijkle \" . \" \u2581 m \u2581 n \u2581 o \u2581 p \u2581 pafqrstuvwxyzfap \" ; $ n = strlen ( $ s ) ; if ( isPanalphabeticWindow ( $ s , $ n ) ) echo ( \" YES \" ) ; else echo ( \" NO \" ) ; ? >"}
{"text":"PHP Program to print Characters at Prime index in a given String","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner case","code":"if ( $ n <= 1 ) return false ;"}
{"text":"Check from 2 to n - 1","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) if ( $ n % $ i == 0 ) return false ; return true ; }"}
{"text":"Function to print character at prime index","code":"function prime_index ( $ input ) { $ n = strlen ( $ input ) ;"}
{"text":"Loop to check if index prime or not","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) if ( isPrime ( $ i ) ) echo $ input [ $ i - 1 ] ; }"}
{"text":"Driver Code","code":"$ input = \" GeeksforGeeks \" ; prime_index ( $ input ) ; ? >"}
{"text":"PHP Program to check whether the given string is Heterogram or not .","code":"< ? php function isHeterogram ( $ s , $ n ) { $ hash = array ( ) ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) $ hash [ $ i ] = 0 ;"}
{"text":"traversing the string .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"ignore the space","code":"if ( $ s [ $ i ] != ' \u2581 ' ) {"}
{"text":"if already encountered","code":"if ( $ hash [ ord ( $ s [ $ i ] ) - ord ( ' a ' ) ] == 0 ) $ hash [ ord ( $ s [ $ i ] ) - ord ( ' a ' ) ] = 1 ;"}
{"text":"else return false .","code":"else return false ; } } return true ; }"}
{"text":"Driven Code","code":"$ s = \" the \u2581 big \u2581 dwarf \u2581 only \u2581 jumps \" ; $ n = strlen ( $ s ) ; if ( isHeterogram ( $ s , $ n ) ) echo ( \" YES \" ) ; else echo ( \" NO \" ) ; ? >"}
{"text":"Function to compute the ASCII value of each character one by one","code":"< ? php function ASCIISentence ( $ str ) { for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) echo ord ( $ str [ $ i ] ) ; }"}
{"text":"Driver code","code":"$ str = \" GeeksforGeeks \" ; echo \" ASCII \u2581 Sentence : \" . \" STRNEWLINE \" ; ASCIISentence ( $ str ) ; ? >"}
{"text":"Function to replace spaces and convert into snake case","code":"< ? php function convert ( $ str ) { $ n = strlen ( $ str ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Converting space to underscor","code":"if ( $ str [ $ i ] == ' \u2581 ' ) $ str [ $ i ] = ' _ ' ; else"}
{"text":"If not space , convert into lower character","code":"$ str [ $ i ] = strtolower ( $ str [ $ i ] ) ; } echo $ str ; }"}
{"text":"Driver Code","code":"$ str = \" I \u2581 got \u2581 intern \u2581 at \u2581 geeksforgeeks \" ;"}
{"text":"Calling function","code":"convert ( $ str ) ; ? >"}
{"text":"PHP program to replace c1 with c2 and c2 with c1","code":"< ? php function replace ( $ s , $ c1 , $ c2 ) { $ l = strlen ( $ s ) ;"}
{"text":"loop to traverse in the string","code":"for ( $ i = 0 ; $ i < $ l ; $ i ++ ) {"}
{"text":"check for c1 and replace","code":"if ( $ s [ $ i ] == $ c1 ) $ s [ $ i ] = $ c2 ;"}
{"text":"check for c2 and replace","code":"else if ( $ s [ $ i ] == $ c2 ) $ s [ $ i ] = $ c1 ; } return $ s ; }"}
{"text":"Driver Code","code":"$ s = \" grrksfoegrrks \" ; $ c1 = ' e ' ; $ c2 = ' r ' ; echo replace ( $ s , $ c1 , $ c2 ) ; ? >"}
{"text":"function for printing palindrome","code":"< ? php function constructPalin ( $ str , $ len ) { $ i = 0 ; $ j = $ len - 1 ;"}
{"text":"iterate till i < j","code":"for ( ; $ i < $ j ; $ i ++ , $ j -- ) {"}
{"text":"continue if str [ i ] == str [ j ]","code":"if ( $ str [ $ i ] == $ str [ $ j ] && $ str [ $ i ] != ' * ' ) continue ;"}
{"text":"update str [ i ] = str [ j ] = ' a ' if both are ' * '","code":"else if ( $ str [ $ i ] == $ str [ $ j ] && $ str [ $ i ] == ' * ' ) { $ str [ $ i ] = ' a ' ; $ str [ $ j ] = ' a ' ; continue ; }"}
{"text":"update str [ i ] = str [ j ] if only str [ i ] = ' * '","code":"else if ( $ str [ $ i ] == ' * ' ) { $ str [ $ i ] = $ str [ $ j ] ; continue ; }"}
{"text":"update str [ j ] = str [ i ] if only str [ j ] = ' * '","code":"else if ( $ str [ $ j ] == ' * ' ) { $ str [ $ j ] = $ str [ $ i ] ; continue ; }"}
{"text":"else print not possible and return","code":"echo \" Not \u2581 Possible \" ; return \" \" ; } return $ str ; }"}
{"text":"Driver Code","code":"$ str = \" bca * xc * * b \" ; $ len = strlen ( $ str ) ; echo constructPalin ( $ str , $ len ) ; ? >"}
{"text":"Function to make a cross in the matrix","code":"< ? php function carveCross ( $ str ) { $ n = strlen ( $ str ) ; if ( $ n % 2 == 0 ) {"}
{"text":"As , it is not possible to make the cross exactly in the middle of the matrix with an even length string .","code":"echo ( \" Not \u2581 possible . \u2581 Please \u2581 enter \u2581 \" ) ; echo ( \" odd \u2581 length \u2581 string . STRNEWLINE \" ) ; } else {"}
{"text":"declaring a 2D array i . e a matrix","code":"$ arr = array ( ) ; $ m = $ n \/ 2 ;"}
{"text":"Now , we will fill all the elements of the array with ' X '","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ arr [ $ i ] [ $ j ] = ' X ' ; } }"}
{"text":"Now , we will place the characters of the string in the matrix , such that a cross is formed in it .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"here the characters of the string will be added in the middle column of our array .","code":"$ arr [ $ i ] [ $ m ] = $ str [ $ i ] ; } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"here the characters of the string will be added in the middle row of our array .","code":"$ arr [ $ m ] [ $ i ] = $ str [ $ i ] ; }"}
{"text":"Now finally , we will print the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { echo ( $ arr [ $ i ] [ $ j ] . \" \" ) ; } echo ( \" STRNEWLINE \" ) ; } } }"}
{"text":"Driver Code","code":"$ str = \" PICTURE \" ; carveCross ( $ str ) ; ? >"}
{"text":"Function to return remainder","code":"< ? php function remainder ( $ str ) {"}
{"text":"len is variable to store the length of number string .","code":"$ len = strlen ( $ str ) ; $ num ; $ rem = 0 ;"}
{"text":"loop that find remainder","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ num = $ rem * 10 + ( $ str [ $ i ] - '0' ) ; $ rem = $ num % 11 ; } return $ rem ; }"}
{"text":"Driver code","code":"$ str = \"3435346456547566345436457867978\" ; echo ( remainder ( $ str ) ) ; ? >"}
{"text":"PHP program to generate permutations with only one swap allowed .","code":"< ? php function findPermutations ( $ str , $ index , $ n ) { if ( $ index >= $ n || ( $ index + 1 ) >= $ n ) { echo $ str , \" STRNEWLINE \" ; return ; }"}
{"text":"don 't swap the current position","code":"findPermutations ( $ str , $ index + 1 , $ n ) ;"}
{"text":"Swap with the next character and revert the changes . As explained above , swapping with previous is is not needed as it anyways happens for next character .","code":"list ( $ str [ $ index ] , $ str [ $ index + 1 ] ) = array ( $ str [ $ index + 1 ] , $ str [ $ index ] ) ; findPermutations ( $ str , $ index + 2 , $ n ) ; list ( $ str [ $ index ] , $ str [ $ index + 1 ] ) = array ( $ str [ $ index + 1 ] , $ str [ $ index ] ) ; }"}
{"text":"Driver code","code":"$ str = \"12345\" ; $ n = strlen ( $ str ) ; findPermutations ( $ str , 0 , $ n ) ; ? >"}
{"text":"PHP program to check if given encoding represents a single string","code":"< ? php function isUnique ( $ a , $ n , $ k ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ a [ $ i ] ; $ sum += $ n - 1 ;"}
{"text":"Return true if sum becomes k","code":"return ( $ sum == $ k ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 3 , 3 , 3 ) ; $ n = count ( $ a ) ; $ k = 12 ; if ( isUnique ( $ a , $ n , $ k ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to check if the string is palindrome","code":"< ? php function isPalindrome ( $ s , $ i , $ j ) { $ p = $ j ; for ( $ k = $ i ; $ k <= $ p ; $ k ++ ) { if ( $ s [ $ k ] != $ s [ $ p ] ) return false ; $ p -- ; } return true ; } function countWays ( $ s ) {"}
{"text":"to know the length of string","code":"$ n = strlen ( $ s ) ; $ count = 0 ;"}
{"text":"if the given string is a palindrome ( Case - I )","code":"if ( isPalindrome ( $ s , 0 , $ n - 1 ) ) {"}
{"text":"Sub - case - III )","code":"for ( $ i = $ n \/ 2 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] == $ s [ $ i + 1 ] ) $ count ++ ; else break ; }"}
{"text":"if the length is even","code":"if ( $ n % 2 == 0 ) { $ count ++ ;"}
{"text":"sub - case - I","code":"$ count = 2 * $ count + 1 ; } else"}
{"text":"sub - case - II","code":"$ count = 2 * $ count + 2 ; } else { for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ ) {"}
{"text":"insertion point","code":"if ( $ s [ $ i ] != $ s [ $ n - 1 - $ i ] ) { $ j = $ n - 1 - $ i ;"}
{"text":"Case - I","code":"if ( isPalindrome ( $ s , $ i , $ n - 2 - $ i ) ) { for ( $ k = $ i - 1 ; $ k >= 0 ; $ k -- ) { if ( $ s [ $ k ] != $ s [ $ j ] ) break ; $ count ++ ; } $ count ++ ; }"}
{"text":"Case - II","code":"if ( isPalindrome ( $ s , $ i + 1 , $ n - 1 - $ i ) ) { for ( $ k = $ n - $ i ; $ k < $ n ; $ k ++ ) { if ( $ s [ $ k ] != $ s [ $ i ] ) break ; $ count ++ ; } $ count ++ ; } break ; } } } return $ count ; }"}
{"text":"Driver code","code":"$ s = \" abca \" ; echo countWays ( $ s ) ; ? >"}
{"text":"method returns total number of substring having K ones","code":"< ? php function countOfSubstringWithKOnes ( $ s , $ K ) { $ N = strlen ( $ s ) ; $ res = 0 ; $ countOfOne = 0 ; $ freq = array ( ) ; for ( $ i = 0 ; $ i <= $ N ; $ i ++ ) $ freq [ $ i ] = 0 ;"}
{"text":"initialize index having zero sum as 1","code":"$ freq [ 0 ] = 1 ;"}
{"text":"loop over binary characters of string","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"update countOfOne variable with value of ith character","code":"$ countOfOne += ( $ s [ $ i ] - '0' ) ;"}
{"text":"if value reaches more than K , then update result","code":"if ( $ countOfOne >= $ K ) {"}
{"text":"add frequency of indices , having sum ( current sum - K ) , to the result","code":"$ res = $ res + $ freq [ $ countOfOne - $ K ] ; }"}
{"text":"update frequency of one 's count","code":"$ freq [ $ countOfOne ] ++ ; } return $ res ; }"}
{"text":"Driver code","code":"$ s = \"10010\" ; $ K = 1 ; echo countOfSubstringWithKOnes ( $ s , $ K ) , \" \" ; ? >"}
{"text":"function to reverse the digits in the range i to j in ' num '","code":"< ? php function reverse ( & $ num , $ i , $ j ) { while ( $ i < $ j ) { $ t = $ num [ $ i ] ; $ num [ $ i ] = $ num [ $ j ] ; $ num [ $ j ] = $ t ; $ i ++ ; $ j -- ; } }"}
{"text":"function to find next higher palindromic number using the same set of digits","code":"function nextPalin ( $ num , $ n ) {"}
{"text":"if length of number is less than '3' then no higher palindromic number can be formed","code":"if ( $ n <= 3 ) { echo \" Not \u2581 Possible \" ; return ; }"}
{"text":"find the index of last digit in the 1 st half of ' num '","code":"$ mid = ( $ n \/ 2 ) - 1 ; $ i = $ mid - 1 ; $ j ;"}
{"text":"Start from the ( mid - 1 ) th digit and find the first digit that is smaller than the digit next to it .","code":"for ( ; $ i >= 0 ; $ i -- ) if ( $ num [ $ i ] < $ num [ $ i + 1 ] ) break ;"}
{"text":"If no such digit is found , then all digits are in descending order which means there cannot be a greater palindromic number with same set of digits","code":"if ( $ i < 0 ) { echo \" Not \u2581 Possible \" ; return ; }"}
{"text":"Find the smallest digit on right side of ith digit which is greater than num [ i ] up to index ' mid '","code":"$ smallest = $ i + 1 ; $ j = 0 ; for ( $ j = $ i + 2 ; $ j <= $ mid ; $ j ++ ) if ( $ num [ $ j ] > $ num [ $ i ] && $ num [ $ j ] < $ num [ $ smallest ] ) $ smallest = $ j ;"}
{"text":"swap num [ i ] with num [ smallest ]","code":"$ t = $ num [ $ i ] ; $ num [ $ i ] = $ num [ $ smallest ] ; $ num [ $ smallest ] = $ t ;"}
{"text":"as the number is a palindrome , the same swap of digits should be performed in the 2 nd half of ' num '","code":"$ t = $ num [ $ n - $ i - 1 ] ; $ num [ $ n - $ i - 1 ] = $ num [ $ n - $ smallest - 1 ] ; $ num [ $ n - $ smallest - 1 ] = $ t ;"}
{"text":"reverse digits in the range ( i + 1 ) to mid","code":"reverse ( $ num , $ i + 1 , $ mid ) ;"}
{"text":"if n is even , then reverse digits in the range mid + 1 to n - i - 2","code":"if ( $ n % 2 == 0 ) reverse ( $ num , $ mid + 1 , $ n - $ i - 2 ) ;"}
{"text":"else if n is odd , then reverse digits in the range mid + 2 to n - i - 2","code":"else reverse ( $ num , $ mid + 2 , $ n - $ i - 2 ) ;"}
{"text":"required next higher palindromic number","code":"echo \" Next \u2581 Palindrome : \u2581 \" . $ num ; }"}
{"text":"Driver Code","code":"$ num = \"4697557964\" ; $ n = strlen ( $ num ) ; nextPalin ( $ num , $ n ) ; ? >"}
{"text":"function to generate n digit numbers","code":"< ? php function printRec ( $ number , $ extraOnes , $ remainingPlaces ) {"}
{"text":"if number generated","code":"if ( 0 == $ remainingPlaces ) { echo ( $ number . \" \" ) ; return ; }"}
{"text":"Append 1 at the current number and reduce the remaining places by one","code":"printRec ( $ number . \"1\" , $ extraOnes + 1 , $ remainingPlaces - 1 ) ;"}
{"text":"If more ones than zeros , append 0 to the current number and reduce the remaining places by one","code":"if ( 0 < $ extraOnes ) printRec ( $ number . \"0\" , $ extraOnes - 1 , $ remainingPlaces - 1 ) ; } function printNums ( $ n ) { $ str = \" \" ; printRec ( $ str , 0 , $ n ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ;"}
{"text":"Function call","code":"printNums ( $ n ) ;"}
{"text":"function to find the stem ( longest common substring ) from the string array","code":"< ? php function findstem ( $ arr ) {"}
{"text":"Determine size of the array","code":"$ n = count ( $ arr ) ;"}
{"text":"Take first word from array as reference","code":"$ s = $ arr [ 0 ] ; $ len = strlen ( $ s ) ; $ res = \" \" ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j <= $ len ; $ j ++ ) {"}
{"text":"generating all possible substrings of our reference string arr [ 0 ] i . e s","code":"$ stem = substr ( $ s , $ i , $ j - $ i ) ; $ k = 1 ; for ( $ k = 1 ; $ k < $ n ; $ k ++ )"}
{"text":"Check if the generated stem is common to all words","code":"if ( ! strpos ( $ arr [ $ k ] , $ stem ) ) break ;"}
{"text":"If current substring is present in all strings and its length is greater than current result","code":"if ( $ k <= $ n && strlen ( $ res ) < strlen ( $ stem ) ) $ res = $ stem ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( \" grace \" , \" graceful \" , \" disgraceful \" , \" gracefully \" ) ;"}
{"text":"Function call","code":"$ stems = findstem ( $ arr ) ; print ( $ stems ) ; ? >"}
{"text":"function to find the next higher number using atmost one swap operation","code":"< ? php function nxtHighUsingAtMostOneSwap ( $ num ) { $ l = strlen ( $ num ) ;"}
{"text":"to store the index of the largest digit encountered so far from the right","code":"$ posRMax = $ l - 1 ;"}
{"text":"to store the index of rightmost digit which has a digit greater to it on its right side","code":"$ index = -1 ;"}
{"text":"finding the ' index ' of rightmost digit which has a digit greater to it on its right side","code":"for ( $ i = $ l - 2 ; $ i >= 0 ; $ i -- ) { if ( $ num [ $ i ] >= $ num [ $ posRMax ] ) $ posRMax = $ i ;"}
{"text":"required digit found , store its ' index ' and break","code":"else { $ index = $ i ; break ; } }"}
{"text":"if no such digit is found which has a larger digit on its right side","code":"if ( $ index == -1 ) return \" Not \u2581 Possible \" ;"}
{"text":"to store the index of the smallest digit greater than the digit at ' index ' and right to it","code":"$ greatSmallDgt = -1 ;"}
{"text":"finding the index of the smallest digit greater than the digit at ' index ' and right to it","code":"for ( $ i = $ l - 1 ; $ i > $ index ; $ i -- ) { if ( $ num [ $ i ] > $ num [ $ index ] ) { if ( $ greatSmallDgt == -1 ) $ greatSmallDgt = $ i ; else if ( $ num [ $ i ] <= $ num [ $ greatSmallDgt ] ) $ greatSmallDgt = $ i ; } }"}
{"text":"swapping the digits","code":"$ temp = $ num [ $ index ] ; $ num [ $ index ] = $ num [ $ greatSmallDgt ] ; $ num [ $ greatSmallDgt ] = $ temp ;"}
{"text":"required number","code":"return $ num ; }"}
{"text":"Driver Code","code":"$ num = \"218765\" ; echo \" Original \u2581 number : \u2581 \" . $ num . \" STRNEWLINE \" ; echo \" Next \u2581 higher \u2581 number : \u2581 \" . nxtHighUsingAtMostOneSwap ( $ num ) ; ? >"}
{"text":"PHP program to find the longest substring of vowels .","code":"< ? php function isVowel ( $ c ) { return ( $ c == ' a ' $ c == ' e ' $ c == ' i ' $ c == ' o ' $ c == ' u ' ) ; } function longestVowel ( $ s ) { $ count = 0 ; $ res = 0 ; for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"Increment current count if s [ i ] is vowel","code":"if ( isVowel ( $ s [ $ i ] ) ) $ count ++ ; else {"}
{"text":"check previous value is greater then or not","code":"$ res = max ( $ res , $ count ) ; $ count = 0 ; } } return max ( $ res , $ count ) ; }"}
{"text":"Driver code","code":"$ s = \" theeare \" ; echo longestVowel ( $ s ) ; ? >"}
{"text":"PHP program to count number of substrings with counts of distinct characters as k .","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"Returns true if all values in freq [ ] are either 0 or k .","code":"function check ( & $ freq , $ k ) { global $ MAX_CHAR ; for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) if ( $ freq [ $ i ] && $ freq [ $ i ] != $ k ) return false ; return true ; }"}
{"text":"Returns count of substrings where frequency of every present character is k","code":"function substrings ( $ s , $ k ) { global $ MAX_CHAR ;"}
{"text":"Pick a starting point","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"Initialize all frequencies as 0 for this starting point","code":"$ freq = array_fill ( 0 , $ MAX_CHAR , NULL ) ;"}
{"text":"One by one pick ending points","code":"for ( $ j = $ i ; $ j < strlen ( $ s ) ; $ j ++ ) {"}
{"text":"Increment frequency of current char","code":"$ index = ord ( $ s [ $ j ] ) - ord ( ' a ' ) ; $ freq [ $ index ] ++ ;"}
{"text":"If frequency becomes more than k , we can 't have more substrings  starting with i","code":"if ( $ freq [ $ index ] > $ k ) break ;"}
{"text":"If frequency becomes k , then check other frequencies as well .","code":"else if ( $ freq [ $ index ] == $ k && check ( $ freq , $ k ) == true ) $ res ++ ; } } return $ res ; }"}
{"text":"Driver code","code":"$ s = \" aabbcc \" ; $ k = 2 ; echo substrings ( $ s , $ k ) . \" STRNEWLINE \" ; $ s = \" aabbc \" ; $ k = 2 ; echo substrings ( $ s , $ k ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to count substrings with same first and last characters","code":"< ? php function countSubstrs ( $ str , $ i , $ j , $ n ) {"}
{"text":"base cases","code":"if ( $ n == 1 ) return 1 ; if ( $ n <= 0 ) return 0 ; $ res = countSubstrs ( $ str , $ i + 1 , $ j , $ n - 1 ) + countSubstrs ( $ str , $ i , $ j - 1 , $ n - 1 ) - countSubstrs ( $ str , $ i + 1 , $ j - 1 , $ n - 2 ) ; if ( $ str [ $ i ] == $ str [ $ j ] ) $ res ++ ; return $ res ; }"}
{"text":"Driver Code","code":"$ str = \" abcab \" ; $ n = strlen ( $ str ) ; echo ( countSubstrs ( $ str , 0 , $ n - 1 , $ n ) ) ; ? >"}
{"text":"Counts the no of manipulations required","code":"< ? php function countManipulations ( $ s1 , $ s2 ) { $ count = 0 ;"}
{"text":"store the count of character","code":"$ char_count = array_fill ( 0 , 26 , 0 ) ;"}
{"text":"iterate though the first String and update count","code":"for ( $ i = 0 ; $ i < strlen ( $ s1 ) ; $ i ++ ) $ char_count [ ord ( $ s1 [ $ i ] ) - ord ( ' a ' ) ] += 1 ;"}
{"text":"iterate through the second string update char_count . if character is not found in char_count then increase count","code":"for ( $ i = 0 ; $ i < strlen ( $ s2 ) ; $ i ++ ) { $ char_count [ ord ( $ s2 [ $ i ] ) - ord ( ' a ' ) ] -= 1 ; } for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ char_count [ i ] != 0 ) { $ count += abs ( $ char_count [ i ] ) ; } } return $ count ; }"}
{"text":"Driver code","code":"$ s1 = \" ddcf \" ; $ s2 = \" cedk \" ; echo countManipulations ( $ s1 , $ s2 ) ; ? >"}
{"text":"Given two strings , check which string makes palindrome first .","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"returns winner of two strings","code":"function stringPalindrome ( $ A , $ B ) { global $ MAX_CHAR ;"}
{"text":"Count frequencies of characters in both given strings","code":"$ countA = array_fill ( 0 , $ MAX_CHAR , 0 ) ; $ countB = array_fill ( 0 , $ MAX_CHAR , 0 ) ; $ l1 = strlen ( $ A ) ; $ l2 = strlen ( $ B ) ; for ( $ i = 0 ; $ i < $ l1 ; $ i ++ ) $ countA [ ord ( $ A [ $ i ] ) - ord ( ' a ' ) ] ++ ; for ( $ i = 0 ; $ i < $ l2 ; $ i ++ ) $ countB [ ord ( $ B [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"Check if there is a character that appears more than once in A and does not appear in B","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) if ( ( $ countA [ $ i ] > 1 && $ countB [ $ i ] == 0 ) ) return ' A ' ; return ' B ' ; }"}
{"text":"Driver Code","code":"$ a = \" abcdea \" ; $ b = \" bcdesg \" ; echo stringPalindrome ( $ a , $ b ) ; ? >"}
{"text":"PHP program to find number of balancing points in string","code":"< ? php $ MAX_CHAR = 256 ;"}
{"text":"function to return number of balancing points","code":"function countBalance ( $ str ) { global $ MAX_CHAR ;"}
{"text":"hash array for storing hash of string initialized by 0 being global","code":"$ leftVisited = array_fill ( 0 , $ MAX_CHAR , NULL ) ; $ rightVisited = array_fill ( 0 , $ MAX_CHAR , NULL ) ;"}
{"text":"process string initially for rightVisited","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ rightVisited [ ord ( $ str [ $ i ] ) ] ++ ;"}
{"text":"check for balancing points","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"for every position inc left hash & dec rightVisited","code":"$ leftVisited [ ord ( $ str [ $ i ] ) ] ++ ; $ rightVisited [ ord ( $ str [ $ i ] ) ] -- ;"}
{"text":"check whether both hash have same character or not","code":"for ( $ j = 0 ; $ j < $ MAX_CHAR ; $ j ++ ) {"}
{"text":"Either both leftVisited [ j ] and rightVisited [ j ] should have none zero value or both should have zero value","code":"if ( ( $ leftVisited [ $ j ] == 0 && $ rightVisited [ $ j ] != 0 ) || ( $ leftVisited [ $ j ] != 0 && $ rightVisited [ $ j ] == 0 ) ) break ; }"}
{"text":"if both have same character increment count","code":"if ( $ j == $ MAX_CHAR ) $ res ++ ; } return $ res ; }"}
{"text":"Driver Code","code":"$ str = \" abaababa \" ; echo countBalance ( $ str ) ; ? >"}
{"text":"To find min number of flips in binary string","code":"< ? php function findFlips ( $ str , $ n ) { $ last = ' \u2581 ' ; $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If last character is not equal to str [ i ] increase res","code":"if ( $ last != $ str [ $ i ] ) $ res ++ ; $ last = $ str [ $ i ] ; }"}
{"text":"To return min flips","code":"return intval ( $ res \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ str = \"00011110001110\" ; $ n = strlen ( $ str ) ; echo findFlips ( $ str , $ n ) ; ? >"}
{"text":"function to find the maximum length of substring having character ch","code":"< ? php function findLen ( $ A , $ n , $ k , $ ch ) { $ maxlen = 1 ; $ cnt = 0 ; $ l = 0 ; $ r = 0 ;"}
{"text":"traverse the whole string","code":"while ( $ r < $ n ) {"}
{"text":"if character is not same as ch increase count","code":"if ( $ A [ $ r ] != $ ch ) ++ $ cnt ;"}
{"text":"While count > k traverse the string again until count becomes less than k and decrease the count when characters are not same","code":"while ( $ cnt > $ k ) { if ( $ A [ $ l ] != $ ch ) -- $ cnt ; ++ $ l ; }"}
{"text":"length of substring will be rightIndex - leftIndex + 1. Compare this with the maximum length and return maximum length","code":"$ maxlen = max ( $ maxlen , $ r - $ l + 1 ) ; ++ $ r ; } return $ maxlen ; }"}
{"text":"function which returns maximum length of substring","code":"function answer ( $ A , $ n , $ k ) { $ maxlen = 1 ; for ( $ i = 0 ; $ i < 26 ; ++ $ i ) { $ maxlen = max ( $ maxlen , findLen ( $ A , $ n , $ k , $ i + ' A ' ) ) ; $ maxlen = max ( $ maxlen , findLen ( $ A , $ n , $ k , $ i + ' a ' ) ) ; } return $ maxlen ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 2 ; $ A = \" ABABA \" ; echo \" Maximum length = \" \u2581 . \u2581 answer ( $ A , \u2581 $ n , \u2581 $ k ) \u2581 . \u2581 \" \" $ n = 6 ; $ k = 4 ; $ B = \" HHHHHH \" ; echo \" Maximum length = \" \u2581 . \u2581 answer ( $ B , \u2581 $ n , \u2581 $ k ) \u2581 . \u2581 \" \" ? >"}
{"text":"PHP program to check if it is possible to split string or not","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"function to check if we can split string or not","code":"function checkCorrectOrNot ( $ s ) { global $ MAX_CHAR ;"}
{"text":"Counter array initialized with 0","code":"$ count1 = array_fill ( 0 , $ MAX_CHAR , NULL ) ; $ count2 = array_fill ( 0 , $ MAX_CHAR , NULL ) ;"}
{"text":"Length of the string","code":"$ n = strlen ( $ s ) ; if ( $ n == 1 ) return true ;"}
{"text":"traverse till the middle element is reached","code":"for ( $ i = 0 , $ j = $ n - 1 ; $ i < $ j ; $ i ++ , $ j -- ) {"}
{"text":"First half","code":"$ count1 [ $ s [ $ i ] - ' a ' ] ++ ;"}
{"text":"Second half","code":"$ count2 [ $ s [ $ j ] - ' a ' ] ++ ; }"}
{"text":"Checking if values are different set flag to 1","code":"for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) if ( $ count1 [ $ i ] != $ count2 [ $ i ] ) return false ; return true ; }"}
{"text":"String to be checked","code":"$ s = \" abab \" ; if ( checkCorrectOrNot ( $ s ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"Utility function to find maximum string","code":"< ? php function maximumNum ( $ curr_num , $ res ) { $ len1 = strlen ( $ curr_num ) ; $ len2 = strlen ( $ res ) ;"}
{"text":"If both having equal lengths","code":"if ( $ len1 == $ len2 ) {"}
{"text":"Reach first unmatched character \/ value","code":"$ i = 0 ; while ( $ curr_num [ $ i ] == $ res [ $ i ] ) $ i ++ ;"}
{"text":"Return string with maximum value","code":"if ( $ curr_num [ $ i ] < $ res [ $ i ] ) return $ res ; else return $ curr_num ; }"}
{"text":"If different lengths return string with maximum length","code":"return $ len1 < $ len2 ? $ res : $ curr_num ; }"}
{"text":"Function to extract the maximum value","code":"function extractMaximum ( $ str ) { $ n = strlen ( $ str ) ; $ curr_num = \" \" ; $ res = \" \" ;"}
{"text":"Start traversing the string","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Ignore leading zeroes","code":"while ( $ i < $ n && $ str [ $ i ] == '0' ) $ i ++ ;"}
{"text":"Store numeric value into a string","code":"while ( $ i < $ n && $ str [ $ i ] >= '0' && $ str [ $ i ] <= '9' ) { $ curr_num . = $ str [ $ i ] ; $ i ++ ; } if ( $ i == $ n ) break ; if ( strlen ( $ curr_num ) > 0 ) $ i -- ;"}
{"text":"Update maximum string","code":"$ res = maximumNum ( $ curr_num , $ res ) ; $ curr_num = \" \" ; }"}
{"text":"To handle the case if there is only 0 numeric value","code":"if ( strlen ( $ curr_num ) == 0 && strlen ( $ res ) == 0 ) $ res . = '0' ;"}
{"text":"Return maximum string","code":"return maximumNum ( $ curr_num , $ res ) ; }"}
{"text":"Drivers program","code":"$ str = \"100klh564abc365bg \" ; echo extractMaximum ( $ str ) ; ? >"}
{"text":"function to check divisibility","code":"< ? php function isDivisible999 ( $ num ) { $ n = strlen ( $ num ) ; if ( $ n == 0 && $ num [ 0 ] == '0' ) return true ;"}
{"text":"Append required 0 s at the beginning .","code":"if ( $ n % 3 == 1 ) $ num = \"00\" . $ num ; if ( $ n % 3 == 2 ) $ num = \"0\" . $ num ;"}
{"text":"add digits in group of three in gSum","code":"$ gSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i += 3 ) {"}
{"text":"group saves 3 - digit group","code":"$ group = 0 ; $ group += ( ord ( $ num [ $ i ] ) - 48 ) * 100 ; $ group += ( ord ( $ num [ $ i + 1 ] ) - 48 ) * 10 ; $ group += ( ord ( $ num [ $ i + 2 ] ) - 48 ) ; $ gSum += $ group ; }"}
{"text":"calculate result till 3 digit sum","code":"if ( $ gSum > 1000 ) { $ num = strval ( $ gSum ) ; $ n = strlen ( $ num ) ; $ gSum = isDivisible999 ( $ num ) ; } return ( $ gSum == 999 ) ; }"}
{"text":"Driver Code","code":"$ num = \"1998\" ; if ( isDivisible999 ( $ num ) ) echo \" Divisible \" ; else echo \" Not \u2581 divisible \" ; ? >"}
{"text":"PHP program for above implementation","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"Function to return string in lexicographic order followed by integers sum","code":"function arrangeString ( $ str ) { global $ MAX_CHAR ; $ char_count = array_fill ( 0 , $ MAX_CHAR , NULL ) ; $ sum = 0 ;"}
{"text":"Traverse the string","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) {"}
{"text":"Count occurrence of uppercase alphabets","code":"if ( $ str [ $ i ] >= ' A ' && $ str [ $ i ] <= ' Z ' ) $ char_count [ ord ( $ str [ $ i ] ) - ord ( ' A ' ) ] ++ ;"}
{"text":"Store sum of integers","code":"else $ sum = $ sum + ( ord ( $ str [ $ i ] ) - ord ( '0' ) ) ; } $ res = \" \" ;"}
{"text":"Traverse for all characters A to Z","code":"for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) { $ ch = chr ( ord ( ' A ' ) + $ i ) ;"}
{"text":"Append the current character in the string no . of times it occurs in the given string","code":"while ( $ char_count [ $ i ] -- ) $ res = $ res . $ ch ; }"}
{"text":"Append the sum of integers","code":"if ( $ sum > 0 ) $ res = $ res . strval ( $ sum ) ;"}
{"text":"return resultant string","code":"return $ res ; }"}
{"text":"Driver Code","code":"$ str = \" ACCBA10D2EW30\" ; echo arrangeString ( $ str ) ; ? >"}
{"text":"Function to print all sub strings","code":"< ? php function subString ( $ str , $ n ) {"}
{"text":"Pick starting point","code":"for ( $ len = 1 ; $ len <= $ n ; $ len ++ ) {"}
{"text":"Pick ending point","code":"for ( $ i = 0 ; $ i <= $ n - $ len ; $ i ++ ) {"}
{"text":"Print characters from current starting point to current ending point .","code":"$ j = $ i + $ len - 1 ; for ( $ k = $ i ; $ k <= $ j ; $ k ++ ) echo $ str [ $ k ] ; echo \" STRNEWLINE \" ; } } }"}
{"text":"Driver Code","code":"$ str = \" abc \" ; subString ( $ str , strlen ( $ str ) ) ; ? >"}
{"text":"Function to check the Vowel","code":"< ? php function isVowel ( $ ch ) { $ ch = strtoupper ( $ ch ) ; return ( $ ch == ' A ' $ ch == ' E ' $ ch == ' I ' $ ch == ' O ' $ ch == ' U ' ) ; }"}
{"text":"Returns count of vowels in str","code":"function countVowels ( $ str ) { $ count = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ )"}
{"text":"if ( isVowel ( $str [ $i ] ) ) Check for vowel","code":"++ $ count ; return $ count ; }"}
{"text":"string object","code":"$ str = \" abc \u2581 de \" ;"}
{"text":"Total numbers of Vowel","code":"echo countVowels ( $ str ) . \" STRNEWLINE \" ; ? >"}
{"text":"Print all the rotated string .","code":"< ? php function printRotatedString ( $ str ) { $ len = strlen ( $ str ) ;"}
{"text":"Generate all rotations one by one and print","code":"$ temp = \" \u2581 \" ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) {"}
{"text":"Current index in str","code":"$ j = $ i ;"}
{"text":"Current index in temp","code":"$ k = 0 ;"}
{"text":"Copying the second part from the point of rotation .","code":"while ( $ j < $ len ) { $ temp [ $ k ] = $ str [ $ j ] ; $ k ++ ; $ j ++ ; }"}
{"text":"Copying the first part from the point of rotation .","code":"$ j = 0 ; while ( $ j < $ i ) { $ temp [ $ k ] = $ str [ $ j ] ; $ j ++ ; $ k ++ ; } echo $ temp . \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ str = \" geeks \" ; printRotatedString ( $ str ) ; ? >"}
{"text":"utility function to check whether a string is palindrome or not","code":"< ? php function isPalindrome ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Check for palindrome .","code":"for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ ) if ( $ str [ $ i ] != $ str [ $ n - $ i - 1 ] ) return false ;"}
{"text":"palindrome string","code":"return true ; }"}
{"text":"function to find maximum length substring which is not palindrome","code":"function maxLengthNonPalinSubstring ( $ str ) { $ n = strlen ( $ str ) ; $ ch = $ str [ 0 ] ;"}
{"text":"to check whether all characters of the string are same or not","code":"$ i = 1 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) if ( $ str [ $ i ] != $ ch ) break ;"}
{"text":"All characters are same , we can 't  make a non-palindromic string.","code":"if ( $ i == $ n ) return 0 ;"}
{"text":"If string is palindrome , we can make it non - palindrome by removing any corner character","code":"if ( isPalindrome ( $ str ) ) return ( $ n - 1 ) ;"}
{"text":"Complete string is not a palindrome .","code":"return $ n ; }"}
{"text":"Driver code","code":"$ str = \" abba \" ; echo \" Maximum \u2581 Length \u2581 = \u2581 \" , maxLengthNonPalinSubstring ( $ str ) ; ? >"}
{"text":"PHP program to check if k - th bit of a given number is set or not using right shift operator .","code":"< ? php function isKthBitSet ( $ n , $ k ) { if ( ( $ n >> ( $ k - 1 ) ) & 1 ) echo \" SET \" ; else echo \" NOT \u2581 SET \" ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 1 ; isKthBitSet ( $ n , $ k ) ; ? >"}
{"text":"PHP program to find first palindromic permutation of given string","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"Function to count frequency of each char in the string . freq [ 0 ] for ' a ' , ... . , freq [ 25 ] for ' z '","code":"function countFreq ( $ str , & $ freq , $ len ) { for ( $ i = 0 ; $ i < $ len ; $ i ++ ) $ freq [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ; }"}
{"text":"Cases to check whether a palindr0mic string can be formed or not","code":"function canMakePalindrome ( $ freq , $ len ) { global $ MAX_CHAR ;"}
{"text":"count_odd to count no of chars with odd frequency","code":"$ count_odd = 0 ; for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) if ( $ freq [ $ i ] % 2 != 0 ) $ count_odd ++ ;"}
{"text":"For even length string no odd freq character","code":"if ( $ len % 2 == 0 ) { if ( $ count_odd > 0 ) return false ; else return true ; }"}
{"text":"For odd length string one odd freq character","code":"if ( $ count_odd != 1 ) return false ; return true ; }"}
{"text":"Function to find odd freq char and reducing its freq by 1 returns \" \" if odd freq char is not present","code":"function findOddAndRemoveItsFreq ( $ freq ) { global $ MAX_CHAR ; $ odd_str = \" \" ; for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) { if ( $ freq [ $ i ] % 2 != 0 ) { $ freq [ $ i ] -- ; $ odd_str . = chr ( $ i + ord ( ' a ' ) ) ; return $ odd_str ; } } return $ odd_str ; }"}
{"text":"To find lexicographically first palindromic string .","code":"function findPalindromicString ( $ str ) { global $ MAX_CHAR ; $ len = strlen ( $ str ) ; $ freq = array_fill ( 0 , $ MAX_CHAR , 0 ) ; countFreq ( $ str , $ freq , $ len ) ; if ( ! canMakePalindrome ( $ freq , $ len ) ) return \" No \u2581 Palindromic \u2581 String \" ;"}
{"text":"Assigning odd freq character if present else empty string .","code":"$ odd_str = findOddAndRemoveItsFreq ( $ freq ) ; $ front_str = \" \" ; $ rear_str = \" \u2581 \" ;"}
{"text":"Traverse characters in increasing order","code":"for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) { $ temp = \" \" ; if ( $ freq [ $ i ] != 0 ) { $ ch = chr ( $ i + ord ( ' a ' ) ) ;"}
{"text":"Divide all occurrences into two halves . Note that odd character is removed by findOddAndRemoveItsFreq ( )","code":"for ( $ j = 1 ; $ j <= ( int ) ( $ freq [ $ i ] \/ 2 ) ; $ j ++ ) $ temp . = $ ch ;"}
{"text":"creating front string","code":"$ front_str . = $ temp ;"}
{"text":"creating rear string","code":"$ rear_str = $ temp . $ rear_str ; } }"}
{"text":"Final palindromic string which is lexicographically first","code":"return ( $ front_str . $ odd_str . $ rear_str ) ; }"}
{"text":"Driver code","code":"$ str = \" malayalam \" ; echo findPalindromicString ( $ str ) ; ? >"}
{"text":"Returns true if first and last characters of s are same .","code":"< ? php function checkEquality ( $ s ) { return ( $ s [ 0 ] == $ s [ strlen ( $ s ) - 1 ] ) ; } function countSubstringWithEqualEnds ( $ s ) { $ result = 0 ; $ n = strlen ( $ s ) ;"}
{"text":"Starting point of substring","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ )"}
{"text":"Length of substring","code":"for ( $ len = 1 ; $ len <= $ n - $ i ; $ len ++ )"}
{"text":"Check if current substring has same starting and ending characters .","code":"if ( checkEquality ( substr ( $ s , $ i , $ len ) ) ) $ result ++ ; return $ result ; }"}
{"text":"Driver Code","code":"$ s = \" abcab \" ; print ( countSubstringWithEqualEnds ( $ s ) ) ; ? >"}
{"text":"Space efficient PHP program to count all substrings with same first and last characters .","code":"< ? php function countSubstringWithEqualEnds ( $ s ) { $ result = 0 ; $ n = strlen ( $ s ) ;"}
{"text":"Iterating through all substrings in way so that we can find first and last character easily","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i ; $ j < $ n ; $ j ++ ) if ( $ s [ $ i ] == $ s [ $ j ] ) $ result ++ ; return $ result ; }"}
{"text":"Driver Code","code":"$ s = \" abcab \" ; echo countSubstringWithEqualEnds ( $ s ) ;"}
{"text":"function to find out the maximum repeating character in given string","code":"< ? php function maxRepeating ( $ str ) { $ len = strlen ( $ str ) ; $ count = 0 ;"}
{"text":"Find the maximum repeating character starting from str [ i ]","code":"$ res = $ str [ 0 ] ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ cur_count = 1 ; for ( $ j = $ i + 1 ; $ j < $ len ; $ j ++ ) { if ( $ str [ $ i ] != $ str [ $ j ] ) break ; $ cur_count ++ ; }"}
{"text":"Update result if required","code":"if ( $ cur_count > $ count ) { $ count = $ cur_count ; $ res = $ str [ $ i ] ; } } return $ res ; }"}
{"text":"Driver code","code":"$ str = \" aaaabbaaccde \" ; echo maxRepeating ( $ str ) ; ? >"}
{"text":"Function for finding sum of larger numbers","code":"< ? php function findSum ( $ str1 , $ str2 ) {"}
{"text":"Before proceeding further , make sure length of str2 is larger .","code":"if ( strlen ( $ str1 ) > strlen ( $ str2 ) ) { $ t = $ str1 ; $ str1 = $ str2 ; $ str2 = $ t ; }"}
{"text":"Take an empty string for storing result","code":"$ str = \" \" ;"}
{"text":"Calculate length of both string","code":"$ n1 = strlen ( $ str1 ) ; $ n2 = strlen ( $ str2 ) ;"}
{"text":"Reverse both of strings","code":"$ str1 = strrev ( $ str1 ) ; $ str2 = strrev ( $ str2 ) ; $ carry = 0 ; for ( $ i = 0 ; $ i < $ n1 ; $ i ++ ) {"}
{"text":"Do school mathematics , compute sum of current digits and carry","code":"$ sum = ( ( ord ( $ str1 [ $ i ] ) -48 ) + ( ( ord ( $ str2 [ $ i ] ) -48 ) + $ carry ) ) ; $ str . = chr ( $ sum % 10 + 48 ) ;"}
{"text":"Calculate carry for next step","code":"$ carry = ( int ) ( $ sum \/ 10 ) ; }"}
{"text":"Add remaining digits of larger number","code":"for ( $ i = $ n1 ; $ i < $ n2 ; $ i ++ ) { $ sum = ( ( ord ( $ str2 [ $ i ] ) -48 ) + $ carry ) ; $ str . = chr ( $ sum % 10 + 48 ) ; $ carry = ( int ) ( $ sum \/ 10 ) ; }"}
{"text":"Add remaining carry","code":"if ( $ carry ) $ str . = chr ( $ carry + 48 ) ;"}
{"text":"reverse resultant string","code":"$ str = strrev ( $ str ) ; return $ str ; }"}
{"text":"Driver code","code":"$ str1 = \"12\" ; $ str2 = \"198111\" ; echo findSum ( $ str1 , $ str2 ) ; ? >"}
{"text":"Function for finding sum of larger numbers","code":"< ? php function findSum ( $ str1 , $ str2 ) {"}
{"text":"Before proceeding further , make sure length of str2 is larger .","code":"if ( strlen ( $ str1 ) > strlen ( $ str2 ) ) { $ temp = $ str1 ; $ str1 = $ str2 ; $ str2 = $ temp ; }"}
{"text":"Take an empty string for storing result","code":"$ str3 = \" \" ;"}
{"text":"Calculate length of both string","code":"$ n1 = strlen ( $ str1 ) ; $ n2 = strlen ( $ str2 ) ; $ diff = $ n2 - $ n1 ;"}
{"text":"Initially take carry zero","code":"$ carry = 0 ;"}
{"text":"Traverse from end of both strings","code":"for ( $ i = $ n1 - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Do school mathematics , compute sum of current digits and carry","code":"$ sum = ( ( ord ( $ str1 [ $ i ] ) - ord ( '0' ) ) + ( ( ord ( $ str2 [ $ i + $ diff ] ) - ord ( '0' ) ) ) + $ carry ) ; $ str3 . = chr ( $ sum % 10 + ord ( '0' ) ) ; $ carry = ( int ) ( $ sum \/ 10 ) ; }"}
{"text":"Add remaining digits of str2 [ ]","code":"for ( $ i = $ n2 - $ n1 - 1 ; $ i >= 0 ; $ i -- ) { $ sum = ( ( ord ( $ str2 [ $ i ] ) - ord ( '0' ) ) + $ carry ) ; $ str3 . = chr ( $ sum % 10 + ord ( '0' ) ) ; $ carry = ( int ) ( $ sum \/ 10 ) ; }"}
{"text":"Add remaining carry","code":"if ( $ carry ) $ str3 . = chr ( $ carry + ord ( '0' ) ) ;"}
{"text":"reverse resultant string","code":"return strrev ( $ str3 ) ; }"}
{"text":"Driver code","code":"$ str1 = \"12\" ; $ str2 = \"198111\" ; print ( findSum ( $ str1 , $ str2 ) ) ; ? >"}
{"text":"Returns true if all characters of str are unique . Assumptions : ( 1 ) str contains only characters from ' a ' to ' z ' ( 2 ) integers are stored using 32 bits","code":"< ? php function areChractersUnique ( $ str ) {"}
{"text":"An integer to store presence \/ absence of 26 characters using its 32 bits .","code":"$ checker = 0 ; for ( $ i = 0 ; $ i < $ len = strlen ( $ str ) ; ++ $ i ) { $ val = ( $ str [ $ i ] - ' a ' ) ;"}
{"text":"If bit corresponding to current character is already set","code":"if ( ( $ checker & ( 1 << $ val ) ) > 0 ) return false ;"}
{"text":"set bit in checker","code":"$ checker |= ( 1 << $ val ) ; } return true ; }"}
{"text":"Driver code","code":"$ s = \" aaabbccdaa \" ; if ( areChractersUnique ( $ s ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Return the count of words .","code":"< ? php function countWords ( $ str , $ len ) { $ count = 1 ;"}
{"text":"If word contain single letter , return 1.","code":"if ( $ len == 1 ) return $ count ;"}
{"text":"Checking for first letter .","code":"if ( $ str [ 0 ] == $ str [ 1 ] ) $ count *= 1 ; else $ count *= 2 ;"}
{"text":"Traversing the string and multiplying for combinations .","code":"for ( $ j = 1 ; $ j < $ len - 1 ; $ j ++ ) {"}
{"text":"If all three letters are same .","code":"if ( $ str [ $ j ] == $ str [ $ j - 1 ] && $ str [ $ j ] == $ str [ $ j + 1 ] ) $ count *= 1 ;"}
{"text":"If two letter are distinct .","code":"else if ( $ str [ $ j ] == $ str [ $ j - 1 ] $ str [ $ j ] == $ str [ $ j + 1 ] $ str [ $ j - 1 ] == $ str [ $ j + 1 ] ) $ count *= 2 ;"}
{"text":"If all three letter are distinct .","code":"else $ count *= 3 ; }"}
{"text":"Checking for last letter .","code":"if ( $ str [ $ len - 1 ] == $ str [ $ len - 2 ] ) $ count *= 1 ; else $ count *= 2 ; return $ count ; }"}
{"text":"Driver Code","code":"$ str = \" abc \" ; $ len = strlen ( $ str ) ; echo countWords ( $ str , $ len ) ; ? >"}
{"text":"Find new value of x after replacing digit \" from \" to \" to \"","code":"< ? php function replaceDig ( $ x , $ from , $ to ) { $ result = 0 ; $ multiply = 1 ; while ( $ x > 0 ) { $ reminder = $ x % 10 ;"}
{"text":"Required digit found , replace it","code":"if ( $ reminder == $ from ) $ result = $ result + $ to * $ multiply ; else $ result = $ result + $ reminder * $ multiply ; $ multiply *= 10 ; $ x = $ x \/ 10 ; } return $ result ; }"}
{"text":"Returns maximum and minimum possible sums of x1 and x2 if digit replacements are allowed .","code":"function calculateMinMaxSum ( $ x1 , $ x2 ) {"}
{"text":"We always get minimum sum if we replace 6 with 5.","code":"$ minSum = replaceDig ( $ x1 , 6 , 5 ) + replaceDig ( $ x2 , 6 , 5 ) ;"}
{"text":"We always get maximum sum if we replace 5 with 6.","code":"$ maxSum = replaceDig ( $ x1 , 5 , 6 ) + replaceDig ( $ x2 , 5 , 6 ) ; echo \" Minimum \u2581 sum \u2581 = \u2581 \" , $ minSum , \" STRNEWLINE \" ; echo \" Maximum \u2581 sum \u2581 = \u2581 \" , $ maxSum ; }"}
{"text":"Driver code","code":"$ x1 = 5466 ; $ x2 = 4555 ; calculateMinMaxSum ( $ x1 , $ x2 ) ; ? >"}
{"text":"Query type 1 : update string position i with character x .","code":"< ? php function qType1 ( $ l , $ x , & $ str ) { $ str [ $ l - 1 ] = $ x ; }"}
{"text":"Print \" Yes \" if range [ L . . R ] can form palindrome , else print \" No \" .","code":"function qType2 ( $ l , $ r , $ str ) { $ freq = array_fill ( 0 , 27 , 0 ) ;"}
{"text":"Find the frequency of each character in S [ L ... R ] .","code":"for ( $ i = $ l - 1 ; $ i <= $ r - 1 ; $ i ++ ) $ freq [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ;"}
{"text":"Checking if more than one character have frequency greater than 1.","code":"$ count = 0 ; for ( $ j = 0 ; $ j < 26 ; $ j ++ ) if ( $ freq [ $ j ] % 2 ) $ count ++ ; ( $ count <= 1 ) ? ( print ( \" Yes STRNEWLINE \" ) ) : ( print ( \" No STRNEWLINE \" ) ) ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ n = strlen ( $ str ) ; qType1 ( 4 , ' g ' , $ str ) ; qType2 ( 1 , 4 , $ str ) ; qType2 ( 2 , 3 , $ str ) ; qType1 ( 10 , ' t ' , $ str ) ; qType2 ( 10 , 11 , $ str ) ; ? >"}
{"text":"Function to find two 's complement","code":"< ? php function findTwoscomplement ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Traverse the string to get first '1' from the last of string","code":"$ i ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) if ( $ str [ $ i ] == '1' ) break ;"}
{"text":"If there exists no '1' concatenate 1 at the starting of string","code":"if ( $ i == -1 ) return '1' + $ str ;"}
{"text":"Continue traversal after the position of first '1'","code":"for ( $ k = $ i - 1 ; $ k >= 0 ; $ k -- ) {"}
{"text":"Just flip the values","code":"if ( $ str [ $ k ] == '1' ) $ str [ $ k ] = '0' ; else $ str [ $ k ] = '1' ; }"}
{"text":"return the modified string","code":"return $ str ; ; }"}
{"text":"Driver code","code":"$ str = \"00000101\" ; echo findTwoscomplement ( $ str ) ; ? >"}
{"text":"Function to find if given number is equal to length or not","code":"< ? php function isequal ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Traverse string from end and find the number stored at the end . x is used to store power of 10.","code":"$ num = 0 ; $ x = 1 ; $ i = $ n - 1 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { if ( '0' <= $ str [ $ i ] && $ str [ $ i ] <= '9' ) { $ num = ( $ str [ $ i ] - '0' ) * $ x + $ num ; $ x = $ x * 10 ; if ( $ num >= $ n ) return false ; } else break ; }"}
{"text":"Check if number is equal to string length except that number 's digits","code":"return $ num == $ i + 1 ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks13\" ; if ( isequal ( $ str ) ) echo \" Yes \" ; else echo \" No \" ; return 0 ; ? >"}
{"text":"Returns count of minimum characters to be removed to make s alternate .","code":"< ? php function countToMake0lternate ( $ s ) { $ result = 0 ; for ( $ i = 0 ; $ i < ( strlen ( $ s ) - 1 ) ; $ i ++ )"}
{"text":"if two alternating characters of string are same","code":"if ( $ s [ $ i ] == $ s [ $ i + 1 ] )"}
{"text":"then need to delete a character","code":"$ result ++ ; return $ result ; }"}
{"text":"Driver code","code":"echo countToMake0lternate ( \" 000111 \" ) , \" \" ; echo countToMake0lternate ( \" 11111 \" ) , \" \" ; echo countToMake0lternate ( \" 01010101 \" ) ; ? >"}
{"text":"Utility method to check str is possible palindrome after ignoring","code":"< ? php function isPossiblePalindrome ( $ str ) { $ n = strlen ( $ str ) ; for ( $ i = 0 ; $ i < $ n \/ 2 ; $ i ++ ) {"}
{"text":"If both left and right character are not dot and they are not equal also , then it is not possible to make this string a palindrome","code":"if ( $ str [ $ i ] != ' . ' && $ str [ $ n - $ i - 1 ] != ' . ' && $ str [ $ i ] != $ str [ $ n - $ i - 1 ] ) return false ; } return true ; }"}
{"text":"Returns lexicographically smallest palindrome string , if possible","code":"function smallestPalindrome ( $ str ) { if ( ! isPossiblePalindrome ( $ str ) ) return \" Not \u2581 Possible \" ; $ n = strlen ( $ str ) ;"}
{"text":"loop through character of string","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ str [ $ i ] == ' . ' ) {"}
{"text":"if one of character is dot , replace dot with other character","code":"if ( $ str [ $ n - $ i - 1 ] != ' . ' ) $ str [ $ i ] = $ str [ $ n - $ i - 1 ] ;"}
{"text":"if both character are dot , then replace them with smallest character ' a '","code":"else $ str [ $ i ] = $ str [ $ n - $ i - 1 ] = ' a ' ; } }"}
{"text":"return the result","code":"return $ str ; }"}
{"text":"Driver code","code":"$ str = \" ab . . e . c . a \" ; echo smallestPalindrome ( $ str ) ; ? >"}
{"text":"Utility method to flip a character","code":"< ? php function flip ( $ ch ) { return ( $ ch == '0' ) ? '1' : '0' ; }"}
{"text":"Utility method to get minimum flips when alternate string starts with expected char","code":"function getFlipWithStartingCharcter ( $ str , $ expected ) { $ flipCount = 0 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) {"}
{"text":"if current character is not expected , increase flip count","code":"if ( $ str [ $ i ] != $ expected ) $ flipCount ++ ;"}
{"text":"flip expected character each time","code":"$ expected = flip ( $ expected ) ; } return $ flipCount ; }"}
{"text":"method return minimum flip to make binary string alternate","code":"function minFlipToMakeStringAlternate ( $ str ) {"}
{"text":"return minimum of following two 1 ) flips when alternate string starts with 0 2 ) flips when alternate string starts with 1","code":"return min ( getFlipWithStartingCharcter ( $ str , '0' ) , getFlipWithStartingCharcter ( $ str , '1' ) ) ; }"}
{"text":"Driver code to test above method","code":"$ str = \"0001010111\" ; echo minFlipToMakeStringAlternate ( $ str ) ; ? >"}
{"text":"Function which return Remainder after dividing the number by 7","code":"< ? php function remainderWith7 ( $ num ) {"}
{"text":"This series is used to find remainder with 7","code":"$ series = array ( 1 , 3 , 2 , -1 , -3 , -2 ) ;"}
{"text":"Index of next element in series","code":"$ series_index = 0 ;"}
{"text":"Initialize result","code":"$ result = 0 ;"}
{"text":"Traverse num from end","code":"for ( $ i = strlen ( $ num ) - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Find current digit of num","code":"$ digit = $ num [ $ i ] - '0' ;"}
{"text":"Add next term to result","code":"$ result += $ digit * $ series [ $ series_index ] ;"}
{"text":"Move to next term in series","code":"$ series_index = ( $ series_index + 1 ) % 6 ;"}
{"text":"Make sure that result never goes beyond 7.","code":"$ result %= 7 ; }"}
{"text":"Make sure that remainder is positive","code":"if ( $ result < 0 ) $ result = ( $ result + 7 ) % 7 ; return $ result ; }"}
{"text":"Driver Code","code":"{ $ str = \"12345\" ; echo \" Remainder \u2581 with \u2581 7 \u2581 is \u2581 \" , ( remainderWith7 ( $ str ) ) ; return 0 ; } ? >"}
{"text":"Function to calculate roman equivalent","code":"< ? php function intToRoman ( $ num ) {"}
{"text":"storing roman values of digits from 0 - 9 when placed at different places","code":"$ m = array ( \" \" , \" M \" , \" MM \" , \" MMM \" ) ; $ c = array ( \" \" , \" C \" , \" CC \" , \" CCC \" , \" CD \" , \" D \" , \" DC \" , \" DCC \" , \" DCCC \" , \" CM \" ) ; $ x = array ( \" \" , \" X \" , \" XX \" , \" XXX \" , \" XL \" , \" L \" , \" LX \" , \" LXX \" , \" LXXX \" , \" XC \" ) ; $ i = array ( \" \" , \" I \" , \" II \" , \" III \" , \" IV \" , \" V \" , \" VI \" , \" VII \" , \" VIII \" , \" IX \" ) ;"}
{"text":"Converting to roman","code":"$ thousands = $ m [ $ num \/ 1000 ] ; $ hundereds = $ c [ ( $ num % 1000 ) \/ 100 ] ; $ tens = $ x [ ( $ num % 100 ) \/ 10 ] ; $ ones = $ i [ $ num % 10 ] ; $ ans = $ thousands . $ hundereds . $ tens . $ ones ; return $ ans ; }"}
{"text":"Driver Code","code":"$ number = 3549 ; echo intToRoman ( $ number ) ;"}
{"text":"Function to print given string in cross pattern","code":"< ? php function pattern ( $ str , $ len ) {"}
{"text":"i and j are the indexes of characters to be displayed in the ith iteration i = 0 initially and go upto length of string j = length of string initially in each iteration of i , we increment i and decrement j , we print character only of k == i or k == j","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ j = $ len - 1 - $ i ; for ( $ k = 0 ; $ k < $ len ; $ k ++ ) { if ( $ k == $ i $ k == $ j ) echo $ str [ $ k ] ; else echo \" \u2581 \" ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ len = strlen ( $ str ) ; pattern ( $ str , $ len ) ; ? >"}
{"text":"PHP program to find smallest window containing all characters of a pattern .","code":"< ? php define ( \" no _ of _ chars \" , 256 ) ;"}
{"text":"Function to find smallest window containing all characters of ' pat '","code":"function findSubString ( & $ str , & $ pat ) { $ len1 = strlen ( $ str ) ; $ len2 = strlen ( $ pat ) ;"}
{"text":"check if string ' s \u2581 length \u2581 is \u2581 less \u2581 \u2581 than \u2581 pattern ' s length . If yes then no such window can exist","code":"if ( $ len1 < $ len2 ) { echo \" No \u2581 such \u2581 window \u2581 exists \" ; return \" \" ; } $ hash_pat = array_fill ( 0 , no_of_chars , 0 ) ; $ hash_str = array_fill ( 0 , no_of_chars , 0 ) ;"}
{"text":"store occurrence ofs characters of pattern","code":"for ( $ i = 0 ; $ i < $ len2 ; $ i ++ ) $ hash_pat [ ord ( $ pat [ $ i ] ) ] ++ ; $ start = 0 ; $ start_index = -1 ; $ min_len = PHP_INT_MAX ;"}
{"text":"start traversing the string $count = 0 ; count of characters","code":"for ( $ j = 0 ; $ j < $ len1 ; $ j ++ ) {"}
{"text":"count occurrence of characters of string","code":"$ hash_str [ ord ( $ str [ $ j ] ) ] ++ ;"}
{"text":"If string ' s \u2581 char \u2581 matches \u2581 with \u2581 \u2581 pattern ' s char then increment count","code":"if ( $ hash_str [ ord ( $ str [ $ j ] ) ] <= $ hash_pat [ ord ( $ str [ $ j ] ) ] ) $ count ++ ;"}
{"text":"if all the characters are matched","code":"if ( $ count == $ len2 ) {"}
{"text":"Try to minimize the window i . e . , check if any character is occurring more no . of times than its occurrence in pattern , if yes then remove it from starting and also remove the useless characters .","code":"while ( $ hash_str [ ord ( $ str [ $ start ] ) ] > $ hash_pat [ ord ( $ str [ $ start ] ) ] || $ hash_pat [ ord ( $ str [ $ start ] ) ] == 0 ) { if ( $ hash_str [ ord ( $ str [ $ start ] ) ] > $ hash_pat [ ord ( $ str [ $ start ] ) ] ) $ hash_str [ ord ( $ str [ $ start ] ) ] -- ; $ start ++ ; }"}
{"text":"update window size","code":"$ len_window = $ j - $ start + 1 ; if ( $ min_len > $ len_window ) { $ min_len = $ len_window ; $ start_index = $ start ; } } }"}
{"text":"If no window found","code":"if ( $ start_index == -1 ) { echo \" No \u2581 such \u2581 window \u2581 exists \" ; return \" \" ; }"}
{"text":"Return substring starting from start_index and length min_len","code":"return substr ( $ str , $ start_index , $ min_len ) ; }"}
{"text":"Driver code","code":"$ str = \" this \u2581 is \u2581 a \u2581 test \u2581 string \" ; $ pat = \" tist \" ; echo \" Smallest \u2581 window \u2581 is \u2581 : \u2581 STRNEWLINE \" . findSubString ( $ str , $ pat ) ; ? >"}
{"text":"vector to store prime and N primes whose sum equals given S","code":"< ? php $ set = array ( ) ; $ prime = array ( ) ;"}
{"text":"function to check prime number","code":"function isPrime ( $ x ) {"}
{"text":"square root of x","code":"$ sqroot = sqrt ( $ x ) ; $ flag = true ;"}
{"text":"since 1 is not prime number","code":"if ( $ x == 1 ) return false ;"}
{"text":"if any factor is found return false","code":"for ( $ i = 2 ; $ i <= $ sqroot ; $ i ++ ) if ( $ x % $ i == 0 ) return false ;"}
{"text":"no factor found","code":"return true ; }"}
{"text":"function to display N primes whose sum equals S","code":"function display ( ) { global $ set , $ prime ; $ length = count ( $ set ) ; for ( $ i = 0 ; $ i < $ length ; $ i ++ ) echo ( $ set [ $ i ] . \" \u2581 \" ) ; echo ( \" STRNEWLINE \" ) ; }"}
{"text":"function to evaluate all possible N primes whose sum equals S","code":"function primeSum ( $ total , $ N , $ S , $ index ) { global $ set , $ prime ;"}
{"text":"if total equals S And total is reached using N primes","code":"if ( $ total == $ S && count ( $ set ) == $ N ) {"}
{"text":"display the N primes","code":"display ( ) ; return ; }"}
{"text":"if total is greater than S or if index has reached last element","code":"if ( $ total > $ S || $ index == count ( $ prime ) ) return ;"}
{"text":"add prime [ index ] to set vector","code":"array_push ( $ set , $ prime [ $ index ] ) ;"}
{"text":"include the ( index ) th prime to total","code":"primeSum ( $ total + $ prime [ $ index ] , $ N , $ S , $ index + 1 ) ;"}
{"text":"remove element from set vector","code":"array_pop ( $ set ) ;"}
{"text":"exclude ( index ) th prime","code":"primeSum ( $ total , $ N , $ S , $ index + 1 ) ; }"}
{"text":"function to generate all primes","code":"function allPrime ( $ N , $ S , $ P ) { global $ set , $ prime ;"}
{"text":"all primes less than S itself","code":"for ( $ i = $ P + 1 ; $ i <= $ S ; $ i ++ ) {"}
{"text":"if i is prime add it to prime vector","code":"if ( isPrime ( $ i ) ) array_push ( $ prime , $ i ) ; }"}
{"text":"if primes are less than N","code":"if ( count ( $ prime ) < $ N ) return ; primeSum ( 0 , $ N , $ S , 0 ) ; }"}
{"text":"Driver Code","code":"$ S = 54 ; $ N = 2 ; $ P = 3 ; allPrime ( $ N , $ S , $ P ) ; ? >"}
{"text":"Function to return 2 ^ ( 2 ^ A ) % B","code":"< ? php function F ( $ A , $ B ) {"}
{"text":"$Base case , 2 ^ ( 2 ^ 1 ) % B = 4 % B","code":"if ( $ A == 1 ) return ( 4 % $ B ) ; else { $ temp = F ( $ A - 1 , $ B ) ; return ( $ temp * $ temp ) % $ B ; } }"}
{"text":"Driver code","code":"$ A = 25 ; $ B = 50 ;"}
{"text":"Print 2 ^ ( 2 ^ $A ) % $B","code":"echo F ( $ A , $ B ) ;"}
{"text":"PHP implementation of the approach","code":"< ? php $ MOD = 1000000007 ;"}
{"text":"Function to return the required sum","code":"function rangeSum ( $ l , $ r ) { global $ MOD ; $ a = 1 ; $ b = 9 ; $ res = 0 ; for ( $ i = 1 ; $ i <= 10 ; $ i ++ ) { $ L = max ( $ l , $ a ) ; $ R = min ( $ r , $ b ) ;"}
{"text":"If range is valid","code":"if ( $ L <= $ R ) {"}
{"text":"Sum of AP","code":"$ sum = ( $ L + $ R ) * ( $ R - $ L + 1 ) \/ 2 ; $ res += ( $ i * $ i ) * ( $ sum % $ MOD ) ; $ res %= $ MOD ; } $ a = $ a * 10 ; $ b = $ b * 10 + 9 ; } return $ res ; }"}
{"text":"Driver code","code":"$ l = 98 ; $ r = 102 ; echo rangeSum ( $ l , $ r ) ; ? >"}
{"text":"To store the random permutation","code":"< ? php $ permutation = array ( ) ;"}
{"text":"Utility function to print the generated permutation","code":"function printPermutation ( ) { global $ permutation ; foreach ( $ permutation as $ i ) echo $ i . \" \" ; }"}
{"text":"Function to return a random number between x and y","code":"function give_random_number ( $ l , $ r ) { $ x = rand ( ) % ( $ r - $ l + 1 ) + $ l ; return $ x ; }"}
{"text":"Recursive function to generate the random permutation","code":"function generate_random_permutation ( $ l , $ r ) { global $ permutation ;"}
{"text":"Base condition","code":"if ( $ l > $ r ) return ;"}
{"text":"Random number returned from the function","code":"$ n = give_random_number ( $ l , $ r ) ;"}
{"text":"Inserting random number in vector","code":"array_push ( $ permutation , $ n ) ;"}
{"text":"Recursion call for [ l , n - 1 ]","code":"generate_random_permutation ( $ l , $ n - 1 ) ;"}
{"text":"Recursion call for [ n + 1 , r ]","code":"generate_random_permutation ( $ n + 1 , $ r ) ; }"}
{"text":"Driver code","code":"$ l = 5 ; $ r = 15 ;"}
{"text":"Generate permutation","code":"generate_random_permutation ( $ l , $ r ) ;"}
{"text":"Print the generated permutation","code":"printPermutation ( ) ; ? >"}
{"text":"Function to count sum of set bits of all numbers till N","code":"< ? php function getSetBitsFromOneToN ( $ N ) { $ two = 2 ; $ ans = 0 ; $ n = $ N ; while ( $ n ) { $ ans += ( int ) ( $ N \/ $ two ) * ( $ two >> 1 ) ; if ( ( $ N & ( $ two - 1 ) ) > ( $ two >> 1 ) - 1 ) $ ans += ( $ N & ( $ two - 1 ) ) - ( $ two >> 1 ) + 1 ; $ two <<= 1 ; $ n >>= 1 ; } return $ ans ; }"}
{"text":"Function to find the minimum number","code":"function findMinimum ( $ x ) { $ low = 0 ; $ high = 100000 ; $ ans = $ high ;"}
{"text":"Binary search for the lowest number","code":"while ( $ low <= $ high ) {"}
{"text":"Find mid number","code":"$ mid = ( $ low + $ high ) >> 1 ;"}
{"text":"Check if it is atleast x","code":"if ( getSetBitsFromOneToN ( $ mid ) >= $ x ) { $ ans = min ( $ ans , $ mid ) ; $ high = $ mid - 1 ; } else $ low = $ mid + 1 ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ x = 20 ; echo findMinimum ( $ x ) ; ? >"}
{"text":"Function to calculate trailing zeros","code":"< ? php function trailingZeroes ( $ n ) { $ cnt = 0 ; while ( $ n > 0 ) { $ n = intval ( $ n \/ 5 ) ; $ cnt += $ n ; } return $ cnt ; } function binarySearch ( $ n ) { $ low = 0 ;"}
{"text":"binary search for first number with n trailing zeros","code":"while ( $ low < $ high ) { $ mid = intval ( ( $ low + $ high ) \/ 2 ) ; $ count = trailingZeroes ( $ mid ) ; if ( $ count < $ n ) $ low = $ mid + 1 ; else $ high = $ mid ; }"}
{"text":"Print all numbers after low with n trailing zeros .","code":"$ result = array ( ) ; while ( trailingZeroes ( $ low ) == $ n ) { array_push ( $ result , $ low ) ; $ low ++ ; }"}
{"text":"Print result","code":"for ( $ i = 0 ; $ i < sizeof ( $ result ) ; $ i ++ ) echo $ result [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 2 ; binarySearch ( $ n ) ; ? >"}
{"text":"Method returns minimum number of days after which tank will become empty","code":"< ? php function minDaysToEmpty ( $ C , $ l ) { if ( $ l >= $ C ) return $ C ; $ eq_root = ( int ) sqrt ( 1 + 8 * ( $ C - $ l ) - 1 ) \/ 2 ; return ceil ( $ eq_root ) + $ l ; }"}
{"text":"Driver code","code":"echo minDaysToEmpty ( 5 , 2 ) , \" STRNEWLINE \" ; echo minDaysToEmpty ( 6514683 , 4965 ) , \" \" ; ? >"}
{"text":"Program to find kth element from two sorted arrays","code":"< ? php function kth ( $ arr1 , $ arr2 , $ m , $ n , $ k ) { $ sorted1 [ $ m + $ n ] = 0 ; $ i = 0 ; $ j = 0 ; $ d = 0 ; while ( $ i < $ m && $ j < $ n ) { if ( $ arr1 [ $ i ] < $ arr2 [ $ j ] ) $ sorted1 [ $ d ++ ] = $ arr1 [ $ i ++ ] ; else $ sorted1 [ $ d ++ ] = $ arr2 [ $ j ++ ] ; } while ( $ i < $ m ) $ sorted1 [ $ d ++ ] = $ arr1 [ $ i ++ ] ; while ( $ j < $ n ) $ sorted1 [ $ d ++ ] = $ arr2 [ $ j ++ ] ; return $ sorted1 [ $ k - 1 ] ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 2 , 3 , 6 , 7 , 9 ) ; $ arr2 = array ( 1 , 4 , 8 , 10 ) ; $ k = 5 ; echo kth ( $ arr1 , $ arr2 , 5 , 4 , $ k ) ; ? >"}
{"text":"PHP program to find the minimum absolute difference between any of the adjacent elements of an array which is created by picking one element from each row of the matrix .","code":"< ? php $ R = 2 ; $ C = 2 ;"}
{"text":"Return smallest element greater than or equal to the current element .","code":"function bsearch ( $ low , $ high , $ n , $ arr ) { $ mid = ( $ low + $ high ) \/ 2 ; if ( $ low <= $ high ) { if ( $ arr [ $ mid ] < $ n ) return bsearch ( $ mid + 1 , $ high , $ n , $ arr ) ; return bsearch ( $ low , $ mid - 1 , $ n , $ arr ) ; } return $ low ; }"}
{"text":"Return the minimum absolute difference adjacent elements of array","code":"function mindiff ( $ arr , $ n , $ m ) {"}
{"text":"Sort each row of the matrix .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) sort ( $ arr ) ; $ ans = PHP_INT_MAX ;"}
{"text":"For each matrix element","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ m ; $ j ++ ) {"}
{"text":"Search smallest element in the next row which is greater than or equal to the current element","code":"$ p = bsearch ( 0 , $ m - 1 , $ arr [ $ i ] [ $ j ] , $ arr [ $ i + 1 ] ) ; $ ans = min ( $ ans , abs ( $ arr [ $ i + 1 ] [ $ p ] - $ arr [ $ i ] [ $ j ] ) ) ;"}
{"text":"largest element which is smaller than the current element in the next row must be just before smallest element which is greater than or equal to the current element because rows are sorted .","code":"if ( $ p - 1 >= 0 ) $ ans = min ( $ ans , abs ( $ arr [ $ i + 1 ] [ $ p - 1 ] - $ arr [ $ i ] [ $ j ] ) ) ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ m = array ( 8 , 5 , 6 , 8 ) ; echo mindiff ( $ m , $ R , $ C ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find bitonic point using binary search","code":"< ? php function binarySearch ( $ arr , $ left , $ right ) { if ( $ left <= $ right ) { $ mid = ( $ left + $ right ) \/ 2 ;"}
{"text":"base condition to check if arr [ mid ] is bitonic point or not","code":"if ( $ arr [ $ mid - 1 ] < $ arr [ $ mid ] && $ arr [ $ mid ] > $ arr [ $ mid + 1 ] ) return $ mid ;"}
{"text":"We assume that sequence is bitonic . We go to right subarray if middle point is part of increasing subsequence . Else we go to left subarray .","code":"if ( $ arr [ $ mid ] < $ arr [ $ mid + 1 ] ) return binarySearch ( $ arr , $ mid + 1 , $ right ) ; else return binarySearch ( $ arr , $ left , $ mid - 1 ) ; } return -1 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 6 , 7 , 8 , 11 , 9 , 5 , 2 , 1 ) ; $ n = sizeof ( $ arr ) ; $ index = binarySearch ( $ arr , 1 , $ n - 2 ) ; if ( $ index != -1 ) echo $ arr [ $ index ] ; ? >"}
{"text":"Returns index of second appearance of a repeating element . The function assumes that array elements are in range from 1 to n - 1.","code":"< ? php function findRepeatingElement ( $ arr , $ low , $ high ) {"}
{"text":"low = 0 , high = n - 1 ;","code":"if ( $ low > $ high ) return -1 ; $ mid = floor ( ( $ low + $ high ) \/ 2 ) ;"}
{"text":"Check if the mid element is the repeating one","code":"if ( $ arr [ $ mid ] != $ mid + 1 ) { if ( $ mid > 0 && $ arr [ $ mid ] == $ arr [ $ mid - 1 ] ) return $ mid ;"}
{"text":"If mid element is not at its position that means the repeated element is in left","code":"return findRepeatingElement ( $ arr , $ low , $ mid - 1 ) ; }"}
{"text":"If mid is at proper position then repeated one is in right .","code":"return findRepeatingElement ( $ arr , $ mid + 1 , $ high ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 3 , 4 , 5 ) ; $ n = sizeof ( $ arr ) ; $ index = findRepeatingElement ( $ arr , 0 , $ n - 1 ) ; if ( $ index != -1 ) echo $ arr [ $ index ] ; ? >"}
{"text":"Returns the absolute value of n - mid * mid * mid","code":"< ? php function diff ( $ n , $ mid ) { if ( $ n > ( $ mid * $ mid * $ mid ) ) return ( $ n - ( $ mid * $ mid * $ mid ) ) ; else return ( ( $ mid * $ mid * $ mid ) - $ n ) ; }"}
{"text":"Returns cube root of a no n","code":"function cubicRoot ( $ n ) {"}
{"text":"Set start and end for binary search","code":"$ start = 0 ; $ end = $ n ;"}
{"text":"Set precision","code":"$ e = 0.0000001 ; while ( true ) { $ mid = ( ( $ start + $ end ) \/ 2 ) ; $ error = diff ( $ n , $ mid ) ;"}
{"text":"If error is less than e then mid is our answer so return mid","code":"if ( $ error <= $ e ) return $ mid ;"}
{"text":"If mid * mid * mid is greater than n set end = mid","code":"if ( ( $ mid * $ mid * $ mid ) > $ n ) $ end = $ mid ;"}
{"text":"If mid * mid * mid is less than n set start = mid","code":"else $ start = $ mid ; } }"}
{"text":"Driver Code","code":"$ n = 3 ; echo ( \" Cubic \u2581 root \u2581 of \u2581 $ n \u2581 is \u2581 \" ) ; echo ( cubicRoot ( $ n ) ) ; ? >"}
{"text":"Returns floor of square root of x","code":"< ? php function floorSqrt ( $ x ) {"}
{"text":"Base cases","code":"if ( $ x == 0 $ x == 1 ) return $ x ;"}
{"text":"Starting from 1 , try all numbers until i * i is greater than or equal to x .","code":"$ i = 1 ; $ result = 1 ; while ( $ result <= $ x ) { $ i ++ ; $ result = $ i * $ i ; } return $ i - 1 ; }"}
{"text":"Driver Code","code":"$ x = 11 ; echo floorSqrt ( $ x ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to return the sum of internal angles of an n - sided polygon","code":"< ? php function sumOfInternalAngles ( $ n ) { if ( $ n < 3 ) return 0 ; return ( ( $ n - 2 ) * 180 ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo ( sumOfInternalAngles ( $ n ) ) ; ? >"}
{"text":"Function to find length of diagonal of cube","code":"< ? php function diagonal_length ( $ a ) { $ L ;"}
{"text":"Formula to Find length of diagonal of cube","code":"$ L = $ a * sqrt ( 3 ) ; return $ L ; }"}
{"text":"Driver code","code":"$ a = 5 ;"}
{"text":"Function call","code":"echo diagonal_length ( $ a ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php const PI = 3.14 ;"}
{"text":"Function to return the area of the bigger circle","code":"function find_area ( $ r , $ d ) {"}
{"text":"Find the radius of the bigger circle","code":"$ R = $ d \/ PI ; $ R += pow ( $ r , 2 ) ; $ R = sqrt ( $ R ) ;"}
{"text":"Calculate the area of the bigger circle","code":"$ area = PI * pow ( $ R , 2 ) ; return $ area ; }"}
{"text":"Driver Code","code":"$ r = 4 ; $ d = 5 ; echo ( find_area ( $ r , $ d ) ) ; ? >"}
{"text":"Function to check if a given quadrilateral is valid or not","code":"< ? php function Valid ( $ a , $ b , $ c , $ d ) {"}
{"text":"Check condition","code":"if ( $ a + $ b + $ c + $ d == 360 ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ a = 80 ; $ b = 70 ; $ c = 100 ; $ d = 110 ; if ( Valid ( $ a , $ b , $ c , $ d ) ) echo ( \" Valid \u2581 quadrilateral \" ) ; else echo ( \" Invalid \u2581 quadrilateral \" ) ; ? >"}
{"text":"PHP program to find the number of common tangents between the two circles","code":"< ? php function circle ( $ x1 , $ y1 , $ x2 , $ y2 , $ r1 , $ r2 ) { $ distSq = ( $ x1 - $ x2 ) * ( $ x1 - $ x2 ) + ( $ y1 - $ y2 ) * ( $ y1 - $ y2 ) ; $ radSumSq = ( $ r1 + $ r2 ) * ( $ r1 + $ r2 ) ; if ( $ distSq == $ radSumSq ) return 1 ; else if ( $ distSq > $ radSumSq ) return -1 ; else return 0 ; }"}
{"text":"Driver code","code":"$ x1 = -10 ; $ y1 = 8 ; $ x2 = 14 ; $ y2 = -24 ; $ r1 = 30 ; $ r2 = 10 ; $ t = circle ( $ x1 , $ y1 , $ x2 , $ y2 , $ r1 , $ r2 ) ; if ( $ t == 1 ) echo \" There \u2581 are \u2581 3 \u2581 common \u2581 tangents \" , \" \u2581 between \u2581 the \u2581 circles . \" ; else if ( $ t < 0 ) echo \" There \u2581 are \u2581 4 \u2581 common \u2581 tangents \" , \" \u2581 between \u2581 the \u2581 circles . \" ; else echo \" There \u2581 are \u2581 2 \u2581 common \u2581 tangents \" , \" \u2581 between \u2581 the \u2581 circles . \" ; ? >"}
{"text":"PHP program to find the ratio of the distance between the centres of the circles and the point of intersection of two transverse common tangents to the circles which do not touch each other","code":"< ? php function GCD ( $ a , $ b ) { return ( $ b != 0 ? GCD ( $ b , $ a % $ b ) : $ a ) ; }"}
{"text":"Function to find the ratio","code":"function ratiotang ( $ r1 , $ r2 ) { echo \" The \u2581 ratio \u2581 is \u2581 \" , $ r1 \/ GCD ( $ r1 , $ r2 ) , \" : \" , $ r2 \/ GCD ( $ r1 , $ r2 ) ; }"}
{"text":"Driver code","code":"$ r1 = 4 ; $ r2 = 8 ; ratiotang ( $ r1 , $ r2 ) ; ? >"}
{"text":"Function to return the number of regions in a Planar Graph","code":"< ? php function Regions ( $ Vertices , $ Edges ) { $ R = $ Edges + 2 - $ Vertices ; return $ R ; }"}
{"text":"Driver code","code":"$ V = 5 ; $ E = 7 ; echo ( Regions ( $ V , $ E ) ) ; ? >"}
{"text":"Function to find the GCD","code":"< ? php function GCD ( $ a , $ b ) { return ( $ b != 0 ? GCD ( $ b , $ a % $ b ) : $ a ) ; }"}
{"text":"Function to find the ratio","code":"function ratiotang ( $ r1 , $ r2 ) { echo \" The \u2581 ratio \u2581 is \u2581 \" , $ r1 \/ GCD ( $ r1 , $ r2 ) , \" \u2581 : \u2581 \" , $ r2 \/ GCD ( $ r1 , $ r2 ) ; }"}
{"text":"Driver code","code":"$ r1 = 4 ; $ r2 = 6 ; ratiotang ( $ r1 , $ r2 ) ; ? >"}
{"text":"Function to find the length of the transverse common tangent","code":"< ? php function lengthOfTangent ( $ r1 , $ r2 , $ d ) { echo \" The \u2581 length \u2581 of \u2581 the \u2581 transverse \u2581 common \u2581 tangent \u2581 is \u2581 \" , sqrt ( pow ( $ d , 2 ) - pow ( ( $ r1 + $ r2 ) , 2 ) ) ; }"}
{"text":"Driver code","code":"$ r1 = 4 ; $ r2 = 6 ; $ d = 12 ; lengthOfTangent ( $ r1 , $ r2 , $ d ) ; ? >"}
{"text":"Function to return the area of the remaining plot","code":"< ? php function remainingArea ( $ N , $ M , $ K ) {"}
{"text":"Continue while plot has positive area and there are persons left","code":"while ( $ K -- && $ N && $ M ) {"}
{"text":"If length > breadth then subtract breadth from length","code":"if ( $ N > $ M ) $ N = $ N - $ M ;"}
{"text":"Else subtract length from breadth","code":"else $ M = $ M - $ N ; } if ( $ N > 0 && $ M > 0 ) return $ N * $ M ; else return 0 ; }"}
{"text":"Driver code","code":"$ N = 5 ; $ M = 3 ; $ K = 2 ; echo remainingArea ( $ N , $ M , $ K ) ; ? >"}
{"text":"Function to find the length of the direct common tangent","code":"< ? php function lengtang ( $ r1 , $ r2 ) { echo \" The \u2581 length \u2581 of \u2581 the \u2581 \" , \" direct \u2581 common \u2581 tangent \u2581 is \u2581 \" , 2 * sqrt ( $ r1 * $ r2 ) ; }"}
{"text":"Driver code","code":"$ r1 = 5 ; $ r2 = 9 ; lengtang ( $ r1 , $ r2 ) ; ? >"}
{"text":"Function to find the shortest distance","code":"< ? php function dist ( $ x1 , $ y1 , $ x2 , $ y2 , $ r ) { echo \" The \u2581 shortest \u2581 distance \u2581 between \u2581 a \u2581 point \u2581 and \u2581 a \u2581 circle \u2581 is \u2581 \" , sqrt ( ( pow ( ( $ x2 - $ x1 ) , 2 ) ) + ( pow ( ( $ y2 - $ y1 ) , 2 ) ) ) - $ r ; }"}
{"text":"Driver code","code":"$ x1 = 4 ; $ y1 = 6 ; $ x2 = 35 ; $ y2 = 42 ; $ r = 5 ; dist ( $ x1 , $ y1 , $ x2 , $ y2 , $ r ) ; ? >"}
{"text":"Function to find the distance between parallel lines","code":"< ? php function dist ( $ m , $ b1 , $ b2 ) { $ d = abs ( $ b2 - $ b1 ) \/ ( ( $ m * $ m ) - 1 ) ; return $ d ; }"}
{"text":"Driver Code","code":"$ m = 2 ; $ b1 = 4 ; $ b2 = 3 ; echo dist ( $ m , $ b1 , $ b2 ) ; ? >"}
{"text":"Function to find the normal of the straight line","code":"< ? php function normal ( $ m , $ n ) {"}
{"text":"Length of the normal","code":"$ N = ( abs ( $ m ) * abs ( $ n ) ) \/ sqrt ( ( abs ( $ m ) * abs ( $ m ) ) + ( abs ( $ n ) * abs ( $ n ) ) ) ; return $ N ; }"}
{"text":"Driver code","code":"$ m = -5 ; $ n = 3 ; echo normal ( $ m , $ n ) ; ? >"}
{"text":"Function that returns true if it is possible to form a polygon with the given sides","code":"< ? php function isPossible ( $ a , $ n ) {"}
{"text":"Sum stores the sum of all the sides and maxS stores the length of the largest side","code":"$ sum = 0 ; $ maxS = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum += $ a [ $ i ] ; $ maxS = max ( $ a [ $ i ] , $ maxS ) ; }"}
{"text":"If the length of the largest side is less than the sum of the other remaining sides","code":"if ( ( $ sum - $ maxS ) > $ maxS ) return true ; return false ; }"}
{"text":"Driver code","code":"$ a = array ( 2 , 3 , 4 ) ; $ n = count ( $ a ) ; if ( isPossible ( $ a , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to return the area of the shaded region","code":"< ? php function findAreaShaded ( $ a ) {"}
{"text":"Area of the square","code":"$ sqArea = $ a * $ a ;"}
{"text":"Area of the semicircle","code":"$ semiCircleArea = ( 3.14 * ( $ a * $ a ) \/ 8 ) ;"}
{"text":"There are 4 semicircles shadedArea = Area of 4 semicircles - Area of square","code":"$ ShadedArea = 4 * $ semiCircleArea - $ sqArea ; return $ ShadedArea ; }"}
{"text":"Driver code","code":"$ a = 10 ; echo findAreaShaded ( $ a ) ; ? >"}
{"text":"Function to return the required position","code":"< ? php function countSteps ( $ x , $ y ) { if ( $ x < $ y ) { return $ x + $ y + 2 * ( ( $ y - $ x ) \/ 2 ) ; } else { return $ x + $ y + 2 * ( ( ( $ x - $ y ) + 1 ) \/ 2 ) ; } }"}
{"text":"Driver Code","code":"$ x = 4 ; $ y = 3 ; echo ( countSteps ( $ x , $ y ) ) ; ? >"}
{"text":"Find if slope is good with only two intercept","code":"< ? php function isSlopeGood ( $ slope , $ arr , $ n ) { $ setOfLines = array_fill ( 0 , max ( $ arr ) * $ n , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ setOfLines [ $ arr [ $ i ] - $ slope * $ i ] = 1 ; $ setOfLines = array_unique ( $ setOfLines ) ;"}
{"text":"if set of lines have only two distinct intercept","code":"return ( count ( $ setOfLines ) == 2 ) ; }"}
{"text":"Function to check if required solution exist","code":"function checkForParallel ( $ arr , $ n ) {"}
{"text":"check the result by processing the slope by starting three points","code":"$ slope1 = isSlopeGood ( $ arr [ 1 ] - $ arr [ 0 ] , $ arr , $ n ) ; $ slope2 = isSlopeGood ( $ arr [ 2 ] - $ arr [ 1 ] , $ arr , $ n ) ; $ slope3 = isSlopeGood ( ( int ) ( ( $ arr [ 2 ] - $ arr [ 0 ] ) \/ 2 ) , $ arr , $ n ) ; return ( $ slope1 $ slope2 $ slope3 ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 6 , 3 , 8 , 5 ) ; $ n = count ( $ arr ) ; echo ( int ) checkForParallel ( $ arr , $ n ) . \" \" ; ? >"}
{"text":"Function that return true if the given point lies on the given line","code":"< ? php function pointIsOnLine ( $ m , $ c , $ x , $ y ) {"}
{"text":"If ( x , y ) satisfies the equation of the line","code":"if ( $ y == ( ( $ m * $ x ) + $ c ) ) return true ; return false ; }"}
{"text":"Driver code","code":"$ m = 3 ; $ c = 2 ; $ x = 1 ; $ y = 5 ; if ( pointIsOnLine ( $ m , $ c , $ x , $ y ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to find the biggest reuleaux triangle","code":"< ? php function Area ( $ a , $ b ) {"}
{"text":"length of the axes cannot be negative","code":"if ( $ a < 0 && $ b < 0 ) return -1 ;"}
{"text":"height of the reuleaux triangle","code":"$ h = sqrt ( ( ( pow ( $ a , 2 ) + pow ( $ b , 2 ) ) \/ ( pow ( $ a , 2 ) * pow ( $ b , 2 ) ) ) ) ;"}
{"text":"area of the reuleaux triangle","code":"$ A = 0.70477 * pow ( $ h , 2 ) ; return $ A ; }"}
{"text":"Driver code","code":"$ a = 5 ; $ b = 4 ; echo round ( Area ( $ a , $ b ) , 7 ) ; ? >"}
{"text":"Function to return the maximum rectangles possible","code":"< ? php function maxRectangles ( $ L , $ B , $ l , $ b ) { $ horizontal = 0 ; $ vertical = 0 ;"}
{"text":"Cut rectangles horizontally if possible","code":"if ( $ l <= $ L && $ b <= $ B ) {"}
{"text":"One rectangle is a single cell","code":"$ columns = ( int ) ( $ B \/ $ b ) ; $ rows = ( int ) ( $ L \/ $ l ) ;"}
{"text":"Total rectangles = total cells","code":"$ horizontal = $ rows * $ columns ; }"}
{"text":"Cut rectangles vertically if possible","code":"if ( $ l <= $ B && $ b <= $ L ) { $ columns = ( int ) ( $ L \/ $ b ) ; $ rows = ( int ) ( $ B \/ $ l ) ; $ vertical = $ rows * $ columns ; }"}
{"text":"Return the maximum possible rectangles","code":"return max ( $ horizontal , $ vertical ) ; }"}
{"text":"Driver code","code":"$ L = 10 ; $ B = 7 ; $ l = 4 ; $ b = 3 ; print ( maxRectangles ( $ L , $ B , $ l , $ b ) ) ; ? >"}
{"text":"Function to find the biggest right circular cone","code":"< ? php function cone ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"radius of right circular cone","code":"$ r = ( $ a * sqrt ( 2 ) ) \/ 3 ;"}
{"text":"height of right circular cone","code":"$ h = ( 2 * $ a ) \/ 3 ;"}
{"text":"volume of right circular cone","code":"$ V = 3.14 * pow ( $ r , 2 ) * $ h ; return $ V ; }"}
{"text":"Driver code","code":"$ a = 5 ; echo round ( cone ( $ a ) , 4 ) ; ? >"}
{"text":"Function to find the biggest reuleaux triangle","code":"< ? php function Area ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"height of the reuleaux triangle","code":"$ h = 1.268 * $ a ;"}
{"text":"area of the reuleaux triangle","code":"$ A = 0.70477 * pow ( $ h , 2 ) ; return $ A ; }"}
{"text":"Driver code","code":"$ a = 5 ; echo round ( Area ( $ a ) , 4 ) ; ? >"}
{"text":"Function to find the biggest reuleaux triangle","code":"< ? php function Area ( $ r ) {"}
{"text":"radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"height of the reuleaux triangle","code":"$ x = ( 2 * $ r ) \/ sqrt ( 5 ) ;"}
{"text":"area of the reuleaux triangle","code":"$ A = 0.70477 * pow ( $ x , 2 ) ; return $ A ; }"}
{"text":"Driver code","code":"$ r = 5 ; echo Area ( $ r ) ; ? >"}
{"text":"Function to find the biggest reuleaux triangle","code":"< ? php function Area ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"height of the reuleaux triangle","code":"$ x = 0.464 * $ a ;"}
{"text":"area of the reuleaux triangle","code":"$ A = 0.70477 * pow ( $ x , 2 ) ; return $ A ; }"}
{"text":"Driver code","code":"$ a = 5 ; echo Area ( $ a ) . \" STRNEWLINE \" ;"}
{"text":"Function to calculate area of square after given number of folds","code":"< ? php function areaSquare ( $ side , $ fold ) { $ area = $ side * $ side ; return $ area * 1.0 \/ pow ( 2 , $ fold ) ; }"}
{"text":"Driver Code","code":"$ side = 4 ; $ fold = 2 ; echo areaSquare ( $ side , $ fold ) ; ? >"}
{"text":"Function to find the Area of the Reuleaux triangle","code":"< ? php function ReuleauxArea ( $ r ) {"}
{"text":"radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"Area of the Reuleaux triangle","code":"$ A = 0.70477 * 2 * pow ( $ r , 2 ) ; return $ A ; }"}
{"text":"Driver code","code":"$ r = 6 ; echo ReuleauxArea ( $ r ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the biggest right circular cylinder","code":"< ? php function cyl ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"radius of right circular cylinder","code":"$ r = ( 2 * $ a * sqrt ( 2 ) ) \/ 3 ;"}
{"text":"height of right circular cylinder","code":"$ h = ( 2 * $ a ) \/ 3 ;"}
{"text":"volume of right circular cylinder","code":"$ V = 3.14 * pow ( $ r , 2 ) * $ h ; return $ V ; }"}
{"text":"Driver code","code":"$ a = 5 ; echo cyl ( $ a ) ; ? >"}
{"text":"Function to find the biggest reuleaux triangle","code":"< ? php function Area ( $ l , $ b , $ h ) {"}
{"text":"the height or base or hypotenuse cannot be negative","code":"if ( $ l < 0 or $ b < 0 or $ h < 0 ) return -1 ;"}
{"text":"height of the reuleaux triangle","code":"$ x = ( $ l * $ b ) \/ ( $ l + $ b ) ;"}
{"text":"area of the reuleaux triangle","code":"$ A = 0.70477 * pow ( $ x , 2 ) ; return $ A ; }"}
{"text":"Driver code","code":"$ l = 5 ; $ b = 12 ; $ h = 13 ; echo Area ( $ l , $ b , $ h ) ; ? >"}
{"text":"Function to find the side of the square","code":"< ? php function squareSide ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"side of the square","code":"$ x = 0.423 * $ a ; return $ x ; }"}
{"text":"Driver code","code":"$ a = 8 ; echo squareSide ( $ a ) ; ? >"}
{"text":"Function that returns true if a straight line is possible","code":"< ? php function isPossible ( $ x , $ y , $ z ) { $ a = round ( $ x * $ x + $ y * $ y + $ z * $ z ) ; if ( ceil ( $ a ) == 1 && floor ( $ a ) == 1 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ l = 0.70710678 ; $ m = 0.5 ; $ n = 0.5 ; if ( isPossible ( $ l , $ m , $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ;"}
{"text":"Function to find the diagonal of a regular polygon","code":"< ? php function polydiagonal ( $ n , $ a ) {"}
{"text":"Side and side length cannot be negative","code":"if ( $ a < 0 && $ n < 0 ) return -1 ;"}
{"text":"diagonal degree converted to radians","code":"return 2 * $ a * sin ( ( ( ( $ n - 2 ) * 180 ) \/ ( 2 * $ n ) ) * 3.14159 \/ 180 ) ; }"}
{"text":"Driver code","code":"$ a = 9 ; $ n = 10 ; echo polydiagonal ( $ n , $ a ) ; ? >"}
{"text":"Function to return the diagonal of a regular decagon","code":"< ? php function decdiagonal ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Length of the diagonal","code":"$ d = 1.902 * $ a ; return $ d ; }"}
{"text":"Driver code","code":"$ a = 9 ; echo decdiagonal ( $ a ) ; ? >"}
{"text":"Function to return the diagonal of a regular heptagon","code":"< ? php function heptdiagonal ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Length of the diagonal","code":"$ d = 1.802 * $ a ; return $ d ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo heptdiagonal ( $ a ) ;"}
{"text":"Function to find the diagonal of a regular hexagon","code":"< ? php function hexDiagonal ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Length of the diagonal","code":"$ d = 1.73 * $ a ; return $ d ; }"}
{"text":"Driver code","code":"$ a = 9 ; echo hexDiagonal ( $ a ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the Area of the Reuleaux triangle","code":"< ? php function ReuleauxArea ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Area of the Reuleaux triangle","code":"$ A = 0.70477 * pow ( $ a , 2 ) ; return $ A ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo ReuleauxArea ( $ a ) ;"}
{"text":"Function to find the area of the square","code":"< ? php function squareArea ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Area of the square","code":"$ area = pow ( 1.268 , 2 ) * pow ( $ a , 2 ) ; return $ area ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo squareArea ( $ a ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to calculate Volume","code":"< ? php function CubeVolume ( $ d ) { $ Volume ;"}
{"text":"Formula to find Volume","code":"$ Volume = ( sqrt ( 3 ) * pow ( $ d , 3 ) ) \/ 9 ; return $ Volume ; }"}
{"text":"space diagonal of Cube","code":"$ d = 5 ; echo \" Volume \u2581 of \u2581 Cube : \u2581 \" , CubeVolume ( $ d ) ; ? >"}
{"text":"Function to find the perimeter","code":"< ? php function per ( $ a , $ b ) { return ( $ a + $ b ) ; }"}
{"text":"Function to find the area","code":"function area ( $ s ) { return ( $ s \/ 2 ) ; }"}
{"text":"Driver code","code":"$ a = 7 ; $ b = 8 ; $ s = 10 ; echo ( per ( $ a , $ b ) \" \" ) ; echo \" STRNEWLINE \" ; echo ( area ( $ s ) ) ; ? >"}
{"text":"PHP program to find the area of leaf inside a square","code":"< ? php $ PI = 3.14159265 ;"}
{"text":"Function to find area of leaf","code":"function area_leaf ( $ a ) { global $ PI ; return ( $ a * $ a * ( $ PI \/ 2 - 1 ) ) ; }"}
{"text":"Driver code","code":"$ a = 7 ; echo ( area_leaf ( $ a ) ) ; ? >"}
{"text":"PHP program to find the length of rope","code":"< ? php $ PI = 3.14159265 ;"}
{"text":"Function to find the length of rope","code":"function length_rope ( $ r ) { global $ PI ; return ( ( 2 * $ PI * $ r ) + 6 * $ r ) ; }"}
{"text":"Driver code","code":"$ r = 7 ; echo ( length_rope ( $ r ) ) ; ? >"}
{"text":"PHP program to find the area of inscribed circle of right angled triangle","code":"< ? php $ PI = 3.14159265 ;"}
{"text":"Function to find area of inscribed circle","code":"function area_inscribed ( $ P , $ B , $ H ) { global $ PI ; return ( ( $ P + $ B - $ H ) * ( $ P + $ B - $ H ) * ( $ PI \/ 4 ) ) ; }"}
{"text":"Driver code","code":"$ P = 3 ; $ B = 4 ; $ H = 5 ; echo ( area_inscribed ( $ P , $ B , $ H ) ) ; ? >"}
{"text":"PHP program to find the area of Cicumscribed circle of right angled triangle","code":"< ? php $ PI = 3.14159265 ;"}
{"text":"Function to find area of circumscribed circle","code":"function area_circumscribed ( $ c ) { global $ PI ; return ( $ c * $ c * ( $ PI \/ 4 ) ) ; }"}
{"text":"Driver code","code":"$ c = 8 ; echo ( area_circumscribed ( $ c ) ) ; ? >"}
{"text":"Function to find the biggest right circular cylinder","code":"< ? php function cyl ( $ r , $ h ) {"}
{"text":"radius and height cannot be negative","code":"if ( $ r < 0 && $ h < 0 ) return -1 ;"}
{"text":"radius of right circular cylinder","code":"$ R = ( int ) ( 2 * $ r ) \/ 3 ;"}
{"text":"height of right circular cylinder","code":"$ H = ( int ) ( 2 * $ h ) \/ 3 ;"}
{"text":"volume of right circular cylinder","code":"$ V = 3.14 * pow ( $ R , 2 ) * $ H ; return $ V ; }"}
{"text":"Driver code","code":"$ r = 4 ; $ h = 8 ; echo cyl ( $ r , $ h ) ; ? >"}
{"text":"Function to find the volume of the cube","code":"< ? php function cube ( $ h , $ r ) {"}
{"text":"height and radius cannot be negative","code":"if ( $ h < 0 && $ r < 0 ) return -1 ;"}
{"text":"volume of the cube","code":"$ a = pow ( $ h , 3 ) ; return $ a ; }"}
{"text":"Driver code","code":"$ h = 5 ; $ r = 4 ; echo cube ( $ h , $ r ) ; ? >"}
{"text":"Function to find the biggest sphere","code":"< ? php function sph ( $ r , $ h ) {"}
{"text":"radius and height cannot be negative","code":"if ( $ r < 0 && $ h < 0 ) return -1 ;"}
{"text":"radius of sphere","code":"$ R = $ r ; return $ R ; }"}
{"text":"Driver code","code":"$ r = 4 ; $ h = 8 ; echo sph ( $ r , $ h ) ; ? >"}
{"text":"Function to find the biggest right circular cylinder","code":"< ? php function cyl ( $ R ) {"}
{"text":"radius cannot be negative","code":"if ( $ R < 0 ) return -1 ;"}
{"text":"volume of cylinder","code":"$ V = ( 2 * 3.14 * pow ( $ R , 3 ) ) \/ ( 3 * sqrt ( 3 ) ) ; return $ V ; }"}
{"text":"Driver code","code":"$ R = 4 ; echo cyl ( $ R ) ; ? >"}
{"text":"Function to find the side of the cube","code":"< ? php function rod ( $ h , $ r ) {"}
{"text":"height and radius cannot be negative","code":"if ( $ h < 0 && $ r < 0 ) return -1 ;"}
{"text":"length of rod","code":"$ l = sqrt ( pow ( $ h , 2 ) + 4 * pow ( $ r , 2 ) ) ; return $ l ; }"}
{"text":"Driver code","code":"$ h = 4 ; $ r = 1.5 ; echo rod ( $ h , $ r ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to find the area of inscribed circle of equilateral triangle","code":"< ? php $ PI = 3.14159265 ;"}
{"text":"function to find area of inscribed circle","code":"function area_inscribed ( $ a ) { global $ PI ; return ( $ a * $ a * ( $ PI \/ 12 ) ) ; }"}
{"text":"function to find perimeter of inscribed circle","code":"function perm_inscribed ( $ a ) { global $ PI ; return ( $ PI * ( $ a \/ sqrt ( 3 ) ) ) ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo ( \" Area \u2581 of \u2581 inscribed \u2581 circle \u2581 is \u2581 : \" ) ; echo ( area_inscribed ( $ a ) ) ; echo ( \" Perimeter \u2581 of \u2581 inscribed \u2581 circle \u2581 is \u2581 : \" ) ; echo ( perm_inscribed ( $ a ) ) ; ? >"}
{"text":"Function to find the side of the cube","code":"< ? php function cubeSide ( $ h , $ r ) {"}
{"text":"height and radius cannot be negative","code":"if ( $ h < 0 && $ r < 0 ) return -1 ;"}
{"text":"side of the cube","code":"$ a = ( $ h * $ r * sqrt ( 2 ) ) \/ ( $ h + sqrt ( 2 ) * $ r ) ; return $ a ; }"}
{"text":"Driver code","code":"$ h = 5 ; $ r = 6 ; echo cubeSide ( $ h , $ r ) ; ? >"}
{"text":"Function to find the radius of the cone","code":"< ? php function coner ( $ R ) {"}
{"text":"radius cannot be negative","code":"if ( $ R < 0 ) return -1 ;"}
{"text":"radius of the cone","code":"$ r = ( 2 * sqrt ( 2 ) * $ R ) \/ 3 ; return $ r ; }"}
{"text":"Function to find the height of the cone","code":"function coneh ( $ R ) {"}
{"text":"side cannot be negative","code":"if ( $ R < 0 ) return -1 ;"}
{"text":"height of the cone","code":"$ h = ( 4 * $ R ) \/ 3 ; return $ h ; }"}
{"text":"Driver code","code":"$ R = 10 ; echo ( \" r \u2581 = \u2581 \" ) ; echo coner ( $ R ) ; echo ( \" , \u2581 \" ) ; echo ( \" h \u2581 = \u2581 \" ) ; echo ( coneh ( $ R ) ) ; ? >"}
{"text":"Function to find the radius of the cone","code":"< ? php function coneRadius ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"radius of the cone","code":"$ r = $ a \/ sqrt ( 2 ) ; return $ r ; }"}
{"text":"Function to find the height of the cone","code":"function coneHeight ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"height of the cone","code":"$ h = $ a ; return $ h ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo ( \" r \u2581 = \u2581 \" ) ; echo coneRadius ( $ a ) ; echo ( \" , \u2581 \" ) ; echo ( \" h \u2581 = \u2581 \" ) ; echo ( coneHeight ( $ a ) ) ; ? >"}
{"text":"Function to find the side of the cube","code":"< ? php function largestCube ( $ r ) {"}
{"text":"radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"side of the cube","code":"$ a = ( float ) ( ( 2 * $ r ) \/ sqrt ( 3 ) ) ; return $ a ; }"}
{"text":"Driver code","code":"$ r = 5 ; echo largestCube ( $ r ) ; ? >"}
{"text":"Function to find the radius of the sphere","code":"< ? php function sphere ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"radius of the sphere","code":"$ r = ( $ a \/ 2 ) ; return $ r ; }"}
{"text":"Driver code","code":"$ a = 5 ; echo sphere ( $ a ) ; ? >"}
{"text":"function that calculates the maximum no . of cuts","code":"< ? php function numberOfCuts ( $ M , $ N ) { $ result = 0 ; $ result = ( $ M - 1 ) * ( $ N - 1 ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ M = 4 ; $ N = 4 ;"}
{"text":"Calling function .","code":"$ Cuts = numberOfCuts ( $ M , $ N ) ; echo \" Maximum \u2581 cuts \u2581 = \u2581 \" , $ Cuts ; ? >"}
{"text":"function to return maximum volume","code":"< ? php function maxVol ( $ P , $ A ) {"}
{"text":"calculate length","code":"$ l = ( $ P - sqrt ( $ P * $ P - 24 * $ A ) ) \/ 12 ;"}
{"text":"calculate volume","code":"$ V = $ l * ( $ A \/ 2.0 - $ l * ( $ P \/ 4.0 - $ l ) ) ;"}
{"text":"return result","code":"return $ V ; }"}
{"text":"Driver code","code":"$ P = 20 ; $ A = 16 ;"}
{"text":"Function call","code":"echo maxVol ( $ P , $ A ) ; ? >"}
{"text":"calculate area and perimeter of a rhombus","code":"< ? php function rhombusAreaPeri ( $ d1 , $ d2 ) { $ area = ( $ d1 * $ d2 ) \/ 2 ; $ perimeter = 2 * sqrt ( pow ( $ d1 , 2 ) + pow ( $ d2 , 2 ) ) ; echo \" The \u2581 area \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \u2581 \" . $ d1 . \" \u2581 and \u2581 \" . $ d2 . \" \u2581 is \u2581 \" . $ area . \" . \" . \" STRNEWLINE \" ; echo \" The \u2581 perimeter \u2581 of \u2581 rhombus \u2581 with \u2581 diagonals \u2581 \" . $ d1 . \" \u2581 and \u2581 \" . $ d2 . \" \u2581 is \u2581 \" . $ perimeter . \" . \" . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ d1 = 2 ; $ d2 = 4 ; rhombusAreaPeri ( $ d1 , $ d2 ) ; ? >"}
{"text":"Function to find the area of the decagon","code":"< ? php function area ( $ r ) {"}
{"text":"radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"area of the decagon","code":"$ area = ( 5 * pow ( $ r , 2 ) * ( 3 - sqrt ( 5 ) ) * ( sqrt ( 5 ) + ( 2 * sqrt ( 5 ) ) ) ) \/ 4 ; return $ area ; }"}
{"text":"Driver code","code":"$ r = 8 ; echo area ( $ r ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to find max area","code":"< ? php function maxArea ( $ perimeter ) { $ length = ( int ) ceil ( $ perimeter \/ 4 ) ; $ breadth = ( int ) floor ( $ perimeter \/ 4 ) ;"}
{"text":"return area","code":"return ( $ length * $ breadth ) ; }"}
{"text":"Driver code","code":"$ n = 38 ; echo \" Maximum \u2581 Area \u2581 = \u2581 \" , maxArea ( $ n ) ; ? >"}
{"text":"Function to find foot of perpendicular","code":"< ? php function foot ( $ a , $ b , $ c , $ d , $ x1 , $ y1 , $ z1 ) { $ k = ( - $ a * $ x1 - $ b * $ y1 - $ c * $ z1 - $ d ) \/ ( $ a * $ a + $ b * $ b + $ c * $ c ) ; $ x2 = $ a * $ k + $ x1 ; $ y2 = $ b * $ k + $ y1 ; $ z2 = $ c * $ k + $ z1 ; echo \" x2 = \" \u2581 . \u2581 round ( $ x2 , \u2581 1 ) ; STRNEWLINE echo \u2581 \" y2 = \" \u2581 . \u2581 round ( $ y2 , \u2581 1 ) ; STRNEWLINE echo \u2581 \" z2 = \" }"}
{"text":"Driver Code","code":"$ a = 1 ; $ b = -2 ; $ c = 0 ; $ d = 0 ; $ x1 = -1 ; $ y1 = 3 ; $ z1 = 4 ;"}
{"text":"function call","code":"foot ( $ a , $ b , $ c , $ d , $ x1 , $ y1 , $ z1 ) ; ? >"}
{"text":"PHP program to find minimum number of squares to make a given rectangle .","code":"< ? php function gcd ( $ a , $ b ) { return $ b ? gcd ( $ b , $ a % $ b ) : $ a ; } function countRectangles ( $ l , $ w ) {"}
{"text":"if we take gcd ( l , w ) , this will be largest possible side for square , hence minimum number of square .","code":"$ squareSide = gcd ( $ l , $ w ) ;"}
{"text":"Number of squares .","code":"return ( $ l * $ w ) \/ ( $ squareSide * $ squareSide ) ; }"}
{"text":"Driver code","code":"$ l = 4 ; $ w = 6 ; echo countRectangles ( $ l , $ w ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the equation of circle","code":"< ? php function circle_equation ( $ x1 , $ y1 , $ r ) { $ a = -2 * $ x1 ; $ b = -2 * $ y1 ; $ c = ( $ r * $ r ) - ( $ x1 * $ x1 ) - ( $ y1 * $ y1 ) ;"}
{"text":"Printing result","code":"echo \" x ^ 2 + ( \" \u2581 . \u2581 $ a \u2581 . \u2581 \" x ) + \" echo \" y ^ 2 \u2581 + \u2581 ( \" . $ b . \" \u2581 y ) \u2581 = \u2581 \" ; echo $ c . \" . \" . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ x1 = 2 ; $ y1 = -3 ; $ r = 8 ; circle_equation ( $ x1 , $ y1 , $ r ) ; ? >"}
{"text":"Function for calculating the area","code":"< ? php function area ( $ r ) {"}
{"text":"Formula for finding the area","code":"return ( 0.5 ) * ( 3.14 ) * ( $ r * $ r ) ; }"}
{"text":"Function for calculating the perimeter","code":"function perimeter ( $ r ) {"}
{"text":"Formula for finding the perimeter","code":"return ( 3.14 ) * ( $ r ) ; }"}
{"text":"Get the radius","code":"$ r = 10 ;"}
{"text":"Find the area","code":"echo \" The \u2581 Area \u2581 of \u2581 Semicircle : \u2581 \" , area ( $ r ) , \" STRNEWLINE \" ;"}
{"text":"Find the perimeter","code":"echo \" The \u2581 Perimeter \u2581 of \u2581 Semicircle : \u2581 \" , perimeter ( $ r ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to check the equilibrium of three vectors","code":"< ? php function checkEquilibrium ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 , $ x3 , $ y3 , $ z3 ) {"}
{"text":"summing the x coordinates","code":"$ resx = $ x1 + $ x2 + $ x3 ;"}
{"text":"summing the y coordinates","code":"$ resy = $ y1 + $ y2 + $ y3 ;"}
{"text":"summing the z coordinates","code":"$ resz = $ z1 + $ z2 + $ z3 ;"}
{"text":"Checking the condition for equilibrium","code":"if ( $ resx == 0 and $ resy == 0 and $ resz == 0 ) return true ; else return false ; }"}
{"text":"Driver code","code":"$ x1 = -2 ; $ y1 = -7 ; $ z1 = -9 ; $ x2 = 5 ; $ y2 = -14 ; $ z2 = 14 ; $ x3 = -3 ; $ y3 = 21 ; $ z3 = -5 ;"}
{"text":"Checking for equilibrium","code":"if ( checkEquilibrium ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 , $ x3 , $ y3 , $ z3 ) ) echo \" The \u2581 vectors \u2581 are \u2581 at \u2581 equilibrium . \" ; else echo \" The \u2581 vectors \u2581 are \u2581 not \u2581 at \u2581 equilibrium . \" ; ? >"}
{"text":"function for find Tangent","code":"< ? php function findTangent ( $ A , $ x , $ y ) {"}
{"text":"differentiate given equation","code":"$ dif = $ A - $ x * 2 ;"}
{"text":"check that point on the curve or not","code":"if ( $ y == ( 2 * $ x - $ x * $ x ) ) {"}
{"text":"if differentiate is negative","code":"if ( $ dif < 0 ) echo \" y = \" , \u2581 $ dif \u2581 , \u2581 \" x \" ( $ x * $ dif ) + ( $ y ) ; else if ( $ dif > 0 )"}
{"text":"differentiate is positive","code":"echo \" y = \" $ dif , \" x + \" , - $ x * $ dif + $ y ;"}
{"text":"differentiate is zero","code":"else echo \" Not \u2581 possible \" ; } }"}
{"text":"declare variable","code":"$ A = 2 ; $ x = 2 ; $ y = 0 ;"}
{"text":"call function findTangent","code":"findTangent ( $ A , $ x , $ y ) ; ? >"}
{"text":"Function to find the diagonal of the hexagon","code":"< ? php function hexadiagonal ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"diagonal of the hexagon","code":"return 2 * $ a ; }"}
{"text":"Driver code","code":"$ a = 4 ; echo hexadiagonal ( $ a ) ; ? >"}
{"text":"Function to find the side of the octagon","code":"< ? php function octaside ( $ a ) {"}
{"text":"side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"side of the octagon","code":"$ s = $ a \/ ( sqrt ( 2 ) + 1 ) ; return $ s ; }"}
{"text":"Get he square side","code":"$ a = 4 ;"}
{"text":"Find the side length of the square","code":"echo octaside ( $ a ) ; ? >"}
{"text":"Function to check whether it is possible or not to move from ( 0 , 0 ) to ( x , y ) in exactly n steps","code":"< ? php function Arrive ( $ a , $ b , $ n ) { if ( $ n >= abs ( $ a ) + abs ( $ b ) and ( $ n - ( abs ( $ a ) + abs ( $ b ) ) ) % 2 == 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ a = 5 ; $ b = 5 ; $ n = 11 ; if ( Arrive ( $ a , $ b , $ n ) ) echo \" Yes \" ; else echo \" No \" ;"}
{"text":"Function to check if it is possible","code":"< ? php function Move ( $ a , $ x , $ b ) { if ( ( ( ( $ b - $ a ) % $ x == 0 ) || ( ( $ b - $ a - 1 ) % $ x == 0 ) && $ a + 1 != $ b ) && $ b >= $ a ) return true ; return false ; }"}
{"text":"Driver code","code":"$ a = 3 ; $ x = 2 ; $ b = 7 ;"}
{"text":"function call","code":"if ( Move ( $ a , $ x , $ b ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to find the area of the triangle","code":"< ? php function area ( $ a , $ b ) {"}
{"text":"length of a and b cannot be negative","code":"if ( $ a < 0 $ b < 0 ) return -1 ;"}
{"text":"area of the triangle","code":"$ A = $ a * $ b ; return $ A ; }"}
{"text":"Driver code","code":"$ a = 5 ; $ b = 2 ; echo area ( $ a , $ b ) ; ? >"}
{"text":"Function to find the radius of the circumcircle","code":"< ? php function findRadiusOfcircumcircle ( $ l , $ b ) {"}
{"text":"the sides cannot be negative","code":"if ( $ l < 0 $ b < 0 ) return -1 ;"}
{"text":"Radius of the circumcircle","code":"$ radius = sqrt ( pow ( $ l , 2 ) + pow ( $ b , 2 ) ) \/ 2 ;"}
{"text":"Return the radius","code":"return $ radius ; }"}
{"text":"Get the sides of the triangle","code":"$ l = 4 ; $ b = 3 ;"}
{"text":"Find the radius of the circumcircle","code":"echo findRadiusOfcircumcircle ( $ l , $ b ) ; ? >"}
{"text":"Function to find the area of the circumcircle","code":"< ? php function circlearea ( $ a , $ b , $ c ) {"}
{"text":"the sides cannot be negative","code":"if ( $ a < 0 $ b < 0 $ c < 0 ) return -1 ;"}
{"text":"semi - perimeter of the circle","code":"$ p = ( $ a + $ b + $ c ) \/ 2 ;"}
{"text":"area of triangle","code":"$ At = sqrt ( $ p * ( $ p - $ a ) * ( $ p - $ b ) * ( $ p - $ c ) ) ;"}
{"text":"area of the circle","code":"$ A = 3.14 * pow ( ( ( $ a * $ b * $ c ) \/ ( 4 * $ At ) ) , 2 ) ; return $ A ; }"}
{"text":"Get the sides of the triangle","code":"$ a = 4 ; $ b = 5 ; $ c = 3 ;"}
{"text":"Find and print the area of the circumcircle","code":"echo circlearea ( $ a , $ b , $ c ) ; ? >"}
{"text":"function to find the altitude","code":"< ? php function altitude ( $ a , $ b ) {"}
{"text":"return altitude","code":"return sqrt ( pow ( $ a , 2 ) - ( pow ( $ b , 2 ) \/ 4 ) ) ; }"}
{"text":"function to find the area","code":"function area ( $ b , $ h ) {"}
{"text":"return area","code":"return ( 1 * $ b * $ h ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 3 ; $ h = altitude ( $ a , $ b ) ; echo \" Altitude = \" \u2581 , \u2581 $ h \u2581 , \u2581 \" , \" echo \" Area \u2581 = \u2581 \" , area ( $ b , $ h ) ; ? >"}
{"text":"function to find the surface area","code":"< ? php function surfaceArea ( $ b , $ s ) { return 2 * $ b * $ s + pow ( $ b , 2 ) ; }"}
{"text":"Driver Code","code":"$ b = 3 ; $ s = 4 ;"}
{"text":"surface area of the square pyramid","code":"echo surfaceArea ( $ b , $ s ) ; ? >"}
{"text":"Function to find the area of the triangle","code":"< ? php function trianglearea ( $ l , $ b ) {"}
{"text":"a and b cannot be negative","code":"if ( $ l < 0 or $ b < 0 ) return -1 ;"}
{"text":"area of the triangle","code":"$ area = ( $ l * $ b ) \/ 2 ; return $ area ; }"}
{"text":"Driver code","code":"$ l = 5 ; $ b = 4 ; echo trianglearea ( $ l , $ b ) ; ? >"}
{"text":"function to check if it 's possible to divide the square in two equal parts","code":"< ? php function halfsquare ( $ n , $ x , $ y ) { $ half = $ n \/ 2 ;"}
{"text":"if the painted square is linked anyway to the center of the square then it 's  not possible","code":"if ( ( $ half == $ x $ half == $ x - 1 ) && ( $ half == $ y $ half == $ y - 1 ) ) echo \" NO \" ;"}
{"text":"else yes it 's possible","code":"else echo \" YES \" ; }"}
{"text":"initialize the size of the square","code":"$ n = 100 ;"}
{"text":"initialize the dimension of the painted square","code":"$ x = 51 ; $ y = 100 ; halfsquare ( $ n , $ x , $ y ) ; ? >"}
{"text":"function to check if vector B is possible from vector A","code":"< ? php function check ( $ a , $ b , $ p , $ q ) { $ d = $ p * $ p + $ q * $ q ;"}
{"text":"if d = 0 , then you need to add nothing to vector A","code":"if ( $ d == 0 ) return ( $ a == 0 && $ b == 0 ) ; else return ( ( $ a * $ p + $ b * $ q ) % $ d == 0 && ( $ b * $ p - $ a * $ q ) % $ d == 0 ) ; } function check1 ( $ a , $ b , $ x , $ y , $ p , $ q ) {"}
{"text":"for all four quadrants","code":"if ( check ( $ a - $ x , $ b - $ y , $ p , $ q ) || check ( $ a + $ x , $ b + $ y , $ p , $ q ) || check ( $ a - $ y , $ b + $ x , $ p , $ q ) || check ( $ a + $ y , $ b - $ x , $ p , $ q ) ) return true ; else return false ; }"}
{"text":"initialize all three vector coordinates","code":"$ a = -4 ; $ b = -2 ; $ x = 0 ; $ y = 0 ; $ p = -2 ; $ q = -1 ; if ( check1 ( $ a , $ b , $ x , $ y , $ p , $ q ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to find the area of the triangle","code":"< ? php function trianglearea ( $ a , $ b ) {"}
{"text":"a and b cannot be negative","code":"if ( $ a < 0 $ b < 0 ) return -1 ;"}
{"text":"area of the triangle","code":"$ area = ( 3 * sqrt ( 3 ) * pow ( $ a , 2 ) ) \/ ( 4 * $ b ) ; return $ area ; }"}
{"text":"Driver code","code":"$ a = 4 ; $ b = 2 ; echo trianglearea ( $ a , $ b ) ; ? >"}
{"text":"Function to find the area of the square","code":"< ? php function squarearea ( $ a , $ b ) {"}
{"text":"a and b cannot be negative","code":"if ( $ a < 0 or $ b < 0 ) return -1 ;"}
{"text":"area of the square","code":"$ area = 4 * ( ( ( pow ( $ a , 2 ) + pow ( $ b , 2 ) ) \/ ( pow ( $ a , 2 ) * pow ( $ b , 2 ) ) ) ) ; return $ area ; }"}
{"text":"Driver code","code":"$ a = 4 ; $ b = 2 ; print ( squarearea ( $ a , $ b ) ) ; ? >"}
{"text":"Function to find the area of the triangle","code":"< ? php function trianglearea ( $ r ) {"}
{"text":"the radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"area of the triangle","code":"return $ r * $ r ; }"}
{"text":"Driver code","code":"$ r = 5 ; echo trianglearea ( $ r ) ; ? >"}
{"text":"Function to find the area of the square","code":"< ? php function squarearea ( $ r ) {"}
{"text":"the radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"area of the square","code":"$ a = 4 * ( pow ( $ r , 2 ) \/ 5 ) ; return $ a ; }"}
{"text":"Driver code","code":"$ r = 5 ; echo squarearea ( $ r ) ; ? >"}
{"text":"Function to find the area of the rectangle","code":"< ? php function rectanglearea ( $ a , $ b ) {"}
{"text":"a and b cannot be negative","code":"if ( $ a < 0 or $ b < 0 ) return -1 ;"}
{"text":"area of the rectangle","code":"return 2 * $ a * $ b ; }"}
{"text":"Driver code","code":"$ a = 10 ; $ b = 8 ; echo rectanglearea ( $ a , $ b ) ; ? >"}
{"text":"Function to find the area of the biggest square","code":"< ? php function squareArea ( $ l , $ b , $ h ) {"}
{"text":"the height or base or hypotenuse cannot be negative","code":"if ( $ l < 0 $ b < 0 $ h < 0 ) return -1 ;"}
{"text":"side of the square","code":"$ a = ( $ l * $ b ) \/ ( $ l + $ b ) ;"}
{"text":"squaring to get the area","code":"return $ a * $ a ; }"}
{"text":"Driver code","code":"$ l = 5 ; $ b = 12 ; $ h = 13 ; echo round ( squareArea ( $ l , $ b , $ h ) , 4 ) ; ? >"}
{"text":"PHP implementation of above approach","code":"< ? php $ MAX = 50 ;"}
{"text":"Print the answer to each query","code":"function solveQuery ( $ n , $ q , & $ qi , & $ qj ) { global $ MAX ; $ arr = array_fill ( 0 , $ MAX , NULL ) ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ arr [ $ i ] = 0 ; for ( $ k = 0 ; $ k < $ q ; $ k ++ ) {"}
{"text":"setting the flag for exception","code":"$ flag = 0 ;"}
{"text":"replacing the greater element in i and j","code":"if ( $ qj [ $ k ] < $ qi [ $ k ] ) { $ temp = $ qi [ $ k ] ; $ qi [ $ k ] = $ qj [ $ k ] ; $ qj [ $ k ] = $ temp ; }"}
{"text":"checking if that box is not used in previous query .","code":"if ( $ arr [ $ qi [ $ k ] ] != 0 $ arr [ $ qj [ $ k ] ] != 0 ) $ flag = 1 ;"}
{"text":"checking if connecting to the same box","code":"else if ( $ qi [ $ k ] == $ qj [ $ k ] ) $ flag = 1 ; else {"}
{"text":"case 1 : x < i and y lies between i and j","code":"for ( $ i = 1 ; $ i < $ qi [ $ k ] ; $ i ++ ) { if ( $ arr [ $ i ] != 0 && $ arr [ $ i ] < $ qj [ $ k ] && $ qi [ $ k ] < $ arr [ $ i ] ) { $ flag = 1 ; break ; } }"}
{"text":"case 2 : x lies between i and j and y > j","code":"if ( $ flag == 0 ) { for ( $ i = $ qi [ $ k ] + 1 ; $ i < $ qj [ $ k ] ; $ i ++ ) { if ( $ arr [ $ i ] != 0 && $ arr [ $ i ] > $ qj [ $ k ] ) { $ flag = 1 ; break ; } } } }"}
{"text":"if flag is not reset inbetween .","code":"if ( $ flag == 0 ) { echo \" YES STRNEWLINE \" ; $ arr [ $ qi [ $ k ] ] = $ qj [ $ k ] ; $ arr [ $ qj [ $ k ] ] = $ qi [ $ k ] ; } else echo \" NO STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ n = 10 ; $ q = 7 ; $ qi = array ( 1 , 2 , 2 , 2 , 9 , 10 , 8 ) ; $ qj = array ( 5 , 7 , 3 , 4 , 9 , 9 , 6 ) ; solveQuery ( $ n , $ q , $ qi , $ qj ) ; ? >"}
{"text":"PHP program to find the minimum number of squares to cover the surface of the rectangle with given dimensions","code":"< ? php function squares ( $ l , $ b , $ a ) {"}
{"text":"function to count the number of squares that can cover the surface of the rectangle","code":"return ceil ( $ l \/ ( double ) $ a ) * ceil ( $ b \/ ( double ) $ a ) ; }"}
{"text":"Driver code","code":"$ l = 11 ; $ b = 23 ; $ a = 14 ; echo squares ( $ l , $ b , $ a ) ; ? >"}
{"text":"Recursive function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) {"}
{"text":"Everything divides 0","code":"if ( $ a == 0 $ b == 0 ) return 0 ;"}
{"text":"Base case","code":"if ( $ a == $ b ) return $ a ;"}
{"text":"a is greater","code":"if ( $ a > $ b ) return gcd ( $ a - $ b , $ b ) ; return gcd ( $ a , $ b - $ a ) ; }"}
{"text":"Function to find the area of the smallest square","code":"function squarearea ( $ l , $ b ) {"}
{"text":"the length or breadth or side cannot be negative","code":"if ( $ l < 0 $ b < 0 ) return -1 ;"}
{"text":"LCM of length and breadth","code":"$ n = ( $ l * $ b ) \/ gcd ( $ l , $ b ) ;"}
{"text":"squaring to get the area","code":"return $ n * $ n ; }"}
{"text":"Driver code","code":"$ l = 6 ; $ b = 4 ; echo squarearea ( $ l , $ b ) . \" STRNEWLINE \" ; ? >"}
{"text":"function for finding the angle","code":"< ? php function angle_triangle ( $ x1 , $ x2 , $ x3 , $ y1 , $ y2 , $ y3 , $ z1 , $ z2 , $ z3 ) { $ num = ( $ x2 - $ x1 ) * ( $ x3 - $ x1 ) + ( $ y2 - $ y1 ) * ( $ y3 - $ y1 ) + ( $ z2 - $ z1 ) * ( $ z3 - $ z1 ) ; $ den = sqrt ( pow ( ( $ x2 - $ x1 ) , 2 ) + pow ( ( $ y2 - $ y1 ) , 2 ) + pow ( ( $ z2 - $ z1 ) , 2 ) ) * sqrt ( pow ( ( $ x3 - $ x1 ) , 2 ) + pow ( ( $ y3 - $ y1 ) , 2 ) + pow ( ( $ z3 - $ z1 ) , 2 ) ) ; $ angle = acos ( $ num \/ $ den ) * ( 180.0 \/ 3.141592653589793238463 ) ; return $ angle ; }"}
{"text":"Driver code","code":"$ x1 = -1 ; $ y1 = 3 ; $ z1 = 2 ; $ x2 = 2 ; $ y2 = 3 ; $ z2 = 5 ; $ x3 = 3 ; $ y3 = 5 ; $ z3 = -2 ; $ angle_A = angle_triangle ( $ x1 , $ x2 , $ x3 , $ y1 , $ y2 , $ y3 , $ z1 , $ z2 , $ z3 ) ; $ angle_B = angle_triangle ( $ x2 , $ x3 , $ x1 , $ y2 , $ y3 , $ y1 , $ z2 , $ z3 , $ z1 ) ; $ angle_C = angle_triangle ( $ x3 , $ x2 , $ x1 , $ y3 , $ y2 , $ y1 , $ z3 , $ z2 , $ z1 ) ; echo \" Angles \u2581 are \u2581 : STRNEWLINE \" ; echo \" angle A = \" \u2581 . \u2581 round ( $ angle _ A , \u2581 3 ) \u2581 . \u2581 \" degree \" ; STRNEWLINE echo \u2581 \" angle B = \" \u2581 . \u2581 round ( $ angle _ B , \u2581 3 ) \u2581 . \u2581 \" degree \" ; STRNEWLINE echo \u2581 \" angle C = \" \u2581 . \u2581 round ( $ angle _ C , \u2581 3 ) \u2581 . \u2581 \" degree \" ? >"}
{"text":"Function to find the number of tiles","code":"< ? php function solve ( $ M , $ N , $ s ) {"}
{"text":"if breadth is divisible by side of square","code":"if ( $ N % $ s == 0 ) {"}
{"text":"tiles required is N \/ s","code":"$ N = $ N \/ $ s ; } else {"}
{"text":"one more tile required","code":"$ N = ( $ N \/ $ s ) + 1 ; }"}
{"text":"if length is divisible by side of square","code":"if ( $ M % $ s == 0 ) {"}
{"text":"tiles required is M \/ s","code":"$ M = $ M \/ $ s ; } else {"}
{"text":"one more tile required","code":"$ M = ( $ M \/ $ s ) + 1 ; } return ( int ) $ M * $ N ; }"}
{"text":"input length and breadth of rectangle and side of square","code":"$ N = 12 ; $ M = 13 ; $ s = 4 ; echo solve ( $ M , $ N , $ s ) ; ? >"}
{"text":"Function to find the number of tiles","code":"< ? php function solve ( $ M , $ N , $ s ) {"}
{"text":"no of tiles","code":"$ ans = ( ( int ) ( ceil ( $ M \/ $ s ) ) * ( int ) ( ceil ( $ N \/ $ s ) ) ) ; return $ ans ; }"}
{"text":"input length and breadth of rectangle and side of square","code":"$ N = 12 ; $ M = 13 ; $ s = 4 ; echo solve ( $ M , $ N , $ s ) ; ? >"}
{"text":"Function to find equation of plane .","code":"< ? php function equation_plane ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 , $ x3 , $ y3 , $ z3 ) { $ a1 = $ x2 - $ x1 ; $ b1 = $ y2 - $ y1 ; $ c1 = $ z2 - $ z1 ; $ a2 = $ x3 - $ x1 ; $ b2 = $ y3 - $ y1 ; $ c2 = $ z3 - $ z1 ; $ a = $ b1 * $ c2 - $ b2 * $ c1 ; $ b = $ a2 * $ c1 - $ a1 * $ c2 ; $ c = $ a1 * $ b2 - $ b1 * $ a2 ; $ d = ( - $ a * $ x1 - $ b * $ y1 - $ c * $ z1 ) ; echo sprintf ( \" equation \u2581 of \u2581 the \u2581 plane \u2581 is \u2581 % .2fx \" . \" \u2581 + \u2581 % .2fy \u2581 + \u2581 % .2fz \u2581 + \u2581 % .2f \u2581 = \u2581 0\" , $ a , $ b , $ c , $ d ) ; }"}
{"text":"Driver Code","code":"$ x1 = -1 ; $ y1 = 2 ; $ z1 = 1 ; $ x2 = 0 ; $ y2 = -3 ; $ z2 = 2 ; $ x3 = 1 ; $ y3 = 1 ; $ z3 = -4 ; equation_plane ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 , $ x3 , $ y3 , $ z3 ) ; ? >"}
{"text":"Function to find distance","code":"< ? php function shortest_distance ( $ x1 , $ y1 , $ a , $ b , $ c ) { $ d = abs ( ( $ a * $ x1 + $ b * $ y1 + $ c ) ) \/ ( sqrt ( $ a * $ a + $ b * $ b ) ) ; echo \" Perpendicular \u2581 distance \u2581 is \u2581 \" , $ d ; }"}
{"text":"Driver Code","code":"$ x1 = 5 ; $ y1 = 6 ; $ a = -2 ; $ b = 3 ; $ c = 4 ; shortest_distance ( $ x1 , $ y1 , $ a , $ b , $ c ) ; ? >"}
{"text":"Function to print octant","code":"< ? php function octant ( $ x , $ y , $ z ) { if ( $ x >= 0 && $ y >= 0 && $ z >= 0 ) echo \" Point \u2581 lies \u2581 in \u2581 1st \u2581 octant STRNEWLINE \" ; else if ( $ x < 0 && $ y >= 0 && $ z >= 0 ) echo \" Point \u2581 lies \u2581 in \u2581 2nd \u2581 octant STRNEWLINE \" ; else if ( $ x < 0 && $ y < 0 && $ z >= 0 ) echo \" Point \u2581 lies \u2581 in \u2581 3rd \u2581 octant STRNEWLINE \" ; else if ( $ x >= 0 && $ y < 0 && $ z >= 0 ) echo \" Point \u2581 lies \u2581 in \u2581 4th \u2581 octant STRNEWLINE \" ; else if ( $ x >= 0 && $ y >= 0 && $ z < 0 ) echo \" Point \u2581 lies \u2581 in \u2581 5th \u2581 octant STRNEWLINE \" ; else if ( $ x < 0 && $ y >= 0 && $ z < 0 ) echo \" Point \u2581 lies \u2581 in \u2581 6th \u2581 octant STRNEWLINE \" ; else if ( $ x < 0 && $ y < 0 && $ z < 0 ) echo \" Point \u2581 lies \u2581 in \u2581 7th \u2581 octant STRNEWLINE \" ; else if ( $ x >= 0 && $ y < 0 && $ z < 0 ) echo \" Point \u2581 lies \u2581 in \u2581 8th \u2581 octant STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ x = 2 ; $ y = 3 ; $ z = 4 ; octant ( $ x , $ y , $ z ) ; $ x = -4 ; $ y = 2 ; $ z = -8 ; octant ( $ x , $ y , $ z ) ; $ x = -6 ; $ y = -2 ; $ z = 8 ; octant ( $ x , $ y , $ z ) ; ? >"}
{"text":"Function to find number of triangles in a plane .","code":"< ? php function countNumberOfTriangles ( $ n ) {"}
{"text":"Formula to find number of triangles nC3 = n * ( n - 1 ) * ( n - 2 ) \/ 6","code":"return $ n * ( $ n - 1 ) * ( $ n - 2 ) \/ 6 ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo countNumberOfTriangles ( $ n ) ; ? >"}
{"text":"Function to find nth centered tridecagonal number","code":"< ? php function centeredTridecagonalNum ( $ n ) {"}
{"text":"Formula to calculate nth centered tridecagonal number","code":"return ( 13 * $ n * ( $ n - 1 ) + 2 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo centeredTridecagonalNum ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 10 ; echo centeredTridecagonalNum ( $ n ) ; ? >"}
{"text":"function to get nth Pentagonal pyramidal number .","code":"< ? php function pentagon_pyramidal ( $ n ) { $ sum = 0 ;"}
{"text":"Running loop from 1 to n","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"get nth pentagonal number","code":"$ p = ( 3 * $ i * $ i - $ i ) \/ 2 ;"}
{"text":"add to sum","code":"$ sum = $ sum + $ p ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo pentagon_pyramidal ( $ n ) ; ? >"}
{"text":"function to get nth Pentagonal pyramidal number .","code":"< ? php function pentagon_pyramidal ( $ n ) { return $ n * $ n * ( $ n + 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo pentagon_pyramidal ( $ n ) ; ? >"}
{"text":"Return true if three line are concurrent , else false .","code":"< ? php function checkConcurrent ( $ a1 , $ b1 , $ c1 , $ a2 , $ b2 , $ c2 , $ a3 , $ b3 , $ c3 ) { return ( $ a3 * ( $ b1 * $ c2 - $ b2 * $ c1 ) + $ b3 * ( $ c1 * $ a2 - $ c2 * $ a1 ) + $ c3 * ( $ a1 * $ b2 - $ a2 * $ b1 ) == 0 ) ; }"}
{"text":"Driver Code","code":"$ a1 = 2 ; $ b1 = -3 ; $ c1 = 5 ; $ a2 = 3 ; $ b2 = 4 ; $ c2 = -7 ; $ a3 = 9 ; $ b3 = -5 ; $ c3 = 8 ; if ( checkConcurrent ( $ a1 , $ b1 , $ c1 , $ a2 , $ b2 , $ c2 , $ a3 , $ b3 , $ c3 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"centered octadecagon function","code":"< ? php function center_octadecagon_num ( $ n ) {"}
{"text":"Formula to calculate nth centered octadecagonal number","code":"return ( 9 * $ n * $ n - 9 * $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo $ n , \" th \u2581 centered \u2581 octadecagonal \u2581 \" . \" number \u2581 : \u2581 \" , center_octadecagon_num ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 13 ; echo $ n , \" th \u2581 centered \u2581 octadecagonal \u2581 \" . \" number \u2581 : \u2581 \" , center_octadecagon_num ( $ n ) ; ? >"}
{"text":"Centered decagonal number function","code":"< ? php function centereddecagonalnum ( $ n ) {"}
{"text":"Formula to calculate nth centered decagonal number & return it into main function .","code":"return ( 5 * $ n * $ n + 5 * $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo $ n , \" th \u2581 centered \u2581 decagonal \" , \" number : \u2581 \" ; echo centereddecagonalnum ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 9 ; echo $ n , \" th \u2581 centered \u2581 decagonal \" , \" number : \u2581 \" ; echo centereddecagonalnum ( $ n ) ; ? >"}
{"text":"Return ( a + b ) ! \/ a ! b !","code":"< ? php function factorial ( $ a , $ b ) { $ res = 1 ;"}
{"text":"finding ( a + b ) !","code":"for ( $ i = 1 ; $ i <= ( $ a + $ b ) ; $ i ++ ) $ res = $ res * $ i ;"}
{"text":"finding ( a + b ) ! \/ a !","code":"for ( $ i = 1 ; $ i <= $ a ; $ i ++ ) $ res = $ res \/ $ i ;"}
{"text":"finding ( a + b ) ! \/ b !","code":"for ( $ i = 1 ; $ i <= $ b ; $ i ++ ) $ res = $ res \/ $ i ; return $ res ; }"}
{"text":"Return the Kth smallest way to reach given coordinate from origin","code":"function Ksmallest ( $ x , $ y , $ k ) {"}
{"text":"if at origin","code":"if ( $ x == 0 && $ y == 0 ) return ;"}
{"text":"if on y - axis","code":"else if ( $ x == 0 ) {"}
{"text":"decrement y .","code":"$ y -- ;"}
{"text":"Move vertical","code":"echo ( \" V \" ) ;"}
{"text":"recursive call to take next step .","code":"Ksmallest ( $ x , $ y , $ k ) ; }"}
{"text":"If on x - axis","code":"else if ( $ y == 0 ) {"}
{"text":"decrement x .","code":"$ x -- ;"}
{"text":"Move horizontal .","code":"echo ( \" H \" ) ;"}
{"text":"recursive call to take next step .","code":"Ksmallest ( $ x , $ y , $ k ) ; } else {"}
{"text":"If x + y C x is greater than K","code":"if ( factorial ( $ x - 1 , $ y ) > $ k ) {"}
{"text":"Move Horizontal","code":"echo ( \" H \" ) ;"}
{"text":"recursive call to take next step .","code":"Ksmallest ( $ x - 1 , $ y , $ k ) ; } else {"}
{"text":"Move vertical","code":"echo ( \" V \" ) ;"}
{"text":"recursive call to take next step .","code":"Ksmallest ( $ x , $ y - 1 , $ k - factorial ( $ x - 1 , $ y ) ) ; } } }"}
{"text":"Driver Code","code":"$ x = 2 ; $ y = 2 ; $ k = 2 ; Ksmallest ( $ x , $ y , $ k ) ; ? >"}
{"text":"Centered pentagonal number function","code":"< ? php function centered_pentagonal_Num ( $ n ) {"}
{"text":"Formula to calculate nth Centered pentagonal number and return it into main function .","code":"return ( 5 * $ n * $ n - 5 * $ n + 2 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 7 ; echo $ n , \" th \u2581 Centered \u2581 pentagonal \u2581 number : \u2581 \" ; echo centered_pentagonal_Num ( $ n ) ; ? >"}
{"text":"Function for finding distance between pivots","code":"< ? php function pivotDis ( $ x0 , $ y0 , $ x1 , $ y1 ) { return sqrt ( ( $ x1 - $ x0 ) * ( $ x1 - $ x0 ) + ( $ y1 - $ y0 ) * ( $ y1 - $ y0 ) ) ; }"}
{"text":"Function for minimum distance","code":"function minDis ( $ D , $ r1 , $ r2 ) { return max ( ( $ D - $ r1 - $ r2 ) , 0 ) ; }"}
{"text":"Function for maximum distance","code":"function maxDis ( $ D , $ r1 , $ r2 ) { return $ D + $ r1 + $ r2 ; }"}
{"text":"Driver code","code":"$ x0 = 0 ; $ y0 = 0 ; $ x1 = 8 ; $ y1 = 0 ; $ r1 = 4 ; $ r2 = 5 ; $ D = pivotDis ( $ x0 , $ y0 , $ x1 , $ y1 ) ; echo \" Distance \u2581 while \u2581 repulsion \u2581 = \u2581 \" , maxDis ( $ D , $ r1 , $ r2 ) ; echo \" Distance while attraction = \" , minDis ( $ D , $ r1 , $ r2 ) ; ? >"}
{"text":"Function to find the maximum value of F","code":"< ? php function maximumValueOfF ( $ R ) {"}
{"text":"using the formula derived for getting the maximum value of F","code":"return 4 * $ R * $ R + 0.25 ; }"}
{"text":"Drivers code","code":"$ R = 3 ; echo maximumValueOfF ( $ R ) ; ? >"}
{"text":"PHP function to find the end point of a line","code":"< ? php function otherEndPoint ( $ x1 , $ y1 , $ m1 , $ m2 ) {"}
{"text":"find end point for x coordinates","code":"$ x2 = ( 2 * $ m1 - $ x1 ) ;"}
{"text":"find end point for y coordinates","code":"$ y2 = ( 2 * $ m2 - $ y1 ) ; echo \" x2 \u2581 = \u2581 \" . $ x2 . \" , \u2581 y2 \u2581 = \u2581 \" . $ y2 ; }"}
{"text":"Driven Program","code":"$ x1 = -4 ; $ y1 = -1 ; $ m1 = 3 ; $ m2 = 5 ; otherEndPoint ( $ x1 , $ y1 , $ m1 , $ m2 ) ; ? >"}
{"text":"function to print coordinate of smallest rectangle","code":"< ? php function printRect ( $ X , $ Y , $ n ) {"}
{"text":"find Xmax and Xmin","code":"$ Xmax = max ( $ X ) ; $ Xmin = min ( $ X ) ;"}
{"text":"find Ymax and Ymin","code":"$ Ymax = max ( $ Y ) ; $ Ymin = min ( $ Y ) ;"}
{"text":"print all four coordinates","code":"echo \" { \" \u2581 , \u2581 $ Xmin \u2581 , \u2581 \" , \" \u2581 , \u2581 $ Ymin \u2581 , \u2581 \" } \" , \" \" ; STRNEWLINE echo \u2581 \" { \" \u2581 , \u2581 $ Xmin \u2581 , \u2581 \" , \" \u2581 , \u2581 $ Ymax \u2581 , \u2581 \" } \" , \" STRNEWLINE \" ; echo \" { \" \u2581 , \u2581 $ Xmax \u2581 , \u2581 \" , \" \u2581 , \u2581 $ Ymax \u2581 , \u2581 \" } \" , \" \" ; STRNEWLINE echo \u2581 \" { \" \u2581 , \u2581 $ Xmax \u2581 , \u2581 \" , \" \u2581 , \u2581 $ Ymin \u2581 , \u2581 \" } \" ; }"}
{"text":"Driver Code","code":"$ X = array ( 4 , 3 , 6 , 1 , -1 , 12 ) ; $ Y = array ( 4 , 1 , 10 , 3 , 7 , -1 ) ; $ n = count ( $ X ) ; printRect ( $ X , $ Y , $ n ) ; ? >"}
{"text":"PHP program to find if line passing through two coordinates also passes through origin or not","code":"< ? php function checkOrigin ( $ x1 , $ y1 , $ x2 , $ y2 ) { return ( $ x1 * ( $ y2 - $ y1 ) == $ y1 * ( $ x2 - $ x1 ) ) ; }"}
{"text":"Driver code","code":"if ( checkOrigin ( 1 , 28 , 2 , 56 ) == true ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Function to check if the third point forms a rectangle with other two points at corners","code":"< ? php function isBetween ( $ a , $ b , $ c ) { return min ( $ a , $ b ) <= $ c and $ c <= max ( $ a , $ b ) ; }"}
{"text":"Returns true if point k can be used as a joining point to connect using two line segments","code":"function canJoin ( $ x , $ y , $ i , $ j , $ k ) {"}
{"text":"Check for the valid polyline with two segments","code":"return ( $ x [ $ k ] == $ x [ $ i ] or $ x [ $ k ] == $ x [ $ j ] ) and isBetween ( $ y [ $ i ] , $ y [ $ j ] , $ y [ $ k ] ) or ( $ y [ $ k ] == $ y [ $ i ] or $ y [ $ k ] == $ y [ $ j ] ) and isBetween ( $ x [ $ i ] , $ x [ $ j ] , $ x [ $ k ] ) ; } function countLineSegments ( $ x , $ y ) {"}
{"text":"Check whether the X - coordinates or Y - cocordinates are same .","code":"if ( ( $ x [ 0 ] == $ x [ 1 ] and $ x [ 1 ] == $ x [ 2 ] ) or ( $ y [ 0 ] == $ y [ 1 ] and $ y [ 1 ] == $ y [ 2 ] ) ) return 1 ;"}
{"text":"Iterate over all pairs to check for two line segments","code":"else if ( canJoin ( $ x , $ y , 0 , 1 , 2 ) or canJoin ( $ x , $ y , 0 , 2 , 1 ) || canJoin ( $ x , $ y , 1 , 2 , 0 ) ) return 2 ;"}
{"text":"Otherwise answer is three .","code":"else return 3 ; }"}
{"text":"Driver code","code":"$ x = array ( ) ; $ y = array ( ) ; $ x [ 0 ] = -1 ; $ y [ 0 ] = -1 ; $ x [ 1 ] = -1 ; $ y [ 1 ] = 3 ; $ x [ 2 ] = 4 ; $ y [ 2 ] = 3 ; echo countLineSegments ( $ x , $ y ) ; ? >"}
{"text":"function for checking","code":"< ? php function pythagorean_quadruple ( $ a , $ b , $ c , $ d ) { $ sum = $ a * $ a + $ b * $ b + $ c * $ c ; if ( $ d * $ d == $ sum ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ a = 1 ; $ b = 2 ; $ c = 2 ; $ d = 3 ; if ( pythagorean_quadruple ( $ a , $ b , $ c , $ d ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to calculate Volume of frustum of cone","code":"< ? php function volume ( $ r , $ R , $ h ) { $ pi = 3.14159 ; return ( 1 \/ ( 3 ) ) * $ pi * $ h * ( $ r * $ r + $ R * $ R + $ r * $ R ) ; }"}
{"text":"Function to calculate Curved Surface area of frustum of cone","code":"function curved_surface_area ( $ r , $ R , $ l ) { $ pi = 3.14159 ; return $ pi * $ l * ( $ R + $ r ) ; }"}
{"text":"Function to calculate Total Surface area of frustum of cone","code":"function total_surface_area ( $ r , $ R , $ l , $ h ) { $ pi = 3.14159 ; return ( $ pi * $ l * ( $ R + $ r ) + $ pi * ( $ r * $ r + $ R * $ R ) ) ; }"}
{"text":"Driver Code","code":"$ small_radius = 3 ; $ big_radius = 8 ; $ slant_height = 13 ; $ height = 12 ;"}
{"text":"Printing value of volume and surface area","code":"echo ( \" Volume \u2581 Of \u2581 Frustum \u2581 of \u2581 Cone \u2581 : \u2581 \" ) ; echo ( volume ( $ small_radius , $ big_radius , $ height ) ) ; echo ( \" STRNEWLINE \" ) ; echo ( \" Curved \u2581 Surface \u2581 Area \u2581 Of \u2581 Frustum \u2581 of \u2581 Cone \u2581 : \u2581 \" ) ; echo ( curved_surface_area ( $ small_radius , $ big_radius , $ slant_height ) ) ; echo ( \" STRNEWLINE \" ) ; echo ( \" Total \u2581 Surface \u2581 Area \u2581 Of \u2581 Frustum \u2581 of \u2581 Cone \u2581 : \u2581 \" ) ; echo ( total_surface_area ( $ small_radius , $ big_radius , $ slant_height , $ height ) ) ; ? >"}
{"text":"PHP program to find Circumference of a square","code":"< ? php function Circumference ( $ a ) { return 4 * $ a ; }"}
{"text":"Driver Code","code":"$ a = 5 ; echo \" Circumference \u2581 of \u2581 a \u2581 \" . \" square \u2581 is \u2581 \" , Circumference ( $ a ) ; ? >"}
{"text":"PHP program to find maximum are of a quadrilateral","code":"< ? php function maxArea ( $ a , $ b , $ c , $ d ) {"}
{"text":"Calculating the semi - perimeter of the given quadrilateral","code":"$ semiperimeter = ( $ a + $ b + $ c + $ d ) \/ 2 ;"}
{"text":"Applying Brahmagupta 's formula to  get maximum area of quadrilateral","code":"return sqrt ( ( $ semiperimeter - $ a ) * ( $ semiperimeter - $ b ) * ( $ semiperimeter - $ c ) * ( $ semiperimeter - $ d ) ) ; }"}
{"text":"Driver code","code":"$ a = 1 ; $ b = 2 ; $ c = 1 ; $ d = 2 ; echo ( maxArea ( $ a , $ b , $ c , $ d ) ) ; ? >"}
{"text":"Return minimum distance required so that aleast k point lie inside the circle .","code":"< ? php function minRadius ( $ k , $ x , $ y , $ n ) { $ dis = array ( ) ;"}
{"text":"Finding distance between of each point from origin","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ dis [ $ i ] = $ x [ $ i ] * $ x [ $ i ] + $ y [ $ i ] * $ y [ $ i ] ;"}
{"text":"Sorting the distance","code":"sort ( $ dis ) ; return $ dis [ $ k - 1 ] ; }"}
{"text":"Driver Code","code":"$ k = 3 ; $ x = array ( 1 , -1 , 1 ) ; $ y = array ( 1 , -1 , -1 ) ; $ n = count ( $ x ) ; echo minRadius ( $ k , $ x , $ y , $ n ) ; ? >"}
{"text":"Utility function","code":"< ? php function areaRectangle ( $ a , $ b ) { $ area = $ a * $ b ; return $ area ; } function perimeterRectangle ( $ a , $ b ) { $ perimeter = 2 * ( $ a + $ b ) ; return $ perimeter ; }"}
{"text":"Driver program","code":"$ a = 5 ; $ b = 6 ; echo ( \" Area \u2581 = \u2581 \" ) ; echo ( areaRectangle ( $ a , $ b ) ) ; echo ( \" STRNEWLINE \" ) ; echo ( \" Perimeter \u2581 = \u2581 \" ) ; echo ( perimeterRectangle ( $ a , $ b ) ) ; ? >"}
{"text":"PHP program to find the aria of the square","code":"< ? php function areaSquare ( $ side ) { $ area = $ side * $ side ; return $ area ; }"}
{"text":"Driver Code","code":"$ side = 4 ; echo ( areaSquare ( $ side ) ) ; ? >"}
{"text":"PHP program to find minimum perimeter using n blocks .","code":"< ? php function minPerimeter ( $ n ) { $ l = floor ( sqrt ( $ n ) ) ; $ sq = $ l * $ l ;"}
{"text":"if n is a perfect square","code":"if ( $ sq == $ n ) return $ l * 4 ; else {"}
{"text":"Number of rows","code":"$ row = floor ( $ n \/ $ l ) ;"}
{"text":"perimeter of the rectangular grid","code":"$ perimeter = 2 * ( $ l + $ row ) ;"}
{"text":"if there are blocks left","code":"if ( $ n % $ l != 0 ) $ perimeter += 2 ; return $ perimeter ; } }"}
{"text":"Driver code","code":"$ n = 10 ; echo minPerimeter ( $ n ) ; ? >"}
{"text":"function to find if it 's possible to rotate page or not","code":"< ? php function possibleOrNot ( $ a1 , $ a2 , $ b1 , $ b2 , $ c1 , $ c2 ) {"}
{"text":"Calculating distance b \/ w points","code":"$ dis1 = pow ( $ b1 - $ a1 , 2 ) + pow ( $ b2 - $ a2 , 2 ) ; $ dis2 = pow ( $ c1 - $ b1 , 2 ) + pow ( $ c2 - $ b2 , 2 ) ;"}
{"text":"If distance is not equal","code":"if ( $ dis1 != $ dis2 ) echo \" No \" ;"}
{"text":"If the points are in same line","code":"else if ( $ b1 == ( ( $ a1 + $ c1 ) \/ 2.0 ) && $ b2 == ( ( $ a2 + $ c2 ) \/ 2.0 ) ) echo \" No \" ; else echo \" Yes \" ; }"}
{"text":"Points a , b , and c","code":"$ a1 = 1 ; $ a2 = 0 ; $ b1 = 2 ; $ b2 = 0 ; $ c1 = 3 ; $ c2 = 0 ; possibleOrNot ( $ a1 , $ a2 , $ b1 , $ b2 , $ c1 , $ c2 ) ; ? >"}
{"text":"PHP program to check if two circles touch each other or not .","code":"< ? php function circle ( $ x1 , $ y1 , $ x2 , $ y2 , $ r1 , $ r2 ) { $ distSq = ( $ x1 - $ x2 ) * ( $ x1 - $ x2 ) + ( $ y1 - $ y2 ) * ( $ y1 - $ y2 ) ; $ radSumSq = ( $ r1 + $ r2 ) * ( $ r1 + $ r2 ) ; if ( $ distSq == $ radSumSq ) return 1 ; else if ( $ distSq > $ radSumSq ) return -1 ; else return 0 ; }"}
{"text":"Driver code","code":"$ x1 = -10 ; $ y1 = 8 ; $ x2 = 14 ; $ y2 = -24 ; $ r1 = 30 ; $ r2 = 10 ; $ t = circle ( $ x1 , $ y1 , $ x2 , $ y2 , $ r1 , $ r2 ) ; if ( $ t == 1 ) echo \" Circle \u2581 touch \u2581 to \u2581 each \u2581 other . \" ; else if ( $ t < 0 ) echo \" Circle \u2581 not \u2581 touch \u2581 to \u2581 each \u2581 other . \" ; else echo \" Circle \u2581 intersect \u2581 to \u2581 each \u2581 other . \" ; ? >"}
{"text":"PHP program to count number of obtuse angles for given two points .","code":"< ? php function countObtuseAngles ( $ a , $ b , $ k ) {"}
{"text":"There are two arcs connecting a and b . Let us count points on both arcs .","code":"$ c1 = ( $ b - $ a ) - 1 ; $ c2 = ( $ k - $ b ) + ( $ a - 1 ) ;"}
{"text":"Both arcs have same number of points","code":"if ( $ c1 == $ c2 ) return 0 ;"}
{"text":"Points on smaller arc is answer","code":"return min ( $ c1 , $ c2 ) ; }"}
{"text":"Driver code","code":"$ k = 6 ; $ a = 1 ; $ b = 3 ; echo countObtuseAngles ( $ a , $ b , $ k ) ; ? >"}
{"text":"Find the number of acute , right , obtuse triangle that can be formed from given array .","code":"< ? php function findTriangle ( $ a , $ n ) { $ b [ $ n + 2 ] = array ( ) ;"}
{"text":"Finding the square of each element of array .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ b [ $ i ] = $ a [ $ i ] * $ a [ $ i ] ;"}
{"text":"Sort the sides of array and their squares .","code":"sort ( $ a ) ; sort ( $ b ) ;"}
{"text":"x for acute triangles y for right triangles z for obtuse triangles","code":"$ x = 0 ; $ y = 0 ; $ z = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ p = $ i + 1 ; $ q = $ i + 1 ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Finding the farthest point p where a ^ 2 + b ^ 2 >= c ^ 2.","code":"while ( $ p < $ n - 1 && $ b [ $ i ] + $ b [ $ j ] >= $ b [ $ p + 1 ] ) $ p ++ ; $ q = max ( $ q , $ p ) ;"}
{"text":"Finding the farthest point q where a + b > c .","code":"while ( $ q < $ n - 1 && $ a [ $ i ] + $ a [ $ j ] > $ a [ $ q + 1 ] ) $ q ++ ;"}
{"text":"If point p make right triangle .","code":"if ( $ b [ $ i ] + $ b [ $ j ] == $ b [ $ p ] ) {"}
{"text":"All triangle between j and p are acute triangles . So add p - j - 1 in x .","code":"$ x += max ( $ p - $ j - 1 , 0 ) ;"}
{"text":"Increment y by 1.","code":"$ y ++ ;"}
{"text":"All triangle between q and p are acute triangles . So add q - p in z .","code":"$ z += $ q - $ p ; }"}
{"text":"If no right triangle","code":"else {"}
{"text":"All triangle between j and p are acute triangles . So add p - j in x .","code":"$ x += max ( $ p - $ j , 0 ) ;"}
{"text":"All triangle between q and p are acute triangles . So add q - p in z .","code":"$ z += $ q - $ p ; } } } echo \" Acute \u2581 Triangle : \u2581 \" , $ x , \" STRNEWLINE \" ; echo \" Right \u2581 Triangle : \u2581 \" , $ y , \" STRNEWLINE \" ; echo \" Obtuse \u2581 Triangle : \u2581 \" , $ z , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 2 , 3 , 9 , 10 , 12 , 15 ) ; $ n = sizeof ( $ arr ) ; findTriangle ( $ arr , $ n ) ; ? >"}
{"text":"( X [ i ] , Y [ i ] ) are coordinates of i 'th point.","code":"< ? php function polygonArea ( $ X , $ Y , $ n ) {"}
{"text":"Initialize area","code":"$ area = 0.0 ;"}
{"text":"Calculate value of shoelace formula","code":"$ j = $ n - 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ area += ( $ X [ $ j ] + $ X [ $ i ] ) * ( $ Y [ $ j ] - $ Y [ $ i ] ) ;"}
{"text":"j is previous vertex to i","code":"$ j = $ i ; }"}
{"text":"Return absolute value","code":"return abs ( $ area \/ 2.0 ) ; }"}
{"text":"Driver Code","code":"$ X = array ( 0 , 2 , 4 ) ; $ Y = array ( 1 , 3 , 7 ) ; $ n = sizeof ( $ X ) ; echo polygonArea ( $ X , $ Y , $ n ) ; ? >"}
{"text":"Function to find the last digit of X in base Y","code":"< ? php function last_digit ( $ X , $ Y ) { echo ( $ X % $ Y ) ; }"}
{"text":"Driver code","code":"$ X = 55 ; $ Y = 3 ; last_digit ( $ X , $ Y ) ; ? >"}
{"text":"Function to print the roots of the quadratic equation when a + b + c = 0","code":"< ? php function printRoots ( $ a , $ b , $ c ) { echo \"1\" ; echo \" , \u2581 \" ; echo $ c \/ ( $ a * 1.0 ) ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 3 ; $ c = -5 ; printRoots ( $ a , $ b , $ c ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php const MAX = 130 ;"}
{"text":"Function that returns true if the array contains a valid quadruplet pair","code":"function validQuadruple ( $ arr , $ n ) {"}
{"text":"We can always find a valid quadruplet pair for array size greater than MAX","code":"if ( $ n >= MAX ) return true ;"}
{"text":"For smaller size arrays , perform brute force","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) for ( $ k = $ j + 1 ; $ k < $ n ; $ k ++ ) for ( $ l = $ k + 1 ; $ l < $ n ; $ l ++ ) { if ( ( $ arr [ $ i ] ^ $ arr [ $ j ] ^ $ arr [ $ k ] ^ $ arr [ $ l ] ) == 0 ) { return true ; } } return false ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 0 , 2 , 3 , 7 ) ; $ n = count ( $ arr ) ; if ( validQuadruple ( $ arr , $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Function that returns true if n can be represented as the sum of exactly k distinct positive integers","code":"< ? php function solve ( $ n , $ k ) {"}
{"text":"If n can be represented as 1 + 2 + 3 + ... + ( k - 1 ) + ( k + x )","code":"if ( $ n >= ( $ k * ( $ k + 1 ) ) \/ 2 ) { return true ; } return false ; }"}
{"text":"Driver code","code":"$ n = 12 ; $ k = 4 ; if ( solve ( $ n , $ k ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to return the minimum possible value of | K - X | where X is the bitwise AND of the elements of some sub - array","code":"< ? php function closetAND ( & $ arr , $ n , $ k ) { $ ans = PHP_INT_MAX ;"}
{"text":"Check all possible sub - arrays","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ X = $ arr [ $ i ] ; for ( $ j = $ i ; $ j < $ n ; $ j ++ ) { $ X &= $ arr [ $ j ] ;"}
{"text":"Find the overall minimum","code":"$ ans = min ( $ ans , abs ( $ k - $ X ) ) ; } } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 7 , 10 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; $ k = 2 ; echo closetAND ( $ arr , $ n , $ k ) ; return 0 ; ? >"}
{"text":"Function to return the required rate percentage","code":"< ? php function Rate ( $ N1 , $ N2 ) { $ rate = ( $ N2 - $ N1 ) * 100 \/ $ N1 ; return $ rate ; }"}
{"text":"Driver code","code":"$ N1 = 100 ; $ N2 = 120 ; echo Rate ( $ N1 , $ N2 ) , \" % \" ; ? >"}
{"text":"Function to return the count of primes in the given array","code":"< ? php function getPrime ( $ arr , $ n ) {"}
{"text":"Find maximum value in the array","code":"$ max_val = max ( $ arr ) ;"}
{"text":"USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array \" prime [ 0 . . n ] \" . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ max_val + 1 , true ) ;"}
{"text":"Remaining part of SIEVE","code":"$ prime [ 0 ] = false ; $ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ max_val ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ max_val ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"To store the maximum prime number","code":"$ maximum = -1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current element is prime then update the maximum prime","code":"if ( $ prime [ $ arr [ $ i ] ] ) $ maximum = max ( $ maximum , $ arr [ $ i ] ) ; }"}
{"text":"Return the maximum prime number from the array","code":"return $ maximum ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 10 , 15 , 7 , 6 , 8 , 13 ) ; $ n = count ( $ arr ) ; echo getPrime ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the smallest number which on dividing with any element from the range [ 2 , N ] leaves a remainder of 1","code":"< ? php function getMinNum ( $ N ) {"}
{"text":"Find the LCM of the elements from the range [ 2 , N ]","code":"$ lcm = 1 ; for ( $ i = 2 ; $ i <= $ N ; $ i ++ ) $ lcm = ( ( $ i * $ lcm ) \/ ( __gcd ( $ i , $ lcm ) ) ) ;"}
{"text":"Return the required number","code":"return ( $ lcm + 1 ) ; } function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Driver code","code":"$ N = 5 ; echo ( getMinNum ( $ N ) ) ; ? >"}
{"text":"Function to return the maximum number of edges possible in a Bipartite graph with N vertices","code":"< ? php function maxEdges ( $ N ) { $ edges = 0 ; $ edges = floor ( ( $ N * $ N ) \/ 4 ) ; return $ edges ; }"}
{"text":"Driver code","code":"$ N = 5 ; echo maxEdges ( $ N ) ; ? >"}
{"text":"Function to find permutation ( p ) of first N natural numbers such that there are exactly K elements of permutation such that GCD ( p [ i ] , i ) > 1","code":"< ? php function Permutation ( $ n , $ k ) { $ p = array ( ) ;"}
{"text":"First place all the numbers in their respective places","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ p [ $ i ] = $ i ;"}
{"text":"Modify for first n - k integers","code":"for ( $ i = 1 ; $ i < $ n - $ k ; $ i ++ ) $ p [ $ i + 1 ] = $ i ;"}
{"text":"In first index place n - k","code":"$ p [ 1 ] = $ n - $ k ;"}
{"text":"Print the permutation","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) echo $ p [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 2 ; Permutation ( $ n , $ k ) ; ? >"}
{"text":"Function that will find out the valid position","code":"< ? php function validPosition ( $ arr , $ N , $ K ) { $ count = 0 ; $ sum = 0 ;"}
{"text":"find sum of all the elements","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ sum += $ arr [ $ i ] ; }"}
{"text":"adding K to the element and check whether it is greater than sum of all other elements","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( ( $ arr [ $ i ] + $ K ) > ( $ sum - $ arr [ $ i ] ) ) $ count ++ ; } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 1 , 6 , 7 ) ; $ K = 4 ; $ N = count ( $ arr ) ; echo validPosition ( $ arr , $ N , $ K ) ; ? >"}
{"text":"Function to return the element from the array which has the maximum set bits","code":"< ? php function maxBitElement ( $ arr , $ n ) {"}
{"text":"To store the required element and the maximum set bits so far","code":"$ num = 0 ; $ max = -1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Count of set bits in the current element","code":"$ cnt = BitCount ( $ arr [ $ i ] ) ;"}
{"text":"Update the max","code":"if ( $ cnt > $ max ) { $ max = $ cnt ; $ num = $ arr [ $ i ] ; } } return $ num ; } function BitCount ( $ n ) { $ count = 0 ; while ( $ n != 0 ) { $ count ++ ; $ n &= ( $ n - 1 ) ; } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 2 , 4 , 7 , 1 , 10 , 5 , 8 , 9 , 6 ) ; $ n = count ( $ arr ) ; echo ( maxBitElement ( $ arr , $ n ) ) ; ? >"}
{"text":"Function to return the smallest sum of 2 n - digit numbers","code":"< ? php function smallestSum ( $ n ) { if ( $ n == 1 ) return 0 ; return ( 2 * pow ( 10 , $ n - 1 ) ) ; }"}
{"text":"Function to return the largest sum of 2 n - digit numbers","code":"function largestSum ( $ n ) { return 2 * ( pow ( 10 , $ n ) - 1 ) ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo \" Largest \u2581 = \u2581 \" . largestSum ( $ n ) . \" STRNEWLINE \" ; echo \" Smallest \u2581 = \u2581 \" . smallestSum ( $ n ) ; ? >"}
{"text":"Function that returns the number of pairs","code":"< ? php function count_pairs ( $ a , $ b , $ n , $ m ) {"}
{"text":"Count of odd and even numbers","code":"$ odd1 = 0 ; $ even1 = 0 ; $ odd2 = 0 ; $ even2 = 0 ;"}
{"text":"Traverse in the first array and count the number of odd and evene numbers in them","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] % 2 ) $ odd1 ++ ; else $ even1 ++ ; }"}
{"text":"Traverse in the second array and count the number of odd and evene numbers in them","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { if ( $ b [ $ i ] % 2 ) $ odd2 ++ ; else $ even2 ++ ; }"}
{"text":"Count the number of pairs","code":"$ pairs = min ( $ odd1 , $ even2 ) + min ( $ odd2 , $ even1 ) ;"}
{"text":"Return the number of pairs","code":"return $ pairs ; }"}
{"text":"Driver code","code":"$ a = array ( 9 , 14 , 6 , 2 , 11 ) ; $ b = array ( 8 , 4 , 7 , 20 ) ; $ n = count ( $ a ) ; $ m = count ( $ b ) ; echo count_pairs ( $ a , $ b , $ n , $ m ) ; ? >"}
{"text":"Function to find the leftmost unset bit in a number .","code":"< ? php function find_leftmost_unsetbit ( $ n ) { $ ind = -1 ; $ i = 1 ; while ( $ n ) { if ( ! ( $ n & 1 ) ) $ ind = $ i ; $ i ++ ; $ n >>= 1 ; } return $ ind ; }"}
{"text":"Function that perform the step","code":"function perform_steps ( $ n ) {"}
{"text":"Find the leftmost unset bit","code":"$ left = find_leftmost_unsetbit ( $ n ) ;"}
{"text":"If the number has no bit unset , it means it is in form 2 ^ x - 1","code":"if ( $ left == -1 ) { echo \" No \u2581 steps \u2581 required \" ; return ; }"}
{"text":"Count the steps","code":"$ step = 1 ;"}
{"text":"Iterate till number is of form 2 ^ x - 1","code":"while ( find_leftmost_unsetbit ( $ n ) != -1 ) {"}
{"text":"At even step increase by 1","code":"if ( $ step % 2 == 0 ) { $ n += 1 ; echo \" Step \" , $ step , \" : \u2581 Increase \u2581 by \u2581 1 STRNEWLINE \" ; }"}
{"text":"Odd step xor with any 2 ^ m - 1","code":"else {"}
{"text":"Find the leftmost unset bit","code":"$ m = find_leftmost_unsetbit ( $ n ) ;"}
{"text":"2 ^ m - 1","code":"$ num = pow ( 2 , $ m ) - 1 ;"}
{"text":"Perform the step","code":"$ n = $ n ^ $ num ; echo \" Step \" , $ step , \" : \u2581 Xor \u2581 with \u2581 \" , $ num , \" STRNEWLINE \" ; }"}
{"text":"Increase the steps","code":"$ step += 1 ; } }"}
{"text":"Driver code","code":"$ n = 39 ; perform_steps ( $ n ) ; ? >"}
{"text":"Function to find out the number of that vertices","code":"< ? php function vertices ( $ N , $ A , $ B ) { $ position = 0 ; $ minisum = PHP_INT_MAX ; $ sum = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) {"}
{"text":"Another person can 't stand on  vertex on which 2 children stand.","code":"if ( $ i == $ A $ i == $ B ) continue ;"}
{"text":"calculating minimum jumps from each vertex .","code":"else { $ x = abs ( $ i - $ A ) ; $ y = abs ( $ i - $ B ) ;"}
{"text":"Calculate sum of jumps .","code":"$ sum = $ x + $ y ; if ( $ sum < $ minisum ) { $ minisum = $ sum ; $ position = $ i ; } } } return $ position ; }"}
{"text":"Driver code","code":"$ N = 3 ; $ A = 1 ; $ B = 2 ;"}
{"text":"Calling function","code":"echo \" Vertex = \" ? >"}
{"text":"Function to return the factorial of n","code":"< ? php function factorial ( $ n ) { $ f = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ f *= $ i ; } return $ f ; }"}
{"text":"Function to return the sum of factorials of the array elements","code":"function sumFactorial ( $ arr , $ n ) {"}
{"text":"To store the required sum","code":"$ s = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Add factorial of all the elements","code":"$ s += factorial ( $ arr [ $ i ] ) ; } return $ s ; }"}
{"text":"Driver code","code":"$ arr = array ( 7 , 3 , 5 , 4 , 8 ) ; $ n = sizeof ( $ arr ) ; echo sumFactorial ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the highest power of 2 which divides the given binary number","code":"< ? php function highestPower ( $ str , $ len ) {"}
{"text":"To store the highest required power of 2","code":"$ ans = 0 ;"}
{"text":"Counting number of consecutive zeros from the end in the given binary string","code":"for ( $ i = $ len - 1 ; $ i >= 0 ; $ i -- ) { if ( $ str [ $ i ] == '0' ) $ ans ++ ; else break ; } return $ ans ; }"}
{"text":"Driver code","code":"$ str = \"100100\" ; $ len = strlen ( $ str ) ; echo highestPower ( $ str , $ len ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ mod = ( 1e9 + 7 ) ;"}
{"text":"Function to return n ! % p","code":"function factorial ( $ n , $ p ) {"}
{"text":"$res = 1 ; Initialize result","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res = ( $ res * $ i ) % $ p ; return $ res ; }"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"function power ( $ x , $ y , $ p ) {"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( ( $ y & 1 ) == 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Returns n ^ ( - 1 ) mod p","code":"function modInverse ( $ n , $ p ) { return power ( $ n , $ p - 2 , $ p ) ; }"}
{"text":"Returns nCr % p using Fermat 's little theorem.","code":"function nCrModP ( $ n , $ r , $ p ) {"}
{"text":"Base case","code":"if ( $ r == 0 ) return 1 ;"}
{"text":"Fill factorial array so that we can find all factorial of r , n and n - r","code":"$ fac = array ( ( int ) $ n + 1 ) ; $ fac [ 0 ] = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ fac [ $ i ] = $ fac [ $ i - 1 ] * $ i % $ p ; return ( $ fac [ ( int ) $ n ] * modInverse ( $ fac [ ( int ) $ r ] , $ p ) % $ p * modInverse ( $ fac [ ( int ) $ n - ( int ) $ r ] , $ p ) % $ p ) % $ p ; }"}
{"text":"Function to return the number of ways to arrange K different objects taking N objects at a time","code":"function countArrangements ( $ n , $ k , $ p ) { return ( factorial ( $ n , $ p ) * nCrModP ( $ k , $ n , $ p ) ) % $ p ; }"}
{"text":"Driver Code","code":"{ $ N = 5 ; $ K = 8 ;"}
{"text":"Function call","code":"echo ( countArrangements ( $ N , $ K , $ mod ) ) ; }"}
{"text":"Function that returns the maximum product of digits among numbers less than or equal to N","code":"< ? php function maxProd ( $ N ) { if ( $ N == 0 ) return 1 ; if ( $ N < 10 ) return $ N ; return max ( maxProd ( ( int ) ( $ N \/ 10 ) ) * ( $ N % 10 ) , maxProd ( ( int ) ( $ N \/ 10 ) - 1 ) * 9 ) ; }"}
{"text":"Driver code","code":"$ N = 390 ; echo maxProd ( $ N ) ; ? >"}
{"text":"PHP program to implement the above approach","code":"< ? php $ N = 2 ; $ M = 3 ;"}
{"text":"Function to check if a number from every row can be selected such that xor of the numbers is greater than zero","code":"function check ( $ mat ) { global $ N ; global $ M ; $ xorr = 0 ;"}
{"text":"Find the xor of first column for every row","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ xorr = $ xorr ^ $ mat [ $ i ] [ 0 ] ; }"}
{"text":"If Xorr is 0","code":"if ( $ xorr != 0 ) return true ;"}
{"text":"Traverse in the matrix","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 1 ; $ j < $ M ; $ j ++ ) {"}
{"text":"Check is atleast 2 distinct elements","code":"if ( $ mat [ $ i ] [ $ j ] != $ mat [ $ i ] [ 0 ] ) return true ; } } return false ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( 7 , 7 , 7 ) , array ( 10 , 10 , 7 ) ) ; if ( check ( $ mat ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to find the sum of first N odd numbers","code":"< ? php function sumodd ( $ n ) { return ( $ n * $ n ) ; }"}
{"text":"Function to find the sum of first N even numbers","code":"function sumeven ( $ n ) { return ( $ n * ( $ n + 1 ) ) ; }"}
{"text":"Function to overall find the sum of series","code":"function findSum ( $ num ) {"}
{"text":"Initial odd numbers","code":"$ sumo = 0 ;"}
{"text":"Initial even numbers","code":"$ sume = 0 ;"}
{"text":"First power of 2","code":"$ x = 1 ;"}
{"text":"Check for parity for odd \/ even","code":"$ cur = 0 ;"}
{"text":"Counts the sum","code":"$ ans = 0 ; while ( $ num > 0 ) {"}
{"text":"Get the minimum out of remaining num or power of 2","code":"$ inc = min ( $ x , $ num ) ;"}
{"text":"Decrease that much numbers from num","code":"$ num -= $ inc ;"}
{"text":"If the segment has odd numbers","code":"if ( $ cur == 0 ) {"}
{"text":"Summate the odd numbers By exclusion","code":"$ ans = $ ans + sumodd ( $ sumo + $ inc ) - sumodd ( $ sumo ) ;"}
{"text":"Increase number of odd numbers","code":"$ sumo += $ inc ; }"}
{"text":"If the segment has even numbers","code":"else {"}
{"text":"Summate the even numbers By exclusion","code":"$ ans = $ ans + sumeven ( $ sume + $ inc ) - sumeven ( $ sume ) ;"}
{"text":"Increase number of even numbers","code":"$ sume += $ inc ; }"}
{"text":"Next set of numbers","code":"$ x *= 2 ;"}
{"text":"Change parity for odd \/ even","code":"$ cur ^= 1 ; } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo findSum ( $ n ) ; ? >"}
{"text":"Function to return the nth term of the given series","code":"< ? php function oddTriangularNumber ( $ N ) { return ( $ N * ( ( 2 * $ N ) - 1 ) ) ; }"}
{"text":"Driver code","code":"$ N = 3 ; echo oddTriangularNumber ( $ N ) ; ? >"}
{"text":"Function to check if they are identical","code":"< ? php function idstrt ( $ a1 , $ b1 , $ c1 , $ a2 , $ b2 , $ c2 ) { if ( ( $ a1 \/ $ a2 == $ b1 \/ $ b2 ) && ( $ a1 \/ $ a2 == $ c1 \/ $ c2 ) && ( $ b1 \/ $ b2 == $ c1 \/ $ c2 ) ) echo \" The \u2581 given \u2581 straight \u2581 lines \u2581 are \u2581 identical \" , \" STRNEWLINE \" ; else echo \" The \u2581 given \u2581 straight \u2581 lines \u2581 are \u2581 not \u2581 identical \" , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ a1 = -2 ; $ b1 = 4 ; $ c1 = 3 ; $ a2 = -6 ; $ b2 = 12 ; $ c2 = 9 ; idstrt ( $ a1 , $ b1 , $ c1 , $ a2 , $ b2 , $ c2 ) ; ? >"}
{"text":"Function to print the equation of the required line","code":"< ? php function line ( $ x0 , $ y0 ) { $ c = 2 * $ y0 * $ x0 ; echo $ y0 , \" x \" , \" \u2581 + \u2581 \" , $ x0 , \" y \u2581 = \u2581 \" , $ c ; }"}
{"text":"Driver code","code":"$ x0 = 4 ; $ y0 = 3 ; line ( $ x0 , $ y0 ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 3 ; $ M = 7 ;"}
{"text":"Function that prints the original matrix","code":"function printOriginalMatrix ( $ a , $ b , $ mat ) {"}
{"text":"Iterate in the row","code":"for ( $ i = 0 ; $ i < $ GLOBALS [ ' N ' ] ; $ i ++ ) {"}
{"text":"Iterate in the column","code":"for ( $ j = 0 ; $ j < $ GLOBALS [ ' M ' ] ; $ j ++ ) {"}
{"text":"If previously existed an element","code":"if ( $ mat [ $ i ] [ $ j ] == 1 ) echo min ( $ a [ $ i ] , $ b [ $ j ] ) . \" \u2581 \" ; else echo \"0\" . \" \u2581 \" ; } echo \" \\r STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ a = array ( 2 , 1 , 3 ) ; $ b = array ( 2 , 3 , 0 , 0 , 2 , 0 , 1 ) ; $ mat = array ( array ( 1 , 0 , 0 , 0 , 1 , 0 , 0 ) , array ( 0 , 0 , 0 , 0 , 0 , 0 , 1 ) , array ( 1 , 1 , 0 , 0 , 0 , 0 , 0 ) ) ; printOriginalMatrix ( $ a , $ b , $ mat ) ; ? >"}
{"text":"Function to return the x % of n","code":"< ? php function percent ( $ n , $ x ) { $ p = ( int ) ( $ n ) * $ x ; $ p \/= 100 ; return $ p ; }"}
{"text":"Function to return the total loss","code":"function getLoss ( $ price , $ quantity , $ X , $ n ) {"}
{"text":"To store the total loss","code":"$ loss = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Original price of the item","code":"$ originalPrice = $ price [ $ i ] ;"}
{"text":"The price at which the item will be sold","code":"$ sellingPrice = $ originalPrice + percent ( $ originalPrice , $ X [ $ i ] ) ;"}
{"text":"The discounted price of the item","code":"$ afterDiscount = $ sellingPrice - percent ( $ sellingPrice , $ X [ $ i ] ) ;"}
{"text":"Loss incurred","code":"$ loss += ( ( $ originalPrice - $ afterDiscount ) * $ quantity [ $ i ] ) ; } return $ loss ; }"}
{"text":"Driver code","code":"$ price = array ( 20 , 48 , 200 , 100 ) ; $ quantity = array ( 20 , 48 , 1 , 1 ) ; $ X = array ( 0 , 48 , 200 , 5 ) ;"}
{"text":"Total items","code":"$ n = count ( $ X ) ; echo getLoss ( $ price , $ quantity , $ X , $ n ) ; ? >"}
{"text":"Function to return the maximum absolute difference between any two elements of the array","code":"< ? php function maxAbsDiff ( $ arr , $ n ) {"}
{"text":"To store the minimum and the maximum elements from the array","code":"$ minEle = $ arr [ 0 ] ; $ maxEle = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ minEle = min ( $ minEle , $ arr [ $ i ] ) ; $ maxEle = max ( $ maxEle , $ arr [ $ i ] ) ; } return ( $ maxEle - $ minEle ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 1 , 5 , 3 ) ; $ n = sizeof ( $ arr ) ; echo maxAbsDiff ( $ arr , $ n ) ;"}
{"text":"Function to return the maximum sub - array sum","code":"< ? php function maxSubArraySum ( $ a , $ size ) {"}
{"text":"Initialized","code":"$ max_so_far = PHP_INT_MIN ; $ max_ending_here = 0 ;"}
{"text":"Traverse in the array","code":"for ( $ i = 0 ; $ i < $ size ; $ i ++ ) {"}
{"text":"Increase the sum","code":"$ max_ending_here = $ max_ending_here + $ a [ $ i ] ;"}
{"text":"If sub - array sum is more than the previous","code":"if ( $ max_so_far < $ max_ending_here ) $ max_so_far = $ max_ending_here ;"}
{"text":"If sum is negative","code":"if ( $ max_ending_here < 0 ) $ max_ending_here = 0 ; } return $ max_so_far ; }"}
{"text":"Function that returns the maximum sub - array sum after removing an element from the same sub - array","code":"function maximizeSum ( $ a , $ n ) { $ cnt = 0 ; $ mini = PHP_INT_MAX ; $ minSubarray = PHP_INT_MAX ;"}
{"text":"Maximum sub - array sum using Kadane 's Algorithm","code":"$ sum = maxSubArraySum ( $ a , $ n ) ; $ max_so_far = PHP_INT_MIN ; $ max_ending_here = 0 ;"}
{"text":"Re - apply Kadane 's with minor changes","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Increase the sum","code":"$ max_ending_here = $ max_ending_here + $ a [ $ i ] ; $ cnt ++ ; $ minSubarray = min ( $ a [ $ i ] , $ minSubarray ) ;"}
{"text":"If sub - array sum is greater than the previous","code":"if ( $ sum == $ max_ending_here ) {"}
{"text":"If elements are 0 , no removal","code":"if ( $ cnt == 1 ) $ mini = min ( $ mini , 0 ) ;"}
{"text":"If elements are more , then store the minimum value in the sub - array obtained till now","code":"else $ mini = min ( $ mini , $ minSubarray ) ; }"}
{"text":"If sum is negative","code":"if ( $ max_ending_here < 0 ) {"}
{"text":"Re - initialize everything","code":"$ max_ending_here = 0 ; $ cnt = 0 ; $ minSubarray = PHP_INT_MAX ; } } return $ sum - $ mini ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 3 , -2 , 3 ) ; $ n = sizeof ( $ a ) \/ sizeof ( $ a [ 0 ] ) ; echo maximizeSum ( $ a , $ n ) ; ? >"}
{"text":"Function that returns true if n is an Osiris number","code":"< ? php function isOsiris ( $ n ) {"}
{"text":"3 rd digit","code":"$ a = $ n % 10 ;"}
{"text":"2 nd digit","code":"$ b = floor ( $ n \/ 10 ) % 10 ;"}
{"text":"1 st digit","code":"$ c = floor ( $ n \/ 100 ) ; $ digit_sum = $ a + $ b + $ c ;"}
{"text":"Check the required condition","code":"if ( $ n == ( 2 * ( $ digit_sum ) * 11 ) ) { return true ; } return false ; }"}
{"text":"Driver code","code":"$ n = 132 ; if ( isOsiris ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function that returns true if n is a Dudeney number","code":"< ? php function isDudeney ( $ n ) { $ cube_rt = floor ( round ( ( pow ( $ n , 1.0 \/ 3.0 ) ) ) ) ;"}
{"text":"If n is not a perfect cube","code":"if ( $ cube_rt * $ cube_rt * $ cube_rt != $ n ) return false ; $ dig_sum = 0 ; $ temp = $ n ; while ( $ temp > 0 ) {"}
{"text":"Last digit","code":"$ rem = $ temp % 10 ;"}
{"text":"Update the digit sum","code":"$ dig_sum += $ rem ;"}
{"text":"Remove the last digit","code":"$ temp = $ temp \/ 10 ; }"}
{"text":"If cube root of n is not equal to the sum of its digits","code":"if ( $ cube_rt != $ dig_sum ) return false ; return true ; }"}
{"text":"Driver code","code":"$ n = 17576 ; if ( isDudeney ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to return the number of positive area triangles","code":"< ? php Function countTriangles ( $ a , $ n ) {"}
{"text":"To store the count of total triangles","code":"$ cnt = 0 ;"}
{"text":"To store the count of pairs of sticks with equal lengths","code":"$ pairs = 0 ;"}
{"text":"Back - traverse and count the number of triangles","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Count the number of pairs","code":"$ pairs += $ a [ $ i ] \/ 2 ;"}
{"text":"If we have one remaining stick and we have a pair","code":"if ( $ a [ $ i ] % 2 == 1 && $ pairs > 0 ) {"}
{"text":"Count 1 triangle","code":"$ cnt += 1 ;"}
{"text":"Reduce one pair","code":"$ pairs -= 1 ; } }"}
{"text":"Count the remaining triangles that can be formed","code":"$ cnt += ( int ) ( ( 2 * $ pairs ) \/ 3 ) ; return $ cnt ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 2 , 2 , 2 ) ; $ n = sizeof ( $ a ) ; echo ( countTriangles ( $ a , $ n ) ) ; ? >"}
{"text":"Function to return the smallest n digit number which is a multiple of 5","code":"< ? php function smallestMultiple ( $ n ) { if ( $ n == 1 ) return 5 ; return pow ( 10 , $ n - 1 ) ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo smallestMultiple ( $ n ) ; ? >"}
{"text":"Function to return the HCF of x and y","code":"< ? php function getHCF ( $ x , $ y ) {"}
{"text":"Minimum of the two numbers","code":"$ minimum = min ( $ x , $ y ) ;"}
{"text":"If both the numbers are divisible by the minimum of these two then the HCF is equal to the minimum","code":"if ( $ x % $ minimum == 0 && $ y % $ minimum == 0 ) return $ minimum ;"}
{"text":"Highest number between 2 and minimum \/ 2 which can divide both the numbers is the required HCF","code":"for ( $ i = $ minimum \/ 2 ; $ i >= 2 ; $ i -- ) {"}
{"text":"If both the numbers are divisible by i","code":"if ( $ x % $ i == 0 && $ y % $ i == 0 ) return $ i ; }"}
{"text":"1 divides every number","code":"return 1 ; }"}
{"text":"Driver code","code":"$ x = 16 ; $ y = 32 ; echo ( getHCF ( $ x , $ y ) ) ; ? >"}
{"text":"Function that returns true if n is prime","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function that return true if the product of the first n natural numbers is divisible by the sum of first n natural numbers","code":"function isDivisible ( $ n ) { if ( isPrime ( $ n + 1 ) ) return false ; return true ; }"}
{"text":"Driver code","code":"$ n = 6 ; if ( isDivisible ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ R = 5 ; $ C = 5 ;"}
{"text":"Function to return the maximum sum of a cocktail glass","code":"function findMaxCock ( $ ar ) { global $ R , $ C ;"}
{"text":"If no cocktail glass is possible","code":"if ( $ R < 3 $ C < 3 ) return -1 ;"}
{"text":"Initialize max_sum with the mini","code":"$ max_sum = PHP_INT_MIN ;"}
{"text":"Here loop runs ( R - 2 ) * ( C - 2 ) times considering different top left cells of cocktail glasses","code":"for ( $ i = 0 ; $ i < $ R - 2 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ C - 2 ; $ j ++ ) {"}
{"text":"Considering mat [ i ] [ j ] as the top left cell of the cocktail glass","code":"$ sum = ( $ ar [ $ i ] [ $ j ] + $ ar [ $ i ] [ $ j + 2 ] ) + ( $ ar [ $ i + 1 ] [ $ j + 1 ] ) + ( $ ar [ $ i + 2 ] [ $ j ] + $ ar [ $ i + 2 ] [ $ j + 1 ] + $ ar [ $ i + 2 ] [ $ j + 2 ] ) ;"}
{"text":"Update the max_sum","code":"$ max_sum = max ( $ max_sum , $ sum ) ; } } return $ max_sum ; }"}
{"text":"Driver code","code":"$ ar = array ( array ( 0 , 3 , 0 , 6 , 0 ) , array ( 0 , 1 , 1 , 0 , 0 ) , array ( 1 , 1 , 1 , 0 , 0 ) , array ( 0 , 0 , 2 , 0 , 1 ) , array ( 0 , 2 , 0 , 1 , 3 ) ) ; echo ( findMaxCock ( $ ar ) ) ; ? >"}
{"text":"Function to return the count of sub - arrays in the given permutation of first n natural numbers such that their median is m","code":"< ? php function segments ( $ n , $ p , $ m ) { $ c = array ( ) ; $ c [ 0 ] = 1 ; $ has = false ; $ sum = 0 ; $ ans = 0 ; for ( $ r = 0 ; $ r < $ n ; $ r ++ ) {"}
{"text":"If element is less than m","code":"if ( $ p [ $ r ] < $ m ) $ sum -- ;"}
{"text":"If element greater than m","code":"else if ( $ p [ $ r ] > $ m ) $ sum ++ ;"}
{"text":"If m is found","code":"if ( $ p [ $ r ] == $ m ) $ has = true ;"}
{"text":"Count the answer","code":"if ( $ has ) $ ans += $ c [ $ sum ] + $ c [ $ sum - 1 ] ;"}
{"text":"Increment sum","code":"else $ c [ $ sum ] ++ ; } return $ ans ; }"}
{"text":"Driver code","code":"$ a = array ( 2 , 4 , 5 , 3 , 1 ) ; $ n = count ( $ a ) ; $ m = 4 ; echo segments ( $ n , $ a , $ m ) ; ? >"}
{"text":"Function to return the count of odd days","code":"< ? php function oddDays ( $ N ) {"}
{"text":"Count of years divisible by 100 and 400","code":"$ hund1 = floor ( $ N \/ 100 ) ; $ hund4 = floor ( $ N \/ 400 ) ;"}
{"text":"Every 4 th year is a leap year","code":"$ leap = $ N >> 2 ; $ ord = $ N - $ leap ;"}
{"text":"Every 100 th year is divisible by 4 but is not a leap year","code":"if ( $ hund1 ) { $ ord += $ hund1 ; $ leap -= $ hund1 ; }"}
{"text":"Every 400 th year is divisible by 100 but is a leap year","code":"if ( $ hund4 ) { $ ord -= $ hund4 ; $ leap += $ hund4 ; }"}
{"text":"Total number of extra days","code":"$ days = $ ord + $ leap * 2 ;"}
{"text":"modulo ( 7 ) for final answer","code":"$ odd = $ days % 7 ; return $ odd ; }"}
{"text":"Number of days","code":"$ N = 100 ; echo oddDays ( $ N ) ; ? >"}
{"text":"Function to find the area of the biggest ellipse","code":"< ? php function ellipsearea ( $ r ) {"}
{"text":"the radius cannot be negative","code":"if ( $ r < 0 ) return -1 ;"}
{"text":"area of the ellipse","code":"$ a = ( 3.14 * $ r * $ r ) \/ 4 ; return $ a ; }"}
{"text":"Driver code","code":"$ r = 5 ; echo ellipsearea ( $ r ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to return the count of total binary prefix which are divisible by x","code":"< ? php function CntDivbyX ( $ arr , $ n , $ x ) {"}
{"text":"Initialize with zero","code":"$ number = 0 ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Convert all prefixes to decimal","code":"$ number = $ number * 2 + $ arr [ $ i ] ;"}
{"text":"If number is divisible by x then increase count","code":"if ( ( $ number % $ x == 0 ) ) $ count += 1 ; } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 0 , 1 , 0 , 1 , 1 , 0 ) ; $ n = sizeof ( $ arr ) ; $ x = 2 ; echo CntDivbyX ( $ arr , $ n , $ x ) ;"}
{"text":"Function to return the count of consecutive elements in the array which are equal","code":"< ? php function countCon ( $ ar , $ n ) { $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"If consecutive elements are same","code":"if ( $ ar [ $ i ] == $ ar [ $ i + 1 ] ) $ cnt ++ ; } return $ cnt ; }"}
{"text":"Driver code","code":"$ ar = array ( 1 , 2 , 2 , 3 , 4 , 4 , 5 , 5 , 5 , 5 ) ; $ n = sizeof ( $ ar ) ; echo countCon ( $ ar , $ n ) ; ? >"}
{"text":"Function to reduce a fraction to its lowest form","code":"< ? php function reduceFraction ( $ x , $ y ) { $ d ; $ d = __gcd ( $ x , $ y ) ; $ x = $ x \/ $ d ; $ y = $ y \/ $ d ; echo ( \" x \u2581 = \u2581 \" . $ x . \" , y = \" } function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Driver Code","code":"$ x = 16 ; $ y = 10 ; reduceFraction ( $ x , $ y ) ; ? >"}
{"text":"Function to return the no . of years","code":"< ? php function noOfYears ( $ t1 , $ n1 , $ t2 ) { $ years = ( ( $ t2 - 1 ) * $ n1 \/ ( $ t1 - 1 ) ) ; return $ years ; }"}
{"text":"Driver code","code":"$ T1 = 3 ; $ N1 = 5 ; $ T2 = 6 ; print ( noOfYears ( $ T1 , $ N1 , $ T2 ) ) ; ? >"}
{"text":"Function that returns true if n divides the sum of the factorials of its digits","code":"< ? php function isPossible ( $ n ) {"}
{"text":"To store factorials of digits","code":"$ fac = array ( ) ; $ fac [ 0 ] = $ fac [ 1 ] = 1 ; for ( $ i = 2 ; $ i < 10 ; $ i ++ ) $ fac [ $ i ] = $ fac [ $ i - 1 ] * $ i ;"}
{"text":"To store sum of the factorials of the digits","code":"$ sum = 0 ;"}
{"text":"Store copy of the given number","code":"$ x = $ n ;"}
{"text":"Store sum of the factorials of the digits","code":"while ( $ x ) { $ sum += $ fac [ $ x % 10 ] ; $ x \/= 10 ; }"}
{"text":"If it is divisible","code":"if ( $ sum % $ n == 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ n = 19 ; if ( isPossible ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to find the longest subsequence having LCM less than or equal to K","code":"< ? php function findSubsequence ( $ arr , $ n , $ k ) {"}
{"text":"Map to store unique elements and their frequencies","code":"$ M = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ M [ $ arr [ $ i ] ] = 0 ;"}
{"text":"Update the frequencies","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) ++ $ M [ $ arr [ $ i ] ] ;"}
{"text":"Array to store the count of numbers whom 1 <= X <= K is a multiple of","code":"$ numCount = array ( ) ; for ( $ i = 0 ; $ i <= $ k ; ++ $ i ) $ numCount [ $ i ] = 0 ;"}
{"text":"Check every unique element","code":"foreach ( $ M as $ key = > $ value ) { if ( $ key <= $ k ) {"}
{"text":"Find all its multiples <= K","code":"for ( $ i = 1 ; ; ++ $ i ) { if ( $ key * $ i > $ k ) break ;"}
{"text":"Store its frequency","code":"$ numCount [ $ key * $ i ] += $ value ; } } else break ; } $ lcm = 0 ; $ length = 0 ;"}
{"text":"Obtain the number having maximum count","code":"for ( $ i = 1 ; $ i <= $ k ; ++ $ i ) { if ( $ numCount [ $ i ] > $ length ) { $ length = $ numCount [ $ i ] ; $ lcm = $ i ; } }"}
{"text":"Condition to check if answer doesn 't exist","code":"if ( $ lcm == 0 ) echo - 1 << \" STRNEWLINE \" ; else {"}
{"text":"Print the answer","code":"echo \" LCM = \" , \u2581 $ lcm , STRNEWLINE \" , Length = \" , \u2581 $ length , \u2581 \" \" ; STRNEWLINE echo \u2581 \" Indexes = \" for ( $ i = 0 ; $ i < $ n ; ++ $ i ) if ( $ lcm % $ arr [ $ i ] == 0 ) echo $ i , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ k = 14 ; $ arr = array ( 2 , 3 , 4 , 5 ) ; $ n = count ( $ arr ) ; findSubsequence ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function power ( $ x , $ y ) { $ p = 1000000007 ;"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Function to count the number of binary strings of length N having only 0 ' s \u2581 and \u2581 1' s","code":"function findCount ( $ N ) { $ count = power ( 2 , $ N ) ; return $ count ; }"}
{"text":"Driver code","code":"$ N = 25 ; echo findCount ( $ N ) ; ? >"}
{"text":"Function to return the most significant bit","code":"< ? php function msb ( $ x ) { $ ret = 0 ; while ( ( $ x >> ( $ ret + 1 ) ) != 0 ) $ ret ++ ; return $ ret ; }"}
{"text":"Function to return the required XOR","code":"function xorRange ( $ l , $ r ) {"}
{"text":"Finding the MSB","code":"$ max_bit = msb ( $ r ) ;"}
{"text":"Value of the current bit to be added","code":"$ mul = 2 ;"}
{"text":"To store the final answer","code":"$ ans = 0 ;"}
{"text":"Loop for case 1","code":"for ( $ i = 1 ; $ i <= $ max_bit ; $ i ++ ) {"}
{"text":"Edge case when both the integers lie in the same segment of continuous 1 s","code":"if ( ( int ) ( ( $ l \/ $ mul ) * $ mul ) == ( int ) ( ( $ r \/ $ mul ) * $ mul ) ) { if ( ( ( $ l & ( 1 << $ i ) ) != 0 ) && ( $ r - $ l + 1 ) % 2 == 1 ) $ ans += $ mul ; $ mul *= 2 ; continue ; }"}
{"text":"To store whether parity of count is odd","code":"$ odd_c = 0 ; if ( ( ( $ l & ( 1 << $ i ) ) != 0 ) && $ l % 2 == 1 ) $ odd_c = ( $ odd_c ^ 1 ) ; if ( ( ( $ r & ( 1 << $ i ) ) != 0 ) && $ r % 2 == 0 ) $ odd_c = ( $ odd_c ^ 1 ) ;"}
{"text":"Updating the answer if parity is odd","code":"if ( $ odd_c ) $ ans += $ mul ;"}
{"text":"Updating the number to be added","code":"$ mul *= 2 ; }"}
{"text":"Case 2","code":"$ zero_bit_cnt = ( int ) ( ( $ r - $ l + 1 ) \/ 2 ) ; if ( $ l % 2 == 1 && $ r % 2 == 1 ) $ zero_bit_cnt ++ ; if ( $ zero_bit_cnt % 2 == 1 ) $ ans ++ ; return $ ans ; }"}
{"text":"Driver code","code":"$ l = 1 ; $ r = 4 ;"}
{"text":"Final answer","code":"echo xorRange ( $ l , $ r ) ; ? >"}
{"text":"Function to return the required XOR","code":"< ? php function computeXOR ( $ n ) {"}
{"text":"Modulus operator are expensive on most of the computers . n & 3 will be equivalent to n % 4 n % 4","code":"$ x = $ n & 3 ; switch ( $ x ) {"}
{"text":"If n is a multiple of 4","code":"case 0 : return $ n ;"}
{"text":"If n % 4 gives remainder 1","code":"case 1 : return 1 ;"}
{"text":"If n % 4 gives remainder 2","code":"case 2 : return $ n + 1 ;"}
{"text":"If n % 4 gives remainder 3","code":"case 3 : return 0 ; } return 0 ; }"}
{"text":"Driver code","code":"$ l = 1 ; $ r = 4 ; echo ( computeXOR ( $ r ) ^ computeXOR ( $ l - 1 ) ) ; ? >"}
{"text":"Function to find the number of integers from 1 to n which contains 0 ' s \u2581 and \u2581 1' s only","code":"< ? php function countNumbers ( $ x , $ n ) {"}
{"text":"If number is greater than n","code":"if ( $ x > $ n ) return 0 ;"}
{"text":"otherwise add count this number and call two functions","code":"return 1 + countNumbers ( $ x * 10 , $ n ) + countNumbers ( $ x * 10 + 1 , $ n ) ; }"}
{"text":"Driver code","code":"$ n = 120 ; echo ( countNumbers ( 1 , $ n ) ) ; ? >"}
{"text":"Function to count number of times prime P divide factorial N","code":"< ? php function checkfact ( $ N , $ countprime , $ prime ) { $ countfact = 0 ; if ( $ prime == 2 $ prime == 3 ) $ countfact ++ ; $ divide = $ prime ;"}
{"text":"Lengendre Formula","code":"while ( ( int ) ( $ N \/ $ divide ) != 0 ) { $ countfact += ( int ) ( $ N \/ $ divide ) ; $ divide = $ divide * $ divide ; } if ( $ countfact >= $ countprime ) return true ; else return false ; }"}
{"text":"Function to find count number of times all prime P divide summation","code":"function check ( $ N ) {"}
{"text":"Formula for summation of square after removing n and constant 6","code":"$ sumsquares = ( $ N + 1 ) * ( 2 * $ N + 1 ) ; $ countprime = 0 ;"}
{"text":"Loop to traverse over all prime P which divide summation","code":"for ( $ i = 2 ; $ i <= sqrt ( $ sumsquares ) ; $ i ++ ) { $ flag = 0 ; while ( $ sumsquares % $ i == 0 ) { $ flag = 1 ; $ countprime ++ ; $ sumsquares = ( int ) ( $ sumsquares \/ $ i ) ; } if ( $ flag == 1 ) { if ( checkfact ( $ N - 1 , $ countprime , $ i ) ) return false ; $ countprime = 0 ; } }"}
{"text":"If Number itself is a Prime Number","code":"if ( $ sumsquares != 1 ) if ( checkfact ( $ N - 1 , 1 , $ sumsquares ) ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ N = 5 ; if ( check ( $ N ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"PHP program to count number of non increasing subarrays","code":"< ? php function countNonIncreasing ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ cnt = 0 ;"}
{"text":"Initialize length of current non increasing subarray","code":"$ len = 1 ;"}
{"text":"Traverse through the array","code":"for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) {"}
{"text":"If arr [ i + 1 ] is less than or equal to arr [ i ] , then increment length","code":"if ( $ arr [ $ i + 1 ] <= $ arr [ $ i ] ) $ len ++ ;"}
{"text":"Else Update count and reset length","code":"else { $ cnt += ( ( $ len + 1 ) * $ len ) \/ 2 ; $ len = 1 ; } }"}
{"text":"If last length is more than 1","code":"if ( $ len > 1 ) $ cnt += ( ( $ len + 1 ) * $ len ) \/ 2 ; return $ cnt ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 2 , 3 , 7 , 1 , 1 ) ; $ n = sizeof ( $ arr ) ; echo countNonIncreasing ( $ arr , $ n ) ; ? >"}
{"text":"Function to print the good permutation of first N natural numbers","code":"< ? php function printPermutation ( $ n ) {"}
{"text":"If n is odd","code":"if ( $ n % 2 != 0 ) { echo ( \" - 1\" ) ; }"}
{"text":"Otherwise","code":"else for ( $ i = 1 ; $ i <= $ n \/ 2 ; $ i ++ ) { echo ( 2 * $ i . \" \u2581 \" . ( ( 2 * $ i ) - 1 ) . \" \u2581 \" ) ; } return $ n ; }"}
{"text":"Driver code","code":"$ n = 4 ; printPermutation ( $ n ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php $ MAXN = 10000000 ;"}
{"text":"Function to find the minimum number of steps","code":"function minimumSteps ( $ n , $ m , $ a , $ b ) { global $ MAXN ;"}
{"text":"If n exceeds M","code":"if ( $ n > $ m ) return $ MAXN ;"}
{"text":"If N reaches the target","code":"if ( $ n == $ m ) return 0 ;"}
{"text":"The minimum of both the states will be the answer","code":"return min ( 1 + minimumSteps ( $ n * $ a , $ m , $ a , $ b ) , 1 + minimumSteps ( $ n * $ b , $ m , $ a , $ b ) ) ; }"}
{"text":"Driver code","code":"$ n = 120 ; $ m = 51840 ; $ a = 2 ; $ b = 3 ; echo minimumSteps ( $ n , $ m , $ a , $ b ) ; ? >"}
{"text":"Function to return the minimum operations required","code":"< ? php function minOperations ( $ n , $ m ) { if ( $ m % $ n != 0 ) return -1 ; $ minOperations = 0 ; $ q = $ m \/ $ n ;"}
{"text":"Counting all 2 s","code":"while ( $ q % 2 == 0 ) { $ q = $ q \/ 2 ; $ minOperations ++ ; }"}
{"text":"Counting all 3 s","code":"while ( $ q % 3 == 0 ) { $ q = $ q \/ 3 ; $ minOperations ++ ; }"}
{"text":"If q contained only 2 and 3 as the only prime factors then it must be 1 now","code":"if ( $ q == 1 ) return $ minOperations ; return -1 ; }"}
{"text":"Driver code","code":"$ n = 120 ; $ m = 51840 ; echo ( minOperations ( $ n , $ m ) ) ; ? >"}
{"text":"Function to return the nth Fibonacci number","code":"< ? php function fib ( $ n ) { $ phi = ( 1 + sqrt ( 5 ) ) \/ 2 ; return ( int ) round ( pow ( $ phi , $ n ) \/ sqrt ( 5 ) ) ; }"}
{"text":"Function to return the required sum","code":"function calculateSum ( $ l , $ r ) {"}
{"text":"To store the sum","code":"$ sum = 0 ;"}
{"text":"Calculate the sum","code":"for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) $ sum += fib ( $ i ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ l = 4 ; $ r = 8 ; echo calculateSum ( $ l , $ r ) ; ? >"}
{"text":"Function to find the radius of the sphere","code":"< ? php function sphereSide ( $ h , $ r ) {"}
{"text":"height and radius cannot be negative","code":"if ( $ h < 0 && $ r < 0 ) return -1 ;"}
{"text":"radius of the sphere","code":"$ R = ( ( $ h * $ r * sqrt ( 2 ) ) \/ ( $ h + sqrt ( 2 ) * $ r ) ) \/ 2 ; return $ R ; }"}
{"text":"Driver code","code":"$ h = 5 ; $ r = 6 ; echo ( sphereSide ( $ h , $ r ) ) ; ? >"}
{"text":"Function to find the number of ways to divide N into four parts such that a = c and b = d","code":"< ? php function possibleways ( $ n ) { if ( $ n % 2 == 1 ) return 0 ; else if ( $ n % 4 == 0 ) return $ n \/ 4 - 1 ; else return $ n \/ 4 ; }"}
{"text":"Driver code","code":"$ n = 20 ; echo possibleways ( $ n ) ; ? >"}
{"text":"Function to count sub - arrays whose product is divisible by K","code":"< ? php function countSubarrays ( $ arr , $ n , $ K ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i ; $ j < $ n ; $ j ++ ) {"}
{"text":"Calculate the product of the current sub - array","code":"$ product = 1 ; for ( $ x = $ i ; $ x <= $ j ; $ x ++ ) $ product *= $ arr [ $ x ] ;"}
{"text":"If product of the current sub - array is divisible by K","code":"if ( $ product % $ K == 0 ) $ count ++ ; } } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 6 , 2 , 8 ) ; $ n = count ( $ arr ) ; $ K = 4 ; echo countSubarrays ( $ arr , $ n , $ K ) ; ? >"}
{"text":"Function to print the pair that gives maximum nCr","code":"< ? php function printMaxValPair ( $ v , $ n ) { sort ( $ v ) ;"}
{"text":"This gives the value of N in nCr","code":"$ N = $ v [ $ n - 1 ] ;"}
{"text":"Case 1 : When N is odd","code":"if ( $ N % 2 == 1 ) { $ first_maxima = $ N \/ 2 ; $ second_maxima = $ first_maxima + 1 ; $ ans1 = 3e18 ; $ ans2 = 3e18 ; $ from_left = -1 ; $ from_right = -1 ; $ from = -1 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ v [ $ i ] > $ first_maxima ) { $ from = $ i ; break ; } else { $ diff = $ first_maxima - $ v [ $ i ] ; if ( $ diff < $ ans1 ) { $ ans1 = $ diff ; $ from_left = $ v [ $ i ] ; } } } $ from_right = $ v [ $ from ] ; $ diff1 = $ first_maxima - $ from_left ; $ diff2 = $ from_right - $ second_maxima ; if ( $ diff1 < $ diff2 ) echo $ N . \" \u2581 \" . $ from_left ; else echo $ N . \" \u2581 \" . $ from_right ; }"}
{"text":"Case 2 : When N is even","code":"else { $ maxima = $ N \/ 2 ; $ ans1 = 3e18 ; $ R = -1 ; for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { $ diff = abs ( $ v [ $ i ] - $ maxima ) ; if ( $ diff < $ ans1 ) { $ ans1 = $ diff ; $ R = $ v [ $ i ] ; } } echo $ N . \" \u2581 \" . $ R ; } }"}
{"text":"Driver code","code":"$ v = array ( 1 , 1 , 2 , 3 , 6 , 1 ) ; $ n = count ( $ v ) ; printMaxValPair ( $ v , $ n ) ; ? >"}
{"text":"Function to return the count of good permutations","code":"< ? php function Permutations ( $ n , $ k ) {"}
{"text":"For m = 0 , ans is 1","code":"$ ans = 1 ;"}
{"text":"If k is greater than 1","code":"if ( $ k >= 2 ) $ ans += ( $ n ) * ( $ n - 1 ) \/ 2 ;"}
{"text":"If k is greater than 2","code":"if ( $ k >= 3 ) $ ans += ( $ n ) * ( $ n - 1 ) * ( $ n - 2 ) * 2 \/ 6 ;"}
{"text":"If k is greater than 3","code":"if ( $ k >= 4 ) $ ans += ( $ n ) * ( $ n - 1 ) * ( $ n - 2 ) * ( $ n - 3 ) * 9 \/ 24 ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 2 ; echo ( Permutations ( $ n , $ k ) ) ; ? >"}
{"text":"Function to return a ^ n","code":"< ? php function power ( $ a , $ n ) { if ( $ n == 0 ) return 1 ; $ p = power ( $ a , $ n \/ 2 ) ; $ p = $ p * $ p ; if ( $ n & 1 ) $ p = $ p * $ a ; return $ p ; }"}
{"text":"Function to return count of integers that satisfy n % phi ( n ) = 0","code":"function countIntegers ( $ l , $ r ) { $ ans = 0 ; $ i = 1 ; $ v = power ( 2 , $ i ) ; while ( $ v <= $ r ) { while ( $ v <= $ r ) { if ( $ v >= $ l ) $ ans ++ ; $ v = $ v * 3 ; } $ i ++ ; $ v = power ( 2 , $ i ) ; } if ( $ l == 1 ) $ ans ++ ; return $ ans ; }"}
{"text":"Driver Code","code":"$ l = 12 ; $ r = 21 ; echo countIntegers ( $ l , $ r ) ; ? >"}
{"text":"Function to find the number of pairs from the set of natural numbers up to N whose sum is divisible by K","code":"< ? php function findPairCount ( $ N , $ K ) { $ count = 0 ;"}
{"text":"Declaring a Hash to store count","code":"$ rem = array ( 0 , $ K , NULL ) ; $ rem [ 0 ] = intval ( $ N \/ $ K ) ;"}
{"text":"Storing the count of integers with a specific remainder in Hash array","code":"for ( $ i = 1 ; $ i < $ K ; $ i ++ ) $ rem [ $ i ] = intval ( ( $ N - $ i ) \/ $ K ) + 1 ;"}
{"text":"Check if K is even","code":"if ( $ K % 2 == 0 ) {"}
{"text":"Count of pairs when both integers are divisible by K","code":"$ count += ( $ rem [ 0 ] * intval ( ( $ rem [ 0 ] - 1 ) ) \/ 2 ) ;"}
{"text":"Count of pairs when one remainder is R and other remainder is K - R","code":"for ( $ i = 1 ; $ i < intval ( $ K \/ 2 ) ; $ i ++ ) $ count += $ rem [ $ i ] * $ rem [ $ K - $ i ] ;"}
{"text":"Count of pairs when both the remainders are K \/ 2","code":"$ count += ( $ rem [ intval ( $ K \/ 2 ) ] * intval ( ( $ rem [ intval ( $ K \/ 2 ) ] - 1 ) ) \/ 2 ) ; } else {"}
{"text":"Count of pairs when both integers are divisible by K","code":"$ count += ( $ rem [ 0 ] * intval ( ( $ rem [ 0 ] - 1 ) ) \/ 2 ) ;"}
{"text":"Count of pairs when one remainder is R and other remainder is K - R","code":"for ( $ i = 1 ; $ i <= intval ( $ K \/ 2 ) ; $ i ++ ) $ count += $ rem [ $ i ] * $ rem [ $ K - $ i ] ; } return $ count ; }"}
{"text":"Driver code","code":"$ N = 10 ; $ K = 4 ;"}
{"text":"Print the count of pairs","code":"echo findPairCount ( $ N , $ K ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 10005 ;"}
{"text":"To check if a number is prime or not","code":"$ prime = array_fill ( 0 , $ N , true ) ;"}
{"text":"Sieve of Eratosthenes function to find all prime numbers","code":"function sieve ( ) { global $ prime , $ N ; $ prime [ 1 ] = false ; $ prime [ 0 ] = false ; for ( $ i = 2 ; $ i < $ N ; $ i ++ ) if ( $ prime [ $ i ] ) for ( $ j = $ i * 2 ; $ j < $ N ; $ j += $ i ) $ prime [ $ j ] = false ; }"}
{"text":"Function to return the sum of all truncatable primes below n","code":"function sumTruncatablePrimes ( $ n ) { global $ prime , $ N ;"}
{"text":"To store the required sum","code":"$ sum = 0 ;"}
{"text":"Check every number below n","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) { $ num = $ i ; $ flag = true ;"}
{"text":"Check from right to left","code":"while ( $ num ) {"}
{"text":"If number is not prime at any stage","code":"if ( ! $ prime [ $ num ] ) { $ flag = false ; break ; } $ num = ( int ) ( $ num \/ 10 ) ; } $ num = $ i ; $ power = 10 ;"}
{"text":"Check from left to right","code":"while ( ( int ) ( $ num \/ $ power ) ) {"}
{"text":"If number is not prime at any stage","code":"if ( ! $ prime [ $ num % $ power ] ) { $ flag = false ; break ; } $ power *= 10 ; }"}
{"text":"If flag is still true","code":"if ( $ flag ) $ sum += $ i ; }"}
{"text":"Return the required sum","code":"return $ sum ; }"}
{"text":"Driver code","code":"$ n = 25 ; sieve ( ) ; echo sumTruncatablePrimes ( $ n ) ; ? >"}
{"text":"Function to print the largest and the smallest n - digit perfect squares","code":"< ? php function nDigitPerfectSquares ( $ n ) {"}
{"text":"Smallest n - digit perfect square","code":"echo pow ( ceil ( sqrt ( pow ( 10 , $ n - 1 ) ) ) , 2 ) , \" \" ;"}
{"text":"Largest n - digit perfect square","code":"echo pow ( ceil ( sqrt ( pow ( 10 , $ n ) ) ) - 1 , 2 ) ; }"}
{"text":"Driver code","code":"$ n = 4 ; nDigitPerfectSquares ( $ n ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 3 ;"}
{"text":"Function to return the maximum trace possible for a sub - matrix of the given matrix","code":"function MaxTraceSub ( $ mat ) { global $ N ; $ max_trace = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ r = $ i ; $ s = $ j ; $ trace = 0 ;"}
{"text":"Calculate the trace for each of the sub - matrix with top left corner at cell ( r , s )","code":"while ( $ r < $ N && $ s < $ N ) { $ trace += $ mat [ $ r ] [ $ s ] ; $ r ++ ; $ s ++ ;"}
{"text":"Update the maximum trace","code":"$ max_trace = max ( $ trace , $ max_trace ) ; } } }"}
{"text":"Return the maximum trace","code":"return $ max_trace ; }"}
{"text":"Driver code","code":"$ mat = array ( array ( 10 , 2 , 5 ) , array ( 6 , 10 , 4 ) , array ( 2 , 7 , -10 ) ) ; print ( MaxTraceSub ( $ mat ) ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ n = 3 ; $ m = 3 ;"}
{"text":"Function that returns true if matrix1 can be converted to matrix2 with the given operation","code":"function check ( $ a , $ b ) { global $ n , $ m ;"}
{"text":"Traverse all the diagonals starting at first column","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ v1 = array ( ) ; $ v2 = array ( ) ; $ r = $ i ; $ col = 0 ;"}
{"text":"Traverse in diagonal","code":"while ( $ r >= 0 && $ col < $ m ) {"}
{"text":"Store the diagonal elements","code":"array_push ( $ v1 , $ a [ $ r ] [ $ col ] ) ; array_push ( $ v2 , $ b [ $ r ] [ $ col ] ) ;"}
{"text":"Move up","code":"$ r -- ; $ col ++ ; }"}
{"text":"Sort the elements","code":"sort ( $ v1 ) ; sort ( $ v2 ) ;"}
{"text":"Check if they are same","code":"for ( $ i = 0 ; $ i < count ( $ v1 ) ; $ i ++ ) { if ( $ v1 [ $ i ] != $ v2 [ $ i ] ) return false ; } }"}
{"text":"Traverse all the diagonals starting at last row","code":"for ( $ j = 1 ; $ j < $ m ; $ j ++ ) { $ v1 = array ( ) ; $ v2 = array ( ) ; $ r = $ n - 1 ; $ col = $ j ;"}
{"text":"Traverse in the diagonal","code":"while ( $ r >= 0 && $ col < $ m ) {"}
{"text":"Store diagonal elements","code":"array_push ( $ v1 , $ a [ $ r ] [ $ col ] ) ; array_push ( $ v2 , $ b [ $ r ] [ $ col ] ) ; $ r -- ; $ col ++ ; }"}
{"text":"Sort all elements","code":"sort ( $ v1 ) ; sort ( $ v2 ) ;"}
{"text":"Check for same","code":"for ( $ i = 0 ; $ i < count ( $ v1 ) ; $ i ++ ) { if ( $ v1 [ $ i ] != $ v2 [ $ i ] ) return false ; } }"}
{"text":"If every element matches","code":"return true ; }"}
{"text":"Driver code","code":"$ a = array ( array ( 1 , 2 , 3 ) , array ( 4 , 5 , 6 ) , array ( 7 , 8 , 9 ) ) ; $ b = array ( array ( 1 , 4 , 7 ) , array ( 2 , 5 , 6 ) , array ( 3 , 8 , 9 ) ) ; if ( check ( $ a , $ b ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to print last digit of product a * b","code":"< ? php function lastDigit ( $ a , $ b ) { $ lastDig = ( ord ( $ a [ strlen ( $ a ) - 1 ] ) - 48 ) * ( ord ( $ b [ strlen ( $ b ) - 1 ] ) - 48 ) ; echo $ lastDig % 10 ; }"}
{"text":"Driver code","code":"$ a = \"1234567891233\" ; $ b = \"1234567891233156\" ; lastDigit ( $ a , $ b ) ; ? >"}
{"text":"Function to print the smallest and largest palindrome with N digits","code":"< ? php function printPalindrome ( $ n ) { if ( $ n == 1 ) { echo \" Smallest \u2581 Palindrome : \u2581 0 STRNEWLINE \" ; echo \" Largest \u2581 Palindrome : \u2581 9\" ; } else { echo \" Smallest \u2581 Palindrome : \u2581 \" , pow ( 10 , $ n - 1 ) + 1 ; echo \" Largest Palindrome : \" pow ( 10 , $ n ) - 1 ; } }"}
{"text":"Driver Code","code":"$ n = 4 ; printPalindrome ( $ n ) ; ? >"}
{"text":"Function to print sum of 2 numbers without propagating carry","code":"< ? php function printSum ( $ a , $ b ) { $ res = 0 ; $ temp1 = 0 ; $ temp2 = 0 ;"}
{"text":"Reverse a","code":"while ( $ a != 0 ) { $ temp1 = $ temp1 * 10 + ( $ a % 10 ) ; $ a = ( int ) ( $ a \/ 10 ) ; } $ a = $ temp1 ;"}
{"text":"Reverse b","code":"while ( $ b != 0 ) { $ temp2 = $ temp2 * 10 + ( $ b % 10 ) ; $ b = ( int ) ( $ b \/ 10 ) ; } $ b = $ temp2 ;"}
{"text":"Generate sum Since length of both a and b are same , take any one of them .","code":"while ( $ a != 0 ) {"}
{"text":"Extract digits from a and b and add","code":"$ sum = ( $ a % 10 + $ b % 10 ) ;"}
{"text":"If sum is single digit","code":"if ( ( int ) ( $ sum \/ 10 ) == 0 ) { $ res = $ res * 10 + $ sum ; } else {"}
{"text":"If sum is not single digit reverse sum","code":"$ temp1 = 0 ; while ( $ sum != 0 ) { $ temp1 = $ temp1 * 10 + ( $ sum % 10 ) ; $ sum = ( int ) ( $ sum \/ 10 ) ; } $ sum = $ temp1 ;"}
{"text":"Extract digits from sum and append to result","code":"while ( $ sum != 0 ) { $ res = $ res * 10 + ( $ sum % 10 ) ; $ sum = ( int ) ( $ sum \/ 10 ) ; } } $ a = ( int ) ( $ a \/ 10 ) ; $ b = ( int ) ( $ b \/ 10 ) ; } return $ res ; }"}
{"text":"Driver code","code":"$ a = 7752 ; $ b = 8834 ; echo ( printSum ( $ a , $ b ) ) ; ? >"}
{"text":"Function to return the number of digits before the decimal in a \/ b","code":"< ? php function countDigits ( $ a , $ b ) { $ count = 0 ;"}
{"text":"Absolute value of a \/ b","code":"$ p = abs ( $ a \/ $ b ) ;"}
{"text":"If result is 0","code":"if ( $ p == 0 ) return 1 ;"}
{"text":"Count number of digits in the result","code":"while ( $ p > 0 ) { $ count ++ ; $ p = ( int ) ( $ p \/ 10 ) ; }"}
{"text":"Return the required count of digits","code":"return $ count ; }"}
{"text":"Driver code","code":"$ a = 100 ; $ b = 10 ; echo countDigits ( $ a , $ b ) ; ? >"}
{"text":"Function to return the number of digits before the decimal in a \/ b","code":"< ? php function countDigits ( $ a , $ b ) {"}
{"text":"Return the required count of digits","code":"return floor ( log10 ( abs ( $ a ) ) - log10 ( abs ( $ b ) ) ) + 1 ; }"}
{"text":"Driver code","code":"$ a = 100 ; $ b = 10 ; echo countDigits ( $ a , $ b ) ; ? >"}
{"text":"Function to return smallest even number with n digits","code":"< ? php function smallestOdd ( $ n ) { if ( $ n == 1 ) return 1 ; return pow ( 10 , $ n - 1 ) + 1 ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo smallestOdd ( $ n ) ; ? >"}
{"text":"Function to print the largest n - digit even and odd numbers","code":"< ? php function findNumbers ( $ n ) { $ odd = pow ( 10 , $ n ) - 1 ; $ even = $ odd - 1 ; echo \" Even \u2581 = \u2581 $ even \u2581 STRNEWLINE \" ; echo \" Odd \u2581 = \u2581 $ odd \" ; }"}
{"text":"Driver code","code":"$ n = 4 ; findNumbers ( $ n ) ; ? >"}
{"text":"Function to return the length of the longest sub - array whose product of elements is 0","code":"< ? php function longestSubArray ( $ arr , $ n ) { $ isZeroPresent = false ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] == 0 ) { $ isZeroPresent = true ; break ; } } if ( $ isZeroPresent ) return $ n ; return 0 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 0 , 1 , 2 , 0 ) ; $ n = sizeof ( $ arr ) ; echo longestSubArray ( $ arr , $ n ) ; ? >"}
{"text":"Function to return smallest even number with n digits","code":"< ? php function smallestEven ( $ n ) { if ( $ n == 1 ) return 0 ; return pow ( 10 , $ n - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo smallestEven ( $ n ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to return the maximum profit","code":"function maxProfit ( $ n , $ a , $ b , $ x , $ y ) { $ res = $ x * ( $ n \/ $ a ) ; $ res += $ y * ( $ n \/ $ b ) ;"}
{"text":"min ( x , y ) * n \/ lcm ( a , b )","code":"$ res -= min ( $ x , $ y ) * ( $ n \/ ( ( $ a * $ b ) \/ __gcd ( $ a , $ b ) ) ) ; return $ res ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ a = 6 ; $ b = 2 ; $ x = 8 ; $ y = 2 ; print ( maxProfit ( $ n , $ a , $ b , $ x , $ y ) ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ GLOBALS [ ' MOD ' ] = 1000000007 ;"}
{"text":"Function to return the sum of the given series","code":"function sumOfSeries ( $ n ) { $ ans = pow ( $ n % $ GLOBALS [ ' MOD ' ] , 2 ) ; return ( $ ans % $ GLOBALS [ ' MOD ' ] ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo sumOfSeries ( $ n ) ; ? >"}
{"text":"Function to return the kth odd element from the array","code":"< ? php function kthOdd ( $ arr , $ n , $ k ) {"}
{"text":"Traverse the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current element is odd","code":"if ( $ arr [ $ i ] % 2 == 1 ) $ k -- ;"}
{"text":"If kth odd element is found","code":"if ( $ k == 0 ) return $ arr [ $ i ] ; }"}
{"text":"Total odd elements in the array are < k","code":"return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 ) ; $ n = sizeof ( $ arr ) ; $ k = 2 ; echo ( kthOdd ( $ arr , $ n , $ k ) ) ; ? >"}
{"text":"Function to find the last five digits of a five digit number raised to power five","code":"< ? php function lastFiveDigits ( $ n ) { $ n = ( int ) ( $ n \/ 10000 ) * 10000 + ( ( int ) ( $ n \/ 100 ) % 10 ) * 1000 + ( $ n % 10 ) * 100 + ( ( int ) ( $ n \/ 10 ) % 10 ) * 10 + ( int ) ( $ n \/ 1000 ) % 10 ; $ ans = 1 ; for ( $ i = 0 ; $ i < 5 ; $ i ++ ) { $ ans *= $ n ; $ ans %= 100000 ; } echo $ ans ; }"}
{"text":"Driver code","code":"$ n = 12345 ; lastFiveDigits ( $ n ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php $ mod = 1000000007 ;"}
{"text":"Function to return a ^ n % mod","code":"function power ( $ a , $ n ) { global $ mod ; if ( $ n == 0 ) return 1 ; $ p = power ( $ a , $ n \/ 2 ) % $ mod ; $ p = ( $ p * $ p ) % $ mod ; if ( $ n & 1 ) { $ p = ( $ p * $ a ) % $ mod ; } return $ p ; }"}
{"text":"Compute sum of max ( A ) - min ( A ) for all subsets","code":"function computeSum ( & $ arr , $ n ) { global $ mod ;"}
{"text":"Sort the array .","code":"sort ( $ arr ) ; $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Maxs = 2 ^ i - 1","code":"$ maxs = ( power ( 2 , $ i ) - 1 + $ mod ) % $ mod ; $ maxs = ( $ maxs * $ arr [ $ i ] ) % $ mod ;"}
{"text":"Mins = 2 ^ ( n - 1 - i ) - 1","code":"$ mins = ( power ( 2 , $ n - 1 - $ i ) - 1 + $ mod ) % $ mod ; $ mins = ( $ mins * $ arr [ $ i ] ) % $ mod ; $ V = ( $ maxs - $ mins + $ mod ) % $ mod ; $ sum = ( $ sum + $ V ) % $ mod ; } return $ sum ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 3 , 1 ) ; $ n = sizeof ( $ arr ) ; echo computeSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the count of such numbers","code":"< ? php function countNumbers ( $ n ) {"}
{"text":"If n is odd","code":"if ( $ n % 2 == 1 ) return 0 ; return ( 9 * ( int ) pow ( 10 , $ n \/ 2 - 1 ) ) ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo ( countNumbers ( $ n ) ) ;"}
{"text":"Function to return the required count","code":"< ? php function count_t ( $ n ) {"}
{"text":"To store the count of numbers","code":"$ cnt = 0 ; $ p = 1 ; while ( $ p <= $ n ) { $ cnt ++ ;"}
{"text":"Every power of 2 contains only 1 set bit","code":"$ p *= 2 ; } return $ cnt ; }"}
{"text":"Driver code","code":"$ n = 7 ; echo count_t ( $ n ) ; ? >"}
{"text":"Function to find the K - th minimum element from an array concatenated M times","code":"< ? php function KthMinValAfterMconcatenate ( $ A , $ N , $ M , $ K ) {"}
{"text":"Sort the elements in ascending order","code":"sort ( $ A ) ;"}
{"text":"Return the K 'th Min element  present at ( (K-1) \/ M ) index","code":"return ( $ A [ ( ( $ K - 1 ) \/ $ M ) ] ) ; }"}
{"text":"Driver Code","code":"$ A = array ( 3 , 1 , 2 ) ; $ M = 3 ; $ K = 4 ; $ N = sizeof ( $ A ) ; echo ( KthMinValAfterMconcatenate ( $ A , $ N , $ M , $ K ) ) ; ? >"}
{"text":"Function to return the required sum","code":"< ? php function sumN ( $ n ) {"}
{"text":"Total odd numbers from 1 to n","code":"$ n = ( int ) ( ( $ n + 1 ) \/ 2 ) ;"}
{"text":"Sum of first n odd numbers","code":"return ( $ n * $ n ) ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo sumN ( $ n ) ; ? >"}
{"text":"Function to return the count of numbers from 1 to N which are not divisible by any number in the range [ 2 , 10 ]","code":"< ? php function countNumbers ( $ n ) { return ( int ) ( $ n - $ n \/ 2 ) - ( int ) ( $ n \/ 3 ) - ( int ) ( $ n \/ 5 ) - ( int ) ( $ n \/ 7 ) + ( int ) ( $ n \/ 6 ) + ( int ) ( $ n \/ 10 ) + ( int ) ( $ n \/ 14 ) + ( int ) ( $ n \/ 15 ) + ( int ) ( $ n \/ 21 ) + ( int ) ( $ n \/ 35 ) - ( int ) ( $ n \/ 30 ) - ( int ) ( $ n \/ 42 ) - ( int ) ( $ n \/ 70 ) - ( int ) ( $ n \/ 105 ) + ( int ) ( $ n \/ 210 ) ; }"}
{"text":"Driver code","code":"$ n = 20 ; echo ( countNumbers ( $ n ) ) ; ? >"}
{"text":"Function to find max count of primes","code":"< ? php function maxPrimes ( $ n ) {"}
{"text":"if n is even n \/ 2 is required answer if n is odd floor ( n \/ 2 ) = ( int ) ( n \/ 2 ) is required answer","code":"return ( int ) ( $ n \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 17 ; echo maxPrimes ( $ n ) ; ? >"}
{"text":"Function to return sum","code":"< ? php function sum ( $ n ) { return $ n * ( $ n + 1 ) * ( $ n + 2 ) \/ 3 ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo sum ( $ n ) ; ? >"}
{"text":"PHP implementation of the above approach","code":"< ? php function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to find the minimum divisor","code":"function findMinimum ( $ n , $ m ) { $ mini = $ m ;"}
{"text":"Iterate for all factors of N","code":"for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ n % $ i == 0 ) { $ sec = $ n \/ $ i ;"}
{"text":"Check for gcd > 1","code":"if ( __gcd ( $ m , $ i ) > 1 ) { return $ i ; }"}
{"text":"Check for gcd > 1","code":"else if ( __gcd ( $ sec , $ m ) > 1 ) { $ mini = min ( $ sec , $ mini ) ; } } }"}
{"text":"If gcd is m itself","code":"if ( $ mini == $ m ) return -1 ; else return $ mini ; }"}
{"text":"Driver code","code":"$ n = 8 ; $ m = 10 ; echo ( findMinimum ( $ n , $ m ) ) ;"}
{"text":"Function to generate a fixed \\ number","code":"< ? php function nthTerm ( $ N ) { $ nth = 0 ; $ i ;"}
{"text":"Finding nth term","code":"for ( $ i = $ N ; $ i > 0 ; $ i -- ) { $ nth += pow ( $ i , $ i ) ; } return $ nth ; }"}
{"text":"Driver Code","code":"$ N = 3 ; echo ( nthTerm ( $ N ) ) ; ? >"}
{"text":"Function to return the kth smallest element from the range [ 1 , n ] after removing all the odd elements","code":"< ? php function kthSmallest ( $ n , $ k ) { return ( 2 * $ k ) ; }"}
{"text":"Driver code","code":"$ n = 8 ; $ k = 4 ; echo ( kthSmallest ( $ n , $ k ) ) ; ? >"}
{"text":"Function that return true if n can be represented as the sum of powers of 2 without using 2 ^ 0","code":"< ? php function isSumOfPowersOfTwo ( $ n ) { if ( $ n % 2 == 1 ) return false ; else return true ; }"}
{"text":"Driver code","code":"$ n = 10 ; if ( isSumOfPowersOfTwo ( $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Function to find the element","code":"< ? php function findMinRemoval ( $ arr , $ n ) {"}
{"text":"Value variable for storing the total value","code":"$ value = 0 ;"}
{"text":"Declaring maximum value as zero","code":"$ maximum = 0 ;"}
{"text":"If array contains on element","code":"if ( $ n == 1 ) return 0 ; $ temp = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Storing the maximum value in temp variable","code":"if ( $ i != 0 && $ i != $ n - 1 ) { $ value = $ value + abs ( $ arr [ $ i ] - $ arr [ $ i + 1 ] ) ;"}
{"text":"Adding the adjacent difference modulus values of removed element . Removing adjacent difference modulus value after removing element","code":"$ temp = abs ( $ arr [ $ i ] - $ arr [ $ i + 1 ] ) + abs ( $ arr [ $ i ] - $ arr [ $ i - 1 ] ) - abs ( $ arr [ $ i - 1 ] - $ arr [ $ i + 1 ] ) ; } else if ( $ i == 0 ) { $ value = $ value + abs ( $ arr [ $ i ] - $ arr [ $ i + 1 ] ) ; $ temp = abs ( $ arr [ $ i ] - $ arr [ $ i + 1 ] ) ; } else $ temp = abs ( $ arr [ $ i ] - $ arr [ $ i - 1 ] ) ; $ maximum = max ( $ maximum , $ temp ) ; }"}
{"text":"Returning total value - maximum value","code":"return ( $ value - $ maximum ) ; }"}
{"text":"Drivers code","code":"$ arr = array ( 1 , 5 , 3 , 2 , 10 ) ; $ n = count ( $ arr ) ; echo findMinRemoval ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the time for which the two policemen can communicate","code":"< ? php function getTime ( $ u , $ v , $ x ) { $ speed = $ u + $ v ;"}
{"text":"time = distance \/ speed","code":"$ time = $ x \/ $ speed ; return $ time ; }"}
{"text":"Driver code","code":"$ u = 3 ; $ v = 3 ; $ x = 3 ; echo getTime ( $ u , $ v , $ x ) ; ? >"}
{"text":"Function to return the number of teams","code":"< ? php function number_of_teams ( $ M ) {"}
{"text":"sqrt ( b ^ 2 - 4 ac )","code":"$ sqr = sqrt ( 1 + ( 8 * $ M ) ) ;"}
{"text":"First root ( - b + sqrt ( b ^ 2 - 4 ac ) ) \/ 2 a","code":"$ N1 = ( 1 + $ sqr ) \/ 2 ;"}
{"text":"Second root ( - b - sqrt ( b ^ 2 - 4 ac ) ) \/ 2 a","code":"$ N2 = ( 1 - $ sqr ) \/ 2 ;"}
{"text":"Return the positive root","code":"if ( $ N1 > 0 ) return $ N1 ; return $ N2 ; }"}
{"text":"Driver code","code":"$ M = 45 ; echo number_of_teams ( $ M ) ; ? >"}
{"text":"Function to return the required sum","code":"< ? php function LucasSum ( $ N ) {"}
{"text":"Generate lucas number and keep on adding them","code":"$ sum = 0 ; $ a = 2 ; $ b = 1 ; $ c ; $ sum += $ a ; while ( $ b <= $ N ) { $ sum += $ b ; $ c = $ a + $ b ; $ a = $ b ; $ b = $ c ; } return $ sum ; }"}
{"text":"Driver code","code":"$ N = 20 ; echo ( LucasSum ( $ N ) ) ; ? >"}
{"text":"Function to return the count of required numbers","code":"< ? php function countNumbers ( $ l , $ r ) {"}
{"text":"Count of numbers in range which are divisible by 6","code":"return ( ( int ) ( $ r \/ 6 ) - ( int ) ( ( $ l - 1 ) \/ 6 ) ) ; }"}
{"text":"Driver code","code":"$ l = 1000 ; $ r = 6000 ; echo ( countNumbers ( $ l , $ r ) ) ; ? >"}
{"text":"Function to find the sum of minimum of all subsequence","code":"< ? php function findMinSum ( $ arr , $ n ) { $ occ1 = ( $ n ) ; $ occ = $ occ1 - 1 ; $ Sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ Sum += $ arr [ $ i ] * pow ( 2 , $ occ ) ; $ occ -= 1 ; } return $ Sum ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 4 , 5 ) ; $ n = count ( $ arr ) ; echo findMinSum ( $ arr , $ n ) ; ? >"}
{"text":"Function to count total numbers divisible by x but not y in range 1 to N","code":"< ? php function countNumbers ( $ X , $ Y , $ N ) { $ count = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) {"}
{"text":"Check if Number is divisible by x but not Y if yes , Increment count","code":"if ( ( $ i % $ X == 0 ) && ( $ i % $ Y != 0 ) ) $ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ X = 2 ; $ Y = 3 ; $ N = 10 ; echo ( countNumbers ( $ X , $ Y , $ N ) ) ; ? >"}
{"text":"Function to return the required position","code":"< ? php function getPosition ( $ n , $ m ) { if ( $ m > ( $ n \/ 2 ) ) return ( $ m - ( $ n \/ 2 ) ) ; return ( $ m + ( $ n \/ 2 ) ) ; }"}
{"text":"Driver code","code":"$ n = 8 ; $ m = 5 ; echo getPosition ( $ n , $ m ) ; ? >"}
{"text":"Function to return the parity of a number","code":"< ? php function parity ( $ a ) { return $ a % 3 ; }"}
{"text":"Function to return the minimum number of operations required","code":"function solve ( $ array , $ size ) { $ operations = 0 ; for ( $ i = 0 ; $ i < $ size - 1 ; $ i ++ ) {"}
{"text":"Operation needs to be performed","code":"if ( parity ( $ array [ $ i ] ) == parity ( $ array [ $ i + 1 ] ) ) { $ operations ++ ; if ( $ i + 2 < $ size ) {"}
{"text":"Parity of previous element","code":"$ pari1 = parity ( $ array [ $ i ] ) ;"}
{"text":"Parity of next element","code":"$ pari2 = parity ( $ array [ $ i + 2 ] ) ;"}
{"text":"Update parity of current element to be other than the parities of the previous and the next number","code":"if ( $ pari1 == $ pari2 ) { if ( $ pari1 == 0 ) $ array [ $ i + 1 ] = 1 ; else if ( $ pari1 == 1 ) $ array [ $ i + 1 ] = 0 ; else $ array [ $ i + 1 ] = 1 ; } else { if ( ( $ pari1 == 0 && $ pari2 == 1 ) || ( $ pari1 == 1 && $ pari2 == 0 ) ) $ array [ $ i + 1 ] = 2 ; if ( ( $ pari1 == 1 && $ pari2 == 2 ) || ( $ pari1 == 2 && $ pari2 == 1 ) ) $ array [ $ i + 1 ] = 0 ; if ( ( $ pari1 == 2 && $ pari2 == 0 ) || ( $ pari1 == 0 && $ pari2 == 2 ) ) $ array [ $ i + 1 ] = 1 ; } } } } return $ operations ; }"}
{"text":"Driver Code","code":"$ array = array ( 2 , 1 , 3 , 0 ) ; $ size = count ( $ array ) ; echo solve ( $ array , $ size ) ; ? >"}
{"text":"Function to find to required XOR value","code":"< ? php function submatrixXor ( $ arr ) { $ ans = 0 ; $ n = 3 ;"}
{"text":"Nested loop to find the number of sub - matrix each index belongs to","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Number of ways to choose from top - left elements","code":"$ top_left = ( $ i + 1 ) * ( $ j + 1 ) ;"}
{"text":"Number of ways to choose from bottom - right elements","code":"$ bottom_right = ( $ n - $ i ) * ( $ n - $ j ) ; if ( ( $ top_left % 2 == 1 ) && ( $ bottom_right % 2 == 1 ) ) $ ans = ( $ ans ^ $ arr [ $ i ] [ $ j ] ) ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( array ( 6 , 7 , 13 ) , array ( 8 , 3 , 4 ) , array ( 9 , 7 , 6 ) ) ; echo submatrixXor ( $ arr ) ; # This  code is contributed by Ryuga NEW_LINE ? >"}
{"text":"Function to find the digital root of a number","code":"< ? php function findDigitalRoot ( $ num ) { $ sum = PHP_INT_MAX ; $ tempNum = $ num ; while ( $ sum >= 10 ) { $ sum = 0 ; while ( $ tempNum > 0 ) { $ sum += $ tempNum % 10 ; $ tempNum \/= 10 ; } $ tempNum = $ sum ; } return $ sum ; }"}
{"text":"Function to find the Nth number with digital root as X","code":"function findAnswer ( $ X , $ N ) {"}
{"text":"Counter variable to keep the count of valid numbers","code":"$ counter = 0 ; for ( $ i = 1 ; $ counter < $ N ; ++ $ i ) {"}
{"text":"Find digital root","code":"$ digitalRoot = findDigitalRoot ( $ i ) ;"}
{"text":"Check if is required answer or not","code":"if ( $ digitalRoot == $ X ) { ++ $ counter ; }"}
{"text":"Print the answer if you have found it and breakout of the loop","code":"if ( $ counter == $ N ) { echo ( $ i ) ; break ; } } }"}
{"text":"Driver Code","code":"$ X = 1 ; $ N = 3 ; findAnswer ( $ X , $ N ) ;"}
{"text":"Function to find the N - th number with digital root as X","code":"< ? php function findAnswer ( $ X , $ N ) { return ( $ N - 1 ) * 9 + $ X ; }"}
{"text":"Driver Code","code":"$ X = 7 ; $ N = 43 ; echo ( findAnswer ( $ X , $ N ) ) ; ? >"}
{"text":"Function to return the sum","code":"< ? php function count1 ( $ N , $ K , $ R ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) {"}
{"text":"If current number gives R as the remainder on dividing by K","code":"if ( $ i % $ K == $ R )"}
{"text":"Update the sum","code":"$ sum += $ i ; }"}
{"text":"Return the sum","code":"return $ sum ; }"}
{"text":"Driver code","code":"$ N = 20 ; $ K = 4 ; $ R = 3 ; echo count1 ( $ N , $ K , $ R ) ; ? >"}
{"text":"Function to return the count of valid values of X","code":"< ? php function getCount ( $ a , $ b , $ c ) { $ count = 0 ;"}
{"text":"Iterate through all possible sum of digits of X","code":"for ( $ i = 1 ; $ i <= 81 ; $ i ++ ) {"}
{"text":"Get current value of X for sum of digits i","code":"$ cr = $ b * ( int ) pow ( $ i , $ a ) + $ c ; $ tmp = $ cr ; $ sm = 0 ;"}
{"text":"Find sum of digits of cr","code":"while ( $ tmp != 0 ) { $ sm += $ tmp % 10 ; $ tmp \/= 10 ; }"}
{"text":"If cr is a valid choice for X","code":"if ( $ sm == $ i && $ cr < 1e9 ) $ count ++ ; }"}
{"text":"Return the count","code":"return $ count ; }"}
{"text":"Driver code","code":"{ $ a = 3 ; $ b = 2 ; $ c = 8 ; echo ( getCount ( $ a , $ b , $ c ) ) ; }"}
{"text":"Function to check if it is possible to split the array in two parts with equal sum","code":"< ? php function isSpiltPossible ( $ n , $ a ) { $ sum = 0 ; $ c1 = 0 ;"}
{"text":"Calculate sum of elements and count of 1 's","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum += $ a [ $ i ] ; if ( $ a [ $ i ] == 1 ) { $ c1 ++ ; } }"}
{"text":"If total sum is odd , return False","code":"if ( $ sum % 2 != 0 ) return false ;"}
{"text":"If sum of each part is even , return True","code":"if ( ( $ sum \/ 2 ) % 2 == 0 ) return true ;"}
{"text":"If sum of each part is even but there is atleast one 1","code":"if ( $ c1 > 0 ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ a = array ( 1 , 1 , 2 ) ; if ( isSpiltPossible ( $ n , $ a ) ) echo ( \" YES \" ) ; else echo ( \" NO \" ) ; ? >"}
{"text":"Function to find the sum of all possible submatrices of a given Matrix","code":"< ? php function matrixSum ( $ arr ) { $ n = 3 ;"}
{"text":"Variable to store the required sum","code":"$ sum = 0 ;"}
{"text":"Nested loop to find the number of submatrices , each number belongs to","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Number of ways to choose from top - left elements","code":"$ top_left = ( $ i + 1 ) * ( $ j + 1 ) ;"}
{"text":"Number of ways to choose from bottom - right elements","code":"$ bottom_right = ( $ n - $ i ) * ( $ n - $ j ) ; $ sum += ( $ top_left * $ bottom_right * $ arr [ $ i ] [ $ j ] ) ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( array ( 1 , 1 , 1 ) , array ( 1 , 1 , 1 ) , array ( 1 , 1 , 1 ) ) ; echo matrixSum ( $ arr ) ; ? >"}
{"text":"Function to return the maximum bitwise AND possible among all the possible pairs","code":"< ? php function maxAND ( $ L , $ R ) { $ maximum = $ L & $ R ; for ( $ i = $ L ; $ i < $ R ; $ i ++ ) for ( $ j = $ i + 1 ; $ j <= $ R ; $ j ++ )"}
{"text":"Maximum among all ( i , j ) pairs","code":"$ maximum = max ( $ maximum , ( $ i & $ j ) ) ; return $ maximum ; }"}
{"text":"Driver code","code":"$ L = 1 ; $ R = 632 ; echo ( maxAND ( $ L , $ R ) ) ; ? >"}
{"text":"Function to check","code":"< ? php function checkArray ( $ arr , $ n ) {"}
{"text":"Check the result by processing the first & last element and size","code":"return ( $ arr [ 0 ] % 2 ) && ( $ arr [ $ n - 1 ] % 2 ) && ( $ n % 2 ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 ) ; $ n = sizeof ( $ arr ) ; echo checkArray ( $ arr , $ n ) ; ? >"}
{"text":"Function to find minimum removals","code":"< ? php function findCount ( $ arr , $ n ) {"}
{"text":"Count odd numbers","code":"$ countOdd = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] % 2 == 1 ) $ countOdd ++ ;"}
{"text":"If the counter is odd return 0 otherwise return 1","code":"if ( $ countOdd % 2 == 0 ) return 1 ; else return 0 ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 5 , 1 ) ; $ n = sizeof ( $ arr ) ; echo ( findCount ( $ arr , $ n ) ) ; ? >"}
{"text":"Function that returns true if x is a perfect square","code":"< ? php function isPerfectSquare ( $ x ) {"}
{"text":"Find floating point value of square root of x","code":"$ sr = sqrt ( $ x ) ;"}
{"text":"If square root is an integer","code":"return ( ( $ sr - floor ( $ sr ) ) == 0 ) ; }"}
{"text":"Function that returns true if n is a sunny number","code":"function isSunnyNum ( $ n ) {"}
{"text":"If ( n + 1 ) is a perfect square","code":"if ( isPerfectSquare ( $ n + 1 ) ) return true ; return false ; }"}
{"text":"Driver code","code":"$ n = 3 ; if ( isSunnyNum ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 10005 ;"}
{"text":"To check if a number is prime or not","code":"$ isprime = array_fill ( 0 , $ N , true ) ;"}
{"text":"To store possible numbers","code":"$ can = array_fill ( 0 , $ N , false ) ;"}
{"text":"Function to return all prime numbers","code":"function SieveOfEratosthenes ( ) { global $ N , $ isprime ; for ( $ p = 2 ; $ p * $ p < $ N ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ isprime [ $ p ] == true ) {"}
{"text":"Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .","code":"for ( $ i = $ p * $ p ; $ i < $ N ; $ i += $ p ) $ isprime [ $ i ] = false ; } } $ primes = array ( ) ; for ( $ i = 2 ; $ i < $ N ; $ i ++ ) if ( $ isprime [ $ i ] ) array_push ( $ primes , $ i ) ; return $ primes ; }"}
{"text":"Function to count all possible prime numbers that can be expressed as the sum of two consecutive primes and one","code":"function Prime_Numbers ( $ n ) { global $ N , $ can , $ isprime ; $ primes = SieveOfEratosthenes ( ) ;"}
{"text":"All possible prime numbers below N","code":"for ( $ i = 0 ; $ i < count ( $ primes ) - 1 ; $ i ++ ) if ( $ primes [ $ i ] + $ primes [ $ i + 1 ] + 1 < $ N ) $ can [ $ primes [ $ i ] + $ primes [ $ i + 1 ] + 1 ] = true ; $ ans = 0 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { if ( $ can [ $ i ] and $ isprime [ $ i ] ) { $ ans ++ ; } } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 50 ; echo Prime_Numbers ( $ n ) ; ? >"}
{"text":"Function to find the sum of bitwise AND of all subarrays","code":"< ? php function findAndSum ( $ arr , $ n ) {"}
{"text":"variable to store the final sum","code":"$ sum = 0 ;"}
{"text":"multiplier","code":"$ mul = 1 ; for ( $ i = 0 ; $ i < 30 ; $ i ++ ) {"}
{"text":"variable to check if counting is on","code":"$ count_on = 0 ;"}
{"text":"variable to store the length of the subarrays","code":"$ l = 0 ;"}
{"text":"loop to find the contiguous segments","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( ( $ arr [ $ j ] & ( 1 << $ i ) ) > 0 ) if ( $ count_on ) $ l ++ ; else { $ count_on = 1 ; $ l ++ ; } else if ( $ count_on ) { $ sum += ( ( $ mul * $ l * ( $ l + 1 ) ) \/ 2 ) ; $ count_on = 0 ; $ l = 0 ; } } if ( $ count_on ) { $ sum += ( ( $ mul * $ l * ( $ l + 1 ) ) \/ 2 ) ; $ count_on = 0 ; $ l = 0 ; }"}
{"text":"updating the multiplier","code":"$ mul *= 2 ; }"}
{"text":"returning the sum","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ arr = array ( 7 , 1 , 1 , 5 ) ; $ n = sizeof ( $ arr ) ; echo findAndSum ( $ arr , $ n ) ; ? >"}
{"text":"Function that returns true if it is possible to move from source to the destination with the given moves","code":"< ? php function isPossible ( $ Sx , $ Sy , $ Dx , $ Dy , $ x , $ y ) { if ( abs ( $ Sx - $ Dx ) % $ x == 0 && abs ( $ Sy - $ Dy ) % $ y == 0 && ( abs ( $ Sx - $ Dx ) \/ $ x ) % 2 == ( abs ( $ Sy - $ Dy ) \/ $ y ) % 2 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ Sx = 0 ; $ Sy = 0 ; $ Dx = 0 ; $ Dy = 0 ; $ x = 3 ; $ y = 4 ; if ( isPossible ( $ Sx , $ Sy , $ Dx , $ Dy , $ x , $ y ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Function to return the number of pairs ( x , y ) such that x < y","code":"< ? php function getPairs ( $ a ) {"}
{"text":"To store the number of valid pairs","code":"$ count = 0 ; for ( $ i = 0 ; $ i < sizeof ( $ a ) ; $ i ++ ) { for ( $ j = 0 ; $ j < sizeof ( $ a ) ; $ j ++ ) {"}
{"text":"If a valid pair is found","code":"if ( $ a [ $ i ] < $ a [ $ j ] ) $ count ++ ; } }"}
{"text":"Return the count of valid pairs","code":"return $ count ; }"}
{"text":"Driver code","code":"$ a = array ( 2 , 4 , 3 , 1 ) ; echo getPairs ( $ a ) ; ? >"}
{"text":"Function that returns true if number n is a composite number","code":"< ? php function isComposite ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return false ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return true ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return true ; return false ; }"}
{"text":"Function that returns true if the eventual digit sum of number nm is 1","code":"function isDigitSumOne ( $ nm ) {"}
{"text":"Loop till the sum is not single digit number","code":"while ( $ nm > 9 ) {"}
{"text":"Intitialize the sum as zero","code":"$ sum_digit = 0 ;"}
{"text":"Find the sum of digits","code":"while ( $ nm > 0 ) { $ digit = $ nm % 10 ; $ sum_digit = $ sum_digit + $ digit ; $ nm = floor ( $ nm \/ 10 ) ; } $ nm = $ sum_digit ; }"}
{"text":"If sum is eventually 1","code":"if ( $ nm == 1 ) return true ; else return false ; }"}
{"text":"Function to print the required numbers from the given range","code":"function printValidNums ( $ l , $ r ) { for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) {"}
{"text":"If i is one of the required numbers","code":"if ( isComposite ( $ i ) && isDigitSumOne ( $ i ) ) echo $ i , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ l = 10 ; $ r = 100 ; printValidNums ( $ l , $ r ) ; ? >"}
{"text":"Function to calculate leaf nodes in n - ary tree","code":"< ? php function calcNodes ( $ N , $ I ) { $ result = 0 ; $ result = $ I * ( $ N - 1 ) + 1 ; return $ result ; }"}
{"text":"Driver code","code":"$ N = 5 ; $ I = 2 ; echo \" Leaf \u2581 nodes \u2581 = \u2581 \" . calcNodes ( $ N , $ I ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ mod = 1000000007 ; $ arr = array_fill ( 0 , 10001 , 0 ) ;"}
{"text":"Function to calculate factorial of a number mod 1000000007","code":"function cal_factorial ( ) { global $ arr , $ mod ; $ arr [ 0 ] = 1 ;"}
{"text":"Factorial of i = factorial of ( i - 1 ) * i ;","code":"for ( $ i = 1 ; $ i <= 10000 ; $ i ++ ) {"}
{"text":"Taking mod aint with calculation .","code":"$ arr [ $ i ] = ( $ arr [ $ i - 1 ] * $ i ) % $ mod ; } }"}
{"text":"Function for modular exponentiation","code":"function mod_exponent ( $ num , $ p ) { global $ mod ; if ( $ p == 0 ) return 1 ;"}
{"text":"If p is odd","code":"if ( ( $ p & 1 ) ) { return ( ( $ num % $ mod ) * ( mod_exponent ( ( $ num * $ num ) % $ mod , $ p \/ 2 ) ) % $ mod ) % $ mod ; }"}
{"text":"If p is even","code":"else if ( ! ( $ p & 1 ) ) return ( mod_exponent ( ( $ num * $ num ) % $ mod , $ p \/ 2 ) ) % $ mod ; }"}
{"text":"Function to return the count of required permutations","code":"function getCount ( $ x , $ y ) { global $ arr , $ mod ; $ ans = $ arr [ $ x + $ y - 1 ] ;"}
{"text":"Calculating multiplicative modular inverse for x ! and multiplying with ans","code":"$ ans *= mod_exponent ( $ arr [ $ x ] , $ mod - 2 ) ; $ ans %= $ mod ;"}
{"text":"Calculating multiplicative modular inverse for y ! and multiplying with ans","code":"$ ans *= mod_exponent ( $ arr [ $ y ] , $ mod - 2 ) ; $ ans %= $ mod ; $ ans *= ( $ x - $ y ) ; $ ans %= $ mod ; return $ ans ; }"}
{"text":"Pre - compute factorials","code":"cal_factorial ( ) ; $ x = 3 ; $ y = 1 ; print ( getCount ( $ x , $ y ) ) ; ? >"}
{"text":"Function to find the values of X and Y","code":"< ? php function findValues ( $ a , $ b ) {"}
{"text":"base condition","code":"if ( ( $ a - $ b ) % 2 == 1 ) { echo \" - 1\" ; return ; }"}
{"text":"required answer","code":"echo ( $ a - $ b ) \/ 2 , \" \u2581 \" , ( $ a + $ b ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ a = 12 ; $ b = 8 ; findValues ( $ a , $ b ) ; ? >"}
{"text":"Function to return the count of possible triplets","code":"< ? php function countTriplets ( $ n , $ points ) { $ pts = array ( ) ; $ ct = 0 ;"}
{"text":"Insert all the points in a set","code":"for ( $ i = 0 ; $ i < count ( $ points ) ; $ i ++ ) { for ( $ j = 0 ; $ j < count ( $ points [ $ i ] ) ; $ j ++ ) { $ pts [ ] = $ points [ $ i ] [ $ j ] ; } } for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { $ x = $ points [ $ i ] [ 0 ] + $ points [ $ j ] [ 0 ] ; $ y = $ points [ $ i ] [ 1 ] + $ points [ $ j ] [ 1 ] ;"}
{"text":"If the mid point exists in the set","code":"if ( $ x % 2 == 0 and $ y % 2 == 0 ) if ( in_array ( ( int ) ( $ x \/ 2 ) , $ pts ) and in_array ( ( int ) ( $ y \/ 2 ) , $ pts ) ) $ ct += 1 ; }"}
{"text":"Return the count of valid triplets","code":"return $ ct ; }"}
{"text":"Driver code","code":"$ points = array ( array ( 1 , 1 ) , array ( 2 , 2 ) , array ( 3 , 3 ) ) ; $ n = count ( $ points ) ; print ( countTriplets ( $ n , $ points ) ) ; ? >"}
{"text":"Function to return the concentration of the resultant mixture","code":"< ? php function mixtureConcentration ( $ n , $ p ) { $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ res += $ p [ $ i ] ; $ res \/= $ n ; return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 0 , 20 , 20 ) ; $ n = count ( $ arr ) ; print ( round ( mixtureConcentration ( $ n , $ arr ) , 4 ) ) ; ? >"}
{"text":"Function to count the perfect squares","code":"< ? php function countOddSquares ( $ n , $ m ) { return ( int ) pow ( $ m , 0.5 ) - ( int ) pow ( $ n - 1 , 0.5 ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ m = 100 ; echo \" Count \u2581 is \u2581 \" , ( $ m - $ n + 1 ) - countOddSquares ( $ n , $ m ) ; ? >"}
{"text":"Function to return the number of squares that the king can reach in the given number of moves","code":"< ? php function Square ( $ row , $ column , $ moves ) { $ a = 0 ; $ b = 0 ; $ c = 0 ; $ d = 0 ; $ total = 0 ;"}
{"text":"Calculate initial and final coordinates","code":"$ a = $ row - $ moves ; $ b = $ row + $ moves ; $ c = $ column - $ moves ; $ d = $ column + $ moves ;"}
{"text":"Since chessboard is of size 8 X8 so if any coordinate is less than 1 or greater than 8 make it 1 or 8.","code":"if ( $ a < 1 ) $ a = 1 ; if ( $ c < 1 ) $ c = 1 ; if ( $ b > 8 ) $ b = 8 ; if ( $ d > 8 ) $ d = 8 ;"}
{"text":"Calculate total positions","code":"$ total = ( $ b - $ a + 1 ) * ( $ d - $ c + 1 ) - 1 ; return $ total ; }"}
{"text":"Driver code","code":"$ R = 4 ; $ C = 5 ; $ M = 2 ; echo Square ( $ R , $ C , $ M ) ; ? >"}
{"text":"number whosesum till one digit is N","code":"< ? php function findNumber ( $ n , $ m ) { $ num = ( $ m - 1 ) * 9 + $ n ; return $ num ; }"}
{"text":"Driver Code","code":"$ n = 2 ; $ m = 5 ; echo findNumber ( $ n , $ m ) ; ? >"}
{"text":"Function to check if it is possible or not","code":"< ? php function checkTriangularSumRepresentation ( $ n ) { $ tri = array ( ) ; $ i = 1 ;"}
{"text":"Store all triangular numbers up to N in a Set","code":"while ( true ) { $ x = $ i * ( $ i + 1 ) ; if ( $ x >= $ n ) break ; array_push ( $ tri , $ x ) ; $ i += 1 ; }"}
{"text":"Check if a pair exists","code":"foreach ( $ tri as $ tm ) if ( in_array ( $ n - $ tm , $ tri ) ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ n = 24 ; if ( checkTriangularSumRepresentation ( $ n ) ) print ( \" Yes \" ) ; else print ( \" No \" ) ; ? >"}
{"text":"Function to find the number of digits in the integer","code":"< ? php function digitsCount ( $ n ) { $ len = 0 ; while ( $ n > 0 ) { $ len ++ ; $ n = ( int ) ( $ n \/ 10 ) ; } return $ len ; }"}
{"text":"Function to find the absolute difference","code":"function absoluteFirstLast ( $ n , $ x ) {"}
{"text":"Store the last x digits in last","code":"$ i = 0 ; $ mod = 1 ; while ( $ i < $ x ) { $ mod *= 10 ; $ i ++ ; } $ last = $ n % $ mod ;"}
{"text":"Count the no . of digits in N","code":"$ len = digitsCount ( $ n ) ;"}
{"text":"Remove the digits except the first x","code":"while ( $ len != $ x ) { $ n = ( int ) ( $ n \/ 10 ) ; $ len -- ; }"}
{"text":"Store the first x digits in first","code":"$ first = $ n ;"}
{"text":"Return the absolute difference between the first and last","code":"return abs ( $ first - $ last ) ; }"}
{"text":"Driver code","code":"$ n = 21546 ; $ x = 2 ; echo absoluteFirstLast ( $ n , $ x ) ; ? >"}
{"text":"Function to print the required sequence","code":"< ? php function make_sequence ( $ N ) {"}
{"text":"arr [ ] will hold the sequence sum variable will store the sum of the sequence","code":"$ arr = array ( ) ; $ sum = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { if ( $ i % 2 == 1 ) $ arr [ $ i ] = 1 ; else $ arr [ $ i ] = 2 ; $ sum += $ arr [ $ i ] ; }"}
{"text":"If sum of the sequence is odd","code":"if ( $ sum % 2 == 1 ) $ arr [ 2 ] = 3 ;"}
{"text":"Print the sequence","code":"for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ N = 9 ; make_sequence ( $ N ) ; ? >"}
{"text":"Return the number of odd numbers in the range [ L , R ]","code":"< ? php function countOdd ( $ L , $ R ) { $ N = ( $ R - $ L ) \/ 2 ;"}
{"text":"if either R or L is odd","code":"if ( $ R % 2 != 0 $ L % 2 != 0 ) $ N ++ ; return $ N ; }"}
{"text":"Driver code","code":"$ L = 3 ; $ R = 7 ; $ odds = countOdd ( $ L , $ R ) ; $ evens = ( $ R - $ L + 1 ) - $ odds ; echo \" Count \u2581 of \u2581 odd \u2581 numbers \u2581 is \u2581 \" . $ odds . \" STRNEWLINE \" ; echo \" Count \u2581 of \u2581 even \u2581 numbers \u2581 is \u2581 \" . $ evens ; ? >"}
{"text":"Function to return the minimum cost","code":"< ? php function getMinCost ( $ n , $ m ) { $ cost = ( $ n - 1 ) * $ m + ( $ m - 1 ) * $ n ; return $ cost ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ m = 5 ; echo getMinCost ( $ n , $ m ) ; ? >"}
{"text":"Function to return the minimum number of given operation required to make all the array elements equal","code":"< ? php function minOperation ( $ n , $ k , & $ a ) {"}
{"text":"Check if all the elements from kth index to last are equal","code":"for ( $ i = $ k ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] != $ a [ $ k - 1 ] ) return -1 ; }"}
{"text":"Finding the 1 st element which is not equal to the kth element","code":"for ( $ i = $ k - 2 ; $ i > -1 ; $ i -- ) { if ( $ a [ $ i ] != $ a [ $ k - 1 ] ) return ( $ i + 1 ) ; } }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 3 ; $ a = array ( 2 , 1 , 1 , 1 , 1 ) ; echo ( minOperation ( $ n , $ k , $ a ) ) ; ? >"}
{"text":"Function to return the value of Binomial Coefficient C ( n , k )","code":"< ? php function binomialCoeff ( $ n , $ k ) { if ( $ k > $ n ) return 0 ; $ res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( $ k > $ n - $ k ) $ k = $ n - $ k ;"}
{"text":"Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * ... * 1 ]","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) { $ res *= ( $ n - $ i ) ; $ res \/= ( $ i + 1 ) ; } return $ res ; }"}
{"text":"Driver Code","code":"$ N = 5 ; $ M = 1 ; $ P = floor ( ( $ N * ( $ N - 1 ) ) \/ 2 ) ; echo binomialCoeff ( $ P , $ M ) ; ? >"}
{"text":"Function to print the required sequence","code":"< ? php function generateSequence ( $ n , $ g ) { for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) echo $ i * $ g . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 6 ; $ g = 5 ; generateSequence ( $ n , $ g ) ; ? >"}
{"text":"PHP Program to find LCM of Fib ( a ) and Fib ( b )","code":"< ? php $ GLOBALS [ ' MAX ' ] = 1000 ;"}
{"text":"Create an array for memoization","code":"$ GLOBALS [ ' f ' ] = array ( ) ; for ( $ i = 0 ; $ i < $ GLOBALS [ ' MAX ' ] ; $ i ++ ) $ GLOBALS [ ' f ' ] [ $ i ] = 0 ;"}
{"text":"Function to return the n 'th Fibonacci number using table f[].","code":"function fib ( $ n ) {"}
{"text":"Base cases","code":"if ( $ n == 0 ) return 0 ; if ( $ n == 1 $ n == 2 ) return ( $ GLOBALS [ ' f ' ] [ $ n ] = 1 ) ;"}
{"text":"If fib ( n ) is already computed","code":"if ( $ GLOBALS [ ' f ' ] [ $ n ] ) return $ GLOBALS [ ' f ' ] [ $ n ] ; $ k = ( $ n & 1 ) ? ( $ n + 1 ) \/ 2 : $ n \/ 2 ;"}
{"text":"Applying recursive formula Note value n & 1 is 1 if n is odd , else 0.","code":"$ GLOBALS [ ' f ' ] [ $ n ] = ( $ n & 1 ) ? ( fib ( $ k ) * fib ( $ k ) + fib ( $ k - 1 ) * fib ( $ k - 1 ) ) : ( 2 * fib ( $ k - 1 ) + fib ( $ k ) ) * fib ( $ k ) ; return $ GLOBALS [ ' f ' ] [ $ n ] ; }"}
{"text":"Function to return gcd of a and b","code":"function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to return the LCM of Fib ( a ) and Fib ( a )","code":"function findLCMFibonacci ( $ a , $ b ) { return ( fib ( $ a ) * fib ( $ b ) ) \/ fib ( gcd ( $ a , $ b ) ) ; }"}
{"text":"Driver code","code":"$ a = 3 ; $ b = 12 ; echo findLCMFibonacci ( $ a , $ b ) ; ? >"}
{"text":"Function to check if XOR of all numbers in range [ L , R ] is Even or Odd","code":"< ? php function isEvenOrOdd ( $ L , $ R ) {"}
{"text":"Count odd Numbers in range [ L , R ]","code":"$ oddCount = floor ( ( $ R - $ L ) \/ 2 ) ; if ( $ R % 2 == 1 $ L % 2 == 1 ) $ oddCount ++ ;"}
{"text":"Check if count of odd Numbers is even or odd","code":"if ( $ oddCount % 2 == 0 ) return \" Even \" ; else return \" Odd \" ; }"}
{"text":"Driver Code","code":"$ L = 5 ; $ R = 15 ; echo isEvenOrOdd ( $ L , $ R ) ; ? >"}
{"text":"Function to return the number of trailing zeros","code":"< ? php function trailing_zeros ( $ N ) {"}
{"text":"To store the number of 2 s and 5 s","code":"$ count_of_two = 0 ; $ count_of_five = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { $ val = $ i ; while ( $ val % 2 == 0 && $ val > 0 ) { $ val \/= 2 ;"}
{"text":"If we get a factor 2 then we have i number of 2 s because the power of the number is raised to i","code":"$ count_of_two += $ i ; } while ( $ val % 5 == 0 && $ val > 0 ) { $ val \/= 5 ;"}
{"text":"If we get a factor 5 then we have i number of 5 s because the power of the number is raised to i","code":"$ count_of_five += $ i ; } }"}
{"text":"Take the minimum of them","code":"$ ans = min ( $ count_of_two , $ count_of_five ) ; return $ ans ; }"}
{"text":"Driver code","code":"$ N = 12 ; echo trailing_zeros ( $ N ) ; ? >"}
{"text":"PHP program for implementing Mid - Point Ellipse Drawing Algorithm","code":"< ? php function midptellipse ( $ rx , $ ry , $ xc , $ yc ) { $ x = 0 ; $ y = $ ry ;"}
{"text":"Initial decision parameter of region 1","code":"$ d1 = ( $ ry * $ ry ) - ( $ rx * $ rx * $ ry ) + ( 0.25 * $ rx * $ rx ) ; $ dx = 2 * $ ry * $ ry * $ x ; $ dy = 2 * $ rx * $ rx * $ y ;"}
{"text":"For region 1","code":"while ( $ dx < $ dy ) {"}
{"text":"Print points based on 4 - way symmetry","code":"echo \" ( \u2581 \" , $ x + $ xc , \" , \u2581 \" , $ y + $ yc , \" \u2581 ) STRNEWLINE \" ; echo \" ( \u2581 \" , - $ x + $ xc , \" , \u2581 \" , $ y + $ yc , \" \u2581 ) STRNEWLINE \" ; echo \" ( \u2581 \" , $ x + $ xc , \" , \u2581 \" , - $ y + $ yc , \" \u2581 ) STRNEWLINE \" ; echo \" ( \u2581 \" , - $ x + $ xc , \" , \u2581 \" , - $ y + $ yc , \" \u2581 ) STRNEWLINE \" ;"}
{"text":"Checking and updating value of decision parameter based on algorithm","code":"if ( $ d1 < 0 ) { $ x ++ ; $ dx = $ dx + ( 2 * $ ry * $ ry ) ; $ d1 = $ d1 + $ dx + ( $ ry * $ ry ) ; } else { $ x ++ ; $ y -- ; $ dx = $ dx + ( 2 * $ ry * $ ry ) ; $ dy = $ dy - ( 2 * $ rx * $ rx ) ; $ d1 = $ d1 + $ dx - $ dy + ( $ ry * $ ry ) ; } }"}
{"text":"Decision parameter of region 2","code":"$ d2 = ( ( $ ry * $ ry ) * ( ( $ x + 0.5 ) * ( $ x + 0.5 ) ) ) + ( ( $ rx * $ rx ) * ( ( $ y - 1 ) * ( $ y - 1 ) ) ) - ( $ rx * $ rx * $ ry * $ ry ) ;"}
{"text":"Plotting points of region 2","code":"while ( $ y >= 0 ) {"}
{"text":"printing points based on 4 - way symmetry","code":"echo \" ( \u2581 \" , $ x + $ xc , \" , \u2581 \" , $ y + $ yc , \" \u2581 ) STRNEWLINE \" ; echo \" ( \u2581 \" , - $ x + $ xc , \" , \u2581 \" , $ y + $ yc , \" \u2581 ) STRNEWLINE \" ; echo \" ( \u2581 \" , $ x + $ xc , \" , \u2581 \" , - $ y + $ yc , \" \u2581 ) STRNEWLINE \" ; echo \" ( \u2581 \" , - $ x + $ xc , \" , \u2581 \" , - $ y + $ yc , \" \u2581 ) STRNEWLINE \" ;"}
{"text":"Checking and updating parameter value based on algorithm","code":"if ( $ d2 > 0 ) { $ y -- ; $ dy = $ dy - ( 2 * $ rx * $ rx ) ; $ d2 = $ d2 + ( $ rx * $ rx ) - $ dy ; } else { $ y -- ; $ x ++ ; $ dx = $ dx + ( 2 * $ ry * $ ry ) ; $ dy = $ dy - ( 2 * $ rx * $ rx ) ; $ d2 = $ d2 + $ dx - $ dy + ( $ rx * $ rx ) ; } } }"}
{"text":"To draw a ellipse of major and minor radius 15 , 10 centred at ( 50 , 50 )","code":"midptellipse ( 10 , 15 , 50 , 50 ) ; ? >"}
{"text":"Function to check if the given number is divisible by sum of its digits","code":"< ? php function isDivisible ( $ n ) { $ temp = $ n ;"}
{"text":"Find sum of digits","code":"$ sum = 0 ; while ( $ n ) { $ k = $ n % 10 ; $ sum += $ k ; $ n = ( int ) ( $ n \/ 10 ) ; }"}
{"text":"check if sum of digits divides n","code":"if ( $ temp % $ sum == 0 ) return \" YES \" ; return \" NO \" ; }"}
{"text":"Driver Code","code":"$ n = 123 ; print ( isDivisible ( $ n ) ) ; ? >"}
{"text":"Function to get final value of X and Y","code":"< ? php function alter ( $ x , $ y ) {"}
{"text":"Following the sequence but by replacing minus with modulo","code":"while ( true ) {"}
{"text":"Step 1","code":"if ( $ x == 0 $ y == 0 ) break ;"}
{"text":"Step 2","code":"if ( $ x >= 2 * $ y ) $ x = $ x % ( 2 * $ y ) ;"}
{"text":"Step 3","code":"else if ( $ y >= 2 * $ x ) $ y = $ y % ( 2 * $ x ) ;"}
{"text":"Otherwise terminate","code":"else break ; } echo \" X = \" , \u2581 $ x , \u2581 \" , \" , \u2581 \" Y = \" }"}
{"text":"Get the initial X and Y values","code":"$ x = 12 ; $ y = 5 ;"}
{"text":"Find the result","code":"alter ( $ x , $ y ) ; ? >"}
{"text":"Function to return the digit product of n","code":"< ? php function digitProduct ( $ n ) { $ prod = 1 ; while ( $ n ) { $ prod = $ prod * ( $ n % 10 ) ; $ n = floor ( $ n \/ 10 ) ; } return $ prod ; }"}
{"text":"Function to print all multiplicative primes <= n","code":"function printMultiplicativePrimes ( $ n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n + 1 ] \" . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ n + 1 , true ) ; $ prime [ 0 ] = $ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = false ; } } for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If i is prime and its digit sum is also prime i . e . i is a multiplicative prime","code":"if ( $ prime [ $ i ] && $ prime [ digitProduct ( $ i ) ] ) echo $ i , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ n = 10 ; printMultiplicativePrimes ( $ n ) ; ? >"}
{"text":"Function to calculate gcd of two number","code":"< ? php function gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; else return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to check if two numbers are coprime or not","code":"function coPrime ( $ n1 , $ n2 ) {"}
{"text":"two numbers are coprime if their gcd is 1","code":"if ( gcd ( $ n1 , $ n2 ) == 1 ) return true ; else return false ; }"}
{"text":"Function to find largest integer less than or equal to N \/ 2 and coprime with N","code":"function largestCoprime ( $ N ) { $ half = floor ( $ N \/ 2 ) ;"}
{"text":"Check one by one all numbers less than or equal to N \/ 2","code":"while ( coPrime ( $ N , $ half ) == false ) $ half -- ; return $ half ; }"}
{"text":"Driver code","code":"$ n = 50 ; echo largestCoprime ( $ n ) ;"}
{"text":"Function to find largest integer less than or equal to N \/ 2 and is coprime with N","code":"< ? php function largestCoprime ( $ N ) {"}
{"text":"Handle the case for N = 6","code":"if ( $ N == 6 ) return 1 ; else if ( $ N % 4 == 0 ) return ( $ N \/ 2 ) - 1 ; else if ( $ N % 2 == 0 ) return ( $ N \/ 2 ) - 2 ; else return ( ( $ N - 1 ) \/ 2 ) ; }"}
{"text":"Driver code","code":"$ n = 50 ; echo largestCoprime ( $ n ) ; ? >"}
{"text":"Function to print first n safe primes","code":"< ? php function printSafePrimes ( $ n ) { $ prime = array ( ) ;"}
{"text":"Initialize all entries of integer array as 1. A value in prime [ i ] will finally be 0 if i is Not a prime , else 1","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ prime [ $ i ] = 1 ;"}
{"text":"0 and 1 are not primes","code":"$ prime [ 0 ] = $ prime [ 1 ] = 0 ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == 1 ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = 0 ; } } for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If i is prime","code":"if ( $ prime [ $ i ] != 0 ) {"}
{"text":"2 p + 1","code":"$ temp = ( 2 * $ i ) + 1 ;"}
{"text":"If 2 p + 1 is also a prime then set prime [ 2 p + 1 ] = 2","code":"if ( $ temp <= $ n && $ prime [ $ temp ] != 0 ) $ prime [ $ temp ] = 2 ; } } for ( $ i = 5 ; $ i <= $ n ; $ i ++ )"}
{"text":"i is a safe prime","code":"if ( $ prime [ $ i ] == 2 ) echo $ i , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 20 ; printSafePrimes ( $ n ) ; ? >"}
{"text":"Function to find powers of 2 , 3 and 7 in x","code":"< ? php function Divisors ( $ x ) {"}
{"text":"To keep count of each divisor","code":"$ c = 0 ;"}
{"text":"To store the result","code":"$ v = array ( ) ;"}
{"text":"Count powers of 2 in x","code":"while ( $ x % 2 == 0 ) { $ c ++ ; $ x = floor ( $ x \/ 2 ) ; } array_push ( $ v , $ c ) ; $ c = 0 ;"}
{"text":"Count powers of 3 in x","code":"while ( $ x % 3 == 0 ) { $ c ++ ; $ x = floor ( $ x \/ 3 ) ; } array_push ( $ v , $ c ) ; $ c = 0 ;"}
{"text":"Count powers of 7 in x","code":"while ( $ x % 7 == 0 ) { $ c ++ ; $ x = floor ( $ x \/ 7 ) ; } array_push ( $ v , $ c ) ;"}
{"text":"Remaining number which is not divisible by 2 , 3 or 7","code":"array_push ( $ v , $ x ) ; return $ v ; }"}
{"text":"Function to return the minimum number of given operations required to make a and b equal","code":"function MinOperations ( $ a , $ b ) {"}
{"text":"a = x * 2 ^ a1 * 3 ^ a2 * 7 ^ a3 va [ 0 ] = a1 va [ 1 ] = a2 va [ 2 ] = a3 va [ 3 ] = x","code":"$ va = Divisors ( $ a ) ;"}
{"text":"Similarly for b","code":"$ vb = Divisors ( $ b ) ;"}
{"text":"If a and b cannot be made equal with the given operation . Note that va [ 3 ] and vb [ 3 ] contain remaining numbers after repeated divisions with 2 , 3 and 7. If remaining numbers are not same then we cannot make them equal .","code":"if ( $ va [ 3 ] != $ vb [ 3 ] ) return -1 ;"}
{"text":"Minimum number of operations required","code":"$ minOperations = abs ( $ va [ 0 ] - $ vb [ 0 ] ) + abs ( $ va [ 1 ] - $ vb [ 1 ] ) + abs ( $ va [ 2 ] - $ vb [ 2 ] ) ; return $ minOperations ; }"}
{"text":"Driver code","code":"$ a = 14 ; $ b = 28 ; echo MinOperations ( $ a , $ b ) ; ? >"}
{"text":"Function to return the largest odd digit in n","code":"< ? php function largestOddDigit ( $ n ) {"}
{"text":"If all digits are even then - 1 will be returned","code":"$ maxOdd = -1 ; while ( $ n > 0 ) {"}
{"text":"Last digit from n","code":"$ digit = $ n % 10 ;"}
{"text":"If current digit is odd and > maxOdd","code":"if ( $ digit % 2 == 1 && $ digit > $ maxOdd ) $ maxOdd = $ digit ;"}
{"text":"Remove last digit","code":"$ n = $ n \/ 10 ; }"}
{"text":"Return the maximum odd digit","code":"return $ maxOdd ; }"}
{"text":"Function to return the product of n with its largest odd digit","code":"function getProduct ( $ n ) { $ maxOdd = largestOddDigit ( $ n ) ;"}
{"text":"If there are no odd digits in n","code":"if ( $ maxOdd == -1 ) return -1 ;"}
{"text":"Product of n with its largest odd digit","code":"return ( $ n * $ maxOdd ) ; }"}
{"text":"Driver code","code":"$ n = 12345 ; echo getProduct ( $ n ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ n = 10002 ; $ phi = array_fill ( 0 , $ n + 2 , 0 ) ; $ ans = array_fill ( 0 , $ n + 2 , 0 ) ;"}
{"text":"Euler totient Function","code":"function ETF ( ) { global $ phi , $ n ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ phi [ $ i ] = $ i ; } for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { if ( $ phi [ $ i ] == $ i ) { $ phi [ $ i ] = $ i - 1 ; for ( $ j = 2 * $ i ; $ j <= $ n ; $ j += $ i ) { $ phi [ $ j ] = ( int ) ( ( $ phi [ $ j ] * ( $ i - 1 ) ) \/ $ i ) ; } } } }"}
{"text":"Function to return the required LCM sum","code":"function LcmSum ( $ m ) { ETF ( ) ; global $ ans , $ n , $ phi ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Summation of d * ETF ( d ) where d belongs to set of divisors of n","code":"for ( $ j = $ i ; $ j <= $ n ; $ j += $ i ) { $ ans [ $ j ] += ( $ i * $ phi [ $ i ] ) ; } } $ answer = $ ans [ $ m ] ; $ answer = ( $ answer + 1 ) * $ m ; $ answer = ( int ) ( $ answer \/ 2 ) ; return $ answer ; }"}
{"text":"Driver code","code":"$ m = 5 ; echo LcmSum ( $ m ) ; ? >"}
{"text":"Factorial of a number","code":"< ? php function factorial ( $ n ) { $ fact = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ fact = $ fact * $ i ; return $ fact ; }"}
{"text":"Function to find c ( n , r )","code":"function ncr ( $ n , $ r ) { return factorial ( $ n ) \/ ( factorial ( $ r ) * factorial ( $ n - $ r ) ) ; }"}
{"text":"Function to count permutations of string such that no two vowels are adjacent","code":"function countWays ( $ str ) { $ freq = array_fill ( 0 , 26 , NULL ) ; $ nvowels = 0 ; $ nconsonants = 0 ;"}
{"text":"Finding the frequencies of the characters","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) ++ $ freq [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ;"}
{"text":"finding the no . of vowels and consonants in given word","code":"for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ i == 0 $ i == 4 $ i == 8 $ i == 14 $ i == 20 ) $ nvowels += $ freq [ $ i ] ; else $ nconsonants += $ freq [ $ i ] ; }"}
{"text":"finding places for the vowels","code":"$ vplaces = $ nconsonants + 1 ;"}
{"text":"ways to fill consonants 6 ! \/ 2 !","code":"$ cways = factorial ( $ nconsonants ) ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ i != 0 && $ i != 4 && $ i != 8 && $ i != 14 && $ i != 20 && $ freq [ $ i ] > 1 ) { $ cways = $ cways \/ factorial ( $ freq [ $ i ] ) ; } }"}
{"text":"ways to put vowels 7 C5 x 5 !","code":"$ vways = ncr ( $ vplaces , $ nvowels ) * factorial ( $ nvowels ) ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) { if ( $ i == 0 $ i == 4 $ i == 8 $ i == 14 $ i == 20 && $ freq [ $ i ] > 1 ) { $ vways = $ vways \/ factorial ( $ freq [ $ i ] ) ; } } return $ cways * $ vways ; }"}
{"text":"Driver code","code":"$ str = \" permutation \" ; echo countWays ( $ str ) . \" STRNEWLINE \" ; return 0 ; ? >"}
{"text":"Function to return the number of set bits in n","code":"< ? php function setBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ n = $ n & ( $ n - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"Function to return the count of required pairs","code":"function countPairs ( & $ a , $ n ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Set bits for first element of the pair","code":"$ setbits_x = setBits ( $ a [ $ i ] ) ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Set bits for second element of the pair","code":"$ setbits_y = setBits ( $ a [ $ j ] ) ;"}
{"text":"Set bits of the resultant number which is the XOR of both the elements of the pair","code":"$ setbits_xor_xy = setBits ( $ a [ $ i ] ^ $ a [ $ j ] ) ;"}
{"text":"If the condition is satisfied","code":"if ( $ setbits_x + $ setbits_y == $ setbits_xor_xy )"}
{"text":"Increment the count","code":"$ count ++ ; } }"}
{"text":"Return the total count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ a = array ( 2 , 3 , 4 , 5 , 6 ) ; $ n = sizeof ( $ a ) \/ sizeof ( $ a [ 0 ] ) ; echo countPairs ( $ a , $ n ) ; ? >"}
{"text":"Function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to Return the number of elements of arr [ ] which can be derived from D by performing ( + A , - A , + B , - B )","code":"function findPossibleDerivables ( $ arr , $ n , $ D , $ A , $ B ) {"}
{"text":"find the gcd of A and B","code":"$ gcdAB = gcd ( $ A , $ B ) ;"}
{"text":"counter stores the number of array elements which can be derived from D","code":"$ counter = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"arr [ i ] can be derived from D only if | arr [ i ] - D | is divisible by gcd of A and B","code":"if ( ( abs ( $ arr [ $ i ] - $ D ) % $ gcdAB ) == 0 ) { $ counter ++ ; } } return $ counter ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 7 , 13 ) ; $ n = sizeof ( $ arr ) ; $ D = 5 ; $ A = 4 ; $ B = 2 ; echo findPossibleDerivables ( $ arr , $ n , $ D , $ A , $ B ) , \" \" ; $ a = array ( 1 , 2 , 3 ) ; $ n = sizeof ( $ a ) ; $ D = 6 ; $ A = 3 ; $ B = 2 ; echo findPossibleDerivables ( $ arr , $ n , $ D , $ A , $ B ) , \" \" ; ? >"}
{"text":"Function to return the sum of the first n terms of the given series","code":"< ? php function calculateSum ( $ n ) {"}
{"text":"As described in the approach","code":"return ( $ n * ( 2 * $ n * $ n * $ n + 12 * $ n * $ n + 25 * $ n + 21 ) ) \/ 2 ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo calculateSum ( $ n ) ; ? >"}
{"text":"Function to find the array elements using XOR of consecutive elements","code":"< ? php function getElements ( $ a , & $ arr , & $ n ) {"}
{"text":"first element a i . e elements [ 0 ] = a","code":"$ elements [ 0 ] = $ a ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"To get the next elements we have to calculate xor of previous elements with given xor of 2 consecutive elements . e . g . if a ^ b = k1 so to get b xor a both side . b = k1 ^ a","code":"$ elements [ $ i + 1 ] = $ arr [ $ i ] ^ $ elements [ $ i ] ; }"}
{"text":"Printing the original array elements","code":"for ( $ i = 0 ; $ i < $ n + 1 ; $ i ++ ) { echo ( $ elements [ $ i ] . \" \" ) ; } }"}
{"text":"Driver Code","code":"$ arr = array ( 13 , 2 , 6 , 1 ) ; $ n = sizeof ( $ arr ) ; $ a = 5 ; getElements ( $ a , $ arr , $ n ) ; ? >"}
{"text":"Function to return the sum of distinct digits of a number","code":"< ? php function distinctDigitSum ( $ n ) { $ used [ 10 ] = array ( ) ; $ sum = 0 ; while ( $ n > 0 ) {"}
{"text":"Take last digit","code":"$ digit = $ n % 10 ;"}
{"text":"If digit has not been used before","code":"if ( $ used > 0 ) {"}
{"text":"Set digit as used","code":"$ used [ $ digit ] = true ; $ sum += $ digit ; }"}
{"text":"Remove last digit","code":"$ n = ( int ) $ n \/ 10 ; } return $ sum ; }"}
{"text":"Function to check whether the sum of distinct digits of two numbers are equal","code":"function checkSum ( $ m , $ n ) { $ sumM = distinctDigitSum ( $ m ) ; $ sumN = distinctDigitSum ( $ n ) ; if ( $ sumM != $ sumN ) return \" YES \" ; return \" NO \" ; }"}
{"text":"Driver code","code":"$ m = 2452 ; $ n = 9222 ; echo ( checkSum ( $ m , $ n ) ) ; ? >"}
{"text":"Utility function to calculate double factorial of a number","code":"< ? php function doubleFactorial ( $ n ) { $ fact = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i = $ i + 2 ) { $ fact = $ fact * $ i ; } return $ fact ; }"}
{"text":"Function to return nth Hermite number","code":"function hermiteNumber ( $ n ) {"}
{"text":"If n is even then return 0","code":"if ( $ n % 2 == 1 ) return 0 ;"}
{"text":"If n is odd","code":"else {"}
{"text":"Calculate double factorial of ( n - 1 ) and multiply it with 2 ^ ( n \/ 2 )","code":"$ number = ( pow ( 2 , $ n \/ 2 ) ) * doubleFactorial ( $ n - 1 ) ;"}
{"text":"If n \/ 2 is odd then nth Hermite number will be negative","code":"if ( ( $ n \/ 2 ) % 2 == 1 ) $ number = $ number * -1 ;"}
{"text":"Return nth Hermite number","code":"return $ number ; } }"}
{"text":"Driver Code","code":"$ n = 6 ;"}
{"text":"Print nth Hermite number","code":"echo hermiteNumber ( $ n ) ; ? >"}
{"text":"Function to return the required sum","code":"< ? php function getSum ( $ n , $ d ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If the unit digit is d","code":"if ( $ i % 10 == $ d ) $ sum += $ i ; } return $ sum ; }"}
{"text":"Driver code","code":"$ n = 30 ; $ d = 3 ; echo getSum ( $ n , $ d ) ; ? >"}
{"text":"PHP program to split a number into three parts such than none of them is divisible by 3.","code":"< ? php function printThreeParts ( $ N ) {"}
{"text":"Print x = 1 , y = 1 and z = N - 2","code":"if ( $ N % 3 == 0 ) echo \" \u2581 x \u2581 = \u2581 1 , \u2581 y \u2581 = \u2581 1 , \u2581 z \u2581 = \u2581 \" . ( $ N - 2 ) . \" STRNEWLINE \" ;"}
{"text":"Otherwise , print x = 1 , y = 2 and z = N - 3","code":"else echo \" \u2581 x \u2581 = \u2581 1 , \u2581 y \u2581 = \u2581 2 , \u2581 z \u2581 = \u2581 \" . ( $ N - 3 ) . \" \" ; }"}
{"text":"Driver code","code":"$ N = 10 ; printThreeParts ( $ N ) ; ? >"}
{"text":"Function to check if a number is prime or not","code":"< ? php function isPrime ( $ N ) { for ( $ i = 2 ; $ i <= sqrt ( $ N ) ; $ i ++ ) { if ( $ N % $ i == 0 ) return false ; } return true ; }"}
{"text":"Function to find the minimum absolute difference between a number and its closest prime","code":"function getDifference ( $ N ) { if ( $ N == 0 ) return 2 ; else if ( $ N == 1 ) return 1 ; else if ( isPrime ( $ N ) ) return 0 ;"}
{"text":"Variables to store first prime above and below N","code":"$ aboveN = -1 ; $ belowN = -1 ;"}
{"text":"Finding first prime number greater than N","code":"$ n1 = $ N + 1 ; while ( true ) { if ( isPrime ( $ n1 ) ) { $ aboveN = $ n1 ; break ; } else $ n1 ++ ; }"}
{"text":"Finding first prime number less than N","code":"$ n1 = $ N - 1 ; while ( true ) { if ( isPrime ( $ n1 ) ) { $ belowN = $ n1 ; break ; } else $ n1 -- ; }"}
{"text":"Variables to store the differences","code":"$ diff1 = $ aboveN - $ N ; $ diff2 = $ N - $ belowN ; return min ( $ diff1 , $ diff2 ) ; }"}
{"text":"Driver code","code":"$ N = 25 ; echo getDifference ( $ N ) . \" STRNEWLINE \" ;"}
{"text":"Function that returns true if the sum of all the perfect squares of the given array is divisible by x","code":"< ? php function check ( $ arr , $ x , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ x = sqrt ( $ arr [ $ i ] ) ;"}
{"text":"If arr [ i ] is a perfect square","code":"if ( floor ( $ x ) == ceil ( $ x ) ) { $ sum += $ arr [ $ i ] ; } } if ( ( $ sum % $ x ) == 0 ) return true ; else return false ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 4 , 9 , 10 ) ; $ n = sizeof ( $ arr ) ; $ x = 13 ; if ( ! check ( $ arr , $ x , $ n ) ) { echo \" Yes \" ; } else { echo \" No \" ; } ? >"}
{"text":"PHP program to find minimum and maximum no . of pairs","code":"< ? php function MinimumMaximumPairs ( $ n , $ m ) { $ max_pairs = ( ( $ n - $ m + 1 ) * ( $ n - $ m ) ) \/ 2 ; $ min_pairs = $ m * ( int ) ( ( ( ( int ) ( $ n - $ m ) \/ $ m + 1 ) * ( ( int ) ( $ n - $ m ) \/ $ m ) ) \/ 2 ) + ( int ) ceil ( ( $ n - $ m ) \/ $ m ) * ( ( $ n - $ m ) % $ m ) ; echo ( \" Minimum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \" . \" $ min _ pairs \" . \" STRNEWLINE \" ) ; echo ( \" Maximum \u2581 no . \u2581 of \u2581 pairs \u2581 = \u2581 \" . \" $ max _ pairs \" ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ m = 2 ; MinimumMaximumPairs ( $ n , $ m ) ; ? >"}
{"text":"Function to find the greater value","code":"< ? php function findGreater ( $ a , $ b ) { $ x = ( double ) $ a * ( double ) ( log ( ( double ) ( $ b ) ) ) ; $ y = ( double ) $ b * ( double ) ( log ( ( double ) ( $ a ) ) ) ; if ( $ y > $ x ) { echo \" a ^ b \u2581 is \u2581 greater \" , \" STRNEWLINE \" ; } else if ( $ y < $ x ) { echo \" b ^ a \u2581 is \u2581 greater \" , \" STRNEWLINE \" ; } else { echo \" Both \u2581 are \u2581 equal \" , \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ a = 3 ; $ b = 5 ; $ c = 2 ; $ d = 4 ; findGreater ( $ a , $ b ) ; findGreater ( $ c , $ d ) ; ? >"}
{"text":"Function to return the GCD of given numbers","code":"< ? php function abc ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return abc ( $ b % $ a , $ a ) ; }"}
{"text":"Recursive function to return ( x ^ n ) % m","code":"function modexp ( $ x , $ n ) { $ m = 1000000007 ; if ( $ n == 0 ) { return 1 ; } else if ( $ n % 2 == 0 ) { return modexp ( ( $ x * $ x ) % $ m , $ n \/ 2 ) ; } else { return ( $ x * modexp ( ( $ x * $ x ) % $ m , ( $ n - 1 ) \/ 2 ) % $ m ) ; } }"}
{"text":"Function to return the fraction modulo mod","code":"function getFractionModulo ( $ a , $ b ) { $ m = 1000000007 ; $ c = abc ( $ a , $ b ) ; $ a = $ a \/ $ c ; $ b = $ b \/ $ c ;"}
{"text":"( b ^ m - 2 ) % m","code":"$ d = modexp ( $ b , $ m - 2 ) ;"}
{"text":"Final answer","code":"$ ans = ( ( $ a % $ m ) * ( $ d % $ m ) ) % $ m ; return $ ans ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 6 ; echo ( getFractionModulo ( $ a , $ b ) ) ; ? >"}
{"text":"Function to return the sum of n and it 's largest prime factor","code":"< ? php function maxPrimeFactors ( $ n ) { $ num = $ n ;"}
{"text":"Initialise maxPrime to - 1.","code":"$ maxPrime = -1 ; while ( $ n % 2 == 0 ) { $ maxPrime = 2 ; $ n \/= 2 ; }"}
{"text":"n must be odd at this point , thus skip the even numbers and iterate only odd numbers","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i += 2 ) { while ( $ n % $ i == 0 ) { $ maxPrime = $ i ; $ n = $ n \/ $ i ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( $ n > 2 ) $ maxPrime = $ n ;"}
{"text":"finally return the sum .","code":"$ sum = $ maxPrime + $ num ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 19 ; echo maxPrimeFactors ( $ n ) ; ? >"}
{"text":"Function to return the sum of the digits of n","code":"< ? php function sumOfDigits ( $ n ) { $ res = 0 ;"}
{"text":"Loop for each digit of the number","code":"while ( $ n > 0 ) { $ res += $ n % 10 ; $ n \/= 10 ; } return $ res ; }"}
{"text":"Function to return the greatest number less than n such that the sum of its digits is greater than the sum of the digits of n","code":"function findNumber ( $ n ) {"}
{"text":"Starting from n - 1","code":"$ i = $ n - 1 ;"}
{"text":"Check until 1","code":"while ( $ i > 0 ) {"}
{"text":"If i satisfies the given condition","code":"if ( sumOfDigits ( $ i ) > sumOfDigits ( $ n ) ) return $ i ; $ i -- ; }"}
{"text":"If the condition is not satisfied","code":"return -1 ; }"}
{"text":"Driver code","code":"$ n = 824 ; echo findNumber ( $ n ) ; ? >"}
{"text":"Function to find the N - th term","code":"< ? php function findNth ( $ N ) {"}
{"text":"initializing the 1 st number","code":"$ b = 14 ;"}
{"text":"loop from 2 nd term to nth term","code":"for ( $ i = 2 ; $ i <= $ N ; $ i ++ ) {"}
{"text":"if i is even , double the previous number","code":"if ( $ i % 2 == 0 ) $ b = $ b * 2 ;"}
{"text":"if i is odd , subtract 8 from previous number","code":"else $ b = $ b - 8 ; } return $ b ; }"}
{"text":"Driver Code","code":"$ N = 6 ; echo findNth ( $ N ) ; ? >"}
{"text":"Dimension of Array","code":"< ? php #define N  4 NEW_LINE function predictMatrix ( $ arr , $ range1a , $ range1b , $ range0a , $ range0b , $ K , $ b ) { $ N = 4 ;"}
{"text":"Count of 1 s","code":"$ c = 0 ; while ( $ K -- ) { for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ c = 0 ;"}
{"text":"Counting all neighbouring 1 s","code":"if ( $ i > 0 && $ arr [ $ i - 1 ] [ $ j ] == 1 ) $ c ++ ; if ( $ j > 0 && $ arr [ $ i ] [ $ j - 1 ] == 1 ) $ c ++ ; if ( $ i > 0 && $ j > 0 && $ arr [ $ i - 1 ] [ $ j - 1 ] == 1 ) $ c ++ ; if ( $ i < $ N - 1 && $ arr [ $ i + 1 ] [ $ j ] == 1 ) $ c ++ ; if ( $ j < $ N - 1 && $ arr [ $ i ] [ $ j + 1 ] == 1 ) $ c ++ ; if ( $ i < $ N - 1 && $ j < $ N - 1 && $ arr [ $ i + 1 ] [ $ j + 1 ] == 1 ) $ c ++ ; if ( $ i < $ N - 1 && $ j > 0 && $ arr [ $ i + 1 ] [ $ j - 1 ] == 1 ) $ c ++ ; if ( $ i > 0 && $ j < $ N - 1 && $ arr [ $ i - 1 ] [ $ j + 1 ] == 1 ) $ c ++ ;"}
{"text":"Comparing the number of neighbouring 1 s with given ranges","code":"if ( $ arr [ $ i ] [ $ j ] == 1 ) { if ( $ c >= $ range1a && $ c <= $ range1b ) $ b [ $ i ] [ $ j ] = 1 ; else $ b [ $ i ] [ $ j ] = 0 ; } if ( $ arr [ $ i ] [ $ j ] == 0 ) { if ( $ c >= $ range0a && $ c <= $ range0b ) $ b [ $ i ] [ $ j ] = 1 ; else $ b [ $ i ] [ $ j ] = 0 ; } } }"}
{"text":"Copying changes to the main matrix","code":"for ( $ k = 0 ; $ k < $ N ; $ k ++ ) for ( $ m = 0 ; $ m < $ N ; $ m ++ ) $ arr [ $ k ] [ $ m ] = $ b [ $ k ] [ $ m ] ; } return $ b ; }"}
{"text":"Driver code","code":"$ N = 4 ; $ arr = array ( array ( 0 , 0 , 0 , 0 ) , array ( 0 , 1 , 1 , 0 ) , array ( 0 , 0 , 1 , 0 ) , array ( 0 , 1 , 0 , 1 ) ) ; $ range1a = 2 ; $ range1b = 2 ; $ range0a = 2 ; $ range0b = 3 ; $ K = 3 ; $ b = array ( array ( 0 ) ) ;"}
{"text":"Function call to calculate the resultant matrix after ' K ' iterations .","code":"$ b1 = predictMatrix ( $ arr , $ range1a , $ range1b , $ range0a , $ range0b , $ K , $ b ) ;"}
{"text":"Printing Result","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { echo \" STRNEWLINE \" ; for ( $ j = 0 ; $ j < $ N ; $ j ++ ) echo $ b1 [ $ i ] [ $ j ] . \" \u2581 \" ; }"}
{"text":"Function that returns the required moves","code":"< ? php function countMoves ( $ n ) { $ ct = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ ct += $ i * ( $ n - $ i ) ;"}
{"text":"Final move","code":"$ ct += $ n ; return $ ct ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo countMoves ( $ n ) ; ? >"}
{"text":"Function to count Numbers with N digits which consists of odd number of 0 's","code":"< ? php function countNumbers ( $ N ) { return ( pow ( 10 , $ N ) - 1 ) - ( pow ( 10 , $ N ) - pow ( 8 , $ N ) ) \/ 2 ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo countNumbers ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program for finding determinant of generated matrix","code":"< ? php $ N = 3 ;"}
{"text":"Function to calculate determinant","code":"function calcDeterminant ( $ arr ) { global $ N ; $ determinant = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ determinant += pow ( $ arr [ $ i ] , 3 ) ; } $ determinant -= 3 * $ arr [ 0 ] * $ arr [ 1 ] * $ arr [ 2 ] ; return $ determinant ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 5 , 3 ) ; echo calcDeterminant ( $ arr ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function minimumMoves ( $ k , $ l , $ r ) {"}
{"text":"Total elements in the range","code":"$ count = $ r - $ l + 1 ;"}
{"text":"If total elements are already divisible by k","code":"if ( $ count % $ k == 0 ) return 0 ;"}
{"text":"Value that must be added to count in order to make it divisible by k","code":"return ( $ k - ( $ count % $ k ) ) ; }"}
{"text":"Driver Program to test above function","code":"$ k = 3 ; $ l = 10 ; $ r = 10 ; echo minimumMoves ( $ k , $ l , $ r ) ; ? >"}
{"text":"Function to return the sum of all natural numbers","code":"< ? php function sumNatural ( $ n ) { $ sum = ( $ n * ( $ n + 1 ) ) ; return $ sum ; }"}
{"text":"Function to return sum of even numbers in range L and R","code":"function sumEven ( $ l , $ r ) { return sumNatural ( ( int ) ( $ r \/ 2 ) ) - sumNatural ( ( int ) ( ( $ l - 1 ) \/ 2 ) ) ; }"}
{"text":"Driver Code","code":"$ l = 2 ; $ r = 5 ; echo \" Sum \u2581 of \u2581 Natural \u2581 numbers \u2581 \" . \" from \u2581 L \u2581 to \u2581 R \u2581 is \u2581 \" . sumEven ( $ l , $ r ) ; ? >"}
{"text":"Function to check whether n is divisible by a number whose digits are either a or b","code":"< ? php function isDivisibleRec ( $ x , $ a , $ b , $ n ) {"}
{"text":"base condition","code":"if ( $ x > $ n ) return false ; if ( $ n % $ x == 0 ) return true ;"}
{"text":"recursive call","code":"return ( isDivisibleRec ( $ x * 10 + $ a , $ a , $ b , $ n ) || isDivisibleRec ( $ x * 10 + $ b , $ a , $ b , $ n ) ) ; } function isDivisible ( $ a , $ b , $ n ) {"}
{"text":"Check for all numbers beginning with ' a ' or ' b '","code":"return isDivisibleRec ( $ a , $ a , $ b , $ n ) || isDivisibleRec ( $ b , $ a , $ b , $ n ) ; }"}
{"text":"Driver Code","code":"$ a = 3 ; $ b = 5 ; $ n = 53 ; if ( isDivisible ( $ a , $ b , $ n ) ) echo \" Yes \" ; else echo \" No \" ;"}
{"text":"function to Find the minimum number of moves required to reach the destination by the king in a chess board","code":"< ? php function MinSteps ( $ SourceX , $ SourceY , $ DestX , $ DestY ) {"}
{"text":"minimum number of steps","code":"echo max ( abs ( $ SourceX - $ DestX ) , abs ( $ SourceY - $ DestY ) ) . \" \" ;"}
{"text":"while the king is not in the same row or column as the destination","code":"while ( ( $ SourceX != $ DestX ) || ( $ SourceY != $ DestY ) ) {"}
{"text":"Go up","code":"if ( $ SourceX < $ DestX ) { echo ' U ' ; $ SourceX ++ ; }"}
{"text":"Go down","code":"if ( $ SourceX > $ DestX ) { echo ' D ' ; $ SourceX -- ; }"}
{"text":"Go left","code":"if ( $ SourceY > $ DestY ) { echo ' L ' ; $ SourceY -- ; }"}
{"text":"Go right","code":"if ( $ SourceY < $ DestY ) { echo ' R ' ; $ SourceY ++ ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ sourceX = 4 ; $ sourceY = 4 ; $ destinationX = 7 ; $ destinationY = 0 ; MinSteps ( $ sourceX , $ sourceY , $ destinationX , $ destinationY ) ; ? >"}
{"text":"Function to return an ArrayList containing all the perfect squares upto n","code":"< ? php function getPerfectSquares ( $ n ) { $ perfectSquares = array ( ) ; $ current = 1 ; $ i = 1 ;"}
{"text":"while current perfect square is less than or equal to n","code":"while ( $ current <= $ n ) { array_push ( $ perfectSquares , $ current ) ; $ current = ( int ) pow ( ++ $ i , 2 ) ; } return $ perfectSquares ; }"}
{"text":"Function to print the sum of maximum two elements from the array","code":"function maxPairSum ( $ arr ) { $ n = count ( $ arr ) ; $ max ; $ secondMax ; if ( $ arr [ 0 ] > $ arr [ 1 ] ) { $ max = $ arr [ 0 ] ; $ secondMax = $ arr [ 1 ] ; } else { $ max = $ arr [ 1 ] ; $ secondMax = $ arr [ 0 ] ; } for ( $ i = 2 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] > $ max ) { $ secondMax = $ max ; $ max = $ arr [ $ i ] ; } else if ( $ arr [ $ i ] > $ secondMax ) { $ secondMax = $ arr [ $ i ] ; } } return ( $ max + $ secondMax ) ; }"}
{"text":"Function to return the count of numbers that when added with n give a perfect square","code":"function countPairsWith ( $ n , $ perfectSquares , $ nums ) { $ count = 0 ; for ( $ i = 0 ; $ i < count ( $ perfectSquares ) ; $ i ++ ) { $ temp = $ perfectSquares [ $ i ] - $ n ;"}
{"text":"temp > n is checked so that pairs ( x , y ) and ( y , x ) don 't get counted twice","code":"if ( $ temp > $ n && in_array ( $ temp , $ nums ) ) $ count ++ ; } return $ count ; }"}
{"text":"Function to count the pairs whose sum is a perfect square","code":"function countPairs ( $ arr ) { $ n = count ( $ arr ) ;"}
{"text":"Sum of the maximum two elements from the array","code":"$ max = maxPairSum ( $ arr ) ;"}
{"text":"List of perfect squares upto max","code":"$ perfectSquares = getPerfectSquares ( $ max ) ;"}
{"text":"Contains all the array elements","code":"$ nums = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) array_push ( $ nums , $ arr [ $ i ] ) ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Add count of the elements that when added with arr [ i ] give a perfect square","code":"$ count += countPairsWith ( $ arr [ $ i ] , $ perfectSquares , $ nums ) ; } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 6 , 9 , 10 , 20 ) ; echo countPairs ( $ arr ) ; ? >"}
{"text":"Function to find the element","code":"< ? php function findEle ( $ arr , $ n ) {"}
{"text":"sum is use to store sum of all elements of array","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] ;"}
{"text":"iterate over all elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] == $ sum - $ arr [ $ i ] ) return $ arr [ $ i ] ; return -1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 6 ) ; $ n = sizeof ( $ arr ) ; echo findEle ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the sum of all natural numbers","code":"< ? php function sumNatural ( $ n ) { $ sum = ( $ n * ( $ n + 1 ) ) \/ 2 ; return $ sum ; }"}
{"text":"Function to return the sum of all numbers in range L and R","code":"function suminRange ( $ l , $ r ) { return sumNatural ( $ r ) - sumNatural ( $ l - 1 ) ; }"}
{"text":"Driver Code","code":"$ l = 2 ; $ r = 5 ; echo \" Sum \u2581 of \u2581 Natural \u2581 numbers \u2581 \" . \" from \u2581 L \u2581 to \u2581 R \u2581 is \u2581 \" , suminRange ( $ l , $ r ) ; ? >"}
{"text":"check divisibleBy3","code":"< ? php function divisibleBy3 ( $ number ) {"}
{"text":"to store sum of Digit","code":"$ sumOfDigit = 0 ;"}
{"text":"traversing through each digit","code":"for ( $ i = 0 ; $ i < strlen ( $ number ) ; $ i ++ )"}
{"text":"summing up Digit","code":"$ sumOfDigit += $ number [ $ i ] - '0' ;"}
{"text":"check if sumOfDigit is divisibleBy3","code":"if ( $ sumOfDigit % 3 == 0 ) return true ; return false ; }"}
{"text":"check divisibleBy25","code":"function divisibleBy25 ( $ number ) {"}
{"text":"if a single digit number","code":"if ( strlen ( $ number ) < 2 ) return false ;"}
{"text":"length of the number","code":"$ length = strlen ( $ number ) ;"}
{"text":"taking the last two digit","code":"$ lastTwo = ( $ number [ $ length - 2 ] - '0' ) * 10 + ( $ number [ $ length - 1 ] - '0' ) ;"}
{"text":"checking if the lastTwo digit is divisibleBy25","code":"if ( $ lastTwo % 25 == 0 ) return true ; return false ; }"}
{"text":"Function to check divisibleBy75 or not","code":"function divisibleBy75 ( $ number ) {"}
{"text":"check if divisibleBy3 and divisibleBy25","code":"if ( divisibleBy3 ( $ number ) && divisibleBy25 ( $ number ) ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ number = \"754586672150\" ;"}
{"text":"divisible","code":"$ divisible = divisibleBy75 ( $ number ) ;"}
{"text":"if divisibleBy75","code":"if ( $ divisible ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function that will calculates the zeroes at the end","code":"< ? php function otherNumber ( $ A , $ Lcm , $ Hcf ) { return ( $ Lcm * $ Hcf ) \/ $ A ; }"}
{"text":"Driver code","code":"$ A = 8 ; $ Lcm = 8 ; $ Hcf = 1 ;"}
{"text":"Calling function .","code":"$ result = otherNumber ( $ A , $ Lcm , $ Hcf ) ; echo \" B \u2581 = \u2581 \" . $ result ;"}
{"text":"PHP implementation of above approach","code":"< ? php function successiveChange ( $ arr , $ N ) { $ result = 0 ; $ var1 = $ arr [ 0 ] ; $ var2 = $ arr [ 1 ] ;"}
{"text":"Calculate successive change of 1 st 2 change","code":"$ result = $ var1 + $ var2 + ( ( $ var1 * $ var2 ) \/ 100 ) ;"}
{"text":"Calculate successive change for rest of the value","code":"for ( $ i = 2 ; $ i < $ N ; $ i ++ ) $ result = $ result + $ arr [ $ i ] + ( ( $ result * $ arr [ $ i ] ) \/ 100 ) ; return $ result ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 20 , 30 , 10 ) ; $ N = count ( $ arr ) ;"}
{"text":"Calling function","code":"$ result = successiveChange ( $ arr , $ N ) ; echo \" Percentage \u2581 change \u2581 is \u2581 = \u2581 \" , $ result , \" \u2581 % \" ; ? >"}
{"text":"Function to find the minimum numbers required to get to S","code":"< ? php function minimumNumbers ( $ n , $ s ) { if ( $ s % $ n ) return round ( $ s \/ $ n + 1 ) ; else return round ( $ s \/ $ n ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ s = 11 ; echo minimumNumbers ( $ n , $ s ) ; ? >"}
{"text":"PHP program to find the sum of all multiples of A and B below N","code":"< ? php function __gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return __gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Function to find sum of AP series","code":"function sumAP ( $ n , $ d ) {"}
{"text":"Number of terms","code":"$ n = ( int ) ( $ n \/ $ d ) ; return ( $ n ) * ( 1 + $ n ) * $ d \/ 2 ; }"}
{"text":"Function to find the sum of all multiples of A and B below N","code":"function sumMultiples ( $ A , $ B , $ n ) {"}
{"text":"Since , we need the sum of multiples less than N","code":"$ n -- ;"}
{"text":"common factors of A and B","code":"$ common = ( int ) ( ( $ A * $ B ) \/ __gcd ( $ A , $ B ) ) ; return sumAP ( $ n , $ A ) + sumAP ( $ n , $ B ) - sumAP ( $ n , $ common ) ; }"}
{"text":"Driver code","code":"$ n = 100 ; $ A = 5 ; $ B = 10 ; echo \" Sum = \" ? >"}
{"text":"Function to check whether a number is prime or not","code":"< ? php function isPrime ( $ n ) { if ( $ n <= 1 ) return false ; for ( $ i = 2 ; $ i <= sqrt ( $ n ) ; $ i ++ ) { if ( $ n % $ i == 0 ) return false ; } return true ; }"}
{"text":"Function to check if a prime number can be expressed as sum of two Prime Numbers","code":"function isPossible ( $ N ) {"}
{"text":"if the number is prime , and number - 2 is also prime","code":"if ( isPrime ( $ N ) && isPrime ( $ N - 2 ) ) return true ; else return false ; }"}
{"text":"Driver code","code":"$ n = 13 ; if ( isPossible ( $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"function to return the length of the largest sub - array of an array every element of whose is a perfect square","code":"< ? php function contiguousPerfectSquare ( $ arr , $ n ) { $ current_length = 0 ; $ max_length = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ b = ( float ) sqrt ( $ arr [ $ i ] ) ; $ a = ( int ) $ b ;"}
{"text":"if both a and b are equal then arr [ i ] is a perfect square","code":"if ( $ a == $ b ) $ current_length = $ current_length + 1 ; else $ current_length = 0 ; $ max_length = max ( $ max_length , $ current_length ) ; } return $ max_length ; }"}
{"text":"Driver code","code":"$ arr = array ( 9 , 75 , 4 , 64 , 121 , 25 ) ; $ n = sizeof ( $ arr ) ; echo contiguousPerfectSquare ( $ arr , $ n ) ; ? >"}
{"text":"Function to count pairs","code":"< ? php function countPairs ( $ n ) {"}
{"text":"variable to store count","code":"$ count = 0 ;"}
{"text":"Generate all possible pairs such that 1 <= x < y < n","code":"for ( $ x = 1 ; $ x < $ n ; $ x ++ ) { for ( $ y = $ x + 1 ; $ y <= $ n ; $ y ++ ) { if ( ( $ y * $ x ) % ( $ y + $ x ) == 0 ) $ count ++ ; } } return $ count ; }"}
{"text":"Driver code","code":"$ n = 15 ; echo countPairs ( $ n ) ; ? >"}
{"text":"Function that returns the index of the left pointer","code":"< ? php function getIndex ( $ a , $ n ) {"}
{"text":"there 's only one element  in the array","code":"if ( $ n == 1 ) return 0 ;"}
{"text":"initially both are at end","code":"$ ptrL = 0 ; $ ptrR = $ n - 1 ; $ sumL = $ a [ 0 ] ; $ sumR = $ a [ $ n - 1 ] ; while ( $ ptrR - $ ptrL > 1 ) { if ( $ sumL < $ sumR ) { $ ptrL ++ ; $ sumL += $ a [ $ ptrL ] ; } else if ( $ sumL > $ sumR ) { $ ptrR -- ; $ sumR += $ a [ $ ptrR ] ; } else { break ; } } return $ ptrL ; }"}
{"text":"Driver code","code":"$ a = array ( 2 , 7 , 9 , 8 , 7 ) ; $ n = count ( $ a ) ; echo getIndex ( $ a , $ n ) ; ? >"}
{"text":"Function to find the original position of the element which will be removed last","code":"< ? php function getPosition ( $ a , $ n , $ m ) {"}
{"text":"take ceil of every number","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ i ] = ( $ a [ $ i ] \/ $ m + ( $ a [ $ i ] % $ m != 0 ) ) ; } $ ans = -1 ; $ max = -1 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { if ( $ max < $ a [ $ i ] ) { $ max = $ a [ $ i ] ; $ ans = $ i ; } }"}
{"text":"Since position is index + 1","code":"return $ ans + 1 ; }"}
{"text":"Driver code","code":"$ a = array ( 2 , 5 , 4 ) ; $ n = sizeof ( $ a ) ; $ m = 2 ; echo getPosition ( $ a , $ n , $ m ) ; ? >"}
{"text":"Function to find value of given F ( n )","code":"< ? php function calcFunction ( $ n , $ r ) { $ finalDenominator = 1 ; $ mx = max ( $ r , $ n - $ r ) ;"}
{"text":"iterate over n","code":"for ( $ i = $ mx + 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"calculate result","code":"$ denominator = pow ( $ i , $ i ) ; $ numerator = pow ( $ i - $ mx , $ i - $ mx ) ; $ finalDenominator = ( $ finalDenominator * $ denominator ) \/ $ numerator ; }"}
{"text":"return the result","code":"return $ finalDenominator ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ r = 2 ; echo \"1 \/ \" , calcFunction ( $ n , $ r ) ; ? >"}
{"text":"Function to find the number","code":"< ? php function findNum ( $ div , $ rem , $ N ) { $ num = $ rem [ $ N - 1 ] ; for ( $ i = $ N - 2 ; $ i >= 0 ; $ i -- ) { $ num = $ num * $ div [ $ i ] + $ rem [ $ i ] ; } return $ num ; }"}
{"text":"Driver Code","code":"$ div = array ( 8 , 3 ) ; $ rem = array ( 2 , 2 ) ; $ N = sizeof ( $ div ) ; echo findNum ( $ div , $ rem , $ N ) ; ? >"}
{"text":"Function to calculate Profit or loss","code":"< ? php function profitLoss ( $ N , $ M ) { if ( $ N == $ M ) echo \" No \u2581 Profit \u2581 nor \u2581 Loss \" ; else { $ result = 0.0 ; $ result = ( abs ( $ N - $ M ) ) \/ $ M ; if ( $ N - $ M < 0 ) echo \" Loss \u2581 = \u2581 - \" , $ result * 100 , \" % \" ; else echo \" Profit \u2581 = \u2581 \" , $ result * 100 , \" % \" ; } }"}
{"text":"Driver Code","code":"$ N = 8 ; $ M = 9 ; profitLoss ( $ N , $ M ) ; ? >"}
{"text":"Function to find number of pieces of circle after N cuts","code":"< ? php function countPieces ( $ N ) { return 2 * $ N ; }"}
{"text":"Driver Code","code":"$ N = 100 ; echo countPieces ( $ N ) ; ? >"}
{"text":"Function to find sum of AP series","code":"< ? php function sumAP ( $ n , $ d ) {"}
{"text":"Number of terms","code":"$ n = ( int ) ( $ n \/ $ d ) ; return ( $ n ) * ( 1 + $ n ) * ( $ d \/ 2 ) ; }"}
{"text":"Function to find the sum of all multiples of 3 and 7 below N","code":"function sumMultiples ( $ n ) {"}
{"text":"Since , we need the sum of multiples less than N","code":"$ n -- ; return sumAP ( $ n , 3 ) + sumAP ( $ n , 7 ) - sumAP ( $ n , 21 ) ; }"}
{"text":"Driver code","code":"$ n = 24 ; echo sumMultiples ( $ n ) ; ? >"}
{"text":"Below function checks whether product of digits at even places is divisible by sum of digits at odd places","code":"< ? php function productSumDivisible ( $ n , $ size ) { $ sum = 0 ; $ product = 1 ; while ( $ n > 0 ) {"}
{"text":"if size is even","code":"if ( $ size % 2 == 0 ) { $ product *= $ n % 10 ; }"}
{"text":"if size is odd","code":"else { $ sum += $ n % 10 ; } $ n = $ n \/ 10 ; $ size -- ; } if ( $ product % $ sum == 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ n = 1234 ; $ len = 4 ; if ( productSumDivisible ( $ n , $ len ) ) echo \" TRUE \" ; else echo \" FALSE \" ; ? >"}
{"text":"PHP program to find GCD of a ^ n and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Returns GCD of a ^ n and b .","code":"function powGCD ( $ a , $ n , $ b ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ a = $ a * $ a ; return gcd ( $ a , $ b ) ; }"}
{"text":"Driver code","code":"$ a = 10 ; $ b = 5 ; $ n = 2 ; echo powGCD ( $ a , $ n , $ b ) ; ? >"}
{"text":"Function to return the last destination","code":"< ? php function lastCoordinate ( $ n , $ a , $ b ) { return ( ( $ n + 1 ) \/ 2 ) * $ a - ( int ) ( $ n \/ 2 ) * $ b ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ a = 5 ; $ b = 2 ; echo lastCoordinate ( $ n , $ a , $ b ) ; ? >"}
{"text":"Function to find the smallest number greater than or equal to N that is divisible by k","code":"< ? php function findNum ( $ N , $ K ) { $ rem = ( $ N + $ K ) % $ K ; if ( $ rem == 0 ) return $ N ; else return $ N + $ K - $ rem ; }"}
{"text":"Driver code","code":"$ N = 45 ; $ K = 6 ; echo \" Smallest \u2581 number \u2581 greater \u2581 than \u2581 \" . \" or \u2581 equal \u2581 to \u2581 \" , $ N ; echo \" that is divisible by \" \u2581 , \u2581 $ K \u2581 , STRNEWLINE \" is \" ? >"}
{"text":"Print the sum and product of digits that divides the number .","code":"< ? php function countDigit ( $ n ) { $ temp = $ n ; $ sum = 0 ; $ product = 1 ; while ( $ temp != 0 ) {"}
{"text":"Fetching each digit of the number","code":"$ d = $ temp % 10 ; $ temp = ( int ) ( $ temp \/ 10 ) ;"}
{"text":"Checking if digit is greater than 0 and can divides n .","code":"if ( $ d > 0 && $ n % $ d == 0 ) { $ sum += $ d ; $ product *= $ d ; } } echo \" Sum = \" . $ sum ; STRNEWLINE echo \u2581 \" Product = \" }"}
{"text":"Driver code","code":"$ n = 1012 ; countDigit ( $ n ) ; ? >"}
{"text":"Function to find the largest number smaller than or equal to N that is divisible by k","code":"< ? php function findNum ( $ N , $ K ) { $ rem = $ N % $ K ; if ( $ rem == 0 ) return $ N ; else return $ N - $ rem ; }"}
{"text":"Driver code","code":"$ N = 45 ; $ K = 6 ; echo \" Largest \u2581 number \u2581 smaller \u2581 than \u2581 or \u2581 equal \u2581 to \u2581 \" , $ N , \" that is divisible by \" , \u2581 $ K , \u2581 \" is \" findNum ( $ N , $ K ) ; ? >"}
{"text":"Function to check if any permutation of a number is divisible by 3 and is Palindromic","code":"< ? php function isDivisiblePalindrome ( $ n ) {"}
{"text":"Hash array to store frequency of digits of n","code":"$ hash = array ( 0 ) ; $ digitSum = 0 ;"}
{"text":"traverse the digits of integer and store their frequency","code":"while ( $ n ) {"}
{"text":"Calculate the sum of digits simultaneously","code":"$ digitSum += $ n % 10 ; $ hash ++ ; $ n \/= 10 ; }"}
{"text":"Check if number is not divisible by 3","code":"if ( $ digitSum % 3 != 0 ) return false ; $ oddCount = 0 ; for ( $ i = 0 ; $ i < 10 ; $ i ++ ) { if ( $ hash % 2 != 0 ) $ oddCount ++ ; }"}
{"text":"If more than one digits have odd frequency , palindromic permutation not possible","code":"if ( $ oddCount > 1 ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ n = 34734 ; if ( isDivisiblePalindrome ( $ n ) ) echo \" True \" ; else echo \" False \" ; # This  Code is contributed by Tushill. NEW_LINE ? >"}
{"text":"Below function checks whether product of digits at even places is divisible by K","code":"< ? php function productDivisible ( $ n , $ k ) { $ product = 1 ; $ position = 1 ; while ( $ n > 0 ) {"}
{"text":"if position is even","code":"if ( $ position % 2 == 0 ) $ product *= $ n % 10 ; $ n = ( int ) ( $ n \/ 10 ) ; $ position ++ ; } if ( $ product % $ k == 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ n = 321922 ; $ k = 3 ; if ( productDivisible ( $ n , $ k ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to find factorial of a number","code":"< ? php function factorial ( $ n ) { $ fact = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ fact = $ fact * $ i ; return $ fact ; }"}
{"text":"Function to calculate p ( n , r )","code":"function npr ( $ n , $ r ) { $ pnr = factorial ( $ n ) \/ factorial ( $ n - $ r ) ; return $ pnr ; }"}
{"text":"Function to find the number of permutations of n different things taken r at a time with k things grouped together","code":"function countPermutations ( $ n , $ r , $ k ) { return factorial ( $ k ) * ( $ r - $ k + 1 ) * npr ( $ n - $ k , $ r - $ k ) ; }"}
{"text":"Driver code","code":"$ n = 8 ; $ r = 5 ; $ k = 2 ; echo countPermutations ( $ n , $ r , $ k ) ; ? >"}
{"text":"Function to calculate the GIF value of a number","code":"< ? php function GIF ( $ n ) {"}
{"text":"GIF is the floor of a number","code":"return floor ( $ n ) ; }"}
{"text":"Driver code","code":"$ n = 2.3 ; echo GIF ( $ n ) ; ? >"}
{"text":"Returns factorial of a number","code":"< ? php function factorial ( $ n ) { $ fact = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ fact = $ fact * $ i ; return $ fact ; }"}
{"text":"calculate c ( n , r )","code":"function ncr ( $ n , $ r ) { return factorial ( $ n ) \/ ( factorial ( $ r ) * factorial ( $ n - $ r ) ) ; }"}
{"text":"Driver code","code":"$ m = 3 ; $ n = 4 ; $ k = 5 ; $ totalTriangles = ncr ( $ m + $ n + $ k , 3 ) - ncr ( $ m , 3 ) - ncr ( $ n , 3 ) - ncr ( $ k , 3 ) ; echo $ totalTriangles . \" STRNEWLINE \" ;"}
{"text":"function that checks the divisibility of the sum of the digits at odd places of the given number","code":"< ? php function SumDivisible ( $ n , $ k ) { $ sum = 0 ; $ position = 1 ; while ( $ n > 0 ) {"}
{"text":"if position is odd","code":"if ( $ position % 2 == 1 ) $ sum += $ n % 10 ; $ n = ( int ) $ n \/ 10 ; $ position ++ ; } if ( $ sum % $ k == 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ n = 592452 ; $ k = 3 ; if ( SumDivisible ( $ n , $ k ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"PHP program to check if a triangle of positive area is possible with the given angles","code":"< ? php function isTriangleExists ( $ a , $ b , $ c ) {"}
{"text":"Checking if the sum of three angles is 180 and none of the angles is zero","code":"if ( $ a != 0 && $ b != 0 && $ c != 0 && ( $ a + $ b + $ c ) == 180 )"}
{"text":"Checking if sum of any two angles is greater than equal to the third one","code":"if ( ( $ a + $ b ) >= $ c || ( $ b + $ c ) >= $ a || ( $ a + $ c ) >= $ b ) return \" YES \" ; else return \" NO \" ; else return \" NO \" ; }"}
{"text":"Driver Code","code":"$ a = 50 ; $ b = 60 ; $ c = 70 ; echo isTriangleExists ( $ a , $ b , $ c ) ; ? >"}
{"text":"Function to maximize the value of x such that n ! % ( k ^ x ) = 0","code":"< ? php function findX ( $ n , $ k ) { $ r = $ n ;"}
{"text":"Find square root of k and add 1 to it","code":"$ m = ( int ) sqrt ( $ k ) + 1 ;"}
{"text":"Run the loop from 2 to m and k should be greater than 1","code":"for ( $ i = 2 ; $ i <= $ m && $ k > 1 ; $ i ++ ) { if ( $ i == $ m ) { $ i = $ k ; }"}
{"text":"optimize the value of k","code":"for ( $ u = $ v = 0 ; $ k % $ i == 0 ; $ v ++ ) { $ k = ( int ) ( $ k \/ $ i ) ; } if ( $ v > 0 ) { $ t = $ n ; while ( $ t > 0 ) { $ t = ( int ) ( $ t \/ $ i ) ; $ u = $ u + $ t ; }"}
{"text":"Minimum store","code":"$ r = min ( $ r , ( int ) ( $ u \/ $ v ) ) ; } } return $ r ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ k = 2 ; echo findX ( $ n , $ k ) ; ? >"}
{"text":"Returns factorial of the number","code":"< ? php function fact ( $ n ) { $ fact = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ fact *= $ i ; return $ fact ; }"}
{"text":"Function to calculate ncr","code":"function ncr ( $ n , $ r ) { $ ncr = ( int ) ( fact ( $ n ) \/ ( fact ( $ r ) * fact ( $ n - $ r ) ) ) ; return $ ncr ; }"}
{"text":"Function to calculate the total possible ways","code":"function ways ( $ m , $ w , $ n , $ k ) { $ ans = 0 ; while ( $ m >= $ k ) { $ ans += ncr ( $ m , $ k ) * ncr ( $ w , $ n - $ k ) ; $ k += 1 ; } return $ ans ; }"}
{"text":"Driver code","code":"$ m = 7 ; $ w = 6 ; $ n = 5 ; $ k = 3 ; echo ways ( $ m , $ w , $ n , $ k ) ;"}
{"text":"Function to return sum of first n odd numbers","code":"< ? php function square ( $ n ) { return $ n * $ n ; }"}
{"text":"Recursive function to return sum of greatest odd divisor of numbers in range [ 1 , n ]","code":"function sum ( $ n ) { if ( $ n == 0 ) return 0 ; if ( $ n % 2 == 1 )"}
{"text":"{ Odd n","code":"return square ( ( int ) ( ( $ n + 1 ) \/ 2 ) ) + sum ( ( int ) ( $ n \/ 2 ) ) ; } else"}
{"text":"{ Even n","code":"return square ( ( int ) ( $ n \/ 2 ) ) + sum ( ( int ) ( $ n \/ 2 ) ) ; } }"}
{"text":"Function to return sum of greatest odd divisor of numbers in range [ a , b ]","code":"function oddDivSum ( $ a , $ b ) { return sum ( $ b ) - sum ( $ a - 1 ) ; }"}
{"text":"Driver code","code":"$ a = 3 ; $ b = 9 ; echo oddDivSum ( $ a , $ b ) ; ? >"}
{"text":"function to count length of binary expression of n","code":"< ? php function countBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ count ++ ; $ n >>= 1 ; } return $ count ; }"}
{"text":"Driver code","code":"$ n = 32 ; echo \" Minimum \u2581 value \u2581 of \u2581 K \u2581 is \u2581 = \u2581 \" , countBits ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to check if the number is powerful number","code":"< ? php function isPowerful ( $ n ) {"}
{"text":"First divide the number repeatedly by 2","code":"while ( $ n % 2 == 0 ) { $ power = 0 ; while ( $ n % 2 == 0 ) { $ n \/= 2 ; $ power ++ ; }"}
{"text":"If only 2 ^ 1 divides n ( not higher powers ) , then return false","code":"if ( $ power == 1 ) return false ; }"}
{"text":"if n is not a power of 2 then this loop will execute repeat above process","code":"for ( $ factor = 3 ; $ factor <= sqrt ( $ n ) ; $ factor += 2 ) {"}
{"text":"Find highest power of \" factor \" that divides n","code":"$ power = 0 ; while ( $ n % $ factor == 0 ) { $ n = $ n \/ $ factor ; $ power ++ ; }"}
{"text":"If only factor ^ 1 divides n ( not higher powers ) , then return false","code":"if ( $ power == 1 ) return false ; }"}
{"text":"n must be 1 now if it is not a prime number . Since prime numbers are not powerful , we return false if n is not 1.","code":"return ( $ n == 1 ) ; }"}
{"text":"Utility function to check if number is a perfect power or not","code":"function isPower ( $ a ) { if ( $ a == 1 ) return true ; for ( $ i = 2 ; $ i * $ i <= $ a ; $ i ++ ) { $ val = log ( $ a ) \/ log ( $ i ) ; if ( ( $ val - ( int ) $ val ) < 0.00000001 ) return true ; } return false ; }"}
{"text":"Function to check Achilles Number","code":"function isAchillesNumber ( $ n ) { if ( isPowerful ( $ n ) && ! isPower ( $ n ) ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ n = 72 ; if ( isAchillesNumber ( $ n ) ) echo \" YES \" , \" STRNEWLINE \" ; else echo \" NO \" , \" STRNEWLINE \" ; $ n = 36 ; if ( isAchillesNumber ( $ n ) ) echo \" YES \" , \" STRNEWLINE \" ; else echo \" NO \" , \" STRNEWLINE \" ; ? >"}
{"text":"Function to count numbers having odd number of divisors in range [ A , B ]","code":"< ? php function OddDivCount ( $ a , $ b ) {"}
{"text":"variable to odd divisor count","code":"$ res = 0 ;"}
{"text":"iterate from a to b and count their number of divisors","code":"for ( $ i = $ a ; $ i <= $ b ; ++ $ i ) {"}
{"text":"variable to divisor count","code":"$ divCount = 0 ; for ( $ j = 1 ; $ j <= $ i ; ++ $ j ) { if ( $ i % $ j == 0 ) { ++ $ divCount ; } }"}
{"text":"if count of divisor is odd then increase res by 1","code":"if ( $ divCount % 2 ) { ++ $ res ; } } return $ res ; }"}
{"text":"Driver code","code":"$ a = 1 ; $ b = 10 ; echo OddDivCount ( $ a , $ b ) ; ? >"}
{"text":"Function to find the largest factor of a given number which is a perfect square","code":"< ? php function largestSquareFactor ( $ num ) {"}
{"text":"Initialise the answer to 1","code":"$ answer = 1 ;"}
{"text":"Finding the prime factors till sqrt ( num )","code":"for ( $ i = 2 ; $ i < sqrt ( $ num ) ; ++ $ i ) {"}
{"text":"Frequency of the prime factor in the factorisation initialised to 0","code":"$ cnt = 0 ; $ j = $ i ; while ( $ num % $ j == 0 ) { $ cnt ++ ; $ j *= $ i ; }"}
{"text":"If the frequency is odd then multiply i frequency - 1 times to the answer","code":"if ( $ cnt & 1 ) { $ cnt -- ; $ answer *= pow ( $ i , $ cnt ) ; }"}
{"text":"Else if it is even , multiply it frequency times","code":"else { $ answer *= pow ( $ i , $ cnt ) ; } } return $ answer ; }"}
{"text":"Driver Code","code":"$ N = 420 ; echo largestSquareFactor ( $ N ) ; ? >"}
{"text":"calculate Nth term of given series","code":"< ? php function Nth_Term ( $ n ) { return ( 3 * pow ( $ n , 2 ) - $ n + 2 ) \/ ( 2 ) ; }"}
{"text":"Driver code","code":"$ N = 5 ; echo ( Nth_Term ( $ N ) ) ; ? >"}
{"text":"function to count all permutations","code":"< ? php function countPermutations ( $ N , $ B ) {"}
{"text":"count of all permutations","code":"$ x = pow ( $ B , $ N ) ;"}
{"text":"count of permutations with leading zeros","code":"$ y = pow ( $ B , $ N - 1 ) ;"}
{"text":"Return the permutations without leading zeros","code":"echo ( $ x - $ y ) , \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ N = 6 ; $ B = 4 ; countPermutations ( $ N , $ B ) ; ? >"}
{"text":"Function to find the difference between the product of non - primes and the product of primes of an array .","code":"< ? php function calculateDifference ( $ arr , $ n ) {"}
{"text":"Find maximum value in the array","code":"$ max_val = max ( $ arr ) ;"}
{"text":"USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array \" prime [ 0 . . n ] \" . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ max_val , true ) ;"}
{"text":"Remaining part of SIEVE","code":"$ prime [ 0 ] = false ; $ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ max_val ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ max_val ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Store the product of primes in P1 and the product of non primes in P2","code":"$ P1 = 1 ; $ P2 = 1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ prime [ $ arr [ $ i ] ] ) {"}
{"text":"the number is prime","code":"$ P1 *= $ arr [ $ i ] ; } else if ( $ arr [ $ i ] != 1 ) {"}
{"text":"the number is non - prime","code":"$ P2 *= $ arr [ $ i ] ; } }"}
{"text":"Return the absolute difference","code":"return abs ( $ P2 - $ P1 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 5 , 10 , 15 , 7 ) ; $ n = count ( $ arr , COUNT_NORMAL ) ;"}
{"text":"Find the absolute difference","code":"echo CalculateDifference ( $ arr , $ n ) ; ? >"}
{"text":"Function to find the maximum number of equal numbers in an array","code":"< ? php function EqualNumbers ( $ a , $ n ) {"}
{"text":"to store sum of elements","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ a [ $ i ] ;"}
{"text":"if sum of numbers is not divisible by n","code":"if ( $ sum % $ n ) return $ n - 1 ; return $ n ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 4 , 1 ) ;"}
{"text":"size of an array","code":"$ n = sizeof ( $ a ) ; echo EqualNumbers ( $ a , $ n ) ;"}
{"text":"function to count odd sum pair","code":"< ? php function count_odd_pair ( $ n , $ a ) { $ odd = 0 ; $ even = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if number is even","code":"if ( $ a [ $ i ] % 2 == 0 ) $ even ++ ;"}
{"text":"if number is odd","code":"else $ odd ++ ; }"}
{"text":"count of ordered pairs","code":"$ ans = $ odd * $ even * 2 ; return $ ans ; }"}
{"text":"function to count even sum pair","code":"function count_even_pair ( $ odd_sum_pairs , $ n ) { $ total_pairs = ( $ n * ( $ n - 1 ) ) ; $ ans = $ total_pairs - $ odd_sum_pairs ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ a = array ( 2 , 4 , 5 , 9 , 1 , 8 ) ; $ odd_sum_pairs = count_odd_pair ( $ n , $ a ) ; $ even_sum_pairs = count_even_pair ( $ odd_sum_pairs , $ n ) ; echo \" Even \u2581 Sum \u2581 Pairs \u2581 = \u2581 $ even _ sum _ pairs \u2581 STRNEWLINE \" ; echo \" Odd \u2581 Sum \u2581 Pairs = \u2581 $ odd _ sum _ pairs \u2581 STRNEWLINE \" ; ? >"}
{"text":"Function to count the steps required","code":"< ? php function findSteps ( $ n , $ m , $ a ) {"}
{"text":"Start at 1","code":"$ cur = 1 ;"}
{"text":"Initialize steps","code":"$ steps = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) {"}
{"text":"If nxt is greater than cur","code":"if ( $ a [ $ i ] >= $ cur ) $ steps += ( $ a [ $ i ] - $ cur ) ; else $ steps += ( $ n - $ cur + $ a [ $ i ] ) ;"}
{"text":"Now we are at a [ i ]","code":"$ cur = $ a [ $ i ] ; } return $ steps ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ m = 3 ; $ a = array ( 2 , 1 , 2 ) ; echo findSteps ( $ n , $ m , $ a ) ; ? >"}
{"text":"function to convert Hexadecimal to Binary Number","code":"< ? php function HexToBin ( $ hexdec ) { $ i = 0 ; while ( $ hexdec [ $ i ] ) { switch ( $ hexdec [ $ i ] ) { case '0' : echo \"0000\" ; break ; case '1' : echo \"0001\" ; break ; case '2' : echo \"0010\" ; break ; case '3' : echo \"0011\" ; break ; case '4' : echo \"0100\" ; break ; case '5' : echo \"0101\" ; break ; case '6' : echo \"0110\" ; break ; case '7' : echo \"0111\" ; break ; case '8' : echo \"1000\" ; break ; case '9' : echo \"1001\" ; break ; case ' A ' : case ' a ' : echo \"1010\" ; break ; case ' B ' : case ' b ' : echo \"1011\" ; break ; case ' C ' : case ' c ' : echo \"1100\" ; break ; case ' D ' : case ' d ' : echo \"1101\" ; break ; case ' E ' : case ' e ' : echo \"1110\" ; break ; case ' F ' : case ' f ' : echo \"1111\" ; break ; default : echo \" Invalid hexadecimal digit \" $ hexdec [ $ i ] ; } $ i ++ ; } }"}
{"text":"Get the Hexadecimal number","code":"$ hexdec = \"1AC5\" ;"}
{"text":"Convert HexaDecimal to Binary","code":"echo \" Equivalent Binary value is : \" HexToBin ( $ hexdec ) ;"}
{"text":"Function to check if x is power of 2","code":"< ? php function isPowerOfTwo ( $ x ) {"}
{"text":"First x in the below expression is for the case when x is 0","code":"return ( $ x && ( ! ( $ x & ( $ x - 1 ) ) ) ) ; }"}
{"text":"Function to Count unordered pairs","code":"function Count_pairs ( $ a , $ n ) { $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"is a number can be expressed as power of two","code":"if ( isPowerOfTwo ( $ a [ $ i ] ) ) $ count ++ ; }"}
{"text":"count total number of unordered pairs","code":"$ ans = ( $ count * ( $ count - 1 ) ) \/ 2 ; echo $ ans , \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ a = array ( 2 , 5 , 8 , 16 , 128 ) ; $ n = sizeof ( $ a ) ; Count_pairs ( $ a , $ n ) ; ? >"}
{"text":"This function will return the factorial of a given number","code":"< ? php function factorial ( $ n ) { $ result = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ result = $ result * $ i ; return $ result ; }"}
{"text":"This function will calculate nCr of given n and r","code":"function nCr ( $ n , $ r ) { return factorial ( $ n ) \/ ( factorial ( $ r ) * factorial ( $ n - $ r ) ) ; }"}
{"text":"This function will Calculate number of ways","code":"function calculate_result ( $ n ) { $ result = 2 * nCr ( ( $ n - 2 ) , ( $ n \/ 2 - 1 ) ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 4 ; echo calculate_result ( 2 * $ a ) . \" STRNEWLINE \" ; echo calculate_result ( 2 * $ b ) . \" STRNEWLINE \" ; ? >"}
{"text":"function to Find values of a , in equation ( a + b ) <= n and a + b is divisible by x .","code":"< ? php function PossibleValues ( $ b , $ x , $ n ) {"}
{"text":"least possible which is divisible by x","code":"$ leastdivisible = ( intval ( $ b \/ $ x ) + 1 ) * $ x ; $ flag = 1 ;"}
{"text":"run a loop to get required answer","code":"while ( $ leastdivisible <= $ n ) { if ( $ leastdivisible - $ b >= 1 ) { echo $ leastdivisible - $ b . \" \" ;"}
{"text":"increase value by x","code":"$ leastdivisible += $ x ;"}
{"text":"answer is possible","code":"$ flag = 0 ; } else break ; } if ( $ flag ) echo \" - 1\" ; }"}
{"text":"Driver code","code":"$ b = 10 ; $ x = 6 ; $ n = 40 ;"}
{"text":"function call","code":"PossibleValues ( $ b , $ x , $ n ) ; ? >"}
{"text":"Function to calculate product of digits between given indexes","code":"< ? php function digitProduct ( $ digits , $ start , $ end ) { $ pro = 1 ; for ( $ i = $ start ; $ i <= $ end ; $ i ++ ) { $ pro *= $ digits [ $ i ] ; } return $ pro ; }"}
{"text":"Function to check if all sub - numbers have distinct Digit product","code":"function isDistinct ( $ N ) { $ s = \" $ N \" ;"}
{"text":"Length of number N","code":"$ len = sizeof ( $ s ) ;"}
{"text":"Digit array","code":"$ digits = array ( ) ;"}
{"text":"to maintain digit products","code":"$ products = array ( ) ; for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { $ digits [ $ i ] = $ s [ $ i ] - '0' ; }"}
{"text":"Finding all possible subarrays","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) { for ( $ j = $ i ; $ j < $ len ; $ j ++ ) { $ val = digitProduct ( $ digits , $ i , $ j ) ; if ( in_array ( $ val , $ products ) ) return false ; else array_push ( $ products , $ val ) ; } } return true ; }"}
{"text":"Driver code","code":"$ N = 324 ; if ( isDistinct ( $ N ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Utility function to return Nth Hilbert Number","code":"< ? php function nthHilbertNumber ( $ n ) { return 4 * ( $ n - 1 ) + 1 ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo nthHilbertNumber ( $ n ) ; ? >"}
{"text":"Function to calculate nth kynea number","code":"< ? php function nthKyneaNumber ( $ n ) {"}
{"text":"Firstly calculate 2 ^ n + 1","code":"$ n = ( 1 << $ n ) + 1 ;"}
{"text":"Now calculate ( 2 ^ n + 1 ) ^ 2","code":"$ n = $ n * $ n ;"}
{"text":"Now calculate ( ( 2 ^ n + 1 ) ^ 2 ) - 2","code":"$ n = $ n - 2 ;"}
{"text":"return nth Kynea number","code":"return $ n ; }"}
{"text":"Driver Code","code":"$ n = 8 ;"}
{"text":"print nth kynea number","code":"echo nthKyneaNumber ( $ n ) ;"}
{"text":"Function to calculate nth kynea number","code":"< ? php function nthKyneaNumber ( $ n ) {"}
{"text":"Calculate nth kynea number","code":"return ( ( 1 << ( 2 * $ n ) ) + ( 1 << ( $ n + 1 ) ) - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 2 ;"}
{"text":"print nth kynea number","code":"echo nthKyneaNumber ( $ n ) ; ? >"}
{"text":"Utility function to check power of two","code":"< ? php function isPowerOfTwo ( $ n ) { return ( $ n && ! ( $ n & ( $ n - 1 ) ) ) ; }"}
{"text":"Function to check if the Given number is Proth number or not","code":"function isProthNumber ( $ n ) { $ k = 1 ; while ( $ k < ( $ n \/ $ k ) ) {"}
{"text":"check if k divides n or not","code":"if ( $ n % $ k == 0 ) {"}
{"text":"Check if n \/ k is power of 2 or not","code":"if ( isPowerOfTwo ( $ n \/ $ k ) ) return true ; }"}
{"text":"update k to next odd number","code":"$ k = $ k + 2 ; }"}
{"text":"If we reach here means there exists no value of K Such that k is odd number and n \/ k is a power of 2 greater than k","code":"return false ; }"}
{"text":"Get n","code":"$ n = 25 ;"}
{"text":"Check n for Proth Number","code":"if ( isProthNumber ( $ n - 1 ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to find the unit ' s \u2581 and \u2581 ten ' s place digit","code":"< ? php function get_last_two_digit ( $ N ) {"}
{"text":"Let us write for cases when N is smaller than or equal to 10.","code":"if ( $ N <= 10 ) { $ ans = 0 ; $ fac = 1 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) { $ fac = $ fac * $ i ; $ ans += $ fac ; } return $ ans % 100 ; }"}
{"text":"We know following ( 1 ! + 2 ! + 3 ! + 4 ! ... + 10 ! ) % 100 = 13 else ( N >= 10 )","code":"return 13 ; }"}
{"text":"Driver code","code":"$ N = 1 ; for ( $ N = 1 ; $ N <= 10 ; $ N ++ ) echo \" For \u2581 N \u2581 = \u2581 \" . $ N . \" \u2581 : \u2581 \" . get_last_two_digit ( $ N ) . \" STRNEWLINE \" ;"}
{"text":"function to check whether product of ' n ' numbers is even or odd","code":"< ? php function isProductEven ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ )"}
{"text":"if a single even number is found , then final product will be an even number","code":"if ( ( $ arr [ $ i ] & 1 ) == 0 ) return true ;"}
{"text":"product is an odd number","code":"return false ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 4 , 3 , 5 ) ; $ n = sizeof ( $ arr ) ; if ( isProductEven ( $ arr , $ n ) ) echo \" Even \" ; else echo \" Odd \" ; ? >"}
{"text":"Function to calculate sum of squares of Fibonacci numbers","code":"< ? php function calculateSquareSum ( $ n ) { if ( $ n <= 0 ) return 0 ; $ fibo [ 0 ] = 0 ; $ fibo [ 1 ] = 1 ;"}
{"text":"Initialize result","code":"$ sum = ( $ fibo [ 0 ] * $ fibo [ 0 ] ) + ( $ fibo [ 1 ] * $ fibo [ 1 ] ) ;"}
{"text":"Add remaining terms","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ fibo [ $ i ] = $ fibo [ $ i - 1 ] + $ fibo [ $ i - 2 ] ; $ sum += ( $ fibo [ $ i ] * $ fibo [ $ i ] ) ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo \" Sum \u2581 of \u2581 squares \u2581 of \u2581 Fibonacci \u2581 numbers \u2581 is \u2581 : \u2581 \" , calculateSquareSum ( $ n ) ; ? >"}
{"text":"function for obtaining the value of f ( n ) mod 4","code":"< ? php function fnMod ( $ n ) {"}
{"text":"Find the remainder of n when divided by 4","code":"$ rem = $ n % 4 ;"}
{"text":"If n is of the form 4 k or 4 k + 3","code":"if ( $ rem == 0 or $ rem == 3 ) return 0 ;"}
{"text":"If n is of the form 4 k + 1 or 4 k + 2","code":"else if ( $ rem == 1 or $ rem == 2 ) return 1 ; }"}
{"text":"Driver code","code":"$ n = 6 ; echo fnMod ( $ n ) ; ? >"}
{"text":"function to find minimum moves required to make the array in increasing order","code":"< ? php function MinimumMoves ( & $ a , $ n , $ x ) {"}
{"text":"to store answer","code":"$ ans = 0 ;"}
{"text":"iterate over an array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"non - increasing order","code":"if ( $ a [ $ i ] <= $ a [ $ i - 1 ] ) { $ p = ( $ a [ $ i - 1 ] - $ a [ $ i ] ) \/ $ x + 1 ;"}
{"text":"add moves to answer","code":"$ ans += $ p ;"}
{"text":"increase the element","code":"$ a [ $ i ] += $ p * $ x ; } }"}
{"text":"return required answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 3 , 3 , 2 ) ; $ x = 2 ; $ n = sizeof ( $ arr ) ; echo ( ( int ) MinimumMoves ( $ arr , $ n , $ x ) ) ; ? >"}
{"text":"function to return sum of digits of a number","code":"< ? php function SumOfDigits ( $ str , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += ( int ) ( $ str [ $ i ] - '0' ) ; return $ sum ; }"}
{"text":"function to Check if a large number is divisible by 2 , 3 and 5 or not","code":"function Divisible ( $ str , $ n ) { if ( SumOfDigits ( $ str , $ n ) % 3 == 0 and $ str [ $ n - 1 ] == '0' ) return true ; return false ; }"}
{"text":"Driver code","code":"$ str = \"263730746028908374890\" ; $ n = strlen ( $ str ) ; if ( Divisible ( $ str , $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to check if k is a prime number or not","code":"< ? php function isPrime ( $ k ) {"}
{"text":"Corner case","code":"if ( $ k <= 1 ) return false ;"}
{"text":"Check from 2 to n - 1","code":"for ( $ i = 2 ; $ i < $ k ; $ i ++ ) if ( $ k % $ i == 0 ) return false ; return true ; }"}
{"text":"Function to check if a number is not divisible by any number between 2 and K - 1","code":"function check ( $ num , $ k ) { $ flag = 1 ;"}
{"text":"to check if the num is divisible by any numbers between 2 and k - 1","code":"for ( $ i = 2 ; $ i < $ k ; $ i ++ ) { if ( $ num % $ i == 0 ) $ flag = 0 ; } if ( $ flag == 1 ) {"}
{"text":"if not divisible by any number between 2 and k - 1 but divisible by k","code":"if ( $ num % $ k == 0 ) return 1 ; else return 0 ; } else return 0 ; }"}
{"text":"Function to find count of numbers in range [ a , b ] with smallest factor as K","code":"function findCount ( $ a , $ b , $ k ) { $ count = 0 ;"}
{"text":"a number can be divisible only by k and not by any number less than k only if k is a prime","code":"if ( ! isPrime ( $ k ) ) return 0 ; else { for ( $ i = $ a ; $ i <= $ b ; $ i ++ ) {"}
{"text":"to check if a number has smallest factor as K","code":"$ ans = check ( $ i , $ k ) ; if ( $ ans == 1 ) $ count ++ ; else continue ; } } return $ count ; }"}
{"text":"Driver code","code":"$ a = 2020 ; $ b = 6300 ; $ k = 29 ; echo ( findCount ( $ a , $ b , $ k ) ) ; ? >"}
{"text":"function to Find the number of solutions for x < y , where a <= x <= b and c <= y <= d and x , y integers .","code":"< ? php function NumberOfSolutions ( $ a , $ b , $ c , $ d ) {"}
{"text":"to store answer","code":"$ ans = 0 ;"}
{"text":"iterate explicitly over all possible values of x","code":"for ( $ i = $ a ; $ i <= $ b ; $ i ++ ) if ( $ d >= max ( $ c , $ i + 1 ) ) $ ans += $ d - max ( $ c , $ i + 1 ) + 1 ;"}
{"text":"return answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 3 ; $ c = 3 ; $ d = 4 ;"}
{"text":"function call","code":"echo NumberOfSolutions ( $ a , $ b , $ c , $ d ) ; ? >"}
{"text":"Function to find the value of F ( n )","code":"< ? php function findF_N ( $ n ) { $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ ans += ( $ i + 1 ) * ( $ n - $ i - 1 ) ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo findF_N ( $ n ) ;"}
{"text":"Function to return N digits number which is divisible by D","code":"< ? php function findNumber ( $ n , $ d ) {"}
{"text":"to store answer","code":"$ ans = \" \" ; if ( $ d != 10 ) { $ ans . = strval ( $ d ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ ans . = '0' ; } else { if ( n == 1 ) $ ans . = \" Impossible \" ; else $ ans . = '1' ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ ans . = '0' ; } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 12 ; $ d = 3 ; print ( findNumber ( $ n , $ d ) ) ;"}
{"text":"PHP implementation of above approach","code":"< ? php $ MAX = 1000000 ;"}
{"text":"the sieve of prime number and count of minimum prime factor","code":"$ sieve_Prime = array_fill ( 0 , $ MAX + 4 , NULL ) ; $ sieve_count = array_fill ( 0 , $ MAX + 4 , NULL ) ;"}
{"text":"form the prime sieve","code":"function form_sieve ( ) { global $ sieve_Prime , $ sieve_count , $ MAX ;"}
{"text":"1 is not a prime number","code":"$ sieve_Prime [ 1 ] = 1 ;"}
{"text":"form the sieve","code":"for ( $ i = 2 ; $ i <= $ MAX ; $ i ++ ) {"}
{"text":"if i is prime","code":"if ( $ sieve_Prime [ $ i ] == 0 ) { for ( $ j = $ i * 2 ; $ j <= $ MAX ; $ j += $ i ) {"}
{"text":"if i is the least prime factor","code":"if ( $ sieve_Prime [ $ j ] == 0 ) {"}
{"text":"mark the number j as non prime","code":"$ sieve_Prime [ $ j ] = 1 ;"}
{"text":"count the numbers whose least prime factor is i","code":"$ sieve_count [ $ i ] ++ ; } } } } }"}
{"text":"form the sieve","code":"form_sieve ( ) ; $ n = 2 ;"}
{"text":"display","code":"echo \" Count = \" \u2581 . \u2581 ( $ sieve _ count [ $ n ] \u2581 + \u2581 1 ) \u2581 . \u2581 \" \" $ n = 3 ;"}
{"text":"display","code":"echo \" Count = \" \u2581 . \u2581 ( $ sieve _ count [ $ n ] \u2581 + \u2581 1 ) \u2581 . \u2581 \" \" ? >"}
{"text":"function to return distinct prime factors","code":"< ? php function PrimeFactors ( $ n ) {"}
{"text":"to store distinct prime factors","code":"$ v = array ( ) ; $ x = $ n ;"}
{"text":"run a loop upto sqrt ( n )","code":"for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ x % $ i == 0 ) {"}
{"text":"place this prime factor in vector","code":"array_push ( $ v , $ i ) ; while ( $ x % $ i == 0 ) $ x \/= $ i ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 1","code":"if ( $ x > 1 ) array_push ( $ v , $ x ) ; return $ v ; }"}
{"text":"function that returns good number","code":"function GoodNumber ( $ n ) {"}
{"text":"distinct prime factors","code":"$ v = PrimeFactors ( $ n ) ;"}
{"text":"to store answer","code":"$ ans = 1 ;"}
{"text":"product of all distinct prime factors is required answer","code":"for ( $ i = 0 ; $ i < count ( $ v ) ; $ i ++ ) $ ans *= $ v [ $ i ] ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 12 ;"}
{"text":"function call","code":"echo GoodNumber ( $ n ) ; ? >"}
{"text":"Function to check whether the number is a special prime or not","code":"< ? php function checkSpecialPrime ( & $ sieve , $ num ) {"}
{"text":"While number is not equal to zero","code":"while ( $ num ) {"}
{"text":"If the number is not prime return false .","code":"if ( ! $ sieve [ $ num ] ) { return false ; }"}
{"text":"Else remove the last digit by dividing the number by 10.","code":"$ num = ( int ) ( $ num \/ 10 ) ; }"}
{"text":"If the number has become zero then the number is special prime , hence return true","code":"return true ; }"}
{"text":"Function to find the Largest Special Prime which is less than or equal to a given number","code":"function findSpecialPrime ( $ N ) {"}
{"text":"Initially all numbers are considered Primes .","code":"$ sieve = array_fill ( 0 , $ N + 10 , true ) ; $ sieve [ 0 ] = $ sieve [ 1 ] = false ; for ( $ i = 2 ; $ i <= $ N ; $ i ++ ) { if ( $ sieve [ $ i ] ) { for ( $ j = $ i * $ i ; $ j <= $ N ; $ j += $ i ) { $ sieve [ $ j ] = false ; } } }"}
{"text":"There is always an answer possible","code":"while ( true ) {"}
{"text":"Checking if the number is a special prime or not","code":"if ( checkSpecialPrime ( $ sieve , $ N ) ) {"}
{"text":"If yes print the number and break the loop .","code":"echo $ N . \" STRNEWLINE \" ; break ; }"}
{"text":"Else decrement the number .","code":"else $ N -- ; } }"}
{"text":"Driver code","code":"findSpecialPrime ( 379 ) ; findSpecialPrime ( 100 ) ; ? >"}
{"text":"Function to check if a number is prime or not","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 or $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) { if ( $ n % $ i == 0 or $ n % ( $ i + 2 ) == 0 ) { return false ; } } return true ; }"}
{"text":"Driver Code","code":"$ n = 13 ;"}
{"text":"Check if number is prime and of the form 4 * n + 1","code":"if ( isPrime ( $ n ) && ( $ n % 4 == 1 ) ) { echo \" YES \" ; } else { echo \" NO \" ; } ? >"}
{"text":"Function to return the height","code":"< ? php function heightCalculate ( $ H , $ n , $ m ) {"}
{"text":"type cast the n , m into float","code":"$ N = $ n * 1.0 ; $ M = $ m * 1.0 ;"}
{"text":"calculate the height for cut","code":"$ h = $ H * sqrt ( $ N \/ ( $ N + $ M ) ) ; return $ h ; }"}
{"text":"Driver code","code":"$ H = 10 ; $ n = 3 ; $ m = 4 ; echo heightCalculate ( $ H , $ n , $ m ) ; ? >"}
{"text":"Check a number is prime or not","code":"< ? php function isprime ( $ x ) {"}
{"text":"run a loop upto square of given number","code":"for ( $ i = 2 ; $ i * $ i <= $ x ; $ i ++ ) if ( $ x % i == 0 ) return false ; return true ; }"}
{"text":"Check if n ^ 2 - m ^ 2 is prime","code":"function isNSqMinusnMSqPrime ( $ m , $ n ) { if ( $ n - $ m == 1 and isprime ( $ m + $ n ) ) return true ; else return false ; }"}
{"text":"Driver code","code":"$ m = 13 ; $ n = 16 ; if ( isNSqMinusnMSqPrime ( $ m , $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to calculate all the solutions","code":"< ? php function findsolution ( $ n , $ x , $ y ) {"}
{"text":"there is no solutions","code":"if ( ( $ y - $ n + 1 ) * ( $ y - $ n + 1 ) + $ n - 1 < $ x $ y < $ n ) { echo \" No \u2581 solution \" ; return ; }"}
{"text":"print first element as y - n + 1","code":"echo $ y - $ n + 1 ;"}
{"text":"print rest n - 1 elements as 1","code":"while ( $ n -- > 1 ) echo \" STRNEWLINE \" . 1 ; }"}
{"text":"initialize the number of elements and the value of x an y","code":"$ n = 5 ; $ x = 15 ; $ y = 15 ; findsolution ( $ n , $ x , $ y ) ;"}
{"text":"Function to find the position","code":"< ? php function findPosition ( $ n , $ f , $ b ) { return $ n - max ( $ f + 1 , $ n - $ b ) + 1 ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ f = 2 ; $ b = 3 ; echo findPosition ( $ n , $ f , $ b ) ; ? >"}
{"text":"Function to find the Nth odd number","code":"< ? php function nthOdd ( $ n ) { return ( 2 * $ n - 1 ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo nthOdd ( $ n ) ; ? >"}
{"text":"Function to find the nth even number","code":"< ? php function nthEven ( $ n ) { return ( 2 * $ n ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo nthEven ( $ n ) ; ? >"}
{"text":"Function to find N - th Harmonic Number","code":"< ? php function nthHarmonic ( $ N ) {"}
{"text":"H1 = 1","code":"$ harmonic = 1.00 ;"}
{"text":"loop to apply the forumula Hn = H1 + H2 + H3 ... + Hn - 1 + Hn - 1 + 1 \/ n","code":"for ( $ i = 2 ; $ i <= $ N ; $ i ++ ) { $ harmonic += ( float ) 1 \/ $ i ; } return $ harmonic ; }"}
{"text":"Driver Code","code":"$ N = 8 ; echo nthHarmonic ( $ N ) ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 2 * pow ( $ n , 2 ) + $ n - 3 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) + \" STRNEWLINE \" ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 5 * pow ( $ n , 2 ) - 5 * $ n ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 3 * pow ( $ n , 2 ) + $ n - 2 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 2 * pow ( $ n , 2 ) + 4 * $ n - 2 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) . \" STRNEWLINE \" ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 3 * pow ( $ n , 2 ) + 2 * $ n - 5 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) . \" STRNEWLINE \" ;"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 2 * pow ( $ n , 2 ) + 3 * $ n - 5 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) . \" STRNEWLINE \" ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 4 * pow ( $ n , 2 ) - 3 * $ n + 2 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) . \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to print all sides and angles of right angle triangle given one side","code":"< ? php $ PI = 3.1415926535 ;"}
{"text":"Function to find angle A Angle in front of side a","code":"function findAnglesA ( $ a , $ b , $ c ) { global $ PI ;"}
{"text":"applied cosine rule","code":"$ A = acos ( ( $ b * $ b + $ c * $ c - $ a * $ a ) \/ ( 2 * $ b * $ c ) ) ;"}
{"text":"convert into degrees","code":"return $ A * 180 \/ $ PI ; }"}
{"text":"Function to find angle B Angle in front of side b","code":"function findAnglesB ( $ a , $ b , $ c ) { global $ PI ;"}
{"text":"applied cosine rule","code":"$ B = acos ( ( $ a * $ a + $ c * $ c - $ b * $ b ) \/ ( 2 * $ a * $ c ) ) ;"}
{"text":"convert into degrees and return","code":"return $ B * 180 \/ $ PI ; }"}
{"text":"Function to print all angles of the right angled triangle","code":"function printAngles ( $ a , $ b , $ c ) { $ x = ( double ) $ a ; $ y = ( double ) $ b ; $ z = ( double ) $ c ;"}
{"text":"for calculate angle A","code":"$ A = findAnglesA ( $ x , $ y , $ z ) ;"}
{"text":"for calculate angle B","code":"$ B = findAnglesB ( $ x , $ y , $ z ) ; echo \" Angles \u2581 are \u2581 A \u2581 = \u2581 \" . $ A . \" , \u2581 B \u2581 = \u2581 \" . $ B . \" , \u2581 C \u2581 = \u2581 90 STRNEWLINE \" ; }"}
{"text":"Function to find other two sides of the right angled triangle","code":"function printOtherSides ( $ n ) {"}
{"text":"if n is odd","code":"if ( $ n & 1 ) {"}
{"text":"case of n = 1 handled separately","code":"if ( $ n == 1 ) echo \" - 1 STRNEWLINE \" ; else { $ b = ( $ n * $ n - 1 ) \/ 2 ; $ c = ( $ n * $ n + 1 ) \/ 2 ; echo \" Side \u2581 b \u2581 = \u2581 \" . $ b . \" , \u2581 Side \u2581 c \u2581 = \u2581 \" . $ c . \" STRNEWLINE \" ; } } else {"}
{"text":"case of n = 2 handled separately","code":"if ( $ n == 2 ) echo \" - 1 STRNEWLINE \" ; else { $ b = $ n * $ n \/ 4 - 1 ; $ c = $ n * $ n \/ 4 + 1 ; echo \" Side \u2581 b \u2581 = \u2581 \" . $ b . \" , \u2581 Side \u2581 c \u2581 = \u2581 \" . $ c . \" STRNEWLINE \" ; } }"}
{"text":"Print angles of the triangle","code":"printAngles ( $ n , $ b , $ c ) ; }"}
{"text":"Driver Code","code":"$ a = 12 ; printOtherSides ( $ a ) ; ? >"}
{"text":"Function to calculate the sum","code":"< ? php function calculateSum ( $ n ) { return $ n * ( $ n + 1 ) \/ 2 + $ n * ( $ n + 1 ) * ( 2 * $ n + 1 ) \/ 6 ; }"}
{"text":"number of terms to be included in the sum","code":"$ n = 3 ;"}
{"text":"find the Sn","code":"echo \" Sum = \" ? >"}
{"text":"Calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 2 * pow ( $ n , 2 ) - $ n - 1 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ n ) { return 4 * pow ( $ n , 2 ) - 7 * $ n + 3 ; }"}
{"text":"Driver code","code":"$ N = 4 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"PHP program to find whether a number is power - isolated or not","code":"< ? php function checkIfPowerIsolated ( $ num ) { $ input = $ num ; $ count = 0 ; $ factor = array ( ) ;"}
{"text":"for 2 as prime factor","code":"if ( $ num % 2 == 0 ) { while ( $ num % 2 == 0 ) { ++ $ count ; $ num \/= 2 ; } $ factor [ 2 ] = $ count ; }"}
{"text":"for odd prime factor","code":"for ( $ i = 3 ; $ i * $ i <= $ num ; $ i += 2 ) { $ count = 0 ; while ( $ num % $ i == 0 ) { ++ $ count ; $ num \/= $ i ; } if ( $ count ) $ factor [ $ i ] = $ count ; } if ( $ num > 1 ) $ factor [ $ num ] = 1 ;"}
{"text":"calculate product of powers and prime factors","code":"$ product = 1 ; foreach ( $ factor as $ primefactor = > $ power ) { $ product = $ product * $ primefactor * $ power ; }"}
{"text":"check result for power - isolation","code":"if ( $ product == $ input ) print_r ( \" Power - isolated \u2581 Integer STRNEWLINE \" ) ; else print_r ( \" Not \u2581 a \u2581 Power - isolated \u2581 Integer STRNEWLINE \" ) ; }"}
{"text":"driver code","code":"checkIfPowerIsolated ( 12 ) ; checkIfPowerIsolated ( 18 ) ; checkIfPowerIsolated ( 35 ) ; ? >"}
{"text":"Function to calculate sum","code":"< ? php function getNthTerm ( $ N ) {"}
{"text":"Return Nth term","code":"return ( pow ( $ N , 2 ) + $ N + 1 ) ; }"}
{"text":"declaration of number of terms","code":"$ N = 11 ;"}
{"text":"Get the Nth term","code":"echo getNthTerm ( $ N ) ; ? >"}
{"text":"Function to find the sum","code":"< ? php function findSum ( $ n ) {"}
{"text":"sum2 is sum of numbers divisible by 2","code":"$ sum2 = ( ( int ) ( $ n \/ 2 ) * ( 4 + ( ( int ) ( $ n \/ 2 ) - 1 ) * 2 ) ) \/ 2 ;"}
{"text":"sum5 is sum of number divisible by 5","code":"$ sum5 = ( ( int ) ( $ n \/ 5 ) * ( 10 + ( $ n \/ 5 - 1 ) * 5 ) ) \/ 2 ;"}
{"text":"sum10 of numbers divisible by 2 and 5","code":"$ sum10 = ( ( int ) ( $ n \/ 10 ) * ( 20 + ( $ n \/ 10 - 1 ) * 10 ) ) \/ 2 ; return $ sum2 + $ sum5 - $ sum10 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo findSum ( $ n ) ; ? >"}
{"text":"function to calculate ratio of mth and nth term","code":"< ? php function CalculateRatio ( $ m , $ n ) {"}
{"text":"ratio will be tm \/ tn = ( 2 * m - 1 ) \/ ( 2 * n - 1 )","code":"return ( 2 * $ m - 1 ) \/ ( 2 * $ n - 1 ) ; }"}
{"text":"Driver code","code":"$ m = 6 ; $ n = 2 ; echo CalculateRatio ( $ m , $ n ) ; ? >"}
{"text":"Function to calculate the sum","code":"< ? php function calculateSum ( $ n ) {"}
{"text":"Return total sum","code":"return pow ( $ n * ( $ n + 1 ) \/ 2 , 2 ) ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo calculateSum ( $ n ) ; ? >"}
{"text":"This function finds single digit sum of n .","code":"< ? php function digSum ( $ n ) { if ( $ n == 0 ) return 0 ; return ( $ n % 9 == 0 ) ? 9 : ( $ n % 9 ) ; }"}
{"text":"Returns single digit sum of a ^ n . We use modular exponentiation technique .","code":"function powerDigitSum ( $ a , $ n ) { $ res = 1 ; while ( $ n ) { if ( $ n % 2 == 1 ) { $ res = $ res * digSum ( $ a ) ; $ res = digSum ( $ res ) ; } $ a = digSum ( digSum ( $ a ) * digSum ( $ a ) ) ; $ n \/= 2 ; } return $ res ; }"}
{"text":"Driver code","code":"$ a = 9 ; $ n = 4 ; echo powerDigitSum ( $ a , $ n ) ; ? >"}
{"text":"Function to find the total number of edges in a complete graph with N vertices","code":"< ? php function totEdge ( $ n ) { $ result = 0 ; $ result = ( $ n * ( $ n - 1 ) ) \/ 2 ; return $ result ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo totEdge ( $ n ) ; ? >"}
{"text":"function to calculate coin","code":"< ? php function coin ( $ totalRupees , $ X , $ Y , $ Z ) { $ one = 0 ; $ fifty = 0 ; $ twentyfive = 0 ; $ result = 0 ; $ total = 0 ;"}
{"text":"Converting each of them in rupees . As we are given totalRupees = 1800","code":"$ one = $ X * 1 ; $ fifty = ( ( $ Y * 1 ) \/ 2.0 ) ; $ twentyfive = ( ( $ Z * 1 ) \/ 4.0 ) ; $ total = $ one + $ fifty + $ twentyfive ; $ result = ( ( $ totalRupees ) \/ $ total ) ; return $ result ; }"}
{"text":"Driver Code","code":"$ totalRupees = 1800 ; $ X = 1 ; $ Y = 2 ; $ Z = 4 ; $ Rupees = coin ( $ totalRupees , $ X , $ Y , $ Z ) ; echo \"1 \u2581 rupess \u2581 coins \u2581 = \u2581 \" , $ Rupees * 1 , \" STRNEWLINE \" ; echo \"50 \u2581 paisa \u2581 coins \u2581 = \u2581 \" , $ Rupees * 2 , \" STRNEWLINE \" ; echo \"25 \u2581 paisa \u2581 coins \u2581 = \u2581 \" , $ Rupees * 4 , \" STRNEWLINE \" ; ? >"}
{"text":"function which return the sum of series","code":"< ? php function sumOfSeries ( $ x , $ k ) { return ( ( $ x ) \/ 81 ) * ( 9 * $ k - 1 + pow ( 10 , ( -1 ) * $ k ) ) ; }"}
{"text":"Driver code","code":"$ x = 9 ; $ k = 20 ; echo sumOfSeries ( $ x , $ k ) ; ? >"}
{"text":"For calculation of a ^ b","code":"< ? php function modExp ( $ a , $ b ) { $ result = 1 ; while ( $ b > 0 ) { if ( $ b & 1 ) $ result = $ result * $ a ; $ a = $ a * $ a ; $ b \/= 2 ; } return $ result ; }"}
{"text":"Function to check","code":"function check ( $ num ) {"}
{"text":"every odd and number less than 3.","code":"if ( $ num & 1 $ num < 3 ) return -1 ;"}
{"text":"every number divisible by 4.","code":"else if ( $ num % 4 == 0 ) return modExp ( $ num \/ 4 , 4 ) ;"}
{"text":"every number divisible by 6.","code":"else if ( $ num % 6 == 0 ) return modExp ( $ num \/ 3 , 2 ) * modExp ( $ num \/ 6 , 2 ) ;"}
{"text":"every number divisible by 10.","code":"else if ( $ num % 10 == 0 ) return modExp ( $ num \/ 5 , 2 ) * ( $ num \/ 10 ) * ( $ num \/ 2 ) ;"}
{"text":"for every even number which is not divisible by above values .","code":"else return -1 ; }"}
{"text":"Driver code","code":"$ num = 10 ; echo check ( $ num ) ; ? >"}
{"text":"Function to check if the number is divisible by 17 or not","code":"< ? php function isDivisible ( $ n ) { while ( $ n \/ 100 != 0 ) {"}
{"text":"Extracting the last digit","code":"$ d = ( int ) $ n % 10 ;"}
{"text":"Truncating the number","code":"$ n \/= 10 ;"}
{"text":"Subtracting the five times the last digit from the remaining number","code":"$ n -= $ d * 5 ; }"}
{"text":"Return n is divisible by 17","code":"return ( $ n % 17 == 0 ) ; }"}
{"text":"Driver code","code":"$ n = 19877658 ; if ( isDivisible ( $ n ) ) print ( \" Yes \" ) ; else print ( \" No \" ) ; ? >"}
{"text":"PHP implementation to find minimum number of elements to remove to get maximum XOR value","code":"< ? php function nextPowerOf2 ( $ n ) { $ count = 0 ;"}
{"text":"First n in the below condition is for the case where n is 0","code":"if ( $ n && ! ( $ n & ( $ n - 1 ) ) ) return $ n ; while ( $ n != 0 ) { $ n >>= 1 ; $ count += 1 ; } return 1 << $ count ; }"}
{"text":"Function to find minimum number of elements to be removed .","code":"function removeElement ( $ n ) { if ( $ n == 1 $ n == 2 ) return 0 ; $ a = nextPowerOf2 ( $ n ) ; if ( $ n == $ a $ n == $ a - 1 ) return 1 ; else if ( $ n == $ a - 2 ) return 0 ; else if ( $ n % 2 == 0 ) return 1 ; else return 2 ; }"}
{"text":"Driver code","code":"$ n = 5 ;"}
{"text":"print minimum number of elements to be removed","code":"echo removeElement ( $ n ) ; ? >"}
{"text":"function to calculate the length of bridge","code":"< ? php function bridge_length ( $ trainLength , $ Speed , $ Time ) { return ( ( $ Time * $ Speed ) - $ trainLength ) ; }"}
{"text":"Assuming the input variables","code":"$ trainLength = 120 ; $ Speed = 30 ; $ Time = 18 ; echo \" Length \u2581 of \u2581 bridge \u2581 = \u2581 \" . bridge_length ( $ trainLength , $ Speed , $ Time ) . \" \u2581 meters \" ; ? >"}
{"text":"function to find moudulo inverse under 10 ^ 9 + 7","code":"< ? php function modInv ( $ x ) { $ MOD = 1000000007 ; $ n = $ MOD - 2 ; $ result = 1 ; while ( $ n ) { if ( $ n & 1 ) $ result = $ result * $ x % $ MOD ; $ x = $ x * $ x % $ MOD ; $ n = $ n \/ 2 ; } return $ result ; }"}
{"text":"Function to find the sum of the given sequence","code":"function getSum ( $ n , $ k ) { $ MOD = 1000000007 ; $ ans = 1 ; for ( $ i = $ n + 1 ; $ i > $ n - $ k ; $ i -- ) $ ans = $ ans * $ i % $ MOD ; $ ans = $ ans * modInv ( $ k + 1 ) % $ MOD ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ k = 2 ; echo getSum ( $ n , $ k ) ; ? >"}
{"text":"Function to print a , b and c","code":"< ? php function printCombination ( $ n ) { echo \"1 \u2581 \" ;"}
{"text":"check if n - 2 is divisible by 3 or not","code":"if ( ( $ n - 2 ) % 3 == 0 ) echo \"2 \u2581 \" . ( $ n - 3 ) ; else echo \"1 \u2581 \" . ( $ n - 2 ) ; }"}
{"text":"Driver code","code":"$ n = 233 ; printCombination ( $ n ) ; ? >"}
{"text":"Function to print all pairs","code":"< ? php function checkPairs ( $ l , $ r ) {"}
{"text":"check if even","code":"if ( ( $ l - $ r ) % 2 == 0 ) return false ;"}
{"text":"We can print all adjacent pairs for ( int i = l ; i < r ; i += 2 ) { cout << \" { \" << i << \" , \u2581 \" << i + 1 << \" } , \u2581 \" ; }","code":"return true ; }"}
{"text":"Driver Code","code":"$ l = 1 ; $ r = 8 ; if ( checkPairs ( $ l , $ r ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Function to check if the number is palindrome","code":"< ? php function isPalindrome ( $ n ) {"}
{"text":"if divisible by 11 then true","code":"if ( $ n % 11 == 0 ) { return true ; }"}
{"text":"if not divisible by 11","code":"return false ; }"}
{"text":"Driver code","code":"echo isPalindrome ( 123321 ) ? \" Palindrome \" : \" Not \u2581 Palindrome \" ; ? >"}
{"text":"The target value for which we have to find the solution","code":"< ? php $ target = 93 ; $ arr = array ( 1 , 31 , 3 , 1 , 93 , 3 , 31 , 1 , 93 ) ; $ length = sizeof ( $ arr ) ;"}
{"text":"This variable contains the total count of triplets found","code":"$ totalCount = 0 ;"}
{"text":"Loop from the first to the third last integer in the list","code":"for ( $ i = 0 ; $ i < $ length - 2 ; $ i ++ ) {"}
{"text":"Check if arr [ i ] is a factor of target or not . If not , skip to the next element","code":"if ( $ target % $ arr [ $ i ] == 0 ) { for ( $ j = $ i + 1 ; $ j < $ length - 1 ; $ j ++ ) {"}
{"text":"Check if the pair ( arr [ i ] , arr [ j ] ) can be a part of triplet whose product is equal to the target","code":"if ( $ target % ( $ arr [ $ i ] * $ arr [ $ j ] ) == 0 ) {"}
{"text":"Find the remaining element of the triplet","code":"$ toFind = $ target \/ ( $ arr [ $ i ] * $ arr [ $ j ] ) ; for ( $ k = $ j + 1 ; $ k < $ length ; $ k ++ ) {"}
{"text":"If element is found . increment the total count of the triplets","code":"if ( $ arr [ $ k ] == $ toFind ) { $ totalCount ++ ; } } } } } } echo ( \" Total \u2581 number \u2581 of \u2581 triplets \u2581 found \u2581 : \u2581 \" ) ; echo ( $ totalCount ) ; ? >"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"< ? php function binomialCoeff ( $ n , $ k ) { $ res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( $ k > $ n - $ k ) $ k = $ n - $ k ;"}
{"text":"Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) { $ res = $ res * ( $ n - $ i ) ; $ res = $ res \/ ( $ i + 1 ) ; } return $ res ; }"}
{"text":"A Binomial coefficient based function to find nth catalan number in O ( n ) time","code":"function catalan ( $ n ) {"}
{"text":"Calculate value of 2 nCn","code":"$ c = binomialCoeff ( 2 * $ n , $ n ) ;"}
{"text":"return 2 nCn \/ ( n + 1 )","code":"return $ c \/ ( $ n + 1 ) ; }"}
{"text":"Driver code","code":"$ n = 3 ; print ( catalan ( $ n ) ) ; ? >"}
{"text":"function to check if number is fascinating or not","code":"< ? php function isFascinating ( $ num ) {"}
{"text":"frequency count array using 1 indexing","code":"$ freq = array_fill ( 0 , 10 , NULL ) ;"}
{"text":"obtaining the resultant number using string concatenation","code":"$ val = \" \" . $ num . ( $ num * 2 ) . ( $ num * 3 ) ;"}
{"text":"Traversing the string character by character","code":"for ( $ i = 0 ; $ i < strlen ( $ val ) ; $ i ++ ) {"}
{"text":"gives integer value of a character digit","code":"$ digit = $ val [ $ i ] - '0' ;"}
{"text":"To check if any digit has appeared multiple times","code":"if ( $ freq [ $ digit ] > 0 && $ digit != 0 ) return false ; else $ freq [ $ digit ] ++ ; }"}
{"text":"Traversing through freq array to check if any digit was missing","code":"for ( $ i = 1 ; $ i < 10 ; $ i ++ ) { if ( $ freq [ $ i ] == 0 ) return false ; } return true ; }"}
{"text":"Input number","code":"$ num = 192 ;"}
{"text":"Not a valid number","code":"if ( $ num < 100 ) echo \" No \" ; else {"}
{"text":"Calling the function to check if input number is fascinating or not","code":"$ ans = isFascinating ( $ num ) ; if ( $ ans ) echo \" Yes \" ; else echo \" No \" ; } ? >"}
{"text":"function used to generate binomial coefficient time complexity O ( m )","code":"< ? php function binomial_coefficient ( $ n , $ m ) { $ res = 1 ; if ( $ m > $ n - $ m ) $ m = $ n - $ m ; for ( $ i = 0 ; $ i < $ m ; ++ $ i ) { $ res *= ( $ n - $ i ) ; $ res \/= ( $ i + 1 ) ; } return $ res ; }"}
{"text":"Helper function for generating no of ways to distribute m . mangoes amongst n people","code":"function calculate_ways ( $ m , $ n ) {"}
{"text":"not enough mangoes to be distributed","code":"if ( $ m < $ n ) return 0 ;"}
{"text":"ways -> ( n + m - 1 ) C ( n - 1 )","code":"$ ways = binomial_coefficient ( $ n + $ m - 1 , $ n - 1 ) ; return $ ways ; }"}
{"text":"m represents number of mangoes n represents number of people","code":"$ m = 7 ; $ n = 5 ; $ result = calculate_ways ( $ m , $ n ) ; echo $ result ; ? >"}
{"text":"PHP program to find number of unordered coprime pairs of integers from 1 to N","code":"< ? php $ N = 100005 ;"}
{"text":"to store euler 's totient function","code":"$ phi = array_fill ( 0 , $ N , 0 ) ;"}
{"text":"to store required answer","code":"$ S = array_fill ( 0 , $ N , 0 ) ;"}
{"text":"Computes and prints totient of all numbers smaller than or equal to N .","code":"function computeTotient ( ) { global $ N , $ phi , $ S ;"}
{"text":"Initialise the phi [ ] with 1","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) $ phi [ $ i ] = $ i ;"}
{"text":"Compute other Phi values","code":"for ( $ p = 2 ; $ p < $ N ; $ p ++ ) {"}
{"text":"If phi [ p ] is not computed already , then number p is prime","code":"if ( $ phi [ $ p ] == $ p ) {"}
{"text":"Phi of a prime number p is always equal to p - 1.","code":"$ phi [ $ p ] = $ p - 1 ;"}
{"text":"Update phi values of all multiples of p","code":"for ( $ i = 2 * $ p ; $ i < $ N ; $ i += $ p ) {"}
{"text":"Add contribution of p to its multiple i by multiplying with ( 1 - 1 \/ p )","code":"$ phi [ $ i ] = ( int ) ( ( $ phi [ $ i ] \/ $ p ) * ( $ p - 1 ) ) ; } } } }"}
{"text":"function to compute number coprime pairs","code":"function CoPrimes ( ) { global $ N , $ phi , $ S ;"}
{"text":"function call to compute euler totient function","code":"computeTotient ( ) ;"}
{"text":"prefix sum of all euler totient function values","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) $ S [ $ i ] = $ S [ $ i - 1 ] + $ phi [ $ i ] ; }"}
{"text":"function call","code":"CoPrimes ( ) ; $ q = array ( 3 , 4 ) ; $ n = sizeof ( $ q ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo \" Number \u2581 of \u2581 unordered \u2581 coprime STRNEWLINE \" . \" pairs \u2581 of \u2581 integers \u2581 from \u2581 1 \u2581 to \u2581 \" . $ q [ $ i ] . \" \u2581 are \u2581 \" . $ S [ $ q [ $ i ] ] . \" STRNEWLINE \" ; ? >"}
{"text":"Function to return the decimal value of a binary number","code":"< ? php function binaryToDecimal ( $ n ) { $ num = $ n ; $ dec_value = 0 ;"}
{"text":"Initializing base value to 1 , i . e 2 ^ 0","code":"$ base = 1 ; $ len = strlen ( $ num ) ; for ( $ i = $ len - 1 ; $ i >= 0 ; $ i -- ) { if ( $ num [ $ i ] == '1' ) $ dec_value += $ base ; $ base = $ base * 2 ; } return $ dec_value ; }"}
{"text":"find the binary representation of the N - th number in sequence","code":"function numberSequence ( $ n ) {"}
{"text":"base case","code":"if ( $ n == 1 ) return 1 ;"}
{"text":"answer string","code":"$ s = \" \" ;"}
{"text":"add n - 1 1 's","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ s . = '1' ;"}
{"text":"add 0","code":"$ s . = '0' ;"}
{"text":"add n 1 's at end","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ s . = '1' ; $ num = binaryToDecimal ( $ s ) ; return $ num ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo numberSequence ( $ n ) ; ? >"}
{"text":"Function to find the N - th term","code":"< ? php function numberSequence ( $ n ) {"}
{"text":"calculates the N - th term","code":"$ num = pow ( 4 , $ n ) - pow ( 2 , $ n ) - 1 ; return $ num ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo numberSequence ( $ n ) ; ? >"}
{"text":"Function for checking number is prime or not","code":"< ? php function prime ( $ num ) { $ flag = 0 ; for ( $ i = 2 ; $ i <= $ num \/ 2 ; $ i ++ ) { if ( $ num % $ i == 0 ) { $ flag = 1 ; break ; } }"}
{"text":"if flag = 0 then number is prime and return 1 otherwise return 0","code":"if ( $ flag == 0 ) return 1 ; else return 0 ; }"}
{"text":"Function for printing alternate prime number","code":"function print_alternate_prime ( $ n ) {"}
{"text":"counter is initialize with 0","code":"$ counter = 0 ;"}
{"text":"looping through 2 to n - 1","code":"for ( $ num = 2 ; $ num < $ n ; $ num ++ ) {"}
{"text":"function calling along with if condition","code":"if ( prime ( $ num ) == 1 ) {"}
{"text":"if counter is multiple of 2 then only print prime number","code":"if ( $ counter % 2 == 0 ) echo $ num . \" \" ; $ counter += 1 ; } } }"}
{"text":"Driver code","code":"$ n = 15 ; echo \" Following \u2581 are \u2581 the \u2581 alternate \u2581 prime \u2581 \" . \" number \u2581 smaller \u2581 than \u2581 or \u2581 equal \u2581 to \u2581 \" . $ n . \" STRNEWLINE \" ;"}
{"text":"Function calling","code":"print_alternate_prime ( $ n ) ; ? >"}
{"text":"PHP program to print all primes smaller than or equal to n using Sieve of Eratosthenes","code":"< ? php function SieveOfEratosthenes ( $ n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array ( ) ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ prime [ $ i ] = true ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Print all prime numbers","code":"$ flag = true ; for ( $ p = 2 ; $ p <= $ n ; $ p ++ ) { if ( $ prime [ $ p ] ) { if ( $ flag ) { echo $ p . \" \" ; $ flag = false ; } else {"}
{"text":"for next prime to get printed","code":"$ flag = true ; } } } }"}
{"text":"Driver Code","code":"$ n = 15 ; echo \" Following \u2581 are \u2581 the \u2581 alternate \" . \" \u2581 prime \u2581 numbers \u2581 smaller \u2581 \" . \" than \u2581 or \u2581 equal \u2581 to \u2581 \" . $ n . \" STRNEWLINE \" ; SieveOfEratosthenes ( $ n ) ; ? >"}
{"text":"Function to find maximum","code":"< ? php function findGreater ( $ x , $ y ) {"}
{"text":"Case 1","code":"if ( $ x > $ y ) { return false ; }"}
{"text":"Case 2","code":"else { return true ; } }"}
{"text":"Driver Code","code":"$ x = 4 ; $ y = 9 ; if ( findGreater ( $ x , $ y ) == true ) echo ( \"1 STRNEWLINE \" ) ; else echo ( \"2 STRNEWLINE \" ) ; ? >"}
{"text":"PHP implementation of above approach","code":"< ? php function max_profit ( & $ a , & $ b , $ n , $ fee ) { $ diff_day = 1 ; $ sum = 0 ;"}
{"text":"b [ 0 ] will contain the maximum profit","code":"$ b [ 0 ] = 0 ;"}
{"text":"b [ 1 ] will contain the day on which we are getting the maximum profit","code":"$ b [ 1 ] = $ diff_day ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ l = 0 ; $ r = $ diff_day ; $ sum = 0 ; for ( $ j = $ n - 1 ; $ j >= $ i ; $ j -- ) {"}
{"text":"here finding the max profit","code":"$ profit = ( $ a [ $ r ] - $ a [ $ l ] ) - $ fee ;"}
{"text":"if we get less then or equal to zero it means we are not getting the profit","code":"if ( $ profit > 0 ) { $ sum = $ sum + $ profit ; } $ l ++ ; $ r ++ ; }"}
{"text":"check if sum is greater then maximum then store the new maximum","code":"if ( $ b [ 0 ] < $ sum ) { $ b [ 0 ] = $ sum ; $ b [ 1 ] = $ diff_day ; } $ diff_day ++ ; } }"}
{"text":"Driver code","code":"$ arr = array ( 6 , 1 , 7 , 2 , 8 , 4 ) ; $ n = sizeof ( $ arr ) ; $ b = array ( ) ; $ tranFee = 2 ; max_profit ( $ arr , $ b , $ n , $ tranFee ) ; echo ( $ b [ 0 ] ) ; echo ( \" , \u2581 \" ) ; echo ( $ b [ 1 ] ) ; ? >"}
{"text":"Find sum of binomial coefficients xCi ( where i varies from 1 to n ) . If the sum becomes more than K","code":"< ? php function binomialCoeff ( $ x , $ n , $ k ) { $ sum = 0 ; $ term = 1 ; for ( $ i = 1 ; $ i <= $ n && $ sum < $ k ; ++ $ i ) { $ term *= $ x - $ i + 1 ; $ term \/= $ i ; $ sum += $ term ; } return $ sum ; }"}
{"text":"Do binary search to find minimum number of trials in worst case .","code":"function minTrials ( $ n , $ k ) {"}
{"text":"Initialize low and high as 1 st and last floors","code":"$ low = 1 ; $ high = $ k ;"}
{"text":"Do binary search , for every mid , find sum of binomial coefficients and check if the sum is greater than k or not .","code":"while ( $ low < $ high ) { $ mid = ( $ low + $ high ) \/ 2 ; if ( binomialCoeff ( $ mid , $ n , $ k ) < $ k ) $ low = $ mid + 1 ; else $ high = $ mid ; } return ( int ) $ low ; }"}
{"text":"Driver Code","code":"echo minTrials ( 2 , 10 ) ; ? >"}
{"text":"PHP program to find next palindromic prime for a given number .","code":"< ? php function isPrime ( $ num ) { if ( $ num < 2 $ num % 2 == 0 ) return $ num == 2 ; for ( $ i = 3 ; $ i * $ i <= $ num ; $ i += 2 ) if ( $ num % $ i == 0 ) return false ; return true ; } function primePalindrome ( $ N ) {"}
{"text":"if ( 8 <= N <= 11 ) return 11","code":"if ( 8 <= $ N && $ N <= 11 ) return 11 ;"}
{"text":"generate odd length palindrome number which will cover given constraint .","code":"for ( $ x = 1 ; $ x < 100000 ; ++ $ x ) { $ s = strval ( $ x ) ; $ r = strrev ( $ s ) ; $ y = intval ( $ s . substr ( $ r , 1 ) ) ;"}
{"text":"if y >= N and it is a prime number then return it .","code":"if ( $ y >= $ N && isPrime ( $ y ) == true ) return $ y ; } return -1 ; }"}
{"text":"Driver code","code":"print ( primePalindrome ( 112 ) ) ; ? >"}
{"text":"This function returns the sum of the digits of a number","code":"< ? php function getsum ( $ a ) { $ r = 0 ; $ sum = 0 ; while ( $ a > 0 ) { $ r = $ a % 10 ; $ sum = $ sum + $ r ; $ a = ( int ) ( $ a \/ 10 ) ; } return $ sum ; }"}
{"text":"This function creates the array of valid numbers","code":"function value ( $ a , $ b , $ c ) { $ co = 0 ; $ p = 0 ; $ no ; $ r = 0 ; $ x = 0 ; $ q = 0 ; $ w = 0 ; $ v = array ( ) ; $ u = 0 ; for ( $ i = 1 ; $ i < 82 ; $ i ++ ) {"}
{"text":"this computes s ( x ) ^ a","code":"$ no = pow ( $ i , $ a ) ;"}
{"text":"this gives the result of equation","code":"$ no = $ b * $ no + $ c ; if ( $ no > 0 && $ no < 1000000000 ) { $ x = getsum ( $ no ) ;"}
{"text":"checking if the sum same as i","code":"if ( $ x == $ i ) {"}
{"text":"counter to keep track of numbers","code":"$ q ++ ;"}
{"text":"resultant array","code":"$ v [ $ u ++ ] = $ no ; $ w ++ ; } } }"}
{"text":"prints the number","code":"for ( $ i = 0 ; $ i < $ u ; $ i ++ ) { echo $ v [ $ i ] . \" \" ; } }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 2 ; $ c = -1 ;"}
{"text":"calculate which value of x are possible","code":"value ( $ a , $ b , $ c ) ; ? >"}
{"text":"Function to print Cunningham chain of the second kind","code":"< ? php function print_t ( $ p0 ) { $ p1 ; $ i = 0 ; $ x ; $ flag ; $ k ;"}
{"text":"Iterate till all elements are printed","code":"while ( 1 ) { $ flag = 1 ; $ x = pow ( 2 , $ i ) ; $ p1 = $ x * $ p0 - ( $ x - 1 ) ;"}
{"text":"check prime or not","code":"for ( $ k = 2 ; $ k < $ p1 ; $ k ++ ) { if ( $ p1 % $ k == 0 ) { $ flag = 0 ; break ; } } if ( $ flag == 0 ) break ; echo $ p1 . \" \" ; $ i ++ ; } }"}
{"text":"Driver Code","code":"$ p0 = 19 ; print_t ( $ p0 ) ;"}
{"text":"PHP program to count pairs with Odd AND","code":"< ? php function findOddPair ( & $ A , $ N ) {"}
{"text":"Count total odd numbers","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( ( $ A [ $ i ] % 2 == 1 ) ) $ count ++ ;"}
{"text":"return count of even pair","code":"return $ count * ( $ count - 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ a = array ( 5 , 1 , 3 , 2 ) ; $ n = sizeof ( $ a ) ;"}
{"text":"calling function findOddPair and print number of odd pair","code":"echo ( findOddPair ( $ a , $ n ) ) ; ? >"}
{"text":"Returns true if x is Surd number","code":"< ? php function isSurd ( $ n ) { for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) {"}
{"text":"Try all powers of i","code":"$ j = $ i ; while ( $ j < $ n ) $ j = $ j * $ i ; if ( $ j == $ n ) return false ; } return true ; }"}
{"text":"Driver code","code":"$ n = 15 ; if ( isSurd ( $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Find the first digit","code":"< ? php function LastTwoDigit ( $ num ) {"}
{"text":"Get the last digit from the number","code":"$ one = $ num % 10 ;"}
{"text":"Remove last digit from number","code":"$ num \/= 10 ;"}
{"text":"Get the last digit from the number ( last second of num )","code":"$ tens = $ num % 10 ;"}
{"text":"Take last digit to ten 's position i.e.  last second digit","code":"$ tens *= 10 ;"}
{"text":"Add the value of ones and tens to make it complete 2 digit number","code":"$ num = $ tens + $ one ;"}
{"text":"return the first digit","code":"return $ num ; }"}
{"text":"Driver Code","code":"$ n = 10 ; $ num = 1 ;"}
{"text":"pow function used","code":"$ num = pow ( 2 , $ n ) ; echo ( \" Last \u2581 \" . 2 ) ; echo ( \" \u2581 digits \u2581 of \u2581 \" . 2 ) ; echo ( \" ^ \" . $ n . \" \u2581 = \u2581 \" ) ; echo ( LastTwoDigit ( $ num ) ) ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"PHP function to calculate number of digits in x","code":"function numberOfDigits ( $ x ) { $ i = 0 ; while ( $ x ) { $ x \/= 10 ; $ i ++ ; } return $ i ; }"}
{"text":"PHP function to print last 2 digits of 2 ^ n","code":"function LastTwoDigit ( $ n ) { echo ( \" Last \u2581 \" . 2 ) ; echo ( \" \u2581 digits \u2581 of \u2581 \" . 2 ) ; echo ( \" ^ \" . $ n . \" \u2581 = \u2581 \" ) ;"}
{"text":"Generating 10 ^ 2","code":"$ temp = 1 ; for ( $ i = 1 ; $ i <= 2 ; $ i ++ ) $ temp *= 10 ;"}
{"text":"Calling modular exponentiation","code":"$ temp = power ( 2 , $ n , $ temp ) ;"}
{"text":"Printing leftmost zeros . Since ( 2 ^ n ) % 2 can have digits less then 2. In that case we need to print zeros","code":"for ( $ i = 0 ; $ i < 2 - numberOfDigits ( $ temp ) ; $ i ++ ) echo ( 0 ) ;"}
{"text":"If temp is not zero then print temp . If temp is zero then already printed","code":"if ( $ temp ) echo ( $ temp ) ; }"}
{"text":"Driver Code","code":"$ n = 72 ; LastTwoDigit ( $ n ) ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function modPower ( $ x , $ y , $ p ) {"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Finds GCD of a and b","code":"function gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Finds GCD of a ^ n and c","code":"function gcdPow ( $ a , $ n , $ c ) {"}
{"text":"check if c is a divisor of a","code":"if ( $ a % $ c == 0 ) return $ c ;"}
{"text":"First compute ( a ^ n ) % c","code":"$ modexpo = modPower ( $ a , $ n , $ c ) ;"}
{"text":"Now simply return GCD of modulo power and c .","code":"return gcd ( $ modexpo , $ c ) ; }"}
{"text":"Driver code","code":"$ a = 10248585 ; $ n = 1000000 ; $ c = 12564 ; echo gcdPow ( $ a , $ n , $ c ) ; ? >"}
{"text":"PHP code to find count of sub - arrays with odd sum","code":"< ? php function countOddSum ( & $ ar , $ n ) { $ result = 0 ;"}
{"text":"Find sum of all subarrays and increment result if sum is odd","code":"for ( $ i = 0 ; $ i <= $ n - 1 ; $ i ++ ) { $ val = 0 ; for ( $ j = $ i ; $ j <= $ n - 1 ; $ j ++ ) { $ val = $ val + $ ar [ $ j ] ; if ( $ val % 2 != 0 ) $ result ++ ; } } return ( $ result ) ; }"}
{"text":"Driver code","code":"$ ar = array ( 5 , 4 , 4 , 5 , 1 , 3 ) ; $ n = sizeof ( $ ar ) ; echo \" The \u2581 Number \u2581 of \u2581 Subarrays \u2581 with \u2581 odd \u2581 \" ; echo \" sum \u2581 is \u2581 \" . countOddSum ( $ ar , $ n ) ; ? >"}
{"text":"PHP proggram to find count of sub - arrays with odd sum","code":"< ? php function countOddSum ( $ ar , $ n ) {"}
{"text":"A temporary array of size 2. temp [ 0 ] is going to store count of even subarrays and temp [ 1 ] count of odd . temp [ 0 ] is initialized as 1 because there is a single odd element is also counted as a subarray","code":"$ temp = array ( 1 , 0 ) ;"}
{"text":"Initialize count . sum is sum of elements under modulo 2 and ending with arr [ i ] .","code":"$ result = 0 ; $ val = 0 ;"}
{"text":"i ' th \u2581 iteration \u2581 computes \u2581 sum \u2581 \u2581 of \u2581 arr [ 0 . . i ] \u2581 under \u2581 modulo \u2581 2 \u2581 \u2581 and \u2581 increments \u2581 even \/ odd \u2581 count \u2581 \u2581 according \u2581 to \u2581 sum ' s value","code":"for ( $ i = 0 ; $ i <= $ n - 1 ; $ i ++ ) {"}
{"text":"2 is added to handle negative numbers","code":"$ val = ( ( $ val + $ ar [ $ i ] ) % 2 + 2 ) % 2 ;"}
{"text":"Increment even \/ odd count","code":"$ temp [ $ val ] ++ ; }"}
{"text":"An odd can be formed by even - odd pair","code":"$ result = ( $ temp [ 0 ] * $ temp [ 1 ] ) ; return ( $ result ) ; }"}
{"text":"Driver code","code":"$ ar = array ( 5 , 4 , 4 , 5 , 1 , 3 ) ; $ n = sizeof ( $ ar ) ; echo \" The \u2581 Number \u2581 of \u2581 Subarrays \u2581 with \u2581 odd \" . \" \u2581 sum \u2581 is \u2581 \" . countOddSum ( $ ar , $ n ) ; ? >"}
{"text":"PHP program to print prime factors in pairs .","code":"< ? php function printPFsInPairs ( $ n ) { for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) if ( $ n % $ i == 0 ) echo $ i . \" * \" . \u2581 $ n \u2581 \/ \u2581 $ i \u2581 . \" \" }"}
{"text":"Driver code","code":"$ n = 24 ; printPFsInPairs ( $ n ) ; return 0 ; ? >"}
{"text":"Function to find the sum between L and R","code":"< ? php function rangesum ( $ n , $ l , $ r ) {"}
{"text":"array created","code":"$ arr = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"fill the first half of array","code":"$ c = 1 ; $ i = 0 ; while ( $ c <= $ n ) { $ arr [ $ i ++ ] = $ c ; $ c += 2 ; }"}
{"text":"fill the second half of array","code":"$ c = 2 ; while ( $ c <= $ n ) { $ arr [ $ i ++ ] = $ c ; $ c += 2 ; } $ sum = 0 ;"}
{"text":"find the sum between range","code":"for ( $ i = $ l - 1 ; $ i < $ r ; $ i ++ ) { $ sum += $ arr [ $ i ] ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 12 ; $ l = 1 ; $ r = 11 ; echo ( rangesum ( $ n , $ l , $ r ) ) ; ? >"}
{"text":"function to find the interior and exterior angle","code":"< ? php function findAngle ( $ n ) { $ interiorAngle ; $ exteriorAngle ;"}
{"text":"formula to find the interior angle","code":"$ interiorAngle = ( $ n - 2 ) * 180 \/ $ n ;"}
{"text":"formula to find the exterior angle","code":"$ exteriorAngle = 360 \/ $ n ;"}
{"text":"Displaying the output","code":"echo \" Interior \u2581 angle : \u2581 \" , $ interiorAngle , \" STRNEWLINE \" ; echo \" Exterior \u2581 angle : \u2581 \" , $ exteriorAngle ; }"}
{"text":"Driver code","code":"$ n = 10 ;"}
{"text":"Function calling","code":"findAngle ( $ n ) ; ? >"}
{"text":"function to print distance","code":"< ? php function distance ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 ) { $ d = sqrt ( pow ( $ x2 - $ x1 , 2 ) + pow ( $ y2 - $ y1 , 2 ) + pow ( $ z2 - $ z1 , 2 ) * 1.0 ) ; echo \" Distance \u2581 is \u2581 \" . $ d ; }"}
{"text":"Driver Code","code":"$ x1 = 2 ; $ y1 = -5 ; $ z1 = 7 ; $ x2 = 3 ; $ y2 = 4 ; $ z2 = 5 ;"}
{"text":"function call for distance","code":"distance ( $ x1 , $ y1 , $ z1 , $ x2 , $ y2 , $ z2 ) ; ? >"}
{"text":"Check if a number is divisible by 41 or not","code":"< ? php function DivisibleBy41 ( $ first , $ second , $ c , $ n ) {"}
{"text":"array to store all the digits","code":"$ digit [ $ n ] = range ( 1 , $ n ) ;"}
{"text":"base values","code":"$ digit [ 0 ] = $ first ; $ digit [ 1 ] = $ second ;"}
{"text":"calculate remaining digits","code":"for ( $ i = 2 ; $ i < $ n ; $ i ++ ) $ digit [ $ i ] = ( $ digit [ $ i - 1 ] * $ c + $ digit [ $ i - 2 ] ) % 10 ;"}
{"text":"calculate answer","code":"$ ans = $ digit [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ ans = ( $ ans * 10 + $ digit [ $ i ] ) % 41 ;"}
{"text":"check for divisibility","code":"if ( $ ans % 41 == 0 ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ first = 1 ; $ second = 2 ; $ c = 1 ; $ n = 3 ; if ( DivisibleBy41 ( $ first , $ second , $ c , $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to generate nth tetrahedral number","code":"< ? php function findTetrahedralNumber ( $ n ) { return ( ( $ n * ( $ n + 1 ) * ( $ n + 2 ) ) \/ 6 ) ; }"}
{"text":"Function to print pentatope number series upto nth term .","code":"function printSeries ( $ n ) {"}
{"text":"Initialize prev as 0. It store the sum of all previously generated pentatope numbers","code":"$ prev = 0 ; $ curr ;"}
{"text":"Loop to print pentatope series","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Find ith tetrahedral number","code":"$ curr = findTetrahedralNumber ( $ i ) ;"}
{"text":"Add ith tetrahedral number to sum of all previously generated tetrahedral number to get ith pentatope number","code":"$ curr = $ curr + $ prev ; echo ( $ curr . \" \" ) ;"}
{"text":"Update sum of all previously generated tetrahedral number","code":"$ prev = $ curr ; } }"}
{"text":"Driver code","code":"$ n = 10 ;"}
{"text":"Function call to print pentatope number series","code":"printSeries ( $ n ) ; ? >"}
{"text":"Function to print pentatope series up to nth term","code":"< ? php function printSeries ( $ n ) {"}
{"text":"Loop to print pentatope number series","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"calculate and print ith pentatope number","code":"$ num = ( $ i * ( $ i + 1 ) * ( $ i + 2 ) * ( $ i + 3 ) \/ 24 ) ; echo ( $ num . \" \" ) ; } }"}
{"text":"Driver code","code":"$ n = 10 ;"}
{"text":"Function call to print pentatope number series","code":"printSeries ( $ n ) ; ? >"}
{"text":"Finding the number of unique pairs","code":"< ? php function No_Of_Pairs ( $ N ) { $ i = 1 ;"}
{"text":"Using the derived formula","code":"while ( ( $ i * $ i * $ i ) + ( 2 * $ i * $ i ) + $ i <= $ N ) $ i ++ ; return ( $ i - 1 ) ; }"}
{"text":"Printing the unique pairs","code":"function print_pairs ( $ pairs ) { $ i = 1 ; $ mul ; for ( $ i = 1 ; $ i <= $ pairs ; $ i ++ ) { $ mul = $ i * ( $ i + 1 ) ; echo \" Pair \u2581 no . \" , $ i , \" \u2581 - - > \u2581 ( \" , ( $ mul * $ i ) , \" , \u2581 \" , $ mul * ( $ i + 1 ) , \" ) \u2581 STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ N = 500 ; $ pairs ; $ mul ; $ i = 1 ; $ pairs = No_Of_Pairs ( $ N ) ; echo \" No . \u2581 of \u2581 pairs \u2581 = \u2581 \" , $ pairs , \" \u2581 STRNEWLINE \" ; print_pairs ( $ pairs ) ; ? >"}
{"text":"function to generate nth triangular number","code":"< ? php function findTriangularNumber ( $ n ) { return ( $ n * ( $ n + 1 ) ) \/ 2 ; }"}
{"text":"function to print tetrahedral number series up to n","code":"function printSeries ( $ n ) {"}
{"text":"Initialize prev as 0. It store the sum of all previously generated triangular number","code":"$ prev = 0 ; $ curr ;"}
{"text":"Loop to print series","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Find ithh triangular number","code":"$ curr = findTriangularNumber ( $ i ) ;"}
{"text":"Add ith triangular number to sum of all previously generated triangular number to get ith tetrahedral number","code":"$ curr = $ curr + $ prev ; echo ( $ curr . \" \" ) ;"}
{"text":"Update sum of all previously generated triangular number","code":"$ prev = $ curr ; } }"}
{"text":"Driver code","code":"$ n = 10 ;"}
{"text":"function call to print series","code":"printSeries ( $ n ) ; ? >"}
{"text":"function to print tetrahedral number series up to n","code":"< ? php function printSeries ( $ n ) {"}
{"text":"loop to print series","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Calculate and print ith tetrahedral number","code":"$ num = $ i * ( $ i + 1 ) * ( $ i + 2 ) \/ 6 ; echo ( $ num . \" \" ) ; } }"}
{"text":"Driver code","code":"$ n = 10 ;"}
{"text":"function call to print series","code":"printSeries ( $ n ) ; ? >"}
{"text":"Function that prints the number of odd and even results","code":"< ? php function count_even_odd ( $ min , $ max , $ steps ) {"}
{"text":"If constant at layer i is even , beven is true , otherwise false . If the coefficient of x at layer i is even , aeven is true , otherwise false .","code":"$ beven = true ; $ aeven = false ; $ n = 2 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a = $ steps [ $ i ] [ 0 ] ; $ b = $ steps [ $ i ] [ 1 ] ;"}
{"text":"If any of the coefficients at any layer is found to be even , then the product of all the coefficients will always be even .","code":"if ( ! ( $ aeven $ a & 1 ) ) $ aeven = true ;"}
{"text":"Checking whether the constant added after all layers is even or odd .","code":"if ( $ beven ) { if ( $ b & 1 ) $ beven = false ; } else if ( ! ( $ a & 1 ) ) { if ( ! ( $ b & 1 ) ) $ beven = true ; } else { if ( $ b & 1 ) $ beven = true ; } }"}
{"text":"Assuming input x is even .","code":"if ( $ beven ) { $ even = ( int ) $ max \/ 2 - ( int ) ( $ min - 1 ) \/ 2 ; $ odd = 0 ; } else { $ even = ( int ) $ max \/ 2 - ( int ) ( $ min - 1 ) \/ 2 ; $ odd = 0 ; }"}
{"text":"Assuming input x is odd .","code":"if ( ! ( $ beven ^ $ aeven ) ) $ even += $ max - $ min + 1 - ( int ) $ max \/ 2 + ( int ) ( $ min - 1 ) \/ 2 ; else $ odd += $ max - $ min + 1 - ( int ) $ max \/ 2 + ( int ) ( $ min - 1 ) \/ 2 ;"}
{"text":"Displaying the counts .","code":"echo \" even = \" \u2581 , \u2581 $ even , STRNEWLINE \" , odd = \" , \u2581 $ odd , \u2581 \" \" }"}
{"text":"Driver Code","code":"$ min = 1 ; $ max = 4 ; $ steps = array ( array ( 1 , 2 ) , array ( 3 , 4 ) ) ; count_even_odd ( $ min , $ max , $ steps ) ; ? >"}
{"text":"Function that returns the maximum number of ones","code":"< ? php function getMaxOnes ( $ n , $ x ) {"}
{"text":"Minimum number of zeroes","code":"$ zeroes = ( int ) ( $ n \/ $ x ) ; $ zeroes = $ zeroes * $ zeroes ;"}
{"text":"Totol cells = square of the size of the matrices","code":"$ total = $ n * $ n ;"}
{"text":"Initialising the answer","code":"$ ans = $ total - $ zeroes ; return $ ans ; }"}
{"text":"Initialising the variables","code":"$ n = 5 ; $ x = 2 ; echo getMaxOnes ( $ n , $ x ) ; ? >"}
{"text":"PHP program to check if M - th fibonacci divides N - th fibonacci","code":"< ? php function check ( $ n , $ m ) {"}
{"text":"exceptional case for F ( 2 )","code":"if ( $ n == 2 $ m == 2 $ n % $ m == 0 ) { echo \" Yes \" , \" STRNEWLINE \" ; }"}
{"text":"if none of the above cases , hence not divisible","code":"else { echo \" No \" , \" \u2581 STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ m = 3 ; $ n = 9 ; check ( $ n , $ m ) ; ? >"}
{"text":"Function to calculate Surface area","code":"< ? php function findSurfaceArea ( $ a , $ h ) { $ Area ;"}
{"text":"Formula to calculate surface area","code":"$ Area = 6 * $ a * $ h + 3 * sqrt ( 3 ) * $ a * $ a ;"}
{"text":"Display surface area","code":"echo \" Surface \u2581 Area : \u2581 \" , $ Area , \" STRNEWLINE \" ; }"}
{"text":"Function to calculate Volume","code":"function findVolume ( $ a , $ h ) { $ Volume ;"}
{"text":"formula to calculate Volume","code":"$ Volume = 3 * sqrt ( 3 ) * $ a * $ a * $ h \/ 2 ;"}
{"text":"Display Volume","code":"echo \" Volume : \u2581 \" , $ Volume ; }"}
{"text":"Driver Code","code":"$ a = 5 ; $ h = 10 ;"}
{"text":"surface area function call","code":"findSurfaceArea ( $ a , $ h ) ;"}
{"text":"volume function call","code":"findVolume ( $ a , $ h ) ; ? >"}
{"text":"Function returns the min no of mails required","code":"< ? php function MinimumMail ( $ n , $ k , $ x ) {"}
{"text":"Using the formula derived above","code":"$ m = ( $ n - 1 ) + ceil ( ( $ n - 1 ) * 1.0 \/ $ x ) * ( $ n - 1 ) + ceil ( $ n * 1.0 \/ $ x ) * ( $ k - $ n ) ; return $ m ; }"}
{"text":"no of questions","code":"$ N = 4 ;"}
{"text":"no of students","code":"$ K = 9 ;"}
{"text":"maximum no of questions a mail can hold","code":"$ X = 2 ;"}
{"text":"Calling function","code":"echo MinimumMail ( $ N , $ K , $ X ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find area of an ellipse .","code":"< ? php function findArea ( $ a , $ b ) { $ Area ;"}
{"text":"formula to find the area of an Ellipse .","code":"$ Area = 3.142 * $ a * $ b ;"}
{"text":"Display the result","code":"echo \" Area : \u2581 \" . $ Area ; }"}
{"text":"Driver code","code":"$ a = 5 ; $ b = 4 ; findArea ( $ a , $ b ) ; ? >"}
{"text":"Function to compute the given value","code":"< ? php function calculate ( $ x , $ k , $ m ) { $ result = $ x ; $ k -- ;"}
{"text":"compute power k times","code":"while ( $ k -- ) { $ result = pow ( $ result , $ x ) ; if ( $ result > $ m ) $ result %= $ m ; } return $ result ; }"}
{"text":"Driver Code","code":"$ x = 5 ; $ k = 2 ; $ m = 3 ;"}
{"text":"Calling function","code":"echo calculate ( $ x , $ k , $ m ) ; ? >"}
{"text":"Recursive function that returns the reverse of digits","code":"< ? php function rev ( $ n , $ temp ) {"}
{"text":"base case","code":"if ( $ n == 0 ) return $ temp ;"}
{"text":"stores the reverse of a number","code":"$ temp = ( $ temp * 10 ) + ( $ n % 10 ) ; return rev ( $ n \/ 10 , $ temp ) ; }"}
{"text":"Driver Code","code":"$ n = 121 ; $ temp = rev ( $ n , 0 ) ; if ( $ temp != $ n ) echo \" yes \" ; else echo \" no \" ; ? >"}
{"text":"Function to find the greater value","code":"< ? php function findGreater ( $ a , $ b , $ n ) {"}
{"text":"If n is even","code":"if ( ! ( $ n & 1 ) ) { $ a = abs ( $ a ) ; $ b = abs ( $ b ) ; } if ( $ a == $ b ) echo \" a ^ n \u2581 is \u2581 equal \u2581 to \u2581 b ^ n \" ; else if ( $ a > $ b ) echo \" a ^ n \u2581 is \u2581 greater \u2581 than \u2581 b ^ n \" ; else echo \" b ^ n \u2581 is \u2581 greater \u2581 than \u2581 a ^ n \" ; }"}
{"text":"Driver code","code":"$ a = 12 ; $ b = 24 ; $ n = 5 ; findGreater ( $ a , $ b , $ n ) ; ? >"}
{"text":"Function to calculate fibonacci using recurrence relation formula","code":"< ? php function fibonacci ( $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Using direct formula","code":"$ fib = ( pow ( ( 1 + sqrt ( 5 ) ) , $ i ) - pow ( ( 1 - sqrt ( 5 ) ) , $ i ) ) \/ ( pow ( 2 , $ i ) * sqrt ( 5 ) ) ; echo $ fib , \" \" ; } }"}
{"text":"Driver code","code":"$ n = 8 ; fibonacci ( $ n ) ; ? >"}
{"text":"centered hexadecagonal function","code":"< ? php function center_hexadecagonal_num ( $ n ) {"}
{"text":"Formula to calculate nth centered hexadecagonal number","code":"return 8 * $ n * $ n - 8 * $ n + 1 ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo $ n , \" th \u2581 centered \u2581 hexadecagonal \u2581 number \u2581 : \u2581 \" , center_hexadecagonal_num ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 12 ; echo $ n , \" th \u2581 centered \u2581 hexadecagonal \u2581 numbe \u2581 : \u2581 \" , center_hexadecagonal_num ( $ n ) ; ? >"}
{"text":"PHP Program to check if the nth is odd or even in a sequence where each term is sum of previous two term","code":"< ? php $ MAX = 100 ;"}
{"text":"Return if the nth term is even or odd .","code":"function findNature ( $ a , $ b , $ n ) { global $ MAX ; $ seq = array_fill ( 0 , $ MAX , 0 ) ; $ seq [ 0 ] = $ a ; $ seq [ 1 ] = $ b ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ seq [ $ i ] = $ seq [ $ i - 1 ] + $ seq [ $ i - 2 ] ;"}
{"text":"Return true if odd","code":"return ( $ seq [ $ n ] & 1 ) ; }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 4 ; $ n = 3 ; if ( findNature ( $ a , $ b , $ n ) ) echo \" Odd \" ; else echo \" Even \" ; ? >"}
{"text":"function to compare m ^ n and n ^ m","code":"< ? php function check ( $ m , $ n ) {"}
{"text":"m ^ n","code":"$ RHS = $ m * log ( $ n ) ;"}
{"text":"n ^ m","code":"$ LHS = $ n * log ( $ m ) ; if ( $ LHS > $ RHS ) echo \" m ^ n \u2581 > \u2581 n ^ m \" ; else if ( $ LHS < $ RHS ) echo \" m ^ n \u2581 < \u2581 n ^ m \" ; else echo \" m ^ n \u2581 = \u2581 n ^ m \" ; }"}
{"text":"Driver Code","code":"$ m = 987654321 ; $ n = 123456987 ;"}
{"text":"function call to compare m ^ n and n ^ m","code":"check ( $ m , $ n ) ; ? >"}
{"text":"Return the greatest common divisor of two numbers","code":"< ? php function gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Return the gretest common divisor of a and b which lie in the given range .","code":"function maxDivisorRange ( $ a , $ b , $ l , $ h ) { $ g = gcd ( $ a , $ b ) ; $ res = -1 ;"}
{"text":"Loop from 1 to sqrt ( GCD ( a , b ) .","code":"for ( $ i = $ l ; $ i * $ i <= $ g and $ i <= $ h ; $ i ++ )"}
{"text":"if i divides the GCD ( a , b ) , then find maximum of three numbers res , i and g \/ i","code":"if ( $ g % $ i == 0 ) $ res = max ( $ res , max ( $ i , $ g \/ $ i ) ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ a = 3 ; $ b = 27 ; $ l = 1 ; $ h = 5 ; echo maxDivisorRange ( $ a , $ b , $ l , $ h ) ; ? >"}
{"text":"function to check if a number can be expressed as sum of five consecutive integers .","code":"< ? php function checksum ( $ n ) {"}
{"text":"if n is 0","code":"if ( $ n == 0 ) { echo \" - 2 \u2581 - 1 \u2581 0 \u2581 1 \u2581 2\" , \" STRNEWLINE \" ; return ; } $ inc ;"}
{"text":"if n is positive , increment loop by 1.","code":"if ( $ n > 0 ) $ inc = 1 ;"}
{"text":"if n is negative , decrement loop by 1.","code":"else $ inc = -1 ;"}
{"text":"Running loop from 0 to n - 4","code":"for ( $ i = 0 ; $ i <= $ n - 4 ; $ i += $ inc ) {"}
{"text":"check if sum of five consecutive integer is equal to n .","code":"if ( $ i + $ i + 1 + $ i + 2 + $ i + 3 + $ i + 4 == $ n ) { echo $ i , \" \" \u2581 , \u2581 $ i \u2581 + \u2581 1 , STRNEWLINE \" \" \u2581 , \u2581 $ i \u2581 + \u2581 2 , STRNEWLINE \" \" \u2581 , \u2581 $ i \u2581 + \u2581 3 , STRNEWLINE \" \" return ; } } echo \" - 1\" ; }"}
{"text":"Driver Code","code":"$ n = 15 ; checksum ( $ n ) ; ? >"}
{"text":"function to check if a number can be expressed as sum of five consecutive integers .","code":"< ? php function checksum ( $ n ) {"}
{"text":"if n is multiple of 5","code":"if ( $ n % 5 == 0 ) echo $ n \/ 5 - 2 , \" \u2581 \" , $ n \/ 5 - 1 , \" \u2581 \" , $ n \/ 5 , \" \u2581 \" , $ n \/ 5 + 1 , \" \u2581 \" , $ n \/ 5 + 2 ;"}
{"text":"else print \" - 1\" .","code":"else echo \" - 1\" ; }"}
{"text":"Driver Code","code":"$ n = 15 ; checksum ( $ n ) ; ? >"}
{"text":"Function to find the nth term of series","code":"< ? php function sumOfSeries ( $ n ) {"}
{"text":"Loop to add 4 th powers","code":"$ ans = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ ans += $ i * $ i * $ i * $ i ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo sumOfSeries ( $ n ) ; ? >"}
{"text":"PHP Program to determine the number of unmarked integers in a special sieve","code":"< ? php function countUnmarked ( $ N ) { if ( $ N % 2 == 0 ) return $ N \/ 2 ; else return $ N \/ 2 + 1 ; }"}
{"text":"Driver Code","code":"$ N = 4 ; echo \" Number \u2581 of \u2581 unmarked \u2581 elements : \u2581 \" , countUnmarked ( $ N ) ; ? >"}
{"text":"PHP program to find sum of the series .","code":"< ? php function factorial ( $ n ) { $ res = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res = $ res * $ i ; return $ res ; }"}
{"text":"Function to calculate required series","code":"function calculateSeries ( $ n ) { return factorial ( $ n + 1 ) - 1 ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo calculateSeries ( $ n ) ; ? >"}
{"text":"PHP program to find sum of the series .","code":"< ? php function factorial ( $ n ) { $ res = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res = $ res * $ i ; return $ res ; }"}
{"text":"Function to calculate required series","code":"function calculateSeries ( $ n ) { return 2 + ( $ n * $ n + $ n - 2 ) * factorial ( $ n + 1 ) ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo calculateSeries ( $ n ) ; ? >"}
{"text":"Return the size of smallest array with given constraint .","code":"< ? php function minimumLength ( $ x , $ y , $ z ) { return 1 + abs ( $ x - $ y ) + abs ( $ y - $ z ) ; }"}
{"text":"Driver Code","code":"$ x = 3 ; $ y = 1 ; $ z = 2 ; echo minimumLength ( $ x , $ y , $ z ) ; ? >"}
{"text":"function to find the other - end point of diameter","code":"< ? php function endPointOfDiameterofCircle ( $ x1 , $ y1 , $ c1 , $ c2 ) {"}
{"text":"find end point for x coordinates","code":"echo \" x2 = \" , (2 \u2581 * \u2581 $ c1 \u2581 - \u2581 $ x1 ) , \" \""}
{"text":"find end point for y coordinates","code":"echo \" y2 = \" }"}
{"text":"Driven Program","code":"$ x1 = -4 ; $ y1 = -1 ; $ c1 = 3 ; $ c2 = 5 ; endPointOfDiameterofCircle ( $ x1 , $ y1 , $ c1 , $ c2 ) ; ? >"}
{"text":"Function to find the product term","code":"< ? php function proterm ( $ i , $ value , $ x ) { $ pro = 1 ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) { $ pro = $ pro * ( $ value - $ x [ $ j ] ) ; } return $ pro ; }"}
{"text":"Function for calculating divided difference table","code":"function dividedDiffTable ( $ x , & $ y , $ n ) { for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n - $ i ; $ j ++ ) { $ y [ $ j ] [ $ i ] = ( $ y [ $ j ] [ $ i - 1 ] - $ y [ $ j + 1 ] [ $ i - 1 ] ) \/ ( $ x [ $ j ] - $ x [ $ i + $ j ] ) ; } } }"}
{"text":"Function for applying Newton 's  divided difference formula","code":"function applyFormula ( $ value , $ x , $ y , $ n ) { $ sum = $ y [ 0 ] [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + ( proterm ( $ i , $ value , $ x ) * $ y [ 0 ] [ $ i ] ) ; } return $ sum ; }"}
{"text":"Function for displaying divided difference table","code":"function printDiffTable ( $ y , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n - $ i ; $ j ++ ) { echo round ( $ y [ $ i ] [ $ j ] , 4 ) . \" \" ; } echo \" STRNEWLINE \" ; } }"}
{"text":"number of inputs given","code":"$ n = 4 ; $ y = array_fill ( 0 , 10 , array_fill ( 0 , 10 , 0 ) ) ; $ x = array ( 5 , 6 , 9 , 11 ) ;"}
{"text":"y [ ] [ ] is used for divided difference table where y [ ] [ 0 ] is used for input","code":"$ y [ 0 ] [ 0 ] = 12 ; $ y [ 1 ] [ 0 ] = 13 ; $ y [ 2 ] [ 0 ] = 14 ; $ y [ 3 ] [ 0 ] = 16 ;"}
{"text":"calculating divided difference table","code":"dividedDiffTable ( $ x , $ y , $ n ) ;"}
{"text":"displaying divided difference table","code":"printDiffTable ( $ y , $ n ) ;"}
{"text":"value to be interpolated","code":"$ value = 7 ;"}
{"text":"printing the value","code":"echo \" Value at \" \u2581 . \u2581 $ value \u2581 . \u2581 \" is \" round ( applyFormula ( $ value , $ x , $ y , $ n ) , 2 ) . \" STRNEWLINE \" ? >"}
{"text":"Function to find Centered heptagonal number","code":"< ? php function centered_heptagonal_num ( $ n ) {"}
{"text":"Formula to calculate nth Centered heptagonal number","code":"return ( 7 * $ n * $ n - 7 * $ n + 2 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo $ n , \" th \u2581 Centered \u2581 heptagonal \u2581 number \u2581 : \u2581 \" ; echo centered_heptagonal_num ( $ n ) ; ? >"}
{"text":"Function to find sum of sum of square of first n natural number","code":"< ? php function findSum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += ( ( $ i * ( $ i + 1 ) * ( 2 * $ i + 1 ) ) \/ 6 ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo findSum ( $ n ) ; ? >"}
{"text":"PHP Program to check if given matrix is Hankel Matrix or not .","code":"< ? php $ N = 4 ;"}
{"text":"Function to check if given matrix is Hankel Matrix or not .","code":"function checkHankelMatrix ( $ n , $ m ) {"}
{"text":"for each row","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"for each column","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"checking if i + j is less than n","code":"if ( $ i + $ j < $ n ) {"}
{"text":"checking if the element is equal to the corresponding diagonal constant","code":"if ( $ m [ $ i ] [ $ j ] != $ m [ $ i + $ j ] [ 0 ] ) return false ; } else {"}
{"text":"checking if the element is equal to the corresponding diagonal constant","code":"if ( $ m [ $ i ] [ $ j ] != $ m [ $ i + $ j - $ n + 1 ] [ $ n - 1 ] ) return false ; } } } return true ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ m = array ( array ( 1 , 2 , 3 , 5 ) , array ( 2 , 3 , 5 , 8 ) , array ( 3 , 5 , 8 , 0 ) , array ( 5 , 8 , 0 , 9 ) ) ; if ( checkHankelMatrix ( $ n , $ m ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find if a number can be expressed as x raised to power y .","code":"< ? php function isPower ( $ n ) {"}
{"text":"Find Log n in different bases and check if the value is an integer","code":"for ( $ x = 2 ; $ x <= sqrt ( $ n ) ; $ x ++ ) { $ f = log ( $ n ) \/ log ( $ x ) ; if ( ( $ f - ( int ) $ f ) == 0.0 ) return true ; } return false ; }"}
{"text":"Driver code","code":"for ( $ i = 2 ; $ i < 100 ; $ i ++ ) if ( isPower ( ( int ) $ i ) ) echo $ i . \" \" ; ? >"}
{"text":"PHP Program to answer queries on sum of sum of odd number digits of all the factors of a number","code":"< ? php $ N = 1000005 ;"}
{"text":"finding sum of odd digit number in each integer .","code":"function sumOddDigit ( & $ digitSum ) { global $ N ;"}
{"text":"for each number","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) {"}
{"text":"using previous number sum , finding the current number num of odd digit also , adding last digit if it is odd .","code":"$ digitSum [ $ i ] = $ digitSum [ intval ( $ i \/ 10 ) ] + intval ( $ i & 1 ) * ( $ i % 10 ) ; } }"}
{"text":"finding sum of sum of odd digit of all the factors of a number .","code":"function sumFactor ( $ digitSum , & $ factorDigitSum ) { global $ N ;"}
{"text":"for each possible factor","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i ; $ j < $ N ; $ j += $ i ) {"}
{"text":"adding the contribution .","code":"$ factorDigitSum [ $ j ] += $ digitSum [ $ i ] ; } } }"}
{"text":"Wrapper function","code":"function wrapper ( $ q , $ n ) { global $ N ; $ digitSum = array ( ) ; $ factorDigitSum = array ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ digitSum [ $ i ] = 0 ; $ factorDigitSum [ $ i ] = 0 ; } sumOddDigit ( $ digitSum ) ; sumFactor ( $ digitSum , $ factorDigitSum ) ; for ( $ i = 0 ; $ i < $ q ; $ i ++ ) echo ( $ factorDigitSum [ $ n [ $ i ] ] . \" \u2581 \" ) ; }"}
{"text":"Driver Code","code":"$ q = 2 ; $ n = array ( 10 , 36 ) ; wrapper ( $ q , $ n ) ; ? >"}
{"text":"Efficient function to calculate number of digits in the nth number constructed by using 6 , 1 , 4 and 9 as digits in the ascending order .","code":"< ? php function number_of_digits ( $ n ) { $ i ; $ res ; $ sum = 0 ;"}
{"text":"Number of digits increase after every i - th number where i increases in powers of 4.","code":"for ( $ i = 4 , $ res = 1 ; ; $ i *= 4 , $ res ++ ) { $ sum += $ i ; if ( $ sum >= $ n ) break ; } return $ res ; }"}
{"text":"Driver Code","code":"$ n = 21 ; echo number_of_digits ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to print all primes between 1 to N in reverse order using Sieve of Eratosthenes","code":"< ? php function Reverseorder ( $ n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ n + 1 , true ) ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Print all prime numbers in reverse order","code":"for ( $ p = $ n ; $ p >= 2 ; $ p -- ) if ( $ prime [ $ p ] ) echo $ p . \" \" ; }"}
{"text":"static input","code":"$ N = 25 ;"}
{"text":"to display","code":"echo \" Prime \u2581 number \u2581 in \u2581 reverse \u2581 order STRNEWLINE \" ; if ( $ N == 1 ) echo \" No \u2581 prime \u2581 no \u2581 exist \u2581 in \u2581 this \u2581 range \" ; else"}
{"text":"Reverseorder ( $N ) ; calling the function","code":"? >"}
{"text":"Function to generate a fixed number","code":"< ? php function magicOfSequence ( $ N ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) $ sum += ( $ i * $ i * $ i + $ i * 2 ) ; return $ sum ; }"}
{"text":"Driver Method","code":"$ N = 4 ; echo magicOfSequence ( $ N ) ; ? >"}
{"text":"returns the number of odd factors","code":"< ? php function countOddFactors ( $ n ) { $ odd_factors = 0 ; for ( $ i = 1 ; 1 * $ i * $ i <= $ n ; $ i ++ ) { if ( $ n % $ i == 0 ) {"}
{"text":"If i is an odd factor and n is a perfect square","code":"if ( 1 * $ i * $ i == $ n ) { if ( $ i & 1 ) $ odd_factors ++ ; }"}
{"text":"If n is not perfect square","code":"else { if ( $ i & 1 ) $ odd_factors ++ ; $ factor = $ n \/ $ i ; if ( $ factor & 1 ) $ odd_factors ++ ; } } } return $ odd_factors - 1 ; }"}
{"text":"N as sum of consecutive numbers","code":"$ N = 15 ; echo ( countOddFactors ( $ N ) . ( \" \" ) ) ; $ N = 10 ; echo ( countOddFactors ( $ N ) ) ; ? >"}
{"text":"PHP program to find if it is possible to make all array elements 0 by decrement operations .","code":"< ? php function isPossibleToZero ( $ a , $ n ) {"}
{"text":"used for storing the sum of even and odd position element in array .","code":"$ even = 0 ; $ odd = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if position is odd , store sum value of odd position in odd","code":"if ( $ i & 1 ) $ odd += $ a [ $ i ] ;"}
{"text":"if position is even , store sum value of even position in even","code":"else $ even += $ a [ $ i ] ; } return ( $ odd == $ even ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 0 , 1 , 1 , 0 ) ; $ n = sizeof ( $ arr ) ; if ( isPossibleToZero ( $ arr , $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"PHP program to find the sum of cos ( x ) series","code":"< ? php $ PI = 3.142 ; function cosXSertiesSum ( $ x , $ n ) { global $ PI ;"}
{"text":"here x is in degree . we have to convert it to radian for using it with series formula , as in series expansion angle is in radian","code":"$ x = $ x * ( $ PI \/ 180.0 ) ; $ res = 1 ; $ sign = 1 ; $ fact = 1 ; $ pow = 1 ; for ( $ i = 1 ; $ i < 5 ; $ i ++ ) { $ sign = $ sign * -1 ; $ fact = $ fact * ( 2 * $ i - 1 ) * ( 2 * $ i ) ; $ pow = $ pow * $ x * $ x ; $ res = $ res + $ sign * $ pow \/ $ fact ; } return $ res ; }"}
{"text":"Driver Code","code":"$ x = 50 ; $ n = 5 ; echo cosXSertiesSum ( $ x , 5 ) ; ? >"}
{"text":"function to calculate sum of digit for a given base","code":"< ? php function solve ( $ n , $ base ) {"}
{"text":"Sum of digits","code":"$ result = 0 ;"}
{"text":"Calculating the number ( n ) by taking mod with the base and adding remainder to the result and parallelly reducing the num value .","code":"while ( $ n > 0 ) { $ remainder = $ n % $ base ; $ result = $ result + $ remainder ; $ n = $ n \/ $ base ; }"}
{"text":"returning the result","code":"return $ result ; } function printSumsOfDigits ( $ n ) {"}
{"text":"function calling for multiple bases","code":"for ( $ base = 2 ; $ base < $ n ; ++ $ base ) { echo ( solve ( $ n , $ base ) ) ; echo ( \" \u2581 \" ) ; } }"}
{"text":"Driver code","code":"$ n = 8 ; printSumsOfDigits ( $ n ) ; ? >"}
{"text":"Function returns true if it is possible to split into two sets otherwise returns false","code":"< ? php function check ( $ N , $ D ) { $ temp = ( $ N * ( $ N + 1 ) ) \/ 2 + $ D ; return ( $ temp % 2 == 0 ) ; }"}
{"text":"Driver code","code":"$ N = 5 ; $ M = 7 ; if ( check ( $ N , $ M ) ) echo ( \" yes \" ) ; else echo ( \" no \" ) ;"}
{"text":"function to check minimum number of digits should be removed to make this number a perfect square","code":"< ? php function perfectSquare ( $ s ) {"}
{"text":"size of the string","code":"$ n = strlen ( $ s ) ;"}
{"text":"our final answer","code":"$ ans = -1 ;"}
{"text":"to store string which is perfect square .","code":"$ num = \" \" ;"}
{"text":"We make all possible subsequences","code":"for ( $ i = 1 ; $ i < ( 1 << $ n ) ; $ i ++ ) { $ str = \" \" ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"to check jth bit is set or not .","code":"if ( ( $ i >> $ j ) & 1 ) { $ str = $ str . $ s [ $ j ] ; } }"}
{"text":"we do not consider a number with leading zeros","code":"if ( $ str [ 0 ] != '0' ) {"}
{"text":"convert our temporary string into integer","code":"$ temp = 0 ; for ( $ j = 0 ; $ j < strlen ( $ str ) ; $ j ++ ) $ temp = $ temp * 10 + ( ord ( $ str [ $ j ] ) - ord ( '0' ) ) ; $ k = ( int ) ( sqrt ( $ temp ) ) ;"}
{"text":"checking temp is perfect square or not .","code":"if ( ( $ k * $ k ) == $ temp ) {"}
{"text":"taking maximum sized string","code":"if ( $ ans < strlen ( $ str ) ) { $ ans = strlen ( $ str ) ; $ num = $ str ; } } } } if ( $ ans == -1 ) return $ ans ; else {"}
{"text":"print PerfectSquare","code":"echo ( $ num . \" \" ) ; return ( $ n - $ ans ) ; } }"}
{"text":"Driver code","code":"echo ( perfectSquare ( \"8314\" ) . \" STRNEWLINE \" ) ; echo ( perfectSquare ( \"753\" ) . \" STRNEWLINE \" ) ; ? >"}
{"text":"Prints all the possible combinations 4 numbers whose sum of squares is equal to the given no .","code":"< ? php function printFourSquares ( $ a ) {"}
{"text":"loops checking the sum of squares","code":"for ( $ i = 0 ; $ i * $ i <= $ a ; $ i ++ ) { for ( $ j = $ i ; $ j * $ j <= $ a ; $ j ++ ) { for ( $ k = $ j ; $ k * $ k <= $ a ; $ k ++ ) { for ( $ l = $ k ; $ l * $ l <= $ a ; $ l ++ ) {"}
{"text":"if sum of four squares equals the given no .","code":"if ( $ i * $ i + $ j * $ j + $ k * $ k + $ l * $ l == $ a ) {"}
{"text":"printing the numbers","code":"echo $ a , \" = \" \u2581 , \u2581 $ i \u2581 , \u2581 \" * \" \u2581 , $ i , STRNEWLINE \" + \" \u2581 , \u2581 $ j \u2581 , \u2581 \" * \" \u2581 , \u2581 $ j \u2581 , \u2581 \" + \" echo $ k , \" * \" \u2581 , \u2581 $ k \u2581 , \u2581 \" + \" $ l , \" * \" , $ l , \" STRNEWLINE \" ; } } } } } }"}
{"text":"Driver Code","code":"$ a = 74 ;"}
{"text":"74 = 0 * 0 + 0 * 0 + 5 * 5 + 7 * 7 74 = 0 * 0 + 1 * 1 + 3 * 3 + 8 * 8 74 = 0 * 0 + 3 * 3 + 4 * 4 + 7 * 7 74 = 1 * 1 + 1 * 1 + 6 * 6 + 6 * 6 74 = 2 * 2 + 3 * 3 + 5 * 5 + 6 * 6","code":"printFourSquares ( $ a ) ; ? >"}
{"text":"A function to count prime factors of a given number n","code":"< ? php function exactPrimeFactorCount ( $ n ) { $ count = 0 ; if ( $ n % 2 == 0 ) { $ count ++ ; while ( $ n % 2 == 0 ) $ n = $ n \/ 2 ; }"}
{"text":"n must be odd at this point . So we can skip one element ( Note i = i + 2 )","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) { if ( $ n % $ i == 0 ) { $ count ++ ; while ( $ n % $ i == 0 ) $ n = $ n \/ $ i ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( $ n > 2 ) $ count ++ ; return $ count ; }"}
{"text":"Driver Code","code":"$ n = 51242183 ; echo \" The \u2581 number \u2581 of \u2581 distinct \u2581 prime \" . \" \u2581 factors \u2581 is \/ are \u2581 \" , exactPrimeFactorCount ( $ n ) , \" STRNEWLINE \" ; echo \" The \u2581 value \u2581 of \u2581 log ( log ( n ) ) \u2581 \" . \" is \u2581 \" , log ( log ( $ n ) ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate number of digits in a ^ b","code":"< ? php function no_of_digit ( $ a , $ b ) { return ( ( int ) ( $ b * log10 ( $ a ) ) + 1 ) ; }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 100 ; echo ( \" no . \u2581 of \u2581 digits \u2581 = \u2581 \" . no_of_digit ( $ a , $ b ) ) ; ? >"}
{"text":"Checking whether a number is semi - prime or not","code":"< ? php function checkSemiprime ( $ num ) { $ cnt = 0 ; for ( $ i = 2 ; $ cnt < 2 && $ i * $ i <= $ num ; ++ $ i ) { while ( $ num % $ i == 0 ) { $ num \/= $ i ;"}
{"text":"Increment count of prime numbers","code":"++ $ cnt ; } }"}
{"text":"If number is still greater than 1 , after exiting the for loop add it to the count variable as it indicates the number is a prime number","code":"if ( $ num > 1 ) ++ $ cnt ;"}
{"text":"Return '1' if count is equal to '2' else return '0'","code":"return $ cnt == 2 ; }"}
{"text":"Checking whether a number is emirpimes or not","code":"function isEmirpimes ( $ n ) {"}
{"text":"Number itself is not semiprime .","code":"if ( checkSemiprime ( $ n ) == false ) return false ;"}
{"text":"Finding reverse of n .","code":"$ r = 0 ; for ( $ t = $ n ; $ t != 0 ; $ t = $ t \/ $ n ) $ r = $ r * 10 + $ t % 10 ;"}
{"text":"The definition of emirpimes excludes palindromes , hence we do not check further , if the number entered is a palindrome","code":"if ( $ r == $ n ) return false ;"}
{"text":"Checking whether the reverse of the semi prime number entered is also a semi prime number or not","code":"return ( checkSemiprime ( $ r ) ) ; }"}
{"text":"Driver Code","code":"$ n = 15 ; if ( isEmirpimes ( $ n ) ) echo \" No \" ; else echo \" Yes \" ; ? >"}
{"text":"function to find factorial of given number","code":"< ? php function factorial ( $ n ) { $ res = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res *= $ i ; return $ res ; }"}
{"text":"Prints n consecutive numbers .","code":"function printNComposite ( int $ n ) { $ fact = factorial ( $ n + 1 ) ; for ( $ i = 2 ; $ i <= $ n + 1 ; ++ $ i ) echo $ fact + $ i , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 4 ; printNComposite ( $ n ) ; ? >"}
{"text":"Finding primes upto entered number","code":"< ? php function primes ( $ n ) { $ prime = array ( ) ;"}
{"text":"Finding primes by Sieve of Eratosthenes method","code":"for ( $ i = 0 ; $ i < $ n + 1 ; $ i ++ ) $ prime [ $ i ] = true ; for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) {"}
{"text":"If prime [ i ] is not changed , then it is prime","code":"if ( $ prime [ $ i ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ j = $ i * 2 ; $ j <= $ n ; $ j += $ i ) $ prime [ $ j ] = false ; } }"}
{"text":"Forming array of the prime numbers found","code":"$ arr = array ( ) ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) if ( $ prime [ $ i ] ) array_push ( $ arr , $ i ) ; return $ arr ; }"}
{"text":"Returns number of digits in n","code":"function countDigits ( $ n ) { $ temp = $ n ; $ c = 0 ; while ( $ temp != 0 ) { $ temp = intval ( $ temp \/ 10 ) ; $ c ++ ; } return $ c ; }"}
{"text":"Checking whether a number is Frugal or not","code":"function frugal ( $ n ) { $ r = primes ( $ n ) ; $ t = $ n ;"}
{"text":"Finding number of digits in prime factorization of the number","code":"$ s = 0 ; for ( $ i = 0 ; $ i < count ( $ r ) ; $ i ++ ) { if ( $ t % $ r [ $ i ] == 0 ) {"}
{"text":"Exponent for current factor","code":"$ k = 0 ;"}
{"text":"Counting number of times this prime factor divides ( Finding exponent )","code":"while ( $ t % $ r [ $ i ] == 0 ) { $ t = intval ( $ t \/ $ r [ $ i ] ) ; $ k ++ ; }"}
{"text":"Finding number of digits in the exponent Avoiding exponents of value 1","code":"if ( $ k == 1 ) $ s = $ s + countDigits ( $ r [ $ i ] ) ; else if ( $ k != 1 ) $ s = $ s + countDigits ( $ r [ $ i ] ) + countDigits ( $ k ) ; } }"}
{"text":"Checking condition for frugal number","code":"return ( countDigits ( $ n ) > $ s && $ s != 0 ) ; }"}
{"text":"Driver Code","code":"$ n = 343 ; if ( frugal ( $ n ) ) echo ( \" A \u2581 Frugal \u2581 number STRNEWLINE \" ) ; else echo ( \" Not \u2581 a \u2581 frugal \u2581 number STRNEWLINE \" ) ; ? >"}
{"text":"PHP program to find n - th number which is both square and cube .","code":"< ? php function nthSquareCube ( $ n ) { return $ n * $ n * $ n * $ n * $ n * $ n ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo ( nthSquareCube ( $ n ) ) ; ? >"}
{"text":"Function to find if the given number is sum of the cubes of first n natural numbers","code":"< ? php function findS ( $ s ) { $ sum = 0 ;"}
{"text":"Start adding cubes of the numbers from 1","code":"for ( $ n = 1 ; $ sum < $ s ; $ n ++ ) { $ sum += $ n * $ n * $ n ;"}
{"text":"If sum becomes equal to s return n","code":"if ( $ sum == $ s ) return $ n ; } return -1 ; }"}
{"text":"Driver code","code":"$ s = 9 ; $ n = findS ( $ s ) ; if ( $ n == -1 ) echo ( \" - 1\" ) ; else echo ( $ n ) ; ? >"}
{"text":"Function to find kth good number .","code":"< ? php function findKthGoodNo ( $ n ) {"}
{"text":"Find the last digit of n .","code":"$ lastDig = $ n % 10 ;"}
{"text":"If last digit is between 0 to 4 then return 2 * n .","code":"if ( $ lastDig >= 0 && $ lastDig <= 4 ) return $ n << 1 ;"}
{"text":"If last digit is between 5 to 9 then return 2 * n + 1.","code":"else return ( $ n << 1 ) + 1 ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo ( findKthGoodNo ( $ n ) ) ; ? >"}
{"text":"PHP program to verify Nicomachu 's Theorem","code":"< ? php function NicomachuTheorum_sum ( $ n ) {"}
{"text":"Compute sum of cubes","code":"$ sum = 0 ; for ( $ k = 1 ; $ k <= $ n ; $ k ++ ) $ sum += $ k * $ k * $ k ;"}
{"text":"Check if sum is equal to given formula .","code":"$ triNo = $ n * ( $ n + 1 ) \/ 2 ; if ( $ sum == $ triNo * $ triNo ) echo \" Yes \" ; else echo \" No \" ; }"}
{"text":"Driver Code","code":"$ n = 5 ; NicomachuTheorum_sum ( $ n ) ; ? >"}
{"text":"function to check if all digits are even of a given number","code":"< ? php function checkDigits ( $ n ) {"}
{"text":"iterate for all digits","code":"while ( $ n ) {"}
{"text":"if digit is odd","code":"if ( ( $ n % 10 ) % 2 ) return 0 ; $ n \/= 10 ; }"}
{"text":"all digits are even","code":"return 1 ; }"}
{"text":"function to return the largest number with all digits even","code":"function largestNumber ( $ n ) {"}
{"text":"Iterate till we find a number with all digits even","code":"for ( $ i = $ n ; ; $ i -- ) if ( checkDigits ( $ i ) ) return $ i ; }"}
{"text":"Driver Code","code":"$ N = 23 ; echo ( largestNumber ( $ N ) ) ; ? >"}
{"text":"function to return the largest number with all digits even","code":"< ? php function largestNumber ( $ n ) { $ s = \" \" ; $ duplicate = $ n ;"}
{"text":"convert the number to a string for easy operations","code":"while ( $ n ) { $ s = chr ( $ n % 10 + 48 ) . $ s ; $ n = ( int ) ( $ n \/ 10 ) ; } $ index = -1 ;"}
{"text":"find first odd digit","code":"for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) { if ( ord ( $ s [ $ i ] - '0' ) % 2 & 1 ) { $ index = $ i ; break ; } }"}
{"text":"if no digit , then N is the answer","code":"if ( $ index == -1 ) return $ duplicate ; $ num = 0 ;"}
{"text":"till first odd digit , add all even numbers","code":"for ( $ i = 0 ; $ i < $ index ; $ i ++ ) $ num = $ num * 10 + ( ord ( $ s [ $ i ] ) - ord ( '0' ) ) ;"}
{"text":"decrease 1 from the odd digit","code":"$ num = $ num * 10 + ( ( ord ( $ s [ $ i ] ) - ord ( '0' ) ) - 1 ) ;"}
{"text":"add 0 in the rest of the digits","code":"for ( $ i = $ index + 1 ; $ i < strlen ( $ s ) ; $ i ++ ) $ num = $ num * 10 + 8 ; return $ num ; }"}
{"text":"Driver Code","code":"$ N = 24578 ; echo largestNumber ( $ N ) ; ? >"}
{"text":"Function to find number of digits in 2 ^ n","code":"< ? php function countDigits ( $ n ) { return intval ( $ n * log10 ( 2 ) + 1 ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo ( countDigits ( $ n ) ) ; ? >"}
{"text":"function to check if all digits are even of a given number","code":"< ? php function check_digits ( $ n ) {"}
{"text":"iterate for all digits","code":"while ( $ n ) {"}
{"text":"if digit is odd","code":"if ( ( $ n % 10 ) % 2 ) return 0 ; $ n \/= 10 ; }"}
{"text":"all digits are even","code":"return 1 ; }"}
{"text":"function to return the smallest number with all digits even","code":"function smallest_number ( $ n ) {"}
{"text":"iterate till we find a number with all digits even","code":"for ( $ i = $ n ; ; $ i ++ ) if ( check_digits ( $ i ) ) return $ i ; }"}
{"text":"Driver Code","code":"$ N = 2397 ; echo smallest_number ( $ N ) ; ? >"}
{"text":"PHP code to find the bucket to choose for picking flowers out of it","code":"< ? php function findBucketNo ( $ p ) { return ceil ( ( sqrt ( 8 * $ p + 1 ) - 1 ) \/ 2 ) ; }"}
{"text":"Driver code","code":"$ p = 10 ; echo ( findBucketNo ( $ p ) ) ; ? >"}
{"text":"function to calculate the factorial","code":"< ? php function factorial ( $ n ) { if ( $ n == 0 ) return 1 ; return $ n * factorial ( $ n - 1 ) ; } function LCMOfNeighbourFact ( $ n ) {"}
{"text":"returning the factorial of the largest number in the given three consecutive numbers","code":"return factorial ( $ n + 1 ) ; }"}
{"text":"Driver code","code":"$ N = 5 ; echo ( LCMOfNeighbourFact ( $ N ) ) ; ? >"}
{"text":"Returns sum of all factors of n .","code":"< ? php function sumofFactors ( $ n ) {"}
{"text":"Traversing through all prime factors .","code":"$ res = 1 ; for ( $ i = 2 ; $ i <= sqrt ( $ n ) ; $ i ++ ) { $ count = 0 ; $ curr_sum = 1 ; $ curr_term = 1 ; while ( $ n % $ i == 0 ) { $ count ++ ;"}
{"text":"THE BELOW STATEMENT MAKES IT BETTER THAN ABOVE METHOD AS WE REDUCE VALUE OF n .","code":"$ n = $ n \/ $ i ; $ curr_term *= $ i ; $ curr_sum += $ curr_term ; } $ res *= $ curr_sum ; }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2.","code":"if ( $ n >= 2 ) $ res *= ( 1 + $ n ) ; return $ res ; }"}
{"text":"Function to return gcd of a and b","code":"function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to check if the given two number are friendly pair or not .","code":"function checkFriendly ( $ n , $ m ) {"}
{"text":"Finding the sum of factors of n and m","code":"$ sumFactors_n = sumofFactors ( $ n ) ; $ sumFactors_m = sumofFactors ( $ m ) ;"}
{"text":"finding gcd of n and sum of its factors .","code":"$ gcd_n = gcd ( $ n , $ sumFactors_n ) ;"}
{"text":"finding gcd of m and sum of its factors .","code":"$ gcd_m = gcd ( $ m , $ sumFactors_m ) ;"}
{"text":"checking is numerator and denominator of abundancy index of both number are equal or not .","code":"if ( $ n \/ $ gcd_n == $ m \/ $ gcd_m and $ sumFactors_n \/ $ gcd_n == $ sumFactors_m \/ $ gcd_m ) return true ; else return false ; }"}
{"text":"Driver code","code":"$ n = 6 ; $ m = 28 ; if ( checkFriendly ( $ n , $ m ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find n - th Fortunate number","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function to Find primorial of order n ( product of first n prime numbers ) .","code":"function primorial ( $ n ) { $ p = 2 ; $ n -- ; for ( $ i = 3 ; $ n != 0 ; $ i ++ ) { if ( isPrime ( $ i ) ) { $ p = $ p * $ i ; $ n -- ; } $ i ++ ; } return $ p ; }"}
{"text":"Function to find next prime number greater than n","code":"function findNextPrime ( $ n ) {"}
{"text":"Note that difference ( or m ) should be greater than 1.","code":"$ nextPrime = $ n + 2 ;"}
{"text":"loop continuously until isPrime returns true for a number above n","code":"while ( true ) {"}
{"text":"Ignoring the prime number that is 1 greater than n","code":"if ( isPrime ( $ nextPrime ) ) break ; $ nextPrime ++ ; } return $ nextPrime ; }"}
{"text":"Returns n - th Fortunate number","code":"function fortunateNumber ( $ n ) { $ p = primorial ( $ n ) ; return findNextPrime ( $ p ) - $ p ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo fortunateNumber ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate probability","code":"< ? php function procal ( $ n ) { return ( 3.0 * $ n ) \/ ( 4.0 * ( $ n * $ n ) - 1 ) ; }"}
{"text":"Driver code","code":"$ a = array ( 1 , 2 , 3 , 4 , 5 ) ; $ n = sizeof ( $ a ) ; echo procal ( $ n ) ; ? >"}
{"text":"PHP program to verify fermat 's last theorem for a given range and n.","code":"< ? php function testSomeNumbers ( $ limit , $ n ) { if ( $ n < 3 ) for ( $ a = 1 ; $ a <= $ limit ; $ a ++ ) for ( $ b = $ a ; $ b <= $ limit ; $ b ++ ) {"}
{"text":"Check if there exists a triplet such that a ^ n + b ^ n = c ^ n","code":"$ pow_sum = pow ( $ a , $ n ) + pow ( $ b , $ n ) ; $ c = pow ( $ pow_sum , 1.0 \/ $ n ) ; $ c_pow = pow ( $ c , $ n ) ; if ( $ c_pow != $ pow_sum ) { echo \" Count \u2581 example \u2581 found \" ; return ; } } echo \" No \u2581 counter \u2581 example \u2581 within \u2581 \" . \" given \u2581 range \u2581 and \u2581 data \" ; }"}
{"text":"Driver Code","code":"testSomeNumbers ( 10 , 3 ) ; ? >"}
{"text":"Function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Print the Product of N fraction in Reduced Form .","code":"function productReduce ( $ n , $ num , $ den ) { $ new_num = 1 ; $ new_den = 1 ;"}
{"text":"finding the product of all N numerators and denominators .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ new_num *= $ num [ $ i ] ; $ new_den *= $ den [ $ i ] ; }"}
{"text":"Finding GCD of new numerator and denominator","code":"$ GCD = gcd ( $ new_num , $ new_den ) ;"}
{"text":"Converting into reduced form .","code":"$ new_num \/= $ GCD ; $ new_den \/= $ GCD ; echo $ new_num , \" \/ \" , $ new_den , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ n = 3 ; $ num = array ( 1 , 2 , 5 ) ; $ den = array ( 2 , 1 , 6 ) ; productReduce ( $ n , $ num , $ den ) ; ? >"}
{"text":"function for f ( n ) mod 5","code":"< ? php function fnMod ( $ n ) {"}
{"text":"if n % 5 == 1 return 4","code":"if ( $ n % 5 == 1 ) return 4 ;"}
{"text":"else return 0","code":"else return 0 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo fnMod ( $ n ) , \" STRNEWLINE \" ; $ n = 11 ; echo fnMod ( $ n ) ; ? >"}
{"text":"return single digit sum of a number .","code":"< ? php function digSum ( $ n ) { if ( $ n == 0 ) return 0 ; return ( $ n % 9 == 0 ) ? 9 : ( $ n % 9 ) ; }"}
{"text":"Returns recursive sum of digits of a number formed by repeating a number X number of times until sum become single digit .","code":"function repeatedNumberSum ( $ n , $ x ) { $ sum = $ x * digSum ( $ n ) ; return digSum ( $ sum ) ; }"}
{"text":"Driver Code","code":"$ n = 24 ; $ x = 3 ; echo repeatedNumberSum ( $ n , $ x ) ; ? >"}
{"text":"Returns sum of n digit numbers divisible by ' number '","code":"< ? php function totalSumDivisibleByNum ( $ n , $ number ) {"}
{"text":"compute the first and last term","code":"$ firstnum = pow ( 10 , $ n - 1 ) ; $ lastnum = pow ( 10 , $ n ) ;"}
{"text":"sum of number which having n digit and divisible by number","code":"$ sum = 0 ; for ( $ i = $ firstnum ; $ i < $ lastnum ; $ i ++ ) if ( $ i % $ number == 0 ) $ sum += $ i ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ num = 7 ; echo totalSumDivisibleByNum ( $ n , $ num ) , \" \" ; ? >"}
{"text":"Returns count of n digit numbers divisible by ' number '","code":"< ? php function numberofterm ( $ n , $ number ) {"}
{"text":"compute the first and last term","code":"$ firstnum = pow ( 10 , $ n - 1 ) ; $ lastnum = pow ( 10 , $ n ) ;"}
{"text":"count total number of which having n digit and divisible by number","code":"$ count = 0 ; for ( $ i = $ firstnum ; $ i < $ lastnum ; $ i ++ ) if ( $ i % $ number == 0 ) $ count ++ ; return $ count ; }"}
{"text":"Driver code","code":"$ n = 3 ; $ num = 7 ; echo numberofterm ( $ n , $ num ) ; ? >"}
{"text":"PHP program to find N - th term in George Cantor set of rational numbers","code":"< ? php function georgeCantor ( $ n ) {"}
{"text":"let i = numerator","code":"$ i = 1 ;"}
{"text":"let j = denominator","code":"$ j = 1 ;"}
{"text":"to keep the check of no . of terms","code":"$ k = 1 ;"}
{"text":"loop till k is not equal to n","code":"while ( $ k < $ n ) { $ j ++ ; $ k ++ ;"}
{"text":"check if k is already equal to N then the first term is the required rational number","code":"if ( $ k == $ n ) break ;"}
{"text":"loop for traversing from right to left downwards diagonally","code":"while ( $ j > 1 && $ k < $ n ) { $ i ++ ; $ j -- ; $ k ++ ; } if ( $ k == $ n ) break ; $ i ++ ; $ k ++ ; if ( $ k == $ n ) break ;"}
{"text":"loop for traversing from left to right upwards diagonally","code":"while ( $ i > 1 && $ k < $ n ) { $ i -- ; $ j ++ ; $ k ++ ; } } echo \" N - th \u2581 term \u2581 : \u2581 \" , $ i , \" \/ \" , $ j ; }"}
{"text":"Driver Code","code":"$ n = 15 ; georgeCantor ( $ n ) ; ? >"}
{"text":"Returns true if n is divisible by 29 else returns false .","code":"< ? php function isDivisible ( $ n ) {"}
{"text":"add the lastdigit * 3 to remaining number until number becomes of only 2 digit","code":"while ( intval ( $ n \/ 100 ) ) { $ last_digit = $ n % 10 ; $ n = intval ( $ n \/ 10 ) ; $ n += $ last_digit * 3 ; }"}
{"text":"return true if number is divisible by 29 another","code":"return ( $ n % 29 == 0 ) ; }"}
{"text":"Driver Code","code":"$ n = 348 ; if ( isDivisible ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to solve the given equation","code":"< ? php function solveEquation ( $ equation ) { $ n = strlen ( $ equation ) ; $ sign = 1 ; $ coeff = 0 ; $ total = 0 ; $ i = 0 ;"}
{"text":"Traverse the equation","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ equation [ $ j ] == ' + ' $ equation [ $ j ] == ' - ' ) { if ( $ j > $ i ) $ total += $ sign * intval ( substr ( $ equation , $ i , $ j - $ i ) ) ; $ i = $ j ; }"}
{"text":"For cases such as : x , - x , + x","code":"else if ( $ equation [ $ j ] == ' x ' ) { if ( ( $ i == $ j ) $ equation [ $ j - 1 ] == ' + ' ) $ coeff += $ sign ; else if ( $ equation [ $ j - 1 ] == ' - ' ) $ coeff -= $ sign ; else $ coeff += $ sign * intval ( substr ( $ equation , $ i , $ j - $ i ) ) ; $ i = $ j + 1 ; }"}
{"text":"Flip sign once ' = ' is seen","code":"else if ( $ equation [ $ j ] == ' = ' ) { if ( $ j > $ i ) $ total += $ sign * intval ( substr ( $ equation , $ i , $ j - $ i ) ) ; $ sign = -1 ; $ i = $ j + 1 ; } }"}
{"text":"There may be a number left in the end","code":"if ( $ i < $ n ) $ total += $ sign * intval ( substr ( $ equation , $ i ) ) ;"}
{"text":"For infinite solutions","code":"if ( $ coeff == 0 && $ total == 0 ) return \" Infinite \u2581 solutions \" ;"}
{"text":"For no solution","code":"if ( $ coeff == 0 && $ total ) return \" No \u2581 solution \" ;"}
{"text":"x = total sum \/ coeff of x ' - ' sign indicates moving numeric value to right hand side","code":"$ ans = - $ total \/ $ coeff ; return \" x \u2581 = \u2581 \" . $ ans ; }"}
{"text":"Driver code","code":"$ equation = \" x + 5-3 + x = 6 + x - 2\" ; echo ( solveEquation ( $ equation ) ) ; ? >"}
{"text":"function to check Pronic Number","code":"< ? php function pronic_check ( $ n ) { $ x = floor ( sqrt ( $ n ) ) ;"}
{"text":"Checking Pronic Number by multiplying consecutive numbers","code":"if ( $ x * ( $ x + 1 ) == $ n ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ n = 56 ; if ( pronic_check ( $ n ) == true ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"This function multiplies x with the number represented by res [ ] . res_size is size of res [ ] or number of digits in the number represented by res [ ] . This function uses simple school mathematics for multiplication . This function may value of res_size and returns the new value of res_size","code":"< ? php function multiply ( $ x , $ res ) {"}
{"text":"Initialize carry","code":"$ carry = 0 ; $ res_size = count ( $ res ) ;"}
{"text":"One by one multiply n with individual digits of res [ ]","code":"for ( $ i = 0 ; $ i < $ res_size ; $ i ++ ) { $ prod = $ res [ $ i ] * $ x + $ carry ;"}
{"text":"Store last digit of ' prod ' in res [ ]","code":"$ res [ $ i ] = $ prod % 10 ;"}
{"text":"Put rest in carry","code":"$ carry = ( int ) ( $ prod \/ 10 ) ; }"}
{"text":"Put carry in res and increase result size","code":"while ( $ carry ) { if ( $ carry % 10 ) $ res [ $ res_size ++ ] = $ carry % 10 ; $ carry = ( int ) ( $ carry \/ 10 ) ; } return $ res ; }"}
{"text":"This function finds power of a number x","code":"function power ( $ x , $ n ) {"}
{"text":"printing value \"1\" for power = 0","code":"if ( $ n == 0 ) { echo \"1\" ; return ; } $ res_size = 0 ; $ res = array ( ) ; $ temp = $ x ;"}
{"text":"Initialize result","code":"while ( $ temp != 0 ) { $ res [ $ res_size ++ ] = $ temp % 10 ; $ temp = $ temp \/ 10 ; }"}
{"text":"Multiply x n times ( x ^ n = x * x * x ... . n times )","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res = multiply ( $ x , $ res ) ; echo $ x . \" ^ \" . $ n . \" \u2581 = \u2581 \" ; $ O = 0 ; for ( $ i = count ( $ res ) - 1 ; $ i >= 0 ; $ i -- , $ O ++ ) if ( $ res [ $ i ] ) break ; for ( $ i = count ( $ res ) - $ O - 1 ; $ i >= 0 ; $ i -- ) echo $ res [ $ i ] ; }"}
{"text":"Driver Code","code":"$ exponent = 100 ; $ base = 2 ; power ( $ base , $ exponent ) ; ? >"}
{"text":"function to check if number n is a P - smooth number or not","code":"< ? php function check ( $ n , $ p ) { $ maximum = -1 ;"}
{"text":"prime factorise it by 2","code":"while ( ! ( $ n % 2 ) ) {"}
{"text":"if the number is divisible by 2","code":"$ maximum = max ( $ maximum , 2 ) ; $ n = $ n \/ 2 ; }"}
{"text":"check for all the possible numbers that can divide it","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i += 2 ) {"}
{"text":"prime factorize it by i","code":"while ( $ n % $ i == 0 ) {"}
{"text":"stores the maximum if maximum and i , if i divides the number","code":"$ maximum = max ( $ maximum , $ i ) ; $ n = $ n \/ $ i ; } }"}
{"text":"if n at the end is a prime number , then it a divisor itself","code":"if ( $ n > 2 ) $ maximum = max ( $ maximum , $ n ) ; return ( $ maximum <= $ p ) ; }"}
{"text":"Driver Code","code":"$ n = 24 ; $ p = 7 ; if ( check ( $ n , $ p ) ) echo ( \" yes \" ) ; else echo ( \" no \" ) ; ? >"}
{"text":"function to find the minute","code":"< ? php function find_time ( $ h1 ) {"}
{"text":"finding the angle between minute hand and the first hour hand","code":"$ theta = 30 * $ h1 ; echo ( \" ( \" . ( $ theta * 2 ) . \" \/ \" \u2581 . \u2581 \" 11 \" \u2581 . \u2581 \" ) \" \u2581 . \u2581 \" minutes \" }"}
{"text":"Driver code","code":"$ h1 = 3 ; find_time ( $ h1 ) ; ? >"}
{"text":"function that calculate the sum of the nth series","code":"< ? php function sum_series ( $ n ) { $ nSquare = $ n * $ n ;"}
{"text":"using formula of the nth term","code":"return $ nSquare * ( $ nSquare - 1 ) \/ 4 ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo ( sum_series ( $ n ) ) ; ? >"}
{"text":"returns true if number n is prime","code":"< ? php function isPrime ( $ n ) {"}
{"text":"0 and 1 both are non - primes","code":"if ( $ n == 0 $ n == 1 ) return false ;"}
{"text":"finding square root of n","code":"$ root = sqrt ( $ n ) ;"}
{"text":"checking if n has any factor upto square root of n if yes its not prime","code":"for ( $ i = 2 ; $ i <= $ root ; $ i ++ ) if ( $ n % $ i == 0 ) return false ; return true ; } function isSandwitched ( $ n ) { return ( isPrime ( $ n - 1 ) && isPrime ( $ n + 1 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 642 ; echo $ n , \" \u2581 : \u2581 \" ; if ( isSandwitched ( $ n ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; $ n = 9 ; echo $ n , \" \u2581 : \u2581 \" ; if ( isSandwitched ( $ n ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"function to implement tomohiko sakamoto algorithm","code":"< ? php function day_of_the_week ( $ y , $ m , $ d ) {"}
{"text":"array with leading number of days values","code":"$ t = array ( 0 , 3 , 2 , 5 , 0 , 3 , 5 , 1 , 4 , 6 , 2 , 4 ) ;"}
{"text":"if month is less than 3 reduce year by 1","code":"if ( $ m < 3 ) $ y -= 1 ; return ( ( $ y + $ y \/ 4 - $ y \/ 100 + $ y \/ 400 + $ t [ $ m - 1 ] + $ d ) % 7 ) ; }"}
{"text":"Driver Code","code":"$ day = 13 ; $ month = 7 ; $ year = 2017 ; echo day_of_the_week ( $ year , $ month , $ day ) ; ? >"}
{"text":"Returns true if n is prime , else return false . i is current divisor to check .","code":"< ? php function isPrime ( $ n , $ i = 2 ) {"}
{"text":"Base cases","code":"if ( $ n <= 2 ) return ( $ n == 2 ) ? true : false ; if ( $ n % $ i == 0 ) return false ; if ( $ i * $ i > $ n ) return true ;"}
{"text":"Check for next divisor","code":"return isPrime ( $ n , $ i + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 15 ; if ( isPrime ( $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Returns true if n is a square free number , else returns false .","code":"< ? php function isSquareFree ( $ n ) { if ( $ n % 2 == 0 ) $ n = $ n \/ 2 ;"}
{"text":"If 2 again divides n , then n is not a square free number .","code":"if ( $ n % 2 == 0 ) return false ;"}
{"text":"n must be odd at this point . So we can skip one element ( Note i = i + 2 )","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) {"}
{"text":"Check if i is a prime factor","code":"if ( $ n % $ i == 0 ) { $ n = $ n \/ $ i ;"}
{"text":"If i again divides , then n is not square free","code":"if ( $ n % $ i == 0 ) return false ; } } return true ; }"}
{"text":"Driver Code","code":"$ n = 10 ; if ( isSquareFree ( $ n ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Returns area of square from given diagonal","code":"< ? php function findArea ( $ d ) { return ( $ d * $ d ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ d = 10 ; echo ( findArea ( $ d ) ) ; ? >"}
{"text":"Function to find sum of series .","code":"< ? php function sumOfSeries ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum = $ sum + ( 2 * $ i - 1 ) * ( 2 * $ i - 1 ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"Function that find sum of series .","code":"< ? php function sumOfSeries ( $ n ) {"}
{"text":"Formula to find sum of series .","code":"return ( $ n * ( 2 * $ n - 1 ) * ( 2 * $ n + 1 ) ) \/ 3 ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"Function to find sample mean .","code":"< ? php function mean ( $ arr , $ n ) {"}
{"text":"loop to calculate sum of array elements .","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + $ arr [ $ i ] ; return $ sum \/ $ n ; }"}
{"text":"Function to calculate sample standard deviation .","code":"function SSD ( $ arr , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + ( $ arr [ $ i ] - mean ( $ arr , $ n ) ) * ( $ arr [ $ i ] - mean ( $ arr , $ n ) ) ; return sqrt ( $ sum \/ ( $ n - 1 ) ) ; }"}
{"text":"Function to calculate sample error .","code":"function sampleError ( $ arr , $ n ) {"}
{"text":"Formula to find sample error .","code":"return SSD ( $ arr , $ n ) \/ sqrt ( $ n ) ; }"}
{"text":"Driver Code","code":"{ $ arr = array ( 78.53 , 79.62 , 80.25 , 81.05 , 83.21 , 83.46 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo sampleError ( $ arr , $ n ) ; return 0 ; } ? >"}
{"text":"Function to find minimum steps to reach target","code":"< ? php function StepstoReachTarget ( $ target ) {"}
{"text":"Handling negatives$ by symmetry$","code":"$ target = abs ( $ target ) ;"}
{"text":"Keep moving while sum is smaller i . e calculating n","code":"$ n = ceil ( ( -1.0 + sqrt ( 1 + 8.0 * $ target ) ) \/ 2 ) ; $ sum = $ n * ( $ n + 1 ) \/ 2 ; if ( $ sum == $ target ) return $ n ; $ d = $ sum - $ target ;"}
{"text":"case 1 : d is even","code":"if ( ( $ d & 1 ) == 0 ) return n ;"}
{"text":"d is odd","code":"else return $ n + ( ( $ n & 1 ) ? 2 : 1 ) ; }"}
{"text":"Driver code","code":"$ target = 5 ;"}
{"text":"Function call","code":"echo StepstoReachTarget ( $ target ) ; ? >"}
{"text":"Function to find sum of series up - to n terms","code":"< ? php function seriesSum ( $ n ) {"}
{"text":"initializing counter by 1","code":"$ i = 1 ;"}
{"text":"variable to calculate result","code":"$ res = 0.0 ; $ sign = true ;"}
{"text":"while loop until nth term is not reached","code":"while ( $ n > 0 ) { $ n -- ;"}
{"text":"boolean type variable for checking validation","code":"if ( $ sign ) { $ sign = ! $ sign ; $ res = $ res + ( double ) ++ $ i \/ ++ $ i ; } else { $ sign = ! $ sign ; $ res = $ res - ( double ) ++ $ i \/ ++ $ i ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( seriesSum ( $ n ) ) ; ? >"}
{"text":"function find the square of n","code":"< ? php function countSymmetric ( $ n ) {"}
{"text":"Base case","code":"if ( $ n == 0 ) return 1 ;"}
{"text":"Return 2 ^ ( n ( n + 1 ) \/ 2 )","code":"return 1 << ( ( $ n * ( $ n + 1 ) ) \/ 2 ) ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo ( countSymmetric ( $ n ) ) ; ? >"}
{"text":"Function to find nth centered nonagonal number .","code":"< ? php function centeredNonagonal ( $ n ) {"}
{"text":"Formula to find nth centered nonagonal number .","code":"return ( 3 * $ n - 2 ) * ( 3 * $ n - 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo centeredNonagonal ( $ n ) ; ? >"}
{"text":"Function to find mean of the array elements .","code":"< ? php function Mean ( $ arr , $ n ) {"}
{"text":"Calculate sum of all elements .","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + $ arr [ $ i ] ; return $ sum \/ $ n ; }"}
{"text":"Function to find mean absolute deviation of given elements .","code":"function meanAbsoluteDeviation ( $ arr , $ n ) {"}
{"text":"Calculate the sum of absolute deviation about mean .","code":"$ absSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ absSum = $ absSum + abs ( $ arr [ $ i ] - Mean ( $ arr , $ n ) ) ;"}
{"text":"Return mean absolute deviation about mean .","code":"return $ absSum \/ $ n ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 15 , 15 , 17 , 18 , 21 ) ; $ n = sizeof ( $ arr ) ; echo meanAbsoluteDeviation ( $ arr , $ n ) ; ? >"}
{"text":"Returns true if it is possible to get ratio r from given cost and quantity ranges .","code":"< ? php function isRatioPossible ( $ lowCost , $ upCost , $ lowQuant , $ upQuant , $ r ) { for ( $ i = $ lowQuant ; $ i <= $ upQuant ; $ i ++ ) {"}
{"text":"Calculating cost corresponding to value of i","code":"$ ans = $ i * $ r ; if ( $ lowCost <= $ ans && $ ans <= $ upCost ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ lowCost = 14 ; $ upCost = 30 ; $ lowQuant = 5 ; $ upQuant = 12 ; $ r = 9 ; if ( isRatioPossible ( $ lowCost , $ upCost , $ lowQuant , $ upQuant , $ r ) ) echo \" Yes \" ; else echo \" No \" ; # This  code is contributed by ajit NEW_LINE ? >"}
{"text":"Function to implement calculation","code":"< ? php function findNumbers ( $ n , $ d ) { for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) echo \"1\" , \" \u2581 \" ; echo \"2\" , \" \u2581 \" ; echo $ n + $ d , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ N = 3 ; $ D = 5 ; findNumbers ( $ N , $ D ) ; ? >"}
{"text":"calculate the sum of fourth power of first n odd natural numbers","code":"< ? php function oddNumSum ( $ n ) { return ( $ n * ( 2 * $ n + 1 ) * ( 24 * $ n * $ n * $ n - 12 * $ n * $ n - 14 * $ n + 7 ) ) \/ 15 ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo ( oddNumSum ( $ n ) ) ; ? >"}
{"text":"Returns number of zeros in factorial n","code":"< ? php function trailingZero ( $ x ) {"}
{"text":"dividing x by powers of 5 and update count","code":"$ i = 5 ; $ count = 0 ; while ( $ x > $ i ) { $ count = $ count + ( int ) ( $ x \/ $ i ) ; $ i = $ i * 5 ; } return $ count ; }"}
{"text":"Returns count of trailing zeros in M ! x N !","code":"function countProductTrailing ( $ M , $ N ) { return trailingZero ( $ N ) + trailingZero ( $ M ) ; }"}
{"text":"Driver Code","code":"$ N = 67 ; $ M = 98 ; echo ( countProductTrailing ( $ N , $ M ) ) ; ? >"}
{"text":"Function to check Trimorphic number","code":"< ? php function isTrimorphic ( $ N ) {"}
{"text":"Store the cube","code":"$ cube = $ N * $ N * $ N ;"}
{"text":"Start Comparing digits","code":"while ( $ N > 0 ) {"}
{"text":"Return false , if any digit of N doesn ' t \u2581 match \u2581 with \u2581 \u2581 its \u2581 cube ' s digits from last","code":"if ( $ N % 10 != $ cube % 10 ) return -1 ;"}
{"text":"Reduce N and cube","code":"$ N \/= 10 ; $ cube \/= 10 ; } return 1 ; }"}
{"text":"Driver code","code":"$ N = 24 ; $ r = isTrimorphic ( $ N ) ? \" trimorphic \" : \" not \u2581 trimporphic \" ; echo $ r ; ? >"}
{"text":"Functions to find nth Trimorphic number","code":"< ? php function checkTrimorphic ( $ num ) { $ cube = $ num * $ num * $ num ;"}
{"text":"Comparing the digits","code":"while ( $ num > 0 ) {"}
{"text":"Return false , if any digit of num doesn ' t \u2581 match \u2581 with \u2581 \u2581 its \u2581 cube ' s digits from last","code":"if ( $ num % 10 != $ cube % 10 ) return false ;"}
{"text":"Reduce num and cube","code":"$ num = ( int ) ( $ num \/ 10 ) ; $ cube = ( int ) ( $ cube \/ 10 ) ; } return true ; } function nthTrimorphic ( $ n ) { $ count = 0 ;"}
{"text":"Check in max int size","code":"for ( $ i = 0 ; $ i < PHP_INT_MAX ; $ i ++ ) {"}
{"text":"check number is Trimorphic or not","code":"if ( checkTrimorphic ( $ i ) ) $ count ++ ;"}
{"text":"if counter is equal to the n then return nth number","code":"if ( $ count == $ n ) return $ i ; } }"}
{"text":"Driver code","code":"$ n = 9 ; echo nthTrimorphic ( $ n ) ; ? >"}
{"text":"PHP program to find minimum moves to reach target if we can move i steps in i - th move .","code":"< ? php function reachTarget ( $ target ) {"}
{"text":"Handling negatives by symmetry","code":"$ target = abs ( $ target ) ;"}
{"text":"Keep moving while sum is smaller or difference is odd .","code":"$ sum = 0 ; $ step = 0 ; while ( $ sum < $ target or ( $ sum - $ target ) % 2 != 0 ) { $ step ++ ; $ sum += $ step ; } return $ step ; }"}
{"text":"Driver code","code":"$ target = 5 ; echo reachTarget ( $ target ) ; ? >"}
{"text":"calculate the sum of fifth power of first n natural numbers","code":"< ? php function fifthPowerSum ( $ n ) { return ( ( 2 * $ n * $ n * $ n * $ n * $ n * $ n ) + ( 6 * $ n * $ n * $ n * $ n * $ n ) + ( 5 * $ n * $ n * $ n * $ n ) - ( $ n * $ n ) ) \/ 12 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( fifthPowerSum ( $ n ) ) ; ? >"}
{"text":"Returns unit digit of x raised to power y","code":"< ? php function unitDigitXRaisedY ( $ x , $ y ) {"}
{"text":"Initialize result as 1 to handle case when y is 0.","code":"$ res = 1 ;"}
{"text":"One by one multiply with x mod 10 to avoid overflow .","code":"for ( $ i = 0 ; $ i < $ y ; $ i ++ ) $ res = ( $ res * $ x ) % 10 ; return $ res ; }"}
{"text":"Driver Code","code":"echo ( unitDigitXRaisedY ( 4 , 2 ) ) ; ? >"}
{"text":"function to find max occurring divisor interval [ x , y ]","code":"< ? php function findDivisor ( $ x , $ y ) {"}
{"text":"if there is only one number in the in the interval , return that number","code":"if ( $ x == $ y ) return $ y ;"}
{"text":"otherwise , 2 is the max occurring divisor","code":"return 2 ; }"}
{"text":"Driver code","code":"$ x = 3 ; $ y = 16 ; echo findDivisor ( $ x , $ y ) ; ? >"}
{"text":"Function to calculate average of square number","code":"< ? php function AvgofSquareN ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += ( $ i * $ i ) ; return $ sum \/ $ n ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo ( AvgofSquareN ( $ n ) ) ; ? >"}
{"text":"Returns sum of all factors of n .","code":"< ? php function sumofFactors ( $ n ) {"}
{"text":"If n is odd , then there are no even factors .","code":"if ( $ n % 2 != 0 ) return 0 ;"}
{"text":"Traversing through all prime factors .","code":"$ res = 1 ; for ( $ i = 2 ; $ i <= sqrt ( $ n ) ; $ i ++ ) {"}
{"text":"While i divides n , print i and divide n","code":"$ count = 0 ; $ curr_sum = 1 ; $ curr_term = 1 ; while ( $ n % $ i == 0 ) { $ count ++ ; $ n = floor ( $ n \/ $ i ) ;"}
{"text":"here we remove the 2 ^ 0 that is 1. All other factors","code":"if ( $ i == 2 && $ count == 1 ) $ curr_sum = 0 ; $ curr_term *= $ i ; $ curr_sum += $ curr_term ; } $ res *= $ curr_sum ; }"}
{"text":"This condition is to handle the case when n is a prime number .","code":"if ( $ n >= 2 ) $ res *= ( 1 + $ n ) ; return $ res ; }"}
{"text":"Driver code","code":"$ n = 18 ; echo sumofFactors ( $ n ) ; ? >"}
{"text":"Determines focal length of a spherical concave mirror","code":"< ? php function focal_length_concave ( $ R ) { return $ R \/ 2 ; }"}
{"text":"Determines focal length of a spherical convex mirror","code":"function focal_length_convex ( $ R ) { return - ( $ R \/ 2 ) ; }"}
{"text":"Driver function","code":"$ R = 30 ; echo \" Focal \u2581 length \u2581 of \u2581 spherical \" , \" concave \u2581 mirror \u2581 is \u2581 : \u2581 \" , focal_length_concave ( $ R ) , \" \u2581 units STRNEWLINE \" ; echo \" Focal \u2581 length \u2581 of \u2581 spherical \" , \" \u2581 convex \u2581 mirror \u2581 is \u2581 : \u2581 \" , focal_length_convex ( $ R ) , \" \u2581 units \" ; ? >"}
{"text":"Returns sum of all factors of n .","code":"< ? php function sumofoddFactors ( $ n ) {"}
{"text":"Traversing through all prime factors .","code":"$ res = 1 ;"}
{"text":"ignore even factors by removing all powers of 2","code":"while ( $ n % 2 == 0 ) $ n = $ n \/ 2 ; for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i ++ ) {"}
{"text":"While i divides n , print i and divide n","code":"$ count = 0 ; $ curr_sum = 1 ; $ curr_term = 1 ; while ( $ n % $ i == 0 ) { $ count ++ ; $ n = $ n \/ $ i ; $ curr_term *= $ i ; $ curr_sum += $ curr_term ; } $ res *= $ curr_sum ; }"}
{"text":"This condition is to handle the case when n is a prime number .","code":"if ( $ n >= 2 ) $ res *= ( 1 + $ n ) ; return $ res ; }"}
{"text":"Driver code","code":"$ n = 30 ; echo sumofoddFactors ( $ n ) ; ? >"}
{"text":"return number of non negative integral solutions","code":"< ? php function countSolutions ( $ n , $ val ) {"}
{"text":"initialize total = 0","code":"$ total = 0 ;"}
{"text":"Base Case if n = 1 and val >= 0 then it should return 1","code":"if ( $ n == 1 && $ val >= 0 ) return 1 ;"}
{"text":"iterate the loop till equal the val","code":"for ( $ i = 0 ; $ i <= $ val ; $ i ++ ) {"}
{"text":"total solution of equations and again call the recursive function Solutions ( variable , value )","code":"$ total += countSolutions ( $ n - 1 , $ val - $ i ) ; }"}
{"text":"return the total no possible solution","code":"return $ total ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ val = 20 ; echo countSolutions ( $ n , $ val ) ; ? >"}
{"text":"PHP Program to print Fibonomial Triangle of height n .","code":"< ? php $ N = 6 ;"}
{"text":"Function to produce Fibonacci Series .","code":"function fib ( & $ f , $ n ) {"}
{"text":"0 th and 1 st number of the series are 0 and 1","code":"$ f [ 0 ] = 0 ; $ f [ 1 ] = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ )"}
{"text":"Add the previous 2 numbers in the series and store it","code":"$ f [ $ i ] = $ f [ $ i - 1 ] + $ f [ $ i - 2 ] ; }"}
{"text":"Function to produce fibonomial coefficient","code":"function fibcoef ( $ fc , $ f , $ n ) { for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ fc [ $ i ] [ 0 ] = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) { $ k = $ j ; while ( $ k -- ) $ fc [ $ i ] [ $ j ] *= $ f [ $ k ] ; $ k = 1 ; while ( ( $ j + 1 ) != $ k ) $ fc [ $ i ] [ $ j ] \/= $ f [ $ k ++ ] ; } } }"}
{"text":"Function to print Fibonomial Triangle .","code":"function printFibonomialTriangle ( $ n ) { global $ N ; $ f = array_fill ( 0 , $ N + 1 , 0 ) ;"}
{"text":"Finding the fibonacci series .","code":"fib ( $ f , $ n ) ;"}
{"text":"to store triangle value .","code":"$ dp = array_fill ( 0 , $ N + 1 , array_fill ( 0 , $ N + 1 , 0 ) ) ;"}
{"text":"initialising the 0 th element of each row and diagonal element equal to 0.","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] [ 0 ] = $ dp [ $ i ] [ $ i ] = 1 ;"}
{"text":"for each row .","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"for each column .","code":"for ( $ j = 1 ; $ j < $ i ; $ j ++ )"}
{"text":"finding each element using recurrence relation .","code":"$ dp [ $ i ] [ $ j ] = $ f [ $ i - $ j + 1 ] * $ dp [ $ i - 1 ] [ $ j - 1 ] + $ f [ $ j - 1 ] * $ dp [ $ i - 1 ] [ $ j ] ; }"}
{"text":"printing the Fibonomial Triangle .","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) echo $ dp [ $ i ] [ $ j ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driven Program","code":"$ n = 6 ; printFibonomialTriangle ( $ n ) ; ? >"}
{"text":"Return the sum of first n term of AGP","code":"< ? php function sumofNterm ( $ a , $ d , $ b , $ r , $ n ) {"}
{"text":"finding the each term of AGP and adding it to sum .","code":"$ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += ( ( $ a + ( $ i - 1 ) * $ d ) * ( $ b * pow ( $ r , $ i - 1 ) ) ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ a = 1 ; $ d = 1 ; $ b = 2 ; $ r = 2 ; $ n = 3 ; echo ( sumofNterm ( $ a , $ d , $ b , $ r , $ n ) ) ; ? >"}
{"text":"function to find the sum of the given series","code":"< ? php function sumOfTheSeries ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"first term of each i - th term","code":"$ k = 2 ; for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) { $ sum += $ k ;"}
{"text":"next term","code":"$ k += 2 ; } }"}
{"text":"required sum","code":"return $ sum ; }"}
{"text":"Driver program to test above","code":"$ n = 5 ; echo \" Sum \u2581 = \u2581 \" , sumOfTheSeries ( $ n ) ; ? >"}
{"text":"Function to calculate sum of series .","code":"< ? php function sumOfSeries ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum = $ sum + $ i * ( $ i + 1 ) * ( $ i + 2 ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo sumOfSeries ( $ n ) ; ? >"}
{"text":"Function to get the series","code":"< ? php function Series ( $ x , $ n ) { $ sum = 1 ; $ term = 1 ; $ fct ; $ j ; $ y = 2 ; $ m ;"}
{"text":"Sum of n - 1 terms starting from 2 nd term","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ fct = 1 ; for ( $ j = 1 ; $ j <= $ y ; $ j ++ ) { $ fct = $ fct * $ j ; } $ term = $ term * ( -1 ) ; $ m = $ term * pow ( $ x , $ y ) \/ $ fct ; $ sum = $ sum + $ m ; $ y += 2 ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ x = 9 ; $ n = 10 ; $ precision = 4 ; echo substr ( number_format ( Series ( $ x , $ n ) , $ precision + 1 , ' . ' , ' ' ) , 0 , -1 ) ; ? >"}
{"text":"Function to get the series","code":"< ? php function Series ( $ x , $ n ) { $ sum = 1 ; $ term = 1 ; $ fct = 1 ; $ p = 1 ; $ multi = 1 ;"}
{"text":"Computing sum of remaining n - 1 terms .","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ fct = $ fct * $ multi * ( $ multi + 1 ) ; $ p = $ p * $ x * $ x ; $ term = ( -1 ) * $ term ; $ multi += 2 ; $ sum = $ sum + ( $ term * $ p ) \/ $ fct ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ x = 9 ; $ n = 10 ; $ precision = 4 ; echo substr ( number_format ( Series ( $ x , $ n ) , $ precision + 1 , ' . ' , ' ' ) , 0 , -1 ) ; ? >"}
{"text":"Function to count two 's factor","code":"< ? php function two_factor ( $ n ) {"}
{"text":"Count number of 2 s present in n","code":"$ twocount = 0 ; while ( $ n % 2 == 0 ) { $ twocount ++ ; $ n = ( int ) ( $ n \/ 2 ) ; } return $ twocount ; }"}
{"text":"Function to count five 's factor","code":"function five_factor ( $ n ) { $ fivecount = 0 ; while ( $ n % 5 == 0 ) { $ fivecount ++ ; $ n = ( int ) ( $ n \/ 5 ) ; } return $ fivecount ; }"}
{"text":"Function to count number of zeros","code":"function find_con_zero ( $ arr , $ n ) { $ twocount = 0 ; $ fivecount = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Count the two 's  factor of n number","code":"$ twocount += two_factor ( $ arr [ $ i ] ) ;"}
{"text":"Count the five 's  factor of n number","code":"$ fivecount += five_factor ( $ arr [ $ i ] ) ; }"}
{"text":"Return the minimum","code":"if ( $ twocount < $ fivecount ) return $ twocount ; else return $ fivecount ; }"}
{"text":"Driver Code","code":"$ arr = array ( 100 , 10 , 5 , 25 , 35 , 14 ) ; $ n = 6 ; echo find_con_zero ( $ arr , $ n ) ; ? >"}
{"text":"function to print the first digit","code":"< ? php function first ( $ a , $ b , $ c ) {"}
{"text":"reduce the number to its mod","code":"$ a %= $ b ;"}
{"text":"traverse for every decimal places","code":"for ( $ i = 1 ; $ i <= $ b ; $ i ++ ) {"}
{"text":"get every fraction places when ( a * 10 \/ b ) \/ c","code":"$ a = $ a * 10 ;"}
{"text":"check if it is equal to the required integer","code":"if ( $ a \/ $ b == $ c ) return $ i ;"}
{"text":"mod the number","code":"$ a %= $ b ; } return -1 ; }"}
{"text":"Driver Code","code":"$ a = 1 ; $ b = 4 ; $ c = 5 ; echo first ( $ a , $ b , $ c ) ; ? >"}
{"text":"function to print difference","code":"< ? php function subsetDifference ( $ n ) {"}
{"text":"summation of n elements","code":"$ s = $ n * ( $ n + 1 ) \/ 2 ;"}
{"text":"if divisible by 4","code":"if ( $ n % 4 == 0 ) { echo \" First \u2581 subset \u2581 sum \u2581 = \u2581 \" , floor ( $ s \/ 2 ) ; echo \" Second subset sum = \" , floor ( $ s \/ 2 ) ; echo \" Difference = \" } else {"}
{"text":"if remainder 1 or 2. In case of remainder 2 , we divide elements from 3 to n in groups of size 4 and put 1 in one group and 2 in group . This also makes difference 1.","code":"if ( $ n % 4 == 1 $ n % 4 == 2 ) { echo \" First \u2581 subset \u2581 sum \u2581 = \u2581 \" , floor ( $ s \/ 2 ) ; echo \" Second subset sum = \" , floor ( $ s \/ 2 + 1 ) ; echo \" Difference = \" }"}
{"text":"We put elements from 4 to n in groups of size 4. Remaining elements 1 , 2 and 3 can be divided as ( 1 , 2 ) and ( 3 ) .","code":"else { echo \" First \u2581 subset \u2581 sum \u2581 = \u2581 \" , floor ( $ s \/ 2 ) ; echo \" Second subset sum = \" , floor ( $ s \/ 2 ) ; echo \" Difference = \" } } }"}
{"text":"Driver code","code":"$ n = 6 ; subsetDifference ( $ n ) ; ? >"}
{"text":"function to calculate time to meet","code":"< ? php function timeToMeet ( $ s , $ v ) { $ V = 3 * $ v \/ 2 ; $ time = $ s \/ $ V ; echo $ time ; }"}
{"text":"Driver Code","code":"$ s = 25 ; $ v = 56 ; timeToMeet ( $ s , $ v ) ; ? >"}
{"text":"function to check if a number can be written as sum of three consecutive integer .","code":"< ? php function checksum ( $ n ) {"}
{"text":"if n is 0","code":"if ( $ n == 0 ) { echo \" - 1 \u2581 0 \u2581 1\" ; return ; } $ inc ;"}
{"text":"if n is positive , increment loop by 1.","code":"if ( $ n > 0 ) $ inc = 1 ;"}
{"text":"if n is negative , decrement loop by 1.","code":"else $ inc = -1 ;"}
{"text":"Running loop from 0 to n - 2","code":"for ( $ i = 0 ; $ i <= $ n - 2 ; $ i += $ inc ) {"}
{"text":"check if sum of three consecutive integer is equal to n .","code":"if ( $ i + $ i + 1 + $ i + 2 == $ n ) { echo $ i , \" \u2581 \" , $ i + 1 , \" \u2581 \" , $ i + 2 ; return ; } } echo \" - 1\" ; }"}
{"text":"Driver Code","code":"$ n = 6 ; checksum ( $ n ) ; ? >"}
{"text":"Utility function to find sum of all divisor of number up to ' n '","code":"< ? php function divisorSum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; ++ $ i ) {"}
{"text":"Find all divisors of i and add them","code":"for ( $ j = 1 ; $ j * $ j <= $ i ; ++ $ j ) { if ( $ i % $ j == 0 ) { if ( $ i \/ $ j == $ j ) $ sum += $ j ; else $ sum += $ j + $ i \/ $ j ; } } } return $ sum ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo \" STRNEWLINE \" , divisorSum ( $ n ) , \" STRNEWLINE \" ; $ n = 5 ; echo divisorSum ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to print binomial table","code":"< ? php function printbinomial ( $ max ) { for ( $ m = 0 ; $ m <= $ max ; $ m ++ ) { echo $ m ; $ binom = 1 ; for ( $ x = 0 ; $ x <= $ m ; $ x ++ ) {"}
{"text":"B ( m , x ) is 1 if either m or x is 0.","code":"if ( $ m != 0 && $ x != 0 )"}
{"text":"Otherwise using recursive formula B ( m , x ) = B ( m , x - 1 ) * ( m - x + 1 ) \/ x","code":"$ binom = $ binom * ( $ m - $ x + 1 ) \/ $ x ; echo \" \u2581 \" , $ binom , \" \u2581 \" ; } echo \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ max = 10 ; printbinomial ( $ max ) ; ? >"}
{"text":"A function to find largest prime factor","code":"< ? php function maxPrimeFactors ( $ n ) {"}
{"text":"Initialize the maximum prime factor variable with the lowest one","code":"$ maxPrime = -1 ;"}
{"text":"Print the number of 2 s that divide n","code":"while ( $ n % 2 == 0 ) { $ maxPrime = 2 ;"}
{"text":"equivalent to n \/= 2","code":"$ n >>= 1 ; }"}
{"text":"n must be odd at this point","code":"while ( $ n % 3 == 0 ) { $ maxPrime = 3 ; $ n = $ n \/ 3 ; }"}
{"text":"now we have to iterate only for integers who does not have prime factor 2 and 3","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i += 2 ) { while ( $ n % $ i == 0 ) { $ maxPrime = $ i ; $ n = $ n \/ $ i ; } while ( $ n % ( $ i + 2 ) == 0 ) { $ maxPrime = $ i + 2 ; $ n = $ n \/ ( $ i + 2 ) ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 4","code":"if ( $ n > 4 ) $ maxPrime = $ n ; return $ maxPrime ; }"}
{"text":"Driver Code","code":"$ n = 15 ; echo maxPrimeFactors ( $ n ) , \" STRNEWLINE \" ; $ n = 25698751364526 ; echo maxPrimeFactors ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to get no of set bits in the binary representation of ' n '","code":"< ? php function countSetBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ n &= ( $ n - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"function to count unset bits in the given range","code":"function countUnsetBitsInGivenRange ( $ n , $ l , $ r ) {"}
{"text":"calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits","code":"$ num = ( ( 1 << $ r ) - 1 ) ^ ( ( 1 << ( $ l - 1 ) ) - 1 ) ;"}
{"text":"returns number of unset bits in the range ' l ' to ' r ' in ' n '","code":"return ( $ r - $ l + 1 ) - countSetBits ( $ n & $ num ) ; }"}
{"text":"Driver code","code":"$ n = 80 ; $ l = 1 ; $ r = 4 ; echo countUnsetBitsInGivenRange ( $ n , $ l , $ r ) ; ? >"}
{"text":"calculate the sum of fourth power of first n even natural numbers","code":"< ? php function evenPowerSum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"made even number","code":"$ j = 2 * $ i ; $ sum = $ sum + ( $ j * $ j * $ j * $ j ) ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( evenPowerSum ( $ n ) ) ; ? >"}
{"text":"calculate the sum of fourth power of first n even natural numbers","code":"< ? php function evenPowerSum ( $ n ) { return ( 8 * $ n * ( $ n + 1 ) * ( 2 * $ n + 1 ) * ( 3 * $ n * $ n + 3 * $ n - 1 ) ) \/ 15 ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo ( evenPowerSum ( $ n ) ) ; ? >"}
{"text":"PHP Program to find Nth Balanced Prime","code":"< ? php $ MAX = 501 ;"}
{"text":"Return the Nth balanced prime .","code":"function balancedprime ( $ n ) { global $ MAX ;"}
{"text":"Sieve of Eratosthenes","code":"$ prime = array_fill ( 0 , $ MAX + 1 , true ) ; for ( $ p = 2 ; $ p * $ p <= $ MAX ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ MAX ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"storing all primes","code":"$ v = array ( ) ; for ( $ p = 3 ; $ p <= $ MAX ; $ p += 2 ) if ( $ prime [ $ p ] ) array_push ( $ v , $ p ) ; $ count = 0 ;"}
{"text":"Finding the Nth balanced Prime","code":"for ( $ i = 1 ; $ i < count ( $ v ) ; $ i ++ ) { if ( $ v [ $ i ] == ( $ v [ $ i + 1 ] + $ v [ $ i - 1 ] ) \/ 2 ) $ count ++ ; if ( $ count == $ n ) return $ v [ $ i ] ; } }"}
{"text":"Driven Program","code":"$ n = 4 ; echo balancedprime ( $ n ) ; ? >"}
{"text":"PHP program to print the smallest integer with n factors or more","code":"< ? php $ MAX = 100001 ;"}
{"text":"array to store prime factors","code":"$ factor = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"function to generate all prime factors of numbers from 1 to 10 ^ 6","code":"function generatePrimeFactors ( ) { global $ MAX ; global $ factor ; $ factor [ 1 ] = 1 ;"}
{"text":"Initializes all the positions with their value .","code":"for ( $ i = 2 ; $ i < $ MAX ; $ i ++ ) $ factor [ $ i ] = $ i ;"}
{"text":"Initializes all multiples of 2 with 2","code":"for ( $ i = 4 ; $ i < $ MAX ; $ i += 2 ) $ factor [ $ i ] = 2 ;"}
{"text":"A modified version of Sieve of Eratosthenes to store the smallest prime factor that divides every number .","code":"for ( $ i = 3 ; $ i * $ i < $ MAX ; $ i ++ ) {"}
{"text":"check if it has no prime factor .","code":"if ( $ factor [ $ i ] == $ i ) {"}
{"text":"Initializes of j starting from i * i","code":"for ( $ j = $ i * $ i ; $ j < $ MAX ; $ j += $ i ) {"}
{"text":"if it has no prime factor before , then stores the smallest prime divisor","code":"if ( $ factor [ $ j ] == $ j ) $ factor [ $ j ] = $ i ; } } } }"}
{"text":"function to calculate number of factors","code":"function calculateNoOFactors ( $ n ) { global $ factor ; if ( $ n == 1 ) return 1 ; $ ans = 1 ;"}
{"text":"stores the smallest prime number that divides n","code":"$ dup = $ factor [ $ n ] ;"}
{"text":"stores the count of number of times a prime number divides n .","code":"$ c = 1 ;"}
{"text":"reduces to the next number after prime factorization of n","code":"$ j = ( int ) ( $ n \/ $ factor [ $ n ] ) ;"}
{"text":"false when prime factorization is done","code":"while ( $ j != 1 ) {"}
{"text":"if the same prime number is dividing n , then we increase the count","code":"if ( $ factor [ $ j ] == $ dup ) $ c += 1 ;"}
{"text":"if its a new prime factor that is factorizing n , then we again set c = 1 and change dup to the new prime factor , and apply the formula explained above .","code":"else { $ dup = $ factor [ $ j ] ; $ ans = $ ans * ( $ c + 1 ) ; $ c = 1 ; }"}
{"text":"prime factorizes a number","code":"$ j = ( int ) ( $ j \/ $ factor [ $ j ] ) ; }"}
{"text":"for the last prime factor","code":"$ ans = $ ans * ( $ c + 1 ) ; return $ ans ; }"}
{"text":"function to find the smallest integer with n factors or more .","code":"function smallest ( $ n ) { for ( $ i = 1 ; ; $ i ++ )"}
{"text":"check if no of factors is more than n or not","code":"if ( calculateNoOFactors ( $ i ) >= $ n ) return $ i ; }"}
{"text":"generate prime factors of number upto 10 ^ 6","code":"generatePrimeFactors ( ) ; $ n = 4 ; echo smallest ( $ n ) ; ? >"}
{"text":"Return the sum of square of first n natural numbers","code":"< ? php function squaresum ( $ n ) {"}
{"text":"Iterate i from 1 and n finding square of i and add to sum .","code":"$ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += ( $ i * $ i ) ; return $ sum ; }"}
{"text":"Driven Code","code":"$ n = 4 ; echo ( squaresum ( $ n ) ) ; ? >"}
{"text":"Function to check if a number is prime or not .","code":"< ? php function isPrime ( $ n ) { $ i = 2 ; while ( $ i * $ i <= $ n ) { if ( $ n % $ i == 0 ) return false ; $ i ++ ; } return true ; } function minimumSum ( $ n ) { if ( isPrime ( $ n ) ) return 1 ;"}
{"text":"If n is an even number ( we can write it as sum of two primes )","code":"if ( $ n % 2 == 0 ) return 2 ;"}
{"text":"If n is odd and n - 2 is prime .","code":"if ( isPrime ( $ n - 2 ) ) return 2 ;"}
{"text":"If n is odd , n - 3 must be even .","code":"return 3 ; }"}
{"text":"Driver code","code":"$ n = 27 ; echo minimumSum ( $ n ) ; ? >"}
{"text":"Find the first digit","code":"< ? php function firstDigit ( $ n ) {"}
{"text":"Remove last digit from number till only one digit is left","code":"while ( $ n >= 10 ) $ n \/= 10 ;"}
{"text":"return the first digit","code":"return ( int ) $ n ; }"}
{"text":"Find the last digit","code":"function lastDigit ( $ n ) {"}
{"text":"return the last digit","code":"return ( ( int ) $ n % 10 ) ; }"}
{"text":"Driver Code","code":"$ n = 98562 ; echo firstDigit ( $ n ) . \" \u2581 \" . lastDigit ( $ n ) . \" STRNEWLINE \" ;"}
{"text":"Find the first digit","code":"< ? php function firstDigit ( $ n ) {"}
{"text":"Find total number of digits - 1","code":"$ digits = ( int ) log10 ( $ n ) ;"}
{"text":"Find first digit","code":"$ n = ( int ) ( $ n \/ pow ( 10 , $ digits ) ) ;"}
{"text":"Return first digit","code":"return $ n ; }"}
{"text":"Find the last digit","code":"function lastDigit ( $ n ) {"}
{"text":"return the last digit","code":"return ( $ n % 10 ) ; }"}
{"text":"Driver Code","code":"$ n = 98562 ; echo firstDigit ( $ n ) , \" \" , lastDigit ( $ n ) , \" \" ; ? >"}
{"text":"Function to check if a number is prime or not .","code":"< ? php function isPrime ( $ x ) { if ( $ x == 0 $ x == 1 ) return false ; for ( $ i = 2 ; $ i * $ i <= $ x ; ++ $ i ) if ( $ x % $ i == 0 ) return false ; return true ; }"}
{"text":"Prints at most three prime numbers whose sum is n .","code":"function findPrimes ( $ n ) {"}
{"text":"CASE - I","code":"if ( isPrime ( $ n ) ) echo ( $ n ) ;"}
{"text":"CASE - II","code":"else if ( isPrime ( $ n - 2 ) ) echo ( 2 . \" \u2581 \" . ( $ n - 2 ) ) ;"}
{"text":"CASE - III","code":"else { echo ( 3 . \" \u2581 \" ) ; $ n = $ n - 3 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( isPrime ( $ i ) && isPrime ( $ n - $ i ) ) { echo ( $ i . \" \" . ( $ n - $ i ) ) ; break ; } } } }"}
{"text":"Driver code","code":"$ n = 27 ; findPrimes ( $ n ) ; ? >"}
{"text":"array used to store coefficients .","code":"< ? php global $ c ;"}
{"text":"function to calculate the coefficients of ( x - 1 ) ^ n - ( x ^ n - 1 ) with the help of Pascal 's triangle .","code":"function coef ( $ n ) { $ c [ 0 ] = 1 ; for ( $ i = 0 ; $ i < $ n ; $ c [ 0 ] = - $ c [ 0 ] , $ i ++ ) { $ c [ 1 + $ i ] = 1 ; for ( $ j = $ i ; $ j > 0 ; $ j -- ) $ c [ $ j ] = $ c [ $ j - 1 ] - $ c [ $ j ] ; } }"}
{"text":"function to check whether the number is prime or not","code":"function isPrime ( $ n ) { global $ c ;"}
{"text":"Calculating all the coefficients by the function coef and storing all the coefficients in c array .","code":"coef ( $ n ) ;"}
{"text":"checking all the coefficients whether they are divisible by n or not . if n is not prime , then loop breaks and ( i > 0 ) .","code":"$ i = $ n ; while ( $ i -- && $ c [ $ i ] % $ n == 0 )"}
{"text":"Return true if all coefficients are divisible by n .","code":"return $ i < 0 ; }"}
{"text":"Driver Code","code":"$ n = 37 ; if ( isPrime ( $ n ) ) echo \" Not \u2581 Prime \" , \" STRNEWLINE \" ; else echo \" Prime \" , \" STRNEWLINE \" ; ? >"}
{"text":"Return the nth Motzkin Number .","code":"< ? php function motzkin ( $ n ) {"}
{"text":"Base Case","code":"if ( $ n == 0 $ n == 1 ) return 1 ;"}
{"text":"Recursive step","code":"return ( ( 2 * $ n + 1 ) * motzkin ( $ n - 1 ) + ( 3 * $ n - 3 ) * motzkin ( $ n - 2 ) ) \/ ( $ n + 2 ) ; }"}
{"text":"Driven Code","code":"$ n = 8 ; echo ( motzkin ( $ n ) ) ; ? >"}
{"text":"function which return the the sum of series","code":"< ? php function sumOfSeries ( $ n ) { return ( 0.666 ) * ( 1 - 1 \/ pow ( 10 , $ n ) ) ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"Function to count digits","code":"< ? php function countDigit ( $ n ) { if ( $ n == 0 ) return 0 ; return ( 1 + countDigit ( $ n \/ 10 ) ) ; }"}
{"text":"Returns true if n is Narcissistic number","code":"function check ( $ n ) {"}
{"text":"count the number of digits","code":"$ l = countDigit ( $ n ) ; $ dup = $ n ; $ sum = 0 ;"}
{"text":"calculates the sum of digits raised to power","code":"while ( $ dup ) { $ sum += pow ( $ dup % 10 , $ l ) ; $ dup = ( int ) $ dup \/ 10 ; } return ( $ n == $ sum ) ; }"}
{"text":"Driver Code","code":"$ n = 1634 ; if ( check ( ! $ n ) ) echo \" yes \" ; else echo \" no \" ; ? >"}
{"text":"Function to calculate sum","code":"< ? php function summation ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += ( $ i * $ i ) ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo summation ( $ n ) ; ? >"}
{"text":"PHP program to print first N Leyland Numbers .","code":"< ? php $ MAX = 100 ;"}
{"text":"Print first n Leyland Number .","code":"function leyland ( $ n ) { $ ans ; $ index = 0 ;"}
{"text":"Outer loop for x from 2 to n .","code":"for ( $ x = 2 ; $ x <= $ n ; $ x ++ ) {"}
{"text":"Inner loop for y from 2 to x .","code":"for ( $ y = 2 ; $ y <= $ x ; $ y ++ ) {"}
{"text":"Calculating x ^ y + y ^ x","code":"$ temp = pow ( $ x , $ y ) + pow ( $ y , $ x ) ; $ ans [ $ index ] = $ temp ; $ index ++ ; } }"}
{"text":"Sorting the all Leyland Number .","code":"sort ( $ ans ) ;"}
{"text":"Printing first n Leyland number .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ ans [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 6 ; leyland ( $ n ) ; ? >"}
{"text":"Return the sum of k - th group of positive odd integers .","code":"< ? php function kthgroupsum ( $ k ) {"}
{"text":"Finding first element of kth group .","code":"$ cur = ( $ k * ( $ k - 1 ) ) + 1 ; $ sum = 0 ;"}
{"text":"Finding the sum .","code":"while ( $ k -- ) { $ sum += $ cur ; $ cur += 2 ; } return $ sum ; }"}
{"text":"Driver code","code":"$ k = 3 ; echo kthgroupsum ( $ k ) ; ? >"}
{"text":"Returns n - th term of the series 2 , 12 , 36 , 80 , 150","code":"< ? php function nthTerm ( $ n ) { return ( $ n * $ n ) + ( $ n * $ n * $ n ) ; }"}
{"text":"driver code","code":"$ n = 4 ; echo ( nthTerm ( $ n ) ) ; ? >"}
{"text":"Function to find the sum of series","code":"< ? php function seriesSum ( $ n ) { return ( $ n * ( $ n + 1 ) * ( $ n + 2 ) ) \/ 6 ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo ( seriesSum ( $ n ) ) ; ? >"}
{"text":"Function to calculate speed","code":"< ? php function cal_speed ( $ dist , $ time ) { echo \" Distance ( km ) : \" echo \" Time ( hr ) : \" return $ dist \/ $ time ; }"}
{"text":"Function to calculate distance traveled","code":"function cal_dis ( $ speed , $ time ) { echo \" Time ( hr ) : \" echo \" Speed ( km \/ hr ) : \" return $ speed * $ time ; }"}
{"text":"Function to calculate time taken","code":"function cal_time ( $ dist , $ speed ) { echo \" Distance ( km ) : \" echo \" Speed ( km \/ hr ) : \" return $ speed * $ dist ; }"}
{"text":"Calling function cal_speed ( )","code":"echo \" \u2581 The \u2581 calculated \u2581 Speed ( km \u2581 \/ \u2581 hr ) \u2581 is \u2581 : \u2581 \" . cal_speed ( 45.9 , 2.0 ) . \" STRNEWLINE \" ;"}
{"text":"Calling function cal_dis ( )","code":"echo \" The calculated Distance ( km ) : \" . cal_dis ( 62.9 , 2.5 ) . \" \" ;"}
{"text":"Calling function cal_time ( )","code":"echo \" The calculated Time ( hr ) : \" . cal_time ( 48.0 , 4.5 ) . \" \" ; ? >"}
{"text":"PHP Program to print format of factorial","code":"< ? php function find_factorial ( $ num1 , $ num2 ) {"}
{"text":"vector for store the result","code":"$ vec ; $ t = 0 ;"}
{"text":"variable for store the each number factorial","code":"$ fac = 1 ;"}
{"text":"copy of first number","code":"$ temp = $ num1 ;"}
{"text":"found first number factorial","code":"while ( 1 ) { if ( $ temp == 1 ) break ; $ fac *= $ temp ; $ temp -- ; }"}
{"text":"push the first number in result vector","code":"$ vec [ $ t ++ ] = $ fac ;"}
{"text":"incerement the first number","code":"$ num1 ++ ;"}
{"text":"found the all reaming number factorial loop is working until all required number factorial founded","code":"while ( $ num1 <= $ num2 ) { $ fac *= $ num1 ;"}
{"text":"store the result of factorial","code":"$ vec [ $ t ++ ] = $ fac ;"}
{"text":"incerement the first number","code":"$ num1 ++ ; }"}
{"text":"return the result","code":"return ( $ vec ) ; }"}
{"text":"function for print the result","code":"function print_format ( $ result ) {"}
{"text":"setw ( ) is used for fill the blank right is used for right justification of data","code":"$ x = count ( $ result ) ; $ digits = strlen ( ( string ) $ result [ $ x - 1 ] ) ; for ( $ i = 0 ; $ i < $ x ; $ i ++ ) { echo str_pad ( $ result [ $ i ] , ( $ digits + 1 ) , \" \" , \u2581 STR _ PAD _ LEFT ) \u2581 . \u2581 \" \" } }"}
{"text":"number which found the factorial of between range","code":"$ m = 10 ; $ n = 20 ;"}
{"text":"store the result of factorial","code":"$ result_fac ;"}
{"text":"function for found factorial","code":"$ result_fac = find_factorial ( $ m , $ n ) ;"}
{"text":"function for print format","code":"print_format ( $ result_fac ) ; ? >"}
{"text":"Function to find the nth term of series","code":"< ? php function term ( $ n ) {"}
{"text":"Loop to add numbers","code":"$ ans = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ ans += $ i ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo ( term ( $ n ) ) ; ? >"}
{"text":"Return the average of first n natural numbers","code":"< ? php function avgOfFirstN ( $ n ) { return ( float ) ( 1 + $ n ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 20 ; echo ( avgOfFirstN ( $ n ) ) ; ? >"}
{"text":"Function for finding summation","code":"< ? php function summation ( $ n ) { $ sum ; $ sum = ( pow ( 10 , $ n + 1 ) - 10 - ( 9 * $ n ) ) \/ 81 ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo summation ( $ n ) ; ? >"}
{"text":"code to print the sum of the series","code":"< ? php function sum ( $ x , $ n ) { $ i ; $ total = 1.0 ; $ multi = $ x ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ total = $ total + $ multi \/ $ i ; $ multi = $ multi * $ x ; } return $ total ; }"}
{"text":"Driver code","code":"$ x = 2 ; $ n = 5 ; echo ( sum ( $ x , $ n ) ) ; ? >"}
{"text":"function to solve the quadratic equation","code":"< ? php function term ( $ n ) {"}
{"text":"calculating the Nth term","code":"$ x = ( ( ( 1 ) + ( double ) sqrt ( 1 + ( 8 * $ n ) ) ) \/ 2 ) ; return $ x ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( ( int ) term ( $ n ) ) ; ? >"}
{"text":"Returns count of digits in n .","code":"< ? php function countDigits ( $ n ) { $ c = 0 ; do { $ c ++ ; $ n = $ n \/ 10 ; } while ( $ n != 0 ) ; return $ c ; }"}
{"text":"Returns true if x is Diserium","code":"function isDeserium ( $ x ) { $ temp = $ x ; $ p = countDigits ( $ x ) ;"}
{"text":"Compute powers of digits from right to left .","code":"$ sum = 0 ; while ( $ x != 0 ) { $ digit = $ x % 10 ; $ sum += pow ( $ digit , $ p ) ; $ p -- ; $ x = $ x \/ 10 ; }"}
{"text":"If sum of powers is same as given number .","code":"return ( $ sum == $ temp ) ; }"}
{"text":"Driver Code","code":"$ x = 135 ; if ( isDeserium ( $ x ) ) echo \" No \" ; else echo \" Yes \" ; ? >"}
{"text":"__gcd function","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"function return number which divides these three number and leaves same remainder .","code":"function sameRemainder ( $ a , $ b , $ c ) {"}
{"text":"We find the differences of all three pairs","code":"$ a1 = ( $ b - $ a ) ; $ b1 = ( $ c - $ b ) ; $ c1 = ( $ c - $ a ) ;"}
{"text":"Return GCD of three differences .","code":"return gcd ( $ a1 , gcd ( $ b1 , $ c1 ) ) ; }"}
{"text":"Driver Code","code":"$ a = 62 ; $ b = 132 ; $ c = 237 ; echo sameRemainder ( $ a , $ b , $ c ) ; ? >"}
{"text":"Function to find mean of series .","code":"< ? php function mean ( $ arr , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + $ arr [ $ i ] ; $ mean = ( float ) ( $ sum \/ $ n ) ; return $ mean ; }"}
{"text":"Function to find the standard deviation of series .","code":"function sd ( $ arr , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + ( $ arr [ $ i ] - mean ( $ arr , $ n ) ) * ( $ arr [ $ i ] - mean ( $ arr , $ n ) ) ; $ sdd = $ sum \/ $ n ; return $ sdd ; }"}
{"text":"Function to find combined variance of two different series .","code":"function combinedVariance ( $ arr1 , $ arr2 , $ n , $ m ) {"}
{"text":"mean1 and mean2 are the mean of two arrays .","code":"$ mean1 = mean ( $ arr1 , $ n ) ; $ mean2 = mean ( $ arr2 , $ m ) ; echo ( \" Mean1 : \u2581 \" . round ( $ mean1 , 2 ) . \" \" \u2581 . STRNEWLINE \" mean2 : \""}
{"text":"sd1 and sd2 are the standard deviation of two array .","code":"$ sd1 = sd ( $ arr1 , $ n ) ; $ sd2 = sd ( $ arr2 , $ m ) ; echo ( \" StandardDeviation1 : \" \u2581 . \u2581 round ( $ sd1 , \u2581 2 ) \u2581 . \u2581 \" \" STRNEWLINE . \u2581 \" StandardDeviation2 : \""}
{"text":"combinedMean is variable to store the combined mean of both array .","code":"$ combinedMean = ( float ) ( $ n * $ mean1 + $ m * $ mean2 ) \/ ( $ n + $ m ) ; echo ( \" Combined Mean : \" round ( $ combinedMean , 2 ) ) ;"}
{"text":"d1_square and d2_square are the combined mean deviation .","code":"$ d1_square = ( $ mean1 - $ combinedMean ) * ( $ mean1 - $ combinedMean ) ; $ d2_square = ( $ mean2 - $ combinedMean ) * ( $ mean2 - $ combinedMean ) ; echo ( \" d1 square : \" \u2581 . \u2581 round ( $ d1 _ square , \u2581 2 ) \u2581 . \u2581 \" \" STRNEWLINE . \u2581 \" d2_square : \""}
{"text":"combinedVar is variable to store combined variance of both array .","code":"$ combinedVar = ( $ n * ( $ sd1 + $ d1_square ) + $ m * ( $ sd2 + $ d2_square ) ) \/ ( $ n + $ m ) ; return $ combinedVar ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 23 , 45 , 34 , 78 , 12 , 76 , 34 ) ; $ arr2 = array ( 65 , 67 , 34 , 23 , 45 ) ; $ n = sizeof ( $ arr1 ) ; $ m = sizeof ( $ arr2 ) ;"}
{"text":"Function call to combined mean .","code":"echo ( \" Combined Variance : \" . round ( combinedVariance ( $ arr1 , $ arr2 , $ n , $ m ) , 2 ) ) ; ? >"}
{"text":"Returns true if number is divisible by 13 else returns false","code":"< ? php function checkDivisibility ( $ num ) { $ length = strlen ( $ num ) ; if ( $ length == 1 && $ num [ 0 ] == '0' ) return true ;"}
{"text":"Append required 0 s at the beginning .","code":"if ( $ length % 3 == 1 ) {"}
{"text":"Same as strcat ( num , \"00\" ) ; in c .","code":"$ num += \"00\" ; $ length += 2 ; } else if ( $ length % 3 == 2 ) {"}
{"text":"Same as strcat ( num , \"0\" ) ; in c .","code":"$ num += \"0\" ; $ length += 1 ; }"}
{"text":"Alternatively add \/ subtract digits in group of three to result .","code":"$ sum = 0 ; $ p = 1 ; for ( $ i = $ length - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Store group of three numbers in group variable .","code":"$ group = 0 ; $ group += $ num [ $ i -- ] - '0' ; $ group += ( $ num [ $ i -- ] - '0' ) * 10 ; $ group += ( $ num [ $ i ] - '0' ) * 100 ; $ sum = $ sum + $ group * $ p ;"}
{"text":"Generate alternate series of plus and minus","code":"$ p *= ( -1 ) ; } $ sum = abs ( $ sum ) ; return ( $ sum % 13 == 0 ) ; }"}
{"text":"Driver code","code":"$ number = \"83959092724\" ; if ( checkDivisibility ( $ number ) ) echo ( $ number . \" \u2581 is \u2581 divisible \u2581 by \u2581 13 . \" ) ; else echo ( $ number . \" \u2581 is \u2581 not \u2581 divisible \u2581 by \u2581 13 . \" ) ; ? >"}
{"text":"PHP program to find x such that a % x is equal to b .","code":"< ? php function modularEquation ( $ a , $ b ) {"}
{"text":"if a is less than b then no solution","code":"if ( $ a < $ b ) { echo \" No \u2581 solution \u2581 possible \u2581 \" ; return ; }"}
{"text":"if a is equal to b then every number greater than a will be the solution so its infinity","code":"if ( $ a == $ b ) { echo \" Infinite \u2581 Solution \u2581 possible \u2581 \" ; return ; }"}
{"text":"count variable store the number of values possible","code":"$ count = 0 ; $ n = $ a - $ b ; $ y = sqrt ( $ a - $ b ) ; for ( $ i = 1 ; $ i <= $ y ; ++ $ i ) { if ( $ n % $ i == 0 ) {"}
{"text":"checking for both divisor and quotient whether they divide ( a - b ) completely and greater than b .","code":"if ( $ n \/ $ i > $ b ) $ count ++ ; if ( $ i > $ b ) $ count ++ ; } }"}
{"text":"Here y is added twice in the last iteration so 1 y should be decremented to get correct solution","code":"if ( $ y * $ y == $ n && $ y > $ b ) $ count -- ; echo $ count ; }"}
{"text":"Driver Code","code":"$ a = 21 ; $ b = 5 ; modularEquation ( $ a , $ b ) ; ? >"}
{"text":"Function to count ' num ' as sum of digits ( 1 , 2 , 3 , 4 )","code":"< ? php function countWays ( $ num ) {"}
{"text":"Initialize dp [ ] array","code":"$ dp [ $ num + 1 ] = array ( ) ; $ MOD = 100000000 + 7 ;"}
{"text":"Base case","code":"$ dp [ 1 ] = 2 ; for ( $ i = 2 ; $ i <= $ num ; ++ $ i ) {"}
{"text":"Initialize the current dp [ ] array as '0'","code":"$ dp [ $ i ] = 0 ; for ( $ j = 1 ; $ j <= 3 ; ++ $ j ) {"}
{"text":"if i == j then there is only one way to write with element itself ' i '","code":"if ( $ i - $ j == 0 ) $ dp [ $ i ] += 1 ;"}
{"text":"If j == 1 , then there exist two ways , one from '1' and other from '4'","code":"else if ( $ j == 1 ) $ dp [ $ i ] += $ dp [ $ i - $ j ] * 2 ;"}
{"text":"if i - j is positive then pick the element from ' i - j ' element of dp [ ] array","code":"else if ( $ i - $ j > 0 ) $ dp [ $ i ] += $ dp [ $ i - $ j ] ;"}
{"text":"Check for modulas","code":"if ( $ dp [ $ i ] >= $ MOD ) $ dp [ $ i ] %= $ MOD ; } }"}
{"text":"return the final answer","code":"return $ dp [ $ num ] ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo countWays ( $ n ) ; ? >"}
{"text":"Check whether a number can be represented by sum of two squares using Fermat Theorem .","code":"< ? php function judgeSquareSum ( $ n ) { for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) { $ count = 0 ; if ( $ n % $ i == 0 ) {"}
{"text":"Count all the prime factors .","code":"while ( $ n % $ i == 0 ) { $ count ++ ; $ n = ( int ) $ n \/ $ i ; }"}
{"text":"Ifany prime factor of the form ( 4 k + 3 ) ( 4 k + 3 ) occurs an odd number of times .","code":"if ( $ i % 4 == 3 && $ count % 2 != 0 ) return false ; } }"}
{"text":"If n itself is a x prime number and can be expressed in the form of 4 k + 3 we return false .","code":"return $ n % 4 != 3 ; }"}
{"text":"Driver Code","code":"$ n = 17 ; if ( judgeSquareSum ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to count the frequency of 1.","code":"< ? php function countDigitOne ( $ n ) { $ countr = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i *= 10 ) { $ divider = $ i * 10 ; $ countr += ( int ) ( $ n \/ $ divider ) * $ i + min ( max ( $ n % $ divider - $ i + 1 , 0 ) , $ i ) ; } return $ countr ; }"}
{"text":"Driver Code","code":"$ n = 13 ; echo countDigitOne ( $ n ) , \" STRNEWLINE \" ; $ n = 113 ; echo countDigitOne ( $ n ) , \" STRNEWLINE \" ; $ n = 205 ; echo countDigitOne ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"check if character is prime","code":"< ? php function isPrime ( $ c ) { return ( $ c == '2' $ c == '3' $ c == '5' $ c == '7' ) ? 1 : 0 ; }"}
{"text":"replace with previous prime character","code":"function decrease ( $ s , $ i ) {"}
{"text":"if 2 erase s [ i ] and replace next with 7","code":"if ( $ s [ $ i ] <= '2' ) { $ s [ $ i ] = ' * ' ; $ a = str_split ( $ s ) ; $ s = \" \" ; for ( $ h = 0 ; $ h < count ( $ a ) ; $ h ++ ) if ( $ a [ $ h ] != ' * ' ) $ s = $ s . $ a [ $ h ] ; $ s [ $ i ] = '7' ; } else if ( $ s [ $ i ] == '3' ) $ s [ $ i ] = '2' ; else if ( $ s [ $ i ] <= '5' ) $ s [ $ i ] = '3' ; else if ( $ s [ $ i ] <= '7' ) $ s [ $ i ] = '5' ; else $ s [ $ i ] = '7' ; return $ s ; } function primeDigits ( $ s ) { for ( $ i = 0 ; $ i < strlen ( $ s ) ; $ i ++ ) {"}
{"text":"find first non prime char","code":"if ( isPrime ( $ s [ $ i ] ) == 0 ) {"}
{"text":"find first char greater than 2","code":"while ( $ i >= 0 && $ s [ $ i ] <= '2' ) -- $ i ;"}
{"text":"like 20","code":"if ( $ i < 0 ) { $ i = 0 ; $ s = decrease ( $ s , $ i ) ; }"}
{"text":"like 7721","code":"else $ s = decrease ( $ s , $ i ) ;"}
{"text":"replace remaining with 7","code":"for ( $ j = $ i + 1 ; $ j < strlen ( $ s ) ; $ j ++ ) $ s [ $ j ] = '7' ; break ; } } return $ s ; }"}
{"text":"Driver code","code":"$ s = \"45\" ; echo primeDigits ( $ s ) . \" STRNEWLINE \" ; $ s = \"1000\" ; echo primeDigits ( $ s ) . \" STRNEWLINE \" ; $ s = \"7721\" ; echo primeDigits ( $ s ) . \" STRNEWLINE \" ; $ s = \"7221\" ; echo primeDigits ( $ s ) . \" STRNEWLINE \" ; $ s = \"74545678912345689748593275897894708927680\" ; echo primeDigits ( $ s ) ; ? >"}
{"text":"Function to print the number divisible by 6 after exactly removing a digit","code":"< ? php function greatest ( $ s ) { $ n = strlen ( $ s ) ; $ a [ $ n ] = array ( ) ;"}
{"text":"stores the sum of all elements","code":"$ sum = 0 ;"}
{"text":"traverses the string and converts string to number array and sums up","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ a [ $ i ] = $ s [ $ i ] - '0' ; $ sum += $ a [ $ i ] ; }"}
{"text":"if ( $a [ $n - 1 ] % 2 ) ODD CHECK","code":"{"}
{"text":"if second last is odd or sum of n - 1 elements are not divisible by 3.","code":"if ( $ a [ $ n - 2 ] % 2 != 0 or ( $ sum - $ a [ $ n - 1 ] ) % 3 != 0 ) { echo \" - 1\" , \" STRNEWLINE \" ; }"}
{"text":"second last is even and print n - 1 elements removing last digit","code":"else {"}
{"text":"last digit removed","code":"echo $ n , \" STRNEWLINE \" ; } } else { $ re = $ sum % 3 ; $ del = -1 ;"}
{"text":"counter to check if any element after removing , its sum % 3 == 0","code":"$ flag = 0 ;"}
{"text":"traverse till second last element","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"to check if any element after removing , its sum % 3 == 0","code":"if ( ( $ a [ $ i ] ) % 3 == $ re ) {"}
{"text":"the leftmost element","code":"if ( $ a [ $ i + 1 ] > $ a [ $ i ] ) { $ del = $ i ; $ flag = 1 ;"}
{"text":"break at the leftmost element","code":"break ; } else {"}
{"text":"stores the right most element","code":"$ del = $ i ; } } }"}
{"text":"if no element has been found as a [ i + 1 ] > a [ i ]","code":"if ( $ flag == 0 ) {"}
{"text":"if second last is even , then remove last if ( sum - last ) % 3 == 0","code":"if ( $ a [ $ n - 2 ] % 2 == 0 and $ re == $ a [ $ n - 1 ] % 3 ) $ del = $ n - 1 ; }"}
{"text":"if no element which on removing gives sum % 3 == 0","code":"if ( $ del == -1 ) echo - 1 , \" STRNEWLINE \" ; else { echo $ del + 1 , \" STRNEWLINE \" ; } } }"}
{"text":"Driver Code","code":"$ s = \"7510222\" ; greatest ( $ s ) ; ? >"}
{"text":"PHP program to check if m can be represented as powers of w .","code":"< ? php function asPowerSum ( $ w , $ m ) { while ( $ m ) { if ( ( $ m - 1 ) % $ w == 0 ) $ m = ( $ m - 1 ) \/ $ w ; else if ( ( $ m + 1 ) % $ w == 0 ) $ m = ( $ m + 1 ) \/ $ w ; else if ( $ m % $ w == 0 ) $ m = $ m \/ $ w ; else"}
{"text":"break ; None of 3 worked .","code":"}"}
{"text":"If m is not zero means , it can 't be  represented in terms of powers of w.","code":"return ( $ m == 0 ) ; }"}
{"text":"Driver code","code":"$ w = 3 ; $ m = 7 ; if ( asPowerSum ( $ w , $ m ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"function to count the no of removal of digits to make a very large number divisible by 3","code":"< ? php function divisible ( $ num ) { $ n = strlen ( $ num ) ;"}
{"text":"add up all the digits of num","code":"$ sum = ( $ num ) ; ( $ num ) ; 0 - '0' ;"}
{"text":"if num is already is divisible by 3 then no digits are to be removed","code":"if ( $ sum % 3 == 0 ) return 0 ;"}
{"text":"if there is single digit , then it is not possible to remove one digit .","code":"if ( $ n == 1 ) return -1 ;"}
{"text":"traverse through the number and find out if any number on removal makes the sum divisible by 3","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ sum % 3 == ( $ num [ $ i ] - '0' ) % 3 ) return 1 ;"}
{"text":"if there are two numbers then it is not possible to remove two digits .","code":"if ( $ n == 2 ) return -1 ;"}
{"text":"Otherwise we can always make a number multiple of 2 by removing 2 digits .","code":"return 2 ; }"}
{"text":"Driver Code","code":"$ num = \"1234\" ; echo divisible ( $ num ) ; ? >"}
{"text":"PHP implementation for dot product and cross product of two vector .","code":"< ? php $ n = 3 ;"}
{"text":"Function that return dot product of two vector array .","code":"function dotproduct ( $ vect_A , $ vect_B ) { global $ n ; $ product = 0 ;"}
{"text":"Loop for calculate cot product","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ product = $ product + $ vect_A [ $ i ] * $ vect_B [ $ i ] ; return $ product ; }"}
{"text":"Function to find cross product of two vector array .","code":"function crossproduct ( $ vect_A , $ vect_B , $ cross_P ) { $ cross_P [ 0 ] = $ vect_A [ 1 ] * $ vect_B [ 2 ] - $ vect_A [ 2 ] * $ vect_B [ 1 ] ; $ cross_P [ 1 ] = $ vect_A [ 2 ] * $ vect_B [ 0 ] - $ vect_A [ 0 ] * $ vect_B [ 2 ] ; $ cross_P [ 2 ] = $ vect_A [ 0 ] * $ vect_B [ 1 ] - $ vect_A [ 1 ] * $ vect_B [ 0 ] ; return $ cross_P ; }"}
{"text":"Driver Code","code":"$ vect_A = array ( 3 , -5 , 4 ) ; $ vect_B = array ( 2 , 6 , 5 ) ; $ cross_P = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"dotproduct function call","code":"echo \" Dot \u2581 product : \" ; echo dotproduct ( $ vect_A , $ vect_B ) ;"}
{"text":"crossproduct function call","code":"echo \" Cross product : \" $ cross_P = crossproduct ( $ vect_A , $ vect_B , $ cross_P ) ;"}
{"text":"Loop that print cross product of two vector array .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ cross_P [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Initialize mod variable as constant","code":"< ? php $ MOD = 1000000000.0 ;"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"function power ( $ x , $ y , $ p ) {"}
{"text":"Initialize result","code":"$ res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"$ x = $ x % $ p ; while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( 1 * $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( 1 * $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Return number of ways to write ' n ' as sum of even integers","code":"function countEvenWays ( $ n ) { global $ MOD ; return power ( 2 , $ n \/ 2 - 1 , $ MOD ) ; }"}
{"text":"Driver code","code":"$ n = 6 ; echo countEvenWays ( $ n ) , \" STRNEWLINE \" ; $ n = 8 ; echo countEvenWays ( $ n ) ; ? >"}
{"text":"PHP program to count number of steps required to convert an integer array to array of factors .","code":"< ? php $ MAX = 100001 ;"}
{"text":"array to store prime factors","code":"$ factor = array_fill ( 0 , $ MAX + 1 , 0 ) ;"}
{"text":"function to generate all prime factors of numbers from 1 to 10 ^ 6","code":"function cal_factor ( ) { global $ factor , $ MAX ; $ factor [ 1 ] = 1 ;"}
{"text":"Initializes all the positions with their value .","code":"for ( $ i = 2 ; $ i < $ MAX ; $ i ++ ) $ factor [ $ i ] = $ i ;"}
{"text":"Initializes all multiples of 2 with 2","code":"for ( $ i = 4 ; $ i < $ MAX ; $ i += 2 ) $ factor [ $ i ] = 2 ;"}
{"text":"A modified version of Sieve of Eratosthenes to store the smallest prime factor that divides every number .","code":"for ( $ i = 3 ; $ i * $ i < $ MAX ; $ i ++ ) {"}
{"text":"check if it has no prime factor .","code":"if ( $ factor [ $ i ] == $ i ) {"}
{"text":"Initializes of j starting from i * i","code":"for ( $ j = $ i * $ i ; $ j < $ MAX ; $ j += $ i ) {"}
{"text":"if it has no prime factor before , then stores the smallest prime divisor","code":"if ( $ factor [ $ j ] == $ j ) $ factor [ $ j ] = $ i ; } } } }"}
{"text":"function to calculate the number of representations","code":"function no_of_representations ( $ a , $ n ) { global $ factor , $ MAX ;"}
{"text":"keep an count of prime factors","code":"$ count = 0 ;"}
{"text":"traverse for every element","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ temp = $ a [ $ i ] ; $ flag = 0 ;"}
{"text":"count the no of factors","code":"while ( $ factor [ $ temp ] != 1 ) { $ flag = -1 ; $ count ++ ; $ temp = ( int ) ( $ temp \/ $ factor [ $ temp ] ) ; }"}
{"text":"subtract 1 if Ai is not 1 as the last step wont be taken into count","code":"$ count += $ flag ; } return $ count ; }"}
{"text":"call sieve to calculate the factors","code":"cal_factor ( ) ; $ a = array ( 4 , 4 , 4 ) ; $ n = count ( $ a ) ; echo no_of_representations ( $ a , $ n ) ; ? >"}
{"text":"Brute Force Implementation ( Time Complexity : O ( N ^ 3 ) ) PHP program to find count of subsequences of size three divisible by M .","code":"< ? php function coutSubSeq ( $ A , $ N , $ M ) { $ sum = 0 ; $ ans = 0 ;"}
{"text":"Three nested loop to find all the sub sequences of length three in the given array A [ ] .","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) { for ( $ k = $ j + 1 ; $ k < $ N ; $ k ++ ) { $ sum = $ A [ $ i ] + $ A [ $ j ] + $ A [ $ k ] ;"}
{"text":"checking if the sum of the chosen three number is divisible by m .","code":"if ( $ sum % $ M == 0 ) $ ans ++ ; } } } return $ ans ; }"}
{"text":"Driver code","code":"$ M = 3 ; $ A = array ( 1 , 2 , 4 , 3 ) ; $ N = count ( $ A ) ; echo coutSubSeq ( $ A , $ N , $ M ) ; ? >"}
{"text":"O ( M ^ 2 ) time complexity PHP program to find count of subsequences of size three divisible by M .","code":"< ? php function countSubSeq ( $ A , $ N , $ M ) { $ ans = 0 ;"}
{"text":"Storing frequencies of all remainders when divided by M .","code":"$ h = array_fill ( 0 , $ M , 0 ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ A [ $ i ] = $ A [ $ i ] % $ M ; $ h [ $ A [ $ i ] ] ++ ; } for ( $ i = 0 ; $ i < $ M ; $ i ++ ) { for ( $ j = $ i ; $ j < $ M ; $ j ++ ) {"}
{"text":"including i and j in the sum rem calculate the remainder required to make the sum divisible by M","code":"$ rem = ( $ M - ( $ i + $ j ) % $ M ) % $ M ;"}
{"text":"if the required number is less than j , we skip as we have already calculated for that value before . As j here starts with i and rem is less than j .","code":"if ( $ rem < $ j ) continue ;"}
{"text":"if satisfies the first case .","code":"if ( $ i == $ j && $ rem == $ j ) $ ans += $ h [ $ i ] * ( $ h [ $ i ] - 1 ) * ( $ h [ $ i ] - 2 ) \/ 6 ;"}
{"text":"if satisfies the second case","code":"else if ( $ i == $ j ) $ ans += $ h [ $ i ] * ( $ h [ $ i ] - 1 ) * $ h [ $ rem ] \/ 2 ; else if ( $ i == $ rem ) $ ans += $ h [ $ i ] * ( $ h [ $ i ] - 1 ) * $ h [ $ j ] \/ 2 ; else if ( $ rem == $ j ) $ ans += $ h [ $ j ] * ( $ h [ $ j ] - 1 ) * $ h [ $ i ] \/ 2 ;"}
{"text":"if satisfies the third case","code":"else $ ans = $ ans + $ h [ $ i ] * $ h [ $ j ] * $ h [ $ rem ] ; } } return $ ans ; }"}
{"text":"Driver code","code":"$ M = 3 ; $ A = array ( 1 , 2 , 4 , 3 ) ; $ N = count ( $ A ) ; echo countSubSeq ( $ A , $ N , $ M ) ; ? >"}
{"text":"utility function","code":"< ? php function findTerm ( $ n ) { if ( $ n == 1 ) return $ n ; else {"}
{"text":"since first element of the series is 7 , we initialise a variable with 7","code":"$ term = 7 ;"}
{"text":"Using iteration to find nth term","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ term = $ term * 2 + ( $ i - 1 ) ; return $ term ; } }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( findTerm ( $ n ) ) ; ? >"}
{"text":"Returns n - th number in sequence 1 , 1 , 2 , 1 , 2 , 3 , 1 , 2 , 4 , ...","code":"< ? php function findNumber ( $ n ) { $ n -- ;"}
{"text":"One by one subtract counts elements in different blocks","code":"$ i = 1 ; while ( $ n >= 0 ) { $ n -= $ i ; ++ $ i ; } return ( $ n + $ i ) ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo findNumber ( $ n ) ; ? >"}
{"text":"function that returns correlation coefficient .","code":"< ? php function correlationCoefficient ( $ X , $ Y , $ n ) { $ sum_X = 0 ; $ sum_Y = 0 ; $ sum_XY = 0 ; $ squareSum_X = 0 ; $ squareSum_Y = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"sum of elements of array X .","code":"$ sum_X = $ sum_X + $ X [ $ i ] ;"}
{"text":"sum of elements of array Y .","code":"$ sum_Y = $ sum_Y + $ Y [ $ i ] ;"}
{"text":"sum of X [ i ] * Y [ i ] .","code":"$ sum_XY = $ sum_XY + $ X [ $ i ] * $ Y [ $ i ] ;"}
{"text":"sum of square of array elements .","code":"$ squareSum_X = $ squareSum_X + $ X [ $ i ] * $ X [ $ i ] ; $ squareSum_Y = $ squareSum_Y + $ Y [ $ i ] * $ Y [ $ i ] ; }"}
{"text":"use formula for calculating correlation coefficient .","code":"$ corr = ( float ) ( $ n * $ sum_XY - $ sum_X * $ sum_Y ) \/ sqrt ( ( $ n * $ squareSum_X - $ sum_X * $ sum_X ) * ( $ n * $ squareSum_Y - $ sum_Y * $ sum_Y ) ) ; return $ corr ; }"}
{"text":"Driver Code","code":"$ X = array ( 15 , 18 , 21 , 24 , 27 ) ; $ Y = array ( 25 , 25 , 27 , 31 , 32 ) ;"}
{"text":"Find the size of array .","code":"$ n = sizeof ( $ X ) ;"}
{"text":"Function call to correlationCoefficient .","code":"echo correlationCoefficient ( $ X , $ Y , $ n ) ; ? >"}
{"text":"PHP program to find number of spectators standing at a time","code":"< ? php function result ( $ n , $ k , $ t ) {"}
{"text":"If the time is less than k then we can print directly t time .","code":"if ( $ t <= $ k ) echo t ;"}
{"text":"If the time is n then k spectators are standing .","code":"else if ( $ t <= $ n ) echo k ;"}
{"text":"Otherwise we calculate the spectators standing .","code":"else { $ temp = $ t - $ n ; $ temp = $ k - $ temp ; echo $ temp ; } }"}
{"text":"Stores the value of n , k and t t is time n & k is the number of specators","code":"$ n = 10 ; $ k = 5 ; $ t = 12 ; result ( $ n , $ k , $ t ) ; ? >"}
{"text":"Function to calculate weighted mean .","code":"< ? php function weightedMean ( $ X , $ W , $ n ) { $ sum = 0 ; $ numWeight = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ numWeight = $ numWeight + $ X [ $ i ] * $ W [ $ i ] ; $ sum = $ sum + $ W [ $ i ] ; } return ( float ) ( $ numWeight \/ $ sum ) ; }"}
{"text":"Take num array and corresponding weight array and initialize it .","code":"$ X = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ) ; $ W = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ) ;"}
{"text":"Calculate the size of array .","code":"$ n = sizeof ( $ X ) ; $ m = sizeof ( $ W ) ;"}
{"text":"Check the size of both array is equal or not .","code":"if ( $ n == $ m ) echo ( weightedMean ( $ X , $ W , $ n ) ) ; else echo ( \" - 1\" ) ; ? >"}
{"text":"Recursive function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a < $ b ) return gcd ( $ b , $ a ) ;"}
{"text":"base case","code":"if ( abs ( $ b ) < 0.001 ) return $ a ; else return ( gcd ( $ b , $ a - floor ( $ a \/ $ b ) * $ b ) ) ; }"}
{"text":"Driver Code","code":"$ a = 1.20 ; $ b = 22.5 ; echo gcd ( $ a , $ b ) ; ? >"}
{"text":"Function that returns harmonic mean .","code":"< ? php function harmonicMean ( $ arr , $ n ) {"}
{"text":"Declare sum variables and initialize with zero","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + ( float ) ( 1 \/ $ arr [ $ i ] ) ; return ( float ) ( $ n \/ $ sum ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 13.5 , 14.5 , 14.8 , 15.2 , 16.1 ) ; $ n = sizeof ( $ arr ) ; echo ( harmonicMean ( $ arr , $ n ) ) ; ? >"}
{"text":"Function that returns harmonic mean .","code":"< ? php function harmonicMean ( $ arr , $ freq , $ n ) { $ sum = 0 ; $ frequency_sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + ( float ) ( $ freq [ $ i ] \/ $ arr [ $ i ] ) ; $ frequency_sum = $ frequency_sum + $ freq [ $ i ] ; } return ( $ frequency_sum \/ $ sum ) ; }"}
{"text":"Driver code","code":"$ num = array ( 13 , 14 , 15 , 16 , 17 ) ; $ freq = array ( 2 , 5 , 13 , 7 , 3 ) ; $ n = sizeof ( $ num ) ; echo ( harmonicMean ( $ num , $ freq , $ n ) ) ; ? >"}
{"text":"PHP program to calculate the colliding point of two series","code":"< ? php function point ( $ a , $ b , $ c , $ d , $ n ) { $ x ; $ flag = 0 ;"}
{"text":"Iterating through n terms of the first series","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"x is i - th term of first series","code":"$ x = $ b + $ i * $ a ;"}
{"text":"d is first element of second series and c is common difference for second series .","code":"if ( ( $ x - $ d ) % $ c == 0 and $ x - $ d >= 0 ) { echo $ x ; $ flag = 1 ; break ; } }"}
{"text":"If no term of first series is found","code":"if ( $ flag == 0 ) { echo \" No \u2581 collision \u2581 po $ \" ; } }"}
{"text":"Driver Code","code":"$ a = 20 ; $ b = 2 ; $ c = 9 ; $ d = 19 ; $ n = 20 ; point ( $ a , $ b , $ c , $ d , $ n ) ; ? >"}
{"text":"Prints Armstrong Numbers in given range","code":"< ? php function findArmstrong ( $ low , $ high ) { for ( $ i = $ low + 1 ; $ i < $ high ; ++ $ i ) {"}
{"text":"number of digits calculation","code":"$ x = $ i ; $ n = 0 ; while ( $ x != 0 ) { $ x = ( int ) ( $ x \/ 10 ) ; ++ $ n ; }"}
{"text":"compute sum of nth power of its digits","code":"$ pow_sum = 0 ; $ x = $ i ; while ( $ x != 0 ) { $ digit = $ x % 10 ; $ pow_sum += ( int ) ( pow ( $ digit , $ n ) ) ; $ x = ( int ) ( $ x \/ 10 ) ; }"}
{"text":"checks if number i is equal to the sum of nth power of its digits","code":"if ( $ pow_sum == $ i ) echo $ i . \" \" ; } }"}
{"text":"Driver code","code":"$ num1 = 100 ; $ num2 = 400 ; findArmstrong ( $ num1 , $ num2 ) ; ? >"}
{"text":"Find the maximum GCD pair with maximum sum","code":"< ? php function gcdMax ( $ a , $ b , $ n , $ N ) {"}
{"text":"array to keep a count of existing elements","code":"$ cnt = array_fill ( 0 , $ N , 0 ) ;"}
{"text":"first [ i ] and second [ i ] are going to store maximum multiples of i in a [ ] and b [ ] respectively .","code":"$ first = array_fill ( 0 , $ N , 0 ) ; $ second = array_fill ( 0 , $ N , 0 ) ;"}
{"text":"traverse through the first array to mark the elements in cnt","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ cnt [ $ a [ $ i ] ] = 1 ;"}
{"text":"Find maximum multiple of every number in first array","code":"for ( $ i = 1 ; $ i < $ N ; ++ $ i ) for ( $ j = $ i ; $ j < $ N ; $ j += $ i ) if ( $ cnt [ $ j ] ) $ first [ $ i ] = max ( $ first [ $ i ] , $ j ) ;"}
{"text":"Find maximum multiple of every number in second array We re - initialise cnt [ ] and traverse through the second array to mark the elements in cnt","code":"$ cnt = array_fill ( 0 , $ N , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ cnt [ $ b [ $ i ] ] = 1 ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) for ( $ j = $ i ; $ j < $ N ; $ j += $ i )"}
{"text":"if the multiple is present in the second array then store the max of number or the pre - existing element","code":"if ( $ cnt [ $ j ] ) $ second [ $ i ] = max ( $ second [ $ i ] , $ j ) ;"}
{"text":"traverse for every elements and checks the maximum N that is present in both the arrays","code":"$ x = $ N - 1 ; for ( ; $ x >= 0 ; $ x -- ) if ( $ first [ $ x ] && $ second [ $ x ] ) break ; echo $ first [ $ x ] . \" \u2581 \" . $ second [ $ x ] . \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ a = array ( 3 , 1 , 4 , 2 , 8 ) ; $ b = array ( 5 , 2 , 12 , 8 , 3 ) ; $ n = sizeof ( $ a ) ;"}
{"text":"Maximum possible value of elements in both arrays .","code":"$ N = 20 ; gcdMax ( $ a , $ b , $ n , $ N ) ; ? >"}
{"text":"PHP program to print Pierpont prime numbers smaller than n .","code":"< ? php function printPierpont ( $ n ) {"}
{"text":"Finding all numbers having factor power of 2 and 3 Using sieve","code":"$ arr = array_fill ( 0 , $ n + 1 , false ) ; $ two = 1 ; $ three = 1 ; while ( $ two + 1 < $ n ) { $ arr [ $ two ] = true ; while ( $ two * $ three + 1 < $ n ) { $ arr [ $ three ] = true ; $ arr [ $ two * $ three ] = true ; $ three *= 3 ; } $ three = 1 ; $ two *= 2 ; }"}
{"text":"Storing number of the form 2 ^ i . 3 ^ k + 1.","code":"$ v ; $ x = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] ) $ v [ $ x ++ ] = $ i + 1 ;"}
{"text":"Finding prime number using sieve of Eratosthenes . Reusing same array as result of above computations in v .","code":"$ arr1 = array_fill ( 0 , count ( $ arr ) , false ) ; for ( $ p = 2 ; $ p * $ p < $ n ; $ p ++ ) { if ( $ arr1 [ $ p ] == false ) for ( $ i = $ p * 2 ; $ i < $ n ; $ i += $ p ) $ arr1 [ $ i ] = true ; }"}
{"text":"Printing n pierpont primes smaller than n","code":"for ( $ i = 0 ; $ i < $ x ; $ i ++ ) if ( ! $ arr1 [ $ v [ $ i ] ] ) echo $ v [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 200 ; printPierpont ( $ n ) ; ? >"}
{"text":"PHP program to check if a number is Woodball or not .","code":"< ? php function isWoodall ( $ x ) {"}
{"text":"If number is even , return false .","code":"if ( $ x % 2 == 0 ) return false ;"}
{"text":"If x is 1 , return true .","code":"if ( $ x == 1 ) return true ;"}
{"text":"Add 1 to make x even","code":"$ x ++ ;"}
{"text":"While x is divisible by 2","code":"$ p = 0 ; while ( $ x % 2 == 0 ) {"}
{"text":"Divide x by 2","code":"$ x = $ x \/ 2 ;"}
{"text":"Count the power","code":"$ p ++ ;"}
{"text":"If at any point power and x became equal , return true .","code":"if ( $ p == $ x ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ x = 383 ; if ( isWoodall ( $ x ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to generate k numbers whose difference is divisible by m","code":"< ? php function print_result ( $ a , $ n , $ k , $ m ) {"}
{"text":"Using an adjacency list like representation to store numbers that lead to same remainder .","code":"$ v = array_fill ( 0 , $ m + 1 , array ( ) ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"stores the modulus when divided by m","code":"$ rem = $ a [ $ i ] % $ m ; array_push ( $ v [ $ rem ] , $ a [ $ i ] ) ;"}
{"text":"If we found k elements which have same remainder .","code":"if ( count ( $ v [ $ rem ] ) == $ k ) { for ( $ j = 0 ; $ j < $ k ; $ j ++ ) echo $ v [ $ rem ] [ $ j ] . \" \u2581 \" ; return ; } }"}
{"text":"If we could not find k elements","code":"echo \" - 1\" ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 8 , 4 ) ; $ n = count ( $ a ) ; print_result ( $ a , $ n , 2 , 3 ) ; ? >"}
{"text":"Returns smallest value x such that 1 * n , 2 * n , 3 * n ... x * n have all digits from 1 to 9 at least once","code":"< ? php function smallestX ( $ n ) {"}
{"text":"taking temporary array and variable .","code":"$ temp = array_fill ( 0 , 10 , false ) ; if ( $ n == 0 ) return -1 ;"}
{"text":"iterate till we get all the 10 digits at least once","code":"$ count = 0 ; $ x = 0 ; for ( $ x = 1 ; $ count < 10 ; $ x ++ ) { $ y = $ x * $ n ;"}
{"text":"checking all the digits","code":"while ( $ y ) { if ( $ temp [ $ y % 10 ] == false ) { $ count ++ ; $ temp [ $ y % 10 ] = true ; } $ y = ( int ) ( $ y \/ 10 ) ; } } return $ x - 1 ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo smallestX ( $ n ) ; ? >"}
{"text":"utility function for digit sum","code":"< ? php function digSum ( $ n ) { $ sum = 0 ; $ rem = 0 ; while ( $ n ) { $ rem = $ n % 10 ; $ sum += $ rem ; $ n \/= 10 ; } return $ sum ; }"}
{"text":"function for finding x","code":"function findX ( $ n ) {"}
{"text":"iterate from 1 to n . For every no . check if its digit sum with it is equal to n .","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) if ( $ i + digSum ( $ i ) == $ n ) return $ i ;"}
{"text":"if no such i found return - 1","code":"return -1 ; }"}
{"text":"Driver Code","code":"$ n = 43 ; echo \" x \u2581 = \u2581 \" , findX ( $ n ) ; ? >"}
{"text":"PHP program to find 9 's complement of a number.","code":"< ? php function complement ( $ number ) { for ( $ i = 0 ; $ i < strlen ( $ number ) ; $ i ++ ) if ( $ number [ $ i ] != ' . ' ) $ number [ $ i ] = '9' - $ number [ $ i ] + '0' ; echo \"9 ' s \u2581 complement \u2581 is \u2581 : \u2581 \" , $ number ; }"}
{"text":"Driver code","code":"$ number = \"345.45\" ; complement ( $ number ) ; ? >"}
{"text":"To count number of ways in which number expressed as product of two different numbers","code":"< ? php function countWays ( $ n ) {"}
{"text":"To store count of such pairs","code":"$ count = 0 ;"}
{"text":"Counting number of pairs upto sqrt ( n ) - 1","code":"for ( $ i = 1 ; $ i * $ i < $ n ; $ i ++ ) if ( $ n % $ i == 0 ) $ count ++ ;"}
{"text":"To return count of pairs","code":"return $ count ; }"}
{"text":"Driver Code","code":"$ n = 12 ; echo countWays ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to return true if any digit of m is present in hash [ ] .","code":"< ? php function isDigitPresent ( $ m , $ hash ) {"}
{"text":"check till last digit","code":"while ( $ m ) {"}
{"text":"if number is also present in original number then return true","code":"if ( $ hash [ $ m % 10 ] ) return true ; $ m = ( int ) ( $ m \/ 10 ) ; }"}
{"text":"if no number matches then return 1","code":"return false ; }"}
{"text":"Count the no of divisors that have at least 1 digits same","code":"function countDivisibles ( $ n ) {"}
{"text":"Store digits present in n in a hash [ ]","code":"$ hash = array_fill ( 0 , 10 , false ) ; $ m = $ n ; while ( $ m ) {"}
{"text":"marks that the number is present","code":"$ hash [ $ m % 10 ] = true ;"}
{"text":"last digit removed","code":"$ m = ( int ) ( $ m \/ 10 ) ; }"}
{"text":"loop to traverse from 1 to sqrt ( n ) to count divisors","code":"$ ans = 0 ; for ( $ i = 1 ; $ i <= sqrt ( $ n ) ; $ i ++ ) {"}
{"text":"if i is the factor","code":"if ( $ n % $ i == 0 ) {"}
{"text":"call the function to check if any digits match or not","code":"if ( isDigitPresent ( $ i , $ hash ) ) $ ans ++ ; if ( ( int ) ( $ n \/ $ i ) != $ i ) {"}
{"text":"if n \/ i != i then a different number , then check it also","code":"if ( isDigitPresent ( ( int ) ( $ n \/ $ i ) , $ hash ) ) $ ans ++ ; } } }"}
{"text":"return the answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ n = 15 ; echo countDivisibles ( $ n ) ; ? >"}
{"text":"PHP Program to decompose a matrix into lower and upper triangular matrix","code":"< ? php $ MAX = 100 ; function luDecomposition ( $ mat , $ n ) { $ lower ; $ upper ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { $ lower [ $ i ] [ $ j ] = 0 ; $ upper [ $ i ] [ $ j ] = 0 ; }"}
{"text":"Decomposing matrix into Upper and Lower triangular matrix","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Upper Triangular","code":"for ( $ k = $ i ; $ k < $ n ; $ k ++ ) {"}
{"text":"Summation of L ( i , j ) * U ( j , k )","code":"$ sum = 0 ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) $ sum += ( $ lower [ $ i ] [ $ j ] * $ upper [ $ j ] [ $ k ] ) ;"}
{"text":"Evaluating U ( i , k )","code":"$ upper [ $ i ] [ $ k ] = $ mat [ $ i ] [ $ k ] - $ sum ; }"}
{"text":"Lower Triangular","code":"for ( $ k = $ i ; $ k < $ n ; $ k ++ ) { if ( $ i == $ k )"}
{"text":"$lower [ $i ] [ $i ] = 1 ; Diagonal as 1","code":"else {"}
{"text":"Summation of L ( k , j ) * U ( j , i )","code":"$ sum = 0 ; for ( $ j = 0 ; $ j < $ i ; $ j ++ ) $ sum += ( $ lower [ $ k ] [ $ j ] * $ upper [ $ j ] [ $ i ] ) ;"}
{"text":"Evaluating L ( k , i )","code":"$ lower [ $ k ] [ $ i ] = ( int ) ( ( $ mat [ $ k ] [ $ i ] - $ sum ) \/ $ upper [ $ i ] [ $ i ] ) ; } } }"}
{"text":"setw is for displaying nicely","code":"echo \" TABSYMBOL TABSYMBOL Lower \u2581 Triangular \" ; echo \" TABSYMBOL TABSYMBOL TABSYMBOL Upper \u2581 Triangular STRNEWLINE \" ;"}
{"text":"Displaying the result :","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Lower","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) echo \" \" \u2581 . \u2581 $ lower [ $ i ] [ $ j ] \u2581 . \u2581 \" \" echo \" TABSYMBOL \" ;"}
{"text":"Upper","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) echo $ upper [ $ i ] [ $ j ] . \" TABSYMBOL \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"$ mat = array ( array ( 2 , -1 , -2 ) , array ( -4 , 6 , 3 ) , array ( -4 , -2 , 8 ) ) ; luDecomposition ( $ mat , 3 ) ; ? >"}
{"text":"method prints divisible parts if possible , otherwise prints ' Not \u2581 possible '","code":"< ? php function printTwoDivisibleParts ( $ num , $ f , $ s ) { $ N = strlen ( $ num ) ;"}
{"text":"creating arrays to store reminder","code":"$ prefixReminder = array_fill ( 0 , $ N + 1 , 0 ) ; $ suffixReminder = array_fill ( 0 , $ N + 1 , 0 ) ;"}
{"text":"looping over all suffix and storing reminder with f","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ )"}
{"text":"getting suffix reminder from previous suffix reminder","code":"$ suffixReminder [ $ i ] = ( $ suffixReminder [ $ i - 1 ] * 10 + ( ord ( $ num [ $ i - 1 ] ) - 48 ) ) % $ f ; $ base = 1 ;"}
{"text":"looping over all prefix and storing reminder with s","code":"for ( $ i = $ N - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"getting prefix reminder from next prefix reminder","code":"$ prefixReminder [ $ i ] = ( $ prefixReminder [ $ i + 1 ] + ( ord ( $ num [ $ i ] ) - 48 ) * $ base ) % $ s ;"}
{"text":"updating base value","code":"$ base = ( $ base * 10 ) % $ s ; }"}
{"text":"now looping over all reminders to check partition condition","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"if both reminders are 0 and digit itself is not 0 , then print result and return","code":"if ( $ prefixReminder [ $ i ] == 0 && $ suffixReminder [ $ i ] == 0 && $ num [ $ i ] != '0' ) { echo substr ( $ num , 0 , $ i ) . \" \u2581 \" . substr ( $ num , $ i ) . \" STRNEWLINE \" ; return ; } }"}
{"text":"if we reach here , then string can ' be partitioned  under constraints","code":"echo \" Not \u2581 Possible STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ num = \"246904096\" ; $ f = 12345 ; $ s = 1024 ; printTwoDivisibleParts ( $ num , $ f , $ s ) ; ? >"}
{"text":"calculate the no of contiguous subarrays which has same minimum and maximum","code":"< ? php function calculate ( $ a , $ n ) {"}
{"text":"stores the answer","code":"$ ans = 0 ;"}
{"text":"loop to traverse from 0 - n","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"start checking subarray from next element","code":"$ r = $ i + 1 ;"}
{"text":"traverse for finding subarrays","code":"for ( $ j = $ r ; $ j < $ n ; $ j ++ ) {"}
{"text":"if the elements are same then we check further and keep a count of same numbers in ' r '","code":"if ( $ a [ $ i ] == $ a [ $ j ] ) $ r += 1 ; else break ; }"}
{"text":"the no of elements in between r and i with same elements .","code":"$ d = $ r - $ i ;"}
{"text":"the no of subarrays that can be formed between i and r","code":"$ ans += ( $ d * ( $ d + 1 ) \/ 2 ) ;"}
{"text":"again start checking from the next index","code":"$ i = $ r - 1 ; }"}
{"text":"returns answer","code":"return $ ans ; }"}
{"text":"Driver Code","code":"$ a = array ( 2 , 4 , 5 , 3 , 3 , 3 ) ; $ n = count ( $ a ) ; echo calculate ( $ a , $ n ) ; ? >"}
{"text":"function that returns sum of digits in a number","code":"< ? php function sum ( $ n ) { $ rem = 0 ;"}
{"text":"initially sum of digits is 0","code":"$ sum_of_digits = 0 ;"}
{"text":"loop runs till all digits have been extracted","code":"while ( $ n > 0 ) {"}
{"text":"last digit from backside","code":"$ rem = $ n % 10 ;"}
{"text":"sums up the digits","code":"$ sum_of_digits += $ rem ;"}
{"text":"the number is reduced to the number removing the last digit","code":"$ n = $ n \/ 10 ; }"}
{"text":"returns the sum of digits in a number","code":"return $ sum_of_digits ; }"}
{"text":"function to calculate the count of such occurrences","code":"function countt ( $ n ) {"}
{"text":"counter to calculate the occurrences","code":"$ c = 0 ;"}
{"text":"loop to traverse from n - 97 to n","code":"for ( $ i = $ n - 97 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"calls the function to calculate the sum of digits of i","code":"$ a = sum ( $ i ) ;"}
{"text":"calls the function to calculate the sum of digits of a","code":"$ b = sum ( $ a ) ;"}
{"text":"if the summation is equal to n then increase counter by 1","code":"if ( ( $ i + $ a + $ b ) == $ n ) { $ c += 1 ; } }"}
{"text":"returns the count","code":"return $ c ; }"}
{"text":"Driver Code","code":"$ n = 9939 ;"}
{"text":"calls the function to get the answer","code":"echo countt ( $ n ) ; ? >"}
{"text":"PHP program to check if a number can be raised to k","code":"< ? php function isPowerOfK ( $ n , $ k ) {"}
{"text":"loop to change base n to base = k","code":"$ oneSeen = false ; while ( $ n > 0 ) {"}
{"text":"Find current digit in base k","code":"$ digit = $ n % $ k ;"}
{"text":"If digit is neither 0 nor 1","code":"if ( $ digit > 1 ) return false ;"}
{"text":"Make sure that only one 1 is present .","code":"if ( $ digit == 1 ) { if ( $ oneSeen ) return false ; $ oneSeen = true ; } $ n = ( int ) $ n \/ $ k ; } return true ; }"}
{"text":"Driver code","code":"$ n = 64 ; $ k = 4 ; if ( isPowerOfK ( $ n , $ k ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to check if octal representation of a number is prime","code":"< ? php $ MAX_DIGITS = 20 ;"}
{"text":"Function to Check no is in octal or not","code":"function isOctal ( $ n ) { while ( $ n ) { if ( ( $ n % 10 ) >= 8 ) return false ; else $ n = ( int ) $ n \/ 10 ; } return true ; }"}
{"text":"Function To check no is palindrome or not","code":"function isPalindrome ( $ n ) { global $ MAX_DIGITS ;"}
{"text":"If number is already in octal , we traverse digits using repeated division with 10. Else we traverse digits using repeated division with 8","code":"$ divide = ( isOctal ( $ n ) == false ) ? 8 : 10 ;"}
{"text":"To store individual digits","code":"$ octal ;"}
{"text":"Traversing all digits","code":"$ i = 0 ; while ( $ n != 0 ) { $ octal [ $ i ++ ] = $ n % $ divide ; $ n = ( int ) $ n \/ $ divide ; }"}
{"text":"checking if octal no is palindrome","code":"for ( $ j = $ i - 1 , $ k = 0 ; $ k <= $ j ; $ j -- , $ k ++ ) if ( $ octal [ $ j ] != $ octal [ $ k ] ) return -1 ; return 0 ; }"}
{"text":"Driver Code","code":"$ n = 97 ; if ( isPalindrome ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find all factorial numbers smaller than or equal to n .","code":"< ? php function printFactorialNums ( $ n ) { $ fact = 1 ; $ x = 2 ; while ( $ fact <= $ n ) { echo $ fact , \" \" ;"}
{"text":"Compute next factorial using previous","code":"$ fact = $ fact * $ x ; $ x ++ ; } }"}
{"text":"Driver code","code":"$ n = 100 ; echo printFactorialNums ( $ n ) ; ? >"}
{"text":"Utility function to check whether a number is prime or not","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function to check whether given number has three distinct factors or not","code":"function isThreeDisctFactors ( $ n ) {"}
{"text":"Find square root of number","code":"$ sq = sqrt ( $ n ) ;"}
{"text":"Check whether number is perfect square or not","code":"if ( $ sq * $ sq != $ n ) return false ;"}
{"text":"If number is perfect square , check whether square root is prime or not","code":"return isPrime ( $ sq ) ? true : false ; }"}
{"text":"Driver Code","code":"$ num = 9 ; if ( isThreeDisctFactors ( $ num ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; $ num = 15 ; if ( isThreeDisctFactors ( $ num ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; $ num = 12397923568441 ; if ( isThreeDisctFactors ( $ num ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"Function which computes the last digit of resultant of B ! \/ A !","code":"< ? php function computeLastDigit ( $ A , $ B ) { $ variable = 1 ;"}
{"text":"If A = B , B ! = A ! and B ! \/ A ! = 1","code":"if ( $ A == $ B ) return 1 ;"}
{"text":"If difference ( B - A ) >= 5 , answer = 0","code":"else if ( ( $ B - $ A ) >= 5 ) return 0 ; else {"}
{"text":"If non of the conditions are true , we iterate from A + 1 to B and multiply them . We are only concerned for the last digit , thus we take modulus of 10","code":"for ( $ i = $ A + 1 ; $ i <= $ B ; $ i ++ ) $ variable = ( $ variable * ( $ i % 10 ) ) % 10 ; return $ variable % 10 ; } }"}
{"text":"Driver Code","code":"echo computeLastDigit ( 2632 , 2634 ) ; ? >"}
{"text":"Function to find sum of series .","code":"< ? php function sumOfAP ( $ a , $ d , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum = $ sum + $ a ; $ a = $ a + $ d ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 20 ; $ a = 2.5 ; $ d = 1.5 ; echo ( sumOfAP ( $ a , $ d , $ n ) ) ; ? >"}
{"text":"PHP program to calculate product of factors of number","code":"< ? php $ M = 1000000007 ;"}
{"text":"function to product the factors","code":"function multiplyFactors ( $ n ) { global $ M ; $ prod = 1 ; for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ n % $ i == 0 ) {"}
{"text":"If factors are equal , multiply only once","code":"if ( $ n \/ $ i == $ i ) $ prod = ( $ prod * $ i ) % $ M ;"}
{"text":"Otherwise multiply both","code":"else { $ prod = ( $ prod * $ i ) % $ M ; $ prod = ( $ prod * $ n \/ $ i ) % $ M ; } } } return $ prod ; }"}
{"text":"Driver Code","code":"$ n = 12 ; echo multiplyFactors ( $ n ) ; ? >"}
{"text":"PHP program to calculate product of factors of number","code":"< ? php $ M = 1000000007 ;"}
{"text":"Iterative Function to calculate ( x ^ y ) in O ( log y )","code":"function power ( $ x , $ y ) { global $ M ; $ res = 1 ; while ( $ y > 0 ) { if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ M ; $ y = ( $ y >> 1 ) % $ M ; $ x = ( $ x * $ x ) % $ M ; } return $ res ; }"}
{"text":"function to count the factors","code":"function countFactors ( $ n ) { $ count = 0 ; for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ n % $ i == 0 ) {"}
{"text":"If factors are equal , count only once","code":"if ( $ n \/ $ i == $ i ) $ count ++ ;"}
{"text":"Otherwise count both","code":"else $ count += 2 ; } } return $ count ; } function multiplyFactors ( $ n ) { $ numFactor = countFactors ( $ n ) ;"}
{"text":"Calculate product of factors","code":"$ product = power ( $ n , $ numFactor \/ 2 ) ;"}
{"text":"If numFactor is odd return power ( n , numFactor \/ 2 ) * sqrt ( n )","code":"if ( $ numFactor & 1 ) $ product = ( $ product * sqrt ( $ n ) ) % $ M ; return $ product ; }"}
{"text":"Driver code","code":"$ n = 12 ; echo multiplyFactors ( $ n ) ; ? >"}
{"text":"function to check whether decimal representation of given binary number is divisible by 10 or not","code":"< ? php function isDivisibleBy10 ( $ bin ) { $ n = strlen ( $ bin ) ;"}
{"text":"if last digit is '1' , then number is not divisible by 10","code":"if ( $ bin [ $ n - 1 ] == '1' ) return false ;"}
{"text":"to accumulate the sum of last digits in perfect powers of 2","code":"$ sum = 0 ;"}
{"text":"traverse from the 2 nd last up to 1 st digit in ' bin '","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"if digit in '1'","code":"if ( $ bin [ $ i ] == '1' ) {"}
{"text":"calculate digit 's  position from the right","code":"$ posFromRight = $ n - $ i - 1 ;"}
{"text":"according to the digit 's  position, obtain the last  digit of the applicable  perfect power of 2","code":"if ( $ posFromRight % 4 == 1 ) $ sum = $ sum + 2 ; else if ( $ posFromRight % 4 == 2 ) $ sum = $ sum + 4 ; else if ( $ posFromRight % 4 == 3 ) $ sum = $ sum + 8 ; else if ( $ posFromRight % 4 == 0 ) $ sum = $ sum + 6 ; } }"}
{"text":"if last digit is 0 , then divisible by 10","code":"if ( $ sum % 10 == 0 ) return true ;"}
{"text":"not divisible by 10","code":"return false ; }"}
{"text":"Driver Code","code":"$ bin = \"11000111001110\" ; if ( isDivisibleBy10 ( $ bin ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"A space optimized based PHP program to print first n Tribinocci numbers . |","code":"< ? php function printTrib ( $ n ) { if ( $ n < 1 ) return ;"}
{"text":"Initialize first three numbers","code":"$ first = 0 ; $ second = 0 ; $ third = 1 ; echo $ first , \" \" ; if ( $ n > 1 ) echo $ second , \" \u2581 \" ; if ( $ n > 2 ) echo $ second , \" \u2581 \" ;"}
{"text":"Loop to add previous three numbers for each number starting from 3 and then assign first , second , third to second , third , and curr to third respectively","code":"for ( $ i = 3 ; $ i < $ n ; $ i ++ ) { $ curr = $ first + $ second + $ third ; $ first = $ second ; $ second = $ third ; $ third = $ curr ; echo $ curr , \" \" ; } }"}
{"text":"Driver code","code":"$ n = 10 ; printTrib ( $ n ) ; ? >"}
{"text":"Function to create an array of prime numbers upto number ' n '","code":"< ? php function SieveOfEratosthenes ( $ n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ n + 1 , true ) ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true )"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i < $ n + 1 ; $ i += $ p ) $ prime [ $ i ] = false ; } $ lis = array ( ) ;"}
{"text":"Append all the prime numbers to the list","code":"for ( $ p = 2 ; $ p <= $ n ; $ p ++ ) if ( $ prime [ $ p ] ) array_push ( $ lis , $ p ) ; return $ lis ; }"}
{"text":"Utility function to count the number of set bits","code":"function setBits ( $ n ) { $ cnt = 0 ; while ( $ n ) { if ( $ n & 1 ) $ cnt ++ ; $ n >>= 1 ; } ; return $ cnt ; }"}
{"text":"Driver program","code":"$ x = 4 ; $ y = 8 ; $ count = 0 ;"}
{"text":"Here prime numbers are checked till the maximum number of bits possible because that the maximum bit sum possible is the number of bits itself .","code":"$ primeArr = SieveOfEratosthenes ( ceil ( log ( $ y , 2 ) ) ) ; for ( $ i = $ x ; $ i < $ y + 1 ; $ i ++ ) { $ temp = setBits ( $ i ) ; if ( in_array ( $ temp , $ primeArr ) ) $ count += 1 ; } print ( $ count ) ; ? >"}
{"text":"Function to return the count of odd length squares possible","code":"< ? php function count_square ( $ n ) {"}
{"text":"To store the required count","code":"$ count = 0 ;"}
{"text":"For all odd values of i","code":"for ( $ i = 1 ; $ i <= $ n ; $ i = $ i + 2 ) {"}
{"text":"Add the count of possible squares of length i","code":"$ k = $ n - $ i + 1 ; $ count += ( $ k * $ k ) ; }"}
{"text":"Return the required count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ N = 8 ; echo count_square ( $ N ) ; ? >"}
{"text":"Function to return the number of anomalies","code":"< ? php function countAnomalies ( $ arr , $ n , $ k ) {"}
{"text":"To store the count of anomalies","code":"$ cnt = 0 ;"}
{"text":"To store the sum of the array elements","code":"$ sum = 0 ;"}
{"text":"Find the sum of the array elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] ;"}
{"text":"Count the anomalies","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( abs ( $ arr [ $ i ] - ( $ sum - $ arr [ $ i ] ) ) > $ k ) $ cnt ++ ; return $ cnt ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 3 , 5 ) ; $ n = count ( $ arr ) ; $ k = 1 ; echo countAnomalies ( $ arr , $ n , $ k ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ N = 100005 ;"}
{"text":"To store number of divisors and Prefix sum of such numbers","code":"$ d = array_fill ( 0 , $ N , NULL ) ; $ pre = array_fill ( 0 , $ N , NULL ) ;"}
{"text":"Function to find the number of integers 1 < x < N for which x and x + 1 have the same number of positive divisors","code":"function Positive_Divisors ( ) { global $ N , $ d , $ pre ;"}
{"text":"Count the number of divisors","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) {"}
{"text":"Run a loop upto sqrt ( i )","code":"for ( $ j = 1 ; $ j * $ j <= $ i ; $ j ++ ) {"}
{"text":"If j is divisor of i","code":"if ( $ i % $ j == 0 ) {"}
{"text":"If it is perfect square","code":"if ( $ j * $ j == $ i ) $ d [ $ i ] ++ ; else $ d [ $ i ] += 2 ; } } } $ ans = 0 ;"}
{"text":"x and x + 1 have same number of positive divisors","code":"for ( $ i = 2 ; $ i < $ N ; $ i ++ ) { if ( $ d [ $ i ] == $ d [ $ i - 1 ] ) $ ans ++ ; $ pre [ $ i ] = $ ans ; } }"}
{"text":"Function call","code":"Positive_Divisors ( ) ; $ n = 15 ;"}
{"text":"Required answer","code":"echo $ pre [ $ n ] ; return 0 ; ? >"}
{"text":"Function to return length of the resultant number","code":"< ? php function numLen ( $ K ) {"}
{"text":"If K is a multiple of 2 or 5","code":"if ( $ K % 2 == 0 $ K % 5 == 0 ) return -1 ; $ number = 0 ; $ len = 1 ; for ( $ len = 1 ; $ len <= $ K ; $ len ++ ) {"}
{"text":"Generate all possible numbers 1 , 11 , 111 , 111 , ... , K 1 's","code":"$ number = $ number * 10 + 1 ;"}
{"text":"If number is divisible by k then return the length","code":"if ( ( $ number % $ K == 0 ) ) return $ len ; } return -1 ; }"}
{"text":"Driver code","code":"$ K = 7 ; echo numLen ( $ K ) ; ? >"}
{"text":"Function that returns true if the sequence will contain B","code":"< ? php function doesContainB ( $ a , $ b , $ c ) { if ( $ a == $ b ) return true ; if ( ( $ b - $ a ) * $ c > 0 && ( $ b - $ a ) % $ c == 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ a = 1 ; $ b = 7 ; $ c = 3 ; if ( doesContainB ( $ a , $ b , $ c ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to find the required permutation of first 2 * N natural numbers","code":"< ? php function printPermutation ( $ n , $ k ) {"}
{"text":"Iterate in blocks of 2","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ x = 2 * $ i - 1 ; $ y = 2 * $ i ;"}
{"text":"We need more increments , so print in reverse order","code":"if ( $ i <= $ k ) echo $ y . \" \" \u2581 . \u2581 $ x \u2581 . \u2581 \" \""}
{"text":"We have enough increments , so print in same order","code":"else echo $ x . \" \u2581 \" . $ y . \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ n = 2 ; $ k = 1 ; printPermutation ( $ n , $ k ) ; ? >"}
{"text":"Function to return the maximum possible sum","code":"< ? php function maxSum ( $ N ) { $ ans = 0 ; for ( $ u = 1 ; $ u <= $ N ; $ u ++ ) { for ( $ v = 1 ; $ v <= $ N ; $ v ++ ) { if ( $ u == $ v ) continue ;"}
{"text":"Initialize degree for node u to 2","code":"$ degreeU = 2 ;"}
{"text":"If u is the leaf node or the root node","code":"if ( $ u == 1 $ u == $ N ) $ degreeU = 1 ;"}
{"text":"Initialize degree for node v to 2","code":"$ degreeV = 2 ;"}
{"text":"If v is the leaf node or the root node","code":"if ( $ v == 1 $ v == $ N ) $ degreeV = 1 ;"}
{"text":"Update the sum","code":"$ ans += ( $ degreeU * $ degreeV ) ; } } return $ ans ; }"}
{"text":"Driver code","code":"$ N = 6 ; echo maxSum ( $ N ) ; ? >"}
{"text":"Function to print the integers that divide the maximum number of elements from the array","code":"< ? php function maximumFactor ( $ arr ) {"}
{"text":"Initialize two lists to store rank and factors","code":"$ rank = array ( ) ; $ factors = array ( ) ;"}
{"text":"Start from 2 till the maximum element in arr","code":"for ( $ i = 2 ; $ i <= max ( $ arr ) ; $ i ++ ) {"}
{"text":"Initialize a variable to count the number of elements it is a factor of","code":"$ count = 0 ; for ( $ j = 0 ; $ j < sizeof ( $ arr ) ; $ j ++ ) if ( $ arr [ $ j ] % $ i == 0 ) $ count += 1 ; array_push ( $ rank , $ count ) ; array_push ( $ factors , $ i ) ; }"}
{"text":"Maximum rank in the rank list","code":"$ m = max ( $ rank ) ; for ( $ i = 0 ; $ i < sizeof ( $ rank ) ; $ i ++ ) {"}
{"text":"Print all the elements with rank m","code":"if ( $ rank [ $ i ] == $ m ) echo $ factors [ $ i ] , \" \u2581 \" ; } }"}
{"text":"Driver code","code":"$ arr = array ( 120 , 15 , 24 , 63 , 18 ) ; maximumFactor ( $ arr ) ? >"}
{"text":"Returns sum of first n natural numbers","code":"< ? php function findSum ( $ n ) { $ sum = 0 ; for ( $ x = 1 ; $ x <= $ n ; $ x ++ ) $ sum = $ sum + $ x ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo findSum ( $ n ) ; ? >"}
{"text":"Function for calculating median","code":"< ? php function findMedian ( & $ a , $ n ) {"}
{"text":"First we sort the array","code":"sort ( $ a ) ;"}
{"text":"check for even case","code":"if ( $ n % 2 != 0 ) return ( double ) $ a [ $ n \/ 2 ] ; return ( double ) ( $ a [ ( $ n - 1 ) \/ 2 ] + $ a [ $ n \/ 2 ] ) \/ 2.0 ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 3 , 4 , 2 , 7 , 5 , 8 , 6 ) ; $ n = sizeof ( $ a ) ; echo \" Median \u2581 = \u2581 \" . findMedian ( $ a , $ n ) ; ? >"}
{"text":"Function for calculating mean","code":"< ? php function findMean ( & $ a , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ a [ $ i ] ; return ( double ) $ sum \/ ( double ) $ n ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 3 , 4 , 2 , 7 , 5 , 8 , 6 ) ; $ n = sizeof ( $ a ) ; echo \" Mean \u2581 = \u2581 \" . findMean ( $ a , $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to Check if the array has an element which is equal to product of all the remaining elements","code":"< ? php function CheckArray ( $ arr , $ n ) { $ prod = 1 ;"}
{"text":"Storing frequency in map","code":"$ freq = array ( ) ;"}
{"text":"Calculate the product of all the elements","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { array_push ( $ freq , $ arr [ $ i ] ) ; $ prod *= $ arr [ $ i ] ; } $ freq = array_unique ( $ freq ) ; $ root = ( int ) ( sqrt ( $ prod ) ) ;"}
{"text":"If the prod is a perfect square","code":"if ( $ root * $ root == $ prod )"}
{"text":"then check if its square root exist in the array or not","code":"if ( in_array ( $ root , $ freq ) ) return true ; return false ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 12 , 3 , 2 ) ; $ n = count ( $ arr ) ; if ( CheckArray ( $ arr , $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"We first convert to given base , then check if the converted number has two consecutive 0 s or not","code":"< ? php function hasConsecutiveZeroes ( $ N , $ K ) { $ z = toK ( $ N , $ K ) ; if ( check ( $ z ) ) print ( \" Yes \" ) ; else print ( \" No \" ) ; }"}
{"text":"Function to convert N into base K","code":"function toK ( $ N , $ K ) {"}
{"text":"Weight of each digit","code":"$ w = 1 ; $ s = 0 ; while ( $ N != 0 ) { $ r = $ N % $ K ; $ N = ( int ) ( $ N \/ $ K ) ; $ s = $ r * $ w + $ s ; $ w *= 10 ; } return $ s ; }"}
{"text":"Function to check for consecutive 0","code":"function check ( $ N ) {"}
{"text":"Flag to check if there are consecutive zero or not","code":"$ fl = false ; while ( $ N != 0 ) { $ r = $ N % 10 ; $ N = ( int ) ( $ N \/ 10 ) ;"}
{"text":"If there are two consecutive zero then returning false","code":"if ( $ fl == true and $ r == 0 ) return false ; if ( $ r > 0 ) { $ fl = false ; continue ; } $ fl = true ; } return true ; }"}
{"text":"Driver code","code":"$ N = 15 ; $ K = 8 ; hasConsecutiveZeroes ( $ N , $ K ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ MAX = 100000 ; $ prime = array_fill ( 0 , $ MAX + 1 , true ) ; function SieveOfEratosthenes ( ) { global $ MAX , $ prime ;"}
{"text":"0 and 1 are not prime numbers","code":"$ prime [ 1 ] = false ; $ prime [ 0 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ MAX ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ MAX ; $ i += $ p ) $ prime [ $ i ] = false ; } } }"}
{"text":"compute the answer","code":"function SumOfKthPrimes ( $ arr , $ n , $ k ) { global $ MAX , $ prime ;"}
{"text":"count of primes","code":"$ c = 0 ;"}
{"text":"sum of the primes","code":"$ sum = 0 ;"}
{"text":"traverse the array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if the number is a prime","code":"if ( $ prime [ $ arr [ $ i ] ] ) {"}
{"text":"increase the count","code":"$ c ++ ;"}
{"text":"if it is the K 'th prime","code":"if ( $ c % $ k == 0 ) { $ sum += $ arr [ $ i ] ; $ c = 0 ; } } } echo $ sum . \" STRNEWLINE \" ; }"}
{"text":"create the sieve","code":"SieveOfEratosthenes ( ) ; $ arr = array ( 2 , 3 , 5 , 7 , 11 ) ; $ n = sizeof ( $ arr ) ; $ k = 2 ; SumOfKthPrimes ( $ arr , $ n , $ k ) ; ? >"}
{"text":"PHP for finding super power of n","code":"< ? php $ MAX = 100000 ;"}
{"text":"global hash for prime","code":"$ prime = array_fill ( 0 , 100002 , true ) ;"}
{"text":"sieve method for storing a list of prime","code":"function SieveOfEratosthenes ( ) { global $ MAX , $ prime ; for ( $ p = 2 ; $ p * $ p <= $ MAX ; $ p ++ ) if ( $ prime [ $ p ] == true ) for ( $ i = $ p * 2 ; $ i <= $ MAX ; $ i += $ p ) $ prime [ $ i ] = false ; }"}
{"text":"function to return super power","code":"function superpower ( $ n ) { SieveOfEratosthenes ( ) ; global $ MAX , $ prime ; $ superPower = 0 ; $ factor = 0 ; $ i = 2 ;"}
{"text":"find the super power","code":"while ( $ n > 1 && $ i <= $ MAX ) { if ( $ prime [ $ i ] ) { $ factor = 0 ; while ( $ n % $ i == 0 && $ n > 1 ) { $ factor ++ ; $ n = $ n \/ $ i ; } if ( $ superPower < $ factor ) $ superPower = $ factor ; } $ i ++ ; } return $ superPower ; }"}
{"text":"Driver Code","code":"$ n = 256 ; echo superpower ( $ n ) ; ? >"}
{"text":"Function to find the smallest divisor","code":"< ? php function smallestDivisor ( $ n ) {"}
{"text":"if divisible by 2","code":"if ( $ n % 2 == 0 ) return 2 ;"}
{"text":"iterate from 3 to sqrt ( n )","code":"for ( $ i = 3 ; $ i * $ i <= $ n ; $ i += 2 ) { if ( $ n % $ i == 0 ) return $ i ; } return $ n ; }"}
{"text":"Driver Code","code":"$ n = 31 ; echo smallestDivisor ( $ n ) ; ? >"}
{"text":"Function that calculates Rabbits","code":"< ? php function countRabbits ( $ Heads , $ Legs ) { $ count = 0 ; $ count = ( $ Legs ) - 2 * ( $ Heads ) ; $ count = ( int ) $ count \/ 2 ; return $ count ; }"}
{"text":"Driver code","code":"$ Heads = 100 ; $ Legs = 300 ; $ Rabbits = countRabbits ( $ Heads , $ Legs ) ; echo \" Rabbits = \" \u2581 , \u2581 $ Rabbits \u2581 , \u2581 \" \" ; STRNEWLINE echo \u2581 \" Pigeons = \" $ Rabbits , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the sum","code":"< ? php function calculateSum ( $ n ) { $ a = ( int ) $ n ; return ( 2 * ( pow ( $ n , 6 ) + 15 * pow ( $ n , 4 ) + 15 * pow ( $ n , 2 ) + 1 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 1.4142 ; echo ceil ( calculateSum ( $ n ) ) ; ? >"}
{"text":"calculate sum upto N term of series","code":"< ? php function Sum_upto_nth_Term ( $ n ) { return ( 1 - pow ( -2 , $ n ) ) ; }"}
{"text":"Driver code","code":"$ N = 5 ; echo ( Sum_upto_nth_Term ( $ N ) ) ; ? >"}
{"text":"Function to calculate count of numbers with XOR equals OR","code":"< ? php function xorEqualsOrCount ( $ N ) {"}
{"text":"variable to store count of unset bits","code":"$ count = 0 ; while ( $ N > 0 ) { $ bit = $ N % 2 ; if ( $ bit == 0 ) $ count ++ ; $ N = intval ( $ N \/ 2 ) ; } return pow ( 2 , $ count ) ; }"}
{"text":"Driver code","code":"$ N = 7 ; echo xorEqualsOrCount ( $ N ) ; ? >"}
{"text":"Function to find the factorial of a number","code":"< ? php function fact ( $ n ) { if ( $ n == 1 ) return 1 ; return $ n * fact ( $ n - 1 ) ; }"}
{"text":"Function to compute the sum","code":"function sum ( $ x , $ n ) { $ total = 1.0 ;"}
{"text":"Iterate the loop till n and compute the formula","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { $ total = $ total + ( pow ( $ x , $ i ) \/ fact ( $ i + 1 ) ) ; } return $ total ; }"}
{"text":"Get x and n","code":"$ x = 5 ; $ n = 4 ;"}
{"text":"Print output","code":"echo \" Sum \u2581 is : \u2581 \" , sum ( $ x , $ n ) ; ? >"}
{"text":"PHP program to find sum of series 1 ^ 2 - 2 ^ 2 + 3 ^ 3 - 4 ^ 4 + ... Function to find sum of series","code":"< ? php function sum_of_series ( $ n ) { $ result = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If i is even","code":"if ( $ i % 2 == 0 ) $ result = $ result - pow ( $ i , 2 ) ;"}
{"text":"If i is odd","code":"else $ result = $ result + pow ( $ i , 2 ) ; }"}
{"text":"return the result","code":"return $ result ; }"}
{"text":"Get n","code":"$ n = 3 ;"}
{"text":"Find the sum","code":"echo sum_of_series ( $ n ) , \" STRNEWLINE \" ;"}
{"text":"Get n","code":"$ n = 10 ;"}
{"text":"Find the sum","code":"echo sum_of_series ( $ n ) , \" STRNEWLINE \" ;"}
{"text":"This Code is Contributed by anuj_67","code":"? >"}
{"text":"calculate Nth term of series","code":"< ? php function findSum ( $ N ) { return ( 2 * $ N * ( $ N + 1 ) * ( 4 * $ N + 17 ) + 54 * $ N ) \/ 6 ; }"}
{"text":"Get the value of N","code":"$ N = 4 ;"}
{"text":"Get the sum of the series","code":"echo findSum ( $ N ) ; ? >"}
{"text":"PHP Program to find the value of sin ( n ? )","code":"< ? php $ MAX = 16 ; $ nCr = array_fill ( 0 , $ MAX , array_fill ( 0 , $ MAX , 0 ) ) ;"}
{"text":"This function use to calculate the binomial coefficient upto 15","code":"function binomial ( ) { global $ MAX , $ nCr ;"}
{"text":"use simple DP to find coefficient","code":"for ( $ i = 0 ; $ i < $ MAX ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) { if ( $ j == 0 $ j == $ i ) $ nCr [ $ i ] [ $ j ] = 1 ; else $ nCr [ $ i ] [ $ j ] = $ nCr [ $ i - 1 ] [ $ j ] + $ nCr [ $ i - 1 ] [ $ j - 1 ] ; } } }"}
{"text":"Function to find the value of","code":"function findCosNTheta ( $ sinTheta , $ n ) { global $ MAX , $ nCr ;"}
{"text":"find cosTheta from sinTheta","code":"$ cosTheta = sqrt ( 1 - $ sinTheta * $ sinTheta ) ;"}
{"text":"store required answer","code":"$ ans = 0 ;"}
{"text":"use to toggle sign in sequence .","code":"$ toggle = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i += 2 ) { $ ans = $ ans + $ nCr [ $ n ] [ $ i ] * pow ( $ cosTheta , $ n - $ i ) * pow ( $ sinTheta , $ i ) * $ toggle ; $ toggle = $ toggle * -1 ; } return $ ans ; }"}
{"text":"Driver code .","code":"binomial ( ) ; $ sinTheta = 0.5 ; $ n = 10 ; echo findCosNTheta ( $ sinTheta , $ n ) ; ? >"}
{"text":"calculate Nth term of series","code":"< ? php function nthTerm ( $ N ) { return ( 2 * $ N + 3 ) * ( 2 * $ N + 3 ) - 2 * $ N ; }"}
{"text":"Get the value of N","code":"$ N = 4 ;"}
{"text":"Find the Nth term and print it","code":"echo nthTerm ( $ N ) ; ? >"}
{"text":"Function to calculate sum","code":"< ? php function findSum ( $ n ) {"}
{"text":"Return sum","code":"return ( pow ( 10 , $ n + 1 ) * ( 9 * $ n - 1 ) + 10 ) \/ pow ( 9 , 3 ) - $ n * ( $ n + 1 ) \/ 18 ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo findSum ( $ n ) ; ? >"}
{"text":"Function to calculate sum","code":"< ? php function solve_sum ( $ n ) {"}
{"text":"when n is odd","code":"if ( $ n % 2 == 1 ) return ( $ n + 1 ) \/ 2 ;"}
{"text":"when n is not odd","code":"return - $ n \/ 2 ; }"}
{"text":"Driver code","code":"$ n = 8 ; echo solve_sum ( $ n ) ; ? >"}
{"text":"PHP program to check if a number can be expressed as a ^ b .","code":"< ? php function isPower ( $ a ) { if ( $ a == 1 ) return true ; for ( $ i = 2 ; $ i * $ i <= $ a ; $ i ++ ) { $ val = log ( $ a ) \/ log ( $ i ) ; if ( ( $ val - $ val ) < 0.00000001 ) return true ; } return false ; }"}
{"text":"Driver code","code":"$ n = 16 ; echo ( isPower ( $ n ) ? \" Yes \" : \" No \" ) ;"}
{"text":"Function that Calculate Root Mean Square","code":"< ? php function rmsValue ( $ arr , $ n ) { $ square = 0 ; $ mean = 0.0 ; $ root = 0.0 ;"}
{"text":"Calculate square .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ square += pow ( $ arr [ $ i ] , 2 ) ; }"}
{"text":"Calculate Mean .","code":"$ mean = ( $ square \/ ( float ) ( $ n ) ) ;"}
{"text":"Calculate Root .","code":"$ root = sqrt ( $ mean ) ; return $ root ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 4 , 6 , 8 ) ; $ n = sizeof ( $ arr ) ; echo rmsValue ( $ arr , $ n ) ; ? >"}
{"text":"Function to calculate the Remaining amount .","code":"< ? php function Mixture ( $ X , $ Y , $ Z ) { $ result = 0.0 ; $ result1 = 0.0 ;"}
{"text":"calculate Right hand Side ( RHS ) .","code":"$ result1 = ( ( $ X - $ Y ) \/ $ X ) ; $ result = pow ( $ result1 , $ Z ) ;"}
{"text":"calculate Amount left by multiply it with original value .","code":"$ result = $ result * $ X ; return $ result ; }"}
{"text":"Driver Code","code":"$ X = 10 ; $ Y = 2 ; $ Z = 2 ; echo Mixture ( $ X , $ Y , $ Z ) , \" \u2581 litres \" ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with the result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"function to find ff ( n )","code":"function check ( $ n ) { $ mod = 1e9 + 7 ;"}
{"text":"In formula n is starting from zero","code":"$ n -- ;"}
{"text":"calculate answer using formula 2 ^ n * ( n ^ 2 + n + 2 ) - 1","code":"$ ans = $ n * $ n ;"}
{"text":"whenever answer is greater than or equals to mod then modulo it .","code":"if ( $ ans >= $ mod ) $ ans %= $ mod ; $ ans += $ n + 2 ; if ( $ ans >= $ mod ) $ ans %= $ mod ; $ ans = ( power ( 2 , $ n , $ mod ) % $ mod * $ ans % $ mod ) % $ mod ;"}
{"text":"adding modulo while subtraction is very necessary otherwise it will cause wrong answer","code":"$ ans = ( $ ans - 1 + $ mod ) % $ mod ; return $ ans ; }"}
{"text":"Driver code","code":"$ n = 4 ;"}
{"text":"function call","code":"echo check ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to return LCM of two numbers","code":"< ? php function findLCM ( $ a , $ b ) { $ lar = max ( $ a , $ b ) ; $ small = min ( $ a , $ b ) ; for ( $ i = $ lar ; ; $ i += $ lar ) { if ( $ i % $ small == 0 ) return $ i ; } }"}
{"text":"Driver Code","code":"$ a = 5 ; $ b = 7 ; echo \" LCM \u2581 of \u2581 \" , $ a , \" \u2581 and \u2581 \" , $ b , \" \u2581 is \u2581 \" , findLCM ( $ a , $ b ) ; ? >"}
{"text":"Function to collect first ' n ' prime numbers","code":"< ? php function primes ( $ n ) { $ i = 2 ; $ j = 0 ;"}
{"text":"List to store first ' n ' primes","code":"$ result ; $ z = 0 ; while ( $ j < $ n ) { $ flag = true ; for ( $ item = 2 ; $ item <= ( int ) ( $ i * 1 \/ 2 ) ; $ item ++ ) if ( $ i % $ item == 0 && $ i != $ item ) { $ flag = false ; break ; } if ( $ flag ) { $ result [ $ z ++ ] = $ i ; $ j += 1 ; } $ i += 1 ; } return $ result ; }"}
{"text":"Function to generate Smarandache - Wellin Sequence","code":"function smar_wln ( $ n ) {"}
{"text":"Storing the first ' n ' prime numbers in a list","code":"$ arr = primes ( $ n ) ; for ( $ i = 0 ; $ i < count ( $ arr ) ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) echo $ arr [ $ j ] ; echo \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ n = 5 ; echo \" First \u2581 $ n \u2581 terms \u2581 of \u2581 the \" . \" \u2581 Sequence \u2581 are STRNEWLINE \" ; smar_wln ( $ n ) ; ? >"}
{"text":"function for Pentatope number","code":"< ? php function Pentatope_number ( $ n ) {"}
{"text":"formula for find Pentatope nth term","code":"return $ n * ( $ n + 1 ) * ( $ n + 2 ) * ( $ n + 3 ) \/ 24 ; }"}
{"text":"Driver Code","code":"$ n = 7 ; echo $ n , \" th \u2581 Pentatope \u2581 number \u2581 : \" , Pentatope_number ( $ n ) , \" STRNEWLINE \" ; $ n = 12 ; echo $ n , \" th \u2581 Pentatope \u2581 number \u2581 : \" , Pentatope_number ( $ n ) ; ? >"}
{"text":"Function to find Centered icosahedral number","code":"< ? php function centeredIcosahedralNum ( $ n ) {"}
{"text":"Formula to calculate nth Centered icosahedral number and return it into main function .","code":"return ( 2 * $ n + 1 ) * ( 5 * $ n * $ n + 5 * $ n + 3 ) \/ 3 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo centeredIcosahedralNum ( $ n ) , \" STRNEWLINE \" ; $ n = 12 ; echo centeredIcosahedralNum ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to calculate Centered square number function","code":"< ? php function centered_square_num ( $ n ) {"}
{"text":"Formula to calculate nth Centered square number","code":"return $ n * $ n + ( ( $ n - 1 ) * ( $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 7 ; echo $ n , \" th \u2581 Centered \u2581 square \u2581 number : \u2581 \" ; echo centered_square_num ( $ n ) ; ? >"}
{"text":"Function to find the sum of series","code":"< ? php function seriesSum ( $ n ) { return ( $ n * ( $ n + 1 ) * ( $ n + 2 ) ) \/ 6 ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo ( seriesSum ( $ n ) ) ; ? >"}
{"text":"function for Dodecagonal number","code":"< ? php function Dodecagonal_number ( $ n ) {"}
{"text":"formula for find Dodecagonal nth term","code":"return 5 * $ n * $ n - 4 * $ n ; }"}
{"text":"Driver code","code":"$ n = 7 ; echo Dodecagonal_number ( $ n ) , \" STRNEWLINE \" ; $ n = 12 ; echo Dodecagonal_number ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Sieve Of Eratosthenes","code":"< ? php function SieveOfEratosthenes ( $ n , & $ prime , & $ primesquare , & $ a ) { for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ prime [ $ i ] = true ; for ( $ i = 0 ; $ i <= ( $ n * $ n + 1 ) ; $ i ++ ) $ primesquare [ $ i ] = false ;"}
{"text":"1 is not a prime number","code":"$ prime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = false ; } } $ j = 0 ; for ( $ p = 2 ; $ p <= $ n ; $ p ++ ) { if ( $ prime [ $ p ] ) {"}
{"text":"Storing primes in an array","code":"$ a [ $ j ] = $ p ;"}
{"text":"Update value in primesquare [ p * p ] , if p is prime .","code":"$ primesquare [ $ p * $ p ] = true ; $ j ++ ; } } }"}
{"text":"Function to count divisors","code":"function countDivisors ( $ n ) {"}
{"text":"If number is 1 , then it will have only 1 as a factor . So , total factors will be 1.","code":"if ( $ n == 1 ) return 1 ; $ prime = array_fill ( 0 , ( $ n + 1 ) , false ) ; $ primesquare = array_fill ( 0 , ( $ n * $ n + 1 ) , false ) ;"}
{"text":"for storing primes upto n","code":"$ a = array_fill ( 0 , $ n , 0 ) ;"}
{"text":"Calling SieveOfEratosthenes to store prime factors of n and to store square of prime factors of n","code":"SieveOfEratosthenes ( $ n , $ prime , $ primesquare , $ a ) ;"}
{"text":"ans will contain total number of distinct divisors","code":"$ ans = 1 ;"}
{"text":"Loop for counting factors of n","code":"for ( $ i = 0 ; ; $ i ++ ) {"}
{"text":"a [ i ] is not less than cube root n","code":"if ( $ a [ $ i ] * $ a [ $ i ] * $ a [ $ i ] > $ n ) break ;"}
{"text":"Calculating power of a [ i ] in n . cnt is power of prime a [ i ] in n .","code":"$ cnt = 1 ;"}
{"text":"if a [ i ] is a factor of n","code":"while ( $ n % $ a [ $ i ] == 0 ) { $ n = ( int ) ( $ n \/ $ a [ $ i ] ) ;"}
{"text":"incrementing power","code":"$ cnt = $ cnt + 1 ; }"}
{"text":"Calculating number of divisors . If n = a ^ p * b ^ q then total divisors of n are ( p + 1 ) * ( q + 1 )","code":"$ ans = $ ans * $ cnt ; }"}
{"text":"First case","code":"if ( $ prime [ $ n ] ) $ ans = $ ans * 2 ;"}
{"text":"Second case","code":"else if ( $ primesquare [ $ n ] ) $ ans = $ ans * 3 ;"}
{"text":"Third casse","code":"else if ( $ n != 1 ) $ ans = $ ans * 4 ;"}
{"text":"return $ans ; Total divisors","code":"}"}
{"text":"Returns sum of all factors of n .","code":"function sumofFactors ( $ n ) {"}
{"text":"Traversing through all prime factors .","code":"$ res = 1 ; for ( $ i = 2 ; $ i <= sqrt ( $ n ) ; $ i ++ ) { $ count = 0 ; $ curr_sum = 1 ; $ curr_term = 1 ; while ( $ n % $ i == 0 ) { $ count ++ ; $ n = ( int ) ( $ n \/ $ i ) ; $ curr_term *= $ i ; $ curr_sum += $ curr_term ; } $ res *= $ curr_sum ; }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2.","code":"if ( $ n >= 2 ) $ res *= ( 1 + $ n ) ; return $ res ; }"}
{"text":"Check if number is Arithmetic Number or not .","code":"function checkArithmetic ( $ n ) { $ count = countDivisors ( $ n ) ; $ sum = sumofFactors ( $ n ) ; return ( $ sum % $ count == 0 ) ; }"}
{"text":"Driver code","code":"$ n = 6 ; echo ( checkArithmetic ( $ n ) ) ? \" Yes \" : \" No \" ; ? >"}
{"text":"A formula based PHP program to find sum of series with cubes of first n natural numbers","code":"< ? php function magicOfSequence ( $ N ) { return ( $ N * ( $ N + 1 ) \/ 2 ) + 2 * $ N ; }"}
{"text":"Driver Code","code":"$ N = 6 ; echo magicOfSequence ( $ N ) . \" STRNEWLINE \" ; ? >"}
{"text":"Find next power by multiplying N with current power","code":"< ? php function nextPower ( $ N , & $ power ) { $ carry = 0 ; for ( $ i = 0 ; $ i < count ( $ power ) ; $ i ++ ) { $ prod = ( $ power [ $ i ] * $ N ) + $ carry ;"}
{"text":"Store digits of Power one by one .","code":"$ power [ $ i ] = $ prod % 10 ;"}
{"text":"Calculate carry .","code":"$ carry = ( int ) ( $ prod \/ 10 ) ; } while ( $ carry ) {"}
{"text":"Store carry in Power array .","code":"array_push ( $ power , $ carry % 10 ) ; $ carry = ( int ) ( $ carry \/ 10 ) ; } }"}
{"text":"Prints number formed by corner digits of powers of N .","code":"function printPowerNumber ( $ X , $ N ) {"}
{"text":"Storing N raised to power 0","code":"$ power = array ( ) ; array_push ( $ power , 1 ) ;"}
{"text":"Initializing empty result","code":"$ res = array ( ) ;"}
{"text":"One by one compute next powers and add their corner digits .","code":"for ( $ i = 1 ; $ i <= $ X ; $ i ++ ) {"}
{"text":"Call Function that store power in Power array .","code":"nextPower ( $ N , $ power ) ;"}
{"text":"Store unit and last digits of power in res .","code":"array_push ( $ res , $ power [ count ( $ power ) - 1 ] ) ; array_push ( $ res , $ power [ 0 ] ) ; } for ( $ i = 0 ; $ i < count ( $ res ) ; $ i ++ ) echo ( $ res [ $ i ] ) ; }"}
{"text":"Driver Code","code":"$ N = 19 ; $ X = 4 ; printPowerNumber ( $ X , $ N ) ; ? >"}
{"text":"PHP program for finding the First digit of the large factorial number","code":"< ? php function firstDigit ( $ n ) { $ fact = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ fact = $ fact * $ i ;"}
{"text":"Removing trailing 0 s as this does not change first digit .","code":"while ( $ fact % 10 == 0 ) $ fact = $ fact \/ 10 ; }"}
{"text":"loop for divide the fact until it become the single digit and return the fact","code":"while ( $ fact >= 10 ) $ fact = $ fact \/ 10 ; return floor ( $ fact ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo firstDigit ( $ n ) ; ? >"}
{"text":"PHP program to find sum of the series 1.2 . 3 + 2.3 . 4 + 3.4 . 5 + ...","code":"< ? php function sumofseries ( $ n ) { $ res = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ res += ( $ i ) * ( $ i + 1 ) * ( $ i + 2 ) ; return $ res ; }"}
{"text":"Driver Code","code":"echo sumofseries ( 3 ) ; ? >"}
{"text":"Pr$s N geometric means between A and B .","code":"< ? php function printGMeans ( $ A , $ B , $ N ) {"}
{"text":"calculate common ratio ( R )","code":"$ R = pow ( ( $ B \/ $ A ) , 1.0 \/ ( $ N + 1 ) ) ;"}
{"text":"for finding N the Geometric mean between A and B","code":"for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) echo $ A * pow ( $ R , $ i ) , \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ A = 3 ; $ B = 81 ; $ N = 2 ; printGMeans ( $ A , $ B , $ N ) ; ? >"}
{"text":"function for digit sum","code":"< ? php function digitSum ( $ n ) { $ digSum = 0 ; while ( $ n ) { $ digSum += $ n % 10 ; $ n \/= 10 ; } return $ digSum ; }"}
{"text":"function to calculate count of integer s . t . integer - digSum > s","code":"function countInteger ( $ n , $ s ) {"}
{"text":"if n < s no integer possible","code":"if ( $ n < $ s ) return 0 ;"}
{"text":"iterate for s range and then calculate total count of such integer if starting integer is found","code":"for ( $ i = $ s ; $ i <= min ( $ n , $ s + 163 ) ; $ i ++ ) if ( ( $ i - digitSum ( $ i ) ) > $ s ) return ( $ n - $ i + 1 ) ;"}
{"text":"if no integer found return 0","code":"return 0 ; }"}
{"text":"Driver Code","code":"$ n = 1000 ; $ s = 100 ; echo countInteger ( $ n , $ s ) ; ? >"}
{"text":"Function to find division without using ' \/ ' operator","code":"< ? php function division ( $ num1 , $ num2 ) { if ( $ num1 == 0 ) return 0 ; if ( $ num2 == 0 ) return INT_MAX ; $ negResult = false ;"}
{"text":"Handling negative numbers","code":"if ( $ num1 < 0 ) { $ num1 = - $ num1 ; if ( $ num2 < 0 ) $ num2 = - $ num2 ; else $ negResult = true ; } else if ( $ num2 < 0 ) { $ num2 = - $ num2 ; $ negResult = true ; }"}
{"text":"if num1 is greater than equal to num2 subtract num2 from num1 and increase quotient by one .","code":"$ quotient = 0 ; while ( $ num1 >= $ num2 ) { $ num1 = $ num1 - $ num2 ; $ quotient ++ ; }"}
{"text":"checking if neg equals to 1 then making quotient negative","code":"if ( $ negResult ) $ quotient = - $ quotient ; return $ quotient ; }"}
{"text":"Driver program","code":"$ num1 = 13 ; $ num2 = 2 ; echo division ( $ num1 , $ num2 ) ; ? >"}
{"text":"Function to find nonagonal number series .","code":"< ? php function Nonagonal ( $ n ) { for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { echo $ i * ( 7 * $ i - 5 ) \/ 2 ; echo \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ n = 10 ; Nonagonal ( $ n ) ; ? >"}
{"text":"func for calualtion","code":"< ? php function seriesFunc ( $ n ) {"}
{"text":"for summation of square of first n - natural nos .","code":"$ sumSquare = ( $ n * ( $ n + 1 ) * ( 2 * $ n + 1 ) ) \/ 6 ;"}
{"text":"summation of first n natural nos .","code":"$ sumNatural = ( $ n * ( $ n + 1 ) \/ 2 ) ;"}
{"text":"return result","code":"return ( $ sumSquare + $ sumNatural + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 8 ; echo ( seriesFunc ( $ n ) . \" \" ) ; $ n = 13 ; echo ( seriesFunc ( $ n ) . \" \" ) ; ? >"}
{"text":"function to check plus perfect number","code":"< ? php function checkplusperfect ( $ x ) { $ temp = $ x ;"}
{"text":"calculating number of digits","code":"$ n = 0 ; while ( $ x != 0 ) { $ x \/= 10 ; $ n ++ ; }"}
{"text":"calculating plus perfect number","code":"$ x = $ temp ; $ sum = 0 ; while ( $ x != 0 ) { $ sum += pow ( $ x % 10 , $ n ) ; $ x \/= 10 ; }"}
{"text":"checking whether number is plus perfect or not","code":"return ( $ sum == $ temp ) ; }"}
{"text":"Driver Code","code":"$ x = 9474 ; if ( checkplusperfect ( ! $ x ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns 2 ^ n","code":"< ? php function subsetCount ( $ arr , $ n ) { return 1 << $ n ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 2 , 3 ) ; $ n = sizeof ( $ A ) ; echo ( subsetCount ( $ A , $ n ) ) ; ? >"}
{"text":"PHP Program to compute GST from original and net prices .","code":"< ? php function Calculate_GST ( $ org_cost , $ N_price ) {"}
{"text":"return value after calculate GST %","code":"return ( ( ( $ N_price - $ org_cost ) * 100 ) \/ $ org_cost ) ; }"}
{"text":"Driver Code","code":"$ org_cost = 100 ; $ N_price = 120 ; echo ( \" GST \u2581 = \u2581 \" ) ; echo ( Calculate_GST ( $ org_cost , $ N_price ) ) ; echo ( \" \u2581 % \u2581 \" ) ; ? >"}
{"text":"Function to find centered hexadecimal number .","code":"< ? php function centeredHexagonalNumber ( $ n ) {"}
{"text":"Formula to calculate nth centered hexadecimal number and return it into main function .","code":"return 3 * $ n * ( $ n - 1 ) + 1 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo $ n , \" th \u2581 centered \u2581 hexagonal \u2581 number : \u2581 \" ; echo centeredHexagonalNumber ( $ n ) ; ? >"}
{"text":"function to calculate the distance","code":"< ? php function find_distance ( $ n ) { return $ n * ( ( 3 * $ n ) + 7 ) ; }"}
{"text":"Driver program","code":"$ n = 5 ; echo \" Distance \u2581 = \u2581 \" , find_distance ( $ n ) ; ? >"}
{"text":"Please refer below post for details of this function https : goo . gl \/ Wv3fGv","code":"< ? php function isPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Returns true if n1 and n2 are twin primes","code":"function twinPrime ( $ n1 , $ n2 ) { return ( isPrime ( $ n1 ) && isPrime ( $ n2 ) && abs ( $ n1 - $ n2 ) == 2 ) ; }"}
{"text":"Driver code","code":"$ n1 = 11 ; $ n2 = 13 ; if ( twinPrime ( $ n1 , $ n2 ) ) echo \" Twin \u2581 Prime \" , \" STRNEWLINE \" ; else echo \" STRNEWLINE \" , \" Not \u2581 Twin \u2581 Prime \" , \" STRNEWLINE \" ; ? >"}
{"text":"function which return the the sum of series","code":"< ? php function sumOfSeries ( $ n ) { return 0.0246 * ( pow ( 10 , $ n ) - 1 - ( 9 * $ n ) ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"Returns value of even indexed Binomial Coefficient Sum which is 2 raised to power n - 1.","code":"< ? php function evenbinomialCoeffSum ( $ n ) { return ( 1 << ( $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo evenbinomialCoeffSum ( $ n ) ; ? >"}
{"text":"Function to find triangular number","code":"< ? php function triangular_series ( $ n ) { $ i ; $ j = 1 ; $ k = 1 ;"}
{"text":"For each iteration increase j by 1 and add it into k","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { echo ( \" \u2581 \" . $ k . \" \u2581 \" ) ;"}
{"text":"Increasing j by 1","code":"$ j = $ j + 1 ;"}
{"text":"Add value of j into k and update k","code":"$ k = $ k + $ j ; } }"}
{"text":"Driver Code","code":"$ n = 5 ; triangular_series ( $ n ) ; ? >"}
{"text":"functionn to find the sum of the given series","code":"< ? php function sumOfTheSeries ( $ n ) {"}
{"text":"required sum","code":"return ( $ n * ( $ n + 1 ) \/ 2 ) * ( 2 * $ n + 1 ) \/ 3 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo \" Sum \u2581 = \u2581 \" . sumOfTheSeries ( $ n ) ; ? >"}
{"text":"Function to find sum of given series","code":"< ? php function sumOfSeries ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) for ( $ j = 1 ; $ j <= $ i ; $ j ++ ) $ sum += $ j ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo ( sumOfSeries ( $ n ) ) ; ? >"}
{"text":"function to calculate number of triangles in Nth step","code":"< ? php function numberOfTriangles ( $ n ) { $ ans = 2 * ( pow ( 3 , $ n ) ) - 1 ; return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 2 ; echo numberOfTriangles ( $ n ) ; ? >"}
{"text":"Return the nth Motzkin Number .","code":"< ? php function motzkin ( $ n ) {"}
{"text":"Base case","code":"$ dp [ 0 ] = $ dp [ 1 ] = 1 ;"}
{"text":"Finding i - th Motzkin number .","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ dp [ $ i ] = ( ( 2 * $ i + 1 ) * $ dp [ $ i - 1 ] + ( 3 * $ i - 3 ) * $ dp [ $ i - 2 ] ) \/ ( $ i + 2 ) ; return $ dp [ $ n ] ; }"}
{"text":"Driven Code","code":"$ n = 8 ; echo ( motzkin ( $ n ) ) ; ? >"}
{"text":"Return the sum of kth group of positive odd integer .","code":"< ? php function kthgroupsum ( $ k ) { return $ k * $ k * $ k ; }"}
{"text":"Driven Code","code":"$ k = 3 ; echo kthgroupsum ( $ k ) ; ? >"}
{"text":"function to find x y and z that satisfy given equation .","code":"< ? php function printXYZ ( $ n ) { if ( $ n == 1 ) echo - 1 ; else echo \" x \u2581 is \u2581 \" , $ n , \" STRNEWLINE y \u2581 is \u2581 \" , $ n + 1 , \" STRNEWLINE z \u2581 is \u2581 \" , $ n * ( $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 7 ; printXYZ ( $ n ) ; ? >"}
{"text":"Function to find nth term","code":"< ? php function term ( $ n ) { return $ n * ( $ n + 1 ) \/ 2 ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo ( term ( $ n ) ) ; ? >"}
{"text":"Function to calculate arithmetic mean , geometric mean and harmonic mean","code":"< ? php function compute ( $ a , $ b ) { $ AM ; $ GM ; $ HM ; $ AM = ( $ a + $ b ) \/ 2 ; $ GM = sqrt ( $ a * $ b ) ; $ HM = ( $ GM * $ GM ) \/ $ AM ; return $ HM ; }"}
{"text":"Driver Code","code":"$ a = 5 ; $ b = 15 ; $ HM = compute ( $ a , $ b ) ; echo \" Harmonic \u2581 Mean \u2581 between \u2581 \" . $ a . \" \u2581 and \u2581 \" . $ b . \" \u2581 is \u2581 \" . $ HM ; return 0 ; ? >"}
{"text":"Returns n - th element of the series","code":"< ? php function series ( $ n ) { return ( 8 * $ n * $ n ) + 1 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( series ( $ n ) ) ; ? >"}
{"text":"PHP program to find if all prime factors of y divide x .","code":"< ? php function gcd ( $ a , $ b ) { return $ b == 0 ? $ a : gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Returns true if all prime factors of y divide x .","code":"function isDivisible ( $ x , $ y ) { if ( $ y == 1 ) return true ; $ z = gcd ( $ x , $ y ) ; if ( $ z == 1 ) return false ; return isDivisible ( $ x , $ y \/ $ z ) ; }"}
{"text":"Driver Code","code":"$ x = 18 ; $ y = 12 ; if ( isDivisible ( $ x , $ y ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to calculate sum of given series","code":"< ? php function sumOfSeries ( $ a , $ num ) { $ res = 0 ; $ prev = 1 ; for ( $ i = 1 ; $ i <= $ num ; $ i ++ ) {"}
{"text":"multiply ( a \/ i ) to previous term","code":"$ prev *= ( $ a \/ $ i ) ;"}
{"text":"store result in res","code":"$ res = $ res + $ prev ; } return ( $ res ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ a = 2 ; echo ( sumOfSeries ( $ a , $ n ) ) ; ? >"}
{"text":"function to convert Celsius scale to Fahrenheit scale","code":"< ? php function Cel_To_Fah ( $ n ) { return ( ( $ n * 9.0 \/ 5.0 ) + 32.0 ) ; }"}
{"text":"Driver Code","code":"$ n = 20.0 ; echo Cel_To_Fah ( $ n ) ; ? >"}
{"text":"function to generate and print the sequence","code":"< ? php function print_sequence ( $ n , $ k ) {"}
{"text":"stores the maximum gcd that can be possible of sequence .","code":"$ b = ( int ) ( $ n \/ ( $ k * ( $ k + 1 ) \/ 2 ) ) ;"}
{"text":"if maximum gcd comes out to be zero then not possible","code":"if ( $ b == 0 ) { echo ( -1 ) ; } else {"}
{"text":"the smallest gcd possible is 1","code":"$ r = 1 ;"}
{"text":"traverse the array to find out the max gcd possible","code":"for ( $ x = 1 ; $ x * $ x <= $ n ; $ x ++ ) {"}
{"text":"checks if the number is divisible or not","code":"if ( $ n % $ x != 0 ) continue ;"}
{"text":"checks if x is smaller then the max gcd possible and x is greater then the resultant gcd till now , then r = x","code":"if ( $ x <= $ b && $ x > $ r ) $ r = $ x ;"}
{"text":"checks if n \/ x is smaller than the max gcd possible and n \/ x is greater then the resultant gcd till now , then r = x","code":"if ( $ n \/ $ x <= $ b && $ n \/ $ x > $ r ) $ r = $ n \/ $ x ; }"}
{"text":"traverses and prints d , 2d , 3d , ... , ( k - 1 ) d ,","code":"for ( $ i = 1 ; $ i < $ k ; $ i ++ ) echo ( $ r * $ i . \" \u2581 \" ) ;"}
{"text":"computes the last element of the sequence n - s .","code":"$ res = $ n - ( $ r * ( $ k * ( $ k - 1 ) \/ 2 ) ) ;"}
{"text":"prints the last element","code":"echo ( $ res . \" \" ) ; } }"}
{"text":"Driver Code","code":"$ n = 24 ; $ k = 4 ; print_sequence ( $ n , $ k ) ; $ n = 24 ; $ k = 5 ; print_sequence ( $ n , $ k ) ; $ n = 6 ; $ k = 4 ; print_sequence ( $ n , $ k ) ; ? >"}
{"text":"PHP program to find the total number of compositions of a natural number","code":"< ? php function countCompositions ( $ n ) {"}
{"text":"Return 2 raised to power ( n - 1 )","code":"return ( ( 1 ) << ( $ n - 1 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo countCompositions ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Recursive PHP program to count number of digits in a number","code":"< ? php function countDigit ( $ n ) { if ( $ n \/ 10 == 0 ) return 1 ; return 1 + countDigit ( ( int ) ( $ n \/ 10 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 345289467 ; print ( \" Number \u2581 of \u2581 digits \u2581 : \u2581 \" . ( countDigit ( $ n ) ) ) ; ? >"}
{"text":"A DP based PHP program to print first n Tribonacci numbers .","code":"< ? php function printTrib ( $ n ) { $ dp [ 0 ] = $ dp [ 1 ] = 0 ; $ dp [ 2 ] = 1 ; for ( $ i = 3 ; $ i < $ n ; $ i ++ ) $ dp [ $ i ] = $ dp [ $ i - 1 ] + $ dp [ $ i - 2 ] + $ dp [ $ i - 3 ] ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ dp [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ n = 10 ; printTrib ( $ n ) ; ? >"}
{"text":"Program to print first n tribonacci numbers Matrix Multiplication function for 3 * 3 matrix","code":"< ? php function multiply ( & $ T , $ M ) { $ a = $ T [ 0 ] [ 0 ] * $ M [ 0 ] [ 0 ] + $ T [ 0 ] [ 1 ] * $ M [ 1 ] [ 0 ] + $ T [ 0 ] [ 2 ] * $ M [ 2 ] [ 0 ] ; $ b = $ T [ 0 ] [ 0 ] * $ M [ 0 ] [ 1 ] + $ T [ 0 ] [ 1 ] * $ M [ 1 ] [ 1 ] + $ T [ 0 ] [ 2 ] * $ M [ 2 ] [ 1 ] ; $ c = $ T [ 0 ] [ 0 ] * $ M [ 0 ] [ 2 ] + $ T [ 0 ] [ 1 ] * $ M [ 1 ] [ 2 ] + $ T [ 0 ] [ 2 ] * $ M [ 2 ] [ 2 ] ; $ d = $ T [ 1 ] [ 0 ] * $ M [ 0 ] [ 0 ] + $ T [ 1 ] [ 1 ] * $ M [ 1 ] [ 0 ] + $ T [ 1 ] [ 2 ] * $ M [ 2 ] [ 0 ] ; $ e = $ T [ 1 ] [ 0 ] * $ M [ 0 ] [ 1 ] + $ T [ 1 ] [ 1 ] * $ M [ 1 ] [ 1 ] + $ T [ 1 ] [ 2 ] * $ M [ 2 ] [ 1 ] ; $ f = $ T [ 1 ] [ 0 ] * $ M [ 0 ] [ 2 ] + $ T [ 1 ] [ 1 ] * $ M [ 1 ] [ 2 ] + $ T [ 1 ] [ 2 ] * $ M [ 2 ] [ 2 ] ; $ g = $ T [ 2 ] [ 0 ] * $ M [ 0 ] [ 0 ] + $ T [ 2 ] [ 1 ] * $ M [ 1 ] [ 0 ] + $ T [ 2 ] [ 2 ] * $ M [ 2 ] [ 0 ] ; $ h = $ T [ 2 ] [ 0 ] * $ M [ 0 ] [ 1 ] + $ T [ 2 ] [ 1 ] * $ M [ 1 ] [ 1 ] + $ T [ 2 ] [ 2 ] * $ M [ 2 ] [ 1 ] ; $ i = $ T [ 2 ] [ 0 ] * $ M [ 0 ] [ 2 ] + $ T [ 2 ] [ 1 ] * $ M [ 1 ] [ 2 ] + $ T [ 2 ] [ 2 ] * $ M [ 2 ] [ 2 ] ; $ T [ 0 ] [ 0 ] = $ a ; $ T [ 0 ] [ 1 ] = $ b ; $ T [ 0 ] [ 2 ] = $ c ; $ T [ 1 ] [ 0 ] = $ d ; $ T [ 1 ] [ 1 ] = $ e ; $ T [ 1 ] [ 2 ] = $ f ; $ T [ 2 ] [ 0 ] = $ g ; $ T [ 2 ] [ 1 ] = $ h ; $ T [ 2 ] [ 2 ] = $ i ; }"}
{"text":"Recursive function to raise the matrix T to the power n","code":"function power ( & $ T , $ n ) {"}
{"text":"base condition .","code":"if ( $ n == 0 $ n == 1 ) return ; $ M = array ( array ( 1 , 1 , 1 ) , array ( 1 , 0 , 0 ) , array ( 0 , 1 , 0 ) ) ;"}
{"text":"recursively call to square the matrix","code":"power ( $ T , ( int ) ( $ n \/ 2 ) ) ;"}
{"text":"calculating square of the matrix T","code":"multiply ( $ T , $ T ) ;"}
{"text":"if n is odd multiply it one time with M","code":"if ( $ n % 2 ) multiply ( $ T , $ M ) ; } function tribonacci ( $ n ) { $ T = array ( array ( 1 , 1 , 1 ) , array ( 1 , 0 , 0 ) , array ( 0 , 1 , 0 ) ) ;"}
{"text":"base condition","code":"if ( $ n == 0 $ n == 1 ) return 0 ; else power ( $ T , $ n - 2 ) ;"}
{"text":"$T [ 0 ] [ 0 ] contains the tribonacci number so return it","code":"return $ T [ 0 ] [ 0 ] ; }"}
{"text":"Driver Code","code":"$ n = 10 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo tribonacci ( $ i ) . \" \u2581 \" ; echo \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate geometric mean and return float value .","code":"< ? php function geometricMean ( $ arr , $ n ) {"}
{"text":"declare sum variable and initialize it to 1.","code":"$ sum = 0 ;"}
{"text":"Compute the sum of all the elements in the array .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum = $ sum + log ( $ arr [ $ i ] ) ;"}
{"text":"compute geometric mean through formula antilog ( ( ( log ( 1 ) + log ( 2 ) + . . . + log ( n ) ) \/ n ) and return the value","code":"$ sum = $ sum \/ $ n ; return exp ( $ sum ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ) ; $ n = count ( $ arr ) ;"}
{"text":"function call","code":"echo geometricMean ( $ arr , $ n ) ; ? >"}
{"text":"function to find smallest number k such that the product of digits of k is equal to n","code":"< ? php function smallestNumber ( $ n ) {"}
{"text":"if ' n ' is a single digit number , then it is the required number","code":"if ( $ n >= 0 && $ n <= 9 ) return $ n ;"}
{"text":"stack the store the digits","code":"$ digits = array ( ) ;"}
{"text":"repeatedly divide ' n ' by the numbers from 9 to 2 until all the numbers are used or ' n ' > 1","code":"for ( $ i = 9 ; $ i >= 2 && $ n > 1 ; $ i -- ) { while ( $ n % $ i == 0 ) {"}
{"text":"save the digit ' i ' that divides ' n ' onto the stack","code":"array_push ( $ digits , $ i ) ; $ n = ( int ) ( $ n \/ $ i ) ; } }"}
{"text":"if true , then no number ' k ' can be formed","code":"if ( $ n != 1 ) return -1 ;"}
{"text":"pop digits from the stack ' digits ' and add them to ' k '","code":"$ k = 0 ; while ( ! empty ( $ digits ) ) $ k = $ k * 10 + array_pop ( $ digits ) ;"}
{"text":"required smallest number","code":"return $ k ; }"}
{"text":"Driver code","code":"$ n = 100 ; echo smallestNumber ( $ n ) ; ? >"}
{"text":"PHP program to check if a number is Magic number .","code":"< ? php function isMagic ( $ n ) { $ sum = 0 ;"}
{"text":"Note that the loop continues if n is 0 and sum is non - zero . It stops when n becomes 0 and sum becomes single digit .","code":"while ( $ n > 0 $ sum > 9 ) { if ( $ n == 0 ) { $ n = $ sum ; $ sum = 0 ; } $ sum += $ n % 10 ; $ n \/= 10 ; }"}
{"text":"Return true if sum becomes 1.","code":"return ( $ sum == 1 ) ; }"}
{"text":"Driver code","code":"$ n = 1234 ; if ( isMagic ( $ n ) ) echo \" Magic \u2581 Number \" ; else echo \" Not \u2581 a \u2581 magic \u2581 Number \" ; ? >"}
{"text":"PHP program to print terms of Sylvester 's sequence","code":"< ? php $ N = 1000000007 ; function printSequence ( $ n ) { global $ N ;"}
{"text":"To store the product .","code":"$ a = 1 ;"}
{"text":"To store the current number .","code":"$ ans = 2 ;"}
{"text":"Loop till n .","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { echo $ ans , \" \" ; $ ans = ( ( $ a % $ N ) * ( $ ans % $ N ) ) % $ N ; $ a = $ ans ; $ ans = ( $ ans + 1 ) % $ N ; } }"}
{"text":"Driver Code","code":"$ n = 6 ; printSequence ( $ n ) ; ? >"}
{"text":"Returns sum of first n natural numbers","code":"< ? php function findSum ( $ n ) { $ sum = 0 ; for ( $ x = 1 ; $ x <= $ n ; $ x ++ ) $ sum = $ sum + $ x ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 5 ; echo findSum ( $ n ) ; ? >"}
{"text":"function to print hailstone numbers and to calculate the number of steps required","code":"< ? php function HailstoneNumbers ( $ N ) { static $ c ; echo $ N . \" \" ; if ( $ N == 1 && $ c == 0 ) {"}
{"text":"N is initially 1.","code":"return $ c ; } else if ( $ N == 1 && $ c != 0 ) {"}
{"text":"N is reduced to 1.","code":"$ c ++ ; return $ c ; } else if ( $ N % 2 == 0 ) {"}
{"text":"If N is Even .","code":"$ c ++ ; HailstoneNumbers ( ( int ) ( $ N \/ 2 ) ) ; } else if ( $ N % 2 != 0 ) {"}
{"text":"N is Odd .","code":"$ c ++ ; HailstoneNumbers ( 3 * $ N + 1 ) ; } return $ c ; }"}
{"text":"Driver Code","code":"$ N = 7 ;"}
{"text":"Function to generate Hailstone Numbers","code":"$ x = HailstoneNumbers ( $ N ) ;"}
{"text":"Output : Number of Steps","code":"echo \" Number of Steps : \" ? >"}
{"text":"Function to return mth summation","code":"< ? php function SUM ( $ n , $ m ) {"}
{"text":"base case","code":"if ( $ m == 1 ) return ( $ n * ( $ n + 1 ) \/ 2 ) ; $ sum = SUM ( $ n , $ m - 1 ) ; return ( $ sum * ( $ sum + 1 ) \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ m = 3 ; echo \" SUM ( \" , $ n , \" , \u2581 \" , $ m , \" ) : \u2581 \" , SUM ( $ n , $ m ) ; ? >"}
{"text":"function to return the required n","code":"< ? php function xorCalc ( $ k ) { if ( $ k == 1 ) return 2 ;"}
{"text":"if k is of form 2 ^ i - 1","code":"if ( ( ( $ k + 1 ) & $ k ) == 0 ) return floor ( $ k \/ 2 ) ; return 1 ; }"}
{"text":"Driver Code","code":"$ k = 31 ; echo xorCalc ( $ k ) ; ? >"}
{"text":"PHP program to find n - th number containing only 4 and 7.","code":"< ? php function findNthNo ( $ n ) { $ res = \" \" ; while ( $ n >= 1 ) {"}
{"text":"If n is odd , append 4 and move to parent","code":"if ( $ n & 1 ) { $ res = $ res . \"4\" ; $ n = ( int ) ( ( $ n - 1 ) \/ 2 ) ; }"}
{"text":"If n is even , append 7 and move to parent","code":"else { $ res = $ res . \"7\" ; $ n = ( int ) ( ( $ n - 2 ) \/ 2 ) ; } }"}
{"text":"Reverse res and return .","code":"return strrev ( $ res ) ; }"}
{"text":"Driver code","code":"$ n = 13 ; echo findNthNo ( $ n ) ; ? >"}
{"text":"program for finding no . of divisors","code":"< ? php function divCount ( $ n ) {"}
{"text":"sieve method for prime calculation","code":"$ hash = array_fill ( 0 , $ n + 1 , 1 ) ; for ( $ p = 2 ; ( $ p * $ p ) < $ n ; $ p ++ ) if ( $ hash [ $ p ] == 1 ) for ( $ i = ( $ p * 2 ) ; $ i < $ n ; $ i = ( $ i + $ p ) ) $ hash [ $ i ] = 0 ;"}
{"text":"Traversing through all prime numbers","code":"$ total = 1 ; for ( $ p = 2 ; $ p <= $ n ; $ p ++ ) { if ( $ hash [ $ p ] == 1 ) {"}
{"text":"calculate number of divisor with formula total div = ( p1 + 1 ) * ( p2 + 1 ) * ... . . * ( pn + 1 ) where n = ( a1 ^ p1 ) * ( a2 ^ p2 ) . ... * ( an ^ pn ) ai being prime divisor for n and pi are their respective power in factorization","code":"$ count = 0 ; if ( $ n % $ p == 0 ) { while ( $ n % $ p == 0 ) { $ n = ( $ n \/ $ p ) ; $ count ++ ; } $ total = $ total * ( $ count + 1 ) ; } } } return $ total ; }"}
{"text":"Driver Code","code":"$ n = 24 ; echo divCount ( $ n ) ; ? >"}
{"text":"Return smallest number having maximum prime factors .","code":"< ? php function maxPrimefactorNum ( $ N ) {"}
{"text":"Sieve of eratosthenes method to count number of unique prime factors .","code":"$ arr = array_fill ( 0 , $ N + 1 , 0 ) ; for ( $ i = 2 ; $ i * $ i <= $ N ; $ i ++ ) { if ( ! $ arr [ $ i ] ) for ( $ j = 2 * $ i ; $ j <= $ N ; $ j += $ i ) $ arr [ $ j ] ++ ; $ arr [ $ i ] = 1 ; }"}
{"text":"Return maximum element in arr [ ]","code":"return max ( $ arr ) ; }"}
{"text":"Driver Code","code":"$ N = 40 ; echo maxPrimefactorNum ( $ N ) ; ? >"}
{"text":"function for decimal to binary conversion without using arithmetic operators","code":"< ? php function decToBin ( $ n ) { if ( $ n == 0 ) return \"0\" ;"}
{"text":"to store the binary equivalent of decimal","code":"$ bin = \" \" ; while ( $ n > 0 ) {"}
{"text":"to get the last binary digit of the number ' n ' and accumulate it at the beginning of ' bin '","code":"$ bin = ( ( $ n & 1 ) == 0 ? '0' : '1' ) . $ bin ;"}
{"text":"right shift ' n ' by 1","code":"$ n >>= 1 ; }"}
{"text":"required binary number","code":"return $ bin ; }"}
{"text":"Driver Code","code":"$ n = 38 ; echo decToBin ( $ n ) ; ? >"}
{"text":"Efficient PHP method to find sum of the elements of array that is halfway increasing and then halfway decreassing","code":"< ? php function arraySum ( $ arr , $ n ) { $ x = ( $ n + 1 ) \/ 2 ; return ( $ arr [ 0 ] - 1 ) * $ n + $ x * $ x ; }"}
{"text":"Driver code","code":"$ arr = array ( 10 , 11 , 12 , 13 , 12 , 11 , 10 ) ; $ n = sizeof ( $ arr ) ; echo ( arraySum ( $ arr , $ n ) ) ; ? >"}
{"text":"method returns true if balancing of scale is possible","code":"< ? php function isBalancePossible ( $ T , $ a ) {"}
{"text":"baseForm vector will store T 's  representation on base a in reverse order","code":"$ baseForm = array ( ) ;"}
{"text":"convert T to representation on base a","code":"while ( $ T ) { array_push ( $ baseForm , $ T % $ a ) ; $ T = ( int ) ( $ T \/ $ a ) ; }"}
{"text":"make first digit of representation as 0","code":"array_push ( $ baseForm , 0 ) ;"}
{"text":"loop over base representation of T","code":"for ( $ i = 0 ; $ i < count ( $ baseForm ) ; $ i ++ ) {"}
{"text":"if any digit is not 0 , 1 , ( a - 1 ) or a then balancing is not possible","code":"if ( $ baseForm [ $ i ] != 0 && $ baseForm [ $ i ] != 1 && $ baseForm [ $ i ] != ( $ a - 1 ) && $ baseForm [ $ i ] != $ a ) return false ;"}
{"text":"if digit is a or ( a - 1 ) then increase left index ' s \u2581 count \/ \u2581 ( case , \u2581 when \u2581 this \u2581 weight \u2581 is \u2581 transferred \u2581 to \u2581 T ' s side )","code":"if ( $ baseForm [ $ i ] == $ a || $ baseForm [ $ i ] == ( $ a - 1 ) ) $ baseForm [ $ i + 1 ] += 1 ; }"}
{"text":"if representation is processed then balancing is possible","code":"return true ; }"}
{"text":"Driver Code","code":"$ T = 11 ; $ a = 4 ; $ balancePossible = isBalancePossible ( $ T , $ a ) ; if ( $ balancePossible ) echo \" Balance \u2581 is \u2581 possible STRNEWLINE \" ; else echo \" Balance \u2581 is \u2581 not \u2581 possible STRNEWLINE \" ; ? >"}
{"text":"function to count number of digits in the product of two numbers","code":"< ? php function countDigits ( $ a , $ b ) {"}
{"text":"if either of the number is 0 , then product will be 0","code":"if ( $ a == 0 or $ b == 0 ) return 1 ;"}
{"text":"required count of digits","code":"return floor ( log10 ( abs ( $ a ) ) + log10 ( abs ( $ b ) ) ) + 1 ; }"}
{"text":"Driver Code","code":"$ a = 33 ; $ b = -24 ; echo countDigits ( $ a , $ b ) ; ? >"}
{"text":"n == > Size of circle m == > Number of items k == > Initial position","code":"< ? php function lastPosition ( $ n , $ m , $ k ) {"}
{"text":"n - k + 1 is number of positions before we reach beginning of circle . If m is less than this value , then we can simply return ( m - 1 ) th position","code":"if ( $ m <= $ n - $ k + 1 ) return $ m + $ k - 1 ;"}
{"text":"Let us compute remaining items before we reach beginning .","code":"$ m = $ m - ( $ n - $ k + 1 ) ;"}
{"text":"We compute m % n to skip all complete rounds . If we reach end , we return n else we return m % n","code":"return ( $ m % $ n == 0 ) ? $ n : ( $ m % $ n ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ m = 8 ; $ k = 2 ; echo lastPosition ( $ n , $ m , $ k ) ; ? >"}
{"text":"PHP program to prints prime numbers smaller than n","code":"< ? php function primesInRange ( $ n ) {"}
{"text":"Compute factorials and apply Wilson 's  theorem.","code":"$ fact = 1 ; for ( $ k = 2 ; $ k < $ n ; $ k ++ ) { $ fact = $ fact * ( $ k - 1 ) ; if ( ( $ fact + 1 ) % $ k == 0 ) print ( $ k . \" STRNEWLINE \" ) ; } }"}
{"text":"Driver code","code":"$ n = 15 ; primesInRange ( $ n ) ; ? >"}
{"text":"epsilon value to maintain precision","code":"< ? php $ EPS = 1e-9 ; function productPuzzle ( $ a , $ n ) { global $ EPS ;"}
{"text":"to hold sum of all values","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += ( double ) log10 ( $ a [ $ i ] ) ;"}
{"text":"output product for each index antilog to find original product value","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( int ) ( $ EPS + pow ( ( double ) 10.00 , $ sum - log10 ( $ a [ $ i ] ) ) ) . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ a = array ( 10 , 3 , 5 , 6 , 2 ) ; $ n = count ( $ a ) ; echo \" The \u2581 product \u2581 array \u2581 is : \u2581 STRNEWLINE \" ; productPuzzle ( $ a , $ n ) ; ? >"}
{"text":"Returns modified number with all even bits 0.","code":"< ? php function changeEvenBits ( $ n ) {"}
{"text":"To store sum of bits at even positions .","code":"$ to_subtract = 0 ;"}
{"text":"To store bits to shift","code":"$ m = 0 ;"}
{"text":"One by one put all even bits to end","code":"for ( $ x = $ n ; $ x ; $ x >>= 2 ) {"}
{"text":"If current last bit is set , add it to ans","code":"if ( $ x & 1 ) $ to_subtract += ( 1 << $ m ) ;"}
{"text":"Next shift position","code":"$ m += 2 ; } return $ n - $ to_subtract ; }"}
{"text":"Driver code","code":"$ n = 30 ; echo changeEvenBits ( $ n ) ; ? >"}
{"text":"function to find the number closest to n and divisible by m","code":"< ? php function closestNumber ( $ n , $ m ) {"}
{"text":"find the quotient","code":"$ q = ( int ) ( $ n \/ $ m ) ;"}
{"text":"1 st possible closest number","code":"$ n1 = $ m * $ q ;"}
{"text":"2 nd possible closest number","code":"$ n2 = ( $ n * $ m ) > 0 ? ( $ m * ( $ q + 1 ) ) : ( $ m * ( $ q - 1 ) ) ;"}
{"text":"if true , then n1 is the required closest number","code":"if ( abs ( $ n - $ n1 ) < abs ( $ n - $ n2 ) ) return $ n1 ;"}
{"text":"else n2 is the required closest number","code":"return $ n2 ; }"}
{"text":"Driver Code","code":"$ n = 13 ; $ m = 4 ; echo closestNumber ( $ n , $ m ) , \" STRNEWLINE \" ; $ n = -15 ; $ m = 6 ; echo closestNumber ( $ n , $ m ) , \" STRNEWLINE \" ; $ n = 0 ; $ m = 8 ; echo closestNumber ( $ n , $ m ) , \" STRNEWLINE \" ; $ n = 18 ; $ m = -7 ; echo closestNumber ( $ n , $ m ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to check Pronic Number","code":"< ? php function checkPronic ( $ x ) { for ( $ i = 0 ; $ i <= ( sqrt ( $ x ) ) ; $ i ++ )"}
{"text":"Checking Pronic Number by multiplying consecutive numbers","code":"if ( $ x == $ i * ( $ i + 1 ) ) return true ; return false ; }"}
{"text":"Printing Pronic Numbers upto 200","code":"for ( $ i = 0 ; $ i <= 200 ; $ i ++ ) if ( checkPronic ( $ i ) ) echo $ i , \" \u2581 \" ; ? >"}
{"text":"To find minimum sum of product of number","code":"< ? php function findMinSum ( $ num ) { $ sum = 0 ;"}
{"text":"Find factors of number and add to the sum","code":"for ( $ i = 2 ; $ i * $ i <= $ num ; $ i ++ ) { while ( $ num % $ i == 0 ) { $ sum += $ i ; $ num \/= $ i ; } } $ sum += $ num ;"}
{"text":"Return sum of numbers having minimum product","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ num = 12 ; echo ( findMinSum ( $ num ) ) ; ? >"}
{"text":"Prints minimum number with given digit sum and only allowed digits as 4 and 7.","code":"< ? php function findMin ( $ sum ) { $ a = 0 ; $ b = 0 ; while ( $ sum > 0 ) {"}
{"text":"Cases where all remaining digits are 4 or 7 ( Remaining sum of digits should be multiple of 4 or 7 )","code":"if ( $ sum % 7 == 0 ) { $ b ++ ; $ sum -= 7 ; } else if ( $ sum % 4 == 0 ) { $ a ++ ; $ sum -= 4 ; }"}
{"text":"If both 4 s and 7 s are there in digit sum , we subtract a 4.","code":"else { $ a ++ ; $ sum -= 4 ; } } if ( $ sum < 0 ) { echo ( \" - 1n \" ) ; return ; } for ( $ i = 0 ; $ i < $ a ; $ i ++ ) echo ( \"4\" ) ; for ( $ i = 0 ; $ i < $ b ; $ i ++ ) echo ( \"7\" ) ; echo ( \" STRNEWLINE \" ) ; }"}
{"text":"Driver code","code":"findMin ( 15 ) ; ? >"}
{"text":"Function to find out minimum number","code":"< ? php function minNum ( $ arr , $ n ) {"}
{"text":"Count odd number of terms in array","code":"$ odd = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ arr [ $ i ] % 2 ) $ odd += 1 ; return ( $ odd % 2 ) ? 1 : 2 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) ; $ n = count ( $ arr ) ; echo minNum ( $ arr , $ n ) ; ? >"}
{"text":"Function to print the maximum number","code":"< ? php function printMaxNum ( $ num ) {"}
{"text":"hashed array to store count of digits","code":"$ count = array_fill ( 0 , 10 , NULL ) ;"}
{"text":"Converting given number to string","code":"$ str = ( string ) $ num ;"}
{"text":"Updating the count array","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) $ count [ ord ( $ str [ $ i ] ) - ord ( '0' ) ] ++ ;"}
{"text":"result is to store the final number","code":"$ result = 0 ; $ multiplier = 1 ;"}
{"text":"Traversing the count array to calculate the maximum number","code":"for ( $ i = 0 ; $ i <= 9 ; $ i ++ ) { while ( $ count [ $ i ] > 0 ) { $ result = $ result + ( $ i * $ multiplier ) ; $ count [ $ i ] -- ; $ multiplier = $ multiplier * 10 ; } }"}
{"text":"return the result","code":"return $ result ; }"}
{"text":"Driver program to test above function","code":"$ num = 38293367 ; echo printMaxNum ( $ num ) ; ? >"}
{"text":"function to form the largest number by applying atmost one swap operation","code":"< ? php function largestNumber ( $ num ) { $ n = strlen ( $ num ) ; $ rightMax [ $ n ] = array ( 0 ) ; $ right ;"}
{"text":"for the rightmost digit , there will be no greater right digit","code":"$ rightMax [ $ n - 1 ] = -1 ;"}
{"text":"index of the greatest right digit till the current index from the right direction","code":"$ right = $ n - 1 ;"}
{"text":"traverse the array from second right element up to the left element","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"if ' num [ i ] ' is less than the greatest digit encountered so far","code":"if ( $ num [ $ i ] < $ num [ $ right ] ) $ rightMax [ $ i ] = $ right ;"}
{"text":"else","code":"else {"}
{"text":"there is no greater right digit for ' num [ i ] '","code":"$ rightMax [ $ i ] = -1 ;"}
{"text":"update ' right ' index","code":"$ right = $ i ; } }"}
{"text":"traverse the ' rightMax [ ] ' array from left to right","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"if for the current digit , greater right digit exists then swap it with its greater right digit and break","code":"if ( $ rightMax [ $ i ] != -1 ) {"}
{"text":"performing the required swap operation","code":"list ( $ num [ $ i ] , $ num [ $ rightMax [ $ i ] ] ) = array ( $ num [ $ rightMax [ $ i ] ] , $ num [ $ i ] ) ; break ; } }"}
{"text":"required largest number","code":"return $ num ; }"}
{"text":"Driver Code","code":"$ num = \"8725634\" ; echo \" Largest \u2581 number : \u2581 \" , largestNumber ( $ num ) ; ? >"}
{"text":"function to calculate nCr i . e . , number of ways to choose r out of n objects","code":"< ? php function nCr ( $ n , $ r ) {"}
{"text":"Since nCr is same as nC ( n - r ) To decrease number of iterations","code":"if ( $ r > $ n \/ 2 ) $ r = $ n - $ r ; $ answer = 1 ; for ( $ i = 1 ; $ i <= $ r ; $ i ++ ) { $ answer *= ( $ n - $ r + $ i ) ; $ answer \/= $ i ; } return $ answer ; }"}
{"text":"function to calculate binomial r . v . probability","code":"function binomialProbability ( $ n , $ k , $ p ) { return nCr ( $ n , $ k ) * pow ( $ p , $ k ) * pow ( 1 - $ p , $ n - $ k ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; $ k = 5 ; $ p = 1.0 \/ 3 ; $ probability = binomialProbability ( $ n , $ k , $ p ) ; echo \" Probability \u2581 of \u2581 \" . $ k ; echo \" \u2581 heads \u2581 when \u2581 a \u2581 coin \u2581 is \u2581 tossed \u2581 \" . $ n ; echo \" \u2581 times \u2581 where \u2581 probability \u2581 of \u2581 \" . \" each \u2581 head \u2581 is \u2581 \" . $ p ; echo \" is = \" ? >"}
{"text":"Function to find GCD of pair with max GCD in the array","code":"< ? php function findMaxGCD ( $ arr , $ n ) {"}
{"text":"Computing highest element","code":"$ high = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ high = max ( $ high , $ arr [ $ i ] ) ;"}
{"text":"Array to store the count of divisors i . e . Potential GCDs","code":"$ divisors = array_fill ( 0 , $ high + 1 , 0 ) ;"}
{"text":"Iterating over every element","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Calculating all the divisors","code":"for ( $ j = 1 ; $ j <= ( int ) ( sqrt ( $ arr [ $ i ] ) ) ; $ j ++ ) {"}
{"text":"Divisor found","code":"if ( $ arr [ $ i ] % $ j == 0 ) {"}
{"text":"Incrementing count for divisor","code":"$ divisors [ $ j ] ++ ;"}
{"text":"Element \/ divisor is also a divisor Checking if both divisors are not same","code":"if ( $ j != ( int ) ( $ arr [ $ i ] \/ $ j ) ) $ divisors [ ( int ) ( $ arr [ $ i ] \/ $ j ) ] ++ ; } } }"}
{"text":"Checking the highest potential GCD","code":"for ( $ i = $ high ; $ i >= 1 ; $ i -- )"}
{"text":"If this divisor can divide at least 2 numbers , it is a GCD of at least 1 pair","code":"if ( $ divisors [ $ i ] > 1 ) return $ i ; }"}
{"text":"Array in which pair with max GCD is to be found","code":"$ arr = array ( 1 , 2 , 4 , 8 , 8 , 12 ) ;"}
{"text":"Size of array","code":"$ n = sizeof ( $ arr ) ; echo findMaxGCD ( $ arr , $ n ) ; ? >"}
{"text":"function to find GCD of pair with max GCD in the array","code":"< ? php function findMaxGCD ( $ arr , $ n ) {"}
{"text":"Calculating MAX in array","code":"$ high = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ high = max ( $ high , $ arr [ $ i ] ) ;"}
{"text":"Maintaining count array","code":"$ count = array_fill ( 0 , $ high + 1 , 0 ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count [ $ arr [ $ i ] ] ++ ;"}
{"text":"Variable to store the multiples of a number","code":"$ counter = 0 ;"}
{"text":"Iterating from MAX to 1 GCD is always between MAX and 1. The first GCD found will be the highest as we are decrementing the potential GCD","code":"for ( $ i = $ high ; $ i >= 1 ; $ i -- ) { $ j = $ i ; $ counter = 0 ;"}
{"text":"Iterating from current potential GCD till it is less than MAX","code":"while ( $ j <= $ high ) {"}
{"text":"A multiple found","code":"if ( $ count [ $ j ] >= 2 ) return $ j ; else if ( $ count [ $ j ] == 1 ) $ counter ++ ;"}
{"text":"Incrementing potential GCD by itself To check i , 2 i , 3 i ... .","code":"$ j += $ i ;"}
{"text":"2 multiples found , max GCD found","code":"if ( $ counter == 2 ) return $ i ; } } }"}
{"text":"Array in which pair with max GCD is to be found","code":"$ arr = array ( 1 , 2 , 4 , 8 , 8 , 12 ) ;"}
{"text":"Size of array","code":"$ n = count ( $ arr ) ; print ( findMaxGCD ( $ arr , $ n ) ) ; ? >"}
{"text":"returns number of 1 s from the binary number","code":"< ? php function count_one ( $ n ) { $ c_one = 0 ; while ( $ n != 0 ) { $ rem = $ n % 10 ;"}
{"text":"counting 1 s","code":"if ( $ rem == 1 ) $ c_one = $ c_one + 1 ; $ n = $ n \/ 10 ; } return $ c_one ; }"}
{"text":"Check if number is evil or not","code":"function checkEvil ( $ n ) { $ i = 0 ; $ bin = 0 ; $ n_one = 0 ;"}
{"text":"converting n to binary form","code":"while ( $ n != 0 ) {"}
{"text":"calculating remainder","code":"$ r = $ n % 2 ;"}
{"text":"storing the remainders in binary form as a number","code":"$ bin = $ bin + $ r * ( pow ( 10 , $ i ) ) ; $ n = $ n \/ 2 ; }"}
{"text":"Calling the count_one function to count and return number of 1 s in bin","code":"$ n_one = count_one ( $ bin ) ; if ( $ n_one % 2 == 0 ) return 1 ; else return 0 ; }"}
{"text":"Driver Code","code":"$ i ; $ check ; $ num ; $ num = 32 ; $ check = checkEvil ( $ num ) ; if ( $ check == 1 ) echo $ num , \" \u2581 is \u2581 Evil \u2581 Number STRNEWLINE \" ; else echo $ num , \" \u2581 is \u2581 Odious \u2581 Number STRNEWLINE \" ; ? >"}
{"text":"returns number of valid pairs","code":"< ? php function CountPairs ( $ n ) {"}
{"text":"initialize k","code":"$ k = $ n ;"}
{"text":"loop till imin <= n","code":"$ imin = 1 ;"}
{"text":"Initialize result","code":"$ ans = 0 ; while ( $ imin <= $ n ) {"}
{"text":"max i with given k floor ( n \/ k )","code":"$ imax = $ n \/ $ k ;"}
{"text":"adding k * ( number of i with floor ( n \/ i ) = k to ans","code":"$ ans += $ k * ( $ imax - $ imin + 1 ) ;"}
{"text":"set imin = imax + 1 and k = n \/ imin","code":"$ imin = $ imax + 1 ; $ k = ( int ) ( $ n \/ $ imin ) ; } return $ ans ; }"}
{"text":"Driver Code","code":"echo ( CountPairs ( 1 ) . \" STRNEWLINE \" ) ; echo ( CountPairs ( 2 ) . \" STRNEWLINE \" ) ; echo ( CountPairs ( 3 ) . \" STRNEWLINE \" ) ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function powermod ( $ x , $ y , $ p ) {"}
{"text":"$x = $x % $p ; Update x if it is more than or equal to p","code":"while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( ( $ y & 1 ) > 0 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Returns modulo inverse of a with respect to m using extended Euclid Algorithm","code":"function modInverse ( $ a , $ m ) { $ m0 = $ m ; $ x0 = 0 ; $ x1 = 1 ; if ( $ m == 1 ) return 0 ; while ( $ a > 1 ) {"}
{"text":"q is quotient","code":"$ q = ( int ) ( $ a \/ $ m ) ; $ t = $ m ;"}
{"text":"m is remainder now , process same as Euclid 's algo","code":"$ m = $ a % $ m ; $ a = $ t ; $ t = $ x0 ; $ x0 = $ x1 - $ q * $ x0 ; $ x1 = $ t ; }"}
{"text":"Make x1 positive","code":"if ( $ x1 < 0 ) $ x1 += $ m0 ; return $ x1 ; }"}
{"text":"Function to calculate the above expression","code":"function evaluteExpression ( $ n ) {"}
{"text":"Initialize the result","code":"$ firstsum = 0 ; $ mod = 10 ;"}
{"text":"Compute first part of expression","code":"for ( $ i = 2 , $ j = 0 ; ( 1 << $ j ) <= $ n ; $ i *= $ i , ++ $ j ) $ firstsum = ( $ firstsum + $ i ) % $ mod ;"}
{"text":"Compute second part of expression i . e . , ( ( 4 ^ ( n + 1 ) - 1 ) \/ 3 ) mod 10 Since division of 3 in modulo can ' t \u2581 \u2581 \u2581 be \u2581 performed \u2581 directly \u2581 therefore \u2581 we \u2581 \u2581 \u2581 need \u2581 to \u2581 find \u2581 it ' s modulo Inverse","code":"$ secondsum = ( powermod ( 4 , $ n + 1 , $ mod ) - 1 ) * modInverse ( 3 , $ mod ) ; return ( $ firstsum * $ secondsum ) % $ mod ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo evaluteExpression ( $ n ) . \" STRNEWLINE \" ; $ n = 10 ; echo evaluteExpression ( $ n ) ; ? >"}
{"text":"Returns power of p in n !","code":"< ? php function PowerOFPINnfactorial ( $ n , $ p ) {"}
{"text":"initializing answer","code":"$ ans = 0 ;"}
{"text":"initializing","code":"$ temp = $ p ;"}
{"text":"loop until temp <= n","code":"while ( $ temp <= $ n ) {"}
{"text":"add number of numbers divisible by n","code":"$ ans += $ n \/ $ temp ;"}
{"text":"each time multiply temp by p","code":"$ temp = $ temp * $ p ; } return $ ans ; }"}
{"text":"Driver function","code":"echo PowerOFPINnfactorial ( 4 , 2 ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to convert binary to decimal","code":"< ? php function binaryToDecimal ( $ n ) { $ num = $ n ; $ dec_value = 0 ;"}
{"text":"Initializing base value to 1 , i . e 2 ^ 0","code":"$ base = 1 ; $ temp = $ num ; while ( $ temp ) { $ last_digit = $ temp % 10 ; $ temp = $ temp \/ 10 ; $ dec_value += $ last_digit * $ base ; $ base = $ base * 2 ; } return $ dec_value ; }"}
{"text":"Driver Code","code":"$ num = 10101001 ; echo binaryToDecimal ( $ num ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function for calculating factorial","code":"< ? php function stirlingFactorial ( $ n ) { if ( $ n == 1 ) return 1 ; $ z ;"}
{"text":"value of natural e","code":"$ e = 2.71 ;"}
{"text":"evaluating factorial using stirling approximation","code":"$ z = sqrt ( 2 * 3.14 * $ n ) * pow ( ( $ n \/ $ e ) , $ n ) ; return floor ( $ z ) ; }"}
{"text":"Driver Code","code":"echo stirlingFactorial ( 1 ) , \" STRNEWLINE \" ; echo stirlingFactorial ( 2 ) , \" STRNEWLINE \" ; echo stirlingFactorial ( 3 ) , \" STRNEWLINE \" ; echo stirlingFactorial ( 4 ) , \" STRNEWLINE \" ; echo stirlingFactorial ( 5 ) , \" STRNEWLINE \" ; echo stirlingFactorial ( 6 ) , \" \u2581 STRNEWLINE \" ; echo stirlingFactorial ( 7 ) , \" \u2581 STRNEWLINE \" ; ? >"}
{"text":"A function will return number of pair whose XOR is odd","code":"< ? php function countXorPair ( $ arr , $ n ) {"}
{"text":"To store count of odd and even numbers","code":"$ odd = 0 ; $ even = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Increase even if number is even otherwise increase odd","code":"if ( $ arr [ $ i ] % 2 == 0 ) $ even ++ ; else $ odd ++ ; }"}
{"text":"Return number of pairs","code":"return $ odd * $ even ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 ) ; $ n = sizeof ( $ arr ) ; echo countXorPair ( $ arr , $ n ) ; ? >"}
{"text":"Max Iterations","code":"< ? php $ MAX_ITERATIONS = 20 ;"}
{"text":"Function to check whether number is Lychrel Number","code":"function isLychrel ( $ number ) { global $ MAX_ITERATIONS ; for ( $ i = 0 ; $ i < $ MAX_ITERATIONS ; $ i ++ ) { $ number = $ number + reverse ( $ number ) ; if ( isPalindrome ( $ number ) ) return \" false \" ; } return \" true \" ; }"}
{"text":"Function to check whether the number is Palindrome","code":"function isPalindrome ( $ number ) { return $ number == reverse ( $ number ) ; }"}
{"text":"Function to reverse the number","code":"function reverse ( $ number ) { $ reverse = 0 ; while ( $ number > 0 ) { $ remainder = $ number % 10 ; $ reverse = ( $ reverse * 10 ) + $ remainder ; $ number = ( int ) ( $ number \/ 10 ) ; } return $ reverse ; }"}
{"text":"Driver Code","code":"$ number = 295 ; echo $ number . \" \u2581 is \u2581 lychrel ? \u2581 \" . isLychrel ( $ number ) ; ? >"}
{"text":"Returns n - th rectangular number","code":"< ? php function findRectNum ( $ n ) { return $ n * ( $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo findRectNum ( $ n ) ; ? >"}
{"text":"PHP Program to find root of a function , f ( x )","code":"< ? php $ MAX_ITERATIONS = 10000 ;"}
{"text":"Function to calculate f ( x )","code":"function f ( $ x ) {"}
{"text":"Taking f ( x ) = x ^ 3 + 2 x ^ 2 + 10 x - 20","code":"return 1 * pow ( $ x , 3 ) + 2 * $ x * $ x + 10 * $ x - 20 ; } function Muller ( $ a , $ b , $ c ) { global $ MAX_ITERATIONS ; $ res = 0 ; for ( $ i = 0 ; ; ++ $ i ) {"}
{"text":"Calculating various constants required to calculate x3","code":"$ f1 = f ( $ a ) ; $ f2 = f ( $ b ) ; $ f3 = f ( $ c ) ; $ d1 = $ f1 - $ f3 ; $ d2 = $ f2 - $ f3 ; $ h1 = $ a - $ c ; $ h2 = $ b - $ c ; $ a0 = $ f3 ; $ a1 = ( ( ( $ d2 * pow ( $ h1 , 2 ) ) - ( $ d1 * pow ( $ h2 , 2 ) ) ) \/ ( ( $ h1 * $ h2 ) * ( $ h1 - $ h2 ) ) ) ; $ a2 = ( ( ( $ d1 * $ h2 ) - ( $ d2 * $ h1 ) ) \/ ( ( $ h1 * $ h2 ) * ( $ h1 - $ h2 ) ) ) ; $ x = ( ( -2 * $ a0 ) \/ ( $ a1 + abs ( sqrt ( $ a1 * $ a1 - 4 * $ a0 * $ a2 ) ) ) ) ; $ y = ( ( -2 * $ a0 ) \/ ( $ a1 - abs ( sqrt ( $ a1 * $ a1 - 4 * $ a0 * $ a2 ) ) ) ) ;"}
{"text":"Taking the root which is closer to x2","code":"if ( $ x >= $ y ) $ res = $ x + $ c ; else $ res = $ y + $ c ;"}
{"text":"checking for resemblance of x3 with x2 till two decimal places","code":"$ m = $ res * 100 ; $ n = $ c * 100 ; $ m = floor ( $ m ) ; $ n = floor ( $ n ) ; if ( $ m == $ n ) break ; $ a = $ b ; $ b = $ c ; $ c = $ res ; if ( $ i > $ MAX_ITERATIONS ) { echo \" Root \u2581 cannot \u2581 be \u2581 found \u2581 using \u2581 Muller ' s \u2581 method \" ; break ; } } if ( $ i <= $ MAX_ITERATIONS ) echo \" The \u2581 value \u2581 of \u2581 the \u2581 root \u2581 is \u2581 \" . round ( $ res , 4 ) ; }"}
{"text":"Driver main function","code":"$ a = 0 ; $ b = 1 ; $ c = 2 ; Muller ( $ a , $ b , $ c ) ; ? >"}
{"text":"PHP program to efficiently compute values of euler totient function for multiple inputs .","code":"< ? php $ MAX = 100001 ;"}
{"text":"Stores prime numbers upto MAX - 1 values","code":"$ p = array ( ) ;"}
{"text":"Finds prime numbers upto MAX - 1 and stores them in vector p","code":"function sieve ( ) { global $ MAX , $ p ; $ isPrime = array_fill ( 0 , $ MAX + 1 , 0 ) ; for ( $ i = 2 ; $ i <= $ MAX ; $ i ++ ) {"}
{"text":"if prime [ i ] is not marked before","code":"if ( $ isPrime [ $ i ] == 0 ) {"}
{"text":"fill vector for every newly encountered prime","code":"array_push ( $ p , $ i ) ;"}
{"text":"run this loop till square root of MAX , mark the index i * j as not prime","code":"for ( $ j = 2 ; $ i * $ j <= $ MAX ; $ j ++ ) $ isPrime [ $ i * $ j ] = 1 ; } } }"}
{"text":"function to find totient of n","code":"function phi ( $ n ) { global $ p ; $ res = $ n ;"}
{"text":"this loop runs sqrt ( n \/ ln ( n ) ) times","code":"for ( $ i = 0 ; $ p [ $ i ] * $ p [ $ i ] <= $ n ; $ i ++ ) { if ( $ n % $ p [ $ i ] == 0 ) {"}
{"text":"subtract multiples of p [ i ] from r","code":"$ res -= ( int ) ( $ res \/ $ p [ $ i ] ) ;"}
{"text":"Remove all occurrences of p [ i ] in n","code":"while ( $ n % $ p [ $ i ] == 0 ) $ n = ( int ) ( $ n \/ $ p [ $ i ] ) ; } }"}
{"text":"when n has prime factor greater than sqrt ( n )","code":"if ( $ n > 1 ) $ res -= ( int ) ( $ res \/ $ n ) ; return $ res ; }"}
{"text":"preprocess all prime numbers upto 10 ^ 5","code":"sieve ( ) ; print ( phi ( 11 ) . \" STRNEWLINE \" ) ; print ( phi ( 21 ) . \" STRNEWLINE \" ) ; print ( phi ( 31 ) . \" STRNEWLINE \" ) ; print ( phi ( 41 ) . \" STRNEWLINE \" ) ; print ( phi ( 51 ) . \" STRNEWLINE \" ) ; print ( phi ( 61 ) . \" STRNEWLINE \" ) ; print ( phi ( 91 ) . \" STRNEWLINE \" ) ; print ( phi ( 101 ) . \" STRNEWLINE \" ) ; ? >"}
{"text":"Prints n - th number where each digit is a prime number","code":"< ? php function nthprimedigitsnumber ( $ n ) {"}
{"text":"Finding the length of n - th number","code":"$ len = 1 ;"}
{"text":"Count of numbers with len - 1 digits","code":"$ prev_count = 0 ; while ( true ) {"}
{"text":"Count of numbers with i digits","code":"$ curr_count = $ prev_count + pow ( 4 , $ len ) ;"}
{"text":"if i is the length of such number then n < 4 * ( 4 ^ ( i - 1 ) - 1 ) \/ 3 and n >= 4 * ( 4 ^ i - 1 ) \/ 3 if a valid i is found break the loop","code":"if ( $ prev_count < $ n && $ curr_count >= $ n ) break ;"}
{"text":"check for i + 1","code":"$ len ++ ; $ prev_count = $ curr_count ; }"}
{"text":"Finding ith digit at ith place","code":"for ( $ i = 1 ; $ i <= $ len ; $ i ++ ) {"}
{"text":"j = 1 means 2 j = 2 means ... j = 4 means 7","code":"for ( $ j = 1 ; $ j <= 4 ; $ j ++ ) {"}
{"text":"if prev_count + 4 ^ ( len - i ) is less than n , increase prev_count by 4 ^ ( x - i )","code":"if ( $ prev_count + pow ( 4 , $ len - $ i ) < $ n ) $ prev_count += pow ( 4 , $ len - $ i ) ;"}
{"text":"else print the ith digit and break","code":"else { if ( $ j == 1 ) echo \"2\" ; else if ( $ j == 2 ) echo \"3\" ; else if ( $ j == 3 ) echo \"5\" ; else if ( $ j == 4 ) echo \"7\" ; break ; } } } echo \" \" }"}
{"text":"Driver Code","code":"nthprimedigitsnumber ( 10 ) ; nthprimedigitsnumber ( 21 ) ; ? >"}
{"text":"Returns ( - 1 ) ^ n","code":"< ? php function cassini ( $ n ) { return ( $ n & 1 ) ? -1 : 1 ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( cassini ( $ n ) ) ; ? >"}
{"text":"Function which check is a number divided with every element in list or not","code":"< ? php function findNoIsDivisibleOrNot ( $ a , $ n , $ l ) { for ( $ i = 0 ; $ i < $ l ; $ i ++ ) { if ( $ a [ $ i ] % $ n != 0 ) return false ; } return true ; }"}
{"text":"Driver Code","code":"$ a = array ( 14 , 12 , 4 , 18 ) ; $ n = 2 ; $ l = sizeof ( $ a ) ; if ( findNoIsDivisibleOrNot ( $ a , $ n , $ l ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"method to find factorial of given number","code":"< ? php function factorial ( $ n ) { if ( $ n == 0 ) return 1 ; return $ n * factorial ( $ n - 1 ) ; }"}
{"text":"to print range of length n having all composite integers","code":"function printRange ( $ n ) { $ a = factorial ( $ n + 2 ) + 2 ; $ b = $ a + $ n - 1 ; echo \" [ \" , $ a , \" , \u2581 \" , $ b , \" ] \" ; return 0 ; }"}
{"text":"Driver Code","code":"$ n = 3 ; printRange ( $ n ) ; ? >"}
{"text":"PHP program to find minimum value that can be assigned to all elements so that product becomes greater than current product .","code":"< ? php function findMinValue ( $ arr , $ n ) {"}
{"text":"sort the array to apply Binary search","code":"sort ( $ arr ) ;"}
{"text":"using log property add every logarithmic value of element to val $val = 0 ; where ld is long double","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ val += ( log ( $ arr [ $ i ] ) ) ;"}
{"text":"set left and right extremities to find min value","code":"$ left = $ arr [ 0 ] ; $ right = $ arr [ $ n - 1 ] + 1 ; $ ans = 0 ; while ( $ left <= $ right ) { $ mid = ( int ) ( $ left + $ right ) \/ 2 ;"}
{"text":"multiplying n to mid , to find the correct min value","code":"$ temp = $ n * ( log ( $ mid ) ) ; if ( $ val < $ temp ) { $ ans = $ mid ; $ right = $ mid - 1 ; } else $ left = $ mid + 1 ; } return ( floor ( $ ans ) ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 2 , 1 , 10 , 6 ) ; $ n = sizeof ( $ arr ) ; echo findMinValue ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to find the required sum","code":"< ? php function sumOfTermsInNthRow ( $ n ) {"}
{"text":"sum = n * ( 2 * n ^ 2 + 1 )","code":"$ sum = $ n * ( 2 * pow ( $ n , 2 ) + 1 ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo \" Sum \u2581 of \u2581 all \u2581 the \u2581 terms \u2581 in \u2581 nth \u2581 row \u2581 = \u2581 \" , sumOfTermsInNthRow ( $ n ) ; ? >"}
{"text":"PHP implementation to find first digit of a single number","code":"< ? php function firstDigit ( $ x ) {"}
{"text":"Keep dividing by 10 until it is greater than equal to 10","code":"while ( $ x >= 10 ) $ x = $ x \/ 10 ; return floor ( $ x ) ; }"}
{"text":"Driver Code","code":"echo firstDigit ( 12345 ) , \" STRNEWLINE \" ; echo firstDigit ( 5432 ) ; ? >"}
{"text":"PHP program to count appearances of a digit ' d ' in range from [ 0. . n ]","code":"< ? php function getOccurence ( $ n , $ d ) {"}
{"text":"Initialize result","code":"$ result = 0 ;"}
{"text":"Count appearances in numbers starting from d .","code":"$ itr = $ d ; while ( $ itr <= $ n ) {"}
{"text":"When the last digit is equal to d","code":"if ( $ itr % 10 == $ d ) $ result ++ ;"}
{"text":"When the first digit is equal to d then","code":"if ( $ itr != 0 && floor ( $ itr \/ 10 ) == $ d ) {"}
{"text":"increment result as well as number","code":"$ result ++ ; $ itr ++ ; }"}
{"text":"In case of reverse of number such as 12 and 21","code":"else if ( floor ( $ itr \/ 10 ) == $ d - 1 ) $ itr = $ itr + ( 10 - $ d ) ; else $ itr = $ itr + 10 ; } return $ result ; }"}
{"text":"Driver code","code":"$ n = 11 ; $ d = 1 ; echo getOccurence ( $ n , $ d ) ; ? >"}
{"text":"Function for calculation","code":"< ? php function cal_cos ( $ n ) { $ accuracy = 0.0001 ;"}
{"text":"Converting degrees to radian","code":"$ n = $ n * ( 3.142 \/ 180.0 ) ; $ x1 = 1 ;"}
{"text":"maps the sum along the series","code":"$ cosx = $ x1 ;"}
{"text":"holds the actual value of sin ( n )","code":"$ cosval = cos ( $ n ) ; $ i = 1 ; do { $ denominator = 2 * $ i * ( 2 * $ i - 1 ) ; $ x1 = - $ x1 * $ n * $ n \/ $ denominator ; $ cosx = $ cosx + $ x1 ; $ i = $ i + 1 ; } while ( $ accuracy <= abs ( $ cosval - $ cosx ) ) ; echo round ( $ cosx , 6 ) ; }"}
{"text":"Driver Code","code":"$ n = 30 ; cal_cos ( $ n ) ; ? >"}
{"text":"Function to multiply x with large number stored in vector v . Result is stored in v .","code":"< ? php function multiply ( & $ v , $ x ) { $ carry = 0 ; $ size = count ( $ v ) ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) {"}
{"text":"Calculate res + prev carry","code":"$ res = $ carry + $ v [ $ i ] * $ x ;"}
{"text":"updation at ith position","code":"$ v [ $ i ] = $ res % 10 ; $ carry = ( int ) ( $ res \/ 10 ) ; } while ( $ carry != 0 ) { array_push ( $ v , $ carry % 10 ) ; $ carry = ( int ) ( $ carry \/ 10 ) ; } }"}
{"text":"Returns sum of digits in n !","code":"function findSumOfDigits ( $ n ) {"}
{"text":"One by one multiply i to current vector and update the vector .","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) multiply ( $ v , $ i ) ;"}
{"text":"Find sum of digits in vector v [ ]","code":"$ sum = 0 ; $ size = count ( $ v ) ; for ( $ i = 0 ; $ i < $ size ; $ i ++ ) $ sum += $ v [ $ i ] ; return $ sum ; }"}
{"text":"Driver code","code":"$ n = 1000 ; print ( findSumOfDigits ( $ n ) ) ; ? >"}
{"text":"Finds two sides of a right angle triangle if it they exist .","code":"< ? php function printOtherSides ( $ n ) {"}
{"text":"if n is odd","code":"if ( $ n & 1 ) {"}
{"text":"case of n = 1 handled separately","code":"if ( $ n == 1 ) echo - 1 ; else { $ b = ( $ n * $ n - 1 ) \/ 2 ; $ c = ( $ n * $ n + 1 ) \/ 2 ; echo \" b \u2581 = \u2581 \" , $ b , \" , \u2581 c \u2581 = \u2581 \" , $ c ; } } else {"}
{"text":"case of n = 2 handled separately","code":"if ( $ n == 2 ) echo - 1 ; else { $ b = $ n * $ n \/ 4 - 1 ; $ c = $ n * $ n \/ 4 + 1 ; echo \" b \u2581 = \u2581 \" , $ b , \" , \u2581 c \u2581 = \u2581 \" , $ c ; } } }"}
{"text":"Driver Code","code":"$ a = 3 ; printOtherSides ( $ a ) ; return 0 ; ? >"}
{"text":"PHP program to make a number odd","code":"< ? php function makeOdd ( $ n ) {"}
{"text":"Return 1 if already odd","code":"if ( $ n % 2 != 0 ) return 1 ;"}
{"text":"Check on dividing with a number when the result becomes odd Return that number","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ )"}
{"text":"If n is divided by i and n \/ i is odd then return i","code":"if ( ( $ n % $ i == 0 ) && ( ( $ n \/ $ i ) % 2 == 1 ) ) return $ i ; }"}
{"text":"Driver code","code":"$ n = 36 ; echo makeOdd ( $ n ) ; ? >"}
{"text":"Returns XOR of all subarray xors","code":"< ? php function getTotalXorOfSubarrayXors ( $ arr , $ N ) {"}
{"text":"if even number of terms are there , all numbers will appear even number of times . So result is 0.","code":"if ( $ N % 2 == 0 ) return 0 ;"}
{"text":"else initialize result by 0 as ( a xor 0 = a )","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i += 2 ) $ res ^= $ arr [ $ i ] ; return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 5 , 2 , 4 , 6 ) ; $ N = count ( $ arr ) ; echo getTotalXorOfSubarrayXors ( $ arr , $ N ) ; ? >"}
{"text":"Returns count of iterations to fill arr [ ] with 1 s .","code":"< ? php function countIterations ( $ arr , $ n ) { $ oneFound = false ; $ res = 0 ;"}
{"text":"Start traversing the array","code":"for ( $ i = 0 ; $ i < $ n ; ) { if ( $ arr [ $ i ] == 1 ) $ oneFound = true ;"}
{"text":"Traverse until a 0 is found","code":"while ( $ i < $ n && $ arr [ $ i ] == 1 ) $ i ++ ;"}
{"text":"Count contiguous 0 s","code":"$ count_zero = 0 ; while ( $ i < $ n && $ arr [ $ i ] == 0 ) { $ count_zero ++ ; $ i ++ ; }"}
{"text":"Condition for Case 3","code":"if ( $ oneFound == false && $ i == $ n ) return -1 ;"}
{"text":"Condition to check if Case 1 satisfies :","code":"$ curr_count ; if ( $ i < $ n && $ oneFound == true ) {"}
{"text":"If count_zero is even","code":"if ( $ count_zero & 1 == 0 ) $ curr_count = $ count_zero \/ 2 ;"}
{"text":"If count_zero is odd","code":"else $ curr_count = ( $ count_zero + 1 ) \/ 2 ;"}
{"text":"Reset count_zero","code":"$ count_zero = 0 ; }"}
{"text":"Case 2","code":"else { $ curr_count = $ count_zero ; $ count_zero = 0 ; }"}
{"text":"Update res","code":"$ res = max ( $ res , $ curr_count ) ; } return $ res ; }"}
{"text":"Driver code","code":"$ arr = array ( 0 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo countIterations ( $ arr , $ n ) ; ? >"}
{"text":"Print consecutive numbers from last to first","code":"< ? php function printConsecutive ( $ last , $ first ) { echo $ first ++ ; for ( $ x = $ first ; $ x <= $ last ; $ x ++ ) echo \" + \" } function findConsecutive ( $ N ) { for ( $ last = 1 ; $ last < $ N ; $ last ++ ) { for ( $ first = 0 ; $ first < $ last ; $ first ++ ) { if ( 2 * $ N == ( $ last - $ first ) * ( $ last + $ first + 1 ) ) { echo $ N , \" \u2581 = \u2581 \" ; printConsecutive ( $ last , $ first + 1 ) ; return ; } } } echo \" - 1\" ; }"}
{"text":"Driver Code","code":"$ n = 12 ; findConsecutive ( $ n ) ; ? >"}
{"text":"Return n - th number in series made of 4 and 7","code":"< ? php function printNthElement ( $ n ) {"}
{"text":"create an array of size ( n + 1 )","code":"$ arr [ 1 ] = 4 ; $ arr [ 2 ] = 7 ; for ( $ i = 3 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If i is odd","code":"if ( $ i % 2 != 0 ) $ arr [ $ i ] = $ arr [ $ i \/ 2 ] * 10 + 4 ; else $ arr [ $ i ] = $ arr [ ( $ i \/ 2 ) - 1 ] * 10 + 7 ; } return $ arr [ $ n ] ; }"}
{"text":"Driver code","code":"$ n = 6 ; echo ( printNthElement ( $ n ) ) ; ? >"}
{"text":"Returns maximum sum of numbers with LCM as N","code":"< ? php function maxSumLCM ( $ n ) {"}
{"text":"Initialize result","code":"$ max_sum = 0 ;"}
{"text":"Finding a divisor of n and adding it to max_sum","code":"for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ n % $ i == 0 ) { $ max_sum += $ i ; if ( $ n \/ $ i != $ i ) $ max_sum += ( $ n \/ $ i ) ; } } return $ max_sum ; }"}
{"text":"Driver code","code":"$ n = 2 ; echo MaxSumLCM ( $ n ) ; ? >"}
{"text":"PHP program to demonstrate finding square root of a number using sqrt ( )","code":"< ? php $ n = 12 ; echo sqrt ( $ n ) ; ? >"}
{"text":"PHP program to find maximum value of an integer for which factorial can be calculated on your system","code":"< ? php function findMaxValue ( ) { $ res = 2 ; $ fact = 2 ; $ pos = -1 ; while ( true ) {"}
{"text":"when fact crosses its size , it gives negative value","code":"$ mystring = $ fact ; $ pos = strpos ( $ mystring , ' E ' ) ; if ( $ pos > 0 ) break ; $ res ++ ; $ fact = $ fact * $ res ; } return $ res - 1 ; }"}
{"text":"Driver Code","code":"echo \" Maximum \u2581 value \u2581 of \" . \" \u2581 integer \u2581 \" . findMaxValue ( ) ; ? >"}
{"text":"Function to check any number of array is divisible by k or not","code":"< ? php function func ( $ a , $ k , $ n ) {"}
{"text":"If any array element is divisible by k , then LCM of whole array should also be divisible .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ a [ $ i ] % $ k == 0 ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ a = array ( 14 , 27 , 38 , 76 , 84 ) ; $ k = 19 ; $ res = func ( $ a , $ k , 5 ) ; if ( $ res ) echo \" true \" ; else echo \" false \" ; ? >"}
{"text":"PHP program to find closest tidy number smaller than the given number","code":"< ? php function tidyNum ( $ str , $ len ) { for ( $ i = $ len - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"check whether string violates tidy property","code":"if ( $ str [ $ i ] > $ str [ $ i + 1 ] ) {"}
{"text":"if string violates tidy property , then decrease the value stored at that index by 1 and replace all the value stored right to that index by 9","code":"$ x = ord ( $ str [ $ i ] ) ; $ x -- ; $ str [ $ i ] = chr ( $ x ) ; for ( $ j = $ i + 1 ; $ j < $ len ; $ j ++ ) $ str [ $ j ] = '9' ; } } return $ str ; }"}
{"text":"Driver code","code":"$ str = \"11333445538\" ; $ len = strlen ( $ str ) ;"}
{"text":"num will store closest tidy number","code":"$ num = tidyNum ( $ str , $ len ) ; echo $ num ; ? >"}
{"text":"Returns count of m digit numbers having n as divisor","code":"< ? php function findCount ( $ m , $ n ) {"}
{"text":"generating largest number of m digit","code":"$ num1 = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) $ num1 = ( $ num1 * 10 ) + 9 ;"}
{"text":"generating largest number of m - 1 digit","code":"$ num2 = 0 ; for ( $ i = 0 ; $ i < ( $ m - 1 ) ; $ i ++ ) $ num2 = ( $ num2 * 10 ) + 9 ;"}
{"text":"returning number of dividend","code":"return ( ( $ num1 \/ $ n ) - ( $ num2 \/ $ n ) ) ; }"}
{"text":"Driver code","code":"$ m = 2 ; $ n = 6 ; echo findCount ( $ m , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate nth number made of even digits only","code":"< ? php function findNthEvenDigitNumber ( $ n ) {"}
{"text":"variable to note how many such numbers have been found till now","code":"$ count = 0 ; for ( $ i = 0 ; ; $ i ++ ) { $ curr = $ i ;"}
{"text":"bool variable to check if 1 , 3 , 5 , 7 , 9 is there or not","code":"$ isCurrEvenDigit = true ;"}
{"text":"checking each digit of the number","code":"while ( $ curr != 0 ) {"}
{"text":"If 1 , 3 , 5 , 7 , 9 is found temp is changed to false","code":"if ( $ curr % 10 == 1 $ curr % 10 == 3 $ curr % 10 == 5 $ curr % 10 == 7 $ curr % 10 == 9 ) $ isCurrEvenDigit = false ; $ curr = $ curr \/ 10 ; }"}
{"text":"temp is true it means that it does not have 1 , 3 , 5 , 7 , 9","code":"if ( $ isCurrEvenDigit == true ) $ count ++ ;"}
{"text":"If nth such number is found return it","code":"if ( $ count == $ n ) return $ i ; } }"}
{"text":"Driver Code","code":"echo findNthEvenDigitNumber ( 2 ) , \" STRNEWLINE \" ; echo findNthEvenDigitNumber ( 10 ) ; ? >"}
{"text":"function to find nth number made of even digits only","code":"< ? php function findNthEvenDigitNumber ( $ n ) {"}
{"text":"If n = 1 return 0","code":"if ( $ n == 1 ) return 0 ;"}
{"text":"vector to store the digits when converted into base 5","code":"$ v = array ( ) ;"}
{"text":"Reduce n to n - 1 to exclude 0","code":"$ n = $ n - 1 ;"}
{"text":"Reduce n to base 5 number and store digits","code":"while ( $ n > 0 ) {"}
{"text":"pushing the digits into vector","code":"array_push ( $ v , $ n % 5 ) ; $ n = ( int ) ( $ n \/ 5 ) ; }"}
{"text":"variable to represent the number after converting it to base 5. Since the digits are be in reverse order , we traverse vector from back","code":"$ result = 0 ; for ( $ i = count ( $ v ) - 1 ; $ i >= 0 ; $ i -- ) { $ result = $ result * 10 ; $ result = $ result + $ v [ $ i ] ; }"}
{"text":"return 2 * result ( to convert digits 0 , 1 , 2 , 3 , 4 to 0 , 2 , 4 , 6 , 8.","code":"return 2 * $ result ; }"}
{"text":"Driver Code","code":"echo findNthEvenDigitNumber ( 2 ) . \" STRNEWLINE \" ; echo findNthEvenDigitNumber ( 10 ) . \" STRNEWLINE \" ? >"}
{"text":"Function to find that number divisible by 25 or not .","code":"< ? php function isDivisibleBy25 ( $ str ) {"}
{"text":"If length of string is single digit then it 's not divisible by 25","code":"$ n = strlen ( $ str ) ; if ( $ n == 1 ) return false ; return ( ( $ str [ $ n - 1 ] - '0' == 0 && $ str [ $ n - 2 ] - '0' == 0 ) || ( ( $ str [ $ n - 2 ] - '0' ) * 10 + ( $ str [ $ n - 1 ] - '0' ) ) % 25 == 0 ) ; }"}
{"text":"Driver code","code":"$ str = \"76955\" ; $ x = isDivisibleBy25 ( $ str ) ? \" Yes \" : \" No \u2581 \" ; echo ( $ x ) ; ? >"}
{"text":"Function to find that number divisible by 16 or not","code":"< ? php function check ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Empty string","code":"if ( $ n == 0 && $ n == 1 ) return false ;"}
{"text":"If there is double digit","code":"if ( $ n == 2 ) return ( ( ( $ str [ $ n - 2 ] - '0' ) * 10 + ( $ str [ $ n - 1 ] - '0' ) ) % 16 == 0 ) ;"}
{"text":"If there is triple digit","code":"if ( $ n == 3 ) return ( ( ( $ str [ $ n - 3 ] - '0' ) * 100 + ( $ str [ $ n - 2 ] - '0' ) * 10 + ( $ str [ $ n - 1 ] - '0' ) ) % 16 == 0 ) ;"}
{"text":"If number formed by last four digits is divisible by 16.","code":"$ last = $ str [ $ n - 1 ] - '0' ; $ second_last = $ str [ $ n - 2 ] - '0' ; $ third_last = $ str [ $ n - 3 ] - '0' ; $ fourth_last = $ str [ $ n - 4 ] - '0' ; return ( ( $ fourth_last * 1000 + $ third_last * 100 + $ second_last * 10 + $ last ) % 16 == 0 ) ; }"}
{"text":"Driver code","code":"$ str = \"769528\" ; $ x = check ( $ str ) ? \" Yes \" : \" No \u2581 \" ; echo ( $ x ) ; ? >"}
{"text":"A simple PHP program to find index of given Fibonacci number .","code":"< ? php function findIndex ( $ n ) {"}
{"text":"if Fibonacci number is less than 2 , its index will be same as number","code":"if ( $ n <= 1 ) return $ n ; $ a = 0 ; $ b = 1 ; $ c = 1 ; $ res = 1 ;"}
{"text":"iterate until generated fibonacci number is less than given fibonacci number","code":"while ( $ c < $ n ) { $ c = $ a + $ b ;"}
{"text":"res keeps track of number of generated fibonacci number","code":"$ res ++ ; $ a = $ b ; $ b = $ c ; } return $ res ; }"}
{"text":"Driver Code","code":"$ result = findIndex ( 21 ) ; echo ( $ result ) ; ? >"}
{"text":"function to find the sum of all proper divisors ( excluding 1 and N )","code":"< ? php function divisorSum ( $ N , $ K ) { $ sum = 0 ;"}
{"text":"Iterate only until sqrt N as we are going to generate pairs to produce divisors","code":"for ( $ i = 2 ; $ i <= ceil ( sqrt ( $ N ) ) ; $ i ++ )"}
{"text":"As divisors occur in pairs , we can take the values i and N \/ i as long as i divides N","code":"if ( $ N % $ i == 0 ) $ sum += ( $ i + $ N \/ $ i ) ; return $ sum ; }"}
{"text":"Function to check whether the given number is prime","code":"function isPrime ( $ n ) {"}
{"text":"base and corner cases","code":"if ( $ n == 1 $ n == 0 ) return false ; if ( $ n <= 3 ) return true ;"}
{"text":"Since integers can be represented as some 6 * k + y where y >= 0 , we can eliminate all integers that can be expressed in this form","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return false ;"}
{"text":"start from 5 as this is the next prime number","code":"for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Returns true if N is a K - Hyperperfect number Else returns false .","code":"function isHyperPerfect ( $ N , $ K ) { $ sum = divisorSum ( $ N , $ K ) ;"}
{"text":"Condition from the definition of hyperperfect","code":"if ( ( 1 + $ K * ( $ sum ) ) == $ N ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ N1 = 1570153 ; $ K1 = 12 ; $ N2 = 321 ; $ K2 = 3 ;"}
{"text":"First two statements test against the condition N = 1 + K * ( sum ( proper divisors ) )","code":"if ( isHyperPerfect ( $ N1 , $ K1 ) ) echo $ N1 , \" \u2581 is \u2581 \" , $ K1 , \" - HyperPerfect \" , \" STRNEWLINE \" ; else echo $ N1 , \" \u2581 is \u2581 not \u2581 \" , $ K1 , \" - HyperPerfect \" , \" STRNEWLINE \" ; if ( isHyperPerfect ( $ N2 , $ K2 ) ) echo $ N2 , \" \u2581 is \u2581 \" , K2 , \" - HyperPerfect \" , \" STRNEWLINE \" ; else echo $ N2 , \" \u2581 is \u2581 not \u2581 \" , $ K2 , \" - HyperPerfect \" , \" STRNEWLINE \" ; ? >"}
{"text":"function to calculate first k digits of n ^ n","code":"< ? php function firstkdigits ( $ n , $ k ) {"}
{"text":"take log10 of n ^ n . log10 ( n ^ n ) = n * log10 ( n )","code":"$ product = $ n * log10 ( $ n ) ;"}
{"text":"We now try to separate the decimal and integral part of the \/ product . The floor function returns the smallest integer less than or equal to the argument . So in this case , product - floor ( product ) will give us the decimal part of product","code":"$ decimal_part = $ product - floor ( $ product ) ;"}
{"text":"we now exponentiate this back by raising 10 to the power of decimal part","code":"$ decimal_part = pow ( 10 , $ decimal_part ) ;"}
{"text":"We now try to find the power of 10 by which we will have to multiply the decimal part to obtain our final answer","code":"$ digits = pow ( 10 , $ k - 1 ) ; $ i = 0 ; return floor ( $ decimal_part * $ digits ) ; }"}
{"text":"Driver Code","code":"$ n = 1450 ; $ k = 6 ; echo firstkdigits ( $ n , $ k ) ; ? >"}
{"text":"number -- > Current value of number . x -- > Current digit to be considered k -- > Remaining number of digits","code":"< ? php function printWellOrdered ( $ number , $ x , $ k ) { if ( $ k == 0 ) { echo $ number , \" \" ; return ; }"}
{"text":"Try all possible greater digits","code":"for ( $ i = ( $ x + 1 ) ; $ i < 10 ; $ i ++ ) printWellOrdered ( $ number * 10 + $ i , $ i , $ k - 1 ) ; }"}
{"text":"Generates all well ordered numbers of length k","code":"function generateWellOrdered ( $ k ) { printWellOrdered ( 0 , 0 , $ k ) ; }"}
{"text":"Driver code","code":"$ k = 3 ; generateWellOrdered ( $ k ) ; ? >"}
{"text":"Returns ( a * b ) % mod","code":"< ? php function moduloMultiplication ( $ a , $ b , $ mod ) {"}
{"text":"Update a if it is more than or equal to mod","code":"$ a %= $ mod ; while ( $ b ) {"}
{"text":"If b is odd , add a with result","code":"if ( $ b & 1 ) $ res = ( $ res + $ a ) % $ mod ;"}
{"text":"Here we assume that doing 2 * a doesn 't cause overflow","code":"$ a = ( 2 * $ a ) % $ mod ;"}
{"text":"$b >>= 1 ; b = b \/ 2","code":"} return $ res ; }"}
{"text":"Driver Code","code":"$ a = 10123465234878998 ; $ b = 65746311545646431 ; $ m = 10005412336548794 ; echo moduloMultiplication ( $ a , $ b , $ m ) ; ? >"}
{"text":"Counts the number of 2 s in a number at d - th digit","code":"< ? php function count2sinRangeAtDigit ( $ number , $ d ) { $ powerOf10 = ( int ) pow ( 10 , $ d ) ; $ nextPowerOf10 = $ powerOf10 * 10 ; $ right = $ number % $ powerOf10 ; $ roundDown = $ number - $ number % $ nextPowerOf10 ; $ roundup = $ roundDown + $ nextPowerOf10 ; $ digit = ( $ number \/ $ powerOf10 ) % 10 ;"}
{"text":"if the digit in spot digit is","code":"if ( $ digit < 2 ) return $ roundDown \/ 10 ; if ( $ digit == 2 ) return $ roundDown \/ 10 + $ right + 1 ; return $ roundup \/ 10 ; }"}
{"text":"Counts the number of '2' digits between 0 and n","code":"function numberOf2sinRange ( $ number ) {"}
{"text":"Convert integer to String to find its length","code":"$ s = strval ( $ number ) ; $ len = strlen ( $ s ) ;"}
{"text":"Traverse every digit and count for every digit","code":"$ count = 0 ; for ( $ digit = 0 ; $ digit < $ len ; $ digit ++ ) $ count += count2sinRangeAtDigit ( $ number , $ digit ) ; return $ count ; }"}
{"text":"Driver Code","code":"print ( numberOf2sinRange ( 22 ) . \" STRNEWLINE \" ) ; print ( numberOf2sinRange ( 100 ) . \" STRNEWLINE \" ) ; ? >"}
{"text":"Returns n - th star number","code":"< ? php function findStarNum ( $ n ) { return ( 6 * $ n * ( $ n - 1 ) + 1 ) ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo findStarNum ( $ n ) ; ? >"}
{"text":"Function to find that number divisible by 5 or not . The function assumes that string length is at least one .","code":"< ? php function isDivisibleBy5 ( $ str ) { $ n = strlen ( $ str ) ; return ( ( ( $ str [ $ n - 1 ] - '0' ) == 0 ) || ( ( $ str [ $ n - 1 ] - '0' ) == 5 ) ) ; }"}
{"text":"Driver code","code":"$ str = \"76955\" ; $ x = isDivisibleBy5 ( $ str ) ? \" Yes \" : \" No \" ; echo ( $ x ) ; ? >"}
{"text":"Returns true if num is Tidy","code":"< ? php function isTidy ( $ num ) {"}
{"text":"To store previous digit ( Assigning initial value which is more than any digit )","code":"$ prev = 10 ;"}
{"text":"Traverse all digits from right to left and check if any digit is smaller than previous .","code":"while ( $ num ) { $ rem = $ num % 10 ; $ num = ( int ) $ num \/ 10 ; if ( $ rem > $ prev ) return false ; $ prev = $ rem ; } return true ; }"}
{"text":"Driver code","code":"$ num = 1556 ; if ( isTidy ( $ num ) == true ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to find nth square free number","code":"< ? php function squareFree ( $ n ) {"}
{"text":"To maintain count of square free number","code":"$ cnt = 0 ;"}
{"text":"Loop for square free numbers","code":"for ( $ i = 1 ; ; $ i ++ ) { $ isSqFree = true ; for ( $ j = 2 ; $ j * $ j <= $ i ; $ j ++ ) {"}
{"text":"Checking whether square of a number is divisible by any number which is a perfect square","code":"if ( $ i % ( $ j * $ j ) == 0 ) { $ isSqFree = false ; break ; } }"}
{"text":"If number is square free","code":"if ( $ isSqFree == true ) { $ cnt ++ ;"}
{"text":"If the cnt becomes n , return the number","code":"if ( $ cnt == $ n ) return $ i ; } } return 0 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo ( squareFree ( $ n ) ) ; ? >"}
{"text":"Prints k factors of n if n can be written as multiple of k numbers . Else prints - 1.","code":"< ? php function kFactors ( $ n , $ k ) {"}
{"text":"A vector to store all prime factors of n","code":"$ P = array ( ) ;"}
{"text":"Insert all 2 's in vector","code":"while ( $ n % 2 == 0 ) { array_push ( $ P , 2 ) ; $ n = ( int ) ( $ n \/ 2 ) ; }"}
{"text":"n must be odd at this point So we skip one element ( i = i + 2 )","code":"for ( $ i = 3 ; $ i * $ i <= $ n ; $ i = $ i + 2 ) { while ( $ n % $ i == 0 ) { $ n = ( int ) ( $ n \/ $ i ) ; array_push ( $ P , $ i ) ; } }"}
{"text":"This is to handle when n > 2 and n is prime","code":"if ( $ n > 2 ) array_push ( $ P , $ n ) ;"}
{"text":"If size ( P ) < k , k factors are not possible","code":"if ( count ( $ P ) < $ k ) { echo \" - 1 STRNEWLINE \" ; return ; }"}
{"text":"printing first k - 1 factors","code":"for ( $ i = 0 ; $ i < $ k - 1 ; $ i ++ ) echo $ P [ $ i ] . \" , \u2581 \" ;"}
{"text":"calculating and printing product of rest of numbers","code":"$ product = 1 ; for ( $ i = $ k - 1 ; $ i < count ( $ P ) ; $ i ++ ) $ product = $ product * $ P [ $ i ] ; echo $ product ; }"}
{"text":"Driver Code","code":"$ n = 54 ; $ k = 3 ; kFactors ( $ n , $ k ) ; ? >"}
{"text":"Returns the required number","code":"< ? php function nondecdigits ( $ n ) {"}
{"text":"loop to recursively check the numbers less than or equal to given number","code":"$ x = 0 ; for ( $ x = $ n ; $ x >= 1 ; $ x -- ) { $ no = $ x ; $ prev_dig = 11 ;"}
{"text":"Keep traversing digits from right to left . For every digit check if it is smaller than prev_dig","code":"$ flag = true ; while ( $ no != 0 ) { if ( $ prev_dig < $ no % 10 ) { $ flag = false ; break ; } $ prev_dig = $ no % 10 ; $ no \/= 10 ; }"}
{"text":"We found the required number","code":"if ( $ flag == true ) break ; } return $ x ; }"}
{"text":"Driver Code","code":"$ n = 200 ; echo nondecdigits ( $ n ) ; ? >"}
{"text":"Prints the largest number smaller than s and digits in non - decreasing order .","code":"< ? php function nondecdigits ( $ s ) { $ m = strlen ( $ s ) ;"}
{"text":"array to store digits of number","code":"$ a [ $ m ] = 0 ;"}
{"text":"conversion of characters of string int number","code":"for ( $ i = 0 ; $ i < $ m ; $ i ++ ) $ a [ $ i ] = $ s [ $ i ] - '0' ;"}
{"text":"variable holds the value of index after which all digits are set 9","code":"$ level = $ m - 1 ; for ( $ i = $ m - 1 ; $ i > 0 ; $ i -- ) {"}
{"text":"Checking the condition if the digit is less than its left digit","code":"if ( $ a [ $ i ] < $ a [ $ i - 1 ] ) { $ a [ $ i - 1 ] -- ; $ level = $ i - 1 ; } }"}
{"text":"If first digit is 0 no need to print it","code":"if ( $ a [ 0 ] != 0 ) { for ( $ i = 0 ; $ i <= $ level ; $ i ++ ) echo $ a [ $ i ] ; for ( $ i = $ level + 1 ; $ i < $ m ; $ i ++ ) echo \"9\" ; } else { for ( $ i = 1 ; $ i < $ level ; $ i ++ ) echo $ a [ $ i ] ; for ( $ i = $ level + 1 ; $ i < $ m ; $ i ++ ) echo \"9\" ; } }"}
{"text":"Driver Code","code":"$ n = \"200\" ; nondecdigits ( $ n ) ; ? >"}
{"text":"function to count the divisors","code":"< ? php function countDivisors ( $ n ) { $ cnt = 0 ; for ( $ i = 1 ; $ i <= sqrt ( $ n ) ; $ i ++ ) { if ( $ n % $ i == 0 ) {"}
{"text":"If divisors are equal , count only one","code":"if ( $ n \/ $ i == $ i ) $ cnt ++ ;"}
{"text":"Otherwise count both","code":"else $ cnt = $ cnt + 2 ; } } return $ cnt ; }"}
{"text":"Driver Code","code":"echo \" Total \u2581 distinct \u2581 divisors \u2581 of \u2581 100 \u2581 are \u2581 : \u2581 \" , countDivisors ( 100 ) ; ? >"}
{"text":"Function to check whether ' n ' has even number of factors or not","code":"< ? php function hasEvenNumberOfFactors ( $ n ) { $ root_n = sqrt ( $ n ) ;"}
{"text":"if ' n ' is a perfect square it has odd number of factors","code":"if ( ( $ root_n * $ root_n ) == $ n ) return false ;"}
{"text":"else ' n ' has even number of factors","code":"return true ; }"}
{"text":"Function to find and print status of each door","code":"function printStatusOfDoors ( $ n ) { for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If even number of factors final status is closed","code":"if ( hasEvenNumberOfFactors ( $ i ) ) echo \" closed \" , \" \u2581 \" ;"}
{"text":"else odd number of factors final status is open","code":"else echo \" open \" , \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ n = 5 ; printStatusOfDoors ( $ n ) ; ? >"}
{"text":"Function to validate number ( Check if frequency of adigit is less than thedigit itself or not )","code":"< ? php function validate ( $ n ) { for ( $ i = 0 ; $ i < 10 ; $ i ++ ) { $ temp = $ n ; $ count = 0 ; while ( $ temp ) {"}
{"text":"If current digit of temp is same as i","code":"if ( $ temp % 10 == $ i ) $ count ++ ;"}
{"text":"if frequency is greater than digit value , return false","code":"if ( $ count > $ i ) return -1 ; $ temp \/= 10 ; } } return 1 ; }"}
{"text":"Driver Code","code":"$ n = 1552793 ; $ geek = validate ( $ n ) ? \" True \" : \" False \" ; echo ( $ geek ) ; ? >"}
{"text":"Function to check whether a number is divisible by 36 or not","code":"< ? php function divisibleBy36 ( $ num ) { $ l = strlen ( $ num ) ;"}
{"text":"null number cannot be divisible by 36","code":"if ( $ l == 0 ) return \" No \" ;"}
{"text":"single digit number other than 0 is not divisible by 36","code":"if ( $ l == 1 && $ num [ 0 ] != '0' ) return \" No \" ;"}
{"text":"number formed by the last 2 digits","code":"$ two_digit_num = ( $ num [ $ l - 2 ] - '0' ) * 10 + ( $ num [ $ l - 1 ] - '0' ) ;"}
{"text":"if number is not divisible by 4","code":"if ( $ two_digit_num % 4 != 0 ) return \" No \" ;"}
{"text":"number is divisible by 4 calculate sum of digits","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ l ; $ i ++ ) $ sum += ( $ num [ $ i ] - '0' ) ;"}
{"text":"sum of digits is not divisible by 9","code":"if ( $ sum % 9 != 0 ) return \" No \" ;"}
{"text":"number is divisible by 4 and 9 hence , number is divisible by 36","code":"return \" Yes \" ; }"}
{"text":"Driver Code","code":"$ num = \"92567812197966231384\" ; echo ( divisibleBy36 ( $ num ) ) ; ? >"}
{"text":"Function to find that number divisible by 8 or not","code":"< ? php function check ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Empty string","code":"if ( $ n == 0 ) return false ;"}
{"text":"If there is single digit","code":"if ( $ n == 1 ) return ( ( $ str [ 0 ] - '0' ) % 8 == 0 ) ;"}
{"text":"If there is double digit","code":"if ( $ n == 2 ) return ( ( ( $ str [ $ n - 2 ] - '0' ) * 10 + ( $ str [ $ n - 1 ] - '0' ) ) % 8 == 0 ) ;"}
{"text":"If number formed by last three digits is divisible by 8.","code":"$ last = $ str [ $ n - 1 ] - '0' ; $ second_last = $ str [ $ n - 2 ] - '0' ; $ third_last = $ str [ $ n - 3 ] - '0' ; return ( ( $ third_last * 100 + $ second_last * 10 + $ last ) % 8 == 0 ) ; }"}
{"text":"Driver code","code":"$ str = \"76952\" ; $ x = check ( $ str ) ? \" Yes \" : \" No \u2581 \" ; echo ( $ x ) ; ? >"}
{"text":"Function to count number of digits","code":"< ? php function countDigits ( $ n ) { $ count = 0 ; while ( $ n > 0 ) { $ count ++ ; $ n = ( int ) ( $ n \/ 10 ) ; } return $ count ; }"}
{"text":"Function to check whether a number is prime or not . Returns 0 if prime else - 1","code":"function checkPrime ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n <= 1 ) return -1 ; if ( $ n <= 3 ) return 0 ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( $ n % 2 == 0 $ n % 3 == 0 ) return -1 ; for ( $ i = 5 ; $ i * $ i <= $ n ; $ i = $ i + 6 ) if ( $ n % $ i == 0 || $ n % ( $ i + 2 ) == 0 ) return -1 ; return 0 ; }"}
{"text":"Function to print prime points","code":"function printPrimePoints ( $ n ) {"}
{"text":"counting digits","code":"$ count = countDigits ( $ n ) ;"}
{"text":"As single and double digit numbers do not have left and right number pairs","code":"if ( $ count == 1 $ count == 2 ) { echo \" - 1\" ; return ; }"}
{"text":"Finding all left and right pairs . Printing the prime points accordingly . Discarding first and last index point","code":"$ found = false ; for ( $ i = 1 ; $ i < ( $ count - 1 ) ; $ i ++ ) {"}
{"text":"Calculating left number","code":"$ left = ( int ) ( $ n \/ ( ( int ) pow ( 10 , $ count - $ i ) ) ) ;"}
{"text":"Calculating right number","code":"$ right = $ n % ( ( int ) pow ( 10 , $ count - $ i - 1 ) ) ;"}
{"text":"Prime point condition","code":"if ( checkPrime ( $ left ) == 0 && checkPrime ( $ right ) == 0 ) { echo $ i , \" \" ; $ found = true ; } }"}
{"text":"No prime point found","code":"if ( $ found == false ) echo \" - 1\" ; }"}
{"text":"Driver Code","code":"$ n = 2317 ; printPrimePoints ( $ n ) ; ? >"}
{"text":"Function to calculate and return the power of any given number","code":"< ? php function power ( $ num , $ n ) { if ( $ n == 0 ) return 1 ; else if ( $ n % 2 == 0 ) return power ( $ num , ( int ) ( $ n \/ 2 ) ) * power ( $ num , ( int ) ( $ n \/ 2 ) ) ; else return $ num * power ( $ num , ( int ) ( $ n \/ 2 ) ) * power ( $ num , ( int ) ( $ n \/ 2 ) ) ; }"}
{"text":"Function to check power representations recursively","code":"function checkRecursive ( $ x , $ n , $ curr_num = 1 , $ curr_sum = 0 ) {"}
{"text":"Initialize number of ways to express x as n - th powers of different natural numbers","code":"$ results = 0 ;"}
{"text":"Calling power of ' i ' raised to ' n '","code":"$ p = power ( $ curr_num , $ n ) ; while ( $ p + $ curr_sum < $ x ) {"}
{"text":"Recursively check all greater values of i","code":"$ results += checkRecursive ( $ x , $ n , $ curr_num + 1 , $ p + $ curr_sum ) ; $ curr_num ++ ; $ p = power ( $ curr_num , $ n ) ; }"}
{"text":"If sum of powers is equal to x then increase the value of result .","code":"if ( $ p + $ curr_sum == $ x ) $ results ++ ;"}
{"text":"Return the final result","code":"return $ results ; }"}
{"text":"Driver Code .","code":"$ x = 10 ; $ n = 2 ; echo ( checkRecursive ( $ x , $ n ) ) ; ? >"}
{"text":"Function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Print generators of n","code":"function printGenerators ( $ n ) {"}
{"text":"1 is always a generator","code":"echo \"1 \u2581 \" ; for ( $ i = 2 ; $ i < $ n ; $ i ++ )"}
{"text":"A number x is generator of GCD is 1","code":"if ( gcd ( $ i , $ n ) == 1 ) echo $ i , \" \u2581 \" ; }"}
{"text":"Driver program to test above function","code":"$ n = 10 ; printGenerators ( $ n ) ; ? >"}
{"text":"Function to find that number divisible by 3 or not","code":"< ? php function check ( $ str ) {"}
{"text":"Compute sum of digits","code":"$ n = strlen ( $ str ) ; $ digitSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ digitSum += ( $ str [ $ i ] - '0' ) ;"}
{"text":"Check if sum of digits is divisible by 3.","code":"return ( $ digitSum % 3 == 0 ) ; }"}
{"text":"Driver code","code":"$ str = \"1332\" ; $ x = check ( $ str ) ? \" Yes \" : \" No \u2581 \" ; echo ( $ x ) ; ? >"}
{"text":"Below is PHP code to count total perfect divisors","code":"< ? php $ MAX = 10001 ; $ perfectDiv = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Pre - compute counts of all perfect divisors of all numbers upto MAX .","code":"function precomputeCounts ( ) { global $ MAX , $ perfectDiv ; for ( $ i = 1 ; $ i * $ i < $ MAX ; ++ $ i ) {"}
{"text":"Iterate through all the multiples of i * i","code":"for ( $ j = $ i * $ i ; $ j < $ MAX ; $ j += $ i * $ i )"}
{"text":"Increment all such multiples by 1","code":"++ $ perfectDiv [ $ j ] ; } }"}
{"text":"Returns count of perfect divisors of n .","code":"function countPerfectDivisors ( $ n ) { global $ perfectDiv ; return $ perfectDiv [ $ n ] ; }"}
{"text":"Driver code","code":"precomputeCounts ( ) ; $ n = 16 ; echo \" Total \u2581 perfect \u2581 divisors \u2581 of \u2581 \" . $ n . \" \u2581 = \u2581 \" . countPerfectDivisors ( $ n ) . \" STRNEWLINE \" ; $ n = 12 ; echo \" Total \u2581 perfect \u2581 divisors \u2581 of \u2581 \" . $ n . \" \u2581 = \u2581 \" . countPerfectDivisors ( $ n ) ; ? >"}
{"text":"PHP program to find prime factorization of a number n in O ( Log n ) time with precomputation allowed .","code":"< ? php $ MAXN = 19999 ;"}
{"text":"stores smallest prime factor for every number","code":"$ spf = array_fill ( 0 , $ MAXN , 0 ) ;"}
{"text":"Calculating SPF ( Smallest Prime Factor ) for every number till MAXN . Time Complexity : O ( nloglogn )","code":"function sieve ( ) { global $ MAXN , $ spf ; $ spf [ 1 ] = 1 ; for ( $ i = 2 ; $ i < $ MAXN ; $ i ++ )"}
{"text":"marking smallest prime factor for every number to be itself .","code":"$ spf [ $ i ] = $ i ;"}
{"text":"separately marking spf for every even number as 2","code":"for ( $ i = 4 ; $ i < $ MAXN ; $ i += 2 ) $ spf [ $ i ] = 2 ; for ( $ i = 3 ; $ i * $ i < $ MAXN ; $ i ++ ) {"}
{"text":"checking if i is prime","code":"if ( $ spf [ $ i ] == $ i ) {"}
{"text":"marking SPF for all numbers divisible by i","code":"for ( $ j = $ i * $ i ; $ j < $ MAXN ; $ j += $ i )"}
{"text":"marking spf [ j ] if it is not previously marked","code":"if ( $ spf [ $ j ] == $ j ) $ spf [ $ j ] = $ i ; } } }"}
{"text":"A O ( log n ) function returning primefactorization by dividing by smallest prime factor at every step","code":"function getFactorization ( $ x ) { global $ spf ; $ ret = array ( ) ; while ( $ x != 1 ) { array_push ( $ ret , $ spf [ $ x ] ) ; if ( $ spf [ $ x ] ) $ x = ( int ) ( $ x \/ $ spf [ $ x ] ) ; } return $ ret ; }"}
{"text":"precalculating Smallest Prime Factor","code":"sieve ( ) ; $ x = 12246 ; echo \" prime \u2581 factorization \u2581 for \u2581 \" . $ x . \" \u2581 : \u2581 \" ;"}
{"text":"calling getFactorization function","code":"$ p = getFactorization ( $ x ) ; for ( $ i = 0 ; $ i < count ( $ p ) ; $ i ++ ) echo $ p [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Returns length of the largest subsequence with GCD more than 1.","code":"< ? php function largestGCDSubsequence ( $ arr , $ n ) { $ ans = 0 ;"}
{"text":"Finding the Maximum value in arr [ ]","code":"$ maxele = max ( $ arr ) ;"}
{"text":"Iterate from 2 to maximum possible divisor of all give values","code":"for ( $ i = 2 ; $ i <= $ maxele ; ++ $ i ) { $ count = 0 ; for ( $ j = 0 ; $ j < $ n ; ++ $ j ) {"}
{"text":"If we found divisor , increment count","code":"if ( $ arr [ $ j ] % $ i == 0 ) ++ $ count ; } $ ans = max ( $ ans , $ count ) ; } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 3 , 6 , 2 , 5 , 4 ) ; $ size = count ( $ arr ) ; echo largestGCDSubsequence ( $ arr , $ size ) ; ? >"}
{"text":"PHP program to find sum prime factors in given range .","code":"< ? php $ MAX = 100006 ;"}
{"text":"using sieve method to evaluating the prime factor of numbers","code":"function sieve ( & $ count ) { global $ MAX ; for ( $ i = 2 ; $ i * $ i <= $ MAX ; $ i ++ ) {"}
{"text":"if i is prime","code":"if ( $ count [ $ i ] == 0 ) { for ( $ j = 2 * $ i ; $ j < $ MAX ; $ j += $ i ) $ count [ $ j ] ++ ;"}
{"text":"setting number of prime factor of a prime number .","code":"$ count [ $ i ] = 1 ; } } }"}
{"text":"Returns sum of counts of prime factors in range from l to r . This function mainly uses count [ ] which is filled by Sieve ( )","code":"function query ( $ count , $ l , $ r ) { $ sum = 0 ;"}
{"text":"finding the sum of number of prime factor of numbers in a range .","code":"for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) $ sum += $ count [ $ i ] ; return $ sum ; }"}
{"text":"Driver Code","code":"$ count = array_fill ( 0 , $ MAX , 0 ) ; sieve ( $ count ) ; echo query ( $ count , 6 , 10 ) . \" \" . query ( $ count , 1 , 5 ) ; ? >"}
{"text":"Generate n numbers with factors in factor [ ]","code":"< ? php function generateNumbers ( $ factor , $ n , $ k ) {"}
{"text":"array of k to store next multiples of given factors","code":"$ next = array_fill ( 0 , $ k , 0 ) ;"}
{"text":"Prints n numbers $output = 0 ; Next number to print as output","code":"for ( $ i = 0 ; $ i < $ n ; ) {"}
{"text":"Find the next smallest multiple","code":"$ toincrement = 0 ; for ( $ j = 0 ; $ j < $ k ; $ j ++ ) if ( $ next [ $ j ] < $ next [ $ toincrement ] ) $ toincrement = $ j ;"}
{"text":"Printing minimum in each iteration print the value if output is not equal to current value ( to avoid the duplicates )","code":"if ( $ output != $ next [ $ toincrement ] ) { $ output = $ next [ $ toincrement ] ; echo $ next [ $ toincrement ] . \" \" ; $ i ++ ; }"}
{"text":"incrementing the current value by the respective factor","code":"$ next [ $ toincrement ] += $ factor [ $ toincrement ] ; } }"}
{"text":"Driver code","code":"$ factor = array ( 3 , 5 , 7 ) ; $ n = 10 ; $ k = count ( $ factor ) ; generateNumbers ( $ factor , $ n , $ k ) ; ? >"}
{"text":"function for GCD","code":"< ? php function GCD ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return GCD ( $ b , $ a % $ b ) ; }"}
{"text":"Function return smallest + ve integer that holds condition A ^ k ( mod N ) = 1","code":"function multiplicativeOrder ( $ A , $ N ) { if ( GCD ( $ A , $ N ) != 1 ) return -1 ;"}
{"text":"result store power of A that rised to the power N - 1","code":"$ result = 1 ; $ K = 1 ; while ( $ K < $ N ) {"}
{"text":"modular arithmetic","code":"$ result = ( $ result * $ A ) % $ N ;"}
{"text":"return smallest + ve integer","code":"if ( $ result == 1 ) return $ K ;"}
{"text":"increment power","code":"$ K ++ ; } return -1 ; }"}
{"text":"Driver Code","code":"$ A = 4 ; $ N = 7 ; echo ( multiplicativeOrder ( $ A , $ N ) ) ; ? >"}
{"text":"Return the sum of natural number in a range .","code":"< ? php function sumOfRange ( $ a , $ b ) {"}
{"text":"n * ( n + 1 ) \/ 2.","code":"$ i = ( $ a * ( $ a + 1 ) ) >> 1 ; $ j = ( $ b * ( $ b + 1 ) ) >> 1 ; return ( $ i - $ j ) ; }"}
{"text":"Return the sum of product x * y .","code":"function sumofproduct ( $ n ) { $ sum = 0 ;"}
{"text":"Iterating i from 1 to sqrt ( n )","code":"$ root = sqrt ( $ n ) ; for ( $ i = 1 ; $ i <= $ root ; $ i ++ ) {"}
{"text":"Finding the upper limit .","code":"$ up = ( int ) ( $ n \/ $ i ) ;"}
{"text":"Finding the lower limit .","code":"$ low = max ( ( int ) ( $ n \/ ( $ i + 1 ) ) , $ root ) ; $ sum += ( $ i * sumOfRange ( $ up , $ low ) ) ; $ sum += ( $ i * ( int ) ( $ n \/ $ i ) ) ; } return $ sum ; }"}
{"text":"Driven Code","code":"$ n = 10 ; echo sumofproduct ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Return minimum power terms of x required","code":"< ? php function minPower ( $ n , $ x ) {"}
{"text":"if x is 1 , return n since any power of 1 is 1 only .","code":"if ( $ x == 1 ) return $ n ;"}
{"text":"Consider n = a * x + b where a = n \/ x and b = n % x .","code":"$ ans = 0 ; while ( $ n > 0 ) {"}
{"text":"Update count of powers for 1 's added","code":"$ ans += ( $ n % $ x ) ;"}
{"text":"Repeat the process for reduced n","code":"$ n \/= $ x ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 5 ; $ x = 3 ; echo ( minPower ( $ n , $ x ) ) ; ? >"}
{"text":"function for sum of first n Perrin number .","code":"< ? php function calSum ( $ n ) { $ a = 3 ; $ b = 0 ; $ c = 2 ;"}
{"text":"if ( $n == 0 ) n = 0","code":"return 3 ;"}
{"text":"if ( $n == 1 ) n = 1","code":"return 3 ;"}
{"text":"if ( $n == 2 ) n = 2","code":"return 5 ;"}
{"text":"calculate k = 5 sum of three previous step .","code":"$ sum = 5 ;"}
{"text":"Sum remaining numbers","code":"while ( $ n > 2 ) {"}
{"text":"calculate next term","code":"$ d = $ a + $ b ; $ sum += $ d ; $ a = $ b ; $ b = $ c ; $ c = $ d ; $ n -- ; } return $ sum ; }"}
{"text":"Driver code","code":"$ n = 9 ; echo calSum ( $ n ) ; ? >"}
{"text":"Returns k 'th common factor of x and y.","code":"< ? php function findKCF ( $ x , $ y , $ k ) {"}
{"text":"Find smaller of two numbers","code":"$ small = min ( $ x , $ y ) ;"}
{"text":"Count common factors until we either reach small or count becomes k .","code":"$ count = 1 ; for ( $ i = 2 ; $ i <= $ small ; $ i ++ ) { if ( $ x % $ i == 0 && $ y % $ i == 0 ) $ count ++ ; if ( $ count == $ k ) return $ i ; }"}
{"text":"If we reached small","code":"return -1 ; }"}
{"text":"Driver code","code":"$ x = 4 ; $ y = 24 ; $ k = 3 ; echo findKCF ( $ x , $ y , $ k ) ; ? >"}
{"text":"Return the minimum number to be divided to make n a perfect square .","code":"< ? php function findMinNumber ( $ n ) { $ count = 0 ; $ ans = 1 ;"}
{"text":"Since 2 is only even prime , compute its power separately .","code":"while ( $ n % 2 == 0 ) { $ count ++ ; $ n \/= 2 ; }"}
{"text":"If count is odd , it must be removed by dividing n by prime number .","code":"if ( $ count % 2 ) $ ans *= 2 ; for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i += 2 ) { $ count = 0 ; while ( $ n % $ i == 0 ) { $ count ++ ; $ n \/= $ i ; }"}
{"text":"If count is odd , it must be removed by dividing n by prime number .","code":"if ( $ count % 2 ) $ ans *= $ i ; } if ( $ n > 2 ) $ ans *= $ n ; return $ ans ; }"}
{"text":"Driver Code","code":"$ n = 72 ; echo findMinNumber ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find if n reaches to 1 or not .","code":"< ? php function isToOne ( $ n ) {"}
{"text":"Return true if n is positive","code":"if ( $ n > 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ n = 5 ; isToOne ( $ n ) ? print ( \" Yes \" ) : print ( \" No \" ) ; ? >"}
{"text":"Return the Greatest common Divisor of two numbers .","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Prints Greatest Common Divisor of number formed by n repeating x times and y times .","code":"function findgcd ( $ n , $ x , $ y ) {"}
{"text":"Finding GCD of x and y .","code":"$ g = gcd ( $ x , $ y ) ;"}
{"text":"Print n , g times .","code":"for ( $ i = 0 ; $ i < $ g ; $ i ++ ) echo ( $ n ) ; }"}
{"text":"Driver Code","code":"$ n = 123 ; $ x = 5 ; $ y = 2 ; findgcd ( $ n , $ x , $ y ) ; ? >"}
{"text":"GCD function to compute the greatest divisor among a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( ( $ a % $ b ) == 0 ) return $ b ; return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Returns first number whose factorial is divisible by x .","code":"function firstFactorialDivisibleNumber ( $ x ) {"}
{"text":"Result","code":"$ i = 1 ; $ new_x = $ x ; for ( $ i = 1 ; $ i < $ x ; $ i ++ ) {"}
{"text":"Remove common factors","code":"$ new_x \/= gcd ( $ i , $ new_x ) ;"}
{"text":"We found first i .","code":"if ( $ new_x == 1 ) break ; } return $ i ; }"}
{"text":"Count of natural numbers whose factorials are divisible by x but not y .","code":"function countFactorialXNotY ( $ x , $ y ) {"}
{"text":"Return difference between first natural number whose factorial is divisible by y and first natural number whose factorial is divisible by x .","code":"return ( firstFactorialDivisibleNumber ( $ y ) - firstFactorialDivisibleNumber ( $ x ) ) ; }"}
{"text":"Driver code","code":"$ x = 15 ; $ y = 25 ; echo ( countFactorialXNotY ( $ x , $ y ) ) ; ? >"}
{"text":"Returns first number whose factorial divides x .","code":"< ? php function firstFactorialDivisibleNumber ( $ x ) {"}
{"text":"Result","code":"$ i = 1 ; $ fact = 1 ; for ( $ i = 1 ; $ i < $ x ; $ i ++ ) { $ fact = $ fact * $ i ; if ( $ fact % $ x == 0 ) break ; } return $ i ; }"}
{"text":"Driver code","code":"$ x = 16 ; echo ( firstFactorialDivisibleNumber ( $ x ) ) ; ? >"}
{"text":"Generate all prime numbers less than n .","code":"< ? php function SieveOfEratosthenes ( $ n , & $ isPrime ) {"}
{"text":"Initialize all entries of boolean array as true . A value in isPrime [ i ] will finally be false if i is Not a prime , else true bool isPrime [ n + 1 ] ;","code":"$ isPrime [ 0 ] = $ isPrime [ 1 ] = false ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ isPrime [ $ i ] = true ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If isPrime [ p ] is not changed , then it is a prime","code":"if ( $ isPrime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * $ p ; $ i <= $ n ; $ i += $ p ) $ isPrime [ $ i ] = false ; } } }"}
{"text":"Prints a prime pair with given sum","code":"function findPrimePair ( $ n ) {"}
{"text":"Generating primes using Sieve","code":"$ isPrime = array_fill ( 0 , $ n + 1 , NULL ) ; SieveOfEratosthenes ( $ n , $ isPrime ) ;"}
{"text":"Traversing all numbers to find first pair","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ isPrime [ $ i ] && $ isPrime [ $ n - $ i ] ) { echo $ i . \" \u2581 \" . ( $ n - $ i ) ; return ; } } }"}
{"text":"Driver Code","code":"$ n = 74 ; findPrimePair ( $ n ) ; ? >"}
{"text":"method to get first digit of x","code":"< ? php function getFirstDigit ( $ x ) { while ( $ x >= 10 ) $ x \/= 10 ; return $ x ; }"}
{"text":"method to return count of numbers with same starting and ending digit from 1 upto x","code":"function getCountWithSameStartAndEndFrom1 ( $ x ) { if ( $ x < 10 ) return $ x ;"}
{"text":"get ten - spans from 1 to x","code":"$ tens = $ x \/ 10 ;"}
{"text":"add 9 to consider all 1 digit numbers","code":"$ res = $ tens + 9 ;"}
{"text":"Find first and last digits","code":"$ firstDigit = getFirstDigit ( $ x ) ; $ lastDigit = $ x % 10 ;"}
{"text":"If last digit is greater than first digit then decrease count by 1","code":"if ( $ lastDigit < $ firstDigit ) $ res -- ; return $ res ; }"}
{"text":"Method to return count of numbers with same starting and ending digit between start and end","code":"function getCountWithSameStartAndEnd ( $ start , $ end ) { return getCountWithSameStartAndEndFrom1 ( $ end ) - getCountWithSameStartAndEndFrom1 ( $ start - 1 ) ; }"}
{"text":"Driver Code","code":"$ start = 5 ; $ end = 40 ; echo getCountWithSameStartAndEnd ( $ start , $ end ) ; ? >"}
{"text":"Generate all prime numbers less than n .","code":"< ? php function sieveOfEratosthenes ( $ n , & $ isPrime ) {"}
{"text":"Initialize all entries of boolean array as true . A value in isPrime [ i ] will finally be false if i is Not a prime , else true bool isPrime [ n + 1 ] ;","code":"$ isPrime [ 0 ] = $ isPrime [ 1 ] = false ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If isPrime [ p ] is not changed , then it is a prime","code":"if ( $ isPrime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ isPrime [ $ i ] = false ; } } }"}
{"text":"Returns true if n is right - truncatable , else false","code":"function rightTruPrime ( $ n ) {"}
{"text":"Generating primes using Sieve","code":"$ isPrime = array_fill ( 0 , $ n + 1 , true ) ; sieveOfEratosthenes ( $ n , $ isPrime ) ;"}
{"text":"Checking whether the number remains prime when the last ( \" right \" ) digit is successively removed","code":"while ( $ n ) { if ( $ isPrime [ $ n ] ) $ n = ( int ) ( $ n \/ 10 ) ; else return false ; } return true ; }"}
{"text":"Driver Code","code":"$ n = 59399 ; if ( rightTruPrime ( $ n ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"Generate all prime numbers less than n .","code":"< ? php function SieveOf ( $ n ) {"}
{"text":"Initialize all entries of boolean array as true . A value in prime [ i ] will finally be false if i is Not a prime , else true","code":"$ prime = array ( $ n + 1 ) ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) $ prime [ $ i ] = true ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = false ; } } return $ prime ; }"}
{"text":"Function to generate mersenne primes less than or equal to n","code":"function mersennePrimes ( $ n ) {"}
{"text":"Generating primes using Sieve","code":"$ prime = SieveOf ( $ n ) ;"}
{"text":"Generate all numbers of the form 2 ^ k - 1 and smaller than or equal to n .","code":"for ( $ k = 2 ; ( ( 1 << $ k ) - 1 ) <= $ n ; $ k ++ ) { $ num = ( 1 << $ k ) - 1 ;"}
{"text":"Checking whether number is prime and is one less then the power of 2","code":"if ( $ prime [ $ num ] ) echo $ num . \" \" ; } }"}
{"text":"Driver Code","code":"$ n = 31 ; echo \" Mersenne \u2581 prime \u2581 numbers \u2581 smaller \u2581 \" . \" than \u2581 or \u2581 equal \u2581 to \u2581 $ n \u2581 \" . mersennePrimes ( $ n ) ; ? >"}
{"text":"Return sum of modulo K of first N natural numbers .","code":"< ? php function findSum ( $ N , $ K ) { $ ans = 0 ;"}
{"text":"Iterate from 1 to N && evaluating and adding i % K .","code":"for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) $ ans += ( $ i % $ K ) ; return $ ans ; }"}
{"text":"Driver Code","code":"$ N = 10 ; $ K = 2 ; echo findSum ( $ N , $ K ) , \" STRNEWLINE \" ; ? >"}
{"text":"Return sum of modulo K of first N natural numbers .","code":"< ? php function findSum ( $ N , $ K ) { $ ans = 0 ;"}
{"text":"Counting the number of times 1 , 2 , . . , K - 1 , 0 sequence occurs .","code":"$ y = $ N \/ $ K ;"}
{"text":"Finding the number of elements left which are incomplete of sequence Leads to Case 1 type .","code":"$ x = $ N % $ K ;"}
{"text":"adding multiplication of number of times 1 , 2 , . . , K - 1 , 0 sequence occurs and sum of first k natural number and sequence from case 1.","code":"$ ans = ( $ K * ( $ K - 1 ) \/ 2 ) * $ y + ( $ x * ( $ x + 1 ) ) \/ 2 ; return $ ans ; }"}
{"text":"Driver program","code":"$ N = 10 ; $ K = 2 ; echo findSum ( $ N , $ K ) ; ? >"}
{"text":"Finding GCD of two number","code":"< ? php function gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Returns smallest integer k such that k * str becomes natural . str is an input floating point number","code":"function findnum ( $ str ) {"}
{"text":"Find size of string representing a floating point number .","code":"$ n = strlen ( $ str ) ;"}
{"text":"Below is used to find denominator in fraction form .","code":"$ count_after_dot = 0 ;"}
{"text":"Used to find value of count_after_dot","code":"$ dot_seen = false ;"}
{"text":"To find numerator in fraction form of given number . For example , for 30.25 , numerator would be 3025.","code":"$ num = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ str [ $ i ] != ' . ' ) { $ num = $ num * 10 + ( $ str [ $ i ] - '0' ) ; if ( $ dot_seen == true ) $ count_after_dot ++ ; } else $ dot_seen = true ; }"}
{"text":"If there was no dot , then number is already a natural .","code":"if ( $ dot_seen == false ) return 1 ;"}
{"text":"Find denominator in fraction form . For example , for 30.25 , denominator is 100","code":"$ dem = pow ( 10 , $ count_after_dot ) ;"}
{"text":"Result is denominator divided by GCD - of - numerator - and - denominator . For example , for 30.25 , result is 100 \/ GCD ( 3025 , 100 ) = 100 \/ 25 = 4","code":"return ( $ dem \/ gcd ( $ num , $ dem ) ) ; }"}
{"text":"Driver Code","code":"{ $ str = \"5.125\" ; echo findnum ( $ str ) ; return 0 ; } ? >"}
{"text":"Calculating the maximum number of handshake using derived formula .","code":"< ? php function maxHandshake ( $ n ) { return ( $ n * ( $ n - 1 ) ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo maxHandshake ( $ n ) ; ? >"}
{"text":"Utility function to check divisibility by digit","code":"< ? php function divisible ( $ N , $ digit ) { $ ans = 0 ; for ( $ i = 0 ; $ i < strlen ( $ N ) ; $ i ++ ) {"}
{"text":"( N [ i ] - '0' ) gives the digit value and form the number","code":"$ ans = ( $ ans * 10 + ( int ) ( $ N [ $ i ] - '0' ) ) ; $ ans %= $ digit ; } return ( $ ans == 0 ) ; }"}
{"text":"Function to count digits which appears in N and divide N divide [ 10 ] -- > array which tells that particular digit divides N or not count [ 10 ] -- > counts frequency of digits which divide N","code":"function allDigits ( $ N ) {"}
{"text":"We initialize all digits of N as not divisible by N .","code":"$ divide = array_fill ( 0 , 10 , false ) ;"}
{"text":"start checking divisibility of N by digits 2 to 9","code":"for ( $ digit = 2 ; $ digit <= 9 ; $ digit ++ ) {"}
{"text":"if digit divides N then mark it as true","code":"if ( divisible ( $ N , $ digit ) ) $ divide [ $ digit ] = true ; }"}
{"text":"Now traverse the number string to find and increment result whenever a digit divides N .","code":"$ result = 0 ; for ( $ i = 0 ; $ i < strlen ( $ N ) ; $ i ++ ) { if ( $ divide [ ( int ) ( $ N [ $ i ] - '0' ) ] == true ) $ result ++ ; } return $ result ; }"}
{"text":"Driver Code","code":"$ N = \"122324\" ; echo allDigits ( $ N ) ; ? >"}
{"text":"Returns count of numbers from 1 to n that can be formed using x and y .","code":"< ? php function countNums ( $ n , $ x , $ y ) {"}
{"text":"Create an auxiliary array and initialize it as false . An entry arr [ i ] = true is going to mean that i can be formed using x and y","code":"$ arr = array_fill ( 0 , $ n + 1 , false ) ;"}
{"text":"x and y can be formed using x and y .","code":"if ( $ x <= $ n ) $ arr [ $ x ] = true ; if ( $ y <= $ n ) $ arr [ $ y ] = true ;"}
{"text":"Initialize result","code":"$ result = 0 ;"}
{"text":"Traverse all numbers and increment result if a number can be formed using x and y .","code":"for ( $ i = min ( $ x , $ y ) ; $ i <= $ n ; $ i ++ ) {"}
{"text":"If i can be formed using x and y","code":"if ( $ arr [ $ i ] ) {"}
{"text":"Then i + x and i + y can also be formed using x and y .","code":"if ( $ i + $ x <= $ n ) $ arr [ $ i + $ x ] = true ; if ( $ i + $ y <= $ n ) $ arr [ $ i + $ y ] = true ;"}
{"text":"Increment result","code":"$ result ++ ; } } return $ result ; }"}
{"text":"Driver code","code":"$ n = 15 ; $ x = 5 ; $ y = 7 ; echo countNums ( $ n , $ x , $ y ) ; ? >"}
{"text":"Function to find reverse of any number","code":"< ? php function reverse ( $ x ) { $ rev = 0 ; while ( $ x > 0 ) { $ rev = ( $ rev * 10 ) + $ x % 10 ; $ x = ( int ) ( $ x \/ 10 ) ; } return $ rev ; }"}
{"text":"Sieve method used for generating emirp number ( use of sieve ofEratosthenes )","code":"function printEmirp ( $ n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , ( $ n + 1 ) , 1 ) ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] == 1 ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) $ prime [ $ i ] = 0 ; } }"}
{"text":"Traverse all prime numbers","code":"for ( $ p = 2 ; $ p <= $ n ; $ p ++ ) { if ( $ prime [ $ p ] == 1 ) {"}
{"text":"Find reverse a number","code":"$ rev = reverse ( $ p ) ;"}
{"text":"A number is emrip if it is not a palindrome number and its reverse is also prime .","code":"if ( $ p != $ rev && $ rev <= $ n && $ prime [ $ rev ] == 1 ) { echo $ p . \" \" \u2581 . \u2581 $ rev \u2581 . \u2581 \" \""}
{"text":"Mark reverse prime as false so that it 's  not printed again","code":"$ prime [ $ rev ] = 0 ; } } } }"}
{"text":"Driver Code","code":"$ n = 100 ; printEmirp ( $ n ) ; ? >"}
{"text":"Function to calculate sum of divisors","code":"< ? php function getSum ( $ n ) { $ sum = 0 ;"}
{"text":"Note that this loop runs till square root of n","code":"for ( $ i = 1 ; $ i <= sqrt ( $ n ) ; $ i ++ ) { if ( $ n % $ i == 0 ) {"}
{"text":"If divisors are equal , take only one of them","code":"if ( $ n \/ $ i == $ i ) $ sum = $ sum + $ i ;"}
{"text":"Otherwise take both","code":"else { $ sum = $ sum + $ i ; $ sum = $ sum + ( $ n \/ $ i ) ; } } }"}
{"text":"calculate sum of all proper divisors only","code":"$ sum = $ sum - $ n ; return $ sum ; }"}
{"text":"Function to check Abundant Number","code":"function checkAbundant ( $ n ) {"}
{"text":"Return true if sum of divisors is greater than n .","code":"return ( getSum ( $ n ) > $ n ) ; }"}
{"text":"Driver Code","code":"$ k = checkAbundant ( 12 ) ? \" YES STRNEWLINE \" : \" NO STRNEWLINE \" ; echo ( $ k ) ; $ k = checkAbundant ( 15 ) ? \" YES STRNEWLINE \" : \" NO STRNEWLINE \" ; echo ( $ k ) ; ? >"}
{"text":"function to check if the number is powerful","code":"< ? php function isPowerful ( $ n ) {"}
{"text":"First divide the number repeatedly by 2","code":"while ( $ n % 2 == 0 ) { $ power = 0 ; while ( $ n % 2 == 0 ) { $ n \/= 2 ; $ power ++ ; }"}
{"text":"If only 2 ^ 1 divides n ( not higher powers ) , then return false","code":"if ( $ power == 1 ) return false ; }"}
{"text":"if n is not a power of 2 then this loop will execute repeat above process","code":"for ( $ factor = 3 ; $ factor <= sqrt ( $ n ) ; $ factor += 2 ) {"}
{"text":"Find highest power of \" factor \" that divides n","code":"$ power = 0 ; while ( $ n % $ factor == 0 ) { $ n = $ n \/ $ factor ; $ power ++ ; }"}
{"text":"If only factor ^ 1 divides n ( not higher powers ) , then return false","code":"if ( $ power == 1 ) return false ; }"}
{"text":"n must be 1 now if it is not a prime number . Since prime numbers are not powerful , we return false if n is not 1.","code":"return ( $ n == 1 ) ; }"}
{"text":"Driver Code","code":"$ d = isPowerful ( 20 ) ? \" YES STRNEWLINE \" : \" NO STRNEWLINE \" ; echo $ d ; $ d = isPowerful ( 27 ) ? \" YES STRNEWLINE \" : \" NO STRNEWLINE \" ; echo $ d ; ? >"}
{"text":"Function to calculate sum of divisors","code":"< ? php function divisorsSum ( $ n ) {"}
{"text":"Initialize sum of prime factors","code":"$ sum = 0 ;"}
{"text":"Note that this loop runs till square root of n","code":"for ( $ i = 1 ; $ i <= sqrt ( $ n ) ; $ i ++ ) { if ( $ n % $ i == 0 ) {"}
{"text":"If divisors are equal , take only one of them","code":"if ( $ n \/ $ i == $ i ) { $ sum = $ sum + $ i ; }"}
{"text":"Otherwise take both","code":"else { $ sum = $ sum + $ i ; $ sum = $ sum + ( $ n \/ $ i ) ; } } } return $ sum ; }"}
{"text":"Function to check Deficient Number","code":"function isDeficient ( $ n ) {"}
{"text":"Check if sum ( n ) < 2 * n","code":"return ( divisorsSum ( $ n ) < ( 2 * $ n ) ) ; }"}
{"text":"Driver Code","code":"$ ds = isDeficient ( 12 ) ? \" YES STRNEWLINE \" : \" NO STRNEWLINE \" ; echo ( $ ds ) ; $ ds = isDeficient ( 15 ) ? \" YES STRNEWLINE \" : \" NO STRNEWLINE \" ; echo ( $ ds ) ; ? >"}
{"text":"PHP program to to check whether a number is Smith Number or not .","code":"< ? php $ MAX = 10000 ;"}
{"text":"array to store all prime less than and equal to 10 ^ 6","code":"$ primes = array ( ) ;"}
{"text":"utility function for sieve of sundaram","code":"function sieveSundaram ( ) { global $ MAX , $ primes ;"}
{"text":"In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than MAX , we reduce MAX to half . This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j","code":"$ marked = array_fill ( 0 , ( $ MAX \/ 2 + 100 ) , false ) ;"}
{"text":"Main logic of Sundaram . Mark all numbers which do not generate prime number by doing 2 * i + 1","code":"for ( $ i = 1 ; $ i <= ( sqrt ( $ MAX ) - 1 ) \/ 2 ; $ i ++ ) for ( $ j = ( $ i * ( $ i + 1 ) ) << 1 ; $ j <= $ MAX \/ 2 ; $ j = $ j + 2 * $ i + 1 ) $ marked [ $ j ] = true ;"}
{"text":"Since 2 is a prime number","code":"array_push ( $ primes , 2 ) ;"}
{"text":"Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .","code":"for ( $ i = 1 ; $ i <= $ MAX \/ 2 ; $ i ++ ) if ( $ marked [ $ i ] == false ) array_push ( $ primes , 2 * $ i + 1 ) ; }"}
{"text":"Returns true if n is a Smith number , else false .","code":"function isSmith ( $ n ) { global $ MAX , $ primes ; $ original_no = $ n ;"}
{"text":"Find sum the digits of prime factors of n","code":"$ pDigitSum = 0 ; for ( $ i = 0 ; $ primes [ $ i ] <= $ n \/ 2 ; $ i ++ ) { while ( $ n % $ primes [ $ i ] == 0 ) {"}
{"text":"If primes [ i ] is a prime factor , add its digits to pDigitSum .","code":"$ p = $ primes [ $ i ] ; $ n = $ n \/ $ p ; while ( $ p > 0 ) { $ pDigitSum += ( $ p % 10 ) ; $ p = $ p \/ 10 ; } } }"}
{"text":"If n != 1 then one prime factor still to be summed up ;","code":"if ( $ n != 1 && $ n != $ original_no ) { while ( $ n > 0 ) { $ pDigitSum = $ pDigitSum + $ n % 10 ; $ n = $ n \/ 10 ; } }"}
{"text":"All prime factors digits summed up Now sum the original number digits","code":"$ sumDigits = 0 ; while ( $ original_no > 0 ) { $ sumDigits = $ sumDigits + $ original_no % 10 ; $ original_no = $ original_no \/ 10 ; }"}
{"text":"If sum of digits in prime factors and sum of digits in original number are same , then return true . Else return false .","code":"return ( $ pDigitSum == $ sumDigits ) ; }"}
{"text":"Finding all prime numbers before limit . These numbers are used to find prime factors .","code":"sieveSundaram ( ) ; echo \" Printing \u2581 first \u2581 few \u2581 Smith \u2581 Numbers \" . \" \u2581 using \u2581 isSmith ( ) STRNEWLINE \" ; for ( $ i = 1 ; $ i < 500 ; $ i ++ ) if ( isSmith ( $ i ) ) echo $ i . \" \" ; ? >"}
{"text":"Returns true if n is a Kaprekar number , else false","code":"< ? php function iskaprekar ( $ n ) { if ( $ n == 1 ) return true ;"}
{"text":"Count number of digits in square","code":"$ sq_n = $ n * $ n ; $ count_digits = 0 ; while ( $ sq_n ) { $ count_digits ++ ; $ sq_n = ( int ) ( $ sq_n \/ 10 ) ; }"}
{"text":"Split the square at different points and see if sum of any pair of splitted numbers is equal to n .","code":"for ( $ r_digits = 1 ; $ r_digits < $ count_digits ; $ r_digits ++ ) { $ eq_parts = pow ( 10 , $ r_digits ) ;"}
{"text":"To avoid numbers like 10 , 100 , 1000 ( These are not Karprekar numbers","code":"if ( $ eq_parts == $ n ) continue ;"}
{"text":"Find sum of current parts and compare with n","code":"$ sum = ( int ) ( $ sq_n1 \/ $ eq_parts ) + $ sq_n1 % $ eq_parts ; if ( $ sum == $ n ) return true ; }"}
{"text":"compare with original number","code":"return false ; }"}
{"text":"Driver code","code":"echo \" Printing \u2581 first \u2581 few \u2581 Kaprekar \u2581 \" . \" Numbers \u2581 using \u2581 iskaprekar ( ) STRNEWLINE \" ; for ( $ i = 1 ; $ i < 10000 ; $ i ++ ) if ( iskaprekar ( $ i ) ) echo $ i . \" \" ; ? >"}
{"text":"Returns true if x is Keith , else false .","code":"< ? php function isKeith ( $ x ) {"}
{"text":"Store all digits of x in a vector \" terms \" Also find number of digits and store in \" n \" .","code":"$ terms = array ( ) ; $ temp = $ x ;"}
{"text":"$n = 0 ; n is number of digits in x","code":"while ( $ temp > 0 ) { array_push ( $ terms , $ temp % 10 ) ; $ temp = ( int ) ( $ temp \/ 10 ) ; $ n ++ ; }"}
{"text":"To get digits in right order ( from MSB to LSB )","code":"$ terms = array_reverse ( $ terms ) ;"}
{"text":"Keep finding next trms of a sequence generated using digits of x until we either reach x or a number greate than x","code":"$ next_term = 0 ; $ i = $ n ; while ( $ next_term < $ x ) { $ next_term = 0 ;"}
{"text":"Next term is sum of previous n terms","code":"for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) $ next_term += $ terms [ $ i - $ j ] ; array_push ( $ terms , $ next_term ) ; $ i ++ ; }"}
{"text":"When the control comes out of the while loop , either the next_term is equal to the number or greater than it . If next_term is equal to x , then x is a Keith number , else not","code":"return ( $ next_term == $ x ) ; }"}
{"text":"Driver Code","code":"isKeith ( 14 ) ? print ( \" Yes STRNEWLINE \" ) : print ( \" No STRNEWLINE \" ) ; isKeith ( 12 ) ? print ( \" Yes STRNEWLINE \" ) : print ( \" No STRNEWLINE \" ) ; isKeith ( 197 ) ? print ( \" Yes STRNEWLINE \" ) : print ( \" No STRNEWLINE \" ) ; ? >"}
{"text":"This function returns true if n can be expressed sum of consecutive .","code":"< ? php function canBeSumofConsec ( $ n ) {"}
{"text":"We basically return true if n is a power of two","code":"return ( ( $ n & ( $ n - 1 ) ) && $ n ) ; }"}
{"text":"Driver code","code":"$ n = 15 ; if ( canBeSumofConsec ( $ n ) ) echo \" true \" ; else echo \" false \" ; ? >"}
{"text":"Returns sum of even Fibonacci numbers which are less than or equal to given limit .","code":"< ? php function evenFibSum ( $ limit ) { if ( $ limit < 2 ) return 0 ;"}
{"text":"Initialize first two even prime numbers and their sum","code":"$ ef1 = 0 ; $ ef2 = 2 ; $ sum = $ ef1 + $ ef2 ;"}
{"text":"calculating sum of even Fibonacci value","code":"while ( $ ef2 <= $ limit ) {"}
{"text":"get next even value of Fibonacci sequence","code":"$ ef3 = 4 * $ ef2 + $ ef1 ;"}
{"text":"If we go beyond limit , we break loop","code":"if ( $ ef3 > $ limit ) break ;"}
{"text":"Move to next even number and update sum","code":"$ ef1 = $ ef2 ; $ ef2 = $ ef3 ; $ sum += $ ef2 ; } return $ sum ; }"}
{"text":"Driver code","code":"$ limit = 400 ; echo ( evenFibSum ( $ limit ) ) ; ? >"}
{"text":"function to check if number is perfect square or not","code":"< ? php function isPerfect ( $ n ) { $ s = sqrt ( $ n ) ; return ( $ s * $ s == $ n ) ; }"}
{"text":"Function to return count of divisors of a number","code":"function divisorsCount ( $ n ) {"}
{"text":"Note that this loop runs till square root","code":"$ count = 0 ; for ( $ i = 1 ; $ i <= sqrt ( $ n ) + 1 ; $ i ++ ) { if ( $ n % $ i == 0 ) {"}
{"text":"If divisors are equal , count it only once","code":"if ( $ n \/ $ i == $ i ) $ count += 1 ;"}
{"text":"Otherwise print both","code":"else $ count += 2 ; } } return $ count ; }"}
{"text":"Function to calculate all divisors having exactly k divisors between a and b","code":"function kDivisors ( $ a , $ b , $ k ) {"}
{"text":"Initialize result","code":"$ count = 0 ;"}
{"text":"calculate only for perfect square numbers","code":"for ( $ i = $ a ; $ i <= $ b ; $ i ++ ) {"}
{"text":"check if number is perfect square or not","code":"if ( isPerfect ( $ i ) )"}
{"text":"total divisors of number equals to k or not","code":"if ( divisorsCount ( $ i ) == $ k ) $ count ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ a = 2 ; $ b = 49 ; $ k = 3 ; echo kDivisors ( $ a , $ b , $ k ) ; ? >"}
{"text":"Function which return nth even fibonnaci number","code":"< ? php function evenFib ( $ n ) { if ( $ n < 1 ) return $ n ; if ( $ n == 1 ) return 2 ;"}
{"text":"calculation of Fn = 4 * ( Fn - 1 ) + Fn - 2","code":"return ( ( 4 * evenFib ( $ n - 1 ) ) + evenFib ( $ n - 2 ) ) ; }"}
{"text":"Driver Code","code":"$ n = 7 ; echo ( evenFib ( $ n ) ) ; ? >"}
{"text":"Limit on result","code":"< ? php $ MAX = 3000 ;"}
{"text":"Function to calculate n 'th smart number","code":"function smartNumber ( $ n ) { global $ MAX ;"}
{"text":"Initialize all numbers as not prime","code":"$ primes = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"iterate to mark all primes and smart number","code":"$ result = array ( ) ;"}
{"text":"Traverse all numbers till maximum limit","code":"for ( $ i = 2 ; $ i < $ MAX ; $ i ++ ) {"}
{"text":"' i ' is maked as prime number because it is not multiple of any other prime","code":"if ( $ primes [ $ i ] == 0 ) { $ primes [ $ i ] = 1 ;"}
{"text":"mark all multiples of ' i ' as non prime","code":"for ( $ j = $ i * 2 ; $ j < $ MAX ; $ j = $ j + $ i ) { $ primes [ $ j ] -= 1 ;"}
{"text":"If i is the third prime factor of j then add it to result as it has at least three prime factors .","code":"if ( ( $ primes [ $ j ] + 3 ) == 0 ) array_push ( $ result , $ j ) ; } } }"}
{"text":"Sort all smart numbers","code":"sort ( $ result ) ;"}
{"text":"return n 'th smart number","code":"return $ result [ $ n - 1 ] ; }"}
{"text":"Driver program to run the case","code":"$ n = 50 ; echo smartNumber ( $ n ) ; ? >"}
{"text":"Returns count of steps before one of the numbers become 0 after repeated subtractions .","code":"< ? php function countSteps ( $ x , $ y ) {"}
{"text":"If y divides x , then simply return x \/ y .","code":"if ( $ x % $ y == 0 ) return floor ( ( ( int ) $ x \/ $ y ) ) ;"}
{"text":"Else recur . Note that this function works even if x is smaller than y because in that case first recursive call exchanges roles of x and y .","code":"return floor ( ( ( int ) $ x \/ $ y ) + countSteps ( $ y , $ x % $ y ) ) ; }"}
{"text":"Driver code","code":"$ x = 100 ; $ y = 19 ; echo countSteps ( $ x , $ y ) ; ? >"}
{"text":"Program to count number of values that satisfy x ^ 2 = 1 mod p where x lies in range [ 1 , n ]","code":"< ? php function findCountOfSolutions ( $ n , $ p ) {"}
{"text":"Initialize result","code":"$ ans = 0 ;"}
{"text":"Traverse all numbers smaller than given number p . Note that we don 't traverse from  1 to n, but 1 to p","code":"for ( $ x = 1 ; $ x < $ p ; $ x ++ ) {"}
{"text":"If x is a solution , then count all numbers of the form x + i * p such that x + i * p is in range [ 1 , n ]","code":"if ( ( $ x * $ x ) % $ p == 1 ) {"}
{"text":"The largest number in the form of x + p * i in range [ 1 , n ]","code":"$ last = $ x + $ p * ( $ n \/ $ p ) ; if ( $ last > $ n ) $ last -= $ p ;"}
{"text":"Add count of numbers of the form x + p * i . 1 is added for x itself .","code":"$ ans += ( ( $ last - $ x ) \/ $ p + 1 ) ; } } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 10 ; $ p = 5 ; echo findCountOfSolutions ( $ n , $ p ) ; ? >"}
{"text":"This function checks validity of kaprekar ' s \u2581 constant . \u2581 It \u2581 returns \u2581 kaprekar ' s constant for any four digit number \" n \" such that all digits of n are not same .","code":"< ? php function kaprekarRec ( $ n , $ prev ) { if ( $ n == 0 ) return 0 ;"}
{"text":"Store current n as previous number","code":"$ prev = $ n ;"}
{"text":"Get four digits of given number","code":"$ digits = array_fill ( 0 , 4 , 0 ) ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) { $ digits [ $ i ] = $ n % 10 ; $ n = ( int ) ( $ n \/ 10 ) ; }"}
{"text":"Sort all four dgits in ascending order And giet in the form of number \" asc \"","code":"sort ( $ digits ) ; $ asc = 0 ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) $ asc = $ asc * 10 + $ digits [ $ i ] ;"}
{"text":"Get all four dgits in descending order in the form of number \" desc \"","code":"rsort ( $ digits ) ; $ desc = 0 ; for ( $ i = 0 ; $ i < 4 ; $ i ++ ) $ desc = $ desc * 10 + $ digits [ $ i ] ;"}
{"text":"Get the difference of two numbers","code":"$ diff = abs ( $ asc - $ desc ) ;"}
{"text":"If difference is same as previous , we have reached kaprekar 's constant","code":"if ( $ diff == $ prev ) return $ diff ;"}
{"text":"Else recur","code":"return kaprekarRec ( $ diff , $ prev ) ; }"}
{"text":"A wrapper over kaprekarRec ( )","code":"function kaprekar ( $ n ) { $ rev = 0 ; return kaprekarRec ( $ n , $ rev ) ; }"}
{"text":"Trying few four digit numbers , we always get 6174","code":"echo kaprekar ( 1000 ) . \" STRNEWLINE \" ; echo kaprekar ( 1112 ) . \" STRNEWLINE \" ; echo kaprekar ( 9812 ) . \" STRNEWLINE \" ; ? >"}
{"text":"This PHP program gives result approximated to 5 decimal places .","code":"< ? php function sqroot ( $ s ) {"}
{"text":"This will be the nearest perfect square to s","code":"$ pSq = 0 ;"}
{"text":"This is the sqrt of pSq","code":"$ N = 0 ;"}
{"text":"Find the nearest perfect square to s","code":"for ( $ i = intval ( $ s ) ; $ i > 0 ; $ i -- ) { for ( $ j = 1 ; $ j < $ i ; $ j ++ ) { if ( $ j * $ j == $ i ) { $ pSq = $ i ; $ N = $ j ; break ; } } if ( $ pSq > 0 ) break ; }"}
{"text":"calculate d","code":"$ d = $ s - $ pSq ;"}
{"text":"calculate P","code":"$ P = $ d \/ ( 2.0 * $ N ) ;"}
{"text":"calculate A","code":"$ A = $ N + $ P ;"}
{"text":"calculate sqrt ( S ) .","code":"$ sqrt_of_s = $ A - ( ( $ P * $ P ) \/ ( 2.0 * $ A ) ) ; return $ sqrt_of_s ; }"}
{"text":"Driver Code","code":"$ num = 9.2345 ; $ sqroot_of_num = sqroot ( $ num ) ; echo \" Square \u2581 root \u2581 of \u2581 \" . $ num . \" \u2581 = \u2581 \" . round ( ( $ sqroot_of_num * 100000.0 ) \/ 100000.0 , 5 ) ; ? >"}
{"text":"method return x ^ a in log ( a ) time","code":"< ? php function power ( $ x , $ a ) { $ res = 1 ; while ( $ a ) { if ( $ a & 1 ) $ res = $ res * $ x ; $ x = $ x * $ x ; $ a >>= 1 ; } return $ res ; }"}
{"text":"Method returns maximum product obtained by breaking N","code":"function breakInteger ( $ N ) {"}
{"text":"base case 2 = 1 + 1","code":"if ( $ N == 2 ) return 1 ;"}
{"text":"base case 3 = 2 + 1","code":"if ( $ N == 3 ) return 2 ; $ maxProduct = 0 ;"}
{"text":"breaking based on mod with 3","code":"switch ( $ N % 3 ) {"}
{"text":"If divides evenly , then break into all 3","code":"case 0 : $ maxProduct = power ( 3 , $ N \/ 3 ) ; break ;"}
{"text":"If division gives mod as 1 , then break as 4 + power of 3 for remaining part","code":"case 1 : $ maxProduct = 2 * 2 * power ( 3 , ( $ N \/ 3 ) - 1 ) ; break ;"}
{"text":"If division gives mod as 2 , then break as 2 + power of 3 for remaining part","code":"case 2 : $ maxProduct = 2 * power ( 3 , $ N \/ 3 ) ; break ; } return $ maxProduct ; }"}
{"text":"Driver code to test above methods","code":"$ maxProduct = breakInteger ( 10 ) ; echo $ maxProduct ; ? >"}
{"text":"PHP program to find sum of digits of a number until sum becomes single digit .","code":"< ? php function digSum ( $ n ) { $ sum = 0 ;"}
{"text":"Loop to do sum while sum is not less than or equal to 9","code":"while ( $ n > 0 $ sum > 9 ) { if ( $ n == 0 ) { $ n = $ sum ; $ sum = 0 ; } $ sum += $ n % 10 ; $ n = ( int ) $ n \/ 10 ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 1234 ; echo digSum ( $ n ) ; ? >"}
{"text":"Driver program to test the above function","code":"< ? php function digSum ( $ n ) { if ( $ n == 0 ) return 0 ; return ( $ n % 9 == 0 ) ? 9 : ( $ n % 9 ) ; } $ n = 9999 ; echo digSum ( $ n ) ; ? >"}
{"text":"Returns count of all numbers smaller than or equal to n and multiples of 3 or 7 or both","code":"< ? php function countMultiples ( $ n ) { return floor ( $ n \/ 3 + $ n \/ 7 - $ n \/ 21 ) ; }"}
{"text":"Driver code","code":"echo \" Count = \" ? >"}
{"text":"Function to find b % a","code":"< ? php function Modulo ( $ a , $ b ) {"}
{"text":"Initialize result","code":"$ mod = 0 ;"}
{"text":"calculating mod of b with a to make b like 0 <= b < a","code":"for ( $ i = 0 ; $ i < strlen ( $ b ) ; $ i ++ ) $ mod = ( $ mod * 10 + $ b [ $ i ] - '0' ) % $ a ;"}
{"text":"return $mod ; return modulo","code":"}"}
{"text":"function to find last digit of a ^ b","code":"function LastDigit ( $ a , $ b ) { $ len_a = strlen ( $ a ) ; $ len_b = strlen ( $ b ) ;"}
{"text":"if a and b both are 0","code":"if ( $ len_a == 1 && $ len_b == 1 && $ b [ 0 ] == '0' && $ a [ 0 ] == '0' ) return 1 ;"}
{"text":"if exponent is 0","code":"if ( $ len_b == 1 && $ b [ 0 ] == '0' ) return 1 ;"}
{"text":"if base is 0","code":"if ( $ len_a == 1 && $ a [ 0 ] == '0' ) return 0 ;"}
{"text":"if exponent is divisible by 4 that means last digit will be pow ( a , 4 ) % 10. if exponent is not divisible by 4 that means last digit will be pow ( a , b % 4 ) % 10","code":"$ exp = ( Modulo ( 4 , $ b ) == 0 ) ? 4 : Modulo ( 4 , $ b ) ;"}
{"text":"Find last digit in ' a ' and compute its exponent","code":"$ res = pow ( $ a [ $ len_a - 1 ] - '0' , $ exp ) ;"}
{"text":"Return last digit of result","code":"return $ res % 10 ; }"}
{"text":"Driver program to run test case","code":"$ a = \"117\" ; $ b = \"3\" ; echo LastDigit ( $ a , $ b ) ; ? >"}
{"text":"Iterative function to reverse digits of num","code":"< ? php function reversDigits ( $ num ) { $ rev_num = 0 ; while ( $ num > 0 ) { $ rev_num = $ rev_num * 10 + $ num % 10 ; $ num = ( int ) ( $ num \/ 10 ) ; } return $ rev_num ; }"}
{"text":"Function to check whether he number is palindrome or not","code":"function isPalindrome ( $ num ) { return ( reversDigits ( $ num ) == $ num ) ; }"}
{"text":"Reverse and Add Function","code":"function ReverseandAdd ( $ num ) { $ rev_num = 0 ; while ( $ num <= 4294967295 ) {"}
{"text":"Reversing the digits of the number","code":"$ rev_num = reversDigits ( $ num ) ;"}
{"text":"Adding the reversed number with the original","code":"$ num = $ num + $ rev_num ;"}
{"text":"Checking whether the number is palindrome or not","code":"if ( isPalindrome ( $ num ) ) { print ( $ num . \" \" ) ; break ; } else if ( $ num > 4294967295 ) { print ( \" No \u2581 palindrome \u2581 exist \" ) ; } } }"}
{"text":"Driver Code","code":"ReverseandAdd ( 195 ) ; ReverseandAdd ( 265 ) ; ? >"}
{"text":"Function to implement Stein 's Algorithm","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == $ b ) return $ a ;"}
{"text":"GCD ( 0 , b ) == b ; GCD ( a , 0 ) == a , GCD ( 0 , 0 ) == 0","code":"if ( $ a == 0 ) return $ b ; if ( $ b == 0 ) return $ a ;"}
{"text":"look for factors of 2 if ( ~ $a & 1 ) a is even","code":"{"}
{"text":"if ( $b & 1 ) b is odd","code":"return gcd ( $ a >> 1 , $ b ) ;"}
{"text":"else both a and b are even","code":"return gcd ( $ a >> 1 , $ b >> 1 ) << 1 ; }"}
{"text":"if ( ~ $b & 1 ) a is odd , b is even","code":"return gcd ( $ a , $ b >> 1 ) ;"}
{"text":"reduce larger number","code":"if ( $ a > $ b ) return gcd ( ( $ a - $ b ) >> 1 , $ b ) ; return gcd ( ( $ b - $ a ) >> 1 , $ a ) ; }"}
{"text":"Driver code","code":"$ a = 34 ; $ b = 17 ; echo \" Gcd \u2581 of \u2581 given \u2581 numbers \u2581 is : \u2581 \" , gcd ( $ a , $ b ) ; ? >"}
{"text":"n , sum -- > value of inputs out -- > output array index -- > index of next digit to be filled in output array","code":"< ? php function findNDigitNumsUtil ( $ n , $ sum , $ out , $ index ) {"}
{"text":"Base case","code":"if ( $ index > $ n $ sum < 0 ) return ;"}
{"text":"If number becomes N - digit","code":"if ( $ index == $ n ) {"}
{"text":"if sum of its digits is equal to given sum , print it","code":"if ( $ sum == 0 ) { $ out [ $ index ] = ' ' ; foreach ( $ out as & $ value ) print ( $ value ) ; print ( \" \u2581 \" ) ; } return ; }"}
{"text":"Traverse through every digit . Note that here we ' re \u2581 considering \u2581 leading \u2581 \u2581 0' s as digits","code":"for ( $ i = 0 ; $ i <= 9 ; $ i ++ ) {"}
{"text":"append current digit to number","code":"$ out [ $ index ] = chr ( $ i + ord ( '0' ) ) ;"}
{"text":"recurse for next digit with reduced sum","code":"findNDigitNumsUtil ( $ n , $ sum - $ i , $ out , $ index + 1 ) ; } }"}
{"text":"This is mainly a wrapper over findNDigitNumsUtil . It explicitly handles leading digit","code":"function findNDigitNums ( $ n , $ sum ) {"}
{"text":"output array to store N - digit numbers","code":"$ out = array_fill ( 0 , $ n + 1 , false ) ;"}
{"text":"fill 1 st position by every digit from 1 to 9 and calls findNDigitNumsUtil ( ) for remaining positions","code":"for ( $ i = 1 ; $ i <= 9 ; $ i ++ ) { $ out [ 0 ] = chr ( $ i + ord ( '0' ) ) ; findNDigitNumsUtil ( $ n , $ sum - $ i , $ out , 1 ) ; } }"}
{"text":"Driver Code","code":"$ n = 2 ; $ sum = 3 ; findNDigitNums ( $ n , $ sum ) ; ? >"}
{"text":"A function that returns true only if num contains one digit","code":"< ? php function oneDigit ( $ num ) {"}
{"text":"comparison operation is faster than division operation . So using following instead of \" return \u2581 num \u2581 \/ \u2581 10 \u2581 = = \u2581 0 ; \"","code":"return ( $ num >= 0 && $ num < 10 ) ; }"}
{"text":"A recursive function to find out whether num is palindrome or not . Initially , dupNum contains address of a copy of num .","code":"function isPalUtil ( $ num , $ dupNum ) {"}
{"text":"Base case ( needed for recursion termination ) : This statement \/ mainly compares the first digit with the last digit","code":"if ( oneDigit ( $ num ) ) return ( $ num == ( $ dupNum ) % 10 ) ;"}
{"text":"This is the key line in this method . Note that all recursive \/ calls have a separate copy of num , but they all share same copy of dupNum . We divide num while moving up the recursion tree","code":"if ( ! isPalUtil ( ( int ) ( $ num \/ 10 ) , $ dupNum ) ) return false ;"}
{"text":"The following statements are executed when we move up the recursion call tree","code":"$ dupNum = ( int ) ( $ dupNum \/ 10 ) ;"}
{"text":"At this point , if num % 10 contains ith digit from beginning , then ( dupNum ) % 10 contains ith digit from end","code":"return ( $ num % 10 == ( $ dupNum ) % 10 ) ; }"}
{"text":"The main function that uses recursive function isPalUtil ( ) to find out whether num is palindrome or not","code":"function isPal ( $ num ) {"}
{"text":"If num is negative , make it positive","code":"if ( $ num < 0 ) $ num = - $ num ;"}
{"text":"Create a separate copy of num , so that modifications made to address dupNum don 't change the input number.  $dupNum = $num; dupNum = num","code":"return isPalUtil ( $ num , $ dupNum ) ; }"}
{"text":"Function to generate all primes and checking whether number is palindromic or not","code":"function printPalPrimesLessThanN ( $ n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ n + 1 , true ) ; for ( $ p = 2 ; $ p * $ p <= $ n ; $ p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( $ prime [ $ p ] ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ n ; $ i += $ p ) { $ prime [ $ i ] = false ; } } }"}
{"text":"Print all palindromic prime numbers","code":"for ( $ p = 2 ; $ p <= $ n ; $ p ++ ) {"}
{"text":"checking whether the given number is prime palindromic or not","code":"if ( $ prime [ $ p ] && isPal ( $ p ) ) { print ( $ p . \" \" ) ; } } }"}
{"text":"Driver Code","code":"$ n = 100 ; print ( \" Palindromic \u2581 primes \u2581 smaller \u2581 \" . \" than \u2581 or \u2581 equal \u2581 to \u2581 \" . $ n . \" \u2581 are \u2581 : STRNEWLINE \" ) ; printPalPrimesLessThanN ( $ n ) ; ? >"}
{"text":"A function to count all prime factors of a given number","code":"< ? php function countPrimeFactors ( $ n ) { $ count = 0 ;"}
{"text":"Count the number of 2 s that divide n","code":"while ( $ n % 2 == 0 ) { $ n = $ n \/ 2 ; $ count ++ ; }"}
{"text":"n must be odd at this point . So we can skip one element ( Note i = i + 2 )","code":"for ( $ i = 3 ; $ i <= sqrt ( $ n ) ; $ i = $ i + 2 ) {"}
{"text":"While i divides n , count i and divide n","code":"while ( $ n % $ i == 0 ) { $ n = $ n \/ $ i ; $ count ++ ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( $ n > 2 ) $ count ++ ; return ( $ count ) ; }"}
{"text":"A function to print the first n numbers that are k - almost primes .","code":"function printKAlmostPrimes ( $ k , $ n ) { for ( $ i = 1 , $ num = 2 ; $ i <= $ n ; $ num ++ ) {"}
{"text":"Print this number if it is k - prime","code":"if ( countPrimeFactors ( $ num ) == $ k ) { echo ( $ num ) ; echo ( \" \u2581 \" ) ;"}
{"text":"Increment count of k - primes printed so far","code":"$ i ++ ; } } return ; }"}
{"text":"Driver Code","code":"$ n = 10 ; $ k = 2 ; echo \" First \u2581 $ n \u2581 $ k - almost \u2581 prime \u2581 numbers : STRNEWLINE \" ; printKAlmostPrimes ( $ k , $ n ) ; ? >"}
{"text":"Function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to convert the obtained fraction into it 's simplest form","code":"function lowest ( & $ den3 , & $ num3 ) {"}
{"text":"Finding gcd of both terms","code":"$ common_factor = gcd ( $ num3 , $ den3 ) ;"}
{"text":"Converting both terms into simpler terms by dividing them by common factor","code":"$ den3 = ( int ) $ den3 \/ $ common_factor ; $ num3 = ( int ) $ num3 \/ $ common_factor ; }"}
{"text":"Function to add two fractions","code":"function addFraction ( $ num1 , $ den1 , $ num2 , $ den2 , & $ num3 , & $ den3 ) {"}
{"text":"Finding gcd of den1 and den2","code":"$ den3 = gcd ( $ den1 , $ den2 ) ;"}
{"text":"Denominator of final fraction obtained finding LCM of den1 and den2 LCM * GCD = a * b","code":"$ den3 = ( $ den1 * $ den2 ) \/ $ den3 ;"}
{"text":"Changing the fractions to have same denominator Numerator of the final fraction obtained","code":"$ num3 = ( $ num1 ) * ( $ den3 \/ $ den1 ) + ( $ num2 ) * ( $ den3 \/ $ den2 ) ;"}
{"text":"Calling function to convert final fraction into it 's  simplest form","code":"lowest ( $ den3 , $ num3 ) ; }"}
{"text":"Driver Code","code":"$ num1 = 1 ; $ den1 = 500 ; $ num2 = 2 ; $ den2 = 1500 ; $ den3 ; $ num3 ; addFraction ( $ num1 , $ den1 , $ num2 , $ den2 , $ num3 , $ den3 ) ; echo $ num1 , \" \/ \" , $ den1 , \" \u2581 + \u2581 \" , $ num2 , \" \/ \" , $ den2 , \" \u2581 is \u2581 equal \u2581 to \u2581 \" , $ num3 , \" \/ \" , $ den3 , \" STRNEWLINE \" ; ? >"}
{"text":"This function receives an integer n and returns the maximum number of pieces that can be made form pancake using n cuts","code":"< ? php function findPieces ( $ n ) {"}
{"text":"Use the formula","code":"return ( $ n * ( $ n + 1 ) ) \/ 2 + 1 ; }"}
{"text":"Driver Code","code":"echo findPieces ( 1 ) , \" STRNEWLINE \" ; echo findPieces ( 2 ) , \" STRNEWLINE \" ; echo findPieces ( 3 ) , \" STRNEWLINE \" ; echo findPieces ( 50 ) , \" STRNEWLINE \" ; ? >"}
{"text":"Returns the number of digits present in n ! Since the result can be large long long is used as return type","code":"< ? php function findDigits ( $ n ) {"}
{"text":"factorial of - ve number doesn 't exists","code":"if ( $ n < 0 ) return 0 ;"}
{"text":"base case","code":"if ( $ n <= 1 ) return 1 ;"}
{"text":"Use Kamenetsky formula to calculate the number of digits","code":"$ x = ( ( $ n * log10 ( $ n \/ M_E ) + log10 ( 2 * M_PI * $ n ) \/ 2.0 ) ) ; return floor ( $ x ) + 1 ; }"}
{"text":"Driver Code","code":"echo findDigits ( 1 ) . \" STRNEWLINE \" ; echo findDigits ( 50000000 ) . \" STRNEWLINE \" ; echo findDigits ( 1000000000 ) . \" STRNEWLINE \" ; echo findDigits ( 120 ) ; ? >"}
{"text":"This function receives an integer n , and returns the number of digits present in n !","code":"< ? php function findDigits ( $ n ) {"}
{"text":"factorial exists only for n >= 0","code":"if ( $ n < 0 ) return 0 ;"}
{"text":"base case","code":"if ( $ n <= 1 ) return 1 ;"}
{"text":"else iterate through n and calculate the value","code":"$ digits = 0 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ digits += log10 ( $ i ) ; return floor ( $ digits ) + 1 ; }"}
{"text":"Driver code","code":"echo findDigits ( 1 ) , \" STRNEWLINE \" ; echo findDigits ( 5 ) , \" STRNEWLINE \" ; echo findDigits ( 10 ) , \" STRNEWLINE \" ; echo findDigits ( 120 ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to count number of sub - arrays whose sum is even using brute force Time Complexity - O ( N ^ 2 ) Space Complexity - O ( 1 )","code":"< ? php function countEvenSum ( $ arr , $ n ) { $ result = 0 ;"}
{"text":"Find sum of all subarrays and increment result if sum is even","code":"for ( $ i = 0 ; $ i <= $ n - 1 ; $ i ++ ) { $ sum = 0 ; for ( $ j = $ i ; $ j <= $ n - 1 ; $ j ++ ) { $ sum = $ sum + $ arr [ $ j ] ; if ( $ sum % 2 == 0 ) $ result ++ ; } } return ( $ result ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 2 , 3 , 4 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" The \u2581 Number \u2581 of \u2581 Subarrays \u2581 \" , \" with \u2581 even \u2581 sum \u2581 is \u2581 \" , countEvenSum ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to count number of sub - arrays with even sum using an efficient algorithm Time Complexity - O ( N ) Space Complexity - O ( 1 )","code":"< ? php function countEvenSum ( $ arr , $ n ) {"}
{"text":"A temporary array of size 2. temp [ 0 ] is going to store count of even subarrays and temp [ 1 ] count of odd . temp [ 0 ] is initialized as 1 because there a single even element is also counted as a subarray","code":"$ temp = array ( 1 , 0 ) ;"}
{"text":"Initialize count . sum is sum of elements under modulo 2 and ending with arr [ i ] .","code":"$ result = 0 ; $ sum = 0 ;"}
{"text":"i ' th \u2581 iteration \u2581 computes \u2581 \u2581 sum \u2581 of \u2581 arr [ 0 . . i ] \u2581 under \u2581 \u2581 modulo \u2581 2 \u2581 and \u2581 increments \u2581 \u2581 even \/ odd \u2581 count \u2581 according \u2581 \u2581 to \u2581 sum ' s value","code":"for ( $ i = 0 ; $ i <= $ n - 1 ; $ i ++ ) {"}
{"text":"2 is added to handle negative numbers","code":"$ sum = ( ( $ sum + $ arr [ $ i ] ) % 2 + 2 ) % 2 ;"}
{"text":"Increment even \/ odd count","code":"$ temp [ $ sum ] ++ ; }"}
{"text":"Use handshake lemma to count even subarrays ( Note that an even can be formed by two even or two odd )","code":"$ result = $ result + ( int ) ( $ temp [ 0 ] * ( $ temp [ 0 ] - 1 ) \/ 2 ) ; $ result = $ result + ( int ) ( $ temp [ 1 ] * ( $ temp [ 1 ] - 1 ) \/ 2 ) ; return ( $ result ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 2 , 3 , 4 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" The \u2581 Number \u2581 of \u2581 Subarrays \u2581 \" . \" with \u2581 even \" , \" \u2581 sum \u2581 is \u2581 \" , countEvenSum ( $ arr , $ n ) ; ? >"}
{"text":"Computes value of first fibonacci numbers","code":"< ? php function calculateSum ( $ n ) { if ( $ n <= 0 ) return 0 ; $ fibo [ 0 ] = 0 ; $ fibo [ 1 ] = 1 ;"}
{"text":"Initialize result","code":"$ sum = $ fibo [ 0 ] + $ fibo [ 1 ] ;"}
{"text":"Add remaining terms","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) { $ fibo [ $ i ] = $ fibo [ $ i - 1 ] + $ fibo [ $ i - 2 ] ; $ sum += $ fibo [ $ i ] ; } return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo \" Sum \u2581 of \u2581 Fibonacci \u2581 numbers \u2581 is \u2581 : \u2581 \" , calculateSum ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP Program to find sum of Fibonacci numbers in O ( Log n ) time .","code":"< ? php $ MAX = 1000 ;"}
{"text":"Create an array for memoization","code":"$ f = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Returns n 'th Fibonacci number using table f[]","code":"function fib ( $ n ) { global $ f ;"}
{"text":"Base cases","code":"if ( $ n == 0 ) return 0 ; if ( $ n == 1 $ n == 2 ) return ( $ f [ $ n ] = 1 ) ;"}
{"text":"If fib ( n ) is already computed","code":"if ( $ f [ $ n ] ) return $ f [ $ n ] ; $ k = ( $ n & 1 ) ? ( $ n + 1 ) \/ 2 : $ n \/ 2 ;"}
{"text":"Applying above formula [ Note value n & 1 is 1 if n is odd , else 0 ] .","code":"$ f [ $ n ] = ( $ n & 1 ) ? ( fib ( $ k ) * fib ( $ k ) + fib ( $ k - 1 ) * fib ( $ k - 1 ) ) : ( 2 * fib ( $ k - 1 ) + fib ( $ k ) ) * fib ( $ k ) ; return $ f [ $ n ] ; }"}
{"text":"Computes value of first Fibonacci numbers","code":"function calculateSum ( $ n ) { return fib ( $ n + 2 ) - 1 ; }"}
{"text":"Driver Code","code":"$ n = 4 ; print ( \" Sum \u2581 of \u2581 Fibonacci \u2581 numbers \u2581 is \u2581 : \u2581 \" . calculateSum ( $ n ) ) ; ? >"}
{"text":"arr - array to store the combination index - next location in array num - given number reducedNum - reduced number","code":"< ? php function findCombinationsUtil ( $ arr , $ index , $ num , $ reducedNum ) {"}
{"text":"Base condition","code":"if ( $ reducedNum < 0 ) return ;"}
{"text":"If combination is found , print it","code":"if ( $ reducedNum == 0 ) { for ( $ i = 0 ; $ i < $ index ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; echo \" STRNEWLINE \" ; return ; }"}
{"text":"Find the previous number stored in arr [ ] It helps in maintaining increasing order","code":"$ prev = ( $ index == 0 ) ? 1 : $ arr [ $ index - 1 ] ;"}
{"text":"note loop starts from previous number i . e . at array location index - 1","code":"for ( $ k = $ prev ; $ k <= $ num ; $ k ++ ) {"}
{"text":"next element of array is k","code":"$ arr [ $ index ] = $ k ;"}
{"text":"call recursively with reduced number","code":"findCombinationsUtil ( $ arr , $ index + 1 , $ num , $ reducedNum - $ k ) ; } }"}
{"text":"Function to find out all combinations of positive numbers that add upto given number . It uses findCombinationsUtil ( )","code":"function findCombinations ( $ n ) {"}
{"text":"array to store the combinations It can contain max n elements","code":"$ arr = array ( ) ;"}
{"text":"find all combinations","code":"findCombinationsUtil ( $ arr , 0 , $ n , $ n ) ; }"}
{"text":"Driver code","code":"$ n = 5 ; findCombinations ( $ n ) ; ? >"}
{"text":"utility function to find pow ( base , exponent ) % modulus","code":"< ? php function pow1 ( $ base , $ exponent , $ modulus ) { $ result = 1 ; $ base = $ base % $ modulus ; while ( $ exponent > 0 ) { if ( $ exponent % 2 == 1 ) $ result = ( $ result * $ base ) % $ modulus ; $ exponent = $ exponent >> 1 ; $ base = ( $ base * $ base ) % $ modulus ; } return $ result ; }"}
{"text":"utility function to find gcd","code":"function gcd ( $ a , $ b ) { if ( $ b == 0 ) return $ a ; else return gcd ( $ b , $ a % $ b ) ; }"}
{"text":"Returns k such that b ^ k = 1 ( mod p )","code":"function order ( $ p , $ b ) { if ( gcd ( $ p , $ b ) != 1 ) { print ( \" p \u2581 and \u2581 b \u2581 are \u2581 not \u2581 co - prime . STRNEWLINE \" ) ; return -1 ; }"}
{"text":"Initializing k with first odd prime number","code":"$ k = 3 ; while ( 1 ) { if ( pow1 ( $ b , $ k , $ p ) == 1 ) return $ k ; $ k ++ ; } }"}
{"text":"function return p - 1 ( = x argument ) as x * 2 ^ e , where x will be odd sending e as reference because updation is needed in actual e","code":"function convertx2e ( $ x , & $ e ) { $ e = 0 ; while ( $ x % 2 == 0 ) { $ x = ( int ) ( $ x \/ 2 ) ; $ e ++ ; } return $ x ; }"}
{"text":"Main function for finding the modular square root","code":"function STonelli ( $ n , $ p ) {"}
{"text":"a and p should be coprime for finding the modular square root","code":"if ( gcd ( $ n , $ p ) != 1 ) { print ( \" a \u2581 and \u2581 p \u2581 are \u2581 not \u2581 coprime STRNEWLINE \" ) ; return -1 ; }"}
{"text":"If below expression return ( p - 1 ) then modular square root is not possible","code":"if ( pow1 ( $ n , ( $ p - 1 ) \/ 2 , $ p ) == ( $ p - 1 ) ) { printf ( \" no \u2581 sqrt \u2581 possible STRNEWLINE \" ) ; return -1 ; }"}
{"text":"expressing p - 1 , in terms of s * 2 ^ e , where s is odd number","code":"$ e = 0 ; $ s = convertx2e ( $ p - 1 , $ e ) ;"}
{"text":"finding smallest q such that q ^ ( ( p - 1 ) \/ 2 ) ( mod p ) = p - 1","code":"$ q = 2 ; for ( ; ; $ q ++ ) {"}
{"text":"q - 1 is in place of ( - 1 % p )","code":"if ( pow1 ( $ q , ( $ p - 1 ) \/ 2 , $ p ) == ( $ p - 1 ) ) break ; }"}
{"text":"Initializing variable x , b and g","code":"$ x = pow1 ( $ n , ( $ s + 1 ) \/ 2 , $ p ) ; $ b = pow1 ( $ n , $ s , $ p ) ; $ g = pow1 ( $ q , $ s , $ p ) ; $ r = $ e ;"}
{"text":"keep looping until b become 1 or m becomes 0","code":"while ( 1 ) { $ m = 0 ; for ( ; $ m < $ r ; $ m ++ ) { if ( order ( $ p , $ b ) == -1 ) return -1 ;"}
{"text":"finding m such that b ^ ( 2 ^ m ) = 1","code":"if ( order ( $ p , $ b ) == pow ( 2 , $ m ) ) break ; } if ( $ m == 0 ) return $ x ;"}
{"text":"updating value of x , g and b according to algorithm","code":"$ x = ( $ x * pow1 ( $ g , pow ( 2 , $ r - $ m - 1 ) , $ p ) ) % $ p ; $ g = pow1 ( $ g , pow ( 2 , $ r - $ m ) , $ p ) ; $ b = ( $ b * $ g ) % $ p ; if ( $ b == 1 ) return $ x ; $ r = $ m ; } }"}
{"text":"Driver Code","code":"$ n = 2 ;"}
{"text":"p should be prime","code":"$ p = 113 ; $ x = STonelli ( $ n , $ p ) ; if ( $ x == -1 ) print ( \" Modular \u2581 square \u2581 root \u2581 is \u2581 not \u2581 exist STRNEWLINE \" ) ; else print ( \" Modular \u2581 square \u2581 root \u2581 of \u2581 \" . \" $ n \u2581 and \u2581 $ p \u2581 is \u2581 $ x STRNEWLINE \" ) ; ? >"}
{"text":"PHP program to check given number number y","code":"< ? php function isPower ( $ x , $ y ) {"}
{"text":"logarithm function to calculate value","code":"$ res1 = log ( $ y ) \/ log ( $ x ) ;"}
{"text":"Note : this is double","code":"$ res2 = log ( $ y ) \/ log ( $ x ) ;"}
{"text":"compare to the result1 or result2 both are equal","code":"return ( $ res1 == $ res2 ) ; }"}
{"text":"Driver Code","code":"echo isPower ( 27 , 729 ) ; ? >"}
{"text":"Prints roots of quadratic equation ax * 2 + bx + x","code":"< ? php function findRoots ( $ a , $ b , $ c ) {"}
{"text":"If a is 0 , then equation is not quadratic , but linear","code":"if ( $ a == 0 ) { echo \" Invalid \" ; return ; } $ d = $ b * $ b - 4 * $ a * $ c ; $ sqrt_val = sqrt ( abs ( $ d ) ) ; if ( $ d > 0 ) { echo \" Roots \u2581 are \u2581 real \u2581 and \u2581 \" . \" different \u2581 STRNEWLINE \" ; echo ( - $ b + $ sqrt_val ) \/ ( 2 * $ a ) , \" STRNEWLINE \" , ( - $ b - $ sqrt_val ) \/ ( 2 * $ a ) ; } else if ( $ d == 0 ) { echo \" Roots \u2581 are \u2581 real \u2581 and \u2581 same \u2581 STRNEWLINE \" ; echo - $ b \/ ( 2 * $ a ) ; }"}
{"text":"d < 0","code":"else { echo \" Roots \u2581 are \u2581 complex \u2581 STRNEWLINE \" ; echo - $ b \/ ( 2 * $ a ) , \" \u2581 + \u2581 i \" , $ sqrt_val , \" STRNEWLINE \" , - $ b \/ ( 2 * $ a ) , \" \u2581 - \u2581 i \" , $ sqrt_val ; } }"}
{"text":"Driver code","code":"$ a = 1 ; $ b = -7 ; $ c = 12 ;"}
{"text":"Function call","code":"findRoots ( $ a , $ b , $ c ) ; ? >"}
{"text":"This function returns true if n is perfect square , else false","code":"< ? php function isPerfectSquare ( $ n ) {"}
{"text":"sum is sum of all odd numbers . i is used one by one hold odd numbers","code":"for ( $ sum = 0 , $ i = 1 ; $ sum < $ n ; $ i += 2 ) { $ sum += $ i ; if ( $ sum == $ n ) return true ; } return false ; }"}
{"text":"Driver code","code":"if ( isPerfectSquare ( 35 ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; if ( isPerfectSquare ( 49 ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"Returns count of ' d ' digit integers have 0 as a digit","code":"< ? php function findCount ( $ d ) { return 9 * ( pow ( 10 , $ d - 1 ) - pow ( 9 , $ d - 1 ) ) ; }"}
{"text":"Driver Code","code":"{ $ d = 1 ; echo findCount ( $ d ) , \" STRNEWLINE \" ; $ d = 2 ; echo findCount ( $ d ) , \" STRNEWLINE \" ; $ d = 4 ; echo findCount ( $ d ) , \" STRNEWLINE \" ; return 0 ; } ? >"}
{"text":"Returns count Dyck paths in n x n grid","code":"< ? php function countDyckPaths ( $ n ) {"}
{"text":"Compute value of 2 nCn","code":"$ res = 1 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ res *= ( 2 * $ n - $ i ) ; $ res \/= ( $ i + 1 ) ; }"}
{"text":"return 2 nCn \/ ( n + 1 )","code":"return $ res \/ ( $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 4 ; echo \" Number \u2581 of \u2581 Dyck \u2581 Paths \u2581 is \u2581 \" , countDyckPaths ( $ n ) ; ? >"}
{"text":"Returns true if ' num ' is triangular , else false","code":"< ? php function isTriangular ( $ num ) {"}
{"text":"Base case","code":"if ( $ num < 0 ) return false ;"}
{"text":"A Triangular number must be sum of first n natural numbers","code":"$ sum = 0 ; for ( $ n = 1 ; $ sum <= $ num ; $ n ++ ) { $ sum = $ sum + $ n ; if ( $ sum == $ num ) return true ; } return false ; }"}
{"text":"Driver code","code":"$ n = 55 ; if ( isTriangular ( $ n ) ) echo \" The \u2581 number \u2581 is \u2581 a \u2581 triangular \u2581 number \" ; else echo \" The \u2581 number \u2581 is \u2581 NOT \u2581 a \u2581 triangular \u2581 number \" ; ? >"}
{"text":"Returns true if num is triangular","code":"< ? php function isTriangular ( $ num ) { if ( $ num < 0 ) return false ;"}
{"text":"Considering the equation n * ( n + 1 ) \/ 2 = num The equation is : a ( n ^ 2 ) + bn + c = 0 \";","code":"$ c = ( -2 * $ num ) ; $ b = 1 ; $ a = 1 ; $ d = ( $ b * $ b ) - ( 4 * $ a * $ c ) ; if ( $ d < 0 ) return false ;"}
{"text":"Find roots of equation","code":"$ root1 = ( - $ b + ( float ) sqrt ( $ d ) ) \/ ( 2 * $ a ) ; $ root2 = ( - $ b - ( float ) sqrt ( $ d ) ) \/ ( 2 * $ a ) ;"}
{"text":"checking if root1 is natural","code":"if ( $ root1 > 0 && floor ( $ root1 ) == $ root1 ) return true ;"}
{"text":"checking if root2 is natural","code":"if ( $ root2 > 0 && floor ( $ root2 ) == $ root2 ) return true ; return false ; }"}
{"text":"Driver code","code":"$ num = 55 ; if ( isTriangular ( $ num ) ) echo ( \" The \u2581 number \u2581 is \" . \" \u2581 a \u2581 triangular \u2581 number \" ) ; else echo ( \" The \u2581 number \u2581 \" . \" is \u2581 NOT \u2581 a \u2581 triangular \u2581 number \" ) ; ? >"}
{"text":"To return value of a char . For example , 2 is returned for '2' . 10 is returned for ' A ' , 11 for ' B '","code":"< ? php function val ( $ c ) { if ( $ c >= '0' && $ c <= '9' ) return ord ( $ c ) - ord ( '0' ) ; else return ord ( $ c ) - ord ( ' A ' ) + 10 ; }"}
{"text":"Function to convert a number from given base ' b ' to decimal","code":"function toDeci ( $ str , $ base ) { $ len = strlen ( $ str ) ;"}
{"text":"Initialize power of base","code":"$ power = 1 ;"}
{"text":"Initialize result","code":"$ num = 0 ;"}
{"text":"Decimal equivalent is str [ len - 1 ] * 1 + str [ len - 2 ] * base + str [ len - 3 ] * ( base ^ 2 ) + ...","code":"for ( $ i = $ len - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"A digit in input number must be less than number 's base","code":"if ( val ( $ str [ $ i ] ) >= $ base ) { print ( \" Invalid \u2581 Number \" ) ; return -1 ; } $ num += val ( $ str [ $ i ] ) * $ power ; $ power = $ power * $ base ; } return $ num ; }"}
{"text":"Driver code","code":"$ str = \"11A \" ; $ base = 16 ; print ( \" Decimal \u2581 equivalent \u2581 of \u2581 $ str \u2581 \" . \" in \u2581 base \u2581 $ base \u2581 is \u2581 \" . toDeci ( $ str , $ base ) ) ; ? >"}
{"text":"Utility function to find gcd","code":"< ? php function gcd ( $ a , $ b ) { $ c ; while ( $ a != 0 ) { $ c = $ a ; $ a = $ b % $ a ; $ b = $ c ; } return $ b ; }"}
{"text":"Function to print the desired output","code":"function forbenius ( $ X , $ Y ) {"}
{"text":"Solution doesn 't exist   if GCD is not 1","code":"if ( gcd ( $ X , $ Y ) != 1 ) { echo \" NA STRNEWLINE \" ; return ; }"}
{"text":"Else apply the formula","code":"$ A = ( $ X * $ Y ) - ( $ X + $ Y ) ; $ N = ( $ X - 1 ) * ( $ Y - 1 ) \/ 2 ; echo \" Largest \u2581 Amount \u2581 = \u2581 \" , $ A , \" STRNEWLINE \" ; echo \" Total \u2581 Count \u2581 = \u2581 \" , $ N , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ X = 2 ; $ Y = 5 ; forbenius ( $ X , $ Y ) ; $ X = 5 ; $ Y = 10 ; echo \" STRNEWLINE \" ; forbenius ( $ X , $ Y ) ; ? >"}
{"text":"Helper function to xor two characters","code":"< ? php function xor_c ( $ a , $ b ) { return ( $ a == $ b ) ? '0' : '1' ; }"}
{"text":"Helper function to flip the bit","code":"function flip ( $ c ) { return ( $ c == '0' ) ? '1' : '0' ; }"}
{"text":"function to convert binary string to gray string","code":"function binarytoGray ( $ binary ) { $ gray = \" \" ;"}
{"text":"MSB of gray code is same as binary code","code":"$ gray . = $ binary [ 0 ] ;"}
{"text":"Compute remaining bits , next bit is computed by doing XOR of previous and current in Binary","code":"for ( $ i = 1 ; $ i < strlen ( $ binary ) ; $ i ++ ) {"}
{"text":"Concatenate XOR of previous bit with current bit","code":"$ gray . = xor_c ( $ binary [ $ i - 1 ] , $ binary [ $ i ] ) ; } return $ gray ; }"}
{"text":"function to convert gray code string to binary string","code":"function graytoBinary ( $ gray ) { $ binary = \" \" ;"}
{"text":"MSB of binary code is same as gray code","code":"$ binary . = $ gray [ 0 ] ;"}
{"text":"Compute remaining bits","code":"for ( $ i = 1 ; $ i < strlen ( $ gray ) ; $ i ++ ) {"}
{"text":"If current bit is 0 , concatenate previous bit","code":"if ( $ gray [ $ i ] == '0' ) $ binary . = $ binary [ $ i - 1 ] ;"}
{"text":"Else , concatenate invert of previous bit","code":"else $ binary . = flip ( $ binary [ $ i - 1 ] ) ; } return $ binary ; }"}
{"text":"Driver Code","code":"$ binary = \"01001\" ; print ( \" Gray \u2581 code \u2581 of \u2581 \" . $ binary . \" \u2581 is \u2581 \" . binarytoGray ( $ binary ) . \" STRNEWLINE \" ) ; $ gray = \"01101\" ; print ( \" Binary \u2581 code \u2581 of \u2581 \" . $ gray . \" \u2581 is \u2581 \" . graytoBinary ( $ gray ) ) ; ? >"}
{"text":"Recursive function for finding sum of series calculated - number of terms till which sum of terms has been calculated current - number of terms for which sum has to be calculated N - Number of terms in the function to be calculated","code":"< ? php function seriesSum ( $ calculated , $ current , $ N ) { $ i ; $ cur = 1 ;"}
{"text":"checking termination condition","code":"if ( $ current == $ N + 1 ) return 0 ;"}
{"text":"product of terms till current","code":"for ( $ i = $ calculated ; $ i < $ calculated + $ current ; $ i ++ ) $ cur *= $ i ;"}
{"text":"recursive call for adding terms next in the series","code":"return $ cur + seriesSum ( $ i , $ current + 1 , $ N ) ; }"}
{"text":"input number of terms in the series","code":"$ N = 5 ;"}
{"text":"invoking the function to calculate the sum","code":"echo ( seriesSum ( 1 , 1 , $ N ) ) ; ? >"}
{"text":"Returns value of n ! % p","code":"< ? php function modFact ( $ n , $ p ) { if ( $ n >= $ p ) return 0 ; $ result = 1 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ result = ( $ result * $ i ) % $ p ; return $ result ; }"}
{"text":"Driver Code","code":"$ n = 25 ; $ p = 29 ; echo modFact ( $ n , $ p ) ; ? >"}
{"text":"Returns modulo inverse of a with respect to m using extended Euclid Algorithm . Refer below post for details : https : www . geeksforgeeks . org \/ multiplicative - inverse - under - modulo - m \/","code":"< ? php function inv ( $ a , $ m ) { $ m0 = $ m ; $ x0 = 0 ; $ x1 = 1 ; if ( $ m == 1 ) return 0 ;"}
{"text":"Apply extended Euclid Algorithm","code":"while ( $ a > 1 ) {"}
{"text":"q is quotient","code":"$ q = ( int ) ( $ a \/ $ m ) ; $ t = $ m ;"}
{"text":"m is remainder now , process same as euclid 's algo","code":"$ m = $ a % $ m ; $ a = $ t ; $ t = $ x0 ; $ x0 = $ x1 - $ q * $ x0 ; $ x1 = $ t ; }"}
{"text":"Make x1 positive","code":"if ( $ x1 < 0 ) $ x1 += $ m0 ; return $ x1 ; }"}
{"text":"k is size of num [ ] and rem [ ] . Returns the smallest number x such that : x % num [ 0 ] = rem [ 0 ] , x % num [ 1 ] = rem [ 1 ] , ... ... ... ... ... ... x % num [ k - 2 ] = rem [ k - 1 ] Assumption : Numbers in num [ ] are pairwise coprime ( gcd forevery pair is 1 )","code":"function findMinX ( $ num , $ rem , $ k ) {"}
{"text":"Compute product of all numbers","code":"$ prod = 1 ; for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ prod *= $ num [ $ i ] ;"}
{"text":"Initialize result","code":"$ result = 0 ;"}
{"text":"Apply above formula","code":"for ( $ i = 0 ; $ i < $ k ; $ i ++ ) { $ pp = ( int ) $ prod \/ $ num [ $ i ] ; $ result += $ rem [ $ i ] * inv ( $ pp , $ num [ $ i ] ) * $ pp ; } return $ result % $ prod ; }"}
{"text":"Driver Code","code":"$ num = array ( 3 , 4 , 5 ) ; $ rem = array ( 2 , 3 , 1 ) ; $ k = sizeof ( $ num ) ; echo \" x \u2581 is \u2581 \" . findMinX ( $ num , $ rem , $ k ) ; ? >"}
{"text":"k is size of num [ ] and rem [ ] . Returns the smallest number x such that : x % num [ 0 ] = rem [ 0 ] , x % num [ 1 ] = rem [ 1 ] , ... ... ... ... ... ... x % num [ k - 2 ] = rem [ k - 1 ] Assumption : Numbers in num [ ] are pairwise coprime ( gcd forevery pair is 1 )","code":"< ? php function findMinX ( $ num , $ rem , $ k ) {"}
{"text":"As per the Chinise remainder theorem , this loop will always break .","code":"while ( true ) {"}
{"text":"Check if remainder of x % num [ j ] is rem [ j ] or not ( for all j from 0 to k - 1 )","code":"$ j ; for ( $ j = 0 ; $ j < $ k ; $ j ++ ) if ( $ x % $ num [ $ j ] != $ rem [ $ j ] ) break ;"}
{"text":"If all remainders matched , we found x","code":"if ( $ j == $ k ) return $ x ;"}
{"text":"Else try next number","code":"$ x ++ ; } return $ x ; }"}
{"text":"Driver Code","code":"$ num = array ( 3 , 4 , 5 ) ; $ rem = array ( 2 , 3 , 1 ) ; $ k = sizeof ( $ num ) ; echo \" x \u2581 is \u2581 \" , findMinX ( $ num , $ rem , $ k ) ; ? >"}
{"text":"Returns nCr % p . In this Lucas Theorem based program , this function is only called for n < p and r < p .","code":"< ? php function nCrModpDP ( $ n , $ r , $ p ) {"}
{"text":"The array C is going to store last row of pascal triangle at the end . And last entry of last row is nCr","code":"$ C = array_fill ( 0 , $ n + 1 , false ) ;"}
{"text":"Top row of Pascal Triangle","code":"$ C [ 0 ] = 1 ;"}
{"text":"One by constructs remaining rows of Pascal Triangle from top to bottom","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) {"}
{"text":"Fill entries of current row using previous row values","code":"for ( $ j = min ( $ i , $ r ) ; $ j > 0 ; $ j -- ) $ C [ $ j ] = ( $ C [ $ j ] + $ C [ $ j - 1 ] ) % $ p ; } return $ C [ $ r ] ; }"}
{"text":"Lucas Theorem based function that returns nCr % p . This function works like decimal to binary conversion recursive function . First we compute last digits of n and r in base p , then recur for remaining digits","code":"function nCrModpLucas ( $ n , $ r , $ p ) {"}
{"text":"Base case","code":"if ( $ r == 0 ) return 1 ;"}
{"text":"Compute last digits of n and r in base p","code":"$ ni = $ n % $ p ; $ ri = $ r % $ p ;"}
{"text":"Compute result for last digits computed above , and for remaining digits . Multiply the two results and compute the result of multiplication in modulo p .","code":"return ( nCrModpLucas ( $ n \/ $ p ,"}
{"text":"$r \/ $p , $p ) * Last digits of n and r nCrModpDP ( $ni , $ri , $p ) ) % $p ; Remaining digits","code":"}"}
{"text":"Driver Code","code":"$ n = 1000 ; $ r = 900 ; $ p = 13 ; echo \" Value \u2581 of \u2581 nCr \u2581 % \u2581 p \u2581 is \u2581 \" , nCrModpLucas ( $ n , $ r , $ p ) ; ? >"}
{"text":"To check whether n is a good number and doesn ' t \u2581 contain \u2581 digit \u2581 ' d '.","code":"< ? php function isValid ( $ n , $ d ) {"}
{"text":"Get last digit and initialize sum from right side","code":"$ digit = $ n % 10 ; $ sum = $ digit ;"}
{"text":"If last digit is d , return","code":"if ( $ digit == $ d ) return false ;"}
{"text":"Traverse remaining digits","code":"$ n = ( int ) ( $ n \/ 10 ) ; while ( $ n ) {"}
{"text":"Current digit","code":"$ digit = $ n % 10 ;"}
{"text":"If digit is d or digit is less than or equal to sum of digits on right side","code":"if ( $ digit == $ d $ digit <= $ sum ) return false ;"}
{"text":"Update sum and n","code":"else { $ sum += $ digit ; $ n = ( int ) ( $ n \/ 10 ) ; } } return 1 ; }"}
{"text":"Print Good numbers in range [ L , R ]","code":"function printGoodNumbers ( $ L , $ R , $ d ) {"}
{"text":"Traverse all numbers in given range","code":"for ( $ i = $ L ; $ i <= $ R ; $ i ++ ) {"}
{"text":"If current numbers is good , print it .","code":"if ( isValid ( $ i , $ d ) ) echo $ i . \" \" ; } }"}
{"text":"Driver Code","code":"$ L = 410 ; $ R = 520 ; $ d = 3 ;"}
{"text":"Print good numbers in [ L , R ]","code":"printGoodNumbers ( $ L , $ R , $ d ) ; ? >"}
{"text":"Returns the greatest Fibonacci Number smaller than or equal to n .","code":"< ? php function nearestSmallerEqFib ( $ n ) {"}
{"text":"Corner cases","code":"if ( $ n == 0 $ n == 1 ) return $ n ;"}
{"text":"Find the greatest Fibonacci Number smaller than n .","code":"$ f1 = 0 ; $ f2 = 1 ; $ f3 = 1 ; while ( $ f3 <= $ n ) { $ f1 = $ f2 ; $ f2 = $ f3 ; $ f3 = $ f1 + $ f2 ; } return $ f2 ; }"}
{"text":"Prints Fibonacci Representation of n using greedy algorithm","code":"function printFibRepresntation ( $ n ) { while ( $ n > 0 ) {"}
{"text":"Find the greates Fibonacci Number smaller than or equal to n","code":"$ f = nearestSmallerEqFib ( $ n ) ;"}
{"text":"Print the found fibonacci number","code":"echo $ f , \" \" ;"}
{"text":"Reduce n","code":"$ n = $ n - $ f ; } }"}
{"text":"Driver Code","code":"$ n = 30 ; echo \" Non - neighbouring \u2581 Fibonacci \u2581 Representation \u2581 of \u2581 \" , $ n , \" \u2581 is \u2581 STRNEWLINE \" ; printFibRepresntation ( $ n ) ; ? >"}
{"text":"A Dynamic Programming based solution to count number of ways to represent n as sum of four numbers","code":"< ? php $ dp = array_fill ( 0 , 501 , array_fill ( 0 , 501 , array_fill ( 0 , 5 , -1 ) ) ) ;"}
{"text":"\" parts \" is number of parts left , n is the value left \" nextPart \" is starting point from where we start trying for next part .","code":"function countWaysUtil ( $ n , $ parts , $ nextPart ) { global $ dp ;"}
{"text":"Base cases","code":"if ( $ parts == 0 && $ n == 0 ) return 1 ; if ( $ n <= 0 $ parts <= 0 ) return 0 ;"}
{"text":"If this subproblem is already solved","code":"if ( $ dp [ $ n ] [ $ nextPart ] [ $ parts ] != -1 ) return $ dp [ $ n ] [ $ nextPart ] [ $ parts ] ;"}
{"text":"Count number of ways for remaining number n - i remaining parts \" parts - 1\" , and for all part varying from ' nextPart ' to ' n '","code":"for ( $ i = $ nextPart ; $ i <= $ n ; $ i ++ ) $ ans += countWaysUtil ( $ n - $ i , $ parts - 1 , $ i ) ;"}
{"text":"Store computed answer in table and return result","code":"return ( $ dp [ $ n ] [ $ nextPart ] [ $ parts ] = $ ans ) ; }"}
{"text":"This function mainly initializes dp table and calls countWaysUtil ( )","code":"function countWays ( $ n ) { return countWaysUtil ( $ n , 4 , 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 8 ; echo countWays ( $ n ) ; ? >"}
{"text":"PHP program to find the smallest twin in given range","code":"< ? php function printTwins ( $ low , $ high ) {"}
{"text":"Create a boolean array \" prime [ 0 . . high ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"$ prime = array_fill ( 0 , $ high + 1 , true ) ; $ twin = false ; $ prime [ 0 ] = $ prime [ 1 ] = false ;"}
{"text":"Look for the smallest twin","code":"for ( $ p = 2 ; $ p <= floor ( sqrt ( $ high ) ) + 1 ; $ p ++ ) {"}
{"text":"If p is not marked , then it is a prime","code":"if ( $ prime [ $ p ] ) {"}
{"text":"Update all multiples of p","code":"for ( $ i = $ p * 2 ; $ i <= $ high ; $ i += $ p ) $ prime [ $ i ] = false ; } }"}
{"text":"Now print the smallest twin in range","code":"for ( $ i = $ low ; $ i <= $ high ; $ i ++ ) { if ( $ prime [ $ i ] && $ prime [ $ i + 2 ] ) { print ( \" Smallest \u2581 twins \u2581 in \u2581 given \u2581 range : \u2581 ( $ i , \u2581 \" . ( $ i + 2 ) . \" ) \" ) ; $ twin = true ; break ; } } if ( $ twin == false ) print ( \" No \u2581 such \u2581 pair \u2581 exists STRNEWLINE \" ) ; }"}
{"text":"Driver Code","code":"printTwins ( 10 , 100 ) ; ? >"}
{"text":"PHP program to find next sparse number","code":"< ? php function nextSparse ( $ x ) {"}
{"text":"Find binary representation of x and store it in bin [ ] . bin [ 0 ] contains least significant bit ( LSB ) , next bit is in bin [ 1 ] , and so on .","code":"$ bin = array ( ) ; while ( $ x != 0 ) { array_push ( $ bin , $ x & 1 ) ; $ x >>= 1 ; }"}
{"text":"There my be extra bit in result , so add one extra bit","code":"array_push ( $ bin , 0 ) ;"}
{"text":"The position till which all bits are finalized","code":"$ last_final = 0 ;"}
{"text":"Start from second bit ( next to LSB )","code":"for ( $ i = 1 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"If current bit and its previous bit are 1 , but next bit is not 1.","code":"if ( $ bin [ $ i ] == 1 && $ bin [ $ i - 1 ] == 1 && $ bin [ $ i + 1 ] != 1 ) {"}
{"text":"Make the next bit 1","code":"$ bin [ $ i + 1 ] = 1 ;"}
{"text":"Make all bits before current bit as 0 to make sure that we get the smallest next number","code":"for ( $ j = $ i ; $ j >= $ last_final ; $ j -- ) $ bin [ $ j ] = 0 ;"}
{"text":"Store position of the bit set so that this bit and bits before it are not changed next time .","code":"$ last_final = $ i + 1 ; } }"}
{"text":"Find decimal equivalent of modified bin [ ]","code":"$ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ ans += $ bin [ $ i ] * ( 1 << $ i ) ; return $ ans ; }"}
{"text":"Driver Code","code":"$ x = 38 ; echo \" Next \u2581 Sparse \u2581 Number \u2581 is \u2581 \" . nextSparse ( $ x ) ; ? >"}
{"text":"PHP program to compute sum of pairwise bit differences","code":"< ? php function sumBitDifferences ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ ans = 0 ;"}
{"text":"traverse over all bits","code":"for ( $ i = 0 ; $ i < 32 ; $ i ++ ) {"}
{"text":"count number of elements with i 'th bit set","code":"$ count = 0 ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( ( $ arr [ $ j ] & ( 1 << $ i ) ) ) $ count ++ ;"}
{"text":"Add \" count \u2581 * \u2581 ( n \u2581 - \u2581 count ) \u2581 * \u2581 2\" to the answer","code":"$ ans += ( $ count * ( $ n - $ count ) * 2 ) ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 3 , 5 ) ; $ n = sizeof ( $ arr ) ; echo sumBitDifferences ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"function to print array arr [ 0. . n - 1 ]","code":"< ? php function printArr ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; echo \" \u2581 STRNEWLINE \" ; }"}
{"text":"Recursive Function to generate all non - increasing sequences with sum x arr [ ] -- > Elements of current sequence curr_sum -- > Current Sum curr_idx -- > Current index in arr [ ]","code":"function generateUtil ( $ x , $ arr , $ curr_sum , $ curr_idx ) {"}
{"text":"If current sum is equal to x , then we found a sequence","code":"if ( $ curr_sum == $ x ) { printArr ( $ arr , $ curr_idx ) ; return ; }"}
{"text":"Try placing all numbers from 1 to x - curr_sum at current index","code":"$ num = 1 ;"}
{"text":"The placed number must also be smaller than previously placed numbers and it may be equal to the previous stored value , i . e . , arr [ curr_idx - 1 ] if there exists a previous number","code":"while ( $ num <= $ x - $ curr_sum and ( $ curr_idx == 0 or $ num <= $ arr [ $ curr_idx - 1 ] ) ) {"}
{"text":"Place number at curr_idx","code":"$ arr [ $ curr_idx ] = $ num ;"}
{"text":"Recur","code":"generateUtil ( $ x , $ arr , $ curr_sum + $ num , $ curr_idx + 1 ) ;"}
{"text":"Try next number","code":"$ num ++ ; } }"}
{"text":"A wrapper over generateUtil ( )","code":"function generate ( $ x ) {"}
{"text":"Array to store sequences on by one","code":"$ arr = array ( ) ; generateUtil ( $ x , $ arr , 0 , 0 ) ; }"}
{"text":"Driver Code","code":"$ x = 5 ; generate ( $ x ) ; ? >"}
{"text":"Returns true if n is perfect","code":"< ? php function isPerfect ( $ n ) {"}
{"text":"To store sum of divisors","code":"$ sum = 1 ;"}
{"text":"Find all divisors and add them","code":"for ( $ i = 2 ; $ i * $ i <= $ n ; $ i ++ ) { if ( $ n % $ i == 0 ) { if ( $ i * $ i != $ n ) $ sum = $ sum + $ i + ( int ) ( $ n \/ $ i ) ; else $ sum = $ sum + $ i ; } }"}
{"text":"If sum of divisors is equal to n , then n is a perfect number","code":"if ( $ sum == $ n && $ n != 1 ) return true ; return false ; }"}
{"text":"Driver Code","code":"echo \" Below \u2581 are \u2581 all \u2581 perfect \u2581 numbers \u2581 till \u2581 10000 STRNEWLINE \" ; for ( $ n = 2 ; $ n < 10000 ; $ n ++ ) if ( isPerfect ( $ n ) ) echo \" $ n \u2581 is \u2581 a \u2581 perfect \u2581 number STRNEWLINE \" ; ? >"}
{"text":"Returns true if ' num ' can be represented usind ' dig ' digits in ' base '","code":"< ? php function checkUtil ( $ num , $ dig , $ base ) {"}
{"text":"Base case","code":"if ( $ dig == 1 && $ num < $ base ) return true ;"}
{"text":"If there are more than 1 digits left and number is more than base , then remove last digit by doing num \/ base , reduce the number of digits and recur","code":"if ( $ dig > 1 && $ num >= $ base ) return checkUtil ( $ num \/ $ base , -- $ dig , $ base ) ; return false ; }"}
{"text":"return true of num can be represented in ' dig ' digits in any base from 2 to 32","code":"function check ( $ num , $ dig ) {"}
{"text":"Check for all bases one by one","code":"for ( $ base = 2 ; $ base <= 32 ; $ base ++ ) if ( checkUtil ( $ num , $ dig , $ base ) ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ num = 8 ; $ dig = 3 ; if ( check ( $ num , $ dig ) == true ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to compute num ( mod a )","code":"< ? php function mod ( $ num , $ a ) {"}
{"text":"Initialize result","code":"$ res = 0 ;"}
{"text":"One by one process all digits of ' num '","code":"for ( $ i = 0 ; $ i < $ r = strlen ( $ num ) ; $ i ++ ) $ res = ( $ res * 10 + $ num [ $ i ] - '0' ) % $ a ; return $ res ; }"}
{"text":"Driver Code","code":"$ num = \"12316767678678\" ; echo mod ( $ num , 10 ) ; ? >"}
{"text":"A naive method to find modulor multiplicative inverse of ' a ' under modulo ' m '","code":"< ? php function modInverse ( $ a , $ m ) { for ( $ x = 1 ; $ x < $ m ; $ x ++ ) if ( ( ( $ a % $ m ) * ( $ x % $ m ) ) % $ m == 1 ) return $ x ; }"}
{"text":"Driver Code","code":"$ a = 3 ; $ m = 11 ;"}
{"text":"Function call","code":"echo modInverse ( $ a , $ m ) ; a . . . >"}
{"text":"Returns modulo inverse of a with respect to m using extended Euclid Algorithm Assumption : a and m are coprimes , i . e . , gcd ( a , m ) = 1","code":"< ? php function modInverse ( $ a , $ m ) { $ m0 = $ m ; $ y = 0 ; $ x = 1 ; if ( $ m == 1 ) return 0 ; while ( $ a > 1 ) {"}
{"text":"q is quotient","code":"$ q = ( int ) ( $ a \/ $ m ) ; $ t = $ m ;"}
{"text":"m is remainder now , process same as Euclid 's algo","code":"$ m = $ a % $ m ; $ a = $ t ; $ t = $ y ;"}
{"text":"Update y and x","code":"$ y = $ x - $ q * $ y ; $ x = $ t ; }"}
{"text":"Make x positive","code":"if ( $ x < 0 ) $ x += $ m0 ; return $ x ; }"}
{"text":"Driver Code","code":"$ a = 3 ; $ m = 11 ;"}
{"text":"Function call","code":"echo \" Modular \u2581 multiplicative \u2581 inverse \u2581 is STRNEWLINE \" , modInverse ( $ a , $ m ) ; a . . . >"}
{"text":"Function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"A simple method to evaluate Euler Totient Function","code":"function phi ( $ n ) { $ result = 1 ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) if ( gcd ( $ i , $ n ) == 1 ) $ result ++ ; return $ result ; }"}
{"text":"Driver Code","code":"for ( $ n = 1 ; $ n <= 10 ; $ n ++ ) echo \" phi ( \" \u2581 . $ n . \u2581 \" ) = \" \u2581 . \u2581 phi ( $ n ) . \" \" I >"}
{"text":"PHP program to calculate Euler ' s \u2581 Totient \u2581 Function \u2581 using \u2581 Euler ' s product formula","code":"< ? php function phi ( $ n ) {"}
{"text":"Initialize result as n","code":"$ result = $ n ;"}
{"text":"Consider all prime factors of n and for every prime factor p , multiply result with ( 1 - 1 \/ p )","code":"for ( $ p = 2 ; $ p * $ p <= $ n ; ++ $ p ) {"}
{"text":"Check if p is a prime factor .","code":"if ( $ n % $ p == 0 ) {"}
{"text":"If yes , then update n and result","code":"while ( $ n % $ p == 0 ) $ n \/= $ p ; $ result *= ( 1.0 - ( 1.0 \/ $ p ) ) ; } }"}
{"text":"If n has a prime factor greater than sqrt ( n ) ( There can be at - most one such prime factor )","code":"if ( $ n > 1 ) $ result *= ( 1.0 - ( 1.0 \/ $ n ) ) ; return intval ( $ result ) ; }"}
{"text":"Driver Code","code":"for ( $ n = 1 ; $ n <= 10 ; $ n ++ ) echo \" phi ( \" \u2581 . $ n . \u2581 \" ) = \" \u2581 . \u2581 phi ( $ n ) . \" \" I >"}
{"text":"Utility function to find","code":"< ? php function factorial ( $ n ) { $ res = 1 ; for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res *= $ i ; return $ res ; }"}
{"text":"A Simple Function to return value of 1 \/ 1 ! + 1 \/ 2 ! + . . + 1 \/ n !","code":"function sum ( $ n ) { $ sum = 0 ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ sum += 1.0 \/ factorial ( $ i ) ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 5 ; echo ( sum ( $ n ) ) ; ? >"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"< ? php function binomialCoeff ( $ n , $ k ) { $ res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( $ k > $ n - $ k ) $ k = $ n - $ k ;"}
{"text":"Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( $ i = 0 ; $ i < $ k ; ++ $ i ) { $ res *= ( $ n - $ i ) ; $ res \/= ( $ i + 1 ) ; } return $ res ; }"}
{"text":"A Binomial coefficient based function to find nth catalan number in O ( n ) time","code":"function catalan ( $ n ) {"}
{"text":"Calculate value of 2 nCn","code":"$ c = binomialCoeff ( 2 * $ n , $ n ) ;"}
{"text":"return 2 nCn \/ ( n + 1 )","code":"return $ c \/ ( $ n + 1 ) ; }"}
{"text":"Function to find possible ways to put balanced parenthesis in an expression of length n","code":"function findWays ( $ n ) {"}
{"text":"If n is odd , not possible to create any valid parentheses","code":"if ( $ n & 1 ) return 0 ;"}
{"text":"Otherwise return n \/ 2 'th  Catalan Number","code":"return catalan ( $ n \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ n = 6 ; echo \" Total \u2581 possible \u2581 expressions \u2581 of \u2581 length \u2581 \" , $ n , \" \u2581 is \u2581 \" , findWays ( 6 ) ; ? >"}
{"text":"A utility function to check if a given character is operand","code":"< ? php function isOperand ( $ c ) { return ( $ c >= '0' && $ c <= '9' ) ; }"}
{"text":"utility function to find value of and operand","code":"function value ( $ c ) { return ( $ c - '0' ) ; }"}
{"text":"This function evaluates simple expressions . It returns - 1 if the given expression is invalid .","code":"function evaluate ( $ exp ) { $ len = strlen ( $ exp ) ;"}
{"text":"Base Case : Given expression is empty","code":"if ( $ len == 0 ) return -1 ;"}
{"text":"The first character must be an operand , find its value","code":"$ res = ( int ) ( value ( $ exp [ 0 ] ) ) ;"}
{"text":"Traverse the remaining characters in pairs","code":"for ( $ i = 1 ; $ i < $ len ; $ i += 2 ) {"}
{"text":"The next character must be an operator , and next to next an operand","code":"$ opr = $ exp [ $ i ] ; $ opd = $ exp [ $ i + 1 ] ;"}
{"text":"If next to next character is not an operand","code":"if ( ! isOperand ( $ opd ) ) return -1 ;"}
{"text":"Update result according to the operator","code":"if ( $ opr == ' + ' ) $ res += value ( $ opd ) ; else if ( $ opr == ' - ' ) $ res -= ( int ) ( value ( $ opd ) ) ; else if ( $ opr == ' * ' ) $ res *= ( int ) ( value ( $ opd ) ) ; else if ( $ opr == ' \/ ' ) $ res \/= ( int ) ( value ( $ opd ) ) ;"}
{"text":"If not a valid operator","code":"else return -1 ; } return $ res ; }"}
{"text":"Driver Code","code":"$ expr1 = \"1 + 2*5 + 3\" ; $ res = evaluate ( $ expr1 ) ; ( $ res == -1 ) ? print ( $ expr1 . \" \u2581 is \u2581 Invalid STRNEWLINE \" ) : print ( \" Value \u2581 of \u2581 \" . $ expr1 . \" \u2581 is \u2581 \" . $ res . \" STRNEWLINE \" ) ; $ expr2 = \"1 + 2*3\" ; $ res = evaluate ( $ expr2 ) ; ( $ res == -1 ) ? print ( $ expr2 . \" \u2581 is \u2581 Invalid STRNEWLINE \" ) : print ( \" Value \u2581 of \u2581 \" . $ expr2 . \" \u2581 is \u2581 \" . $ res . \" STRNEWLINE \" ) ; $ expr3 = \"4-2 + 6*3\" ; $ res = evaluate ( $ expr3 ) ; ( $ res == -1 ) ? print ( $ expr3 . \" \u2581 is \u2581 Invalid STRNEWLINE \" ) : print ( \" Value \u2581 of \u2581 \" . $ expr3 . \" \u2581 is \u2581 \" . $ res . \" STRNEWLINE \" ) ; $ expr4 = \"1 + + 2\" ; $ res = evaluate ( $ expr4 ) ; ( $ res == -1 ) ? print ( $ expr4 . \" \u2581 is \u2581 Invalid STRNEWLINE \" ) : print ( \" Value \u2581 of \u2581 \" . $ expr4 . \" \u2581 is \u2581 \" . $ res . \" STRNEWLINE \" ) ; ? >"}
{"text":"Function to print first n Fibonacci Numbers","code":"< ? php function printFibonacciNumbers ( $ n ) { $ f1 = 0 ; $ f2 = 1 ; $ i ; if ( $ n < 1 ) return ; echo ( $ f1 ) ; echo ( \" \u2581 \" ) ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { echo ( $ f2 ) ; echo ( \" \u2581 \" ) ; $ next = $ f1 + $ f2 ; $ f1 = $ f2 ; $ f2 = $ next ; } }"}
{"text":"Driver Code","code":"printFibonacciNumbers ( 7 ) ; ? >"}
{"text":"Recursive function to return gcd of a and b","code":"< ? php function gcd ( $ a , $ b ) { if ( $ a == 0 ) return $ b ; return gcd ( $ b % $ a , $ a ) ; }"}
{"text":"Function to return LCM of two numbers","code":"function lcm ( $ a , $ b ) { return ( $ a \/ gcd ( $ a , $ b ) ) * $ b ; }"}
{"text":"Driver Code","code":"$ a = 15 ; $ b = 20 ; echo \" LCM \u2581 of \u2581 \" , $ a , \" \u2581 and \u2581 \" , $ b , \" \u2581 is \u2581 \" , lcm ( $ a , $ b ) ; ? >"}
{"text":"A function that prints given number in words","code":"< ? php function convert_to_words ( $ num ) {"}
{"text":"Get number of digits in given number","code":"$ len = strlen ( $ num ) ;"}
{"text":"Base cases","code":"if ( $ len == 0 ) { echo \" empty \u2581 string STRNEWLINE \" ; return ; } if ( $ len > 4 ) { echo \" Length \u2581 more \u2581 than \u2581 4 \u2581 \" . \" is \u2581 not \u2581 supported STRNEWLINE \" ; return ; }"}
{"text":"The first string is not used , it is to make array indexing simple","code":"$ single_digits = array ( \" zero \" , \" one \" , \" two \" , \" three \" , \" four \" , \" five \" , \" six \" , \" seven \" , \" eight \" , \" nine \" ) ;"}
{"text":"The first string is not used , it is to make array indexing simple","code":"$ two_digits = array ( \" \" , \" ten \" , \" eleven \" , \" twelve \" , \" thirteen \" , \" fourteen \" , \" fifteen \" , \" sixteen \" , \" seventeen \" , \" eighteen \" , \" nineteen \" ) ;"}
{"text":"The first two string are not used , they are to make array indexing simple","code":"$ tens_multiple = array ( \" \" , \" \" , \" twenty \" , \" thirty \" , \" forty \" , \" fifty \" , \" sixty \" , \" seventy \" , \" eighty \" , \" ninety \" ) ; $ tens_power = array ( \" hundred \" , \" thousand \" ) ;"}
{"text":"Used for debugging purpose only","code":"echo $ num . \" : \u2581 \" ;"}
{"text":"For single digit number","code":"if ( $ len == 1 ) { echo $ single_digits [ $ num [ 0 ] - '0' ] . \" \u2581 STRNEWLINE \" ; return ; }"}
{"text":"Iterate while num is not ' \\0'","code":"$ x = 0 ; while ( $ x < strlen ( $ num ) ) {"}
{"text":"Code path for first 2 digits","code":"if ( $ len >= 3 ) { if ( $ num [ $ x ] - '0' != 0 ) { echo $ single_digits [ $ num [ $ x ] - '0' ] . \" \" ; echo $ tens_power [ $ len - 3 ] . \" \" ;"}
{"text":"here len can be 3 or 4","code":"} -- $ len ; }"}
{"text":"Code path for last 2 digits","code":"else {"}
{"text":"Need to explicitly handle 10 - 19. Sum of the two digits is used as index of \" two _ digits \" array of strings","code":"if ( $ num [ $ x ] - '0' == 1 ) { $ sum = $ num [ $ x ] - '0' + $ num [ $ x ] - '0' ; echo $ two_digits [ $ sum ] . \" \u2581 STRNEWLINE \" ; return ; }"}
{"text":"Need to explicitely handle 20","code":"else if ( $ num [ $ x ] - '0' == 2 && $ num [ $ x + 1 ] - '0' == 0 ) { echo \" twenty STRNEWLINE \" ; return ; }"}
{"text":"Rest of the two digit numbers i . e . , 21 to 99","code":"else { $ i = $ num [ $ x ] - '0' ; if ( $ i > 0 ) echo $ tens_multiple [ $ i ] . \" \u2581 \" ; else echo \" \" ; ++ $ x ; if ( $ num [ $ x ] - '0' != 0 ) echo $ single_digits [ $ num [ $ x ] - '0' ] . \" \u2581 STRNEWLINE \" ; } } ++ $ x ; } }"}
{"text":"Driver Code","code":"convert_to_words ( \"9923\" ) ; convert_to_words ( \"523\" ) ; convert_to_words ( \"89\" ) ; convert_to_words ( \"8\" ) ; ? >"}
{"text":"Assuming that integre takes 4 bytes , there can be maximum 10 digits in a integer","code":"< ? php $ MAX = 11 ; function isMultipleof5 ( $ n ) { global $ MAX ; $ str = ( string ) $ n ; $ len = strlen ( $ str ) ;"}
{"text":"Check the last character of string","code":"if ( $ str [ $ len - 1 ] == '5' $ str [ $ len - 1 ] == '0' ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ n = 19 ; if ( isMultipleof5 ( $ n ) == true ) echo \" $ n \u2581 is \u2581 multiple \u2581 of \u2581 5\" ; else echo \" $ n \u2581 is \u2581 not \u2581 a \u2581 multiple \u2581 of \u2581 5\" ; ? >"}
{"text":"Returns value of \" arr [ 0 ] \u2581 | \u2581 arr [ 1 ] \u2581 + \u2581 arr [ 0 ] \u2581 | \u2581 arr [ 2 ] \u2581 + \u2581 . . . \u2581 arr [ i ] \u2581 | \u2581 arr [ j ] \u2581 + \u2581 . . . . . \u2581 arr [ n - 2 ] \u2581 | \u2581 arr [ n - 1 ] \"","code":"< ? php function pairORSum ( $ arr , $ n ) {"}
{"text":"Initialize result","code":"$ ans = 0 ;"}
{"text":"Consider all pairs ( arr [ i ] , arr [ j ) such that i < j","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) $ ans += $ arr [ $ i ] | $ arr [ $ j ] ; return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 3 , 4 ) ; $ n = sizeof ( $ arr ) ; echo pairORSum ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to return ( 15 * N ) without using ' * ' or ' \/ ' operator","code":"< ? php function multiplyByFifteen ( $ n ) {"}
{"text":"prod = 16 * n","code":"$ prod = ( $ n << 4 ) ;"}
{"text":"( ( 16 * n ) - n ) = 15 * n","code":"$ prod = $ prod - $ n ; return $ prod ; }"}
{"text":"Driver code","code":"$ n = 7 ; echo multiplyByFifteen ( $ n ) ; ? >"}
{"text":"PHP program for the above approach","code":"< ? php function minAND ( $ arr , $ n ) { $ s = $ arr [ 0 ] ;"}
{"text":"Find AND of whole array","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { $ s = $ s & $ arr [ $ i ] ; }"}
{"text":"Print the answer","code":"print ( $ s . \" \" ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 ) ; $ n = count ( $ arr ) ; minAND ( $ arr , $ n ) ; ? >"}
{"text":"Function to check if it is possible or not","code":"< ? php function check ( $ a , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) if ( $ a [ $ i ] ) return true ; return false ; }"}
{"text":"Driver code","code":"$ a = array ( 0 , 1 , 0 , 1 ) ; $ n = sizeof ( $ a ) ; if ( check ( $ a , $ n ) ) echo \" YES STRNEWLINE \" ; else echo \" NO STRNEWLINE \" ; ? >"}
{"text":"Utility function to print the contents of the array","code":"< ? php function printArray ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo ( $ arr [ $ i ] . \" \u2581 \" ) ; }"}
{"text":"Function to find the required array","code":"function findArray ( $ q , $ n ) { $ ans ; $ arr = array ( $ n ) ; for ( $ k = 0 , $ j = 0 ; $ j < $ n \/ 4 ; $ j ++ ) { $ ans = $ q [ $ k ] ^ $ q [ $ k + 3 ] ; $ arr [ $ k + 1 ] = $ q [ $ k + 1 ] ^ $ ans ; $ arr [ $ k + 2 ] = $ q [ $ k + 2 ] ^ $ ans ; $ arr [ $ k ] = $ q [ $ k ] ^ ( ( $ arr [ $ k + 1 ] ) ^ ( $ arr [ $ k + 2 ] ) ) ; $ arr [ $ k + 3 ] = $ q [ $ k + 3 ] ^ ( $ arr [ $ k + 1 ] ^ $ arr [ $ k + 2 ] ) ; $ k += 4 ; }"}
{"text":"Print the array","code":"printArray ( $ arr , $ n ) ; }"}
{"text":"Driver code","code":"{ $ q = array ( 4 , 1 , 7 , 0 ) ; $ n = sizeof ( $ q ) ; findArray ( $ q , $ n ) ; }"}
{"text":"function to convert decimal to binary","code":"< ? php function isEqualBlock ( $ n ) {"}
{"text":"Count same bits in last block","code":"$ first_bit = $ n % 2 ; $ first_count = 1 ; $ n = ( int ) ( $ n \/ 2 ) ; while ( $ n % 2 == $ first_bit && $ n > 0 ) { $ n = ( int ) ( $ n \/ 2 ) ; $ first_count ++ ; }"}
{"text":"If n is 0 or it has all 1 s , then it is not considered to have equal number of 0 s and 1 s in blocks .","code":"if ( $ n == 0 ) return false ;"}
{"text":"Count same bits in all remaining blocks .","code":"while ( $ n > 0 ) { $ first_bit = $ n % 2 ; $ curr_count = 1 ; $ n = ( int ) ( $ n \/ 2 ) ; while ( $ n % 2 == $ first_bit ) { $ n = ( int ) ( $ n \/ 2 ) ; $ curr_count ++ ; } if ( $ curr_count != $ first_count ) return false ; } return true ; }"}
{"text":"Driver Code","code":"$ n = 51 ; if ( isEqualBlock ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to print the first and last 3 bits equivalent decimal number","code":"< ? php function binToDecimal3 ( $ n ) {"}
{"text":"Number formed from last three bits","code":"$ last_3 = ( ( $ n & 4 ) + ( $ n & 2 ) + ( $ n & 1 ) ) ;"}
{"text":"Let us get first three bits in n","code":"$ n = $ n >> 3 ; while ( $ n > 7 ) $ n = $ n >> 1 ;"}
{"text":"Number formed from first three bits","code":"$ first_3 = ( ( $ n & 4 ) + ( $ n & 2 ) + ( $ n & 1 ) ) ;"}
{"text":"Printing result","code":"echo ( $ first_3 ) ; echo ( \" \u2581 \" ) ; echo ( $ last_3 ) ; }"}
{"text":"Driver code","code":"$ n = 86 ; binToDecimal3 ( $ n ) ; ? >"}
{"text":"Function that returns true if x is a power of 2","code":"< ? php function isPowerOfTwo ( $ x ) { if ( $ x == 0 ) return false ;"}
{"text":"If x & ( x - 1 ) = 0 then x is a power of 2","code":"if ( ! ( $ x & ( $ x - 1 ) ) ) return true ; else return false ; }"}
{"text":"Function to return the required count","code":"function countNum ( $ a , $ n ) { $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If a [ i ] or ( a [ i ] + 1 ) is a power of 2","code":"if ( isPowerOfTwo ( $ a [ $ i ] ) || isPowerOfTwo ( $ a [ $ i ] + 1 ) ) $ cnt ++ ; } return $ cnt ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 6 , 9 , 3 , 1 ) ; $ n = count ( $ arr ) ; echo countNum ( $ arr , $ n ) ; ? >"}
{"text":"Function that returns true if x has even parity","code":"< ? php function checkEvenParity ( $ x ) {"}
{"text":"We basically count set bits https : www . geeksforgeeks . org \/ count - set - bits - in - an - integer \/","code":"$ parity = 0 ; while ( $ x != 0 ) { $ x = ( $ x & ( $ x - 1 ) ) ; $ parity ++ ; } if ( $ parity % 2 == 0 ) return true ; else return false ; }"}
{"text":"Function to return the sum of the elements from an array which have even parity","code":"function sumlist ( $ a , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If a [ i ] has even parity","code":"if ( checkEvenParity ( $ a [ $ i ] ) ) $ sum += $ a [ $ i ] ; } return $ sum ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 4 , 3 , 5 , 9 ) ; $ n = sizeof ( $ arr ) ; echo sumlist ( $ arr , $ n ) ; ? >"}
{"text":"Function to count pairs with odd OR","code":"< ? php function findOddPair ( $ A , $ N ) { $ oddPair = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) {"}
{"text":"find OR operation check odd or odd","code":"if ( ( $ A [ $ i ] $ A [ $ j ] ) % 2 != 0 ) $ oddPair ++ ; } }"}
{"text":"return count of odd pair","code":"return $ oddPair ; }"}
{"text":"Driver Code","code":"$ A = array ( 5 , 6 , 2 , 8 ) ; $ N = sizeof ( $ A ) \/ sizeof ( $ A [ 0 ] ) ; echo findOddPair ( $ A , $ N ) , \" STRNEWLINE \" ; #This  code is contributed by ajit NEW_LINE ? >"}
{"text":"Function to count number of even pairs","code":"< ? php function findevenPair ( & $ A , $ N ) {"}
{"text":"variable for counting even pairs","code":"$ evenPair = 0 ;"}
{"text":"find all pairs","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) {"}
{"text":"find XOR operation check even or even","code":"if ( ( $ A [ $ i ] ^ $ A [ $ j ] ) % 2 == 0 ) $ evenPair ++ ; } }"}
{"text":"return number of even pair","code":"return $ evenPair ; }"}
{"text":"Driver Code","code":"$ A = array ( 5 , 4 , 7 , 2 , 1 ) ; $ N = sizeof ( $ A ) ;"}
{"text":"calling function findevenPair and print number of even pair","code":"echo ( findevenPair ( $ A , $ N ) ) ; ? >"}
{"text":"Function to count number of even pairs","code":"< ? php function findEvenPair ( $ A , $ N ) { $ count = 0 ;"}
{"text":"find all pairs","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ A [ $ i ] % 2 != 0 ) $ count ++ ; } $ totalPairs = ( $ N * ( $ N - 1 ) \/ 2 ) ; $ oddEvenPairs = $ count * ( $ N - $ count ) ;"}
{"text":"return number of even pair","code":"return $ totalPairs - $ oddEvenPairs ; }"}
{"text":"Driver Code","code":"$ a = array ( 5 , 4 , 7 , 2 , 1 ) ; $ n = sizeof ( $ a ) ;"}
{"text":"calling function findEvenPair and print number of even pair","code":"echo findEvenPair ( $ a , $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to count number of pairs EVEN bitwise AND","code":"< ? php function findevenPair ( $ A , $ N ) {"}
{"text":"variable for counting even pairs","code":"$ evenPair = 0 ;"}
{"text":"find all pairs","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) {"}
{"text":"find AND operation to check evenpair","code":"if ( ( $ A [ $ i ] & $ A [ $ j ] ) % 2 == 0 ) $ evenPair ++ ; } }"}
{"text":"return number of even pair","code":"return $ evenPair ; }"}
{"text":"Driver Code","code":"$ a = array ( 5 , 1 , 3 , 2 ) ; $ n = sizeof ( $ a ) ; echo findevenPair ( $ a , $ n ) ; ? >"}
{"text":"Function to count number of pairs with EVEN bitwise AND","code":"< ? php function findevenPair ( $ A , $ N ) { $ count = 0 ;"}
{"text":"count odd numbers","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( $ A [ $ i ] % 2 != 0 ) $ count ++ ;"}
{"text":"count odd pairs","code":"$ oddCount = $ count * ( $ count - 1 ) \/ 2 ;"}
{"text":"return number of even pair","code":"return ( $ N * ( $ N - 1 ) \/ 2 ) - $ oddCount ; }"}
{"text":"Driver Code","code":"$ a = array ( 5 , 1 , 3 , 2 ) ; $ n = sizeof ( $ a ) ; echo findevenPair ( $ a , $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function To Calculate Answer","code":"< ? php function calculate ( $ X ) {"}
{"text":"Find number of bits in the given integer","code":"$ number_of_bits = 8 ;"}
{"text":"XOR the given integer with poe ( 2 , number_of_bits - 1 and print the result","code":"return ( ( 1 << $ number_of_bits ) - 1 ) ^ $ X ; }"}
{"text":"Driver Code","code":"$ X = 4 ; echo \" Required \u2581 Number \u2581 is \u2581 : \u2581 \" . calculate ( $ X ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to replace the elements","code":"< ? php function ReplaceElements ( $ arr , $ n ) { $ X = 0 ;"}
{"text":"Calculate the xor of all the elements","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ X ^= $ arr [ $ i ] ; }"}
{"text":"Replace every element by the xor of all other elements","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { $ arr [ $ i ] = $ X ^ $ arr [ $ i ] ; } return $ arr ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 3 , 5 , 5 ) ; $ n = sizeof ( $ arr ) ; $ arr1 = ReplaceElements ( $ arr , $ n ) ;"}
{"text":"Print the modified array .","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { echo ( $ arr1 [ $ i ] . \" \" ) ; } ? >"}
{"text":"Function to alternate the values","code":"< ? php function alternate ( & $ a , & $ b , & $ x ) { $ x = $ a ^ $ b ^ $ x ; }"}
{"text":"Driver Code","code":"$ a = -10 ; $ b = 15 ; $ x = $ a ; echo \" x \u2581 is \u2581 : \u2581 \" , $ x ; alternate ( $ a , $ b , $ x ) ; echo \" After exchange \" ; echo \" x is : \" ? >"}
{"text":"Function to count the no . of leading zeros","code":"< ? php function countZeros ( $ x ) { $ y ; $ n = 32 ; $ y = $ x >> 16 ; if ( $ y != 0 ) { $ n = $ n - 16 ; $ x = $ y ; } $ y = $ x >> 8 ; if ( $ y != 0 ) { $ n = $ n - 8 ; $ x = $ y ; } $ y = $ x >> 4 ; if ( $ y != 0 ) { $ n = $ n - 4 ; $ x = $ y ; } $ y = $ x >> 2 ; if ( $ y != 0 ) { $ n = $ n - 2 ; $ x = $ y ; } $ y = $ x >> 1 ; if ( $ y != 0 ) return $ n - 2 ; return $ n - $ x ; }"}
{"text":"Driver Code","code":"$ x = 101 ; echo countZeros ( $ x ) ;"}
{"text":"Function to compare the no . of leading zeros","code":"< ? php function LeadingZeros ( $ x , $ y ) {"}
{"text":"if both have same no . of leading zeros","code":"if ( ( $ x ^ $ y ) <= ( $ x & $ y ) ) echo \" Equal \""}
{"text":"if y has more leading zeros","code":"else if ( ( $ x & ( ~ $ y ) ) > $ y ) echo $ y ; else echo $ x ; }"}
{"text":"Driver Code","code":"$ x = 10 ; $ y = 16 ; LeadingZeros ( $ x , $ y ) ; ? >"}
{"text":"compute number of different bits","code":"< ? php function solve ( $ A , $ B ) { $ count = 0 ;"}
{"text":"since , the numbers are less than 2 ^ 31 run the loop from '0' to '31' only","code":"for ( $ i = 0 ; $ i < 32 ; $ i ++ ) {"}
{"text":"right shift both the numbers by ' i ' and check if the bit at the 0 th position is different","code":"if ( ( ( $ A >> $ i ) & 1 ) != ( ( $ B >> $ i ) & 1 ) ) { $ count ++ ; } } echo \" Number \u2581 of \u2581 different \u2581 bits \u2581 : \u2581 $ count \" ; }"}
{"text":"Driver code","code":"$ A = 12 ; $ B = 15 ;"}
{"text":"find number of different bits","code":"solve ( $ A , $ B ) ; ? >"}
{"text":"PHP program to set the rightmost unset bit","code":"< ? php function setRightmostUnsetBit ( $ n ) {"}
{"text":"If all bits are set","code":"if ( ( $ n & ( $ n + 1 ) ) == 0 ) return $ n ;"}
{"text":"Set rightmost 0 bit","code":"return $ n | ( $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 21 ; echo setRightmostUnsetBit ( $ n ) ; ? >"}
{"text":"function to return AND of sub - arrays","code":"< ? php function ANDS ( & $ a , $ n ) { $ ans = $ a [ 0 ] ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ ans &= $ a [ $ i ] ; return $ ans ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 2 , 3 ) ;"}
{"text":"size of the array","code":"$ n = sizeof ( $ a ) ;"}
{"text":"print and of all subarrays","code":"echo ANDS ( $ a , $ n ) ; ? >"}
{"text":"PHP program to find 2 's complement using XOR.","code":"< ? php function TwoscomplementbyXOR ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"A flag used to find if a 1 bit is seen or not .","code":"$ check_bit = 0 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { if ( $ str [ $ i ] == '0' && $ check_bit == 0 ) { continue ; } else {"}
{"text":"xor operator is used to flip the","code":"if ( $ check_bit == 1 ) $ str [ $ i ] = ( $ str [ $ i ] - '0' ) ^ 1 + '0' ;"}
{"text":"bits after converting in to ASCII values","code":"$ check_bit = 1 ; } }"}
{"text":"if there is no 1 in the string so just add 1 in starting of string and return","code":"if ( $ check_bit == 0 ) return \"1\" + $ str ; else return $ str ; }"}
{"text":"Driver code","code":"$ str = \"101\" ; echo TwoscomplementbyXOR ( $ str ) ; ? >"}
{"text":"function to check whether bits are in alternate pattern in the given range","code":"< ? php function bitsAreInAltPatrnInGivenTRange ( $ n , $ l , $ r ) {"}
{"text":"right shift n by ( l - 1 ) bits","code":"$ num = $ n >> ( $ l - 1 ) ;"}
{"text":"get the bit at the last position in ' num '","code":"$ prev = $ num & 1 ;"}
{"text":"right shift ' num ' by 1","code":"$ num = $ num >> 1 ;"}
{"text":"loop until there are bits in the given range","code":"for ( $ i = 1 ; $ i <= ( $ r - $ l ) ; $ i ++ ) {"}
{"text":"get the bit at the last position in ' num '","code":"$ curr = $ num & 1 ;"}
{"text":"if true , then bits are not in alternate pattern","code":"if ( $ curr == $ prev ) return false ;"}
{"text":"update ' prev '","code":"$ prev = $ curr ;"}
{"text":"right shift ' num ' by 1","code":"$ num = $ num >> 1 ; }"}
{"text":"bits are in alternate pattern in the given range","code":"return true ; }"}
{"text":"Driver Code","code":"$ n = 18 ; $ l = 1 ; $ r = 3 ; if ( bitsAreInAltPatrnInGivenTRange ( $ n , $ l , $ r ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function that increment the value .","code":"< ? php function increment ( $ i ) {"}
{"text":"Invert bits and apply negative sign","code":"$ i = - ( ~ $ i ) ; return $ i ; }"}
{"text":"Driver code","code":"$ n = 3 ; echo increment ( $ n ) ; ? >"}
{"text":"count the number of bits for each element of array","code":"< ? php function bit_count ( $ n ) { $ count = 0 ;"}
{"text":"Count the number of set bits","code":"while ( $ n ) { $ count ++ ; $ n = $ n & ( $ n - 1 ) ; } return $ count ; }"}
{"text":"Function to return the the maximum sum","code":"function maxsum ( $ arr , $ n ) { $ bits = array ( $ n ) ;"}
{"text":"Calculate the","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ bits [ $ i ] = bit_count ( $ arr [ $ i ] ) ; }"}
{"text":"Assuming the number to be a maximum of 32 bits","code":"$ sum = array_fill ( 0 , 32 , 0 ) ;"}
{"text":"Add the number to the number of set bits","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum [ $ bits [ $ i ] ] += $ arr [ $ i ] ; } $ maximum = 0 ;"}
{"text":"Find the maximum sum","code":"for ( $ i = 0 ; $ i < 32 ; $ i ++ ) { $ maximum = max ( $ sum [ $ i ] , $ maximum ) ; } return $ maximum ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 8 , 5 , 6 , 7 ) ; $ n = sizeof ( $ arr ) ; echo maxsum ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find XOR of pair sums .","code":"< ? php function xor_pair_sum ( $ ar , $ n ) { $ total = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ total = $ total ^ $ ar [ $ i ] ; return ( 2 * $ total ) ; }"}
{"text":"Driver Code","code":"$ data = array ( 1 , 2 , 3 ) ; $ n = sizeof ( $ data ) ; echo xor_pair_sum ( $ data , $ n ) ; ? >"}
{"text":"PHP program to count pairs with even OR","code":"< ? php function findEvenPair ( & $ A , $ N ) {"}
{"text":"Count total even numbers in array .","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( ! ( $ A [ $ i ] & 1 ) ) $ count ++ ;"}
{"text":"return count of even pair","code":"return $ count * ( $ count - 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ A = array ( 5 , 6 , 2 , 8 ) ; $ N = sizeof ( $ A ) ; echo findEvenPair ( $ A , $ N ) . \" STRNEWLINE \" ; ? >"}
{"text":"function to check whether all the bits are unset in the given range or not","code":"< ? php function allBitsSetInTheGivenRange ( $ n , $ l , $ r ) {"}
{"text":"calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits","code":"$ num = ( ( 1 << $ r ) - 1 ) ^ ( ( 1 << ( $ l - 1 ) ) - 1 ) ;"}
{"text":"new number which could only have one or more set bits in the range l to r and nowhere else","code":"$ new_num = $ n & $ num ;"}
{"text":"if true , then all bits are unset in the given range","code":"if ( $ new_num == 0 ) return true ;"}
{"text":"else all bits are not unset in the given range","code":"return false ; }"}
{"text":"Driver Code","code":"$ n = 17 ; $ l = 2 ; $ r = 4 ; if ( allBitsSetInTheGivenRange ( $ n , $ l , $ r ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to check if a number has same setbits and unset bits","code":"< ? php function checkSame ( $ n ) { $ set = 0 ; $ unset = 0 ;"}
{"text":"iterate for all bits of a number","code":"while ( $ n ) {"}
{"text":"if set","code":"if ( $ n & 1 ) $ set ++ ;"}
{"text":"if unset","code":"else $ unset ++ ;"}
{"text":"right shift number by 1","code":"$ n = $ n >> 1 ; }"}
{"text":"is number of set bits are equal to unset bits","code":"if ( $ set == $ unset ) return true ; else return false ; }"}
{"text":"Driver Code","code":"$ n = 12 ;"}
{"text":"function to check","code":"if ( checkSame ( $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"Function to find the i - th character","code":"< ? php function KthCharacter ( $ m , $ n , $ k ) {"}
{"text":"distance between two consecutive elements after N iterations","code":"$ distance = pow ( 2 , $ n ) ; $ Block_number = intval ( $ k \/ $ distance ) ; $ remaining = $ k % $ distance ; $ s = array ( 32 ) ; $ x = 0 ;"}
{"text":"binary representation of M","code":"for ( ; $ m > 0 ; $ x ++ ) { $ s [ $ x ] = $ m % 2 ; $ m = intval ( $ m \/ 2 ) ; }"}
{"text":"kth digit will be derived from root for sure","code":"$ root = $ s [ $ x - 1 - $ Block_number ] ; if ( $ remaining == 0 ) { echo $ root . \" STRNEWLINE \" ; return ; }"}
{"text":"Check whether there is need to flip root or not","code":"$ flip = true ; while ( $ remaining > 1 ) { if ( $ remaining & 1 ) { $ flip = ! $ flip ; } $ remaining = $ remaining >> 1 ; } if ( $ flip ) { echo ! $ root . \" STRNEWLINE \" ; } else { echo $ root . \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"$ m = 5 ; $ k = 5 ; $ n = 3 ; KthCharacter ( $ m , $ n , $ k ) ; ? >"}
{"text":"function to check whether the number has only first and last bits set","code":"< ? php function onlyFirstAndLastAreSet ( $ n ) { if ( $ n == 1 ) return true ; if ( $ n == 2 ) return false ; return ( ( ( $ n - 1 ) & ( $ n - 2 ) ) == 0 ) ; }"}
{"text":"Driver Code","code":"$ n = 9 ; if ( onlyFirstAndLastAreSet ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to return the integer with all the bits set in range L - R","code":"< ? php function getInteger ( $ L , $ R ) { $ number = 0 ;"}
{"text":"iterate from L to R and add all powers of 2","code":"for ( $ i = $ L ; $ i <= $ R ; $ i ++ ) $ number += pow ( 2 , $ i ) ; return $ number ; }"}
{"text":"Driver Code","code":"$ L = 2 ; $ R = 5 ; echo getInteger ( $ L , $ R ) ; ? >"}
{"text":"Function to return the integer with all the bits set in range L - R","code":"< ? php function setbitsfromLtoR ( $ L , $ R ) { return ( 1 << ( $ R + 1 ) ) - ( 1 << $ L ) ; }"}
{"text":"Driver Code","code":"$ L = 2 ; $ R = 5 ; echo setbitsfromLtoR ( $ L , $ R ) ; ? >"}
{"text":"Function to find XOR of sum of all pairs","code":"< ? php function findXor ( $ arr , $ n ) {"}
{"text":"Calculate xor of all the elements","code":"$ xoR = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ xoR = $ xoR ^ $ arr [ $ i ] ; }"}
{"text":"Return twice of xor value","code":"return $ xoR * 2 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 5 , 6 ) ; $ n = count ( $ arr ) ; echo findXor ( $ arr , $ n ) ; ? >"}
{"text":"PHP code to find two odd occurring elements in an array where all other elements appear even number of times .","code":"< ? php function printOdds ( $ arr , $ n ) {"}
{"text":"Find XOR of all numbers","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ res = $ res ^ $ arr [ $ i ] ;"}
{"text":"Find a set bit in the XOR ( We find rightmost set bit here )","code":"$ set_bit = $ res & ( ~ ( $ res - 1 ) ) ;"}
{"text":"Traverse through all numbers and divide them in two groups ( i ) Having set bit set at same position as the only set bit in set_bit ( ii ) Having 0 bit at same position as the only set bit in set_bit","code":"$ x = 0 ; $ y = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] & $ set_bit ) $ x = $ x ^ $ arr [ $ i ] ; else $ y = $ y ^ $ arr [ $ i ] ; }"}
{"text":"XOR of two different sets are our required numbers .","code":"echo ( $ x . \" \u2581 \" . $ y ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 3 , 3 , 4 , 4 , 5 ) ; $ n = sizeof ( $ arr ) ; printOdds ( $ arr , $ n ) ; ? >"}
{"text":"function to find the maximum subset with bitwise OR equal to k","code":"< ? php function subsetBitwiseORk ( $ arr , $ n , $ k ) { $ v = array ( ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If the bitwise OR of k and element is equal to k , then include that element in the subset","code":"if ( ( $ arr [ $ i ] $ k ) == $ k ) array_push ( $ v , $ arr [ $ i ] ) ; }"}
{"text":"Store the bitwise OR of elements in v","code":"$ ans = 0 ; for ( $ i = 0 ; $ i < count ( $ v ) ; $ i ++ ) $ ans |= $ v [ $ i ] ;"}
{"text":"If ans is not equal to k , subset doesn 't exist","code":"if ( $ ans != $ k ) { echo ( \" Subset \u2581 does \u2581 not \u2581 exist STRNEWLINE \" ) ; return ; } for ( $ i = 0 ; $ i < count ( $ v ) ; $ i ++ ) echo ( $ v [ $ i ] . \" \u2581 \" ) ; }"}
{"text":"Driver Code","code":"$ k = 3 ; $ arr = array ( 1 , 4 , 2 ) ; $ n = count ( $ arr ) ; subsetBitwiseORk ( $ arr , $ n , $ k ) ; ? >"}
{"text":"This function returns the number to be inserted in the given array","code":"< ? php function findEletobeInserted ( $ A , $ n , $ k ) {"}
{"text":"initialise the answer with k","code":"$ ans = $ k ; for ( $ i = 0 ; $ i < $ n ; $ i ++ )"}
{"text":"XOR of all elements in the array","code":"$ ans ^= $ A [ $ i ] ; return $ ans ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 2 , 3 , 4 , 5 ) ; $ n = count ( $ A ) ; $ k = 10 ; echo findEletobeInserted ( $ A , $ n , $ k ) ; echo \" \u2581 has \u2581 to \u2581 be \u2581 inserted \" ; echo \" \u2581 in \u2581 the \u2581 given \u2581 array \u2581 to \u2581 make \u2581 xor \u2581 sum \u2581 of \u2581 \" ; echo $ k , \" STRNEWLINE \" ; ? >"}
{"text":"PHP program to calculate sum of Bit - wise and sum of all subsets of an array","code":"< ? php $ BITS = 32 ; function andSum ( $ arr , $ n ) { global $ BITS ; $ ans = 0 ;"}
{"text":"assuming representation of each element is in 32 bit","code":"for ( $ i = 0 ; $ i < $ BITS ; $ i ++ ) { $ countSetBits = 0 ;"}
{"text":"iterating array element","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Counting the set bit of array in ith position","code":"if ( $ arr [ $ j ] & ( 1 << $ i ) ) $ countSetBits ++ ; }"}
{"text":"counting subset which produce sum when particular bit position is set .","code":"$ subset = ( 1 << $ countSetBits ) - 1 ;"}
{"text":"multiplying every position subset with 2 ^ i to count the sum .","code":"$ subset = ( $ subset * ( 1 << $ i ) ) ; $ ans += $ subset ; } return $ ans ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 ) ; $ size = count ( $ arr ) ; echo andSum ( $ arr , $ size ) ; ? >"}
{"text":"An efficient Java program to find minimum number formed by bits of a given number .","code":"< ? php function _popcnt32 ( $ n ) { $ count = 0 ; while ( $ n != 0 ) { $ n = $ n & ( $ n - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"Returns maximum number formed by bits of a given number .","code":"function maximize ( $ a ) {"}
{"text":"_popcnt32 ( a ) gives number of 1 's present in binary  representation of a.","code":"$ n = _popcnt32 ( $ a ) ;"}
{"text":"If a$32 bits are set .","code":"if ( $ n == 32 ) return $ a ;"}
{"text":"find a number witn n least significant set bits .","code":"$ res = ( 1 << $ n ) - 1 ;"}
{"text":"Now shift result by 32 - n","code":"return ( $ res << ( 32 - $ n ) ) ; }"}
{"text":"Driver Code","code":"$ a = 3 ; echo ( maximize ( $ a ) ) ; ? >"}
{"text":"Function to get no of set bits in binary representation of positive integer n","code":"< ? php function countSetBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ count += $ n & 1 ; $ n >>= 1 ; } return $ count ; }"}
{"text":"Driver code","code":"$ i = 3 ; echo ( countSetBits ( $ i ) ) ; ? >"}
{"text":"Returns true if n is even , else odd","code":"< ? php function isEven ( $ n ) { $ isEven = true ; for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) $ isEven = ! $ isEven ; return $ isEven ; }"}
{"text":"Driver code","code":"$ n = 101 ; $ is = isEven ( $ n ) ? \" Even \" : \" Odd \" ; echo \" $ is \" ? >"}
{"text":"Returns true if n is even , else odd","code":"< ? php function isEven ( $ n ) {"}
{"text":"Return true if n \/ 2 does not result in a float value .","code":"return ( ( int ) ( $ n \/ 2 ) * 2 == $ n ) ; }"}
{"text":"Driver code","code":"$ n = 101 ; if ( isEven ( $ n ) ) echo ( \" Even \" ) ; else echo ( \" Odd \" ) ; ? >"}
{"text":"php program to do recursive addition of two integers","code":"< ? php function add ( $ x , $ y ) { $ keep = ( $ x & $ y ) << 1 ; $ res = $ x ^ $ y ;"}
{"text":"If bitwise & is 0 , then there is not going to be any carry . Hence result of XOR is addition .","code":"if ( $ keep == 0 ) { echo $ res ; exit ( 0 ) ; } add ( $ keep , $ res ) ; }"}
{"text":"Driver code","code":"$ k = add ( 15 , 38 ) ; ? >"}
{"text":"Returns true if the pair is valid , otherwise false","code":"< ? php function checkValidPair ( $ num1 , $ num2 ) {"}
{"text":"converting integers to strings","code":"$ s1 = ( string ) $ num1 ; $ s2 = ( string ) $ num2 ;"}
{"text":"Iterate over the strings and check if a character in first string is also present in second string , return true","code":"for ( $ i = 0 ; $ i < strlen ( $ s1 ) ; $ i ++ ) for ( $ j = 0 ; $ j < strlen ( $ s2 ) ; $ j ++ ) if ( $ s1 [ $ i ] == $ s2 [ $ j ] ) return true ;"}
{"text":"No common digit found","code":"return false ; }"}
{"text":"Returns the number of valid pairs","code":"function countPairs ( & $ arr , $ n ) { $ numberOfPairs = 0 ;"}
{"text":"Iterate over all possible pairs","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( checkValidPair ( $ arr [ $ i ] , $ arr [ $ j ] ) ) $ numberOfPairs ++ ; return $ numberOfPairs ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 12 , 24 ) ; $ n = sizeof ( $ arr ) ; echo ( countPairs ( $ arr , $ n ) ) ; ? >"}
{"text":"Check for power of 2 or not","code":"< ? php function isPowerOf2 ( $ num ) { return ( $ num && ! ( $ num & ( $ num - 1 ) ) ) ; }"}
{"text":"Check if there exist a subset whose bitwise AND is power of 2.","code":"function checkSubsequence ( $ arr , $ n ) { $ NUM_BITS = 32 ;"}
{"text":"if there is only one element in the set .","code":"if ( $ n == 1 ) return isPowerOf2 ( $ arr [ 0 ] ) ;"}
{"text":"Finding a number with all bit sets .","code":"$ total = 0 ; for ( $ i = 0 ; $ i < $ NUM_BITS ; $ i ++ ) $ total = $ total | ( 1 << $ i ) ;"}
{"text":"check all the positions at which the bit is set .","code":"for ( $ i = 0 ; $ i < $ NUM_BITS ; $ i ++ ) { $ ans = $ total ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"include all those elements whose i - th bit is set","code":"if ( $ arr [ $ j ] & ( 1 << $ i ) ) $ ans = $ ans & $ arr [ $ j ] ; }"}
{"text":"check for the set contains elements make a power of 2 or not","code":"if ( isPowerOf2 ( $ ans ) ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 13 , 7 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; if ( checkSubsequence ( $ arr , $ n ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"function to find winner of NIM - game","code":"< ? php function findWinner ( $ A , $ n ) { $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ res ^= $ A [ $ i ] ;"}
{"text":"case when Alice is winner","code":"if ( $ res == 0 or $ n % 2 == 0 ) return \" Alice \" ;"}
{"text":"when Bob is winner","code":"else return \" Bob \" ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 4 , 3 , 5 ) ; $ n = count ( $ A ) ; echo \" Winner \u2581 = \u2581 \" , findWinner ( $ A , $ n ) ; ? >"}
{"text":"function to check whether a number is fibbinary or not","code":"< ? php function isFibbinaryNum ( $ n ) {"}
{"text":"if the number does not contain adjacent ones then ( n & ( n >> 1 ) ) operation results to 0","code":"if ( ( $ n & ( $ n >> 1 ) ) == 0 ) return true ;"}
{"text":"not a fibbinary number","code":"return false ; }"}
{"text":"Driver code","code":"$ n = 10 ; if ( isFibbinaryNum ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to calculate maximum XOR value","code":"< ? php function maxXOR ( $ n , $ k ) { $ c = log ( $ n , 2 ) + 1 ;"}
{"text":"Return ( 2 ^ c - 1 )","code":"return ( ( 1 << $ c ) - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 12 ; $ k = 3 ; echo maxXOR ( $ n , $ k ) ; ? >"}
{"text":"Function to divide a by b and return floor value it","code":"< ? php function divide ( $ dividend , $ divisor ) {"}
{"text":"Calculate sign of divisor i . e . , sign will be negative either one of them is negative only iff otherwise it will be positive","code":"$ sign = ( ( $ dividend < 0 ) ^ ( $ divisor < 0 ) ) ? -1 : 1 ;"}
{"text":"remove sign of operands","code":"$ dividend = abs ( $ dividend ) ; $ divisor = abs ( $ divisor ) ;"}
{"text":"Initialize the quotient","code":"$ quotient = 0 ; $ temp = 0 ;"}
{"text":"test down from the highest bit and accumulate the tentative value for valid bit","code":"for ( $ i = 31 ; $ i >= 0 ; -- $ i ) { if ( $ temp + ( $ divisor << $ i ) <= $ dividend ) { $ temp += $ divisor << $ i ; $ quotient |= ( double ) ( 1 ) << $ i ; } }"}
{"text":"if the sign value computed earlier is - 1 then negate the value of quotient","code":"if ( $ sign == -1 ) $ quotient = - $ quotient ; return $ quotient ; }"}
{"text":"Driver code","code":"$ a = 10 ; $ b = 3 ; echo divide ( $ a , $ b ) . \" STRNEWLINE \" ; $ a = 43 ; $ b = -8 ; echo divide ( $ a , $ b ) ; ? >"}
{"text":"function to count the number of bits in binary representation of an integer","code":"< ? php function count1 ( $ n ) {"}
{"text":"initialize count","code":"$ c = 0 ;"}
{"text":"count till n is non zero","code":"while ( $ n ) { $ c ++ ;"}
{"text":"right shift by 1 i . e , divide by 2","code":"$ n = $ n >> 1 ; } return $ c ; }"}
{"text":"function to calculate the xor of two numbers by adding trailing zeros to the number having less number of bits in its binary representation .","code":"function XOR1 ( $ a , $ b ) {"}
{"text":"stores the minimum and maximum","code":"$ c = min ( $ a , $ b ) ; $ d = max ( $ a , $ b ) ;"}
{"text":"left shift if the number of bits are less in binary representation","code":"if ( count1 ( $ c ) < count1 ( $ d ) ) $ c = $ c << ( count1 ( $ d ) - count1 ( $ c ) ) ; return ( $ c ^ $ d ) ; }"}
{"text":"Driver Code","code":"$ a = 13 ; $ b = 5 ; echo XOR1 ( $ a , $ b ) ; ? >"}
{"text":"PHP program to swap every two bits in a byte .","code":"< ? php function swapBitsInPair ( $ x ) {"}
{"text":"Extracting the high bit shift it to lowbit Extracting the low bit shift it to highbit","code":"return ( ( $ x & 0b10101010 ) >> 1 ) | ( ( $ x & 0b01010101 ) << 1 ) ; }"}
{"text":"Driver Code","code":"$ x = 4 ; echo swapBitsInPair ( $ x ) ; ? >"}
{"text":"set even bit of number n","code":"< ? php function setevenbits ( $ n ) { $ temp = $ n ; $ count = 0 ;"}
{"text":"res for store 101010. . number","code":"$ res = 0 ;"}
{"text":"generate number form of 101010. . ... till temp size","code":"for ( $ temp = $ n ; $ temp > 0 ; $ temp >>= 1 ) {"}
{"text":"if bit is even then generate number and or with res","code":"if ( $ count % 2 == 1 ) $ res |= ( 1 << $ count ) ; $ count ++ ; }"}
{"text":"return set even bit number","code":"return ( $ n & $ res ) ; }"}
{"text":"set odd bit of number m","code":"function setoddbits ( $ m ) { $ count = 0 ;"}
{"text":"res for store 101010. . number","code":"$ res = 0 ;"}
{"text":"generate number form of 101010. . . . till temp size","code":"for ( $ temp = $ m ; $ temp > 0 ; $ temp >>= 1 ) {"}
{"text":"if bit is even then generate number and or with res","code":"if ( $ count % 2 == 0 ) $ res |= ( 1 << $ count ) ; $ count ++ ; }"}
{"text":"return set odd bit number","code":"return ( $ m & $ res ) ; } function getAlternateBits ( $ n , $ m ) {"}
{"text":"set even bit of number n","code":"$ tempn = setevenbits ( $ n ) ;"}
{"text":"set odd bit of number m","code":"$ tempm = setoddbits ( $ m ) ;"}
{"text":"take OR with these number","code":"return ( $ tempn $ tempm ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; $ m = 11 ;"}
{"text":"n = 1 0 1 0 ^ ^ m = 1 0 1 1 ^ ^ result = 1 0 1 1","code":"echo getAlternateBits ( $ n , $ m ) ; ? >"}
{"text":"function to check whether decimal representation of given binary number is divisible by 10 or not","code":"< ? php function isDivisibleBy10 ( $ bin , $ n ) {"}
{"text":"if last digit is '1' , then number is not divisible by 10","code":"if ( $ bin [ $ n - 1 ] == '1' ) return false ;"}
{"text":"to accumulate the sum of last digits in perfect powers of 2","code":"$ sum = 0 ;"}
{"text":"traverse from the 2 nd last up to 1 st digit in ' bin '","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"if digit in '1'","code":"if ( $ bin [ $ i ] == '1' ) {"}
{"text":"calculate digit 's position  from the right","code":"$ posFromRight = $ n - $ i - 1 ;"}
{"text":"according to the digit 's position,  obtain the last digit of the  applicable perfect power of 2","code":"if ( $ posFromRight % 4 == 1 ) $ sum = $ sum + 2 ; else if ( $ posFromRight % 4 == 2 ) $ sum = $ sum + 4 ; else if ( $ posFromRight % 4 == 3 ) $ sum = $ sum + 8 ; else if ( $ posFromRight % 4 == 0 ) $ sum = $ sum + 6 ; } }"}
{"text":"if last digit is 0 , then divisible by 10","code":"if ( $ sum % 10 == 0 ) return true ;"}
{"text":"not divisible by 10","code":"return false ; }"}
{"text":"function to check whether decimal representation of given binary number is divisible by 20 or not","code":"function isDivisibleBy20 ( $ bin , $ n ) {"}
{"text":"if ' bin ' is an odd number","code":"if ( $ bin [ $ n - 1 ] == '1' ) return false ;"}
{"text":"check if bin ( 0. . n - 2 ) is divisible by 10 or not","code":"return isDivisibleBy10 ( $ bin , $ n - 1 ) ; }"}
{"text":"Driver code","code":"$ bin = \"101000\" ; $ n = strlen ( $ bin ) ; if ( isDivisibleBy20 ( $ bin , $ n - 1 ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function for the Nega_bit","code":"< ? php function toggleBits ( $ n1 , $ n2 ) { return $ n1 ^ $ n2 ; }"}
{"text":"Driver code","code":"$ n1 = 2 ; $ n2 = 5 ; echo toggleBits ( $ n1 , $ n2 ) . \" STRNEWLINE \" ; ? >"}
{"text":"Returns a number which has all even bits of n toggled .","code":"< ? php function evenbittogglenumber ( $ n ) {"}
{"text":"Generate number form of 101010 . . till of same order as n","code":"$ res = 0 ; $ count = 0 ; for ( $ temp = $ n ; $ temp > 0 ; $ temp >>= 1 ) {"}
{"text":"if bit is even then generate number and or with res","code":"if ( $ count % 2 == 1 ) $ res |= ( 1 << $ count ) ; $ count ++ ; }"}
{"text":"return toggled number","code":"return $ n ^ $ res ; }"}
{"text":"Driver code","code":"$ n = 11 ; echo evenbittogglenumber ( $ n ) ; ? >"}
{"text":"Returns a number which has same bit count as n and has only first and last bits as set .","code":"< ? php function takeLandFsetbits ( $ n ) {"}
{"text":"set all the bit of the number","code":"$ n |= $ n >> 1 ; $ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ;"}
{"text":"Adding one to n now unsets all bits and moves MSB to one place . Now we shift the number by 1 and add 1.","code":"return ( ( $ n + 1 ) >> 1 ) + 1 ; } function toggleFandLbits ( int $ n ) {"}
{"text":"if number is 1","code":"if ( $ n == 1 ) return 0 ;"}
{"text":"take XOR with first and last set bit number","code":"return $ n ^ takeLandFsetbits ( $ n ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo toggleFandLbits ( $ n ) ; ? >"}
{"text":"Function to get no of set bits in binary","code":"< ? php function countSetBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ n &= ( $ n - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"Check if number is odious or not","code":"function checkOdious ( $ n ) { return ( countSetBits ( $ n ) % 2 == 1 ) ; }"}
{"text":"Driver Code","code":"$ num = 32 ; if ( checkOdious ( $ num ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"set left most unset bit","code":"< ? php function setleftmostunsetbit ( $ n ) {"}
{"text":"if number contain all 1 then return n","code":"if ( ( $ n & ( $ n + 1 ) ) == 0 ) return $ n ;"}
{"text":"Find position of leftmost unset bit .","code":"$ pos = 0 ; for ( $ temp = $ n , $ count = 0 ; $ temp > 0 ; $ temp >>= 1 , $ count ++ )"}
{"text":"if temp L . S . B is zero then unset bit pos is change","code":"if ( ( $ temp & 1 ) == 0 ) $ pos = $ count ;"}
{"text":"return OR of number and unset bit pos","code":"return ( $ n | ( 1 << ( $ pos ) ) ) ; }"}
{"text":"Driver code","code":"$ n = 10 ; echo setleftmostunsetbit ( $ n ) ; ? >"}
{"text":"To return max xor sum of 1 to n using at most k numbers","code":"< ? php function maxXorSum ( $ n , $ k ) {"}
{"text":"If k is 1 then maximum possible sum is n","code":"if ( $ k == 1 ) return $ n ;"}
{"text":"Finding number greater than or equal to n with most significant bit same as n . For example , if n is 4 , result is 7. If n is 5 or 6 , result is 7","code":"$ res = 1 ; while ( $ res <= $ n ) $ res <<= 1 ;"}
{"text":"Return res - 1 which denotes a number with all bits set to 1","code":"return $ res - 1 ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ k = 3 ; echo maxXorSum ( $ n , $ k ) ; ? >"}
{"text":"function to find the position of rightmost set bit","code":"< ? php function getPosOfRightmostSetBit ( $ n ) { $ t = $ n & - $ n ; return log ( $ t , 2 ) ; }"}
{"text":"function to toggle the last m bits","code":"function toggleLastKBits ( $ n , $ k ) {"}
{"text":"calculating a number ' num ' having ' m ' bits and all are set","code":"$ num = ( 1 << $ k ) - 1 ;"}
{"text":"toggle the last m bits and return the number","code":"return ( $ n ^ $ num ) ; }"}
{"text":"function to increment a number by one by manipulating the bits","code":"function incrementByOne ( $ n ) {"}
{"text":"get position of rightmost unset bit if all bits of ' n ' are set , then the bit left to the MSB is the rightmost unset bit","code":"$ k = getPosOfRightmostSetBit ( ~ $ n ) ;"}
{"text":"kth bit of n is being set by this operation","code":"$ n = ( ( 1 << $ k ) $ n ) ;"}
{"text":"from the right toggle all the bits before the k - th","code":"if ( $ k != 0 ) $ n = toggleLastKBits ( $ n , $ k ) ;"}
{"text":"required number","code":"return $ n ; }"}
{"text":"Driver code","code":"$ n = 15 ; echo incrementByOne ( $ n ) ; ? >"}
{"text":"log ( n ) solution","code":"< ? php function xnor ( $ a , $ b ) {"}
{"text":"Make sure a is larger","code":"if ( $ a < $ b ) list ( $ a , $ b ) = array ( $ b , $ a ) ; if ( $ a == 0 && $ b == 0 ) return 1 ;"}
{"text":"for last bit of a","code":"$ a_rem = 0 ;"}
{"text":"for last bit of b","code":"$ b_rem = 0 ;"}
{"text":"counter for count bit and set bit in xnornum","code":"$ count = 0 ;"}
{"text":"to make new xnor number","code":"$ xnornum = 0 ;"}
{"text":"for set bits in new xnor number","code":"while ( $ a ) {"}
{"text":"get last bit of a","code":"$ a_rem = $ a & 1 ;"}
{"text":"get last bit of b","code":"$ b_rem = $ b & 1 ;"}
{"text":"Check if current two bits are same","code":"if ( $ a_rem == $ b_rem ) $ xnornum |= ( 1 << $ count ) ;"}
{"text":"counter for count bit","code":"$ count ++ ; $ a = $ a >> 1 ; $ b = $ b >> 1 ; } return $ xnornum ; }"}
{"text":"Driver code","code":"$ a = 10 ; $ b = 50 ; echo xnor ( $ a , $ b ) ; ? >"}
{"text":"Please refer below post for details of this function https : www . geeksforgeeks . org \/ toggle - bits - significant - bit \/","code":"< ? php function togglebit ( $ n ) { if ( $ n == 0 ) return 1 ;"}
{"text":"Make a copy of n as we are going to change it .","code":"$ i = $ n ;"}
{"text":"Suppose n is 273 ( binary is 100010001 ) . It does following 100010001 | 010001000 = 110011001","code":"$ n |= $ n >> 1 ;"}
{"text":"This makes sure 4 bits ( From MSB and including MSB ) are set . It does following 110011001 | 001100110 = 111111111","code":"$ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ; return $ i ^ $ n ; }"}
{"text":"Returns XNOR of num1 and num2","code":"function XNOR ( $ num1 , $ num2 ) {"}
{"text":"if num2 is greater then we swap this number in num1","code":"if ( $ num1 < $ num2 ) list ( $ num1 , $ num2 ) = array ( $ num2 , $ num1 ) ; $ num1 = togglebit ( $ num1 ) ; return $ num1 ^ $ num2 ; }"}
{"text":"Driver code","code":"$ num1 = 10 ; $ num2 = 20 ; echo XNOR ( $ num1 , $ num2 ) ; ? >"}
{"text":"function to find maximum OR sum","code":"< ? php function MaximumSum ( $ a , $ b , $ n ) { $ sum1 = 0 ; $ sum2 = 0 ;"}
{"text":"OR sum of all the elements in both arrays","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sum1 |= $ a [ $ i ] ; $ sum2 |= $ b [ $ i ] ; } echo ( $ sum1 + $ sum2 ) . \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 2 , 4 , 3 , 2 ) ; $ B = array ( 2 , 3 , 3 , 12 , 1 ) ; $ n = sizeof ( $ A ) \/ sizeof ( $ A [ 0 ] ) ; MaximumSum ( $ A , $ B , $ n ) ; ? >"}
{"text":"function to check if x is power of 2","code":"< ? php function isPowerOfTwo ( $ x ) { $ y = 0 ;"}
{"text":"First x in the below expression is for the case when x is 0","code":"if ( $ x && ( ! ( $ x & ( $ x - 1 ) ) ) ) $ y = 1 ; return $ y ; }"}
{"text":"function to check whether the two numbers differ at one bit position only","code":"function differAtOneBitPos ( $ a , $ b ) { return isPowerOfTwo ( $ a ^ $ b ) ; }"}
{"text":"Driver Code","code":"$ a = 13 ; $ b = 9 ; if ( differAtOneBitPos ( $ a , $ b ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns 2 raised to power n","code":"< ? php function power2 ( $ n ) { if ( $ n == 0 ) return 1 ; if ( $ n == 1 ) return 2 ; return power2 ( $ n \/ 2 ) * power2 ( $ n \/ 2 ) ; } function multiply ( $ x , $ n ) { return $ x * power2 ( $ n ) ; }"}
{"text":"Driver Code","code":"$ x = 70 ; $ n = 2 ; echo multiply ( $ x , $ n ) ; ? >"}
{"text":"Efficient PHP program to compute x * ( 2 ^ n )","code":"< ? php function multiply ( $ x , $ n ) { return $ x << $ n ; }"}
{"text":"Driver Code","code":"$ x = 70 ; $ n = 2 ; echo multiply ( $ x , $ n ) ; ? >"}
{"text":"function to check whether n is divisible by pow ( 2 , m )","code":"< ? php function isDivBy2PowerM ( $ n , $ m ) {"}
{"text":"if expression results to 0 , then n is divisible by pow ( 2 , m )","code":"if ( ( $ n & ( ( 1 << $ m ) - 1 ) ) == 0 ) return true ;"}
{"text":"n is not divisible","code":"return false ; }"}
{"text":"Driver Code","code":"$ n = 8 ; $ m = 2 ; if ( isDivBy2PowerM ( $ n , $ m ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Return true if player A wins , return false if player B wins .","code":"< ? php function findWinner ( $ N ) {"}
{"text":"Checking the last bit of N .","code":"return $ N & 1 ; }"}
{"text":"Driver Code","code":"$ N = 15 ; if ( findWinner ( $ N ) ) echo \" Player \u2581 A \" ; else echo \" Player \u2581 B \" ; ? >"}
{"text":"Returns a number which has all odd bits of n toggled .","code":"< ? php function evenbittogglenumber ( $ n ) {"}
{"text":"Generate number form of 101010. . . . . till of same order as n","code":"$ res = 0 ; $ count = 0 ; for ( $ temp = $ n ; $ temp > 0 ; $ temp >>= 1 ) {"}
{"text":"if bit is odd , then generate number and or with res","code":"if ( $ count % 2 == 0 ) $ res |= ( 1 << $ count ) ; $ count ++ ; }"}
{"text":"return toggled number","code":"return $ n ^ $ res ; }"}
{"text":"Driver code","code":"$ n = 11 ; echo evenbittogglenumber ( $ n ) ; ? >"}
{"text":"function to print remainder and quotient","code":"< ? php function divide ( $ n , $ m ) {"}
{"text":"print Remainder by n AND ( m - 1 )","code":"echo \" Remainder = \""}
{"text":"print quotient by right shifting n by ( log ( m , 2 ) ) times 2 is base","code":"echo \" Quotient = \" }"}
{"text":"Driver Code","code":"$ n = 43 ; $ m = 8 ; divide ( $ n , $ m ) ; ? >"}
{"text":"Function for finding maximum and value pair","code":"< ? php function maxAND ( $ arr , $ n ) { $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) $ res = max ( $ res , $ arr [ $ i ] & $ arr [ $ j ] ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 8 , 6 , 2 ) ; $ n = count ( $ arr ) ; echo \" Maximum \u2581 AND \u2581 Value \u2581 = \u2581 \" , maxAND ( $ arr , $ n ) ; ? >"}
{"text":"function to return 1 if it is zero returns 0 if it is negative returns 2 if it is positive","code":"< ? php function index ( $ i ) { return 1 + ( $ i >> 31 ) - ( - $ i >> 31 ) ; } function check ( $ n ) {"}
{"text":"string array to store all kinds of number","code":"$ s = array ( \" negative \" , \" zero \" , \" positive \" ) ;"}
{"text":"function call to check the sign of number","code":"$ val = index ( $ n ) ; echo $ n , \" \u2581 is \u2581 \" , $ s [ $ val ] , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"check ( 30 ) ; check ( -20 ) ; check ( 0 ) ; ? >"}
{"text":"function to check if it is possible to make it a multiple of 64.","code":"< ? php function checking ( $ s ) {"}
{"text":"counter to count 0 's","code":"$ c = 0 ;"}
{"text":"length of the string","code":"$ n = strlen ( $ s ) ;"}
{"text":"loop which traverses right to left and calculates the number of zeros before 1.","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { if ( $ s [ $ i ] == '0' ) $ c ++ ; if ( $ c >= 6 and $ s [ $ i ] == '1' ) return true ; } return false ; }"}
{"text":"Driver Code","code":"$ s = \"100010001\" ; if ( checking ( $ s ) ) echo \" Possible \" ; else echo \" Not \u2581 possible \" ; ? >"}
{"text":"Returns modified n .","code":"< ? php function modifyBit ( $ n , $ p , $ b ) { $ mask = 1 << $ p ; return ( $ n & ~ $ mask ) | ( ( $ b << $ p ) & $ mask ) ; }"}
{"text":"Driver code","code":"echo modifyBit ( 6 , 2 , 0 ) , \" STRNEWLINE \" ; echo modifyBit ( 6 , 5 , 1 ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to get no of set bits in the binary representation of ' n '","code":"< ? php function countSetBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ n &= ( $ n - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"function to count set bits in the given range","code":"function countSetBitsInGivenRange ( $ n , $ l , $ r ) {"}
{"text":"calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits","code":"$ num = ( ( 1 << $ r ) - 1 ) ^ ( ( 1 << ( $ l - 1 ) ) - 1 ) ;"}
{"text":"returns number of set bits in the range ' l ' to ' r ' in ' n '","code":"return countSetBits ( $ n & $ num ) ; }"}
{"text":"Driver Code","code":"$ n = 42 ; $ l = 2 ; $ r = 5 ; echo countSetBitsInGivenRange ( $ n , $ l , $ r ) ; ? >"}
{"text":"function to check if all the bits are set or not in the binary representation of ' n '","code":"< ? php function areAllBitsSet ( $ n ) {"}
{"text":"all bits are not set","code":"if ( $ n == 0 ) return false ;"}
{"text":"if true , then all bits are set","code":"if ( ( ( $ n + 1 ) & $ n ) == 0 ) return true ;"}
{"text":"else all bits are not set","code":"return false ; }"}
{"text":"function to check if one of the two numbers is one 's complement of the other","code":"function isOnesComplementOfOther ( $ a , $ b ) { return areAllBitsSet ( $ a ^ $ b ) ; }"}
{"text":"Driver Code","code":"$ a = 10 ; $ b = 5 ; if ( isOnesComplementOfOther ( $ a , $ b ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP program to find unique element where every element appears k times except one","code":"< ? php function findUnique ( $ a , $ n , $ k ) {"}
{"text":"Create a count array to store count of numbers that have a particular bit set . count [ i ] stores count of array elements with i - th bit set .","code":"$ INT_SIZE = 8 * PHP_INT_SIZE ; $ count = array ( ) ; for ( $ i = 0 ; $ i < $ INT_SIZE ; $ i ++ ) $ count [ $ i ] = 0 ;"}
{"text":"AND ( bitwise ) each element of the array with each set digit ( one at a time ) to get the count of set bits at each position","code":"for ( $ i = 0 ; $ i < $ INT_SIZE ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( ( $ a [ $ j ] & ( 1 << $ i ) ) != 0 ) $ count [ $ i ] += 1 ;"}
{"text":"Now consider all bits whose count is not multiple of k to form the required number .","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ INT_SIZE ; $ i ++ ) $ res += ( $ count [ $ i ] % $ k ) * ( 1 << $ i ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ a = array ( 6 , 2 , 5 , 2 , 2 , 6 , 6 ) ; $ n = count ( $ a ) ; $ k = 3 ; echo findUnique ( $ a , $ n , $ k ) ; ? >"}
{"text":"function to check whether ' n ' is a power of 2 or not","code":"< ? php function powerOfTwo ( $ n ) { return ( ! ( $ n & $ n - 1 ) ) ; }"}
{"text":"function to check whether the number has only first and last bits set","code":"function onlyFirstAndLastAreSet ( $ n ) { if ( $ n == 1 ) return true ; if ( $ n == 2 ) return false ; return powerOfTwo ( $ n - 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 9 ; if ( onlyFirstAndLastAreSet ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function to check if all the bits are set or not in the binary representation of ' n '","code":"< ? php function allBitsAreSet ( $ n ) {"}
{"text":"if true , then all bits are set","code":"if ( ( ( $ n + 1 ) & $ n ) == 0 ) return true ;"}
{"text":"else all bits are not set","code":"return false ; }"}
{"text":"function to check if a number has bits in alternate pattern","code":"function bitsAreInAltOrder ( $ n ) { $ num = $ n ^ ( $ n >> 1 ) ;"}
{"text":"to check if all bits are set in ' num '","code":"return allBitsAreSet ( $ num ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; if ( bitsAreInAltOrder ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"function for finding set bit","code":"< ? php function setBit ( $ xorValue ) { $ count = 0 ; while ( $ xorValue ) { if ( $ xorValue % 2 ) $ count ++ ; $ xorValue \/= 2 ; }"}
{"text":"return count of set bit","code":"return $ count ; }"}
{"text":"function for finding min flip","code":"function minFlip ( $ n , $ k ) {"}
{"text":"number of bits in n","code":"$ size = log ( $ n ) + 1 ;"}
{"text":"Find the largest number of same size with k set bits","code":"$ max = pow ( 2 , $ k ) - 1 ; $ max = $ max << ( $ size - $ k ) ;"}
{"text":"Count bit differences to find required flipping .","code":"$ xorValue = ( $ n ^ $ max ) ; return ( setBit ( $ xorValue ) ) ; }"}
{"text":"Driver Code","code":"$ n = 27 ; $ k = 3 ; echo \" Min \u2581 Flips \u2581 = \u2581 \" , minFlip ( $ n , $ k ) ; ? >"}
{"text":"function to toggle bits in the given range","code":"< ? php function setallbitgivenrange ( $ n , $ l , $ r ) {"}
{"text":"calculating a number ' range ' having set bits in the range from l to r and all other bits as 0 ( or unset ) .","code":"$ range = ( ( ( 1 << ( $ l - 1 ) ) - 1 ) ^ ( ( 1 << ( $ r ) ) - 1 ) ) ; return ( $ n $ range ) ; }"}
{"text":"Driver code","code":"$ n = 17 ; $ l = 2 ; $ r = 3 ; echo setallbitgivenrange ( $ n , $ l , $ r ) ; ? >"}
{"text":"PHP program to find total bit in given number","code":"< ? php function countBits ( $ number ) {"}
{"text":"log function in base 2 take only integer part","code":"return ( int ) ( log ( $ number ) \/ log ( 2 ) ) + 1 ; }"}
{"text":"Driver Code","code":"$ num = 65 ; echo ( countBits ( $ num ) ) ; ? >"}
{"text":"function to check whether all the bits are unset in the given range or not","code":"< ? php function allBitsSetInTheGivenRange ( $ n , $ l , $ r ) {"}
{"text":"calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits","code":"$ num = ( ( 1 << $ r ) - 1 ) ^ ( ( 1 << ( $ l - 1 ) ) - 1 ) ;"}
{"text":"new number which will only have one or more set bits in the range l to r and nowhere else","code":"$ new_num = $ n & $ num ;"}
{"text":"if new num is 0 , then all bits are unset in the given range","code":"if ( $ new_num == 0 ) return \" Yes \" ;"}
{"text":"else all bits are not unset","code":"return \" No \" ; }"}
{"text":"Driver Code","code":"$ n = 17 ; $ l = 2 ; $ r = 4 ; echo allBitsSetInTheGivenRange ( $ n , $ l , $ r ) ; ? >"}
{"text":"Returns a number which has all set bits starting from MSB of n","code":"< ? php function setAllBitsAfterMSB ( $ n ) {"}
{"text":"This makes sure two bits ( From MSB and including MSB ) are set","code":"$ n |= $ n >> 1 ;"}
{"text":"This makes sure 4 bits ( From MSB and including MSB ) are set","code":"$ n |= $ n >> 2 ; $ n |= $ n >> 4 ; $ n |= $ n >> 8 ; $ n |= $ n >> 16 ; return $ n ; } function toggle ( & $ n ) { $ n = $ n ^ setAllBitsAfterMSB ( $ n ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; toggle ( $ n ) ; echo $ n ; ? >"}
{"text":"Function to find the position of rightmost set bit in ' n '","code":"< ? php function getRightMostSetBit ( $ n ) { return log ( $ n & - $ n ) + 1 ; }"}
{"text":"Function to find the position of rightmost same bit in the binary representations of ' m ' and ' n '","code":"function posOfRightMostSameBit ( $ m , $ n ) {"}
{"text":"position of rightmost same bit","code":"return getRightMostSetBit ( ~ ( $ m ^ $ n ) ) ; }"}
{"text":"Driver Code","code":"$ m = 16 ; $ n = 7 ; echo \" Position \u2581 = \u2581 \" , ceil ( posOfRightMostSameBit ( $ m , $ n ) ) ; ? >"}
{"text":"function to check whether all the bits are set in the given range or not","code":"< ? php function allBitsSetInTheGivenRange ( $ n , $ l , $ r ) {"}
{"text":"Calculating a number ' num ' having ' r ' number of bits and bits in the range l to r are the only set bits","code":"$ num = ( ( 1 << $ r ) - 1 ) ^ ( ( 1 << ( $ l - 1 ) ) - 1 ) ;"}
{"text":"new number which will only have one or more set bits in the range l to r and nowhere else","code":"$ new_num = $ n & $ num ;"}
{"text":"if both are equal , then all bits are set in the given range","code":"if ( $ num == $ new_num ) return \" Yes \" ;"}
{"text":"else all bits are not set","code":"return \" No \" ; }"}
{"text":"Driver Code","code":"$ n = 22 ; $ l = 2 ; $ r = 3 ; echo allBitsSetInTheGivenRange ( $ n , $ l , $ r ) ; ? >"}
{"text":"Print all numbers upto n bits with no consecutive set bits .","code":"< ? php function printNonConsecutive ( $ n ) {"}
{"text":"Let us first compute 2 raised to power n .","code":"$ p = ( 1 << $ n ) ;"}
{"text":"loop 1 to n to check all the numbers","code":"for ( $ i = 1 ; $ i < $ p ; $ i ++ )"}
{"text":"A number i doesn ' t \u2581 contain \u2581 \u2581 consecutive \u2581 set \u2581 bits \u2581 if \u2581 \u2581 bitwise \u2581 and \u2581 of \u2581 i \u2581 and \u2581 left \u2581 \u2581 shifted \u2581 i \u2581 do ' t contain a commons set bit .","code":"if ( ( $ i & ( $ i << 1 ) ) == 0 ) echo $ i . \" \" ; }"}
{"text":"Driver code","code":"$ n = 3 ; printNonConsecutive ( $ n ) ; ? >"}
{"text":"Efficient PHP program to find n - th palindrome","code":"< ? php $ INT_SIZE = 32 ;"}
{"text":"Construct the nth binary palindrome with the given group number , aux_number and operation type","code":"function constructNthNumber ( $ group_no , $ aux_num , $ op ) { global $ INT_SIZE ; $ a = array_fill ( 0 , $ INT_SIZE , 0 ) ; $ num = 0 ; $ i = 0 ; $ len_f = 0 ;"}
{"text":"No need to insert any bit in the middle","code":"if ( $ op == 2 ) {"}
{"text":"Length of the final binary representation","code":"$ len_f = 2 * $ group_no ;"}
{"text":"Fill first and last bit as 1","code":"$ a [ $ len_f - 1 ] = $ a [ 0 ] = 1 ;"}
{"text":"Start filling the a [ ] from middle , with the aux_num binary representation","code":"while ( $ aux_num ) {"}
{"text":"Get the auxiliary number 's ith bit and  fill around middle","code":"$ a [ $ group_no + i ] = $ a [ $ group_no - 1 - $ i ] = $ aux_num & 1 ; $ aux_num = $ aux_num >> 1 ; $ i ++ ; } }"}
{"text":"Insert bit 0 in the middle","code":"else if ( $ op == 0 ) {"}
{"text":"Length of the final binary representation","code":"$ len_f = 2 * $ group_no + 1 ;"}
{"text":"Fill first and last bit as 1","code":"$ a [ $ len_f - 1 ] = $ a [ 0 ] = 1 ; $ a [ $ group_no ] = 0 ;"}
{"text":"Start filling the a [ ] from middle , with the aux_num binary representation","code":"while ( $ aux_num ) {"}
{"text":"Get the auxiliary number 's ith bit and fill  around middle","code":"$ a [ $ group_no + 1 + $ i ] = $ a [ $ group_no - 1 - $ i ] = $ aux_num & 1 ; $ aux_num = $ aux_num >> 1 ; $ i ++ ; } }"}
{"text":"else Insert bit 1 in the middle","code":"{"}
{"text":"Length of the final binary representation","code":"$ len_f = 2 * $ group_no + 1 ;"}
{"text":"Fill first and last bit as 1","code":"$ a [ $ len_f - 1 ] = $ a [ 0 ] = 1 ; $ a [ $ group_no ] = 1 ;"}
{"text":"Start filling the a [ ] from middle , with the aux_num binary representation","code":"while ( $ aux_num ) {"}
{"text":"Get the auxiliary number 's ith bit and fill  around middle","code":"$ a [ $ group_no + 1 + $ i ] = $ a [ $ group_no - 1 - $ i ] = $ aux_num & 1 ; $ aux_num = $ aux_num >> 1 ; $ i ++ ; } }"}
{"text":"Convert the number to decimal from binary","code":"for ( $ i = 0 ; $ i < $ len_f ; $ i ++ ) $ num += ( 1 << $ i ) * $ a [ $ i ] ; return $ num ; }"}
{"text":"Will return the nth binary palindrome number","code":"function getNthNumber ( $ n ) { $ group_no = 0 ; $ count_upto_group = 0 ; $ count_temp = 1 ; $ op = $ aux_num = 0 ;"}
{"text":"Add number of elements in all the groups , until the group of the nth number is found","code":"while ( $ count_temp < $ n ) { $ group_no ++ ;"}
{"text":"Total number of elements until this group","code":"$ count_upto_group = $ count_temp ; $ count_temp += 3 * ( 1 << ( $ group_no - 1 ) ) ; }"}
{"text":"Element 's offset position in the group","code":"$ group_offset = $ n - $ count_upto_group - 1 ;"}
{"text":"Finding which bit to be placed in the middle and finding the number , which we will fill from the middle in both directions","code":"if ( ( $ group_offset + 1 ) <= ( 1 << ( $ group_no - 1 ) ) ) {"}
{"text":"We need to fill this auxiliary number in binary form the middle in both directions","code":"$ aux_num = $ group_offset ; } else { if ( ( ( $ group_offset + 1 ) - ( 1 << ( $ group_no - 1 ) ) ) % 2 )"}
{"text":"$op = 0 ; Need to Insert 0 at middle","code":"else"}
{"text":"$op = 1 ; Need to Insert 1 at middle","code":"$ aux_num = ( int ) ( ( ( $ group_offset ) - ( 1 << ( $ group_no - 1 ) ) ) \/ 2 ) ; } return constructNthNumber ( $ group_no , $ aux_num , $ op ) ; }"}
{"text":"Driver code","code":"$ n = 9 ;"}
{"text":"Function Call","code":"print ( getNthNumber ( $ n ) ) ; ? >"}
{"text":"To count number of set bits","code":"< ? php function countSetBits ( $ n ) { $ count = 0 ; while ( $ n ) { $ n &= ( $ n - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"To calculate sum of numbers","code":"function findSum ( $ n ) { $ sum = 0 ;"}
{"text":"To count sum of number whose 2 bit are set","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) if ( countSetBits ( $ i ) == 2 ) $ sum += $ i ; return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo findSum ( $ n ) ; ? >"}
{"text":"function to toggle the last m bits","code":"< ? php function toggleLastMBits ( $ n , $ m ) {"}
{"text":"calculating a number ' num ' having ' m ' bits and all are set .","code":"$ num = ( 1 << $ m ) - 1 ;"}
{"text":"toggle the last m bits and return the number","code":"return ( $ n ^ $ num ) ; }"}
{"text":"Driver code","code":"{ $ n = 107 ; $ m = 4 ; echo toggleLastMBits ( $ n , $ m ) ; return 0 ; } ? >"}
{"text":"function to find the position of rightmost set bit .","code":"< ? php function getFirstSetBitPos ( $ n ) { return log ( $ n & - $ n ) + 1 ; }"}
{"text":"function to find the previous smaller integer","code":"function previousSmallerInteger ( $ n ) {"}
{"text":"position of rightmost set bit of n","code":"$ pos = getFirstSetBitPos ( $ n ) ;"}
{"text":"turn off or unset the bit at position ' pos '","code":"return ( $ n & ~ ( 1 << ( $ pos - 1 ) ) ) ; }"}
{"text":"Driver Code","code":"$ n = 25 ; echo \" Previous \u2581 smaller \u2581 Integer \u2581 = \u2581 \" , previousSmallerInteger ( $ n ) ; ? >"}
{"text":"function to check if all the bits are set or not in the binary representation of ' n '","code":"< ? php function areAllBitsSet ( $ n ) {"}
{"text":"all bits are not set","code":"if ( $ n == 0 ) return \" No \" ;"}
{"text":"loop till n becomes '0'","code":"while ( $ n > 0 ) {"}
{"text":"if the last bit is not set","code":"if ( ( $ n & 1 ) == 0 ) return \" No \" ;"}
{"text":"right shift ' n ' by 1","code":"$ n = $ n >> 1 ; }"}
{"text":"all bits are set","code":"return \" Yes \" ; }"}
{"text":"Driver Code","code":"$ n = 7 ; echo areAllBitsSet ( $ n ) ; ? >"}
{"text":"function to check if all the bits are set or not in the binary representation of ' n '","code":"< ? php function areAllBitsSet ( $ n ) {"}
{"text":"all bits are not set","code":"if ( $ n == 0 ) return \" No \" ;"}
{"text":"if true , then all bits are set","code":"if ( ( ( $ n + 1 ) & $ n ) == 0 ) return \" Yes \" ;"}
{"text":"else all bits are not set","code":"return \" No \" ; }"}
{"text":"Driver Code","code":"$ n = 7 ; echo areAllBitsSet ( $ n ) ; ? >"}
{"text":"function to find the position of rightmost set bit . Returns - 1 if there are no set bits","code":"< ? php function getFirstSetBitPos ( $ n ) { return ( log ( $ n & - $ n + 1 ) ) - 1 ; }"}
{"text":"function to find the next greater integer","code":"function nextGreaterWithOneMoreSetBit ( $ n ) {"}
{"text":"position of rightmost unset bit of n by passing ~ n as argument","code":"$ pos = getFirstSetBitPos ( ~ $ n ) ;"}
{"text":"if n consists of unset bits , then set the rightmost unset bit","code":"if ( $ pos > -1 ) return ( 1 << $ pos ) | $ n ;"}
{"text":"n does not consists of unset bits","code":"return ( ( $ n << 1 ) + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo \" Next \u2581 greater \u2581 integer \u2581 = \u2581 \" , nextGreaterWithOneMoreSetBit ( $ n ) ; ? >"}
{"text":"Function to find total 0 bit in a number","code":"< ? php function CountZeroBit ( $ x ) { $ count = 0 ; while ( $ x ) { if ( ! ( $ x & 1 ) ) $ count ++ ; $ x >>= 1 ; } return $ count ; }"}
{"text":"Function to find Count of non - negative numbers less than or equal to x , whose bitwise XOR and SUM with x are equal .","code":"function CountXORandSumEqual ( $ x ) {"}
{"text":"count number of zero bit in x","code":"$ count = CountZeroBit ( $ x ) ;"}
{"text":"power of 2 to count","code":"return ( 1 << $ count ) ; }"}
{"text":"Driver code","code":"$ x = 10 ;"}
{"text":"Function call","code":"echo CountXORandSumEqual ( $ x ) ; ? >"}
{"text":"Returns the missing number Size of arr2 [ ] is n - 1","code":"< ? php function missingNumber ( $ arr1 , $ arr2 , $ n ) {"}
{"text":"Missing number ' mnum '","code":"$ mnum = 0 ;"}
{"text":"1 st array is of size ' n '","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ mnum = $ mnum ^ $ arr1 [ $ i ] ;"}
{"text":"2 nd array is of size ' n \u2581 - \u2581 1'","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) $ mnum = $ mnum ^ $ arr2 [ $ i ] ;"}
{"text":"Required missing number","code":"return $ mnum ; }"}
{"text":"Driver Code","code":"$ arr1 = array ( 4 , 8 , 1 , 3 , 7 ) ; $ arr2 = array ( 7 , 4 , 3 , 1 ) ; $ n = count ( $ arr1 ) ; echo \" Missing \u2581 number \u2581 = \u2581 \" , missingNumber ( $ arr1 , $ arr2 , $ n ) ; ? >"}
{"text":"Returns max of three numbers","code":"< ? php function maxDD ( $ a , $ b , $ c ) { return max ( $ a , ( max ( $ b , $ c ) ) ) ; }"}
{"text":"Returns count of bits in N","code":"function bitCount ( $ N ) { $ cnt = 0 ; while ( $ N ) { $ cnt ++ ; $ N >>= 1 ; } return $ cnt ; }"}
{"text":"Returns bit at ' pos ' position","code":"function at_position ( $ num , $ pos ) { $ bit = $ num & ( 1 << $ pos ) ; return $ bit ; }"}
{"text":"Utility method to toggle bit at ' pos ' position","code":"function toggle ( & $ num , $ pos ) { $ num ^= ( 1 << $ pos ) ; }"}
{"text":"method returns minimum number of bit flip to get T as OR value of A and B","code":"function minChangeToReachTaregetOR ( $ A , $ B , $ K , $ T ) { $ maxlen = max ( bitCount ( $ A ) , bitCount ( $ B ) , bitCount ( $ T ) ) ;"}
{"text":"Loop over maximum number of bits among A , B and T","code":"for ( $ i = $ maxlen - 1 ; $ i >= 0 ; $ i -- ) { $ bitA = at_position ( $ A , $ i ) ; $ bitB = at_position ( $ B , $ i ) ; $ bitT = at_position ( $ T , $ i ) ;"}
{"text":"T 's bit is set, try to toggle  bit of B, if not already","code":"if ( $ bitT ) { if ( ! $ bitA && ! $ bitB ) { toggle ( $ B , $ i ) ; $ K -- ; } } else {"}
{"text":"if A 's bit is set,   flip that","code":"if ( $ bitA ) { toggle ( $ A , $ i ) ; $ K -- ; }"}
{"text":"if B 's bit is set,  flip that","code":"if ( $ bitB ) { toggle ( $ B , $ i ) ; $ K -- ; } } }"}
{"text":"if K is less than 0 then we can make A | B == T","code":"if ( $ K < 0 ) { echo \" Not \u2581 possible STRNEWLINE \" ; return ; }"}
{"text":"Loop over bits one more time to minimise A further","code":"for ( $ i = $ maxlen - 1 ; $ K > 0 && $ i >= 0 ; -- $ i ) { $ bitA = at_position ( $ A , $ i ) ; $ bitB = at_position ( $ B , $ i ) ; $ bitT = at_position ( $ T , $ i ) ; if ( $ bitT ) {"}
{"text":"If both bit are set , then Unset A 's bit to minimise it","code":"if ( $ bitA && $ bitB ) { toggle ( $ A , $ i ) ; $ K -- ; } }"}
{"text":"If A ' s \u2581 bit \u2581 is \u2581 1 \u2581 and \u2581 B ' s bit is 0 , toggle both","code":"if ( $ bitA && ! $ bitB && $ K >= 2 ) { toggle ( $ A , $ i ) ; toggle ( $ B , $ i ) ; $ K -= 2 ; } }"}
{"text":"Output changed value of A and B","code":"echo $ A , \" \" \u2581 , \u2581 $ B \u2581 , \u2581 \" \" }"}
{"text":"Driver Code","code":"$ A = 175 ; $ B = 66 ; $ K = 5 ; $ T = 100 ; minChangeToReachTaregetOR ( $ A , $ B , $ K , $ T ) ; ? >"}
{"text":"PHP program to find count of values whose XOR with x is greater than x and values are smaller than x","code":"< ? php function countValues ( $ x ) {"}
{"text":"Initialize result","code":"$ count = 0 ; $ n = 1 ;"}
{"text":"Traversing through all bits of x","code":"while ( $ x != 0 ) {"}
{"text":"If current last bit of x is set then increment count by n . Here n is a power of 2 corresponding to position of bit","code":"if ( $ x % 2 == 0 ) $ count += $ n ;"}
{"text":"Simultaneously calculate the 2 ^ n","code":"$ n *= 2 ;"}
{"text":"Replace x with x \/ 2 ;","code":"$ x \/= 2 ; $ x = ( int ) $ x ; } return $ count ; }"}
{"text":"Driver code","code":"$ x = 10 ; echo countValues ( $ x ) ; ? >"}
{"text":"function to construct new array","code":"< ? php function constructXOR ( & $ A , $ n ) {"}
{"text":"calculate xor of array","code":"$ XOR = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ XOR ^= $ A [ $ i ] ;"}
{"text":"update array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ A [ $ i ] = $ XOR ^ $ A [ $ i ] ; }"}
{"text":"Driver code","code":"$ A = array ( 2 , 4 , 1 , 3 , 5 ) ; $ n = sizeof ( $ A ) ; constructXOR ( $ A , $ n ) ;"}
{"text":"print result","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ A [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"Utility function to count total ones in a number","code":"< ? php function bitCount ( $ n ) { $ count = 0 ; while ( $ n ) { if ( $ n & 1 ) ++ $ count ; $ n >>= 1 ; } return $ count ; }"}
{"text":"Function to count pairs of K different bits","code":"function countPairsWithKDiff ( $ arr , $ n , $ k ) {"}
{"text":"initialize final answer","code":"$ ans = 0 ; for ( $ i = 0 ; $ i < $ n - 1 ; ++ $ i ) { for ( $ j = $ i + 1 ; $ j < $ n ; ++ $ j ) { $ xoredNum = $ arr [ $ i ] ^ $ arr [ $ j ] ;"}
{"text":"Check for K differ bit","code":"if ( $ k == bitCount ( $ xoredNum ) ) ++ $ ans ; } } return $ ans ; }"}
{"text":"Driver code","code":"$ k = 2 ; $ arr = array ( 2 , 4 , 1 , 3 , 1 ) ; $ n = count ( $ arr ) ; echo \" Total \u2581 pairs \u2581 for \u2581 k \u2581 = \u2581 \" , $ k , \" \u2581 are \u2581 \" , countPairsWithKDiff ( $ arr , $ n , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function for multiplication","code":"< ? php function multiply ( $ n , $ m ) { $ ans = 0 ; $ count = 0 ; while ( $ m ) {"}
{"text":"check for set bit and left shift n , count times","code":"if ( $ m % 2 == 1 ) $ ans += $ n << $ count ;"}
{"text":"increment of place value ( count )","code":"$ count ++ ; $ m \/= 2 ; } return $ ans ; }"}
{"text":"Driver code","code":"$ n = 20 ; $ m = 13 ; echo multiply ( $ n , $ m ) ; ? >"}
{"text":"function return true if A ^ B > 0 else false","code":"< ? php function EqualNumber ( $ A , $ B ) { return ( $ A ^ $ B ) ; }"}
{"text":"Driver Code","code":"$ A = 5 ; $ B = 6 ; echo ( ( int ) ! ( EqualNumber ( $ A , $ B ) ) ) . \" STRNEWLINE \" ; ? >"}
{"text":"Returns true if n has counts of consecutive 1 's are increasing order.","code":"< ? php function areSetBitsIncreasing ( $ n ) {"}
{"text":"Initialize previous count","code":"$ prev_count = PHP_INT_MAX ;"}
{"text":"We traverse bits from right to left and check if counts are decreasing order .","code":"while ( $ n > 0 ) {"}
{"text":"Ignore 0 s until we reach a set bit .","code":"while ( $ n > 0 && $ n % 2 == 0 ) $ n = $ n \/ 2 ;"}
{"text":"Count current set bits","code":"$ curr_count = 1 ; while ( $ n > 0 and $ n % 2 == 1 ) { $ n = $ n \/ 2 ; $ curr_count ++ ; }"}
{"text":"Compare current with previous and update previous .","code":"if ( $ curr_count >= $ prev_count ) return false ; $ prev_count = $ curr_count ; } return true ; }"}
{"text":"Driver code","code":"$ n = 10 ; if ( areSetBitsIncreasing ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns true if n has alternate bit pattern else false","code":"< ? php function findPattern ( $ n ) {"}
{"text":"Store last bit","code":"$ prev = $ n % 2 ; $ n = $ n \/ 2 ;"}
{"text":"Traverse through remaining bits","code":"while ( $ n > 0 ) { $ curr = $ n % 2 ;"}
{"text":"If current bit is same as previous","code":"if ( $ curr == $ prev ) return false ; $ prev = $ curr ; $ n = floor ( $ n \/ 2 ) ; } return true ; }"}
{"text":"Driver code","code":"$ n = 10 ; if ( findPattern ( $ n ) ) echo \" Yes \" ; else echo \" No \" ; return 0 ; ? >"}
{"text":"Returns XOR of counts 0 s and 1 s in binary representation of n .","code":"< ? php function countXOR ( $ n ) { $ count0 = 0 ; $ count1 = 0 ; while ( $ n ) {"}
{"text":"calculating count of zeros and ones","code":"( $ n % 2 == 0 ) ? $ count0 ++ : $ count1 ++ ; $ n = intval ( $ n \/ 2 ) ; } return ( $ count0 ^ $ count1 ) ; }"}
{"text":"Driver Code","code":"$ n = 31 ; echo countXOR ( $ n ) ; ? >"}
{"text":"Find position of MSB in n . For example if n = 17 , then position of MSB is 4. If n = 7 , value of MSB is 3","code":"< ? php function msbPos ( $ n ) { $ msb_p = -1 ; while ( $ n > 0 ) { $ n = $ n >> 1 ; $ msb_p ++ ; } return $ msb_p ; }"}
{"text":"Function to find Bit - wise & of all numbers from x to y .","code":"function andOperator ( $ x , $ y ) {"}
{"text":"$res = 0 ; Initialize result","code":"while ( $ x > 0 && $ y > 0 ) {"}
{"text":"Find positions of MSB in x and y","code":"$ msb_p1 = msbPos ( $ x ) ; $ msb_p2 = msbPos ( $ y ) ;"}
{"text":"If positions are not same , return","code":"if ( $ msb_p1 != $ msb_p2 ) break ;"}
{"text":"Add 2 ^ msb_p1 to result","code":"$ msb_val = ( 1 << $ msb_p1 ) ; $ res = $ res + $ msb_val ;"}
{"text":"subtract 2 ^ msb_p1 from x and y .","code":"$ x = $ x - $ msb_val ; $ y = $ y - $ msb_val ; } return $ res ; }"}
{"text":"Driver code","code":"$ x = 10 ; $ y = 15 ; echo andOperator ( $ x , $ y ) ; ? >"}
{"text":"Function to find multiplication of n with 10 without using multiplication operator","code":"< ? php function multiplyTen ( $ n ) { return ( $ n << 1 ) + ( $ n << 3 ) ; }"}
{"text":"Driver Code","code":"$ n = 50 ; echo multiplyTen ( $ n ) ; ? >"}
{"text":"function to count number of values less than equal to n that satisfy the given condition","code":"< ? php function countValues ( $ n ) { $ countV = 0 ;"}
{"text":"Traverse all numbers from 0 to n and increment result only when given condition is satisfied .","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) if ( ( $ n + $ i ) == ( $ n ^ $ i ) ) $ countV ++ ; return $ countV ; }"}
{"text":"Driver Code","code":"$ n = 12 ; echo countValues ( $ n ) ; ? >"}
{"text":"function to count number of values less than equal to n that satisfy the given condition","code":"< ? php function countValues ( $ n ) {"}
{"text":"unset_bits keeps track of count of un - set bits in binary representation of n","code":"$ unset_bits = 0 ; while ( $ n ) { if ( ( $ n & 1 ) == 0 ) $ unset_bits ++ ; $ n = $ n >> 1 ; }"}
{"text":"Return 2 ^ unset_bits","code":"return 1 << $ unset_bits ; }"}
{"text":"Driver code","code":"$ n = 12 ; echo countValues ( $ n ) ; ? >"}
{"text":"Returns ' e ' if profession of node at given level and position is engineer . Else doctor . The function assumes that given position and level have valid values .","code":"< ? php function findProffesion ( $ level , $ pos ) {"}
{"text":"Base case","code":"if ( $ level == 1 ) return ' e ' ;"}
{"text":"Recursively find parent 's  profession. If parent is  a Doctor, this node will  be a doctor if it is at  odd position and an engineer  if at even position","code":"if ( findProffesion ( $ level - 1 , ( $ pos + 1 ) \/ 2 ) == ' d ' ) return ( $ pos % 2 ) ? ' d ' : ' e ' ;"}
{"text":"If parent is an engineer , then current node will be an engineer if at odd position and doctor if even position .","code":"return ( $ pos % 2 ) ? ' e ' : ' d ' ; }"}
{"text":"Driver code","code":"$ level = 4 ; $ pos = 2 ; if ( ( findProffesion ( $ level , $ pos ) == ' e ' ) == true ) echo \" Engineer \" ; else echo \" Doctor \" ; ? >"}
{"text":"Prints first n numbers with two set bits","code":"< ? php function printTwoSetBitNums ( $ n ) {"}
{"text":"Initialize higher of two sets bits","code":"$ x = 1 ;"}
{"text":"Keep reducing n for every number with two set bits .","code":"while ( $ n > 0 ) {"}
{"text":"Consider all lower set bits for current higher set bit","code":"$ y = 0 ; while ( $ y < $ x ) {"}
{"text":"Print current number","code":"echo ( 1 << $ x ) + ( 1 << $ y ) , \" \u2581 \" ;"}
{"text":"If we have found n numbers","code":"$ n -- ; if ( $ n == 0 ) return ;"}
{"text":"Consider next lower bit for current higher bit .","code":"$ y ++ ; }"}
{"text":"Increment higher set bit","code":"$ x ++ ; } }"}
{"text":"Driver code","code":"printTwoSetBitNums ( 4 ) ; ? >"}
{"text":"Random Function to that returns 0 or 1 with equal probability","code":"< ? php function rand50 ( ) {"}
{"text":"rand ( ) function will generate odd or even number with equal probability . If rand ( ) generates odd number , the function will return 1 else it will return 0.","code":"return rand ( ) & 1 ; }"}
{"text":"Random Function to that returns 1 with 75 % probability and 0 with 25 % probability using Bitwise OR","code":"function rand75 ( ) { return rand50 ( ) | rand50 ( ) ; }"}
{"text":"Driver Code Initialize random number generator","code":"srand ( time ( NULL ) ) ; for ( $ i = 0 ; $ i < 50 ; $ i ++ ) echo rand75 ( ) ;"}
{"text":"This code is contributed m_kit","code":"? >"}
{"text":"Function to find the even occurring elements in given array","code":"< ? php function printRepeatingEven ( $ arr , $ n ) { $ _xor = 0 ; $ pos ;"}
{"text":"do for each element of array","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) {"}
{"text":"left - shift 1 by value of current element","code":"$ pos = 1 << $ arr [ $ i ] ;"}
{"text":"Toggle the bit everytime element gets repeated","code":"$ _xor ^= $ pos ; }"}
{"text":"Traverse array again and use _xor to find even occurring elements","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) {"}
{"text":"left - shift 1 by value of current element","code":"$ pos = 1 << $ arr [ $ i ] ;"}
{"text":"Each 0 in _xor represents an even occurrence","code":"if ( ! ( $ pos & $ _xor ) ) {"}
{"text":"print the even occurring numbers","code":"echo $ arr [ $ i ] , \" \" ;"}
{"text":"set bit as 1 to avoid printing duplicates","code":"$ _xor ^= $ pos ; } } }"}
{"text":"Driver code","code":"$ arr = array ( 9 , 12 , 23 , 10 , 12 , 12 , 15 , 23 , 14 , 12 , 15 ) ; $ n = sizeof ( $ arr ) ; printRepeatingEven ( $ arr , $ n ) ; ? >"}
{"text":"Function to get no of set bits in binary representation of passed binary no .","code":"< ? php function countSetBits ( $ x ) { $ count = 0 ; while ( $ x ) { $ x &= ( $ x - 1 ) ; $ count ++ ; } return $ count ; }"}
{"text":"Returns true if n is Bleak","code":"function isBleak ( $ n ) {"}
{"text":"Check for all numbers ' x ' smaller than n . If x + countSetBits ( x ) becomes n , then n can 't be Bleak","code":"for ( $ x = 1 ; $ x < $ n ; $ x ++ ) if ( $ x + countSetBits ( $ x ) == $ n ) return false ; return true ; }"}
{"text":"Driver code","code":"if ( isBleak ( 3 ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; if ( isBleak ( 4 ) ) echo \" Yes STRNEWLINE \" ; else echo \" No STRNEWLINE \" ; ? >"}
{"text":"Number of bits to represent int","code":"< ? php $ INT_BITS = 32 ;"}
{"text":"Function to return maximum XOR subset in set [ ]","code":"function maxSubarrayXOR ( & $ set , $ n ) { global $ INT_BITS ;"}
{"text":"Initialize index of chosen elements","code":"$ index = 0 ;"}
{"text":"Traverse through all bits of integer starting from the most significant bit ( MSB )","code":"for ( $ i = $ INT_BITS - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Initialize index of maximum element and the maximum element","code":"$ maxInd = $ index ; $ maxEle = 0 ; for ( $ j = $ index ; $ j < $ n ; $ j ++ ) {"}
{"text":"If i 'th bit of set[j]  is set and set[j] is  greater than max so far.","code":"if ( ( $ set [ $ j ] & ( 1 << $ i ) ) != 0 && $ set [ $ j ] > $ maxEle ) { $ maxEle = $ set [ $ j ] ; $ maxInd = $ j ; } }"}
{"text":"If there was no element with i 'th  bit set, move to smaller i","code":"if ( $ maxEle == 0 ) continue ;"}
{"text":"Put maximum element with i ' th \u2581 bit \u2581 \u2581 set \u2581 at \u2581 index \u2581 ' index '","code":"$ t = $ set [ $ index ] ; $ set [ $ index ] = $ set [ $ maxInd ] ; $ set [ $ maxInd ] = $ t ;"}
{"text":"Update maxInd and increment index","code":"$ maxInd = $ index ;"}
{"text":"Do XOR of set [ maxIndex ] with all numbers having i 'th bit as set.","code":"for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"XOR set [ maxInd ] those numbers which have the i 'th bit set","code":"if ( $ j != $ maxInd && ( $ set [ $ j ] & ( 1 << $ i ) ) != 0 ) $ set [ $ j ] = $ set [ $ j ] ^ $ set [ $ maxInd ] ; }"}
{"text":"Increment index of chosen elements","code":"$ index ++ ; }"}
{"text":"Final result is XOR of all elements","code":"$ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ res ^= $ set [ $ i ] ; return $ res ; }"}
{"text":"Driver Code","code":"$ set = array ( 9 , 8 , 5 ) ; $ n = sizeof ( $ set ) ; echo \" Max \u2581 subset \u2581 XOR \u2581 is \u2581 \" ; echo maxSubarrayXOR ( $ set , $ n ) ; ? >"}
{"text":"Returns XOR of all XOR 's of given subset","code":"< ? php function findXOR ( $ Set , $ n ) {"}
{"text":"XOR is 1 only when n is 1 , else 0","code":"if ( $ n == 1 ) return $ Set [ 0 ] ; else return 0 ; }"}
{"text":"Driver Code","code":"$ Set = array ( 1 , 2 , 3 ) ; $ n = count ( $ Set ) ; echo \" XOR \u2581 of \u2581 XOR ' s \u2581 of \u2581 all \u2581 subsets \u2581 is \u2581 \" , findXOR ( $ Set , $ n ) ; ? >"}
{"text":"Returns XOR of x and y","code":"< ? php function myXOR ( $ x , $ y ) { return ( $ x $ y ) & ( ~ $ x ~ $ y ) ; }"}
{"text":"Driver Code","code":"$ x = 3 ; $ y = 5 ; echo \" XOR \u2581 is \u2581 \" , myXOR ( $ x , $ y ) ; ? >"}
{"text":"PHP code to implement FreivaldaTMs Algorithm","code":"< ? php $ N = 2 ;"}
{"text":"Function to check if ABx = Cx","code":"function freivald ( $ a , $ b , $ c ) { global $ N ;"}
{"text":"Generate a random vector","code":"$ r = array ( ) ; $ br = array ( ) ; $ cr = array ( ) ; $ axbr = array ( ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { $ r [ $ i ] = mt_rand ( ) % 2 ; $ br [ $ i ] = 0 ; $ cr [ $ i ] = 0 ; $ axbr [ $ i ] = 0 ; }"}
{"text":"Now comput B * r for evaluating expression A * ( B * r ) - ( C * r )","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) $ br [ $ i ] = $ br [ $ i ] + $ b [ $ i ] [ $ j ] * $ r [ $ j ] ; }"}
{"text":"Now comput C * r for evaluating expression A * ( B * r ) - ( C * r )","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) $ cr [ $ i ] = $ cr [ $ i ] + $ c [ $ i ] [ $ j ] * $ r [ $ j ] ; }"}
{"text":"Now comput A * ( B * r ) for evaluating expression A * ( B * r ) - ( C * r )","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) $ axbr [ $ i ] = $ axbr [ $ i ] + $ a [ $ i ] [ $ j ] * $ br [ $ j ] ; }"}
{"text":"Finally check if value of expression A * ( B * r ) - ( C * r ) is 0 or not","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( $ axbr [ $ i ] - $ cr [ $ i ] != 0 ) return false ; return true ; }"}
{"text":"Runs k iterations Freivald . The value of k determines accuracy . Higher value means higher accuracy .","code":"function isProduct ( $ a , $ b , $ c , $ k ) { for ( $ i = 0 ; $ i < $ k ; $ i ++ ) if ( freivald ( $ a , $ b , $ c ) == false ) return false ; return true ; }"}
{"text":"Driver code","code":"$ a = array ( array ( 1 , 1 ) , array ( 1 , 1 ) ) ; $ b = array ( array ( 1 , 1 ) , array ( 1 , 1 ) ) ; $ c = array ( array ( 2 , 2 ) , array ( 2 , 2 ) ) ; $ k = 2 ; if ( isProduct ( $ a , $ b , $ c , $ k ) ) echo ( \" Yes \" ) ; else echo ( \" No \" ) ; ? >"}
{"text":"Function to calculate expectation","code":"< ? php function calc_Expectation ( $ a , $ n ) {"}
{"text":"variable prb is for probability of each element which is same for each element","code":"$ prb = ( 1 \/ $ n ) ;"}
{"text":"calculating expectation overall","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ a [ $ i ] * $ prb ;"}
{"text":"returning expectation as sum","code":"return $ sum ; }"}
{"text":"Driver Code","code":"$ n = 6.0 ; $ a = array ( 1.0 , 2.0 , 3.0 , 4.0 , 5.0 , 6.0 ) ;"}
{"text":"Function for calculating expectation","code":"$ expect = calc_Expectation ( $ a , $ n ) ;"}
{"text":"Display expectation of given array","code":"echo \" Expectation \u2581 of \u2581 array \u2581 E ( X ) \u2581 is \u2581 : \u2581 \" . $ expect . \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the required points","code":"< ? php function findPoints ( $ l1 , $ r1 , $ l2 , $ r2 ) { $ x = ( $ l1 != $ l2 ) ? min ( $ l1 , $ l2 ) : -1 ; $ y = ( $ r1 != $ r2 ) ? max ( $ r1 , $ r2 ) : -1 ; echo $ x , \" \" , $ y ; }"}
{"text":"Driver code","code":"$ l1 = 5 ; $ r1 = 10 ; $ l2 = 1 ; $ r2 = 7 ; findPoints ( $ l1 , $ r1 , $ l2 , $ r2 ) ; ? >"}
{"text":"A NON - tail - recursive function . The function is not tail recursive because the value returned by fact ( n - 1 ) is used in fact ( n ) and call to fact ( n - 1 ) is not the last thing done by fact ( n )","code":"< ? php function fact ( $ n ) { if ( $ n == 0 ) return 1 ; return $ n * fact ( $ n - 1 ) ; }"}
{"text":"Driver Code","code":"echo fact ( 5 ) ; ? >"}
{"text":"Function to print the elements in descending along with their frequencies","code":"< ? php function printElements ( & $ a , $ n ) {"}
{"text":"Sorts the element in decreasing order","code":"rsort ( $ a ) ; $ cnt = 1 ;"}
{"text":"traverse the array elements","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) {"}
{"text":"Prints the number and count","code":"if ( $ a [ $ i ] != $ a [ $ i + 1 ] ) { echo ( $ a [ $ i ] ) ; echo ( \" \u2581 occurs \u2581 \" ) ; echo $ cnt ; echo ( \" \u2581 times STRNEWLINE \" ) ; $ cnt = 1 ; } else $ cnt += 1 ; }"}
{"text":"Prints the last step","code":"echo ( $ a [ $ n - 1 ] ) ; echo ( \" \u2581 occurs \u2581 \" ) ; echo $ cnt ; echo ( \" \u2581 times STRNEWLINE \" ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 1 , 1 , 2 , 3 , 4 , 9 , 9 , 10 ) ; $ n = sizeof ( $ a ) ; printElements ( $ a , $ n ) ; ? >"}
{"text":"PHP implementation of the approach from math import log2 , floor","code":"< ? php $ SMALL_N = 1000000 ; $ LARGE_N = 1000000000000000 ;"}
{"text":"Function to return the value of f ( n ) for given values of a , b , c , n","code":"function func ( $ a , $ b , $ c , $ n ) { $ res = $ a * $ n ; $ logVlaue = floor ( log ( $ n , 2 ) ) ; $ res += $ b * $ n * $ logVlaue ; $ res += $ c * ( $ n * $ n * $ n ) ; return $ res ; } function getPositionInSeries ( $ a , $ b , $ c , $ k ) { global $ SMALL_N , $ LARGE_N ; $ start = 1 ; $ end = $ SMALL_N ;"}
{"text":"if c is 0 , then value of n can be in order of 10 ^ 15. if c != 0 , then n ^ 3 value has to be in order of 10 ^ 18 so maximum value of n can be 10 ^ 6.","code":"if ( $ c == 0 ) $ end = $ LARGE_N ; $ ans = 0 ;"}
{"text":"for efficient searching , use binary search .","code":"while ( $ start <= $ end ) { $ mid = ( int ) ( ( $ start + $ end ) \/ 2 ) ; $ val = func ( $ a , $ b , $ c , $ mid ) ; if ( $ val == $ k ) { $ ans = $ mid ; break ; } else if ( $ val > $ k ) $ end = $ mid - 1 ; else $ start = $ mid + 1 ; } return $ ans ; }"}
{"text":"Driver code","code":"$ a = 2 ; $ b = 1 ; $ c = 1 ; $ k = 12168587437017 ; print ( getPositionInSeries ( $ a , $ b , $ c , $ k ) ) ; ? >"}
{"text":"Function that will tell whether such Indices present or Not .","code":"< ? php function checkIndices ( $ Arr , $ N ) { for ( $ i = 0 ; $ i < $ N - 1 ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) {"}
{"text":"Checking 1 st condition i . e whether Arr [ i ] equal to Arr [ j ] or not","code":"if ( $ Arr [ $ i ] != $ Arr [ $ j ] ) {"}
{"text":"Checking 2 nd condition i . e whether Arr [ Arr [ i ] ] equal to Arr [ Arr [ j ] ] or not .","code":"if ( $ Arr [ $ Arr [ $ i ] - 1 ] == $ Arr [ $ Arr [ $ j ] - 1 ] ) return true ; } } } return false ; }"}
{"text":"Driver Code","code":"$ Arr = array ( 3 , 2 , 1 , 1 , 4 ) ; $ N = sizeof ( $ Arr ) ;"}
{"text":"Calling function .","code":"if ( checkIndices ( $ Arr , $ N ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Returns number of pairs in arr [ 0. . n - 1 ] with sum equal to ' sum '","code":"< ? php function printPairs ( $ arr , $ n , $ sum ) {"}
{"text":"Initialize result","code":"$ count = 0 ;"}
{"text":"Consider all possible pairs and check their sums","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ i ] + $ arr [ $ j ] == $ sum ) echo \" ( \" , $ arr [ $ i ] , \" , \u2581 \" , $ arr [ $ j ] , \" ) \" , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 5 , 7 , -1 , 5 ) ; $ n = sizeof ( $ arr ) ; $ sum = 6 ; printPairs ( $ arr , $ n , $ sum ) ; ? >"}
{"text":"To find minimum sum of unique elements .","code":"< ? php function minSum ( $ arr , $ n ) { $ sum = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] == $ arr [ $ i - 1 ] ) {"}
{"text":"While current element is same as previous or has become smaller than previous .","code":"$ j = $ i ; while ( $ j < $ n && $ arr [ $ j ] <= $ arr [ $ j - 1 ] ) { $ arr [ $ j ] = $ arr [ $ j ] + 1 ; $ j ++ ; } } $ sum = $ sum + $ arr [ $ i ] ; } return $ sum ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 2 , 3 , 5 , 6 ) ; $ n = sizeof ( $ arr ) ; echo minSum ( $ arr , $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"To find minimum sum of unique elements .","code":"< ? php function minSum ( $ arr , $ n ) { $ sum = $ arr [ 0 ] ; $ prev = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If violation happens , make current value as 1 plus previous value and add to sum .","code":"if ( $ arr [ $ i ] <= $ prev ) { $ prev = $ prev + 1 ; $ sum = $ sum + $ prev ; }"}
{"text":"No violation .","code":"else { $ sum = $ sum + $ arr [ $ i ] ; $ prev = $ arr [ $ i ] ; } } return $ sum ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 2 , 3 , 5 , 6 ) ; $ n = count ( $ arr ) ; echo minSum ( $ arr , $ n ) ; ? >"}
{"text":"To check the string formed from multiplicand , multiplier and product is pandigital","code":"< ? php function isPandigital ( $ str ) { if ( strlen ( $ str ) != 9 ) return false ; $ x = str_split ( $ str ) ; sort ( $ x ) ; $ x = implode ( $ x ) ; return strcmp ( $ x , \"123456789\" ) ; }"}
{"text":"calculate the multiplicand , multiplier , and product eligible for pandigital","code":"function PandigitalProduct_1_9 ( $ n ) { for ( $ i = 1 ; $ i * $ i <= $ n ; $ i ++ ) if ( $ n % $ i == 0 && isPandigital ( strval ( $ n ) . strval ( $ i ) . strval ( ( int ) ( $ n \/ $ i ) ) ) ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ n = 6050 ; if ( PandigitalProduct_1_9 ( $ n ) ) echo \" yes \" ; else echo \" no \" ; ? >"}
{"text":"Function that sort input array a [ ] and calculate mode and median using counting sort .","code":"< ? php function printModeMedian ( $ a , $ n ) {"}
{"text":"The output array b [ ] will have sorted array","code":"$ b [ $ n ] = array ( ) ;"}
{"text":"variable to store max of input array which will to have size of count array","code":"$ max = max ( $ a ) ;"}
{"text":"auxiliary ( count ) array to store count . Initialize count array as 0. Size of count array will be equal to ( max + 1 ) .","code":"$ t = $ max + 1 ; $ count [ $ t ] = array ( ) ; for ( $ i = 0 ; $ i < $ t ; $ i ++ ) $ count [ $ i ] = 0 ;"}
{"text":"Store count of each element of input array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count [ $ a [ $ i ] ] ++ ;"}
{"text":"mode is the index with maximum count","code":"$ mode = 0 ; $ k = $ count [ 0 ] ; for ( $ i = 1 ; $ i < $ t ; $ i ++ ) { if ( $ count [ $ i ] > $ k ) { $ k = $ count [ $ i ] ; $ mode = $ i ; } }"}
{"text":"Update count [ ] array with sum","code":"for ( $ i = 1 ; $ i < $ t ; $ i ++ ) $ count [ $ i ] = $ count [ $ i ] + $ count [ $ i - 1 ] ;"}
{"text":"Sorted output array b [ ] to calculate median","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ b [ $ count [ $ a [ $ i ] ] - 1 ] = $ a [ $ i ] ; $ count [ $ a [ $ i ] ] -- ; }"}
{"text":"Median according to odd and even array size respectively .","code":"$ median ; if ( $ n % 2 != 0 ) $ median = $ b [ $ n \/ 2 ] ; else $ median = ( $ b [ ( $ n - 1 ) \/ 2 ] + $ b [ ( $ n \/ 2 ) ] ) \/ 2.0 ;"}
{"text":"Output the result","code":"echo \" median = \" , \u2581 $ median , \u2581 \" \" \u2581 ; STRNEWLINE echo \u2581 \" mode = \" }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 4 , 1 , 2 , 7 , 1 , 2 , 5 , 3 , 6 ) ; $ n = sizeof ( $ a ) ; printModeMedian ( $ a , $ n ) ; ? >"}
{"text":"PHP implementation to check if both halves of the string have at least one different character","code":"< ? php $ MAX = 26 ;"}
{"text":"Function which break string into two halves Counts frequency of characters in each half Compares the two counter array and returns true if these counter arrays differ","code":"function function_1 ( $ str ) { global $ MAX ; $ l = strlen ( $ str ) ;"}
{"text":"Declaration and initialization of counter array","code":"$ counter1 = array_fill ( 0 , $ MAX , NULL ) ; $ counter2 = array_fill ( 0 , $ MAX , NULL ) ; for ( $ i = 0 ; $ i < $ l \/ 2 ; $ i ++ ) $ counter1 [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ; for ( $ i = $ l \/ 2 ; $ i < $ l ; $ i ++ ) $ counter2 [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ; for ( $ i = 0 ; $ i < $ MAX ; $ i ++ ) if ( $ counter2 [ $ i ] != $ counter1 [ $ i ] ) return true ; return false ; }"}
{"text":"Driver function","code":"$ str = \" abcasdsabcae \" ; if ( function_1 ( $ str ) ) echo \" Yes , \u2581 both \u2581 halves \u2581 differ \" . \" \u2581 by \u2581 at \u2581 least \u2581 one \u2581 character \" ; else echo \" No , \u2581 both \u2581 halves \u2581 do \u2581 \" . \" not \u2581 differ \u2581 at \u2581 all \" ; return 0 ; ? >"}
{"text":"returns min difference between max and min of any K - size subset","code":"< ? php function minDifferenceAmongMaxMin ( $ arr , $ N , $ K ) { $ INT_MAX = 2 ;"}
{"text":"sort the array so that close elements come together .","code":"sort ( $ arr ) ; sort ( $ arr , $ N ) ;"}
{"text":"initialize result by a big integer number","code":"$ res = $ INT_MAX ;"}
{"text":"loop over first ( N - K ) elements of the array only","code":"for ( $ i = 0 ; $ i <= ( $ N - $ K ) ; $ i ++ ) {"}
{"text":"get difference between max and min of current K - sized segment","code":"$ curSeqDiff = $ arr [ $ i + $ K - 1 ] - $ arr [ $ i ] ; $ res = min ( $ res , $ curSeqDiff ) ; } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 20 , 30 , 100 , 101 , 102 ) ; $ N = sizeof ( $ arr ) ; $ K = 3 ; echo minDifferenceAmongMaxMin ( $ arr , $ N , $ K ) ; ? >"}
{"text":"Method returns the position of arr [ idx ] after performing stable - sort on array","code":"< ? php function getIndexInSortedArray ( $ arr , $ n , $ idx ) {"}
{"text":"Count of elements smaller than current element plus the equal element occurring before given index","code":"$ result = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If element is smaller then increase the smaller count","code":"if ( $ arr [ $ i ] < $ arr [ $ idx ] ) $ result ++ ;"}
{"text":"If element is equal then increase count only if it occurs before","code":"if ( $ arr [ $ i ] == $ arr [ $ idx ] and $ i < $ idx ) $ result ++ ; } return $ result ; }"}
{"text":"Driver Code","code":"$ arr = array ( 3 , 4 , 3 , 5 , 2 , 3 , 4 , 3 , 1 , 5 ) ; $ n = count ( $ arr ) ; $ idxOfEle = 5 ; echo getIndexInSortedArray ( $ arr , $ n , $ idxOfEle ) ; ? >"}
{"text":"Function that returns the second largest element in the array if exists , else 0","code":"< ? php function getMaxValue ( $ arr , $ arr_size ) {"}
{"text":"There must be at least two elements","code":"if ( $ arr_size < 2 ) { return 0 ; }"}
{"text":"To store the maximum and the second maximum element from the array","code":"$ first = $ second = - ( PHP_INT_MAX - 1 ) ; for ( $ i = 0 ; $ i < $ arr_size ; $ i ++ ) {"}
{"text":"If current element is greater than first then update both first and second","code":"if ( $ arr [ $ i ] > $ first ) { $ second = $ first ; $ first = $ arr [ $ i ] ; }"}
{"text":"If arr [ i ] is in between first and second then update second","code":"else if ( $ arr [ $ i ] > $ second && $ arr [ $ i ] != $ first ) $ second = $ arr [ $ i ] ; }"}
{"text":"No second maximum found","code":"if ( $ second == - ( PHP_INT_MAX - 1 ) ) return 0 ; else return $ second ; }"}
{"text":"Driver code","code":"$ arr = array ( 4 , 5 , 1 , 8 ) ; $ n = count ( $ arr ) ; echo getMaxValue ( $ arr , $ n ) ; ? >"}
{"text":"Function to return the maximum result","code":"< ? php function maximumResult ( $ a , $ b , $ c ) {"}
{"text":"To store the count of negative integers","code":"$ countOfNegative = 0 ;"}
{"text":"Sum of all the three integers","code":"$ sum = $ a + $ b + $ c ;"}
{"text":"Product of all the three integers","code":"$ product = $ a * $ b * $ c ;"}
{"text":"To store the smallest and the largest among all the three integers","code":"$ largest = max ( $ a , $ b , $ c ) ; $ smallest = min ( $ a , $ b , $ c ) ;"}
{"text":"Calculate the count of negative integers","code":"if ( $ a < 0 ) $ countOfNegative ++ ; if ( $ b < 0 ) $ countOfNegative ++ ; if ( $ c < 0 ) $ countOfNegative ++ ;"}
{"text":"Depending upon count of negatives","code":"switch ( $ countOfNegative ) {"}
{"text":"When all three are positive integers","code":"case 0 : return ( $ sum - $ largest ) * $ largest ;"}
{"text":"For single negative integer","code":"case 1 : return ( $ product \/ $ smallest ) + $ smallest ;"}
{"text":"For two negative integers","code":"case 2 : return ( $ product \/ $ largest ) + $ largest ;"}
{"text":"For three negative integers","code":"case 3 : return ( $ sum - $ smallest ) * $ smallest ; } }"}
{"text":"Driver Code","code":"$ a = -2 ; $ b = -1 ; $ c = -4 ; echo maximumResult ( $ a , $ b , $ c ) ; ? >"}
{"text":"Function to return the number of students that can pass","code":"< ? php function check ( $ n , $ marks ) {"}
{"text":"maximum marks","code":"$ x = max ( $ marks ) ;"}
{"text":"maximum bonus marks that can be given","code":"$ bonus = 100 - $ x ; $ c = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"counting the number of students that can pass","code":"if ( $ marks [ $ i ] + $ bonus >= 50 ) $ c += 1 ; } return $ c ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ marks = array ( 0 , 21 , 83 , 45 , 64 ) ; echo check ( $ n , $ marks ) ;"}
{"text":"Function to return the sum of first n natural numbers which are not positive powers of k","code":"< ? php function find_sum ( $ n , $ k ) {"}
{"text":"sum of first n natural numbers","code":"$ total_sum = ( $ n * ( $ n + 1 ) ) \/ 2 ; $ power = $ k ; while ( $ power <= $ n ) {"}
{"text":"subtract all positive powers of k which are less than n","code":"$ total_sum -= $ power ;"}
{"text":"next power of k","code":"$ power *= $ k ; } return $ total_sum ; }"}
{"text":"Driver code","code":"$ n = 11 ; $ k = 2 ; echo find_sum ( $ n , $ k ) ; ? >"}
{"text":"function to find minimum operations","code":"< ? php function minOperations ( & $ arr , $ n ) { $ hashTable = array ( ) ;"}
{"text":"sort array","code":"sort ( $ arr ) ;"}
{"text":"prepare hash of array","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ hashTable [ $ arr [ $ i ] ] ++ ; $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ hashTable [ $ arr [ $ i ] ] ) { for ( $ j = $ i ; $ j < $ n ; $ j ++ ) if ( $ arr [ $ j ] % $ arr [ $ i ] == 0 ) $ hashTable [ $ arr [ $ j ] ] = 0 ; $ res ++ ; } } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 4 , 6 , 2 , 8 , 7 , 21 , 24 , 49 , 44 ) ; $ n = sizeof ( $ arr ) ; echo minOperations ( $ arr , $ n ) ; ? >"}
{"text":"PHP program to find possibility to sort by multiple subarray reverse operarion","code":"< ? php function ifPossible ( & $ arr , $ n ) { $ cp = array ( ) ;"}
{"text":"making the copy of the original array","code":"$ cp = $ arr ;"}
{"text":"sorting the copied array","code":"sort ( $ cp ) ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"checking mirror image of elements of sorted copy array and equivalent element of original array","code":"if ( ! ( $ arr [ $ i ] == $ cp [ $ i ] ) && ! ( $ arr [ $ n - 1 - $ i ] == $ cp [ $ i ] ) ) return false ; } return true ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 7 , 6 , 4 , 5 , 3 , 2 , 8 ) ; $ n = sizeof ( $ arr ) ; if ( ifPossible ( $ arr , $ n ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to return the minimum cost to reach the last index","code":"< ? php function FindMinimumCost ( $ ind , $ a , $ n , $ k , $ dp ) {"}
{"text":"If we reach the last index","code":"if ( $ ind == ( $ n - 1 ) ) return 0 ;"}
{"text":"Already visited state","code":"else if ( $ dp [ $ ind ] != -1 ) return $ dp [ $ ind ] ; else {"}
{"text":"Initially maximum","code":"$ ans = PHP_INT_MAX ;"}
{"text":"Visit all possible reachable index","code":"for ( $ i = 1 ; $ i <= $ k ; $ i ++ ) {"}
{"text":"If inside range","code":"if ( $ ind + $ i < $ n ) $ ans = min ( $ ans , abs ( $ a [ $ ind + $ i ] - $ a [ $ ind ] ) + FindMinimumCost ( $ ind + $ i , $ a , $ n , $ k , $ dp ) ) ;"}
{"text":"We cannot move any further","code":"else break ; }"}
{"text":"Memoize","code":"return $ dp [ $ ind ] = $ ans ; } }"}
{"text":"Driver Code","code":"$ a = array ( 10 , 30 , 40 , 50 , 20 ) ; $ k = 3 ; $ n = sizeof ( $ a ) ; $ dp = array ( ) ; $ dp = array_fill ( 0 , $ n , -1 ) ; echo ( FindMinimumCost ( 0 , $ a , $ n , $ k , $ dp ) ) ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ MAX = 10000 ; $ prefix = array_fill ( 0 , $ MAX , 0 ) ;"}
{"text":"Function to calculate the prefix sum of all the even factors","code":"function sieve_modified ( ) { global $ MAX , $ prefix ; for ( $ i = 2 ; $ i < $ MAX ; $ i += 2 ) {"}
{"text":"Add i to all the multiples of i","code":"for ( $ j = $ i ; $ j < $ MAX ; $ j += $ i ) $ prefix [ $ j ] += $ i ; }"}
{"text":"Update the prefix sum","code":"for ( $ i = 1 ; $ i < $ MAX ; $ i ++ ) $ prefix [ $ i ] += $ prefix [ $ i - 1 ] ; }"}
{"text":"Function to return the sum of all the even factors of the numbers in the given range","code":"function sumEvenFactors ( $ L , $ R ) { global $ MAX , $ prefix ; return ( $ prefix [ $ R ] - $ prefix [ $ L - 1 ] ) ; }"}
{"text":"Driver code","code":"sieve_modified ( ) ; $ l = 6 ; $ r = 10 ; echo sumEvenFactors ( $ l , $ r ) ; ? >"}
{"text":"Function to find Number of proper bracket expressions","code":"< ? php function find ( $ index , $ openbrk , $ n , & $ dp , & $ adj ) {"}
{"text":"If open - closed brackets < 0","code":"if ( $ openbrk < 0 ) return 0 ;"}
{"text":"If index reaches the end of expression","code":"if ( $ index == $ n ) {"}
{"text":"If brackets are balanced","code":"if ( $ openbrk == 0 ) return 1 ; else return 0 ; }"}
{"text":"If already stored in dp","code":"if ( $ dp [ $ index ] [ $ openbrk ] != -1 ) return $ dp [ $ index ] [ $ openbrk ] ;"}
{"text":"If the current index has assigned open bracket","code":"if ( $ adj [ $ index ] == 1 ) {"}
{"text":"Move forward increasing the length of open brackets","code":"$ dp [ $ index ] [ $ openbrk ] = find ( $ index + 1 , $ openbrk + 1 , $ n , $ dp , $ adj ) ; } else {"}
{"text":"Move forward by inserting open as well as closed brackets on that index","code":"$ dp [ $ index ] [ $ openbrk ] = find ( $ index + 1 , $ openbrk + 1 , $ n , $ dp , $ adj ) + find ( $ index + 1 , $ openbrk - 1 , $ n , $ dp , $ adj ) ; }"}
{"text":"return the answer","code":"return $ dp [ $ index ] [ $ openbrk ] ; }"}
{"text":"DP array to precompute the answer","code":"$ N = 1000 ; $ dp = array ( array ( ) ) ; $ n = 2 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { for ( $ j = 0 ; $ j < $ N ; $ j ++ ) { $ dp [ $ i ] [ $ j ] = -1 ; } }"}
{"text":"Open brackets at position 1","code":"$ adj = array ( 1 , 0 , 0 , 0 ) ;"}
{"text":"Calling the find function to calculate the answer","code":"echo find ( 0 , 0 , 2 * $ n , $ dp , $ adj ) . \" STRNEWLINE \" ; ? >"}
{"text":"Utility function to find maximum possible value","code":"< ? php function findMaxValUtil ( $ arr , $ n , $ num , $ maxLimit , $ ind , & $ ans ) {"}
{"text":"If entire array is traversed , then compare current value in num to overall maximum obtained so far .","code":"if ( $ ind == $ n ) { $ ans = max ( $ ans , $ num ) ; return ; }"}
{"text":"Case 1 : Subtract current element from value so far if result is greater than or equal to zero .","code":"if ( $ num - $ arr [ $ ind ] >= 0 ) { findMaxValUtil ( $ arr , $ n , $ num - $ arr [ $ ind ] , $ maxLimit , $ ind + 1 , $ ans ) ; }"}
{"text":"Case 2 : Add current element to value so far if result is less than or equal to maxLimit .","code":"if ( $ num + $ arr [ $ ind ] <= $ maxLimit ) { findMaxValUtil ( $ arr , $ n , $ num + $ arr [ $ ind ] , $ maxLimit , $ ind + 1 , $ ans ) ; } }"}
{"text":"Function to find maximum possible value that can be obtained using array elements and given number .","code":"function findMaxVal ( $ arr , $ n , $ num , $ maxLimit ) {"}
{"text":"variable to store maximum value that can be obtained .","code":"$ ans = 0 ;"}
{"text":"variable to store current index position .","code":"$ ind = 0 ;"}
{"text":"call to utility function to find maximum possible value that can be obtained .","code":"findMaxValUtil ( $ arr , $ n , $ num , $ maxLimit , $ ind , $ ans ) ; return $ ans ; }"}
{"text":"Driver code","code":"$ num = 1 ; $ arr = array ( 3 , 10 , 6 , 4 , 5 ) ; $ n = count ( $ arr ) ; $ maxLimit = 15 ; echo ( findMaxVal ( $ arr , $ n , $ num , $ maxLimit ) ) ; ? >"}
{"text":"Function to print the equal sum sets of the array .","code":"< ? php function printSets ( $ set1 , $ set2 ) { $ i = 0 ;"}
{"text":"Print set 1.","code":"for ( $ i = 0 ; $ i < count ( $ set1 ) ; $ i ++ ) { echo ( $ set1 [ $ i ] . \" \" ) ; } echo ( \" STRNEWLINE \" ) ;"}
{"text":"Print set 2.","code":"for ( $ i = 0 ; $ i < count ( $ set2 ) ; $ i ++ ) { echo ( $ set2 [ $ i ] . \" \" ) ; } }"}
{"text":"Utility function to find the sets of the array which have equal sum .","code":"function findSets ( $ arr , $ n , & $ set1 , & $ set2 , $ sum1 , $ sum2 , $ pos ) {"}
{"text":"If entire array is traversed , compare both the sums .","code":"if ( $ pos == $ n ) {"}
{"text":"If sums are equal print both sets and return true to show sets are found .","code":"if ( $ sum1 == $ sum2 ) { printSets ( $ set1 , $ set2 ) ; return true ; }"}
{"text":"If sums are not equal then return sets are not found .","code":"else return false ; }"}
{"text":"Add current element to set 1.","code":"array_push ( $ set1 , $ arr [ $ pos ] ) ;"}
{"text":"Recursive call after adding current element to set 1.","code":"$ res = findSets ( $ arr , $ n , $ set1 , $ set2 , $ sum1 + $ arr [ $ pos ] , $ sum2 , $ pos + 1 ) ;"}
{"text":"If this inclusion results in equal sum sets partition then return true to show desired sets are found .","code":"if ( $ res ) return $ res ;"}
{"text":"If not then backtrack by removing current element from set1 and include it in set 2.","code":"array_pop ( $ set1 ) ; array_push ( $ set2 , $ arr [ $ pos ] ) ;"}
{"text":"Recursive call after including current element to set 2.","code":"return findSets ( $ arr , $ n , $ set1 , $ set2 , $ sum1 , $ sum2 + $ arr [ $ pos ] , $ pos + 1 ) ; }"}
{"text":"Return true if array arr can be partitioned into two equal sum sets or not .","code":"function isPartitionPoss ( $ arr , $ n ) {"}
{"text":"Calculate sum of elements in array .","code":"$ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] ;"}
{"text":"If sum is odd then array cannot be partitioned .","code":"if ( $ sum % 2 != 0 ) return false ;"}
{"text":"Declare vectors to store both the sets .","code":"$ set1 = array ( ) ; $ set2 = array ( ) ;"}
{"text":"Find both the sets .","code":"return findSets ( $ arr , $ n , $ set1 , $ set2 , 0 , 0 , 0 ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 5 , 5 , 1 , 11 ) ; $ n = count ( $ arr ) ; if ( isPartitionPoss ( $ arr , $ n ) == false ) echo ( \" - 1\" ) ; ? >"}
{"text":"Function to compute maximum subarray sum in linear time .","code":"< ? php function maximumSumSubarray ( $ arr , $ n ) {"}
{"text":"Initialize minimum prefix sum to 0.","code":"$ min_prefix_sum = 0 ;"}
{"text":"Initialize maximum subarray sum so far to - infinity .","code":"$ res = PHP_INT_MIN ;"}
{"text":"Initialize and compute the prefix sum array .","code":"$ prefix_sum = array ( ) ; $ prefix_sum [ 0 ] = $ arr [ 0 ] ; for ( $ i = 1 ; $ i < $ n ; $ i ++ ) $ prefix_sum [ $ i ] = $ prefix_sum [ $ i - 1 ] + $ arr [ $ i ] ;"}
{"text":"loop through the array , keep track of minimum prefix sum so far and maximum subarray sum .","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ res = max ( $ res , $ prefix_sum [ $ i ] - $ min_prefix_sum ) ; $ min_prefix_sum = min ( $ min_prefix_sum , $ prefix_sum [ $ i ] ) ; } return $ res ; }"}
{"text":"Test case 1","code":"$ arr1 = array ( -2 , -3 , 4 , -1 , -2 , 1 , 5 , -3 ) ; $ n1 = count ( $ arr1 ) ; echo maximumSumSubarray ( $ arr1 , $ n1 ) , \" \" ;"}
{"text":"Test case 2","code":"$ arr2 = array ( 4 , -8 , 9 , -4 , 1 , -8 , -1 , 6 ) ; $ n2 = count ( $ arr2 ) ; echo maximumSumSubarray ( $ arr2 , $ n2 ) ; ? >"}
{"text":"PHP program to count numbers of n digits that are monotone .","code":"< ? php function getNumMonotone ( $ len ) {"}
{"text":"Considering all possible digits as { 1 , 2 , 3 , . .9 }","code":"$ DP_s = 9 ;"}
{"text":"DP [ i ] [ j ] is going to store monotone numbers of length i + 1 considering j + 1 digits .","code":"$ DP = array ( array_fill ( 0 , $ len , 0 ) , array_fill ( 0 , $ len , 0 ) ) ;"}
{"text":"Unit length numbers","code":"for ( $ i = 0 ; $ i < $ DP_s ; ++ $ i ) $ DP [ 0 ] [ $ i ] = $ i + 1 ;"}
{"text":"Single digit numbers","code":"for ( $ i = 0 ; $ i < $ len ; ++ $ i ) $ DP [ $ i ] [ 0 ] = 1 ;"}
{"text":"Filling rest of the entries in bottom up manner .","code":"for ( $ i = 1 ; $ i < $ len ; ++ $ i ) for ( $ j = 1 ; $ j < $ DP_s ; ++ $ j ) $ DP [ $ i ] [ $ j ] = $ DP [ $ i - 1 ] [ $ j ] + $ DP [ $ i ] [ $ j - 1 ] ; return $ DP [ $ len - 1 ] [ $ DP_s - 1 ] ; }"}
{"text":"Driver code","code":"echo getNumMonotone ( 10 ) ; ? >"}
{"text":"Function to find the n - th element","code":"< ? php function sequence ( $ n ) {"}
{"text":"Declare array to store sequence","code":"$ i ; $ f [ 0 ] = 0 ; $ f [ 1 ] = 1 ; $ f [ 2 ] = 1 ; for ( $ i = 3 ; $ i <= $ n ; $ i ++ ) $ f [ $ i ] = $ f [ $ f [ $ i - 1 ] ] + $ f [ $ i - $ f [ $ i - 1 ] ] ; return $ f [ $ n ] ; }"}
{"text":"Driver Code","code":"$ n = 10 ; echo ( sequence ( $ n ) ) ; ? >"}
{"text":"Returns product of maximum product increasing subsequence .","code":"< ? php function lis ( & $ arr , $ n ) { $ mpis = array_fill ( 0 , $ n , NULL ) ;"}
{"text":"Initialize MPIS values","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ mpis [ $ i ] = $ arr [ $ i ] ;"}
{"text":"Compute optimized MPIS values considering every element as ending element of sequence","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ i ; $ j ++ ) if ( $ arr [ $ i ] > $ arr [ $ j ] && $ mpis [ $ i ] < ( $ mpis [ $ j ] * $ arr [ $ i ] ) ) $ mpis [ $ i ] = $ mpis [ $ j ] * $ arr [ $ i ] ;"}
{"text":"Pick maximum of all product values","code":"return max ( $ mpis ) ; }"}
{"text":"Driver program to test above function","code":"$ arr = array ( 3 , 100 , 4 , 5 , 150 , 6 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo lis ( $ arr , $ n ) ; return 0 ; ? >"}
{"text":"PHP Program to print Hosoya 's triangle of height n.","code":"< ? php function Hosoya ( int $ n , int $ m ) {"}
{"text":"Base case","code":"if ( ( $ n == 0 && $ m == 0 ) || ( $ n == 1 && $ m == 0 ) || ( $ n == 1 && $ m == 1 ) || ( $ n == 2 && $ m == 1 ) ) return 1 ;"}
{"text":"Recursive step","code":"if ( $ n > $ m ) return Hosoya ( $ n - 1 , $ m ) + Hosoya ( $ n - 2 , $ m ) ; else if ( $ m == $ n ) return Hosoya ( $ n - 1 , $ m - 1 ) + Hosoya ( $ n - 2 , $ m - 2 ) ; else return 0 ; }"}
{"text":"Print the Hosoya triangle of height n .","code":"function printHosoya ( $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ i ; $ j ++ ) echo Hosoya ( $ i , $ j ) , \" \u2581 \" ; echo \" STRNEWLINE \" ; } }"}
{"text":"Driven Code","code":"$ n = 5 ; printHosoya ( $ n ) ; ? >"}
{"text":"Return euleriannumber A ( n , m )","code":"< ? php function eulerian ( $ n , $ m ) { if ( $ m >= $ n $ n == 0 ) return 0 ; if ( $ m == 0 ) return 1 ; return ( $ n - $ m ) * eulerian ( $ n - 1 , $ m - 1 ) + ( $ m + 1 ) * eulerian ( $ n - 1 , $ m ) ; }"}
{"text":"Driven Code","code":"$ n = 3 ; $ m = 1 ; echo eulerian ( $ n , $ m ) ; ? >"}
{"text":"function to find the longest Subsequence","code":"< ? php function largestSubset ( $ a , $ n ) {"}
{"text":"dp [ i ] is going to store size of largest divisible subset beginning with a [ i ] .","code":"$ dp = array ( ) ;"}
{"text":"Since last element is largest , d [ n - 1 ] is 1","code":"$ dp [ $ n - 1 ] = 1 ;"}
{"text":"Fill values for smaller elements .","code":"for ( $ i = $ n - 2 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Find all multiples of a [ i ] and consider the multiple that has largest subset beginning with it .","code":"$ mxm = 0 ; for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) if ( $ a [ $ j ] % $ a [ $ i ] == 0 or $ a [ $ i ] % $ a [ $ j ] == 0 ) $ mxm = max ( $ mxm , $ dp [ $ j ] ) ; $ dp [ $ i ] = 1 + $ mxm ; }"}
{"text":"Return maximum value from dp [ ]","code":"return max ( $ dp ) ; }"}
{"text":"Driver Code","code":"$ a = array ( 1 , 3 , 6 , 13 , 17 , 18 ) ; $ n = count ( $ a ) ; echo largestSubset ( $ a , $ n ) ; ? >"}
{"text":"Returns count of ways n people can remain single or paired up .","code":"< ? php function countFriendsPairings ( $ n ) { $ dp [ $ n + 1 ] = 0 ;"}
{"text":"Filling dp [ ] in bottom - up manner using recursive formula explained above .","code":"for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) { if ( $ i <= 2 ) $ dp [ $ i ] = $ i ; else $ dp [ $ i ] = $ dp [ $ i - 1 ] + ( $ i - 1 ) * $ dp [ $ i - 2 ] ; } return $ dp [ $ n ] ; }"}
{"text":"Driver code","code":"$ n = 4 ; echo countFriendsPairings ( $ n ) ; ? >"}
{"text":"Returns count of ways n people can remain single or paired up .","code":"< ? php function countFriendsPairings ( $ n ) { $ a = 1 ; $ b = 2 ; $ c = 0 ; if ( $ n <= 2 ) { return $ n ; } for ( $ i = 3 ; $ i <= $ n ; $ i ++ ) { $ c = $ b + ( $ i - 1 ) * $ a ; $ a = $ b ; $ b = $ c ; } return $ c ; }"}
{"text":"Driver code","code":"$ n = 4 ; print ( countFriendsPairings ( $ n ) ) ; ? >"}
{"text":"Returns length of LCS for X [ 0. . m - 1 ] , Y [ 0. . n - 1 ] and Z [ 0. . o - 1 ]","code":"< ? php function lcsOf3 ( $ X , $ Y , $ Z , $ m , $ n , $ o ) { $ L [ $ m + 1 ] [ $ n + 1 ] [ $ o + 1 ] = array ( array ( array ( ) ) ) ;"}
{"text":"Following steps build L [ m + 1 ] [ n + 1 ] [ o + 1 ] in bottom up fashion . Note that L [ i ] [ j ] [ k ] contains length of LCS of X [ 0. . i - 1 ] and Y [ 0. . j - 1 ] and Z [ 0. . ... k - 1 ]","code":"for ( $ i = 0 ; $ i <= $ m ; $ i ++ ) { for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) { for ( $ k = 0 ; $ k <= $ o ; $ k ++ ) { if ( $ i == 0 $ j == 0 $ k == 0 ) $ L [ $ i ] [ $ j ] [ $ k ] = 0 ; else if ( $ X [ $ i - 1 ] == $ Y [ $ j - 1 ] && $ X [ $ i - 1 ] == $ Z [ $ k - 1 ] ) $ L [ $ i ] [ $ j ] [ $ k ] = $ L [ $ i - 1 ] [ $ j - 1 ] [ $ k - 1 ] + 1 ; else $ L [ $ i ] [ $ j ] [ $ k ] = max ( max ( $ L [ $ i - 1 ] [ $ j ] [ $ k ] , $ L [ $ i ] [ $ j - 1 ] [ $ k ] ) , $ L [ $ i ] [ $ j ] [ $ k - 1 ] ) ; } } }"}
{"text":"L [ m ] [ n ] [ o ] contains length of LCS for X [ 0. . n - 1 ] and Y [ 0. . m - 1 ] and Z [ 0. . o - 1 ]","code":"return $ L [ $ m ] [ $ n ] [ $ o ] ; }"}
{"text":"Driver code","code":"$ X = \" AGGT12\" ; $ Y = \"12TXAYB \" ; $ Z = \"12XBA \" ; $ m = strlen ( $ X ) ; $ n = strlen ( $ Y ) ; $ o = strlen ( $ Z ) ; echo \" Length \u2581 of \u2581 LCS \u2581 is \u2581 \" . lcsOf3 ( $ X , $ Y , $ Z , $ m , $ n , $ o ) ; ? >"}
{"text":"This function mainly returns LCS ( str , str ) with a condition that same characters at same index are not considered .","code":"< ? php function findLongestRepeatingSubSeq ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Create and initialize DP table","code":"$ dp = array ( array ( ) ) ; for ( $ i = 0 ; $ i <= $ n ; $ i ++ ) for ( $ j = 0 ; $ j <= $ n ; $ j ++ ) $ dp [ $ i ] [ $ j ] = 0 ;"}
{"text":"Fill dp table ( similar to LCS loops )","code":"for ( $ i = 1 ; $ i <= $ n ; $ i ++ ) { for ( $ j = 1 ; $ j <= $ n ; $ j ++ ) {"}
{"text":"If characters match and indexes are not same","code":"if ( $ str [ $ i - 1 ] == $ str [ $ j - 1 ] && $ i != $ j ) $ dp [ $ i ] [ $ j ] = 1 + $ dp [ $ i - 1 ] [ $ j - 1 ] ;"}
{"text":"If characters do not match","code":"else $ dp [ $ i ] [ $ j ] = max ( $ dp [ $ i ] [ $ j - 1 ] , $ dp [ $ i - 1 ] [ $ j ] ) ; } } return $ dp [ $ n ] [ $ n ] ; }"}
{"text":"Driver Code","code":"$ str = \" aabb \" ; echo \" The \u2581 length \u2581 of \u2581 the \u2581 largest \u2581 \" . \" subsequence \u2581 that \u2581 repeats \u2581 itself \u2581 is \u2581 : \u2581 \" , findLongestRepeatingSubSeq ( $ str ) ; ? >"}
{"text":"Returns count of possible paths to reach cell at row number m and column number n from the topmost leftmost cell ( cell at 1 , 1 )","code":"< ? php function numberOfPaths ( $ m , $ n ) {"}
{"text":"Create a 1D array to store results of subproblems","code":"$ dp = array ( ) ; $ dp [ 0 ] = 1 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) { for ( $ j = 1 ; $ j < $ n ; $ j ++ ) { $ dp [ $ j ] += $ dp [ $ j - 1 ] ; } } return $ dp [ $ n - 1 ] ; }"}
{"text":"Driver Code","code":"echo numberOfPaths ( 3 , 3 ) ; ? >"}
{"text":"Function to find factorial of N with recursion","code":"< ? php function factorial ( $ N ) {"}
{"text":"base condition","code":"if ( $ N == 0 or $ N == 1 ) return 1 ;"}
{"text":"use recursion","code":"return $ N * factorial ( $ N - 1 ) ; }"}
{"text":"calculate Nth term of series","code":"function nthTerm ( $ N ) { return ( factorial ( $ N ) * ( $ N + 2 ) \/ 2 ) ; }"}
{"text":"Driver Code","code":"$ N = 6 ; echo nthTerm ( $ N ) ; ? >"}
{"text":"Function that returns true if some character exists in the given string whose frequency is equal to the sum frequencies of other characters of the string","code":"< ? php function isFrequencyEqual ( $ str , $ len ) {"}
{"text":"If string is of odd length","code":"if ( $ len % 2 == 1 ) return false ;"}
{"text":"To store the frequency of each character of the string","code":"$ freq = array ( ) ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) $ freq [ $ i ] = 0 ;"}
{"text":"Update the frequencies of the characters","code":"for ( $ i = 0 ; $ i < $ len ; $ i ++ ) $ freq [ ord ( $ str [ $ i ] ) - 97 ] ++ ; for ( $ i = 0 ; $ i < 26 ; $ i ++ ) if ( $ freq [ $ i ] == $ len \/ 2 ) return true ;"}
{"text":"No such character exists","code":"return false ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ len = strlen ( $ str ) ; if ( isFrequencyEqual ( $ str , $ len ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to count the number of minimal replacements","code":"< ? php function countMinimalReplacements ( $ s ) {"}
{"text":"Find the length of the string","code":"$ n = strlen ( $ s ) ; $ cnt = 0 ; $ str = \"012\" ;"}
{"text":"Iterate in the string","code":"for ( $ i = 1 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Check if adjacent is similar","code":"if ( $ s [ $ i ] == $ s [ $ i - 1 ] ) { $ cnt += 1 ;"}
{"text":"If not the last pair","code":"if ( $ i != ( $ n - 1 ) ) {"}
{"text":"Check for character which is not same in i + 1 and i - 1","code":"for ( $ it = 0 ; $ it < strlen ( $ str ) ; $ it ++ ) { if ( $ str [ $ it ] != $ s [ $ i + 1 ] && $ str [ $ it ] != $ s [ $ i - 1 ] ) { $ s [ $ i ] = $ str [ $ it ] ; break ; } } }"}
{"text":"else Last pair","code":"{"}
{"text":"Check for character which is not same in i - 1 index","code":"for ( $ it = 0 ; $ it < strlen ( $ str ) ; $ it ++ ) { if ( $ str [ $ it ] != $ s [ $ i - 1 ] ) { $ s [ $ i ] = $ str [ $ it ] ; break ; } } } } } return $ cnt ; }"}
{"text":"Driver Code","code":"$ s = \"201220211\" ; echo countMinimalReplacements ( $ s ) ; ? >"}
{"text":"Function that returns the index of next occurrence of the character c in string str starting from index start","code":"< ? php function nextIndex ( $ str , $ start , $ c ) {"}
{"text":"Starting from start","code":"for ( $ i = $ start ; $ i < strlen ( $ str ) ; $ i ++ ) {"}
{"text":"If current character = c","code":"if ( $ str [ $ i ] == $ c ) return $ i ; }"}
{"text":"Not found","code":"return -1 ; }"}
{"text":"Function to return the count of required sub - strings","code":"function countSubStrings ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Stores running count of ' x ' starting from the end","code":"$ countX = array ( 0 , $ n , NULL ) ; $ count = 0 ; for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { if ( $ str [ $ i ] == ' x ' ) $ count ++ ; $ countX [ $ i ] = $ count ; }"}
{"text":"Next index of ' x ' starting from index 0","code":"$ nextIndexX = nextIndex ( $ str , 0 , ' x ' ) ;"}
{"text":"Next index of ' y ' starting from index 0","code":"$ nextIndexY = nextIndex ( $ str , 0 , ' y ' ) ;"}
{"text":"To store the count of required sub - strings","code":"$ count = 0 ; while ( $ nextIndexX != -1 && $ nextIndexY != -1 ) {"}
{"text":"If ' y ' appears before ' x ' it won 't contribute to a valid sub-string","code":"if ( $ nextIndexX > $ nextIndexY ) {"}
{"text":"Find next occurrence of ' y '","code":"$ nextIndexY = nextIndex ( $ str , $ nextIndexY + 1 , ' y ' ) ; continue ; }"}
{"text":"If ' y ' appears after ' x ' every sub - string ending at an ' x ' appearing after this ' y ' and starting with the current ' x ' is a valid sub - string","code":"else { $ count += $ countX [ $ nextIndexY ] ;"}
{"text":"Find next occurrence of ' x '","code":"$ nextIndexX = nextIndex ( $ str , $ nextIndexX + 1 , ' x ' ) ; } }"}
{"text":"Return the count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ s = \" xyyxx \" ; echo countSubStrings ( $ s ) ; ? >"}
{"text":"Function to minimize string","code":"< ? php function minimize ( $ str ) { $ mstr = \" \u2581 \" ; $ flagchar = array_fill ( 0 , 26 , 0 ) ; $ l = strlen ( $ str ) ;"}
{"text":"duplicate characters are removed","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { $ ch = $ str [ $ i ] ;"}
{"text":"checks if character has previously occurred or not if not then add it to the minimized string ' mstr '","code":"if ( $ flagchar [ ord ( $ ch ) - 97 ] == 0 ) { $ mstr . = $ ch ; $ flagchar [ ord ( $ ch ) - 97 ] = 1 ; } }"}
{"text":"return $mstr ; minimized string","code":"}"}
{"text":"Utility function to print the minimized , replaced string","code":"function replaceMinimizeUtil ( $ str ) { $ finalStr = \" \" ; $ l = strlen ( $ str ) ;"}
{"text":"Creating final string by replacing character","code":"for ( $ i = 0 ; $ i < strlen ( $ minimizedStr ) ; $ i ++ ) { $ ch = $ minimizedStr [ $ i ] ;"}
{"text":"index calculation","code":"$ index = ( ord ( $ ch ) * ord ( $ ch ) ) % $ l ; $ finalStr = $ finalStr . $ str [ $ index ] ; }"}
{"text":"echo \" Final \u2581 string : \u2581 \" . $finalStr ; final string","code":"}"}
{"text":"Driver code","code":"$ str = \" geeks \" ; replaceMinimizeUtil ( $ str ) ; ? >"}
{"text":"function for calculating the encryption","code":"< ? php function cipher ( $ str ) { if ( ! ctype_alpha ( $ str ) ) { printf ( \" Enter \u2581 only \u2581 \" + \" alphabets \u2581 and \u2581 space STRNEWLINE \" ) ; return ; } printf ( \" Encrypted \u2581 Code \u2581 using \u2581 \" ) ; printf ( \" Latin \u2581 Alphabet STRNEWLINE \" ) ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] >= ' A ' && $ str [ $ i ] <= ' Z ' ) echo ( ord ( $ str [ $ i ] ) - 65 + 1 ) . \" \u2581 \" ; else if ( $ str [ $ i ] >= ' a ' && $ str [ $ i ] <= ' z ' ) echo ( ord ( $ str [ $ i ] ) - 97 + 1 ) . \" \u2581 \" ; } echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ str = \" geeksforgeeks \" ; cipher ( $ str ) ; ? >"}
{"text":"function to round the number","code":"< ? php function roundFunation ( $ n ) {"}
{"text":"Smaller multiple","code":"$ a = ( int ) ( $ n \/ 10 ) * 10 ;"}
{"text":"Larger multiple","code":"$ b = ( $ a + 10 ) ;"}
{"text":"Return of closest of two","code":"return ( $ n - $ a > $ b - $ n ) ? $ b : $ a ; }"}
{"text":"Driver Code","code":"$ n = 4722 ; echo roundFunation ( $ n ) , \" STRNEWLINE \" ; ? >"}
{"text":"PHP code to find number of subsequences of \" ab \" in the string S which is repeated K times .","code":"< ? php function countOccurrences ( $ s , $ K ) { $ n = strlen ( $ s ) ; $ C = 0 ; $ c1 = 0 ; $ c2 = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ s [ $ i ] == ' a ' )"}
{"text":"Count of ' a ' s","code":"$ c1 ++ ; if ( $ s [ $ i ] == ' b ' ) {"}
{"text":"Count of ' b ' s","code":"$ c2 ++ ;"}
{"text":"occurrence of \" ab \" s in string S","code":"$ C = $ C + $ c1 ; } }"}
{"text":"Add following two : 1 ) K * ( Occurrences of \" ab \" in single string ) 2 ) a is from one string and b is from other .","code":"return $ C * $ K + ( $ K * ( $ K - 1 ) \/ 2 ) * $ c1 * $ c2 ; }"}
{"text":"Driver code","code":"$ S = \" abcb \" ; $ k = 2 ; echo countOccurrences ( $ S , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find a string of length n with k distinct characters .","code":"< ? php function findString ( $ n , $ k ) {"}
{"text":"Initialize result with first k Latin letters","code":"$ res = \" \" ; for ( $ i = 0 ; $ i < $ k ; $ i ++ ) $ res = $ res . chr ( ord ( ' a ' ) + $ i ) ;"}
{"text":"Fill remaining n - k letters by repeating k letters again and again .","code":"$ count = 0 ; for ( $ i = 0 ; $ i < $ n - $ k ; $ i ++ ) { $ res = $ res . chr ( ord ( ' a ' ) + $ count ) ; $ count ++ ; if ( $ count == $ k ) $ count = 0 ; } return $ res ; }"}
{"text":"Driver code","code":"$ n = 5 ; $ k = 2 ; echo findString ( $ n , $ k ) ; ? >"}
{"text":"Function to check the Vowel","code":"< ? php function isVowel ( $ ch ) { $ ch = strtoupper ( $ ch ) ; return ( $ ch == ' A ' $ ch == ' E ' $ ch == ' I ' $ ch == ' O ' $ ch == ' U ' ) ; }"}
{"text":"to count total number of vowel from 0 to n","code":"function countVovels ( $ str , $ n ) { if ( $ n == 1 ) return isVowel ( $ str [ $ n - 1 ] ) ; return countVovels ( $ str , $ n - 1 ) + isVowel ( $ str [ $ n - 1 ] ) ; }"}
{"text":"string object","code":"$ str = \" abc \u2581 de \" ;"}
{"text":"Total numbers of Vowel","code":"echo countVovels ( $ str , strlen ( $ str ) ) . \" \" ; ? >"}
{"text":"Print all the rotated string .","code":"< ? php function printRotatedString ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Concatenate str with itself","code":"$ temp = $ str . $ str ;"}
{"text":"Print all substrings of size n . Note that size of temp is 2 n","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j != $ n ; $ j ++ ) print ( $ temp [ $ i + $ j ] ) ; print ( \" STRNEWLINE \" ) ; } }"}
{"text":"Driver code","code":"$ str = \" geeks \" ; printRotatedString ( $ str ) ; ? >"}
{"text":"PHP program to get same frequency character string by removal of at most one char","code":"< ? php $ M = 26 ;"}
{"text":"Utility method to get index of character ch in lower alphabet characters","code":"function getIdx ( $ ch ) { return ( $ ch - ' a ' ) ; }"}
{"text":"Returns true if all non - zero elements values are same","code":"function allSame ( & $ freq , $ N ) {"}
{"text":"get first non - zero element","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ freq [ $ i ] > 0 ) { $ same = $ freq [ $ i ] ; break ; } }"}
{"text":"check equality of each element with variable same","code":"for ( $ j = $ i + 1 ; $ j < $ N ; $ j ++ ) if ( $ freq [ $ j ] > 0 && $ freq [ $ j ] != $ same ) return false ; return true ; }"}
{"text":"Returns true if we can make all character frequencies same","code":"function possibleSameCharFreqByOneRemoval ( $ str ) { global $ M ; $ l = strlen ( $ str ) ;"}
{"text":"fill frequency array","code":"$ freq = array_fill ( 0 , $ M , NULL ) ; for ( $ i = 0 ; $ i < $ l ; $ i ++ ) $ freq [ getIdx ( $ str [ $ i ] ) ] ++ ;"}
{"text":"if all frequencies are same , then return true","code":"if ( allSame ( $ freq , $ M ) ) return true ;"}
{"text":"Try decreasing frequency of all character by one and then check all equality of all non - zero frequencies","code":"for ( $ c = ' a ' ; $ c <= ' z ' ; $ c ++ ) { $ i = getIdx ( $ c ) ;"}
{"text":"Check character only if it occurs in str","code":"if ( $ freq [ $ i ] > 0 ) { $ freq [ $ i ] -- ; if ( allSame ( $ freq , $ M ) ) return true ; $ freq [ $ i ] ++ ; } } return false ; }"}
{"text":"Driver code","code":"$ str = \" xyyzz \" ; if ( possibleSameCharFreqByOneRemoval ( $ str ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to find that number divisible by 11 or not","code":"< ? php function check ( $ str ) { $ n = strlen ( $ str ) ;"}
{"text":"Compute sum of even and odd digit sums","code":"$ oddDigSum = 0 ; $ evenDigSum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"When i is even , position of digit is odd","code":"if ( $ i % 2 == 0 ) $ oddDigSum += ( $ str [ $ i ] - '0' ) ; else $ evenDigSum += ( $ str [ $ i ] - '0' ) ; }"}
{"text":"Check its difference is divisible by 11 or not","code":"return ( ( $ oddDigSum - $ evenDigSum ) % 11 == 0 ) ; }"}
{"text":"Driver code","code":"$ str = \"76945\" ; $ x = check ( $ str ) ? \" Yes \" : \" No \u2581 \" ; echo ( $ x ) ; ? >"}
{"text":"function to calculate Hamming distance","code":"< ? php function hammingDist ( $ str1 , $ str2 ) { $ i = 0 ; $ count = 0 ; while ( isset ( $ str1 [ $ i ] ) != ' ' ) { if ( $ str1 [ $ i ] != $ str2 [ $ i ] ) $ count ++ ; $ i ++ ; } return $ count ; }"}
{"text":"Driver Code","code":"$ str1 = \" geekspractice \" ; $ str2 = \" nerdspractise \" ;"}
{"text":"function call","code":"echo hammingDist ( $ str1 , $ str2 ) ; ? >"}
{"text":"PHP program to check if two strings are k anagram or not .","code":"< ? php $ MAX_CHAR = 26 ;"}
{"text":"Function to check that string is k - anagram or not","code":"function arekAnagrams ( $ str1 , $ str2 , $ k ) { global $ MAX_CHAR ;"}
{"text":"If both strings are not of equal length then return false","code":"$ n = strlen ( $ str1 ) ; if ( strlen ( $ str2 ) != $ n ) return false ; $ count1 = ( 0 ) ; $ count2 = ( 0 ) ;"}
{"text":"Store the occurrence of all characters in a hash_array","code":"$ count = 0 ;"}
{"text":"Count number of characters that are different in both strings","code":"for ( $ i = 0 ; $ i < $ MAX_CHAR ; $ i ++ ) if ( $ count1 [ $ i ] > $ count2 [ $ i ] ) $ count = $ count + abs ( $ count1 [ $ i ] - $ count2 [ $ i ] ) ;"}
{"text":"Return true if count is less than or equal to k","code":"return ( $ count <= $ k ) ; }"}
{"text":"Driver Code","code":"$ str1 = \" anagram \" ; $ str2 = \" grammar \" ; $ k = 2 ; if ( arekAnagrams ( $ str1 , $ str2 , $ k ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"A simple PHP program to count number of substrings starting and ending with 1","code":"< ? php function countSubStr ( $ str ) {"}
{"text":"Pick a starting point","code":"for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) { if ( $ str [ $ i ] == '1' ) { $ m ++ ; } }"}
{"text":"Return count of possible pairs among m 1 's","code":"return $ m * ( $ m - 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ str = \"00100101\" ; echo countSubStr ( $ str ) ; ? >"}
{"text":"PHP program to count substrings with recursive sum equal to 9","code":"< ? php function count9s ( $ number ) {"}
{"text":"To store result","code":"$ count = 0 ; $ n = strlen ( $ number ) ;"}
{"text":"Consider every character as beginning of substring","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"sum of digits in current substring","code":"$ sum = $ number [ $ i ] - '0' ; if ( $ number [ $ i ] == '9' ) $ count ++ ;"}
{"text":"One by one choose every character as an ending character","code":"for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) {"}
{"text":"Add current digit to sum , if sum becomes multiple of 5 then increment count . Let us do modular arithmetic to avoid overflow for big strings","code":"$ sum = ( $ sum + $ number [ $ j ] - '0' ) % 9 ; if ( $ sum == 0 ) $ count ++ ; } } return $ count ; }"}
{"text":"Driver Code","code":"echo count9s ( \" 4189 \" ) , \" STRNEWLINE \" ; echo count9s ( \" 1809 \" ) ; ? >"}
{"text":"recursive method to collect coins from height array l to r , with height h already collected","code":"< ? php function minStepsRecur ( $ height , $ l , $ r , $ h ) {"}
{"text":"if l is more than r , no steps needed","code":"if ( $ l >= $ r ) return 0 ;"}
{"text":"loop over heights to get minimum height index","code":"$ m = $ l ; for ( $ i = $ l ; $ i < $ r ; $ i ++ ) if ( $ height [ $ i ] < $ height [ $ m ] ) $ m = $ i ;"}
{"text":"choose minimum from , 1 ) collecting coins using all vertical lines ( total r - l ) 2 ) collecting coins using lower horizontal lines and recursively on left and right segments","code":"return min ( $ r - $ l , minStepsRecur ( $ height , $ l , $ m , $ height [ $ m ] ) + minStepsRecur ( $ height , $ m + 1 , $ r , $ height [ $ m ] ) + $ height [ $ m ] - $ h ) ; }"}
{"text":"method returns minimum number of step to collect coin from stack , with height in height [ ] array","code":"function minSteps ( $ height , $ N ) { return minStepsRecur ( $ height , 0 , $ N , 0 ) ; }"}
{"text":"Driver Code","code":"$ height = array ( 2 , 1 , 2 , 5 , 1 ) ; $ N = sizeof ( $ height ) ; echo minSteps ( $ height , $ N ) ; ? >"}
{"text":"Function to find the Area of the Reuleaux triangle","code":"< ? php function ReuleauxArea ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Area of the Reuleaux triangle","code":"$ A = 0.70477 * pow ( $ a , 2 ) ; return $ A ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo ReuleauxArea ( $ a ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to return the side of the hexagon","code":"< ? php function hexagonside ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Side of the hexagon","code":"$ x = 0.5176 * $ a ; return $ x ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo hexagonside ( $ a ) ; ? >"}
{"text":"Function to find the side of the hexagon","code":"< ? php function hexagonside ( $ a ) {"}
{"text":"Side cannot be negative","code":"if ( $ a < 0 ) return -1 ;"}
{"text":"Side of the hexagon","code":"$ x = $ a \/ 3 ; return $ x ; }"}
{"text":"Driver code","code":"$ a = 6 ; echo hexagonside ( $ a ) ; ? >"}
{"text":"Function that returns the segment for the middle point","code":"< ? php function findSegment ( $ n , $ m , $ segment_length ) {"}
{"text":"the middle point","code":"$ meet_point = ( 1.0 * $ n ) \/ 2.0 ; $ sum = 0 ;"}
{"text":"stores the segment index","code":"$ segment_number = 0 ; for ( $ i = 0 ; $ i < $ m ; $ i ++ ) {"}
{"text":"increment sum by length of the segment","code":"$ sum += $ segment_length [ $ i ] ;"}
{"text":"if the middle is in between two segments","code":"if ( ( double ) $ sum == $ meet_point ) { $ segment_number = -1 ; break ; }"}
{"text":"if sum is greater than middle point","code":"if ( $ sum > $ meet_point ) { $ segment_number = $ i + 1 ; break ; } } return $ segment_number ; }"}
{"text":"Driver code","code":"$ n = 13 ; $ m = 3 ; $ segment_length = array ( 3 , 2 , 8 ) ; $ ans = findSegment ( $ n , $ m , $ segment_length ) ; echo ( $ ans ) ; ? >"}
{"text":"nC2 = ( n ) * ( n - 1 ) \/ 2 ;","code":"< ? php function countMaxIntersect ( $ n ) { return ( $ n ) * ( $ n - 1 ) \/ 2 ; }"}
{"text":"n is number of line","code":"$ n = 8 ; echo countMaxIntersect ( $ n ) . \" STRNEWLINE \" ; ? >"}
{"text":"function for surface area","code":"< ? php function surfaceArea ( $ a , $ b , $ h ) { return 5 * $ a * $ b + 5 * $ b * $ h ; }"}
{"text":"function for VOlume","code":"function volume ( $ b , $ h ) { return ( 5 * $ b * $ h ) \/ 2 ; }"}
{"text":"Driver Code","code":"$ a = 5 ; $ b = 3 ; $ h = 7 ; echo \" surface \u2581 area \u2581 = \u2581 \" , surfaceArea ( $ a , $ b , $ h ) , \" , \u2581 \" ; echo \" volume = \" ? >"}
{"text":"Function to check the point","code":"< ? php function checkpoint ( $ h , $ k , $ x , $ y , $ a ) {"}
{"text":"checking the equation of parabola with the given point","code":"$ p = pow ( ( $ y - $ k ) , 2 ) - 4 * $ a * ( $ x - $ h ) ; return $ p ; }"}
{"text":"Driver code","code":"$ h = 0 ; $ k = 0 ; $ x = 2 ; $ y = 1 ; $ a = 4 ; if ( checkpoint ( $ h , $ k , $ x , $ y , $ a ) > 0 ) echo \" Outside \" ; else if ( checkpoint ( $ h , $ k , $ x , $ y , $ a ) == 0 ) echo \" On \u2581 the \u2581 parabola \" ; else echo \" Inside \" ; ? >"}
{"text":"Function to check the point","code":"< ? php function checkpoint ( $ h , $ k , $ x , $ y , $ a , $ b ) {"}
{"text":"checking the equation of ellipse with the given point","code":"$ p = ( pow ( ( $ x - $ h ) , 2 ) \/ pow ( $ a , 2 ) ) + ( pow ( ( $ y - $ k ) , 2 ) \/ pow ( $ b , 2 ) ) ; return $ p ; }"}
{"text":"Driver code","code":"$ h = 0 ; $ k = 0 ; $ x = 2 ; $ y = 1 ; $ a = 4 ; $ b = 5 ; if ( checkpoint ( $ h , $ k , $ x , $ y , $ a , $ b ) > 1 ) echo ( \" Outside \" ) ; else if ( checkpoint ( $ h , $ k , $ x , $ y , $ a , $ b ) == 1 ) echo ( \" On \u2581 the \u2581 ellipse \" ) ; else echo ( \" Inside \" ) ; ? >"}
{"text":"Function to find the area of the inscribed circle","code":"< ? php function circlearea ( $ a , $ b ) {"}
{"text":"the diagonals cannot be negative","code":"if ( $ a < 0 $ b < 0 ) return -1 ;"}
{"text":"area of the circle","code":"$ A = ( 3.14 * pow ( $ a , 2 ) * pow ( $ b , 2 ) ) \/ ( 4 * ( pow ( $ a , 2 ) + pow ( $ b , 2 ) ) ) ; return $ A ; }"}
{"text":"Driver code","code":"$ a = 8 ; $ b = 10 ; echo circlearea ( $ a , $ b ) ; ? >"}
{"text":"Function to find the area of the biggest circle","code":"< ? php function circlearea ( $ l , $ b ) {"}
{"text":"the length and breadth cannot be negative","code":"if ( $ l < 0 $ b < 0 ) return -1 ;"}
{"text":"area of the circle","code":"if ( $ l < $ b ) return 3.14 * pow ( $ l \/ 2 , 2 ) ; else return 3.14 * pow ( $ b \/ 2 , 2 ) ; }"}
{"text":"Driver code","code":"$ l = 4 ; $ b = 8 ; echo circlearea ( $ l , $ b ) . \" STRNEWLINE \" ; ? >"}
{"text":"Function to find Centered cube number","code":"< ? php function centered_cube ( $ n ) {"}
{"text":"Formula to calculate nth Centered cube number & return it into main function .","code":"return ( 2 * $ n + 1 ) * ( $ n * $ n + $ n + 1 ) ; }"}
{"text":"Driver Code","code":"$ n = 3 ; echo $ n , \" th \u2581 Centered \u2581 cube \u2581 number : \u2581 \" ; echo centered_cube ( $ n ) ; echo \" STRNEWLINE \" ; $ n = 10 ; echo $ n , \" th \u2581 Centered \u2581 cube \u2581 number : \u2581 \" ; echo centered_cube ( $ n ) ; ? >"}
{"text":"function to find the center of the circle","code":"< ? php function center ( $ x1 , $ x2 , $ y1 , $ y2 ) { echo ( ( float ) ( $ x1 + $ x2 ) \/ 2 . \" , \u2581 \" . ( float ) ( $ y1 + $ y2 ) \/ 2 ) ; }"}
{"text":"Driven Code","code":"$ x1 = -9 ; $ y1 = 3 ; $ x2 = 5 ; $ y2 = -7 ; center ( $ x1 , $ x2 , $ y1 , $ y2 ) ; ? >"}
{"text":"utility Function","code":"< ? php function vol_of_octahedron ( $ side ) { return ( ( $ side * $ side * $ side ) * ( sqrt ( 2 ) \/ 3 ) ) ; }"}
{"text":"Driver Function","code":"$ side = 3 ; echo ( \" Volume \u2581 of \u2581 octahedron \u2581 = \" ) ; echo ( vol_of_octahedron ( $ side ) ) ; ? >"}
{"text":"Function to find the volume","code":"< ? php function volumeOfEllipsoid ( $ r1 , $ r2 , $ r3 ) { $ pi = 3.14 ; return 1.33 * $ pi * $ r1 * $ r2 * $ r3 ; }"}
{"text":"Driver Code","code":"$ r1 = 2.3 ; $ r2 = 3.4 ; $ r3 = 5.7 ; echo ( \" volume \u2581 of \u2581 ellipsoid \u2581 is \u2581 : \u2581 \" ) ; echo ( volumeOfEllipsoid ( $ r1 , $ r2 , $ r3 ) ) ; ? >"}
{"text":"Utility function","code":"< ? php function areaOctagon ( $ side ) { return ( 2 * ( 1 + sqrt ( 2 ) ) * $ side * $ side ) ; }"}
{"text":"Driver Code","code":"$ side = 4 ; echo ( \" Area \u2581 of \u2581 Regular \u2581 Octagon \u2581 = \u2581 \" ) ; echo ( areaOctagon ( $ side ) ) ; ? >"}
{"text":"utility function","code":"< ? php function areaCube ( $ a ) { return ( $ a * $ a * $ a ) ; } function surfaceCube ( $ a ) { return ( 6 * $ a * $ a ) ; }"}
{"text":"driver function","code":"$ a = 5 ; echo ( \" Area \u2581 = \u2581 \" ) ; echo ( areaCube ( $ a ) ) ; echo ( \" STRNEWLINE \" ) ; echo ( \" Total \u2581 surface \u2581 area \u2581 = \u2581 \" ) ; echo ( surfaceCube ( $ a ) ) ; ? >"}
{"text":"Minimum revolutions to move center from ( x1 , y1 ) to ( x2 , y2 )","code":"< ? php function minRevolutions ( $ r , $ x1 , $ y1 , $ x2 , $ y2 ) { $ d = sqrt ( ( $ x1 - $ x2 ) * ( $ x1 - $ x2 ) + ( $ y1 - $ y2 ) * ( $ y1 - $ y2 ) ) ; return ceil ( $ d \/ ( 2 * $ r ) ) ; }"}
{"text":"Driver code","code":"$ r = 2 ; $ x1 = 0 ; $ y1 = 0 ; $ x2 = 0 ; $ y2 = 4 ; echo minRevolutions ( $ r , $ x1 , $ y1 , $ x2 , $ y2 ) ; ? >"}
{"text":"limit for float comparison","code":"< ? php $ eps = .0000001 ;"}
{"text":"Utility method to get area of right angle triangle , given base and hypotenuse","code":"function getArea ( $ base , $ hypotenuse ) { $ height = sqrt ( $ hypotenuse * $ hypotenuse - $ base * $ base ) ; return 0.5 * $ base * $ height ; }"}
{"text":"Prints base and height of triangle using hypotenuse and area information","code":"function printRightAngleTriangle ( $ hypotenuse , $ area ) { global $ eps ; $ hsquare = $ hypotenuse * $ hypotenuse ;"}
{"text":"maximum area will be obtained when base and height are equal ( = sqrt ( h * h \/ 2 ) )","code":"$ sideForMaxArea = sqrt ( $ hsquare \/ 2.0 ) ; $ maxArea = getArea ( $ sideForMaxArea , $ hypotenuse ) ;"}
{"text":"if given area itself is larger than maxArea then no solution is possible","code":"if ( $ area > $ maxArea ) { echo \" Not \u2581 possiblen \" ; return ; } $ low = 0.0 ; $ high = $ sideForMaxArea ; $ base ;"}
{"text":"binary search for base","code":"while ( abs ( $ high - $ low ) > $ eps ) { $ base = ( $ low + $ high ) \/ 2.0 ; if ( getArea ( $ base , $ hypotenuse ) >= $ area ) $ high = $ base ; else $ low = $ base ; }"}
{"text":"get height by pythagorean rule","code":"$ height = sqrt ( $ hsquare - $ base * $ base ) ; echo ( ceil ( $ base ) ) , \" \u2581 \" , ( floor ( $ height ) ) , \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ hypotenuse = 5 ; $ area = 6 ; printRightAngleTriangle ( $ hypotenuse , $ area ) ; ? >"}
{"text":"Function to count Lattice points on a circle","code":"< ? php function countLattice ( $ r ) { if ( $ r <= 0 ) return 0 ;"}
{"text":"Initialize result as 4 for ( r , 0 ) , ( - r . 0 ) , ( 0 , r ) and ( 0 , - r )","code":"$ result = 4 ;"}
{"text":"Check every value that can be potential x","code":"for ( $ x = 1 ; $ x < $ r ; $ x ++ ) {"}
{"text":"Find a potential y","code":"$ ySquare = $ r * $ r - $ x * $ x ; $ y = ceil ( sqrt ( $ ySquare ) ) ;"}
{"text":"checking whether square root is an integer or not . Count increments by 4 for four different quadrant values","code":"if ( $ y * $ y == $ ySquare ) $ result += 4 ; } return $ result ; }"}
{"text":"Driver Code","code":"$ r = 5 ; echo countLattice ( $ r ) ; ? >"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"< ? php function power ( $ x , $ y , $ p ) {"}
{"text":"Initialize result","code":"$ res = 1 ;"}
{"text":"Update x if it is >= p","code":"$ x = $ x % $ p ; while ( $ y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( $ y & 1 ) $ res = ( $ res * $ x ) % $ p ;"}
{"text":"Y must be even now $y = $y >> 1 ; y = y \/ 2","code":"$ x = ( $ x * $ x ) % $ p ; } return $ res ; }"}
{"text":"Driver Code","code":"$ L = 2 ; $ P = pow ( 10 , 9 ) ; $ ans = power ( 325 , $ L , $ P ) ; echo $ ans , \" STRNEWLINE \" ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php $ MAXN = 30 ;"}
{"text":"Function to return the length of longest contiguous string containing only 4 aTMs from the first N characters of the string","code":"function countMaxLength ( $ N ) {"}
{"text":"Initialize result","code":"$ res = 0 ;"}
{"text":"Initialize prefix sum array of characters and product variable","code":"$ pre = array ( ) ; $ p = 1 ;"}
{"text":"Preprocessing of prefix sum array","code":"$ pre [ 0 ] = 0 ; for ( $ i = 1 ; $ i < $ GLOBALS [ ' AXN ' ; $ i ++ ) { $ p *= 2 ; $ pre [ $ i ] = $ pre [ $ i - 1 ] + $ i * $ p ; }"}
{"text":"Initialize variable to store the string length where N belongs to","code":"$ ind = 0 ;"}
{"text":"Finding the string length where N belongs to","code":"for ( $ i = 1 ; $ i < $ GLOBALS [ ' AXN ' ; $ i ++ ) { if ( $ pre [ $ i ] >= $ N ) { $ ind = $ i ; break ; } } $ x = $ N - $ pre [ $ ind - 1 ] ; $ y = 2 * $ ind - 1 ; if ( $ x >= $ y ) $ res = min ( $ x , $ y ) ; else $ res = max ( $ x , 2 * ( $ ind - 2 ) + 1 ) ; return $ res ; }"}
{"text":"Driver Code","code":"$ N = 25 ; echo countMaxLength ( $ N ) ; ? >"}
{"text":"-- -- - Recursion -- -- - method to find factorial of given number","code":"< ? php function factorialUsingRecursion ( $ n ) { if ( $ n == 0 ) return 1 ;"}
{"text":"recursion call","code":"return $ n * factorialUsingRecursion ( $ n - 1 ) ; }"}
{"text":"-- -- - Iteration -- -- - Method to find the factorial of a given number","code":"function factorialUsingIteration ( $ n ) { $ res = 1 ;"}
{"text":"using iteration","code":"for ( $ i = 2 ; $ i <= $ n ; $ i ++ ) $ res *= $ i ; return $ res ; }"}
{"text":"Driver method","code":"$ num = 5 ; print ( \" Factorial \u2581 of \u2581 \" . $ num . \" \u2581 using \u2581 Recursion \u2581 is : \u2581 \" . factorialUsingRecursion ( 5 ) . \" STRNEWLINE \" ) ; print ( \" Factorial \u2581 of \u2581 \" . $ num . \" \u2581 using \u2581 Iteration \u2581 is : \u2581 \" . factorialUsingIteration ( 5 ) . \" STRNEWLINE \" ) ; ? >"}
{"text":"Function to return the maximum sum for every possible sequence such that a [ i ] + a [ i + k ] + a [ i + 2 k ] + ... + a [ i + qk ] is maximized","code":"< ? php function maxSum ( $ arr , $ n , $ K ) {"}
{"text":"Initialize the maximum with the smallest value","code":"$ maximum = PHP_INT_MIN ;"}
{"text":"Initialize the sum array with zero","code":"$ sum = array ( $ n ) ;"}
{"text":"Iterate from the right","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) {"}
{"text":"Update the sum starting at the current element","code":"if ( $ i + $ K < $ n ) $ sum [ $ i ] = $ sum [ $ i + $ K ] + $ arr [ $ i ] ; else $ sum [ $ i ] = $ arr [ $ i ] ;"}
{"text":"Update the maximum so far","code":"$ maximum = max ( $ maximum , $ sum [ $ i ] ) ; } return $ maximum ; }"}
{"text":"Driver code","code":"{ $ arr = array ( 3 , 6 , 4 , 7 , 2 ) ; $ n = sizeof ( $ arr ) ; $ K = 2 ; echo ( maxSum ( $ arr , $ n , $ K ) ) ; }"}
{"text":"PHP implementation of the approach","code":"< ? php function findpair ( $ l , $ r ) { $ c = 0 ; for ( $ i = $ l ; $ i <= $ r ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j <= $ r ; $ j ++ ) { if ( $ j % $ i == 0 && $ j != $ i ) { echo ( $ i . \" , \u2581 \" . $ j ) ; $ c = 1 ; break ; } } if ( $ c == 1 ) break ; } }"}
{"text":"Driver code","code":"$ l = 1 ; $ r = 10 ; findpair ( $ l , $ r ) ; ? >"}
{"text":"Function that returns true if the array can be reduced to 0 s with the given operation performed given number of times","code":"< ? php function check ( & $ arr , $ N , $ K ) {"}
{"text":"Add in Set only unique elements","code":"$ unique = array_unique ( $ arr ) ;"}
{"text":"Count of all the unique elements in the array","code":"if ( count ( $ unique ) == $ K ) return true ; return false ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 1 , 2 , 3 ) ; $ N = count ( $ arr ) ; $ K = 3 ; if ( check ( $ arr , $ N , $ K ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"Function to return the minimum required index","code":"< ? php function minIndex ( $ arr , $ n , $ pos ) { $ num = $ arr [ $ pos ] ;"}
{"text":"Start from arr [ pos - 1 ]","code":"$ i = $ pos - 1 ; while ( $ i >= 0 ) { if ( $ arr [ $ i ] != $ num ) break ; $ i -- ; }"}
{"text":"All elements are equal from arr [ i + 1 ] to arr [ pos ]","code":"return $ i + 1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 1 , 1 , 1 , 5 , 2 ) ; $ n = sizeof ( $ arr ) ; $ pos = 4 ;"}
{"text":"Function Call","code":"echo minIndex ( $ arr , $ n , $ pos ) ; ? >"}
{"text":"Function to return the count of the required strings","code":"< ? php function findAnswer ( $ str1 , $ str2 , $ n ) { $ ans = 2 ;"}
{"text":"Searching index after longest common prefix ends","code":"for ( $ i = 0 ; $ i < $ n ; ++ $ i ) { if ( $ str1 [ $ i ] != $ str2 [ $ i ] ) { $ l = $ i ; break ; } }"}
{"text":"Searching index before longest common suffix ends","code":"for ( $ i = $ n - 1 ; $ i >= 0 ; $ i -- ) { if ( $ str1 [ $ i ] != $ str2 [ $ i ] ) { $ r = $ i ; break ; } }"}
{"text":"If str1 = str2","code":"if ( $ r < $ l ) return 26 * ( $ n + 1 ) ;"}
{"text":"If only 1 character is different in both the strings","code":"else if ( $ l == $ r ) return $ ans ; else {"}
{"text":"Checking remaining part of string for equality","code":"for ( $ i = $ l + 1 ; $ i <= $ r ; $ i ++ ) { if ( $ str1 [ $ i ] != $ str2 [ $ i - 1 ] ) { $ ans -- ; break ; } }"}
{"text":"Searching in right of string h ( g to h )","code":"for ( $ i = $ l + 1 ; $ i <= $ r ; $ i ++ ) { if ( $ str1 [ $ i - 1 ] != $ str2 [ $ i ] ) { $ ans -- ; break ; } } return $ ans ; } }"}
{"text":"Driver code","code":"$ str1 = \" toy \" ; $ str2 = \" try \" ; $ n = strlen ( $ str1 ) ; echo findAnswer ( $ str1 , $ str2 , $ n ) ; ? >"}
{"text":"Function to return the minimum required difference","code":"< ? php function findMinDifference ( $ arr , $ n ) {"}
{"text":"Sort the given array","code":"sort ( $ arr , 0 ) ;"}
{"text":"When minimum element is removed","code":"$ diff1 = $ arr [ $ n - 1 ] - $ arr [ 1 ] ;"}
{"text":"When maximum element is removed","code":"$ diff2 = $ arr [ $ n - 2 ] - $ arr [ 0 ] ;"}
{"text":"Return the minimum of diff1 and diff2","code":"return min ( $ diff1 , $ diff2 ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 2 , 4 , 3 , 4 ) ; $ n = sizeof ( $ arr ) ; echo findMinDifference ( $ arr , $ n ) ;"}
{"text":"Function to return the minimum required difference","code":"< ? php function findMinDifference ( $ arr , $ n ) { $ min__ = $ secondMax = ( $ arr [ 0 ] < $ arr [ 1 ] ) ? $ arr [ 0 ] : $ arr [ 1 ] ; $ max__ = $ secondMin = ( $ arr [ 0 ] < $ arr [ 1 ] ) ? $ arr [ 1 ] : $ arr [ 0 ] ; for ( $ i = 2 ; $ i < $ n ; $ i ++ ) {"}
{"text":"If current element is greater than max","code":"if ( $ arr [ $ i ] > $ max__ ) {"}
{"text":"max will become secondMax","code":"$ secondMax = $ max__ ;"}
{"text":"Update the max","code":"$ max__ = $ arr [ $ i ] ; }"}
{"text":"If current element is greater than secondMax but smaller than max","code":"else if ( $ arr [ $ i ] > $ secondMax ) {"}
{"text":"Update the secondMax","code":"$ secondMax = $ arr [ $ i ] ; }"}
{"text":"If current element is smaller than min","code":"else if ( $ arr [ $ i ] < $ min__ ) {"}
{"text":"min will become secondMin","code":"$ secondMin = $ min__ ;"}
{"text":"Update the min","code":"$ min__ = $ arr [ $ i ] ; }"}
{"text":"If current element is smaller than secondMin but greater than min","code":"else if ( $ arr [ $ i ] < $ secondMin ) {"}
{"text":"Update the secondMin","code":"$ secondMin = $ arr [ $ i ] ; } }"}
{"text":"Minimum of the two possible differences","code":"$ diff = min ( $ max__ - $ secondMin , $ secondMax - $ min__ ) ; return $ diff ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 4 , 3 , 4 ) ; $ n = count ( $ arr ) ; print ( findMinDifference ( $ arr , $ n ) ) ; ? >"}
{"text":"Boolean function to check distinct digits of a number","code":"< ? php function checkDistinct ( $ x ) {"}
{"text":"Take last digit","code":"$ last = $ x % 10 ;"}
{"text":"Check if all other digits are same as last digit","code":"while ( $ x ) { if ( $ x % 10 != $ last ) return false ;"}
{"text":"Remove last digit","code":"$ x = floor ( $ x \/ 10 ) ; } return true ; }"}
{"text":"Function to return the count of integers that are composed of a single distinct digit only","code":"function findCount ( $ L , $ R ) { $ count = 0 ; for ( $ i = $ L ; $ i <= $ R ; $ i ++ ) {"}
{"text":"If i has single distinct digit","code":"if ( checkDistinct ( $ i ) ) $ count += 1 ; } return $ count ; }"}
{"text":"Driver code","code":"$ L = 10 ; $ R = 50 ; echo findCount ( $ L , $ R ) ; ? >"}
{"text":"Function to return the sum of the minimum pair from the array","code":"< ? php function smallest_pair ( $ a , $ n ) { $ min = PHP_INT_MAX ; $ secondMin = PHP_INT_MAX ; for ( $ j = 0 ; $ j < $ n ; $ j ++ ) {"}
{"text":"If found new minimum","code":"if ( $ a [ $ j ] < $ min ) {"}
{"text":"Minimum now becomes second minimum","code":"$ secondMin = $ min ;"}
{"text":"Update minimum","code":"$ min = $ a [ $ j ] ; }"}
{"text":"If current element is > min and < secondMin","code":"else if ( ( $ a [ $ j ] < $ secondMin ) && $ a [ $ j ] != $ min )"}
{"text":"Update secondMin","code":"$ secondMin = $ a [ $ j ] ; }"}
{"text":"Return the sum of the minimum pair","code":"return ( $ secondMin + $ min ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 2 , 3 ) ; $ n = sizeof ( $ arr ) ; echo smallest_pair ( $ arr , $ n ) ; ? >"}
{"text":"function to find longest subarray","code":"< ? php function longestsubarray ( $ arr , $ n , $ k ) { $ current_count = 0 ;"}
{"text":"This will contain length of longest subarray found","code":"$ max_count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] % $ k == 0 ) $ current_count ++ ; else $ current_count = 0 ; $ max_count = max ( $ current_count , $ max_count ) ; } return $ max_count ; }"}
{"text":"Driver code","code":"$ arr = array ( 2 , 5 , 11 , 32 , 64 , 88 ) ; $ n = sizeof ( $ arr ) ; $ k = 8 ; echo longestsubarray ( $ arr , $ n , $ k ) ; ? >"}
{"text":"function to check if two consecutive same characters are present","code":"< ? php function check ( $ s ) { for ( $ i = 0 ; $ i < strlen ( $ s ) - 1 ; $ i ++ ) if ( $ s [ $ i ] == $ s [ $ i + 1 ] ) return true ; return false ; }"}
{"text":"Driver Code","code":"$ s = \" xzyyz \" ; if ( check ( $ s ) ) echo \" YES \" , \" STRNEWLINE \" ; else echo \" NO \" , \" STRNEWLINE \" ; ? >"}
{"text":"A simple PHP solution to count anomalies in an array .","code":"< ? php function countAnomalies ( & $ arr , $ n , $ k ) { $ res = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) if ( $ i != $ j && abs ( $ arr [ $ i ] - $ arr [ $ j ] ) <= $ k ) break ; if ( $ j == $ n ) $ res ++ ; } return $ res ; }"}
{"text":"Driver Code","code":"$ arr = array ( 7 , 1 , 8 ) ; $ k = 5 ; $ n = sizeof ( $ arr ) ; echo countAnomalies ( $ arr , $ n , $ k ) ; ? >"}
{"text":"Function to find the column with max difference","code":"< ? php function colMaxDiff ( $ mat ) { $ N = 5 ; $ max_diff = PHP_INT_MIN ;"}
{"text":"Traverse matrix column wise","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"Insert elements of column to vector","code":"$ max_val = $ mat [ 0 ] [ $ i ] ; $ min_val = $ mat [ 0 ] [ $ i ] ; for ( $ j = 1 ; $ j < $ N ; $ j ++ ) { $ max_val = max ( $ max_val , $ mat [ $ j ] [ $ i ] ) ; $ min_val = min ( $ min_val , $ mat [ $ j ] [ $ i ] ) ; }"}
{"text":"calculating difference between maximum and minimum","code":"$ max_diff = max ( $ max_diff , $ max_val - $ min_val ) ; } return $ max_diff ; }"}
{"text":"driver code","code":"$ mat = array ( array ( 1 , 2 , 3 , 4 , 5 ) , array ( 5 , 3 , 5 , 4 , 0 ) , array ( 5 , 6 , 7 , 8 , 9 ) , array ( 0 , 6 , 3 , 4 , 12 ) , array ( 9 , 7 , 12 , 4 , 3 ) ) ; echo \" Max \u2581 difference \u2581 : \u2581 \" . colMaxDiff ( $ mat ) . \" STRNEWLINE \" ;"}
{"text":"A binary search based program to find the only missing number in a sorted array of distinct elements within limited range .","code":"< ? php function search ( $ ar , $ size ) { $ a = 0 ; $ b = $ size - 1 ; $ mid ; while ( ( $ b - $ a ) > 1 ) { $ mid = ( int ) ( ( $ a + $ b ) \/ 2 ) ; if ( ( $ ar [ $ a ] - $ a ) != ( $ ar [ $ mid ] - $ mid ) ) $ b = $ mid ; else if ( ( $ ar [ $ b ] - $ b ) != ( $ ar [ $ mid ] - $ mid ) ) $ a = $ mid ; } return ( $ ar [ $ a ] + 1 ) ; }"}
{"text":"Driver Code","code":"$ ar = array ( 1 , 2 , 3 , 4 , 5 , 6 , 8 ) ; $ size = sizeof ( $ ar ) ; echo \" Missing \u2581 number : \u2581 \" , search ( $ ar , $ size ) ; ? >"}
{"text":"Delete L to R elements","code":"< ? php function deleteElement ( & $ A , $ L , $ R , $ N ) { $ i = 0 ; $ j = 0 ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) { if ( $ i <= $ L $ i >= $ R ) { $ A [ $ j ] = $ A [ $ i ] ; $ j ++ ; } }"}
{"text":"Return size of Array after delete element","code":"return $ j ; }"}
{"text":"Driver Code","code":"$ A = array ( 5 , 8 , 11 , 15 , 26 , 14 , 19 , 17 , 10 , 14 ) ; $ L = 2 ; $ R = 7 ; $ n = sizeof ( $ A ) ; $ res_size = deleteElement ( $ A , $ L , $ R , $ n ) ; for ( $ i = 0 ; $ i < $ res_size ; $ i ++ ) { echo ( $ A [ $ i ] ) ; echo ( \" \u2581 \" ) ; } ? >"}
{"text":"PHP program to find the only missing element .","code":"< ? php function findmissing ( & $ ar , $ N ) { $ r = $ N - 1 ; $ l = 0 ; while ( $ l <= $ r ) { $ mid = ( $ l + $ r ) \/ 2 ;"}
{"text":"If this is the first element which is not index + 1 , then missing element is mid + 1","code":"if ( $ ar [ $ mid ] != $ mid + 1 && $ ar [ $ mid - 1 ] == $ mid ) return ( $ mid + 1 ) ;"}
{"text":"if this is not the first missing element search in left side","code":"if ( $ ar [ $ mid ] != $ mid + 1 ) $ r = $ mid - 1 ;"}
{"text":"if it follows index + 1 property then search in right side","code":"else $ l = $ mid + 1 ; }"}
{"text":"if no element is missing","code":"return ( -1 ) ; }"}
{"text":"Driver Code","code":"$ ar = array ( 1 , 2 , 3 , 4 , 5 , 7 , 8 ) ; $ N = sizeof ( $ ar ) ; echo ( findmissing ( $ ar , $ N ) ) ; ? >"}
{"text":"PHP program to find index of first occurrence of x when array is sorted .","code":"< ? php function findFirst ( $ arr , $ n , $ x ) { sort ( $ arr ) ;"}
{"text":"lower_bound returns iterator pointing to first element that does not compare less to x .","code":"$ ptr = floor ( $ arr ) ;"}
{"text":"If x is not present return - 1.","code":"return ( $ ptr != $ x ) ? 1 : ( $ ptr - $ arr ) ; }"}
{"text":"Code driven","code":"$ x = 20 ; $ arr = array ( 10 , 30 , 20 , 50 , 20 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; echo findFirst ( $ arr , $ n , $ x ) ; #This  code is contributed by Tushil. NEW_LINE ? >"}
{"text":"PHP program to find index of first occurrence of x when array is sorted .","code":"< ? php function findFirst ( $ arr , $ n , $ x ) { $ count = 0 ; $ isX = false ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ arr [ $ i ] == $ x ) $ isX = true ; else if ( $ arr [ $ i ] < $ x ) $ count ++ ; } return ( $ isX == false ) ? -1 : $ count ; }"}
{"text":"Driver Code","code":"$ x = 20 ; $ arr = array ( 10 , 30 , 20 , 50 , 20 ) ; $ n = sizeof ( $ arr ) ; echo findFirst ( $ arr , $ n , $ x ) ; ? >"}
{"text":"Function to find duplicate","code":"< ? php function findDuplicate ( & $ arr ) {"}
{"text":"Find the intersection point of the slow and fast .","code":"$ slow = $ arr [ 0 ] ; $ fast = $ arr [ 0 ] ; do { $ slow = $ arr [ $ slow ] ; $ fast = $ arr [ $ arr [ $ fast ] ] ; } while ( $ slow != $ fast ) ;"}
{"text":"Find the \" entrance \" to the cycle .","code":"$ ptr1 = $ arr [ 0 ] ; $ ptr2 = $ slow ; while ( $ ptr1 != $ ptr2 ) { $ ptr1 = $ arr [ $ ptr1 ] ; $ ptr2 = $ arr [ $ ptr2 ] ; } return $ ptr1 ; }"}
{"text":"Driver code","code":"$ arr = array ( 1 , 3 , 2 , 1 ) ; echo \" \u2581 \" . findDuplicate ( $ arr ) ; ? >"}
{"text":"PHP program to count greater characters on right side of every character .","code":"< ? php $ MAX_CHAR = 26 ; function printGreaterCount ( $ str ) { global $ MAX_CHAR ; $ len = strlen ( $ str ) ;"}
{"text":"Arrays to store result and character counts .","code":"$ ans = array_fill ( 0 , $ len , 0 ) ; $ count = array_fill ( 0 , $ MAX_CHAR , 0 ) ;"}
{"text":"start from right side of string","code":"for ( $ i = $ len - 1 ; $ i >= 0 ; $ i -- ) { $ count [ ord ( $ str [ $ i ] ) - ord ( ' a ' ) ] ++ ; for ( $ j = ord ( $ str [ $ i ] ) - ord ( ' a ' ) + 1 ; $ j < $ MAX_CHAR ; $ j ++ ) $ ans [ $ i ] += $ count [ $ j ] ; } for ( $ i = 0 ; $ i < $ len ; $ i ++ ) echo $ ans [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ str = \" abcd \" ; printGreaterCount ( $ str ) ; ? >"}
{"text":"Function to find a maximum product of a quadruple in array of integers of size n","code":"< ? php function maxProduct ( $ arr , $ n ) {"}
{"text":"if size is less than 4 , no quadruple exists","code":"if ( $ n < 4 ) return -1 ;"}
{"text":"Initialize Maximum , second maximum , third maximum and fourth maximum element","code":"$ maxA = -2147483648 ; $ maxB = -2147483648 ; $ maxC = -2147483648 ; $ maxD = -2147483648 ;"}
{"text":"Initialize Minimum , second minimum , third minimum and fourth minimum element","code":"$ minA = 2147483647 ; $ minB = 2147483647 ; $ minC = 2147483647 ; $ minD = 2147483647 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Update Maximum , second maximum , third maximum and fourth maximum element","code":"if ( $ arr [ $ i ] > $ maxA ) { $ maxD = $ maxC ; $ maxC = $ maxB ; $ maxB = $ maxA ; $ maxA = $ arr [ $ i ] ; }"}
{"text":"Update second maximum , third maximum and fourth maximum element","code":"elseif ( $ arr [ $ i ] > $ maxB ) { $ maxD = $ maxC ; $ maxC = $ maxB ; $ maxB = $ arr [ $ i ] ; }"}
{"text":"Update third maximum and fourth maximum element","code":"elseif ( $ arr [ $ i ] > $ maxC ) { $ maxD = $ maxC ; $ maxC = $ arr [ $ i ] ; }"}
{"text":"Update fourth maximum element","code":"elseif ( $ arr [ $ i ] > $ maxD ) $ maxD = $ arr [ $ i ] ;"}
{"text":"Update Minimum , second minimum , third minimum and fourth minimum element","code":"if ( $ arr [ $ i ] < $ minA ) { $ minD = $ minC ; $ minC = $ minB ; $ minB = $ minA ; $ minA = $ arr [ $ i ] ; }"}
{"text":"Update second minimum , third minimum and fourth minimum element","code":"elseif ( $ arr [ $ i ] < $ minB ) { $ minD = $ minC ; $ minC = $ minB ; $ minB = $ arr [ $ i ] ; }"}
{"text":"Update third minimum and fourth minimum element","code":"elseif ( $ arr [ $ i ] < $ minC ) { $ minD = $ minC ; $ minC = $ arr [ $ i ] ; }"}
{"text":"Update fourth minimum element","code":"elseif ( $ arr [ $ i ] < $ minD ) $ minD = $ arr [ $ i ] ; } $ x = $ maxA * $ maxB * $ maxC * $ maxD ; $ y = $ minA * $ minB * $ minC * $ minD ; $ z = $ minA * $ minB * $ maxA * $ maxB ;"}
{"text":"Return the maximum of x , y and z","code":"return max ( $ x , max ( $ y , $ z ) ) ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , -4 , 3 , -6 , 7 , 0 ) ; $ n = count ( $ arr ) ; $ max = maxProduct ( $ arr , $ n ) ; if ( $ max == -1 ) echo \" No \u2581 Quadruple \u2581 Exists \" ; else echo \" Maximum \u2581 product \u2581 is \u2581 \" . $ max ; ? >"}
{"text":"Returns the number of triplets with distance between farthest points <= L","code":"< ? php function countTripletsLessThanL ( $ n , $ L , $ arr ) {"}
{"text":"sort to get ordered triplets so that we can find the distance between farthest points belonging to a triplet","code":"sort ( $ arr ) ; $ ways = 0 ;"}
{"text":"generate and check for all possible triplets : { arr [ i ] , arr [ j ] , arr [ k ] }","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { for ( $ j = $ i + 1 ; $ j < $ n ; $ j ++ ) { for ( $ k = $ j + 1 ; $ k < $ n ; $ k ++ ) {"}
{"text":"Since the array is sorted the farthest points will be a [ i ] and a [ k ] ;","code":"$ mostDistantDistance = $ arr [ $ k ] - $ arr [ $ i ] ; if ( $ mostDistantDistance <= $ L ) { $ ways ++ ; } } } } return $ ways ; }"}
{"text":"set of n points on the X axis","code":"$ arr = array ( 1 , 2 , 3 , 4 ) ; $ n = sizeof ( $ arr ) ; $ L = 3 ; $ ans = countTripletsLessThanL ( $ n , $ L , $ arr ) ; echo \" Total \u2581 Number \u2581 of \u2581 ways \u2581 = \u2581 \" , $ ans , \" STRNEWLINE \" ; ? >"}
{"text":"Find the missing number in a range","code":"< ? php function missingNum ( $ arr , $ n ) { $ minvalue = min ( $ arr ) ;"}
{"text":"here we xor of all the number","code":"$ xornum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ xornum ^= ( $ minvalue ) ^ $ arr [ $ i ] ; $ minvalue ++ ; }"}
{"text":"xor last number","code":"return $ xornum ^ $ minvalue ; }"}
{"text":"Driver code","code":"$ arr = array ( 13 , 12 , 11 , 15 ) ; $ n = sizeof ( $ arr ) ; echo missingNum ( $ arr , $ n ) ; ? >"}
{"text":"Returns last index of x if it is present . Else returns - 1.","code":"< ? php function findLastIndex ( $ str , $ x ) { $ index = -1 ; for ( $ i = 0 ; $ i < strlen ( $ str ) ; $ i ++ ) if ( $ str [ $ i ] == $ x ) $ index = $ i ; return $ index ; }"}
{"text":"String in which char is to be found","code":"$ str = \" geeksforgeeks \" ;"}
{"text":"char whose index is to be found","code":"$ x = ' e ' ; $ index = findLastIndex ( $ str , $ x ) ; if ( $ index == -1 ) echo ( \" Character \u2581 not \u2581 found \" ) ; else echo ( \" Last \u2581 index \u2581 is \u2581 \" . $ index ) ; ? >"}
{"text":"Returns last index of x if it is present . Else returns - 1.","code":"< ? php function findLastIndex ( $ str , $ x ) {"}
{"text":"Traverse from right","code":"for ( $ i = strlen ( $ str ) - 1 ; $ i >= 0 ; $ i -- ) if ( $ str [ $ i ] == $ x ) return $ i ; return -1 ; }"}
{"text":"Driver code","code":"$ str = \" geeksforgeeks \" ; $ x = ' e ' ; $ index = findLastIndex ( $ str , $ x ) ; if ( $ index == -1 ) echo ( \" Character \u2581 not \u2581 found \" ) ; else echo ( \" Last \u2581 index \u2581 is \u2581 \" . $ index ) ; ? >"}
{"text":"Returns smallest number whose set bits are maximum in given range .","code":"< ? php function countMaxSetBits ( $ left , $ right ) { while ( ( $ left | ( $ left + 1 ) ) <= $ right ) $ left |= $ left + 1 ; return $ left ; }"}
{"text":"Driver code","code":"$ l = 1 ; $ r = 5 ; echo countMaxSetBits ( $ l , $ r ) , \" STRNEWLINE \" ; $ l = 1 ; $ r = 10 ; echo countMaxSetBits ( $ l , $ r ) ; ? >"}
{"text":"Function to find no . of elements to be added to get s","code":"< ? php function findS ( $ s ) { $ l = 1 ; $ r = 1 + ( int ) $ s \/ 2 ;"}
{"text":"Apply Binary search","code":"while ( $ l <= $ r ) {"}
{"text":"Find mid","code":"$ mid = ( int ) ( ( $ l + $ r ) \/ 2 ) ;"}
{"text":"find sum of 1 to mid natural numbers using formula","code":"$ sum = ( int ) ( $ mid * ( $ mid + 1 ) \/ 2 ) ;"}
{"text":"If sum is equal to n return mid","code":"if ( $ sum == $ s ) return $ mid ;"}
{"text":"If greater than n do r = mid - 1","code":"else if ( $ sum > $ s ) $ r = $ mid - 1 ;"}
{"text":"else do l = mid + 1","code":"else $ l = $ mid + 1 ; }"}
{"text":"If not possible , return - 1","code":"return -1 ; }"}
{"text":"Drivers code","code":"$ s = 15 ; $ n = findS ( $ s ) ; if ( $ n == -1 ) echo \" - 1\" ; else echo $ n ; ? >"}
{"text":"Function to print the Pendulum arrangement of the given array","code":"< ? php function pendulumArrangement ( $ arr , $ n ) {"}
{"text":"Sort the array","code":"sort ( $ arr ) ;"}
{"text":"pos stores the index of the last element of the array","code":"$ pos = $ n - 1 ;"}
{"text":"odd stores the last odd index in the array","code":"if ( $ n % 2 == 0 ) $ odd = $ n - 1 ; else $ odd = $ n - 2 ;"}
{"text":"Move all odd index positioned elements to the right","code":"while ( $ odd > 0 ) { $ temp = $ arr [ $ odd ] ; $ in = $ odd ;"}
{"text":"Shift the elements by one position from odd to pos","code":"while ( $ in != $ pos ) { $ arr [ $ in ] = $ arr [ $ in + 1 ] ; $ in ++ ; } $ arr [ $ in ] = $ temp ; $ odd = $ odd - 2 ; $ pos = $ pos - 1 ; }"}
{"text":"Reverse the element from 0 to ( n - 1 ) \/ 2","code":"$ start = 0 ; $ end = floor ( ( $ n - 1 ) \/ 2 ) ; for ( ; $ start < $ end ; $ start ++ , $ end -- ) { $ temp = $ arr [ $ start ] ; $ arr [ $ start ] = $ arr [ $ end ] ; $ arr [ $ end ] = $ temp ; }"}
{"text":"Printing the pendulum arrangement","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] , \" \u2581 \" ; }"}
{"text":"Driver code","code":"$ arr = array ( 11 , 2 , 4 , 55 , 6 , 8 ) ; $ n = count ( $ arr ) ; pendulumArrangement ( $ arr , $ n ) ; ? >"}
{"text":"Function that returns the minimum number greater than maximum of the array that cannot be formed using the elements of the array","code":"< ? php function findNumber ( $ arr , $ n ) {"}
{"text":"Sort the given array","code":"sort ( $ arr ) ;"}
{"text":"Maximum number in the array","code":"$ max = $ arr [ $ n - 1 ] ;"}
{"text":"table [ i ] will store the minimum number of elements from the array to form i","code":"$ table = array ( ( 2 * $ max ) + 1 ) ; $ table [ 0 ] = 0 ; for ( $ i = 1 ; $ i < ( 2 * $ max ) + 1 ; $ i ++ ) $ table [ $ i ] = PHP_INT_MAX ; $ ans = -1 ;"}
{"text":"Calculate the minimum number of elements from the array required to form the numbers from 1 to ( 2 * max )","code":"for ( $ i = 1 ; $ i < ( 2 * $ max ) + 1 ; $ i ++ ) { for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ arr [ $ j ] <= $ i ) { $ res = $ table [ $ i - $ arr [ $ j ] ] ; if ( $ res != PHP_INT_MAX && $ res + 1 < $ table [ $ i ] ) $ table [ $ i ] = $ res + 1 ; } }"}
{"text":"If there exists a number greater than the maximum element of the array that can be formed using the numbers of array","code":"if ( $ i > $ arr [ $ n - 1 ] && $ table [ $ i ] == PHP_INT_MAX ) { $ ans = $ i ; break ; } } return $ ans ; }"}
{"text":"Driver code","code":"{ $ arr = array ( 6 , 7 , 15 ) ; $ n = sizeof ( $ arr ) ; echo ( findNumber ( $ arr , $ n ) ) ; }"}
{"text":"Function to return the maximum number of segments","code":"< ? php function countPoints ( $ n , $ m , $ a , $ b , $ x , $ y ) {"}
{"text":"Sort both the vectors","code":"sort ( $ a ) ; sort ( $ b ) ;"}
{"text":"Initially pointing to the first element of b [ ]","code":"$ j = 0 ; $ count = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Try to find a match in b [ ]","code":"while ( $ j < $ m ) {"}
{"text":"The segment ends before b [ j ]","code":"if ( $ a [ $ i ] + $ y < $ b [ $ j ] ) break ;"}
{"text":"The point lies within the segment","code":"if ( $ b [ $ j ] >= $ a [ $ i ] - $ x && $ b [ $ j ] <= $ a [ $ i ] + $ y ) { $ count ++ ; $ j ++ ; break ; }"}
{"text":"The segment starts after b [ j ]","code":"else $ j ++ ; } }"}
{"text":"Return the required count","code":"return $ count ; }"}
{"text":"Driver code","code":"$ x = 1 ; $ y = 4 ; $ a = array ( 1 , 5 ) ; $ n = count ( $ a ) ; $ b = array ( 1 , 1 , 2 ) ; $ m = count ( $ b ) ; echo countPoints ( $ n , $ m , $ a , $ b , $ x , $ y ) ; ? >"}
{"text":"Function to return length of smallest subarray containing both maximum and minimum value","code":"< ? php function minSubarray ( $ A , $ n ) {"}
{"text":"find maximum and minimum values in the array","code":"$ minValue = min ( $ A ) ; $ maxValue = max ( $ A ) ; $ pos_min = -1 ; $ pos_max = -1 ; $ ans = PHP_INT_MAX ;"}
{"text":"iterate over the array and set answer to smallest difference between position of maximum and position of minimum value","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"last occurrence of minValue","code":"if ( $ A [ $ i ] == $ minValue ) $ pos_min = $ i ;"}
{"text":"last occurrence of maxValue","code":"if ( $ A [ $ i ] == $ maxValue ) $ pos_max = $ i ; if ( $ pos_max != -1 and $ pos_min != -1 ) $ ans = min ( $ ans , abs ( $ pos_min - $ pos_max ) + 1 ) ; } return $ ans ; }"}
{"text":"Driver code","code":"$ A = array ( 1 , 5 , 9 , 7 , 1 , 9 , 4 ) ; $ n = sizeof ( $ A ) ; echo minSubarray ( $ A , $ n ) ; ? >"}
{"text":"PHP program find the minimum number of consecutive sequences in an array","code":"< ? php function countSequences ( $ arr , $ n ) { $ count = 1 ; sort ( $ arr ) ; for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ arr [ $ i ] + 1 != $ arr [ $ i + 1 ] ) $ count ++ ; return $ count ; }"}
{"text":"Driver Code","code":"$ arr = array ( 1 , 7 , 3 , 5 , 10 ) ; $ n = count ( $ arr ) ;"}
{"text":"function call to print required answer","code":"echo countSequences ( $ arr , $ n ) ; ? >"}
{"text":"Function to find the minimum operations","code":"< ? php function minimumMoves ( $ a , $ n ) { $ operations = 0 ;"}
{"text":"Sort the given array","code":"sort ( $ a ) ;"}
{"text":"Count operations by assigning a [ i ] = i + 1","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ operations += abs ( $ a [ $ i ] - ( $ i + 1 ) ) ; return $ operations ; }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 3 , 2 ) ; $ n = sizeof ( $ arr ) ; echo minimumMoves ( $ arr , $ n ) ; ? >"}
{"text":"Function to print a case where the given sorting algorithm fails","code":"< ? php function printCase ( $ n ) {"}
{"text":"only case where it fails","code":"if ( $ n <= 2 ) { echo ( -1 ) ; return ; } for ( $ i = $ n ; $ i >= 1 ; $ i -- ) { echo ( $ i ) ; echo ( \" \u2581 \" ) ; } }"}
{"text":"Driver Code","code":"$ n = 3 ; printCase ( $ n ) ; ? >"}
{"text":"Function to find missing elements from given Ranges","code":"< ? php function findMissingNumber ( $ ranges , $ m ) {"}
{"text":"First of all sort all the given ranges","code":"sort ( $ ranges ) ;"}
{"text":"store ans in a different vector","code":"$ ans = [ ] ;"}
{"text":"prev is use to store end of last range","code":"$ prev = 0 ;"}
{"text":"j is used as a counter for ranges","code":"for ( $ j = 0 ; $ j < count ( $ ranges ) ; $ j ++ ) { $ start = $ ranges [ $ j ] [ 0 ] ; $ end = $ ranges [ $ j ] [ 1 ] ; for ( $ i = $ prev + 1 ; $ i < $ start ; $ i ++ ) array_push ( $ ans , $ i ) ; $ prev = $ end ; }"}
{"text":"for last segment","code":"for ( $ i = $ prev + 1 ; $ i < $ m + 1 ; $ i ++ ) array_push ( $ ans , $ i ) ;"}
{"text":"finally print all answer","code":"for ( $ i = 0 ; $ i < count ( $ ans ) ; $ i ++ ) { if ( $ ans [ $ i ] <= $ m ) echo \" $ ans [ $ i ] \u2581 \" ; } }"}
{"text":"Driver Code","code":"$ N = 2 ; $ M = 6 ;"}
{"text":"Store ranges in vector of pair","code":"$ ranges = [ ] ; array_push ( $ ranges , [ 1 , 2 ] ) ; array_push ( $ ranges , [ 4 , 5 ] ) ; findMissingNumber ( $ ranges , $ M ) ? >"}
{"text":"Function to check if both sequences can be made equal","code":"< ? php function check ( $ n , $ k , & $ a , & $ b ) {"}
{"text":"Sorting both the arrays","code":"sort ( $ a ) ; sort ( $ b ) ;"}
{"text":"Flag to tell if there are more than one mismatch","code":"$ fl = False ;"}
{"text":"To stores the index of mismatched element","code":"$ ind = -1 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ a [ $ i ] != $ b [ $ i ] ) {"}
{"text":"If there is more than one mismatch then return False","code":"if ( $ fl == True ) return False ; $ fl = True ; $ ind = $ i ; } }"}
{"text":"If there is no mismatch or the difference between the mismatching elements is <= k then return true","code":"if ( $ ind == -1 || abs ( $ a [ $ ind ] - $ b [ $ ind ] ) <= $ k ) return True ; return False ; }"}
{"text":"Driver Code","code":"$ n = 2 ; $ k = 4 ; $ a = array ( 1 , 5 ) ; $ b = array ( 1 , 1 ) ; if ( check ( $ n , $ k , $ a , $ b ) ) echo \" Yes \" ; else echo \" No \" ; ? >"}
{"text":"PHP implementation of above approach","code":"< ? php $ MOD = 1000000007 ;"}
{"text":"Function to return sum of width of all subsets","code":"function SubseqWidths ( & $ A , $ n ) { global $ MOD ;"}
{"text":"Sort the array","code":"sort ( $ A ) ; $ pow2 = array_fill ( 0 , $ n , NULL ) ; $ pow2 [ 0 ] = 1 ; for ( $ i = 1 ; $ i < $ n ; ++ $ i ) $ pow2 [ $ i ] = ( $ pow2 [ $ i - 1 ] * 2 ) % $ MOD ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) $ ans = ( $ ans + ( $ pow2 [ $ i ] - $ pow2 [ $ n - 1 - $ i ] ) * $ A [ $ i ] ) % $ MOD ; return $ ans ; }"}
{"text":"Driver Code","code":"$ A = array ( 5 , 6 , 4 , 3 , 8 ) ; $ n = sizeof ( $ A ) ; echo SubseqWidths ( $ A , $ n ) ; ? >"}
{"text":"Function to find value for covering maximum array elements","code":"< ? php function maxArrayCover ( $ a , $ n , $ x ) {"}
{"text":"sort the students in ascending based on the candies","code":"sort ( $ a ) ;"}
{"text":"To store the number of happy students","code":"$ cc = 0 ;"}
{"text":"To store the running sum","code":"$ s = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ s += $ a [ $ i ] ;"}
{"text":"If the current student can 't be made happy","code":"if ( $ s > $ x ) { break ; }"}
{"text":"increment the count if we can make the ith student happy","code":"$ cc += 1 ; }"}
{"text":"If the sum = x then answer is n","code":"if ( array_sum ( $ a ) == $ x ) { return $ n ; } else {"}
{"text":"If the count is equal to n then the answer is n - 1","code":"if ( $ cc == $ n ) { return $ n - 1 ; } else { return $ cc ; } } }"}
{"text":"driver code","code":"$ n = 3 ; $ x = 70 ; $ a = array ( 10 , 20 , 30 ) ; echo maxArrayCover ( $ a , $ n , $ x ) ; ? >"}
{"text":"Function that calculates maximum sum of products of two arrays","code":"< ? php function maximumSOP ( & $ a , & $ b ) {"}
{"text":"Variable to store the sum of products of array elements","code":"$ sop = 0 ;"}
{"text":"length of the arrays","code":"$ n = sizeof ( $ a ) ;"}
{"text":"Sorting both the arrays","code":"sort ( $ a ) ; sort ( $ b ) ;"}
{"text":"Traversing both the arrays and calculating sum of product","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { $ sop = $ sop + ( $ a [ $ i ] * $ b [ $ i ] ) ; } return $ sop ; }"}
{"text":"Driver code","code":"$ A = array ( 1 , 2 , 3 ) ; $ B = array ( 4 , 5 , 1 ) ; echo maximumSOP ( $ A , $ B ) ; ? >"}
{"text":"Function to count such triplets","code":"< ? php function countTriplets ( $ arr , $ n , $ m ) { $ count = 0 ;"}
{"text":"Sort the array","code":"sort ( $ arr ) ; $ end ; $ start ; $ mid ;"}
{"text":"three pointer technique","code":"for ( $ end = $ n - 1 ; $ end >= 2 ; $ end -- ) { $ start = 0 ; $ mid = $ end - 1 ; while ( $ start < $ mid ) {"}
{"text":"Calculate the product of a triplet","code":"$ prod = $ arr [ $ end ] * $ arr [ $ start ] * $ arr [ $ mid ] ;"}
{"text":"Check if that product is greater than m , decrement mid","code":"if ( $ prod > $ m ) $ mid -- ;"}
{"text":"Check if that product is smaller than m , increment start","code":"else if ( $ prod < $ m ) $ start ++ ;"}
{"text":"Check if that product is equal to m , decrement mid , increment start and increment the count of pairs","code":"else if ( $ prod == $ m ) { $ count ++ ; $ mid -- ; $ start ++ ; } } } return $ count ; }"}
{"text":"Drivers code","code":"$ arr = array ( 1 , 1 , 1 , 1 , 1 , 1 ) ; $ n = sizeof ( $ arr ) \/ sizeof ( $ arr [ 0 ] ) ; $ m = 1 ; echo countTriplets ( $ arr , $ n , $ m ) ; #This  Code is Contributed by ajit NEW_LINE ? >"}
{"text":"PHP program to sort an array of size 3","code":"< ? php function sort3 ( & $ arr , $ temp ) {"}
{"text":"Insert arr [ 1 ]","code":"if ( $ arr [ 1 ] < $ arr [ 0 ] ) { $ temp [ 0 ] = $ arr [ 0 ] ; $ arr [ 0 ] = $ arr [ 1 ] ; $ arr [ 1 ] = $ temp [ 0 ] ; }"}
{"text":"Insert arr [ 2 ]","code":"if ( $ arr [ 2 ] < $ arr [ 1 ] ) { $ temp [ 0 ] = $ arr [ 1 ] ; $ arr [ 1 ] = $ arr [ 2 ] ; $ arr [ 2 ] = $ temp [ 0 ] ; } if ( $ arr [ 1 ] < $ arr [ 0 ] ) { $ temp [ 0 ] = $ arr [ 0 ] ; $ arr [ 0 ] = $ arr [ 1 ] ; $ arr [ 1 ] = $ temp [ 0 ] ; } }"}
{"text":"Driver Code","code":"$ a = array ( 10 , 12 , 5 ) ; $ temp1 = array ( 10 ) ; sort3 ( $ a , $ temp1 ) ; for ( $ i = 0 ; $ i < 3 ; $ i ++ ) echo ( $ a [ $ i ] . \" \u2581 \" ) ; ? >"}
{"text":"PHP program to print triplets with sum smaller than a given value","code":"< ? php function printTriplets ( $ arr , $ n , $ sum ) {"}
{"text":"Sort input array","code":"sort ( $ arr , 0 ) ;"}
{"text":"Every iteration of loop counts triplet with first element as arr [ i ] .","code":"for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) {"}
{"text":"Initialize other two elements as corner elements of subarray arr [ j + 1. . k ]","code":"$ j = $ i + 1 ; $ k = $ n - 1 ;"}
{"text":"Use Meet in the Middle concept","code":"while ( $ j < $ k ) {"}
{"text":"If sum of current triplet is more or equal , move right corner to look for smaller values","code":"if ( $ arr [ $ i ] + $ arr [ $ j ] + $ arr [ $ k ] >= $ sum ) $ k -- ;"}
{"text":"Else move left corner","code":"else {"}
{"text":"This is important . For current i and j , there are total k - j third elements .","code":"for ( $ x = $ j + 1 ; $ x <= $ k ; $ x ++ ) echo $ arr [ $ i ] . \" , \" \u2581 . \u2581 $ arr [ $ j ] \u2581 . STRNEWLINE \" , \" \u2581 . \u2581 $ arr [ $ x ] \u2581 . \u2581 \" \" $ j ++ ; } } } }"}
{"text":"Driver Code","code":"$ arr = array ( 5 , 1 , 3 , 4 , 7 ) ; $ n = sizeof ( $ arr ) ; $ sum = 12 ; printTriplets ( $ arr , $ n , $ sum ) ; ? >"}
{"text":"Returns true if the array A can be fit into array B , otherwise false","code":"< ? php function checkFittingArrays ( $ A , $ B , $ N ) {"}
{"text":"Sort both the arrays","code":"sort ( $ A ) ; sort ( $ B ) ;"}
{"text":"Iterate over the loop and check whether every array element of A is less than or equal to its corresponding array element of B","code":"for ( $ i = 0 ; $ i < $ N ; $ i ++ ) if ( $ A [ $ i ] > $ B [ $ i ] ) return false ; return true ; }"}
{"text":"Driver Code","code":"$ A = array ( 7 , 5 , 3 , 2 ) ; $ B = array ( 5 , 4 , 8 , 7 ) ; $ N = count ( $ A ) ; if ( checkFittingArrays ( $ A , $ B , $ N ) ) echo \" YES \" ; else echo \" NO \" ; ? >"}
{"text":"This functions returns the required number of toys","code":"< ? php function maximum_toys ( $ cost , $ N , $ K ) { $ count = 0 ; $ sum = 0 ;"}
{"text":"sort the cost array","code":"sort ( $ cost ) ; for ( $ i = 0 ; $ i < $ N ; $ i ++ ) {"}
{"text":"Check if we can buy ith toy or not","code":"if ( $ sum + $ cost [ $ i ] <= $ K ) { $ sum = $ sum + $ cost [ $ i ] ;"}
{"text":"Increment the count variable","code":"$ count ++ ; } } return $ count ; }"}
{"text":"Driver Code","code":"$ K = 50 ; $ cost = array ( 1 , 12 , 5 , 111 , 200 , 1000 , 10 , 9 , 12 , 15 ) ; $ N = count ( $ cost ) ; echo maximum_toys ( $ cost , $ N , $ K ) , \" STRNEWLINE \" ; ? >"}
{"text":"function for checking almost sort","code":"< ? php function almostSort ( $ A , $ n ) {"}
{"text":"One by one compare adjacents .","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) { if ( $ A [ $ i ] > $ A [ $ i + 1 ] ) { list ( $ A [ $ i ] , $ A [ $ i + 1 ] ) = array ( $ A [ $ i + 1 ] , $ A [ $ i ] ) ; $ i ++ ; } }"}
{"text":"check whether resultant is sorted or not","code":"for ( $ i = 0 ; $ i < $ n - 1 ; $ i ++ ) if ( $ A [ $ i ] > $ A [ $ i + 1 ] ) return false ;"}
{"text":"is resultant is sorted return true","code":"return true ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 3 , 2 , 4 , 6 , 5 ) ; $ n = sizeof ( $ A ) ; if ( almostSort ( $ A , $ n ) ) echo \" Yes \" , \" STRNEWLINE \" ; else echo \" Yes \" , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find next gap .","code":"< ? php function nextGap ( $ gap ) { if ( $ gap <= 1 ) return 0 ; return ( $ gap \/ 2 ) + ( $ gap % 2 ) ; } function merge ( $ arr1 , $ arr2 , $ n , $ m ) { $ i ; $ j ; $ gap = $ n + $ m ; for ( $ gap = nextGap ( $ gap ) ; $ gap > 0 ; $ gap = nextGap ( $ gap ) ) {"}
{"text":"comparing elements in the first array .","code":"for ( $ i = 0 ; $ i + $ gap < $ n ; $ i ++ ) if ( $ arr1 [ $ i ] > $ arr1 [ $ i + $ gap ] ) { $ tmp = $ arr1 [ $ i ] ; $ arr1 [ $ i ] = $ arr1 [ $ i + $ gap ] ; $ arr1 [ $ i + $ gap ] = $ tmp ; }"}
{"text":"comparing elements in both arrays .","code":"for ( $ j = $ gap > $ n ? $ gap - $ n : 0 ; $ i < $ n && $ j < $ m ; $ i ++ , $ j ++ ) if ( $ arr1 [ $ i ] > $ arr2 [ $ j ] ) { $ tmp = $ arr1 [ $ i ] ; $ arr1 [ $ i ] = $ arr2 [ $ j ] ; $ arr2 [ $ j ] = $ tmp ; } if ( $ j < $ m ) {"}
{"text":"comparing elements in the second array .","code":"for ( $ j = 0 ; $ j + $ gap < $ m ; $ j ++ ) if ( $ arr2 [ $ j ] > $ arr2 [ $ j + $ gap ] ) { $ tmp = $ arr2 [ $ j ] ; $ arr2 [ $ j ] = $ arr2 [ $ j + $ gap ] ; $ arr2 [ $ j + $ gap ] = $ tmp ; } } } echo \" First \u2581 Array : \u2581 \" ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr1 [ $ i ] . \" \u2581 \" ; echo \" Second Array : \" for ( $ i = 0 ; $ i < $ m ; $ i ++ ) echo $ arr2 [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ a1 = array ( 10 , 27 , 38 , 43 , 82 ) ; $ a2 = array ( 3 , 9 ) ; $ n = sizeof ( $ a1 ) ; $ m = sizeof ( $ a2 ) ;"}
{"text":"Function Call","code":"merge ( $ a1 , $ a2 , $ n , $ m ) ; ? >"}
{"text":"Merge $arr1 [ 0. . $n1 - 1 ] and $arr2 [ 0. . $n2 - 1 ] into $arr3 [ 0. . $n1 + $n2 - 1 ]","code":"< ? php function mergeArrays ( & $ arr1 , & $ arr2 , $ n1 , $ n2 , & $ arr3 ) { $ i = 0 ; $ j = 0 ; $ k = 0 ;"}
{"text":"Traverse both array","code":"while ( $ i < $ n1 && $ j < $ n2 ) {"}
{"text":"Check if current element of first array is smaller than current element of second array . If yes , store first array element and increment first array index . Otherwise do same with second array","code":"if ( $ arr1 [ $ i ] < $ arr2 [ $ j ] ) $ arr3 [ $ k ++ ] = $ arr1 [ $ i ++ ] ; else $ arr3 [ $ k ++ ] = $ arr2 [ $ j ++ ] ; }"}
{"text":"Store remaining elements of first array","code":"while ( $ i < $ n1 ) $ arr3 [ $ k ++ ] = $ arr1 [ $ i ++ ] ;"}
{"text":"Store remaining elements of second array","code":"while ( $ j < $ n2 ) $ arr3 [ $ k ++ ] = $ arr2 [ $ j ++ ] ; }"}
{"text":"Driver code","code":"$ arr1 = array ( 1 , 3 , 5 , 7 ) ; $ n1 = sizeof ( $ arr1 ) ; $ arr2 = array ( 2 , 4 , 6 , 8 ) ; $ n2 = sizeof ( $ arr2 ) ; $ arr3 [ $ n1 + $ n2 ] = array ( ) ; mergeArrays ( $ arr1 , $ arr2 , $ n1 , $ n2 , $ arr3 ) ; echo \" Array \u2581 after \u2581 merging \u2581 STRNEWLINE \" ; for ( $ i = 0 ; $ i < $ n1 + $ n2 ; $ i ++ ) echo $ arr3 [ $ i ] . \" \u2581 \" ; ? >"}
{"text":"arr [ 0. . n - 1 ] represents sizes of packets m is number of students . Returns minimum difference between maximum and minimum values of distribution .","code":"< ? php function findMinDiff ( $ arr , $ n , $ m ) {"}
{"text":"if there are no chocolates or number of students is 0","code":"if ( $ m == 0 $ n == 0 ) return 0 ;"}
{"text":"Sort the given packets","code":"sort ( $ arr ) ;"}
{"text":"Number of students cannot be more than number of packets","code":"if ( $ n < $ m ) return -1 ;"}
{"text":"Largest number of chocolates","code":"$ min_diff = PHP_INT_MAX ;"}
{"text":"Find the subarray of size m such that difference between last ( maximum in case of sorted ) and first ( minimum in case of sorted ) elements of subarray is minimum .","code":"for ( $ i = 0 ; $ i + $ m - 1 < $ n ; $ i ++ ) { $ diff = $ arr [ $ i + $ m - 1 ] - $ arr [ $ i ] ; if ( $ diff < $ min_diff ) $ min_diff = $ diff ; } return $ min_diff ; }"}
{"text":"Driver Code","code":"$ arr = array ( 12 , 4 , 7 , 9 , 2 , 23 , 25 , 41 , 30 , 40 , 28 , 42 , 30 , 44 , 48 , 43 , 50 ) ;"}
{"text":"$m = 7 ; Number of students","code":"$ n = sizeof ( $ arr ) ; echo \" Minimum \u2581 difference \u2581 is \u2581 \" , findMinDiff ( $ arr , $ n , $ m ) ; ? >"}
{"text":"The function returns return number of distinct absolute values among the elements of the array","code":"< ? php function distinctCount ( $ arr , $ n ) {"}
{"text":"initialize count as number of elements","code":"$ count = $ n ; $ i = 0 ; $ j = $ n - 1 ; $ sum = 0 ; while ( $ i < $ j ) {"}
{"text":"Remove duplicate elements from the left of the current window ( i , j ) and also decrease the count","code":"while ( $ i != $ j && $ arr [ $ i ] == $ arr [ $ i + 1 ] ) { $ count -- ; $ i ++ ; }"}
{"text":"Remove duplicate elements from the right of the current window ( i , j ) and also decrease the count","code":"while ( $ i != $ j && $ arr [ $ j ] == $ arr [ $ j - 1 ] ) { $ count -- ; $ j -- ; }"}
{"text":"break if only one element is left","code":"if ( $ i == $ j ) break ;"}
{"text":"Now look for the zero sum pair in current window ( i , j )","code":"$ sum = $ arr [ $ i ] + $ arr [ $ j ] ; if ( $ sum == 0 ) {"}
{"text":"decrease the count if ( positive , negative ) pair is encountered","code":"$ count -- ; $ i ++ ; $ j -- ; } else if ( $ sum < 0 ) $ i ++ ; else $ j -- ; } return $ count ; }"}
{"text":"Driver code","code":"$ arr = array ( -2 , -1 , 0 , 1 , 1 ) ; $ n = sizeof ( $ arr ) ; echo \" Count \u2581 of \u2581 absolute \u2581 distinct \u2581 values \u2581 : \u2581 \" . distinctCount ( $ arr , $ n ) ; ? >"}
{"text":"This function sorts an array that can be sorted by single swap","code":"< ? php function sortByOneSwap ( & $ arr , $ n ) {"}
{"text":"Traverse the given array from rightmost side","code":"for ( $ i = $ n - 1 ; $ i > 0 ; $ i -- ) {"}
{"text":"Check if arr [ i ] is not in order","code":"if ( $ arr [ $ i ] < $ arr [ $ i - 1 ] ) {"}
{"text":"Find the other element to be swapped with arr [ i ]","code":"$ j = $ i - 1 ; while ( $ j >= 0 && $ arr [ $ i ] < $ arr [ $ j ] ) $ j -- ;"}
{"text":"Swap the pair","code":"$ temp = $ arr [ $ i ] ; $ arr [ $ i ] = $ arr [ $ j + 1 ] ; $ arr [ $ j + 1 ] = $ temp ; break ; } } }"}
{"text":"A utility function to print an array of size n","code":"function printArray ( & $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) echo $ arr [ $ i ] . \" \u2581 \" ; echo \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"$ arr = array ( 10 , 30 , 20 , 40 , 50 , 60 , 70 ) ; $ n = sizeof ( $ arr ) ; echo \" Given \u2581 array \u2581 is \u2581 \" . \" STRNEWLINE \" ; printArray ( $ arr , $ n ) ; sortByOneSwap ( $ arr , $ n ) ; echo \" Sorted \u2581 array \u2581 is \u2581 \" . \" STRNEWLINE \" ; printArray ( $ arr , $ n ) ;"}
{"text":"Reverses arr [ 0. . i ]","code":"< ? php function flip ( & $ arr , $ i ) { $ start = 0 ; while ( $ start < $ i ) { $ temp = $ arr [ $ start ] ; $ arr [ $ start ] = $ arr [ $ i ] ; $ arr [ $ i ] = $ temp ; $ start ++ ; $ i -- ; } }"}
{"text":"Returns index of the maximum element in arr [ 0. . n - 1 ]","code":"function findMax ( $ arr , $ n ) { $ mi = 0 ; for ( $ i = 0 ; $ i < $ n ; ++ $ i ) if ( $ arr [ $ i ] > $ arr [ $ mi ] ) $ mi = $ i ; return $ mi ; }"}
{"text":"The main function that sorts given array using flip operations","code":"function pancakeSort ( & $ arr , $ n ) {"}
{"text":"Start from the complete array and one by one reduce current size by one","code":"for ( $ curr_size = $ n ; $ curr_size > 1 ; -- $ curr_size ) {"}
{"text":"Find index of the maximum element in arr [ 0. . curr_size - 1 ]","code":"$ mi = findMax ( $ arr , $ curr_size ) ;"}
{"text":"Move the maximum element to end of current array if it 's not already  at the end","code":"if ( $ mi != $ curr_size - 1 ) {"}
{"text":"To move at the end , first move maximum number to beginning","code":"flip ( $ arr , $ mi ) ;"}
{"text":"Now move the maximum number to end by reversing current array","code":"flip ( $ arr , $ curr_size -1 ) ; } } }"}
{"text":"A utility function to print n array of size n","code":"function printArray ( $ arr , $ n ) { for ( $ i = 0 ; $ i < $ n ; ++ $ i ) print ( $ arr [ $ i ] . \" \u2581 \" ) ; }"}
{"text":"Driver code","code":"$ arr = array ( 23 , 10 , 20 , 11 , 12 , 6 , 7 ) ; $ n = count ( $ arr ) ; pancakeSort ( $ arr , $ n ) ; echo ( \" Sorted \u2581 Array \u2581 STRNEWLINE \" ) ; printArray ( $ arr , $ n ) ; return 0 ; ? >"}
{"text":"PHP implementation of the approach Function to return the maximized number","code":"< ? php function get_maximum ( $ s , $ a ) { $ n = strlen ( $ s ) ;"}
{"text":"Iterate till the end of the string","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Check if it is greater or not","code":"if ( $ s [ $ i ] - '0' < $ a [ $ s [ $ i ] - '0' ] ) { $ j = $ i ;"}
{"text":"Replace with the alternate till smaller","code":"while ( $ j < $ n && ( $ s [ $ j ] - '0' <= $ a [ $ s [ $ j ] - '0' ] ) ) { $ s [ $ j ] = '0' + $ a [ $ s [ $ j ] - '0' ] ; $ j ++ ; } return $ s ; } }"}
{"text":"Return original s in case no change took place","code":"return $ s ; }"}
{"text":"Driver Code","code":"$ s = \"1337\" ; $ a = array ( 0 , 1 , 2 , 5 , 4 , 6 , 6 , 3 , 1 , 9 ) ; echo get_maximum ( $ s , $ a ) ;"}
{"text":"This Code is contributed is Tushill .","code":"? >"}
{"text":"Function to return the count of steps","code":"< ? php function countSteps ( $ n ) {"}
{"text":"Variable to store the count of steps","code":"$ steps = 0 ;"}
{"text":"Iterate while N > 0","code":"while ( $ n ) {"}
{"text":"Get the largest perfect square and subtract it from N","code":"$ largest = ( int ) sqrt ( $ n ) ; $ n -= ( $ largest * $ largest ) ;"}
{"text":"Increment steps","code":"$ steps ++ ; }"}
{"text":"Return the required count","code":"return $ steps ; }"}
{"text":"Driver code","code":"$ n = 85 ; echo countSteps ( $ n ) ; ? >"}
{"text":"Utility function to return the sum of the array elements","code":"< ? php function sumArr ( $ arr , $ n ) { $ sum = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ sum += $ arr [ $ i ] ; return $ sum ; }"}
{"text":"Function to return the maximized sum of the array after performing the given operation exactly k times","code":"function maxSum ( $ arr , $ n , $ k ) {"}
{"text":"Sort the array elements","code":"sort ( $ arr ) ; $ i = 0 ;"}
{"text":"Change signs of the negative elements starting from the smallest","code":"while ( $ i < $ n && $ k > 0 && $ arr [ $ i ] < 0 ) { $ arr [ $ i ] *= -1 ; $ k -- ; $ i ++ ; }"}
{"text":"If a single operation has to be performed then it must be performed on the smallest positive element","code":"if ( $ k % 2 == 1 ) {"}
{"text":"To store the index of the minimum element","code":"$ min = 0 ; for ( $ i = 1 ; $ i < $ n ; $ i ++ )"}
{"text":"Update the minimum index","code":"if ( $ arr [ $ min ] > $ arr [ $ i ] ) $ min = $ i ;"}
{"text":"Perform remaining operation on the smallest element","code":"$ arr [ $ min ] *= -1 ; }"}
{"text":"Return the sum of the updated array","code":"return sumArr ( $ arr , $ n ) ; }"}
{"text":"Driver code","code":"$ arr = array ( -5 , 4 , 1 , 3 , 2 ) ; $ n = sizeof ( $ arr ) ; $ k = 4 ; echo maxSum ( $ arr , $ n , $ k ) , \" STRNEWLINE \" ; ? >"}
{"text":"Function to find the maximum possible sum","code":"< ? php function Maxsum ( $ c1 , $ c2 , $ c3 , $ c4 ) {"}
{"text":"To store required sum","code":"$ sum = 0 ;"}
{"text":"Number of 234 's can be formed","code":"$ two34 = min ( $ c2 , min ( $ c3 , $ c4 ) ) ;"}
{"text":"Sum obtained with 234 s","code":"$ sum = $ two34 * 234 ;"}
{"text":"Remaining 2 's","code":"$ c2 -= $ two34 ;"}
{"text":"Sum obtained with 12 s","code":"$ sum += min ( $ c2 , $ c1 ) * 12 ;"}
{"text":"Return the required sum","code":"return $ sum ; }"}
{"text":"Driver code","code":"$ c1 = 5 ; $ c2 = 2 ; $ c3 = 3 ; $ c4 = 4 ; echo Maxsum ( $ c1 , $ c2 , $ c3 , $ c4 ) ; ? >"}
{"text":"Function to find the distinct pairs from 1 - a & 1 - b such that their sum is divisible by n .","code":"< ? php function findCountOfPairs ( $ a , $ b , $ n ) { $ ans = 0 ;"}
{"text":"pairs from 1 to n * ( a \/ n ) and 1 to n * ( b \/ n )","code":"$ ans += $ n * ( int ) ( $ a \/ $ n ) * ( int ) ( $ b \/ $ n ) ;"}
{"text":"pairs from 1 to n * ( a \/ n ) and n * ( b \/ n ) to b","code":"$ ans += ( int ) ( $ a \/ $ n ) * ( $ b % $ n ) ;"}
{"text":"pairs from n * ( a \/ n ) to a and 1 to n * ( b \/ n )","code":"$ ans += ( $ a % $ n ) * ( int ) ( $ b \/ $ n ) ;"}
{"text":"pairs from n * ( a \/ n ) to a and n * ( b \/ n ) to b","code":"$ ans += ( ( $ a % $ n ) + ( int ) ( $ b % $ n ) ) \/ $ n ;"}
{"text":"Return answer","code":"return $ ans ; }"}
{"text":"Driver code","code":"$ a = 5 ; $ b = 13 ; $ n = 3 ; echo findCountOfPairs ( $ a , $ b , $ n ) ; ? >"}
{"text":"Function to find the required array","code":"< ? php function findArray ( $ N , $ P ) {"}
{"text":"calculating minimum possible sum","code":"$ ans = ( $ P * ( $ P + 1 ) ) \/ 2 + ( $ N - $ P ) ;"}
{"text":"Array","code":"$ arr [ $ N + 1 ] = array ( ) ;"}
{"text":"place first P natural elements","code":"for ( $ i = 1 ; $ i <= $ P ; $ i ++ ) $ arr [ $ i ] = $ i ;"}
{"text":"Fill rest of the elements with 1","code":"for ( $ i = $ P + 1 ; $ i <= $ N ; $ i ++ ) $ arr [ $ i ] = 1 ; echo \" The \u2581 Minimum \u2581 Possible \u2581 Sum \u2581 is : \u2581 \" , $ ans , \" STRNEWLINE \" ; echo \" The \u2581 Array \u2581 Elements \u2581 are : \u2581 STRNEWLINE \" ; for ( $ i = 1 ; $ i <= $ N ; $ i ++ ) echo $ arr [ $ i ] , ' \u2581 ' ; }"}
{"text":"Driver Code","code":"$ N = 5 ; $ P = 3 ; findArray ( $ N , $ P ) ; ? >"}
{"text":"Function to print the intersection","code":"< ? php function findIntersection ( $ intervals , $ N ) {"}
{"text":"First interval","code":"$ l = $ intervals [ 0 ] [ 0 ] ; $ r = $ intervals [ 0 ] [ 1 ] ;"}
{"text":"Check rest of the intervals and find the intersection","code":"for ( $ i = 1 ; $ i < $ N ; $ i ++ ) {"}
{"text":"If no intersection exists","code":"if ( $ intervals [ $ i ] [ 0 ] > $ r $ intervals [ $ i ] [ 1 ] < $ l ) { echo - 1 ; return ; }"}
{"text":"Else update the intersection","code":"else { $ l = max ( $ l , $ intervals [ $ i ] [ 0 ] ) ; $ r = min ( $ r , $ intervals [ $ i ] [ 1 ] ) ; } } echo \" [ \" \u2581 . \u2581 $ l \u2581 . \u2581 \" , \" \u2581 . \u2581 $ r \u2581 . \u2581 \" ] \" ; }"}
{"text":"Driver code","code":"$ intervals = array ( array ( 1 , 6 ) , array ( 2 , 8 ) , array ( 3 , 10 ) , array ( 5 , 8 ) ) ; $ N = sizeof ( $ intervals ) ; findIntersection ( $ intervals , $ N ) ; ? >"}
{"text":"Function that compares a and b","code":"< ? php function cmp ( $ a , $ b ) { return ( $ a > $ b ) - ( $ a < $ b ) ; }"}
{"text":"Function to return length of longest subarray that satisfies one of the given conditions","code":"function maxSubarraySize ( $ arr ) { $ N = sizeof ( $ arr ) ; $ ans = 1 ; $ anchor = 0 ; for ( $ i = 1 ; $ i < $ N ; $ i ++ ) { $ c = cmp ( $ arr [ $ i - 1 ] , $ arr [ $ i ] ) ; if ( $ c == 0 ) $ anchor = $ i ; else if ( $ i == $ N - 1 or $ c * cmp ( $ arr [ $ i ] , $ arr [ $ i + 1 ] ) != -1 ) { $ ans = max ( $ ans , $ i - $ anchor + 1 ) ; $ anchor = $ i ; } } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 9 , 4 , 2 , 10 , 7 , 8 , 8 , 1 , 9 ) ;"}
{"text":"Print the required answer","code":"echo maxSubarraySize ( $ arr ) ; ? >"}
{"text":"Function to return total valid pairs","code":"< ? php function ValidPairs ( $ arr , $ n ) {"}
{"text":"Initialize count of all the elements","code":"$ count = array_fill ( 0 , 121 , 0 ) ;"}
{"text":"frequency count of all the elements","code":"for ( $ i = 0 ; $ i < $ n ; $ i ++ ) $ count [ $ arr [ $ i ] ] += 1 ; $ ans = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) for ( $ j = 0 ; $ j < $ n ; $ j ++ ) { if ( $ arr [ $ i ] < $ arr [ $ j ] ) continue ; if ( abs ( $ arr [ $ i ] - $ arr [ $ j ] ) % 2 == 1 ) continue ;"}
{"text":"Add total valid pairs","code":"$ ans += $ count [ $ arr [ $ i ] ] * $ count [ $ arr [ $ j ] ] ; if ( $ arr [ $ i ] == $ arr [ $ j ] )"}
{"text":"Exclude pairs made with a single element i . e . ( x , x )","code":"$ ans -= $ count [ $ arr [ $ i ] ] ; } return $ ans ; }"}
{"text":"Driver Code","code":"$ arr = array ( 16 , 17 , 18 ) ; $ n = count ( $ arr ) ;"}
{"text":"Function call to print required answer","code":"echo ( ValidPairs ( $ arr , $ n ) ) ; ? >"}
{"text":"Function to find minimum number of 1 ' s \u2581 to \u2581 be \u2581 replaced \u2581 to \u2581 0' s","code":"< ? php function minChanges ( $ A , $ n ) { $ cnt = 0 ; for ( $ i = 0 ; $ i < $ n - 2 ; ++ $ i ) { if ( ( $ i - 1 >= 0 ) && $ A [ $ i - 1 ] == 1 && $ A [ $ i + 1 ] == 1 && $ A [ $ i ] == 0 ) { $ A [ $ i + 1 ] = 0 ; $ cnt ++ ; } }"}
{"text":"return final answer","code":"return $ cnt ; }"}
{"text":"Driver Code","code":"$ A = array ( 1 , 1 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 ) ; $ n = sizeof ( $ A ) ; echo minChanges ( $ A , $ n ) ; ? >"}
{"text":"Function to find number of closing brackets and complete a regular bracket sequence","code":"< ? php function completeSequence ( $ s ) {"}
{"text":"Finding the length of sequence","code":"$ n = strlen ( $ s ) ; $ open = 0 ; $ close = 0 ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) {"}
{"text":"Counting opening brackets","code":"if ( $ s [ $ i ] == ' ( ' ) $ open ++ ; else"}
{"text":"Counting closing brackets","code":"$ close ++ ;"}
{"text":"Checking if at any position the number of closing bracket is more then answer is impossible","code":"if ( $ close > $ open ) { echo ( \" IMPOSSIBLE \" ) ; return ; } }"}
{"text":"If possible , print ' s ' and required closing brackets .","code":"echo ( $ s ) ; for ( $ i = 0 ; $ i < $ open - $ close ; $ i ++ ) echo ( \" ) \" ) ; }"}
{"text":"Driver Code","code":"$ s = \" ( ( ) ( ( ) ( \" ; completeSequence ( $ s ) ; ? >"}
{"text":"Function to print the smallest permutation","code":"< ? php function smallestPermute ( $ n ) { $ res = array_fill ( 0 , $ n + 1 , \" \" ) ;"}
{"text":"when n is even","code":"if ( $ n % 2 == 0 ) { for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { if ( $ i % 2 == 0 ) $ res [ $ i ] = chr ( 48 + $ i + 2 ) ; else $ res [ $ i ] = chr ( 48 + $ i ) ; } }"}
{"text":"when n is odd","code":"else { for ( $ i = 0 ; $ i < $ n - 2 ; $ i ++ ) { if ( $ i % 2 == 0 ) $ res [ $ i ] = chr ( 48 + $ i + 2 ) ; else $ res [ $ i ] = chr ( 48 + $ i ) ; }"}
{"text":"handling last 3 digit","code":"$ res [ $ n - 1 ] = chr ( 48 + $ n - 2 ) ; $ res [ $ n - 2 ] = chr ( 48 + $ n ) ; $ res [ $ n - 3 ] = chr ( 48 + $ n - 1 ) ; }"}
{"text":"add EOL and print result","code":"$ res [ $ n ] = ' \\0' ; for ( $ i = 0 ; $ i < $ n ; $ i ++ ) { echo $ res [ $ i ] ; } }"}
{"text":"Driver Code","code":"$ n = 7 ; smallestPermute ( $ n ) ; ? >"}
{"text":"Function to return minimum number of insertions required","code":"< ? php function minInsertions ( $ H , $ n , $ K ) {"}
{"text":"Initialize insertions to 0","code":"$ inser = 0 ; for ( $ i = 1 ; $ i < $ n ; ++ $ i ) { $ diff = abs ( $ H [ $ i ] - $ H [ $ i - 1 ] ) ; if ( $ diff <= $ K ) continue ; else $ inser += ceil ( $ diff \/ $ K ) - 1 ; }"}
{"text":"return total insertions","code":"return $ inser ; }"}
{"text":"Driver Code","code":"$ H = array ( 2 , 4 , 8 , 16 ) ; $ K = 3 ; $ n = sizeof ( $ H ) ; echo minInsertions ( $ H , $ n , $ K ) ; ? >"}
{"text":"Function that returns the minimum number of operations to be performed to reduce the number to 1","code":"< ? php function count_minimum_operations ( $ n ) {"}
{"text":"To stores the total number of operations to be performed","code":"$ count = 0 ; while ( $ n > 1 ) {"}
{"text":"if n is divisible by 3 then reduce it to n \/ 3","code":"if ( $ n % 3 == 0 ) $ n \/= 3 ;"}
{"text":"if n modulo 3 is 1 decrement it by 1","code":"else if ( $ n % 3 == 1 ) $ n -- ; else { if ( $ n == 2 ) $ n -- ;"}
{"text":"if n modulo 3 is 2 then increment it by 1","code":"else $ n ++ ; }"}
{"text":"update the counter","code":"$ count ++ ; } return $ count ; }"}
{"text":"Driver code","code":"$ n = 4 ; $ ans = count_minimum_operations ( $ n ) ; echo $ ans , \" STRNEWLINE \" ; ? >"}
{"text":"PHP implementation of the approach","code":"< ? php function maxSum ( $ a , $ n ) {"}
{"text":"To store sum","code":"$ s = 0 ;"}
{"text":"To store ending indices of the chosen prefix arrays","code":"$ l = array ( ) ; for ( $ i = 0 ; $ i < count ( $ a ) ; $ i ++ ) {"}
{"text":"Adding the absolute value of a [ i ]","code":"$ s += abs ( $ a [ $ i ] ) ; if ( $ a [ $ i ] >= 0 ) continue ;"}
{"text":"If i == 0 then there is no index to be flipped in ( i - 1 ) position","code":"if ( $ i == 0 ) array_push ( $ l , $ i + 1 ) ; else { array_push ( $ l , $ i + 1 ) ; array_push ( $ l , $ i ) ; } }"}
{"text":"print the maximised sum","code":"echo $ s . \" STRNEWLINE \" ;"}
{"text":"print the ending indices of the chosen prefix arrays","code":"for ( $ i = 0 ; $ i < count ( $ l ) ; $ i ++ ) echo $ l [ $ i ] . \" \u2581 \" ; }"}
{"text":"Driver Code","code":"$ n = 4 ; $ a = array ( 1 , -2 , -3 , 4 ) ; maxSum ( $ a , $ n ) ; ? >"}
{"text":"PHP program to find the longest common prefix between two strings after performing swaps on the second string","code":"< ? php function LengthLCP ( $ x , $ y ) { $ fr = array_fill ( 0 , 26 , NULL ) ;"}
{"text":"$a = strlen ( $x ) ; length of x $b = strlen ( $y ) ; length of y","code":"for ( $ i = 0 ; $ i < $ b ; $ i ++ ) {"}
{"text":"creating frequency array of characters of y","code":"$ fr [ ord ( $ y [ $ i ] ) - 97 ] += 1 ; }"}
{"text":"storing the length of longest common prefix","code":"$ c = 0 ; for ( $ i = 0 ; $ i < $ a ; $ i ++ ) {"}
{"text":"checking if the frequency of the character at position i in x in b is greater than zero or not if zero we increase the prefix count by 1","code":"if ( $ fr [ ord ( $ x [ $ i ] ) - 97 ] > 0 ) { $ c += 1 ; $ fr [ ord ( $ x [ $ i ] ) - 97 ] -= 1 ; } else break ; } echo $ c ; }"}
{"text":"Driver Code","code":"$ x = \" here \" ; $ y = \" there \" ; LengthLCP ( $ x , $ y ) ; return 0 ; ? >"}
{"text":"Function to count possible pairs","code":"< ? php function CountPair ( $ L , $ R ) {"}
{"text":"total count of numbers in range","code":"$ x = ( $ R - $ L + 1 ) ;"}
{"text":"printing count of pairs","code":"echo $ x \/ 2 , \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"$ L = 1 ; $ R = 8 ; CountPair ( $ L , $ R ) ; ? >"}
{"text":"Function to find problems not solved at the end of Nth day","code":"< ? php function problemsLeft ( $ K , $ P , $ N ) { if ( $ K <= $ P ) return 0 ; else return ( $ K - $ P ) * $ N ; }"}
{"text":"Driver Code","code":"$ K = 4 ; $ P = 1 ; $ N = 10 ; echo problemsLeft ( $ K , $ P , $ N ) ; ? >"}
{"text":"Function to find the chocolates left","code":"< ? php function results ( $ n , $ k ) { return round ( pow ( $ n , ( 1.0 \/ pow ( 2 , $ k ) ) ) ) ; }"}
{"text":"Driver code","code":"$ k = 3 ; $ n = 100000000 ; echo ( \" Chocolates \u2581 left \u2581 after \u2581 \" ) ; echo ( $ k ) ; echo ( \" \u2581 iterations \u2581 are \u2581 \" ) ; echo ( results ( $ n , $ k ) ) ; ? >"}
{"text":"Returns the minimum steps required to make an array of N elements equal , where the first array element equals M","code":"< ? php function steps ( $ N , $ M ) {"}
{"text":"Corner Case 1 : When N = 1","code":"if ( $ N == 1 ) return 0 ;"}
{"text":"Corner Case 2 : When N = 2 else if ( $N == 2 ) corner case 2","code":"return $ M ; return 2 * $ M + ( $ N - 3 ) ; }"}
{"text":"Driver Code","code":"$ N = 4 ; $ M = 4 ; echo steps ( $ N , $ M ) ; ? >"}
{"text":"Function to find the minimum $days","code":"< ? php function survival ( $ S , $ N , $ M ) {"}
{"text":"If we can not buy at least a week supply of food during the first week OR We can not buy a day supply of food on the first day then we can 't survive.","code":"if ( ( ( $ N * 6 ) < ( $ M * 7 ) && $ S > 6 ) $ M > $ N ) echo \" No \" ; else {"}
{"text":"If we can survive then we can buy ceil ( A \/ N ) times where A is total units of food required .","code":"$ days = ( $ M * $ S ) \/ $ N ; if ( ( ( $ M * $ S ) % $ N ) != 0 ) $ days ++ ; echo \" Yes \u2581 \" , floor ( $ days ) ; } }"}
{"text":"Driver code","code":"$ S = 10 ; $ N = 16 ; $ M = 2 ; survival ( $ S , $ N , $ M ) ; ? >"}
