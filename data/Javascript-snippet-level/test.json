{"text":"Function to find minimum sum after deletion","code":"function minSum ( A , N ) {"}
{"text":"Stores frequency of array elements","code":"let mp = new Map ( ) ; let sum = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Calculate sum","code":"sum += A [ i ] ;"}
{"text":"Update frequency of the current element","code":"mp [ A [ i ] ] ++ ; if ( mp . has ( A [ i ] ) ) { mp . set ( A [ i ] , mp . get ( A [ i ] ) + 1 ) } else { mp . set ( A [ i ] , 1 ) } }"}
{"text":"Stores the minimum sum required","code":"let minSum = Number . MAX_SAFE_INTEGER ;"}
{"text":"Traverse map","code":"for ( let it of mp ) {"}
{"text":"Find the minimum sum obtained","code":"minSum = Math . min ( minSum , sum - ( it [ 0 ] * it [ 1 ] ) ) ; }"}
{"text":"Return minimum sum","code":"return minSum ; }"}
{"text":"Input array","code":"let arr = [ 4 , 5 , 6 , 6 ] ;"}
{"text":"Size of array","code":"let N = arr . length document . write ( minSum ( arr , N ) + \" \" ) ;"}
{"text":"Function to calculate maximum difference between adjacent elements excluding every array element once","code":"function maxAdjacent ( arr , N ) { var res = [ ] ;"}
{"text":"Traverse the array","code":"for ( var i = 1 ; i < N - 1 ; i ++ ) { var prev = arr [ 0 ] ;"}
{"text":"Stores the maximum diff","code":"var maxi = Number . MIN_VALUE ;"}
{"text":"Check for maximum adjacent element","code":"for ( var j = 1 ; j < N ; j ++ ) {"}
{"text":"Exclude current element","code":"if ( i == j ) continue ;"}
{"text":"Update maximum difference","code":"maxi = Math . max ( maxi , Math . abs ( arr [ j ] - prev ) ) ;"}
{"text":"Update previous value","code":"prev = arr [ j ] ; }"}
{"text":"Append the result into a vector","code":"res . push ( maxi ) ; }"}
{"text":"Print the result","code":"for ( var j = 0 ; j < res . length ; j ++ ) document . write ( res [ j ] + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"var arr = [ 1 , 3 , 4 , 7 , 8 ] ; var N = arr . length ; maxAdjacent ( arr , N ) ;"}
{"text":"Function to find the size of the array if the array initially contains a single element","code":"function findSize ( N ) {"}
{"text":"Base case","code":"if ( N == 0 ) return 1 ; if ( N == 1 ) return 1 ; let Size = 2 * findSize ( parseInt ( N \/ 2 , 10 ) ) + 1 ;"}
{"text":"P \/ 2 -> findSize ( N \/ 2 ) P % 2 -> 1 P \/ 2 -> findSize ( N \/ 2 )","code":"return Size ; }"}
{"text":"Function to return the count of 1 s in the range [ L , R ]","code":"function CountOnes ( N , L , R ) { if ( L > R ) { return 0 ; }"}
{"text":"Base Case","code":"if ( N <= 1 ) { return N ; } let ret = 0 ; let M = parseInt ( N \/ 2 , 10 ) ; let Siz_M = findSize ( M ) ;"}
{"text":"PART 1 -> N \/ 2 [ 1 , Siz_M ]","code":"if ( L <= Siz_M ) {"}
{"text":"Update the right end point of the range to min ( Siz_M , R )","code":"ret += CountOnes ( parseInt ( N \/ 2 , 10 ) , L , Math . min ( Siz_M , R ) ) ; }"}
{"text":"PART 2 -> N % 2 [ SizM + 1 , Siz_M + 1 ]","code":"if ( L <= Siz_M + 1 && Siz_M + 1 <= R ) { ret += N % 2 ; }"}
{"text":"PART 3 -> N \/ 2 [ SizM + 2 , 2 * Siz_M - 1 ] Same as PART 1 Property of Symmetricity Shift the coordinates according to PART 1 Subtract ( Siz_M + 1 ) from both L , R","code":"if ( Siz_M + 1 < R ) { ret += CountOnes ( parseInt ( N \/ 2 , 10 ) , Math . max ( 1 , L - Siz_M - 1 ) , R - Siz_M - 1 ) ; } return ret ; }"}
{"text":"Input","code":"let N = 7 , L = 2 , R = 5 ;"}
{"text":"Counts the number of 1 's in  the range [L, R]","code":"document . write ( CountOnes ( N , L , R ) ) ;"}
{"text":"Function to check if number is prime or not","code":"function prime ( n ) {"}
{"text":"As 1 is neither prime nor composite return false","code":"if ( n == 1 ) return false ;"}
{"text":"Check if it is divided by any number then it is not prime , return false","code":"for ( i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; }"}
{"text":"Check if n is not divided by any number then it is prime and hence return true","code":"return true ; }"}
{"text":"Function to find the pair ( a , b ) such that sum is N & LCM is minimum","code":"function minDivisior ( n ) {"}
{"text":"Check if the number is prime","code":"if ( prime ( n ) ) { document . write ( 1 + \" \" + ( n - 1 ) ) ; }"}
{"text":"Now , if it is not prime then find the least divisior","code":"else { for ( i = 2 ; i * i <= n ; i ++ ) {"}
{"text":"Check if divides n then it is a factor","code":"if ( n % i == 0 ) {"}
{"text":"Required output is a = n \/ i & b = n \/ i * ( n - 1 )","code":"document . write ( n \/ i + \" \" + ( n \/ i * ( i - 1 ) ) ) ; break ; } } } }"}
{"text":"Driver Code","code":"var N = 4 ;"}
{"text":"Function call","code":"minDivisior ( N ) ;"}
{"text":"To store Landau 's function of the number","code":"var Landau = - 1000000000 ;"}
{"text":"Function to return gcd of 2 numbers","code":"function gcd ( a , b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }"}
{"text":"Function to return LCM of two numbers","code":"function lcm ( a , b ) { return ( a * b ) \/ gcd ( a , b ) ; }"}
{"text":"Function to find max lcm value among all representations of n","code":"function findLCM ( arr ) { var nth_lcm = arr [ 0 ] ; for ( var i = 1 ; i < arr . length ; i ++ ) nth_lcm = lcm ( nth_lcm , arr [ i ] ) ;"}
{"text":"Calculate Landau 's value","code":"Landau = Math . max ( Landau , nth_lcm ) ; }"}
{"text":"Recursive function to find different ways in which n can be written as sum of atleast one positive integers","code":"function findWays ( arr , i , n ) {"}
{"text":"Check if sum becomes n , consider this representation","code":"if ( n == 0 ) findLCM ( arr ) ;"}
{"text":"Start from previous element in the representation till n","code":"for ( var j = i ; j <= n ; j ++ ) {"}
{"text":"Include current element from representation","code":"arr . push ( j ) ;"}
{"text":"Call function again with reduced sum","code":"findWays ( arr , j , n - j ) ;"}
{"text":"Backtrack - remove current element from representation","code":"arr . pop ( ) ; } }"}
{"text":"Function to find the Landau 's function","code":"function Landau_function ( n ) { arr = [ ] ;"}
{"text":"Using recurrence find different ways in which n can be written as a sum of atleast one + ve integers","code":"findWays ( arr , 1 , n ) ;"}
{"text":"Print the result","code":"document . write ( Landau ) ; }"}
{"text":"Given N","code":"var N = 4 ;"}
{"text":"Function Call","code":"Landau_function ( N ) ;"}
{"text":"Function to check if a number holds the condition ( N - 1 ) ! % N = N - 1","code":"function isPrime ( n ) {"}
{"text":"Corner cases","code":"if ( n == 1 ) return true ; if ( n <= 3 ) return true ;"}
{"text":"Number divisible by 2 or 3 are not prime","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ;"}
{"text":"Iterate from 5 and keep checking for prime","code":"for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function to check the expression for the value N","code":"function checkExpression ( n ) { if ( isPrime ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"let N = 3 ; checkExpression ( N ) ;"}
{"text":"Function to check if array can be split in required K subsets","code":"function checkArray ( n , k , arr ) {"}
{"text":"Store count of odd numbers","code":"var cnt = 0 ; for ( i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if element is odd","code":"if ( ( arr [ i ] & 1 ) != 0 ) cnt += 1 ; }"}
{"text":"Check if split is possible","code":"if ( cnt >= k && cnt % 2 == k % 2 ) return true ; else return false ; }"}
{"text":"Driver code","code":"var arr = [ 1 , 3 , 4 , 7 , 5 , 3 , 1 ] ; var n = arr . length ; var k = 4 ; if ( checkArray ( n , k , arr ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to compute the sum","code":"function func ( arr , n ) { let ans = 0 ; let maxx = 0 ; let freq = Array . from ( { length : 100005 } , ( _ , i ) => 0 ) ; let temp ;"}
{"text":"Counting frequency of each term and finding maximum among it","code":"for ( let i = 0 ; i < n ; i ++ ) { temp = arr [ i ] ; freq [ temp ] ++ ; maxx = Math . max ( maxx , temp ) ; }"}
{"text":"Making cumulative frequency","code":"for ( let i = 1 ; i <= maxx ; i ++ ) { freq [ i ] += freq [ i - 1 ] ; } for ( let i = 1 ; i <= maxx ; i ++ ) { if ( freq [ i ] != 0 ) { let j ;"}
{"text":"Taking the ceil value","code":"let cur = Math . ceil ( 0.5 * i ) - 1.0 ; for ( j = 1.5 ; ; j ++ ) { let val = Math . min ( maxx , ( Math . ceil ( i * j ) - 1.0 ) ) ; let times = ( freq [ i ] - freq [ i - 1 ] ) , con = ( j - 0.5 ) ;"}
{"text":"nos . in [ ( n - 0.5 ) X , ( n + 0.5 ) X ) range will add n to the ans","code":"ans += times * con * ( freq [ val ] - freq [ cur ] ) ; cur = val ; if ( val == maxx ) break ; } } }"}
{"text":"Return the final result","code":"return ans ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 3 ] ; let n = arr . length ; document . write ( func ( arr , n ) ) ;"}
{"text":"Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array","code":"function insert_element ( a , n ) {"}
{"text":"Variable to store the Xor of all the elements","code":"let Xor = 0 ;"}
{"text":"Variable to store the sum of all elements","code":"let Sum = 0 ;"}
{"text":"Loop to find the Xor and the sum of the array","code":"for ( let i = 0 ; i < n ; i ++ ) { Xor ^= a [ i ] ; Sum += a [ i ] ; }"}
{"text":"If sum = 2 * Xor","code":"if ( Sum == 2 * Xor ) {"}
{"text":"No need to insert more elements","code":"document . write ( \" \" + \" \" ) ; return ; }"}
{"text":"We insert one more element which is Sum","code":"if ( Xor == 0 ) { document . write ( \" \" + \" \" ) ; document . write ( Sum + \" \" ) ; return ; }"}
{"text":"We insert two more elements Sum + Xor and Xor .","code":"let num1 = Sum + Xor ; let num2 = Xor ;"}
{"text":"Print the number of elements inserted in the array","code":"document . write ( \" \" + \" \" ) ;"}
{"text":"Print the elements that are inserted in the array","code":"document . write ( num1 + \" \" + num2 + \" \" ) ; }"}
{"text":"Driver code","code":"let a = [ 1 , 2 , 3 ] ; let n = a . length ; insert_element ( a , n ) ;"}
{"text":"Function to check if the roots of a quadratic equation are reciprocal of each other or not","code":"function checkSolution ( a , b , c ) { if ( a == c ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"let a = 2 , b = 0 , c = 2 ; checkSolution ( a , b , c ) ;"}
{"text":"Function check whether x is a perfect square or not","code":"function isPerfectSquare ( x ) {"}
{"text":"Find floating point value of square root of x .","code":"var sr = Math . sqrt ( x ) ;"}
{"text":"If square root is an integer","code":"return ( ( sr - Math . floor ( sr ) ) == 0 ) ; }"}
{"text":"Function to check Sunny Number","code":"function checkSunnyNumber ( N ) {"}
{"text":"Check if ( N + 1 ) is a perfect square or not","code":"if ( isPerfectSquare ( N + 1 ) ) { document . write ( \" \" ) ; }"}
{"text":"If ( N + 1 ) is not a perfect square","code":"else { document . write ( \" \" ) ; } }"}
{"text":"Given Number","code":"var N = 8 ;"}
{"text":"Function call","code":"checkSunnyNumber ( N ) ;"}
{"text":"Function to count the numbers which can convert N to 1 using the given operation","code":"function countValues ( n ) { let answer = 0 ;"}
{"text":"Iterate through all the integers","code":"for ( let i = 2 ; i <= n ; i ++ ) { let k = n ;"}
{"text":"Check if N can be converted to 1","code":"while ( k >= i ) { if ( k % i == 0 ) k \/= i ; else k -= i ; }"}
{"text":"Incrementing the count if it can be converted","code":"if ( k == 1 ) answer ++ ; } return answer ; }"}
{"text":"Driver code","code":"let N = 6 ; document . write ( countValues ( N ) ) ;"}
{"text":"Function that prints the required K numbers","code":"function printKNumbers ( N , K ) {"}
{"text":"Print 1 , K - 1 times","code":"for ( let i = 0 ; i < K - 1 ; i ++ ) document . write ( 1 + \" \" ) ;"}
{"text":"Print ( N - K + 1 )","code":"document . write ( N - K + 1 ) ; }"}
{"text":"Function to find the Nth stepping natural number","code":"function NthSmallest ( K ) {"}
{"text":"Declare the queue","code":"var Q = [ ] ; var x ;"}
{"text":"Enqueue 1 , 2 , ... , 9 in this order","code":"for ( var i = 1 ; i < 10 ; i ++ ) Q . push ( i ) ;"}
{"text":"Perform K operation on queue","code":"for ( var i = 1 ; i <= K ; i ++ ) {"}
{"text":"Get the ith Stepping number","code":"x = Q [ 0 ] ;"}
{"text":"Perform Dequeue from the Queue","code":"Q . shift ( ) ;"}
{"text":"If x mod 10 is not equal to 0","code":"if ( x % 10 != 0 ) {"}
{"text":"then Enqueue 10 x + ( x mod 10 ) - 1","code":"Q . push ( x * 10 + x % 10 - 1 ) ; }"}
{"text":"Enqueue 10 x + ( x mod 10 )","code":"Q . push ( x * 10 + x % 10 ) ;"}
{"text":"If x mod 10 is not equal to 9","code":"if ( x % 10 != 9 ) {"}
{"text":"then Enqueue 10 x + ( x mod 10 ) + 1","code":"Q . push ( x * 10 + x % 10 + 1 ) ; } }"}
{"text":"Return the dequeued number of the K - th operation as the Nth stepping number","code":"return x ; }"}
{"text":"initialise K","code":"var N = 16 ; document . write ( NthSmallest ( N ) ) ;"}
{"text":"Function to return the Least number","code":"function nearest ( n ) {"}
{"text":"Get the perfect square before and after N","code":"var prevSquare = parseInt ( Math . sqrt ( n ) ) ; var nextSquare = prevSquare + 1 ; prevSquare = prevSquare * prevSquare ; nextSquare = nextSquare * nextSquare ;"}
{"text":"Check which is nearest to N","code":"if ( ( n - prevSquare ) < ( nextSquare - n ) ) { ans = parseInt ( ( prevSquare - n ) ) ; } else ans = parseInt ( ( nextSquare - n ) ) ;"}
{"text":"return the result","code":"return ans ; }"}
{"text":"Driver code","code":"var n = 14 ; document . write ( nearest ( n ) + \" \" ) ; n = 16 ; document . write ( nearest ( n ) + \" \" ) ; n = 18 ; document . write ( nearest ( n ) + \" \" ) ;"}
{"text":"Function that prints the value of pi upto N decimal places","code":"function printValueOfPi ( N ) {"}
{"text":"Find value of pi upto using acos ( ) function","code":"let pi = 2 * Math . acos ( 0.0 ) ;"}
{"text":"Print value of pi upto N decimal places","code":"document . write ( pi . toFixed ( 4 ) ) ; }"}
{"text":"Driver Code","code":"let N = 4 ;"}
{"text":"Function that prints the value of pi","code":"printValueOfPi ( N ) ;"}
{"text":"Function to convert decimal number n to its binary representation stored as an array arr [ ]","code":"function decBinary ( arr , n ) { let k = parseInt ( Math . log2 ( n ) , 10 ) ; while ( n > 0 ) { arr [ k -- ] = n % 2 ; n = parseInt ( n \/ 2 , 10 ) ; } }"}
{"text":"Function to convert the number represented as a binary array arr [ ] into its decimal equivalent","code":"function binaryDec ( arr , n ) { let ans = 0 ; for ( let i = 0 ; i < n ; i ++ ) ans += arr [ i ] << ( n - i - 1 ) ; return ans ; }"}
{"text":"Function to return the updated integer after flipping the kth bit","code":"function getNum ( n , k ) {"}
{"text":"Number of bits in n","code":"let l = parseInt ( Math . log2 ( n ) , 10 ) + 1 ;"}
{"text":"Find the binary representation of n","code":"let a = new Array ( l ) ; a . fill ( 0 ) ; decBinary ( a , n ) ;"}
{"text":"The number of bits in n are less than k","code":"if ( k > l ) return n ;"}
{"text":"Flip the kth bit","code":"a [ k - 1 ] = ( a [ k - 1 ] == 0 ) ? 1 : 0 ;"}
{"text":"Return the decimal equivalent of the number","code":"return binaryDec ( a , l ) ; }"}
{"text":"Driver code","code":"let n = 56 , k = 2 ; document . write ( getNum ( n , k ) ) ;"}
{"text":"Javascript implementation of the approach","code":"let MAX = 1000000 ; let MOD = 10000007 ;"}
{"text":"Declare result array globally","code":"let result = new Array ( MAX + 1 ) ; result . fill ( 0 ) ; let fact = new Array ( MAX + 1 ) ; fact . fill ( 0 ) ;"}
{"text":"Function to precompute the product of factorials upto MAX","code":"function preCompute ( ) {"}
{"text":"Initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1","code":"fact [ 0 ] = 1 ; result [ 0 ] = 1 ;"}
{"text":"Iterate loop from 1 to MAX","code":"for ( let i = 1 ; i <= MAX ; i ++ ) {"}
{"text":"factorial ( i ) = factorial ( i - 1 ) * i","code":"fact [ i ] = ( ( fact [ i - 1 ] % MOD ) * i ) % MOD ;"}
{"text":"Result for current n is equal to result [ i - 1 ] multiplied by the factorial of i","code":"result [ i ] = ( ( result [ i - 1 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD ; } }"}
{"text":"Function to perform the queries","code":"function performQueries ( q , n ) {"}
{"text":"Precomputing the result till MAX","code":"preCompute ( ) ;"}
{"text":"Perform queries","code":"for ( let i = 0 ; i < n ; i ++ ) document . write ( result [ q [ i ] ] + \" \" ) ; }"}
{"text":"Driver code","code":"let q = [ 4 , 5 ] ; let n = q . length ; performQueries ( q , n ) ;"}
{"text":"Function to return gcd of a and b","code":"function gcd ( a , b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }"}
{"text":"Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c","code":"function divTermCount ( a , b , c , num ) {"}
{"text":"Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c","code":"return parseInt ( ( ( num \/ a ) + ( num \/ b ) + ( num \/ c ) - ( num \/ ( ( a * b ) \/ gcd ( a , b ) ) ) - ( num \/ ( ( c * b ) \/ gcd ( c , b ) ) ) - ( num \/ ( ( a * c ) \/ gcd ( a , c ) ) ) + ( num \/ ( ( ( ( a * b ) \/ gcd ( a , b ) ) * c ) \/ gcd ( ( ( a * b ) \/ gcd ( a , b ) ) , c ) ) ) ) ) ; }"}
{"text":"Function for binary search to find the nth term divisible by a , b or c","code":"function findNthTerm ( a , b , c , n ) {"}
{"text":"Set low to 1 and high to LONG_MAX","code":"var low = 1 , high = Number . MAX_SAFE_INTEGER , mid ; while ( low < high ) { mid = low + ( high - low ) \/ 2 ;"}
{"text":"If the current term is less than n then we need to increase low to mid + 1","code":"if ( divTermCount ( a , b , c , mid ) < n ) low = mid + 1 ;"}
{"text":"If current term is greater than equal to n then high = mid","code":"else high = mid ; } return low ; }"}
{"text":"Driver code","code":"var a = 2 , b = 3 , c = 5 , n = 100 ; document . write ( parseInt ( findNthTerm ( a , b , c , n ) ) ) ;"}
{"text":"Function that checks whether given angle can be created using any 3 sides","code":"function calculate_angle ( n , i , j , k ) {"}
{"text":"Initialize x and y","code":"var x , y ;"}
{"text":"Calculate the number of vertices between i and j , j and k","code":"if ( i < j ) x = j - i ; else x = j + n - i ; if ( j < k ) y = k - j ; else y = k + n - j ;"}
{"text":"Calculate the angle subtended at the circumference","code":"var ang1 = ( 180 * x ) \/ n ; var ang2 = ( 180 * y ) \/ n ;"}
{"text":"Angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees","code":"var ans = 180 - ang1 - ang2 ; return ans ; }"}
{"text":"Driver code","code":"var n = 5 ; var a1 = 1 ; var a2 = 2 ; var a3 = 5 ; document . write ( parseInt ( calculate_angle ( n , a1 , a2 , a3 ) ) ) ;"}
{"text":"Function that will find loss","code":"function Loss ( SP , P ) { var loss = 0 ; loss = ( 2 * P * P * SP ) \/ ( 100 * 100 - P * P ) ; document . write ( \" \" + loss . toFixed ( 3 ) ) ; }"}
{"text":"Driver Code","code":"var SP = 2400 , P = 30 ;"}
{"text":"Calling Function","code":"Loss ( SP , P ) ;"}
{"text":"Javascript implementation of the approach","code":"let MAXN = 1000001 ;"}
{"text":"Stores smallest prime factor for every number","code":"let spf = new Array ( MAXN ) ;"}
{"text":"Hash to store prime factors count","code":"let hash1 = new Array ( MAXN ) ;"}
{"text":"Function to calculate SPF ( Smallest Prime Factor ) for every number till MAXN","code":"function sieve ( ) { spf [ 1 ] = 1 ; for ( let i = 2 ; i < MAXN ; i ++ )"}
{"text":"Marking smallest prime factor for every number to be itself","code":"spf [ i ] = i ;"}
{"text":"Separately marking spf for every even number as 2","code":"for ( let i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ;"}
{"text":"Checking if i is prime","code":"for ( let i = 3 ; i * i < MAXN ; i ++ ) {"}
{"text":"Marking SPF for all numbers divisible by i","code":"if ( spf [ i ] == i ) { for ( let j = i * i ; j < MAXN ; j += i )"}
{"text":"Marking spf [ j ] if it is not previously marked","code":"if ( spf [ j ] == j ) spf [ j ] = i ; } } }"}
{"text":"Function to store the prime factors after dividing by the smallest prime factor at every step","code":"function getFactorization ( x ) { let temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 ) {"}
{"text":"Storing the count of prime factors in hash","code":"hash1 [ spf [ x ] ] ++ ; x = x \/ spf [ x ] ; } while ( x % temp == 0 ) x = x \/ temp ; } }"}
{"text":"Function that returns true if there are no common prime factors between x and other numbers of the array","code":"function check ( x ) { let temp ; while ( x != 1 ) { temp = spf [ x ] ;"}
{"text":"Checking whether it common prime factor with other numbers","code":"if ( x % temp == 0 && hash1 [ temp ] > 1 ) return false ; while ( x % temp == 0 ) x = x \/ temp ; } return true ; }"}
{"text":"Function that returns true if there is an element in the array which is coprime with all the other elements of the array","code":"function hasValidNum ( arr , n ) {"}
{"text":"Using sieve for generating prime factors","code":"sieve ( ) ; for ( let i = 0 ; i < n ; i ++ ) getFactorization ( arr [ i ] ) ;"}
{"text":"Checking the common prime factors with other numbers","code":"for ( let i = 0 ; i < n ; i ++ ) if ( check ( arr [ i ] ) ) return true ; return false ; }"}
{"text":"Driver code","code":"let arr = [ 2 , 8 , 4 , 10 , 6 , 7 ] ; let n = arr . length ; if ( hasValidNum ( arr , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph","code":"function countWays ( N ) {"}
{"text":"Total number of edges","code":"let E = parseInt ( ( N * ( N - 1 ) ) \/ 2 , 10 ) ; if ( N == 1 ) return 0 ; return Math . pow ( 2 , E - 1 ) ; }"}
{"text":"Driver code","code":"let N = 4 ; document . write ( countWays ( N ) ) ;"}
{"text":"Initialize the matrix with 0","code":"let l = new Array ( 1001 ) . fill ( 0 ) . map ( ( ) => new Array ( 1001 ) . fill ( 0 ) ) ; function initialize ( ) {"}
{"text":"0 C0 = 1","code":"l [ 0 ] [ 0 ] = 1 ; for ( let i = 1 ; i < 1001 ; i ++ ) {"}
{"text":"Set every nCr = 1 where r = 0","code":"l [ i ] [ 0 ] = 1 ; for ( let j = 1 ; j < i + 1 ; j ++ ) {"}
{"text":"Value for the current cell of Pascal 's triangle","code":"l [ i ] [ j ] = ( l [ i - 1 ] [ j - 1 ] + l [ i - 1 ] [ j ] ) ; } } }"}
{"text":"Function to return the value of nCr","code":"function nCr ( n , r ) {"}
{"text":"Return nCr","code":"return l [ n ] [ r ] ; }"}
{"text":"Build the Pascal 's triangle","code":"initialize ( ) ; let n = 8 ; let r = 3 ; document . write ( nCr ( n , r ) ) ;"}
{"text":"Function to return the minimum required absolute difference","code":"function minAbsDiff ( n ) { let mod = n % 4 ; if ( mod == 0 mod == 3 ) { return 0 ; } return 1 ; }"}
{"text":"Driver code","code":"let n = 5 ; document . write ( minAbsDiff ( n ) ) ;"}
{"text":"Javascript implementation of the above approach","code":"function check ( s ) {"}
{"text":"creating a frequency array","code":"let freq = new Array ( 10 ) . fill ( 0 ) , r ; while ( s != 0 ) {"}
{"text":"Finding the last digit of the number","code":"r = s % 10 ;"}
{"text":"Dividing the number by 10 to eliminate last digit","code":"s = parseInt ( s \/ 10 ) ;"}
{"text":"counting frequency of each digit","code":"freq [ r ] += 1 ; } let xor__ = 0 ;"}
{"text":"checking if the xor of all frequency is zero or not","code":"for ( let i = 0 ; i < 10 ; i ++ ) { xor__ = xor__ ^ freq [ i ] ; if ( xor__ == 0 ) return true ; else return false ; } }"}
{"text":"Driver function","code":"let s = 122233 ; if ( check ( s ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to prvar N lines","code":"function printLines ( n , k ) {"}
{"text":"Iterate N times to prvar N lines","code":"for ( i = 0 ; i < n ; i ++ ) { document . write ( k * ( 6 * i + 1 ) + \" \" + k * ( 6 * i + 2 ) + \" \" + k * ( 6 * i + 3 ) + \" \" + k * ( 6 * i + 5 ) + \" \" ) ; } }"}
{"text":"Driver Code","code":"var n = 2 , k = 2 ; printLines ( n , k ) ;"}
{"text":"Java script program to find sum of first n terms","code":"function calculateSum ( n ) {"}
{"text":"Sn = n * ( 4 * n * n + 6 * n - 1 ) \/ 3","code":"return ( Math . pow ( 2 , n + 1 ) + n - 2 ) ; }"}
{"text":"number of terms to be included in sum","code":"let n = 4 ;"}
{"text":"find the Sn","code":"document . write ( \" \" + calculateSum ( n ) ) ;"}
{"text":"JavaScript Program to Count the number of Special Strings of a given length N","code":"var mod = 1000000007 ;"}
{"text":"Function to return count of special strings","code":"function count_special ( n ) {"}
{"text":"stores the answer for a particular value of n","code":"var fib = [ ... Array ( n + 1 ) ] ;"}
{"text":"for n = 0 we have empty string","code":"fib [ 0 ] = 1 ;"}
{"text":"for n = 1 we have 2 special strings","code":"fib [ 1 ] = 2 ; for ( var i = 2 ; i <= n ; i ++ ) {"}
{"text":"calculate count of special string of length i","code":"fib [ i ] = ( ( fib [ i - 1 ] % mod ) + ( fib [ i - 2 ] % mod ) ) % mod ; }"}
{"text":"fib [ n ] stores the count of special strings of length n","code":"return fib [ n ] ; }"}
{"text":"initialise n","code":"var n = 3 ; document . write ( count_special ( n ) + \" \" ) ;"}
{"text":"Javascript implementation of the above approach","code":"let mod = 1000000000 ;"}
{"text":"Find the number of ways to reach the end","code":"function ways ( i , arr , n ) {"}
{"text":"Base case","code":"if ( i == n - 1 ) return 1 ; let sum = 0 ;"}
{"text":"Recursive structure","code":"for ( let j = 1 ; j + i < n && j <= arr [ i ] ; j ++ ) { sum += ( ways ( i + j , arr , n ) ) % mod ; sum %= mod ; } return sum % mod ; }"}
{"text":"Driver code","code":"let arr = [ 5 , 3 , 1 , 4 , 3 ] ; let n = arr . length ; document . write ( ways ( 0 , arr , n ) ) ;"}
{"text":"Javascript implementation of above approach","code":"let mod = ( 1e9 + 7 ) ;"}
{"text":"find the number of ways to reach the end","code":"function ways ( arr , n ) {"}
{"text":"dp to store value","code":"let dp = new Array ( n + 1 ) ; dp . fill ( 0 ) ;"}
{"text":"base case","code":"dp [ n - 1 ] = 1 ;"}
{"text":"Bottom up dp structure","code":"for ( let i = n - 2 ; i >= 0 ; i -- ) { dp [ i ] = 0 ;"}
{"text":"F [ i ] is dependent of F [ i + 1 ] to F [ i + k ]","code":"for ( let j = 1 ; ( ( j + i ) < n && j <= arr [ i ] ) ; j ++ ) { dp [ i ] += dp [ i + j ] ; dp [ i ] %= mod ; } }"}
{"text":"Return value of dp [ 0 ]","code":"return dp [ 0 ] % mod ; }"}
{"text":"Driver code","code":"let arr = [ 5 , 3 , 1 , 4 , 3 ] ; let n = arr . length ; document . write ( ways ( arr , n ) % mod ) ;"}
{"text":"Java program to get minimum cost to sort strings by reversal operation","code":"var first , second ; function pair ( first , second ) { this . first = first ; this . second = second ; }"}
{"text":"Returns the count of odd and even subsequences","code":"function countSum ( arr , n ) { var result = 0 ;"}
{"text":"Variables to store the count of even subsequences and odd subsequences","code":"var count_odd , count_even ;"}
{"text":"Initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count .","code":"count_odd = 0 ; count_even = 0 ;"}
{"text":"Find sum of all subsequences with even count and odd count and storing them as we iterate .","code":"for ( var i = 1 ; i <= n ; i ++ ) {"}
{"text":"if the number is even","code":"if ( arr [ i - 1 ] % 2 == 0 ) { count_even = count_even + count_even + 1 ; count_odd = count_odd + count_odd ; }"}
{"text":"if the number is odd","code":"else { var temp = count_even ; count_even = count_even + count_odd ; count_odd = count_odd + temp + 1 ; } } return new pair ( count_even , count_odd ) ; }"}
{"text":"Driver code","code":"var arr = [ 1 , 2 , 2 , 3 ] ; var n = arr . length ;"}
{"text":"Calling the function","code":"var ans = countSum ( arr , n ) ; document . write ( \" \" + ans . first ) ; document . write ( \" \" + ans . second ) ;"}
{"text":"Javascript implementation of the approach","code":"let MAX = 10 ;"}
{"text":"Function to convert a number into vector","code":"function numToVec ( N ) { let digit = [ ] ;"}
{"text":"Push all the digits of N from the end one by one to the vector","code":"while ( N != 0 ) { digit . push ( N % 10 ) ; N = Math . floor ( N \/ 10 ) ; }"}
{"text":"If the original number was 0","code":"if ( digit . length == 0 ) digit . push ( 0 ) ;"}
{"text":"Reverse the vector elements","code":"digit . reverse ( ) ;"}
{"text":"Return the required vector","code":"return digit ; }"}
{"text":"Function to return the count of B length integers which are less than C and they contain digits from set A [ ] only","code":"function solve ( A , B , C ) { let digit = [ ] ; let d , d2 ;"}
{"text":"Convert number to digit array","code":"digit = numToVec ( C ) ; d = A . length ;"}
{"text":"Case 1 : No such number possible as the generated numbers will always be greater than C","code":"if ( B > digit . length d == 0 ) return 0 ;"}
{"text":"Case 2 : All integers of length B are valid as they all are less than C","code":"else if ( B < digit . length ) {"}
{"text":"contain 0","code":"if ( A [ 0 ] == 0 && B != 1 ) return Math . floor ( ( d - 1 ) * Math . pow ( d , B - 1 ) ) ; else return Math . floor ( Math . pow ( d , B ) ) ; }"}
{"text":"Case 3","code":"else { let dp = new Array ( B + 1 ) ; let lower = new Array ( MAX + 1 ) ; for ( let i = 0 ; i < dp . length ; i ++ ) { dp [ i ] = 0 ; } for ( let i = 0 ; i < lower . length ; i ++ ) { lower [ i ] = 0 ; }"}
{"text":"Update the lower [ ] array such that lower [ i ] stores the count of elements in A [ ] which are less than i","code":"for ( let i = 0 ; i < d ; i ++ ) lower [ A [ i ] + 1 ] = 1 ; for ( let i = 1 ; i <= MAX ; i ++ ) lower [ i ] = lower [ i - 1 ] + lower [ i ] ; let flag = true ; dp [ 0 ] = 0 ; for ( let i = 1 ; i <= B ; i ++ ) { d2 = lower [ digit [ i - 1 ] ] ; dp [ i ] = dp [ i - 1 ] * d ;"}
{"text":"For first index we can 't use 0","code":"if ( i == 1 && A [ 0 ] == 0 && B != 1 ) d2 = d2 - 1 ;"}
{"text":"Whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of C","code":"if ( flag ) dp [ i ] += d2 ;"}
{"text":"Is digit [ i - 1 ] present in A ?","code":"flag = ( flag & ( lower [ digit [ i - 1 ] + 1 ] == lower [ digit [ i - 1 ] ] + 1 ) ) ; } return dp [ B ] ; } }"}
{"text":"Driver code","code":"let arr = [ 0 , 1 , 2 , 5 ] ; let N = 2 ; let k = 21 ; document . write ( solve ( arr , N , k ) ) ;"}
{"text":"Function to return the number of ways having weight as wt in K - ary tree","code":"function solve ( dp , wt , K , M , used ) {"}
{"text":"Return 0 if weight becomes less than zero","code":"if ( wt < 0 ) { return 0 ; } if ( wt == 0 ) {"}
{"text":"Return one only if the current path has included edge weight of atleast M","code":"if ( used == 1 ) { return 1 ; } return 0 ; } if ( dp [ wt ] [ used ] != - 1 ) { return dp [ wt ] [ used ] ; } let ans = 0 ; for ( let i = 1 ; i <= K ; i ++ ) {"}
{"text":"If the current edge weight is greater than or equal to M , set used as true","code":"if ( i >= M ) { ans += solve ( dp , wt - i , K , M , used 1 ) ; } else { ans += solve ( dp , wt - i , K , M , used ) ; } } return dp [ wt ] [ used ] = ans ; }"}
{"text":"Driver Code to test above function","code":"let W = 3 , K = 3 , M = 2 ; let dp = new Array ( W + 1 ) ; for ( let i = 0 ; i < W + 1 ; i ++ ) { dp [ i ] = new Array ( 2 ) ; for ( let j = 0 ; j < 2 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } document . write ( solve ( dp , W , K , M , 0 ) + \" \" ) ;"}
{"text":"Function to find the number of partitions of N","code":"function partitions ( n ) { var p = Array ( n + 1 ) . fill ( 0 ) ;"}
{"text":"Base case","code":"p [ 0 ] = 1 ; for ( i = 1 ; i <= n ; ++ i ) { var k = 1 ; while ( ( k * ( 3 * k - 1 ) ) \/ 2 <= i ) { p [ i ] += ( k % 2 != 0 ? 1 : - 1 ) * p [ i - ( k * ( 3 * k - 1 ) ) \/ 2 ] ; if ( k > 0 ) { k *= - 1 ; } else { k = 1 - k ; } } } return p [ n ] ; }"}
{"text":"Driver code","code":"var N = 20 ; document . write ( partitions ( N ) ) ;"}
{"text":"Return the length of LIP in 2D matrix","code":"function LIP ( dp , mat , n , m , x , y ) {"}
{"text":"If value not calculated yet .","code":"if ( dp [ x ] [ y ] < 0 ) { let result = 0 ;"}
{"text":"If reach bottom left cell , return 1.","code":"if ( x == n - 1 && y == m - 1 ) return dp [ x ] [ y ] = 1 ;"}
{"text":"If reach the corner of the matrix .","code":"if ( x == n - 1 y == m - 1 ) result = 1 ;"}
{"text":"If value greater than below cell .","code":"if ( x + 1 < n && mat [ x ] [ y ] < mat [ x + 1 ] [ y ] ) result = 1 + LIP ( dp , mat , n , m , x + 1 , y ) ;"}
{"text":"If value greater than left cell .","code":"if ( y + 1 < m && mat [ x ] [ y ] < mat [ x ] [ y + 1 ] ) result = Math . max ( result , 1 + LIP ( dp , mat , n , m , x , y + 1 ) ) ; dp [ x ] [ y ] = result ; } return dp [ x ] [ y ] ; }"}
{"text":"Wrapper function","code":"function wrapper ( mat , n , m ) { let dp = new Array ( 10 ) ; for ( let i = 0 ; i < 10 ; i ++ ) { dp [ i ] = new Array ( 10 ) ; for ( let j = 0 ; j < 10 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } return LIP ( dp , mat , n , m , 0 , 0 ) ; }"}
{"text":"Driver code","code":"let mat = [ [ 1 , 2 , 3 , 4 ] , [ 2 , 2 , 3 , 4 ] , [ 3 , 2 , 3 , 4 ] , [ 4 , 5 , 6 , 7 ] , ] ; let n = 4 , m = 4 ; document . write ( wrapper ( mat , n , m ) ) ;"}
{"text":"Recursive function to count number of paths","code":"function countPaths ( n , m ) {"}
{"text":"If we reach bottom or top left , we are have only one way to reach ( 0 , 0 )","code":"if ( n == 0 m == 0 ) return 1 ;"}
{"text":"Else count sum of both ways","code":"return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) ) ; }"}
{"text":"Driver Code","code":"let n = 3 , m = 2 ; document . write ( \" \" + countPaths ( n , m ) ) ;"}
{"text":"JavaScript program to solve Gold Mine problem","code":"let MAX = 100 ;"}
{"text":"Returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down","code":"function getMaxGold ( gold , m , n ) {"}
{"text":"Create a table for storing intermediate results and initialize all cells to 0. The first row of goldMineTable gives the maximum gold that the miner can collect when starts that row","code":"let goldTable = new Array ( m ) ; for ( let i = 0 ; i < m ; i ++ ) { goldTable [ i ] = new Array ( n ) ; for ( let j = 0 ; j < n ; j ++ ) { goldTable [ i ] [ j ] = 0 ; } } for ( let col = n - 1 ; col >= 0 ; col -- ) { for ( let row = 0 ; row < m ; row ++ ) {"}
{"text":"Gold collected on going to the cell on the right ( -> )","code":"let right = ( col == n - 1 ) ? 0 : goldTable [ row ] [ col + 1 ] ;"}
{"text":"Gold collected on going to the cell to right up ( \/ )","code":"let right_up = ( row == 0 col == n - 1 ) ? 0 : goldTable [ row - 1 ] [ col + 1 ] ;"}
{"text":"Gold collected on going to the cell to right down ( \\ )","code":"let right_down = ( row == m - 1 col == n - 1 ) ? 0 : goldTable [ row + 1 ] [ col + 1 ] ;"}
{"text":"Max gold collected from taking either of the above 3 paths","code":"goldTable [ row ] [ col ] = gold [ row ] [ col ] + Math . max ( right , Math . max ( right_up , right_down ) ) ; } }"}
{"text":"The max amount of gold collected will be the max value in first column of all rows","code":"let res = goldTable [ 0 ] [ 0 ] ; for ( let i = 1 ; i < m ; i ++ ) res = Math . max ( res , goldTable [ i ] [ 0 ] ) ; return res ; }"}
{"text":"Driver code","code":"let gold = [ [ 1 , 3 , 1 , 5 ] , [ 2 , 2 , 4 , 1 ] , [ 5 , 0 , 2 , 3 ] , [ 0 , 6 , 1 , 2 ] ] ; let m = 4 , n = 4 ; document . write ( getMaxGold ( gold , m , n ) ) ;"}
{"text":"Javascript program to find minimum adjustment cost of an array","code":"let M = 100 ;"}
{"text":"Function to find minimum adjustment cost of an array","code":"function minAdjustmentCost ( A , n , target ) {"}
{"text":"dp [ i ] [ j ] stores minimal adjustment cost on changing A [ i ] to j","code":"let dp = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { dp [ i ] = new Array ( n ) ; for ( let j = 0 ; j <= M ; j ++ ) { dp [ i ] [ j ] = 0 ; } }"}
{"text":"handle first element of array separately","code":"for ( let j = 0 ; j <= M ; j ++ ) dp [ 0 ] [ j ] = Math . abs ( j - A [ 0 ] ) ;"}
{"text":"do for rest elements of the array","code":"for ( let i = 1 ; i < n ; i ++ ) {"}
{"text":"replace A [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ]","code":"for ( let j = 0 ; j <= M ; j ++ ) {"}
{"text":"initialize minimal adjustment cost to INT_MAX","code":"dp [ i ] [ j ] = Number . MAX_VALUE ;"}
{"text":"consider all k such that k >= max ( j - target , 0 ) and k <= min ( M , j + target ) and take minimum","code":"let k = Math . max ( j - target , 0 ) ; for ( ; k <= Math . min ( M , j + target ) ; k ++ ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i - 1 ] [ k ] + Math . abs ( A [ i ] - j ) ) ; } }"}
{"text":"return minimum value from last row of dp table","code":"let res = Number . MAX_VALUE ; for ( let j = 0 ; j <= M ; j ++ ) res = Math . min ( res , dp [ n - 1 ] [ j ] ) ; return res ; }"}
{"text":"Driver Code","code":"let arr = [ 55 , 77 , 52 , 61 , 39 , 6 , 25 , 60 , 49 , 47 ] ; let n = arr . length ; let target = 10 ; document . write ( \" \" + minAdjustmentCost ( arr , n , target ) ) ;"}
{"text":"Function to find the number of triplets from the range [ L , R ] having sum of two numbers from the triplet equal to the third number","code":"function totalCombination ( L , R ) {"}
{"text":"Stores the total number of triplets","code":"let count = 0 ;"}
{"text":"Find the difference of the range","code":"let K = R - L ;"}
{"text":"Case 1 : If triplets can 't  be formed, then return 0","code":"if ( K < L ) return 0 ;"}
{"text":"Otherwise","code":"let ans = K - L ;"}
{"text":"Update the total number of triplets","code":"count = ( ( ans + 1 ) * ( ans + 2 ) ) \/ 2 ;"}
{"text":"Return the count","code":"return count ; }"}
{"text":"Driver Code","code":"let L = 2 , R = 6 ; document . write ( totalCombination ( L , R ) ) ;"}
{"text":"Satisfying the given conditions","code":"function printArrays ( n ) {"}
{"text":"Declare the two arrays A and B","code":"let A = [ ] ; let B = [ ] ;"}
{"text":"Iterate from range [ 1 , 2 * n ]","code":"for ( let i = 1 ; i <= 2 * n ; i ++ ) {"}
{"text":"Assign consecutive numbers to same indices of the two arrays","code":"if ( i % 2 == 0 ) A . push ( i ) ; else B . push ( i ) ; }"}
{"text":"Print the first array","code":"document . write ( \" \" ) ; for ( let i = 0 ; i < n ; i ++ ) { document . write ( A [ i ] ) ; if ( i != n - 1 ) document . write ( \" \" ) ; } document . write ( \" \" + \" \" ) ;"}
{"text":"Print the second array , B","code":"document . write ( \" \" ) ; for ( let i = 0 ; i < n ; i ++ ) { document . write ( B [ i ] ) ; if ( i != n - 1 ) document . write ( \" \" ) ; } document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let N = 5 ;"}
{"text":"Function Call","code":"printArrays ( N ) ;"}
{"text":"Function to flip bits of A and B which are set bits in A and B","code":"function flipBitsOfAandB ( A , B ) {"}
{"text":"Iterater all possible bits of A and B","code":"for ( i = 0 ; i < 32 ; i ++ ) {"}
{"text":"If ith bit is set in both A and B","code":"if ( ( ( A & ( 1 << i ) ) & ( B & ( 1 << i ) ) ) != 0 ) {"}
{"text":"Clear i - th bit of A","code":"A = A ^ ( 1 << i ) ;"}
{"text":"Clear i - th bit of B","code":"B = B ^ ( 1 << i ) ; } }"}
{"text":"Print A and B","code":"document . write ( A + \" \" + B ) ; }"}
{"text":"Driver Code","code":"var A = 7 , B = 4 ; flipBitsOfAandB ( A , B ) ;"}
{"text":"Function to find the distinct sums","code":"function findDistinctSums ( N ) { return ( 2 * N - 1 ) ; }"}
{"text":"Driver code","code":"let N = 3 ; document . write ( findDistinctSums ( N ) ) ;"}
{"text":"Function to count the number of substrings consists of 0 , 1 , and 2","code":"function countSubstrings ( str ) {"}
{"text":"Initialize frequency array of size 3","code":"let freq = new Array ( 3 ) . fill ( 0 )"}
{"text":"Stores the resultant count","code":"let count = 0 ; let i = 0 ;"}
{"text":"Traversing string str","code":"for ( let j = 0 ; j < str . length ; j ++ ) {"}
{"text":"Update frequency array","code":"freq [ str . charCodeAt ( j ) - ' ' . charCodeAt ( 0 ) ] ++ ;"}
{"text":"If all the characters are present counting number of substrings possible","code":"while ( freq [ 0 ] > 0 && freq [ 1 ] > 0 && freq [ 2 ] > 0 ) { freq [ str . charCodeAt ( i ++ ) - ' ' . charCodeAt ( 0 ) ] -- ; }"}
{"text":"Update number of substrings","code":"count += i ; }"}
{"text":"Return the number of substrings","code":"return count ; }"}
{"text":"Driver Code","code":"let str = \" \" ; let count = countSubstrings ( str ) ; document . write ( count ) ;"}
{"text":"Function to find the minimum number of flips to make all three pairs of consecutive characters different","code":"function minFlips ( str ) {"}
{"text":"Stores resultant count of pairs","code":"let count = 0 ;"}
{"text":"Base Case","code":"if ( str . length <= 2 ) { return 0 ; }"}
{"text":"Iterate over the range [ 0 , N - 2 ]","code":"for ( let i = 0 ; i < str . length - 2 ; ) {"}
{"text":"If the consecutive 3 numbers are the same then increment the count and the counter","code":"if ( str [ i ] == str [ i + 1 ] && str [ i + 2 ] == str [ i + 1 ] ) { i = i + 3 ; count ++ ; } else { i ++ ; } }"}
{"text":"Return the answer","code":"return count ; }"}
{"text":"Driver Code","code":"let S = \" \" ; document . write ( minFlips ( S ) ) ;"}
{"text":"Function to convert Decimal to Hex","code":"function convertToHex ( num ) { let temp = \" \" ; while ( num != 0 ) { let rem = num % 16 ; let c = 0 ; if ( rem < 10 ) { c = rem + 48 ; } else { c = rem + 87 ; } temp += String . fromCharCode ( c ) ; num = Math . floor ( num \/ 16 ) ; } return temp ; }"}
{"text":"Function to encrypt the string","code":"function encryptString ( S , N ) { let ans = \" \" ;"}
{"text":"Iterate the characters of the string","code":"for ( let i = 0 ; i < N ; i ++ ) { let ch = S [ i ] ; let count = 0 ; let hex ;"}
{"text":"Iterate until S [ i ] is equal to ch","code":"while ( i < N && S [ i ] == ch ) {"}
{"text":"Update count and i","code":"count ++ ; i ++ ; }"}
{"text":"Decrement i by 1","code":"i -- ;"}
{"text":"Convert count to hexadecimal representation","code":"hex = convertToHex ( count ) ;"}
{"text":"Append the character","code":"ans += ch ;"}
{"text":"Append the characters frequency in hexadecimal representation","code":"ans += hex ; }"}
{"text":"Reverse the obtained answer","code":"ans = ans . split ( ' ' ) . reverse ( ) . join ( \" \" ) ;"}
{"text":"Return required answer","code":"return ans ; }"}
{"text":"Given Input","code":"let S = \" \" ; let N = S . length ;"}
{"text":"Function Call","code":"document . write ( encryptString ( S , N ) ) ;"}
{"text":"Function to calculate and return the value of Binomial Coefficient C ( n , k )","code":"function binomialCoeff ( n , k ) { let res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( k > n - k ) k = n - k ;"}
{"text":"Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( let i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; }"}
{"text":"Function to return the count of binary Strings of length N such that frequency of 1 ' s \u2581 exceed \u2581 that \u2581 of \u2581 0' s","code":"function countOfString ( N ) {"}
{"text":"Count of N - length binary Strings","code":"let Stotal = Math . pow ( 2 , N ) ;"}
{"text":"Count of N - length binary Strings having equal count of 0 ' s \u2581 and \u2581 1' s","code":"let Sequal = 0 ;"}
{"text":"For even length Strings","code":"if ( N % 2 == 0 ) Sequal = binomialCoeff ( N , N \/ 2 ) ; let S1 = ( Stotal - Sequal ) \/ 2 ; return S1 ; }"}
{"text":"Driver Code","code":"let N = 3 ; document . write ( countOfString ( N ) ) ;"}
{"text":"Function to remove all occurrences of a character in the string","code":"function removeCharRecursive ( str , X ) {"}
{"text":"Base Case","code":"if ( str . length == 0 ) { return \" \" ; }"}
{"text":"Check the first character of the given string","code":"if ( str . charAt ( 0 ) == X ) {"}
{"text":"Pass the rest of the string to recursion Function call","code":"return removeCharRecursive ( str . substring ( 1 ) , X ) ; }"}
{"text":"Add the first character of str and string from recursion","code":"return str . charAt ( 0 ) + removeCharRecursive ( str . substring ( 1 ) , X ) ; }"}
{"text":"Given String","code":"var str = \" \" ;"}
{"text":"Given character","code":"var X = ' ' ;"}
{"text":"Function call","code":"str = removeCharRecursive ( str , X ) ; document . write ( str ) ;"}
{"text":"Function checks whether given time is correct","code":"function isValid ( a1 , a2 , str , flag ) { let v1 , v2 ;"}
{"text":"To check minute value of time","code":"if ( flag == 0 ) { v1 = str [ 4 ] ; v2 = str [ 3 ] ; } else {"}
{"text":"To check hour value of time","code":"v1 = str [ 1 ] ; v2 = str [ 0 ] ; }"}
{"text":"Changes in value is not allowed at position where ' ? ' is not present","code":"if ( v1 != a1 && v1 != ' ' ) return false ; if ( v2 != a2 && v2 != ' ' ) return false ; return true ; }"}
{"text":"Function checks whether the absolute difference between hour and minute value is within [ L , R ]","code":"function inRange ( hh , mm , L , R ) { let a = Math . abs ( hh - mm ) ;"}
{"text":"Checks if the difference is outside the give range","code":"if ( a < L a > R ) return false ; return true ; }"}
{"text":"Displays time in proper 24 - hour format","code":"function displayTime ( hh , mm ) { if ( hh > 10 ) document . write ( hh + \" \" ) ; else if ( hh < 10 ) document . write ( \" \" + hh + \" \" ) ; if ( mm > 10 ) document . write ( mm + \" \" ) ; else if ( mm < 10 ) document . write ( \" \" + mm + \" \" ) ; }"}
{"text":"Function find the desired value of time whose difference lies in the range [ L , R ]","code":"function maximumTimeWithDifferenceInRange ( str , L , R ) { let i = 0 , j = 0 ; let h1 , h2 , m1 , m2 ;"}
{"text":"Decrease hour value from 23 to 0","code":"for ( i = 23 ; i >= 0 ; i -- ) { h1 = i % 10 ; h2 = Math . floor ( i \/ 10 ) ;"}
{"text":"Check if the hour value is valid if not valid then no need to change minute value , since time will still remain in valid , to check hour value flag is set to 1.","code":"if ( ! isValid ( String . fromCharCode ( h1 ) , String . fromCharCode ( h2 ) , str , 1 ) ) { continue ; }"}
{"text":"Decrease minute value from 59 to 0","code":"for ( j = 59 ; j >= 0 ; j -- ) { m1 = j % 10 ; m2 = Math . floor ( j \/ 10 ) ;"}
{"text":"Check if the minute value is valid , if not valid then skip the current iteration , to check ' minute ' value flag is set to 0.","code":"if ( ! isValid ( String . fromCharCode ( m1 ) , String . fromCharCode ( m2 ) , str , 0 ) ) { continue ; } if ( inRange ( i , j , L , R ) ) { displayTime ( i , j ) ; return ; } } } if ( inRange ( i , j , L , R ) ) displayTime ( i , j ) ; else document . write ( \" \" ) ; }"}
{"text":"Input time","code":"let timeValue = \" \" ;"}
{"text":"Difference range","code":"let L = 20 , R = 39 ; maximumTimeWithDifferenceInRange ( timeValue , L , R ) ;"}
{"text":"Function to check string str can be split a string into even length palindromic substrings","code":"function check ( s , n ) {"}
{"text":"Initialize a stack","code":"var st = [ ] ;"}
{"text":"Iterate the string","code":"for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"If the i - th character is same as that at the top of the stack then pop the top element","code":"if ( st . length != 0 && st [ st . length - 1 ] == s [ i ] ) st . pop ( ) ;"}
{"text":"Else push the current charactor into the stack","code":"else st . push ( s [ i ] ) ; }"}
{"text":"If the stack is empty , then even palindromic substrings are possible","code":"if ( st . length == 0 ) { return true ; }"}
{"text":"Else not - possible","code":"else { return false ; } }"}
{"text":"Given string","code":"var str = \" \" ; var n = str . length ;"}
{"text":"Function Call","code":"if ( check ( str , n ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Javascript program for the above approach","code":"function findNumOfValidWords ( w , p ) {"}
{"text":"To store the frequency of string after bitmasking","code":"var m = new Map ( ) ;"}
{"text":"To store result for each string in arr2 [ ]","code":"var res = [ ] ;"}
{"text":"Traverse the arr1 [ ] and bitmask each string in it","code":"w . forEach ( s => { var val = 0 ;"}
{"text":"Bitmasking for each string s","code":"s . split ( ' ' ) . forEach ( c => { val = val | ( 1 << ( c . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ) ; } ) ;"}
{"text":"Update the frequency of string with it 's bitmasking value","code":"if ( m . has ( val ) ) m . set ( val , m . get ( val ) + 1 ) else m . set ( val , 1 ) } ) ;"}
{"text":"Traverse the arr2 [ ]","code":"p . forEach ( s => { var val = 0 ;"}
{"text":"Bitmasking for each String s","code":"s . split ( ' ' ) . forEach ( c => { val = val | ( 1 << ( c . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ) ; } ) ; var temp = val ; var first = s [ 0 ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ; var count = 0 ; while ( temp != 0 ) {"}
{"text":"Check if temp is present in an unordered_map or not","code":"if ( ( ( temp >> first ) & 1 ) == 1 ) { if ( m . has ( temp ) ) { count += m . get ( temp ) ; } }"}
{"text":"Check for next set bit","code":"temp = ( temp - 1 ) & val ; }"}
{"text":"Push the count for current string in resultant array","code":"res . push ( count ) ; } ) ;"}
{"text":"Print the count for each string","code":"res . forEach ( it => { document . write ( it + \" \" ) ; } ) ; }"}
{"text":"Driver Code","code":"var arr1 = [ \" \" , \" \" , \" \" , \" \" , \" \" , \" \" , \" \" ] ; var arr2 = [ \" \" , \" \" , \" \" , \" \" , \" \" , \" \" ] ;"}
{"text":"Function call","code":"findNumOfValidWords ( arr1 , arr2 ) ;"}
{"text":"Function to print the binary number","code":"function flip ( s ) { for ( let i = 0 ; i < s . length ; i ++ ) {"}
{"text":"Check if the current number is 0","code":"if ( s [ i ] == ' ' ) {"}
{"text":"Find the continuous 0 s","code":"while ( s [ i ] == ' ' ) {"}
{"text":"Replace initially occurring 0 with 1","code":"s [ i ] = ' ' ; i ++ ; }"}
{"text":"Break out of loop if 1 occurs","code":"break ; } } return s . join ( \" \" ) ; }"}
{"text":"Driver code","code":"let s = \" \" ; document . write ( flip ( s . split ( ' ' ) ) ) ;"}
{"text":"Function to return the original string after converting it back from camelCase","code":"function getOrgString ( s ) {"}
{"text":"Print the first character as it is","code":"document . write ( s [ 0 ] ) ;"}
{"text":"Traverse the rest of the characters one by one","code":"var i = 1 ; while ( i < s . length ) {"}
{"text":"If current character is uppercase print space followed by the current character in lowercase","code":"if ( s [ i ] . charCodeAt ( 0 ) >= \" \" . charCodeAt ( 0 ) && s [ i ] . charCodeAt ( 0 ) <= \" \" . charCodeAt ( 0 ) ) document . write ( \" \" + s [ i ] . toLowerCase ( ) ) ;"}
{"text":"Else print the current character","code":"else document . write ( s [ i ] ) ; i ++ ; } }"}
{"text":"Driver code","code":"var s = \" \" ; getOrgString ( s ) ;"}
{"text":"Function to count the character ' a '","code":"function countChar ( str , x ) { let count = 0 ; let n = 10 ; for ( let i = 0 ; i < str . length ; i ++ ) if ( str [ i ] == x ) count ++ ;"}
{"text":"atleast k repetition are required","code":"let repetitions = n \/ str . length ; count = count * repetitions ;"}
{"text":"if n is not the multiple of the string size check for the remaining repeating character .","code":"for ( let i = 0 ; i < n % str . length ; i ++ ) { if ( str [ i ] == x ) count ++ ; } return count ; }"}
{"text":"Driver code","code":"let str = \" \" ; document . write ( countChar ( str , ' ' ) ) ;"}
{"text":"Javascript program to count frequencies of array items having small values .","code":"function countFreq ( arr , n , limit ) {"}
{"text":"Create an array to store counts . The size of array is limit + 1 and all values are initially 0","code":"let count = new Array ( limit + 1 ) ; count . fill ( 0 ) ;"}
{"text":"Traverse through array elements and count frequencies ( assuming that elements are limited by limit )","code":"for ( let i = 0 ; i < n ; i ++ ) count [ arr [ i ] ] ++ ; for ( let i = 0 ; i <= limit ; i ++ ) if ( count [ i ] > 0 ) document . write ( i + \" \" + count [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"let arr = [ 5 , 5 , 6 , 6 , 5 , 6 , 1 , 2 , 3 , 10 , 10 ] ; let n = arr . length ; let limit = 10 ; countFreq ( arr , n , limit ) ;"}
{"text":"Function that checks if the binary string contains m consecutive 1 ' s \u2581 or \u2581 0' s","code":"function check ( s , m ) {"}
{"text":"length of binary string","code":"let l = s . length ;"}
{"text":"counts zeros","code":"let c1 = 0 ;"}
{"text":"counts 1 's","code":"let c2 = 0 ; for ( let i = 0 ; i < l ; i ++ ) { if ( s [ i ] == ' ' ) { c2 = 0 ;"}
{"text":"count consecutive 0 's","code":"c1 ++ ; } else { c1 = 0 ;"}
{"text":"count consecutive 1 's","code":"c2 ++ ; } if ( c1 == m c2 == m ) return true ; } return false ; }"}
{"text":"Driver Code","code":"let s = \" \" ; let m = 2 ;"}
{"text":"function call","code":"if ( check ( s , m ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to find product of digits of elements at k - th level","code":"function productAtKthLevel ( tree , k ) { let level = - 1 ;"}
{"text":"Initialize result","code":"let product = 1 ; let n = tree . length ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"increasing level number","code":"if ( tree [ i ] == ' ' ) level ++ ;"}
{"text":"decreasing level number","code":"else if ( tree [ i ] == ' ' ) level -- ; else {"}
{"text":"check if current level is the desired level or not","code":"if ( level == k ) product *= ( tree [ i ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ) ; } }"}
{"text":"required product","code":"return product ; }"}
{"text":"Driver Code","code":"let tree = \" \" ; let k = 2 ; document . write ( productAtKthLevel ( tree , k ) ) ;"}
{"text":"Function to check duplicates in row and column","code":"function findDuplciates ( a , n , m ) {"}
{"text":"Create an array isPresent and initialize all entries of it as false . The value of isPresent [ i , j ] is going to be true if s [ i , j ] is present in its row or column .","code":"var isPresent = Array ( n ) . fill ( ) . map ( ( ) => Array ( m ) . fill ( 0 ) ) ; for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < m ; j ++ ) { isPresent [ i ] [ j ] = false ; } } for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < m ; j ++ ) {"}
{"text":"Checking every row for duplicates of a [ i , j ]","code":"for ( var k = 0 ; k < n ; k ++ ) { if ( a [ i ] . charAt ( j ) == a [ k ] . charAt ( j ) && i != k ) { isPresent [ i ] [ j ] = true ; isPresent [ k ] [ j ] = true ; } }"}
{"text":"Checking every column for duplicate characters","code":"for ( k = 0 ; k < m ; k ++ ) { if ( a [ i ] . charAt ( j ) == a [ i ] . charAt ( k ) && j != k ) { isPresent [ i ] [ j ] = true ; isPresent [ i ] [ k ] = true ; } } } } for ( var i = 0 ; i < n ; i ++ ) for ( var j = 0 ; j < m ; j ++ )"}
{"text":"If the character is unique in its row and column","code":"if ( isPresent [ i ] [ j ] == false ) document . write ( a [ i ] . charAt ( j ) ) ; }"}
{"text":"Driver code","code":"var n = 2 , m = 2 ;"}
{"text":"character array","code":"var a = [ \" \" , \" \" ] ;"}
{"text":"Calling function","code":"findDuplciates ( a , n , m ) ;"}
{"text":"Javascript program to check if a given ISBN isvalid or not .","code":"function isValidISBN ( isbn ) {"}
{"text":"length must be 10","code":"let n = isbn . length ; if ( n != 10 ) return false ;"}
{"text":"Computing weighted sum of first 9 digits","code":"let sum = 0 ; for ( let i = 0 ; i < 9 ; i ++ ) { let digit = isbn [ i ] - ' ' ; if ( 0 > digit 9 < digit ) return false ; sum += ( digit * ( 10 - i ) ) ; }"}
{"text":"Checking last digit .","code":"let last = isbn [ 9 ] ; if ( last != ' ' && ( last < ' ' last > ' ' ) ) return false ;"}
{"text":"If last digit is ' X ' , add 10 to sum , else add its value .","code":"sum += ( ( last == ' ' ) ? 10 : ( last - ' ' ) ) ;"}
{"text":"Return true if weighted sum of digits is divisible by 11.","code":"return ( sum % 11 == 0 ) ; }"}
{"text":"Driver code","code":"let isbn = \" \" ; if ( isValidISBN ( isbn ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"utility function to check for vowel","code":"function isVowel ( c ) { return ( c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' ) ; }"}
{"text":"Function to reverse order of vowels","code":"function reverseVowel ( str1 ) { let j = 0 ;"}
{"text":"Storing the vowels separately","code":"let str = str1 . split ( ' ' ) ; let vowel = \" \" ; for ( let i = 0 ; i < str . length ; i ++ ) { if ( isVowel ( str [ i ] ) ) { j ++ ; vowel += str [ i ] ; } }"}
{"text":"Placing the vowels in the reverse order in the string","code":"for ( let i = 0 ; i < str . length ; i ++ ) { if ( isVowel ( str [ i ] ) ) { str [ i ] = vowel [ -- j ] ; } } return str . join ( \" \" ) ; }"}
{"text":"Driver code","code":"let str = \" \" ; document . write ( reverseVowel ( str ) ) ;"}
{"text":"Function to find string which has first character of each word .","code":"function firstLetterWord ( str ) { let result = \" \" ;"}
{"text":"Traverse the string .","code":"let v = true ; for ( let i = 0 ; i < str . length ; i ++ ) {"}
{"text":"If it is space , set v as true .","code":"if ( str [ i ] == ' ' ) { v = true ; }"}
{"text":"Else check if v is true or not . If true , copy character in output string and set v as false .","code":"else if ( str [ i ] != ' ' && v == true ) { result += ( str [ i ] ) ; v = false ; } } return result ; }"}
{"text":"Driver code","code":"let str = \" \" ; document . write ( firstLetterWord ( str ) ) ;"}
{"text":"Javascript implementation of the approach","code":"let ans = 0 ;"}
{"text":"Function for dfs . i , j == > Current cell indexes vis == > To mark visited cells ans == > Result z == > Current count 0 s visited z_count == > Total 0 s present","code":"function dfs ( i , j , grid , vis , z , z_count ) { let n = grid . length , m = grid [ 0 ] . length ;"}
{"text":"Mark the block as visited","code":"vis [ i ] [ j ] = true ; if ( grid [ i ] [ j ] == 0 )"}
{"text":"update the count","code":"z ++ ;"}
{"text":"If end block reached","code":"if ( grid [ i ] [ j ] == 2 ) {"}
{"text":"If path covered all the non - obstacle blocks","code":"if ( z == z_count ) ans ++ ; vis [ i ] [ j ] = false ; return ; }"}
{"text":"Up","code":"if ( i >= 1 && ! vis [ i - 1 ] [ j ] && grid [ i - 1 ] [ j ] != - 1 ) dfs ( i - 1 , j , grid , vis , z , z_count ) ;"}
{"text":"Down","code":"if ( i < n - 1 && ! vis [ i + 1 ] [ j ] && grid [ i + 1 ] [ j ] != - 1 ) dfs ( i + 1 , j , grid , vis , z , z_count ) ;"}
{"text":"Left","code":"if ( j >= 1 && ! vis [ i ] [ j - 1 ] && grid [ i ] [ j - 1 ] != - 1 ) dfs ( i , j - 1 , grid , vis , z , z_count ) ;"}
{"text":"Right","code":"if ( j < m - 1 && ! vis [ i ] [ j + 1 ] && grid [ i ] [ j + 1 ] != - 1 ) dfs ( i , j + 1 , grid , vis , z , z_count ) ;"}
{"text":"Unmark the block ( unvisited )","code":"vis [ i ] [ j ] = false ; }"}
{"text":"Function to return the count of the unique paths","code":"function uniquePaths ( grid ) {"}
{"text":"let z_count = 0 ; Total 0 s present","code":"let n = grid . length , m = grid [ 0 ] . length ; let vis = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { vis [ i ] = new Array ( m ) ; for ( let j = 0 ; j < m ; j ++ ) { vis [ i ] [ j ] = false ; } } let x = 0 , y = 0 ; for ( let i = 0 ; i < n ; ++ i ) { for ( let j = 0 ; j < m ; ++ j ) {"}
{"text":"Count non - obstacle blocks","code":"if ( grid [ i ] [ j ] == 0 ) z_count ++ ; else if ( grid [ i ] [ j ] == 1 ) {"}
{"text":"Starting position","code":"x = i ; y = j ; } } } dfs ( x , y , grid , vis , 0 , z_count ) ; return ans ; }"}
{"text":"Driver code","code":"let grid = [ [ 1 , 0 , 0 , 0 ] , [ 0 , 0 , 0 , 0 ] , [ 0 , 0 , 2 , - 1 ] ] ; document . write ( uniquePaths ( grid ) ) ;"}
{"text":"Return the number of unordered pairs satisfying the conditions","code":"function numPairs ( a , n ) { let ans , i , index ;"}
{"text":"ans stores the number of unordered pairs","code":"ans = 0 ;"}
{"text":"Making each value of array to positive","code":"for ( i = 0 ; i < n ; i ++ ) a [ i ] = Math . abs ( a [ i ] ) ;"}
{"text":"Sort the array","code":"a . sort ( ) ;"}
{"text":"For each index calculating the right boundary for the unordered pairs","code":"for ( i = 0 ; i < n ; i ++ ) { index = 2 ; ans += index - i - 1 ; }"}
{"text":"Return the final result","code":"return ans ; }"}
{"text":"Driver code","code":"let a = [ 3 , 6 ] ; let n = a . length ; document . write ( numPairs ( a , n ) ) ;"}
{"text":"Function to find the area of a square","code":"function areaOfSquare ( S ) {"}
{"text":"Use above formula","code":"let area = S * S ; return area ; }"}
{"text":"Given Side of square","code":"let S = 5 ;"}
{"text":"Function call","code":"document . write ( areaOfSquare ( S ) ) ;"}
{"text":"Javascript program to implement the above approach","code":"function maxPointOfIntersection ( x , y ) { let k = y * ( y - 1 ) \/ 2 ; k = k + x * ( 2 * y + x - 1 ) ; return k ; }"}
{"text":"Number of circles","code":"let x = 3 ;"}
{"text":"Number of straight lines","code":"let y = 4 ;"}
{"text":"Function Call","code":"document . write ( maxPointOfIntersection ( x , y ) ) ;"}
{"text":"Function to find Icosihenagonal number","code":"function Icosihenagonal_num ( n ) {"}
{"text":"Formula to calculate nth Icosihenagonal number","code":"return ( 19 * n * n - 17 * n ) \/ 2 ; }"}
{"text":"Driver Code","code":"let n = 3 ; document . write ( Icosihenagonal_num ( n ) + \" \" ) ; n = 10 ; document . write ( Icosihenagonal_num ( n ) ) ;"}
{"text":"Javascript implementation of the approach","code":"function find_Centroid ( v ) { let ans = new Array ( 2 ) ; ans . fill ( 0 ) ; let n = v . length ; let signedArea = 0 ;"}
{"text":"For all vertices","code":"for ( let i = 0 ; i < n ; i ++ ) { let x0 = v [ i ] [ 0 ] , y0 = v [ i ] [ 1 ] ; let x1 = v [ ( i + 1 ) % n ] [ 0 ] , y1 = v [ ( i + 1 ) % n ] [ 1 ] ;"}
{"text":"Calculate value of A using shoelace formula","code":"let A = ( x0 * y1 ) - ( x1 * y0 ) ; signedArea += A ;"}
{"text":"Calculating coordinates of centroid of polygon","code":"ans [ 0 ] += ( x0 + x1 ) * A ; ans [ 1 ] += ( y0 + y1 ) * A ; } signedArea *= 0.5 ; ans [ 0 ] = ( ans [ 0 ] ) \/ ( 6 * signedArea ) ; ans [ 1 ] = ( ans [ 1 ] ) \/ ( 6 * signedArea ) ; return ans ; }"}
{"text":"Coordinate of the vertices","code":"let vp = [ [ 1 , 2 ] , [ 3 , - 4 ] , [ 6 , - 7 ] ] ; let ans = find_Centroid ( vp ) ; document . write ( ans [ 0 ] . toFixed ( 11 ) + \" \" + ans [ 1 ] ) ;"}
{"text":"Driver code","code":"var d = 10 ; var a ;"}
{"text":"according to formula derived above","code":"a = parseInt ( ( 360 - ( 6 * d ) ) \/ 4 ) ;"}
{"text":"print all the angles","code":"document . write ( a + \" \" + ( a + d ) + \" \" + ( a + ( 2 * d ) ) + \" \" + ( a + ( 3 * d ) ) ) ;"}
{"text":"Function to find distance","code":"function distance ( a1 , b1 , c1 , d1 , a2 , b2 , c2 , d2 ) { let x1 , y1 , z1 , d ; if ( a1 \/ a2 == b1 \/ b2 && b1 \/ b2 == c1 \/ c2 ) { x1 = y1 = 0 ; z1 = - d1 \/ c1 ; d = Math . abs ( ( c2 * z1 + d2 ) ) \/ ( Math . sqrt ( a2 * a2 + b2 * b2 + c2 * c2 ) ) ; document . write ( \" \" + d ) ; } else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let a1 = 1 ; let b1 = 2 ; let c1 = - 1 ; let d1 = 1 ; let a2 = 3 ; let b2 = 6 ; let c2 = - 3 ; let d2 = - 4 ; distance ( a1 , b1 , c1 , d1 , a2 , b2 , c2 , d2 ) ;"}
{"text":"Function to calculate factorial","code":"function factorial ( n ) { if ( n == 0 ) return 1 ; return n * factorial ( n - 1 ) ; }"}
{"text":"Function to count number of ways to make 2 necklace having exactly N \/ 2 beads if each bead is considered different","code":"function numOfNecklace ( N ) {"}
{"text":"Number of ways to choose N \/ 2 beads from N beads","code":"var ans = factorial ( N ) \/ ( factorial ( N \/ 2 ) * factorial ( N \/ 2 ) ) ;"}
{"text":"Number of ways to permute N \/ 2 beads","code":"ans = ans * factorial ( N \/ 2 - 1 ) ; ans = ans * factorial ( N \/ 2 - 1 ) ;"}
{"text":"Divide ans by 2 to remove repetitions","code":"ans \/= 2 ;"}
{"text":"Return ans","code":"return ans ; }"}
{"text":"Given Input","code":"var N = 4 ;"}
{"text":"Function Call","code":"document . write ( numOfNecklace ( N ) ) ;"}
{"text":"Function to check if S is divisible by D while changing S to ( S + S % D )","code":"function isDivisibleByDivisor ( S , D ) {"}
{"text":"V ( 0 ) = S % D","code":"S %= D ;"}
{"text":"Stores the encountered values","code":"var hashMap = [ ] ; hashMap . push ( S ) ; for ( var i = 0 ; i <= D ; i ++ ) {"}
{"text":"V ( i ) = ( V ( i - 1 ) + V ( i - 1 ) % D ) % D","code":"S += S % D ; S %= D ;"}
{"text":"Check if the value has already been encountered","code":"if ( hashMap . includes ( S ) ) {"}
{"text":"Edge Case","code":"if ( S == 0 ) { return \" \" ; } return \" \" ; }"}
{"text":"Otherwise , insert it into the hashmap","code":"else hashMap . push ( S ) ; } return \" \" ; }"}
{"text":"Driver Code","code":"var S = 3 , D = 6 ; document . write ( isDivisibleByDivisor ( S , D ) ) ;"}
{"text":"Function to count the number of steps required to convert ( x , y ) to ( 1 , 1 )","code":"function minimumSteps ( x , y ) {"}
{"text":"Store the required result","code":"var cnt = 0 ;"}
{"text":"Iterate while both x and y are not equal to 0","code":"while ( x != 0 && y != 0 ) {"}
{"text":"If x is greater than y","code":"if ( x > y ) {"}
{"text":"Update count and value of x","code":"cnt += x \/ y ; x %= y ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"Update count and value of y","code":"cnt += y \/ x ; y %= x ; } } cnt -- ;"}
{"text":"If both x and y > 1","code":"if ( x > 1 y > 1 ) cnt = - 1 ;"}
{"text":"Print the result","code":"document . write ( cnt ) ; }"}
{"text":"Given X and Y","code":"var x = 3 , y = 1 ; minimumSteps ( x , y ) ;"}
{"text":"Javascript program to print minimum number that can be formed from a given sequence of Is and Ds","code":"function printLeast ( arr ) {"}
{"text":"min_avail represents the minimum number which is still available for inserting in the output vector . pos_of_I keeps track of the most recent index where ' I ' was encountered w . r . t the output vector","code":"let min_avail = 1 , pos_of_I = 0 ;"}
{"text":"vector to store the output","code":"let al = [ ] ;"}
{"text":"cover the base cases","code":"if ( arr [ 0 ] == ' ' ) { al . push ( 1 ) ; al . push ( 2 ) ; min_avail = 3 ; pos_of_I = 1 ; } else { al . push ( 2 ) ; al . push ( 1 ) ; min_avail = 3 ; pos_of_I = 0 ; }"}
{"text":"Traverse rest of the input","code":"for ( let i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] == ' ' ) { al . push ( min_avail ) ; min_avail ++ ; pos_of_I = i + 1 ; } else { al . push ( al [ i ] ) ; for ( let j = pos_of_I ; j <= i ; j ++ ) al [ j ] = al [ j ] + 1 ; min_avail ++ ; } }"}
{"text":"print the number","code":"for ( let i = 0 ; i < al . length ; i ++ ) document . write ( al [ i ] + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"printLeast ( \" \" ) ; printLeast ( \" \" ) ; printLeast ( \" \" ) ; printLeast ( \" \" ) ; printLeast ( \" \" ) ; printLeast ( \" \" ) ; printLeast ( \" \" ) ;"}
{"text":"Function to decode the given sequence to construct minimum number without repeated digits","code":"function PrintMinNumberForPattern ( seq ) {"}
{"text":"result store output string","code":"let result = \" \" ;"}
{"text":"create an empty stack of integers","code":"let stk = [ ] ;"}
{"text":"run n + 1 times where n is length of input sequence","code":"for ( let i = 0 ; i <= seq . length ; i ++ ) {"}
{"text":"push number i + 1 into the stack","code":"stk . push ( i + 1 ) ;"}
{"text":"if all characters of the input sequence are processed or current character is ' I ' ( increasing )","code":"if ( i == seq . length seq [ i ] == ' ' ) {"}
{"text":"run till stack is empty","code":"while ( stk . length != 0 ) {"}
{"text":"remove top element from the stack and add it to solution","code":"result += ( stk [ stk . length - 1 ] ) . toString ( ) ; result += \" \" ; stk . pop ( ) ; } } } document . write ( result + \" \" ) ; }"}
{"text":"main function","code":"PrintMinNumberForPattern ( \" \" ) ; PrintMinNumberForPattern ( \" \" ) ; PrintMinNumberForPattern ( \" \" ) ; PrintMinNumberForPattern ( \" \" ) ; PrintMinNumberForPattern ( \" \" ) ; PrintMinNumberForPattern ( \" \" ) ; PrintMinNumberForPattern ( \" \" ) ;"}
{"text":"Returns minimum number made from given sequence without repeating digits","code":"function getMinNumberForPattern ( seq ) { let n = seq . length ; if ( n >= 9 ) return \" \" ; let result = new Array ( n + 1 ) ; let count = 1 ;"}
{"text":"The loop runs for each input character as well as one additional time for assigning rank to each remaining characters","code":"for ( let i = 0 ; i <= n ; i ++ ) { if ( i == n seq [ i ] == ' ' ) { for ( let j = i - 1 ; j >= - 1 ; j -- ) { result [ j + 1 ] = String . fromCharCode ( ' ' . charCodeAt ( ) + count ++ ) ; if ( j >= 0 && seq [ j ] == ' ' ) break ; } } } return result . join ( \" \" ) ; }"}
{"text":"Driver Code","code":"let inputs = [ \" \" , \" \" , \" \" , \" \" , \" \" , \" \" , \" \" ] ; for ( let input = 0 ; input < inputs . length ; input ++ ) { document . write ( getMinNumberForPattern ( inputs [ input ] ) + \" \" ) ; }"}
{"text":"function to check prime","code":"function isPrime ( n ) { var i , c = 0 ; for ( i = 1 ; i < n \/ 2 ; i ++ ) { if ( n % i == 0 ) c ++ ; } if ( c == 1 ) return 1 ; else return 0 ; }"}
{"text":"Function to generate smallest possible number with given digits","code":"function findMinNum ( arr , n ) {"}
{"text":"Declare a hash array of size 10 and initialize all the elements to zero","code":"var first = 0 , last = 0 , num , rev , i ; var hash = new Array ( 10 ) . fill ( 0 ) ;"}
{"text":"store the number of occurrences of the digits in the given array into the hash table","code":"for ( var i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; }"}
{"text":"Traverse the hash in ascending order to print the required number","code":"document . write ( \" \" ) ; for ( var i = 0 ; i <= 9 ; i ++ ) {"}
{"text":"Print the number of times a digits occurs","code":"for ( var j = 0 ; j < hash [ i ] ; j ++ ) document . write ( i ) ; } document . write ( \" \" ) ;"}
{"text":"extracting the first digit","code":"for ( i = 0 ; i <= 9 ; i ++ ) { if ( hash [ i ] != 0 ) { first = i ; break ; } }"}
{"text":"extracting the last digit","code":"for ( i = 9 ; i >= 0 ; i -- ) { if ( hash [ i ] != 0 ) { last = i ; break ; } } num = first * 10 + last ; rev = last * 10 + first ;"}
{"text":"printing the prime combinations","code":"document . write ( \" \" ) ; if ( isPrime ( num ) && isPrime ( rev ) ) document . write ( num + \" \" + rev ) ; else if ( isPrime ( num ) ) document . write ( num ) ; else if ( isPrime ( rev ) ) document . write ( rev ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"var arr = [ 1 , 2 , 4 , 7 , 8 ] ; findMinNum ( arr , 5 ) ;"}
{"text":"Function to return gcd of a and b","code":"function gcd ( a , b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }"}
{"text":"function to check for gcd","code":"function coprime ( a , b ) {"}
{"text":"a and b are coprime if their gcd is 1.","code":"return ( gcd ( a , b ) == 1 ) ; }"}
{"text":"Checks if any possible triplet ( a , b , c ) satifying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt","code":"function possibleTripletInRange ( L , R ) { let flag = false ; let possibleA = 0 , possibleB = 0 , possibleC = 0 ;"}
{"text":"Generate and check for all possible triplets between L and R","code":"for ( let a = L ; a <= R ; a ++ ) { for ( let b = a + 1 ; b <= R ; b ++ ) { for ( let c = b + 1 ; c <= R ; c ++ ) {"}
{"text":"if we find any such triplets set flag to true","code":"if ( coprime ( a , b ) && coprime ( b , c ) && ! coprime ( a , c ) ) { flag = true ; possibleA = a ; possibleB = b ; possibleC = c ; break ; } } } }"}
{"text":"flag = True indicates that a pair exists between L and R","code":"if ( flag == true ) { document . write ( \" \" + possibleA + \" \" + possibleB + \" \" + possibleC + \" \" + \" \" + \" \" + L + \" \" + R + \" \" ) ; } else { document . write ( \" \" + \" \" + L + \" \" + R + \" \" ) ; } }"}
{"text":"Driver Code","code":"let L , R ;"}
{"text":"finding possible Triplet between 2 and 10","code":"L = 2 ; R = 10 ; possibleTripletInRange ( L , R ) ;"}
{"text":"finding possible Triplet between 23 and 46","code":"L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ;"}
{"text":"function to check is it is possible to reach A and B starting from 1 and 1","code":"function possibleToReach ( a , b ) {"}
{"text":"find the cuberoot of the number","code":"let c = Math . cbrt ( a * b ) ;"}
{"text":"divide the number by cuberoot","code":"let re1 = a \/ c ; let re2 = b \/ c ;"}
{"text":"if it is a perfect cuberoot and divides a and b","code":"if ( ( re1 * re1 * re2 == a ) && ( re2 * re2 * re1 == b ) ) return true ; else return false ; }"}
{"text":"Driver code","code":"let A = 60 , B = 450 ; if ( possibleToReach ( A , B ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"JavaScript program tto check whether a number is undulating or not","code":"function isUndulating ( n ) {"}
{"text":"Considering the definition with restriction that there should be at least 3 digits","code":"if ( n . length <= 2 ) return false ;"}
{"text":"Check if all alternate digits are same or not .","code":"for ( let i = 2 ; i < n . length ; i ++ ) if ( n [ i - 2 ] != n [ i ] ) return false ; return true ; }"}
{"text":"Driver Code","code":"let n = \" \" ; if ( isUndulating ( n ) == true ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to calculate the following series","code":"function Series ( n ) { let i ; let sums = 0 ; for ( i = 1 ; i <= n ; i ++ ) sums += ( i * i ) ; return sums ; }"}
{"text":"Driver Code","code":"let n = 3 ; let res = Series ( n ) ; document . write ( res ) ;"}
{"text":"Returns count of numbers with k as last digit .","code":"function counLastDigitK ( low , high , k ) { let mlow = 10 * ( Math . ceil ( low \/ 10.0 ) ) ; let mhigh = 10 * ( Math . floor ( high \/ 10.0 ) ) ; let count = ( mhigh - mlow ) \/ 10 ; if ( high % 10 >= k ) count ++ ; if ( low % 10 <= k && ( low % 10 ) > 0 ) count ++ ; return count ; }"}
{"text":"Driver function","code":"let low = 3 , high = 35 , k = 3 ; document . write ( counLastDigitK ( low , high , k ) ) ;"}
{"text":"function to calculate the sum of all numbers divisible by 6 in range L - R . .","code":"function sum ( L , R ) {"}
{"text":"no of multiples of 6 upto r","code":"let p = Math . floor ( R \/ 6 ) ;"}
{"text":"no of multiples of 6 upto l - 1","code":"let q = Math . floor ( ( L - 1 ) \/ 6 ) ;"}
{"text":"summation of all multiples of 6 upto r","code":"let sumR = Math . floor ( 3 * ( p * ( p + 1 ) ) ) ;"}
{"text":"summation of all multiples of 6 upto l - 1","code":"let sumL = Math . floor ( ( q * ( q + 1 ) ) * 3 ) ;"}
{"text":"returns the answer","code":"return sumR - sumL ; }"}
{"text":"Driver Code","code":"let L = 1 , R = 20 ; document . write ( sum ( L , R ) ) ;"}
{"text":"Returns largest possible number with one swap such that the number is smaller than str . It is assumed that there are leading 0 s .","code":"function prevNum ( str ) { let len = str . length ; let index = - 1 ;"}
{"text":"Traverse from right until we find a digit which is greater than its next digit . For example , in 34125 , our index is 4.","code":"for ( let i = len - 2 ; i >= 0 ; i -- ) { if ( str [ i ] > str [ i + 1 ] ) { index = i ; break ; } }"}
{"text":"We can also use binary search here as digits after index are sorted in increasing order . Find the biggest digit in the right of arr [ index ] which is smaller than arr [ index ]","code":"let smallGreatDgt = - 1 ; for ( let i = len - 1 ; i > index ; i -- ) { if ( str [ i ] < str [ index ] ) { if ( smallGreatDgt == - 1 ) { smallGreatDgt = i ; } else if ( str [ i ] >= str [ smallGreatDgt ] ) { smallGreatDgt = i ; } } }"}
{"text":"If index is - 1 i . e . digits are in increasing order .","code":"if ( index == - 1 ) { return \" \" ; }"}
{"text":"Swap both values","code":"if ( smallGreatDgt != - 1 ) { str = swap ( str , index , smallGreatDgt ) ; return str ; } return \" \" ; } function swap ( str , i , j ) { let ch = str . split ( ' ' ) ; let temp = ch [ i ] ; ch [ i ] = ch [ j ] ; ch [ j ] = temp ; return ch . join ( \" \" ) ; }"}
{"text":"Driver code","code":"let str = \" \" ; document . write ( prevNum ( str ) ) ;"}
{"text":"Returns value of poly [ 0 ] x ( n - 1 ) + poly [ 1 ] x ( n - 2 ) + . . + poly [ n - 1 ]","code":"function horner ( poly , n , x ) {"}
{"text":"Initialize result","code":"var result = poly [ 0 ] ;"}
{"text":"Evaluate value of polynomial using Horner 's method","code":"for ( var i = 1 ; i < n ; i ++ ) result = result * x + poly [ i ] ; return result ; }"}
{"text":"Returns sign value of polynomial","code":"function findSign ( poly , n , x ) { var result = horner ( poly , n , x ) ; if ( result > 0 ) return 1 ; else if ( result < 0 ) return - 1 ; return 0 ; }"}
{"text":"Let us evaluate value of 2 x3 - 6 x2 + 2 x - 1 for x = 3","code":"var poly = [ 2 , - 6 , 2 , - 1 ] ; var x = 3 ; var n = poly . length ; document . write ( \" \" + findSign ( poly , n , x ) ) ;"}
{"text":"Javascript program to find minimum number to insert in array so their sum is prime","code":"let MAX = 100005 ;"}
{"text":"Array to store primes","code":"let isPrime = new Array ( MAX ) . fill ( 0 ) ;"}
{"text":"function to calculate primes using sieve of eratosthenes","code":"function sieveOfEratostheneses ( ) { isPrime [ 1 ] = true ; for ( let i = 2 ; i * i < MAX ; i ++ ) { if ( ! isPrime [ i ] ) { for ( let j = 2 * i ; j < MAX ; j += i ) isPrime [ j ] = true ; } } }"}
{"text":"Find prime number greater than a number","code":"function findPrime ( n ) { let num = n + 1 ;"}
{"text":"To return prime number greater than n","code":"while ( num > 0 ) {"}
{"text":"check if num is prime","code":"if ( ! isPrime [ num ] ) return num ;"}
{"text":"increment num","code":"num = num + 1 ; } return 0 ; }"}
{"text":"To find number to be added so sum of array is prime","code":"function minNumber ( arr , n ) {"}
{"text":"call sieveOfEratostheneses to calculate primes","code":"sieveOfEratostheneses ( ) ; let sum = 0 ;"}
{"text":"To find sum of array elements","code":"for ( let i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; if ( ! isPrime [ sum ] ) return 0 ;"}
{"text":"To find prime number greater then sum","code":"let num = findPrime ( sum ) ;"}
{"text":"Return difference of sum and num","code":"return num - sum ; }"}
{"text":"driver program","code":"let arr = [ 2 , 4 , 6 , 8 , 12 ] ; let n = arr . length ; document . write ( minNumber ( arr , n ) ) ;"}
{"text":"Computes sum all sub - array","code":"function SubArraySum ( arr , n ) { let result = 0 , temp = 0 ;"}
{"text":"Pick starting point","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Pick ending point","code":"temp = 0 ; for ( let j = i ; j < n ; j ++ ) {"}
{"text":"sum subarray between current starting and ending points","code":"temp += arr [ j ] ; result += temp ; } } return result ; }"}
{"text":"driver program to test above function","code":"let arr = [ 1 , 2 , 3 ] ; let n = arr . length ; document . write ( \" \" + SubArraySum ( arr , n ) + \" \" ) ;"}
{"text":"Javascript program to find highest power of 2 smaller than or equal to n .","code":"function highestPowerof2 ( n ) { let p = parseInt ( Math . log ( n ) \/ Math . log ( 2 ) , 10 ) ; return Math . pow ( 2 , p ) ; }"}
{"text":"Driver code","code":"let n = 10 ; document . write ( highestPowerof2 ( n ) ) ;"}
{"text":"Utility function to calculate a % m","code":"function aModM ( s , mod ) { let number = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) {"}
{"text":"( s [ i ] - '0' ) gives the digit value and form the number","code":"number = ( number * 10 ) ; let x = ( s [ i ] - ' ' ) ; number = number + x ; number %= mod ; } return number ; }"}
{"text":"Returns find ( a ^ b ) % m","code":"function ApowBmodM ( a , b , m ) {"}
{"text":"Find a % m","code":"let ans = aModM ( a , m ) ; let mul = ans ;"}
{"text":"Now multiply ans by b - 1 times and take mod with m","code":"for ( let i = 1 ; i < b ; i ++ ) ans = ( ans * mul ) % m ; return ans ; }"}
{"text":"Driver Code","code":"let a = \" \" ; let b = 3 , m = 11 ; document . write ( ApowBmodM ( a , b , m ) ) ;"}
{"text":"To represent a data point corresponding to x and y = f ( x )","code":"class Data { constructor ( x , y ) { this . x = x ; this . y = y ; } }"}
{"text":"function to interpolate the given data points using Lagrange 's formula xi corresponds to the new data point whose value is to be obtained n represents the number of known data points","code":"function interpolate ( f , xi , n ) {"}
{"text":"let result = 0 ; Initialize result","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Compute individual terms of above formula","code":"let term = f [ i ] . y ; for ( let j = 0 ; j < n ; j ++ ) { if ( j != i ) term = term * ( xi - f [ j ] . x ) \/ ( f [ i ] . x - f [ j ] . x ) ; }"}
{"text":"Add current term to result","code":"result += term ; } return result ; }"}
{"text":"creating an array of 4 known data points","code":"let f = [ new Data ( 0 , 2 ) , new Data ( 1 , 3 ) , new Data ( 2 , 12 ) , new Data ( 5 , 147 ) ] ;"}
{"text":"Using the interpolate function to obtain a data point corresponding to x = 3","code":"document . write ( \" \" + interpolate ( f , 3 , 4 ) ) ;"}
{"text":"Prints all prime numbers smaller","code":"function SieveOfSundaram ( n ) {"}
{"text":"In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than n , we reduce n to half","code":"let nNew = ( n - 1 ) \/ 2 ;"}
{"text":"This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j","code":"let marked = [ ] ;"}
{"text":"Initialize all elements as not marked","code":"for ( let i = 0 ; i < nNew + 1 ; i ++ ) marked [ i ] = false ;"}
{"text":"Main logic of Sundaram . Mark all numbers of the form i + j + 2 ij as true where 1 <= i <= j","code":"for ( let i = 1 ; i <= nNew ; i ++ ) for ( let j = i ; ( i + j + 2 * i * j ) <= nNew ; j ++ ) marked [ i + j + 2 * i * j ] = true ;"}
{"text":"Since 2 is a prime number","code":"if ( n > 2 ) document . write ( 2 + \" \" ) ;"}
{"text":"Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .","code":"for ( let i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) document . write ( 2 * i + 1 + \" \" ) ; return - 1 ; }"}
{"text":"Driver program","code":"let n = 20 ; SieveOfSundaram ( n ) ;"}
{"text":"Function to construct an array with each element equal to XOR of all array elements except the element at the same index","code":"function constructArray ( A , N , K ) {"}
{"text":"Original array","code":"let B = new Array ( N ) ;"}
{"text":"Stores Bitwise XOR of array","code":"let totalXOR = A [ 0 ] ^ K ;"}
{"text":"Calculate XOR of all array elements","code":"for ( let i = 0 ; i < N ; i ++ ) B [ i ] = totalXOR ^ A [ i ] ;"}
{"text":"Print the original array B [ ]","code":"for ( let i = 0 ; i < N ; i ++ ) { document . write ( B [ i ] + \" \" ) ; } }"}
{"text":"Driver Code","code":"let A = [ 13 , 14 , 10 , 6 ] , K = 2 ; let N = A . length ;"}
{"text":"Function Call","code":"constructArray ( A , N , K ) ;"}
{"text":"Function to return the extra element in B [ ]","code":"function extraElement ( A , B , n ) {"}
{"text":"To store the result","code":"let ans = 0 ;"}
{"text":"Find the XOR of all the element of array A [ ] and array B [ ]","code":"for ( let i = 0 ; i < n ; i ++ ) ans ^= A [ i ] ; for ( let i = 0 ; i < n + 1 ; i ++ ) ans ^= B [ i ] ; return ans ; }"}
{"text":"Driver code","code":"let A = [ 10 , 15 , 5 ] ; let B = [ 10 , 100 , 15 , 5 ] ; let n = A . length ; document . write ( extraElement ( A , B , n ) ) ;"}
{"text":"Function to calculate hamming distance","code":"function hammingDistance ( n1 , n2 ) { let x = n1 ^ n2 ; let setBits = 0 ; while ( x > 0 ) { setBits += x & 1 ; x >>= 1 ; } return setBits ; }"}
{"text":"Driver code","code":"let n1 = 9 , n2 = 14 ; document . write ( hammingDistance ( 9 , 14 ) ) ;"}
{"text":"function to find bitwise subsets Efficient approach","code":"function printSubsets ( n ) { for ( let i = n ; i > 0 ; i = ( i - 1 ) & n ) document . write ( i + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"let n = 9 ; printSubsets ( n ) ;"}
{"text":"Javascript program to find MSB number for given n .","code":"function setBitNumber ( n ) {"}
{"text":"To find the position of the most significant set bit","code":"let k = parseInt ( Math . log ( n ) \/ Math . log ( 2 ) , 10 ) ;"}
{"text":"To return the the value of the number with set bit at k - th position","code":"return 1 << k ; }"}
{"text":"Driver code","code":"let n = 273 ; document . write ( setBitNumber ( n ) ) ;"}
{"text":"Function to count subsets such that all subsets have distinct elements .","code":"function subset ( ar , n ) {"}
{"text":"Take input and initialize res = 0","code":"let res = 0 ;"}
{"text":"Sort the array","code":"ar . sort ( ) ;"}
{"text":"Traverse the input array and find maximum frequency","code":"for ( let i = 0 ; i < n ; i ++ ) { let count = 1 ;"}
{"text":"For each number find its repetition \/ frequency","code":"for ( ; i < n - 1 ; i ++ ) { if ( ar [ i ] == ar [ i + 1 ] ) count ++ ; else break ; }"}
{"text":"Update res","code":"res = Math . max ( res , count ) ; } return res ; }"}
{"text":"Driver Code","code":"let arr = [ 5 , 6 , 9 , 3 , 4 , 3 , 4 ] ; let n = 7 ; document . write ( subset ( arr , n ) ) ;"}
{"text":"Store perfect squares less than or equal to N","code":"var psquare = [ ]"}
{"text":"Utility function to calculate perfect squares less than or equal to N","code":"function calcPsquare ( N ) { var i ; for ( i = 1 ; i * i <= N ; i ++ ) psquare . push ( i * i ) ; }"}
{"text":"Function to find the number of ways to represent a number as sum of perfect squares","code":"function countWays ( index , target ) {"}
{"text":"Handle the base cases","code":"if ( target == 0 ) return 1 ; if ( index < 0 target < 0 ) return 0 ;"}
{"text":"Include the i - th index element","code":"var inc = countWays ( index , target - psquare [ index ] ) ;"}
{"text":"Exclude the i - th index element","code":"var exc = countWays ( index - 1 , target ) ;"}
{"text":"Return the result","code":"return inc + exc ; }"}
{"text":"Given Input","code":"var N = 9 ;"}
{"text":"Precalculate perfect squares <= N","code":"calcPsquare ( N ) ;"}
{"text":"Function Call","code":"document . write ( countWays ( psquare . length - 1 , N ) ) ;"}
{"text":"Javascript program for the above approach","code":"class pair { constructor ( first , second ) { this . first = first ; this . second = second ; } }"}
{"text":"Structure of a binary tree node","code":"class Node {"}
{"text":"Function that allocates a new node with the given data and null to its left and right pointers","code":"constructor ( data ) { this . data = data ; this . size = 0 ; this . left = this . right = null ; } }"}
{"text":"Function to count the number of nodes in the left and right subtrees","code":"function sumofsubtree ( root ) {"}
{"text":"Initialize a pair that stores the pair { number of nodes , depth }","code":"let p = new pair ( 1 , 0 ) ;"}
{"text":"Finding the number of nodes in the left subtree","code":"if ( root . left != null ) { let ptemp = sumofsubtree ( root . left ) ; p . second += ptemp . first + ptemp . second ; p . first += ptemp . first ; }"}
{"text":"Find the number of nodes in the right subtree","code":"if ( root . right != null ) { let ptemp = sumofsubtree ( root . right ) ; p . second += ptemp . first + ptemp . second ; p . first += ptemp . first ; }"}
{"text":"Filling up size field","code":"root . size = p . first ; return p ; }"}
{"text":"Stores the sum of distances of all nodes from the given node","code":"let sum = 0 ;"}
{"text":"Function to find the total distance","code":"function distance ( root , target , distancesum , n ) {"}
{"text":"If target node matches with the current node","code":"if ( root . data == target ) { sum = distancesum ; }"}
{"text":"If root . left is not null","code":"if ( root . left != null ) {"}
{"text":"Update sum","code":"let tempsum = distancesum - root . left . size + ( n - root . left . size ) ;"}
{"text":"Recur for the left subtree","code":"distance ( root . left , target , tempsum , n ) ; }"}
{"text":"If root . right is not null","code":"if ( root . right != null ) {"}
{"text":"Apply the formula given in the approach","code":"let tempsum = distancesum - root . right . size + ( n - root . right . size ) ;"}
{"text":"Recur for the right subtree","code":"distance ( root . right , target , tempsum , n ) ; } }"}
{"text":"Input tree","code":"let root = new Node ( 1 ) ; root . left = new Node ( 2 ) ; root . right = new Node ( 3 ) ; root . left . left = new Node ( 4 ) ; root . left . right = new Node ( 5 ) ; root . right . left = new Node ( 6 ) ; root . right . right = new Node ( 7 ) ; root . left . left . left = new Node ( 8 ) ; root . left . left . right = new Node ( 9 ) ; let target = 3 ; let p = sumofsubtree ( root ) ;"}
{"text":"Total number of nodes","code":"let totalnodes = p . first ; distance ( root , target , p . second , totalnodes ) ;"}
{"text":"Print the sum of distances","code":"document . write ( sum + \" \" ) ;"}
{"text":"Reverse array","code":"function reverse ( a ) { let i , n = a . length , t ; for ( i = 0 ; i < n \/ 2 ; i ++ ) { t = a [ i ] ; a [ i ] = a [ n - i - 1 ] ; a [ n - i - 1 ] = t ; } return a ; }"}
{"text":"Function to rearrange array such that sum of similar indexed elements does not exceed K","code":"function rearrangeArray ( A , B , N , K ) {"}
{"text":"Sort the array B [ ] in descending order","code":"B . sort ( ) ; B = reverse ( B ) ; let flag = true ; for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If condition fails","code":"if ( A [ i ] + B [ i ] > K ) { flag = false ; break ; } } if ( ! flag ) { document . write ( \" \" + \" \" ) ; } else {"}
{"text":"Prlet the array","code":"for ( let i = 0 ; i < N ; i ++ ) { document . write ( B [ i ] + \" \" ) ; } } }"}
{"text":"Given arrays","code":"let A = [ 1 , 2 , 3 , 4 , 2 ] ; let B = [ 1 , 2 , 3 , 1 , 1 ] ; let N = A . length ; let K = 5 ; rearrangeArray ( A , B , N , K ) ;"}
{"text":"Javascript program to implement the above approach","code":"var N = 3 var M = 3"}
{"text":"Function to count the number of rows whose sum exceeds the sum of elements of the remaining matrix","code":"function countRows ( mat ) {"}
{"text":"To store the result","code":"var count = 0 ;"}
{"text":"Stores the total sum of the matrix elements","code":"var totalSum = 0 ;"}
{"text":"Calculate the total sum","code":"for ( var i = 0 ; i < N ; i ++ ) { for ( var j = 0 ; j < M ; j ++ ) { totalSum += mat [ i ] [ j ] ; } }"}
{"text":"Traverse to check for each row","code":"for ( var i = 0 ; i < N ; i ++ ) {"}
{"text":"Stores the sum of elements of the current row","code":"var currSum = 0 ;"}
{"text":"Calculate the sum of elements of the current row","code":"for ( var j = 0 ; j < M ; j ++ ) { currSum += mat [ i ] [ j ] ; }"}
{"text":"If sum of current row exceeds the sum of rest of the matrix","code":"if ( currSum > totalSum - currSum )"}
{"text":"Increase count","code":"count ++ ; }"}
{"text":"Print the result","code":"document . write ( count ) ; }"}
{"text":"Given matrix","code":"var mat = [ [ 2 , - 1 , 5 ] , [ - 3 , 0 , - 2 ] , [ 5 , 1 , 2 ] ] ;"}
{"text":"Function Call","code":"countRows ( mat ) ;"}
{"text":"function to check whether the array contains a set of contiguous integers","code":"function areElementsContiguous ( arr , n ) {"}
{"text":"Sort the array","code":"arr . sort ( function ( a , b ) { return a - b } ) ;"}
{"text":"After sorting , check if current element is either same as previous or is one more .","code":"for ( let i = 1 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] > 1 ) return false ; return true ; }"}
{"text":"Driver program","code":"let arr = [ 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 ] ; let n = arr . length ; if ( areElementsContiguous ( arr , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"function to check whether the array contains a set of contiguous integers","code":"function areElementsContiguous ( arr , n ) {"}
{"text":"Find maximum and minimum elements .","code":"let max = Number . MIN_VALUE ; let min = Number . MAX_VALUE ; for ( let i = 0 ; i < n ; i ++ ) { max = Math . max ( max , arr [ i ] ) ; min = Math . min ( min , arr [ i ] ) ; } let m = max - min + 1 ;"}
{"text":"There should be at least m elements in aaray to make them contiguous .","code":"if ( m > n ) return false ;"}
{"text":"Create a visited array and initialize false .","code":"let visited = new Array ( n ) ; visited . fill ( false ) ;"}
{"text":"Mark elements as true .","code":"for ( let i = 0 ; i < n ; i ++ ) visited [ arr [ i ] - min ] = true ;"}
{"text":"If any element is not marked , all elements are not contiguous .","code":"for ( let i = 0 ; i < m ; i ++ ) if ( visited [ i ] == false ) return false ; return true ; }"}
{"text":"Driver program","code":"let arr = [ 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 ] ; let n = arr . length ; if ( areElementsContiguous ( arr , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to check whether the array contains a set of contiguous integers","code":"function areElementsContiguous ( arr , n ) {"}
{"text":"Storing elements of ' arr [ ] ' in a hash table ' us '","code":"var us = new Set ( ) ; for ( var i = 0 ; i < n ; i ++ ) us . add ( arr [ i ] ) ;"}
{"text":"as arr [ 0 ] is present in ' us '","code":"var count = 1 ;"}
{"text":"starting with previous smaller element of arr [ 0 ]","code":"var curr_ele = arr [ 0 ] - 1 ;"}
{"text":"if ' curr _ ele ' is present in ' us '","code":"while ( us . has ( curr_ele ) ) {"}
{"text":"increment count","code":"count ++ ;"}
{"text":"update 'curr_ele\"","code":"curr_ele -- ; }"}
{"text":"starting with next greater element of arr [ 0 ]","code":"curr_ele = arr [ 0 ] + 1 ;"}
{"text":"if ' curr _ ele ' is present in ' us '","code":"while ( us . has ( curr_ele ) ) {"}
{"text":"increment count","code":"count ++ ;"}
{"text":"update 'curr_ele\"","code":"curr_ele ++ ; }"}
{"text":"returns true if array contains a set of contiguous integers else returns false","code":"return ( count == ( us . size ) ) ; }"}
{"text":"Driver program to test above","code":"var arr = [ 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 ] ; var n = arr . length ; if ( areElementsContiguous ( arr , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"function to print the longest sub - array","code":"function longest ( a , n , k ) { var freq = Array ( 7 ) . fill ( 0 ) ; var start = 0 , end = 0 , now = 0 , l = 0 ; for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"mark the element visited","code":"freq [ a [ i ] ] ++ ;"}
{"text":"if its visited first time , then increase the counter of distinct elements by 1","code":"if ( freq [ a [ i ] ] == 1 ) now ++ ;"}
{"text":"When the counter of distinct elements increases from k , then reduce it to k","code":"while ( now > k ) {"}
{"text":"from the left , reduce the number of time of visit","code":"freq [ a [ l ] ] -- ;"}
{"text":"if the reduced visited time element is not present in further segment then decrease the count of distinct elements","code":"if ( freq [ a [ l ] ] == 0 ) now -- ;"}
{"text":"increase the subsegment mark","code":"l ++ ; }"}
{"text":"check length of longest sub - segment when greater then previous best then change it","code":"if ( i - l + 1 >= end - start + 1 ) { end = i ; start = l ; } }"}
{"text":"print the longest sub - segment","code":"for ( var i = start ; i <= end ; i ++ ) document . write ( a [ i ] + \" \" ) ; }"}
{"text":"driver program to test the above function","code":"var a = [ 6 , 5 , 1 , 2 , 3 , 2 , 1 , 4 , 5 ] ; var n = a . length ; var k = 3 ; longest ( a , n , k ) ;"}
{"text":"Function that returns true if any k segments overlap at any point","code":"function kOverlap ( pairs , k ) {"}
{"text":"Vector to store the starting point and the ending point","code":"var vec = [ ] ; for ( var i = 0 ; i < pairs . length ; i ++ ) {"}
{"text":"Starting points are marked by - 1 and ending points by + 1","code":"vec . push ( [ pairs [ i ] [ 0 ] , - 1 ] ) ; vec . push ( [ pairs [ i ] [ 1 ] , + 1 ] ) ; }"}
{"text":"Sort the vector by first element","code":"vec . sort ( ( a , b ) => { if ( a [ 0 ] != b [ 0 ] ) return a [ 0 ] - b [ 0 ] return a [ 1 ] - b [ 1 ] } ) ;"}
{"text":"Stack to store the overlaps","code":"var st = [ ] ; for ( var i = 0 ; i < vec . length ; i ++ ) {"}
{"text":"Get the current element","code":"var cur = vec [ i ] ;"}
{"text":"If it is the starting point","code":"if ( cur [ 1 ] == - 1 ) {"}
{"text":"Push it in the stack","code":"st . push ( cur ) ; }"}
{"text":"It is the ending point","code":"else {"}
{"text":"Pop an element from stack","code":"st . pop ( ) ; }"}
{"text":"If more than k ranges overlap","code":"if ( st . length >= k ) { return true ; } } return false ; }"}
{"text":"Driver code","code":"var pairs = [ ] ; pairs . push ( [ 1 , 3 ] ) ; pairs . push ( [ 2 , 4 ] ) ; pairs . push ( [ 3 , 5 ] ) ; pairs . push ( [ 7 , 10 ] ) ; var n = pairs . length , k = 3 ; if ( kOverlap ( pairs , k ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Javascript program to finds out smallest range that includes elements from each of the given sorted lists .","code":"let N = 5 ;"}
{"text":"array for storing the current index of list i","code":"let ptr = new Array ( 501 ) ;"}
{"text":"This function takes an k sorted lists in the form of 2D array as an argument . It finds out smallest range that includes elements from each of the k lists .","code":"function findSmallestRange ( arr , n , k ) { let i , minval , maxval , minrange , minel = 0 , maxel = 0 , flag , minind ;"}
{"text":"initializing to 0 index ;","code":"for ( i = 0 ; i <= k ; i ++ ) { ptr [ i ] = 0 ; } minrange = Number . MAX_VALUE ; while ( true ) {"}
{"text":"for maintining the index of list containing the minimum element","code":"minind = - 1 ; minval = Number . MAX_VALUE ; maxval = Number . MIN_VALUE ; flag = 0 ;"}
{"text":"iterating over all the list","code":"for ( i = 0 ; i < k ; i ++ ) {"}
{"text":"if every element of list [ i ] is traversed then break the loop","code":"if ( ptr [ i ] == n ) { flag = 1 ; break ; }"}
{"text":"find minimum value among all the list elements pointing by the ptr [ ] array","code":"if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {"}
{"text":"update the index of the list","code":"minind = i ; minval = arr [ i ] [ ptr [ i ] ] ; }"}
{"text":"find maximum value among all the list elements pointing by the ptr [ ] array","code":"if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) { maxval = arr [ i ] [ ptr [ i ] ] ; } }"}
{"text":"if any list exhaust we will not get any better answer , so break the while loop","code":"if ( flag == 1 ) { break ; } ptr [ minind ] ++ ;"}
{"text":"updating the minrange","code":"if ( ( maxval - minval ) < minrange ) { minel = minval ; maxel = maxval ; minrange = maxel - minel ; } } document . write ( \" \" + minel + \" \" + maxel + \" \" ) ; }"}
{"text":"Driver program to test above function","code":"let arr = [ [ 4 , 7 , 9 , 12 , 15 ] , [ 0 , 8 , 10 , 14 , 20 ] , [ 6 , 12 , 16 , 30 , 50 ] ] let k = arr . length ; findSmallestRange ( arr , N , k ) ;"}
{"text":"function to find largest d","code":"function findLargestd ( S , n ) { let found = false ;"}
{"text":"sort the array in ascending order","code":"S . sort ( ) ;"}
{"text":"iterating from backwards to find the required largest d","code":"for ( let i = n - 1 ; i >= 0 ; i -- ) { for ( let j = 0 ; j < n ; j ++ ) {"}
{"text":"since all four a , b , c , d should be distinct","code":"if ( i == j ) continue ; for ( let k = j + 1 ; k < n ; k ++ ) { if ( i == k ) continue ; for ( let l = k + 1 ; l < n ; l ++ ) { if ( i == l ) continue ;"}
{"text":"if the current combination of j , k , l in the set is equal to S [ i ] return this value as this would be the largest dsince we are iterating in descending order","code":"if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) { found = true ; return S [ i ] ; } } } } } if ( found == false ) return Number . MAX_VALUE ; return - 1 ; }"}
{"text":"Driver Code","code":"let S = [ 2 , 3 , 5 , 7 , 12 ] ; let n = S . length ; let ans = findLargestd ( S , n ) ; if ( ans == Number . MAX_VALUE ) document . write ( \" \" ) ; else document . write ( \" \" + \" \" + ans ) ;"}
{"text":"To store and retrieve indices pair i & j","code":"class Indexes { constructor ( i , j ) { this . i = i ; this . j = j ; } getI ( ) { return this . i ; } getJ ( ) { return this . j ; } }"}
{"text":"The function finds four elements with given sum X","code":"function findFourElements ( arr , n ) { let map = new Map ( ) ;"}
{"text":"Store sums ( a + b ) of all pairs ( a , b ) in a hash table","code":"for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { map . set ( arr [ i ] + arr [ j ] , new Indexes ( i , j ) ) ; } } let d = Number . MIN_VALUE ;"}
{"text":"Traverse through all pairs and find ( d - c ) is present in hash table","code":"for ( let i = 0 ; i < n - 1 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let abs_diff = Math . abs ( arr [ i ] - arr [ j ] ) ;"}
{"text":"If d - c is present in hash table ,","code":"if ( map . has ( abs_diff ) ) { let indexes = map . get ( abs_diff ) ;"}
{"text":"Making sure that all elements are distinct array elements and an element is not considered more than once .","code":"if ( indexes . getI ( ) != i && indexes . getI ( ) != j && indexes . getJ ( ) != i && indexes . getJ ( ) != j ) { d = Math . max ( d , Math . max ( arr [ i ] , arr [ j ] ) ) ; } } } } return d ; }"}
{"text":"Driver code","code":"let arr = [ 2 , 3 , 5 , 7 , 12 ] ; let n = arr . length ; let res = findFourElements ( arr , n ) ; if ( res == Number . MIN_VALUE ) document . write ( \" \" ) ; else document . write ( res ) ;"}
{"text":"Function to count maximum number of elements that can be selected","code":"function CountMaximum ( arr , n , k ) {"}
{"text":"Sort the array","code":"arr . sort ( function ( a , b ) { return a - b } ) ; let sum = 0 , count = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Add current element to the sum","code":"sum += arr [ i ] ;"}
{"text":"IF sum exceeds k","code":"if ( sum > k ) break ;"}
{"text":"Increment count","code":"count ++ ; }"}
{"text":"Return the count","code":"return count ; }"}
{"text":"Function call","code":"document . write ( CountMaximum ( arr , n , k ) ) ;"}
{"text":"Function to left Rotate arr [ ] of size n by 1","code":"function leftRotatebyOne ( arr , n ) { var i , temp ; temp = arr [ 0 ] ; for ( i = 0 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = temp ; }"}
{"text":"Function to left rotate arr of size n by d","code":"function leftRotate ( arr , d , n ) { for ( i = 0 ; i < d ; i ++ ) leftRotatebyOne ( arr , n ) ; }"}
{"text":"utility function to print an array","code":"function printArray ( arr , n ) { for ( i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver program to test above functions","code":"var arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ; leftRotate ( arr , 2 , 7 ) ; printArray ( arr , 7 ) ;"}
{"text":"Function to sort the elements of the array from index a to index b","code":"function partSort ( arr , N , a , b ) {"}
{"text":"Variables to store start and end of the index range","code":"let l = Math . min ( a , b ) ; let r = Math . max ( a , b ) ;"}
{"text":"Temporary array","code":"let temp = new Array ( r - l + 1 ) ; temp . fill ( 0 ) ; let j = 0 ; for ( let i = l ; i <= r ; i ++ ) { temp [ j ] = arr [ i ] ; j ++ ; }"}
{"text":"Sort the temporary array","code":"temp . sort ( function ( a , b ) { return a - b } ) ;"}
{"text":"Modifying original array with temporary array elements","code":"j = 0 ; for ( let i = l ; i <= r ; i ++ ) { arr [ i ] = temp [ j ] ; j ++ ; }"}
{"text":"Print the modified array","code":"for ( let i = 0 ; i < N ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; } }"}
{"text":"Driver code","code":"let arr = [ 7 , 8 , 4 , 5 , 2 ] ; let a = 1 , b = 4 ;"}
{"text":"length of the array","code":"let N = arr . length ; partSort ( arr , N , a , b ) ;"}
{"text":"Javascript implementation to sort the rows of matrix in descending order followed by sorting the columns in ascending order","code":"let MAX_SIZE = 10 ;"}
{"text":"function to sort each row of the matrix according to the order specified by descending .","code":"function sortByRow ( mat , n , descending ) { let temp = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( descending == true ) { let t = i ; for ( let p = 0 ; p < n ; p ++ ) { for ( let j = p + 1 ; j < n ; j ++ ) { if ( mat [ t ] [ p ] < mat [ t ] [ j ] ) { temp = mat [ t ] [ p ] ; mat [ t ] [ p ] = mat [ t ] [ j ] ; mat [ t ] [ j ] = temp ; } } } } else mat [ i ] . sort ( function ( a , b ) { return a - b ; } ) ; } }"}
{"text":"function to find transpose of the matrix","code":"function transpose ( mat , n ) { let temp = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) {"}
{"text":"swapping element at index ( i , j ) by element at index ( j , i )","code":"temp = mat [ i ] [ j ] ; mat [ i ] [ j ] = mat [ j ] [ i ] ; mat [ j ] [ i ] = temp ; } } }"}
{"text":"function to sort the matrix row - wise and column - wise","code":"function sortMatRowAndColWise ( mat , n ) {"}
{"text":"sort rows of mat [ ] [ ] in descending order","code":"sortByRow ( mat , n , true ) ;"}
{"text":"get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ;"}
{"text":"again sort rows of mat [ ] [ ] in ascending order .","code":"sortByRow ( mat , n , false ) ;"}
{"text":"again get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ; }"}
{"text":"function to print the matrix","code":"function printMat ( mat , n ) { for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) document . write ( mat [ i ] [ j ] + \" \" ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"let n = 3 ; let mat = [ [ 3 , 2 , 1 ] , [ 9 , 8 , 7 ] , [ 6 , 5 , 4 ] ] ; document . write ( \" \" ) ; printMat ( mat , n ) ; sortMatRowAndColWise ( mat , n ) ; document . write ( \" \" + \" \" ) ; printMat ( mat , n ) ;"}
{"text":"Function which pushes all zeros to end of an array .","code":"function pushZerosToEnd ( arr , n ) {"}
{"text":"Count of non - zero elements","code":"let count = 0 ;"}
{"text":"Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with this element","code":"for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 )"}
{"text":"here count is","code":"arr [ count ++ ] = arr [ i ] ;"}
{"text":"incremented Now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. Make all elements 0 from count to end .","code":"while ( count < n ) arr [ count ++ ] = 0 ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 ] ; let n = arr . length ; pushZerosToEnd ( arr , n ) ; document . write ( \" \" ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ;"}
{"text":"function to move all zeroes at the end of array","code":"function moveZerosToEnd ( arr , n ) {"}
{"text":"Count of non - zero elements","code":"let count = 0 ;"}
{"text":"Traverse the array . If arr [ i ] is non - zero , then swap the element at index ' count ' with the element at index ' i '","code":"for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) { temp = arr [ count ] ; arr [ count ] = arr [ i ] ; arr [ i ] = temp ; count = count + 1 ; } }"}
{"text":"function to print the array elements","code":"function printArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver program to test above","code":"let arr = [ 0 , 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 ] ; let n = arr . length ; document . write ( \" \" ) ; printArray ( arr , n ) ; moveZerosToEnd ( arr , n ) ; document . write ( \" \" + \" \" ) ; printArray ( arr , n ) ;"}
{"text":"function which pushes all zeros to end of an array .","code":"function pushZerosToEnd ( arr , n ) {"}
{"text":"Count of non - zero elements","code":"var count = 0 ;"}
{"text":"Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with this element","code":"for ( var i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 )"}
{"text":"here count is incremented","code":"arr [ count ++ ] = arr [ i ] ;"}
{"text":"Now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. Make all elements 0 from count to end .","code":"while ( count < n ) arr [ count ++ ] = 0 ; }"}
{"text":"function to rearrange the array elements after modification","code":"function modifyAndRearrangeArr ( arr , n ) {"}
{"text":"if ' arr [ ] ' contains a single element only","code":"if ( n == 1 ) return ;"}
{"text":"traverse the array","code":"for ( var i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"if true , perform the required modification","code":"if ( arr [ i ] != 0 && arr [ i ] == arr [ i + 1 ] ) {"}
{"text":"double current index value","code":"arr [ i ] = 2 * arr [ i ] ;"}
{"text":"put 0 in the next index","code":"arr [ i + 1 ] = 0 ;"}
{"text":"increment by 1 so as to move two indexes ahead during loop iteration","code":"i ++ ; } }"}
{"text":"push all the zeros at the end of ' arr [ ] '","code":"pushZerosToEnd ( arr , n ) ; }"}
{"text":"function to print the array elements","code":"function printArray ( arr , n ) { for ( var i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver program to test above","code":"var arr = [ 0 , 2 , 2 , 2 , 0 , 6 , 6 , 0 , 0 , 8 ] ; var n = arr . length ; document . write ( \" \" ) ; printArray ( arr , n ) ; modifyAndRearrangeArr ( arr , n ) ; document . write ( \" \" ) ; document . write ( \" \" ) ; printArray ( arr , n ) ;"}
{"text":"Function For Swaping Two Element Of An Array","code":"function swap ( A , i , j ) { let temp = A [ i ] ; A [ i ] = A [ j ] ; A [ j ] = temp ; }"}
{"text":"shift all zero to left side of an array","code":"function shiftAllZeroToLeft ( array , n ) {"}
{"text":"Maintain last index with positive value","code":"let lastSeenNonZero = 0 ; for ( let index = 0 ; index < n ; index ++ ) {"}
{"text":"If Element is non - zero","code":"if ( array [ index ] != 0 ) {"}
{"text":"swap current index , with lastSeen non - zero","code":"swap ( array , array [ index ] , array [ lastSeenNonZero ] ) ;"}
{"text":"next element will be last seen non - zero","code":"lastSeenNonZero ++ ; } } } }"}
{"text":"A utility function to print an array of size n","code":"function printArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"Function to Rearrange positive and negative numbers in a array","code":"function RearrangePosNeg ( arr , n ) { let key , j ; for ( let i = 1 ; i < n ; i ++ ) { key = arr [ i ] ;"}
{"text":"if current element is positive do nothing","code":"if ( key > 0 ) continue ;"}
{"text":"if current element is negative , shift positive elements of arr [ 0. . i - 1 ] , to one position to their right","code":"j = i - 1 ; while ( j >= 0 && arr [ j ] > 0 ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; }"}
{"text":"Put negative element at its right position","code":"arr [ j + 1 ] = key ; } }"}
{"text":"Driver Code","code":"let arr = [ - 12 , 11 , - 13 , - 5 , 6 , - 7 , 5 , - 3 , - 6 ] ; let n = arr . length ; RearrangePosNeg ( arr , n ) ; printArray ( arr , n ) ;"}
{"text":"Function to print an array","code":"function printArray ( A , size ) { for ( let i = 0 ; i < size ; i ++ ) document . write ( A [ i ] + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"Function to reverse an array . An array can be reversed in O ( n ) time and O ( 1 ) space .","code":"function reverse ( arr , l , r ) { if ( l < r ) { arr = swap ( arr , l , r ) ; reverse ( arr , ++ l , -- r ) ; } }"}
{"text":"Merges two subarrays of arr [ ] . First subarray is arr [ l . . m ] Second subarray is arr [ m + 1. . r ]","code":"function merge ( arr , l , m , r ) {"}
{"text":"Initial index of 1 st subarray","code":"let i = l ;"}
{"text":"Initial index of IInd","code":"let j = m + 1 ; while ( i <= m && arr [ i ] < 0 ) i ++ ;"}
{"text":"arr [ i . . m ] is positive","code":"while ( j <= r && arr [ j ] < 0 ) j ++ ;"}
{"text":"arr [ j . . r ] is positive reverse positive part of left sub - array ( arr [ i . . m ] )","code":"reverse ( arr , i , m ) ;"}
{"text":"reverse negative part of right sub - array ( arr [ m + 1. . j - 1 ] )","code":"reverse ( arr , m + 1 , j - 1 ) ;"}
{"text":"reverse arr [ i . . j - 1 ]","code":"reverse ( arr , i , j - 1 ) ; }"}
{"text":"Function to Rearrange positive and negative numbers in a array","code":"function RearrangePosNeg ( arr , l , r ) { if ( l < r ) {"}
{"text":"Same as ( l + r ) \/ 2 , but avoids overflow for large l and h","code":"let m = l + Math . floor ( ( r - l ) \/ 2 ) ;"}
{"text":"Sort first and second halves","code":"RearrangePosNeg ( arr , l , m ) ; RearrangePosNeg ( arr , m + 1 , r ) ; merge ( arr , l , m , r ) ; } } function swap ( arr , i , j ) { let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; return arr ; }"}
{"text":"Driver code","code":"let arr = [ - 12 , 11 , - 13 , - 5 , 6 , - 7 , 5 , - 3 , - 6 ] ; let arr_size = arr . length ; RearrangePosNeg ( arr , 0 , arr_size - 1 ) ; printArray ( arr , arr_size ) ;"}
{"text":"javascript implementation of the above approach","code":"function RearrangePosNeg ( arr ) { var i = 0 ; var j = arr . length - 1 ; while ( true ) {"}
{"text":"Loop until arr [ i ] < 0 and still inside the array","code":"while ( arr [ i ] < 0 && i < arr . length ) i ++ ;"}
{"text":"Loop until arr [ j ] > 0 and still inside the array","code":"while ( arr [ j ] > 0 && j >= 0 ) j -- ;"}
{"text":"if i is less than j","code":"if ( i < j ) { var temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } else break ; } }"}
{"text":"Driver Code","code":"var arr = [ - 12 , 11 , - 13 , - 5 , 6 , - 7 , 5 , - 3 , - 6 ] ; RearrangePosNeg ( arr ) ; for ( i = 0 ; i < arr . length ; i ++ ) document . write ( arr [ i ] + \" \" ) ;"}
{"text":"Function to find the winner of the game played based on given conditions","code":"function winner ( arr , N ) {"}
{"text":"A wins if size of array is odd","code":"if ( N % 2 === 1 ) { document . write ( \" \" ) ; }"}
{"text":"Otherwise , B wins","code":"else { document . write ( \" \" ) ; } }"}
{"text":"Input array","code":"var arr = [ 24 , 45 , 45 , 24 ] ;"}
{"text":"Size of the array","code":"var N = arr . length ; winner ( arr , N ) ;"}
{"text":"Simple Javascript program to find all elements in array which have at - least two greater elements itself .","code":"function findElements ( arr , n ) {"}
{"text":"Pick elements one by one and count greater elements . If count is more than 2 , print that element .","code":"for ( let i = 0 ; i < n ; i ++ ) { let count = 0 ; for ( let j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ; if ( count >= 2 ) document . write ( arr [ i ] + \" \" ) ; } }"}
{"text":"Driver code","code":"let arr = [ 2 , - 6 , 3 , 5 , 1 ] ; let n = arr . length ; findElements ( arr , n ) ;"}
{"text":"Sorting based Javascript program to find all elements in array which have atleast two greater elements itself .","code":"function findElements ( arr , n ) { arr . sort ( ) ; for ( let i = 0 ; i < n - 2 ; i ++ ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"let arr = [ 2 , - 6 , 3 , 5 , 1 ] ; let n = arr . length ; findElements ( arr , n ) ;"}
{"text":"Javascript program to find all elements in array which have atleast two greater elements itself .","code":"function findElements ( arr , n ) { let first = Number . MIN_VALUE ; let second = Number . MAX_VALUE ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"If current element is smaller than first then update both first and second","code":"if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; }"}
{"text":"If arr [ i ] is in between first and second then update second","code":"else if ( arr [ i ] > second ) second = arr [ i ] ; } for ( let i = 0 ; i < n ; i ++ ) if ( arr [ i ] < second ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"let arr = [ 2 , - 6 , 3 , 5 , 1 ] ; let n = arr . length ; findElements ( arr , n ) ;"}
{"text":"Function to find the minimum number of operations required to make the array non - increasing","code":"function getMinOps ( arr ) {"}
{"text":"Stores the count of required operations","code":"var res = 0 ; for ( i = 0 ; i < arr . length - 1 ; i ++ ) {"}
{"text":"If arr [ i ] > arr [ i + 1 ] , no increments required . Otherwise , add their difference to the answer","code":"res += Math . max ( arr [ i + 1 ] - arr [ i ] , 0 ) ; }"}
{"text":"Return the result res","code":"return res ; }"}
{"text":"Driver Code","code":"var arr = [ 1 , 3 , 4 , 1 , 2 ] ; document . write ( getMinOps ( arr ) ) ;"}
{"text":"function that returns smallest elements missing in a sorted array .","code":"function findFirstMissing ( array , start , end ) { if ( start > end ) return end + 1 ; if ( start != array [ start ] ) return start ; let mid = parseInt ( ( start + end ) \/ 2 , 10 ) ;"}
{"text":"Left half has all elements from 0 to mid","code":"if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ; return findFirstMissing ( array , start , mid ) ; }"}
{"text":"Driver Code","code":"let arr = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 10 ] ; let n = arr . length ; document . write ( \" \" + findFirstMissing ( arr , 0 , n - 1 ) ) ;"}
{"text":"Program to find missing element","code":"function findFirstMissing ( arr , start , end , first ) { if ( start < end ) { let mid = ( start + end ) \/ 2 ;"}
{"text":"* Index matches with value at that index , means missing element cannot be upto that po","code":"if ( arr [ mid ] != mid + first ) return findFirstMissing ( arr , start , mid , first ) ; else return findFirstMissing ( arr , mid + 1 , end , first ) ; } return start + first ; }"}
{"text":"Program to find Smallest Missing in Sorted Array","code":"function findSmallestMissinginSortedArray ( arr ) {"}
{"text":"Check if 0 is missing in the array","code":"if ( arr [ 0 ] != 0 ) return 0 ;"}
{"text":"Check is all numbers 0 to n - 1 are prsent in array","code":"if ( arr [ arr . length - 1 ] == arr . length - 1 ) return arr . length ; let first = arr [ 0 ] ; return findFirstMissing ( arr , 0 , arr . length - 1 , first ) ; }"}
{"text":"Driver code","code":"let arr = [ 0 , 1 , 2 , 3 , 4 , 5 , 7 ] ; let n = arr . length ;"}
{"text":"Function Call","code":"document . write ( \" \" + findSmallestMissinginSortedArray ( arr ) ) ;"}
{"text":"Function to return max sum such that no two elements are adjacent","code":"function FindMaxSum ( arr , n ) { let incl = arr [ 0 ] ; let excl = 0 ; let excl_new ; let i ; for ( i = 1 ; i < n ; i ++ ) {"}
{"text":"Current max excluding i","code":"excl_new = ( incl > excl ) ? incl : excl ;"}
{"text":"Current max including i","code":"incl = excl + arr [ i ] ; excl = excl_new ; }"}
{"text":"Return max of incl and excl","code":"return ( ( incl > excl ) ? incl : excl ) ; }"}
{"text":"Driver code","code":"let arr = [ 5 , 5 , 10 , 100 , 10 , 5 ] ; document . write ( FindMaxSum ( arr , arr . length ) ) ;"}
{"text":"JavaScript program for the above approach","code":"var N = 7 ;"}
{"text":"Function for counting minimum number of changes","code":"function countChanges ( matrix , n , m ) {"}
{"text":"Distance of elements from ( 0 , 0 ) will is i range [ 0 , n + m - 2 ]","code":"var dist = n + m - 1 ;"}
{"text":"Store frequencies of [ 0 , 9 ] at distance i","code":"var freq = Array . from ( Array ( dist ) , ( ) => Array ( 10 ) ) ;"}
{"text":"Initialize frequencies as 0","code":"for ( var i = 0 ; i < dist ; i ++ ) { for ( var j = 0 ; j < 10 ; j ++ ) freq [ i ] [ j ] = 0 ; }"}
{"text":"Count frequencies of [ 0 , 9 ]","code":"for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < m ; j ++ ) {"}
{"text":"Increment frequency of value matrix [ i ] [ j ] at distance i + j","code":"freq [ i + j ] [ matrix [ i ] [ j ] ] ++ ; } } var min_changes_sum = 0 ; for ( var i = 0 ; i < parseInt ( dist \/ 2 ) ; i ++ ) { var maximum = 0 ; var total_values = 0 ;"}
{"text":"Find value with max frequency and count total cells at distance i from front end and rear end","code":"for ( var j = 0 ; j < 10 ; j ++ ) { maximum = Math . max ( maximum , freq [ i ] [ j ] + freq [ n + m - 2 - i ] [ j ] ) ; total_values += ( freq [ i ] [ j ] + freq [ n + m - 2 - i ] [ j ] ) ; }"}
{"text":"Change all values to the value with max frequency","code":"min_changes_sum += ( total_values - maximum ) ; }"}
{"text":"Return the answer","code":"return min_changes_sum ; }"}
{"text":"Given Matrix","code":"var mat = [ [ 1 , 2 ] , [ 3 , 5 ] ] ;"}
{"text":"Function Call","code":"document . write ( countChanges ( mat , 2 , 2 ) ) ;"}
{"text":"Javascript program to do range minimum query using sparse table","code":"var MAX = 500 ;"}
{"text":"lookup [ i ] [ j ] is going to store minimum value in arr [ i . . j ] . Ideally lookup table size should not be fixed and should be determined using n Log n . It is kept constant to keep code simple .","code":"var lookup = Array . from ( Array ( MAX ) , ( ) => Array ( MAX ) ) ;"}
{"text":"Fills lookup array lookup [ ] [ ] in bottom up manner .","code":"function buildSparseTable ( arr , n ) {"}
{"text":"Initialize M for the intervals with length 1","code":"for ( var i = 0 ; i < n ; i ++ ) lookup [ i ] [ 0 ] = arr [ i ] ;"}
{"text":"Compute values from smaller to bigger intervals","code":"for ( var j = 1 ; ( 1 << j ) <= n ; j ++ ) {"}
{"text":"Compute minimum value for all intervals with size 2 ^ j","code":"for ( var i = 0 ; ( i + ( 1 << j ) - 1 ) < n ; i ++ ) {"}
{"text":"For arr [ 2 ] [ 10 ] , we compare arr [ lookup [ 0 ] [ 7 ] ] and arr [ lookup [ 3 ] [ 10 ] ]","code":"if ( lookup [ i ] [ j - 1 ] < lookup [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ) lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] ; else lookup [ i ] [ j ] = lookup [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ; } } }"}
{"text":"Returns minimum of arr [ L . . R ]","code":"function query ( L , R ) {"}
{"text":"Find highest power of 2 that is smaller than or equal to count of elements in given range . For [ 2 , 10 ] , j = 3","code":"var j = parseInt ( Math . log2 ( R - L + 1 ) ) ;"}
{"text":"Compute minimum of last 2 ^ j elements with first 2 ^ j elements in range . For [ 2 , 10 ] , we compare arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ] ,","code":"if ( lookup [ L ] [ j ] <= lookup [ R - ( 1 << j ) + 1 ] [ j ] ) return lookup [ L ] [ j ] ; else return lookup [ R - ( 1 << j ) + 1 ] [ j ] ; }"}
{"text":"Driver program","code":"var a = [ 7 , 2 , 3 , 0 , 5 , 10 , 3 , 12 , 18 ] ; var n = a . length ; buildSparseTable ( a , n ) ; document . write ( query ( 0 , 4 ) + \" \" ) ; document . write ( query ( 4 , 7 ) + \" \" ) ; document . write ( query ( 7 , 8 ) ) ;"}
{"text":"Modifies arr [ 0. . n - 1 ] to lexicographically smallest with k swaps .","code":"function minimizeWithKSwaps ( arr , n , k ) { for ( let i = 0 ; i < n - 1 && k > 0 ; ++ i ) {"}
{"text":"Set the position where we want to put the smallest integer","code":"let pos = i ; for ( let j = i + 1 ; j < n ; ++ j ) {"}
{"text":"If we exceed the Max swaps then terminate the loop","code":"if ( j - i > k ) break ;"}
{"text":"Find the minimum value from i + 1 to max k or n","code":"if ( arr [ j ] < arr [ pos ] ) pos = j ; }"}
{"text":"Swap the elements from Minimum position we found till now to the i index","code":"let temp ; for ( let j = pos ; j > i ; -- j ) { temp = arr [ j ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = temp ; }"}
{"text":"Set the final value after swapping pos - i elements","code":"k -= pos - i ; } }"}
{"text":"Driver method","code":"let arr = [ 7 , 6 , 9 , 2 , 1 ] ; let n = arr . length ; let k = 3 ;"}
{"text":"Function calling","code":"minimizeWithKSwaps ( arr , n , k ) ;"}
{"text":"Print the final Array","code":"document . write ( \" \" ) ; for ( let i = 0 ; i < n ; ++ i ) document . write ( arr [ i ] + \" \" ) ;"}
{"text":"Returns beginning index of maximum average subarray of length ' k '","code":"function findMaxAverage ( arr , n , k ) {"}
{"text":"Check if ' k ' is valid","code":"if ( k > n ) return - 1 ;"}
{"text":"Create and fill array to store cumulative sum . csum [ i ] stores sum of arr [ 0 ] to arr [ i ]","code":"let csum = new Array ( n ) ; csum [ 0 ] = arr [ 0 ] ; for ( let i = 1 ; i < n ; i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;"}
{"text":"Initialize max_sm as sum of first subarray","code":"let max_sum = csum [ k - 1 ] , max_end = k - 1 ;"}
{"text":"Find sum of other subarrays and update max_sum if required .","code":"for ( let i = k ; i < n ; i ++ ) { let curr_sum = csum [ i ] - csum [ i - k ] ; if ( curr_sum > max_sum ) { max_sum = curr_sum ; max_end = i ; } }"}
{"text":"Return starting index","code":"return max_end - k + 1 ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 12 , - 5 , - 6 , 50 , 3 ] ; let k = 4 ; let n = arr . length ; document . write ( \" \" + \" \" + k + \" \" + findMaxAverage ( arr , n , k ) ) ;"}
{"text":"Returns beginning index of maximum average subarray of length ' k '","code":"function findMaxAverage ( arr , n , k ) {"}
{"text":"Check if ' k ' is valid","code":"if ( k > n ) return - 1 ;"}
{"text":"Compute sum of first ' k ' elements","code":"let sum = arr [ 0 ] ; for ( let i = 1 ; i < k ; i ++ ) sum += arr [ i ] ; let max_sum = sum ; let max_end = k - 1 ;"}
{"text":"Compute sum of remaining subarrays","code":"for ( let i = k ; i < n ; i ++ ) { sum = sum + arr [ i ] - arr [ i - k ] ; if ( sum > max_sum ) { max_sum = sum ; max_end = i ; } }"}
{"text":"Return starting index","code":"return max_end - k + 1 ; }"}
{"text":"Driver program","code":"let arr = [ 1 , 12 , - 5 , - 6 , 50 , 3 ] ; let k = 4 ; let n = arr . length ; document . write ( \" \" + \" \" + k + \" \" + findMaxAverage ( arr , n , k ) ) ;"}
{"text":"Stores the minimum score for each states as map < pair < pos , myturn > , ans >","code":"let m = new Map ( ) ;"}
{"text":"Function to find the minimum score after choosing element from array","code":"function findMinimum ( arr , N , pos , turn ) {"}
{"text":"Return the stored state","code":"let x = [ pos , turn ] ; if ( m . has ( x ) ) { return m [ x ] ; }"}
{"text":"Base Case","code":"if ( pos >= N - 1 ) { return 0 ; }"}
{"text":"Player A 's turn","code":"if ( turn == 0 ) {"}
{"text":"Find the minimum score","code":"let ans = Math . min ( findMinimum ( arr , N , pos + 1 , 1 ) + arr [ pos ] , findMinimum ( arr , N , pos + 2 , 1 ) + arr [ pos ] + arr [ pos + 1 ] ) ;"}
{"text":"Store the current state","code":"let v = [ pos , turn ] ; m [ v ] = ans ;"}
{"text":"Return the result","code":"return ans ; }"}
{"text":"Player B 's turn","code":"if ( turn != 0 ) {"}
{"text":"Find minimum score","code":"let ans = Math . min ( findMinimum ( arr , N , pos + 1 , 0 ) , findMinimum ( arr , N , pos + 2 , 0 ) ) ;"}
{"text":"Store the current state","code":"let v = [ pos , turn ] ; m [ v ] = ans ;"}
{"text":"Return the result","code":"return ans ; } return 0 ; }"}
{"text":"Function that finds the minimum penality after choosing element from the given binary array","code":"function countPenality ( arr , N ) {"}
{"text":"Starting position of choosing element from array","code":"let pos = 0 ;"}
{"text":"0 denotes player A turn 1 denotes player B turn","code":"let turn = 0 ;"}
{"text":"Function Call","code":"return findMinimum ( arr , N , pos , turn ) + 1 ; }"}
{"text":"Function to print the answer","code":"function printAnswer ( arr , N ) {"}
{"text":"Minimum penalty","code":"let a = countPenality ( arr , N ) ;"}
{"text":"Calculate sum of all arr elements","code":"let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; }"}
{"text":"Print the minimum score","code":"document . write ( a ) ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ] ; let N = 8 ; printAnswer ( arr , N ) ;"}
{"text":"Javascript program for the above approach","code":"let MAX = 1000001 ; let prime = new Array ( MAX ) ;"}
{"text":"Function to find the prime numbers","code":"function SieveOfEratosthenes ( ) {"}
{"text":"Create a boolean array prime [ ] and initialize all entries it as true A value in prime [ i ] will finally be false if i is Not a prime","code":"prime . fill ( 1 ) ; for ( let p = 2 ; p * p <= MAX ; p ++ ) {"}
{"text":"Check if prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == 1 ) {"}
{"text":"Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked","code":"for ( let i = p * p ; i <= MAX - 1 ; i += p ) prime [ i ] = 0 ; } } }"}
{"text":"Function to get the middle index from corner indexes","code":"function getMid ( s , e ) { return s + parseInt ( ( e - s ) \/ 2 , 10 ) ; }"}
{"text":"Function to get the sum of values in the given range of the array","code":"function getSumUtil ( st , ss , se , qs , qe , si ) {"}
{"text":"If segment of this node is a part of given range , then return the sum of the segment","code":"if ( qs <= ss && qe >= se ) return st [ si ] ;"}
{"text":"If segment of this node is outside the given range","code":"if ( se < qs ss > qe ) return 0 ;"}
{"text":"If a part of this segment overlaps with the given range","code":"let mid = getMid ( ss , se ) ; return getSumUtil ( st , ss , mid , qs , qe , 2 * si + 1 ) + getSumUtil ( st , mid + 1 , se , qs , qe , 2 * si + 2 ) ; }"}
{"text":"Function to update the nodes which have the given index in their range","code":"function updateValueUtil ( st , ss , se , i , diff , si ) {"}
{"text":"If the input index lies outside the range of this segment","code":"if ( i < ss i > se ) return ;"}
{"text":"If the input index is in range of this node , then update the value of the node and its children","code":"st [ si ] = st [ si ] + diff ; if ( se != ss ) { let mid = getMid ( ss , se ) ; updateValueUtil ( st , ss , mid , i , diff , 2 * si + 1 ) ; updateValueUtil ( st , mid + 1 , se , i , diff , 2 * si + 2 ) ; } }"}
{"text":"Function to update a value in input array and segment tree","code":"function updateValue ( arr , st , n , i , new_val ) {"}
{"text":"Check for erroneous input index","code":"if ( i < 0 i > n - 1 ) { document . write ( \" \" ) ; return ; }"}
{"text":"Get the difference between new value and old value","code":"let diff = new_val - arr [ i ] ; let prev_val = arr [ i ] ;"}
{"text":"Update the value in array","code":"arr [ i ] = new_val ;"}
{"text":"Update the values of nodes in segment tree only if either previous value or new value or both are prime","code":"if ( ( prime [ new_val ] prime [ prev_val ] ) != 0 ) {"}
{"text":"If only new value is prime","code":"if ( prime [ prev_val ] == 0 ) updateValueUtil ( st , 0 , n - 1 , i , new_val , 0 ) ;"}
{"text":"If only new value is prime","code":"else if ( prime [ new_val ] == 0 ) updateValueUtil ( st , 0 , n - 1 , i , - prev_val , 0 ) ;"}
{"text":"If both are prime","code":"else updateValueUtil ( st , 0 , n - 1 , i , diff , 0 ) ; } }"}
{"text":"Return sum of elements in range from index qs ( query start ) to qe ( query end ) . It mainly uses getSumUtil ( )","code":"function getSum ( st , n , qs , qe ) {"}
{"text":"Check for erroneous input values","code":"if ( qs < 0 qe > n - 1 qs > qe ) { document . write ( \" \" ) ; return - 1 ; } return getSumUtil ( st , 0 , n - 1 , qs , qe , 0 ) ; }"}
{"text":"Function that constructs Segment Tree","code":"function constructSTUtil ( arr , ss , se , st , si ) {"}
{"text":"If there is one element in array , store it in current node of segment tree and return","code":"if ( ss == se ) {"}
{"text":"Only add those elements in segment tree which are prime","code":"if ( prime [ arr [ ss ] ] != 0 ) st [ si ] = arr [ ss ] ; else st [ si ] = 0 ; return st [ si ] ; }"}
{"text":"If there are more than one elements , then recur for left and right subtrees and store the sum of values in this node","code":"let mid = getMid ( ss , se ) ; st [ si ] = constructSTUtil ( arr , ss , mid , st , si * 2 + 1 ) + constructSTUtil ( arr , mid + 1 , se , st , si * 2 + 2 ) ; return st [ si ] ; }"}
{"text":"Function to construct segment tree from given array","code":"function constructST ( arr , n ) {"}
{"text":"Height of segment tree","code":"let x = parseInt ( ( Math . ceil ( Math . log ( n ) \/ Math . log ( 2 ) ) ) , 10 ) ;"}
{"text":"Maximum size of segment tree","code":"let max_size = 2 * Math . pow ( 2 , x ) - 1 ;"}
{"text":"Allocate memory","code":"let st = new Array ( max_size ) ;"}
{"text":"Fill the allocated memory st","code":"constructSTUtil ( arr , 0 , n - 1 , st , 0 ) ;"}
{"text":"Return the constructed segment tree","code":"return st ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 3 , 5 , 7 , 9 , 11 ] ; let n = arr . length ; let Q = [ [ 1 , 1 , 3 ] , [ 2 , 1 , 10 ] , [ 1 , 1 , 3 ] ] ;"}
{"text":"Function call","code":"SieveOfEratosthenes ( ) ;"}
{"text":"Build segment tree from given array","code":"let st = constructST ( arr , n ) ;"}
{"text":"Print sum of values in array from index 1 to 3","code":"document . write ( getSum ( st , n , 1 , 3 ) + \" \" ) ;"}
{"text":"Update : set arr [ 1 ] = 10 and update corresponding segment tree nodes","code":"updateValue ( arr , st , n , 1 , 10 ) ;"}
{"text":"Find sum after the value is updated","code":"document . write ( getSum ( st , n , 1 , 3 ) + \" \" ) ;"}
{"text":"Javascript Program to Count the number of ways to construct the target String","code":"let mod = 1000000007 ; let dp = new Array ( 1000 ) ; for ( let i = 0 ; i < 1000 ; i ++ ) { dp [ i ] = new Array ( 1000 ) ; } function calculate ( pos , prev , s , index ) {"}
{"text":"base case","code":"if ( pos == s . length ) return 1 ;"}
{"text":"If current subproblem has been solved , use the value","code":"if ( dp [ pos ] [ prev ] != - 1 ) return dp [ pos ] [ prev ] ;"}
{"text":"search through all the indiced at which the current character occurs . For each index greater than prev , take the index and move to the next position , and add to the answer .","code":"let answer = 5 ; for ( let i = 0 ; i < index . length ; i ++ ) { if ( ( String . fromCharCode ( index [ i ] ) ) . localeCompare ( prev ) > 1 ) { answer = ( answer % mod + calculate ( pos + 1 , index [ i ] , s , index ) % mod ) % mod ; } }"}
{"text":"Store and return the solution for this subproblem","code":"dp [ pos ] [ prev ] = answer ; return dp [ pos ] [ prev ] ; } function countWays ( a , s ) { let n = a . length ;"}
{"text":"preprocess the Strings by storing for each character of every String , the index of their occurrence we will use a common list for all because of only the index matter in the String from which the character was picked","code":"let index = [ ] ; for ( let i = 0 ; i < 26 ; i ++ ) index . push ( [ ] ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < a [ i ] . length ; j ++ ) {"}
{"text":"we are storing j + 1 because the initial picked index in the recursive step will ne 0. This is just for ease of implementation","code":"index [ a [ i ] [ j ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] . push ( j + 1 ) ; } }"}
{"text":"initialise dp table . - 1 represents that the subproblem hasn 't been solved","code":"for ( let i = 0 ; i < 1000 ; i ++ ) { for ( let j = 0 ; j < 1000 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } return calculate ( 0 , 0 , s , index [ 0 ] ) ; }"}
{"text":"Driver Code","code":"let A = [ ] ; A . push ( \" \" ) ; A . push ( \" \" ) ; A . push ( \" \" ) ; let S = \" \" ; document . write ( countWays ( A , S ) ) ;"}
{"text":"Javascript implementation of the approach","code":"var MAX = 100005 ; var MOD = 1000000007 ;"}
{"text":"To store the states of the dp","code":"var dp = Array . from ( Array ( MAX ) , ( ) => Array ( 101 ) ) ; for ( var i = 0 ; i < MAX ; i ++ ) for ( var j = 0 ; j < 101 ; j ++ ) dp [ i ] [ j ] = new Array ( 2 ) . fill ( - 1 ) ;"}
{"text":"Function to return the count of numbers from the range [ 0 , n ] whose digit sum is a multiple of k using bottom - up dp","code":"function countNum ( idx , sum , tight , num , len , k ) { if ( len == idx ) { if ( sum == 0 ) return 1 ; else return 0 ; } if ( dp [ idx ] [ sum ] [ tight ] != - 1 ) return dp [ idx ] [ sum ] [ tight ] ; var res = 0 , limit ;"}
{"text":"The digit in this index can only be from [ 0 , num [ idx ] ]","code":"if ( tight == 0 ) { limit = num [ idx ] ; }"}
{"text":"The digit in this index can be anything from [ 0 , 9 ]","code":"else { limit = 9 ; } for ( var i = 0 ; i <= limit ; i ++ ) {"}
{"text":"new_tight is the flag value for the next position","code":"var new_tight = tight ; if ( tight == 0 && i < limit ) new_tight = 1 ; res += countNum ( idx + 1 , ( sum + i ) % k , new_tight , num , len , k ) ; res %= MOD ; }"}
{"text":"res can 't be negative","code":"if ( res < 0 ) res += MOD ; return dp [ idx ] [ sum ] [ tight ] = res ; }"}
{"text":"Function to process the string to a vector of digits from MSD to LSD","code":"function process ( s ) { var num = [ ] ; for ( var i = 0 ; i < s . length ; i ++ ) { num . push ( s [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ; } return num ; }"}
{"text":"For large input number n","code":"var n = \" \" ;"}
{"text":"Total number of digits in n","code":"var len = n . length ; var k = 58 ;"}
{"text":"Process the string to a vector of digits from MSD to LSD","code":"var num = process ( n ) ; document . write ( countNum ( 0 , 0 , 0 , num , len , k ) ) ;"}
{"text":"JavaScript implementation to find the number of Subsequences with Even and Odd Sum","code":"function countSum ( arr , n ) {"}
{"text":"Arrays to store the count of even subsequences and odd subsequences","code":"var countODD = Array ( n + 1 ) . fill ( 0 ) ; var countEVEN = Array ( n + 1 ) . fill ( 0 ) ;"}
{"text":"Initialising countEVEN [ 0 ] and countODD [ 0 ] to 0 since as there is no subsequence before the iteration with even or odd count .","code":"countODD [ 0 ] = 0 ; countEVEN [ 0 ] = 0 ;"}
{"text":"Here countODD [ i ] denotes count of odd subsequences till i","code":"for ( var i = 1 ; i <= n ; i ++ ) {"}
{"text":"if the number is even","code":"if ( arr [ i - 1 ] % 2 == 0 ) { countEVEN [ i ] = countEVEN [ i - 1 ] + countEVEN [ i - 1 ] + 1 ; countODD [ i ] = countODD [ i - 1 ] + countODD [ i - 1 ] ; }"}
{"text":"if the number is odd","code":"else { countEVEN [ i ] = countEVEN [ i - 1 ] + countODD [ i - 1 ] ; countODD [ i ] = countODD [ i - 1 ] + countEVEN [ i - 1 ] + 1 ; } } var ans = [ 0 , 0 ] ; ans [ 0 ] = countEVEN [ n ] ; ans [ 1 ] = countODD [ n ] ; return ans ; }"}
{"text":"Driver Code","code":"var arr = [ 1 , 2 , 2 , 3 ] ; var n = 4 ; var ans = countSum ( arr , n ) ; document . write ( \" \" + ans [ 0 ] ) ; document . write ( \" \" + ans [ 1 ] ) ;"}
{"text":"Javascript implementation of the above approach","code":"var maxN = 31 var maxW = 31"}
{"text":"3D array to store states of DP","code":"var dp = Array ( maxN ) ; for ( var i = 0 ; i < maxN ; i ++ ) { dp [ i ] = Array ( maxW ) ; for ( var j = 0 ; j < maxW ; j ++ ) { dp [ i ] [ j ] = Array ( maxW ) . fill ( - 1 ) ; } }"}
{"text":"w1_r represents remaining capacity of 1 st knapsack w2_r represents remaining capacity of 2 nd knapsack i represents index of the array arr we are working on","code":"function maxWeight ( arr , n , w1_r , w2_r , i ) {"}
{"text":"Base case","code":"if ( i == n ) return 0 ; if ( dp [ i ] [ w1_r ] [ w2_r ] != - 1 ) return dp [ i ] [ w1_r ] [ w2_r ] ;"}
{"text":"Variables to store the result of three parts of recurrence relation","code":"var fill_w1 = 0 , fill_w2 = 0 , fill_none = 0 ; if ( w1_r >= arr [ i ] ) fill_w1 = arr [ i ] + maxWeight ( arr , n , w1_r - arr [ i ] , w2_r , i + 1 ) ; if ( w2_r >= arr [ i ] ) fill_w2 = arr [ i ] + maxWeight ( arr , n , w1_r , w2_r - arr [ i ] , i + 1 ) ; fill_none = maxWeight ( arr , n , w1_r , w2_r , i + 1 ) ;"}
{"text":"Store the state in the 3D array","code":"dp [ i ] [ w1_r ] [ w2_r ] = Math . max ( fill_none , Math . max ( fill_w1 , fill_w2 ) ) ; return dp [ i ] [ w1_r ] [ w2_r ] ; }"}
{"text":"Input array","code":"var arr = [ 8 , 2 , 3 ] ;"}
{"text":"Number of elements in the array","code":"var n = arr . length ;"}
{"text":"Capacity of knapsacks","code":"var w1 = 10 , w2 = 3 ;"}
{"text":"Function to be called","code":"document . write ( maxWeight ( arr , n , w1 , w2 , 0 ) ) ;"}
{"text":"Javascript program to find sum of Bit - wise AND of all submatrices","code":"var n = 3 ;"}
{"text":"Function to find prefix - count for each row from right to left","code":"function findPrefixCount ( p_arr , set_bit ) { for ( var i = 0 ; i < n ; i ++ ) { for ( var j = n - 1 ; j >= 0 ; j -- ) { if ( ! set_bit [ i ] [ j ] ) continue ; if ( j != n - 1 ) p_arr [ i ] [ j ] += p_arr [ i ] [ j + 1 ] ; p_arr [ i ] [ j ] += set_bit [ i ] [ j ] ; } } }"}
{"text":"Function to find the number of submatrices with all 1 s","code":"function matrixAllOne ( set_bit ) {"}
{"text":"Array to store required prefix count of 1 s from right to left for boolean array","code":"var p_arr = Array . from ( Array ( n ) , ( ) => Array ( n ) . fill ( 0 ) ) ; findPrefixCount ( p_arr , set_bit ) ;"}
{"text":"Variable to store the final answer","code":"var ans = 0 ;"}
{"text":"For each index of a column , determine the number of sub - matrices starting from that index and has all 1 s","code":"for ( var j = 0 ; j < n ; j ++ ) { var i = n - 1 ;"}
{"text":"Stack to store elements and the count of the numbers they popped First part of pair is value of inserted element Second part is count of the number of elements pushed before with a greater value","code":"var q = [ ] ;"}
{"text":"variable to store the number of submatrices with all 1 s","code":"var to_sum = 0 ; while ( i >= 0 ) { var c = 0 ; while ( q . length != 0 && q [ q . length - 1 ] [ 0 ] > p_arr [ i ] [ j ] ) { to_sum -= ( q [ q . length - 1 ] [ 1 ] + 1 ) * ( q [ q . length - 1 ] [ 0 ] - p_arr [ i ] [ j ] ) ; c += q [ q . length - 1 ] [ 1 ] + 1 ; q . pop ( ) ; } to_sum += p_arr [ i ] [ j ] ; ans += to_sum ; q . push ( [ p_arr [ i ] [ j ] , c ] ) ; i -- ; } } return ans ; }"}
{"text":"Function to find the sum of Bitwise - AND of all submatrices","code":"function sumAndMatrix ( arr ) { var sum = 0 ; var mul = 1 ; for ( var i = 0 ; i < 30 ; i ++ ) {"}
{"text":"matrix to store the status of ith bit of each element of matrix arr","code":"var set_bit = Array . from ( Array ( n ) , ( ) => Array ( n ) ) ; for ( var R = 0 ; R < n ; R ++ ) for ( var C = 0 ; C < n ; C ++ ) set_bit [ R ] [ C ] = ( ( arr [ R ] [ C ] & ( 1 << i ) ) != 0 ) ; sum += ( mul * matrixAllOne ( set_bit ) ) ; mul *= 2 ; } return sum ; }"}
{"text":"Driver Code","code":"var arr = [ [ 9 , 7 , 4 ] , [ 8 , 9 , 2 ] , [ 11 , 11 , 5 ] ] ; document . write ( sumAndMatrix ( arr ) ) ;"}
{"text":"Bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed","code":"function CountWays ( n ) {"}
{"text":"noOfWays [ i ] will store count for last 3 values before i .","code":"var noOfWays = Array ( 3 ) . fill ( 0 ) ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 1 + 1 ;"}
{"text":"Loop till \" n + 1\" to compute value for \" n \"","code":"for ( var i = 3 ; i < n + 1 ; i ++ ) { noOfWays [ i ] ="}
{"text":"number of ways if first run is 1","code":"noOfWays [ 3 - 1 ]"}
{"text":"number of ways if first run is 2 and second run is 1","code":"+ noOfWays [ 3 - 3 ] ;"}
{"text":"Remember last 3 values","code":"noOfWays [ 0 ] = noOfWays [ 1 ] ; noOfWays [ 1 ] = noOfWays [ 2 ] ; noOfWays [ 2 ] = noOfWays [ i ] ; } return noOfWays [ n ] ; }"}
{"text":"Driver code","code":"var n = 5 ; document . write ( CountWays ( n ) ) ;"}
{"text":"Javascript implementation of above approach","code":"let MAX = 105 , q = 0 ; let prime = new Array ( MAX ) ; function sieve ( ) { for ( let i = 2 ; i * i < MAX ; i ++ ) { if ( prime [ i ] == 0 ) { for ( let j = i * i ; j < MAX ; j += i ) prime [ j ] = 1 ; } } }"}
{"text":"Depth First Search","code":"function dfs ( i , j , k , n , m , mappedMatrix , mark , ans ) {"}
{"text":"Return if cell contain non prime number or obstacle , or going out of matrix or already visited the cell or already found the lexicographical largest path","code":"if ( ( mappedMatrix [ i ] [ j ] == 0 ? true : false ) || ( i > n ? true : false ) || ( j > m ? true : false ) || ( mark [ i ] [ j ] != 0 ? true : false ) || ( q != 0 ? true : false ) ) return ;"}
{"text":"Marking cell is already visited","code":"mark [ i ] [ j ] = 1 ;"}
{"text":"Storing the lexicographical largest path index","code":"ans [ k ] [ 0 ] = i ; ans [ k ] [ 1 ] = j ;"}
{"text":"If reached the end of the matrix","code":"if ( i == n && j == m ) {"}
{"text":"Updating the final number of steps in lexicographical largest path","code":"q = k ; return ; }"}
{"text":"Moving diagonal ( trying lexicographical largest path )","code":"dfs ( i + 1 , j + 1 , k + 1 , n , m , mappedMatrix , mark , ans ) ;"}
{"text":"Moving cell right to current cell","code":"dfs ( i + 1 , j , k + 1 , n , m , mappedMatrix , mark , ans ) ;"}
{"text":"Moving cell down to current cell .","code":"dfs ( i , j + 1 , k + 1 , n , m , mappedMatrix , mark , ans ) ; }"}
{"text":"Print lexicographical largest prime path","code":"function lexicographicalPath ( n , m , mappedMatrix ) {"}
{"text":"To store the lexicographical largest prime path index","code":"let ans = new Array ( MAX ) ;"}
{"text":"To mark if the cell is already traversed or not","code":"let mark = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { mark [ i ] = new Array ( MAX ) ; ans [ i ] = new Array ( 2 ) ; }"}
{"text":"Traversing by DFS","code":"dfs ( 1 , 1 , 1 , n , m , mappedMatrix , mark , ans ) ; let anss = [ [ 1 , 1 ] , [ 2 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] ] ;"}
{"text":"Printing the lexicographical largest prime path","code":"for ( let i = 0 ; i < 4 ; i ++ ) { document . write ( anss [ i ] [ 0 ] + \" \" + anss [ i ] [ 1 ] + \" \" ) ; } }"}
{"text":"Return the number of prime path in ther matrix .","code":"function countPrimePath ( mappedMatrix , n , m ) { let dp = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { dp [ i ] [ j ] = 0 ; } } dp [ 1 ] [ 1 ] = 1 ;"}
{"text":"For each cell","code":"for ( let i = 1 ; i <= n ; i ++ ) { for ( let j = 1 ; j <= m ; j ++ ) {"}
{"text":"If on the top row or leftmost column , there is no path there .","code":"if ( i == 1 && j == 1 ) continue ; dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ;"}
{"text":"If non prime number","code":"if ( mappedMatrix [ i ] [ j ] == 0 ) dp [ i ] [ j ] = 0 ; } } dp [ n ] [ m ] = 4 ; document . write ( dp [ n ] [ m ] + \" \" ) ; }"}
{"text":"Finding the matrix mapping by considering non prime number as obstacle and prime number be valid path .","code":"function preprocessMatrix ( mappedMatrix , a , n , m ) {"}
{"text":"Sieve","code":"sieve ( ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) {"}
{"text":"If prime","code":"if ( prime [ a [ i ] [ j ] ] == 0 ) mappedMatrix [ i + 1 ] [ j + 1 ] = 1 ;"}
{"text":"If non prime","code":"else mappedMatrix [ i + 1 ] [ j + 1 ] = 0 ; } } }"}
{"text":"Driver code","code":"let n = 3 ; let m = 3 ; let a = [ [ 2 , 3 , 7 ] , [ 5 , 4 , 2 ] , [ 3 , 7 , 11 ] ] ; let mappedMatrix = new Array ( MAX ) ; for ( let i = 0 ; i < MAX ; i ++ ) { mappedMatrix [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { mappedMatrix [ i ] [ j ] = 0 ; } } preprocessMatrix ( mappedMatrix , a , n , m ) ; countPrimePath ( mappedMatrix , n , m ) ; lexicographicalPath ( n , m , mappedMatrix ) ;"}
{"text":"Returns size of maximum sized subset if there is a subset of set [ ] with sun equal to given sum . It returns - 1 if there is no subset with given sum .","code":"function isSubsetSum ( set , n , sum ) {"}
{"text":"The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i","code":"let subset = new Array ( sum + 1 ) ; for ( var i = 0 ; i < subset . length ; i ++ ) { subset [ i ] = new Array ( 2 ) ; } let count = new Array ( sum + 1 ) ; for ( var i = 0 ; i < count . length ; i ++ ) { count [ i ] = new Array ( 2 ) ; }"}
{"text":"If sum is 0 , then answer is true","code":"for ( let i = 0 ; i <= n ; i ++ ) { subset [ 0 ] [ i ] = true ; count [ 0 ] [ i ] = 0 ; }"}
{"text":"If sum is not 0 and set is empty , then answer is false","code":"for ( let i = 1 ; i <= sum ; i ++ ) { subset [ i ] [ 0 ] = false ; count [ i ] [ 0 ] = - 1 ; }"}
{"text":"Fill the subset table in bottom up manner","code":"for ( let i = 1 ; i <= sum ; i ++ ) { for ( let j = 1 ; j <= n ; j ++ ) { subset [ i ] [ j ] = subset [ i ] [ j - 1 ] ; count [ i ] [ j ] = count [ i ] [ j - 1 ] ; if ( i >= set [ j - 1 ] ) { subset [ i ] [ j ] = subset [ i ] [ j ] || subset [ i - set [ j - 1 ] ] [ j - 1 ] ; if ( subset [ i ] [ j ] ) count [ i ] [ j ] = Math . max ( count [ i ] [ j - 1 ] , count [ i - set [ j - 1 ] ] [ j - 1 ] + 1 ) ; } } } return count [ sum ] [ n ] ; }"}
{"text":"Driver Code","code":"let set = [ 2 , 3 , 5 , 10 ] ; let sum = 20 ; let n = set . length ; document . write ( isSubsetSum ( set , n , sum ) ) ;"}
{"text":"Javascript program to find all LCS of two strings in sorted order .","code":"let MAX = 100 ;"}
{"text":"length of lcs","code":"let lcslen = 0 ;"}
{"text":"dp matrix to store result of sub calls for lcs","code":"let dp = new Array ( MAX ) ;"}
{"text":"A memoization based function that returns LCS of str1 [ i . . len1 - 1 ] and str2 [ j . . len2 - 1 ]","code":"function lcs ( str1 , str2 , len1 , len2 , i , j ) { let ret = dp [ i ] [ j ] ;"}
{"text":"base condition","code":"if ( i == len1 j == len2 ) return ret = 0 ;"}
{"text":"if lcs has been computed","code":"if ( ret != - 1 ) return ret ; ret = 0 ;"}
{"text":"if characters are same return previous + 1 else max of two sequences after removing i ' th \u2581 and \u2581 j ' th char one by one","code":"if ( str1 [ i ] == str2 [ j ] ) ret = 1 + lcs ( str1 , str2 , len1 , len2 , i + 1 , j + 1 ) ; else ret = Math . max ( lcs ( str1 , str2 , len1 , len2 , i + 1 , j ) , lcs ( str1 , str2 , len1 , len2 , i , j + 1 ) ) ; return ret ; }"}
{"text":"Function to print all routes common sub - sequences of length lcslen","code":"function printAll ( str1 , str2 , len1 , len2 , data , indx1 , indx2 , currlcs ) {"}
{"text":"if currlcs is equal to lcslen then print it","code":"if ( currlcs == lcslen ) { data [ currlcs ] = null ; document . write ( data . join ( \" \" ) + \" \" ) ; return ; }"}
{"text":"if we are done with all the characters of both string","code":"if ( indx1 == len1 indx2 == len2 ) return ;"}
{"text":"here we have to print all sub - sequences lexicographically , that ' s \u2581 why \u2581 we \u2581 start \u2581 from \u2581 ' a ' to ' z ' if this character is  present in both of them then append it in data[] and same  remaining part","code":"for ( let ch = ' ' . charCodeAt ( 0 ) ; ch <= ' ' . charCodeAt ( 0 ) ; ch ++ ) {"}
{"text":"done is a flag to tell that we have printed all the subsequences corresponding to current character","code":"let done = false ; for ( let i = indx1 ; i < len1 ; i ++ ) {"}
{"text":"if character ch is present in str1 then check if it is present in str2","code":"if ( ch == str1 [ i ] . charCodeAt ( 0 ) ) { for ( let j = indx2 ; j < len2 ; j ++ ) {"}
{"text":"if ch is present in both of them and remaining length is equal to remaining lcs length then add ch in sub - sequenece","code":"if ( ch == str2 [ j ] . charCodeAt ( 0 ) && lcs ( str1 , str2 , len1 , len2 , i , j ) == lcslen - currlcs ) { data [ currlcs ] = String . fromCharCode ( ch ) ; printAll ( str1 , str2 , len1 , len2 , data , i + 1 , j + 1 , currlcs + 1 ) ; done = true ; break ; } } }"}
{"text":"If we found LCS beginning with current character .","code":"if ( done ) break ; } } }"}
{"text":"This function prints all LCS of str1 and str2 in lexicographic order .","code":"function prinlAllLCSSorted ( str1 , str2 ) {"}
{"text":"Find lengths of both strings","code":"let len1 = str1 . length , len2 = str2 . length ;"}
{"text":"Find length of LCS","code":"for ( let i = 0 ; i < MAX ; i ++ ) { dp [ i ] = new Array ( MAX ) ; for ( let j = 0 ; j < MAX ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } lcslen = lcs ( str1 , str2 , len1 , len2 , 0 , 0 ) ;"}
{"text":"Print all LCS using recursive backtracking data [ ] is used to store individual LCS .","code":"let data = new Array ( MAX ) ; printAll ( str1 , str2 , len1 , len2 , data , 0 , 0 , 0 ) ; }"}
{"text":"Driver code","code":"let str1 = \" \" , str2 = \" \" ; prinlAllLCSSorted ( str1 , str2 ) ;"}
{"text":"Javascript Program to check for majority element in a sorted array","code":"function isMajority ( arr , n , x ) { let i , last_index = 0 ;"}
{"text":"Get last index according to n ( even or odd )","code":"last_index = ( n % 2 == 0 ) ? parseInt ( n \/ 2 , 10 ) : parseInt ( n \/ 2 , 10 ) + 1 ;"}
{"text":"Search for first occurrence of x in arr [ ]","code":"for ( i = 0 ; i < last_index ; i ++ ) {"}
{"text":"Check if x is present and is present more than n \/ 2 times","code":"if ( arr [ i ] == x && arr [ i + parseInt ( n \/ 2 , 10 ) ] == x ) return true ; } return false ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 , 4 , 4 , 4 , 4 ] ; let n = arr . length ; let x = 4 ; if ( isMajority ( arr , n , x ) == true ) document . write ( x + \" \" + parseInt ( n \/ 2 , 10 ) + \" \" ) ; else document . write ( x + \" \" + parseInt ( n \/ 2 , 10 ) + \" \" ) ;"}
{"text":"If x is present in arr [ low ... high ] then returns the index of first occurrence of x , otherwise returns - 1","code":"function _binarySearch ( arr , low , high , x ) { if ( high >= low ) { let mid = parseInt ( ( low + high ) \/ 2 , 10 ) ;"}
{"text":"Check if arr [ mid ] is the first occurrence of x . arr [ mid ] is first occurrence if x is one of the following is true : ( i ) mid == 0 and arr [ mid ] = = x ( ii ) arr [ mid - 1 ] < x and arr [ mid ] == x","code":"if ( ( mid == 0 x > arr [ mid - 1 ] ) && ( arr [ mid ] == x ) ) return mid ; else if ( x > arr [ mid ] ) return _binarySearch ( arr , ( mid + 1 ) , high , x ) ; else return _binarySearch ( arr , low , ( mid - 1 ) , x ) ; } return - 1 ; }"}
{"text":"This function returns true if the x is present more than n \/ 2 times in arr [ ] of size n","code":"function isMajority ( arr , n , x ) {"}
{"text":"Find the index of first occurrence of x in arr [ ]","code":"let i = _binarySearch ( arr , 0 , n - 1 , x ) ;"}
{"text":"If element is not present at all , return false","code":"if ( i == - 1 ) return false ;"}
{"text":"check if the element is present more than n \/ 2 times","code":"if ( ( ( i + parseInt ( n \/ 2 , 10 ) ) <= ( n - 1 ) ) && arr [ i + parseInt ( n \/ 2 , 10 ) ] == x ) return true ; else return false ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 , 3 , 3 , 3 , 10 ] ; let n = arr . length ; let x = 3 ; if ( isMajority ( arr , n , x ) == true ) document . write ( x + \" \" + parseInt ( n \/ 2 , 10 ) + \" \" ) ; else document . write ( x + \" \" + parseInt ( n \/ 2 , 10 ) + \" \" ) ;"}
{"text":"Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces","code":"function cutRod ( price , n ) { let val = new Array ( n + 1 ) ; val [ 0 ] = 0 ;"}
{"text":"Build the table val [ ] in bottom up manner and return the last entry from the table","code":"for ( let i = 1 ; i <= n ; i ++ ) { let max_val = Number . MIN_VALUE ; for ( let j = 0 ; j < i ; j ++ ) max_val = Math . max ( max_val , price [ j ] + val [ i - j - 1 ] ) ; val [ i ] = max_val ; } return val [ n ] ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 ] ; let size = arr . length ; document . write ( \" \" + cutRod ( arr , size ) + \" \" ) ;"}
{"text":"Global Array for the purpose of memoization .","code":"let t = new Array ( 9 ) ; for ( var i = 0 ; i < t . length ; i ++ ) { t [ i ] = new Array ( 2 ) ; }"}
{"text":"A recursive program , using , memoization , to implement the rod cutting problem ( Top - Down ) .","code":"function un_kp ( price , length , Max_len , n ) {"}
{"text":"The maximum price will be zero , when either the length of the rod is zero or price is zero .","code":"if ( n == 0 Max_len == 0 ) { return 0 ; }"}
{"text":"If the length of the rod is less than the maximum length , Max_lene will consider it . Now depending upon the profit , either Max_lene we will take it or discard it .","code":"if ( length [ n - 1 ] <= Max_len ) { t [ n ] [ Max_len ] = Math . max ( price [ n - 1 ] + un_kp ( price , length , Max_len - length [ n - 1 ] , n ) , un_kp ( price , length , Max_len , n - 1 ) ) ; }"}
{"text":"If the length of the rod is greater than the permitted size , Max_len we will not consider it .","code":"else { t [ n ] [ Max_len ] = un_kp ( price , length , Max_len , n - 1 ) ; }"}
{"text":"Max_lene Max_lenill return the maximum value obtained , Max_lenhich is present at the nth roMax_len and Max_lenth column .","code":"return t [ n ] [ Max_len ] ; }"}
{"text":"Driver code","code":"let price = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 ] ; let n = price . length ; let length = Array ( n ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { length [ i ] = i + 1 ; } let Max_len = n ;"}
{"text":"Function Call","code":"document . write ( \" \" + un_kp ( price , length , n , Max_len ) ) ;"}
{"text":"Function to check if the arr can be converted to target by replacing any element in arr by the sum of arr","code":"function isPossible ( target ) {"}
{"text":"Store the maximum element","code":"var max = 0 ;"}
{"text":"Store the index of the maximum element","code":"var index = 0 ;"}
{"text":"Traverse the array target","code":"for ( i = 0 ; i < target . length ; i ++ ) {"}
{"text":"If current element is greater than max","code":"if ( max < target [ i ] ) { max = target [ i ] ; index = i ; } }"}
{"text":"If max element is 1","code":"if ( max == 1 ) return true ;"}
{"text":"Traverse the array , target","code":"for ( i = 0 ; i < target . length ; i ++ ) {"}
{"text":"If current index is not equal to maximum element index","code":"if ( i != index ) {"}
{"text":"Update max","code":"max -= target [ i ] ;"}
{"text":"If max is less than or equal to 0 ,","code":"if ( max <= 0 ) return false ; } }"}
{"text":"Update the maximum element","code":"target [ index ] = max ;"}
{"text":"Recursively call the function","code":"return isPossible ( target ) ; }"}
{"text":"Driver Code","code":"var target = [ 9 , 3 , 5 ] ; res = isPossible ( target ) ; if ( res ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function returns nCr i . e . Binomial Coefficient","code":"function nCr ( n , r ) {"}
{"text":"Initialize res with 1","code":"let res = 1 ;"}
{"text":"Since C ( n , r ) = C ( n , n - r )","code":"if ( r > n - r ) r = n - r ;"}
{"text":"Evaluating expression","code":"for ( let i = 0 ; i < r ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; }"}
{"text":"Driver code","code":"let n = 3 , m = 2 , k = 2 ; document . write ( nCr ( n + m , k ) ) ;"}
{"text":"Function to check if N can be obtained or not","code":"function Is_possible ( N ) { let C = 0 ; let D = 0 ;"}
{"text":"Count and remove trailing zeroes","code":"while ( N % 10 == 0 ) { N = N \/ 10 ; C += 1 ; }"}
{"text":"Check if remaining N is a power of 2","code":"if ( Math . pow ( 2 , ( Math . log ( N ) \/ ( Math . log ( 2 ) ) ) ) == N ) { D = ( Math . log ( N ) \/ ( Math . log ( 2 ) ) ) ;"}
{"text":"To check the condition to prlong YES or NO","code":"if ( C >= D ) document . write ( \" \" ) ; else document . write ( \" \" ) ; } else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"let N = 2000000000000 ; Is_possible ( N ) ;"}
{"text":"Function to find N - th term in the series","code":"function findNthTerm ( n ) { document . write ( n * n - n + 1 ) ; }"}
{"text":"Driver code","code":"N = 4 ; findNthTerm ( N ) ;"}
{"text":"Iterative function to reverse digits of num","code":"function rev ( num ) { var rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = Math . floor ( num \/ 10 ) ; }"}
{"text":"Return the reversed num","code":"return rev_num ; }"}
{"text":"Function to calculate sum of reverse all proper divisors","code":"function divSum ( num ) {"}
{"text":"Final result of summation of divisors","code":"var result = 0 ;"}
{"text":"Find all divisors of num","code":"for ( var i = 2 ; i <= Math . floor ( Math . sqrt ( num ) ) ; i ++ ) {"}
{"text":"If ' i ' is divisor of ' num '","code":"if ( num % i == 0 ) {"}
{"text":"If both divisors are same then add it only once else add both","code":"if ( i == ( num \/ i ) ) result += rev ( i ) ; else result += ( rev ( i ) + rev ( num \/ i ) ) ; } }"}
{"text":"Add 1 to the result as 1 is also a divisor","code":"result += 1 ; return result ; }"}
{"text":"Function to check if N is anti - perfect or not","code":"function isAntiPerfect ( n ) { return divSum ( n ) == n ; }"}
{"text":"Given Number N","code":"var N = 244 ;"}
{"text":"Function Call","code":"if ( isAntiPerfect ( N ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to print the series","code":"function printSeries ( n , a , b , c ) { let d ;"}
{"text":"Generate the ith term and print it","code":"if ( n == 1 ) { document . write ( a + \" \" ) ; return ; } if ( n == 2 ) { document . write ( a + \" \" + b + \" \" ) ; return ; } document . write ( a + \" \" + b + \" \" + c + \" \" ) ; for ( let i = 4 ; i <= n ; i ++ ) { d = a + b + c ; document . write ( d + \" \" ) ; a = b ; b = c ; c = d ; } }"}
{"text":"Driver Code","code":"let N = 7 , a = 1 , b = 3 ; let c = 4 ;"}
{"text":"Function Call","code":"printSeries ( N , a , b , c ) ;"}
{"text":"Function to find diameter of BIT with N + 1 nodes","code":"function diameter ( n ) {"}
{"text":"L is size of subtree just before subtree in which N lies","code":"var L , H , templen ; L = 1 ;"}
{"text":"H is the height of subtree just before subtree in which N lies","code":"H = 0 ;"}
{"text":"Base Cases","code":"if ( n == 1 ) { return 1 ; } if ( n == 2 ) { return 2 ; } if ( n == 3 ) { return 3 ; }"}
{"text":"Size of subtree are power of 2","code":"while ( L * 2 <= n ) { L *= 2 ; H ++ ; }"}
{"text":"3 Cases as explained in Approach","code":"if ( n >= L * 2 - 1 ) return 2 * H + 1 ; else if ( n >= L + ( L \/ 2 ) - 1 ) return 2 * H ; return 2 * H - 1 ; }"}
{"text":"Driver Code","code":"var n = 15 ; document . write ( diameter ( n ) ) ;"}
{"text":"Function to find whether a ^ b is greater or c ^ d","code":"function compareValues ( a , b , c , d ) {"}
{"text":"Find b * log ( a )","code":"let log1 = Math . log ( a ) \/ Math . log ( 10 ) ; let num1 = log1 * b ;"}
{"text":"Find d * log ( c )","code":"let log2 = Math . log ( c ) \/ Math . log ( 10 ) ; let num2 = log2 * d ;"}
{"text":"Compare both values","code":"if ( num1 > num2 ) document . write ( a + \" \" + b ) ; else document . write ( c + \" \" + d ) ; }"}
{"text":"Driver code","code":"let a = 8 , b = 29 , c = 60 , d = 59 ; compareValues ( a , b , c , d ) ;"}
{"text":"Javascript program for above approach","code":"const MAX = 100005 ;"}
{"text":"Find all prime numbers","code":"function addPrimes ( ) { let n = MAX ; let prime = new Array ( n + 1 ) . fill ( true ) ; for ( let p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( let i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } let ans = [ ] ;"}
{"text":"Store all prime numbers","code":"for ( let p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) ans . push ( p ) ; return ans ; }"}
{"text":"Function to check if a digit is odd prime or not","code":"function is_prime ( n ) { return ( n == 3 n == 5 n == 7 ) ; }"}
{"text":"Function to find sum","code":"function find_Sum ( n ) {"}
{"text":"To store required answer","code":"let sum = 0 ;"}
{"text":"Get all prime numbers","code":"let v = addPrimes ( ) ;"}
{"text":"Traverse through all the prime numbers","code":"for ( let i = 0 ; i < v . length && n > 0 ; i ++ ) {"}
{"text":"Flag stores 1 if a number does not contain any odd primes","code":"let flag = 1 ; let a = v [ i ] ;"}
{"text":"Find all digits of a number","code":"while ( a != 0 ) { let d = a % 10 ; a = parseInt ( a \/ 10 ) ; if ( is_prime ( d ) ) { flag = 0 ; break ; } }"}
{"text":"If number does not contain any odd primes","code":"if ( flag == 1 ) { n -- ; sum = sum + v [ i ] ; } }"}
{"text":"Return the required answer","code":"return sum ; }"}
{"text":"Driver code","code":"let n = 7 ;"}
{"text":"Function call","code":"document . write ( find_Sum ( n ) ) ;"}
{"text":"Function to return the count of primes in the given array","code":"function primeCount ( arr , n ) {"}
{"text":"Find maximum value in the array","code":"let max_val = Math . max ( ... arr ) ;"}
{"text":"USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array \" prime [ 0 . . n ] \" . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"let prime = new Array ( max_val + 1 ) . fill ( true ) ;"}
{"text":"Remaining part of SIEVE","code":"prime [ 0 ] = false ; prime [ 1 ] = false ; for ( let p = 2 ; p * p <= max_val ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( let i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } }"}
{"text":"Find all primes in arr [ ]","code":"let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) if ( prime [ arr [ i ] ] ) count ++ ; return count ; }"}
{"text":"Function to generate the prefix array","code":"function getPrefixArray ( arr , n , pre ) {"}
{"text":"Fill the prefix array","code":"pre [ 0 ] = arr [ 0 ] ; for ( let i = 1 ; i < n ; i ++ ) { pre [ i ] = pre [ i - 1 ] + arr [ i ] ; } }"}
{"text":"Driver code","code":"let arr = [ 1 , 4 , 8 , 4 ] ; let n = arr . length ;"}
{"text":"Prefix array of arr [ ]","code":"let pre = new Array ( n ) ; getPrefixArray ( arr , n , pre ) ;"}
{"text":"Count of primes in the prefix array","code":"document . write ( primeCount ( pre , n ) ) ;"}
{"text":"Function to return the required value that must be added to x so that it is at least y percent of n","code":"function minValue ( n , x , y ) {"}
{"text":"Required value","code":"let val = ( y * n ) \/ 100 ;"}
{"text":"If x is already >= y percent of n","code":"if ( x >= val ) return 0 ; else return ( Math . ceil ( val ) - x ) ; }"}
{"text":"Driver code","code":"let n = 10 , x = 2 , y = 40 ; document . write ( minValue ( n , x , y ) ) ;"}
{"text":"Utility function to check if a number is prime or not","code":"function isPrime ( n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function that returns true if n is a factorial prime","code":"function isFactorialPrime ( n ) {"}
{"text":"If n is not prime then return false","code":"if ( ! isPrime ( n ) ) return false ; let fact = 1 ; let i = 1 ; while ( fact <= n + 1 ) {"}
{"text":"Calculate factorial","code":"fact = fact * i ;"}
{"text":"If n is a factorial prime","code":"if ( n + 1 == fact n - 1 == fact ) return true ; i ++ ; }"}
{"text":"n is not a factorial prime","code":"return false ; }"}
{"text":"Driver code","code":"let n = 23 ; if ( isFactorialPrime ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Driver Code","code":"public static void Main ( ) {"}
{"text":"Get n","code":"let n = 5 ;"}
{"text":"find fac1 = ( n - 1 ) !","code":"let fac1 = 1 ; for ( let i = 2 ; i <= n - 1 ; i ++ ) fac1 = fac1 * i ;"}
{"text":"Find fac2 = n !","code":"fac2 = fac1 * n ;"}
{"text":"Find total number of ways","code":"totalWays = fac1 * fac2 ;"}
{"text":"Print the total number of ways","code":"document . write ( totalWays + \" \" ) ;"}
{"text":"Javascript program to check Euclid Number","code":"var MAX = 10000 ; var arr = [ ] ;"}
{"text":"Function to generate prime numbers","code":"function SieveOfEratosthenes ( ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"var prime = Array ( MAX ) . fill ( true ) ; ; for ( var p = 2 ; p * p < MAX ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( var i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } }"}
{"text":"store all prime numbers to vector ' arr '","code":"for ( var p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr . push ( p ) ; }"}
{"text":"Function to check the number for Euclid Number","code":"function isEuclid ( n ) { var product = 1 ; var i = 0 ; while ( product < n ) {"}
{"text":"Multiply next prime number and check if product + 1 = n holds or not","code":"product = product * arr [ i ] ; if ( product + 1 == n ) return true ; i ++ ; } return false ; }"}
{"text":"Get the prime numbers","code":"SieveOfEratosthenes ( ) ;"}
{"text":"Get n","code":"var n = 31 ;"}
{"text":"Check if n is Euclid Number","code":"if ( isEuclid ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Get n","code":"n = 42 ;"}
{"text":"Check if n is Euclid Number","code":"if ( isEuclid ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to find the next perfect cube","code":"function nextPerfectCube ( N ) { let nextN = Math . floor ( Math . cbrt ( N ) ) + 1 ; return nextN * nextN * nextN ; }"}
{"text":"Driver Code","code":"let n = 35 ; document . write ( nextPerfectCube ( n ) ) ;"}
{"text":"Function to check if the number is prime or not .","code":"function isPrime ( n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"function to find sum of prime divisors of N","code":"function SumOfPrimeDivisors ( n ) { let sum = 0 ;"}
{"text":"return type of sqrt function if float","code":"let root_n = parseInt ( Math . sqrt ( n ) , 10 ) ; for ( let i = 1 ; i <= root_n ; i ++ ) { if ( n % i == 0 ) {"}
{"text":"both factors are same","code":"if ( i == parseInt ( n \/ i , 10 ) && isPrime ( i ) ) { sum += i ; } else {"}
{"text":"both factors are not same ( i and n \/ i )","code":"if ( isPrime ( i ) ) { sum += i ; } if ( isPrime ( parseInt ( n \/ i , 10 ) ) ) { sum += ( parseInt ( n \/ i , 10 ) ) ; } } } } return sum ; }"}
{"text":"Driver code","code":"let n = 60 ; document . write ( \" \" + SumOfPrimeDivisors ( n ) + \" \" ) ;"}
{"text":"Javascript Program position of n among the numbers made of 2 , 3 , 5 & 7","code":"function findpos ( n ) { var pos = 0 ; for ( i = 0 ; i < n . length ; i ++ ) { switch ( n . charAt ( i ) ) {"}
{"text":"If number is 2 then it is on the position pos * 2 + 1","code":"case ' ' : pos = pos * 4 + 1 ; break ;"}
{"text":"If number is 3 then it is on the position pos * 2 + 2","code":"case ' ' : pos = pos * 4 + 2 ; break ;"}
{"text":"If number is 5 then it is on the position pos * 2 + 3","code":"case ' ' : pos = pos * 4 + 3 ; break ;"}
{"text":"If number is 7 then it is on the position pos * 2 + 4","code":"case ' ' : pos = pos * 4 + 4 ; break ; } } return pos ; }"}
{"text":"Driver code","code":"var n = \" \" ; document . write ( findpos ( n ) ) ;"}
{"text":"Checks if any possible triplet ( a , b , c ) satisfying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt","code":"function possibleTripletInRange ( L , R ) { let flag = false ; let possibleA , possibleB , possibleC ; let numbersInRange = ( R - L + 1 ) ;"}
{"text":"Case 1 : Less than 3 numbers between L and R","code":"if ( numbersInRange < 3 ) { flag = false ; }"}
{"text":"Case 2 : More than 3 numbers between L and R","code":"else if ( numbersInRange > 3 ) { flag = true ;"}
{"text":"triplets should always be of form ( 2 k , 2 k + 1 , 2 k + 2 )","code":"if ( L % 2 ) { L ++ ; } possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else {"}
{"text":"Case 3.1 : Exactly 3 numbers in range of form ( 2 k , 2 k + 1 , 2 k + 2 )","code":"if ( ! ( L % 2 ) ) { flag = true ; possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else {"}
{"text":"Case 3.2 : Exactly 3 numbers in range of form ( 2 k - 1 , 2 k , 2 k + 1 )","code":"flag = false ; } }"}
{"text":"flag = True indicates that a pair exists between L and R","code":"if ( flag == true ) { document . write ( \" \" + possibleA + \" \" + possibleB + \" \" + possibleC + \" \" + \" \" + L + \" \" + R + \" \" ) ; } else { document . write ( \" \" + L + \" \" + R + \" \" ) ; } }"}
{"text":"Driver code","code":"let L , R ;"}
{"text":"finding possible Triplet between 2 and 10","code":"L = 2 ; R = 10 ; possibleTripletInRange ( L , R ) ;"}
{"text":"finding possible Triplet between 23 and 46","code":"L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ;"}
{"text":"JavaScript Implementation of above method","code":"const mod = 1000000007 ;"}
{"text":"Finding number of possible number with n digits excluding a particular digit","code":"function digitNumber ( n ) {"}
{"text":"Checking if number of digits is zero","code":"if ( n == 0 ) return 1 ;"}
{"text":"Checking if number of digits is one","code":"if ( n == 1 ) return 9 ;"}
{"text":"Checking if number of digits is odd","code":"if ( n % 2 ) {"}
{"text":"Calling digitNumber function with ( digit - 1 ) \/ 2 digits","code":"let temp = digitNumber ( ( n - 1 ) \/ 2 ) % mod ; return ( 9 * ( temp * temp ) % mod ) % mod ; } else {"}
{"text":"Calling digitNumber function with n \/ 2 digits","code":"let temp = digitNumber ( n \/ 2 ) % mod ; return ( temp * temp ) % mod ; } } function countExcluding ( n , d ) {"}
{"text":"Calling digitNumber function Checking if excluding digit is zero or non - zero","code":"if ( d == 0 ) return ( 9 * digitNumber ( n - 1 ) ) % mod ; else return ( 8 * digitNumber ( n - 1 ) ) % mod ; }"}
{"text":"Initializing variables","code":"let d = 9 ; let n = 3 ; document . write ( countExcluding ( n , d ) + \" \" ) ;"}
{"text":"Returns true if n is prime . Else false .","code":"function isPrime ( n ) {"}
{"text":"Corner case","code":"if ( n <= 1 ) return false ;"}
{"text":"Check from 2 to n - 1","code":"for ( i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }"}
{"text":"Function will check whether number is Emirp or not","code":"function isEmirp ( n ) {"}
{"text":"Check if n is prime","code":"if ( isPrime ( n ) == false ) return false ;"}
{"text":"Find reverse of n","code":"var rev = 0 ; while ( n != 0 ) { var d = n % 10 ; rev = rev * 10 + d ; n = parseInt ( n \/ 10 ) ; }"}
{"text":"If both Original and Reverse are Prime , then it is an Emirp number","code":"return isPrime ( rev ) ; }"}
{"text":"Input number","code":"var n = 13 ; if ( isEmirp ( n ) == true ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function for convertion","code":"function Convert ( radian ) { let pi = 3.14159 ; return ( radian * ( 180 \/ pi ) ) ; }"}
{"text":"Driver Code","code":"let radian = 5.0 ; let degree = Convert ( radian ) ; document . write ( degree ) ;"}
{"text":"Return sum of first n integers of an AP","code":"function sn ( n , an ) { return ( n * ( 1 + an ) ) \/ 2 ; }"}
{"text":"Return the trace of sum of row - major matrix and column - major matrix","code":"function trace ( n , m ) {"}
{"text":"Finding nth element in AP in case of Row major matrix .","code":"let an = 1 + ( n - 1 ) * ( m + 1 ) ;"}
{"text":"Finding sum of first n integers of AP in case of Row major matrix","code":"let rowmajorSum = sn ( n , an ) ;"}
{"text":"Finding nth element in AP in case of Row major matrix","code":"an = 1 + ( n - 1 ) * ( n + 1 ) ;"}
{"text":"Finding sum of first n integers of AP in case of Column major matrix","code":"let colmajorSum = sn ( n , an ) ; return rowmajorSum + colmajorSum ; }"}
{"text":"Driven Program","code":"let N = 3 , M = 3 ; document . write ( trace ( N , M ) ) ;"}
{"text":"Utility Function","code":"function max_area ( n , m , k ) { if ( k > ( n + m - 2 ) ) document . write ( \" \" ) ; else { let result ;"}
{"text":"For the 1 st case","code":"if ( k < Math . max ( m , n ) - 1 ) { result = Math . max ( m * ( n \/ ( k + 1 ) ) , n * ( m \/ ( k + 1 ) ) ) ; }"}
{"text":"For the second case","code":"else { result = Math . max ( m \/ ( k - n + 2 ) , n \/ ( k - m + 2 ) ) ; }"}
{"text":"Print final result","code":"document . write ( result ) ; } }"}
{"text":"Driver Code","code":"let n = 3 , m = 4 , k = 1 ; max_area ( n , m , k ) ;"}
{"text":"function to find the area","code":"function area_fun ( side ) { let area = side * side ; return area ; }"}
{"text":"Driver program","code":"let side = 4 ; let area = area_fun ( side ) ; document . write ( area ) ;"}
{"text":"Utility method to compute number of ways in which N can be represented as sum of consecutive number","code":"function countConsecutive ( N ) {"}
{"text":"constraint on values of L gives us the time Complexity as O ( N ^ 0.5 )","code":"let count = 0 ; for ( let L = 1 ; L * ( L + 1 ) < 2 * N ; L ++ ) { let a = ( ( 1.0 * N - ( L * ( L + 1 ) ) \/ 2 ) \/ ( L + 1 ) ) ; if ( a - parseInt ( a , 10 ) == 0.0 ) count ++ ; } return count ; }"}
{"text":"Driver code","code":"let N = 15 ; document . write ( countConsecutive ( N ) + \" \" ) ; N = 10 ; document . write ( countConsecutive ( N ) ) ;"}
{"text":"Function to check Automorphic number","code":"function isAutomorphic ( N ) {"}
{"text":"Store the square","code":"let sq = N * N ;"}
{"text":"Start Comparing digits","code":"while ( N > 0 ) {"}
{"text":"Return false , if any digit of N doesn ' t \u2581 \u2581 match \u2581 with \u2581 its \u2581 square ' s digits from last","code":"if ( N % 10 != sq % 10 ) return - 1 ;"}
{"text":"Reduce N and square","code":"N \/= 10 ; sq \/= 10 ; } return 1 ; }"}
{"text":"Driver code","code":"let N = 5 ; let geeks = isAutomorphic ( N ) ? \" \" : \" \" ; document . write ( geeks ) ;"}
{"text":"Return smallest number having maximum prime factors .","code":"function maxPrimefactorNum ( N ) {"}
{"text":"default value of boolean is false","code":"let arr = new Array ( N + 5 ) ; arr . fill ( false ) ; let i ;"}
{"text":"Sieve of eratosthenes","code":"for ( i = 3 ; i * i <= N ; i += 2 ) { if ( ! arr [ i ] ) { for ( let j = i * i ; j <= N ; j += i ) { arr [ j ] = true ; } } }"}
{"text":"Storing prime numbers .","code":"let prime = [ ] ; prime . push ( 2 ) ; for ( i = 3 ; i <= N ; i += 2 ) { if ( ! arr [ i ] ) { prime . push ( i ) ; } }"}
{"text":"Generating number having maximum prime factors .","code":"let ans = 1 ; i = 0 ; while ( ans * prime [ i ] <= N && i < prime . length ) { ans *= prime [ i ] ; i ++ ; } return ans ; }"}
{"text":"Driver code","code":"let N = 40 ; document . write ( maxPrimefactorNum ( N ) ) ;"}
{"text":"Javascript program to find highest power of 2 smaller than or equal to n .","code":"function highestPowerof2 ( x ) {"}
{"text":"check for the set bits","code":"x |= x >> 1 ; x |= x >> 2 ; x |= x >> 4 ; x |= x >> 8 ; x |= x >> 16 ;"}
{"text":"Then we remove all but the top bit by xor ' ing \u2581 the \u2581 \u2581 string \u2581 of \u2581 1' s with that string of 1 ' s \u2581 shifted \u2581 one \u2581 to \u2581 \u2581 the \u2581 left , \u2581 and \u2581 we \u2581 end \u2581 up \u2581 with \u2581 just \u2581 the \u2581 one \u2581 top \u2581 bit \u2581 \u2581 followed \u2581 by \u2581 0' s .","code":"return x ^ ( x >> 1 ) ; }"}
{"text":"Driver code","code":"let n = 10 ; document . write ( highestPowerof2 ( n ) )"}
{"text":"Function to calculate sum of all proper divisors num -- > given natural number","code":"function divSum ( num ) {"}
{"text":"Final result of summation of divisors","code":"let result = 0 ;"}
{"text":"find all divisors which divides ' num '","code":"for ( let i = 2 ; i <= Math . sqrt ( num ) ; i ++ ) {"}
{"text":"if ' i ' is divisor of ' num '","code":"if ( num % i == 0 ) {"}
{"text":"if both divisors are same then add it only once else add both","code":"if ( i == ( num \/ i ) ) result += i ; else result += ( i + num \/ i ) ; } }"}
{"text":"Add 1 to the result as 1 is also a divisor","code":"return ( result + 1 ) ; }"}
{"text":"Driver program to run the case","code":"let num = 36 ; document . write ( divSum ( num ) ) ;"}
{"text":"Utility function to do modular exponentiation . It returns ( x ^ y ) % p .","code":"function power ( x , y , p ) {"}
{"text":"let res = 1 ; Initialize result x = x % p ; Update x if it is more than or equal to p","code":"while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y % 2 == 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y >> 1 ; y = y \/ 2","code":"x = ( x * x ) % p ; } return res ; }"}
{"text":"Returns true if square root of n under modulo p exists Assumption : p is of the form 3 * i + 4 where i >= 1","code":"function squareRoot ( n , p ) { if ( p % 4 != 3 ) { document . write ( \" \" ) ; return ; }"}
{"text":"Try \" + ( n ^ ( ( p \u2581 + \u2581 1 ) \/ 4 ) ) \"","code":"n = n % p ; let x = power ( n , Math . floor ( ( p + 1 ) \/ 4 ) , p ) ; if ( ( x * x ) % p == n ) { document . write ( \" \" + x ) ; return ; }"}
{"text":"Try \" - ( n \u2581 ^ \u2581 ( ( p \u2581 + \u2581 1 ) \/ 4 ) ) \"","code":"x = p - x ; if ( ( x * x ) % p == n ) { document . write ( \" \" + x ) ; return ; }"}
{"text":"If none of the above two work , then square root doesn 't exist","code":"document . write ( \" \" ) ; }"}
{"text":"Driver program to test","code":"let p = 7 ; let n = 2 ; squareRoot ( n , p ) ;"}
{"text":"Utility function to do modular exponentiation . It returns ( x ^ y ) % p","code":"function power ( x , y , p ) {"}
{"text":"Initialize result","code":"let res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y & 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y >> 1 ; y = y \/ 2","code":"x = ( x * x ) % p ; } return res ; }"}
{"text":"This function is called for all k trials . It returns false if n is composite and returns false if n is probably prime . d is an odd number such that d * 2 < sup > r < \/ sup > = n - 1 for some r >= 1","code":"function miillerTest ( d , n ) {"}
{"text":"Pick a random number in [ 2. . n - 2 ] Corner cases make sure that n > 4","code":"let a = 2 + Math . floor ( Math . random ( ) * ( n - 2 ) ) % ( n - 4 ) ;"}
{"text":"Compute a ^ d % n","code":"let x = power ( a , d , n ) ; if ( x == 1 x == n - 1 ) return true ;"}
{"text":"Keep squaring x while one of the following doesn 't  happen  (i) d does not reach n-1  (ii) (x^2) % n is not 1  (iii) (x^2) % n is not n-1","code":"while ( d != n - 1 ) { x = ( x * x ) % n ; d *= 2 ; if ( x == 1 ) return false ; if ( x == n - 1 ) return true ; }"}
{"text":"Return composite","code":"return false ; }"}
{"text":"It returns false if n is composite and returns true if n is probably prime . k is an input parameter that determines accuracy level . Higher value of k indicates more accuracy .","code":"function isPrime ( n , k ) {"}
{"text":"Corner cases","code":"if ( n <= 1 n == 4 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"Find r such that n = 2 ^ d * r + 1 for some r >= 1","code":"let d = n - 1 ; while ( d % 2 == 0 ) d \/= 2 ;"}
{"text":"Iterate given nber of ' k ' times","code":"for ( let i = 0 ; i < k ; i ++ ) if ( ! miillerTest ( d , n ) ) return false ; return true ; }"}
{"text":"Driver Code Number of iterations","code":"let k = 4 ; document . write ( \" \" ) ; for ( let n = 1 ; n < 100 ; n ++ ) if ( isPrime ( n , k ) ) document . write ( n , \" \" ) ;"}
{"text":"Function to find length of the longest consecutive 1 s in binary representation of a number","code":"function maxConsecutiveOnes ( x ) {"}
{"text":"Initialize result","code":"let count = 0 ;"}
{"text":"Count the number of iterations to reach x = 0.","code":"while ( x != 0 ) {"}
{"text":"This operation reduces length of every sequence of 1 s by one .","code":"x = ( x & ( x << 1 ) ) ; count ++ ; } return count ; }"}
{"text":"Driver code","code":"document . write ( maxConsecutiveOnes ( 14 ) + \" \" ) ; document . write ( maxConsecutiveOnes ( 222 ) ) ;"}
{"text":"JavaScript program to Subtract two numbers without using arithmetic operators","code":"function subtract ( x , y ) {"}
{"text":"Iterate till there is no carry","code":"while ( y != 0 ) {"}
{"text":"borrow contains common set bits of y and unset bits of x","code":"let borrow = ( ~ x ) & y ;"}
{"text":"Subtraction of bits of x and y where at least one of the bits is not set","code":"x = x ^ y ;"}
{"text":"Borrow is shifted by one so that subtracting it from x gives the required sum","code":"y = borrow << 1 ; } return x ; }"}
{"text":"Driver Code","code":"let x = 29 , y = 13 ; document . write ( \" \" + subtract ( x , y ) ) ;"}
{"text":"javascript Program to subtract two Number without using arithmetic operator Recursive implementation .","code":"function subtract ( x , y ) { if ( y == 0 ) return x ; return subtract ( x ^ y , ( ~ x & y ) << 1 ) ; }"}
{"text":"Driver program","code":"var x = 29 , y = 13 ; document . write ( \" \" + subtract ( x , y ) ) ;"}
{"text":"Function to add an edge in the tree","code":"function addEdge ( v , x , y ) { v [ x ] . push ( y ) ; v [ y ] . push ( x ) ; }"}
{"text":"DFS to find the Kth ancestor of every node","code":"function dfs ( tree , temp , ancestor , u , parent , k ) {"}
{"text":"Pushing current node in the vector","code":"temp . push ( u ) ;"}
{"text":"Traverse its neighbors","code":"for ( let i = 0 ; i < tree [ u ] . length ; i ++ ) { if ( tree [ u ] [ i ] == parent ) continue ; dfs ( tree , temp , ancestor , tree [ u ] [ i ] , u , k ) ; } temp . pop ( ) ;"}
{"text":"If K ancestors are not found for current node","code":"if ( temp . length < k ) { ancestor [ u ] = - 1 ; } else {"}
{"text":"Add the Kth ancestor for the node","code":"ancestor [ u ] = temp [ temp . length - k ] ; } }"}
{"text":"Function to find Kth ancestor of each node","code":"function KthAncestor ( N , K , E , edges ) {"}
{"text":"Building the tree","code":"let tree = new Array ( N + 1 ) ; for ( let i = 0 ; i < tree . length ; i ++ ) tree [ i ] = [ ] ; for ( let i = 0 ; i < E ; i ++ ) { addEdge ( tree , edges [ i ] [ 0 ] , edges [ i ] [ 1 ] ) ; }"}
{"text":"Stores all parents of a node","code":"let temp = [ ] ;"}
{"text":"Store Kth ancestor of all nodes","code":"let ancestor = new Array ( N + 1 ) ; dfs ( tree , temp , ancestor , 1 , 0 , K ) ;"}
{"text":"Print the ancestors","code":"for ( let i = 1 ; i <= N ; i ++ ) { document . write ( ancestor [ i ] + \" \" ) ; } }"}
{"text":"Given N and K","code":"let N = 9 ; let K = 2 ;"}
{"text":"Given edges of n - ary tree","code":"let E = 8 ; let edges = [ [ 1 , 2 ] , [ 1 , 3 ] , [ 2 , 4 ] , [ 2 , 5 ] , [ 2 , 6 ] , [ 3 , 7 ] , [ 3 , 8 ] , [ 3 , 9 ] ] ;"}
{"text":"Function call","code":"KthAncestor ( N , K , E , edges ) ;"}
{"text":"Function to build a segment tree","code":"function build ( sum , a , l , r , rt ) {"}
{"text":"Check for base case","code":"if ( l == r ) { sum [ rt ] = a [ l - 1 ] ; return ; }"}
{"text":"Find mid point","code":"let m = ( l + r ) >> 1 ;"}
{"text":"Recursively build the segment tree","code":"build ( sum , a , l , m , rt << 1 ) ; build ( sum , a , m + 1 , r , rt << 1 1 ) ; }"}
{"text":"Function for push down operation on the segment tree","code":"function pushDown ( sum , add , rt , ln , rn ) { if ( add [ rt ] != 0 ) { add [ rt << 1 ] = add [ rt ] ; add [ rt << 1 1 ] = add [ rt ] ; sum [ rt << 1 ] = sum [ rt << 1 ] + add [ rt ] * ln ; sum [ rt << 1 1 ] = sum [ rt << 1 1 ] + add [ rt ] * rn ; add [ rt ] = 0 ; } }"}
{"text":"Function to update the segment tree","code":"function update ( sum , add , L , R , C , l , r , rt ) {"}
{"text":"Complete overlap","code":"if ( L <= l && r <= R ) { sum [ rt ] = sum [ rt ] + C * ( r - l + 1 ) ; add [ rt ] = add [ rt ] + C ; return ; }"}
{"text":"Find mid","code":"let m = ( l + r ) >> 1 ;"}
{"text":"Perform push down operation on segment tree","code":"pushDown ( sum , add , rt , m - l + 1 , r - m ) ;"}
{"text":"Recursively update the segment tree","code":"if ( L <= m ) { update ( sum , add , L , R , C , l , m , rt << 1 ) ; } if ( R > m ) { update ( sum , add , L , R , C , m + 1 , r , rt << 1 1 ) ; } }"}
{"text":"Function to process the query","code":"function query ( sum , add , L , R , l , r , rt ) {"}
{"text":"Base case","code":"if ( L <= l && r <= R ) { return sum [ rt ] ; }"}
{"text":"Find mid","code":"let m = ( l + r ) >> 1 ;"}
{"text":"Perform push down operation on segment tree","code":"pushDown ( sum , add , rt , m - l + 1 , r - m ) ; let ans = 0 ;"}
{"text":"Recursively calculate the result of the query","code":"if ( L <= m ) { ans += query ( sum , add , L , R , l , m , rt << 1 ) ; } if ( R > m ) { ans += query ( sum , add , L , R , m + 1 , r , rt << 1 1 ) ; }"}
{"text":"Return the result","code":"return ans ; }"}
{"text":"Function to count the numbers which are greater than the given query","code":"function sequenceMaintenance ( n , q , a , b , m ) {"}
{"text":"Sort the input array","code":"a . sort ( function ( a , b ) { return a - b ; } ) ;"}
{"text":"Create segment tree of size 4 * n","code":"let sum = [ ] ; let ad = [ ] ; let ans = [ ] ; for ( let i = 0 ; i < ( n << 2 ) ; i ++ ) { sum . push ( 0 ) ; ad . push ( 0 ) ; }"}
{"text":"Build the segment tree","code":"build ( sum , a , 1 , n , 1 ) ;"}
{"text":"Iterate over the queries","code":"for ( let i = 0 ; i < q ; i ++ ) { let l = 1 , r = n , pos = - 1 ; while ( l <= r ) { m = ( l + r ) >> 1 ; if ( query ( sum , ad , m , m , 1 , n , 1 ) >= b [ i ] ) { r = m - 1 ; pos = m ; } else { l = m + 1 ; } } if ( pos == - 1 ) { ans . push ( 0 ) ; } else {"}
{"text":"Store result in array","code":"ans . push ( n - pos + 1 ) ;"}
{"text":"Update the elements in the given range","code":"update ( sum , ad , pos , n , - m , 1 , n , 1 ) ; } }"}
{"text":"Print the result of queries","code":"for ( let i = 0 ; i < ans . length ; i ++ ) { document . write ( ans [ i ] + \" \" ) ; } }"}
{"text":"Driver Code","code":"let N = 4 ; let Q = 3 ; let M = 1 ; let arr = [ 1 , 2 , 3 , 4 ] ; let Query = [ 4 , 3 , 1 ] ;"}
{"text":"Function call","code":"sequenceMaintenance ( N , Q , arr , Query , M ) ;"}
{"text":"Recursive function to return gcd of a and b","code":"function __gcd ( a , b ) { return b == 0 ? a : __gcd ( b , a % b ) ; }"}
{"text":"Function to find the final array length by replacing coprime pair with 1","code":"function hasCoprimePair ( arr , n ) {"}
{"text":"Iterate over all pairs of element","code":"for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) {"}
{"text":"Check if gcd is 1","code":"if ( ( __gcd ( arr [ i ] , arr [ j ] ) ) == 1 ) { return true ; } } }"}
{"text":"If no coprime pair found return false","code":"return false ; }"}
{"text":"Driver code","code":"var n = 3 ; var arr = [ 6 , 9 , 15 ] ;"}
{"text":"Check if atleast one coprime pair exists in the array","code":"if ( hasCoprimePair ( arr , n ) ) { document . write ( 1 + \" \" ) ; }"}
{"text":"If no such pair exists","code":"else { document . write ( n + \" \" ) ; }"}
{"text":"Function to return the required number of ways","code":"function Numberofways ( n ) { var count = 0 ; for ( var a = 1 ; a < n ; a ++ ) { for ( var b = 1 ; b < n ; b ++ ) { var c = n - ( a + b ) ;"}
{"text":"Check if a , b and c can form a triangle","code":"if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } }"}
{"text":"Return number of ways","code":"return count ; }"}
{"text":"Driver Code","code":"var n = 15 ; document . write ( Numberofways ( n ) ) ;"}
{"text":"Function to print the count of pair","code":"function countPairs ( N , arr ) { let count = 0 ;"}
{"text":"Iterate over all the elements of the array","code":"for ( let i = 0 ; i < N ; i ++ ) { if ( i == arr [ arr [ i ] - 1 ] - 1 ) {"}
{"text":"Increment the count","code":"count ++ ; } }"}
{"text":"Print the result","code":"document . write ( count \/ 2 ) ; } let arr = [ 2 , 1 , 4 , 3 ] ; let N = arr . length ; countPairs ( N , arr ) ;"}
{"text":"Driver Code","code":"let arr = [ 2 , 1 , 4 , 3 ] ; let N = arr . length ; countPairs ( N , arr ) ;"}
{"text":"Function to return the max Length of Fibonacci subsequence","code":"function LongestFibSubseq ( A , n ) {"}
{"text":"Store all array elements in a hash table","code":"var S = new Set ( A ) ; var maxLen = 0 , x , y ; for ( var i = 0 ; i < n ; ++ i ) { for ( var j = i + 1 ; j < n ; ++ j ) { x = A [ j ] ; y = A [ i ] + A [ j ] ; var length = 2 ;"}
{"text":"check until next fib element is found","code":"while ( S . has ( y ) ) {"}
{"text":"next element of fib subseq","code":"var z = x + y ; x = y ; y = z ; maxLen = Math . max ( maxLen , ++ length ) ; } } } return maxLen >= 3 ? maxLen : 0 ; }"}
{"text":"Driver program","code":"var A = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ; var n = A . length ; document . write ( LongestFibSubseq ( A , n ) ) ;"}
{"text":"Function to count maximum number of elements that can be selected","code":"function CountMaximum ( arr , n , k ) {"}
{"text":"Sorting the array","code":"arr . sort ( ) ; let sum = 0 , count = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Add the current element to the sum","code":"sum += arr [ i ] ;"}
{"text":"If sum exceeds k","code":"if ( sum > k ) break ;"}
{"text":"Increment count","code":"count ++ ; }"}
{"text":"Returning the count","code":"return count ; }"}
{"text":"Driver Code","code":"let arr = [ 30 , 30 , 10 , 10 ] ; let n = 4 ; let k = 50 ;"}
{"text":"Function call","code":"document . write ( CountMaximum ( arr , n , k ) ) ;"}
{"text":"Function to find number of candy types","code":"function num_candyTypes ( candies ) {"}
{"text":"Declare a hashset to store candies","code":"let s = new Set ( ) ;"}
{"text":"Traverse the given array and inserts element into set","code":"for ( let i = 0 ; i < candies . length ; i ++ ) { s . add ( candies [ i ] ) ; }"}
{"text":"Return the result","code":"return s . size ; }"}
{"text":"Function to find maximum number of types of candies a person can eat","code":"function distribute_candies ( candies ) {"}
{"text":"Store the number of candies allowed to eat","code":"let allowed = candies . length \/ 2 ;"}
{"text":"Store the number of candy types","code":"let types = num_candyTypes ( candies ) ;"}
{"text":"Return the result","code":"if ( types < allowed ) document . write ( types ) ; else document . write ( allowed ) ; }"}
{"text":"Given Input","code":"let candies = [ 4 , 4 , 5 , 5 , 3 , 3 ] ;"}
{"text":"Function Call","code":"distribute_candies ( candies ) ;"}
{"text":"Function to calculate the length of diagonals of a rhombus using length of sides and vertex angle","code":"function Length_Diagonals ( a , theta ) { let p = a * Math . sqrt ( 2 + ( 2 * Math . cos ( theta * ( Math . PI \/ 180 ) ) ) ) ; let q = a * Math . sqrt ( 2 - ( 2 * Math . cos ( theta * ( Math . PI \/ 180 ) ) ) ) ; return [ p , q ] ; }"}
{"text":"Driver Code","code":"let A = 6 ; let theta = 45 ; let ans = Length_Diagonals ( A , theta ) ; document . write ( ans [ 0 ] . toFixed ( 2 ) + \" \" + ans [ 1 ] . toFixed ( 2 ) ) ;"}
{"text":"Function to get no of set bits in binary representation of positive integer n","code":"function __builtin_popcount ( n ) { let count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; }"}
{"text":"Function to store EVEN and odd variable","code":"function countEvenOdd ( arr , n , K ) { let even = 0 , odd = 0 ;"}
{"text":"Store the count of even and odd set bit","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Count the set bit using in built function","code":"let x = __builtin_popcount ( arr [ i ] ) ; if ( x % 2 == 0 ) even ++ ; else odd ++ ; } let y ;"}
{"text":"Count of set - bit of K","code":"y = __builtin_popcount ( K ) ;"}
{"text":"If y is odd then , count of even and odd set bit will be interchanged","code":"if ( ( y & 1 ) != 0 ) { document . write ( \" \" + odd + \" \" + even ) ; }"}
{"text":"Else it will remain same as the original array","code":"else { document . write ( \" \" + even + \" \" + odd ) ; } }"}
{"text":"Driver 's Code","code":"let arr = [ 4 , 2 , 15 , 9 , 8 , 8 ] ; let K = 3 ; let n = arr . length ;"}
{"text":"Function call to count even and odd","code":"countEvenOdd ( arr , n , K ) ;"}
{"text":"Driver code","code":"let N = 6 ; let Even = Math . floor ( N \/ 2 ) ; let Odd = N - Even ; document . write ( Even * Odd ) ;"}
{"text":"Function to find the number of triplets whose Bitwise AND is 0.","code":"function countTriplets ( A ) {"}
{"text":"Stores the count of triplets having bitwise AND equal to 0","code":"var cnt = 0 ;"}
{"text":"Stores frequencies of all possible A [ i ] & A [ j ]","code":"var tuples = new Map ( ) ;"}
{"text":"Traverse the array","code":"A . forEach ( a => {"}
{"text":"Update frequency of Bitwise AND of all array elements with a","code":"A . forEach ( b => { if ( tuples . has ( a & b ) ) tuples . set ( a & b , tuples . get ( a & b ) + 1 ) else tuples . set ( a & b , 1 ) } ) ; } ) ;"}
{"text":"Traverse the array","code":"A . forEach ( a => {"}
{"text":"Update frequency of Bitwise AND of all array elements with a","code":"tuples . forEach ( ( value , key ) => {"}
{"text":"If bitwise AND of triplet is zero , increment cnt","code":"if ( ( key & a ) == 0 ) cnt += value ; } ) ; } ) ;"}
{"text":"Return the number of triplets whose Bitwise AND is 0.","code":"return cnt ; }"}
{"text":"Input Array","code":"var A = [ 2 , 1 , 3 ] ;"}
{"text":"Function Call","code":"document . write ( countTriplets ( A ) ) ;"}
{"text":"Bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed","code":"function CountWays ( n ) {"}
{"text":"noOfWays [ i ] will store count for value i . 3 extra values are to take care of cornser case n = 0","code":"var noOfWays = Array ( n + 3 ) . fill ( 0 ) ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 1 + 1 ;"}
{"text":"Loop till \" n + 1\" to compute value for \" n \"","code":"for ( var i = 3 ; i < n + 1 ; i ++ ) {"}
{"text":"number of ways if first run is 1 number of ways if first run is 2 and second run is 1","code":"noOfWays [ i ] = noOfWays [ i - 1 ] + noOfWays [ i - 3 ] ; } return noOfWays [ n ] ; }"}
{"text":"Driver code","code":"var n = 5 ; document . write ( CountWays ( n ) ) ;"}
{"text":"Create row and col to traverse rows and columns","code":"let row = 0 , col = 0 ; let boundary = size - 1 ; let sizeLeft = size - 1 ; let flag = 1 ;"}
{"text":"Variable to determine the movement r = right , l = left , d = down , u = upper","code":"let move = ' ' ;"}
{"text":"Array for matrix","code":"let matrix = new Array ( size ) ; for ( let i = 0 ; i < size ; i ++ ) { matrix [ i ] = new Array ( size ) . fill ( 0 ) ; } for ( let i = 1 ; i < size * size + 1 ; i ++ ) {"}
{"text":"Assign the value","code":"matrix [ row ] [ col ] = i ;"}
{"text":"switch - case to determine the next index","code":"switch ( move ) {"}
{"text":"If right , go right","code":"case ' ' : col += 1 ; break ;"}
{"text":"If left , go left","code":"case ' ' : col -= 1 ; break ;"}
{"text":"If up , go up","code":"case ' ' : row -= 1 ; break ;"}
{"text":"If down , go down","code":"case ' ' : row += 1 ; break ; }"}
{"text":"Check if the matrix has reached array boundary","code":"if ( i == boundary ) {"}
{"text":"Add the left size for the next boundary","code":"boundary += sizeLeft ;"}
{"text":"If 2 rotations has been made , decrease the size left by 1","code":"if ( flag != 2 ) { flag = 2 ; } else { flag = 1 ; sizeLeft -= 1 ; }"}
{"text":"switch - case to rotate the movement","code":"switch ( move ) {"}
{"text":"If right , rotate to down","code":"case ' ' : move = ' ' ; break ;"}
{"text":"If down , rotate to left","code":"case ' ' : move = ' ' ; break ;"}
{"text":"If left , rotate to up","code":"case ' ' : move = ' ' ; break ;"}
{"text":"If up , rotate to right","code":"case ' ' : move = ' ' ; break ; } } }"}
{"text":"Print the matrix","code":"for ( row = 0 ; row < size ; row ++ ) { for ( col = 0 ; col < size ; col ++ ) { let n = matrix [ row ] [ col ] ; if ( n < 10 ) document . write ( n + \" \" ) ; else document . write ( n + \" \" ) ; } document . write ( \" \" ) ; } }"}
{"text":"Get the size of size","code":"let size = 5 ;"}
{"text":"Print the Spiral Pattern","code":"printSpiral ( size ) ;"}
{"text":"Function to check if player A wins the game or not","code":"function findWinner ( a , n ) {"}
{"text":"Stores size of the groups of 0 s","code":"let v = [ ] ;"}
{"text":"Stores size of the group of 0 s","code":"let c = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Increment c by 1 if a [ i ] is 0","code":"if ( a [ i ] == ' ' ) { c ++ ; }"}
{"text":"Otherwise , push the size in array and reset c to 0","code":"else { if ( c != 0 ) v . push ( c ) ; c = 0 ; } } if ( c != 0 ) v . push ( c ) ;"}
{"text":"If there is no substring of odd length consisting only of 0 s","code":"if ( v . length == 0 ) { document . write ( \" \" ) ; return ; }"}
{"text":"If there is only 1 substring of odd length consisting only of 0 s","code":"if ( v . length == 1 ) { if ( ( v [ 0 ] & 1 ) != 0 ) document . write ( \" \" ) ;"}
{"text":"Otherwise","code":"else document . write ( \" \" ) ; return ; }"}
{"text":"Stores the size of the largest and second largest substrings of 0 s","code":"let first = Number . MIN_VALUE ; let second = Number . MIN_VALUE ;"}
{"text":"Traverse the array v [ ]","code":"for ( let i = 0 ; i < v . length ; i ++ ) {"}
{"text":"If current element is greater than first , then update both first and second","code":"if ( a [ i ] > first ) { second = first ; first = a [ i ] ; }"}
{"text":"If arr [ i ] is in between first and second , then update second","code":"else if ( a [ i ] > second && a [ i ] != first ) second = a [ i ] ; }"}
{"text":"If the condition is satisfied","code":"if ( ( first & 1 ) != 0 && parseInt ( ( first + 1 ) \/ 2 , 10 ) > second ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"let S = \" \" ; let N = S . length ; findWinner ( S , N ) ;"}
{"text":"function to check whether the string is K palindrome or not","code":"function can_Construct ( S , K ) {"}
{"text":"map to frequency of character","code":"var m = new Map ( ) ; var i = 0 , j = 0 , p = 0 ;"}
{"text":"Check when k is given as same as length of string","code":"if ( S . length == K ) { return true ; }"}
{"text":"storing the frequency of every character in map","code":"for ( i = 0 ; i < S . length ; i ++ ) { if ( m . has ( S [ i ] ) ) m . set ( S [ i ] , m . get ( S [ i ] ) + 1 ) else m . set ( S [ i ] , 1 ) }"}
{"text":"if K is greater than size of string then return false","code":"if ( K > S . length ) { return false ; } else {"}
{"text":"check that number of character having the odd frequency","code":"m . forEach ( ( value , key ) => { if ( value % 2 != 0 ) { p = p + 1 ; } } ) ; }"}
{"text":"if k is less than number of odd frequency character then it is again false other wise true","code":"if ( K < p ) { return false ; } return true ; }"}
{"text":"Driver code","code":"var S = \" \" ; var K = 4 ; if ( can_Construct ( S , K ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to compare two strings ignoring their cases","code":"function equalIgnoreCase ( str1 , str2 ) { let i = 0 ;"}
{"text":"Convert to lowercase using toLowerCase function","code":"str1 = str1 . toLowerCase ( ) ; str2 = str2 . toLowerCase ( ) ;"}
{"text":"Comparing both using inbuilt function","code":"let x = ( str1 == ( str2 ) ) ;"}
{"text":"if strings are equal , return true otherwise false","code":"return x == true ; }"}
{"text":"Function to print the same or not same if strings are equal or not equal","code":"function equalIgnoreCaseUtil ( str1 , str2 ) { let res = equalIgnoreCase ( str1 , str2 ) ; if ( res == true ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let str1 , str2 ; str1 = \" \" ; str2 = \" \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; str1 = \" \" ; str2 = \" \" ; equalIgnoreCaseUtil ( str1 , str2 ) ;"}
{"text":"function to print the steps","code":"function steps ( str , n ) {"}
{"text":"declare a flag","code":"var flag ; var x = 0 ;"}
{"text":"traverse through all the characters in the string","code":"for ( var i = 0 ; i < str . length ; i ++ ) {"}
{"text":"if the x value is 0. . then we must increment till n ... set flag to true","code":"if ( x == 0 ) flag = true ;"}
{"text":"if the x value is n - 1 then we must decrement till 0 ... set flag as false","code":"if ( x == n - 1 ) flag = false ;"}
{"text":"print x * s","code":"for ( var j = 0 ; j < x ; j ++ ) document . write ( \" \" ) ; document . write ( str [ i ] + \" \" ) ;"}
{"text":"checking whether to increment or decrement x","code":"if ( flag == true ) x ++ ; else x -- ; } }"}
{"text":"Get the String and the number n","code":"var n = 4 ; var str = \" \" ; document . write ( \" \" + str + \" \" ) ; document . write ( \" \" + n + \" \" ) ;"}
{"text":"calling the function","code":"steps ( str , n ) ;"}
{"text":"Javascript program to count frequencies of array items","code":"function countFreq ( arr , n ) {"}
{"text":"Mark all array elements as not visited","code":"let visited = new Array ( n ) ; visited . fill ( false ) ;"}
{"text":"Traverse through array elements and count frequencies","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Skip this element if already processed","code":"if ( visited [ i ] == true ) continue ;"}
{"text":"Count frequency","code":"let count = 1 ; for ( let j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { visited [ j ] = true ; count ++ ; } } document . write ( arr [ i ] + \" \" + count + \" \" ) ; } }"}
{"text":"Driver Code","code":"let arr = [ 10 , 20 , 20 , 10 , 10 , 20 , 5 , 20 ] ; let n = arr . length ; countFreq ( arr , n ) ;"}
{"text":"Function to check whether given binary number is evenly divisible by 2 ^ k or not","code":"function isDivisible ( str , k ) { let n = str . length ; let c = 0 ;"}
{"text":"Count of number of 0 from last","code":"for ( let i = 0 ; i < k ; i ++ ) if ( str [ n - i - 1 ] == ' ' ) c ++ ;"}
{"text":"If count = k , number is evenly divisible , so returns true else false","code":"return ( c == k ) ; }"}
{"text":"First example","code":"let str1 = \" \" ; let k = 2 ; if ( isDivisible ( str1 , k ) == true ) document . write ( \" \" + \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Second example","code":"let str2 = \" \" ; k = 2 ; if ( isDivisible ( str2 , k ) == true ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Javascript program to Check if any anagram of a string is palindrome or not","code":"let NO_OF_CHARS = 256 ;"}
{"text":"function to check whether characters of a string can form a palindrome","code":"function canFormPalindrome ( str ) {"}
{"text":"Create a count array and initialize all values as 0","code":"let count = new Array ( NO_OF_CHARS ) ; count . fill ( 0 ) ;"}
{"text":"For each character in input strings , increment count in the corresponding count array","code":"for ( let i = 0 ; i < str . length ; i ++ ) count [ str [ i ] . charCodeAt ( ) ] ++ ;"}
{"text":"Count odd occurring characters","code":"let odd = 0 ; for ( let i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( ( count [ i ] & 1 ) != 0 ) odd ++ ; if ( odd > 1 ) return false ; }"}
{"text":"Return true if odd count is 0 or 1 ,","code":"return true ; }"}
{"text":"Driver program to test to print printDups","code":"document . write ( canFormPalindrome ( \" \" ) ? \" \" + \" \" : \" \" + \" \" ) ; document . write ( canFormPalindrome ( \" \" ) ? \" \" : \" \" ) ;"}
{"text":"Returns true if s is a number else false","code":"function isNumber ( s ) { for ( let i = 0 ; i < s . length ; i ++ ) if ( s [ i ] < ' ' s [ i ] > ' ' ) return false ; return true ; }"}
{"text":"Saving the input in a string","code":"let str = \" \" ;"}
{"text":"Function returns 1 if all elements are in range '0 \u2581 - \u2581 9'","code":"if ( isNumber ( str ) ) document . write ( \" \" ) ;"}
{"text":"Function returns 0 if the input is not an integer","code":"else document . write ( \" \" ) ;"}
{"text":"Function to print reverse of the passed string","code":"function reverse ( str , len ) { if ( len == str . length ) { return ; } reverse ( str , len + 1 ) ; document . write ( str [ len ] ) ; }"}
{"text":"Driver program to test above function","code":"let a = \" \" ; reverse ( a , 0 ) ;"}
{"text":"Stores the count of distinct colors in box1","code":"var box1 = 0 ;"}
{"text":"Stores the count of distinct colors in box2","code":"var box2 = 0 ; var fact = Array ( 11 ) ;"}
{"text":"Function to calculate the required probability","code":"function getProbability ( balls , M ) {"}
{"text":"Calculate factorial from [ 1 , 10 ]","code":"factorial ( 10 ) ;"}
{"text":"Assign all distinct balls to second box","code":"box2 = M ;"}
{"text":"Total number of balls","code":"var K = 0 ;"}
{"text":"Calculate total number of balls","code":"for ( var i = 0 ; i < M ; i ++ ) K += balls [ i ] ;"}
{"text":"If K is an odd number","code":"if ( K % 2 == 1 ) return 0 ;"}
{"text":"Total ways of distributing the balls in two equal halves","code":"var all = comb ( K , K \/ 2 ) ;"}
{"text":"Required number of ways","code":"var validPermutation = validPermutations ( K \/ 2 , balls , 0 , 0 , M ) ;"}
{"text":"Return the required probability","code":"return validPermutation \/ all ; }"}
{"text":"Function to calculate total number of possible distributions which satisfies the given conditions","code":"function validPermutations ( n , balls , usedBalls , i , M ) {"}
{"text":"If used balls is equal to K \/ 2","code":"if ( usedBalls == n ) {"}
{"text":"If box1 is equal to box2","code":"return box1 == box2 ? 1 : 0 ; }"}
{"text":"Base condition","code":"if ( i >= M ) return 0 ;"}
{"text":"Stores the number of ways of distributing remaining balls without including the current balls in box1","code":"var res = validPermutations ( n , balls , usedBalls , i + 1 , M ) ;"}
{"text":"Increment box1 by one","code":"box1 ++ ;"}
{"text":"Iterate over the range [ 1 , balls [ i ] ]","code":"for ( var j = 1 ; j <= balls [ i ] ; j ++ ) {"}
{"text":"If all the balls goes to box1 , then decrease box2 by one","code":"if ( j == balls [ i ] ) box2 -- ;"}
{"text":"Total number of ways of selecting j balls","code":"var combinations = comb ( balls [ i ] , j ) ;"}
{"text":"Increment res by total number of valid ways of distributing the remaining balls","code":"res += combinations * validPermutations ( n , balls , usedBalls + j , i + 1 , M ) ; }"}
{"text":"Decrement box1 by one","code":"box1 -- ;"}
{"text":"Increment box2 by 1","code":"box2 ++ ; return res ; }"}
{"text":"Function to calculate factorial of N","code":"function factorial ( N ) {"}
{"text":"Base Case","code":"fact [ 0 ] = 1 ;"}
{"text":"Iterate over the range [ 1 , N ]","code":"for ( var i = 1 ; i <= N ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ; }"}
{"text":"Function to calculate NcR","code":"function comb ( n , r ) { var res = fact [ n ] \/ fact [ r ] ; res \/= fact [ n - r ] ; return res ; }"}
{"text":"Driver Code","code":"var arr = [ 2 , 1 , 1 ] ; var N = 4 ; var M = arr . length ;"}
{"text":"Print the result","code":"document . write ( getProbability ( arr , M ) ) ;"}
{"text":"Function to find the area of a regular polygon","code":"function polyarea ( n , r ) {"}
{"text":"Side and radius cannot be negative","code":"if ( r < 0 && n < 0 ) return - 1 ;"}
{"text":"Area degree converted to radians","code":"var A = ( ( r * r * n ) * Math . sin ( ( 360 \/ n ) * 3.14159 \/ 180 ) ) \/ 2 ; return A ; }"}
{"text":"Driver code","code":"var r = 9 , n = 6 ; document . write ( polyarea ( n , r ) . toFixed ( 5 ) ) ;"}
{"text":"Checking if a plane can be divide by a line at 45 degrees such that weight sum is equal","code":"function is_partition_possible ( n , x , y , w ) { let weight_at_x = new Map ( ) ; let max_x = - 2e3 , min_x = 2e3 ;"}
{"text":"Rotating each point by 45 degrees and calculating prefix sum . Also , finding maximum and minimum x coordinates","code":"for ( let i = 0 ; i < n ; i ++ ) { let new_x = x [ i ] - y [ i ] ; max_x = Math . max ( max_x , new_x ) ; min_x = Math . min ( min_x , new_x ) ;"}
{"text":"storing weight sum upto x - y point","code":"if ( weight_at_x . has ( new_x ) ) { weight_at_x . set ( new_x , weight_at_x . get ( new_x ) + w [ i ] ) ; } else { weight_at_x . set ( new_x , w [ i ] ) ; } } let sum_till = [ ] ; sum_till . push ( 0 ) ;"}
{"text":"Finding prefix sum","code":"for ( let s = min_x ; s <= max_x ; s ++ ) { if ( weight_at_x . get ( s ) == null ) sum_till . push ( sum_till [ sum_till . length - 1 ] ) ; else sum_till . push ( sum_till [ sum_till . length - 1 ] + weight_at_x . get ( s ) ) ; } let total_sum = sum_till [ sum_till . length - 1 ] ; let partition_possible = 0 ; for ( let i = 1 ; i < sum_till . length ; i ++ ) { if ( sum_till [ i ] == total_sum - sum_till [ i ] ) partition_possible = 1 ;"}
{"text":"Line passes through i , so it neither falls left nor right .","code":"if ( sum_till [ i - 1 ] == total_sum - sum_till [ i ] ) partition_possible = 1 ; } document . write ( partition_possible == 1 ? \" \" : \" \" ) ; }"}
{"text":"Driven code","code":"let n = 3 ; let x = [ - 1 , - 2 , 1 ] ; let y = [ 1 , 1 , - 1 ] ; let w = [ 3 , 1 , 4 ] ; is_partition_possible ( n , x , y , w ) ;"}
{"text":"Function to find the Slope of other line","code":"function findPCSlope ( m ) { return - 1.0 \/ m ; }"}
{"text":"Driver code","code":"let m = 2.0 ; document . write ( findPCSlope ( m ) ) ;"}
{"text":"javascript program to find area of segment of a circle","code":"let pi = 3.14159 ; function"}
{"text":"Function to find area of segment","code":"area_of_segment ( radius , angle ) {"}
{"text":"Calculating area of sector","code":"let area_of_sector = pi * ( radius * radius ) * ( angle \/ 360 ) ;"}
{"text":"Calculating area of triangle","code":"let area_of_triangle = 1 \/ 2 * ( radius * radius ) * Math . sin ( ( angle * pi ) \/ 180 ) ; return area_of_sector - area_of_triangle ; }"}
{"text":"Driver Function","code":"let radius = 10.0 , angle = 90.0 ; document . write ( \" \" + area_of_segment ( radius , angle ) + \" \" ) ; document . write ( \" \" + area_of_segment ( radius , ( 360 - angle ) ) ) ;"}
{"text":"Javascript program to find Area of a Sector","code":"function SectorArea ( radius , angle ) { if ( angle >= 360 ) document . write ( \" \" ) ;"}
{"text":"Calculating area of the sector","code":"else { let sector = ( ( 22 * radius * radius ) \/ 7 ) * ( angle \/ 360 ) ; document . write ( sector ) ; } }"}
{"text":"Driver code","code":"let radius = 9 ; let angle = 60 ; SectorArea ( radius , angle ) ;"}
{"text":"Javascript program for the above approach","code":"function gcd ( a , b ) {"}
{"text":"Everything divides 0","code":"if ( b == 0 ) { return a ; } return gcd ( b , a % b ) ; }"}
{"text":"Function to calculate total number of prime factor with their prime factor","code":"function PrimeFactor ( N ) { let primef = new Map ( ) ;"}
{"text":"Iterate while the number is even","code":"while ( N % 2 == 0 ) { if ( primef . has ( 2 ) ) { primef . set ( 2 , primef . get ( 2 ) + 1 ) ; } else { primef . set ( 2 , 1 ) ; }"}
{"text":"Reduce to half","code":"N = parseInt ( N \/ 2 , 10 ) ; }"}
{"text":"Iterate up to sqrt ( N )","code":"for ( let i = 3 ; i <= Math . sqrt ( N ) ; i ++ ) {"}
{"text":"Iterate while N has factors of i","code":"while ( N % i == 0 ) { if ( primef . has ( i ) ) { primef . set ( i , primef . get ( i ) + 1 ) ; } else { primef . set ( i , 1 ) ; }"}
{"text":"Removing one factor of i","code":"N = parseInt ( N \/ 2 , 10 ) ; } } if ( N > 2 ) { primef [ N ] = 1 ; } return primef ; }"}
{"text":"Function to count the number of factors","code":"function CountToMakeEqual ( X , Y ) {"}
{"text":"Find the GCD","code":"let gcdofXY = gcd ( X , Y ) ;"}
{"text":"Find multiples left in X and Y","code":"let newX = parseInt ( Y \/ gcdofXY , 10 ) ; let newY = parseInt ( X \/ gcdofXY , 10 ) ;"}
{"text":"Find prime factor of multiple left in X and Y","code":"let primeX = PrimeFactor ( newX ) ; let primeY = PrimeFactor ( newY ) ;"}
{"text":"Initialize ans","code":"let ans = 0 ;"}
{"text":"Check if it possible to obtain X or not","code":"primeX . forEach ( ( values , keys ) => { if ( X % keys != 0 ) { return - 1 ; } ans += primeX . get ( keys ) ; } ) ans += 1 ;"}
{"text":"Check if it possible to obtain Y or not","code":"primeY . forEach ( ( values , keys ) => { if ( Y % keys != 0 ) { return - 1 ; } ans += primeY . get ( keys ) ; } )"}
{"text":"return main ans","code":"return ans ; }"}
{"text":"Given Input","code":"let X = 36 ; let Y = 48 ;"}
{"text":"Function Call","code":"let ans = CountToMakeEqual ( X , Y ) ; document . write ( ans ) ;"}
{"text":"Stores the details of the Segment","code":"class Node { constructor ( L , R , V ) { this . L = L ; this . R = R ; this . V = V ; } }"}
{"text":"Function to check whether the graph is bipartite or not","code":"function check ( Adj , Src , N , visited ) { let color = new Array ( N ) ;"}
{"text":"Mark source node as visited","code":"visited [ Src ] = true ; let q = [ ] ;"}
{"text":"Push the source vertex in queue","code":"q . push ( Src ) ; while ( q . length != 0 ) {"}
{"text":"Get the front of the queue","code":"let u = q . shift ( ) ;"}
{"text":"Assign the color to the popped node","code":"let Col = color [ u ] ;"}
{"text":"Traverse the adjacency list of the node u","code":"for ( let x = 0 ; x < Adj [ u ] . length ; x ++ ) {"}
{"text":"If any node is visited & a different colors has been assigned , then return false","code":"if ( visited [ Adj [ u ] [ x ] ] == true && color [ Adj [ u ] [ x ] ] == Col ) { return false ; } else if ( visited [ Adj [ u ] [ x ] ] == false ) {"}
{"text":"Set visited [ x ]","code":"visited [ Adj [ u ] [ x ] ] = true ;"}
{"text":"Push the node x into the queue","code":"q . push ( Adj [ u ] [ x ] ) ;"}
{"text":"Update color of node","code":"color [ Adj [ u ] [ x ] ] = 1 - Col ; } } }"}
{"text":"If the graph is bipartite","code":"return true ; }"}
{"text":"Function to add an edge between the nodes u and v","code":"function addEdge ( Adj , u , v ) { Adj [ u ] . push ( v ) ; Adj [ v ] . push ( u ) ; }"}
{"text":"Function to check if the assignment of direction can be possible to all the segments , such that they do not intersect after a long period of time","code":"function isPossible ( Arr , N ) {"}
{"text":"Stores the adjacency list of the created graph","code":"let Adj = new Array ( N ) ;"}
{"text":"Initialize","code":"for ( let i = 0 ; i < N ; i ++ ) Adj [ i ] = [ ] ;"}
{"text":"Generate all possible pairs","code":"for ( let i = 0 ; i < N - 1 ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) {"}
{"text":"If segments do not overlap","code":"if ( Arr [ i ] . R < Arr [ j ] . L Arr [ i ] . L > Arr [ j ] . R ) { continue ; }"}
{"text":"Otherwise , the segments overlap","code":"else { if ( Arr [ i ] . V == Arr [ j ] . V ) {"}
{"text":"If both segments have same speed , then add an edge","code":"addEdge ( Adj , i , j ) ; } } } }"}
{"text":"Keep the track of visited nodes","code":"let visited = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) visited [ i ] = false ;"}
{"text":"Iterate for all possible nodes","code":"for ( let i = 0 ; i < N ; i ++ ) { if ( visited [ i ] == false && Adj [ i ] . length > 0 ) {"}
{"text":"Check whether graph is bipartite or not","code":"if ( check ( Adj , i , N , visited ) == false ) { document . write ( \" \" ) ; return ; } } }"}
{"text":"If the graph is bipartite","code":"document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ new Node ( 5 , 7 , 2 ) , new Node ( 4 , 6 , 1 ) , new Node ( 1 , 5 , 2 ) , new Node ( 6 , 5 , 1 ) ] ; let N = arr . length ; isPossible ( arr , N ) ;"}
{"text":"JavaScript program for the above approach","code":"function lexNumbers ( n ) { var sol = [ ] ; dfs ( 1 , n , sol ) ; document . write ( \" \" + sol [ 0 ] ) ; for ( var i = 1 ; i < sol . length ; i ++ ) document . write ( \" \" + sol [ i ] ) ; document . write ( \" \" ) ; } function dfs ( temp , n , sol ) { if ( temp > n ) return ; sol . push ( temp ) ; dfs ( temp * 10 , n , sol ) ; if ( temp % 10 != 9 ) dfs ( temp + 1 , n , sol ) ; }"}
{"text":"Driver code","code":"var n = 15 ; lexNumbers ( n ) ;"}
{"text":"Function to find minimum swaps","code":"function minimumSwaps ( arr ) {"}
{"text":"Initialise count variable","code":"let count = 0 ; let i = 0 ; while ( i < arr . length ) {"}
{"text":"If current element is not at the right position","code":"if ( arr [ i ] != i + 1 ) { while ( arr [ i ] != i + 1 ) { let temp = 0 ;"}
{"text":"Swap current element with correct position of that element","code":"temp = arr [ arr [ i ] - 1 ] ; arr [ arr [ i ] - 1 ] = arr [ i ] ; arr [ i ] = temp ; count ++ ; } }"}
{"text":"Increment for next index when current element is at correct position","code":"i ++ ; } return count ; }"}
{"text":"Driver code","code":"let arr = [ 2 , 3 , 4 , 1 , 5 ] ;"}
{"text":"Function to find minimum swaps","code":"document . write ( minimumSwaps ( arr ) ) ;"}
{"text":"javascript program to merge K sorted doubly linked list in sorted order A linked list node","code":"class Node { constructor ( ) { this . data = 0 ; this . next = null ; this . prev = null ; } }"}
{"text":"A linked list node","code":"class Node { constructor ( ) { this . data = 0 ; this . next = null ; this . prev = null ; } }"}
{"text":"Given a reference ( pointer to pointer ) to the head Of a DLL and an int , appends a new node at the end","code":"function append ( head_ref , new_data ) {"}
{"text":"Allocate node","code":"new_node = new Node ( ) ; last = head_ref ;"}
{"text":"Put in the data","code":"new_node . data = new_data ;"}
{"text":"This new node is going to be the last node , so make next of it as null","code":"new_node . next = null ;"}
{"text":"If the Linked List is empty , then make the new node as head","code":"if ( head_ref == null ) { new_node . prev = null ; head_ref = new_node ; return head_ref ; }"}
{"text":"Else traverse till the last node","code":"while ( last . next != null ) last = last . next ;"}
{"text":"Change the next of last node","code":"last . next = new_node ;"}
{"text":"Make last node as previous of new node","code":"new_node . prev = last ; return head_ref ; }"}
{"text":"Function to print the list","code":"function printList ( node ) { last ;"}
{"text":"Run while loop unless node becomes null","code":"while ( node != null ) { document . write ( node . data + \" \" ) ; last = node ; node = node . next ; } }"}
{"text":"Function to merge two sorted doubly linked lists","code":"function mergeList ( p , q ) { s = null ;"}
{"text":"If any of the list is empty","code":"if ( p == null q == null ) { return ( p == null ? q : p ) ; }"}
{"text":"Comparison the data of two linked list","code":"if ( p . data < q . data ) { p . prev = s ; s = p ; p = p . next ; } else { q . prev = s ; s = q ; q = q . next ; }"}
{"text":"Store head pointer before merge the list","code":"head = s ; while ( p != null && q != null ) { if ( p . data < q . data ) {"}
{"text":"Changing of pointer between Two list for merging","code":"s . next = p ; p . prev = s ; s = s . next ; p = p . next ; } else {"}
{"text":"Changing of pointer between Two list for merging","code":"s . next = q ; q . prev = s ; s = s . next ; q = q . next ; } }"}
{"text":"Condition to check if any anyone list not end","code":"if ( p == null ) { s . next = q ; q . prev = s ; } if ( q == null ) { s . next = p ; p . prev = s ; }"}
{"text":"Return head pointer of merged list","code":"return head ; }"}
{"text":"Function to merge all sorted linked list in sorted order","code":"function mergeAllList ( head , k ) { finalList = null ; for ( i = 0 ; i < k ; i ++ ) {"}
{"text":"Function call to merge two sorted doubly linked list at a time","code":"finalList = mergeList ( finalList , head [ i ] ) ; }"}
{"text":"Return final sorted doubly linked list","code":"return finalList ; }"}
{"text":"Driver code","code":"var k = 3 ; head = Array ( k ) . fill ( null ) ;"}
{"text":"Loop to initialize all the lists to empty","code":"for ( i = 0 ; i < k ; i ++ ) { head [ i ] = null ; }"}
{"text":"Create first doubly linked List List1 . 1 <= > 5 <= > 9","code":"head [ 0 ] = append ( head [ 0 ] , 1 ) ; head [ 0 ] = append ( head [ 0 ] , 5 ) ; head [ 0 ] = append ( head [ 0 ] , 9 ) ;"}
{"text":"Create second doubly linked List List2 . 2 <= > 3 <= > 7 <= > 12","code":"head [ 1 ] = append ( head [ 1 ] , 2 ) ; head [ 1 ] = append ( head [ 1 ] , 3 ) ; head [ 1 ] = append ( head [ 1 ] , 7 ) ; head [ 1 ] = append ( head [ 1 ] , 12 ) ;"}
{"text":"Create third doubly linked List List3 . 8 <= > 11 <= > 13 <= > 18","code":"head [ 2 ] = append ( head [ 2 ] , 8 ) ; head [ 2 ] = append ( head [ 2 ] , 11 ) ; head [ 2 ] = append ( head [ 2 ] , 13 ) ; head [ 2 ] = append ( head [ 2 ] , 18 ) ;"}
{"text":"Function call to merge all sorted doubly linked lists in sorted order","code":"finalList = mergeAllList ( head , k ) ;"}
{"text":"Print final sorted list","code":"printList ( finalList ) ;"}
{"text":"Recursive function to sort an array using insertion sort","code":"function insertionSortRecursive ( arr , n ) {"}
{"text":"Base case","code":"if ( n <= 1 ) return ;"}
{"text":"Sort first n - 1 elements","code":"insertionSortRecursive ( arr , n - 1 ) ;"}
{"text":"Insert last element at its correct position in sorted array .","code":"let last = arr [ n - 1 ] ; let j = n - 2 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position","code":"while ( j >= 0 && arr [ j ] > last ) { arr [ j + 1 ] = arr [ j ] ; j -- ; } arr [ j + 1 ] = last ; }"}
{"text":"Driver Method","code":"let arr = [ 12 , 11 , 13 , 5 , 6 ] ; insertionSortRecursive ( arr , arr . length ) ; for ( let i = 0 ; i < arr . length ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"A function to implement bubble sort","code":"function bubbleSort ( arr , n ) {"}
{"text":"Base case","code":"if ( n == 1 ) return ;"}
{"text":"One pass of bubble sort . After this pass , the largest element is moved ( or bubbled ) to end .","code":"for ( var i = 0 ; i < n - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) {"}
{"text":"swap arr [ i ] , arr [ i + 1 ]","code":"var temp = arr [ i ] ; arr [ i ] = arr [ i + 1 ] ; arr [ i + 1 ] = temp ; }"}
{"text":"Largest element is fixed , recur for remaining array","code":"bubbleSort ( arr , n - 1 ) ; }"}
{"text":"Driver code","code":"var arr = [ 64 , 34 , 25 , 12 , 22 , 11 , 90 ] bubbleSort ( arr , arr . length ) ; document . write ( \" \" + \" \" ) ; for ( var i = 0 ; i < arr . length ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"JavaScript Program to implement the above approach","code":"function maxSumAfterPartition ( arr , n ) {"}
{"text":"Stores the positive elements","code":"let pos = [ ] ;"}
{"text":"Stores the negative elements","code":"let neg = [ ] ;"}
{"text":"Stores the count of 0 s","code":"let zero = 0 ;"}
{"text":"Sum of all positive numbers","code":"let pos_sum = 0 ;"}
{"text":"Sum of all negative numbers","code":"let neg_sum = 0 ;"}
{"text":"Iterate over the array","code":"for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { pos . push ( arr [ i ] ) ; pos_sum += arr [ i ] ; } else if ( arr [ i ] < 0 ) { neg . push ( arr [ i ] ) ; neg_sum += arr [ i ] ; } else { zero ++ ; } }"}
{"text":"Stores the difference","code":"let ans = 0 ;"}
{"text":"Sort the positive numbers in ascending order","code":"pos . sort ( function ( a , b ) { return a - b } )"}
{"text":"Sort the negative numbers in decreasing order","code":"neg . sort ( function ( a , b ) { return b - a } )"}
{"text":"Case 1 : Include both positive and negative numbers","code":"if ( pos . length > 0 && neg . length > 0 ) { ans = ( pos_sum - neg_sum ) ; } else if ( pos . length > 0 ) { if ( zero > 0 ) {"}
{"text":"Put all numbers in subset A and one 0 in subset B","code":"ans = ( pos_sum ) ; } else {"}
{"text":"Put all numbers in subset A except the smallest positive number which is put in B","code":"ans = ( pos_sum - 2 * pos [ 0 ] ) ; } } else { if ( zero > 0 ) {"}
{"text":"Put all numbers in subset B and one 0 in subset A","code":"ans = ( - 1 * neg_sum ) ; } else {"}
{"text":"Place the largest negative number in subset A and remaining in B","code":"ans = ( neg [ 0 ] - ( neg_sum - neg [ 0 ] ) ) ; } } return ans ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 , - 5 , - 7 ] ; let n = arr . length ; document . write ( maxSumAfterPartition ( arr , n ) ) ;"}
{"text":"Function to find the bitwise OR of array elements","code":"function MaxXOR ( arr , N ) {"}
{"text":"Stores the resultant maximum value of Bitwise XOR","code":"var res = 0 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( var i = 0 ; i < N ; i ++ ) { res |= arr [ i ] ; }"}
{"text":"Return the maximum value res","code":"return res ; }"}
{"text":"Driver code","code":"var arr = [ 1 , 5 , 7 ] ; var N = arr . length ; document . write ( MaxXOR ( arr , N ) ) ;"}
{"text":"Function to count the number of elements common in both the arrays","code":"function countEqual ( A , B , N ) {"}
{"text":"Used to traverse array A [ ] and B [ ] from the front and the back","code":"let first = 0 ; let second = N - 1 ;"}
{"text":"Stores the count of numbers common in both array","code":"let count = 0 ; while ( first < N && second >= 0 ) {"}
{"text":"If A [ first ] is less than B [ second ]","code":"if ( A [ first ] < B [ second ] ) {"}
{"text":"Increment the value of first","code":"first ++ ; }"}
{"text":"IF B [ second ] is less than A [ first ]","code":"else if ( B [ second ] < A [ first ] ) {"}
{"text":"Decrement the value of second","code":"second -- ; }"}
{"text":"A [ first ] is equal to B [ second ]","code":"else {"}
{"text":"Increment the value of count","code":"count ++ ;"}
{"text":"Increment the value of first","code":"first ++ ;"}
{"text":"Decrement the value of second","code":"second -- ; } }"}
{"text":"Return the value of count","code":"return count ; }"}
{"text":"Driver Code","code":"let A = [ 2 , 4 , 5 , 8 , 12 , 13 , 17 , 18 , 20 , 22 , 309 , 999 ] ; let B = [ 109 , 99 , 68 , 54 , 22 , 19 , 17 , 13 , 11 , 5 , 3 , 1 ] ; let N = A . length ; document . write ( countEqual ( A , B , N ) ) ;"}
{"text":"JavaScript program for the above approach","code":"let arr = [ ] ; for ( let m = 0 ; m < 100005 ; m ++ ) { arr [ m ] = 0 ; }"}
{"text":"Function to check if the number N is palindrome or not","code":"function isPalindrome ( N ) {"}
{"text":"Store the value of N","code":"int temp = N ;"}
{"text":"Store the reverse of number N","code":"let res = 0 ;"}
{"text":"Reverse temp and store in res","code":"while ( temp != 0 ) { let rem = temp % 10 ; res = res * 10 + rem ; temp = Math . floor ( temp \/ 10 ) ; }"}
{"text":"If N is the same as res , then return true","code":"if ( res == N ) { return true ; } else { return false ; } }"}
{"text":"Function to find the sum of the digits of the number N","code":"function sumOfDigits ( N ) {"}
{"text":"Stores the sum of the digits","code":"let sum = 0 ; while ( N != 0 ) {"}
{"text":"Add the last digit of the number N to the sum","code":"sum += N % 10 ;"}
{"text":"Remove the last digit from N","code":"N = Math . floor ( N \/ 10 ) ; }"}
{"text":"Return the resultant sum","code":"return sum ; }"}
{"text":"Function to check if N is prime or not","code":"function isPrime ( n ) {"}
{"text":"If i is 1 or 0 , then return false","code":"if ( n <= 1 ) { return false ; }"}
{"text":"Check if i is divisible by any number in the range [ 2 , n \/ 2 ]","code":"for ( let i = 2 ; i <= Math . floor ( n \/ 2 ) ; ++ i ) {"}
{"text":"If n is divisible by i","code":"if ( n % i == 0 ) return false ; } return true ; }"}
{"text":"Function to precompute all the numbers till 10 ^ 5 that are palindromic and whose sum of digits is prime numbers","code":"function precompute ( ) {"}
{"text":"Iterate over the range 1 to 10 ^ 5","code":"for ( let i = 1 ; i <= 100000 ; i ++ ) {"}
{"text":"If i is a palindrome number","code":"if ( isPalindrome ( i ) ) {"}
{"text":"Stores the sum of the digits in i","code":"let sum = sumOfDigits ( i ) ;"}
{"text":"If the sum of digits in i is a prime number","code":"if ( isPrime ( sum ) ) arr [ i ] = 1 ; else arr [ i ] = 0 ; } else arr [ i ] = 0 ; }"}
{"text":"Find the prefix sum of arr [ ]","code":"for ( let i = 1 ; i <= 100000 ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; } }"}
{"text":"Function to count all the numbers in the given ranges that are palindromic and the sum of digits is prime numbers","code":"function countNumbers ( Q , N ) {"}
{"text":"Function Call to precompute all the numbers till 10 ^ 5","code":"precompute ( ) ;"}
{"text":"Traverse the given queries Q [ ]","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Print the result for each query","code":"document . write ( ( arr [ Q [ i ] [ 1 ] ] - arr [ Q [ i ] [ 0 ] - 1 ] ) + \" \" ) ; } }"}
{"text":"Driver Code","code":"let Q = [ [ 5 , 9 ] , [ 1 , 101 ] ] ; let N = Q . length ;"}
{"text":"Function Call","code":"countNumbers ( Q , N ) ;"}
{"text":"Function to calculate sum digits of n","code":"function sum ( n ) { var res = 0 ; while ( n > 0 ) { res += n % 10 ; n \/= 10 ; } return res ; }"}
{"text":"Function to find the smallest possible integer satisfying the given condition","code":"function smallestNumber ( n , s ) {"}
{"text":"If the sum of digits is already smaller than S","code":"if ( sum ( n ) <= s ) { return n ; }"}
{"text":"Initialize variables","code":"var ans = n , k = 1 ; for ( i = 0 ; i < 9 ; ++ i ) {"}
{"text":"Finding last kth digit","code":"var digit = ( ans \/ k ) % 10 ;"}
{"text":"Add remaining to make digit 0","code":"var add = k * ( ( 10 - digit ) % 10 ) ; ans += add ;"}
{"text":"If sum of digits does not exceed S","code":"if ( sum ( ans ) <= s ) { break ; }"}
{"text":"Update k","code":"k *= 10 ; } return ans ; }"}
{"text":"Given N and S","code":"var N = 3 , S = 2 ;"}
{"text":"Function call","code":"document . write ( smallestNumber ( N , S ) ) ;"}
{"text":"Function to find the maximum number number of required subsequences","code":"function maxSubsequences ( arr , n ) {"}
{"text":"Dictionary to store number of arrows available with height of arrow as key","code":"let map = new Map ( ) ;"}
{"text":"Stores the maximum count of possible subsequences","code":"let maxCount = 0 ;"}
{"text":"Stores the count of possible subsequences","code":"let count ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if i - th element can be part of any of the previous subsequence","code":"if ( map . has ( arr [ i ] ) ) {"}
{"text":"Count of subsequences possible with arr [ i ] as the next element","code":"count = map [ arr [ i ] ] ;"}
{"text":"If more than one such subsequence exists","code":"if ( count > 1 ) {"}
{"text":"Include arr [ i ] in a subsequence","code":"map . add ( arr [ i ] , count - 1 ) ; }"}
{"text":"Otherwise","code":"else map . delete ( arr [ i ] ) ;"}
{"text":"Increase count of subsequence possible with arr [ i ] - 1 as the next element","code":"if ( arr [ i ] - 1 > 0 ) if ( map . has ( arr [ i ] - 1 ) ) map [ arr [ i ] - 1 ] ++ ; else map . set ( arr [ i ] - 1 , 1 ) ; } else {"}
{"text":"Start a new subsequence","code":"maxCount ++ ;"}
{"text":"Increase count of subsequence possible with arr [ i ] - 1 as the next element","code":"if ( arr [ i ] - 1 > 0 ) if ( map . has ( arr [ i ] - 1 ) ) map [ arr [ i ] - 1 ] ++ ; else map . set ( arr [ i ] - 1 , 1 ) ; } }"}
{"text":"Return the answer","code":"return maxCount ; }"}
{"text":"Driver code","code":"let n = 5 ; let arr = [ 4 , 5 , 2 , 1 , 4 ] ; document . write ( maxSubsequences ( arr , n ) ) ;"}
{"text":"Traverse the given String from the beginning","code":"for ( var i = 0 ; i < s . length ; i ++ ) {"}
{"text":"If ch is found","code":"if ( s [ i ] === ch ) { s = s . substring ( 0 , i ) + s . substring ( i + 1 ) ; break ; } }"}
{"text":"Traverse the given String from the end","code":"for ( var i = s . length - 1 ; i > - 1 ; i -- ) {"}
{"text":"If ch is found","code":"if ( s [ i ] === ch ) { s = s . substring ( 0 , i ) + s . substring ( i + 1 ) ; break ; } } return s ; }"}
{"text":"Driver Code","code":"var s = \" \" ; var ch = \" \" ; document . write ( removeOcc ( s , ch ) ) ;"}
{"text":"Function that finds the minimum steps to reach either 0 or N for given increasing and decreasing arrays","code":"function minSteps ( N , increasing , decreasing , m1 , m2 ) {"}
{"text":"Initialize variable to find the minimum element","code":"var mini = 2147483647 ; var i ;"}
{"text":"Find minimum element in increasing [ ] array","code":"for ( i = 0 ; i < m1 ; i ++ ) { if ( mini > increasing [ i ] ) mini = increasing [ i ] ; }"}
{"text":"Initialize variable to find the maximum element","code":"var maxi = - 2147483648 ;"}
{"text":"Find maximum element in decreasing [ ] array","code":"for ( i = 0 ; i < m2 ; i ++ ) { if ( maxi < decreasing [ i ] ) maxi = decreasing [ i ] ; }"}
{"text":"Find the minimum steps","code":"var minSteps = Math . max ( maxi , N - mini ) ;"}
{"text":"Print the minimum steps","code":"document . write ( minSteps ) ; }"}
{"text":"Given N","code":"var N = 7 ;"}
{"text":"Given increasing and decreasing array","code":"var increasing = [ 3 , 5 ] ; var decreasing = [ 6 ] ;"}
{"text":"Find length of arrays increasing and decreasing","code":"var m1 = increasing . length ; var m2 = decreasing . length ;"}
{"text":"Function call","code":"minSteps ( N , increasing , decreasing , m1 , m2 ) ;"}
{"text":"Function to find the minimum number of swaps","code":"function solve ( P , n ) {"}
{"text":"New array to convert to 1 - based indexing","code":"let arr = Array . from ( { length : n + 1 } , ( _ , i ) => 0 ) ; arr [ 0 ] = 0 ; for ( let i = 0 ; i < n ; i ++ ) arr [ i + 1 ] = P [ i ] ;"}
{"text":"Keeps count of swaps","code":"let cnt = 0 ; for ( let i = 1 ; i < n ; i ++ ) {"}
{"text":"Check if it is an ' X ' position","code":"if ( arr [ i ] == i ) { let t = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ i ] ; arr [ i ] = t ; cnt ++ ; } }"}
{"text":"Corner Case","code":"if ( arr [ n ] == n ) {"}
{"text":"Swap","code":"let t = arr [ n - 1 ] ; arr [ n - 1 ] = arr [ n ] ; arr [ n ] = t ; cnt ++ ; }"}
{"text":"Prlet the minimum swaps","code":"document . write ( cnt ) ; }"}
{"text":"Given Number N","code":"let N = 9 ;"}
{"text":"Given Permutation of N numbers","code":"let P = [ 1 , 2 , 4 , 9 , 5 , 8 , 7 , 3 , 6 ] ;"}
{"text":"Function Call","code":"solve ( P , N ) ;"}
{"text":"Function to check if array is wave array arr : input array n : size of array","code":"function isWaveArray ( arr , n ) { let result = true ;"}
{"text":"Check the wave form * If arr [ 1 ] is greater than left and right * Same pattern will be followed by whole * elements , else reverse pattern * will be followed by array elements","code":"if ( arr [ 1 ] > arr [ 0 ] && arr [ 1 ] > arr [ 2 ] ) { for ( let i = 1 ; i < n - 1 ; i += 2 ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) { result = true ; } else { result = false ; break ; } }"}
{"text":"Check for last element","code":"if ( result == true && n % 2 == 0 ) { if ( arr [ n - 1 ] <= arr [ n - 2 ] ) { result = false ; } } } else if ( arr [ 1 ] < arr [ 0 ] && arr [ 1 ] < arr [ 2 ] ) { for ( let i = 1 ; i < n - 1 ; i += 2 ) { if ( arr [ i ] < arr [ i - 1 ] && arr [ i ] < arr [ i + 1 ] ) { result = true ; } else { result = false ; break ; } }"}
{"text":"Check for last element","code":"if ( result == true && n % 2 == 0 ) { if ( arr [ n - 1 ] >= arr [ n - 2 ] ) { result = false ; } } } return result ; }"}
{"text":"Array","code":"let arr = [ 1 , 3 , 2 , 4 ] ; let n = arr . length ; if ( isWaveArray ( arr , n ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to count number of sequences satisfying the given criteria","code":"function countPossiblities ( arr , n ) {"}
{"text":"Stores the index of the last occurrence of the element","code":"let lastOccur = new Array ( 100000 ) ; for ( let i = 0 ; i < n ; i ++ ) { lastOccur [ i ] = - 1 ; }"}
{"text":"Initialize an array to store the number of different sequences that are possible of length i","code":"dp = new Array ( n + 1 ) ;"}
{"text":"Base Case","code":"dp [ 0 ] = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { let curEle = arr [ i - 1 ] ;"}
{"text":"If no operation is applied on ith element","code":"dp [ i ] = dp [ i - 1 ] ;"}
{"text":"If operation is applied on ith element","code":"if ( lastOccur [ curEle ] != - 1 & lastOccur [ curEle ] < i - 1 ) { dp [ i ] += dp [ lastOccur [ curEle ] ] ; }"}
{"text":"Update the last occurrence of curEle","code":"lastOccur [ curEle ] = i ; }"}
{"text":"Finally , prlet the answer","code":"document . write ( dp [ n ] + \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 1 , 2 , 2 ] ; let N = arr . length ; countPossiblities ( arr , N ) ;"}
{"text":"Function to print the maximum sum","code":"function maxSum ( arr , n , m ) {"}
{"text":"Dp table","code":"let dp = new Array ( n ) ; for ( var i = 0 ; i < dp . length ; i ++ ) { dp [ i ] = new Array ( 2 ) ; }"}
{"text":"Initializing dp array with 0 s","code":"for ( let i = 0 ; i < 2 ; i ++ ) { for ( let j = 0 ; j <= m ; j ++ ) { dp [ i ] [ j ] = 0 ; } }"}
{"text":"Base case","code":"dp [ 0 ] [ m - 1 ] = arr [ 0 ] [ m - 1 ] ; dp [ 1 ] [ m - 1 ] = arr [ 1 ] [ m - 1 ] ;"}
{"text":"Traverse each column","code":"for ( let j = m - 2 ; j >= 0 ; j -- ) {"}
{"text":"Update answer for both rows","code":"for ( let i = 0 ; i < 2 ; i ++ ) { if ( i == 1 ) { dp [ i ] [ j ] = Math . max ( arr [ i ] [ j ] + dp [ 0 ] [ j + 1 ] , arr [ i ] [ j ] + dp [ 0 ] [ j + 2 ] ) ; } else { dp [ i ] [ j ] = Math . max ( arr [ i ] [ j ] + dp [ 1 ] [ j + 1 ] , arr [ i ] [ j ] + dp [ 1 ] [ j + 2 ] ) ; } } }"}
{"text":"Print the maximum sum","code":"document . write ( Math . max ( dp [ 0 ] [ 0 ] , dp [ 1 ] [ 0 ] ) ) ; }"}
{"text":"Given array","code":"let arr = [ [ 1 , 50 , 21 , 5 ] , [ 2 , 10 , 10 , 5 ] ] ;"}
{"text":"Number of Columns","code":"let N = arr [ 0 ] . length ;"}
{"text":"Function calls","code":"maxSum ( arr , 2 , N ) ;"}
{"text":"Function to print the maximum sum possible by selecting at most one element from each column such that no consecutive pairs are selected from a single row","code":"function maxSum ( arr , n ) {"}
{"text":"Initialize variables","code":"var r1 = 0 , r2 = 0 ;"}
{"text":"Traverse each column","code":"for ( i = 0 ; i < n ; i ++ ) { var temp = r1 ; r1 = Math . max ( r1 , r2 + arr [ 0 ] [ i ] ) ; r2 = Math . max ( r2 , temp + arr [ 1 ] [ i ] ) ; }"}
{"text":"Prvar answer","code":"document . write ( Math . max ( r1 , r2 ) ) ; }"}
{"text":"Driver Code","code":"var arr = [ [ 1 , 50 , 21 , 5 ] , [ 2 , 10 , 10 , 5 ] ] ;"}
{"text":"Numberof columns","code":"var n = arr [ 0 ] . length ; maxSum ( arr , n ) ;"}
{"text":"JavaScript program for the above approach","code":"var mod = parseInt ( 1e9 + 7 ) ; var mx = 1000000 ; var fact = new Array ( mx + 1 ) . fill ( 0 ) ;"}
{"text":"Function to calculate the factorials up to a number","code":"function Calculate_factorial ( ) { fact [ 0 ] = 1 ;"}
{"text":"Calculate the factorial","code":"for ( var i = 1 ; i <= mx ; i ++ ) { fact [ i ] = i * fact [ i - 1 ] ; fact [ i ] %= mod ; } }"}
{"text":"Function to find power ( a , b )","code":"function UniModal_per ( a , b ) { var res = 1 ;"}
{"text":"Iterate until b exists","code":"while ( b > 0 ) {"}
{"text":"If b is divisible by 2","code":"if ( b % 2 !== 0 ) res = res * a ; res %= mod ; a = a * a ; a %= mod ;"}
{"text":"Decrease the value of b","code":"b = parseInt ( b \/ 2 ) ; }"}
{"text":"Return the answer","code":"return res ; }"}
{"text":"Function that counts the unimodal and non - unimodal permutations of a given integer N","code":"function countPermutations ( n ) {"}
{"text":"Function Call for finding factorials up to N","code":"Calculate_factorial ( ) ;"}
{"text":"Function to count unimodal permutations","code":"var uni_modal = UniModal_per ( 2 , n - 1 ) ;"}
{"text":"Non - unimodal permutation is N ! - unimodal permutations","code":"var nonuni_modal = fact [ n ] - uni_modal ; document . write ( uni_modal + \" \" + nonuni_modal ) ; return ; }"}
{"text":"Driver Code Given Number N","code":"var N = 4 ;"}
{"text":"Function Call","code":"countPermutations ( N ) ;"}
{"text":"JavaScript program to find the longest subsequence possible that starts and ends with 1 and filled with 0 in the middle","code":"function longestSubseq ( s , len ) {"}
{"text":"Prefix array to store the occurences of '1' and '0'","code":"var ones = new Array ( len + 1 ) . fill ( 0 ) ; var zeroes = new Array ( len + 1 ) . fill ( 0 ) ;"}
{"text":"Iterate over the length of the string","code":"for ( var i = 0 ; i < len ; i ++ ) {"}
{"text":"If current character is '1'","code":"if ( s [ i ] === \" \" ) { ones [ i + 1 ] = ones [ i ] + 1 ; zeroes [ i + 1 ] = zeroes [ i ] ; }"}
{"text":"If current character is '0'","code":"else { zeroes [ i + 1 ] = zeroes [ i ] + 1 ; ones [ i + 1 ] = ones [ i ] ; } } var answer = - 2147483648 ; var x = 0 ; for ( var i = 0 ; i <= len ; i ++ ) { for ( var j = i ; j <= len ; j ++ ) {"}
{"text":"Add '1' available for the first string","code":"x += ones [ i ] ;"}
{"text":"Add '0' available for the second string","code":"x += zeroes [ j ] - zeroes [ i ] ;"}
{"text":"Add '1' available for the third string","code":"x += ones [ len ] - ones [ j ] ;"}
{"text":"Update answer","code":"answer = Math . max ( answer , x ) ; x = 0 ; } }"}
{"text":"Print the readonly result","code":"document . write ( answer ) ; }"}
{"text":"Driver code","code":"var s = \" \" ; var len = s . length ; longestSubseq ( s , len ) ;"}
{"text":"Javascript implementation to find the largest square in the matrix such that it contains atmost K 1 's","code":"var MAX = 100 ;"}
{"text":"Function to calculate the largest square with atmost K 1 s for Q queries","code":"function largestSquare ( matrix , R , C , q_i , q_j , K , Q ) {"}
{"text":"Loop to solve for each query","code":"for ( var q = 0 ; q < Q ; q ++ ) { var i = q_i [ q ] ; var j = q_j [ q ] ; var min_dist = Math . min ( Math . min ( i , j ) , Math . min ( R - i - 1 , C - j - 1 ) ) ; var ans = - 1 ; for ( var k = 0 ; k <= min_dist ; k ++ ) { var count = 0 ;"}
{"text":"Traversing the each sub square and counting total","code":"for ( var row = i - k ; row <= i + k ; row ++ ) for ( var col = j - k ; col <= j + k ; col ++ ) count += matrix [ row ] [ col ] ;"}
{"text":"Breaks when exceeds the maximum count","code":"if ( count > K ) break ; ans = 2 * k + 1 ; } document . write ( ans + \" \" ) ; } }"}
{"text":"Driver Code","code":"var matrix = [ [ 1 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 0 , 0 , 1 , 0 ] ] ; var K = 9 , Q = 1 ; var q_i = [ 1 ] ; var q_j = [ 2 ] ; largestSquare ( matrix , 4 , 5 , q_i , q_j , K , Q ) ;"}
{"text":"Javascript implementation to find the largest square in the matrix such that it contains atmost K 1 's","code":"let MAX = 100 ;"}
{"text":"Function to find the largest square in the matrix such that it contains atmost K 1 's","code":"function largestSquare ( matrix , R , C , q_i , q_j , K , Q ) { let countDP = new Array ( R ) ; for ( let i = 0 ; i < R ; i ++ ) { countDP [ i ] = new Array ( C ) ; for ( let j = 0 ; j < C ; j ++ ) countDP [ i ] [ j ] = 0 ; }"}
{"text":"Precomputing the countDP prefix sum of the matrix","code":"countDP [ 0 ] [ 0 ] = matrix [ 0 ] [ 0 ] ; for ( let i = 1 ; i < R ; i ++ ) countDP [ i ] [ 0 ] = countDP [ i - 1 ] [ 0 ] + matrix [ i ] [ 0 ] ; for ( let j = 1 ; j < C ; j ++ ) countDP [ 0 ] [ j ] = countDP [ 0 ] [ j - 1 ] + matrix [ 0 ] [ j ] ; for ( let i = 1 ; i < R ; i ++ ) for ( let j = 1 ; j < C ; j ++ ) countDP [ i ] [ j ] = matrix [ i ] [ j ] + countDP [ i - 1 ] [ j ] + countDP [ i ] [ j - 1 ] - countDP [ i - 1 ] [ j - 1 ] ;"}
{"text":"Loop to solve Queries","code":"for ( let q = 0 ; q < Q ; q ++ ) { let i = q_i [ q ] ; let j = q_j [ q ] ;"}
{"text":"Calculating the maximum possible distance of the centre from edge","code":"let min_dist = Math . min ( Math . min ( i , j ) , Math . min ( R - i - 1 , C - j - 1 ) ) ; let ans = - 1 ; for ( let k = 0 ; k <= min_dist ; k ++ ) { let x1 = i - k , x2 = i + k ; let y1 = j - k , y2 = j + k ;"}
{"text":"Calculating the number of 1 s in the submatrix","code":"let count = countDP [ x2 ] [ y2 ] ; if ( x1 > 0 ) count -= countDP [ x1 - 1 ] [ y2 ] ; if ( y1 > 0 ) count -= countDP [ x2 ] [ y1 - 1 ] ; if ( x1 > 0 && y1 > 0 ) count += countDP [ x1 - 1 ] [ y1 - 1 ] ; if ( count > K ) break ; ans = 2 * k + 1 ; } document . write ( ans + \" \" ) ; } }"}
{"text":"Driver Code","code":"let matrix = [ [ 1 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 0 , 0 , 1 , 0 ] ] ; let K = 9 , Q = 1 ; let q_i = [ 1 ] ; let q_j = [ 2 ] ; largestSquare ( matrix , 4 , 5 , q_i , q_j , K , Q ) ;"}
{"text":"Function to return the minimum cost to connect the given ropes","code":"function MinCost ( arr , n ) {"}
{"text":"dp [ i ] [ j ] = minimum cost in range ( i , j ) sum [ i ] [ j ] = sum of range ( i , j )","code":"let dp = new Array ( n + 5 ) ; let sum = new Array ( n + 5 ) ; for ( let i = 0 ; i < n + 5 ; i ++ ) { dp [ i ] = [ ] ; sum [ i ] = [ ] ; for ( let j = 0 ; j < n + 5 ; j ++ ) { dp [ i ] . push ( 0 ) sum [ i ] . push ( 0 ) } } console . log ( dp )"}
{"text":"Initializing the sum table memset ( sum , 0 , sizeof ( 0 ) ) ;","code":"for ( let i = 0 ; i < n ; i ++ ) { let k = arr [ i ] ; for ( let j = i ; j < n ; j ++ ) { if ( i == j ) sum [ i ] [ j ] = k ; else { k += arr [ j ] ; sum [ i ] [ j ] = k ; } } }"}
{"text":"Computing minimum cost for all the possible interval ( i , j ) Left range","code":"for ( let i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"Right range","code":"for ( let j = i ; j < n ; j ++ ) { dp [ i ] [ j ] = Number . MAX_SAFE_INTEGER ;"}
{"text":"No cost for a single rope","code":"if ( i == j ) dp [ i ] [ j ] = 0 ; else { for ( let k = i ; k < j ; k ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] + sum [ i ] [ j ] ) ; } } } } return dp [ 0 ] [ n - 1 ] ; }"}
{"text":"Driver code","code":"let arr = [ 7 , 6 , 8 , 6 , 1 , 1 ] ; let n = arr . length ; document . write ( MinCost ( arr , n ) ) ;"}
{"text":"Function to recursively fill the dp array","code":"function f ( i , state , A , dp , N ) { if ( i >= N ) return 0 ;"}
{"text":"If f ( i , state ) is already calculated then return the value","code":"else if ( dp [ i ] [ state ] != - 1 ) { return dp [ i ] [ state ] ; }"}
{"text":"Calculate f ( i , state ) according to the recurrence relation and store in dp [ ] [ ]","code":"else { if ( i == N - 1 ) dp [ i ] [ state ] = 1 ; else if ( state == 1 && A [ i ] > A [ i + 1 ] ) dp [ i ] [ state ] = 1 ; else if ( state == 2 && A [ i ] < A [ i + 1 ] ) dp [ i ] [ state ] = 1 ; else if ( state == 1 && A [ i ] <= A [ i + 1 ] ) dp [ i ] [ state ] = 1 + f ( i + 1 , 2 , A , dp , N ) ; else if ( state == 2 && A [ i ] >= A [ i + 1 ] ) dp [ i ] [ state ] = 1 + f ( i + 1 , 1 , A , dp , N ) ; return dp [ i ] [ state ] ; } }"}
{"text":"Function that calls the resucrsive function to fill the dp array and then returns the result","code":"function maxLenSeq ( A , N ) { let i , j , tmp , y , ans ;"}
{"text":"dp [ ] [ ] array for storing result of f ( i , 1 ) and f ( 1 , 2 )","code":"let dp = new Array ( 1000 ) ;"}
{"text":"Populating the array dp [ ] with - 1","code":"for ( i = 0 ; i < 1000 ; i ++ ) { dp [ i ] = new Array ( 3 ) ; for ( j = 0 ; j < 3 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } }"}
{"text":"Make sure that longest UD and DU sequence starting at each index is calculated","code":"for ( i = 0 ; i < N ; i ++ ) { tmp = f ( i , 1 , A , dp , N ) ; tmp = f ( i , 2 , A , dp , N ) ; }"}
{"text":"Assume the answer to be - 1 This value will only increase","code":"ans = - 1 ; for ( i = 0 ; i < N ; i ++ ) {"}
{"text":"y is the length of the longest UD sequence starting at i","code":"y = dp [ i ] [ 1 ] ; if ( i + y >= N ) ans = Math . max ( ans , dp [ i ] [ 1 ] + 1 ) ;"}
{"text":"If length is even then add an integer and then a DU sequence starting at i + y","code":"else if ( y % 2 == 0 ) { ans = Math . max ( ans , dp [ i ] [ 1 ] + 1 + dp [ i + y ] [ 2 ] ) ; }"}
{"text":"If length is odd then add an integer and then a UD sequence starting at i + y","code":"else if ( y % 2 == 1 ) { ans = Math . max ( ans , dp [ i ] [ 1 ] + 1 + dp [ i + y ] [ 1 ] ) ; } } return ans ; }"}
{"text":"Driver code","code":"let A = [ 1 , 10 , 3 , 20 , 25 , 24 ] ; let n = A . length ; document . write ( maxLenSeq ( A , n ) ) ;"}
{"text":"Recursive function to return gcd of a and b","code":"function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; }"}
{"text":"Function to return the maximized gcd after removing a single element from the given array","code":"function MaxGCD ( a , n ) {"}
{"text":"Prefix and Suffix arrays","code":"let Prefix = new Array ( n + 2 ) ; let Suffix = new Array ( n + 2 ) ;"}
{"text":"Single state dynamic programming relation for storing gcd of first i elements from the left in Prefix [ i ]","code":"Prefix [ 1 ] = a [ 0 ] ; for ( let i = 2 ; i <= n ; i += 1 ) { Prefix [ i ] = gcd ( Prefix [ i - 1 ] , a [ i - 1 ] ) ; }"}
{"text":"Initializing Suffix array","code":"Suffix [ n ] = a [ n - 1 ] ;"}
{"text":"Single state dynamic programming relation for storing gcd of all the elements having greater than or equal to i in Suffix [ i ]","code":"for ( let i = n - 1 ; i >= 1 ; i -= 1 ) { Suffix [ i ] = gcd ( Suffix [ i + 1 ] , a [ i - 1 ] ) ; }"}
{"text":"If first or last element of the array has to be removed","code":"let ans = Math . max ( Suffix [ 2 ] , Prefix [ n - 1 ] ) ;"}
{"text":"If any other element is replaced","code":"for ( let i = 2 ; i < n ; i += 1 ) { ans = Math . max ( ans , gcd ( Prefix [ i - 1 ] , Suffix [ i + 1 ] ) ) ; }"}
{"text":"Return the maximized gcd","code":"return ans ; }"}
{"text":"Driver code","code":"let a = [ 14 , 17 , 28 , 70 ] ; let n = a . length ; document . write ( MaxGCD ( a , n ) ) ;"}
{"text":"Javascript implementation of the approach","code":"let right = 2 ; let left = 4 ; let dp = new Array ( left ) ;"}
{"text":"Function to find the maximum subarray sum with flips starting from index i","code":"function findSubarraySum ( ind , flips , n , a , k ) {"}
{"text":"If the number of flips have exceeded","code":"if ( flips > k ) return ( - 1e9 ) ;"}
{"text":"Complete traversal","code":"if ( ind == n ) return 0 ;"}
{"text":"If the state has previously been visited","code":"if ( dp [ ind ] [ flips ] != - 1 ) return dp [ ind ] [ flips ] ;"}
{"text":"Initially","code":"let ans = 0 ;"}
{"text":"Use Kadane 's algorithm and call two states","code":"ans = Math . max ( 0 , a [ ind ] + findSubarraySum ( ind + 1 , flips , n , a , k ) ) ; ans = Math . max ( ans , - a [ ind ] + findSubarraySum ( ind + 1 , flips + 1 , n , a , k ) ) ;"}
{"text":"Memoize the answer and return it","code":"return dp [ ind ] [ flips ] = ans ; }"}
{"text":"Utility function to call flips from index and return the answer","code":"function findMaxSubarraySum ( a , n , k ) {"}
{"text":"Create DP array int dp [ n , k + 1 ] ;","code":"for ( let i = 0 ; i < n ; i ++ ) { dp [ i ] = new Array ( k ) ; for ( let j = 0 ; j < k + 1 ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } let ans = ( - 1e9 ) ;"}
{"text":"Iterate and call recursive function from every index to get the maximum subarray sum","code":"for ( let i = 0 ; i < n ; i ++ ) ans = Math . max ( ans , findSubarraySum ( i , 0 , n , a , k ) ) ;"}
{"text":"corner case","code":"if ( ans == 0 && k == 0 ) { let max = Number . MIN_VALUE ; for ( let i = 0 ; i < a . length ; i ++ ) { max = Math . max ( max , a [ i ] ) ; } return max ; } return ans ; }"}
{"text":"Driver Code","code":"let a = [ - 1 , - 2 , - 100 , - 10 ] ; let n = a . length ; let k = 1 ; document . write ( findMaxSubarraySum ( a , n , k ) ) ;"}
{"text":"javascript program to Find the sum of first N odd Fibonacci numbers","code":"var mod = 1000000007 ;"}
{"text":"Function to calculate sum of first N odd Fibonacci numbers","code":"function sumOddFibonacci ( n ) { var Sum = Array ( n + 1 ) . fill ( 0 ) ;"}
{"text":"base values","code":"Sum [ 0 ] = 0 ; Sum [ 1 ] = 1 ; Sum [ 2 ] = 2 ; Sum [ 3 ] = 5 ; Sum [ 4 ] = 10 ; Sum [ 5 ] = 23 ; for ( i = 6 ; i <= n ; i ++ ) { Sum [ i ] = ( ( Sum [ i - 1 ] + ( 4 * Sum [ i - 2 ] ) % mod - ( 4 * Sum [ i - 3 ] ) % mod + mod ) % mod + ( Sum [ i - 4 ] - Sum [ i - 5 ] + mod ) % mod ) % mod ; } return Sum [ n ] ; }"}
{"text":"Driver code","code":"var n = 6 ; document . write ( sumOddFibonacci ( n ) ) ;"}
{"text":"Javascript implementation of the above approach","code":"function fun ( marks , n ) {"}
{"text":"Initializing one tablet for each student","code":"let dp = new Array ( n ) ; let temp ; for ( let i = 0 ; i < n ; i ++ ) dp [ i ] = 1 ; for ( let i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"if left adjacent is having higher marks review and change all the dp values assigned before until assigned dp values are found wrong according to given constrains","code":"if ( marks [ i ] > marks [ i + 1 ] ) { temp = i ; while ( true ) { if ( ( marks [ temp ] > marks [ temp + 1 ] ) && temp >= 0 ) { if ( dp [ temp ] > dp [ temp + 1 ] ) { temp -= 1 ; continue ; } else { dp [ temp ] = dp [ temp + 1 ] + 1 ; temp -= 1 ; } } else break ; } }"}
{"text":"if right adjacent is having higher marks add one in dp of left adjacent and assign to right one","code":"else if ( marks [ i ] < marks [ i + 1 ] ) dp [ i + 1 ] = dp [ i ] + 1 ; } let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) sum += dp [ i ] ; return sum ; }"}
{"text":"n number of students","code":"let n = 6 ;"}
{"text":"marks of students","code":"let marks = [ 1 , 4 , 5 , 2 , 2 , 1 ] ;"}
{"text":"solution of problem","code":"document . write ( fun ( marks , n ) ) ;"}
{"text":"Javascript program to reach N - th stair by taking a maximum of K leap","code":"function solve ( N , K ) {"}
{"text":"elements of combo [ ] stores the no . of possible ways to reach it by all combinations of k leaps or less","code":"let combo = new Array ( 50 ) ; combo . fill ( 0 ) ;"}
{"text":"assuming leap 0 exist and assigning its value to 1 for calculation","code":"combo [ 0 ] = 1 ;"}
{"text":"loop to iterate over all possible leaps upto k ;","code":"for ( let i = 1 ; i <= K ; i ++ ) {"}
{"text":"in this loop we count all possible leaps to reach the jth stair with the help of ith leap or less","code":"for ( let j = 0 ; j <= N ; j ++ ) {"}
{"text":"if the leap is not more than the i - j","code":"if ( j >= i ) {"}
{"text":"calculate the value and store in combo [ j ] to reuse it for next leap calculation for the jth stair","code":"combo [ j ] += combo [ j - i ] ; } } }"}
{"text":"returns the no of possible number of leaps to reach the top of building of n stairs","code":"return combo [ N ] ; }"}
{"text":"N i the no of total stairs K is the value of the greatest leap","code":"let N = 29 ; let K = 5 ; document . write ( solve ( N , K ) ) ; solve ( N , K ) ;"}
{"text":"Utility method to find LIS using Dynamic programming","code":"function computeLIS ( circBuff , start , end , n ) { let LIS = new Array ( n + end - start ) ;"}
{"text":"Initialize LIS values for all indexes","code":"for ( let i = start ; i < end ; i ++ ) LIS [ i ] = 1 ;"}
{"text":"Compute optimized LIS values in bottom up manner","code":"for ( let i = start + 1 ; i < end ; i ++ )"}
{"text":"Set j on the basis of current window i . e . first element of the current window","code":"for ( let j = start ; j < i ; j ++ ) if ( circBuff [ i ] > circBuff [ j ] && LIS [ i ] < LIS [ j ] + 1 ) LIS [ i ] = LIS [ j ] + 1 ;"}
{"text":"Pick maximum of all LIS values","code":"let res = Number . MIN_VALUE ; for ( let i = start ; i < end ; i ++ ) res = Math . max ( res , LIS [ i ] ) ; return res ; }"}
{"text":"Function to find Longest Increasing subsequence in Circular manner","code":"function LICS ( arr , n ) {"}
{"text":"Make a copy of given array by appending same array elements to itself","code":"let circBuff = new Array ( 2 * n ) ; for ( let i = 0 ; i < n ; i ++ ) circBuff [ i ] = arr [ i ] ; for ( let i = n ; i < 2 * n ; i ++ ) circBuff [ i ] = arr [ i - n ] ;"}
{"text":"Perform LIS for each window of size n","code":"let res = Number . MIN_VALUE ; for ( let i = 0 ; i < n ; i ++ ) res = Math . max ( computeLIS ( circBuff , i , i + n , n ) , res ) ; return res ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 4 , 6 , 2 , 3 ] ; document . write ( \" \" + LICS ( arr , arr . length ) ) ;"}
{"text":"utility min","code":"function min ( a , b ) { return a < b ? a : b ; }"}
{"text":"Function for binomial Coefficient","code":"function binomialCoeff ( n , k ) { var C = Array ( k + 1 ) . fill ( 0 ) ; C [ 0 ] = 1 ;"}
{"text":"Constructing Pascal 's Triangle","code":"for ( i = 1 ; i <= n ; i ++ ) { for ( j = min ( i , k ) ; j > 0 ; j -- ) C [ j ] = C [ j ] + C [ j - 1 ] ; } return C [ k ] ; }"}
{"text":"Driver Code","code":"var n = 3 , m = 2 ; document . write ( \" \" + binomialCoeff ( n + m , n ) ) ;"}
{"text":"Returns the length and the LCIS of two arrays arr1 [ 0. . n - 1 ] and arr2 [ 0. . m - 1 ]","code":"function LCIS ( arr1 , n , arr2 , m ) {"}
{"text":"table [ j ] is going to store length of LCIS ending with arr2 [ j ] . We initialize it as 0 ,","code":"let table = [ ] ; for ( let j = 0 ; j < m ; j ++ ) table [ j ] = 0 ;"}
{"text":"Traverse all elements of arr1 [ ]","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Initialize current length of LCIS","code":"let current = 0 ;"}
{"text":"For each element of arr1 [ ] , trvarse all elements of arr2 [ ] .","code":"for ( let j = 0 ; j < m ; j ++ ) {"}
{"text":"If both the array have same elements . Note that we don 't  break the loop here.","code":"if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ;"}
{"text":"Now seek for previous smaller common element for current element of arr1","code":"if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ] ; } }"}
{"text":"The maximum value in table [ ] is out result","code":"let result = 0 ; for ( let i = 0 ; i < m ; i ++ ) if ( table [ i ] > result ) result = table [ i ] ; return result ; }"}
{"text":"Driver Code","code":"let arr1 = [ 3 , 4 , 9 , 1 ] ; let arr2 = [ 5 , 3 , 8 , 9 , 10 , 2 , 1 ] ; let n = arr1 . length ; let m = arr2 . length ; document . write ( \" \" + LCIS ( arr1 , n , arr2 , m ) ) ;"}
{"text":"Function to get the length of the longest common prefix by rearranging the Strings","code":"function longComPre ( arr , N ) {"}
{"text":"freq [ i ] [ j ] : stores the frequency of a character ( = j ) in a String arr [ i ]","code":"let freq = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { freq [ i ] = new Array ( 256 ) ; for ( let j = 0 ; j < 256 ; j ++ ) { freq [ i ] [ j ] = 0 ; } }"}
{"text":"Traverse the given array","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Stores length of current String","code":"let M = arr [ i ] . length ;"}
{"text":"Traverse current String of the given array","code":"for ( let j = 0 ; j < M ; j ++ ) {"}
{"text":"Update the value of freq [ i ] [ arr [ i ] [ j ] ]","code":"freq [ i ] [ arr [ i ] [ j ] . charCodeAt ( 0 ) ] ++ ; } }"}
{"text":"Stores the length of longest common prefix","code":"let maxLen = 0 ;"}
{"text":"Count the minimum frequency of each character in in all the Strings of arr [ ]","code":"for ( let j = 0 ; j < 256 ; j ++ ) {"}
{"text":"Stores minimum value in each row of freq [ ] [ ]","code":"let minRowVal = Number . MAX_VALUE ;"}
{"text":"Calculate minimum frequency of current character in all the Strings .","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Update minRowVal","code":"minRowVal = Math . min ( minRowVal , freq [ i ] [ j ] ) ; }"}
{"text":"Update maxLen","code":"maxLen += minRowVal ; } return maxLen ; }"}
{"text":"Driver Code","code":"let arr = [ \" \" , \" \" , \" \" ] ; let N = 3 ; document . write ( longComPre ( arr , N ) ) ;"}
{"text":"Javascript program to remove characters from a String that appears exactly K times","code":"let MAX_CHAR = 26 ;"}
{"text":"Function to reduce the String by removing the characters which appears exactly k times","code":"function removeChars ( arr , k ) {"}
{"text":"Hash table initialised to 0","code":"let hash = Array . from ( { length : MAX_CHAR } , ( _ , i ) => 0 ) ;"}
{"text":"Increment the frequency of the character","code":"let n = arr . length ; for ( let i = 0 ; i < n ; ++ i ) hash [ arr [ i ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] ++ ;"}
{"text":"To store answer","code":"let ans = \" \" ;"}
{"text":"Next index in reduced string","code":"for ( let i = 0 ; i < n ; ++ i ) {"}
{"text":"Append the characters which appears exactly k times","code":"if ( hash [ arr [ i ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] != k ) { ans += arr [ i ] ; } } return ans ; }"}
{"text":"Driver code","code":"let str = \" \" . split ( ' ' ) ; let k = 2 ;"}
{"text":"Function call","code":"document . write ( removeChars ( str , k ) ) ;"}
{"text":"Function that prints the segments","code":"function sub_segments ( str , n ) { let l = str . length ; for ( let x = 0 ; x < l ; x += n ) { let newlist = str . substr ( x , n ) ;"}
{"text":"New array for every iteration","code":"let arr = [ ] ; for ( let y of newlist ) {"}
{"text":"Check if the character is in the array","code":"if ( ! arr . includes ( y ) ) arr . push ( y ) ; } for ( let y of arr ) document . write ( y ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"let str = \" \" ; let n = 4 ; sub_segments ( str , n ) ;"}
{"text":"Function to compare two strings ignoring their cases","code":"function equalIgnoreCase ( str1 , str2 ) { let i = 0 ;"}
{"text":"length of first string","code":"let len1 = str1 . length ;"}
{"text":"length of second string","code":"let len2 = str2 . length ;"}
{"text":"if length is not same simply return false since both string can not be same if length is not equal","code":"if ( len1 != len2 ) return false ;"}
{"text":"loop to match one by one all characters of both string","code":"while ( i < len1 ) {"}
{"text":"if current characters of both string are same , increase value of i to compare next character","code":"if ( str1 [ i ] == str2 [ i ] ) { i ++ ; }"}
{"text":"if any character of first string is some special character or numeric character and not same as corresponding character of second string then return false","code":"else if ( ! ( ( str1 [ i ] . charCodeAt ( ) >= ' ' . charCodeAt ( ) && str1 [ i ] . charCodeAt ( ) <= ' ' . charCodeAt ( ) ) || ( str1 [ i ] . charCodeAt ( ) >= ' ' . charCodeAt ( ) && str1 [ i ] . charCodeAt ( ) <= ' ' . charCodeAt ( ) ) ) ) { return false ; }"}
{"text":"do the same for second string","code":"else if ( ! ( ( str2 [ i ] . charCodeAt ( ) >= ' ' . charCodeAt ( ) && str2 [ i ] . charCodeAt ( ) <= ' ' . charCodeAt ( ) ) || ( str2 [ i ] . charCodeAt ( ) >= ' ' . charCodeAt ( ) && str2 [ i ] . charCodeAt ( ) <= ' ' . charCodeAt ( ) ) ) ) { return false ; }"}
{"text":"this block of code will be executed if characters of both strings are of different cases","code":"else {"}
{"text":"compare characters by ASCII value","code":"if ( str1 [ i ] . charCodeAt ( ) >= ' ' . charCodeAt ( ) && str1 [ i ] . charCodeAt ( ) <= ' ' . charCodeAt ( ) ) { if ( str1 [ i ] . charCodeAt ( ) - 32 != str2 [ i ] . charCodeAt ( ) ) return false ; } else if ( str1 [ i ] . charCodeAt ( ) >= ' ' . charCodeAt ( ) && str1 [ i ] . charCodeAt ( ) <= ' ' . charCodeAt ( ) ) { if ( str1 [ i ] . charCodeAt ( ) + 32 != str2 [ i ] . charCodeAt ( ) ) return false ; }"}
{"text":"if characters matched , increase the value of i to compare next char","code":"i ++ ;"}
{"text":"if all characters of the first string are matched with corresponding characters of the second string , then return true","code":"return true ;"}
{"text":"Function to print the same or not same if strings are equal or not equal","code":"function equalIgnoreCaseUtil ( str1 , str2 ) { let res = equalIgnoreCase ( str1 , str2 ) ; if ( res == true ) document . write ( \" \" + \" \" ) ; else document . write ( \" \" + \" \" ) ; }"}
{"text":"Driver Code","code":"let str1 , str2 ; str1 = \" \" ; str2 = \" \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; str1 = \" \" ; str2 = \" \" ; equalIgnoreCaseUtil ( str1 , str2 ) ;"}
{"text":"Function to return the maximized value of A","code":"function maxValue ( a , b ) {"}
{"text":"Sort digits in ascending order","code":"b . sort ( function ( x , y ) { return x - y ; } ) ; let n = a . length ; let m = b . length ;"}
{"text":"j points to largest digit in B","code":"let j = m - 1 ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"If all the digits of b have been used","code":"if ( j < 0 ) break ; if ( b [ j ] > a [ i ] ) { a [ i ] = b [ j ] ;"}
{"text":"Current digit has been used","code":"j -- ; } }"}
{"text":"Return the maximized value","code":"return ( a ) . join ( \" \" ) ; }"}
{"text":"Driver code","code":"let a = \" \" ; let b = \" \" ; document . write ( maxValue ( a . split ( \" \" ) , b . split ( \" \" ) ) ) ;"}
{"text":"Function to check if all of the digits in a number and it 's product with q  are unequal or not","code":"function checkIfUnequal ( n , q ) {"}
{"text":"convert first number into string","code":"let s1 = n . toString ( ) ; let a = new Array ( 26 ) ; for ( let i = 0 ; i < a . length ; i ++ ) { a [ i ] = 0 ; }"}
{"text":"Insert elements from 1 st number to hash","code":"for ( let i = 0 ; i < s1 . length ; i ++ ) a [ s1 [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ;"}
{"text":"Calculate corresponding product","code":"let prod = n * q ;"}
{"text":"Convert the product to string","code":"let s2 = prod . toString ( ) ;"}
{"text":"Using the hash check if any digit of product matches with the digits of input number","code":"for ( let i = 0 ; i < s2 . length ; i ++ ) {"}
{"text":"If yes , return false","code":"if ( a [ s2 [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] > 0 ) return false ; }"}
{"text":"else , return true","code":"return true ; }"}
{"text":"Function to count numbers in the range [ l , r ] such that all of the digits of the number and it 's product with q are unequal","code":"function countInRange ( l , r , q ) { let count = 0 ; for ( let i = l ; i <= r ; i ++ ) {"}
{"text":"check for every number between l and r","code":"if ( checkIfUnequal ( i , q ) ) count ++ ; } return count ; }"}
{"text":"Driver Code","code":"let l = 10 , r = 12 , q = 2 ;"}
{"text":"Function Call","code":"document . write ( countInRange ( l , r , q ) ) ;"}
{"text":"function to check the binary string","code":"function is_possible ( s ) {"}
{"text":"length of string","code":"let l = s . length ; let one = 0 , zero = 0 ; for ( let i = 0 ; i < l ; i ++ ) {"}
{"text":"count zero 's","code":"if ( s [ i ] == ' ' ) zero ++ ;"}
{"text":"count one 's","code":"else one ++ ; }"}
{"text":"if length is even","code":"if ( l % 2 == 0 ) return ( one == zero ) ;"}
{"text":"if length is odd","code":"else return ( Math . abs ( one - zero ) == 1 ) ; } let s = \" \" ; if ( is_possible ( s ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Javascript program to count frequencies of array items","code":"let limit = 255 ; function countFreq ( str ) {"}
{"text":"Create an array to store counts . The size of array is limit + 1 and all values are initially 0","code":"let count = new Array ( limit + 1 ) ; for ( let i = 0 ; i < count . length ; i ++ ) { count [ i ] = 0 ; }"}
{"text":"Traverse through string characters and count frequencies","code":"for ( let i = 0 ; i < str . length ; i ++ ) count [ str [ i ] . charCodeAt ( 0 ) ] ++ ; for ( let i = 0 ; i <= limit ; i ++ ) { if ( count [ i ] > 0 ) document . write ( String . fromCharCode ( i ) + \" \" + count [ i ] + \" \" ) ; } }"}
{"text":"Driver Code","code":"let str = \" \" ; countFreq ( str ) ;"}
{"text":"Function to get no of set bits in binary representation of positive integer n","code":"function __builtin_popcount ( n ) { let count = 0 ; while ( n > 0 ) { count += n & 1 ; n >>= 1 ; } return count ; }"}
{"text":"Function to store EVEN and odd variable","code":"function countEvenOdd ( arr , n , K ) { let even = 0 , odd = 0 ;"}
{"text":"Store the count of even and odd set bit","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Count the set bit using in built function","code":"let x = __builtin_popcount ( arr [ i ] ) ; if ( x % 2 == 0 ) even ++ ; else odd ++ ; } let y ;"}
{"text":"Count of set - bit of K","code":"y = __builtin_popcount ( K ) ;"}
{"text":"If y is odd then , count of even and odd set bit will be interchanged","code":"if ( ( y & 1 ) != 0 ) { document . write ( \" \" + odd + \" \" + even ) ; }"}
{"text":"Else it will remain same as the original array","code":"else { document . write ( \" \" + even + \" \" + odd ) ; } }"}
{"text":"Driver 's Code","code":"let arr = [ 4 , 2 , 15 , 9 , 8 , 8 ] ; let K = 3 ; let n = arr . length ;"}
{"text":"Function call to count even and odd","code":"countEvenOdd ( arr , n , K ) ;"}
{"text":"Function to remove spaces and convert into camel case","code":"function convert ( s ) { var n = s . length ; var s1 = \" \" ; s1 = s1 + s . charAt ( 0 ) . toLowerCase ( ) ; for ( i = 1 ; i < n ; i ++ ) {"}
{"text":"check for spaces in the sentence","code":"if ( s . charAt ( i ) == ' ' && i < n ) {"}
{"text":"conversion into upper case","code":"s1 = s1 + \" \" + s . charAt ( i + 1 ) . toLowerCase ( ) ; i ++ ; }"}
{"text":"If not space , copy character","code":"else s1 = s1 + s . charAt ( i ) . toUpperCase ( ) ; }"}
{"text":"return string to main","code":"return s1 ; }"}
{"text":"Driver code","code":"var str = \" \" ; document . write ( convert ( str ) ) ;"}
{"text":"Iterative function to reverse digits of num","code":"function reverse ( num ) { let rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = parseInt ( num \/ 10 ) ; } return rev_num ; }"}
{"text":"Function to calculate sum of all proper divisors num -- > given natural number","code":"function properDivSum ( num ) {"}
{"text":"Final result of summation of divisors","code":"let result = 0 ;"}
{"text":"find all divisors which divides ' num '","code":"for ( i = 2 ; i <= Math . sqrt ( num ) ; i ++ ) {"}
{"text":"if ' i ' is divisor of ' num '","code":"if ( num % i == 0 ) {"}
{"text":"if both divisors are same then add it only once else add both","code":"if ( i == ( num \/ i ) ) result += i ; else result += ( i + num \/ i ) ; } }"}
{"text":"Add 1 to the result as 1 is also a divisor","code":"return ( result + 1 ) ; } function isTcefrep ( n ) { return properDivSum ( n ) == reverse ( n ) ; }"}
{"text":"Given Number N","code":"let N = 6 ;"}
{"text":"Function Call","code":"if ( isTcefrep ( N ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Javascript program to find n - th number containing only 3 and 5.","code":"function reverseString ( str ) { return str . split ( \" \" ) . reverse ( ) . join ( \" \" ) ; } function findNthNo ( n ) { let res = \" \" ; while ( n >= 1 ) {"}
{"text":"If n is odd , append 3 and move to parent","code":"if ( ( n & 1 ) == 1 ) { res = res + \" \" ; n = ( n - 1 ) \/ 2 ; }"}
{"text":"If n is even , append 5 and move to parent","code":"else { res = res + \" \" ; n = ( n - 2 ) \/ 2 ; } }"}
{"text":"Reverse res and return .","code":"sb = ( res ) ; sb = reverseString ( sb ) ; return ( sb ) ; }"}
{"text":"Driver code","code":"let n = 5 ; document . write ( findNthNo ( n ) ) ;"}
{"text":"Function to find the nth Non - Square Number","code":"function findNthNonSquare ( n ) {"}
{"text":"Conversion from var to var var is necessary in order to preserve decimal places after square root .","code":"var x = n ;"}
{"text":"Calculating the result","code":"var ans = x + Math . floor ( 0.5 + Math . sqrt ( x ) ) ; return parseInt ( ans ) ; }"}
{"text":"Initializing the term number","code":"var n = 16 ;"}
{"text":"Print the result","code":"document . write ( \" \" + n + \" \" ) ; document . write ( findNthNonSquare ( n ) ) ;"}
{"text":"function to calculate series sum","code":"function seiresSum ( n , a ) { return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 * n - 1 ] ) \/ ( 2 * n - 1 ) ; }"}
{"text":"Driver code","code":"let n = 2 ; a = [ 1 , 2 , 3 , 4 ] ; document . write ( seiresSum ( n , a ) ) ;"}
{"text":"Function for checking if digit k is in n or not","code":"function checkdigit ( n , k ) { while ( n != 0 ) {"}
{"text":"finding remainder","code":"let rem = n % 10 ;"}
{"text":"if digit found","code":"if ( rem == k ) return true ; n = n \/ 10 ; } return false ; }"}
{"text":"Function for finding nth number","code":"function findNthNumber ( n , k ) {"}
{"text":"since k is the first which satisfy th criteria , so consider it in count making count = 1 and starting from i = k + 1","code":"for ( let i = k + 1 , count = 1 ; count < n ; i ++ ) {"}
{"text":"checking that the number contain k digit or divisible by k","code":"if ( checkdigit ( i , k ) || ( i % k == 0 ) ) count ++ ; if ( count == n ) return i ; } return - 1 ; }"}
{"text":"Driver Code","code":"let n = 10 , k = 2 ; document . write ( findNthNumber ( n , k ) ) ;"}
{"text":"Javascript implementation","code":"function find_permutations ( arr ) { var cnt = 0 ; var max_ind = - 1 , min_ind = 10000000 ; var n = arr . length ; var index_of = new Map ( ) ;"}
{"text":"Save index of numbers of the array","code":"for ( var i = 0 ; i < n ; i ++ ) { index_of . set ( arr [ i ] , i + 1 ) ; } for ( var i = 1 ; i <= n ; i ++ ) {"}
{"text":"Update min and max index with the current index and check if it 's a valid permutation","code":"max_ind = Math . max ( max_ind , index_of . get ( i ) ) ; min_ind = Math . min ( min_ind , index_of . get ( i ) ) ; if ( max_ind - min_ind + 1 == i ) cnt ++ ; } return cnt ; }"}
{"text":"Driver Code","code":"var nums = [ ] ; nums . push ( 2 ) ; nums . push ( 3 ) ; nums . push ( 1 ) ; nums . push ( 5 ) ; nums . push ( 4 ) ; document . write ( find_permutations ( nums ) ) ;"}
{"text":"Javascript implementation of the approach","code":"function calgcd ( a , b ) { if ( b == 0 ) return a ; return calgcd ( b , a % b ) ; }"}
{"text":"Function to return the count of the required integers","code":"function getCount ( a , n ) {"}
{"text":"To store the gcd of the array elements","code":"let gcd = 0 ; for ( let i = 0 ; i < n ; i ++ ) gcd = calgcd ( gcd , a [ i ] ) ;"}
{"text":"To store the count of factors of the found gcd","code":"let cnt = 0 ; for ( let i = 1 ; i * i <= gcd ; i ++ ) { if ( gcd % i == 0 ) {"}
{"text":"If g is a perfect square","code":"if ( i * i == gcd ) cnt ++ ;"}
{"text":"Factors appear in pairs","code":"else cnt += 2 ; } } return cnt ; }"}
{"text":"Driver code","code":"let a = [ 4 , 16 , 1024 , 48 ] ; let n = a . length ; document . write ( getCount ( a , n ) ) ;"}
{"text":"Function to find the minimum cost of removing characters to make the string unique","code":"function delCost ( s , cost ) {"}
{"text":"stores the visited character","code":"var visited = Array ( s . length ) . fill ( false ) ;"}
{"text":"stores the answer","code":"var ans = 0 ;"}
{"text":"traverse the string","code":"for ( i = 0 ; i < s . length ; i ++ ) {"}
{"text":"if already visited","code":"if ( visited [ i ] ) { continue ; }"}
{"text":"Stores the maximum cost of removing a particular character","code":"var maxDel = 0 ;"}
{"text":"Store the total deletion cost of a particular character","code":"var totalCost = 0 ;"}
{"text":"Mark the current character visited","code":"visited [ i ] = true ;"}
{"text":"Traverse the indices of the string [ i , N - 1 ]","code":"for ( j = i ; j < s . length ; j ++ ) {"}
{"text":"If any duplicate is found","code":"if ( s . charAt ( i ) == s . charAt ( j ) ) {"}
{"text":"Update the maximum cost and total cost","code":"maxDel = Math . max ( maxDel , cost [ j ] ) ; totalCost += cost [ j ] ;"}
{"text":"Mark the current character visited","code":"visited [ j ] = true ; } }"}
{"text":"Keep the character with maximum cost and delete the rest","code":"ans += totalCost - maxDel ; }"}
{"text":"return the minimum cost","code":"return ans ; }"}
{"text":"input string","code":"var s = \" \" ;"}
{"text":"input array","code":"var cost = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;"}
{"text":"function call","code":"document . write ( delCost ( s , cost ) ) ;"}
{"text":"Function to find triplets such that replacing them with their XOR make all array elements equal","code":"function checkXOR ( arr , N ) {"}
{"text":"If N is even","code":"if ( N % 2 == 0 ) {"}
{"text":"Calculate xor of array elements","code":"let xro = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Update xor","code":"xro ^= arr [ i ] ; }"}
{"text":"If xor is not equal to 0","code":"if ( xro != 0 ) { document . write ( - 1 + \" \" ) ; return ; }"}
{"text":"Selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal","code":"for ( let i = 0 ; i < N - 3 ; i += 2 ) { document . write ( i + \" \" + ( i + 1 ) + \" \" + ( i + 2 ) + \" \" ) ; }"}
{"text":"Selecting the triplets such that all array elements can be made equal to arr [ N - 1 ]","code":"for ( let i = 0 ; i < N - 3 ; i += 2 ) { document . write ( i + \" \" + ( i + 1 ) + \" \" + ( N - 1 ) + \" \" ) ; } } else {"}
{"text":"Selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal","code":"for ( let i = 0 ; i < N - 2 ; i += 2 ) { document . write ( i + \" \" + ( i + 1 ) + \" \" + ( i + 2 ) + \" \" ) ; }"}
{"text":"Selecting the triplets such that all array elements can be made equal to arr [ N - 1 ]","code":"for ( let i = 0 ; i < N - 2 ; i += 2 ) { document . write ( i + \" \" + ( i + 1 ) + \" \" + ( N - 1 ) + \" \" ) ; } } }"}
{"text":"Given array","code":"let arr = [ 4 , 2 , 1 , 7 , 2 ] ;"}
{"text":"Size of array","code":"let N = arr . length ;"}
{"text":"Function call","code":"checkXOR ( arr , N ) ;"}
{"text":"Function to find minimum count of operations required to make all array elements even","code":"function make_array_element_even ( arr , N ) {"}
{"text":"Stores minimum count of replacements to make all array elements even","code":"let res = 0 ;"}
{"text":"Stores the count of odd continuous numbers","code":"let odd_cont_seg = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If arr [ i ] is an odd number","code":"if ( arr [ i ] % 2 == 1 ) {"}
{"text":"Update odd_cont_seg","code":"odd_cont_seg ++ ; } else { if ( odd_cont_seg > 0 ) {"}
{"text":"If odd_cont_seg is even","code":"if ( odd_cont_seg % 2 == 0 ) {"}
{"text":"Update res","code":"res += odd_cont_seg \/ 2 ; } else {"}
{"text":"Update res","code":"res += ( odd_cont_seg \/ 2 ) + 2 ; }"}
{"text":"Reset odd_cont_seg = 0","code":"odd_cont_seg = 0 ; } } }"}
{"text":"If odd_cont_seg exceeds 0","code":"if ( odd_cont_seg > 0 ) {"}
{"text":"If odd_cont_seg is even","code":"if ( odd_cont_seg % 2 == 0 ) {"}
{"text":"Update res","code":"res += odd_cont_seg \/ 2 ; } else {"}
{"text":"Update res","code":"res += odd_cont_seg \/ 2 + 2 ; } }"}
{"text":"Print the result","code":"return res ; }"}
{"text":"Driver Code","code":"let arr = [ 2 , 4 , 5 , 11 , 6 ] ; let N = arr . length ; document . write ( make_array_element_even ( arr , N ) ) ;"}
{"text":"Function to find K for which there are exactly K array elements greater than or equal to K","code":"function zvalue ( nums ) {"}
{"text":"Finding the largest array element","code":"var m = max_element ( nums ) ; var cnt = 0 ;"}
{"text":"Possible values of K","code":"for ( i = 0 ; i <= m ; i ++ ) { cnt = 0 ;"}
{"text":"Traverse the array","code":"for ( j = 0 ; j < nums . length ; j ++ ) {"}
{"text":"If current array element is greater than or equal to i","code":"if ( nums [ j ] >= i ) cnt ++ ; }"}
{"text":"If i array elements are greater than or equal to i","code":"if ( cnt == i ) return i ; }"}
{"text":"Otherwise","code":"return - 1 ; }"}
{"text":"To find maximum Element","code":"function max_element ( nums ) { var max = nums [ 0 ] ; for ( i = 1 ; i < nums . length ; i ++ ) max = Math . max ( max , nums [ i ] ) ; return max ; }"}
{"text":"Driver Code","code":"nums = [ 7 , 8 , 9 , 0 , 0 , 1 ] ; document . write ( zvalue ( nums ) ) ;"}
{"text":"Function to find the lexicographically smallest anagram of string which contains another string","code":"function lexico_smallest ( s1 , s2 ) {"}
{"text":"Initializing the map and set","code":"let M = new Map ( ) ; let S = new Set ( ) ; let pr ;"}
{"text":"Iterating over s1","code":"for ( let i = 0 ; i <= s1 . length - 1 ; ++ i ) {"}
{"text":"Storing the frequency of characters present in s1","code":"if ( M . has ( s1 [ i ] ) ) { M [ s1 [ i ] ] ++ ; } else { M [ s1 [ i ] ] = 1 ; }"}
{"text":"Storing the distinct characters present in s1","code":"S . add ( s1 [ i ] ) ; }"}
{"text":"Decreasing the frequency of characters from M that are already present in s2","code":"for ( let i = 0 ; i <= s2 . length - 1 ; ++ i ) { if ( M . has ( s2 [ i ] ) ) { M [ s2 [ i ] ] -- ; } else { M [ s2 [ i ] ] = - 1 ; } } let c = s2 [ 0 ] ; let index = 0 ; let res = \" \" ;"}
{"text":"Traversing alphabets in sorted order","code":"S . forEach ( function ( x ) {"}
{"text":"If current character of set is not equal to current character of s2","code":"if ( x != c ) { for ( let i = 1 ; i <= M [ x ] ; ++ i ) { res += x ; } } else {"}
{"text":"If element is equal to current character of s2","code":"let j = 0 ; index = res . length ;"}
{"text":"Checking for second distinct character in s2","code":"while ( s2 [ j ] == x ) { j ++ ; }"}
{"text":"s2 [ j ] will store second distinct character","code":"if ( s2 [ j ] < c ) { res += s2 ; for ( let i = 1 ; i <= M [ x ] ; ++ i ) { res += x ; } } else { for ( let i = 1 ; i <= M [ x ] ; ++ i ) { res += x ; } index += M [ x ] ; res += s2 ; } } } ) res = \" \" ; pr = [ res , index ] ;"}
{"text":"Return the answer","code":"return pr ; }"}
{"text":"Function to find the lexicographically largest anagram of string which contains another string","code":"function lexico_largest ( s1 , s2 ) {"}
{"text":"Getting the lexicographically smallest anagram","code":"let pr = lexico_smallest ( s1 , s2 ) ;"}
{"text":"d1 stores the prefix","code":"let d1 = \" \" ; for ( let i = pr [ 1 ] - 1 ; i >= 0 ; i -- ) { d1 += pr [ 0 ] [ i ] ; }"}
{"text":"d2 stores the suffix","code":"let d2 = \" \" ; for ( let i = pr [ 0 ] . length - 1 ; i >= pr [ 1 ] + s2 . length ; -- i ) { d2 += pr [ 0 ] [ i ] ; } let res = d2 + s2 + d1 ;"}
{"text":"Return the result","code":"return res ; }"}
{"text":"Given two strings","code":"let s1 = \" \" ; let s2 = \" \" ;"}
{"text":"Function Calls","code":"document . write ( lexico_smallest ( s1 , s2 ) [ 0 ] + \" \" ) ; document . write ( lexico_largest ( s1 , s2 ) ) ;"}
{"text":"Javascript implementation for the above approach","code":"var sz = 100005 ;"}
{"text":"Adjacency list to represent the tree","code":"var tree = Array . from ( Array ( sz ) , ( ) => Array ( ) )"}
{"text":"Number of vertices","code":"var n ;"}
{"text":"Mark visited \/ unvisited vertices","code":"var vis = Array ( sz ) ;"}
{"text":"Stores the subtree size of the corresponding nodes","code":"var subtreeSize = Array ( sz ) ;"}
{"text":"Function to create an edge between two vertices","code":"function addEdge ( a , b ) {"}
{"text":"Add a to b 's list","code":"tree [ a ] . push ( b ) ;"}
{"text":"Add b to a 's list","code":"tree [ b ] . push ( a ) ; }"}
{"text":"Function to perform DFS","code":"function dfs ( x ) {"}
{"text":"Mark the vertex visited","code":"vis [ x ] = true ;"}
{"text":"Include the node in the subtree","code":"subtreeSize [ x ] = 1 ;"}
{"text":"Traverse all its children","code":"tree [ x ] . forEach ( i => { if ( ! vis [ i ] ) { dfs ( i ) ; subtreeSize [ x ] += subtreeSize [ i ] ; } } ) ; }"}
{"text":"Function to print the required number of paths","code":"function countPairs ( a , b ) { var sub = Math . min ( subtreeSize [ a ] , subtreeSize [ b ] ) ; document . write ( sub * ( n - sub ) + \" \" ) ; }"}
{"text":"Number of vertices","code":"n = 6 ; addEdge ( 0 , 1 ) ; addEdge ( 0 , 2 ) ; addEdge ( 1 , 3 ) ; addEdge ( 3 , 4 ) ; addEdge ( 3 , 5 ) ;"}
{"text":"Calling modified dfs function","code":"dfs ( 0 ) ;"}
{"text":"Count pairs of vertices in the tree","code":"countPairs ( 1 , 3 ) ; countPairs ( 0 , 2 ) ;"}
{"text":"Function to find the count of desired permutations","code":"function findPermutation ( arr , N ) { var pos = arr . size + 1 ;"}
{"text":"Base case","code":"if ( pos > N ) return 1 ; var res = 0 ; for ( var i = 1 ; i <= N ; i ++ ) {"}
{"text":"If i has not been inserted","code":"if ( ! arr . has ( i ) ) {"}
{"text":"Backtrack","code":"if ( i % pos == 0 pos % i == 0 ) {"}
{"text":"Insert i","code":"arr . add ( i ) ;"}
{"text":"Recur to find valid permutations","code":"res += findPermutation ( arr , N ) ;"}
{"text":"Remove i","code":"arr . delete ( i ) ; } } }"}
{"text":"Return the final count","code":"return res ; }"}
{"text":"Driver Code","code":"var N = 5 ; var arr = new Set ( ) ; document . write ( findPermutation ( arr , N ) ) ;"}
{"text":"Function to check if it is possible to obtain sum Y from a sequence of sum X from the array arr [ ]","code":"function solve ( arr , n , X , Y ) {"}
{"text":"Store the difference","code":"var diff = Y - X ;"}
{"text":"Iterate over the array","code":"for ( var i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 1 ) { diff = diff % ( arr [ i ] - 1 ) ; } }"}
{"text":"If diff reduced to 0","code":"if ( diff == 0 ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"var arr = [ 1 , 2 , 7 , 9 , 10 ] ; var n = arr . length ; var X = 11 , Y = 13 ; solve ( arr , n , X , Y ) ;"}
{"text":"JavaScript program to implement the above approach","code":"let maxN = 100001 ;"}
{"text":"Adjacency List to store the graph","code":"let adj = new Array ( maxN ) ; adj . fill ( 0 ) ;"}
{"text":"Stores the height of each node","code":"let height = new Array ( maxN ) ; height . fill ( 0 ) ;"}
{"text":"Stores the maximum distance of a node from its ancestors","code":"let dist = new Array ( maxN ) ; dist . fill ( 0 ) ;"}
{"text":"Function to add edge between two vertices","code":"function addEdge ( u , v ) {"}
{"text":"Insert edge from u to v","code":"adj [ u ] . push ( v ) ;"}
{"text":"Insert edge from v to u","code":"adj [ v ] . push ( u ) ; }"}
{"text":"Function to calculate height of each Node","code":"function dfs1 ( cur , par ) {"}
{"text":"Iterate in the adjacency list of the current node","code":"for ( let u = 0 ; u < adj [ cur ] . length ; u ++ ) { if ( adj [ cur ] [ u ] != par ) {"}
{"text":"Dfs for child node","code":"dfs1 ( adj [ cur ] [ u ] , cur ) ;"}
{"text":"Calculate height of nodes","code":"height [ cur ] = Math . max ( height [ cur ] , height [ adj [ cur ] [ u ] ] ) ; } }"}
{"text":"Increase height","code":"height [ cur ] += 1 ; }"}
{"text":"Function to calculate the maximum distance of a node from its ancestor","code":"function dfs2 ( cur , par ) { let max1 = 0 ; let max2 = 0 ;"}
{"text":"Iterate in the adjacency list of the current node","code":"for ( let u = 0 ; u < adj [ cur ] . length ; u ++ ) { if ( adj [ cur ] [ u ] != par ) {"}
{"text":"Find two children with maximum heights","code":"if ( height [ adj [ cur ] [ u ] ] >= max1 ) { max2 = max1 ; max1 = height [ adj [ cur ] [ u ] ] ; } else if ( height [ adj [ cur ] [ u ] ] > max2 ) { max2 = height [ adj [ cur ] [ u ] ] ; } } } let sum = 0 ; for ( let u = 0 ; u < adj [ cur ] . length ; u ++ ) { if ( adj [ cur ] [ u ] != par ) {"}
{"text":"Calculate the maximum distance with ancestor for every node","code":"sum = ( ( max1 == height [ adj [ cur ] [ u ] ] ) ? max2 : max1 ) ; if ( max1 == height [ adj [ cur ] [ u ] ] ) dist [ adj [ cur ] [ u ] ] = 1 + Math . max ( 1 + max2 , dist [ cur ] ) ; else dist [ adj [ cur ] [ u ] ] = 1 + Math . max ( 1 + max1 , dist [ cur ] ) ;"}
{"text":"Calculating for children","code":"dfs2 ( adj [ cur ] [ u ] , cur ) ; } } }"}
{"text":"Driver Code","code":"let n = 6 ; for ( let i = 0 ; i < adj . length ; i ++ ) adj [ i ] = [ ] ; addEdge ( 1 , 2 ) ; addEdge ( 2 , 3 ) ; addEdge ( 2 , 4 ) ; addEdge ( 2 , 5 ) ; addEdge ( 5 , 6 ) ;"}
{"text":"Calculate height of nodes of the tree","code":"dfs1 ( 1 , 0 ) ;"}
{"text":"Calculate the maximum distance with ancestors","code":"dfs2 ( 1 , 0 ) ;"}
{"text":"Print the maximum of the two distances from each node","code":"for ( let i = 1 ; i <= n ; i ++ ) document . write ( ( Math . max ( dist [ i ] , height [ i ] ) - 1 ) + \" \" ) ;"}
{"text":"Javascript program to find middle of three distinct numbers","code":"function middleOfThree ( a , b , c ) {"}
{"text":"Function to find the middle of three number","code":"function middleOfThree ( $a , $b , $c ) {"}
{"text":"Checking for b","code":"if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;"}
{"text":"Checking for a","code":"else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return a ; else return c ; }"}
{"text":"driver code","code":"let a = 20 , b = 30 , c = 40 ; document . write ( middleOfThree ( a , b , c ) ) ;"}
{"text":"Function to implement the selection sort","code":"function selectionSort ( arr , n ) { let i , j , min_idx ;"}
{"text":"One by one move boundary of unsorted subarray","code":"for ( i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Find the minimum element in unsorted array","code":"min_idx = i ; for ( j = i + 1 ; j < n ; j ++ ) if ( arr [ j ] < arr [ min_idx ] ) min_idx = j ;"}
{"text":"Swap the found minimum element with the first element","code":"let temp = arr [ min_idx ] ; arr [ min_idx ] = arr [ i ] ; arr [ i ] = temp ; } }"}
{"text":"Function to print an array","code":"function printArray ( arr , size ) { let i ; for ( i = 0 ; i < size ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; } document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 64 , 25 , 12 , 22 , 11 ] ; let n = arr . length ;"}
{"text":"Function Call","code":"selectionSort ( arr , n ) ; document . write ( \" \" ) ;"}
{"text":"Print the array","code":"printArray ( arr , n ) ;"}
{"text":"Javascript program to implement the above approach","code":"function checkStr1CanConStr2 ( str1 , str2 ) {"}
{"text":"Stores length of str1","code":"var N = str1 . length ;"}
{"text":"Stores length of str2","code":"var M = str2 . length ;"}
{"text":"Stores distinct characters of str1","code":"var st1 = new Set ( ) ;"}
{"text":"Stores distinct characters of str2","code":"var st2 = new Set ( ) ;"}
{"text":"Stores frequency of each character of str1","code":"var hash1 = Array ( 256 ) . fill ( 0 ) ;"}
{"text":"Traverse the string str1","code":"for ( var i = 0 ; i < N ; i ++ ) {"}
{"text":"Update frequency of str1 [ i ]","code":"hash1 [ str1 [ i ] . charCodeAt ( 0 ) ] ++ ; }"}
{"text":"Traverse the string str1","code":"for ( var i = 0 ; i < N ; i ++ ) {"}
{"text":"Insert str1 [ i ] into st1","code":"st1 . add ( str1 [ i ] ) ; }"}
{"text":"Traverse the string str2","code":"for ( var i = 0 ; i < M ; i ++ ) {"}
{"text":"Insert str1 [ i ] into st1","code":"st2 . add ( str2 [ i ] ) ; }"}
{"text":"If distinct characters in str1 and str2 are not same","code":"if ( st1 . size != st2 . size ) { return false ; }"}
{"text":"Stores frequency of each character of str2","code":"var hash2 = Array ( 256 ) . fill ( 0 ) ;"}
{"text":"Traverse the string str2","code":"for ( var i = 0 ; i < M ; i ++ ) {"}
{"text":"Update frequency of str2 [ i ]","code":"hash2 [ str2 [ i ] . charCodeAt ( 0 ) ] ++ ; }"}
{"text":"Sort hash1 [ ] array","code":"hash1 . sort ( ( a , b ) => a - b ) ;"}
{"text":"Sort hash2 [ ] array","code":"hash2 . sort ( ( a , b ) => a - b ) ;"}
{"text":"Traverse hash1 [ ] and hash2 [ ]","code":"for ( var i = 0 ; i < 256 ; i ++ ) {"}
{"text":"If hash1 [ i ] not equal to hash2 [ i ]","code":"if ( hash1 [ i ] != hash2 [ i ] ) { return false ; } } return true ; }"}
{"text":"Driver Code","code":"var str1 = \" \" ; var str2 = \" \" ; if ( checkStr1CanConStr2 ( str1 , str2 ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to sort the elements of the array from index a to index b","code":"function swap ( arr , xp , yp ) { var temp = arr [ xp ] ; arr [ xp ] = arr [ yp ] ; arr [ yp ] = temp ; }"}
{"text":"Function to sort the elements of the array from index a to index b","code":"function partSort ( arr , N , a , b ) {"}
{"text":"Variables to store start and end of the index range","code":"var l = Math . min ( a , b ) ; var r = Math . max ( a , b ) ;"}
{"text":"Sort the subarray from arr [ l ] to arr [ r ] . sort ( arr , l , r + 1 ) ;","code":"var i , j ; for ( i = l ; i < r + 1 + 1 ; i ++ ) { for ( j = l ; j < r - i + 1 ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) { swap ( arr , j , j + 1 ) ; } } }"}
{"text":"Prvar the modified array","code":"for ( i = 0 ; i < N ; i ++ ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"var arr = [ 7 , 8 , 4 , 5 , 2 ] ; var a = 1 , b = 4 ; var N = arr . length ; partSort ( arr , N , a , b ) ;"}
{"text":"A Dynamic Programming based solution to find min cost to reach station N - 1 from station 0.","code":"let INF = Number . MAX_VALUE , N = 4 ;"}
{"text":"A recursive function to find the shortest path from source ' s ' to destination ' d ' . This function returns the smallest possible cost to reach station N - 1 from station 0.","code":"function minCost ( cost ) {"}
{"text":"dist [ i ] stores minimum cost to reach station i from station 0.","code":"let dist = new Array ( N ) ; dist . fill ( 0 ) ; for ( let i = 0 ; i < N ; i ++ ) dist [ i ] = INF ; dist [ 0 ] = 0 ;"}
{"text":"Go through every station and check if using it as an intermediate station gives better path","code":"for ( let i = 0 ; i < N ; i ++ ) for ( let j = i + 1 ; j < N ; j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ] ; return dist [ N - 1 ] ; }"}
{"text":"Driver program to test above function","code":"let cost = [ [ 0 , 15 , 80 , 90 ] , [ INF , 0 , 40 , 50 ] , [ INF , INF , 0 , 70 ] , [ INF , INF , INF , 0 ] ] ; document . write ( \" \" + \" \" + N + \" \" + minCost ( cost ) ) ;"}
{"text":"Return the Number of ways from a node to make a loop of size K in undirected complete connected graph of N nodes","code":"function numOfways ( n , k ) { let p = 1 ; if ( k % 2 != 0 ) p = - 1 ; return ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) \/ n ; }"}
{"text":"Driver code","code":"let n = 4 , k = 2 ; document . write ( numOfways ( n , k ) ) ;"}
{"text":"function that return the largest alphabet .","code":"function largest_alphabet ( a , n ) {"}
{"text":"initializing max alphabet to ' a '","code":"let max = ' ' ;"}
{"text":"find largest alphabet","code":"for ( let i = 0 ; i < n ; i ++ ) if ( a [ i ] . charCodeAt ( ) > max . charCodeAt ( ) ) max = a [ i ] ;"}
{"text":"returning largest element","code":"return max ; }"}
{"text":"function that return the smallest alphabet","code":"function smallest_alphabet ( a , n ) {"}
{"text":"initializing smallest alphabet to ' z '","code":"let min = ' ' ;"}
{"text":"find smallest alphabet","code":"for ( let i = 0 ; i < n - 1 ; i ++ ) if ( a [ i ] . charCodeAt ( ) < min . charCodeAt ( ) ) min = a [ i ] ;"}
{"text":"returning smallest alphabet","code":"return min ; }"}
{"text":"Input String","code":"let a = \" \" ;"}
{"text":"Calculating size of the string","code":"let size = a . length ;"}
{"text":"calling functions and print returned value","code":"document . write ( \" \" ) ; document . write ( largest_alphabet ( a , size ) + \" \" ) ; document . write ( smallest_alphabet ( a , size ) ) ;"}
{"text":"Returns maximum possible palindrome using k changes","code":"function maximumPalinUsingKChanges ( str , k ) { let palin = str . split ( \" \" ) ; let ans = \" \" ;"}
{"text":"Initialize l and r by leftmost and rightmost ends","code":"let l = 0 ; let r = str . length - 1 ;"}
{"text":"First try to make String palindrome","code":"while ( l < r ) {"}
{"text":"Replace left and right character by maximum of both","code":"if ( str [ l ] != str [ r ] ) { palin [ l ] = palin [ r ] = String . fromCharCode ( Math . max ( str . charAt ( l ) , str . charAt ( r ) ) ) ; k -- ; } l ++ ; r -- ; }"}
{"text":"If k is negative then we can 't make  String palindrome","code":"if ( k < 0 ) { return \" \" ; } l = 0 ; r = str . length - 1 ; while ( l <= r ) {"}
{"text":"At mid character , if K > 0 then change it to 9","code":"if ( l == r ) { if ( k > 0 ) { palin [ l ] = ' ' ; } }"}
{"text":"If character at lth ( same as rth ) is less than 9","code":"if ( palin [ l ] < ' ' ) {"}
{"text":"If none of them is changed in the previous loop then subtract 2 from K and convert both to 9","code":"if ( k >= 2 && palin [ l ] == str [ l ] && palin [ r ] == str [ r ] ) { k -= 2 ; palin [ l ] = palin [ r ] = ' ' ; }"}
{"text":"If one of them is changed in the previous loop then subtract 1 from K ( 1 more is subtracted already ) and make them 9","code":"else if ( k >= 1 && ( palin [ l ] != str [ l ] palin [ r ] != str [ r ] ) ) { k -- ; palin [ l ] = palin [ r ] = ' ' ; } } l ++ ; r -- ; } for ( let i = 0 ; i < palin . length ; i ++ ) ans += palin [ i ] ; return ans ; }"}
{"text":"Driver code to test above methods","code":"let str = \" \" ; let k = 3 ; document . write ( maximumPalinUsingKChanges ( str , k ) ) ;"}
{"text":"Function to find the number of triplets whose Bitwise AND is 0.","code":"function countTriplets ( A ) {"}
{"text":"Stores the count of triplets having bitwise AND equal to 0","code":"var cnt = 0 ;"}
{"text":"Stores frequencies of all possible A [ i ] & A [ j ]","code":"var tuples = new Map ( ) ;"}
{"text":"Traverse the array","code":"A . forEach ( a => {"}
{"text":"Update frequency of Bitwise AND of all array elements with a","code":"A . forEach ( b => { if ( tuples . has ( a & b ) ) tuples . set ( a & b , tuples . get ( a & b ) + 1 ) else tuples . set ( a & b , 1 ) } ) ; } ) ;"}
{"text":"Traverse the array","code":"A . forEach ( a => {"}
{"text":"Update frequency of Bitwise AND of all array elements with a","code":"tuples . forEach ( ( value , key ) => {"}
{"text":"If bitwise AND of triplet is zero , increment cnt","code":"if ( ( key & a ) == 0 ) cnt += value ; } ) ; } ) ;"}
{"text":"Return the number of triplets whose Bitwise AND is 0.","code":"return cnt ; }"}
{"text":"Input Array","code":"var A = [ 2 , 1 , 3 ] ;"}
{"text":"Function Call","code":"document . write ( countTriplets ( A ) ) ;"}
{"text":"Javascript implementation of above approach","code":"var min = 10000 ;"}
{"text":"Recursive function to calculate minimum adjacent pairs with different parity","code":"function parity ( even , odd , v , i ) {"}
{"text":"If all the numbers are placed","code":"if ( i == v . length even . length == 0 && odd . length == 0 ) { var count = 0 ; for ( var j = 0 ; j < v . length - 1 ; j ++ ) { if ( v [ j ] % 2 != v [ j + 1 ] % 2 ) count ++ ; } if ( count < min ) min = count ; return min ; }"}
{"text":"If replacement is not required","code":"if ( v [ i ] != - 1 ) min = parity ( even , odd , v , i + 1 ) ;"}
{"text":"If replacement is required","code":"else { if ( even . length != 0 ) { var x = even . back ( ) ; even . pop ( ) ; v [ i ] = x ; min = parity ( even , odd , v , i + 1 ) ;"}
{"text":"backtracking","code":"even . push ( x ) ; } if ( odd . length != 0 ) { var x = odd [ odd . length - 1 ] ; odd . pop ( ) ; v [ i ] = x ; min = parity ( even , odd , v , i + 1 ) ;"}
{"text":"backtracking","code":"odd . push ( x ) ; } } return min ; }"}
{"text":"Function to display the minimum number of adjacent elements with different parity","code":"function minDiffParity ( v , n ) {"}
{"text":"Store no of even numbers not present in the array","code":"var even = [ ] ;"}
{"text":"Store no of odd numbers not present in the array","code":"var odd = [ ] ; var m = new Map ( ) ; for ( var i = 1 ; i <= n ; i ++ ) m . set ( i , 1 ) ; for ( var i = 0 ; i < v . length ; i ++ ) {"}
{"text":"Erase exisiting numbers","code":"if ( v [ i ] != - 1 ) m . delete ( v [ i ] ) ; }"}
{"text":"Store non - exisiting even and odd numbers","code":"m . forEach ( ( value , key ) => { if ( i . first % 2 == 0 ) even . push ( key ) ; else odd . push ( key ) ; } ) ; min = parity ( even , odd , v , 0 ) ; document . write ( min ) ; }"}
{"text":"Driver code","code":"var n = 8 ; var v = [ 2 , 1 , 4 , - 1 , - 1 , 6 , - 1 , 8 ] ; minDiffParity ( v , n ) ;"}
{"text":"JavaScript implementation of the approach","code":"let MAX = 100005 ; let adjacent = [ ] ; let visited = new Array ( MAX ) ;"}
{"text":"To store the required nodes","code":"let startnode , endnode , thirdnode ; let maxi = - 1 , N ;"}
{"text":"Parent array to retrace the nodes","code":"let parent = new Array ( MAX ) ;"}
{"text":"Visited array to prevent DFS in direction on Diameter path","code":"let vis = new Array ( MAX ) ;"}
{"text":"DFS function to find the startnode","code":"function dfs ( u , count ) { visited [ u ] = true ; let temp = 0 ; for ( let i = 0 ; i < adjacent [ u ] . length ; i ++ ) { if ( ! visited [ adjacent [ u ] [ i ] ] ) { temp ++ ; dfs ( adjacent [ u ] [ i ] , count + 1 ) ; } } if ( temp == 0 ) { if ( maxi < count ) { maxi = count ; startnode = u ; } } }"}
{"text":"DFS function to find the endnode of diameter and maintain the parent array","code":"function dfs1 ( u , count ) { visited [ u ] = true ; let temp = 0 ; for ( let i = 0 ; i < adjacent [ u ] . length ; i ++ ) { if ( ! visited [ adjacent [ u ] [ i ] ] ) { temp ++ ; parent [ adjacent [ u ] [ i ] ] = u ; dfs1 ( adjacent [ u ] [ i ] , count + 1 ) ; } } if ( temp == 0 ) { if ( maxi < count ) { maxi = count ; endnode = u ; } } }"}
{"text":"DFS function to find the end node of the Longest Branch to Diameter","code":"function dfs2 ( u , count ) { visited [ u ] = true ; let temp = 0 ; for ( let i = 0 ; i < adjacent [ u ] . length ; i ++ ) { if ( ! visited [ adjacent [ u ] [ i ] ] && ! vis [ adjacent [ u ] [ i ] ] ) { temp ++ ; dfs2 ( adjacent [ u ] [ i ] , count + 1 ) ; } } if ( temp == 0 ) { if ( maxi < count ) { maxi = count ; thirdnode = u ; } } }"}
{"text":"Function to find the required nodes","code":"function findNodes ( ) {"}
{"text":"To find start node of diameter","code":"dfs ( 1 , 0 ) ; for ( let i = 0 ; i <= N ; i ++ ) visited [ i ] = false ; maxi = - 1 ;"}
{"text":"To find end node of diameter","code":"dfs1 ( startnode , 0 ) ; for ( let i = 0 ; i <= N ; i ++ ) visited [ i ] = false ;"}
{"text":"x is the end node of diameter","code":"let x = endnode ; vis [ startnode ] = true ;"}
{"text":"Mark all the nodes on diameter using back tracking","code":"while ( x != startnode ) { vis [ x ] = true ; x = parent [ x ] ; } maxi = - 1 ;"}
{"text":"Find the end node of longest branch to diameter","code":"for ( let i = 1 ; i <= N ; i ++ ) { if ( vis [ i ] ) dfs2 ( i , 0 ) ; } }"}
{"text":"Driver code","code":"for ( let i = 0 ; i < MAX ; i ++ ) adjacent . push ( [ ] ) ; N = 4 ; adjacent [ 1 ] . push ( 2 ) ; adjacent [ 2 ] . push ( 1 ) ; adjacent [ 1 ] . push ( 3 ) ; adjacent [ 3 ] . push ( 1 ) ; adjacent [ 1 ] . push ( 4 ) ; adjacent [ 4 ] . push ( 1 ) ; findNodes ( ) ; document . write ( \" \" + startnode + \" \" + endnode + \" \" + thirdnode + \" \" ) ;"}
{"text":"javascript program to find percentage increase in the volume of the sphere if radius is increased by a given percentage","code":"function newvol ( x ) { document . write ( \" \" + \" \" + ( Math . pow ( x , 3 ) \/ 10000 + 3 * x + ( 3 * Math . pow ( x , 2 ) ) \/ 100 ) + \" \" ) ; }"}
{"text":"Driver code","code":"var x = 10 ; newvol ( x ) ;"}
{"text":"Function to find the length of the chord","code":"function length_of_chord ( r , x ) { document . write ( \" \" + \" \" + 2 * r * Math . sin ( x * ( 3.14 \/ 180 ) ) + \" \" ) ; }"}
{"text":"Driver code","code":"let r = 4 , x = 63 ; length_of_chord ( r , x ) ;"}
{"text":"Function to find the area of the square","code":"function area ( a ) {"}
{"text":"a cannot be negative","code":"if ( a < 0 ) return - 1 ;"}
{"text":"area of the square","code":"var area = Math . sqrt ( a ) \/ 6 ; return area ; }"}
{"text":"Driver code","code":"var a = 10 ; document . write ( area ( a ) . toFixed ( 6 ) ) ;"}
{"text":"Function to find the length","code":"function longestRodInCuboid ( length , breadth , height ) { let result ; let temp ;"}
{"text":"temporary variable to hold the intermediate result","code":"temp = length * length + breadth * breadth + height * height ;"}
{"text":"length of longest rod is calculated using square root function","code":"result = Math . sqrt ( temp ) ; return result ; }"}
{"text":"Driver code","code":"let length = 12 , breadth = 9 , height = 8 ;"}
{"text":"calling longestRodInCuboid ( ) function to get the length of longest rod","code":"document . write ( longestRodInCuboid ( length , breadth , height ) ) ;"}
{"text":"function to Check whether a given point lies inside or on the rectangle or not","code":"function LiesInsieRectangle ( a , b , x , y ) { if ( x - y - b <= 0 && x - y + b >= 0 && x + y - 2 * a + b <= 0 && x + y - b >= 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"let a = 7 , b = 2 , x = 4 , y = 5 ; if ( LiesInsieRectangle ( a , b , x , y ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Return the maximum volume .","code":"function maxvolume ( s ) { let maxvalue = 0 ;"}
{"text":"for length","code":"for ( let i = 1 ; i <= s - 2 ; i ++ ) {"}
{"text":"for breadth","code":"for ( let j = 1 ; j <= s - 1 ; j ++ ) {"}
{"text":"for height","code":"let k = s - i - j ;"}
{"text":"calculating maximum volume .","code":"maxvalue = Math . max ( maxvalue , i * j * k ) ; } } return maxvalue ; }"}
{"text":"Driver code","code":"let s = 8 ; document . write ( maxvolume ( s ) ) ;"}
{"text":"Return the maximum volume .","code":"function maxvolume ( s ) {"}
{"text":"finding length","code":"let length = parseInt ( s \/ 3 ) ; s -= length ;"}
{"text":"finding breadth","code":"let breadth = parseInt ( s \/ 2 ) ;"}
{"text":"finding height","code":"let height = s - breadth ; return length * breadth * height ; }"}
{"text":"Driven Program","code":"let s = 8 ; document . write ( maxvolume ( s ) ) ;"}
{"text":"function for calculating area of the hexagon .","code":"function hexagonArea ( s ) { return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) \/ 2 ) ; }"}
{"text":"Length of a side","code":"let s = 4 ; document . write ( \" \" + hexagonArea ( s ) ) ;"}
{"text":"function for finding max squares","code":"function maxSquare ( b , m ) {"}
{"text":"return in O ( 1 ) with derived formula","code":"return ( b \/ m - 1 ) * ( b \/ m ) \/ 2 ; a }"}
{"text":"Driver program","code":"let b = 10 , m = 2 ; document . write ( maxSquare ( b , m ) ) ;"}
{"text":"Prints three sides of a right triangle from given area and hypotenuse if triangle is possible , else prints - 1.","code":"function findRightAngle ( A , H ) {"}
{"text":"Descriminant of the equation","code":"let D = Math . pow ( H , 4 ) - 16 * A * A ; if ( D >= 0 ) {"}
{"text":"applying the linear equation formula to find both the roots","code":"let root1 = ( H * H + Math . sqrt ( D ) ) \/ 2 ; let root2 = ( H * H - Math . sqrt ( D ) ) \/ 2 ; let a = Math . sqrt ( root1 ) ; let b = Math . sqrt ( root2 ) ; if ( b >= a ) document . write ( a + \" \" + b + \" \" + H + \" \" ) ; else document . write ( b + \" \" + a + \" \" + H + \" \" ) ; } else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"findRightAngle ( 6 , 5 ) ;"}
{"text":"Program to count number of 2 x 2 squares in a right isosceles triangle","code":"function numberOfSquares ( base ) {"}
{"text":"Removing the extra part we would always need","code":"base = ( base - 2 ) ;"}
{"text":"Since each square has base of length of 2","code":"base = Math . floor ( base \/ 2 ) ; return base * ( base + 1 ) \/ 2 ; }"}
{"text":"Driver code","code":"let base = 8 ; document . write ( numberOfSquares ( base ) ) ;"}
{"text":"Function to find the Bitwise OR of Bitwise AND of all possible subarrays after performing the every query","code":"function performQuery ( arr , Q ) {"}
{"text":"Traversing each pair of the query","code":"for ( let i = 0 ; i < Q . length ; i ++ ) {"}
{"text":"Stores the Bitwise OR","code":"let or = 0 ;"}
{"text":"Updating the array","code":"let x = Q [ i ] [ 0 ] ; arr [ x - 1 ] = Q [ i ] [ 1 ] ;"}
{"text":"Find the Bitwise OR of new updated array","code":"for ( let j = 0 ; j < arr . length ; j ++ ) { or = or | arr [ j ] ; }"}
{"text":"Print the ans","code":"document . write ( or + \" \" ) ; } }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 3 ] ; let Q = [ [ 1 , 4 ] , [ 3 , 0 ] ] ; performQuery ( arr , Q ) ;"}
{"text":"Function to form the smallest number possible","code":"function smallest ( k , d ) { let cnt = 1 ; let m = d % k ;"}
{"text":"Array to mark the remainders counted already","code":"let v = new Array ( k ) . fill ( 0 ) ; v [ m ] = 1 ;"}
{"text":"Iterate over the range","code":"while ( 1 ) { if ( m == 0 ) return cnt ; m = ( ( ( m * ( 10 % k ) ) % k ) + ( d % k ) ) % k ;"}
{"text":"If that remainder is already found , return - 1","code":"if ( v [ m ] == 1 ) return - 1 ; v [ m ] = 1 ; cnt ++ ; } return - 1 ; }"}
{"text":"Driver Code","code":"let d = 1 ; let k = 41 ; document . write ( smallest ( k , d ) ) ;"}
{"text":"function to find fibonacci number","code":"function fib ( n ) { if ( n <= 1 ) return n ; return fib ( n - 1 ) + fib ( n - 2 ) ; }"}
{"text":"function for finding number of vertices in fibonacci cube graph","code":"function findVertices ( n ) {"}
{"text":"return fibonacci number for f ( n + 2 )","code":"return fib ( n + 2 ) ; }"}
{"text":"driver program","code":"var n = 3 ; document . write ( findVertices ( n ) ) ;"}
{"text":"Function to check if it is possible to modify the array such that there is no common factor between array elements except 1","code":"function checkCommonDivisor ( arr , N , X ) {"}
{"text":"Stores GCD of the array","code":"var G = 0 ;"}
{"text":"Calculate GCD of the array","code":"for ( i = 0 ; i < N ; i ++ ) { G = gcd ( G , arr [ i ] ) ; } var copy_G = G ; for ( divisor = 2 ; divisor <= X ; divisor ++ ) {"}
{"text":"If the current divisor is smaller than X","code":"while ( G % divisor == 0 ) {"}
{"text":"Divide GCD by the current divisor","code":"G = G \/ divisor ; } }"}
{"text":"If possible","code":"if ( G <= X ) { document . write ( \" \" ) ;"}
{"text":"Prvar the modified array","code":"for ( i = 0 ; i < N ; i ++ ) document . write ( ( arr [ i ] \/ copy_G ) + \" \" ) ; document . write ( ) ; }"}
{"text":"Otherwise","code":"else document . write ( \" \" ) ; }"}
{"text":"Calculating gcd","code":"function gcd ( a , b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; }"}
{"text":"Given array","code":"var arr = [ 6 , 15 , 6 ] ; var X = 6 ;"}
{"text":"Size of the array","code":"var N = arr . length ; checkCommonDivisor ( arr , N , X ) ;"}
{"text":"Create row and col to traverse rows and columns","code":"function printSpiral ( size ) { let row = 0 , col = 0 ; let boundary = size - 1 ; let sizeLeft = size - 1 ; let flag = 1 ;"}
{"text":"Variable to determine the movement r = right , l = left , d = down , u = upper","code":"let move = ' ' ;"}
{"text":"Array for matrix","code":"let matrix = new Array ( size ) ; for ( let i = 0 ; i < size ; i ++ ) { matrix [ i ] = new Array ( size ) . fill ( 0 ) ; } for ( let i = 1 ; i < size * size + 1 ; i ++ ) {"}
{"text":"Assign the value","code":"matrix [ row ] [ col ] = i ;"}
{"text":"switch - case to determine the next index","code":"switch ( move ) {"}
{"text":"If right , go right","code":"case ' ' : col += 1 ; break ;"}
{"text":"If left , go left","code":"case ' ' : col -= 1 ; break ;"}
{"text":"If up , go up","code":"case ' ' : row -= 1 ; break ;"}
{"text":"If down , go down","code":"case ' ' : row += 1 ; break ; }"}
{"text":"Check if the matrix has reached array boundary","code":"if ( i == boundary ) {"}
{"text":"Add the left size for the next boundary","code":"boundary += sizeLeft ;"}
{"text":"If 2 rotations has been made , decrease the size left by 1","code":"if ( flag != 2 ) { flag = 2 ; } else { flag = 1 ; sizeLeft -= 1 ; }"}
{"text":"switch - case to rotate the movement","code":"switch ( move ) {"}
{"text":"If right , rotate to down","code":"case ' ' : move = ' ' ; break ;"}
{"text":"If down , rotate to left","code":"case ' ' : move = ' ' ; break ;"}
{"text":"If left , rotate to up","code":"case ' ' : move = ' ' ; break ;"}
{"text":"If up , rotate to right","code":"case ' ' : move = ' ' ; break ; } } }"}
{"text":"Print the matrix","code":"for ( row = 0 ; row < size ; row ++ ) { for ( col = 0 ; col < size ; col ++ ) { let n = matrix [ row ] [ col ] ; if ( n < 10 ) document . write ( n + \" \" ) ; else document . write ( n + \" \" ) ; } document . write ( \" \" ) ; } }"}
{"text":"Get the size of size","code":"let size = 5 ;"}
{"text":"Print the Spiral Pattern","code":"printSpiral ( size ) ;"}
{"text":"a node of the doubly linked list","code":"class Node { constructor ( ) { this . data = 0 ; this . prev = null ; this . next = null ; } }"}
{"text":"Function to reverse a Doubly Linked List","code":"function reverse ( head_ref ) { var temp = null ; var current = head_ref ;"}
{"text":"swap next and prev for all nodes of doubly linked list","code":"while ( current != null ) { temp = current . prev ; current . prev = current . next ; current . next = temp ; current = current . prev ; }"}
{"text":"Before changing head , check for the cases like empty list and list with only one node","code":"if ( temp != null ) head_ref = temp . prev ; return head_ref ; }"}
{"text":"Function to merge two sorted doubly linked lists","code":"function merge ( first , second ) {"}
{"text":"If first linked list is empty","code":"if ( first == null ) return second ;"}
{"text":"If second linked list is empty","code":"if ( second == null ) return first ;"}
{"text":"Pick the smaller value","code":"if ( first . data < second . data ) { first . next = merge ( first . next , second ) ; first . next . prev = first ; first . prev = null ; return first ; } else { second . next = merge ( first , second . next ) ; second . next . prev = second ; second . prev = null ; return second ; } }"}
{"text":"function to sort a biotonic doubly linked list","code":"function sort ( head ) {"}
{"text":"if list is empty or if it contains a single node only","code":"if ( head == null head . next == null ) return head ; var current = head . next ; while ( current != null ) {"}
{"text":"if true , then ' current ' is the first node which is smaller than its previous node","code":"if ( current . data < current . prev . data ) break ;"}
{"text":"move to the next node","code":"current = current . next ; }"}
{"text":"if true , then list is already sorted","code":"if ( current == null ) return head ;"}
{"text":"spilt into two lists , one starting with ' head ' and other starting with ' current '","code":"current . prev . next = null ; current . prev = null ;"}
{"text":"reverse the list starting with ' current '","code":"current = reverse ( current ) ;"}
{"text":"merge the two lists and return the final merged doubly linked list","code":"return merge ( head , current ) ; }"}
{"text":"Function to insert a node at the beginning of the Doubly Linked List","code":"function push ( head_ref , new_data ) {"}
{"text":"allocate node","code":"var new_node = new Node ( ) ;"}
{"text":"put in the data","code":"new_node . data = new_data ;"}
{"text":"since we are adding at the beginning , prev is always null","code":"new_node . prev = null ;"}
{"text":"link the old list off the new node","code":"new_node . next = ( head_ref ) ;"}
{"text":"change prev of head node to new node","code":"if ( ( head_ref ) != null ) ( head_ref ) . prev = new_node ;"}
{"text":"move the head to povar to the new node","code":"( head_ref ) = new_node ; return head_ref ; }"}
{"text":"Function to prvar nodes in a given doubly linked list","code":"function printList ( head ) {"}
{"text":"if list is empty","code":"if ( head == null ) document . write ( \" \" ) ; while ( head != null ) { document . write ( head . data + \" \" ) ; head = head . next ; } }"}
{"text":"Driver Code","code":"var head = null ;"}
{"text":"Create the doubly linked list : 2 < .5 < .7 < .12 < .10 < .6 < .4 < .1","code":"head = push ( head , 1 ) ; head = push ( head , 4 ) ; head = push ( head , 6 ) ; head = push ( head , 10 ) ; head = push ( head , 12 ) ; head = push ( head , 7 ) ; head = push ( head , 5 ) ; head = push ( head , 2 ) ; document . write ( \" \" ) ; printList ( head ) ;"}
{"text":"sort the biotonic DLL","code":"head = sort ( head ) ; document . write ( \" \" ) ; printList ( head ) ;"}
{"text":"A linked list node","code":"class Node {"}
{"text":"Function to add new node to the List","code":"constructor ( key ) { this . data = key ; this . next = null ; } }"}
{"text":"utility function to print linked list","code":"function printlist ( head ) { if ( head == null ) { document . write ( \" \" ) ; return ; } while ( head != null ) { document . write ( head . data + \" \" ) ; if ( head . next != null ) document . write ( \" \" ) ; head = head . next ; } document . write ( \" \" ) ; }"}
{"text":"utility function for checking vowel","code":"function isVowel ( x ) { return ( x == ' ' x == ' ' x == ' ' x == ' ' x == ' ' ) ; }"}
{"text":"function to arrange consonants and vowels nodes","code":"function arrange ( head ) { let newHead = head ;"}
{"text":"for keep track of vowel","code":"let latestVowel ; let curr = head ;"}
{"text":"list is empty","code":"if ( head == null ) return null ;"}
{"text":"We need to discover the first vowel in the list . It is going to be the returned head , and also the initial latestVowel .","code":"if ( isVowel ( head . data ) == true )"}
{"text":"first element is a vowel . It will also be the new head and the initial latestVowel ;","code":"latestVowel = head ; else {"}
{"text":"First element is not a vowel . Iterate through the list until we find a vowel . Note that curr points to the element * before * the element with the vowel .","code":"while ( curr . next != null && ! isVowel ( curr . next . data ) ) curr = curr . next ;"}
{"text":"This is an edge case where there are only consonants in the list .","code":"if ( curr . next == null ) return head ;"}
{"text":"Set the initial latestVowel and the new head to the vowel item that we found . Relink the chain of consonants after that vowel item : old_head_consonant -> consonant1 -> consonant2 -> vowel -> rest_of_list becomes vowel -> old_head_consonant -> consonant1 -> consonant2 -> rest_of_list","code":"latestVowel = newHead = curr . next ; curr . next = curr . next . next ; latestVowel . next = head ; }"}
{"text":"Now traverse the list . Curr is always the item * before * the one we are checking , so that we can use it to re - link .","code":"while ( curr != null && curr . next != null ) { if ( isVowel ( curr . next . data ) == true ) {"}
{"text":"The next discovered item is a vowel","code":"if ( curr == latestVowel ) {"}
{"text":"If it comes directly after the previous vowel , we don 't need to  move items around, just mark the  new latestVowel and advance curr.","code":"latestVowel = curr = curr . next ; } else {"}
{"text":"But if it comes after an intervening chain of consonants , we need to chain the newly discovered vowel right after the old vowel . Curr is not changed as after the re - linking it will have a new next , that has not been checked yet , and we always keep curr at one before the next to check .","code":"let temp = latestVowel . next ;"}
{"text":"Chain in new vowel","code":"latestVowel . next = curr . next ;"}
{"text":"Advance latestVowel","code":"latestVowel = latestVowel . next ;"}
{"text":"Remove found vowel from previous place","code":"curr . next = curr . next . next ;"}
{"text":"Re - link chain of consonants after latestVowel","code":"latestVowel . next = temp ; } } else {"}
{"text":"No vowel in the next element , advance curr .","code":"curr = curr . next ; } } return newHead ; }"}
{"text":"Driver code","code":"let head = new Node ( ' ' ) ; head . next = new Node ( ' ' ) ; head . next . next = new Node ( ' ' ) ; head . next . next . next = new Node ( ' ' ) ; head . next . next . next . next = new Node ( ' ' ) ; head . next . next . next . next . next = new Node ( ' ' ) ; head . next . next . next . next . next . next = new Node ( ' ' ) ; head . next . next . next . next . next . next . next = new Node ( ' ' ) ; document . write ( \" \" ) ; printlist ( head ) ; head = arrange ( head ) ; document . write ( \" \" ) ; printlist ( head ) ;"}
{"text":"Node structure","code":"class Node { constructor ( ) { this . data = 0 ; this . left = null ; this . right = null ; } }"}
{"text":"helper function to create a new Node","code":"function newNode ( data ) { var temp = new Node ( ) ; temp . data = data ; temp . right = null ; temp . left = null ; return temp ; } function KthLargestUsingMorrisTraversal ( root , k ) { var curr = root ; var Klargest = null ;"}
{"text":"count variable to keep count of visited Nodes","code":"var count = 0 ; while ( curr != null ) {"}
{"text":"if right child is NULL","code":"if ( curr . right == null ) {"}
{"text":"first increment count and check if count = k","code":"if ( ++ count == k ) Klargest = curr ;"}
{"text":"otherwise move to the left child","code":"curr = curr . left ; } else {"}
{"text":"find inorder successor of current Node","code":"var succ = curr . right ; while ( succ . left != null && succ . left != curr ) succ = succ . left ; if ( succ . left == null ) {"}
{"text":"set left child of successor to the current Node","code":"succ . left = curr ;"}
{"text":"move current to its right","code":"curr = curr . right ; }"}
{"text":"restoring the tree back to original binary search tree removing threaded links","code":"else { succ . left = null ; if ( ++ count == k ) Klargest = curr ;"}
{"text":"move current to its left child","code":"curr = curr . left ; } } } return Klargest ; }"}
{"text":"Constructed binary tree is 4 \/ \\ 2 7 \/ \\ \/ \\ 1 3 6 10","code":"root = newNode ( 4 ) ; root . left = newNode ( 2 ) ; root . right = newNode ( 7 ) ; root . left . left = newNode ( 1 ) ; root . left . right = newNode ( 3 ) ; root . right . left = newNode ( 6 ) ; root . right . right = newNode ( 10 ) ; document . write ( \" \" + KthLargestUsingMorrisTraversal ( root , 2 ) . data ) ;"}
{"text":"Javascript implementation to sort the rows of matrix in ascending order followed by sorting the columns in descending order","code":"let MAX_SIZE = 10 ;"}
{"text":"function to sort each row of the matrix according to the order specified by ascending .","code":"function sortByRow ( mat , n , ascending ) { for ( let i = 0 ; i < n ; i ++ ) { if ( ascending ) mat [ i ] . sort ( function ( a , b ) { return a - b ; } ) ; else mat [ i ] . sort ( function ( a , b ) { return b - a ; } ) ; } }"}
{"text":"function to find transpose of the matrix","code":"function transpose ( mat , n ) { for ( let i = 0 ; i < n ; i ++ ) for ( let j = i + 1 ; j < n ; j ++ ) {"}
{"text":"swapping element at index ( i , j ) by element at index ( j , i )","code":"let temp = mat [ i ] [ j ] ; mat [ i ] [ j ] = mat [ j ] [ i ] ; mat [ j ] [ i ] = temp ; } }"}
{"text":"function to sort the matrix row - wise and column - wise","code":"function sortMatRowAndColWise ( mat , n ) {"}
{"text":"sort rows of mat [ ] [ ]","code":"sortByRow ( mat , n , true ) ;"}
{"text":"get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ;"}
{"text":"again sort rows of mat [ ] [ ] in descending order .","code":"sortByRow ( mat , n , false ) ;"}
{"text":"again get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ; }"}
{"text":"function to print the matrix","code":"function printMat ( mat , n ) { for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) document . write ( mat [ i ] [ j ] + \" \" ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"let n = 3 ; let mat = [ [ 3 , 2 , 1 ] , [ 9 , 8 , 7 ] , [ 6 , 5 , 4 ] ] ; document . write ( \" \" ) ; printMat ( mat , n ) ; sortMatRowAndColWise ( mat , n ) ; document . write ( \" \" ) ; printMat ( mat , n ) ;"}
{"text":"Javascript implementation to sort the matrix row - wise and column - wise","code":"let MAX_SIZE = 10 ;"}
{"text":"function to sort each row of the matrix","code":"function sortByRow ( mat , n ) { for ( let i = 0 ; i < n ; i ++ )"}
{"text":"sorting row number ' i '","code":"mat [ i ] . sort ( function ( a , b ) { return a - b ; } ) ; }"}
{"text":"function to find transpose of the matrix","code":"function transpose ( mat , n ) { for ( let i = 0 ; i < n ; i ++ ) for ( let j = i + 1 ; j < n ; j ++ ) {"}
{"text":"swapping element at index ( i , j ) by element at index ( j , i )","code":"let temp = mat [ i ] [ j ] ; mat [ i ] [ j ] = mat [ j ] [ i ] ; mat [ j ] [ i ] = temp ; } }"}
{"text":"function to sort the matrix row - wise and column - wise","code":"function sortMatRowAndColWise ( mat , n ) {"}
{"text":"sort rows of mat [ ] [ ]","code":"sortByRow ( mat , n ) ;"}
{"text":"get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ;"}
{"text":"again sort rows of mat [ ] [ ]","code":"sortByRow ( mat , n ) ;"}
{"text":"again get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ; }"}
{"text":"function to print the matrix","code":"function printMat ( mat , n ) { for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) document . write ( mat [ i ] [ j ] + \" \" ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"let mat = [ [ 4 , 1 , 3 ] , [ 9 , 6 , 8 ] , [ 5 , 2 , 7 ] ] ; let n = 3 ; document . write ( \" \" ) ; printMat ( mat , n ) ; sortMatRowAndColWise ( mat , n ) ; document . write ( \" \" ) ; printMat ( mat , n ) ;"}
{"text":"Function for calculating Magic square","code":"function doublyEven ( n ) { var arr = Array ( n ) . fill ( 0 ) . map ( x => Array ( n ) . fill ( 0 ) ) ; var i , j ;"}
{"text":"filling matrix with its count value starting from 1 ;","code":"for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) arr [ i ] [ j ] = ( n * i ) + j + 1 ;"}
{"text":"change value of Array elements at fix location as per rule ( n * n + 1 ) - arr [ i ] [ j ] Top Left corner of Matrix ( order ( parseInt ( n \/ 4 ) ) * ( parseInt ( n \/ 4 ) ) )","code":"for ( i = 0 ; i < parseInt ( n \/ 4 ) ; i ++ ) for ( j = 0 ; j < parseInt ( n \/ 4 ) ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Top Right corner of Matrix ( order ( parseInt ( n \/ 4 ) ) * ( parseInt ( n \/ 4 ) ) )","code":"for ( i = 0 ; i < parseInt ( n \/ 4 ) ; i ++ ) for ( j = 3 * ( parseInt ( n \/ 4 ) ) ; j < n ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Bottom Left corner of Matrix ( order ( parseInt ( n \/ 4 ) ) * ( parseInt ( n \/ 4 ) ) )","code":"for ( i = 3 * parseInt ( n \/ 4 ) ; i < n ; i ++ ) for ( j = 0 ; j < parseInt ( n \/ 4 ) ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Bottom Right corner of Matrix ( order ( parseInt ( n \/ 4 ) ) * ( parseInt ( n \/ 4 ) ) )","code":"for ( i = 3 * parseInt ( n \/ 4 ) ; i < n ; i ++ ) for ( j = 3 * parseInt ( n \/ 4 ) ; j < n ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Centre of Matrix ( order ( n \/ 2 ) * ( n \/ 2 ) )","code":"for ( i = parseInt ( n \/ 4 ) ; i < 3 * parseInt ( n \/ 4 ) ; i ++ ) for ( j = parseInt ( n \/ 4 ) ; j < 3 * parseInt ( n \/ 4 ) ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Printing the magic - square","code":"for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) document . write ( arr [ i ] [ j ] + \" \" ) ; document . write ( ' ' ) ; } }"}
{"text":"driver program","code":"var n = 8 ;"}
{"text":"Function call","code":"doublyEven ( n ) ;"}
{"text":"rowa and cola are no of rows and columns of matrix A rowb and colb are no of rows and columns of matrix B","code":"let cola = 2 , rowa = 3 , colb = 3 , rowb = 2 ;"}
{"text":"Function to computes the Kronecker Product of two matrices","code":"function Kroneckerproduct ( A , B ) { let C = new Array ( rowa * rowb ) for ( let i = 0 ; i < ( rowa * rowb ) ; i ++ ) { C [ i ] = new Array ( cola * colb ) ; for ( let j = 0 ; j < ( cola * colb ) ; j ++ ) { C [ i ] [ j ] = 0 ; } }"}
{"text":"i loops till rowa","code":"for ( let i = 0 ; i < rowa ; i ++ ) {"}
{"text":"k loops till rowb","code":"for ( let k = 0 ; k < rowb ; k ++ ) {"}
{"text":"j loops till cola","code":"for ( let j = 0 ; j < cola ; j ++ ) {"}
{"text":"l loops till colb","code":"for ( let l = 0 ; l < colb ; l ++ ) {"}
{"text":"Each element of matrix A is multiplied by whole Matrix B resp and stored as Matrix C","code":"C [ i + l + 1 ] [ j + k + 1 ] = A [ i ] [ j ] * B [ k ] [ l ] ; document . write ( C [ i + l + 1 ] [ j + k + 1 ] + \" \" ) ; } } document . write ( \" \" ) ; } } }"}
{"text":"Driver Code","code":"let A = [ [ 1 , 2 ] , [ 3 , 4 ] , [ 1 , 0 ] ] ; let B = [ [ 0 , 5 , 2 ] , [ 6 , 7 , 3 ] ] ; Kroneckerproduct ( A , B ) ;"}
{"text":"Java script Program to check for a lower triangular matrix .","code":"let N = 4 ;"}
{"text":"Function to check matrix is in lower triangular form or not .","code":"function isLowerTriangularMatrix ( mat ) { for ( let i = 0 ; i < N ; i ++ ) for ( let j = i + 1 ; j < N ; j ++ ) if ( mat [ i ] [ j ] != 0 ) return false ; return true ; }"}
{"text":"Driver function .","code":"let mat = [ [ 1 , 0 , 0 , 0 ] , [ 1 , 4 , 0 , 0 ] , [ 4 , 6 , 2 , 0 ] , [ 0 , 4 , 7 , 6 ] ] ;"}
{"text":"Function call","code":"if ( isLowerTriangularMatrix ( mat ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Java script Program to check upper triangular matrix .","code":"let N = 4 ;"}
{"text":"Function to check matrix is in upper triangular form or not .","code":"function isUpperTriangularMatrix ( mat ) { for ( let i = 1 ; i < N ; i ++ ) for ( let j = 0 ; j < i ; j ++ ) if ( mat [ i ] [ j ] != 0 ) return false ; return true ; }"}
{"text":"driver function","code":"let mat = [ [ 1 , 3 , 5 , 3 ] , [ 0 , 4 , 6 , 2 ] , [ 0 , 0 , 2 , 5 ] , [ 0 , 0 , 0 , 6 ] ] ; if ( isUpperTriangularMatrix ( mat ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"no of columns","code":"var m = 3 ;"}
{"text":"no of rows","code":"var n = 2 ;"}
{"text":"function to calculate the number of non empty sets of cell","code":"function countSets ( a ) {"}
{"text":"stores the final answer","code":"var res = 0 ;"}
{"text":"traverses row - wise","code":"for ( i = 0 ; i < n ; i ++ ) { var u = 0 , v = 0 ; for ( j = 0 ; j < m ; j ++ ) { if ( a [ i ] [ j ] == 1 ) u ++ ; else v ++ ; } res += Math . pow ( 2 , u ) - 1 + Math . pow ( 2 , v ) - 1 ; }"}
{"text":"traverses column wise","code":"for ( i = 0 ; i < m ; i ++ ) { var u = 0 , v = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ j ] [ i ] == 1 ) u ++ ; else v ++ ; } res += Math . pow ( 2 , u ) - 1 + Math . pow ( 2 , v ) - 1 ; }"}
{"text":"at the end subtract n * m as no of single sets have been added twice .","code":"return res - ( n * m ) ; }"}
{"text":"Driver code","code":"var a = [ [ 1 , 0 , 1 ] , [ 0 , 1 , 0 ] ] ; document . write ( countSets ( a ) ) ;"}
{"text":"Simple javascript code for check a matrix is symmetric or not .","code":"let MAX = 100 ;"}
{"text":"Fills transpose of mat [ N ] [ N ] in tr [ N ] [ N ]","code":"function transpose ( mat , tr , N ) { for ( let i = 0 ; i < N ; i ++ ) for ( let j = 0 ; j < N ; j ++ ) tr [ i ] [ j ] = mat [ j ] [ i ] ; }"}
{"text":"Returns true if mat [ N ] [ N ] is symmetric , else false","code":"function isSymmetric ( mat , N ) { let tr = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { tr [ i ] = new Array ( MAX ) ; } transpose ( mat , tr , N ) ; for ( let i = 0 ; i < N ; i ++ ) for ( let j = 0 ; j < N ; j ++ ) if ( mat [ i ] [ j ] != tr [ i ] [ j ] ) return false ; return true ; }"}
{"text":"Driver code","code":"let mat = [ [ 1 , 3 , 5 ] , [ 3 , 2 , 4 ] , [ 5 , 4 , 1 ] ] ; if ( isSymmetric ( mat , 3 ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Efficient Javascript code for check a matrix is symmetric or no","code":"let MAX = 100 ;"}
{"text":"Returns true if mat [ N ] [ N ] is symmetric , else false","code":"function isSymmetric ( mat , N ) { for ( let i = 0 ; i < N ; i ++ ) for ( let j = 0 ; j < N ; j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false ; return true ; }"}
{"text":"Driver code","code":"let mat = [ [ 1 , 3 , 5 ] , [ 3 , 2 , 4 ] , [ 5 , 4 , 1 ] ] ; if ( isSymmetric ( mat , 3 ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Size of given matrix","code":"var MAX = 100 ;"}
{"text":"Returns Normal of a matrix of size n x n","code":"function findNormal ( mat , n ) { var sum = 0 ; for ( var i = 0 ; i < n ; i ++ ) for ( var j = 0 ; j < n ; j ++ ) sum += mat [ i ] [ j ] * mat [ i ] [ j ] ; return parseInt ( Math . sqrt ( sum ) ) ; }"}
{"text":"Returns trace of a matrix of size n x n","code":"function findTrace ( mat , n ) { var sum = 0 ; for ( var i = 0 ; i < n ; i ++ ) sum += mat [ i ] [ i ] ; return sum ; }"}
{"text":"Driver code","code":"var mat = [ [ 1 , 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 , 4 ] , [ 5 , 5 , 5 , 5 , 5 ] ] ; document . write ( \" \" + findTrace ( mat , 5 ) + \" \" ) ; document . write ( \" \" + findNormal ( mat , 5 ) ) ;"}
{"text":"Function for maximum determinant","code":"function maxDet ( n ) { return ( 2 * n * n * n ) ; }"}
{"text":"Function to print resulatant matrix","code":"function resMatrix ( n ) { for ( let i = 0 ; i < 3 ; i ++ ) { for ( let j = 0 ; j < 3 ; j ++ ) {"}
{"text":"Three position where 0 appears","code":"if ( i == 0 && j == 2 ) document . write ( \" \" ) ; else if ( i == 1 && j == 0 ) document . write ( \" \" ) ; else if ( i == 2 && j == 1 ) document . write ( \" \" ) ;"}
{"text":"Position where n appears","code":"else document . write ( n + \" \" ) ; } document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"let n = 15 ; document . write ( \" \" + maxDet ( n ) + \" \" ) ; document . write ( \" \" ) ; resMatrix ( n ) ;"}
{"text":"JavaScript implementation of Naive method to count of negative numbers in M [ n ] [ m ]","code":"function countNegative ( M , n , m ) { let count = 0 ;"}
{"text":"Follow the path shown using arrows above","code":"for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { if ( M [ i ] [ j ] < 0 ) count += 1 ;"}
{"text":"no more negative numbers in this row","code":"else break ; } } return count ; }"}
{"text":"Driver program to test above functions","code":"let M = [ [ - 3 , - 2 , - 1 , 1 ] , [ - 2 , 2 , 3 , 4 ] , [ 4 , 5 , 7 , 8 ] ] ; document . write ( countNegative ( M , 3 , 4 ) ) ;"}
{"text":"Function to count negative number","code":"function countNegative ( M , n , m ) {"}
{"text":"initialize result","code":"let count = 0 ;"}
{"text":"Start with top right corner","code":"let i = 0 ; let j = m - 1 ;"}
{"text":"Follow the path shown using arrows above","code":"while ( j >= 0 && i < n ) { if ( M [ i ] [ j ] < 0 ) {"}
{"text":"j is the index of the last negative number in this row . So there must be ( j + 1 )","code":"count += j + 1 ;"}
{"text":"negative numbers in this row .","code":"i += 1 ; }"}
{"text":"move to the left and see if we can find a negative number there","code":"else j -= 1 ; } return count ; } `"}
{"text":"The function returns maximum value A ( d , e ) - A ( a , b ) over all choices of indexes such that both d > a and e > b .","code":"function findMaxValue ( N , mat ) {"}
{"text":"stores maximum value","code":"let maxValue = Number . MIN_VALUE ;"}
{"text":"Consider all possible pairs mat [ a ] [ b ] and mat1 [ d ] [ e ]","code":"for ( let a = 0 ; a < N - 1 ; a ++ ) for ( let b = 0 ; b < N - 1 ; b ++ ) for ( let d = a + 1 ; d < N ; d ++ ) for ( let e = b + 1 ; e < N ; e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ] ; return maxValue ; }"}
{"text":"Driver code","code":"let N = 5 ; let mat = [ [ 1 , 2 , - 1 , - 4 , - 20 ] , [ - 8 , - 3 , 4 , 2 , 1 ] , [ 3 , 8 , 6 , 1 , 3 ] , [ - 4 , - 1 , 1 , 7 , - 6 ] , [ 0 , - 4 , 10 , - 5 , 1 ] ] ; document . write ( \" \" + findMaxValue ( N , mat ) ) ;"}
{"text":"The function returns maximum value A ( c , d ) - A ( a , b ) over all choices of indexes such that both c > a and d > b .","code":"function findMaxValue ( N , mat ) {"}
{"text":"stores maximum value","code":"let maxValue = Number . MIN_VALUE ;"}
{"text":"maxArr [ i ] [ j ] stores max of elements in matrix from ( i , j ) to ( N - 1 , N - 1 )","code":"let maxArr = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) { maxArr [ i ] = new Array ( N ) ; }"}
{"text":"last element of maxArr will be same 's as of  the input matrix","code":"maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;"}
{"text":"preprocess last row Initialize max","code":"let maxv = mat [ N - 1 ] [ N - 1 ] ; for ( let j = N - 2 ; j >= 0 ; j -- ) { if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ] ; maxArr [ N - 1 ] [ j ] = maxv ; }"}
{"text":"preprocess last column Initialize max","code":"maxv = mat [ N - 1 ] [ N - 1 ] ; for ( let i = N - 2 ; i >= 0 ; i -- ) { if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ] ; maxArr [ i ] [ N - 1 ] = maxv ; }"}
{"text":"preprocess rest of the matrix from bottom","code":"for ( let i = N - 2 ; i >= 0 ; i -- ) { for ( let j = N - 2 ; j >= 0 ; j -- ) {"}
{"text":"Update maxValue","code":"if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ;"}
{"text":"set maxArr ( i , j )","code":"maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Math . max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) ) ; } } return maxValue ; }"}
{"text":"Driver code","code":"let N = 5 ; let mat = [ [ 1 , 2 , - 1 , - 4 , - 20 ] , [ - 8 , - 3 , 4 , 2 , 1 ] , [ 3 , 8 , 6 , 1 , 3 ] , [ - 4 , - 1 , 1 , 7 , - 6 ] , [ 0 , - 4 , 10 , - 5 , 1 ] ] ; document . write ( \" \" + findMaxValue ( N , mat ) ) ;"}
{"text":"A Javascript program to Print all elements in sorted order from row and column wise sorted matrix","code":"let INF = Number . MAX_VALUE ; let N = 4 ;"}
{"text":"A utility function to youngify a Young Tableau . This is different from standard youngify . It assumes that the value at mat [ 0 ] [ 0 ] is infinite .","code":"function youngify ( mat , i , j ) {"}
{"text":"Find the values at down and right sides of mat [ i ] [ j ]","code":"let downVal = ( i + 1 < N ) ? mat [ i + 1 ] [ j ] : INF ; let rightVal = ( j + 1 < N ) ? mat [ i ] [ j + 1 ] : INF ;"}
{"text":"If mat [ i ] [ j ] is the down right corner element , return","code":"if ( downVal == INF && rightVal == INF ) { return ; }"}
{"text":"Move the smaller of two values ( downVal and rightVal ) to mat [ i ] [ j ] and recur for smaller value","code":"if ( downVal < rightVal ) { mat [ i ] [ j ] = downVal ; mat [ i + 1 ] [ j ] = INF ; youngify ( mat , i + 1 , j ) ; } else { mat [ i ] [ j ] = rightVal ; mat [ i ] [ j + 1 ] = INF ; youngify ( mat , i , j + 1 ) ; } }"}
{"text":"A utility function to extract minimum element from Young tableau","code":"function extractMin ( mat ) { let ret = mat [ 0 ] [ 0 ] ; mat [ 0 ] [ 0 ] = INF ; youngify ( mat , 0 , 0 ) ; return ret ; }"}
{"text":"This function uses extractMin ( ) to print elements in sorted order","code":"function printSorted ( mat ) { document . write ( \" \" ) ; for ( let i = 0 ; i < N * N ; i ++ ) { document . write ( extractMin ( mat ) + \" \" ) ; } } let mat = [ [ 10 , 20 , 30 , 40 ] , [ 15 , 25 , 35 , 45 ] , [ 27 , 29 , 37 , 48 ] , [ 32 , 33 , 39 , 50 ] ] ; printSorted ( mat ) ;"}
{"text":"size k x k Size of given matrix","code":"let n = 5 ;"}
{"text":"A simple function to find sum of all sub - squares of size k x k in a given square matrix of size n x n","code":"function printSumSimple ( mat , k ) {"}
{"text":"k must be smaller than or equal to n","code":"if ( k > n ) return ;"}
{"text":"row number of first cell in current sub - square of size k x k","code":"for ( let i = 0 ; i < n - k + 1 ; i ++ ) {"}
{"text":"column of first cell in current sub - square of size k x k","code":"for ( let j = 0 ; j < n - k + 1 ; j ++ ) {"}
{"text":"Calculate and print sum of current sub - square","code":"let sum = 0 ; for ( let p = i ; p < k + i ; p ++ ) for ( let q = j ; q < k + j ; q ++ ) sum += mat [ p ] [ q ] ; document . write ( sum + \" \" ) ; }"}
{"text":"Line separator for sub - squares starting with next row","code":"document . write ( \" \" ) ; } }"}
{"text":"Driver Program to test above function","code":"let mat = [ [ 1 , 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 , 4 ] , [ 5 , 5 , 5 , 5 , 5 ] ] let k = 3 ; printSumSimple ( mat , k ) ;"}
{"text":"Size of given matrix","code":"let n = 5 ;"}
{"text":"A O ( n ^ 2 ) function to find sum of all sub - squares of size k x k in a given square matrix of size n x n","code":"function printSumTricky ( mat , k ) {"}
{"text":"k must be smaller than or equal to n","code":"if ( k > n ) return ;"}
{"text":"1 : PREPROCESSING To store sums of all strips of size k x 1","code":"let stripSum = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { stripSum [ i ] = new Array ( n ) ; } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { stripSum [ i ] [ j ] = 0 ; } }"}
{"text":"Go column by column","code":"for ( let j = 0 ; j < n ; j ++ ) {"}
{"text":"Calculate sum of first k x 1 rectangle in this column","code":"let sum = 0 ; for ( let i = 0 ; i < k ; i ++ ) sum += mat [ i ] [ j ] ; stripSum [ 0 ] [ j ] = sum ;"}
{"text":"Calculate sum of remaining rectangles","code":"for ( let i = 1 ; i < n - k + 1 ; i ++ ) { sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) ; stripSum [ i ] [ j ] = sum ; } }"}
{"text":"2 : CALCULATE SUM of Sub - Squares using stripSum [ ] [ ]","code":"for ( let i = 0 ; i < n - k + 1 ; i ++ ) {"}
{"text":"Calculate and print sum of first subsquare in this row","code":"let sum = 0 ; for ( let j = 0 ; j < k ; j ++ ) sum += stripSum [ i ] [ j ] ; document . write ( sum + \" \" ) ;"}
{"text":"Calculate sum of remaining squares in current row by removing the leftmost strip of previous sub - square and adding a new strip","code":"for ( let j = 1 ; j < n - k + 1 ; j ++ ) { sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] ) ; document . write ( sum + \" \" ) ; } document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"let mat = [ [ 1 , 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 , 4 ] , [ 5 , 5 , 5 , 5 , 5 ] ] ; let k = 3 ; printSumTricky ( mat , k ) ;"}
{"text":"javascript Program to find transpose of a matrix","code":"var M = 3 ; var N = 4 ;"}
{"text":"This function stores transpose of A in B","code":"function transpose ( A , B ) { var i , j ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j < M ; j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ; }"}
{"text":"Driver code","code":"var A = [ [ 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 ] ] ; var B = Array ( N ) ; for ( i = 0 ; i < N ; i ++ ) B [ i ] = Array ( M ) . fill ( 0 ) ; transpose ( A , B ) ; document . write ( \" \" ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < M ; j ++ ) document . write ( B [ i ] [ j ] + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"JavaScript Program to find transpose of a matrix","code":"var N = 4 ;"}
{"text":"Finds transpose of A in - place","code":"function transpose ( A ) { for ( i = 0 ; i < N ; i ++ ) for ( j = i + 1 ; j < N ; j ++ ) { var temp = A [ i ] [ j ] ; A [ i ] [ j ] = A [ j ] [ i ] ; A [ j ] [ i ] = temp ; } }"}
{"text":"Driver code","code":"var A = [ [ 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 ] ] ; transpose ( A ) ; document . write ( \" \" ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < N ; j ++ ) document . write ( A [ i ] [ j ] + \" \" ) ; document . write ( \" \\< \" ) ; }"}
{"text":"A Naive Recursive Javascript program to count paths with exactly ' k ' coins","code":"let R = 3 ; let C = 3 ;"}
{"text":"Recursive function to count paths with sum k from ( 0 , 0 ) to ( m , n )","code":"function pathCountRec ( mat , m , n , k ) {"}
{"text":"Base cases","code":"if ( m < 0 n < 0 ) return 0 ; if ( m == 0 && n == 0 ) return ( k == mat [ m ] [ n ] ) ;"}
{"text":"( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 )","code":"return pathCountRec ( mat , m - 1 , n , k - mat [ m ] [ n ] ) + pathCountRec ( mat , m , n - 1 , k - mat [ m ] [ n ] ) ; }"}
{"text":"A wrapper over pathCountRec ( )","code":"function pathCount ( mat , k ) { return pathCountRec ( mat , R - 1 , C - 1 , k ) ; }"}
{"text":"Driver code","code":"let k = 12 ; let mat = [ [ 1 , 2 , 3 ] , [ 4 , 6 , 5 ] , [ 3 , 2 , 1 ] ] ; document . write ( pathCount ( mat , k ) ) ;"}
{"text":"A Dynamic Programming based javascript program to count paths with exactly ' k ' coins","code":"var R = 3 ; var C = 3 ; var MAX_K = 100 ; var dp = Array ( R ) . fill ( ) . map ( ( ) => Array ( C ) . fill ( ) . map ( ( ) => Array ( MAX_K ) . fill ( 0 ) ) ) ; function pathCountDPRecDP ( mat , m , n , k ) {"}
{"text":"Base cases","code":"if ( m < 0 n < 0 ) return 0 ; if ( m == 0 && n == 0 ) return ( k == mat [ m ] [ n ] ? 1 : 0 ) ;"}
{"text":"If this subproblem is already solved","code":"if ( dp [ m ] [ n ] [ k ] != - 1 ) return dp [ m ] [ n ] [ k ] ;"}
{"text":"( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 )","code":"dp [ m ] [ n ] [ k ] = pathCountDPRecDP ( mat , m - 1 , n , k - mat [ m ] [ n ] ) + pathCountDPRecDP ( mat , m , n - 1 , k - mat [ m ] [ n ] ) ; return dp [ m ] [ n ] [ k ] ; }"}
{"text":"This function mainly initializes dp and calls pathCountDPRecDP ( )","code":"function pathCountDP ( mat , k ) { for ( i = 0 ; i < R ; i ++ ) for ( j = 0 ; j < C ; j ++ ) for ( l = 0 ; l < MAX_K ; l ++ ) dp [ i ] [ j ] [ l ] = - 1 ; return pathCountDPRecDP ( mat , R - 1 , C - 1 , k ) ; }"}
{"text":"Driver Program to test above functions","code":"var k = 12 ; var mat = [ [ 1 , 2 , 3 ] , [ 4 , 6 , 5 ] , [ 3 , 2 , 1 ] ] ; document . write ( pathCountDP ( mat , k ) ) ;"}
{"text":"JavaScript implementation to sort the given matrix","code":"let SIZE = 10"}
{"text":"function to sort the given matrix","code":"function sortMat ( mat , n ) {"}
{"text":"temporary matrix of size n ^ 2","code":"let temp = new Array ( n * n ) ; let k = 0 ;"}
{"text":"copy the elements of matrix one by one into temp [ ]","code":"for ( let i = 0 ; i < n ; i ++ ) for ( let j = 0 ; j < n ; j ++ ) temp [ k ++ ] = mat [ i ] [ j ] ;"}
{"text":"sort temp [ ]","code":"temp . sort ( ) ;"}
{"text":"copy the elements of temp [ ] one by one in mat [ ] [ ]","code":"k = 0 ; for ( let i = 0 ; i < n ; i ++ ) for ( let j = 0 ; j < n ; j ++ ) mat [ i ] [ j ] = temp [ k ++ ] ; }"}
{"text":"function to print the given matrix","code":"function printMat ( mat , n ) { for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) document . write ( mat [ i ] [ j ] + \" \" ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver program to test above","code":"let mat = [ [ 5 , 4 , 7 ] , [ 1 , 3 , 8 ] , [ 2 , 9 , 6 ] ] ; let n = 3 ; document . write ( \" \" + \" \" ) ; printMat ( mat , n ) ; sortMat ( mat , n ) ; document . write ( \" \" ) ; document . write ( \" \" + \" \" ) ; printMat ( mat , n ) ;"}
{"text":"Function to find the cross over point ( the point before which elements aresmaller than or equal to x and afterwhich greater than x )","code":"function findCrossOver ( arr , low , high , x ) {"}
{"text":"Base cases x is greater than all","code":"if ( arr [ high ] <= x ) return high"}
{"text":"x is smaller than all","code":"if ( arr [ low ] > x ) return low"}
{"text":"Find the middle point","code":"var mid = ( low + high ) \/ 2"}
{"text":"If x is same as middle element , then return mid","code":"if ( arr [ mid ] <= x && arr [ mid + 1 ] > x ) return mid"}
{"text":"If x is greater than arr [ mid ] , then either arr [ mid + 1 ] is ceiling of x or ceiling lies in arr [ mid + 1. . . high ]","code":"if ( arr [ mid ] < x ) return findCrossOver ( arr , mid + 1 , high , x ) return findCrossOver ( arr , low , mid - 1 , x ) }"}
{"text":"This function prints k closest elements to x in arr [ ] . n is the number of elements in arr [ ]","code":"function printKclosest ( arr , x , k , n ) {"}
{"text":"Find the crossover point","code":"var l = findCrossOver ( arr , 0 , n - 1 , x )"}
{"text":"Right index to search","code":"var r = l + 1"}
{"text":"To keep track of count of elements already printed","code":"var count = 0"}
{"text":"If x is present in arr [ ] , then reduce left index . Assumption : all elements in arr [ ] are distinct","code":"if ( arr [ l ] == x ) l -= 1"}
{"text":"Compare elements on left and right of crossover point to find the k closest elements","code":"while ( l >= 0 && r < n && count < k ) { if ( x - arr [ l ] < arr [ r ] - x ) { document . write ( arr [ l ] + \" \" ) l -= 1 } else { document . write ( arr [ r ] + \" \" ) r += 1 } count += 1 }"}
{"text":"If there are no more elements on right side , then print left elements","code":"while ( count < k && l >= 0 ) { print ( arr [ l ] ) l -= 1 count += 1 }"}
{"text":"If there are no more elements on left side , then print right elements","code":"while ( count < k && r < n ) { print ( arr [ r ] ) r += 1 count += 1 } }"}
{"text":"Driver Code","code":"var arr = [ 12 , 16 , 22 , 30 , 35 , 39 , 42 , 45 , 48 , 50 , 53 , 55 , 56 ] var n = arr . length var x = 35 var k = 4 printKclosest ( arr , x , 4 , n )"}
{"text":"javascript program to sort link list using insertion sort","code":"var head = null ; var sorted = null ; class node { constructor ( val ) { this . val = val ; this . next = null ; } }"}
{"text":"A utility function to insert a node at the beginning of linked list","code":"function push ( val ) {"}
{"text":"allocate node","code":"var newnode = new node ( val ) ;"}
{"text":"link the old list off the new node","code":"newnode . next = head ;"}
{"text":"move the head to povar to the new node","code":"head = newnode ; }"}
{"text":"function to sort a singly linked list using insertion sort","code":"function insertionSort ( headref ) {"}
{"text":"Initialize sorted linked list","code":"var sorted = null ; var current = headref ;"}
{"text":"Traverse the given linked list and insert every node to sorted","code":"while ( current != null ) {"}
{"text":"Store next for next iteration","code":"var next = current . next ;"}
{"text":"insert current in sorted linked list","code":"sortedInsert ( current ) ;"}
{"text":"Update current","code":"current = next ; }"}
{"text":"Update head_ref to povar to sorted linked list","code":"head = sorted ; }"}
{"text":"* function to insert a new_node in a Note that this function expects a * pointer to head_ref as this can modify the head of the input linked list * ( similar to push ( ) )","code":"function sortedInsert ( newnode ) {"}
{"text":"Special case for the head end","code":"if ( sorted == null sorted . val >= newnode . val ) { newnode . next = sorted ; sorted = newnode ; } else { var current = sorted ;"}
{"text":"Locate the node before the povar of insertion","code":"while ( current . next != null && current . next . val < newnode . val ) { current = current . next ; } newnode . next = current . next ; current . next = newnode ; } }"}
{"text":"Function to prvar linked list","code":"function printlist ( head ) { while ( head != null ) { document . write ( head . val + \" \" ) ; head = head . next ; } }"}
{"text":"Driver program to test above functions","code":"push ( 5 ) ; push ( 20 ) ; push ( 4 ) ; push ( 3 ) ; push ( 30 ) ; document . write ( \" \" ) ; printlist ( head ) ; insertionSort ( head ) ; document . write ( \" \" ) ; printlist ( sorted ) ;"}
{"text":"Returns the count of ways we can sum S [ 0. . . m - 1 ] coins to get sum n","code":"function count ( S , m , n ) {"}
{"text":"If n is 0 then there is 1 solution ( do not include any coin )","code":"if ( n == 0 ) return 1 ;"}
{"text":"If n is less than 0 then no solution exists","code":"if ( n < 0 ) return 0 ;"}
{"text":"If there are no coins and n is greater than 0 , then no solution exist","code":"if ( m <= 0 && n >= 1 ) return 0 ;"}
{"text":"count is sum of solutions ( i ) including S [ m - 1 ] ( ii ) excluding S [ m - 1 ]","code":"return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ; }"}
{"text":"Driver program to test above function","code":"var arr = [ 1 , 2 , 3 ] ; var m = arr . length ; document . write ( count ( arr , m , 4 ) ) ;"}
{"text":"Dynamic Programming Javascript implementation of Coin Change problem","code":"function count ( S , m , n ) {"}
{"text":"table [ i ] will be storing the number of solutions for value i . We need n + 1 rows as the table is constructed in bottom up manner using the base case ( n = 0 )","code":"let table = new Array ( n + 1 ) ; table . fill ( 0 ) ;"}
{"text":"Base case ( If given value is 0 )","code":"table [ 0 ] = 1 ;"}
{"text":"Pick all coins one by one and update the table [ ] values after the index greater than or equal to the value of the picked coin","code":"for ( let i = 0 ; i < m ; i ++ ) for ( let j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 3 ] ; let m = arr . length ; let n = 4 ; document . write ( count ( arr , m , n ) ) ;"}
{"text":"Javascript program using memoization","code":"let dp = new Array ( 100 ) ; for ( var i = 0 ; i < dp . length ; i ++ ) { dp [ i ] = new Array ( 2 ) ; }"}
{"text":"Function for matrix chain multiplication","code":"function matrixChainMemoised ( p , i , j ) { if ( i == j ) { return 0 ; } if ( dp [ i ] [ j ] != - 1 ) { return dp [ i ] [ j ] ; } dp [ i ] [ j ] = Number . MAX_VALUE ; for ( let k = i ; k < j ; k ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , matrixChainMemoised ( p , i , k ) + matrixChainMemoised ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ) ; } return dp [ i ] [ j ] ; } function MatrixChainOrder ( p , n ) { let i = 1 , j = n - 1 ; return matrixChainMemoised ( p , i , j ) ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 , 4 ] ; let n = arr . length ; for ( var i = 0 ; i < dp . length ; i ++ ) { for ( var j = 0 ; j < dp . length ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } document . write ( \" \" + MatrixChainOrder ( arr , n ) ) ;"}
{"text":"Matrix Chain Multiplication . See the Cormen book for details of the following algorithm Matrix Ai has dimension p [ i - 1 ] x p [ i ] for i = 1. . n","code":"function MatrixChainOrder ( p , n ) {"}
{"text":"For simplicity of the program , one extra row and one extra column are allocated in m . 0 th row and 0 th column of m are not used","code":"var m = Array ( n ) . fill ( 0 ) . map ( x => Array ( n ) . fill ( 0 ) ) ; var i , j , k , L , q ;"}
{"text":"cost is zero when multiplying one matrix .","code":"for ( i = 1 ; i < n ; i ++ ) m [ i ] [ i ] = 0 ;"}
{"text":"L is chain length .","code":"for ( L = 2 ; L < n ; L ++ ) { for ( i = 1 ; i < n - L + 1 ; i ++ ) { j = i + L - 1 ; if ( j == n ) continue ; m [ i ] [ j ] = Number . MAX_VALUE ; for ( k = i ; k <= j - 1 ; k ++ ) {"}
{"text":"q = cost \/ scalar multiplications","code":"q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ] ; if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q ; } } } return m [ 1 ] [ n - 1 ] ; }"}
{"text":"Driver code","code":"var arr = [ 1 , 2 , 3 , 4 ] ; var size = arr . length ; document . write ( \" \" + MatrixChainOrder ( arr , size ) ) ;"}
{"text":"Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces","code":"function cutRod ( price , n ) { if ( n <= 0 ) return 0 ; let max_val = Number . MIN_VALUE ;"}
{"text":"Recursively cut the rod in different pieces and compare different configurations","code":"for ( let i = 0 ; i < n ; i ++ ) max_val = Math . max ( max_val , price [ i ] + cutRod ( price , n - i - 1 ) ) ; return max_val ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 ] ; let size = arr . length ; document . write ( \" \" + cutRod ( arr , size ) ) ;"}
{"text":"Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces","code":"function cutRod ( price , n ) { let val = new Array ( n + 1 ) ; val [ 0 ] = 0 ;"}
{"text":"Build the table val [ ] in bottom up manner and return the last entry from the table","code":"for ( let i = 1 ; i <= n ; i ++ ) { let max_val = Number . MIN_VALUE ; for ( let j = 0 ; j < i ; j ++ ) max_val = Math . max ( max_val , price [ j ] + val [ i - j - 1 ] ) ; val [ i ] = max_val ; } return val [ n ] ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 ] ; let size = arr . length ; document . write ( \" \" + cutRod ( arr , size ) + \" \" ) ;"}
{"text":"Global Array for the purpose of memoization .","code":"let t = new Array ( 9 ) ; for ( var i = 0 ; i < t . length ; i ++ ) { t [ i ] = new Array ( 2 ) ; }"}
{"text":"A recursive program , using , memoization , to implement the rod cutting problem ( Top - Down ) .","code":"function un_kp ( price , length , Max_len , n ) {"}
{"text":"The maximum price will be zero , when either the length of the rod is zero or price is zero .","code":"if ( n == 0 Max_len == 0 ) { return 0 ; }"}
{"text":"If the length of the rod is less than the maximum length , Max_lene will consider it . Now depending upon the profit , either Max_lene we will take it or discard it .","code":"if ( length [ n - 1 ] <= Max_len ) { t [ n ] [ Max_len ] = Math . max ( price [ n - 1 ] + un_kp ( price , length , Max_len - length [ n - 1 ] , n ) , un_kp ( price , length , Max_len , n - 1 ) ) ; }"}
{"text":"If the length of the rod is greater than the permitted size , Max_len we will not consider it .","code":"else { t [ n ] [ Max_len ] = un_kp ( price , length , Max_len , n - 1 ) ; }"}
{"text":"Max_lene Max_lenill return the maximum value obtained , Max_lenhich is present at the nth roMax_len and Max_lenth column .","code":"return t [ n ] [ Max_len ] ; }"}
{"text":"Driver code","code":"let price = [ 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 ] ; let n = price . length ; let length = Array ( n ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { length [ i ] = i + 1 ; } let Max_len = n ;"}
{"text":"Function Call","code":"document . write ( \" \" + un_kp ( price , length , n , Max_len ) ) ;"}
{"text":"function to multiply two numbers x and y","code":"function multiply ( x , y ) {"}
{"text":"0 multiplied with anything gives 0","code":"if ( y == 0 ) return 0 ;"}
{"text":"Add x one by one","code":"if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;"}
{"text":"the case where y is negative","code":"if ( y < 0 ) return - multiply ( x , - y ) ; }"}
{"text":"Driver code","code":"document . write ( multiply ( 5 , - 11 ) ) ;"}
{"text":"javascript program to print all primes smaller than or equal to n using Sieve of Eratosthenes","code":"function sieveOfEratosthenes ( n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"prime = Array . from ( { length : n + 1 } , ( _ , i ) => true ) ; for ( p = 2 ; p * p <= n ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } }"}
{"text":"Print all prime numbers","code":"for ( i = 2 ; i <= n ; i ++ ) { if ( prime [ i ] == true ) document . write ( i + \" \" ) ; } }"}
{"text":"Driver Code","code":"var n = 30 ; document . write ( \" \" ) ; document . write ( \" \" + n + \" \" ) ; sieveOfEratosthenes ( n ) ;"}
{"text":"binomialCoeff","code":"function binomialCoeff ( n , k ) { let res = 1 ; if ( k > n - k ) k = n - k ; for ( let i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; }"}
{"text":"Function to print first n lines of Pascal 's Triangle","code":"function printPascal ( n ) {"}
{"text":"Iterate through every line and print entries in it","code":"for ( let line = 0 ; line < n ; line ++ ) {"}
{"text":"Every line has number of integers equal to line number","code":"for ( let i = 0 ; i <= line ; i ++ ) document . write ( binomialCoeff ( line , i ) + \" \" ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"let n = 7 ; printPascal ( n ) ;"}
{"text":"A O ( n ^ 2 ) time and O ( n ^ 2 ) extra space method for Pascal 's Triangle","code":"function printPascal ( n ) {"}
{"text":"An auxiliary array to store generated pascal triangle values","code":"arr = a = Array ( n ) . fill ( 0 ) . map ( x => Array ( n ) . fill ( 0 ) ) ;"}
{"text":"Iterate through every line and print integer ( s ) in it","code":"for ( line = 0 ; line < n ; line ++ ) {"}
{"text":"Every line has number of integers equal to line number","code":"for ( i = 0 ; i <= line ; i ++ ) {"}
{"text":"First and last values in every row are 1","code":"if ( line == i i == 0 ) arr [ line ] [ i ] = 1 ; else"}
{"text":"Other values are sum of values just above and left of above","code":"arr [ line ] [ i ] = arr [ line - 1 ] [ i - 1 ] + arr [ line - 1 ] [ i ] ; document . write ( arr [ line ] [ i ] ) ; } document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"var n = 5 ; printPascal ( n ) ;"}
{"text":"JavaScript program for Pascal ' s \u2581 Triangle \u2581 A \u2581 O ( n ^ 2 ) \u2581 time \u2581 and \u2581 O ( 1 ) \u2581 extra \u2581 space \u2581 method \u2581 for \u2581 Pascal ' s Triangle Pascal function","code":"function printPascal ( n ) { for ( line = 1 ; line <= n ; line ++ ) {"}
{"text":"used to represent C ( line , i )","code":"var C = 1 ; for ( i = 1 ; i <= line ; i ++ ) {"}
{"text":"The first value in a line is always 1","code":"document . write ( C + \" \" ) ; C = C * ( line - i ) \/ i ; } document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"var n = 5 ; printPascal ( n ) ;"}
{"text":"Javascript Program to add two numbers without using arithmetic operator","code":"function Add ( x , y ) {"}
{"text":"Iterate till there is no carry","code":"while ( y != 0 ) {"}
{"text":"carry now contains common set bits of x and y","code":"let carry = x & y ;"}
{"text":"Sum of bits of x and y where at least one of the bits is not set","code":"x = x ^ y ;"}
{"text":"Carry is shifted by one so that adding it to x gives the required sum","code":"y = carry << 1 ; } return x ; }"}
{"text":"driver code","code":"document . write ( Add ( 15 , 32 ) ) ;"}
{"text":"This function will return n % d . d must be one of : 1 , 2 , 4 , 8 , 16 , 32 , ...","code":"function getModulo ( n , d ) { return ( n & ( d - 1 ) ) ; }"}
{"text":"Driver Code","code":"n = 6 ;"}
{"text":"d must be a power of 2","code":"d = 4 ; document . write ( n + \" \" + d + \" \" + getModulo ( n , d ) ) ;"}
{"text":"Function to get no of set bits in binary representation of positive integer n","code":"function countSetBits ( n ) { var count = 0 ; while ( n ) { count += n & 1 ; n >>= 1 ; } return count ; }"}
{"text":"Program to test function countSetBits","code":"var i = 9 ; document . write ( countSetBits ( i ) ) ;"}
{"text":"recursive function to count set bits","code":"function countSetBits ( n ) {"}
{"text":"base case","code":"if ( n == 0 ) return 0 ; else return 1 + countSetBits ( n & ( n - 1 ) ) ; }"}
{"text":"get value from user","code":"var n = 9 ;"}
{"text":"function calling","code":"document . write ( countSetBits ( n ) ) ;"}
{"text":"Lookup table","code":"var BitsSetTable256 = Array . from ( { length : 256 } , ( _ , i ) => 0 ) ;"}
{"text":"Function to initialise the lookup table","code":"function initialize ( ) {"}
{"text":"To initially generate the table algorithmically","code":"BitsSetTable256 [ 0 ] = 0 ; for ( var i = 0 ; i < 256 ; i ++ ) { BitsSetTable256 [ i ] = ( i & 1 ) + BitsSetTable256 [ parseInt ( i \/ 2 ) ] ; } }"}
{"text":"Function to return the count of set bits in n","code":"function countSetBits ( n ) { return ( BitsSetTable256 [ n & 0xff ] + BitsSetTable256 [ ( n >> 8 ) & 0xff ] + BitsSetTable256 [ ( n >> 16 ) & 0xff ] + BitsSetTable256 [ n >> 24 ] ) ; }"}
{"text":"Initialise the lookup table","code":"initialize ( ) ; var n = 9 ; document . write ( countSetBits ( n ) ) ;"}
{"text":"Driver code","code":"document . write ( ( 4 ) . toString ( 2 ) . split ( ' ' ) . filter ( x => x == ' ' ) . length + \" \" ) ; document . write ( ( 15 ) . toString ( 2 ) . split ( ' ' ) . filter ( x => x == ' ' ) . length ) ;"}
{"text":"Javascript program to count set bits by pre - storing count set bits in nibbles .","code":"var num_to_bits = [ 0 , 1 , 1 , 2 , 1 , 2 , 2 , 3 , 1 , 2 , 2 , 3 , 2 , 3 , 3 , 4 ] ;"}
{"text":"Recursively get nibble of a given number and map them in the array","code":"function countSetBitsRec ( num ) { var nibble = 0 ; if ( 0 == num ) return num_to_bits [ 0 ] ;"}
{"text":"Find last nibble","code":"nibble = num & 0xf ;"}
{"text":"Use pre - stored values to find count in last nibble plus recursively add remaining nibbles .","code":"return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4 ) ; }"}
{"text":"Driver code","code":"var num = 31 ; document . write ( countSetBitsRec ( num ) ) ;"}
{"text":"Check each bit in a number is set or not and return the total count of the set bits .","code":"function countSetBits ( N ) { var count = 0 ;"}
{"text":"( 1 << i ) = pow ( 2 , i )","code":"for ( i = 0 ; i < 4 * 8 ; i ++ ) { if ( ( N & ( 1 << i ) ) != 0 ) count ++ ; } return count ; }"}
{"text":"Driver code","code":"var N = 15 ; document . write ( countSetBits ( N ) ) ;"}
{"text":"Function to get parity of number n . It returns 1 if n has odd parity , and returns 0 if n has even parity","code":"function getParity ( n ) { var parity = false ; while ( n != 0 ) { parity = ! parity ; n = n & ( n - 1 ) ; } return parity ; }"}
{"text":"Driver code","code":"var n = 7 ; document . write ( \" \" + n + \" \" + ( getParity ( n ) ? \" \" : \" \" ) ) ;"}
{"text":"Function to check if x is power of 2","code":"function isPowerOfTwo ( n ) { if ( n == 0 ) return false ; return parseInt ( ( Math . ceil ( ( Math . log ( n ) \/ Math . log ( 2 ) ) ) ) ) == parseInt ( ( Math . floor ( ( ( Math . log ( n ) \/ Math . log ( 2 ) ) ) ) ) ) ; }"}
{"text":"Driver Code","code":"if ( isPowerOfTwo ( 31 ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ; if ( isPowerOfTwo ( 64 ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to check if x is power of 2","code":"function isPowerOfTwo ( n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 2 != 0 ) return 0 ; n = n \/ 2 ; } return 1 ; }"}
{"text":"Driver Code","code":"isPowerOfTwo ( 31 ) ? document . write ( \" \" + \" \" ) : document . write ( \" \" + \" \" ) ; isPowerOfTwo ( 64 ) ? document . write ( \" \" ) : document . write ( \" \" ) ;"}
{"text":"Function which checks whether a number is a power of 2","code":"function powerOf2 ( n ) {"}
{"text":"base cases '1' is the only odd number which is a power of 2 ( 2 ^ 0 )","code":"if ( n == 1 ) return true ;"}
{"text":"all other odd numbers are not powers of 2","code":"else if ( n % 2 != 0 n == 0 ) return false ;"}
{"text":"recursive function call","code":"return powerOf2 ( n \/ 2 ) ; }"}
{"text":"True","code":"var n = 64 ;"}
{"text":"False","code":"var m = 12 ; if ( powerOf2 ( n ) == true ) document . write ( \" \" + \" \" ) ; else document . write ( \" \" + \" \" ) ; if ( powerOf2 ( m ) == true ) document . write ( \" \" + \" \" ) ; else document . write ( \" \" + \" \" ) ;"}
{"text":"Method to check if x is power of 2","code":"function isPowerOfTwo ( x ) {"}
{"text":"First x in the below expression is for the case when x is 0","code":"return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ; }"}
{"text":"Driver method","code":"document . write ( isPowerOfTwo ( 31 ) ? \" \" : \" \" ) ; document . write ( \" \" + ( isPowerOfTwo ( 64 ) ? \" \" : \" \" ) ) ;"}
{"text":"Returns maximum repeating element in arr [ 0. . n - 1 ] . The array elements are in range from 0 to k - 1","code":"function maxRepeating ( arr , n , k ) {"}
{"text":"Iterate though input array , for every element arr [ i ] , increment arr [ arr [ i ] % k ] by k","code":"for ( let i = 0 ; i < n ; i ++ ) arr [ arr [ i ] % k ] += k ;"}
{"text":"Find index of the maximum repeating element","code":"let max = arr [ 0 ] , result = 0 ; for ( let i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; result = i ; } }"}
{"text":"Return index of the maximum element","code":"return result ; }"}
{"text":"Driver program to test above function","code":"let arr = [ 2 , 3 , 3 , 5 , 3 , 4 , 1 , 7 ] ; let n = arr . length ; let k = 8 ; document . write ( \" \" + maxRepeating ( arr , n , k ) + \" \" ) ;"}
{"text":"function return derived formula value .","code":"function fun ( x ) { let y = parseInt ( x \/ 4 ) * 4 ;"}
{"text":"finding xor value of range [ y ... x ]","code":"let ans = 0 ; for ( let i = y ; i <= x ; i ++ ) ans ^= i ; return ans ; }"}
{"text":"function to solve query for l and r .","code":"function query ( x ) {"}
{"text":"if l or r is 0.","code":"if ( x == 0 ) return 0 ; let k = parseInt ( ( x + 1 ) \/ 2 ) ;"}
{"text":"finding x is divisible by 2 or not .","code":"return ( x %= 2 ) ? 2 * fun ( k ) : ( ( fun ( k - 1 ) * 2 ) ^ ( k & 1 ) ) ; } function allQueries ( q , l , r ) { for ( let i = 0 ; i < q ; i ++ ) document . write ( ( query ( r [ i ] ) ^ query ( l [ i ] - 1 ) ) + \" \" ) ; }"}
{"text":"Driven Program","code":"let q = 3 ; let l = [ 2 , 2 , 5 ] ; let r = [ 4 , 8 , 9 ] ; allQueries ( q , l , r ) ;"}
{"text":"Precompute the prefix XOR of greatest odd divisor","code":"function prefixXOR ( arr , preXOR , n ) {"}
{"text":"Finding the Greatest Odd divisor","code":"for ( let i = 0 ; i < n ; i ++ ) { while ( arr [ i ] % 2 != 1 ) arr [ i ] = parseInt ( arr [ i ] \/ 2 ) ; preXOR [ i ] = arr [ i ] ; }"}
{"text":"Finding prefix XOR","code":"for ( let i = 1 ; i < n ; i ++ ) preXOR [ i ] = preXOR [ i - 1 ] ^ preXOR [ i ] ; }"}
{"text":"Return XOR of the range","code":"function query ( preXOR , l , r ) { if ( l == 0 ) return preXOR [ r ] ; else return preXOR [ r ] ^ preXOR [ l - 1 ] ; }"}
{"text":"Driver code","code":"let arr = [ 3 , 4 , 5 ] ; let n = arr . length ; let preXOR = new Array ( n ) ; prefixXOR ( arr , preXOR , n ) ; document . write ( query ( preXOR , 0 , 2 ) + \" \" ) ; document . write ( query ( preXOR , 1 , 2 ) + \" \" ) ;"}
{"text":"Function to find minimum swaps to sort an array of 0 s and 1 s .","code":"function findMinSwaps ( arr , n ) {"}
{"text":"Array to store count of zeroes","code":"let noOfZeroes = [ ] ; let i , count = 0 ;"}
{"text":"Count number of zeroes on right side of every one .","code":"noOfZeroes [ n - 1 ] = 1 - arr [ n - 1 ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { noOfZeroes [ i ] = noOfZeroes [ i + 1 ] ; if ( arr [ i ] == 0 ) noOfZeroes [ i ] ++ ; }"}
{"text":"Count total number of swaps by adding number of zeroes on right side of every one .","code":"for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) count += noOfZeroes [ i ] ; } return count ; }"}
{"text":"Driver Code","code":"let ar = [ 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 ] ; document . write ( findMinSwaps ( ar , ar . length ) ) ;"}
{"text":"Driver Code","code":"var arr = [ 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 ] ; document . write ( minswaps ( arr , 9 ) ) ;"}
{"text":"Function that returns true if array is sorted in non - decreasing order .","code":"function arraySortedOrNot ( arr , n ) {"}
{"text":"Array has one or no element","code":"if ( n == 0 n == 1 ) return true ; for ( let i = 1 ; i < n ; i ++ )"}
{"text":"Unsorted pair found","code":"if ( arr [ i - 1 ] > arr [ i ] ) return false ;"}
{"text":"No unsorted pair found","code":"return true ; }"}
{"text":"Driver Code","code":"let arr = [ 20 , 23 , 23 , 45 , 78 , 88 ] ; let n = arr . length ; if ( arraySortedOrNot ( arr , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Prints two numbers that occur odd number of times . Function assumes that array size is at least 2 and there are exactly two numbers occurring odd number of times .","code":"function printTwoOdd ( arr , size ) {"}
{"text":"Will hold XOR of two odd occurring elements","code":"let xor2 = arr [ 0 ] ;"}
{"text":"Will have only single set bit of xor2","code":"let set_bit_no ; let i ; int n = size - 2 ; let x = 0 , y = 0 ;"}
{"text":"Get the xor of all the elements in arr [ ] . The xor will basically be xor of two odd occurring elements","code":"for ( i = 1 ; i < size ; i ++ ) xor2 = xor2 ^ arr [ i ] ;"}
{"text":"Get one set bit in the xor2 . We get rightmost set bit in the following line as it is to get .","code":"set_bit_no = xor2 & ~ ( xor2 - 1 ) ;"}
{"text":"divide elements in two sets : 1 ) The elements having the corresponding bit as 1. 2 ) The elements having the corresponding bit as 0.","code":"for ( i = 0 ; i < size ; i ++ ) {"}
{"text":"XOR of first set is finally going to hold one odd occurring number x","code":"if ( ( arr [ i ] & set_bit_no ) > 0 ) x = x ^ arr [ i ] ;"}
{"text":"XOR of second set is finally going to hold the other odd occurring number y","code":"else y = y ^ arr [ i ] ; } document . write ( \" \" + x + \" \" + y + \" \" ) ; }"}
{"text":"Driver code","code":"let arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 ] ; let arr_size = arr . length ; printTwoOdd ( arr , arr_size ) ;"}
{"text":"Prints two numbers that occur odd number of times . The function assumes that the array size is at least 2 and there are exactly two numbers occurring odd number of times .","code":"function printTwoOdd ( arr , size ) {"}
{"text":"Create map and calculate frequency of array of * elements using array .","code":"let m = new Map ( ) ; for ( let i = 0 ; i < size ; i ++ ) { if ( m . has ( arr [ i ] ) ) { m . set ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) } else { m . set ( arr [ i ] , 1 ) } }"}
{"text":"Traverse through the map and check if its second element that is the frequency is odd or not . Then this is the odd occurring element . Its is clearly mentioned in problem that there are only two odd occurring elements so this will print those two elements .","code":"document . write ( \" \" ) ; let ar = [ ] for ( let x of m ) { if ( x [ 1 ] % 2 != 0 ) ar . push ( x [ 0 ] ) } document . write ( ` ${ ar . reverse ( ) } ` ) }"}
{"text":"Driver code","code":"let arr = [ 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 ] ; let arr_size = arr . length ; printTwoOdd ( arr , arr_size ) ;"}
{"text":"The function assumes that the array is sorted","code":"function findPair ( arr , size , n ) {"}
{"text":"Initialize positions of two elements","code":"let i = 0 ; let j = 1 ;"}
{"text":"Search for a pair","code":"while ( i < size && j < size ) { if ( i != j && arr [ j ] - arr [ i ] == n ) { document . write ( \" \" + arr [ i ] + \" \" + arr [ j ] + \" \" ) ; return true ; } else if ( arr [ j ] - arr [ i ] < n ) j ++ ; else i ++ ; } document . write ( \" \" ) ; return false ; }"}
{"text":"Driver program to test above function","code":"let arr = [ 1 , 8 , 30 , 40 , 100 ] ; let size = arr . length ; let n = 60 ; findPair ( arr , size , n ) ;"}
{"text":"Function to print m Maximum elements","code":"function printMax ( arr , k , n ) {"}
{"text":"vector to store the copy of the original array","code":"var brr = arr . slice ( ) ;"}
{"text":"Sorting the vector in descending order . Please refer below link for details www . geeksforgeeks . org \/ sort - c - stl \/ https :","code":"brr . sort ( ( a , b ) => b - a ) ;"}
{"text":"Traversing through original array and printing all those elements that are in first k of sorted vector . goo . gl \/ 44 Rwgt Please refer https : for details of binary_search ( )","code":"for ( var i = 0 ; i < n ; ++ i ) if ( brr . indexOf ( arr [ i ] ) < k ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"var arr = [ 50 , 8 , 45 , 12 , 25 , 40 , 84 ] ; var n = arr . length ; var k = 3 ; printMax ( arr , k , n ) ;"}
{"text":"Function to print smallest n numbers","code":"function printSmall ( arr , asize , n ) {"}
{"text":"Make copy of array","code":"let copy_arr = [ ... arr ] ;"}
{"text":"Sort copy array","code":"copy_arr . sort ( ( a , b ) => a - b ) ;"}
{"text":"For each arr [ i ] find whether it is a part of n - smallest with binary search","code":"for ( let i = 0 ; i < asize ; ++ i ) { if ( arr [ i ] < copy_arr [ n ] ) document . write ( arr [ i ] + \" \" ) ; } }"}
{"text":"Driver program","code":"let arr = [ 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 ] ; let asize = arr . length ; let n = 5 ; printSmall ( arr , asize , n ) ;"}
{"text":"Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression","code":"function checkIsAP ( arr , n ) { if ( n == 1 ) return true ;"}
{"text":"Sort array","code":"arr . sort ( ( a , b ) => a - b ) ;"}
{"text":"After sorting , difference between consecutive elements must be same .","code":"let d = arr [ 1 ] - arr [ 0 ] ; for ( let i = 2 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; return true ; }"}
{"text":"Driven Program","code":"let arr = [ 20 , 15 , 5 , 0 , 10 ] ; let n = arr . length ; ( checkIsAP ( arr , n ) ) ? ( document . write ( \" \" + \" \" ) ) : ( document . write ( \" \" + \" \" ) ) ;"}
{"text":"Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression","code":"function checkIsAP ( arr , n ) { var hm = new Map ( ) ; var smallest = 1000000000 , second_smallest = 1000000000 ; for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"Find the smallest and and update second smallest","code":"if ( arr [ i ] < smallest ) { second_smallest = smallest ; smallest = arr [ i ] ; }"}
{"text":"Find second smallest","code":"else if ( arr [ i ] != smallest && arr [ i ] < second_smallest ) second_smallest = arr [ i ] ;"}
{"text":"Check if the duplicate element found or not","code":"if ( ! hm . has ( arr [ i ] ) ) { hm . set ( arr [ i ] , 1 ) ; }"}
{"text":"If duplicate found then return false","code":"else return false ; }"}
{"text":"Find the difference between smallest and second smallest","code":"var diff = second_smallest - smallest ;"}
{"text":"As we have used smallest and second smallest , so we should now only check for n - 2 elements","code":"for ( var i = 0 ; i < n - 1 ; i ++ ) { if ( ! hm . has ( second_smallest ) ) return false ; second_smallest += diff ; } return true ; }"}
{"text":"Driven Program","code":"var arr = [ 20 , 15 , 5 , 0 , 10 ] ; var n = arr . length ; ( checkIsAP ( arr , n ) ) ? ( document . write ( \" \" ) ) : ( document . write ( \" \" ) ) ;"}
{"text":"JavaScript Code to find no . of Ways of choosing a pair with maximum difference","code":"function countPairs ( a , n ) {"}
{"text":"To find minimum and maximum of the array","code":"let mn = Number . MAX_VALUE ; let mx = Number . MIN_VALUE ; for ( let i = 0 ; i < n ; i ++ ) { mn = Math . min ( mn , a [ i ] ) ; mx = Math . max ( mx , a [ i ] ) ; }"}
{"text":"to find the count of minimum and maximum elements","code":"let c1 = 0 ;"}
{"text":"Count variables","code":"let c2 = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( a [ i ] == mn ) c1 ++ ; if ( a [ i ] == mx ) c2 ++ ; }"}
{"text":"condition for all elements equal","code":"if ( mn == mx ) return n * ( n - 1 ) \/ 2 ; else return c1 * c2 ; }"}
{"text":"Driver Code","code":"let a = [ 3 , 2 , 1 , 1 , 3 ] ; let n = a . length ; document . write ( countPairs ( a , n ) ) ;"}
{"text":"Javascript code to rearrange linked list in place","code":"class Node { constructor ( ) { this . data ; this . next = null ; } }"}
{"text":"function for rearranging a linked list with high and low value .","code":"function rearrange ( head ) {"}
{"text":"Base case .","code":"if ( head == null ) return null ;"}
{"text":"two pointer variable .","code":"let prev = head , curr = head . next ; while ( curr != null ) {"}
{"text":"swap function for swapping data .","code":"if ( prev . data > curr . data ) { let t = prev . data ; prev . data = curr . data ; curr . data = t ; }"}
{"text":"swap function for swapping data .","code":"if ( curr . next != null && curr . next . data > curr . data ) { let t = curr . next . data ; curr . next . data = curr . data ; curr . data = t ; } prev = curr . next ; if ( curr . next == null ) break ; curr = curr . next . next ; } return head ; }"}
{"text":"function to insert a Node in the linked list at the beginning .","code":"function push ( head , k ) { let tem = new Node ( ) ; tem . data = k ; tem . next = head ; head = tem ; return head ; }"}
{"text":"function to display Node of linked list .","code":"function display ( head ) { let curr = head ; while ( curr != null ) { document . write ( curr . data + \" \" ) ; curr = curr . next ; } }"}
{"text":"Let create a linked list . 9 . 6 . 8 . 3 . 7","code":"let head = null ; head = push ( head , 7 ) ; head = push ( head , 3 ) ; head = push ( head , 8 ) ; head = push ( head , 6 ) ; head = push ( head , 9 ) ; head = rearrange ( head ) ; display ( head ) ;"}
{"text":"Creating the structure for node javascript implementation","code":"class Node { constructor ( val ) { this . data = val ; this . next = null ; } }"}
{"text":"Function to print the list","code":"function printlist ( head ) { while ( head != null ) { document . write ( head . data + \" \" ) ; if ( head . next != null ) { document . write ( \" \" ) ; } head = head . next ; } document . write ( \" \" ) ; }"}
{"text":"Function to rearrange","code":"function rearrange ( head ) { if ( head != null ) { left = head ; reorderListUtil ( left ) ; } } function reorderListUtil ( right ) { if ( right == null ) { return ; } reorderListUtil ( right . next ) ;"}
{"text":"we set left = null , when we reach stop condition , so no processing required after that","code":"if ( left == null ) { return ; }"}
{"text":"Stop condition : odd case : left = right , even case : left . next = right","code":"if ( left != right && left . next != right ) { var temp = left . next ; left . next = right ; right . next = temp ; left = temp ;"}
{"text":"stop condition , set null to left nodes","code":"} else { if ( left . next == right ) {"}
{"text":"even case","code":"left . next . next = null ; left = null ; } else {"}
{"text":"odd case","code":"left . next = null ; left = null ; } } }"}
{"text":"Drivers Code","code":"var head = new Node ( 1 ) ; head . next = new Node ( 2 ) ; head . next . next = new Node ( 3 ) ; head . next . next . next = new Node ( 4 ) ; head . next . next . next . next = new Node ( 5 ) ;"}
{"text":"Print original list","code":"printlist ( head ) ;"}
{"text":"Modify the list","code":"rearrange ( head ) ;"}
{"text":"Print modified list","code":"printlist ( head ) ;"}
{"text":"head of list","code":"var head ; var borrow ;"}
{"text":"Node Class","code":"class Node { constructor ( d ) { this . data = d ; this . next = null ; } }"}
{"text":"A utility function to get length of linked list","code":"function getLength ( node ) { var size = 0 ; while ( node != null ) { node = node . next ; size ++ ; } return size ; }"}
{"text":"A Utility that padds zeros in front of the Node , with the given diff","code":"function paddZeros ( sNode , diff ) { if ( sNode == null ) return null ; var zHead = new Node ( 0 ) ; diff -- ; var temp = zHead ; while ( ( diff -- ) != 0 ) { temp . next = new Node ( 0 ) ; temp = temp . next ; } temp . next = sNode ; return zHead ; }"}
{"text":"Subtract LinkedList Helper is a recursive function , move till the last Node , and subtract the digits and create the Node and return the Node . If d1 < d2 , * we borrow the number from previous digit .","code":"function subtractLinkedListHelper ( l1 , l2 ) { if ( l1 == null && l2 == null && borrow == false ) return null ; var previous = subtractLinkedListHelper ( ( l1 != null ) ? l1 . next : null , ( l2 != null ) ? l2 . next : null ) ; var d1 = l1 . data ; var d2 = l2 . data ; var sub = 0 ;"}
{"text":"if you have given the value value to next digit then reduce the d1 by 1","code":"if ( borrow ) { d1 -- ; borrow = false ; }"}
{"text":"If d1 < d2 , then borrow the number from previous digit . Add 10 to d1 and set borrow = true ;","code":"if ( d1 < d2 ) { borrow = true ; d1 = d1 + 10 ; }"}
{"text":"subtract the digits","code":"sub = d1 - d2 ;"}
{"text":"Create a Node with sub value","code":"var current = new Node ( sub ) ;"}
{"text":"Set the Next pointer as Previous","code":"current . next = previous ; return current ; }"}
{"text":"This API subtracts two linked lists and returns the linked list which shall have the subtracted result .","code":"function subtractLinkedList ( l1 , l2 ) {"}
{"text":"Base Case .","code":"if ( l1 == null && l2 == null ) return null ;"}
{"text":"In either of the case , get the lengths of both Linked list .","code":"var len1 = getLength ( l1 ) ; var len2 = getLength ( l2 ) ; var lNode = null , sNode = null ; var temp1 = l1 ; var temp2 = l2 ;"}
{"text":"If lengths differ , calculate the smaller Node and padd zeros for smaller Node and ensure both larger Node and smaller Node has equal length .","code":"if ( len1 != len2 ) { lNode = len1 > len2 ? l1 : l2 ; sNode = len1 > len2 ? l2 : l1 ; sNode = paddZeros ( sNode , Math . abs ( len1 - len2 ) ) ; } else {"}
{"text":"If both list lengths are equal , then calculate the larger and smaller list . If 5 - 6 - 7 & 5 - 6 - 8 are linked list , then walk through linked list at last Node as 7 < 8 , larger Node is 5 - 6 - 8 and smaller Node is 5 - 6 - 7.","code":"while ( l1 != null && l2 != null ) { if ( l1 . data != l2 . data ) { lNode = l1 . data > l2 . data ? temp1 : temp2 ; sNode = l1 . data > l2 . data ? temp2 : temp1 ; break ; } l1 = l1 . next ; l2 = l2 . next ; } }"}
{"text":"After calculating larger and smaller Node , call subtractLinkedListHelper which returns the subtracted linked list .","code":"borrow = false ; return subtractLinkedListHelper ( lNode , sNode ) ; }"}
{"text":"function to display the linked list","code":"function printList ( head ) { var temp = head ; while ( temp != null ) { document . write ( temp . data + \" \" ) ; temp = temp . next ; } }"}
{"text":"Driver program to test above","code":"var head = new Node ( 1 ) ; head . next = new Node ( 0 ) ; head . next . next = new Node ( 0 ) ; var head2 = new Node ( 1 ) ; var result = subtractLinkedList ( head , head2 ) ; printList ( result ) ;"}
{"text":"head of list","code":"var head ;"}
{"text":"Node Class","code":"class Node {"}
{"text":"Constructor to create a new node","code":"constructor ( d ) { this . data = d ; this . next = null ; } }"}
{"text":"function to insert node at the middle of the linked list","code":"function insertAtMid ( x ) {"}
{"text":"if list is empty","code":"if ( head == null ) head = new Node ( x ) ; else {"}
{"text":"get a new node","code":"var newNode = new Node ( x ) ; var ptr = head ; var len = 0 ;"}
{"text":"calculate length of the linked list , i . e , the number of nodes","code":"while ( ptr != null ) { len ++ ; ptr = ptr . next ; }"}
{"text":"' count ' the number of nodes after which the new node is to be inserted","code":"var count = ( ( len % 2 ) == 0 ) ? ( len \/ 2 ) : ( len + 1 ) \/ 2 ; ptr = head ;"}
{"text":"' ptr ' points to the node after which the new node is to be inserted","code":"while ( count -- > 1 ) ptr = ptr . next ;"}
{"text":"insert the ' newNode ' and adjust the required links","code":"newNode . next = ptr . next ; ptr . next = newNode ; } }"}
{"text":"function to display the linked list","code":"function display ( ) { var temp = head ; while ( temp != null ) { document . write ( temp . data + \" \" ) ; temp = temp . next ; } }"}
{"text":"Creating the list 1.2 . 4.5","code":"head = new Node ( 1 ) ; head . next = new Node ( 2 ) ; head . next . next = new Node ( 4 ) ; head . next . next . next = new Node ( 5 ) ; document . write ( \" \" + \" \" ) ; display ( ) ; var x = 3 ; insertAtMid ( x ) ; document . write ( \" \" + \" \" ) ; display ( ) ;"}
{"text":"head of list","code":"var head ;"}
{"text":"Node Class","code":"class Node { constructor ( val ) { this . data = val ; this . next = null ; } }"}
{"text":"function to insert node at the middle of the linked list","code":"function insertAtMid ( x ) {"}
{"text":"if list is empty","code":"if ( head == null ) head = new Node ( x ) ; else {"}
{"text":"get a new node","code":"var newNode = new Node ( x ) ;"}
{"text":"assign values to the slow and fast pointers","code":"var slow = head ; var fast = head . next ; while ( fast != null && fast . next != null ) {"}
{"text":"move slow pointer to next node","code":"slow = slow . next ;"}
{"text":"move fast pointer two nodes at a time","code":"fast = fast . next . next ; }"}
{"text":"insert the ' newNode ' and adjust the required links","code":"newNode . next = slow . next ; slow . next = newNode ; } }"}
{"text":"function to display the linked list","code":"function display ( ) { var temp = head ; while ( temp != null ) { document . write ( temp . data + \" \" ) ; temp = temp . next ; } }"}
{"text":"Creating the list 1.2 . 4.5","code":"head = null ; head = new Node ( 1 ) ; head . next = new Node ( 2 ) ; head . next . next = new Node ( 4 ) ; head . next . next . next = new Node ( 5 ) ; document . write ( \" \" + \" \" ) ; display ( ) ; var x = 3 ; insertAtMid ( x ) ; document . write ( \" \" + \" \" ) ; display ( ) ;"}
{"text":"Node of a doubly linked list","code":"class Node { constructor ( val ) { this . data = val ; this . prev = null ; this . next = null ; } }"}
{"text":"function to create and return a new node of a doubly linked list","code":"function getNode ( data ) {"}
{"text":"allocate node","code":"var newNode = new Node ( ) ;"}
{"text":"put in the data","code":"newNode . data = data ; newNode . prev = newNode . next = null ; return newNode ; }"}
{"text":"function to insert a new node in sorted way in a sorted doubly linked list","code":"function sortedInsert ( head_ref , newNode ) { var current ;"}
{"text":"if list is empty","code":"if ( head_ref == null ) head_ref = newNode ;"}
{"text":"if the node is to be inserted at the beginning of the doubly linked list","code":"else if ( ( head_ref ) . data >= newNode . data ) { newNode . next = head_ref ; newNode . next . prev = newNode ; head_ref = newNode ; } else { current = head_ref ;"}
{"text":"locate the node after which the new node is to be inserted","code":"while ( current . next != null && current . next . data < newNode . data ) current = current . next ;"}
{"text":"Make the appropriate links \/","code":"newNode . next = current . next ;"}
{"text":"if the new node is not inserted at the end of the list","code":"if ( current . next != null ) newNode . next . prev = newNode ; current . next = newNode ; newNode . prev = current ; } return head_ref ; }"}
{"text":"function to sort a doubly linked list using insertion sort","code":"function insertionSort ( head_ref ) {"}
{"text":"Initialize ' sorted ' - a sorted doubly linked list","code":"var sorted = null ;"}
{"text":"Traverse the given doubly linked list and insert every node to ' sorted '","code":"var current = head_ref ; while ( current != null ) {"}
{"text":"Store next for next iteration","code":"var next = current . next ;"}
{"text":"removing all the links so as to create ' current ' as a new node for insertion","code":"current . prev = current . next = null ;"}
{"text":"insert current in ' sorted ' doubly linked list","code":"sorted = sortedInsert ( sorted , current ) ;"}
{"text":"Update current","code":"current = next ; }"}
{"text":"Update head_ref to povar to sorted doubly linked list","code":"head_ref = sorted ; return head_ref ; }"}
{"text":"function to prvar the doubly linked list","code":"function printList ( head ) { while ( head != null ) { document . write ( head . data + \" \" ) ; head = head . next ; } }"}
{"text":"function to insert a node at the beginning of the doubly linked list","code":"function push ( head_ref , new_data ) {"}
{"text":"allocate node \/","code":"var new_node = new Node ( ) ;"}
{"text":"put in the data \/","code":"new_node . data = new_data ;"}
{"text":"Make next of new node as head and previous as null \/","code":"new_node . next = ( head_ref ) ; new_node . prev = null ;"}
{"text":"change prev of head node to new node \/","code":"if ( ( head_ref ) != null ) ( head_ref ) . prev = new_node ;"}
{"text":"move the head to povar to the new node \/","code":"( head_ref ) = new_node ; return head_ref ; }"}
{"text":"start with the empty doubly linked list \/","code":"var head = null ;"}
{"text":"insert the following data","code":"head = push ( head , 9 ) ; head = push ( head , 3 ) ; head = push ( head , 5 ) ; head = push ( head , 10 ) ; head = push ( head , 12 ) ; head = push ( head , 8 ) ; document . write ( \" \" ) ; printList ( head ) ; head = insertionSort ( head ) ; document . write ( \" \" ) ; printList ( head ) ;"}
{"text":"Global declaration of array","code":"arr = Array . from ( { length : 10000 } , ( _ , i ) => 0 ) ;"}
{"text":"Function to reverse array between indices s and e","code":"function reverse ( arr , s , e ) { while ( s < e ) { var tem = arr [ s ] ; arr [ s ] = arr [ e ] ; arr [ e ] = tem ; s = s + 1 ; e = e - 1 ; } }"}
{"text":"Function to generate all possible rotations of array","code":"function fun ( arr , k ) { var n = 4 - 1 ; var v = n - k ; if ( v >= 0 ) { reverse ( arr , 0 , v ) ; reverse ( arr , v + 1 , n ) ; reverse ( arr , 0 , n ) ; } }"}
{"text":"Driver code","code":"arr [ 0 ] = 1 ; arr [ 1 ] = 2 ; arr [ 2 ] = 3 ; arr [ 3 ] = 4 ; for ( i = 0 ; i < 4 ; i ++ ) { fun ( arr , i ) ; document . write ( \" \" ) ; for ( j = 0 ; j < 4 ; j ++ ) { document . write ( arr [ j ] + \" \" ) ; } document . write ( \" \" ) ; }"}
{"text":"javascript program to find Bitwise OR of two equal halves of an array after performing K right circular shifts","code":"const MAX = 100005 ;"}
{"text":"Array for storing the segment tree","code":"var seg = Array ( 4 * MAX ) . fill ( 0 ) ;"}
{"text":"Function to build the segment tree","code":"function build ( node , l , r , a ) { if ( l == r ) seg [ node ] = a [ l ] ; else { var mid = parseInt ( ( l + r ) \/ 2 ) ; build ( 2 * node , l , mid , a ) ; build ( 2 * node + 1 , mid + 1 , r , a ) ; seg [ node ] = ( seg [ 2 * node ] seg [ 2 * node + 1 ] ) ; } }"}
{"text":"Function to return the OR of elements in the range [ l , r ]","code":"function query ( node , l , r , start , end , a ) {"}
{"text":"Check for out of bound condition","code":"if ( l > end r < start ) return 0 ; if ( start <= l && r <= end ) return seg [ node ] ;"}
{"text":"Find middle of the range","code":"var mid = parseInt ( ( l + r ) \/ 2 ) ;"}
{"text":"Recurse for all the elements in array","code":"return ( ( query ( 2 * node , l , mid , start , end , a ) ) | ( query ( 2 * node + 1 , mid + 1 , r , start , end , a ) ) ) ; }"}
{"text":"Function to find the OR sum","code":"function orsum ( a , n , q , k ) {"}
{"text":"Function to build the segment Tree","code":"build ( 1 , 0 , n - 1 , a ) ;"}
{"text":"Loop to handle q queries","code":"for ( j = 0 ; j < q ; j ++ ) {"}
{"text":"Effective number of right circular shifts","code":"var i = k [ j ] % ( n \/ 2 ) ;"}
{"text":"OR of second half of the array [ n \/ 2 - i , n - 1 - i ]","code":"var sec = query ( 1 , 0 , n - 1 , n \/ 2 - i , n - i - 1 , a ) ;"}
{"text":"OR of first half of the array [ n - i , n - 1 ] OR [ 0 , n \/ 2 - 1 - i ]","code":"var first = ( query ( 1 , 0 , n - 1 , 0 , n \/ 2 - 1 - i , a ) | query ( 1 , 0 , n - 1 , n - i , n - 1 , a ) ) ; var temp = sec + first ;"}
{"text":"Prvar final answer to the query","code":"document . write ( temp + \" \" ) ; } }"}
{"text":"Driver Code","code":"var a = [ 7 , 44 , 19 , 86 , 65 , 39 , 75 , 101 ] ; var n = a . length ; var q = 2 ; var k = [ 4 , 2 ] ; orsum ( a , n , q , k ) ;"}
{"text":"Function that prlets maximum equal elements","code":"function maximumEqual ( a , b , n ) {"}
{"text":"Vector to store the index of elements of array b","code":"let store = Array . from ( { length : 1e5 } , ( _ , i ) => 0 ) ;"}
{"text":"Storing the positions of array B","code":"for ( let i = 0 ; i < n ; i ++ ) { store [ b [ i ] ] = i + 1 ; }"}
{"text":"frequency array to keep count of elements with similar difference in distances","code":"let ans = Array . from ( { length : 1e5 } , ( _ , i ) => 0 ) ;"}
{"text":"Iterate through all element in arr1 [ ]","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Calculate number of shift required to make current element equal","code":"let d = Math . abs ( store [ a [ i ] ] - ( i + 1 ) ) ;"}
{"text":"If d is less than 0","code":"if ( store [ a [ i ] ] < i + 1 ) { d = n - d ; }"}
{"text":"Store the frequency of current diff","code":"ans [ d ] ++ ; } let finalans = 0 ;"}
{"text":"Compute the maximum frequency stored","code":"for ( let i = 0 ; i < 1e5 ; i ++ ) finalans = Math . max ( finalans , ans [ i ] ) ;"}
{"text":"Printing the maximum number of equal elements","code":"document . write ( finalans + \" \" ) ; }"}
{"text":"Given two arrays","code":"let A = [ 6 , 7 , 3 , 9 , 5 ] ; let B = [ 7 , 3 , 9 , 5 , 6 ] ; let size = A . length ;"}
{"text":"Function Call","code":"maximumEqual ( A , B , size ) ;"}
{"text":"Function to rightRotate array","code":"function RightRotate ( a , n , k ) {"}
{"text":"If rotation is greater than size of array","code":"k = k % n ; for ( let i = 0 ; i < n ; i ++ ) { if ( i < k ) {"}
{"text":"Printing rightmost kth elements","code":"document . write ( a [ n + i - k ] + \" \" ) ; } else {"}
{"text":"Prints array after ' k ' elements","code":"document . write ( ( a [ i - k ] ) + \" \" ) ; } } document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"let Array = [ 1 , 2 , 3 , 4 , 5 ] ; let N = Array . length ; let K = 2 ; RightRotate ( Array , N , K ) ;"}
{"text":"Function to restore the Original Sort","code":"function restoreSortedArray ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) {"}
{"text":"In reverse ( ) , the first parameter is iterator to beginning element and second parameter is iterator to last element plus one .","code":"reverse ( arr , 0 , i ) ; reverse ( arr , i + 1 , n ) ; reverse ( arr , 0 , n ) ; } } } function reverse ( arr , i , j ) { let temp ; while ( i < j ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i ++ ; j -- ; } }"}
{"text":"Function to print the Array","code":"function printArray ( arr , size ) { for ( let i = 0 ; i < size ; i ++ ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 3 , 4 , 5 , 1 , 2 ] ; let n = arr . length ; restoreSortedArray ( arr , n - 1 ) ; printArray ( arr , n )"}
{"text":"Function to find start index of array","code":"function findStartIndexOfArray ( arr , low , high ) { if ( low > high ) { return - 1 ; } if ( low == high ) { return low ; } let mid = low + parseInt ( ( high - low ) \/ 2 , 10 ) ; if ( arr [ mid ] > arr [ mid + 1 ] ) { return mid + 1 ; } if ( arr [ mid - 1 ] > arr [ mid ] ) { return mid ; } if ( arr [ low ] > arr [ mid ] ) { return findStartIndexOfArray ( arr , low , mid - 1 ) ; } else { return findStartIndexOfArray ( arr , mid + 1 , high ) ; } }"}
{"text":"Function to restore the Original Sort","code":"function restoreSortedArray ( arr , n ) {"}
{"text":"Array is already sorted","code":"if ( arr [ 0 ] < arr [ n - 1 ] ) { return ; } let start = findStartIndexOfArray ( arr , 0 , n - 1 ) ;"}
{"text":"In reverse ( ) , the first parameter is iterator to beginning element and second parameter is iterator to last element plus one .","code":"arr . sort ( ) ; }"}
{"text":"Function to print the Array","code":"function printArray ( arr , size ) { for ( let i = 0 ; i < size ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; } }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ; restoreSortedArray ( arr , n ) ; printArray ( arr , n ) ;"}
{"text":"Function that rotates s towards left by d","code":"function leftrotate ( str , d ) { var ans = str . substring ( d , str . length ) + str . substring ( 0 , d ) ; return ans ; }"}
{"text":"Function that rotates s towards right by d","code":"function rightrotate ( str , d ) { return leftrotate ( str , str . length - d ) ; }"}
{"text":"Driver code","code":"var str1 = \" \" ; document . write ( leftrotate ( str1 , 2 ) + \" \" ) ; var str2 = \" \" ; document . write ( rightrotate ( str2 , 2 ) + \" \" ) ;"}
{"text":"Structure of a Node","code":"class Node { constructor ( ) { this . data = 0 ; this . next = this . prev = null ; } }"}
{"text":"Function to insert a node at the end","code":"function insertNode ( start , value ) {"}
{"text":"If the list is empty , create a single node circular and doubly list","code":"if ( start == null ) { let new_node = new Node ( ) ; new_node . data = value ; new_node . next = new_node . prev = new_node ; start = new_node ; return new_node ; }"}
{"text":"Find last node \/","code":"let last = ( start ) . prev ;"}
{"text":"Create Node dynamically","code":"let new_node = new Node ( ) ; new_node . data = value ;"}
{"text":"Start is going to be next of new_node","code":"new_node . next = start ;"}
{"text":"Make new node previous of start","code":"( start ) . prev = new_node ;"}
{"text":"Make last preivous of new node","code":"new_node . prev = last ;"}
{"text":"Make new node next of old last","code":"last . next = new_node ; return start ; }"}
{"text":"Function to display the circular doubly linked list","code":"function displayList ( start ) { let temp = start ; while ( temp . next != start ) { document . write ( temp . data + \" \" ) ; temp = temp . next ; } document . write ( temp . data + \" \" ) ; }"}
{"text":"Function to search the particular element from the list","code":"function searchList ( start , search ) {"}
{"text":"Declare the temp variable","code":"let temp = start ;"}
{"text":"Declare other control variable for the searching","code":"let count = 0 , flag = 0 , value ;"}
{"text":"If start is null return - 1","code":"if ( temp == null ) return - 1 ; else {"}
{"text":"Move the temp pointer until , temp . next doesn 't move  start address (Circular Fashion)","code":"while ( temp . next != start ) {"}
{"text":"Increment count for location","code":"count ++ ;"}
{"text":"If it is found raise the flag and break the loop","code":"if ( temp . data == search ) { flag = 1 ; count -- ; break ; }"}
{"text":"Increment temp pointer","code":"temp = temp . next ; }"}
{"text":"Check whether last element in the list content the value if contain , raise a flag and increment count","code":"if ( temp . data == search ) { count ++ ; flag = 1 ; }"}
{"text":"If flag is true , then element found , else not","code":"if ( flag == 1 ) document . write ( \" \" + search + \" \" + count ) ; else document . write ( \" \" + search + \" \" ) ; } return - 1 ; }"}
{"text":"Start with the empty list \/","code":"let start = null ;"}
{"text":"Insert 4. So linked list becomes 4. null","code":"start = insertNode ( start , 4 ) ;"}
{"text":"Insert 5. So linked list becomes 4.5","code":"start = insertNode ( start , 5 ) ;"}
{"text":"Insert 7. So linked list becomes 4.5 . 7","code":"start = insertNode ( start , 7 ) ;"}
{"text":"Insert 8. So linked list becomes 4.5 . 7.8","code":"start = insertNode ( start , 8 ) ;"}
{"text":"Insert 6. So linked list becomes 4.5 . 7.8 . 6","code":"start = insertNode ( start , 6 ) ; document . write ( \" \" ) ; displayList ( start ) ; searchList ( start , 5 ) ;"}
{"text":"structure of a node of linked list","code":"class Node { constructor ( ) { this . data = 0 ; this . next = null ; this . prev = null ; } }"}
{"text":"function to create and return a new node","code":"function getNode ( data ) { var newNode = new Node ( ) ; newNode . data = data ; return newNode ; }"}
{"text":"Function to insert at the end","code":"function insertEnd ( head , new_node ) {"}
{"text":"If the list is empty , create a single node circular and doubly list","code":"if ( head == null ) { new_node . next = new_node . prev = new_node ; head = new_node ; return head ; }"}
{"text":"Find last node \/","code":"var last = head . prev ;"}
{"text":"Start is going to be next of new_node","code":"new_node . next = head ;"}
{"text":"Make new node previous of start","code":"head . prev = new_node ;"}
{"text":"Make last preivous of new node","code":"new_node . prev = last ;"}
{"text":"Make new node next of old last","code":"last . next = new_node ; return head ; }"}
{"text":"Uitlity function to revesre a doubly circular linked list","code":"function reverse ( head ) { if ( head == null ) return null ;"}
{"text":"Initialize a new head pointer","code":"var new_head = null ;"}
{"text":"get pointer to the the last node","code":"var last = head . prev ;"}
{"text":"set ' curr ' to last node","code":"var curr = last , prev ;"}
{"text":"traverse list in backward direction","code":"while ( curr . prev != last ) { prev = curr . prev ;"}
{"text":"insert ' curr ' at the end of the list starting with the ' new _ head ' pointer","code":"new_head = insertEnd ( new_head , curr ) ; curr = prev ; } new_head = insertEnd ( new_head , curr ) ;"}
{"text":"head pointer of the reversed list","code":"return new_head ; }"}
{"text":"function to display a doubly circular list in forward and backward direction","code":"function display ( head ) { if ( head == null ) return ; var temp = head ; document . write ( \" \" ) ; while ( temp . next != head ) { document . write ( temp . data + \" \" ) ; temp = temp . next ; } document . write ( temp . data + \" \" ) ; var last = head . prev ; temp = last ; document . write ( \" \" ) ; while ( temp . prev != last ) { document . write ( temp . data + \" \" ) ; temp = temp . prev ; } document . write ( temp . data + \" \" ) ; }"}
{"text":"Driver code","code":"var head = null ; head = insertEnd ( head , getNode ( 1 ) ) ; head = insertEnd ( head , getNode ( 2 ) ) ; head = insertEnd ( head , getNode ( 3 ) ) ; head = insertEnd ( head , getNode ( 4 ) ) ; head = insertEnd ( head , getNode ( 5 ) ) ; document . write ( \" \" ) ; display ( head ) ; head = reverse ( head ) ; document . write ( \" \" ) ; display ( head ) ;"}
{"text":"Naive Javascrit implementation to find LCA in a tree .","code":"var MAXN = 1001 ;"}
{"text":"Stores depth for each node","code":"var depth = Array ( MAXN ) ;"}
{"text":"Stores first parent for each node","code":"var parent = Array ( MAXN ) ; var adj = Array . from ( Array ( MAXN ) , ( ) => Array ( ) ) ; function addEdge ( u , v ) { adj [ u ] . push ( v ) ; adj [ v ] . push ( u ) ; } function dfs ( cur , prev ) {"}
{"text":"Marking parent for each node","code":"parent [ cur ] = prev ;"}
{"text":"Marking depth for each node","code":"depth [ cur ] = depth [ prev ] + 1 ;"}
{"text":"Propogating marking down the tree","code":"for ( var i = 0 ; i < adj [ cur ] . length ; i ++ ) if ( adj [ cur ] [ i ] != prev ) dfs ( adj [ cur ] [ i ] , cur ) ; } function preprocess ( ) {"}
{"text":"A dummy node","code":"depth [ 0 ] = - 1 ;"}
{"text":"Precalclating 1 ) depth . 2 ) parent . for each node","code":"dfs ( 1 , 0 ) ; }"}
{"text":"Time Complexity : O ( Height of tree ) recursively jumps one node above till both the nodes become equal","code":"function LCANaive ( u , v ) { if ( u == v ) return u ; if ( depth [ u ] > depth [ v ] ) { var temp = u ; u = v ; v = temp ; } v = parent [ v ] ; return LCANaive ( u , v ) ; }"}
{"text":"Driver Code","code":"for ( var i = 0 ; i < MAXN ; i ++ ) adj [ i ] = [ ] ;"}
{"text":"Adding edges to the tree","code":"addEdge ( 1 , 2 ) ; addEdge ( 1 , 3 ) ; addEdge ( 1 , 4 ) ; addEdge ( 2 , 5 ) ; addEdge ( 2 , 6 ) ; addEdge ( 3 , 7 ) ; addEdge ( 4 , 8 ) ; addEdge ( 4 , 9 ) ; addEdge ( 9 , 10 ) ; addEdge ( 9 , 11 ) ; addEdge ( 7 , 12 ) ; addEdge ( 7 , 13 ) ; preprocess ( ) ; document . write ( \" \" + LCANaive ( 11 , 8 ) + \" \" ) ; document . write ( \" \" + LCANaive ( 3 , 13 ) ) ;"}
{"text":"Javascript program to find LCA using Sqrt decomposition","code":"let MAXN = 1001 ;"}
{"text":"Block size = Math . sqrt ( height )","code":"let block_sz ;"}
{"text":"Stores depth for each node","code":"let depth = new Array ( MAXN ) ;"}
{"text":"Stores first parent for each node","code":"let parent = new Array ( MAXN ) ;"}
{"text":"Stores first ancestor in previous block","code":"let jump_parent = new Array ( MAXN ) ; let adj = new Array ( MAXN ) ; function addEdge ( u , v ) { adj [ u ] . push ( v ) ; adj [ v ] . push ( u ) ; } function LCANaive ( u , v ) { if ( u == v ) return u ; if ( depth [ u ] > depth [ v ] ) { let t = u ; u = v ; v = t ; } v = parent [ v ] ; return LCANaive ( u , v ) ; }"}
{"text":"Precalculating the required parameters associated with every node","code":"function dfs ( cur , prev ) {"}
{"text":"Marking depth of cur node","code":"depth [ cur ] = depth [ prev ] + 1 ;"}
{"text":"Marking parent of cur node","code":"parent [ cur ] = prev ;"}
{"text":"Making jump_parent of cur node","code":"if ( depth [ cur ] % block_sz == 0 )"}
{"text":"If it is first node of the block then its jump_parent is its cur parent","code":"jump_parent [ cur ] = parent [ cur ] ; else"}
{"text":"If it is not the first node of this block then its jump_parent is jump_parent of its parent","code":"jump_parent [ cur ] = jump_parent [ prev ] ;"}
{"text":"Propogating the marking down the subtree","code":"for ( let i = 0 ; i < adj [ cur ] . length ; ++ i ) if ( adj [ cur ] [ i ] != prev ) dfs ( adj [ cur ] [ i ] , cur ) ; }"}
{"text":"Using sqrt decomposition trick","code":"function LCASQRT ( u , v ) { while ( jump_parent [ u ] != jump_parent [ v ] ) { if ( depth [ u ] > depth [ v ] ) {"}
{"text":"Maintaining depth [ v ] > depth [ u ]","code":"let t = u ; u = v ; v = t ; }"}
{"text":"Climb to its jump parent","code":"v = jump_parent [ v ] ; }"}
{"text":"u and v have same jump_parent","code":"return LCANaive ( u , v ) ; } function preprocess ( height ) { block_sz = parseInt ( Math . sqrt ( height ) , 10 ) ; depth [ 0 ] = - 1 ;"}
{"text":"Precalclating 1 ) depth . 2 ) parent . 3 ) jump_parent for each node","code":"dfs ( 1 , 0 ) ; }"}
{"text":"Driver code","code":"for ( let i = 0 ; i < adj . length ; i ++ ) adj [ i ] = [ ] ;"}
{"text":"Adding edges to the tree","code":"addEdge ( 1 , 2 ) ; addEdge ( 1 , 3 ) ; addEdge ( 1 , 4 ) ; addEdge ( 2 , 5 ) ; addEdge ( 2 , 6 ) ; addEdge ( 3 , 7 ) ; addEdge ( 4 , 8 ) ; addEdge ( 4 , 9 ) ; addEdge ( 9 , 10 ) ; addEdge ( 9 , 11 ) ; addEdge ( 7 , 12 ) ; addEdge ( 7 , 13 ) ;"}
{"text":"Here we are directly taking height = 4 according to the given tree but we can pre - calculate height = max depth in one more dfs","code":"let height = 4 ; preprocess ( height ) ; document . write ( \" \" + LCASQRT ( 11 , 8 ) + \" \" ) ; document . write ( \" \" + LCASQRT ( 3 , 13 ) + \" \" ) ;"}
{"text":"Driver Code","code":"let N = 3 ;"}
{"text":"Formula for number of trails for N consecutive heads","code":"document . write ( Math . pow ( 2 , N + 1 ) - 2 ) ;"}
{"text":"Function to return the count of numbers which are divisible by both A and B in the range [ 1 , N ] in constant time","code":"function countOfNum ( n , a , b ) { let cnt_of_a , cnt_of_b , cnt_of_ab , sum ;"}
{"text":"Compute the count of numbers divisible by A in the range [ 1 , N ]","code":"cnt_of_a = Math . floor ( n \/ a ) ;"}
{"text":"Compute the count of numbers divisible by B in the range [ 1 , N ]","code":"cnt_of_b = Math . floor ( n \/ b ) ;"}
{"text":"Adding the counts which are divisible by A and B","code":"sum = cnt_of_b + cnt_of_a ;"}
{"text":"The above value might contain repeated values which are divisible by both A and B . Therefore , the count of numbers which are divisible by both A and B are found","code":"cnt_of_ab = Math . floor ( n \/ ( a * b ) ) ;"}
{"text":"The count computed above is subtracted to compute the final count","code":"sum = sum - cnt_of_ab ; return sum ; }"}
{"text":"Function to return the sum of numbers which are divisible by both A and B in the range [ 1 , N ]","code":"function sumOfNum ( n , a , b ) { let i ; let sum = 0 ;"}
{"text":"Set to store the numbers so that the numbers are not repeated","code":"let ans = new Set ( ) ;"}
{"text":"For loop to find the numbers which are divisible by A and insert them into the set","code":"for ( i = a ; i <= n ; i = i + a ) { ans . add ( i ) ; }"}
{"text":"For loop to find the numbers which are divisible by A and insert them into the set","code":"for ( i = b ; i <= n ; i = i + b ) { ans . add ( i ) ; }"}
{"text":"For loop to iterate through the set and find the sum","code":"for ( let it of ans . values ( ) ) { sum = sum + it ; } return sum ; }"}
{"text":"Driver code","code":"let N = 88 ; let A = 11 ; let B = 8 ; let count = countOfNum ( N , A , B ) ; let sumofnum = sumOfNum ( N , A , B ) ; document . write ( sumofnum % count ) ;"}
{"text":"Function to return the value of the given expression","code":"function get ( L , R ) {"}
{"text":"Value of the first term","code":"let x = 1.0 \/ L ;"}
{"text":"Value of the last term","code":"let y = 1.0 \/ ( R + 1.0 ) ; return ( x - y ) ; }"}
{"text":"Driver code","code":"let L = 6 , R = 12 ;"}
{"text":"Get the result","code":"let ans = get ( L , R ) ; document . write ( Math . round ( ans * 100 ) \/ 100 ) ;"}
{"text":"JavaScript implementation of the approach","code":"const MAX = 100000 ;"}
{"text":"To store the pre - computed integers","code":"let v = [ ] ; function upper_bound ( ar , k ) { let s = 0 ; let e = ar . length ; while ( s != e ) { let mid = s + e >> 1 ; if ( ar [ mid ] <= k ) { s = mid + 1 ; } else { e = mid ; } } if ( s == ar . length ) { return - 1 ; } return s ; }"}
{"text":"Function that returns true if the binary representation of x contains consecutive 1 s","code":"function consecutiveOnes ( x ) {"}
{"text":"To store the previous bit","code":"let p = 0 ; while ( x > 0 ) {"}
{"text":"Check whether the previous bit and the current bit are both 1","code":"if ( x % 2 == 1 && p == 1 ) return true ;"}
{"text":"Update previous bit","code":"p = x % 2 ;"}
{"text":"Go to the next bit","code":"x = parseInt ( x \/ 2 ) ; } return false ; }"}
{"text":"Function to pre - compute the valid numbers from 0 to MAX","code":"function preCompute ( ) {"}
{"text":"Store all the numbers which do not have consecutive 1 s","code":"for ( let i = 0 ; i <= MAX ; i ++ ) { if ( ! consecutiveOnes ( i ) ) v . push ( i ) ; } }"}
{"text":"Function to return the minimum number greater than n which does not contain consecutive 1 s","code":"function nextValid ( n ) {"}
{"text":"Search for the next greater element with no consecutive 1 s","code":"let it = upper_bound ( v , n ) ; let val = v [ it ] ; return val ; }"}
{"text":"Function to perform the queries","code":"function performQueries ( queries , q ) { for ( let i = 0 ; i < q ; i ++ ) document . write ( nextValid ( queries [ i ] ) + \" \" ) ; }"}
{"text":"Driver code","code":"let queries = [ 4 , 6 ] ; let q = queries . length ;"}
{"text":"Pre - compute the numbers","code":"preCompute ( ) ;"}
{"text":"Perform the queries","code":"performQueries ( queries , q ) ;"}
{"text":"Function to return the number of operations required","code":"function changeToOnes ( str ) {"}
{"text":"ctr will store the number of consecutive ones at the end of the given binary string","code":"var i , l , ctr = 0 ; l = str . length ;"}
{"text":"Loop to find number of 1 s at the end of the string","code":"for ( i = l - 1 ; i >= 0 ; i -- ) {"}
{"text":"If the current character is 1","code":"if ( str [ i ] == ' ' ) ctr ++ ;"}
{"text":"If we encounter the first 0 from the LSB position then we 'll break the loop","code":"else break ; }"}
{"text":"Number of operations required is ( l - ctr )","code":"return l - ctr ; }"}
{"text":"Function to remove leading zeroes from the string","code":"function removeZeroesFromFront ( str ) { var s ; var i = 0 ;"}
{"text":"Loop until s [ i ] becomes not equal to 1","code":"while ( i < str . length && str [ i ] == ' ' ) i ++ ;"}
{"text":"If we reach the end of the string , it means that string contains only 0 's","code":"if ( i == str . length ) s = \" \" ;"}
{"text":"Return the string without leading zeros","code":"else s = str . substring ( i , str . length - i ) ; return s ; }"}
{"text":"Driver code","code":"var str = \" \" ;"}
{"text":"Removing the leading zeroes","code":"str = removeZeroesFromFront ( str ) ; document . write ( changeToOnes ( str ) ) ;"}
{"text":"Function to return the minimum deletions required","code":"function MinDeletion ( a , n ) {"}
{"text":"To store the frequency of the array elements","code":"let map = new Map ( ) ;"}
{"text":"Store frequency of each element","code":"for ( let i = 0 ; i < n ; i ++ ) { if ( map [ a [ i ] ] ) map [ a [ i ] ] ++ ; else map [ a [ i ] ] = 1 }"}
{"text":"To store the minimum deletions required","code":"let ans = 0 ; for ( var m in map ) {"}
{"text":"Value","code":"let x = m ;"}
{"text":"It 's frequency","code":"let frequency = map [ m ] ;"}
{"text":"If number less than or equal to it 's frequency","code":"if ( x <= frequency ) {"}
{"text":"Delete extra occurrences","code":"ans += ( frequency - x ) ; }"}
{"text":"Delete every occurrence of x","code":"else ans += frequency ; } ; return ans ; }"}
{"text":"Driver code","code":"let a = [ 2 , 3 , 2 , 3 , 4 , 4 , 4 , 4 , 5 ] ; let n = a . length ; document . write ( MinDeletion ( a , n ) ) ;"}
{"text":"Function to find maximum number of ABs","code":"function maxCountAB ( s , n ) {"}
{"text":"variable A , B , AB for count strings that end with ' A ' but not end with ' B ' , ' B ' but does not end with ' A ' and ' B ' and ends with ' A ' respectively .","code":"var A = 0 , B = 0 , BA = 0 , ans = 0 ; for ( var i = 0 ; i < n ; i ++ ) { var S = s [ i ] ; var L = S . length ; for ( var j = 0 ; j < L - 1 ; j ++ ) {"}
{"text":"' AB ' is already present in string before concatenate them","code":"if ( S [ j ] == ' ' && S [ j + 1 ] == ' ' ) { ans ++ ; } }"}
{"text":"count of strings that begins with ' B ' and ends with 'A","code":"if ( S [ 0 ] == ' ' && S [ L - 1 ] == ' ' ) BA ++ ;"}
{"text":"count of strings that begins with ' B ' but does not end with ' A '","code":"else if ( S [ 0 ] == ' ' ) B ++ ;"}
{"text":"count of strings that ends with ' A ' but not end with ' B '","code":"else if ( S [ L - 1 ] == ' ' ) A ++ ; }"}
{"text":"updating the value of ans and add extra count of ' AB '","code":"if ( BA == 0 ) ans += Math . min ( B , A ) ; else if ( A + B == 0 ) ans += BA - 1 ; else ans += BA + Math . min ( B , A ) ; return ans ; }"}
{"text":"Driver Code","code":"var s = [ \" \" , \" \" , \" \" ] ; var n = s . length ; document . write ( maxCountAB ( s , n ) ) ;"}
{"text":"Function to return the minimum number of operations required","code":"function MinOperations ( n , x , arr ) {"}
{"text":"To store total operations required","code":"let total = 0 ; for ( let i = 0 ; i < n ; ++ i ) {"}
{"text":"First make all elements equal to x which are currenctly greater","code":"if ( arr [ i ] > x ) { let difference = arr [ i ] - x ; total = total + difference ; arr [ i ] = x ; } }"}
{"text":"Left scan the array","code":"for ( let i = 1 ; i < n ; ++ i ) { let LeftNeigbouringSum = arr [ i ] + arr [ i - 1 ] ;"}
{"text":"Update the current element such that neighbouring sum is < x","code":"if ( LeftNeigbouringSum > x ) { let current_diff = LeftNeigbouringSum - x ; arr [ i ] = Math . max ( 0 , arr [ i ] - current_diff ) ; total = total + current_diff ; } } return total ; }"}
{"text":"Driver code","code":"let X = 1 ; let arr = [ 1 , 6 , 1 , 2 , 0 , 4 ] ; let N = arr . length ; document . write ( MinOperations ( N , X , arr ) + \" \" ) ;"}
{"text":"Function to print the required numbers","code":"function findNumbers ( arr , n ) {"}
{"text":"Sum of first n natural numbers","code":"sumN = ( n * ( n + 1 ) ) \/ 2 ;"}
{"text":"Sum of squares of first n natural numbers","code":"sumSqN = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) \/ 6 ;"}
{"text":"To store the sum and sum of squares of the array elements","code":"let sum = 0 ; let sumSq = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; sumSq += Math . pow ( arr [ i ] , 2 ) ; } B = ( ( ( sumSq - sumSqN ) \/ ( sum - sumN ) ) + sumN - sum ) \/ 2 ; A = sum - sumN + B ; document . write ( \" \" + A , \" \" , B ) ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 2 , 3 , 4 ] ; n = arr . length ; findNumbers ( arr , n ) ;"}
{"text":"Function to find the whether the string temp starts with str or not","code":"function is_prefix ( temp , str ) {"}
{"text":"Base Case","code":"if ( temp . length < str . length ) return 0 ; else {"}
{"text":"Check for the corresponding characters in temp & str","code":"for ( let i = 0 ; i < str . length ; i ++ ) { if ( str [ i ] != temp [ i ] ) return 0 ; } return 1 ; } }"}
{"text":"Function to find lexicographic smallest string consisting of the string str as prefix","code":"function lexicographicallyString ( input , n , str ) {"}
{"text":"Sort the given array string arr [ ]","code":"input = Array . from ( input ) . sort ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let temp = input [ i ] ;"}
{"text":"If the i - th string contains given string as a prefix , then print the result","code":"if ( is_prefix ( temp , str ) ) { return temp ; } }"}
{"text":"If no string exists then return \" - 1\"","code":"return \" \" ; }"}
{"text":"Driver Code","code":"let arr = [ \" \" , \" \" , \" \" , \" \" , \" \" ] ; let S = \" \" ; let N = 5 ; document . write ( lexicographicallyString ( arr , N , S ) ) ;"}
{"text":"Function to rearrange the array","code":"function Rearrange ( arr , K , N ) {"}
{"text":"Stores the rearranged array","code":"let ans = new Array ( N + 1 ) ;"}
{"text":"Stores whether the arrangement is possible or not","code":"let f = - 1 ; for ( let i = 0 ; i < N ; i ++ ) { ans [ i ] = - 1 ; }"}
{"text":"Update K with the position of K","code":"for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] == K ) { K = i ; break ; } }"}
{"text":"Stores all elements lesser than and greater than in vector smaller and greater respectively","code":"let smaller = [ ] ; let greater = [ ] ;"}
{"text":"Traverse the array arr [ ]","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If arr [ i ] is less than arr [ K ]","code":"if ( arr [ i ] < arr [ K ] ) smaller . push ( arr [ i ] ) ;"}
{"text":"Else","code":"else if ( arr [ i ] > arr [ K ] ) greater . push ( arr [ i ] ) ; } let low = 0 , high = N - 1 ;"}
{"text":"Iterate unil low is less than or equal to high","code":"while ( low <= high ) {"}
{"text":"Stores mid point","code":"let mid = Math . floor ( ( low + high ) \/ 2 ) ;"}
{"text":"If mid is equal to K","code":"if ( mid == K ) { ans [ mid ] = arr [ K ] ; f = 1 ; break ; }"}
{"text":"If mid is less than K","code":"else if ( mid < K ) { if ( smaller . length == 0 ) { break ; } ans [ mid ] = smaller [ smaller . length - 1 ] ; smaller . pop ( ) ; low = mid + 1 ; }"}
{"text":"If mid is greater than K","code":"else { if ( greater . length == 0 ) { break ; } ans [ mid ] = greater [ greater . length - 1 ] ; greater . pop ( ) ; high = mid - 1 ; } }"}
{"text":"If f is - 1","code":"if ( f == - 1 ) { document . write ( - 1 ) ; return ; }"}
{"text":"Iterate in the range [ 1 , N ]","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If ans [ i ] is equal to - 1","code":"if ( ans [ i ] == - 1 ) { if ( smaller . length != 0 ) { ans [ i ] = smaller [ smaller . length - 1 ] ; smaller . pop ( ) ; } else if ( greater . length != 0 ) { ans [ i ] = greater [ greater . length - 1 ] ; greater . pop ; } } }"}
{"text":"Print the rearranged array","code":"for ( let i = 0 ; i < N ; i ++ ) document . write ( ans [ i ] + \" \" ) ; document . write ( \" \" ) }"}
{"text":"Input","code":"let arr = [ 10 , 7 , 2 , 5 , 3 , 8 ] ; let K = 7 ; let N = arr . length ;"}
{"text":"Function Call","code":"Rearrange ( arr , K , N ) ;"}
{"text":"Function to find minimum value of K such that the first person gets at least ( N \/ ( M + 1 ) ) candies","code":"function minimumK ( arr , M , N ) {"}
{"text":"Find the minimum required value of candies for the first person","code":"let good = Math . floor ( ( N * 1.0 ) \/ ( ( M + 1 ) * 1.0 ) ) + 1 ;"}
{"text":"Iterate K from [ 1 , n ]","code":"for ( let i = 1 ; i <= N ; i ++ ) { let K = i ;"}
{"text":"Total number of candies","code":"let candies = N ;"}
{"text":"Candies taken by Person 1","code":"let taken = 0 ; while ( candies > 0 ) {"}
{"text":"Candies taken by 1 st person is minimum of K and candies left","code":"taken += Math . min ( K , candies ) ; candies -= Math . min ( K , candies ) ;"}
{"text":"Traverse the array arr [ ]","code":"for ( let j = 0 ; j < M ; j ++ ) {"}
{"text":"Amount consumed by the person j","code":"let consume = ( arr [ j ] * candies ) \/ 100 ;"}
{"text":"Update the number of candies","code":"candies -= consume ; } }"}
{"text":"Good share of candies achieved","code":"if ( taken >= good ) { document . write ( i ) ; return ; } } }"}
{"text":"Driver Code","code":"let N = 13 , M = 1 ; let arr = new Array ( ) ; arr . push ( 50 ) ; minimumK ( arr , M , N ) ;"}
{"text":"Function to calculate time taken to travel the path","code":"function calcTotalTime ( path ) {"}
{"text":"Stores total time","code":"var time = 0 ;"}
{"text":"Initial position","code":"var x = 0 , y = 0 ;"}
{"text":"Stores visited segments","code":"var s = new Set ( ) ; for ( var i = 0 ; i < path . length ; i ++ ) { var p = x ; var q = y ; if ( path [ i ] == ' ' ) y ++ ; else if ( path [ i ] == ' ' ) y -- ; else if ( path [ i ] == ' ' ) x ++ ; else if ( path [ i ] == ' ' ) x -- ;"}
{"text":"Check whether segment is present in the set","code":"if ( ! s . has ( [ p + x , q + y ] . toString ( ) ) ) {"}
{"text":"Increment the value of time by 2","code":"time += 2 ;"}
{"text":"Insert segment into the set","code":"s . add ( [ p + x , q + y ] . toString ( ) ) ; } else time += 1 ; }"}
{"text":"Print the value of time","code":"document . write ( time ) }"}
{"text":"Driver Code","code":"var path = \" \" ; calcTotalTime ( path ) ;"}
{"text":"Function to calculate the cost required to make all array elements equal to 1","code":"function findCost ( A , N ) {"}
{"text":"Stores the total cost","code":"var totalCost = 0 ; var i ;"}
{"text":"Traverse the array arr [ ]","code":"for ( i = 0 ; i < N ; i ++ ) {"}
{"text":"If current element is 0","code":"if ( A [ i ] == 0 ) {"}
{"text":"Convert 0 to 1","code":"A [ i ] = 1 ;"}
{"text":"Add the cost","code":"totalCost += i ; } }"}
{"text":"Return the total cost","code":"return totalCost ; }"}
{"text":"Driver Code","code":"var arr = [ 1 , 0 , 1 , 0 , 1 , 0 ] var N = arr . length document . write ( findCost ( arr , N ) ) ;"}
{"text":"Function to find the peak index for the given array","code":"function peakIndex ( arr ) { var N = arr . length ;"}
{"text":"Base Case","code":"if ( arr . length < 3 ) return - 1 ; var i = 0 ;"}
{"text":"Check for strictly increasing array","code":"while ( i + 1 < N ) {"}
{"text":"If the strictly increasing condition is violated , then break","code":"if ( arr [ i + 1 ] < arr [ i ] arr [ i ] == arr [ i + 1 ] ) break ; i ++ ; } if ( i == 0 i == N - 1 ) return - 1 ;"}
{"text":"Stores the value of i , which is a potential peak index","code":"var ans = i ;"}
{"text":"Second traversal , for strictly decreasing array","code":"while ( i < N - 1 ) {"}
{"text":"When the strictly decreasing condition is violated , then break","code":"if ( arr [ i ] < arr [ i + 1 ] arr [ i ] == arr [ i + 1 ] ) break ; i ++ ; }"}
{"text":"If i = N - 1 , it means that ans is the peak index","code":"if ( i == N - 1 ) return ans ;"}
{"text":"Otherwise , peak index doesn 't exist","code":"return - 1 ; }"}
{"text":"Driver Code","code":"var arr = [ 0 , 1 , 0 ] ; document . write ( peakIndex ( arr ) ) ;"}
{"text":"Function to check if the array has 2 elements whose sum is equal to the given value","code":"function hasArrayTwoPairs ( nums , n , target ) {"}
{"text":"Sort the array in increasing order","code":"nums . sort ( ) ; var i ;"}
{"text":"Traverse the array , nums [ ]","code":"for ( i = 0 ; i < n ; i ++ ) {"}
{"text":"Store the required number to be found","code":"var x = target - nums [ i ] ;"}
{"text":"Perform binary search","code":"var low = 0 , high = n - 1 ; while ( low <= high ) {"}
{"text":"Store the mid value","code":"var mid = low + ( Math . floor ( ( high - low ) \/ 2 ) ) ;"}
{"text":"If nums [ mid ] is greater than x , then update high to mid - 1","code":"if ( nums [ mid ] > x ) { high = mid - 1 ; }"}
{"text":"If nums [ mid ] is less than x , then update low to mid + 1","code":"else if ( nums [ mid ] < x ) { low = mid + 1 ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"If mid is equal i , check mid - 1 and mid + 1","code":"if ( mid == i ) { if ( ( mid - 1 >= 0 ) && nums [ mid - 1 ] == x ) { document . write ( nums [ i ] + \" \" ) ; document . write ( nums [ mid - 1 ] ) ; return ; } if ( ( mid + 1 < n ) && nums [ mid + 1 ] == x ) { document . write ( nums [ i ] + \" \" ) ; document . write ( nums [ mid + 1 ] ) ; return ; } break ; }"}
{"text":"Otherwise , print the pair and return","code":"else { document . write ( nums [ i ] + \" \" ) ; document . write ( nums [ mid ] ) ; return ; } } } }"}
{"text":"If no such pair is found , then print - 1","code":"document . write ( - 1 ) ; }"}
{"text":"Driver Code","code":"var A = [ 0 , - 1 , 2 , - 3 , 1 ] ; var X = - 2 ; var N = A . length ;"}
{"text":"Function Call","code":"hasArrayTwoPairs ( A , N , X ) ;"}
{"text":"Function to find the divisor of N closest to the target","code":"function findClosest ( N , target ) { let closest = - 1 ; let diff = Number . MAX_VALUE ;"}
{"text":"Iterate till square root of N","code":"for ( let i = 1 ; i <= Math . sqrt ( N ) ; i ++ ) { if ( N % i == 0 ) {"}
{"text":"Check if divisors are equal","code":"if ( N \/ i == i ) {"}
{"text":"Check if i is the closest","code":"if ( Math . abs ( target - i ) < diff ) { diff = Math . abs ( target - i ) ; closest = i ; } } else {"}
{"text":"Check if i is the closest","code":"if ( Math . abs ( target - i ) < diff ) { diff = Math . abs ( target - i ) ; closest = i ; }"}
{"text":"Check if n \/ i is the closest","code":"if ( Math . abs ( target - N \/ i ) < diff ) { diff = Math . abs ( target - N \/ i ) ; closest = N \/ i ; } } } }"}
{"text":"Print the closest value","code":"document . write ( closest ) ; }"}
{"text":"Given N & X","code":"let N = 16 , X = 5 ;"}
{"text":"Function Call","code":"findClosest ( N , X ) ;"}
{"text":"Function to calculate the minimum power of A and B greater than N","code":"function power ( A , N ) {"}
{"text":"Stores the power of A which is greater than N","code":"let count = 0 ; if ( A == 1 ) return 0 ; while ( N > 0 ) {"}
{"text":"Increment count by 1","code":"count ++ ;"}
{"text":"Divide N by A","code":"N \/= A ; } return count ; }"}
{"text":"Function to find a pair ( a , b ) such that A ^ a + B ^ b = N","code":"function Pairs ( N , A , B ) { let powerA , powerB ;"}
{"text":"Calculate the minimum power of A greater than N","code":"powerA = power ( A , N ) ;"}
{"text":"Calculate the minimum power of B greater than N","code":"powerB = power ( B , N ) ;"}
{"text":"Make copy of A and B","code":"let letialB = B , letialA = A ;"}
{"text":"Traverse for every pair ( i , j )","code":"A = 1 ; for ( let i = 0 ; i <= powerA ; i ++ ) { B = 1 ; for ( let j = 0 ; j <= powerB ; j ++ ) {"}
{"text":"Check if B ^ j + A ^ i = N To overcome the overflow problem use B = N - A rather than B + A = N","code":"if ( B == N - A ) { document . write ( i + \" \" + j ) ; return ; }"}
{"text":"Increment power B by 1","code":"B *= letialB ; }"}
{"text":"Increment power A by 1","code":"A *= letialA ; }"}
{"text":"Finally print - 1 if no pair is found","code":"document . write ( \" \" ) ; return ; }"}
{"text":"Given A , B and N","code":"let N = 106 , A = 3 , B = 5 ;"}
{"text":"Function Call","code":"Pairs ( N , A , B ) ;"}
{"text":"Function to find the non - multiples till k","code":"function findNonMultiples ( arr , n , k ) {"}
{"text":"Stores all unique multiples","code":"let multiples = new Set ( ) ;"}
{"text":"Iterate the array","code":"for ( let i = 0 ; i < n ; ++ i ) {"}
{"text":"For finding duplicates only once","code":"if ( ! multiples . has ( arr [ i ] ) ) {"}
{"text":"Inserting all multiples into the set","code":"for ( let j = 1 ; j <= k \/ arr [ i ] ; j ++ ) { multiples . add ( arr [ i ] * j ) ; } } }"}
{"text":"Returning only the count of numbers that are not divisible by any of the array elements","code":"return k - multiples . size ; }"}
{"text":"Function to count the total values in the range [ L , R ]","code":"function countValues ( arr , N , L , R ) {"}
{"text":"Count all values in the range using exclusion principle","code":"return findNonMultiples ( arr , N , R ) - findNonMultiples ( arr , N , L - 1 ) ; }"}
{"text":"Driver Code","code":"let arr = [ 2 , 3 , 4 , 5 , 6 ] ; let N = arr . length ; let L = 1 , R = 20 ;"}
{"text":"Function Call","code":"document . write ( countValues ( arr , N , L , R ) ) ;"}
{"text":"Function to find the minimum number of coins to be collected per hour to empty N piles in H hours","code":"function minCollectingSpeed ( piles , H ) {"}
{"text":"Stores the minimum coins to be removed per hour","code":"var ans = - 1 ; var low = 1 , high ;"}
{"text":"Find the maximum array element","code":"high = piles . reduce ( ( a , b ) => Math . max ( a , b ) ) ;"}
{"text":"Perform Binary Search","code":"while ( low <= high ) {"}
{"text":"Store the mid value of the range in K","code":"var K = low + parseInt ( ( high - low ) \/ 2 ) ; var time = 0 ;"}
{"text":"Find the total time taken to empty N piles by removing K coins per hour","code":"piles . forEach ( ai => { time += parseInt ( ( ai + K - 1 ) \/ K ) ; } ) ;"}
{"text":"If total time does not exceed H","code":"if ( time <= H ) { ans = K ; high = K - 1 ; }"}
{"text":"Otherwise","code":"else { low = K + 1 ; } }"}
{"text":"Print the required result","code":"document . write ( ans ) ; }"}
{"text":"Driver Code","code":"var arr = [ 3 , 6 , 7 , 11 ] ; var H = 8 ;"}
{"text":"Function Call","code":"minCollectingSpeed ( arr , H ) ;"}
{"text":"Function to count distinct pairs in array whose sum equal to K","code":"function cntDisPairs ( arr , N , K ) {"}
{"text":"Stores count of distinct pairs whose sum equal to K","code":"var cntPairs = 0 ;"}
{"text":"Sort the array","code":"arr . sort ( ) ;"}
{"text":"Stores index of the left pointer","code":"var i = 0 ;"}
{"text":"Stores index of the right pointer","code":"var j = N - 1 ;"}
{"text":"Calculate count of distinct pairs whose sum equal to K","code":"while ( i < j ) {"}
{"text":"If sum of current pair is equal to K","code":"if ( arr [ i ] + arr [ j ] == K ) {"}
{"text":"Remove consecutive duplicate array elements","code":"while ( i < j && arr [ i ] == arr [ i + 1 ] ) {"}
{"text":"Update i","code":"i ++ ; }"}
{"text":"Remove consecutive duplicate array elements","code":"while ( i < j && arr [ j ] == arr [ j - 1 ] ) {"}
{"text":"Update j","code":"j -- ; }"}
{"text":"Update cntPairs","code":"cntPairs += 1 ;"}
{"text":"Update i","code":"i ++ ;"}
{"text":"Update j","code":"j -- ; }"}
{"text":"if sum of current pair less than K","code":"else if ( arr [ i ] + arr [ j ] < K ) {"}
{"text":"Update i","code":"i ++ ; } else {"}
{"text":"Update j","code":"j -- ; } } return cntPairs ; }"}
{"text":"Driver Code","code":"var arr = [ 5 , 6 , 5 , 7 , 7 , 8 ] ; var N = arr . length ; var K = 13 ; document . write ( cntDisPairs ( arr , N , K ) ) ;"}
{"text":"Function to find the length of the longest subsequence such that no two adjacent elements are equal","code":"function longestSubsequence ( N , Q , arr , Queries ) { for ( let i = 0 ; i < Q ; i ++ ) {"}
{"text":"Replace element at index x with y","code":"let x = Queries [ i ] [ 0 ] ; let y = Queries [ i ] [ 1 ] ;"}
{"text":"Since x is 1 - indexed , decrement x by 1","code":"arr [ x - 1 ] = y ;"}
{"text":"Keep track of number of elements in subsequence","code":"let count = 1 ; for ( let j = 1 ; j < N ; j ++ ) {"}
{"text":"If previous element is not same as current element","code":"if ( arr [ j ] != arr [ j - 1 ] ) { count += 1 ; } }"}
{"text":"Print the desired count","code":"document . write ( count + \" \" ) ; } }"}
{"text":"Driver code","code":"let arr = [ 1 , 1 , 2 , 5 , 2 ] ; let N = arr . length ; let Q = 2 ; let Queries = [ [ 1 , 3 ] , [ 4 , 2 ] ] ;"}
{"text":"Function Call","code":"longestSubsequence ( N , Q , arr , Queries ) ;"}
{"text":"javascript program for the above approach","code":"function longestSubsequence ( N , Q , arr , Queries ) { var count = 1 ;"}
{"text":"Traverse the array arr","code":"for ( var i = 1 ; i < N ; i ++ ) {"}
{"text":"If previous element is not same as current element","code":"if ( arr [ i ] != arr [ i - 1 ] ) { count += 1 ; } }"}
{"text":"Traverse the queries","code":"for ( var i = 0 ; i < Q ; i ++ ) {"}
{"text":"Replace element at index x with y","code":"var x = Queries [ i ] [ 0 ] ; var y = Queries [ i ] [ 1 ] ;"}
{"text":"Recalculate for index x","code":"if ( x > 1 ) {"}
{"text":"Subtract contribution of element at index x","code":"if ( arr [ x - 1 ] != arr [ x - 2 ] ) { count -= 1 ; }"}
{"text":"Add contribution of y","code":"if ( arr [ x - 2 ] != y ) { count += 1 ; } }"}
{"text":"Recalculate for index x + 1","code":"if ( x < N ) {"}
{"text":"Subtract contribution of element at index x + 1","code":"if ( arr [ x ] != arr [ x - 1 ] ) { count -= 1 ; }"}
{"text":"Adds contribution of y","code":"if ( y != arr [ x ] ) { count += 1 ; } } document . write ( count + \" \" ) ;"}
{"text":"Replace the element","code":"arr [ x - 1 ] = y ; } }"}
{"text":"Driver Code","code":"var arr = [ 1 , 1 , 2 , 5 , 2 ] ; var N = arr . length ; var Q = 2 ; var Queries = [ [ 1 , 3 ] , [ 4 , 2 ] ] ;"}
{"text":"Function Call","code":"longestSubsequence ( N , Q , arr , Queries ) ;"}
{"text":"Function to find sum of differences of indices of occurrences of each unique array element","code":"function sum ( arr , n ) {"}
{"text":"Stores indices of each array element","code":"var mp = new Map ( ) ;"}
{"text":"Store the indices","code":"for ( var i = 0 ; i < n ; i ++ ) { if ( mp . has ( arr [ i ] ) ) { var tmp = mp . get ( arr [ i ] ) ; tmp . push ( i ) ; mp . set ( arr [ i ] , tmp ) ; } else { mp . set ( arr [ i ] , [ i ] ) ; } }"}
{"text":"Stores the sums","code":"var ans = Array ( n ) ;"}
{"text":"Traverse the array","code":"for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"Find sum for each element","code":"var sum = 0 ;"}
{"text":"Iterate over the Map","code":"mp . get ( arr [ i ] ) . forEach ( it => {"}
{"text":"Calculate sum of occurrences of arr [ i ]","code":"sum += Math . abs ( it - i ) ; } ) ;"}
{"text":"Store sum for current element","code":"ans [ i ] = sum ; }"}
{"text":"Print answer for each element","code":"for ( var i = 0 ; i < n ; i ++ ) { document . write ( ans [ i ] + \" \" ) ; } return ; }"}
{"text":"Given array","code":"var arr = [ 1 , 3 , 1 , 1 , 2 ] ;"}
{"text":"Given size","code":"var n = arr . length ;"}
{"text":"Function call","code":"sum ( arr , n ) ;"}
{"text":"Function to convert vowels into uppercase","code":"function conVowUpp ( str ) {"}
{"text":"Stores the length of str","code":"var N = str . length ; for ( var i = 0 ; i < N ; i ++ ) { if ( str [ i ] === \" \" str [ i ] === \" \" str [ i ] === \" \" str [ i ] === \" \" str [ i ] === \" \" ) { document . write ( str [ i ] . toUpperCase ( ) ) ; } else { document . write ( str [ i ] ) ; } } }"}
{"text":"Driver Code","code":"var str = \" \" ; conVowUpp ( str ) ;"}
{"text":"Stores the frequency of each type of chocolate","code":"var mp = new Map ( ) ; var N , P ;"}
{"text":"Function to check if chocolates can be eaten for ' mid ' no . of days","code":"function helper ( mid ) { var cnt = 0 ; mp . forEach ( ( value , ) => { var temp = value ; while ( temp >= mid ) { temp -= mid ; cnt ++ ; } } ) ;"}
{"text":"If cnt exceeds N , return true","code":"return cnt >= N ; }"}
{"text":"Function to find the maximum number of days for which chocolates can be eaten","code":"function findMaximumDays ( arr ) {"}
{"text":"Store the frequency of each type of chocolate","code":"for ( var i = 0 ; i < P ; i ++ ) { if ( mp . has ( arr [ i ] ) ) mp . set ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) else mp . set ( arr [ i ] , 1 ) ; }"}
{"text":"Initialize start and end with 0 and P respectively","code":"var start = 0 , end = P , ans = 0 ; while ( start <= end ) {"}
{"text":"Calculate mid","code":"var mid = start + parseInt ( ( end - start ) \/ 2 ) ;"}
{"text":"Check if chocolates can be distributed for mid days","code":"if ( mid != 0 && helper ( mid ) ) { ans = mid ;"}
{"text":"Check if chocolates can be distributed for more than mid consecutive days","code":"start = mid + 1 ; } else if ( mid == 0 ) { start = mid + 1 ; } else { end = mid - 1 ; } } return ans ; }"}
{"text":"Driver code","code":"N = 3 , P = 10 ; var arr = [ 1 , 2 , 2 , 1 , 1 , 3 , 3 , 3 , 2 , 4 ] ;"}
{"text":"Function call","code":"document . write ( findMaximumDays ( arr ) ) ;"}
{"text":"Function that counts the subarrays having sum modulo k equal to the length of subarray","code":"function countSubarrays ( a , n , k ) {"}
{"text":"Stores the count of subarrays","code":"var ans = 0 ;"}
{"text":"Stores prefix sum of the array","code":"var pref = [ ] ; pref . push ( 0 ) ;"}
{"text":"Calculate prefix sum array","code":"for ( var i = 0 ; i < n ; i ++ ) pref . push ( ( a [ i ] + pref [ i ] ) % k ) ;"}
{"text":"Generate all the subarrays","code":"for ( var i = 1 ; i <= n ; i ++ ) { for ( var j = i ; j <= n ; j ++ ) {"}
{"text":"Check if this subarray is a valid subarray or not","code":"if ( ( pref [ j ] - pref [ i - 1 ] + k ) % k == j - i + 1 ) { ans ++ ; } } }"}
{"text":"Total count of subarrays","code":"document . write ( ans + ' ' ) ; }"}
{"text":"Given arr [ ]","code":"var arr = [ 2 , 3 , 5 , 3 , 1 , 5 ] ;"}
{"text":"Size of the array","code":"var N = arr . length ;"}
{"text":"Given K","code":"var K = 4 ;"}
{"text":"Function Call","code":"countSubarrays ( arr , N , K ) ;"}
{"text":"Function to check if the substring of length K has equal 0 and 1","code":"function check ( s , k ) { let n = s . length ;"}
{"text":"Traverse the String","code":"for ( let i = 0 ; i < k ; i ++ ) { for ( let j = i ; j < n ; j += k ) {"}
{"text":"Check if every K - th character is the same or not","code":"if ( s [ i ] != s [ j ] ) return false ; } } let c = 0 ;"}
{"text":"Traverse subString of length K","code":"for ( let i = 0 ; i < k ; i ++ ) {"}
{"text":"If current character is 0","code":"if ( s [ i ] == ' ' )"}
{"text":"Increment count","code":"c ++ ;"}
{"text":"Otherwise","code":"else"}
{"text":"Decrement count","code":"c -- ; }"}
{"text":"Check for equal 0 s and 1 s","code":"if ( c == 0 ) return true ; else return false ; }"}
{"text":"Driver Code","code":"let s = \" \" ; let k = 2 ; if ( check ( s , k ) ) document . write ( \" \" + \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to check if the freq of any character is divisible by N","code":"function isSame ( str , n ) {"}
{"text":"Stores the frequency of characters","code":"var mp = { } ; for ( var i = 0 ; i < str . length ; i ++ ) { if ( mp . hasOwnProperty ( str [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ) ) { mp [ str [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ] = mp [ str [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ] + 1 ; } else { mp [ str [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ] = 1 ; } } for ( const [ key , value ] of Object . entries ( mp ) ) {"}
{"text":"If frequency of a character is not divisible by n","code":"if ( value >= n ) { return true ; } }"}
{"text":"If no character has frequency at least N","code":"return false ; }"}
{"text":"Driver Code","code":"var str = \" \" ; var n = 4 ;"}
{"text":"Function Call","code":"if ( isSame ( str , n ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Javascript program for the above approach","code":"let eps = 1e-6 ;"}
{"text":"Given function","code":"function func ( a , b , c , x ) { return a * x * x + b * x + c ; }"}
{"text":"Function to find the root of the given non - decreasing Function","code":"function findRoot ( a , b , c , low , high ) { let x = - 1 ;"}
{"text":"To get the minimum possible answer for the root","code":"while ( Math . abs ( high - low ) > eps ) {"}
{"text":"Find mid","code":"x = ( low + high ) \/ 2 ;"}
{"text":"Search in [ low , x ]","code":"if ( func ( a , b , c , low ) * func ( a , b , c , x ) <= 0 ) { high = x ; }"}
{"text":"Search in [ x , high ]","code":"else { low = x ; } }"}
{"text":"Return the required answer","code":"return x ; }"}
{"text":"Function to find the roots of the given equation within range [ a , b ]","code":"function solve ( a , b , c , A , B ) {"}
{"text":"If root doesn 't exists","code":"if ( func ( a , b , c , A ) * func ( a , b , c , B ) > 0 ) { document . write ( \" \" ) ; }"}
{"text":"Else find the root upto 4 decimal places","code":"else { document . write ( findRoot ( a , b , c , A , B ) ) ; } }"}
{"text":"Given range","code":"let a = 2 , b = - 3 , c = - 2 , A = 0 , B = 3 ;"}
{"text":"Function call","code":"solve ( a , b , c , A , B ) ;"}
{"text":"Function check if mid can be median index of the difference array","code":"function possible ( mid , a ) {"}
{"text":"Size of the array","code":"let n = a . length ;"}
{"text":"Total possible no of pair possible","code":"let total = parseInt ( ( n * ( n - 1 ) ) \/ 2 ) ;"}
{"text":"The index of the element in the difference of all pairs from the array","code":"let need = parseInt ( ( total + 1 ) \/ 2 ) ; let count = 0 ; let start = 0 , end = 1 ;"}
{"text":"Count the number of pairs having difference <= mid","code":"while ( end < n ) { if ( a [ end ] - a [ start ] <= mid ) { end ++ ; } else { count += ( end - start - 1 ) ; start ++ ; } }"}
{"text":"If the difference between end and first element is less then or equal to mid","code":"if ( end == n && start < end && a [ end - 1 ] - a [ start ] <= mid ) { let t = end - start - 1 ; count += parseInt ( t * ( t + 1 ) \/ 2 ) ; }"}
{"text":"Checking for the no of element less than or equal to mid is greater than median or not","code":"if ( count >= need ) return true ; else return false ; }"}
{"text":"Function to calculate the median of differences of all pairs from the array","code":"function findMedian ( a ) {"}
{"text":"Size of the array","code":"let n = a . length ;"}
{"text":"Initialising the low and high","code":"let low = 0 , high = a [ n - 1 ] - a [ 0 ] ;"}
{"text":"Binary search","code":"while ( low <= high ) {"}
{"text":"Calculate mid","code":"let mid = ( low + high ) \/ 2 ;"}
{"text":"If mid can be the median of the array","code":"if ( possible ( mid , a ) ) high = mid - 1 ; else low = mid + 1 ; }"}
{"text":"Returning the median of the differences of pairs from the array","code":"return high + 1 ; }"}
{"text":"Driver Code","code":"let a = [ 1 , 7 , 5 , 2 ] ; a . sort ( ) ; document . write ( findMedian ( a ) ) ;"}
{"text":"Function to find strings from A [ ] having all strings in B [ ] as subsequence","code":"function UniversalSubset ( A , B ) {"}
{"text":"Calculate respective sizes","code":"var n1 = A . length ; var n2 = B . length ;"}
{"text":"Stores the answer","code":"var res = [ ] ;"}
{"text":"Stores the frequency of each character in strings of A [ ]","code":"var A_fre = Array . from ( Array ( n1 ) , ( ) => Array ( 26 ) ) ; for ( var i = 0 ; i < n1 ; i ++ ) { for ( var j = 0 ; j < 26 ; j ++ ) A_fre [ i ] [ j ] = 0 ; }"}
{"text":"Compute the frequencies of characters of all strings","code":"for ( var i = 0 ; i < n1 ; i ++ ) { for ( var j = 0 ; j < A [ i ] . length ; j ++ ) { A_fre [ i ] [ A [ i ] . charCodeAt ( j ) - ' ' . charCodeAt ( 0 ) ] ++ ; } }"}
{"text":"Stores the frequency of each character in strings of B [ ] each character of a string in B [ ]","code":"var B_fre = Array ( 26 ) . fill ( 0 ) ; for ( var i = 0 ; i < n2 ; i ++ ) { var arr = Array ( 26 ) . fill ( 0 ) ; for ( var j = 0 ; j < B [ i ] . length ; j ++ ) { arr [ B [ i ] . charCodeAt ( j ) - ' ' . charCodeAt ( 0 ) ] ++ ; B_fre [ B [ i ] . charCodeAt ( j ) - ' ' . charCodeAt ( 0 ) ] = Math . max ( B_fre [ B [ i ] . charCodeAt ( j ) - ' ' . charCodeAt ( 0 ) ] , arr [ B [ i ] . charCodeAt ( j ) - ' ' . charCodeAt ( 0 ) ] ) ; } } for ( var i = 0 ; i < n1 ; i ++ ) { var flag = 0 ; for ( var j = 0 ; j < 26 ; j ++ ) {"}
{"text":"If the frequency of a character in B [ ] exceeds that in A [ ]","code":"if ( A_fre [ i ] [ j ] < B_fre [ j ] ) {"}
{"text":"A string exists in B [ ] which is not a proper subset of A [ i ]","code":"flag = 1 ; break ; } }"}
{"text":"If all strings in B [ ] are proper subset of A [ ]","code":"if ( flag == 0 )"}
{"text":"Push the string in resultant vector","code":"res . push ( A [ i ] ) ; }"}
{"text":"If any string is found","code":"if ( res . length > 0 ) {"}
{"text":"Print those strings","code":"for ( var i = 0 ; i < res . length ; i ++ ) { for ( var j = 0 ; j < res [ i ] . length ; j ++ ) document . write ( res [ i ] [ j ] ) ; } document . write ( \" \" ) ; }"}
{"text":"Otherwise","code":"else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"var A = [ \" \" , \" \" , \" \" ] ; var B = [ \" \" , \" \" ] ; UniversalSubset ( A , B ) ;"}
{"text":"Function to find the minimum distance pair where one is the multiple of the other","code":"function findPair ( a , n ) {"}
{"text":"Initialize the variables","code":"let min_dist = Number . MAX_VALUE ; let index_a = - 1 , index_b = - 1 ;"}
{"text":"Iterate for all the elements","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Loop to make pairs","code":"for ( let j = i + 1 ; j < n ; j ++ ) {"}
{"text":"Check for minimum distance","code":"if ( j - i < min_dist ) {"}
{"text":"Check if one is a multiple of other","code":"if ( a [ i ] % a [ j ] == 0 a [ j ] % a [ i ] == 0 ) {"}
{"text":"Update the distance","code":"min_dist = j - i ;"}
{"text":"Store indexes","code":"index_a = i ; index_b = j ; } } } }"}
{"text":"If no such pair exists","code":"if ( index_a == - 1 ) { document . write ( \" \" ) ; }"}
{"text":"Print the answer","code":"else { document . write ( \" \" + a [ index_a ] + \" \" + a [ index_b ] + \" \" ) ; } }"}
{"text":"Given array arr [ ]","code":"let a = [ 2 , 3 , 4 , 5 , 6 ] ; let n = a . length ;"}
{"text":"Function Call","code":"findPair ( a , n ) ;"}
{"text":"Function to print all numbers in the range [ L , R ] having digits in strictly increasing order","code":"function printNum ( L , R ) {"}
{"text":"Iterate over the range","code":"for ( let i = L ; i <= R ; i ++ ) { let temp = i ; let c = 10 ; let flag = 0 ;"}
{"text":"Iterate over the digits","code":"while ( temp > 0 ) {"}
{"text":"Check if the current digit is >= the previous digit","code":"if ( temp % 10 >= c ) { flag = 1 ; break ; } c = temp % 10 ; temp \/= 10 ; }"}
{"text":"If the digits are in ascending order","code":"if ( flag == 0 ) document . write ( i + \" \" ) ; } }"}
{"text":"Given range L and R","code":"let L = 10 , R = 15 ;"}
{"text":"Function call","code":"printNum ( L , R ) ;"}
{"text":"Function to find the missing element","code":"function findMissing ( arr , left , right , diff ) {"}
{"text":"Fix left and right boundary for binary search","code":"if ( right <= left ) return 0 ;"}
{"text":"Find index of middle element","code":"let mid = left + parseInt ( ( right - left ) \/ 2 , 10 ) ;"}
{"text":"Check if the element just after the middle element is missing","code":"if ( arr [ mid + 1 ] - arr [ mid ] != diff ) return ( arr [ mid ] + diff ) ;"}
{"text":"Check if the element just before mid is missing","code":"if ( mid > 0 && arr [ mid ] - arr [ mid - 1 ] != diff ) return ( arr [ mid - 1 ] + diff ) ;"}
{"text":"Check if the elements till mid follow the AP , then recur for right half","code":"if ( arr [ mid ] == arr [ 0 ] + mid * diff ) return findMissing ( arr , mid + 1 , right , diff ) ;"}
{"text":"Else recur for left half","code":"return findMissing ( arr , left , mid - 1 , diff ) ; }"}
{"text":"Function to find the missing element in AP series","code":"function missingElement ( arr , n ) {"}
{"text":"Sort the array [ ] arr","code":"arr . sort ( function ( a , b ) { return a - b } ) ;"}
{"text":"Calculate Common Difference","code":"let diff = parseInt ( ( arr [ n - 1 ] - arr [ 0 ] ) \/ n , 10 ) ;"}
{"text":"Binary search for the missing","code":"return findMissing ( arr , 0 , n - 1 , diff ) ; }"}
{"text":"Given array [ ] arr","code":"let arr = [ 2 , 8 , 6 , 10 ] ; let n = arr . length ;"}
{"text":"Function Call","code":"document . write ( missingElement ( arr , n ) ) ;"}
{"text":"Function to calculate x raised to the power y in O ( logn )","code":"function power ( x , y ) { let temp ; if ( y == 0 ) return 1 ; temp = power ( x , Math . floor ( y \/ 2 ) ) ; if ( y % 2 == 0 ) return temp * temp ; else return x * temp * temp ; }"}
{"text":"Function to find the Kth root of the number N using BS","code":"function nthRootSearch ( low , high , N , K ) {"}
{"text":"If the range is still valid","code":"if ( low <= high ) {"}
{"text":"Find the mid - value of range","code":"let mid = Math . floor ( ( low + high ) \/ 2 ) ;"}
{"text":"Base Case","code":"if ( ( power ( mid , K ) <= N ) && ( power ( mid + 1 , K ) > N ) ) { return mid ; }"}
{"text":"Condition to check if the left search space is useless","code":"else if ( power ( mid , K ) < N ) { return nthRootSearch ( mid + 1 , high , N , K ) ; } else { return nthRootSearch ( low , mid - 1 , N , K ) ; } } return low ; }"}
{"text":"Given N and K","code":"let N = 16 , K = 4 ;"}
{"text":"Function Call","code":"document . write ( nthRootSearch ( 0 , N , N , K ) ) ;"}
{"text":"Function that return the count of subset such that Math . min ( S ) + Math . max ( S ) < K","code":"function get_subset_count ( arr , K , N ) {"}
{"text":"Sorting the array","code":"( arr ) . sort ( function ( a , b ) { return a - b ; } ) ; let left , right ; left = 0 ; right = N - 1 ;"}
{"text":"ans stores total number of subsets","code":"let ans = 0 ; while ( left <= right ) { if ( arr [ left ] + arr [ right ] < K ) {"}
{"text":"Add all possible subsets between i and j","code":"ans += 1 << ( right - left ) ; left ++ ; } else {"}
{"text":"Decrease the sum","code":"right -- ; } } return ans ; }"}
{"text":"Driver code","code":"let arr = [ 2 , 4 , 5 , 7 ] ; let K = 8 ; let N = arr . length ; document . write ( get_subset_count ( arr , K , N ) ) ;"}
{"text":"javascript Program to find the minimum of maximum differerence between adjacent elements after at most K insertions","code":"function minMaxDiff ( arr , n , k ) { var max_adj_dif = - 1000000000 ;"}
{"text":"Calculate the maximum adjacent difference","code":"for ( var i = 0 ; i < n - 1 ; i ++ ) max_adj_dif = Math . max ( max_adj_dif , Math . abs ( arr [ i ] - arr [ i + 1 ] ) ) ;"}
{"text":"If the maximum adjacent difference is already zero","code":"if ( max_adj_dif == 0 ) return 0 ;"}
{"text":"best and worst specifies range of the maximum adjacent difference","code":"var best = 1 ; var worst = max_adj_dif ; var mid , required ; while ( best < worst ) { mid = ( best + worst ) \/ 2 ;"}
{"text":"To store the no of insertions required for respective values of mid","code":"required = 0 ; for ( var i = 0 ; i < n - 1 ; i ++ ) { required += parseInt ( ( Math . abs ( arr [ i ] - arr [ i + 1 ] ) - 1 ) \/ mid ) ; }"}
{"text":"If the number of insertions required exceeds K","code":"if ( required > k ) best = mid + 1 ;"}
{"text":"Otherwise","code":"else worst = mid ; } return worst ; }"}
{"text":"Driver code","code":"var arr = [ 3 , 12 , 25 , 50 ] ; var n = arr . length ; var k = 7 ; document . write ( minMaxDiff ( arr , n , k ) ) ;"}
{"text":"Function to Check if the minimum element in the array is greater than or equal to half of every other element","code":"function checkMin ( arr , len ) {"}
{"text":"Initialise the variables to store smallest and second smallest","code":"var smallest = Number . INFINITY , secondSmallest = Number . INFINITY ; for ( var i = 0 ; i < len ; i ++ ) {"}
{"text":"Check if current element is smaller than smallest , the current smallest will become secondSmallest and current element will be the new smallest","code":"if ( arr [ i ] < smallest ) { secondSmallest = smallest ; smallest = arr [ i ] ; }"}
{"text":"Check if current element is smaller than secondSmallest simply update the latter","code":"else if ( arr [ i ] < secondSmallest ) { secondSmallest = arr [ i ] ; } } if ( 2 * smallest <= secondSmallest ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"var arr = [ 2 , 3 , 4 , 5 ] ; var len = 4 ; checkMin ( arr , len ) ;"}
{"text":"Function to create hash table to check Fibonacci numbers","code":"function createHash ( hash , maxElement ) {"}
{"text":"Insert initial two numbers in the hash table","code":"let prev = 0 , curr = 1 ; hash . add ( prev ) ; hash . add ( curr ) ; while ( curr <= maxElement ) {"}
{"text":"Sum of previous two numbers","code":"let temp = curr + prev ; hash . add ( temp ) ;"}
{"text":"Update the variable each time","code":"prev = curr ; curr = temp ; } }"}
{"text":"Function to find minimum and maximum fibonacci number in given array","code":"function fibonacci ( arr , n ) {"}
{"text":"Find maximum value in the array","code":"let max_val = Math . max ( ... arr ) ;"}
{"text":"Creating a set containing all Fibonacci numbers up to maximum value in the array","code":"let hash = new Set ( ) ; createHash ( hash , max_val ) ;"}
{"text":"For storing the Minimum and Maximum Fibonacci number","code":"let minimum = Number . MAX_VALUE ; let maximum = Number . MIN_VALUE ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if current element is a fibonacci number","code":"if ( hash . has ( arr [ i ] ) ) {"}
{"text":"Update the maximum and minimum accordingly","code":"minimum = Math . min ( minimum , arr [ i ] ) ; maximum = Math . max ( maximum , arr [ i ] ) ; } } document . write ( minimum + \" \" + maximum + \" \" ) ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ; let n = arr . length ; fibonacci ( arr , n ) ;"}
{"text":"Function that returns true if there is a substring of length len with <= k unique characters","code":"function isValidLen ( s , len , k ) {"}
{"text":"Size of the string","code":"var n = s . length ;"}
{"text":"Map to store the characters and their frequency","code":"var mp = new Map ( ) ; var right = 0 ;"}
{"text":"Update the map for the first substring","code":"while ( right < len ) { if ( mp . has ( s [ right ] ) ) mp . set ( s [ right ] , mp . get ( s [ right ] ) + 1 ) else mp . set ( s [ right ] , 1 ) right ++ ; } if ( mp . size <= k ) return true ;"}
{"text":"Check for the rest of the substrings","code":"while ( right < n ) {"}
{"text":"Add the new character","code":"if ( mp . has ( s [ right ] ) ) mp . set ( s [ right ] , mp . get ( s [ right ] ) + 1 ) else mp . set ( s [ right ] , 1 )"}
{"text":"Remove the first character of the previous window","code":"if ( mp . has ( s [ right - len ] ) ) mp . set ( s [ right - len ] , mp . get ( s [ right - len ] ) - 1 )"}
{"text":"Update the map","code":"if ( mp . has ( s [ right - len ] ) && mp . get ( s [ right - len ] ) == 0 ) mp . delete ( s [ right - len ] ) ; if ( mp . size <= k ) return true ; right ++ ; } return mp . size <= k ; }"}
{"text":"Function to return the length of the longest substring which has K unique characters","code":"function maxLenSubStr ( s , k ) {"}
{"text":"Check if the complete string contains K unique characters","code":"var uni = new Set ( ) ; s . split ( ' ' ) . forEach ( x => { uni . add ( x ) ; } ) ; if ( uni . size < k ) return - 1 ;"}
{"text":"Size of the string","code":"var n = s . length ;"}
{"text":"Apply binary search","code":"var lo = - 1 , hi = n + 1 ; while ( hi - lo > 1 ) { var mid = lo + hi >> 1 ; if ( isValidLen ( s , mid , k ) ) lo = mid ; else hi = mid ; } return lo ; }"}
{"text":"Driver code","code":"var s = \" \" ; var k = 3 ; document . write ( maxLenSubStr ( s , k ) ) ;"}
{"text":"Function that returns true if it is possible to make a square with side equal to l","code":"function isSquarePossible ( arr , n , l ) {"}
{"text":"To store the count of elements greater than or equal to l","code":"let cnt = 0 ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Increment the count","code":"if ( arr [ i ] >= l ) cnt ++ ;"}
{"text":"If the count becomes greater than or equal to l","code":"if ( cnt >= l ) return true ; } return false ; }"}
{"text":"Function to return the maximum area of the square that can be obtained","code":"function maxArea ( arr , n ) { let l = 0 , r = n ; let len = 0 ; while ( l <= r ) { let m = l + Math . floor ( ( r - l ) \/ 2 ) ;"}
{"text":"If square is possible with side length m","code":"if ( isSquarePossible ( arr , n , m ) ) { len = m ; l = m + 1 ; }"}
{"text":"Try to find a square with smaller side length","code":"else r = m - 1 ; }"}
{"text":"Return the area","code":"return ( len * len ) ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 3 , 4 , 5 , 5 ] ; let n = arr . length ; document . write ( maxArea ( arr , n ) ) ;"}
{"text":"Function to insert the names and check whether they appear for the first time","code":"function insertNames ( arr , n ) {"}
{"text":"To store the names of the employees","code":"let set = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"If current name is appearing for the first time","code":"if ( ! set . has ( arr [ i ] ) ) { document . write ( \" \" + \" \" ) ; set . add ( arr [ i ] ) ; } else { document . write ( \" \" + \" \" ) ; } } }"}
{"text":"Driver code","code":"let arr = [ \" \" , \" \" , \" \" ] ; let n = arr . length ; insertNames ( arr , n ) ;"}
{"text":"Function to return the count of elements in arr [ ] which are less than the given key","code":"function countLessThan ( arr , n , key ) { let l = 0 , r = n - 1 ; let index = - 1 ;"}
{"text":"Modified binary search","code":"while ( l <= r ) { let m = Math . floor ( ( l + r ) \/ 2 ) ; if ( arr [ m ] < key ) { l = m + 1 ; index = m ; } else { r = m - 1 ; } } return ( index + 1 ) ; }"}
{"text":"Function to return the count of elements in arr [ ] which are greater than the given key","code":"function countGreaterThan ( arr , n , key ) { let l = 0 , r = n - 1 ; let index = - 1 ;"}
{"text":"Modified binary search","code":"while ( l <= r ) { let m = Math . floor ( ( l + r ) \/ 2 ) ; if ( arr [ m ] <= key ) { l = m + 1 ; } else { r = m - 1 ; index = m ; } } if ( index == - 1 ) return 0 ; return ( n - index ) ; }"}
{"text":"Function to return the count of the required triplets","code":"function countTriplets ( n , a , b , c ) {"}
{"text":"Sort all three arrays","code":"a . sort ( function ( e , f ) { return e - f ; } ) ; b . sort ( function ( e , f ) { return e - f ; } ) ; c . sort ( function ( e , f ) { return e - f ; } ) ; let count = 0 ;"}
{"text":"Iterate for all the elements of array B","code":"for ( let i = 0 ; i < n ; ++ i ) { let current = b [ i ] ;"}
{"text":"Count of elements in A [ ] which are less than the chosen element from B [ ]","code":"let low = countLessThan ( a , n , current ) ;"}
{"text":"Count of elements in C [ ] which are greater than the chosen element from B [ ]","code":"let high = countGreaterThan ( c , n , current ) ;"}
{"text":"Update the count","code":"count += ( low * high ) ; } return count ; }"}
{"text":"Driver code","code":"let a = [ 1 , 5 ] ; let b = [ 2 , 4 ] ; let c = [ 3 , 6 ] ; let size = a . length ; document . write ( countTriplets ( size , a , b , c ) ) ;"}
{"text":"javascript code to calculate the minimum cost to make the given parentheses balanced","code":"function costToBalance ( s ) { if ( s . length == 0 ) document . write ( 0 ) ;"}
{"text":"To store absolute count of balanced and unbalanced parenthesis","code":"var ans = 0 ;"}
{"text":"o ( open bracket ) stores count of ' ( ' and c ( close bracket ) stores count of ' ) '","code":"var o = 0 , c = 0 ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == ' ' ) o ++ ; if ( s [ i ] == ' ' ) c ++ ; } if ( o != c ) return - 1 ; var a = new Array ( s . Length ) ; if ( s [ 0 ] == ' ' ) a [ 0 ] = 1 ; else a [ 0 ] = - 1 ; if ( a [ 0 ] < 0 ) ans += Math . abs ( a [ 0 ] ) ; for ( var i = 1 ; i < s . length ; i ++ ) { if ( s [ i ] == ' ' ) a [ i ] = a [ i - 1 ] + 1 ; else a [ i ] = a [ i - 1 ] - 1 ; if ( a [ i ] < 0 ) ans += Math . abs ( a [ i ] ) ; } return ans ; }"}
{"text":"Driver code","code":"var s ; s = \" \" ; document . write ( costToBalance ( s ) + \" \" ) ; s = \" \" ; document . write ( costToBalance ( s ) + \" \" ) ;"}
{"text":"Function to find the middle of three number","code":"function middleOfThree ( a , b , c ) {"}
{"text":"x is positive if a is greater than b . x is negative if b is greater than a .","code":"let x = a - b ;"}
{"text":"Similar to x","code":"let y = b - c ;"}
{"text":"Similar to x and y .","code":"let z = a - c ;"}
{"text":"Checking if b is middle ( x and y both are positive )","code":"if ( x * y > 0 ) return b ;"}
{"text":"Checking if c is middle ( x and z both are positive )","code":"else if ( x * z > 0 ) return c ; else return a ; }"}
{"text":"Driver code","code":"let a = 20 , b = 30 , c = 40 ; document . write ( middleOfThree ( a , b , c ) ) ;"}
{"text":"Finds missing 4 numbers in O ( N ) time and O ( 1 ) auxiliary space .","code":"function missing4 ( arr ) {"}
{"text":"To keep track of 4 possible numbers greater than length of input array In Java , helper is automatically initialized as 0.","code":"let helper = [ ] ; for ( let i = 0 ; i < 4 ; i ++ ) { helper [ i ] = 0 ; }"}
{"text":"Traverse the input array and mark visited elements either by marking them as negative in arr [ ] or in helper [ ] .","code":"for ( let i = 0 ; i < arr . length ; i ++ ) { let temp = Math . abs ( arr [ i ] ) ;"}
{"text":"If element is smaller than or equal to length , mark its presence in arr [ ]","code":"if ( temp <= arr . length ) arr [ temp - 1 ] = Math . floor ( arr [ temp - 1 ] * ( - 1 ) ) ;"}
{"text":"Mark presence in helper [ ]","code":"else if ( temp > arr . length ) { if ( temp % arr . length != 0 ) helper [ temp % arr . length - 1 ] = - 1 ; else helper [ ( temp % arr . length ) + arr . length - 1 ] = - 1 ; } }"}
{"text":"Print all those elements whose presence is not marked .","code":"for ( let i = 0 ; i < arr . length ; i ++ ) if ( arr [ i ] > 0 ) document . write ( i + 1 + \" \" ) ; for ( let i = 0 ; i < helper . length ; i ++ ) if ( helper [ i ] >= 0 ) document . write ( arr . length + i + 1 + \" \" ) ; return ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 7 , 3 , 12 , 5 , 10 , 8 , 4 , 9 ] ; missing4 ( arr ) ;"}
{"text":"Function that finds the middle the lexicographical smallest sequence","code":"function lexiMiddleSmallest ( K , N ) {"}
{"text":"If K is even","code":"if ( K % 2 == 0 ) {"}
{"text":"First element is K \/ 2","code":"document . write ( K \/ 2 + \" \" ) ;"}
{"text":"Remaining elements of the sequence are all integer K","code":"for ( let i = 0 ; i < N - 1 ; ++ i ) { document . write ( K + \" \" ) ; } document . write ( \" \" ) ; return ; }"}
{"text":"Stores the sequence when K is odd","code":"let a = [ ] ;"}
{"text":"Iterate over the range [ 0 , N \/ 2 ]","code":"for ( let i = 0 ; i < N \/ 2 ; ++ i ) {"}
{"text":"Check if the sequence ends with in 1 or not","code":"if ( a [ a . length - 1 ] == 1 ) {"}
{"text":"Remove the sequence ending in 1","code":"a . pop ( a . length - 1 ) ; }"}
{"text":"If it doesn 't end in 1","code":"else {"}
{"text":"Decrement by 1","code":"a [ a . length - 1 ] -= 1 ;"}
{"text":"Insert K to the sequence till its size is N","code":"while ( a . length < N ) { a . push ( K ) ; } } }"}
{"text":"Print the sequence stored in the vector","code":"for ( let i in a ) { document . write ( i + \" \" ) ; } document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let K = 2 , N = 4 ; lexiMiddleSmallest ( K , N ) ;"}
{"text":"Function to find the last remaining array element after repeatedly removing the smallest from pairs having absolute difference 2 or 0","code":"function findLastElement ( arr , N ) {"}
{"text":"Sort the given array in ascending order","code":"arr . sort ( ) ; let i = 0 ;"}
{"text":"Traverse the array","code":"for ( i = 1 ; i < N ; i ++ ) {"}
{"text":"If difference between adjacent elements is not equal to 0 or 2","code":"if ( arr [ i ] - arr [ i - 1 ] != 0 && arr [ i ] - arr [ i - 1 ] != 2 ) { document . write ( \" \" + \" \" ) ; return ; } }"}
{"text":"If operations can be performed","code":"document . write ( arr [ N - 1 ] + \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 2 , 4 , 6 , 8 , 0 , 8 ] ; let N = arr . length ; findLastElement ( arr , N ) ;"}
{"text":"Function to count maximum subsets into which the given array can be split such that it satisfies the given condition","code":"function maxDivisions ( arr , N , X ) {"}
{"text":"Sort the array in decreasing order","code":"arr . sort ( ) ;"}
{"text":"Stores count of subsets possible","code":"let maxSub = 0 ;"}
{"text":"Stores count of elements in current subset","code":"let size = 0 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Update size","code":"size ++ ;"}
{"text":"If product of the smallest element present in the current subset and size of current subset is >= K","code":"if ( arr [ i ] * size >= X ) {"}
{"text":"Update maxSub","code":"maxSub ++ ;"}
{"text":"Update size","code":"size = 0 ; } } document . write ( maxSub + \" \" ) ; }"}
{"text":"Given array","code":"let arr = [ 1 , 3 , 3 , 7 ] ;"}
{"text":"Size of the array","code":"let N = arr . length ;"}
{"text":"Given value of X","code":"let X = 3 ; maxDivisions ( arr , N , X ) ;"}
{"text":"Function to find maximum possible sum of second minimums in each quadruple","code":"function maxPossibleSum ( arr , N ) {"}
{"text":"Sort the array","code":"arr . sort ( ) ; let sum = 0 ; let j = N - 3 ; while ( j >= 0 ) {"}
{"text":"Add the second minimum","code":"sum += arr [ j ] ; j -= 3 ; }"}
{"text":"Prlet maximum possible sum","code":"document . write ( sum ) ; }"}
{"text":"Given array","code":"let arr = [ 7 , 4 , 5 , 2 , 3 , 1 , 5 , 9 ] ;"}
{"text":"Size of the array","code":"let N = arr . length ; maxPossibleSum ( arr , N ) ;"}
{"text":"Function to sort an array using insertion sort","code":"function insertionSort ( arr , n ) { let i , key , j ; for ( i = 1 ; i < n ; i ++ ) { key = arr [ i ] ; j = i - 1 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] , that are greater than key to one position ahead of their current position","code":"while ( j >= 0 && arr [ j ] > key ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = key ; } }"}
{"text":"Function to print an array of size N","code":"function printArray ( arr , n ) { let i ;"}
{"text":"Print the array","code":"for ( i = 0 ; i < n ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; } document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"let arr = [ 12 , 11 , 13 , 5 , 6 ] ; let N = arr . length ;"}
{"text":"Function Call","code":"insertionSort ( arr , N ) ; printArray ( arr , N ) ;"}
{"text":"Function to find the count required pairs","code":"function getPairs ( arr , N , K ) {"}
{"text":"Stores count of pairs","code":"let count = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < N ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) {"}
{"text":"Check if the condition is satisfied or not","code":"if ( arr [ i ] > K * arr [ i + 1 ] ) count ++ ; } } document . write ( count ) ; }"}
{"text":"Driver Code","code":"let arr = [ 5 , 6 , 2 , 1 ] ; let N = arr . length ; let K = 2 ;"}
{"text":"Function Call","code":"getPairs ( arr , N , K ) ;"}
{"text":"Function to merge two sorted arrays","code":"function merge ( arr , temp , l , m , r , K ) {"}
{"text":"i : index to left subarray","code":"let i = l ;"}
{"text":"j : index to right subarray","code":"let j = m + 1 ;"}
{"text":"Stores count of pairs that satisfy the given condition","code":"let cnt = 0 ; for ( i = l ; i <= m ; i ++ ) { let found = false ;"}
{"text":"Traverse to check for the valid conditions","code":"while ( j <= r ) {"}
{"text":"If condition satisfies","code":"if ( arr [ i ] >= K * arr [ j ] ) { found = true ; } else break ; j ++ ; }"}
{"text":"All elements in the right side of the left subarray also satisfies","code":"if ( found == true ) { cnt += j - ( m + 1 ) ; j -- ; } }"}
{"text":"Sort the two given arrays and store in the resultant array","code":"let k = l ; i = l ; j = m + 1 ; while ( i <= m && j <= r ) { if ( arr [ i ] <= arr [ j ] ) temp [ k ++ ] = arr [ i ++ ] ; else temp [ k ++ ] = arr [ j ++ ] ; }"}
{"text":"Elements which are left in the left subarray","code":"while ( i <= m ) temp [ k ++ ] = arr [ i ++ ] ;"}
{"text":"Elements which are left in the right subarray","code":"while ( j <= r ) temp [ k ++ ] = arr [ j ++ ] ; for ( i = l ; i <= r ; i ++ ) arr [ i ] = temp [ i ] ;"}
{"text":"Return the count obtained","code":"return cnt ; }"}
{"text":"Function to partition array into two halves","code":"function mergeSortUtil ( arr , temp , l , r , K ) { let cnt = 0 ; if ( l < r ) {"}
{"text":"Same as ( l + r ) \/ 2 , but avoids overflow for large l and h","code":"let m = parseInt ( ( l + r ) \/ 2 , 10 ) ;"}
{"text":"Sort first and second halves","code":"cnt += mergeSortUtil ( arr , temp , l , m , K ) ; cnt += mergeSortUtil ( arr , temp , m + 1 , r , K ) ;"}
{"text":"Call the merging function","code":"cnt += merge ( arr , temp , l , m , r , K ) ; } return cnt ; }"}
{"text":"Function to print the count of required pairs using Merge Sort","code":"function mergeSort ( arr , N , K ) { let temp = new Array ( N ) ; document . write ( mergeSortUtil ( arr , temp , 0 , N - 1 , K ) ) ; }"}
{"text":"Driver code","code":"let arr = [ 5 , 6 , 2 , 5 ] ; let N = arr . length ; let K = 2 ;"}
{"text":"Function Call","code":"mergeSort ( arr , N , K ) ;"}
{"text":"Function to count minimum consecutive removals of elements of the same type","code":"function minRemovals ( A , N ) {"}
{"text":"Sort the array","code":"A . sort ( ) ;"}
{"text":"Stores the maximum element present in the array","code":"let mx = A [ N - 1 ] ;"}
{"text":"Stores sum of the array","code":"let sum = 1 ;"}
{"text":"Calculate sum of the array","code":"for ( let i = 0 ; i < N ; i ++ ) { sum += A [ i ] ; } if ( sum - mx >= mx ) { document . write ( 0 ) ; } else { document . write ( 2 * mx - sum ) ; } }"}
{"text":"Driver Code","code":"let A = [ 3 , 3 , 2 ] ; let N = A . length ;"}
{"text":"Function call","code":"minRemovals ( A , N ) ;"}
{"text":"Function to rearrange the array a [ ] such that none of the array elements is same as its index","code":"function rearrangeArray ( a , n ) {"}
{"text":"Sort the array","code":"a . sort ( ) ;"}
{"text":"Traverse the indices [ 0 , N - 2 ] of the given array","code":"for ( let i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Check if the current element is equal to its index","code":"if ( a [ i ] == i + 1 ) {"}
{"text":"If found to be true , swap current element with the next element","code":"let temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; } }"}
{"text":"Check if the last element is same as its index","code":"if ( a [ n - 1 ] == n ) {"}
{"text":"If found to be true , swap current element with the previous element","code":"let temp = a [ n - 1 ] ; a [ n - 1 ] = a [ n - 2 ] ; a [ n - 2 ] = temp ; }"}
{"text":"Prlet the modified array","code":"for ( let i = 0 ; i < n ; i ++ ) { document . write ( a [ i ] + \" \" ) ; } }"}
{"text":"Driver code","code":"let arr = [ 1 , 5 , 3 , 2 , 4 ] ; let N = arr . length ;"}
{"text":"Function Call","code":"rearrangeArray ( arr , N ) ;"}
{"text":"Function that counts the minimum moves required to covert arr [ ] to brr [ ]","code":"function minOperations ( arr1 , arr2 , i , j , n ) {"}
{"text":"Base Case","code":"let f = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] != arr2 [ i ] ) f = 1 ; break ; } if ( f == 0 ) return 0 ; if ( i >= n j >= n ) return 0 ;"}
{"text":"If arr [ i ] < arr [ j ]","code":"if ( arr1 [ i ] < arr2 [ j ] )"}
{"text":"Include the current element","code":"return 1 + minOperations ( arr1 , arr2 , i + 1 , j + 1 , n ) ;"}
{"text":"Otherwise , excluding the current element","code":"return Math . max ( minOperations ( arr1 , arr2 , i , j + 1 , n ) , minOperations ( arr1 , arr2 , i + 1 , j , n ) ) ; }"}
{"text":"Function that counts the minimum moves required to sort the array","code":"function minOperationsUtil ( arr , n ) { let brr = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) brr [ i ] = arr [ i ] ; brr . sort ( ) ; let f = 0 ;"}
{"text":"If both the arrays are equal","code":"for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != brr [ i ] )"}
{"text":"No moves required","code":"f = 1 ; break ; }"}
{"text":"Otherwise","code":"if ( f == 1 )"}
{"text":"Print minimum operations required","code":"document . write ( minOperations ( arr , brr , 0 , 0 , n ) ) ; else cout << \" \" ; }"}
{"text":"Driver code","code":"let arr = [ 4 , 7 , 2 , 3 , 9 ] ; let n = arr . length ; minOperationsUtil ( arr , n ) ;"}
{"text":"Function to check if str1 can be transformed to t by sorting substrings","code":"function canTransform ( s , t ) { var n = s . length ;"}
{"text":"Occur [ i ] stores the indices of char ( ' a ' + i ) in string s","code":"var occur = Array . from ( Array ( 26 ) , ( ) => new Array ( ) ) ; for ( var x = 0 ; x < n ; x ++ ) { var ch = s [ x ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ; occur [ ch ] . push ( x ) ; }"}
{"text":"idx [ i ] stores the next available index of char ( ' a ' + i ) in occur [ i ]","code":"var idx = Array ( 26 ) . fill ( 0 ) ; var poss = true ; for ( var x = 0 ; x < n ; x ++ ) { var ch = t [ x ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ;"}
{"text":"If this char is not available anymore","code":"if ( idx [ ch ] >= occur [ ch ] . length ) {"}
{"text":"Conversion not possible","code":"poss = false ; break ; } for ( var small = 0 ; small < ch ; small ++ ) {"}
{"text":"If one of the smaller characters is available and occurs before","code":"if ( idx [ small ] < occur [ small ] . length && occur [ small ] [ idx [ small ] ] < occur [ ch ] [ idx [ ch ] ] ) {"}
{"text":"Conversion not possible","code":"poss = false ; break ; } } idx [ ch ] ++ ; }"}
{"text":"Print the answer","code":"if ( poss ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"var s , t ; s = \" \" ; t = \" \" ; canTransform ( s , t ) ;"}
{"text":"function to count inversion count of the string","code":"function inversionCount ( s ) {"}
{"text":"For storing frequency","code":"var freq = Array ( 26 ) . fill ( 0 ) ; var inv = 0 ; for ( var i = 0 ; i < s . length ; i ++ ) { var temp = 0 ;"}
{"text":"Add all the characters which are less than the ith character before i .","code":"for ( var j = 0 ; j < String . fromCharCode ( s [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ) ; j ++ )"}
{"text":"Adding the count to inversion count","code":"temp += freq [ j ] ; inv += ( i - temp ) ;"}
{"text":"Updating the character in the frequency array","code":"freq [ s [ i ] - ' ' ] ++ ; } return inv ; }"}
{"text":"Function to check whether any of the string have a repeated character","code":"function haveRepeated ( S1 , S2 ) { var freq = Array ( 26 ) . fill ( 0 ) ; S1 . forEach ( i => { if ( freq [ i - ' ' ] > 0 ) return true ; freq [ i - ' ' ] ++ ; } ) ; for ( var i = 0 ; i < 26 ; i ++ ) freq [ i ] = 0 ; S2 . split ( ' ' ) . forEach ( i => { if ( freq [ i - ' ' ] > 0 ) return true ; freq [ i - ' ' ] ++ ; } ) ; return false ; }"}
{"text":"Function to check whether the string S1 and S2 can be made equal by reversing sub strings of same size in both strings","code":"function checkToMakeEqual ( S1 , S2 ) {"}
{"text":"Frequency array to check whether both string have same character or not","code":"var freq = Array ( 26 ) . fill ( 0 ) ; for ( var i = 0 ; i < S1 . length ; i ++ ) {"}
{"text":"Adding the frequency ;","code":"freq [ S1 [ i ] - ' ' ] ++ ; } var flag = 0 ; for ( var i = 0 ; i < S2 . length ; i ++ ) { if ( freq [ S2 [ i ] - ' ' ] == 0 ) {"}
{"text":"If the character is not in S1","code":"flag = true ; break ; }"}
{"text":"Decrementing the frequency","code":"freq [ S2 [ i ] - ' ' ] -- ; } if ( flag == true ) {"}
{"text":"If both string doesnot have same characters or not","code":"document . write ( \" \" ) ; return ; }"}
{"text":"Finding inversion count of both strings","code":"var invCount1 = inversionCount ( S1 ) ; var invCount2 = inversionCount ( S2 ) ; if ( invCount1 == invCount2 || ( invCount1 & 1 ) == ( invCount2 & 1 ) || haveRepeated ( S1 , S2 ) ) {"}
{"text":"If inversion count is same , or have same parity or if any of the string have a repeated character then the answer is Yes else No","code":"document . write ( \" \" ) ; } else document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"var S1 = \" \" , S2 = \" \" ; checkToMakeEqual ( S1 , S2 ) ;"}
{"text":"Function to Sort a Bitonic array in constant space","code":"function sortArr ( a , n ) { let i , k ;"}
{"text":"Initialize the value of k","code":"k = parseInt ( Math . log ( n ) \/ Math . log ( 2 ) ) ; k = parseInt ( Math . pow ( 2 , k ) ) ;"}
{"text":"In each iteration compare elements k distance apart and swap if they are not in order","code":"while ( k > 0 ) { for ( i = 0 ; i + k < n ; i ++ ) if ( a [ i ] > a [ i + k ] ) { let tmp = a [ i ] ; a [ i ] = a [ i + k ] ; a [ i + k ] = tmp ; }"}
{"text":"k is reduced to half after every iteration","code":"k = k \/ 2 ; }"}
{"text":"Print the array elements","code":"for ( i = 0 ; i < n ; i ++ ) { document . write ( a [ i ] + \" \" ) ; } }"}
{"text":"Given array arr [ ]","code":"let arr = [ 5 , 20 , 30 , 40 , 36 , 33 , 25 , 15 , 10 ] ; let n = arr . length ;"}
{"text":"Function call","code":"sortArr ( arr , n ) ;"}
{"text":"Function that prlets the maximum sum possible","code":"function maximumSum ( arr , n , k ) {"}
{"text":"Find elements in each group","code":"let elt = ( n \/ k ) ; let sum = 0 ;"}
{"text":"Sort all elements in non - descending order","code":"arr . sort ( ( a , b ) => a - b ) ; let count = 0 ; let i = n - 1 ;"}
{"text":"Add K largest elements","code":"while ( count < k ) { sum += arr [ i ] ; i -- ; count ++ ; } count = 0 ; i = 0 ;"}
{"text":"For sum of minimum elements from each subset","code":"while ( count < k ) { sum += arr [ i ] ; i += elt - 1 ; count ++ ; }"}
{"text":"Prleting the maximum sum","code":"document . write ( sum ) ; }"}
{"text":"Driver Code","code":"let Arr = [ 1 , 13 , 7 , 17 , 6 , 5 ] ; let K = 2 ; let size = Arr . length ; maximumSum ( Arr , size , K ) ;"}
{"text":"Function to find the minimum sum","code":"function findMinSum ( arr , K , L , size ) { if ( K * L > size ) return - 1 ; let minsum = 0 ;"}
{"text":"Sort the array","code":"arr . sort ( ( a , b ) => a - b ) ;"}
{"text":"Calculate sum of smallest K elements","code":"for ( let i = 0 ; i < K ; i ++ ) minsum += arr [ i ] ;"}
{"text":"Return the sum","code":"return minsum ; }"}
{"text":"Driver Code","code":"let arr = [ 2 , 15 , 5 , 1 , 35 , 16 , 67 , 10 ] ; let K = 3 ; let L = 2 ; let length = arr . length ; document . write ( findMinSum ( arr , K , L , length ) ) ;"}
{"text":"Function to find the Kth smallest element in Unsorted Array","code":"function findKthSmallest ( arr , n , k ) {"}
{"text":"Initialize the max Element as 0","code":"let max = 0 ;"}
{"text":"Iterate arr [ ] and find the maximum element in it","code":"for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; }"}
{"text":"Frequency array to store the frequencies","code":"let counter = Array . from ( { length : max + 1 } , ( _ , i ) => 0 ) ;"}
{"text":"Counter variable","code":"let smallest = 0 ;"}
{"text":"Counting the frequencies","code":"for ( let i = 0 ; i < n ; i ++ ) { counter [ arr [ i ] ] ++ ; }"}
{"text":"Iterate through the freq [ ]","code":"for ( let num = 1 ; num <= max ; num ++ ) {"}
{"text":"Check if num is present in the array","code":"if ( counter [ num ] > 0 ) {"}
{"text":"Increment the counter with the frequency of num","code":"smallest += counter [ num ] ; }"}
{"text":"Checking if we have reached the Kth smallest element","code":"if ( smallest >= k ) {"}
{"text":"Return the Kth smallest element","code":"return num ; } } return - 1 ; }"}
{"text":"Given array","code":"let arr = [ 7 , 1 , 4 , 4 , 20 , 15 , 8 ] ; let N = arr . length ; let K = 5 ;"}
{"text":"Function call","code":"document . write ( findKthSmallest ( arr , N , K ) ) ;"}
{"text":"Function to print all the numbers up to n in lexicographical order","code":"function lexNumbers ( n ) { let s = [ ] ; for ( let i = 1 ; i <= n ; i ++ ) { s . push ( i . toString ( ) ) ; } s . sort ( ) ; let ans = [ ] ; for ( let i = 0 ; i < n ; i ++ ) ans . push ( parseInt ( s [ i ] ) ) ; for ( let i = 0 ; i < n ; i ++ ) document . write ( ans [ i ] + \" \" ) ; }"}
{"text":"Driver Program","code":"let n = 15 ; lexNumbers ( n ) ;"}
{"text":"Javascript implementation to print row of matrix in ascending or descending order alternatively","code":"let N = 4 ; function func ( a ) {"}
{"text":"Iterate matrix rowwise","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Sort even rows in ascending order","code":"if ( i % 2 == 0 ) { for ( let j = 0 ; j < N ; j ++ ) { for ( let k = j + 1 ; k < N ; ++ k ) {"}
{"text":"compare adjacent elements","code":"if ( a [ i ] [ j ] > a [ i ] [ k ] ) {"}
{"text":"swap adjacent element","code":"let temp = a [ i ] [ j ] ; a [ i ] [ j ] = a [ i ] [ k ] ; a [ i ] [ k ] = temp ; } } } }"}
{"text":"Sort even rows in descending order","code":"else { for ( let j = 0 ; j < N ; j ++ ) { for ( let k = j + 1 ; k < N ; ++ k ) {"}
{"text":"compare adjacent elements","code":"if ( a [ i ] [ j ] < a [ i ] [ k ] ) {"}
{"text":"swap adjacent element","code":"let temp = a [ i ] [ j ] ; a [ i ] [ j ] = a [ i ] [ k ] ; a [ i ] [ k ] = temp ; } } } } }"}
{"text":"Printing the final Output","code":"for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) { document . write ( \" \" + a [ i ] [ j ] ) ; } document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"let a = [ [ 5 , 7 , 3 , 4 ] , [ 9 , 5 , 8 , 2 ] , [ 6 , 3 , 8 , 1 ] , [ 5 , 8 , 9 , 3 ] ] ; func ( a ) ;"}
{"text":"To store the edges of the given graph","code":"let g = new Array ( 200005 ) ; for ( let i = 0 ; i < 200005 ; i ++ ) g [ i ] = new Map ( ) ; let s = new Set ( ) ; let ns = new Set ( ) ;"}
{"text":"A utility function to perform DFS Traversal","code":"function dfs ( x ) { let v = [ ] ;"}
{"text":"Check those vertices which are stored in the set","code":"for ( let it of s . values ( ) ) {"}
{"text":"Vertices are included if the weight of edge is 0","code":"if ( g [ x ] . get ( it ) != null ) { v . push ( it ) ; } else { ns . add ( it ) ; } } s = ns ; for ( let i of v . values ( ) ) { dfs ( i ) ; } }"}
{"text":"A utility function to find the weight of Minimum Spanning Tree","code":"function weightOfMST ( N ) {"}
{"text":"To count the connected components","code":"let cnt = 0 ;"}
{"text":"Inserting the initial vertices in the set","code":"for ( let i = 1 ; i <= N ; ++ i ) { s . add ( i ) ; } let qt = [ ] for ( let t of s . values ( ) ) qt . push ( t ) ;"}
{"text":"Traversing vertices stored in the set and Run DFS Traversal for each vertices","code":"while ( qt . length != 0 ) {"}
{"text":"Incrementing the zero weight connected components","code":"++ cnt ; let t = qt [ 0 ] ; qt . shift ( ) ;"}
{"text":"DFS Traversal for every vertex remove","code":"dfs ( t ) ; } document . write ( cnt - 4 ) ; }"}
{"text":"Driver 's Code","code":"let N = 6 , M = 11 ; let edges = [ [ 1 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 5 ] , [ 2 , 6 ] , [ 3 , 4 ] , [ 3 , 5 ] , [ 3 , 6 ] ] ;"}
{"text":"Insert edges","code":"for ( let i = 0 ; i < M ; ++ i ) { let u = edges [ i ] [ 0 ] ; let v = edges [ i ] [ 1 ] ; g [ u ] . set ( v , 1 ) ; g [ v ] . set ( u , 1 ) ; }"}
{"text":"Function call find the weight of Minimum Spanning Tree","code":"weightOfMST ( N ) ;"}
{"text":"Function to return the count of pairs","code":"function countPairs ( A , B ) { let n = A . length ; let ans = 0 ; A . sort ( ) ; B . sort ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( A [ i ] > B [ ans ] ) { ans ++ ; } } return ans ; }"}
{"text":"Driver Code","code":"let A = [ 30 , 28 , 45 , 22 ] ; let B = [ 35 , 25 , 22 , 48 ] ; document . write ( countPairs ( A , B ) ) ;"}
{"text":"Function to return the maximum mod value for any pair from the array","code":"function maxMod ( arr , n ) { let maxVal = arr . sort ( ( a , b ) => b - a ) [ 0 ] let secondMax = 0 ;"}
{"text":"Find the second maximum element from the array","code":"for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < maxVal && arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } } return secondMax ; }"}
{"text":"Driver code","code":"let arr = [ 2 , 4 , 1 , 5 , 3 , 6 ] ; let n = arr . length ; document . write ( maxMod ( arr , n ) ) ;"}
{"text":"Function to that returns true if it possible to choose the elements","code":"function isPossible ( A , B , n , m , x , y ) {"}
{"text":"If elements can 't be chosen","code":"if ( x > n y > m ) return false ;"}
{"text":"Sort both the arrays","code":"A . sort ( ) ; B . sort ( ) ;"}
{"text":"If xth smallest element of A is smaller than the yth greatest element of B","code":"if ( A [ x - 1 ] < B [ m - y ] ) return true ; else return false ; }"}
{"text":"Driver code","code":"var A = [ 1 , 1 , 1 , 1 , 1 ] ; var B = [ 2 , 2 ] ; var n = A . length ; var m = B . length ; ; var x = 3 , y = 1 ; if ( isPossible ( A , B , n , m , x , y ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Javascript program to minimum changes required in an array for k distinct elements .","code":"var MAX = 100005 ;"}
{"text":"Function to minimum changes required in an array for k distinct elements .","code":"function Min_Replace ( arr , n , k ) { arr . sort ( ( a , b ) => a - b )"}
{"text":"Store the frequency of each element","code":"var freq = Array ( MAX ) . fill ( 0 ) ; var p = 0 ; freq [ p ] = 1 ;"}
{"text":"Store the frequency of elements","code":"for ( var i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) ++ freq [ p ] ; else ++ freq [ ++ p ] ; }"}
{"text":"Sort frequencies in descending order","code":"freq . sort ( ( a , b ) => b - a ) ;"}
{"text":"To store the required answer","code":"var ans = 0 ; for ( var i = k ; i <= p ; i ++ ) ans += freq [ i ] ;"}
{"text":"Return the required answer","code":"return ans ; }"}
{"text":"Driver code","code":"var arr = [ 1 , 2 , 7 , 8 , 2 , 3 , 2 , 3 ] ; var n = arr . length ; var k = 2 ; document . write ( Min_Replace ( arr , n , k ) ) ;"}
{"text":"Function to find maximum number of elements without overlapping in a line","code":"function Segment ( x , l , n ) {"}
{"text":"If n = 1 , then answer is one","code":"if ( n == 1 ) return 1 ;"}
{"text":"We can always make 1 st element to cover left segment and nth the right segment","code":"let ans = 2 ; for ( let i = 1 ; i < n - 1 ; i ++ ) {"}
{"text":"If left segment for ith element doesnt overlap with i - 1 th element then do left","code":"if ( x [ i ] - l [ i ] > x [ i - 1 ] ) ans ++ ;"}
{"text":"else try towards right if possible","code":"else if ( x [ i ] + l [ i ] < x [ i + 1 ] ) {"}
{"text":"update x [ i ] to right endpolet of segment covered by it","code":"x [ i ] = x [ i ] + l [ i ] ; ans ++ ; } }"}
{"text":"Return the required answer","code":"return ans ; }"}
{"text":"Driver code","code":"let x = [ 1 , 3 , 4 , 5 , 8 ] , l = [ 10 , 1 , 2 , 2 , 5 ] ; let n = x . length ;"}
{"text":"Function call","code":"document . write ( Segment ( x , l , n ) ) ;"}
{"text":"Function to find the minimized sum","code":"function MinimizeleftOverSum ( a , n ) { var v1 = [ ] , v2 = [ ] ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) v1 . push ( a [ i ] ) ; else v2 . push ( a [ i ] ) ; }"}
{"text":"If more odd elements","code":"if ( v1 . length > v2 . length ) {"}
{"text":"Sort the elements","code":"v1 . sort ( ) ; v2 . sort ( ) ;"}
{"text":"Left - over elements","code":"var x = v1 . length - v2 . length - 1 ; var sum = 0 ; var i = 0 ;"}
{"text":"Find the sum of leftover elements","code":"while ( i < x ) { sum += v1 [ i ++ ] ; }"}
{"text":"Return the sum","code":"return sum ; }"}
{"text":"If more even elements","code":"else if ( v2 . length > v1 . length ) {"}
{"text":"Sort the elements","code":"v1 . sort ( ) ; v2 . sort ( ) ;"}
{"text":"Left - over elements","code":"var x = v2 . length - v1 . length - 1 ; var sum = 0 ; var i = 0 ;"}
{"text":"Find the sum of leftover elements","code":"while ( i < x ) { sum += v2 [ i ++ ] ; }"}
{"text":"Return the sum","code":"return sum ; }"}
{"text":"If same elements","code":"else return 0 ; }"}
{"text":"Driver code","code":"var a = [ 2 , 2 , 2 , 2 ] ; var n = a . length ; document . write ( MinimizeleftOverSum ( a , n ) ) ;"}
{"text":"Function to find the minimum number of operations to convert the given string","code":"function minOperation ( S , N , K ) {"}
{"text":"Check if N is divisible by K","code":"if ( N % K ) { document . write ( \" \" ) ; return ; }"}
{"text":"Array to store frequency of characters in given string","code":"var count = Array ( 26 ) . fill ( 0 ) ; for ( var i = 0 ; i < N ; i ++ ) { count [ S [ i ] . charCodeAt ( 0 ) - 97 ] ++ ; } var E = N \/ K ; var greaterE = [ ] ; var lessE = [ ] ; for ( var i = 0 ; i < 26 ; i ++ ) {"}
{"text":"Two arrays with number of operations required","code":"if ( count [ i ] < E ) lessE . push ( E - count [ i ] ) ; else greaterE . push ( count [ i ] - E ) ; } greaterE . sort ( ) ; lessE . sort ( ) ; var mi = 1000000000 ; for ( var i = 0 ; i <= K ; i ++ ) {"}
{"text":"Checking for all possibility","code":"var set1 = i ; var set2 = K - i ; if ( greaterE . length >= set1 && lessE . length >= set2 ) { var step1 = 0 ; var step2 = 0 ; for ( var j = 0 ; j < set1 ; j ++ ) step1 += greaterE [ j ] ; for ( var j = 0 ; j < set2 ; j ++ ) step2 += lessE [ j ] ; mi = Math . min ( mi , Math . max ( step1 , step2 ) ) ; } } document . write ( mi ) ; }"}
{"text":"Driver Code","code":"var S = \" \" ; var N = S . length ; var K = 2 ; minOperation ( S , N , K ) ;"}
{"text":"Function to find minimum range increments to sort an array","code":"function minMovesToSort ( arr , n ) { var moves = 0 ; var i , mn = arr [ n - 1 ] ; for ( i = n - 2 ; i >= 0 ; i -- ) {"}
{"text":"If current element is found greater than last element Increment all terms in range i + 1 to n - 1","code":"if ( arr [ i ] > mn ) moves += arr [ i ] - mn ;"}
{"text":"Minimum in range i to n - 1","code":"mn = arr [ i ] ; } return moves ; }"}
{"text":"Driver Code","code":"var arr = [ 3 , 5 , 2 , 8 , 4 ] ; var n = arr . length ; document . write ( minMovesToSort ( arr , n ) ) ;"}
{"text":"Javascript implementation of the approach","code":"var prime = Array ( 100005 ) . fill ( true ) ; function SieveOfEratosthenes ( n ) {"}
{"text":"false here indicates that it is not prime","code":"prime [ 1 ] = false ; for ( var p = 2 ; p * p <= n ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] ) {"}
{"text":"Update all multiples of p , set them to non - prime","code":"for ( var i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } }"}
{"text":"Function that sorts all the prime numbers from the array in descending","code":"function sortPrimes ( arr , n ) { SieveOfEratosthenes ( 100005 ) ;"}
{"text":"this vector will contain prime numbers to sort","code":"var v = [ ] ; for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"if the element is prime","code":"if ( prime [ arr [ i ] ] ) v . push ( arr [ i ] ) ; } v . sort ( ( a , b ) => b - a ) var j = 0 ;"}
{"text":"update the array elements","code":"for ( var i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) arr [ i ] = v [ j ++ ] ; } }"}
{"text":"Driver code","code":"var arr = [ 4 , 3 , 2 , 6 , 100 , 17 ] ; var n = arr . length ; sortPrimes ( arr , n ) ;"}
{"text":"print the results .","code":"for ( var i = 0 ; i < n ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"\/ Javascript Program to divide the array into N pairs such that maximum pair is minimized","code":"function findOptimalPairs ( arr , N ) { arr . sort ( function ( a , b ) { return a - b ; } ) ;"}
{"text":"After Sorting Maintain two variables i and j pointing to start and end of array Such that smallest element of array pairs with largest element","code":"for ( var i = 0 , j = N - 1 ; i <= j ; i ++ , j -- ) document . write ( \" \" + arr [ i ] + \" \" + arr [ j ] + \" \" + \" \" ) ; }"}
{"text":"Driver Code","code":"var arr = [ 9 , 6 , 5 , 1 ] ; var N = arr . length ; findOptimalPairs ( arr , N ) ;"}
{"text":"a utility function that returns total set bits count in an integer","code":"function countBits ( a ) { let count = 0 ; while ( a > 0 ) { if ( ( a & 1 ) > 0 ) count += 1 ; a = a >> 1 ; } return count ; }"}
{"text":"Function to simultaneously sort both arrays using insertion sort ( https : www . geeksforgeeks . org \/ insertion - sort \/ )","code":"function insertionSort ( arr , aux , n ) { for ( let i = 1 ; i < n ; i ++ ) {"}
{"text":"use 2 keys because we need to sort both arrays simultaneously","code":"let key1 = aux [ i ] ; let key2 = arr [ i ] ; let j = i - 1 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] and aux [ 0. . i - 1 ] , such that elements of aux [ 0. . i - 1 ] are greater than key1 , to one position ahead of their current position","code":"while ( j >= 0 && aux [ j ] < key1 ) { aux [ j + 1 ] = aux [ j ] ; arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } aux [ j + 1 ] = key1 ; arr [ j + 1 ] = key2 ; } }"}
{"text":"Function to sort according to bit count using an auxiliary array","code":"function sortBySetBitCount ( arr , n ) {"}
{"text":"Create an array and store count of set bits in it .","code":"let aux = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) aux [ i ] = countBits ( arr [ i ] ) ;"}
{"text":"Sort arr [ ] according to values in aux [ ]","code":"insertionSort ( arr , aux , n ) ; }"}
{"text":"Utility function to print an array","code":"function printArr ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; let n = arr . length ; sortBySetBitCount ( arr , n ) ; printArr ( arr , n ) ;"}
{"text":"a utility function that returns total set bits count in an integer","code":"function countBits ( a ) { let count = 0 ; while ( a > 0 ) { if ( ( a & 1 ) > 0 ) count += 1 ; a = a >> 1 ; } return count ; }"}
{"text":"Function to sort according to bit count . This function assumes that there are 32 bits in an integer .","code":"function sortBySetBitCount ( arr , n ) { let count = new Array ( 32 ) ; for ( let i = 0 ; i < count . length ; i ++ ) count [ i ] = [ ] ; let setbitcount = 0 ; for ( let i = 0 ; i < n ; i ++ ) { setbitcount = countBits ( arr [ i ] ) ; count [ setbitcount ] . push ( arr [ i ] ) ; }"}
{"text":"Used as an index in final sorted array","code":"let j = 0 ;"}
{"text":"Traverse through all bit counts ( Note that we sort array in decreasing order )","code":"for ( let i = 31 ; i >= 0 ; i -- ) { let v1 = count [ i ] ; for ( let p = 0 ; p < v1 . length ; p ++ ) arr [ j ++ ] = v1 [ p ] ; } }"}
{"text":"Utility function to print an array","code":"function printArr ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; let n = arr . length ; sortBySetBitCount ( arr , n ) ; printArr ( arr , n ) ;"}
{"text":"Function to find lexicographically smallest string having number of 1 s greater than number of 0 s","code":"function generateString ( k1 , k2 , s ) {"}
{"text":"C1s And C0s stores the count of 1 s and 0 s at every position","code":"let C1s = 0 , C0s = 0 ; let flag = 0 ; let pos = [ ] ;"}
{"text":"Traverse the string S","code":"for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == ' ' ) { C0s ++ ;"}
{"text":"If the position is not divisible by k1 and k2","code":"if ( ( i + 1 ) % k1 != 0 && ( i + 1 ) % k2 != 0 ) { pos . push ( i ) ; } } else { C1s ++ ; } if ( C0s >= C1s ) {"}
{"text":"If C0s >= C1s and pos [ ] is empty then the string can 't  be formed","code":"if ( pos . length == 0 ) { cout << - 1 ; flag = 1 ; break ; }"}
{"text":"If pos [ ] is not empty then flip the bit of last position present in pos [ ]","code":"else { let k = pos [ pos . length - 1 ] ; var ns = s . replace ( s [ k ] , ' ' ) ; C0s -- ; C1s ++ ; pos . pop ( ) ; } } }"}
{"text":"Print the result","code":"if ( flag == 0 ) { document . write ( ns ) ; } }"}
{"text":"Driver Code","code":"let K1 = 2 , K2 = 4 ; let S = \" \" ; generateString ( K1 , K2 , S ) ;"}
{"text":"Function to find the pair ( X , Y ) such that X xor Y = N and the count of set bits in X and Y is less than count of set bit in N","code":"function maximizeProduct ( N ) {"}
{"text":"Stores MSB ( Most Significant Bit )","code":"let MSB = Math . log2 ( N ) ;"}
{"text":"Stores the value of X","code":"let X = 1 << MSB ;"}
{"text":"Stores the value of Y","code":"let Y = N - ( 1 << MSB ) ;"}
{"text":"Traversing over all bits of N","code":"for ( let i = 0 ; i < MSB ; i ++ ) {"}
{"text":"If ith bit of N is 0","code":"if ( ! ( N & ( 1 << i ) ) ) {"}
{"text":"Set ith bit of X to 1","code":"X += 1 << i ;"}
{"text":"Set ith bit of Y to 1","code":"Y += 1 << i ; } }"}
{"text":"Print Answer","code":"document . write ( X + \" \" + Y ) ; }"}
{"text":"Driver Code","code":"let N = 45 ; maximizeProduct ( N ) ;"}
{"text":"Function to check if the number is valid","code":"function check ( num ) {"}
{"text":"Sum of digits of num","code":"let sm = 0 ;"}
{"text":"Squared number","code":"let num2 = num * num ; while ( num ) { sm += num % 10 ; num = Math . floor ( num \/ 10 ) ; }"}
{"text":"Sum of digits of ( num * num )","code":"let sm2 = 0 ; while ( num2 ) { sm2 += num2 % 10 ; num2 = Math . floor ( num2 \/ 10 ) ; } return sm * sm == sm2 ; }"}
{"text":"Function to convert a string to an integer","code":"function convert ( s ) { let val = 0 ; s = s . split ( \" \" ) . reverse ( ) . join ( \" \" ) ; let cur = 1 ; for ( let i = 0 ; i < s . length ; i ++ ) { val += ( s [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ) * cur ; cur *= 10 ; } return val ; }"}
{"text":"Function to generate all possible strings of length len","code":"function generate ( s , len , uniq ) {"}
{"text":"Desired string","code":"if ( s . length == len ) {"}
{"text":"Take only valid numbers","code":"if ( check ( convert ( s ) ) ) { uniq . add ( convert ( s ) ) ; } return ; }"}
{"text":"Recurse for all possible digits","code":"for ( let i = 0 ; i <= 3 ; i ++ ) { generate ( s + String . fromCharCode ( i + \" \" . charCodeAt ( 0 ) ) , len , uniq ) ; } }"}
{"text":"Function to calculate unique numbers in range [ L , R ]","code":"function totalNumbers ( L , R ) {"}
{"text":"Initialize a variable to store the answer","code":"let ans = 0 ;"}
{"text":"Calculate the maximum possible length","code":"let max_len = Math . log10 ( R ) + 1 ;"}
{"text":"Set to store distinct valid numbers","code":"let uniq = new Set ( ) ; for ( let i = 1 ; i <= max_len ; i ++ ) {"}
{"text":"Generate all possible strings of length i","code":"generate ( \" \" , i , uniq ) ; }"}
{"text":"Iterate the set to get the count of valid numbers in the range [ L , R ]","code":"for ( let x of uniq ) { if ( x >= L && x <= R ) { ans ++ ; } } return ans ; }"}
{"text":"Driver Code","code":"let L = 22 , R = 22 ; document . write ( totalNumbers ( L , R ) ) ;"}
{"text":"Function to check if X can be converted to Y by multiplying X by 2 or appending 1 at the end","code":"function convertXintoY ( X , Y ) {"}
{"text":"Iterate until Y is at least X","code":"while ( Y > X ) {"}
{"text":"If Y is even","code":"if ( Y % 2 == 0 ) Y = parseInt ( Y \/ 2 ) ;"}
{"text":"If the last digit of Y is 1","code":"else if ( Y % 10 == 1 ) Y = parseInt ( Y \/= 10 ) ;"}
{"text":"Otherwise","code":"else break ; }"}
{"text":"Check if X is equal to Y","code":"if ( X == Y ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let X = 100 , Y = 40021 ; convertXintoY ( X , Y ) ;"}
{"text":"Function to find the lexicographically smallest string of the first K lower case alphabets having unique substrings","code":"function generateString ( K ) {"}
{"text":"Stores the resultant string","code":"var s = \" \" ;"}
{"text":"Iterate through all the characters","code":"for ( var i = 97 ; i < 97 + K ; i ++ ) { s = s + String . fromCharCode ( i ) ;"}
{"text":"Inner Loop for making pairs and adding them into string","code":"for ( var j = i + 1 ; j < 97 + K ; j ++ ) { s += String . fromCharCode ( i ) ; s += String . fromCharCode ( j ) ; } }"}
{"text":"Adding first character so that substring consisting of the last the first alphabet is present","code":"s += String . fromCharCode ( 97 ) ;"}
{"text":"Print the resultant string","code":"document . write ( s ) ; }"}
{"text":"Driver code","code":"var K = 4 ; generateString ( K ) ;"}
{"text":"Function to find the quadratic equation from the given sum and products of roots","code":"function findEquation ( S , M ) {"}
{"text":"Print the coefficients","code":"document . write ( \" \" + ( ( - 1 ) * S ) + \" \" + M ) ; }"}
{"text":"Driver Code","code":"var S = 5 , M = 6 ; findEquation ( S , M ) ;"}
{"text":"Function to count the minimum number of pairs of adjacent elements required to be replaced by their sum to make all array elements equal","code":"function minSteps ( a , n ) {"}
{"text":"Stores the prefix sum of the array","code":"var prefix_sum = Array ( n ) . fill ( 0 ) ; prefix_sum [ 0 ] = a [ 0 ] ;"}
{"text":"Calculate the prefix sum array","code":"for ( var i = 1 ; i < n ; i ++ ) prefix_sum [ i ] += prefix_sum [ i - 1 ] + a [ i ] ;"}
{"text":"Stores the maximum number of subarrays into which the array can be split","code":"var mx = - 1 ;"}
{"text":"Iterate over all possible sums","code":"for ( var subgroupsum = 0 ; subgroupsum < prefix_sum . length ; subgroupsum ++ ) { var sum = 0 ; var i = 0 ; var grp_count = 0 ;"}
{"text":"Traverse the array","code":"while ( i < n ) { sum += a [ i ] ;"}
{"text":"If the sum is equal to the current prefix sum","code":"if ( sum == prefix_sum [ subgroupsum ] ) {"}
{"text":"Increment count of groups by 1","code":"grp_count += 1 ; sum = 0 ; }"}
{"text":"Otherwise discard this subgroup sum","code":"else if ( sum > prefix_sum [ subgroupsum ] ) { grp_count = - 1 ; break ; } i += 1 ; }"}
{"text":"Update the maximum this of subarrays","code":"if ( grp_count > mx ) mx = grp_count ; }"}
{"text":"Return the minimum number of operations","code":"return n - mx ; }"}
{"text":"Driver Code","code":"var A = [ 1 , 2 , 3 , 2 , 1 , 3 ] ; var N = A . length ;"}
{"text":"Function Call","code":"document . write ( minSteps ( A , N ) ) ;"}
{"text":"Function to find the most frequent character after replacing X with either '0' or '1' according as per the given conditions","code":"function maxOccuringCharacter ( s ) {"}
{"text":"Store the count of 0 s and 1 s in the string S","code":"var count0 = 0 , count1 = 0 ;"}
{"text":"Count the frequency of 0 and 1","code":"for ( var i = 0 ; i < s . length ; i ++ ) {"}
{"text":"If the character is 1","code":"if ( s . charAt ( i ) == ' ' ) { count1 ++ ; }"}
{"text":"If the character is 0","code":"else if ( s . charAt ( i ) == ' ' ) { count0 ++ ; } }"}
{"text":"Stores first occurence of 1","code":"var prev = - 1 ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s . charAt ( i ) == ' ' ) { prev = i ; break ; } }"}
{"text":"Traverse the string to count the number of X between two consecutive 1 s","code":"for ( var i = prev + 1 ; i < s . length ; i ++ ) {"}
{"text":"If the current character is not X","code":"if ( s . charAt ( i ) != ' ' ) {"}
{"text":"If the current character is 1 , add the number of Xs to count1 and set prev to i","code":"if ( s . charAt ( i ) == ' ' ) { count1 += i - prev - 1 ; prev = i ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"Find next occurence of 1 in the string","code":"flag = true ; for ( var j = i + 1 ; j < s . length ; j ++ ) { if ( s . charAt ( j ) == ' ' ) { flag = false ; prev = j ; break ; } }"}
{"text":"If it is found , set i to prev","code":"if ( ! flag ) { i = prev ; }"}
{"text":"Otherwise , break out of the loop","code":"else { i = s . length ; } } } }"}
{"text":"Store the first occurence of 0","code":"prev = - 1 ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s . charAt ( i ) == ' ' ) { prev = i ; break ; } }"}
{"text":"Repeat the same procedure to count the number of X between two consecutive 0 s","code":"for ( var i = prev + 1 ; i < s . length ; i ++ ) {"}
{"text":"If the current character is not X","code":"if ( s . charAt ( i ) != ' ' ) {"}
{"text":"If the current character is 0","code":"if ( s . charAt ( i ) == ' ' ) {"}
{"text":"Add the count of Xs to count0","code":"count0 += i - prev - 1 ;"}
{"text":"Set prev to i","code":"prev = i ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"Find the next occurence of 0 in the string","code":"flag = true ; for ( var j = i + 1 ; j < s . length ; j ++ ) { if ( s . charAt ( j ) == ' ' ) { prev = j ; flag = false ; break ; } }"}
{"text":"If it is found , set i to prev","code":"if ( ! flag ) { i = prev ; }"}
{"text":"Otherwise , break out of the loop","code":"else { i = s . length ; } } } }"}
{"text":"Count number of X present in the starting of the string as XXXX1 ...","code":"if ( s . charAt ( 0 ) == ' ' ) {"}
{"text":"Store the count of X","code":"var count = 0 ; var i = 0 ; while ( s . charAt ( i ) == ' ' ) { count ++ ; i ++ ; }"}
{"text":"Increment count1 by count if the condition is satisfied","code":"if ( s . charAt ( i ) == ' ' ) { count1 += count ; } }"}
{"text":"Count the number of X present in the ending of the string as ... XXXX0","code":"if ( s . charAt ( s . length - 1 ) == ' ' ) {"}
{"text":"Store the count of X","code":"var count = 0 ; var i = s . length - 1 ; while ( s . charAt ( i ) == ' ' ) { count ++ ; i -- ; }"}
{"text":"Increment count0 by count if the condition is satisfied","code":"if ( s . charAt ( i ) == ' ' ) { count0 += count ; } }"}
{"text":"If count of 1 is equal to count of 0 , print X","code":"if ( count0 == count1 ) { document . write ( \" \" ) ; }"}
{"text":"Otherwise , if count of 1 is greater than count of 0","code":"else if ( count0 > count1 ) { document . write ( 0 ) ; }"}
{"text":"Otherwise , print 0","code":"else document . write ( 1 ) ; }"}
{"text":"Driver Code","code":"var S = \" \" ; maxOccuringCharacter ( S ) ;"}
{"text":"Function to calculate the maximum number of sheets possible by given operations","code":"function maxSheets ( A , B ) { let area = A * B ;"}
{"text":"Initial count of sheets","code":"let count = 1 ;"}
{"text":"Keep dividing the sheets into half","code":"while ( area % 2 == 0 ) {"}
{"text":"Reduce area by half","code":"area \/= 2 ;"}
{"text":"Increase count by twice","code":"count *= 2 ; } return count ; }"}
{"text":"Driver Code","code":"let A = 5 , B = 10 ; document . write ( maxSheets ( A , B ) ) ;"}
{"text":"Function to find the minimum moves required to reach origin from ( a , b )","code":"function findMinMoves ( a , b ) {"}
{"text":"Stores the minimum number of moves","code":"let ans = 0 ;"}
{"text":"Check if the absolute difference is 1 or 0","code":"if ( a == b || Math . abs ( a - b ) == 1 ) { ans = a + b ; } else {"}
{"text":"Store the minimum of a , b","code":"let k = Math . min ( a , b ) ;"}
{"text":"Store the maximum of a , b","code":"let j = Math . max ( a , b ) ; ans = 2 * k + 2 * ( j - k ) - 1 ; }"}
{"text":"Print the answer","code":"document . write ( ans ) ; }"}
{"text":"Given co - ordinates","code":"let a = 3 , b = 5 ;"}
{"text":"Function Call","code":"findMinMoves ( a , b ) ;"}
{"text":"Function to count maximum even sum pairs in the given range","code":"function cntEvenSumPairs ( X , Y ) {"}
{"text":"Stores the count of even numbers between 1 to X","code":"var cntXEvenNums = parseInt ( X \/ 2 ) ;"}
{"text":"Stores the count of odd numbers between 1 to X","code":"var cntXOddNums = parseInt ( ( X + 1 ) \/ 2 ) ;"}
{"text":"Stores the count of even numbers between 1 to Y","code":"var cntYEvenNums = parseInt ( Y \/ 2 ) ;"}
{"text":"Stores the count of odd numbers between 1 to Y","code":"var cntYOddNums = parseInt ( ( Y + 1 ) \/ 2 ) ;"}
{"text":"Stores the count of pairs having even sum","code":"var cntPairs = ( cntXEvenNums * cntYEvenNums ) + ( cntXOddNums * cntYOddNums ) ;"}
{"text":"Retuens the count of pairs having even sum","code":"return cntPairs ; }"}
{"text":"Driver Code","code":"var X = 2 ; var Y = 3 ; document . write ( cntEvenSumPairs ( X , Y ) ) ;"}
{"text":"Function to calculate minimum number of moves to make the sequence a Fibonacci series","code":"function minMoves ( arr ) { let N = arr . length ;"}
{"text":"If number of elements is less than 3","code":"if ( N <= 2 ) return 0 ;"}
{"text":"Initialize the value of the result","code":"let ans = Number . MAX_VALUE ;"}
{"text":"Try all permutations of the first two elements","code":"for ( let i = - 1 ; i <= 1 ; i ++ ) { for ( let j = - 1 ; j <= 1 ; j ++ ) {"}
{"text":"Value of first element after operation","code":"let num1 = arr [ 0 ] + i ;"}
{"text":"Value of second element after operation","code":"let num2 = arr [ 1 ] + j ; let flag = 1 ; let moves = Math . abs ( i ) + Math . abs ( j ) ;"}
{"text":"Calculate number of moves for rest of the elements of the array","code":"for ( let idx = 2 ; idx < N ; idx ++ ) {"}
{"text":"Element at idx index","code":"let num = num1 + num2 ;"}
{"text":"If it is not possible to change the element in atmost one move","code":"if ( Math . abs ( arr [ idx ] - num ) > 1 ) flag = 0 ;"}
{"text":"Otherwise","code":"else moves += Math . abs ( arr [ idx ] - num ) ; num1 = num2 ; num2 = num ; }"}
{"text":"Update the answer","code":"if ( flag > 0 ) ans = Math . min ( ans , moves ) ; } }"}
{"text":"Return the answer","code":"if ( ans == Number . MAX_VALUE ) return - 1 ; return ans ; }"}
{"text":"Driver Code","code":"let arr = [ 4 , 8 , 9 , 17 , 27 ] ; document . write ( minMoves ( arr ) ) ;"}
{"text":"Function to Find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries","code":"function querySum ( arr , N , Q , M ) {"}
{"text":"Iterate over each query","code":"for ( let i = 0 ; i < M ; i ++ ) { let x = Q [ i ] [ 0 ] ; let y = Q [ i ] [ 1 ] ;"}
{"text":"Stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ...","code":"let sum = 0 ;"}
{"text":"Traverse the array and calculate the sum of the expression","code":"while ( x < N ) {"}
{"text":"Update sum","code":"sum += arr [ x ] ;"}
{"text":"Update x","code":"x += y ; } document . write ( sum + \" \" ) ; } }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 7 , 5 , 4 ] ; let Q = [ [ 2 , 1 ] , [ 3 , 2 ] ] ; let N = arr . length ; let M = Q . length ; querySum ( arr , N , Q , M ) ;"}
{"text":"Function to calculate Bitwise OR from given bitwise XOR and bitwise AND values","code":"function findBitwiseORGivenXORAND ( X , Y ) { return X + Y ; }"}
{"text":"Driver Code","code":"let X = 5 , Y = 2 ; document . write ( findBitwiseORGivenXORAND ( X , Y ) ) ;"}
{"text":"Function to return GCD of two numbers a and b","code":"function GCD ( a , b ) {"}
{"text":"Base Case","code":"if ( b == 0 ) return a ;"}
{"text":"Recursively Find the GCD","code":"return GCD ( b , a % b ) ; }"}
{"text":"Function to check of B can be reaced from A with a jump of K elements in the circular queue","code":"function canReach ( N , A , B , K ) {"}
{"text":"Find GCD of N and K","code":"var gcd = GCD ( N , K ) ;"}
{"text":"If A - B is divisible by gcd then print Yes","code":"if ( Math . abs ( A - B ) % gcd == 0 ) { document . write ( \" \" ) ; }"}
{"text":"Otherwise","code":"else { document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"var N = 5 , A = 2 , B = 1 , K = 2 ;"}
{"text":"Function Call","code":"canReach ( N , A , B , K ) ;"}
{"text":"Function that counts the subarrays with sum of its elements as its length","code":"function countOfSubarray ( arr , N ) {"}
{"text":"Store count of elements upto current element with length i","code":"var mp = new Map ( ) ;"}
{"text":"Stores the final count of subarray","code":"var answer = 0 ;"}
{"text":"Stores the prefix sum","code":"var sum = 0 ;"}
{"text":"If size of subarray is 1","code":"if ( ! mp . has ( 1 ) ) mp . set ( 1 , 1 ) else mp . set ( 1 , mp . get ( 1 ) + 1 )"}
{"text":"Iterate the array","code":"for ( var i = 0 ; i < N ; i ++ ) {"}
{"text":"Find the sum","code":"sum += arr [ i ] ; answer += mp . has ( sum - i ) ? mp . get ( sum - i ) : 0 ;"}
{"text":"Update frequency in map","code":"if ( mp . has ( sum - i ) ) mp . set ( sum - i , mp . get ( sum - i ) + 1 ) else mp . set ( sum - i , 1 ) }"}
{"text":"Print the total count","code":"document . write ( answer ) ; }"}
{"text":"Given array arr [ ]","code":"var arr = [ 1 , 0 , 2 , 1 , 2 , - 2 , 2 , 4 ] ;"}
{"text":"Size of array","code":"var N = arr . length ;"}
{"text":"Function Call","code":"countOfSubarray ( arr , N ) ;"}
{"text":"Function to split the first N natural numbers into two sets having minimum absolute difference of their sums","code":"function minAbsDiff ( N ) {"}
{"text":"Stores the sum of elements of set1","code":"var sumSet1 = 0 ;"}
{"text":"Stores the sum of elements of set2","code":"var sumSet2 = 0 ;"}
{"text":"Traverse first N natural numbers","code":"for ( i = N ; i > 0 ; i -- ) {"}
{"text":"Check if sum of elements of set1 is less than or equal to sum of elements of set2","code":"if ( sumSet1 <= sumSet2 ) { sumSet1 += i ; } else { sumSet2 += i ; } } return Math . abs ( sumSet1 - sumSet2 ) ; }"}
{"text":"Driver code","code":"var N = 6 ; document . write ( minAbsDiff ( N ) ) ;"}
{"text":"Function to check if N contains digits 0 , 1 , 2 , 5 , 8 only","code":"function checkDigits ( n ) {"}
{"text":"Extract digits of N","code":"do { var r = n % 10 ;"}
{"text":"Return false if any of these digits are present","code":"if ( r == 3 r == 4 r == 6 r == 7 r == 9 ) return false ; n = parseInt ( n \/ 10 ) ; } while ( n != 0 ) ; return true ; }"}
{"text":"Function to check if N is prime or not","code":"function isPrime ( n ) { if ( n <= 1 ) return false ;"}
{"text":"Check for all factors","code":"for ( var i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; }"}
{"text":"Function to check if n is prime in all the desired forms","code":"function isAllPrime ( n ) { return isPrime ( n ) && checkDigits ( n ) ; }"}
{"text":"Driver Code","code":"var N = 101 ; if ( isAllPrime ( N ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to calculate the minimum cost required to generate a balanced bracket sequence","code":"function minCost ( str , a , b ) {"}
{"text":"Stores the count of unbalanced open brackets","code":"let openUnbalanced = 0 ;"}
{"text":"Stores the count of unbalanced closed brackets","code":"let closedUnbalanced = 0 ;"}
{"text":"Stores the count of open brackets","code":"let openCount = 0 ;"}
{"text":"Stores the count of closed brackets","code":"let closedCount = 0 ; for ( let i = 0 ; i < str . length ; i ++ ) {"}
{"text":"If open brace is encountered","code":"if ( str [ i ] == ' ' ) { openUnbalanced ++ ; openCount ++ ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"If no unbalanced open brackets are present","code":"if ( openUnbalanced == 0 )"}
{"text":"Increase count of unbalanced closed brackets","code":"closedUnbalanced ++ ;"}
{"text":"Otherwise","code":"else"}
{"text":"Reduce count of unbalanced open brackets","code":"openUnbalanced -- ;"}
{"text":"Increase count of closed brackets","code":"closedCount ++ ; } }"}
{"text":"Calculate lower bound of minimum cost","code":"let result = a * ( Math . abs ( openCount - closedCount ) ) ;"}
{"text":"Reduce excess open or closed brackets to prevent counting them twice","code":"if ( closedCount > openCount ) closedUnbalanced -= ( closedCount - openCount ) ; if ( openCount > closedCount ) openUnbalanced -= ( openCount - closedCount ) ;"}
{"text":"Update answer by adding minimum of removing both unbalanced open and closed brackets or inserting closed unbalanced brackets to end of String","code":"result += Math . min ( a * ( openUnbalanced + closedUnbalanced ) , b * closedUnbalanced ) ;"}
{"text":"Prlet the result","code":"document . write ( result + \" \" ) ; }"}
{"text":"Driver Code","code":"let str = \" \" ; let A = 1 , B = 3 ; minCost ( str , A , B ) ;"}
{"text":"Function to return the number of all permutations such that sum of K numbers in range is even","code":"function countEvenSum ( low , high , k ) {"}
{"text":"Find total count of even and odd number in given range","code":"let even_count = high \/ 2 - ( low - 1 ) \/ 2 ; let odd_count = ( high + 1 ) \/ 2 - low \/ 2 ; let even_sum = 1 ; let odd_sum = 0 ;"}
{"text":"Iterate loop k times and update even_sum & odd_sum using previous values","code":"for ( let i = 0 ; i < k ; i ++ ) {"}
{"text":"Update the prev_even and odd_sum","code":"let prev_even = even_sum ; let prev_odd = odd_sum ;"}
{"text":"Even sum","code":"even_sum = ( prev_even * even_count ) + ( prev_odd * odd_count ) ;"}
{"text":"Odd sum","code":"odd_sum = ( prev_even * odd_count ) + ( prev_odd * even_count ) ; }"}
{"text":"Return even_sum","code":"document . write ( even_sum ) ; }"}
{"text":"Given ranges","code":"let low = 4 ; let high = 5 ;"}
{"text":"Length of permutation","code":"let K = 3 ;"}
{"text":"Function call","code":"countEvenSum ( low , high , K ) ;"}
{"text":"Function to count the number of N - digit numbers such that sum of every K consecutive digits are equal","code":"function count ( n , k ) { let count = Math . pow ( 10 , k ) - Math . pow ( 10 , k - 1 ) ;"}
{"text":"Print the answer","code":"document . write ( count ) ; }"}
{"text":"Driver Code","code":"let n = 2 , k = 1 ; count ( n , k ) ;"}
{"text":"Function to find the sum of largest divisors of numbers in range 1 to N not divisible by prime number P","code":"function func ( N , P ) {"}
{"text":"Total sum upto N","code":"let sumUptoN = ( N * ( N + 1 ) \/ 2 ) ; let sumOfMultiplesOfP ;"}
{"text":"If no multiple of P exist up to N","code":"if ( N < P ) { return sumUptoN ; }"}
{"text":"If only P itself is in the range from 1 to N","code":"else if ( ( N \/ P ) == 1 ) { return sumUptoN - P + 1 ; }"}
{"text":"Sum of those that are divisible by P","code":"sumOfMultiplesOfP = ( ( N \/ P ) * ( 2 * P + ( N \/ P - 1 ) * P ) ) \/ 2 ;"}
{"text":"Recursively function call to find the sum for N \/ P","code":"return ( sumUptoN + func ( N \/ P , P ) - sumOfMultiplesOfP ) ; }"}
{"text":"Given N and P","code":"let N = 10 , P = 5 ;"}
{"text":"Function call","code":"document . write ( func ( N , P ) ) ;"}
{"text":"Function to find the right shifts required for each element to reach its sorted array position in A [ ]","code":"function findShifts ( A , N ) {"}
{"text":"Stores required number of shifts for each element","code":"let shift = Array . from ( { length : N } , ( _ , i ) => 0 ) ; for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If the element is at sorted position","code":"if ( i == A [ i ] - 1 ) shift [ i ] = 0 ;"}
{"text":"Otherwise","code":"else"}
{"text":"Calculate right shift","code":"shift [ i ] = ( A [ i ] - 1 - i + N ) % N ; }"}
{"text":"Prlet the respective shifts","code":"for ( let i = 0 ; i < N ; i ++ ) document . write ( shift [ i ] + \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 4 , 3 , 2 , 5 ] ; let N = arr . length ; findShifts ( arr , N ) ;"}
{"text":"Function to construct matrix with diagonal sum equal to matrix sum","code":"function constructmatrix ( N ) { let check = true ; for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < N ; j ++ ) {"}
{"text":"If diagonal position","code":"if ( i == j ) { document . write ( \" \" ) ; } else if ( check ) {"}
{"text":"Positive element","code":"document . write ( \" \" ) ; check = false ; } else {"}
{"text":"Negative element","code":"document . write ( \" \" ) ; check = true ; } } document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"let N = 5 ; constructmatrix ( 5 ) ;"}
{"text":"Function to calculate and return the minimum number of times a number with unit digit X needs to be added to get a sum N","code":"function check ( unit_digit , X ) { let times , digit ;"}
{"text":"Calculate the number of additions required to get unit digit of N","code":"for ( times = 1 ; times <= 10 ; times ++ ) { digit = ( X * times ) % 10 ; if ( digit == unit_digit ) return times ; }"}
{"text":"If unit digit of N cannot be obtained","code":"return - 1 ; }"}
{"text":"Function to return the minimum number required to represent N","code":"function getNum ( N , X ) { let unit_digit ;"}
{"text":"Stores unit digit of N","code":"unit_digit = N % 10 ;"}
{"text":"Stores minimum addition of X required to obtain unit digit of N","code":"let times = check ( unit_digit , X ) ;"}
{"text":"If unit digit of N cannot be obtained","code":"if ( times == - 1 ) return times ;"}
{"text":"Otherwise","code":"else {"}
{"text":"If N is greater than or equal to ( X * times )","code":"if ( N >= ( times * X ) )"}
{"text":"Minimum count of numbers that needed to represent N","code":"return times ;"}
{"text":"Representation not possible","code":"else return - 1 ; } }"}
{"text":"Driver Code","code":"let N = 58 , X = 7 ; document . write ( getNum ( N , X ) ) ;"}
{"text":"Function to find the minimum number of Polets required to cover a grid","code":"function minPolets ( n , m ) { let ans = 0 ;"}
{"text":"If number of block is even","code":"if ( ( n % 2 != 0 ) && ( m % 2 != 0 ) ) { ans = Math . floor ( ( n * m ) \/ 2 ) + 1 ; } else { ans = Math . floor ( ( n * m ) \/ 2 ) ; }"}
{"text":"Return the minimum polets","code":"return ans ; }"}
{"text":"Given size of grid","code":"let N = 5 , M = 7 ;"}
{"text":"Function Call","code":"document . write ( minPolets ( N , M ) ) ;"}
{"text":"Function to find the largest lexicographical String with given constraints .","code":"function getLargestString ( s , k ) {"}
{"text":"Vector containing frequency of each character .","code":"let frequency_array = new Array ( 26 ) ; for ( let i = 0 ; i < 26 ; i ++ ) { frequency_array [ i ] = 0 ; }"}
{"text":"Assigning frequency","code":"for ( let i = 0 ; i < s . length ; i ++ ) { frequency_array [ s [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ; }"}
{"text":"Empty String of String class type","code":"let ans = \" \" ;"}
{"text":"Loop to iterate over maximum priority first .","code":"for ( let i = 25 ; i >= 0 ; ) {"}
{"text":"If frequency is greater than or equal to k .","code":"if ( frequency_array [ i ] > k ) {"}
{"text":"Temporary variable to operate in - place of k .","code":"let temp = k ; let st = String . fromCharCode ( i + ' ' . charCodeAt ( 0 ) ) ; while ( temp > 0 ) {"}
{"text":"Concatenating with the resultant String ans .","code":"ans += st ; temp -- ; } frequency_array [ i ] -= k ;"}
{"text":"Handling k case by adjusting with just smaller priority element .","code":"let j = i - 1 ; while ( frequency_array [ j ] <= 0 && j >= 0 ) { j -- ; }"}
{"text":"Condition to verify if index j does have frequency greater than 0 ;","code":"if ( frequency_array [ j ] > 0 && j >= 0 ) { let str = String . fromCharCode ( j + ' ' . charCodeAt ( 0 ) ) ; ans += str ; frequency_array [ j ] -= 1 ; } else {"}
{"text":"If no such element is found than String can not be processed further .","code":"break ; } }"}
{"text":"If frequency is greater than 0 and less than k .","code":"else if ( frequency_array [ i ] > 0 ) {"}
{"text":"Here we don 't need to fix K  consecutive element criteria.","code":"let temp = frequency_array [ i ] ; frequency_array [ i ] -= temp ; let st = String . fromCharCode ( i + ' ' . charCodeAt ( 0 ) ) ; while ( temp > 0 ) { ans += st ; temp -- ; } }"}
{"text":"Otherwise check for next possible element .","code":"else { i -- ; } } return ans ; }"}
{"text":"Driver code","code":"let S = \" \" ; let k = 3 ; document . write ( getLargestString ( S , k ) ) ;"}
{"text":"Function to find the minimum operations required to make all elements of the array equal","code":"function minOperations ( a , b , n ) {"}
{"text":"Minimum element of A","code":"var minA = Math . max . apply ( Math , a ) ; ;"}
{"text":"Traverse through all final values","code":"for ( x = minA ; x >= 0 ; x -- ) {"}
{"text":"Variable indicating whether all elements can be converted to x or not","code":"var check = true ;"}
{"text":"Total operations","code":"var operations = 0 ;"}
{"text":"Traverse through all array elements","code":"for ( i = 0 ; i < n ; i ++ ) { if ( x % b [ i ] == a [ i ] % b [ i ] ) { operations += ( a [ i ] - x ) \/ b [ i ] ; }"}
{"text":"All elements can 't  be converted to x","code":"else { check = false ; break ; } } if ( check ) return operations ; } return - 1 ; }"}
{"text":"Driver Code","code":"var N = 5 ; var A = [ 5 , 7 , 10 , 5 , 15 ] ; var B = [ 2 , 2 , 1 , 3 , 5 ] ; document . write ( minOperations ( A , B , N ) ) ;"}
{"text":"Function to return the maximum sum of a + b satisfying the given condition","code":"function getLargestSum ( N ) {"}
{"text":"Initialize max_sum","code":"var max_sum = 0 ;"}
{"text":"Consider all the possible pairs","code":"for ( i = 1 ; i <= N ; i ++ ) { for ( j = i + 1 ; j <= N ; j ++ ) {"}
{"text":"Check if the product is divisible by the sum","code":"if ( i * j % ( i + j ) == 0 )"}
{"text":"Storing the maximum sum in the max_sum variable","code":"max_sum = Math . max ( max_sum , i + j ) ; } }"}
{"text":"Return the max_sum value","code":"return max_sum ; }"}
{"text":"Driver code","code":"var N = 25 ; var max_sum = getLargestSum ( N ) ; document . write ( max_sum ) ;"}
{"text":"Kadane 's algorithm to find the maximum subarray sum","code":"function maxSubArraySum ( a , size ) { var max_so_far = Number . MIN_VALUE , max_ending_here = 0 ;"}
{"text":"Loop to find the maximum subarray array sum in the given array","code":"for ( i = 0 ; i < size ; i ++ ) { max_ending_here = max_ending_here + a [ i ] ; if ( max_ending_here < 0 ) max_ending_here = 0 ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; } return max_so_far ; }"}
{"text":"Function to find the maximum sum of the array by multiplying the prefix and suffix by - 1","code":"function maxSum ( a , n ) {"}
{"text":"Total intital sum","code":"var S = 0 ; var i ;"}
{"text":"Loop to find the maximum sum of the array","code":"for ( i = 0 ; i < n ; i ++ ) S += a [ i ] ; var X = maxSubArraySum ( a , n ) ;"}
{"text":"Maximum value","code":"return 2 * X - S ; }"}
{"text":"Driver Code","code":"var a = [ - 1 , - 2 , - 3 ] ; var n = a . length ; var max_sum = maxSum ( a , n ) ; document . write ( max_sum ) ;"}
{"text":"Function to check if a number is prime or not","code":"function isPrime ( n ) { let flag = 1 ;"}
{"text":"If n is divisible by any number between 2 and Math . sqrt ( n ) , it is not prime","code":"for ( let i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { flag = 0 ; break ; } } return ( flag == 1 ? true : false ) ; }"}
{"text":"Function to check if a number is perfect square or not","code":"function isPerfectSquare ( x ) {"}
{"text":"Find floating point value of square root of x .","code":"let sr = Math . sqrt ( x ) ;"}
{"text":"If square root is an integer","code":"return ( ( sr - Math . floor ( sr ) ) == 0 ) ; }"}
{"text":"Function to find the number of interesting primes less than equal to N .","code":"function countInterestingPrimes ( n ) { let answer = 0 ; for ( let i = 2 ; i <= n ; i ++ ) {"}
{"text":"Check whether the number is prime or not","code":"if ( isPrime ( i ) ) {"}
{"text":"Iterate for values of b","code":"for ( let j = 1 ; j * j * j * j <= i ; j ++ ) {"}
{"text":"Check condition for a","code":"if ( isPerfectSquare ( i - j * j * j * j ) ) { answer ++ ; break ; } } } }"}
{"text":"Return the required answer","code":"return answer ; }"}
{"text":"Driver code","code":"let N = 10 ; document . write ( countInterestingPrimes ( N ) ) ;"}
{"text":"Function to convert decimal number n to its binary representation stored as an array arr [ ]","code":"function decBinary ( arr , n ) { let k = Math . log2 ( n ) ; while ( n > 0 ) { arr [ k -- ] = n % 2 ; n = Math . floor ( n \/ 2 ) ; } }"}
{"text":"Function to convert the number represented as a binary array arr [ ] into its decimal equivalent","code":"function binaryDec ( arr , n ) { let ans = 0 ; for ( let i = 0 ; i < n ; i ++ ) ans += arr [ i ] << ( n - i - 1 ) ; return ans ; }"}
{"text":"Function to return the maximized number by flipping atmost k bits","code":"function maxNum ( n , k ) {"}
{"text":"Number of bits in n","code":"let l = Math . log2 ( n ) + 1 ;"}
{"text":"Find the binary representation of n","code":"let a = new Array ( l ) . fill ( 0 ) ; decBinary ( a , n ) ;"}
{"text":"To count the number of 0 s flipped","code":"let cn = 0 ; for ( let i = 0 ; i < l ; i ++ ) { if ( a [ i ] == 0 && cn < k ) { a [ i ] = 1 ; cn ++ ; } }"}
{"text":"Return the decimal equivalent of the maximized number","code":"return binaryDec ( a , l ) ; }"}
{"text":"Driver code","code":"let n = 4 , k = 1 ; document . write ( maxNum ( n , k ) ) ;"}
{"text":"Function to find the required subsequence","code":"function findSubSeq ( arr , n , sum ) { for ( let i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"Current element cannot be a part of the required subsequence","code":"if ( sum < arr [ i ] ) arr [ i ] = - 1 ;"}
{"text":"Include current element in the required subsequence So update the sum","code":"else sum -= arr [ i ] ; }"}
{"text":"Prlet the elements of the required subsequence","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"If the current element was included in the subsequence","code":"if ( arr [ i ] != - 1 ) document . write ( arr [ i ] + \" \" ) ; } }"}
{"text":"Driver code","code":"let arr = [ 17 , 25 , 46 , 94 , 201 , 400 ] ; let n = arr . length ; let sum = 272 ; findSubSeq ( arr , n , sum ) ;"}
{"text":"JavaScript implementation of the approach","code":"const MAX = 26 ;"}
{"text":"Function to return the maximum valued alphabet","code":"function maxAlpha ( str , len ) {"}
{"text":"To store the first and the last occurrence of all the characters","code":"var first = new Array ( MAX ) ; var last = new Array ( MAX ) ;"}
{"text":"Set the first and the last occurrence of all the characters to - 1","code":"for ( var i = 0 ; i < MAX ; i ++ ) { first [ i ] = - 1 ; last [ i ] = - 1 ; }"}
{"text":"Update the occurrences of the characters","code":"for ( var i = 0 ; i < len ; i ++ ) { var index = str [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ;"}
{"text":"Only set the first occurrence if it hasn 't already been set","code":"if ( first [ index ] === - 1 ) first [ index ] = i ; last [ index ] = i ; }"}
{"text":"To store the result","code":"var ans = - 1 , maxVal = - 1 ;"}
{"text":"For every alphabet","code":"for ( var i = 0 ; i < MAX ; i ++ ) {"}
{"text":"If current alphabet doesn 't appear  in the given String","code":"if ( first [ i ] === - 1 ) continue ;"}
{"text":"If the current character has the highest value so far","code":"if ( last [ i ] - first [ i ] > maxVal ) { maxVal = last [ i ] - first [ i ] ; ans = i ; } } return String . fromCharCode ( ans + \" \" . charCodeAt ( 0 ) ) ; }"}
{"text":"Driver code","code":"var str = \" \" ; var len = str . length ; document . write ( maxAlpha ( str , len ) ) ;"}
{"text":"Function to perform queries to find number of distinct elements from a given index till last index in an array","code":"function find_distinct ( a , n , q , queries ) { let MAX = 100001 ; let check = new Array ( MAX ) . fill ( 0 ) ; let idx = new Array ( MAX ) . fill ( 0 ) ; let cnt = 1 ; let i = n - 1 ; while ( i >= 0 ) {"}
{"text":"Check if current element already visited or not","code":"if ( check [ a [ i ] ] == 0 ) {"}
{"text":"If not visited store current counter and increment it and mark check as 1","code":"idx [ i ] = cnt ; check [ a [ i ] ] = 1 ; cnt ++ ; } else {"}
{"text":"Otherwise if visited simply store current counter","code":"idx [ i ] = cnt - 1 ; } i -- ; }"}
{"text":"Perform queries","code":"for ( let i = 0 ; i < q ; i ++ ) { let m = queries [ i ] ; document . write ( idx [ m ] + \" \" ) ; } }"}
{"text":"Driver code","code":"let a = [ 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 ] ; let n = a . length ; let queries = [ 0 , 3 , 5 , 7 ] ; let q = queries . length ; find_distinct ( a , n , q , queries ) ;"}
{"text":"Javascript implementation of the approach","code":"const MAX = 24 ;"}
{"text":"Function to return the count of operations required","code":"function countOp ( x ) {"}
{"text":"To store the powers of 2","code":"let arr = new Array ( MAX ) ; arr [ 0 ] = 1 ; for ( let i = 1 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] * 2 ;"}
{"text":"Temporary variable to store x","code":"let temp = x ; let flag = true ;"}
{"text":"To store the index of smaller number larger than x","code":"let ans ;"}
{"text":"To store the count of operations","code":"let operations = 0 ; let flag2 = false ; for ( let i = 0 ; i < MAX ; i ++ ) { if ( arr [ i ] - 1 == x ) flag2 = true ;"}
{"text":"Stores the index of number in the form of 2 ^ n - 1","code":"if ( arr [ i ] > x ) { ans = i ; break ; } }"}
{"text":"If x is already in the form 2 ^ n - 1 then no operation is required","code":"if ( flag2 ) return 0 ; while ( flag ) {"}
{"text":"If number is less than x increase the index","code":"if ( arr [ ans ] < x ) ans ++ ; operations ++ ;"}
{"text":"Calculate all the values ( x xor 2 ^ n - 1 ) for all possible n","code":"for ( let i = 0 ; i < MAX ; i ++ ) { let take = x ^ ( arr [ i ] - 1 ) ; if ( take <= arr [ ans ] - 1 ) {"}
{"text":"Only take value which is closer to the number","code":"if ( take > temp ) temp = take ; } }"}
{"text":"If number is in the form of 2 ^ n - 1 then break","code":"if ( temp == arr [ ans ] - 1 ) { flag = false ; break ; } temp ++ ; operations ++ ; x = temp ; if ( x == arr [ ans ] - 1 ) flag = false ; }"}
{"text":"Return the count of operations required to obtain the number","code":"return operations ; }"}
{"text":"Driver code","code":"let x = 39 ; document . write ( countOp ( x ) ) ;"}
{"text":"Function to return the minimum operations required","code":"function minOperations ( arr , n ) { let maxi , result = 0 ;"}
{"text":"Count the frequency of each element","code":"let freq = new Array ( 1000001 ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { let x = arr [ i ] ; freq [ x ] ++ ; }"}
{"text":"Maximum element from the array","code":"maxi = Math . max ( ... arr ) ; for ( let i = 1 ; i <= maxi ; i ++ ) { if ( freq [ i ] != 0 ) {"}
{"text":"Find all the multiples of i","code":"for ( let j = i * 2 ; j <= maxi ; j = j + i ) {"}
{"text":"Delete the multiples","code":"freq [ j ] = 0 ; }"}
{"text":"Increment the operations","code":"result ++ ; } } return result ; }"}
{"text":"Driver code","code":"let arr = [ 2 , 4 , 2 , 4 , 4 , 4 ] ; let n = arr . length ; document . write ( minOperations ( arr , n ) ) ;"}
{"text":"Function to return minimum GCD among all subarrays","code":"function __gcd ( a , b ) { if ( a == 0 ) return b ; return __gcd ( b % a , a ) ; } function minGCD ( arr , n ) { var minGCD = 0 ;"}
{"text":"Minimum GCD among all sub - arrays will be the GCD of all the elements of the array","code":"for ( i = 0 ; i < n ; i ++ ) minGCD = __gcd ( minGCD , arr [ i ] ) ; return minGCD ; }"}
{"text":"Function to return minimum LCM among all subarrays","code":"function minLCM ( arr , n ) { var minLCM = arr [ 0 ] ;"}
{"text":"Minimum LCM among all sub - arrays will be the minimum element from the array","code":"for ( i = 1 ; i < n ; i ++ ) minLCM = Math . min ( minLCM , arr [ i ] ) ; return minLCM ; }"}
{"text":"Driver code","code":"var arr = [ 2 , 66 , 14 , 521 ] ; var n = arr . length ; document . write ( \" \" + minLCM ( arr , n ) + \" \" + minGCD ( arr , n ) ) ;"}
{"text":"Function that returns the modified lexicographically smallest String after performing minimum number of given operations","code":"function formStringMinOperations ( s ) {"}
{"text":"Stores the initial frequencies of characters 0 s , 1 s and 2 s","code":"var count = new Array ( 3 ) . fill ( 0 ) ; for ( const c of s ) { count += 1 ; }"}
{"text":"Stores number of processed characters upto that point of each type","code":"var processed = new Array ( 3 ) . fill ( 0 ) ;"}
{"text":"Required number of characters of each type","code":"var reqd = parseInt ( s . length \/ 3 ) ; for ( var i = 0 ; i < s . length ; i ++ ) {"}
{"text":"If the current type has already reqd number of characters , no need to perform any operation","code":"if ( count [ s [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ] === reqd ) { continue ; }"}
{"text":"Process all 3 cases","code":"if ( s [ i ] === \" \" && count [ 0 ] > reqd && processed [ 0 ] >= reqd ) {"}
{"text":"Check for 1 first","code":"if ( count [ 1 ] < reqd ) { s [ i ] = \" \" ; count [ 1 ] ++ ; count [ 0 ] -- ; }"}
{"text":"Else 2","code":"else if ( count [ 2 ] < reqd ) { s [ i ] = \" \" ; count [ 2 ] ++ ; count [ 0 ] -- ; } }"}
{"text":"Here we need to check processed [ 1 ] only for 2 since 0 is less than 1 and we can replace it anytime","code":"if ( s [ i ] === \" \" && count [ 1 ] > reqd ) { if ( count [ 0 ] < reqd ) { s [ i ] = \" \" ; count [ 0 ] ++ ; count [ 1 ] -- ; } else if ( count [ 2 ] < reqd && processed [ 1 ] >= reqd ) { s [ i ] = \" \" ; count [ 2 ] ++ ; count [ 1 ] -- ; } }"}
{"text":"Here we can replace 2 with 0 and 1 anytime","code":"if ( s [ i ] === \" \" && count [ 2 ] > reqd ) { if ( count [ 0 ] < reqd ) { s [ i ] = \" \" ; count [ 0 ] ++ ; count [ 2 ] -- ; } else if ( count [ 1 ] < reqd ) { s [ i ] = \" \" ; count [ 1 ] ++ ; count [ 2 ] -- ; } }"}
{"text":"keep count of processed characters of each type","code":"processed [ s [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ] ++ ; } return s . join ( \" \" ) ; }"}
{"text":"Driver Code","code":"var s = \" \" ; document . write ( formStringMinOperations ( s . split ( \" \" ) ) ) ;"}
{"text":"Function to find minimum swaps","code":"function findMinimumAdjacentSwaps ( arr , N ) {"}
{"text":"visited array to check if value is seen already","code":"let visited = Array ( N + 1 ) . fill ( false ) ; let minimumSwaps = 0 ; for ( let i = 0 ; i < 2 * N ; i ++ ) {"}
{"text":"If the arr [ i ] is seen first time","code":"if ( visited [ arr [ i ] ] == false ) { visited [ arr [ i ] ] = true ;"}
{"text":"stores the number of swaps required to find the correct position of current element 's partner","code":"let count = 0 ; for ( let j = i + 1 ; j < 2 * N ; j ++ ) {"}
{"text":"Increment count only if the current element has not been visited yet ( if is visited , means it has already been placed at its correct position )","code":"if ( visited [ arr [ j ] ] == false ) count ++ ;"}
{"text":"If current element 's partner is found","code":"else if ( arr [ i ] == arr [ j ] ) minimumSwaps += count ; } } } return minimumSwaps ; }"}
{"text":"driver code","code":"let arr = [ 1 , 2 , 3 , 3 , 1 , 2 ] ; let N = arr . length ; N = Math . floor ( N \/ 2 ) ; document . write ( findMinimumAdjacentSwaps ( arr , N ) ) ;"}
{"text":"function to check if a number can be permuted to form a palindrome number","code":"function possibility ( m , length , s ) {"}
{"text":"counts the occurrence of number which is odd","code":"var countodd = 0 ; for ( var i = 0 ; i < length ; i ++ ) {"}
{"text":"if occurrence is odd","code":"if ( m . get ( s . charCodeAt ( i ) - 48 ) & 1 ) countodd ++ ;"}
{"text":"if number exceeds 1","code":"if ( countodd > 1 ) return false ; } return true ; }"}
{"text":"function to print the largest palindromic number by permuting digits of a number","code":"function largestPalindrome ( s ) {"}
{"text":"string length","code":"var l = s . length ;"}
{"text":"map that marks the occurrence of a number","code":"var m = new Map ( ) ; for ( var i = 0 ; i < l ; i ++ ) { if ( m . has ( s . charCodeAt ( i ) - 48 ) ) m . set ( s . charCodeAt ( i ) - 48 , m . get ( s . charCodeAt ( i ) - 48 ) + 1 ) ; else m . set ( s . charCodeAt ( i ) - 48 , 1 ) ; }"}
{"text":"check the possibility of a palindromic number","code":"if ( possibility ( m , l , s ) == false ) { document . write ( \" \" ) ; return ; }"}
{"text":"string array that stores the largest permuted palindromic number","code":"var largest = new Array ( l ) ;"}
{"text":"pointer of front","code":"var front = 0 ;"}
{"text":"greedily start from 9 to 0 and place the greater number in front and odd in the middle","code":"for ( var i = 9 ; i >= 0 ; i -- ) {"}
{"text":"if the occurrence of number is odd","code":"if ( m . has ( i ) & 1 ) {"}
{"text":"place one odd occurring number in the middle","code":"largest [ Math . floor ( l \/ 2 ) ] = String . fromCharCode ( i + 48 ) ;"}
{"text":"decrease the count","code":"m . set ( i , m . get ( i ) - 1 ) ;"}
{"text":"place the rest of numbers greedily","code":"while ( m . get ( i ) > 0 ) { largest [ front ] = String . fromCharCode ( i + 48 ) ; largest [ l - front - 1 ] = String . fromCharCode ( i + 48 ) ; m . set ( i , m . get ( i ) - 2 ) ; front ++ ; } } else {"}
{"text":"if all numbers occur even times , then place greedily","code":"while ( m . get ( i ) > 0 ) {"}
{"text":"place greedily at front","code":"largest [ front ] = String . fromCharCode ( i + 48 ) ; largest [ l - front - 1 ] = String . fromCharCode ( i + 48 ) ;"}
{"text":"2 numbers are placed , so decrease the count","code":"m . set ( i , m . get ( i ) - 2 ) ;"}
{"text":"increase placing position","code":"front ++ ; } } }"}
{"text":"print the largest string thus formed","code":"for ( var i = 0 ; i < l ; i ++ ) document . write ( largest [ i ] ) ; }"}
{"text":"driver code","code":"var s = \" \" ; largestPalindrome ( s ) ;"}
{"text":"Function to calculate swaps required","code":"function swapCount ( s ) {"}
{"text":"Keep track of ' [ '","code":"let pos = [ ] ; for ( let i = 0 ; i < s . length ; ++ i ) if ( s [ i ] == ' ' ) pos . push ( i ) ;"}
{"text":"To count number of encountered ' [ '","code":"let count = 0 ;"}
{"text":"To track position of next ' [ ' in pos","code":"let p = 0 ;"}
{"text":"To store result","code":"let sum = 0 ; let S = s . split ( ' ' ) ; for ( let i = 0 ; i < s . length ; ++ i ) {"}
{"text":"Increment count and move p to next position","code":"if ( S [ i ] == ' ' ) { ++ count ; ++ p ; } else if ( S [ i ] == ' ' ) -- count ;"}
{"text":"We have encountered an unbalanced part of string","code":"if ( count < 0 ) {"}
{"text":"Increment sum by number of swaps required i . e . position of next ' [ ' - current position","code":"sum += pos [ p ] - i ; let temp = S [ i ] ; S [ i ] = S [ pos [ p ] ] ; S [ pos [ p ] ] = temp ; ++ p ;"}
{"text":"Reset count to 1","code":"count = 1 ; } } return sum ; }"}
{"text":"Driver Code","code":"let s = \" \" ; document . write ( swapCount ( s ) + \" \" ) ; s = \" \" ; document . write ( swapCount ( s ) ) ;"}
{"text":"method returns minimum cost to break board into m * n squares","code":"function minimumCostOfBreaking ( X , Y , m , n ) { let res = 0 ;"}
{"text":"sort the horizontal cost in reverse order","code":"X . sort ( ) ; X . reverse ( ) ;"}
{"text":"sort the vertical cost in reverse order","code":"Y . sort ( ) ; Y . reverse ( ) ;"}
{"text":"initialize current width as 1","code":"let hzntl = 1 , vert = 1 ;"}
{"text":"loop until one or both cost array are processed","code":"let i = 0 , j = 0 ; while ( i < m && j < n ) { if ( X [ i ] > Y [ j ] ) { res += X [ i ] * vert ;"}
{"text":"increase current horizontal part count by 1","code":"hzntl ++ ; i ++ ; } else { res += Y [ j ] * hzntl ;"}
{"text":"increase current vertical part count by 1","code":"vert ++ ; j ++ ; } }"}
{"text":"loop for horizontal array , if remains","code":"let total = 0 ; while ( i < m ) total += X [ i ++ ] ; res += total * vert ;"}
{"text":"loop for vertical array , if remains","code":"total = 0 ; while ( j < n ) total += Y [ j ++ ] ; res += total * hzntl ; return res ; }"}
{"text":"Driver Code","code":"let m = 6 , n = 4 ; let X = [ 2 , 1 , 3 , 1 , 4 ] ; let Y = [ 4 , 1 , 2 ] ; document . write ( minimumCostOfBreaking ( X , Y , m - 1 , n - 1 ) ) ;"}
{"text":"Function to find the minimum of the three numbers","code":"function getMin ( x , y , z ) { return Math . min ( Math . min ( x , y ) , z ) ; }"}
{"text":"Function to find the minimum number operations required to convert string str1 to str2 using the operations","code":"function editDistance ( str1 , str2 , m , n ) {"}
{"text":"Stores the results of subproblems","code":"let dp = new Array ( m + 1 ) . fill ( new Array ( n + 1 ) ) ;"}
{"text":"Fill dp [ ] [ ] in bottom up manner","code":"for ( let i = 0 ; i <= m ; i ++ ) { for ( let j = 0 ; j <= n ; j ++ ) {"}
{"text":"If str1 is empty , then insert all characters of string str2","code":"if ( i == 0 )"}
{"text":"Minimum operations is j","code":"dp [ i ] [ j ] = j ;"}
{"text":"If str2 is empty , then remove all characters of string str2","code":"else if ( j == 0 )"}
{"text":"Minimum operations is i","code":"dp [ i ] [ j ] = i ;"}
{"text":"If the last characters are same , then ignore last character","code":"else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;"}
{"text":"If the last character is different , then find the minimum","code":"else {"}
{"text":"Perform one of the insert , remove and the replace","code":"dp [ i ] [ j ] = 1 + getMin ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } }"}
{"text":"Return the minimum number of steps required","code":"return dp [ m ] [ n ] ; }"}
{"text":"Function to find the minimum number of steps to modify the string such that first half and second half becomes the same","code":"function minimumSteps ( S , N ) {"}
{"text":"Stores the minimum number of operations required","code":"let ans = Number . MAX_VALUE ;"}
{"text":"Traverse the given string S","code":"for ( let i = 1 ; i < N ; i ++ ) { let S1 = S . substring ( 0 , i ) ; let S2 = S . substring ( i ) ;"}
{"text":"Find the minimum operations","code":"let count = editDistance ( S1 , S2 , S1 . length , S2 . length ) ;"}
{"text":"Update the ans","code":"ans = Math . min ( ans , count ) ; }"}
{"text":"Print the result","code":"document . write ( ans - 1 ) ; }"}
{"text":"Driver Code","code":"let S = \" \" ; let N = S . length ; minimumSteps ( S , N ) ;"}
{"text":"Function to find the minimum number of operations to reduce N to 2 by dividing N by 5 or decrementing by 3","code":"function minimumOperations ( N ) {"}
{"text":"Initialize the dp array","code":"let dp = new Array ( N + 1 ) ; let i ;"}
{"text":"Initialize the array dp [ ]","code":"for ( i = 0 ; i <= N ; i ++ ) { dp [ i ] = 1e9 ; }"}
{"text":"For N = 2 number of operations needed is zero","code":"dp [ 2 ] = 0 ;"}
{"text":"Iterating over the range [ 1 , N ]","code":"for ( i = 2 ; i <= N ; i ++ ) {"}
{"text":"If it 's not possible to  create current N","code":"if ( dp [ i ] == 1e9 ) continue ;"}
{"text":"Multiply with 5","code":"if ( i * 5 <= N ) { dp [ i * 5 ] = Math . min ( dp [ i * 5 ] , dp [ i ] + 1 ) ; }"}
{"text":"Adding the value 3","code":"if ( i + 3 <= N ) { dp [ i + 3 ] = Math . min ( dp [ i + 3 ] , dp [ i ] + 1 ) ; } }"}
{"text":"Checking if not possible to make the number as 2","code":"if ( dp [ N ] == 1e9 ) return - 1 ;"}
{"text":"Return the minimum number of operations","code":"return dp [ N ] ; }"}
{"text":"Driver Code","code":"let N = 25 ; document . write ( minimumOperations ( N ) ) ;"}
{"text":"Function to find the maximum profit with transaction fee","code":"function MaxProfit ( arr , n , transactionFee ) { let buy = - arr [ 0 ] ; let sell = 0 ;"}
{"text":"Traversing the stocks for each day","code":"for ( let i = 1 ; i < n ; i ++ ) { let temp = buy ;"}
{"text":"Update buy and sell","code":"buy = Math . max ( buy , sell - arr [ i ] ) ; sell = Math . max ( sell , temp + arr [ i ] - transactionFee ) ; }"}
{"text":"Return the maximum profit","code":"return Math . max ( sell , buy ) ; }"}
{"text":"Given Input","code":"let arr = [ 6 , 1 , 7 , 2 , 8 , 4 ] ; let n = arr . length ; let transactionFee = 2 ;"}
{"text":"Function Call","code":"document . write ( MaxProfit ( arr , n , transactionFee ) ) ;"}
{"text":"Stores the maximum path sum from the cell ( 1 , 1 ) to ( N , M )","code":"var start = Array . from ( Array ( 3 ) , ( ) => Array ( 3 ) ) ;"}
{"text":"Stores the maximum path sum from the cell ( j , j ) to ( N , M )","code":"var ending = Array . from ( Array ( 3 ) , ( ) => Array ( 3 ) ) ;"}
{"text":"Function to find the maximum path sum from the cell ( 1 , 1 ) to ( N , M )","code":"function calculateStart ( n , m ) {"}
{"text":"Traverse the first row","code":"for ( var i = 1 ; i < m ; ++ i ) { start [ 0 ] [ i ] += start [ 0 ] [ i - 1 ] ; }"}
{"text":"Traverse the first column","code":"for ( var i = 1 ; i < n ; ++ i ) { start [ i ] [ 0 ] += start [ i - 1 ] [ 0 ] ; }"}
{"text":"Traverse the matrix","code":"for ( var i = 1 ; i < n ; ++ i ) { for ( var j = 1 ; j < m ; ++ j ) {"}
{"text":"Update the value of start [ i ] [ j ]","code":"start [ i ] [ j ] += Math . max ( start [ i - 1 ] [ j ] , start [ i ] [ j - 1 ] ) ; } } }"}
{"text":"Function to find the maximum path sum from the cell ( j , j ) to ( N , M )","code":"function calculateEnd ( n , m ) {"}
{"text":"Traverse the last row","code":"for ( var i = n - 2 ; i >= 0 ; -- i ) { ending [ i ] [ m - 1 ] += ending [ i + 1 ] [ m - 1 ] ; }"}
{"text":"Traverse the last column","code":"for ( var i = m - 2 ; i >= 0 ; -- i ) { ending [ n - 1 ] [ i ] += ending [ n - 1 ] [ i + 1 ] ; }"}
{"text":"Traverse the matrix","code":"for ( var i = n - 2 ; i >= 0 ; -- i ) { for ( var j = m - 2 ; j >= 0 ; -- j ) {"}
{"text":"Update the value of ending [ i ] [ j ]","code":"ending [ i ] [ j ] += Math . max ( ending [ i + 1 ] [ j ] , ending [ i ] [ j + 1 ] ) ; } } }"}
{"text":"Function to find the maximum path sum from the top - left to the bottom right cell such that path contains one of the cells in the array coordinates [ ] [ ]","code":"function maximumPathSum ( mat , n , m , q , coordinates ) {"}
{"text":"Initialize the start and the end matrices","code":"for ( var i = 0 ; i < n ; ++ i ) { for ( var j = 0 ; j < m ; ++ j ) { start [ i ] [ j ] = mat [ i ] [ j ] ; ending [ i ] [ j ] = mat [ i ] [ j ] ; } }"}
{"text":"Calculate the start matrix","code":"calculateStart ( n , m ) ;"}
{"text":"Calculate the end matrix","code":"calculateEnd ( n , m ) ;"}
{"text":"Stores the maximum path sum","code":"var ans = 0 ;"}
{"text":"Traverse the coordinates","code":"for ( var i = 0 ; i < q ; ++ i ) { var X = coordinates [ i ] [ 0 ] - 1 ; var Y = coordinates [ i ] [ 1 ] - 1 ;"}
{"text":"Update the value of ans","code":"ans = Math . max ( ans , start [ X ] [ Y ] + ending [ X ] [ Y ] - mat [ X ] [ Y ] ) ; }"}
{"text":"Print the resultant maximum sum path value","code":"document . write ( ans ) ; }"}
{"text":"Drive Code","code":"var mat = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ; var N = 3 ; var M = 3 ; var Q = 2 ; var coordinates = [ [ 1 , 2 ] , [ 2 , 2 ] ] ; maximumPathSum ( mat , N , M , Q , coordinates ) ;"}
{"text":"Function to find the length of the longest subset of an array of strings with at most A 0 s and B 1 s","code":"function MaxSubsetlength ( arr , A , B ) {"}
{"text":"Initialize a 2D array with its entries as 0","code":"var dp = Array . from ( Array ( A + 1 ) , ( ) => Array ( B + 1 ) . fill ( 0 ) ) ;"}
{"text":"Traverse the given array","code":"arr . forEach ( str => {"}
{"text":"Store the count of 0 s and 1 s in the current string","code":"var zeros = [ ... str ] . filter ( x => x == ' ' ) . length ; var ones = [ ... str ] . filter ( x => x == ' ' ) . length ;"}
{"text":"Iterate in the range [ A , zeros ]","code":"for ( var i = A ; i >= zeros ; i -- )"}
{"text":"Iterate in the range [ B , ones ]","code":"for ( var j = B ; j >= ones ; j -- )"}
{"text":"Update the value of dp [ i ] [ j ]","code":"dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - zeros ] [ j - ones ] + 1 ) ; } ) ;"}
{"text":"Print the result","code":"return dp [ A ] [ B ] ; }"}
{"text":"Driver Code","code":"var arr = [ \" \" , \" \" , \" \" , \" \" , \" \" ] ; var A = 5 , B = 3 ; document . write ( MaxSubsetlength ( arr , A , B ) ) ;"}
{"text":"Function to count ways to select N distinct pairs of candies with different colours","code":"function numOfWays ( a , n , i , blue ) {"}
{"text":"If n pairs are selected","code":"if ( i == n ) return 1 ;"}
{"text":"Stores count of ways to select the i - th pair","code":"let count = 0 ;"}
{"text":"Iterate over the range [ 0 , n ]","code":"for ( let j = 0 ; j < n ; j ++ ) {"}
{"text":"If pair ( i , j ) is not included","code":"if ( a [ i ] [ j ] == 1 && ! blue . has ( j ) ) { blue . add ( j ) ; count += numOfWays ( a , n , i + 1 , blue ) ; blue . delete ( j ) ; } } return count ; }"}
{"text":"Driver Code","code":"let n = 3 ; let mat = [ [ 0 , 1 , 1 ] , [ 1 , 0 , 1 ] , [ 1 , 1 , 1 ] ] ; let mpp = new Set ( ) ; document . write ( numOfWays ( mat , n , 0 , mpp ) ) ;"}
{"text":"Function to find the minimum cost to reach the end of an array","code":"function minCost ( arr , n ) {"}
{"text":"Base Case : When N < 3","code":"if ( n < 3 ) { document . write ( arr [ 0 ] ) ; return ; }"}
{"text":"Store the results in table","code":"let dp = [ ] ;"}
{"text":"Initialize base cases","code":"dp [ 0 ] = arr [ 0 ] ; dp [ 1 ] = dp [ 0 ] + arr [ 1 ] + arr [ 2 ] ;"}
{"text":"Iterate over the range [ 2 , N - 2 ] to construct the dp array","code":"for ( let i = 2 ; i < n - 1 ; i ++ ) dp [ i ] = Math . min ( dp [ i - 2 ] + arr [ i ] , dp [ i - 1 ] + arr [ i ] + arr [ i + 1 ] ) ;"}
{"text":"Handle case for the last index , i . e . N - 1","code":"dp [ n - 1 ] = Math . min ( dp [ n - 2 ] , dp [ n - 3 ] + arr [ n - 1 ] ) ;"}
{"text":"Prlet the answer","code":"document . write ( dp [ n - 1 ] ) ; }"}
{"text":"Driver Code","code":"let arr = [ 9 , 4 , 6 , 8 , 5 ] ; let N = arr . length ; minCost ( arr , N ) ;"}
{"text":"javascript program to implement the above approach","code":"M = 1000000007 ;"}
{"text":"Function to find the value of power ( X , Y ) in O ( log Y )","code":"function power ( X , Y ) {"}
{"text":"Stores power ( X , Y )","code":"var res = 1 ;"}
{"text":"Update X","code":"X = X % M ;"}
{"text":"Base Case","code":"if ( X == 0 ) return 0 ;"}
{"text":"Calculate power ( X , Y )","code":"while ( Y > 0 ) {"}
{"text":"If Y is an odd number","code":"if ( ( Y & 1 ) != 0 ) {"}
{"text":"Update res","code":"res = ( res * X ) % M ; }"}
{"text":"Update Y","code":"Y = Y >> 1 ;"}
{"text":"Update X","code":"X = ( X * X ) % M ; } return res ; }"}
{"text":"Function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )","code":"function findValue ( n ) {"}
{"text":"Stores binary representation of n","code":"var X = 0 ;"}
{"text":"Stores power of 10","code":"var pow_10 = 1 ;"}
{"text":"Calculate the binary representation of n","code":"while ( n != 0 ) {"}
{"text":"If n is an odd number","code":"if ( ( n & 1 ) != 0 ) {"}
{"text":"Update X","code":"X += pow_10 ; }"}
{"text":"Update pow_10","code":"pow_10 *= 10 ;"}
{"text":"Update n","code":"n \/= 2 ; }"}
{"text":"Double the value of X","code":"X = ( X * 2 ) % M ;"}
{"text":"Stores the value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )","code":"var res = power ( 2 , X ) ; return res ; }"}
{"text":"Driver code","code":"var n = 2 ; document . write ( findValue ( n ) ) ;"}
{"text":"Function to find the number of ways to get the sum N with throw of dice","code":"function findWays ( N ) {"}
{"text":"Base Case","code":"if ( N == 0 ) { return 1 ; }"}
{"text":"Stores the count of total number of ways to get sum N","code":"var cnt = 0 ;"}
{"text":"Recur for all 6 states","code":"for ( var i = 1 ; i <= 6 ; i ++ ) { if ( N - i >= 0 ) { cnt = cnt + findWays ( N - i ) ; } }"}
{"text":"Return answer","code":"return cnt ; }"}
{"text":"Driver Code","code":"var N = 4 ;"}
{"text":"Function call","code":"document . write ( findWays ( N ) ) ;"}
{"text":"Utility function to check array can be partition to 3 subsequences of equal sum or not","code":"function checkEqualSumUtil ( arr , N , sm1 , sm2 , sm3 , j ) {"}
{"text":"Base Case","code":"if ( j == N ) { if ( sm1 == sm2 && sm2 == sm3 ) return 1 ; else return 0 ; } else {"}
{"text":"When element at index j is added to sm1","code":"let l = checkEqualSumUtil ( arr , N , sm1 + arr [ j ] , sm2 , sm3 , j + 1 ) ;"}
{"text":"When element at index j is added to sm2","code":"let m = checkEqualSumUtil ( arr , N , sm1 , sm2 + arr [ j ] , sm3 , j + 1 ) ;"}
{"text":"When element at index j is added to sm3","code":"let r = checkEqualSumUtil ( arr , N , sm1 , sm2 , sm3 + arr [ j ] , j + 1 ) ;"}
{"text":"Return maximum value among all above 3 recursive call","code":"return Math . max ( Math . max ( l , m ) , r ) ; } }"}
{"text":"Function to check array can be partition to 3 subsequences of equal sum or not","code":"function checkEqualSum ( arr , N ) {"}
{"text":"Initialise 3 sums to 0","code":"let sum1 , sum2 , sum3 ; sum1 = sum2 = sum3 = 0 ;"}
{"text":"Function Call","code":"if ( checkEqualSumUtil ( arr , N , sum1 , sum2 , sum3 , 0 ) == 1 ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } }"}
{"text":"Given array arr [ ]","code":"let arr = [ 17 , 34 , 59 , 23 , 17 , 67 , 57 , 2 , 18 , 59 , 1 ] ; let N = arr . length ;"}
{"text":"Function Call","code":"checkEqualSum ( arr , N ) ;"}
{"text":"JavaScript program for the above approach","code":"var dp = new Map ( ) ;"}
{"text":"Function to check array can be partition into sum of 3 equal","code":"function checkEqualSumUtil ( arr , N , sm1 , sm2 , sm3 , j ) { var s = ( sm1 . toString ( ) ) + \" \" + ( sm2 . toString ( ) ) + ( j . toString ( ) ) ;"}
{"text":"Base Case","code":"if ( j == N ) { if ( sm1 == sm2 && sm2 == sm3 ) return 1 ; else return 0 ; }"}
{"text":"If value at particular index is not - 1 then return value at that index which ensure no more further calls","code":"if ( dp . has ( s ) ) return dp [ s ] ; else {"}
{"text":"When element at index j is added to sm1","code":"var l = checkEqualSumUtil ( arr , N , sm1 + arr [ j ] , sm2 , sm3 , j + 1 ) ;"}
{"text":"When element at index j is added to sm2","code":"var m = checkEqualSumUtil ( arr , N , sm1 , sm2 + arr [ j ] , sm3 , j + 1 ) ;"}
{"text":"When element at index j is added to sm3","code":"var r = checkEqualSumUtil ( arr , N , sm1 , sm2 , sm3 + arr [ j ] , j + 1 ) ;"}
{"text":"Update the current state and return that value","code":"return dp [ s ] = Math . max ( Math . max ( l , m ) , r ) ; } }"}
{"text":"Function to check array can be partition to 3 subsequences of equal sum or not","code":"function checkEqualSum ( arr , N ) {"}
{"text":"Initialise 3 sums to 0","code":"var sum1 , sum2 , sum3 ; sum1 = sum2 = sum3 = 0 ;"}
{"text":"Function Call","code":"if ( checkEqualSumUtil ( arr , N , sum1 , sum2 , sum3 , 0 ) == 1 ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } }"}
{"text":"Given array arr [ ]","code":"var arr = [ 17 , 34 , 59 , 23 , 17 , 67 , 57 , 2 , 18 , 59 , 1 ] ; var N = arr . length ;"}
{"text":"Function Call","code":"checkEqualSum ( arr , N ) ;"}
{"text":"Precompute the index of next different element in the array for every array element","code":"function precompute ( nextpos , arr , N ) {"}
{"text":"Default value","code":"nextpos [ N - 1 ] = N ; for ( var i = N - 2 ; i >= 0 ; i -- ) {"}
{"text":"Compute nextpos [ i ] using nextpos [ i + 1 ]","code":"if ( arr [ i ] == arr [ i + 1 ] ) nextpos [ i ] = nextpos [ i + 1 ] ; else nextpos [ i ] = i + 1 ; } }"}
{"text":"Function to return the smallest index","code":"function findIndex ( query , arr , N , Q ) {"}
{"text":"nextpos [ i ] will store the next position p where arr [ p ] != arr [ i ]","code":"var nextpos = Array ( N ) ; precompute ( nextpos , arr , N ) ; for ( var i = 0 ; i < Q ; i ++ ) { var l , r , x ; l = query [ i ] [ 0 ] ; r = query [ i ] [ 1 ] ; x = query [ i ] [ 2 ] ; var ans = - 1 ;"}
{"text":"If X is not present at l","code":"if ( arr [ l ] != x ) ans = l ;"}
{"text":"Otherwise","code":"else {"}
{"text":"Find the index which stores a value different from X","code":"var d = nextpos [ l ] ;"}
{"text":"If that index is within the range","code":"if ( d <= r ) ans = d ; } document . write ( ans + \" \" ) ; } }"}
{"text":"Driver Code","code":"var N , Q ; N = 6 ; Q = 3 ; var arr = [ 1 , 2 , 1 , 1 , 3 , 5 ] ; var query = [ [ 0 , 3 , 1 ] , [ 1 , 5 , 2 ] , [ 2 , 3 , 1 ] ] ; findIndex ( query , arr , N , Q ) ;"}
{"text":"JavaScript program for the above approach","code":"let mod = 10000000007 ;"}
{"text":"Function to count number of ways to convert string S to string T by performing K cyclic shifts","code":"function countWays ( s , t , k ) {"}
{"text":"Calculate length of string","code":"let n = s . length ;"}
{"text":"' a ' is no of good cyclic shifts ' b ' is no of bad cyclic shifts","code":"let a = 0 , b = 0 ;"}
{"text":"Iterate in the string","code":"for ( let i = 0 ; i < n ; i ++ ) { let p = s . substr ( i , n - i ) + s . substr ( 0 , i ) ;"}
{"text":"Precompute the number of good and bad cyclic shifts","code":"if ( p == t ) a ++ ; else b ++ ; }"}
{"text":"dp2 [ i ] to store the no of ways to get to a bad shift in i moves","code":"let dp1 = Array . from ( { length : k + 1 } , ( _ , i ) => 0 ) ; let dp2 = Array . from ( { length : k + 1 } , ( _ , i ) => 0 ) ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; }"}
{"text":"Calculate good and bad shifts","code":"for ( let i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; }"}
{"text":"Return the required number of ways","code":"return dp1 [ k ] ; }"}
{"text":"Given Strings","code":"let S = \" \" , T = \" \" ;"}
{"text":"Given K shifts required","code":"let K = 2 ;"}
{"text":"Function Call","code":"document . write ( countWays ( S , T , K ) ) ;"}
{"text":"Function to find minimum operations","code":"function minOperation ( k ) {"}
{"text":"dp is initialised to store the steps","code":"let dp = Array . from ( { length : k + 1 } , ( _ , i ) => 0 ) ; for ( let i = 1 ; i <= k ; i ++ ) { dp [ i ] = dp [ i - 1 ] + 1 ;"}
{"text":"For all even numbers","code":"if ( i % 2 == 0 ) { dp [ i ] = Math . min ( dp [ i ] , dp [ i \/ 2 ] + 1 ) ; } } return dp [ k ] ; }"}
{"text":"Driver Code","code":"let K = 12 ; document . write ( minOperation ( K ) ) ;"}
{"text":"Function to find the maximum subset sum","code":"function maxSum ( p0 , p1 , a , pos , n ) { if ( pos == n ) { if ( p0 == p1 ) return p0 ; else return 0 ; }"}
{"text":"Ignore the current element","code":"var ans = maxSum ( p0 , p1 , a , pos + 1 , n ) ;"}
{"text":"Including element in partition 1","code":"ans = Math . max ( ans , maxSum ( p0 + a [ pos ] , p1 , a , pos + 1 , n ) ) ;"}
{"text":"Including element in partition 2","code":"ans = Math . max ( ans , maxSum ( p0 , p1 + a [ pos ] , a , pos + 1 , n ) ) ; return ans ; }"}
{"text":"Size of the array","code":"var n = 4 ; var a = [ 1 , 2 , 3 , 6 ] ; document . write ( maxSum ( 0 , 0 , a , 0 , n ) ) ;"}
{"text":"Function to find the maximum subset sum","code":"function maxSum ( a , n ) {"}
{"text":"sum of all elements","code":"var sum = 0 ; for ( var i = 0 ; i < n ; i ++ ) sum += a [ i ] ; var limit = 2 * sum + 1 ;"}
{"text":"bottom up lookup table ;","code":"var dp = Array . from ( Array ( n + 1 ) , ( ) => Array ( limit ) ) ;"}
{"text":"initialising dp table with - 1000000000 where , - 1000000000 means no solution","code":"for ( var i = 0 ; i < n + 1 ; i ++ ) { for ( var j = 0 ; j < limit ; j ++ ) dp [ i ] [ j ] = - 1000000000 ; }"}
{"text":"Case when diff is 0","code":"dp [ 0 ] [ sum ] = 0 ; for ( var i = 1 ; i <= n ; i ++ ) { for ( var j = 0 ; j < limit ; j ++ ) {"}
{"text":"Putting ith element in g0","code":"if ( ( j - a [ i - 1 ] ) >= 0 && dp [ i - 1 ] [ j - a [ i - 1 ] ] != - 1000000000 ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - a [ i - 1 ] ] + a [ i - 1 ] ) ;"}
{"text":"Putting ith element in g1","code":"if ( ( j + a [ i - 1 ] ) < limit && dp [ i - 1 ] [ j + a [ i - 1 ] ] != - 1000000000 ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j + a [ i - 1 ] ] ) ;"}
{"text":"Ignoring ith element","code":"if ( dp [ i - 1 ] [ j ] != - 1000000000 ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ sum ] ; }"}
{"text":"Driver code","code":"var n = 4 ; var a = [ 1 , 2 , 3 , 6 ] ; document . write ( maxSum ( a , n ) ) ;"}
{"text":"Array to find the fibonacci sequence","code":"fib = Array ( 100005 ) . fill ( 0 ) ;"}
{"text":"Function to find the fibonacci sequence","code":"function computeFibonacci ( ) { fib [ 0 ] = 1 ; fib [ 1 ] = 1 ; for ( i = 2 ; i < 100005 ; i ++ ) { fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; } }"}
{"text":"Function to count all possible strings","code":"function countString ( str ) {"}
{"text":"Initialize ans = 1","code":"var ans = 1 ; var cnt = 1 ; for ( i = 1 ; i < str . length ; i ++ ) {"}
{"text":"If two consecutive char are same increase cnt","code":"if ( str . charAt ( i ) == str . charAt ( i - 1 ) ) { cnt ++ ; }"}
{"text":"Else multiply the fib [ cnt ] to ans and initialize ans to 1","code":"else { ans = ans * fib [ cnt ] ; cnt = 1 ; } }"}
{"text":"If str = abcdeeee , then for last \" eeee \" the count munst be updated","code":"ans = ans * fib [ cnt ] ;"}
{"text":"Return the total count","code":"return ans ; }"}
{"text":"Driver 's Code","code":"var str = \" \" ;"}
{"text":"Function to precompute all the fibonacci number","code":"computeFibonacci ( ) ;"}
{"text":"Function call to find the count","code":"document . write ( countString ( str ) ) ;"}
{"text":"Javascript program to find the first N terms of Golomb Sequence","code":"var MAX = 100001 ;"}
{"text":"Function to print the Golomb Sequence","code":"function printGolombSequence ( N ) {"}
{"text":"Initialise the array","code":"var arr = Array ( MAX ) ;"}
{"text":"Initialise the cnt to 0","code":"var cnt = 0 ;"}
{"text":"First and second element of Golomb Sequence is 0 , 1","code":"arr [ 0 ] = 0 ; arr [ 1 ] = 1 ;"}
{"text":"Map to store the count of current element in Golomb Sequence","code":"var M = new Map ( ) ;"}
{"text":"Store the count of 2","code":"M . set ( 2 , 2 ) ;"}
{"text":"Iterate over 2 to N","code":"for ( var i = 2 ; i <= N ; i ++ ) {"}
{"text":"If cnt is equals to 0 then we have new number for Golomb Sequence which is 1 + previous element","code":"if ( cnt == 0 ) { arr [ i ] = 1 + arr [ i - 1 ] ; cnt = M . get ( arr [ i ] ) ; cnt -- ; }"}
{"text":"Else the current element is the previous element in this Sequence","code":"else { arr [ i ] = arr [ i - 1 ] ; cnt -- ; }"}
{"text":"Map the current index to current value in arr [ ]","code":"M . set ( i , arr [ i ] ) ; }"}
{"text":"Print the Golomb Sequence","code":"for ( var i = 1 ; i <= N ; i ++ ) { document . write ( arr [ i ] + ' ' ) ; } }"}
{"text":"Driver Code","code":"var N = 11 ; printGolombSequence ( N ) ;"}
{"text":"Function to find the number the number of ways to reach Nth stair","code":"function number_of_ways ( n ) {"}
{"text":"Array including number of ways that includes 3","code":"let includes_3 = new Uint8Array ( n + 1 ) ;"}
{"text":"Array including number of ways that doesn 't includes 3","code":"let not_includes_3 = new Uint8Array ( n + 1 ) ;"}
{"text":"Initially to reach 3 stairs by taking 3 steps can be reached by 1 way","code":"includes_3 [ 3 ] = 1 ; not_includes_3 [ 1 ] = 1 ; not_includes_3 [ 2 ] = 2 ; not_includes_3 [ 3 ] = 3 ;"}
{"text":"Loop to find the number the number of ways to reach Nth stair","code":"for ( let i = 4 ; i <= n ; i ++ ) { includes_3 [ i ] = includes_3 [ i - 1 ] + includes_3 [ i - 2 ] + not_includes_3 [ i - 3 ] ; not_includes_3 [ i ] = not_includes_3 [ i - 1 ] + not_includes_3 [ i - 2 ] ; } return includes_3 [ n ] ; }"}
{"text":"Driver Code","code":"let n = 7 ; document . write ( number_of_ways ( n ) ) ;"}
{"text":"JavaScript implementation of the approach","code":"const MAX = 100000 ;"}
{"text":"Map to store the divisor count","code":"var divisors = new Array ( MAX ) . fill ( 0 ) ;"}
{"text":"Function to generate the divisors of all the array elements","code":"function generateDivisors ( n ) { for ( var i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) { divisors [ i ] ++ ; } else { divisors [ i ] ++ ; divisors [ n \/ i ] ++ ; } } } }"}
{"text":"Function to find the maximum number of multiples in an array before it","code":"function findMaxMultiples ( arr , n ) {"}
{"text":"To store the maximum divisor count","code":"var ans = 0 ; for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"Update ans if more number of divisors are found","code":"ans = Math . max ( divisors [ arr [ i ] ] , ans ) ;"}
{"text":"Generating all the divisors of the next element of the array","code":"generateDivisors ( arr [ i ] ) ; } return ans ; }"}
{"text":"Driver code","code":"var arr = [ 8 , 1 , 28 , 4 , 2 , 6 , 7 ] ; var n = arr . length ; document . write ( findMaxMultiples ( arr , n ) ) ;"}
{"text":"Javascript implementation of the approach","code":"var n = 3 ; var maxV = 20 ;"}
{"text":"3d array to store states of dp","code":"var dp = new Array ( n ) ; for ( var i = 0 ; i < n ; i ++ ) { dp [ i ] = new Array ( n ) ; for ( var j = 0 ; j < n ; j ++ ) { dp [ i ] [ j ] = new Array ( maxV ) ; } } var v = new Array ( n ) ;"}
{"text":"Array to determine whether a state has been solved before","code":"for ( var i = 0 ; i < n ; i ++ ) { v [ i ] = new Array ( n ) ; for ( var j = 0 ; j < n ; j ++ ) { v [ i ] [ j ] = new Array ( maxV ) ; } }"}
{"text":"Function to return the count of required paths","code":"function countWays ( i , j , x , arr ) {"}
{"text":"Base cases","code":"if ( i == n j == n ) return 0 ; x = ( x & arr [ i ] [ j ] ) ; if ( x == 0 ) return 0 ; if ( i == n - 1 && j == n - 1 ) return 1 ;"}
{"text":"If a state has been solved before it won 't be evaluated again","code":"if ( v [ i ] [ j ] [ x ] ) return dp [ i ] [ j ] [ x ] ; v [ i ] [ j ] [ x ] = 1 ;"}
{"text":"Recurrence relation","code":"dp [ i ] [ j ] [ x ] = countWays ( i + 1 , j , x , arr ) + countWays ( i , j + 1 , x , arr ) ; return dp [ i ] [ j ] [ x ] ; }"}
{"text":"Driver code","code":"var arr = [ [ 1 , 2 , 1 ] , [ 1 , 1 , 0 ] , [ 2 , 1 , 1 ] ] ; document . write ( countWays ( 0 , 0 , arr [ 0 ] [ 0 ] , arr ) ) ;"}
{"text":"JavaScript implementation of the approach","code":"var N = 3 ;"}
{"text":"Function to return the maximum sum","code":"function FindMaximumSum ( ind , kon , a , b , c , n , dp ) {"}
{"text":"Base case","code":"if ( ind == n ) return 0 ;"}
{"text":"Already visited","code":"if ( dp [ ind ] [ kon ] != - 1 ) return dp [ ind ] [ kon ] ; var ans = - 1000000005 ;"}
{"text":"If the element has been taken from first array in previous step","code":"if ( kon == 0 ) { ans = Math . max ( ans , b [ ind ] + FindMaximumSum ( ind + 1 , 1 , a , b , c , n , dp ) ) ; ans = Math . max ( ans , c [ ind ] + FindMaximumSum ( ind + 1 , 2 , a , b , c , n , dp ) ) ; }"}
{"text":"If the element has been taken from second array in previous step","code":"else if ( kon == 1 ) { ans = Math . max ( ans , a [ ind ] + FindMaximumSum ( ind + 1 , 0 , a , b , c , n , dp ) ) ; ans = Math . max ( ans , c [ ind ] + FindMaximumSum ( ind + 1 , 2 , a , b , c , n , dp ) ) ; }"}
{"text":"If the element has been taken from third array in previous step","code":"else if ( kon == 2 ) { ans = Math . max ( ans , a [ ind ] + FindMaximumSum ( ind + 1 , 1 , a , b , c , n , dp ) ) ; ans = Math . max ( ans , b [ ind ] + FindMaximumSum ( ind + 1 , 0 , a , b , c , n , dp ) ) ; } return dp [ ind ] [ kon ] = ans ; }"}
{"text":"Driver code","code":"var a = [ 6 , 8 , 2 , 7 , 4 , 2 , 7 ] ; var b = [ 7 , 8 , 5 , 8 , 6 , 3 , 5 ] ; var c = [ 8 , 3 , 2 , 6 , 8 , 4 , 1 ] ; var n = a . length ; var dp = Array . from ( Array ( n ) , ( ) => Array ( n ) . fill ( - 1 ) ) ;"}
{"text":"Pick element from first array","code":"var x = FindMaximumSum ( 0 , 0 , a , b , c , n , dp ) ;"}
{"text":"Pick element from second array","code":"var y = FindMaximumSum ( 0 , 1 , a , b , c , n , dp ) ;"}
{"text":"Pick element from third array","code":"var z = FindMaximumSum ( 0 , 2 , a , b , c , n , dp ) ;"}
{"text":"Print the maximum of them","code":"document . write ( Math . max ( x , Math . max ( y , z ) ) ) ;"}
{"text":"Javascript implementation of the approach","code":"let mod = 1000000007 ;"}
{"text":"Function to return no of ways to build a binary string of length N such that 0 s always occur in groups of size K","code":"function noOfBinaryStrings ( N , k ) { let dp = new Array ( 100002 ) ; for ( let i = 1 ; i <= k - 1 ; i ++ ) { dp [ i ] = 1 ; } dp [ k ] = 2 ; for ( let i = k + 1 ; i <= N ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - k ] ) % mod ; } return dp [ N ] ; }"}
{"text":"Driver Code","code":"let N = 4 ; let K = 2 ; document . write ( noOfBinaryStrings ( N , K ) ) ;"}
{"text":"Function to find number of ways to pair people in party","code":"function findWaysToPair ( p ) {"}
{"text":"To store count of number of ways .","code":"var dp = Array ( p + 1 ) ; dp [ 1 ] = 1 ; dp [ 2 ] = 2 ;"}
{"text":"Using the recurrence defined find count for different values of p .","code":"for ( var i = 3 ; i <= p ; i ++ ) { dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; } return dp [ p ] ; }"}
{"text":"Driver code","code":"var p = 3 ; document . write ( findWaysToPair ( p ) ) ;"}
{"text":"A simple recursive implementation for counting ways to reach a score using 1 and 2 with consecutive 2 allowed","code":"function CountWays ( n , flag ) {"}
{"text":"base cases","code":"if ( n == 0 ) { return 1 ; } if ( n == 1 ) { return 1 ; } if ( n == 2 ) { return 1 + 1 ; }"}
{"text":"For cases n > 2","code":"return CountWays ( n - 1 ) + CountWays ( n - 3 ) ; }"}
{"text":"Driver code","code":"let n = 5 ; document . write ( CountWays ( n , false ) ) ;"}
{"text":"code to find all the factors of the number excluding the number itself","code":"function factors ( n ) {"}
{"text":"vector to store the factors","code":"var v = [ ] ; v . push ( 1 ) ;"}
{"text":"note that this loop runs till sqrt ( n )","code":"for ( var i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) {"}
{"text":"if the value of i is a factor","code":"if ( n % i == 0 ) { v . push ( i ) ;"}
{"text":"condition to check the divisor is not the number itself","code":"if ( n \/ i != i ) { v . push ( n \/ i ) ; } } }"}
{"text":"return the vector","code":"return v ; }"}
{"text":"Function to check if the number is abundant or not","code":"function checkAbundant ( n ) { var v = [ ] ; var sum = 0 ;"}
{"text":"find the divisors using function","code":"v = factors ( n ) ;"}
{"text":"sum all the factors","code":"for ( var i = 0 ; i < v . length ; i ++ ) { sum += v [ i ] ; }"}
{"text":"check for abundant or not","code":"if ( sum > n ) return true ; else return false ; }"}
{"text":"Function to check if the number is semi - perfect or not","code":"function checkSemiPerfect ( n ) { var v = [ ] ;"}
{"text":"find the divisors","code":"v = factors ( n ) ;"}
{"text":"sorting the vector","code":"v . sort ( ) var r = v . length ;"}
{"text":"subset to check if no is semiperfect","code":"var subset = Array . from ( Array ( r + 1 ) , ( ) => Array ( n + 1 ) ) ;"}
{"text":"initialising 1 st column to true","code":"for ( var i = 0 ; i <= r ; i ++ ) subset [ i ] [ 0 ] = true ;"}
{"text":"initialing 1 st row except zero position to 0","code":"for ( var i = 1 ; i <= n ; i ++ ) subset [ 0 ] [ i ] = false ;"}
{"text":"loop to find whether the number is semiperfect","code":"for ( var i = 1 ; i <= r ; i ++ ) { for ( var j = 1 ; j <= n ; j ++ ) {"}
{"text":"calculation to check if the number can be made by summation of divisors","code":"if ( j < v [ i - 1 ] ) subset [ i ] [ j ] = subset [ i - 1 ] [ j ] ; else { subset [ i ] [ j ] = subset [ i - 1 ] [ j ] || subset [ i - 1 ] [ j - v [ i - 1 ] ] ; } } }"}
{"text":"if not possible to make the number by any combination of divisors","code":"if ( ( subset [ r ] [ n ] ) == 0 ) return false ; else return true ; }"}
{"text":"Function to check for weird or not","code":"function checkweird ( n ) { if ( checkAbundant ( n ) == true && checkSemiPerfect ( n ) == false ) return true ; else return false ; }"}
{"text":"Driver Code","code":"var n = 70 ; if ( checkweird ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Returns sum of maximum sum subarray created after concatenating a [ 0. . n - 1 ] k times .","code":"function maxSubArraySumRepeated ( a , n , k ) { let max_so_far = 0 ; let INT_MIN , max_ending_here = 0 ; for ( let i = 0 ; i < n * k ; i ++ ) {"}
{"text":"This is where it differs from Kadane 's algorithm. We use modular  arithmetic to find next element.","code":"max_ending_here = max_ending_here + a [ i % n ] ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; if ( max_ending_here < 0 ) max_ending_here = 0 ; } return max_so_far ; }"}
{"text":"Driver code","code":"let a = [ 10 , 20 , - 30 , - 1 ] ; let n = a . length ; let k = 3 ; document . write ( \" \" + maxSubArraySumRepeated ( a , n , k ) ) ;"}
{"text":"function to find the longest increasing odd even subsequence","code":"function longOddEvenIncSeq ( arr , n ) {"}
{"text":"lioes [ i ] stores longest increasing odd even subsequence ending at arr [ i ]","code":"let lioes = [ ] ;"}
{"text":"to store the length of longest increasing odd even subsequence","code":"let maxLen = 0 ;"}
{"text":"Initialize LIOES values for all indexes","code":"for ( let i = 0 ; i < n ; i ++ ) lioes [ i ] = 1 ;"}
{"text":"Compute optimized LIOES values in bottom up manner","code":"for ( let i = 1 ; i < n ; i ++ ) for ( let j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j ] ) % 2 != 0 && lioes [ i ] < lioes [ j ] + 1 ) lioes [ i ] = lioes [ j ] + 1 ;"}
{"text":"Pick maximum of all LIOES values","code":"for ( let i = 0 ; i < n ; i ++ ) if ( maxLen < lioes [ i ] ) maxLen = lioes [ i ] ;"}
{"text":"required maximum length","code":"return maxLen ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 12 , 2 , 22 , 5 , 30 , 31 , 14 , 17 , 11 ] ; let n = 10 ; document . write ( \" \" + \" \" + longOddEvenIncSeq ( arr , n ) ) ;"}
{"text":"Utility method to check whether a character is operator or not","code":"function isOperator ( op ) { return ( op == ' ' op == ' ' ) ; }"}
{"text":"method prints minimum and maximum value obtainable from an expression","code":"function printMinAndMaxValueOfExp ( exp ) { let num = [ ] ; let opr = [ ] ; let tmp = \" \" ;"}
{"text":"store operator and numbers in different vectors","code":"for ( let i = 0 ; i < exp . length ; i ++ ) { if ( isOperator ( exp [ i ] ) ) { opr . push ( exp [ i ] ) ; num . push ( parseInt ( tmp ) ) ; tmp = \" \" ; } else { tmp += exp [ i ] ; } }"}
{"text":"storing last number in vector","code":"num . push ( parseInt ( tmp ) ) ; let len = num . length ; let minVal = new Array ( len ) ; let maxVal = new Array ( len ) ;"}
{"text":"initializing minval and maxval 2D array","code":"for ( let i = 0 ; i < len ; i ++ ) { minVal [ i ] = new Array ( len ) ; maxVal [ i ] = new Array ( len ) ; for ( let j = 0 ; j < len ; j ++ ) { minVal [ i ] [ j ] = Number . MAX_VALUE ; maxVal [ i ] [ j ] = 0 ;"}
{"text":"initializing main diagonal by num values","code":"if ( i == j ) minVal [ i ] [ j ] = maxVal [ i ] [ j ] = num [ i ] ; } }"}
{"text":"looping similar to matrix chain multiplication and updating both 2D arrays","code":"for ( let L = 2 ; L <= len ; L ++ ) { for ( let i = 0 ; i < len - L + 1 ; i ++ ) { let j = i + L - 1 ; for ( let k = i ; k < j ; k ++ ) { let minTmp = 0 , maxTmp = 0 ;"}
{"text":"if current operator is ' + ' , updating tmp variable by addition","code":"if ( opr [ k ] == ' ' ) { minTmp = minVal [ i ] [ k ] + minVal [ k + 1 ] [ j ] ; maxTmp = maxVal [ i ] [ k ] + maxVal [ k + 1 ] [ j ] ; }"}
{"text":"if current operator is ' * ' , updating tmp variable by multiplication","code":"else if ( opr [ k ] == ' ' ) { minTmp = minVal [ i ] [ k ] * minVal [ k + 1 ] [ j ] ; maxTmp = maxVal [ i ] [ k ] * maxVal [ k + 1 ] [ j ] ; }"}
{"text":"updating array values by tmp variables","code":"if ( minTmp < minVal [ i ] [ j ] ) minVal [ i ] [ j ] = minTmp ; if ( maxTmp > maxVal [ i ] [ j ] ) maxVal [ i ] [ j ] = maxTmp ; } } }"}
{"text":"last element of first row will store the result","code":"document . write ( \" \" + minVal [ 0 ] [ len - 1 ] + \" \" + maxVal [ 0 ] [ len - 1 ] ) ; }"}
{"text":"Driver code to test above methods","code":"let expression = \" \" ; printMinAndMaxValueOfExp ( expression ) ;"}
{"text":"Matrix Ai has dimension p [ i - 1 ] x p [ i ] for i = 1. . n","code":"function MatrixChainOrder ( p , i , j ) { if ( i == j ) return 0 ; var min = Number . MAX_VALUE ;"}
{"text":"place parenthesis at different places between first and last matrix , recursively calculate count of multiplications for each parenthesis placement and return the minimum count","code":"var k = 0 ; for ( k = i ; k < j ; k ++ ) { var count = MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ; if ( count < min ) min = count ; }"}
{"text":"Return minimum count","code":"return min ; }"}
{"text":"Driver code","code":"var arr = [ 1 , 2 , 3 , 4 , 3 ] ; var n = arr . length ; document . write ( \" \" + MatrixChainOrder ( arr , 1 , n - 1 ) ) ;"}
{"text":"Javascript program using memoization","code":"let dp = new Array ( 100 ) ; for ( var i = 0 ; i < dp . length ; i ++ ) { dp [ i ] = new Array ( 2 ) ; }"}
{"text":"Function for matrix chain multiplication","code":"function matrixChainMemoised ( p , i , j ) { if ( i == j ) { return 0 ; } if ( dp [ i ] [ j ] != - 1 ) { return dp [ i ] [ j ] ; } dp [ i ] [ j ] = Number . MAX_VALUE ; for ( let k = i ; k < j ; k ++ ) { dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , matrixChainMemoised ( p , i , k ) + matrixChainMemoised ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ) ; } return dp [ i ] [ j ] ; } function MatrixChainOrder ( p , n ) { let i = 1 , j = n - 1 ; return matrixChainMemoised ( p , i , j ) ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 , 4 ] ; let n = arr . length ; for ( var i = 0 ; i < dp . length ; i ++ ) { for ( var j = 0 ; j < dp . length ; j ++ ) { dp [ i ] [ j ] = - 1 ; } } document . write ( \" \" + MatrixChainOrder ( arr , n ) ) ;"}
{"text":"Function to flip bits of A and B which are set in both of them","code":"function flipBitsOfAandB ( A , B ) {"}
{"text":"Clear the bits of A which are set in both A and B","code":"A = A ^ ( A & B ) ;"}
{"text":"Clear the bits of B which are set in both A and B","code":"B = B ^ ( A & B ) ;"}
{"text":"Print updated A and B","code":"document . write ( A + \" \" + B ) ; }"}
{"text":"Driver Code","code":"var A = 10 , B = 20 ; flipBitsOfAandB ( A , B ) ;"}
{"text":"Function to calculate and return the hamming distance between all consecutive numbers from 0 to N","code":"function TotalHammingDistance ( n ) { let i = 1 , sum = 0 ; while ( Math . floor ( n \/ i ) > 0 ) { sum = sum + Math . floor ( n \/ i ) ; i = i * 2 ; } return sum ; }"}
{"text":"Driver Code","code":"let N = 9 ; document . write ( TotalHammingDistance ( N ) ) ;"}
{"text":"Javascript program implementation of the approach","code":"let m = 1000000007 ;"}
{"text":"Function to find the sum of all divisors of all numbers from 1 to N","code":"function solve ( n ) {"}
{"text":"Stores the sum","code":"let s = 0 ; for ( let l = 1 ; l <= n ; ) {"}
{"text":"Marks the last polet of occurence with same count","code":"let r = ( n \/ Math . floor ( n \/ l ) ) ; let x = Math . floor ( ( ( r % m ) * ( ( r + 1 ) % m ) ) \/ 2 ) % m ; let y = Math . floor ( ( ( l % m ) * ( ( l - 1 ) % m ) ) \/ 2 ) % m ; let p = ( Math . floor ( n \/ l ) % m ) ;"}
{"text":"Calculate the sum","code":"s = ( s + ( ( ( x - y ) % m ) * p ) % m + m ) % m ; s %= m ; l = r + 1 ; }"}
{"text":"Return the result","code":"document . write ( ( s + m ) % m ) ; }"}
{"text":"Driver Code","code":"let n = 12 ; solve ( n ) ;"}
{"text":"Function to return the minimum time required to split stick of N into length into unit pieces","code":"function min_time_to_cut ( N ) { if ( N == 0 ) return 0 ;"}
{"text":"Return the minimum unit of time required","code":"return Math . ceil ( Math . log ( N ) \/ Math . log ( 2 ) ) ; }"}
{"text":"Driver code","code":"let N = 100 ; document . write ( min_time_to_cut ( N ) ) ;"}
{"text":"Function to find the distinct sums","code":"function findDistinctSums ( n ) {"}
{"text":"Set to store distinct sums","code":"s = new Set ( ) ; for ( var i = 1 ; i <= n ; i ++ ) { for ( var j = i ; j <= n ; j ++ ) {"}
{"text":"Inserting every sum","code":"s . add ( i + j ) ; } }"}
{"text":"returning distinct sums","code":"return s . size ; }"}
{"text":"Driver code","code":"var N = 3 ; document . write ( findDistinctSums ( N ) ) ;"}
{"text":"Function to print pattern recursively","code":"function printPattern ( i , j , n ) {"}
{"text":"Base Case","code":"if ( j >= n ) { return 0 ; } if ( i >= n ) { return 1 ; }"}
{"text":"Conditions to print slash","code":"if ( j == i j == n - 1 - i ) {"}
{"text":"Condition to print forword slash","code":"if ( i == n - 1 - j ) { document . write ( \" \" ) ; }"}
{"text":"Condition to print backward slash","code":"else { document . write ( \" \\\\ \" ) ; } }"}
{"text":"Else print ' * '","code":"else { document . write ( \" \" ) ; }"}
{"text":"Recursive call for rows","code":"if ( printPattern ( i , j + 1 , n ) == 1 ) { return 1 ; } document . write ( \" \" ) ;"}
{"text":"Recursive call for changing the rows","code":"return printPattern ( i + 1 , 0 , n ) ; }"}
{"text":"Driver Code","code":"let N = 9 ;"}
{"text":"Function Call","code":"printPattern ( 0 , 0 , N ) ;"}
{"text":"Function to calculate Z - Array","code":"function zArray ( arr ) { let n = arr . length ; let z = new Array ( n ) ; let r = 0 , l = 0 ;"}
{"text":"Loop to calculate Z - Array","code":"for ( let k = 1 ; k < n ; k ++ ) {"}
{"text":"Outside the Z - box","code":"if ( k > r ) { r = l = k ; while ( r < n && arr [ r ] == arr [ r - l ] ) r ++ ; z [ k ] = r - l ; r -- ; }"}
{"text":"Inside Z - box","code":"else { let k1 = k - l ; if ( z [ k1 ] < r - k + 1 ) z [ k ] = z [ k1 ] ; else { l = k ; while ( r < n && arr [ r ] == arr [ r - l ] ) r ++ ; z [ k ] = r - l ; r -- ; } } } return z ; }"}
{"text":"Helper function to merge two arrays and create a single array","code":"function mergeArray ( A , B ) { let n = A . length ; let m = B . length ; let z = new Array ( ) ;"}
{"text":"Array to store merged array","code":"let c = new Array ( n + m + 1 ) ;"}
{"text":"Copying array B","code":"for ( let i = 0 ; i < m ; i ++ ) c [ i ] = B [ i ] ;"}
{"text":"Adding a separator","code":"c [ m ] = Number . MAX_SAFE_INTEGER ;"}
{"text":"Copying array A","code":"for ( let i = 0 ; i < n ; i ++ ) c [ m + i + 1 ] = A [ i ] ;"}
{"text":"Calling Z - function","code":"z = zArray ( c ) ; return z ; }"}
{"text":"Function to help compute the Z array","code":"function findZArray ( A , B , n ) { let flag = 0 ; let z = [ ] ; z = mergeArray ( A , B ) ;"}
{"text":"Printing indexes where array B occur","code":"for ( let i = 0 ; i < z . length ; i ++ ) { if ( z [ i ] == n ) { document . write ( ( i - n - 1 ) + \" \" ) ; flag = 1 ; } } if ( flag == 0 ) { document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"let A = [ 1 , 2 , 3 , 2 , 3 , 2 ] ; let B = [ 2 , 3 ] ; let n = B . length ; findZArray ( A , B , n ) ;"}
{"text":"Function to return the count of repetitions of string a to generate string b","code":"function getCount ( a , b ) {"}
{"text":"If b cannot be generated by repeating a","code":"if ( b . length % a . length != 0 ) return - 1 ; var count = parseInt ( b . length \/ a . length ) ;"}
{"text":"Repeat a count number of times","code":"var str = \" \" ; for ( i = 0 ; i < count ; i ++ ) { str = str + a ; } if ( str == ( b ) ) return count ; return - 1 ; }"}
{"text":"Driver code","code":"var a = \" \" ; var b = \" \" ; document . write ( getCount ( a , b ) ) ;"}
{"text":"Function to check if S2 can be formed of S1","code":"function check ( S1 , S2 ) {"}
{"text":"Length of Strings","code":"var n1 = S1 . length ; var n2 = S2 . length ;"}
{"text":"hash - table to store count","code":"var mp = { } ;"}
{"text":"Store count of each character","code":"for ( var i = 0 ; i < n1 ; i ++ ) { if ( mp . hasOwnProperty ( S1 [ i ] ) ) { mp [ S1 [ i ] ] = mp [ S1 [ i ] ] + 1 ; } else { mp [ S1 [ i ] ] = 1 ; } }"}
{"text":"Traverse and check for every character","code":"for ( var i = 0 ; i < n2 ; i ++ ) {"}
{"text":"If the character of s2 is present in s1","code":"if ( mp . hasOwnProperty ( S2 [ i ] ) ) { mp [ S2 [ i ] ] = mp [ S2 [ i ] ] - 1 ; }"}
{"text":"If the character of s2 is not present in S1 , then check if previous two ASCII characters are present in S1","code":"else if ( mp . hasOwnProperty ( String . fromCharCode ( S2 [ i ] . charCodeAt ( 0 ) - 1 ) ) && mp . hasOwnProperty ( String . fromCharCode ( S2 [ i ] . charCodeAt ( 0 ) - 2 ) ) ) { mp [ String . fromCharCode ( S2 [ i ] . charCodeAt ( 0 ) - 1 ) ] = mp [ String . fromCharCode ( S2 [ i ] . charCodeAt ( 0 ) - 1 ) ] - 1 ; mp [ String . fromCharCode ( S2 [ i ] . charCodeAt ( 0 ) - 2 ) ] = mp [ String . fromCharCode ( S2 [ i ] . charCodeAt ( 0 ) - 2 ) ] - 1 ; } else { return false ; } } return true ; }"}
{"text":"Driver Code","code":"var S1 = \" \" ; var S2 = \" \" ;"}
{"text":"Calling function to check","code":"if ( check ( S1 , S2 ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Returns count of occurrences of \"1(0 + ) 1\" int str .","code":"function countPattern ( str ) { let len = str . length ; let oneSeen = false ;"}
{"text":"let count = 0 ; Initialize result","code":"for ( let i = 0 ; i < len ; i ++ ) { let getChar = str [ i ] ;"}
{"text":"Check if encountered '1' forms a valid pattern as specified","code":"if ( getChar == ' ' && oneSeen == true ) { if ( str [ i - 1 ] == ' ' ) count ++ ; }"}
{"text":"if 1 encountered for first time set oneSeen to 1","code":"if ( getChar == ' ' && oneSeen == false ) oneSeen = true ;"}
{"text":"Check if there is any other character other than '0' or '1' . If so then set oneSeen to 0 to search again for new pattern","code":"if ( getChar != ' ' && str [ i ] != ' ' ) oneSeen = false ; } return count ; }"}
{"text":"Driver program to test above function","code":"let str = \" \" ; document . write ( countPattern ( str ) ) ;"}
{"text":"Function to check if it possible to make all the strings equal to the string T","code":"function checkIfPossible ( N , arr , T ) {"}
{"text":"Stores the frequency of all the strings in the array arr [ ]","code":"let freqS = new Array ( 256 ) . fill ( 0 ) ;"}
{"text":"Stores the frequency of the string T","code":"let freqT = new Array ( 256 ) . fill ( 0 ) ;"}
{"text":"Iterate over the characters of the string T","code":"for ( let ch of T ) { freqT [ ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ; }"}
{"text":"Iterate in the range [ 0 , N - 1 ]","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Iterate over the characters of the string arr [ i ]","code":"for ( let ch of arr [ i ] ) { freqS [ ch . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ; } } for ( let i = 0 ; i < 256 ; i ++ ) {"}
{"text":"If freqT [ i ] is 0 and freqS [ i ] is not 0","code":"if ( freqT [ i ] == 0 && freqS [ i ] != 0 ) { return \" \" ; }"}
{"text":"If freqS [ i ] is 0 and freqT [ i ] is not 0","code":"else if ( freqS [ i ] == 0 && freqT [ i ] != 0 ) { return \" \" ; }"}
{"text":"If freqS [ i ] is not freqT [ i ] * N","code":"else if ( freqT [ i ] != 0 && freqS [ i ] != ( freqT [ i ] * N ) ) { return \" \" ; } }"}
{"text":"Otherwise , return \" Yes \"","code":"return \" \" ; }"}
{"text":"Driver Code","code":"let arr = [ \" \" , \" \" , \" \" ] ; let T = \" \" ; let N = arr . length ; document . write ( checkIfPossible ( N , arr , T ) ) ;"}
{"text":"Function to find the number of the groups of 1 s only in the binary string","code":"function groupsOfOnes ( S , N ) {"}
{"text":"Stores number of groups of 1 s","code":"let count = 0 ;"}
{"text":"Initialization of the stack","code":"var st = [ ] ;"}
{"text":"Traverse the string S","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If S [ i ] is '1'","code":"if ( S [ i ] == ' ' ) st . push ( 1 ) ;"}
{"text":"Otherwise","code":"else {"}
{"text":"If st is empty","code":"if ( st . length != 0 ) { count ++ ; while ( st . length != 0 ) { st . pop ( ) ; } } } }"}
{"text":"If st is not empty","code":"if ( st . length != 0 ) count ++ ;"}
{"text":"Return answer","code":"return count ; }"}
{"text":"Input","code":"var S = \" \" ; let N = S . length ;"}
{"text":"Function call","code":"document . write ( groupsOfOnes ( S , N ) ) ;"}
{"text":"Function to print all palindromic strings of length 3 that can be formed using characters of string S","code":"function generatePalindrome ( S ) {"}
{"text":"Stores the count of character","code":"let Hash = new Map ( ) ;"}
{"text":"Traverse the string S","code":"for ( let ch = 0 ; ch < S . length ; ch ++ ) { if ( ! Hash . has ( S [ ch ] ) ) Hash . set ( S [ ch ] , 1 ) ; else { Hash . set ( S [ ch ] , Hash . get ( S [ ch ] ) + 1 ) } }"}
{"text":"Stores all palindromic strings","code":"let st = new Set ( ) ;"}
{"text":"Iterate over the charchaters over the range [ ' a ' , ' z ' ]","code":"for ( let i = ' ' . charCodeAt ( 0 ) ; i <= ' ' . charCodeAt ( 0 ) ; i ++ ) {"}
{"text":"If Hash [ ch ] is equal to 2","code":"if ( Hash . get ( String . fromCharCode ( i ) ) == 2 ) {"}
{"text":"Iterate over the characters over the range [ ' a ' , ' z ' ]","code":"for ( let j = ' ' . charCodeAt ( 0 ) ; j <= ' ' . charCodeAt ( 0 ) ; j ++ ) {"}
{"text":"Stores all the palindromic string","code":"let s = \" \" ; if ( Hash . get ( String . fromCharCode ( j ) ) && i != j ) { s += String . fromCharCode ( i ) ; s += String . fromCharCode ( j ) ; s += String . fromCharCode ( i ) ;"}
{"text":"Push the s into the set st","code":"st . add ( s ) ; } } }"}
{"text":"If Hash [ i ] is greater than or equal to 3","code":"if ( Hash . get ( String . fromCharCode ( i ) ) >= 3 ) {"}
{"text":"Iterate over charchaters over the range [ ' a ' , ' z ' ]","code":"for ( let j = ' ' . charCodeAt ( 0 ) ; j <= ' ' . charCodeAt ( 0 ) ; j ++ ) {"}
{"text":"Stores all the palindromic string","code":"let s = \" \" ;"}
{"text":"If Hash [ j ] is positive","code":"if ( Hash . get ( String . fromCharCode ( j ) ) ) { s += String . fromCharCode ( i ) ; s += String . fromCharCode ( j ) ; s += String . fromCharCode ( i ) ;"}
{"text":"Push s into the set st","code":"st . add ( s ) ; } } } }"}
{"text":"Iterate over the set","code":"for ( let item of st . values ( ) ) { document . write ( item + \" \" ) } }"}
{"text":"Driver Code","code":"let S = \" \" ; generatePalindrome ( S ) ;"}
{"text":"Function to count occurrences of the string Y in the string S for every occurrence of X in S","code":"function countOccurrences ( S , X , Y ) {"}
{"text":"Stores the count of occurrences of X","code":"let count = 0 ;"}
{"text":"Stores the lengths of the three strings","code":"let N = S . length , A = X . length ; let B = Y . length ;"}
{"text":"Traverse the string S","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If the current substring is Y , then increment the value of count by 1","code":"if ( S . substr ( i , B ) == Y ) count ++ ;"}
{"text":"If the current substring is X , then print the count","code":"if ( S . substr ( i , A ) == X ) document . write ( count , \" \" ) ; } }"}
{"text":"Driver Code","code":"let S = \" \" , X = \" \" , Y = \" \" ; countOccurrences ( S , X , Y ) ;"}
{"text":"Function to find whether the given String is Accepted by the DFA","code":"function DFA ( str , N ) {"}
{"text":"If n <= 1 , then print No","code":"if ( N <= 1 ) { document . write ( \" \" ) ; return ; }"}
{"text":"To count the matched characters","code":"let count = 0 ;"}
{"text":"Check if the first character is C","code":"if ( str [ 0 ] == ' ' ) { count ++ ;"}
{"text":"Traverse the rest of String","code":"for ( let i = 1 ; i < N ; i ++ ) {"}
{"text":"If character is A or B , increment count by 1","code":"if ( str [ i ] == ' ' str [ i ] == ' ' ) count ++ ; else break ; } } else {"}
{"text":"If the first character is not C , print - 1","code":"document . write ( \" \" ) ; return ; }"}
{"text":"If all characters matches","code":"if ( count == N ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let str = \" \" ; let N = str . length ; DFA ( str , N ) ;"}
{"text":"Function to find the maximum and minimum number of digits to be removed to make str divisible by 3","code":"function minMaxDigits ( str , N ) {"}
{"text":"Convert the string leto array of digits","code":"let arr = [ ] ; for ( let i = 0 ; i < N ; i ++ ) arr [ i ] = ( str [ i ] - ' ' ) % 3 ;"}
{"text":"Count of 0 s , 1 s , and 2 s","code":"let zero = 0 , one = 0 , two = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < N ; i ++ ) { if ( arr [ i ] == 0 ) zero ++ ; if ( arr [ i ] == 1 ) one ++ ; if ( arr [ i ] == 2 ) two ++ ; }"}
{"text":"Find the sum of digits % 3","code":"let sum = 0 ; for ( let i = 0 ; i < N ; i ++ ) { sum = ( sum + arr [ i ] ) % 3 ; }"}
{"text":"Cases to find minimum number of digits to be removed","code":"if ( sum == 0 ) { document . write ( 0 + \" \" ) ; } if ( sum == 1 ) { if ( ( one != 0 ) && ( N > 1 ) ) document . write ( 1 + \" \" ) ; else if ( two > 1 && N > 2 ) document . write ( 2 + \" \" ) ; else document . write ( - 1 + \" \" ) ; } if ( sum == 2 ) { if ( two != 0 && N > 1 ) document . write ( 1 + \" \" ) ; else if ( one > 1 && N > 2 ) document . write ( 2 + \" \" ) ; else document . write ( - 1 + \" \" ) ; }"}
{"text":"Cases to find maximum number of digits to be removed","code":"if ( zero > 0 ) document . write ( N - 1 + \" \" ) ; else if ( one > 0 && two > 0 ) document . write ( N - 2 + \" \" ) ; else if ( one > 2 two > 2 ) document . write ( N - 3 + \" \" ) ; else document . write ( - 1 + \" \" ) ; }"}
{"text":"Driver code","code":"let str = \" \" ; let N = str . length ;"}
{"text":"Function Call","code":"minMaxDigits ( str , N ) ;"}
{"text":"Function to find the minimum number of changes to make the string K - periodic and palindrome","code":"function findMinimumChanges ( N , K , S ) {"}
{"text":"Initialize ans with 0","code":"var ans = 0 ;"}
{"text":"Iterate from 0 to ( K + 1 ) \/ 2","code":"for ( var i = 0 ; i < parseInt ( ( K + 1 ) \/ 2 ) ; i ++ ) {"}
{"text":"Store frequency of character","code":"var mp = new Map ( ) ;"}
{"text":"Iterate through all indices , i , i + K , i + 2 k ... . and store the frequency of character","code":"for ( var j = i ; j < N ; j += K ) {"}
{"text":"Increase the frequency of current character","code":"if ( mp . has ( S [ j ] ) ) { mp . set ( S [ j ] , mp . get ( S [ j ] ) + 1 ) ; } else { mp . set ( S [ j ] , 1 ) ; } }"}
{"text":"Iterate through all indices K - i , 2 K - i , 3 K - i ... . and store the frequency of character","code":"for ( var j = N - i - 1 ; j >= 0 ; j -= K ) {"}
{"text":"If K is odd & i is samw as K \/ 2 , break the loop","code":"if ( ( K & 1 ) && i == parseInt ( K \/ 2 ) ) break ;"}
{"text":"Increase the frequency of current character","code":"if ( mp . has ( S [ j ] ) ) { mp . set ( S [ j ] , mp . get ( S [ j ] ) + 1 ) ; } else { mp . set ( S [ j ] , 1 ) ; } }"}
{"text":"Find the maximum frequency of a character among all visited characters","code":"var curr_max = - 1000000000 ; mp . forEach ( ( value , key ) => { curr_max = Math . max ( curr_max , value ) ; } ) ;"}
{"text":"If K is odd and i is same as K \/ 2 then , only N \/ K characters is visited","code":"if ( K & 1 && i == parseInt ( K \/ 2 ) ) ans += ( parseInt ( N \/ K ) - curr_max ) ;"}
{"text":"Otherwise N \/ K * 2 characters has visited","code":"else ans += ( parseInt ( N \/ K ) * 2 - curr_max ) ; }"}
{"text":"Return the result","code":"return ans ; }"}
{"text":"Driver Code","code":"var S = \" \" ; var N = S . length ; var K = 3 ;"}
{"text":"Function Call","code":"document . write ( findMinimumChanges ( N , K , S ) ) ;"}
{"text":"Function to check if any index contains more than K active characters","code":"function checkString ( s , K ) { var n = s . length ;"}
{"text":"Store the last occurrence of each character in the map .","code":"var mp = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( mp . has ( s [ i ] ) ) { mp . set ( s [ i ] , mp . get ( s [ i ] ) + 1 ) ; } else mp . set ( s [ i ] , 1 ) ; } var cnt = 0 , f = 0 ;"}
{"text":"Stores the active characters","code":"var st = new Set ( ) ; for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"Insert the character","code":"st . add ( s [ i ] ) ;"}
{"text":"If the size of set exceeds K","code":"if ( st . size > K ) { f = 1 ; break ; }"}
{"text":"Remove the character from set if i is the last index of the current character","code":"if ( mp . get ( s [ i ] ) == i ) st . delete ( s [ i ] ) ; } return ( f == 1 ? \" \" : \" \" ) ; }"}
{"text":"Driver Code","code":"var s = \" \" ; var k = 2 ; document . write ( checkString ( s , k ) ) ;"}
{"text":"Function to count the strings whose distinct characters count is less than M","code":"function distinct ( S , M , n ) { let count = 0 ;"}
{"text":"Loop to iterate over all the strings of the array","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Distinct characters in the String with the help of set","code":"let set1 = new Set ( ) ; for ( let j = 0 ; j < S [ i ] . length ; j ++ ) { if ( ! set1 . has ( S [ i ] [ j ] ) ) set1 . add ( S [ i ] [ j ] ) ; } let c = set1 . size ;"}
{"text":"Checking if its less than or equal to M","code":"if ( c <= M ) count += 1 ; } document . write ( count ) ; }"}
{"text":"Driver Code","code":"let S = [ \" \" , \" \" , \" \" ] ; let M = 7 ; let n = S . length ; distinct ( S , M , n ) ;"}
{"text":"Function to remove the characters which have odd frequencies in the string","code":"function removeOddFrequencyCharacters ( s ) {"}
{"text":"Create a map to store the frequency of each character","code":"let m = new Map ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { let p = s [ i ] ; let count = m . get ( p ) ; if ( count == null ) { count = 0 ; m . set ( p , 1 ) ; } else m . set ( p , count + 1 ) ; }"}
{"text":"To store the new string","code":"let new_string = \" \" ;"}
{"text":"Remove the characters which have odd frequencies","code":"for ( let i = 0 ; i < s . length ; i ++ ) {"}
{"text":"If the character has odd frequency then skip","code":"if ( ( m . get ( s [ i ] ) & 1 ) == 1 ) continue ;"}
{"text":"Else concatenate the character to the new string","code":"new_string += s [ i ] ; }"}
{"text":"Return the modified string","code":"return new_string ; }"}
{"text":"Driver code","code":"let str = \" \" ;"}
{"text":"Remove the characters which have odd frequencies","code":"str = removeOddFrequencyCharacters ( str ) ; document . write ( str ) ;"}
{"text":"JavaScript implementation to find product of elements at k - th level","code":"var i ;"}
{"text":"Recursive Function to find product of elements at k - th level","code":"function productAtKthLevel ( tree , k , level ) { if ( tree [ i ++ ] == ' ' ) {"}
{"text":"if subtree is null , just like if root == null","code":"if ( tree [ i ] == ' ' ) return 1 ; var product = 1 ;"}
{"text":"Consider only level k node to be part of the product","code":"if ( level == k ) product = tree [ i ] - ' ' ;"}
{"text":"Recur for Left Subtree","code":"++ i ; var leftproduct = productAtKthLevel ( tree , k , level + 1 ) ;"}
{"text":"Recur for Right Subtree","code":"++ i ; var rightproduct = productAtKthLevel ( tree , k , level + 1 ) ;"}
{"text":"Taking care of ' ) ' after left and right subtree","code":"++ i ; return product * leftproduct * rightproduct ; } return int . MinValue ; }"}
{"text":"Driver Code","code":"var tree = \" \" ; var k = 2 ; i = 0 ; document . write ( productAtKthLevel ( tree , k , 0 ) ) ;"}
{"text":"Function to print the most occurring character","code":"function findMostOccurringChar ( str ) {"}
{"text":"Creating a hash of size 26","code":"var hash = Array ( 26 ) . fill ( 0 ) ;"}
{"text":"For loop to iterate through every string of the array","code":"for ( var i = 0 ; i < str . length ; i ++ ) {"}
{"text":"For loop to iterate through every character of the string","code":"for ( var j = 0 ; j < str [ i ] . length ; j ++ ) {"}
{"text":"Incrementing the count of the character in the hash","code":"hash [ str [ i ] [ j ] ] ++ ; } }"}
{"text":"Finding the character with the maximum count","code":"var max = 0 ; for ( var i = 0 ; i < 26 ; i ++ ) { max = hash [ i ] > hash [ max ] ? i : max ; } document . write ( String . fromCharCode ( max + 97 ) ) ; }"}
{"text":"Declaring Vector of String type","code":"var str = [ ] ; str . push ( \" \" ) ; str . push ( \" \" ) ; str . push ( \" \" ) ; str . push ( \" \" ) ; findMostOccurringChar ( str ) ;"}
{"text":"Function that returns true if num is palindrome","code":"function isPalindrome ( num ) {"}
{"text":"Convert the given floating point number into a string","code":"var s = num . toString ( ) ;"}
{"text":"Pointers pointing to the first and the last character of the string","code":"var low = 0 ; var high = s . length - 1 ; while ( low < high ) {"}
{"text":"Not a palindrome","code":"if ( s [ low ] != s [ high ] ) return false ;"}
{"text":"Update the pointers","code":"low ++ ; high -- ; } return true ; }"}
{"text":"Driver code","code":"var n = 123.321 ; if ( isPalindrome ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Javascript implementation of the approach","code":"const MAX = 26 ;"}
{"text":"Function to return the maximum number of times str1 can appear as a non - overlapping substring in str2","code":"function maxSubStr ( str1 , len1 , str2 , len2 ) {"}
{"text":"str1 cannot never be substring of str2","code":"if ( len1 > len2 ) return 0 ;"}
{"text":"Store the frequency of the characters of str1","code":"let freq1 = new Array ( MAX ) . fill ( 0 ) ; for ( let i = 0 ; i < len1 ; i ++ ) freq1 [ str1 . charCodeAt ( i ) - ' ' . charCodeAt ( 0 ) ] ++ ;"}
{"text":"Store the frequency of the characters of str2","code":"let freq2 = new Array ( MAX ) . fill ( 0 ) ; for ( let i = 0 ; i < len2 ; i ++ ) freq2 [ str2 . charCodeAt ( i ) - ' ' . charCodeAt ( 0 ) ] ++ ;"}
{"text":"To store the required count of substrings","code":"let minPoss = Number . MAX_SAFE_INTEGER ; for ( let i = 0 ; i < MAX ; i ++ ) {"}
{"text":"Current character doesn 't appear in str1","code":"if ( freq1 [ i ] == 0 ) continue ;"}
{"text":"Frequency of the current character in str1 is greater than its frequency in str2","code":"if ( freq1 [ i ] > freq2 [ i ] ) return 0 ;"}
{"text":"Update the count of possible substrings","code":"minPoss = Math . min ( minPoss , Math . floor ( freq2 [ i ] \/ freq1 [ i ] ) ) ; } return minPoss ; }"}
{"text":"Driver code","code":"let str1 = \" \" , str2 = \" \" ; let len1 = str1 . length ; let len2 = str2 . length ; document . write ( maxSubStr ( str1 , len1 , str2 , len2 ) ) ;"}
{"text":"Function to return the number of ways to insert the bracket pairs","code":"function cntWays ( str , n ) { var x = n + 1 ; var ways = x * x * ( x * x - 1 ) \/ 12 ; return ways ; }"}
{"text":"Driver code","code":"var str = \" \" ; var n = str . length ; document . write ( cntWays ( str , n ) ) ;"}
{"text":"Set to store all the strings from the given array","code":"var uSet = new Set ( ) ;"}
{"text":"To store the required count","code":"var minCnt = 1000000000 ;"}
{"text":"Recursive function to find the count of substrings that can be splitted starting from the index start such that all the substrings are present in the map","code":"function findSubStr ( str , cnt , start ) {"}
{"text":"All the chosen substrings are present in the map","code":"if ( start == str . length ) {"}
{"text":"Update the minimum count of substrings","code":"minCnt = Math . min ( cnt , minCnt ) ; }"}
{"text":"Starting from the substrings of length 1 that start with the given index","code":"for ( var len = 1 ; len <= ( str . length - start ) ; len ++ ) {"}
{"text":"Get the substring","code":"var subStr = str . substring ( start , start + len ) ;"}
{"text":"If the substring is present in the set","code":"if ( uSet . has ( subStr ) ) {"}
{"text":"Recursive call for the rest of the string","code":"findSubStr ( str , cnt + 1 , start + len ) ; } } }"}
{"text":"Function that inserts all the strings from the given array in a set and calls the recursive function to find the minimum count of substrings str can be splitted into that satisfy the given condition","code":"function findMinSubStr ( arr , n , str ) {"}
{"text":"Insert all the strings from the given array in a set","code":"for ( var i = 0 ; i < n ; i ++ ) uSet . add ( arr [ i ] ) ;"}
{"text":"Find the required count","code":"findSubStr ( str , 0 , 0 ) ; }"}
{"text":"Driver code","code":"var str = \" \" ; var arr = [ \" \" , \" \" , \" \" , \" \" , \" \" , \" \" ] ; var n = arr . length ; findMinSubStr ( arr , n , str ) ; document . write ( minCnt ) ;"}
{"text":"Function to return the count of required substrings","code":"function countSubStr ( s , n ) { var c1 = 0 , c2 = 0 ;"}
{"text":"For every index of the string","code":"for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"If the substring starting at the current index is \" geeks \"","code":"if ( s . substring ( i , i + 5 ) == \" \" ) c1 ++ ;"}
{"text":"If the substring is \" for \"","code":"if ( s . substring ( i , i + 3 ) == \" \" ) c2 = c2 + c1 ; } return c2 ; }"}
{"text":"Driver code","code":"var s = \" \" ; var n = s . length ; document . write ( countSubStr ( s , n ) ) ;"}
{"text":"Defining the string","code":"let string = \" \" ;"}
{"text":"Storing opening braces in list lst1","code":"let lst1 = [ ' ' , ' ' , ' ' ] ;"}
{"text":"Storing closing braces in list lst2","code":"let lst2 = [ ' ' , ' ' , ' ' ] ;"}
{"text":"Creating an empty list lst","code":"let lst = [ ] ;"}
{"text":"Creating dictionary to map closing braces to opening ones","code":"let Dict = { ' ' : ' ' , ' ' : ' ' , ' ' : ' ' } let a = 0 , b = 0 , c = 0 ;"}
{"text":"If first position of string contain any closing braces return 1","code":"if ( string [ 0 ] in lst2 ) { document . write ( 1 + \" \" ) ; } else {"}
{"text":"If characters of string are opening braces then append them in a list","code":"for ( let i = 0 ; i < string . length ; i ++ ) { if ( string [ i ] in lst1 ) { lst . push ( string [ i ] ) ; k = i + 2 ; } else {"}
{"text":"When size of list is 0 and new closing braces is encountered then print its index starting from 1","code":"if ( lst . lengt == 0 && ( string [ i ] in lst2 ) ) { document . write ( ( i + 1 ) + \" \" ) ; c = 1 ; break ; } else {"}
{"text":"As we encounter closing braces we map them with theircorresponding opening braces using dictionary and check if it is same as last opened braces ( last element in list ) if yes then we delete that elememt from list","code":"if ( Dict [ string [ i ] ] == lst [ lst . length - 1 ] ) { lst . pop ( ) ; } else {"}
{"text":"Otherwise we return the index ( starting from 1 ) at which nesting is found wrong","code":"break ; document . write ( ( i + 1 ) + \" \" ) ; a = 1 ; } } } }"}
{"text":"At end if the list is empty it means the string is perfectly nested","code":"if ( lst . length == 0 && c == 0 ) { document . write ( 0 + \" \" ) ; b = 1 ; } if ( a == 0 && b == 0 && c == 0 ) { document . write ( k + \" \" ) ; } }"}
{"text":"Javascript implementation of the above approach :","code":"var MAX = 26 ;"}
{"text":"Function to return the encrypted string","code":"function encryptStr ( str , n , x ) {"}
{"text":"Reduce x because rotation of length 26 is unnecessary","code":"x = x % MAX ;"}
{"text":"Calculate the frequency of characters","code":"var freq = Array ( MAX ) . fill ( 0 ) ; for ( var i = 0 ; i < n ; i ++ ) { freq [ str [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ; } for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"If the frequency of current character is even then increment it by x","code":"if ( freq [ str [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] % 2 == 0 ) { var pos = ( str [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) + x ) % MAX ; str [ i ] = String . fromCharCode ( pos + ' ' . charCodeAt ( 0 ) ) ; }"}
{"text":"Else decrement it by x","code":"else { var pos = ( str [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) - x ) ; if ( pos < 0 ) { pos += MAX ; } str [ i ] = String . fromCharCode ( pos + ' ' . charCodeAt ( 0 ) ) ; } }"}
{"text":"Return the count","code":"return str . join ( ' ' ) ; }"}
{"text":"Driver code","code":"var s = \" \" ; var n = s . length ; var x = 3 ; document . write ( encryptStr ( s . split ( ' ' ) , n , x ) ) ;"}
{"text":"Function that returns true if it is possible to rearrange the characters of the string such that no two consecutive characters are same","code":"function isPossible ( str ) {"}
{"text":"To store the frequency of each of the character","code":"let freq = new Map ( ) ;"}
{"text":"To store the maximum frequency so far","code":"let max_freq = 0 ; for ( let j = 0 ; j < ( str . length ) ; j ++ ) { if ( freq . has ( str [ j ] ) ) { freq . set ( str [ j ] , freq . get ( str [ j ] ) + 1 ) ; if ( freq . get ( str [ j ] ) > max_freq ) max_freq = freq . get ( str [ j ] ) ; } else { freq . set ( str [ j ] , 1 ) ; if ( freq . get ( str [ j ] ) > max_freq ) max_freq = freq . get ( str [ j ] ) ; } }"}
{"text":"If possible","code":"if ( max_freq <= ( str . length - max_freq + 1 ) ) return true ; return false ; }"}
{"text":"Driver code","code":"let str = \" \" ; if ( isPossible ( str . split ( ' ' ) ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to print the uncommon characters in the given string in sorted order","code":"function printUncommon ( str1 , str2 ) { var a1 = 0 , a2 = 0 ; for ( var i = 0 ; i < str1 . length ; i ++ ) {"}
{"text":"Converting character to ASCII code","code":"var ch = ( str1 [ i ] . charCodeAt ( 0 ) ) - ' ' . charCodeAt ( 0 ) ;"}
{"text":"Bit operation","code":"a1 = a1 | ( 1 << ch ) ; } for ( var i = 0 ; i < str2 . length ; i ++ ) {"}
{"text":"Converting character to ASCII code","code":"var ch = ( str2 [ i ] . charCodeAt ( 0 ) ) - ' ' . charCodeAt ( 0 ) ;"}
{"text":"Bit operation","code":"a2 = a2 | ( 1 << ch ) ; }"}
{"text":"XOR operation leaves only uncommon characters in the ans variable","code":"var ans = a1 ^ a2 ; var i = 0 ; while ( i < 26 ) { if ( ans % 2 == 1 ) { document . write ( String . fromCharCode ( ' ' . charCodeAt ( 0 ) + i ) ) ; } ans = parseInt ( ans \/ 2 ) ; i ++ ; } }"}
{"text":"Driver code","code":"var str1 = \" \" ; var str2 = \" \" ; printUncommon ( str1 , str2 ) ;"}
{"text":"Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced .","code":"function countMinReversals ( expr ) { var len = expr . length ;"}
{"text":"length of expression must be even to make it balanced by using reversals .","code":"if ( len % 2 ) return - 1 ;"}
{"text":"To store number of reversals required .","code":"var ans = 0 ; var i ;"}
{"text":"To store number of unbalanced opening brackets .","code":"var open = 0 ;"}
{"text":"To store number of unbalanced closing brackets .","code":"var close = 0 ; for ( i = 0 ; i < len ; i ++ ) {"}
{"text":"If current bracket is open then increment open count .","code":"if ( expr [ i ] == ' ' ) open ++ ;"}
{"text":"If current bracket is close , check if it balances opening bracket . If yes then decrement count of unbalanced opening bracket else increment count of closing bracket .","code":"else { if ( ! open ) close ++ ; else open -- ; } } ans = ( close \/ 2 ) + ( open \/ 2 ) ;"}
{"text":"For the case : \" } { \" or when one closing and one opening bracket remains for pairing , then both need to be reversed .","code":"close %= 2 ; open %= 2 ; if ( close ) ans += 2 ; return ans ; }"}
{"text":"Driver Code","code":"var expr = \" \" ; document . write ( countMinReversals ( expr ) ) ;"}
{"text":"Function to return the total number of valid pairs","code":"function totalPairs ( s1 , s2 ) { var a1 = 0 , b1 = 0 ;"}
{"text":"Count total number of even and odd ascii values for string s1","code":"for ( var i = 0 ; i < s1 . length ; i ++ ) { if ( ( s1 [ i ] . charCodeAt ( 0 ) ) % 2 != 0 ) a1 ++ ; else b1 ++ ; } var a2 = 0 , b2 = 0 ;"}
{"text":"Count total number of even and odd ascii values for string s2","code":"for ( var i = 0 ; i < s2 . length ; i ++ ) { if ( ( s2 [ i ] . charCodeAt ( 0 ) ) % 2 != 0 ) a2 ++ ; else b2 ++ ; }"}
{"text":"Return total valid pairs","code":"return ( ( a1 * a2 ) + ( b1 * b2 ) ) ; }"}
{"text":"Driver code","code":"var s1 = \" \" , s2 = \" \" ; document . write ( totalPairs ( s1 , s2 ) ) ;"}
{"text":"Function to return the count of the required prefix","code":"function prefixOccurrences ( str ) { var c = str . charAt ( 0 ) ; var countc = 0 ;"}
{"text":"Find the frequency of first character of string","code":"for ( var i = 0 ; i < str . length ; i ++ ) { if ( str . charAt ( i ) == c ) countc ++ ; } return countc ; }"}
{"text":"Driver code","code":"var str = \" \" ; document . write ( prefixOccurrences ( str ) ) ;"}
{"text":"Function to return the minimum operations of the given type required to convert string s to string t","code":"function minOperations ( s , t , n ) { var ct0 = 0 , ct1 = 0 ; for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"Characters are already equal","code":"if ( s [ i ] === t [ i ] ) continue ;"}
{"text":"Increment count of 0 s","code":"if ( s [ i ] === \" \" ) ct0 ++ ;"}
{"text":"Increment count of 1 s","code":"else ct1 ++ ; } return Math . max ( ct0 , ct1 ) ; }"}
{"text":"Driver code","code":"var s = \" \" , t = \" \" ; var n = s . length ; document . write ( minOperations ( s , t , n ) ) ;"}
{"text":"Function to return the decrypted string","code":"function decryptString ( str , n ) {"}
{"text":"Initial jump will be 1","code":"let i = 0 , jump = 1 ; let decryptedStr = \" \" ; while ( i < n ) { decryptedStr += str [ i ] ; i += jump ;"}
{"text":"Increment jump by 1 with every character","code":"jump ++ ; } return decryptedStr ; }"}
{"text":"Driver code","code":"let str = \" \" ; let n = str . length ; document . write ( decryptString ( str , n ) ) ;"}
{"text":"Function to check which bit is to be flipped","code":"function bitToBeFlipped ( s ) {"}
{"text":"variable to store first and last character of string","code":"let last = s [ s . length - 1 ] ; let first = s [ 0 ] ;"}
{"text":"Check if first and last characters are equal , if yes , then return the character which is not at last","code":"if ( last == first ) { if ( last == ' ' ) { return ' ' ; } else { return ' ' ; } }"}
{"text":"else return last","code":"else if ( last != first ) { return last ; } }"}
{"text":"Driver Code","code":"let s = \" \" ; document . write ( bitToBeFlipped ( s ) , ' ' ) ;"}
{"text":"Function to create Sieve to check primes","code":"function SieveOfEratosthenes ( prime , p_size ) {"}
{"text":"false here indicates that it is not prime","code":"prime [ 0 ] = false ; prime [ 1 ] = false ; for ( let p = 2 ; p * p <= p_size ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] ) {"}
{"text":"Update all multiples of p , set them to non - prime","code":"for ( let i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } }"}
{"text":"Function to find the sum of prime frequencies of the characters of the given string","code":"function sumProdOfPrimeFreq ( s ) { let prime = new Array ( s . length + 1 ) ; prime . fill ( true ) ; SieveOfEratosthenes ( prime , s . length + 1 ) ; let i , j ;"}
{"text":"map is used to store character frequencies","code":"let m = new Map ( ) ; for ( i = 0 ; i < s . length ; i ++ ) m . set ( s [ i ] , m . get ( s [ i ] ) == null ? 1 : m . get ( s [ i ] ) + 1 ) ; let sum = 0 , product = 1 ;"}
{"text":"Traverse the map","code":"for ( let it of m ) { console . log ( m )"}
{"text":"If the frequency is prime","code":"if ( prime [ it [ 1 ] ] ) { sum += it [ 1 ] ; product *= it [ 1 ] ; } } document . write ( \" \" + sum ) ; document . write ( \" \" + product ) ; }"}
{"text":"Driver code","code":"let s = \" \" ; sumProdOfPrimeFreq ( s ) ;"}
{"text":"Function that checks if the frequency of character are a factor or multiple of each other","code":"function multipleOrFactor ( s1 , s2 ) {"}
{"text":"map store frequency of each character","code":"let m1 = new Map ( ) ; let m2 = new Map ( ) ; for ( let i = 0 ; i < s1 . length ; i ++ ) { if ( m1 [ s1 [ i ] ] ) m1 [ s1 [ i ] ] ++ ; else m1 [ s1 [ i ] ] = 1 } for ( let i = 0 ; i < s2 . length ; i ++ ) { if ( m2 [ s2 [ i ] ] ) m2 [ s2 [ i ] ] ++ ; else m2 [ s2 [ i ] ] = 1 } for ( var it in m1 ) {"}
{"text":"if any frequency is 0 , then continue as condition is satisfied","code":"if ( ! ( m2 [ it ] ) ) continue ;"}
{"text":"if factor or multiple , then condition satisfied","code":"if ( m2 [ it ] % m1 [ it ] == 0 m1 [ it ] % m2 [ it ] == 0 ) continue ;"}
{"text":"if condition not satisfied","code":"else return false ; } return true ; }"}
{"text":"Driver code","code":"let s1 = \" \" ; let s2 = \" \" ; multipleOrFactor ( s1 , s2 ) ? document . write ( \" \" ) : document . write ( \" \" ) ;"}
{"text":"Function that removes the characters which have even frequencies in the string","code":"function solve ( s ) {"}
{"text":"create a map to store the frequency of each character","code":"let m = new Map ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( m . has ( s [ i ] ) ) m . set ( s [ i ] , m . get ( s [ i ] ) + 1 ) ; else m . set ( s [ i ] , 1 ) ; }"}
{"text":"to store the new string","code":"let new_string = \" \" ;"}
{"text":"remove the characters which have even frequencies","code":"for ( let i = 0 ; i < s . length ; i ++ ) {"}
{"text":"if the character has even frequency then skip","code":"if ( m . get ( s [ i ] ) % 2 == 0 ) continue ;"}
{"text":"else concatenate the character to the new string","code":"new_string = new_string + s [ i ] ; }"}
{"text":"display the modified string","code":"document . write ( new_string ) ; }"}
{"text":"Driver Code","code":"let s = \" \" ;"}
{"text":"remove the characters which have even frequencies","code":"solve ( s ) ;"}
{"text":"function to check if ' str ' is palindrome","code":"function isPalindrome ( str ) { var i = 0 , j = str . length - 1 ;"}
{"text":"traversing from both the ends","code":"while ( i < j )"}
{"text":"not palindrome","code":"if ( str [ i ++ ] != str [ j -- ] ) return false ;"}
{"text":"palindrome","code":"return true ; }"}
{"text":"function to remove all the palindromic words from the given sentence","code":"function removePalinWords ( str ) {"}
{"text":"' final _ str ' to store the final string and ' word ' to one by one store each word of ' str '","code":"var final_str = \" \" , word = \" \" ;"}
{"text":"add space at the end of ' str '","code":"str = str + \" \" ; var n = str . length ;"}
{"text":"traversing ' str '","code":"for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"accumulating characters of the current word","code":"if ( str [ i ] != ' ' ) word = word + str [ i ] ; else {"}
{"text":"if ' word ' is not palindrome then a add it to ' final _ str '","code":"if ( ! ( isPalindrome ( word ) ) ) final_str += word + \" \" ;"}
{"text":"reset","code":"word = \" \" ; } }"}
{"text":"required final string","code":"return final_str ; }"}
{"text":"Driver program to test above","code":"var str = \" \" ; document . write ( removePalinWords ( str ) ) ;"}
{"text":"Returns numeric value of a subsequence of s . The subsequence to be picked is decided using bit pattern of num ( We pick all those digits for which there is a set bit in num )","code":"function findSubSequence ( s , num ) {"}
{"text":"Initialize the result","code":"let res = 0 ;"}
{"text":"till n != 0","code":"let i = 0 ; while ( num > 0 ) {"}
{"text":"if i - th bit is set then add this number","code":"if ( ( num & 1 ) == 1 ) res += s [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ; i ++ ;"}
{"text":"right shift i","code":"num = num >> 1 ; } return res ; }"}
{"text":"function to find combined sum of all individual subsequence sum","code":"function combinedSum ( s ) {"}
{"text":"length of String","code":"let n = s . length ;"}
{"text":"stores the combined","code":"let c_sum = 0 ;"}
{"text":"2 ^ n - 1 subsequences","code":"let range = ( 1 << n ) - 1 ;"}
{"text":"loop for all subsequences","code":"for ( let i = 0 ; i <= range ; i ++ ) c_sum += findSubSequence ( s , i ) ;"}
{"text":"returns the combined sum","code":"return c_sum ; }"}
{"text":"Driver function","code":"let s = \" \" ; document . write ( combinedSum ( s ) ) ;"}
{"text":"Javascript Program to find the subsequence with each character occurring at least k times in string s","code":"var MAX_CHAR = 26 ;"}
{"text":"Function to find the subsequence","code":"function findSubsequence ( str , k ) {"}
{"text":"Taking an extra array to keep record for character count in s","code":"var a = Array ( MAX_CHAR ) . fill ( 0 ) ;"}
{"text":"Counting occurrences of all characters in str [ ]","code":"for ( var i = 0 ; i < str . length ; i ++ ) a [ str [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ;"}
{"text":"Printing characters with count >= k in same order as they appear in str .","code":"for ( var i = 0 ; i < str . length ; i ++ ) if ( a [ str [ i ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] >= k ) document . write ( str [ i ] ) ; }"}
{"text":"Driver code","code":"var k = 2 ; findSubsequence ( \" \" , k ) ;"}
{"text":"javascript program to convert a sentence to gOOGLE cASE","code":"function convert ( str ) {"}
{"text":"empty strings","code":"var w = \" \" , z = \" \" ;"}
{"text":"convert input string to upper case","code":"str = str . toUpperCase ( ) + \" \" ; for ( i = 0 ; i < str . length ; i ++ ) {"}
{"text":"checki if character is not a space and adding it to string w","code":"var ch = str [ i ] ; if ( ch != ' ' ) w = w + ch ; else {"}
{"text":"converting first character to lower case and subsequent initial letter of another word to lower case","code":"z = z + ( w [ 0 ] . toLowerCase ( ) ) + w . substring ( 1 ) + \" \" ; w = \" \" ; } } return z ; }"}
{"text":"Driver code","code":"var str = \" \" ; document . write ( convert ( str ) ) ;"}
{"text":"isVowel ( ) is a function that returns true for a vowel and false otherwise .","code":"function isVowel ( c ) { return c === \" \" || c === \" \" || c === \" \" || c === \" \" || c === \" \" ; }"}
{"text":"function to Encrypt the String","code":"function encryptString ( s , n , k ) {"}
{"text":"cv to count vowel cc to count consonants","code":"var cv = new Array ( n ) . fill ( 0 ) ; var cc = new Array ( n ) . fill ( 0 ) ; if ( isVowel ( s [ 0 ] ) ) cv [ 0 ] = 1 ; else cc [ 0 ] = 1 ;"}
{"text":"Counting prefix count of vowel and prefix count of consonants","code":"for ( var i = 1 ; i < n ; i ++ ) { cv [ i ] = cv [ i - 1 ] + ( isVowel ( s [ i ] ) === true ? 1 : 0 ) ; cc [ i ] = cc [ i - 1 ] + ( isVowel ( s [ i ] ) === true ? 0 : 1 ) ; } var ans = \" \" ; var prod = 0 ; prod = cc [ k - 1 ] * cv [ k - 1 ] ; ans += prod ;"}
{"text":"generating the encrypted String .","code":"for ( var i = k ; i < s . length ; i ++ ) { prod = ( cc [ i ] - cc [ i - k ] ) * ( cv [ i ] - cv [ i - k ] ) ; ans += prod ; } return ans ; }"}
{"text":"Driver Code","code":"var s = \" \" ; var n = s . length ; var k = 2 ; document . write ( encryptString ( s . split ( \" \" ) , n , k ) + \" \" ) ;"}
{"text":"Javascript program to count the number of occurrence of a word in the given string","code":"function countOccurrences ( str , word ) {"}
{"text":"split the string by spaces in a","code":"let a = str . split ( \" \" ) ;"}
{"text":"search for pattern in a","code":"let count = 0 ; for ( let i = 0 ; i < a . length ; i ++ ) {"}
{"text":"if match found increase count","code":"if ( word == ( a [ i ] ) ) count ++ ; } return count ; }"}
{"text":"Driver code","code":"let str = \" \" ; let word = \" \" ; document . write ( countOccurrences ( str , word ) ) ;"}
{"text":"Function to generate permutations","code":"function permute ( input ) { var n = input . length ;"}
{"text":"Number of permutations is 2 ^ n","code":"var max = 1 << n ;"}
{"text":"Converting string to lower case","code":"input = input . toLowerCase ( ) ;"}
{"text":"Using all subsequences and permuting them","code":"for ( var i = 0 ; i < max ; i ++ ) { var combination = input . split ( ' ' ) ;"}
{"text":"If j - th bit is set , we convert it to upper case","code":"for ( var j = 0 ; j < n ; j ++ ) { if ( ( ( i >> j ) & 1 ) == 1 ) combination [ j ] = String . fromCharCode ( combination [ j ] . charCodeAt ( 0 ) - 32 ) ; }"}
{"text":"Printing current combination","code":"document . write ( combination . join ( ' ' ) ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver Program to test above function","code":"permute ( \" \" ) ;"}
{"text":"Method to print the string","code":"function printString ( str , ch , count ) { var occ = 0 , i ;"}
{"text":"If given count is 0 print the given string and return","code":"if ( count == 0 ) { document . write ( str ) ; return ; }"}
{"text":"Start traversing the string","code":"for ( i = 0 ; i < str . length ; i ++ ) {"}
{"text":"Increment occ if current char is equal to given character","code":"if ( str . charAt ( i ) == ch ) occ ++ ;"}
{"text":"Break the loop if given character has been occurred given no . of times","code":"if ( occ == count ) break ; }"}
{"text":"Print the string after the occurrence of given character given no . of times","code":"if ( i < str . length - 1 ) document . write ( str . substring ( i + 1 ) ) ;"}
{"text":"Otherwise string is empty","code":"else document . write ( \" \" ) ; }"}
{"text":"Driver Method","code":"var str = \" \" ; printString ( str , ' ' , 2 ) ;"}
{"text":"utility function to check for vowel","code":"function isVowel ( c ) { return ( c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' ) ; }"}
{"text":"Function to reverse order of vowels","code":"function reverseVowel ( str ) {"}
{"text":"Start two indexes from two corners and move toward each other","code":"let i = 0 ; let j = str . length - 1 ; let str1 = str . split ( \" \" ) ; while ( i < j ) { if ( ! isVowel ( str1 [ i ] ) ) { i ++ ; continue ; } if ( ! isVowel ( str1 [ j ] ) ) { j -- ; continue ; }"}
{"text":"swapping","code":"let t = str1 [ i ] ; str1 [ i ] = str1 [ j ] ; str1 [ j ] = t ; i ++ ; j -- ; } let str2 = ( str1 ) . join ( \" \" ) ; return str2 ; }"}
{"text":"Driver function","code":"let str = \" \" ; document . write ( reverseVowel ( str ) ) ;"}
{"text":"A function to check if a string str is palindrome","code":"function isPalindrome ( str ) {"}
{"text":"Start from leftmost and rightmost corners of str","code":"let l = 0 ; let h = str . length - 1 ;"}
{"text":"Keep comparing characters while they are same","code":"while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return false ; return true ; }"}
{"text":"Returns count of minimum palindromic subseuqnces to be removed to make string empty","code":"function minRemovals ( str ) {"}
{"text":"If string is empty","code":"if ( str [ 0 ] == ' ' ) return 0 ;"}
{"text":"If string is palindrome","code":"if ( isPalindrome ( str ) ) return 1 ;"}
{"text":"If string is not palindrome","code":"return 2 ; }"}
{"text":"Driver Code","code":"document . write ( minRemovals ( \" \" ) + \" \" ) ; document . write ( minRemovals ( \" \" ) ) ;"}
{"text":"Iterative function to calculate ( x ^ y ) % p in O ( log y )","code":"function power ( x , y , p ) {"}
{"text":"Initialize result","code":"var res = 1 ;"}
{"text":"Update x if it is >= p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y & 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y \/ 2","code":"y = y >> 1 ; x = ( x * x ) % p ; } return res ; }"}
{"text":"Function to return XXX ... . . ( N times ) % M","code":"function findModuloByM ( X , N , M ) {"}
{"text":"Return the mod by M of smaller numbers","code":"if ( N < 6 ) { var temp = \" \" ;"}
{"text":"Creating a string of N X 's","code":"for ( var i = 1 ; i < N ; i ++ ) { temp += String . fromCharCode ( 48 + X ) ; }"}
{"text":"Converting the string to int and calculating the modulo","code":"var res = parseInt ( temp ) % M ; return res ; }"}
{"text":"Checking the parity of N","code":"if ( N % 2 == 0 ) {"}
{"text":"Dividing the number into equal half","code":"var half = findModuloByM ( X , N \/ 2 , M ) % M ;"}
{"text":"Utilizing the formula for even N","code":"var res = ( half * power ( 10 , N \/ 2 , M ) + half ) % M ; return res ; } else {"}
{"text":"Dividing the number into equal half","code":"var half = findModuloByM ( X , N \/ 2 , M ) % M ;"}
{"text":"Utilizing the formula for odd N","code":"var res = ( half * power ( 10 , N \/ 2 + 1 , M ) + half * 10 + X ) % M ; return res ; } }"}
{"text":"Driver code","code":"var X = 6 , N = 14 , M = 9 ;"}
{"text":"Print XXX ... ( N times ) % M","code":"document . write ( findModuloByM ( X , N , M ) ) ;"}
{"text":"Structure of the circle","code":"class circle { constructor ( x , y , r ) { this . x = x ; this . y = y ; this . r = r ; } }"}
{"text":"Utility function to check if given circles satisfy required criteria","code":"function check ( C ) {"}
{"text":"Stores the distance between the centres of C1 and C2","code":"let C1C2 = Math . sqrt ( ( C [ 1 ] . x - C [ 0 ] . x ) * ( C [ 1 ] . x - C [ 0 ] . x ) + ( C [ 1 ] . y - C [ 0 ] . y ) * ( C [ 1 ] . y - C [ 0 ] . y ) ) ;"}
{"text":"Stores the status if the given given criteria is satisfied or not","code":"let flag = false ;"}
{"text":"If C1C2 is less than the sum of the radii of the first 2 circles","code":"if ( C1C2 < ( C [ 0 ] . r + C [ 1 ] . r ) ) {"}
{"text":"If C3 is the midpoint of the centres at C1 and C2","code":"if ( ( C [ 0 ] . x + C [ 1 ] . x ) == 2 * C [ 2 ] . x && ( C [ 0 ] . y + C [ 1 ] . y ) == 2 * C [ 2 ] . y ) {"}
{"text":"Mark flag true","code":"flag = true ; } }"}
{"text":"Return flag","code":"return flag ; }"}
{"text":"Function to check if the given circles satisfy required criteria","code":"function IsFairTriplet ( c ) { let f = false ;"}
{"text":"Check for the current combination of circles","code":"f |= check ( c ) ; for ( let i = 0 ; i < 2 ; i ++ ) { swap ( c [ 0 ] , c [ 2 ] ) ;"}
{"text":"Check for the next combination","code":"f |= check ( c ) ; } return f ; } function swap ( circle1 , circle2 ) { let temp = circle1 ; circle1 = circle2 ; circle2 = temp ; }"}
{"text":"Driver Code","code":"let C = new Array ( 3 ) ; C [ 0 ] = new circle ( 0 , 0 , 8 ) ; C [ 1 ] = new circle ( 0 , 10 , 6 ) ; C [ 2 ] = new circle ( 0 , 5 , 5 ) ; if ( IsFairTriplet ( C ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to find the eccentricity of a hyperbola","code":"function eccHyperbola ( A , B ) {"}
{"text":"Stores the squared ratio of major axis to minor axis","code":"let r = B * B \/ A * A ;"}
{"text":"Increment r by 1","code":"r += 1 ;"}
{"text":"Return the square root of r","code":"return Math . sqrt ( r ) ; }"}
{"text":"Driver Code","code":"let A = 3.0 ; let B = 2.0 ; document . write ( eccHyperbola ( A , B ) ) ;"}
{"text":"Function to find the area of cyclic quadrilateral","code":"function calculateArea ( A , B , C , D ) {"}
{"text":"Stores the value of half of the perimeter","code":"let S = ( A + B + C + D ) \/ 2"}
{"text":"Stores area of cyclic quadrilateral","code":"let area = Math . sqrt ( ( S - A ) * ( S - B ) * ( S - C ) * ( S - D ) )"}
{"text":"Return the resultant area","code":"return area ; }"}
{"text":"Driver Code","code":"let A = 10 ; let B = 15 ; let C = 20 ; let D = 25 ; document . write ( calculateArea ( A , B , C , D ) . toFixed ( 3 ) )"}
{"text":"Function to calculate ratio of a triangle inscribed in an ellipse to the triangle on the auxiliary circle","code":"function triangleArea ( a , b ) {"}
{"text":"Stores the ratio of the semi - major to semi - minor axes","code":"ratio = b \/ a"}
{"text":"Print the ratio","code":"document . write ( ratio ) }"}
{"text":"Driver Code","code":"var a = 1 var b = 2 triangleArea ( a , b )"}
{"text":"Function to calculate the distance between a pair of pos","code":"function distance ( m , n , p , q ) { return Math . sqrt ( Math . pow ( n - m , 2 ) + Math . pow ( q - p , 2 ) * 1.0 ) ; }"}
{"text":"Function to calculate the coordinates of the excenters of a triangle","code":"function Excenters ( x1 , y1 , x2 , y2 , x3 , y3 ) {"}
{"text":"Length of the sides of the triangle","code":"var a = distance ( x2 , x3 , y2 , y3 ) ; var b = distance ( x3 , x1 , y3 , y1 ) ; var c = distance ( x1 , x2 , y1 , y2 ) ;"}
{"text":"Stores the coordinates of the excenters of the triangle","code":"var excenter = new Array ( 4 ) ; for ( var i = 0 ; i < 4 ; i ++ ) excenter [ i ] = new Array ( 2 ) ;"}
{"text":"For I1","code":"excenter [ 1 ] [ 0 ] = ( - ( a * x1 ) + ( b * x2 ) + ( c * x3 ) ) \/ ( - a + b + c ) ; excenter [ 1 ] [ 1 ] = ( - ( a * y1 ) + ( b * y2 ) + ( c * y3 ) ) \/ ( - a + b + c ) ;"}
{"text":"For I2","code":"excenter [ 2 ] [ 0 ] = ( ( a * x1 ) - ( b * x2 ) + ( c * x3 ) ) \/ ( a - b + c ) ; excenter [ 2 ] [ 1 ] = ( ( a * y1 ) - ( b * y2 ) + ( c * y3 ) ) \/ ( a - b + c ) ;"}
{"text":"For I3","code":"excenter [ 3 ] [ 0 ] = ( ( a * x1 ) + ( b * x2 ) - ( c * x3 ) ) \/ ( a + b - c ) ; excenter [ 3 ] [ 1 ] = ( ( a * y1 ) + ( b * y2 ) - ( c * y3 ) ) \/ ( a + b - c ) ;"}
{"text":"Prvar the excenters of the triangle","code":"for ( var i = 1 ; i <= 3 ; i ++ ) { document . write ( excenter [ i ] [ 0 ] + \" \" + excenter [ i ] [ 1 ] + \" \" ) ; } }"}
{"text":"Driver Code","code":"var x1 , x2 , x3 , y1 , y2 , y3 ; x1 = 0 ; x2 = 3 ; x3 = 0 ; y1 = 0 ; y2 = 0 ; y3 = 4 ; Excenters ( x1 , y1 , x2 , y2 , x3 , y3 ) ;"}
{"text":"Function to find icositetragonal number","code":"function Icositetragonal_num ( n ) {"}
{"text":"Formula to calculate nth icositetragonal number","code":"return ( 22 * n * n - 20 * n ) \/ 2 ; }"}
{"text":"Driver code","code":"let n = 3 ; document . write ( Icositetragonal_num ( n ) + \" \" ) ; n = 10 ; document . write ( Icositetragonal_num ( n ) ) ;"}
{"text":"Function to find area of circle inscribed in a trapezoid having non - parallel sides m , n","code":"function area_of_circle ( m , n ) {"}
{"text":"Radius of circle by the formula i . e . root ( m * n ) \/ 2 area of circle = ( 3.141 ) * ( R * * 2 )","code":"var square_of_radius = ( m * n ) \/ 4 ; var area = ( 3.141 * square_of_radius ) ; return area ; }"}
{"text":"Driver Code","code":"var n = 10 ; var m = 30 ; document . write ( area_of_circle ( m , n ) ) ;"}
{"text":"Function to find the area of equilateral triangle inscribed in a circle of radius R","code":"function area ( R ) {"}
{"text":"Base and Height of equilateral triangle","code":"var base = 1.732 * R ; var height = ( 1.5 ) * R ;"}
{"text":"Area using Base and Height","code":"var area = 0.5 * base * height ; return area ; }"}
{"text":"Driver code","code":"var R = 7 ; document . write ( area ( R ) ) ;"}
{"text":"Function to find the area of the circle","code":"function circlearea ( R ) {"}
{"text":"Radius cannot be negative","code":"if ( R < 0 ) return - 1 ;"}
{"text":"Area of the largest circle","code":"var a = 3.14 * R * R \/ 4 ; return a ; }"}
{"text":"Driver code","code":"var R = 2 ; document . write ( circlearea ( R ) ) ;"}
{"text":"Count number of pairs of lines having integer intersection point","code":"function countPairs ( P , Q , N , M ) {"}
{"text":"Initialize arrays to store counts","code":"var A = [ 0 , 0 ] , B = [ 0 , 0 ] ;"}
{"text":"Count number of odd and even Pi","code":"for ( var i = 0 ; i < N ; i ++ ) A [ P [ i ] % 2 ] ++ ;"}
{"text":"Count number of odd and even Qi","code":"for ( var i = 0 ; i < M ; i ++ ) B [ Q [ i ] % 2 ] ++ ;"}
{"text":"Return the count of pairs","code":"return ( A [ 0 ] * B [ 0 ] + A [ 1 ] * B [ 1 ] ) ; }"}
{"text":"Driver code","code":"var P = [ 1 , 3 , 2 ] , Q = [ 3 , 0 ] ; var N = P . length ; var M = Q . length ; document . write ( countPairs ( P , Q , N , M ) ) ;"}
{"text":"Function to count maximum number of intersections possible","code":"function countIntersections ( n ) { return n * ( n - 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"var n = 3 ; document . write ( countIntersections ( n ) ) ;"}
{"text":"Javascript implementation of the approach","code":"var PI = 3.14159"}
{"text":"Function to return the area of triangle BCD","code":"function areaOfTriangle ( d ) {"}
{"text":"Using Golden ratio","code":"var c = 1.618 * d ; var s = ( d + c + c ) \/ 2 ;"}
{"text":"Calculate area of triangle BCD","code":"var area = Math . sqrt ( s * ( s - c ) * ( s - c ) * ( s - d ) ) ;"}
{"text":"Return area of all 5 triangle are same","code":"return 5 * area ; }"}
{"text":"Function to return the area of regular pentagon","code":"function areaOfRegPentagon ( d ) {"}
{"text":"Calculate the area of regular pentagon using above formula","code":"var cal = 4 * Math . tan ( PI \/ 5 ) ; var area = ( 5 * d * d ) \/ cal ;"}
{"text":"Return area of regular pentagon","code":"return area ; }"}
{"text":"Function to return the area of pentagram","code":"function areaOfPentagram ( d ) {"}
{"text":"Area of a pentagram is equal to the area of regular pentagon and five times the area of Triangle","code":"return areaOfRegPentagon ( d ) + areaOfTriangle ( d ) ; }"}
{"text":"Driver code","code":"var d = 5 ; document . write ( areaOfPentagram ( d ) . toFixed ( 3 ) ) ;"}
{"text":"javascript program to find the angle subtended by the chord to the centre of the circle when the angle subtended by another equal chord of a congruent circle is given","code":"function anglequichord ( z ) { document . write ( \" \" + z + \" \" ) ; }"}
{"text":"Driver code","code":"var z = 48 ; anglequichord ( z ) ;"}
{"text":"Function to convert digits of N to respective ASCII values","code":"function convertToASCII ( N ) { let num = N . toString ( ) ; for ( let ch = 0 ; ch < num . length ; ch ++ ) { document . write ( num [ ch ] + \" \" + num [ ch ] . charCodeAt ( 0 ) + \" \" ) ; } }"}
{"text":"Driver Code","code":"let N = 36 ; convertToASCII ( N ) ;"}
{"text":"Function to form product array with O ( n ) time and O ( 1 ) space","code":"function productExceptSelf ( arr , N ) {"}
{"text":"Stores the product of array","code":"let product = 1 ;"}
{"text":"Stores the count of zeros","code":"let z = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If arr [ i ] is not zero","code":"if ( arr [ i ] != 0 ) product *= arr [ i ] ;"}
{"text":"If arr [ i ] is zero then increment count of z by 1","code":"if ( arr [ i ] == 0 ) z += 1 ; }"}
{"text":"Stores the absolute value of the product","code":"let a = Math . abs ( product ) ; for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If Z is equal to 1","code":"if ( z == 1 ) {"}
{"text":"If arr [ i ] is not zero","code":"if ( arr [ i ] != 0 ) arr [ i ] = 0 ;"}
{"text":"Else","code":"else arr [ i ] = product ; continue ; }"}
{"text":"If count of 0 s at least 2","code":"else if ( z > 1 ) {"}
{"text":"Assign arr [ i ] = 0","code":"arr [ i ] = 0 ; continue ; }"}
{"text":"Store absolute value of arr [ i ]","code":"let b = Math . abs ( arr [ i ] ) ;"}
{"text":"Find the value of a \/ b","code":"let curr = Math . round ( Math . exp ( Math . log ( a ) - Math . log ( b ) ) ) ;"}
{"text":"If arr [ i ] and product both are less than zero","code":"if ( arr [ i ] < 0 && product < 0 ) arr [ i ] = curr ;"}
{"text":"If arr [ i ] and product both are greater than zero","code":"else if ( arr [ i ] > 0 && product > 0 ) arr [ i ] = curr ;"}
{"text":"Else","code":"else arr [ i ] = - 1 * curr ; }"}
{"text":"Traverse the array arr [ ]","code":"for ( let i = 0 ; i < N ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; } }"}
{"text":"Driver Code","code":"let arr = [ 10 , 3 , 5 , 6 , 2 ] ; let N = arr . length ;"}
{"text":"Function Call","code":"productExceptSelf ( arr , N ) ;"}
{"text":"Function to count of subarrays made up of single digit integers only","code":"function singleDigitSubarrayCount ( arr , N ) {"}
{"text":"Stores count of subarrays","code":"let res = 0 ;"}
{"text":"Stores the count of consecutive single digit numbers in the array","code":"let count = 0 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < N ; i ++ ) { if ( arr [ i ] <= 9 ) {"}
{"text":"Increment size of block by 1","code":"count ++ ;"}
{"text":"Increment res by count","code":"res += count ; } else {"}
{"text":"Assign count = 0","code":"count = 0 ; } } document . write ( res ) ; }"}
{"text":"Given array","code":"let arr = [ 0 , 1 , 14 , 2 , 5 ] ;"}
{"text":"Size of the array","code":"let N = arr . length ; singleDigitSubarrayCount ( arr , N ) ;"}
{"text":"Function to check if the number N can be expressed as sum of 2 or more consecutive numbers or not","code":"function isPossible ( N ) { return ( ( ( N & ( N - 1 ) ) & N ) ) ; }"}
{"text":"Function to count integers in the range [ 1 , N ] that can be expressed as sum of 2 or more consecutive numbers","code":"function countElements ( N ) {"}
{"text":"Stores the required count","code":"var count = 0 ; for ( i = 1 ; i <= N ; i ++ ) { if ( isPossible ( i ) != 0 ) count ++ ; } document . write ( count ) ; }"}
{"text":"Driver Code","code":"var N = 15 ; countElements ( N ) ;"}
{"text":"Function to count integers in the range [ 1 , N ] that can be expressed as sum of 2 or more consecutive numbers","code":"function countElements ( N ) { var Cur_Ele = 1 ; var Count = 0 ;"}
{"text":"Count powers of 2 up to N","code":"while ( Cur_Ele <= N ) {"}
{"text":"Increment count","code":"Count ++ ;"}
{"text":"Update current power of 2","code":"Cur_Ele = Cur_Ele * 2 ; } document . write ( N - Count ) ; }"}
{"text":"Driver Code","code":"var N = 15 ; countElements ( N ) ;"}
{"text":"Function to calculate maximum difference between adjacent elements excluding every array element once","code":"function maxAdjacent ( arr , N ) { let res = [ ] ; let arr_max = Number . MIN_VALUE ;"}
{"text":"Compute maximum adjacent difference for whole array","code":"for ( let i = 1 ; i < N ; i ++ ) { arr_max = Math . max ( arr_max , Math . abs ( arr [ i - 1 ] - arr [ i ] ) ) ; } for ( let i = 1 ; i < N - 1 ; i ++ ) { let curr_max = Math . abs ( arr [ i - 1 ] - arr [ i + 1 ] ) ;"}
{"text":"Store the maximum between arr_max and curr_max","code":"let ans = Math . max ( curr_max , arr_max ) ;"}
{"text":"Append the result into a vector","code":"res . push ( ans ) ; }"}
{"text":"Print the result","code":"document . write ( res . join ( \" \" ) ) ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 3 , 4 , 7 , 8 ] ; let N = arr . length ; maxAdjacent ( arr , N ) ;"}
{"text":"Function to find min operations to make even and odd count equal","code":"function minimumIncrement ( arr , N ) {"}
{"text":"Odd size will never make odd and even counts equal","code":"if ( N % 2 != 0 ) { document . write ( \" \" ) ; System . exit ( 0 ) ; }"}
{"text":"Stores the count of even numbers in the array arr","code":"var cntEven = 0 ;"}
{"text":"Stores count of odd numbers in the array arr","code":"var cntOdd = 0 ;"}
{"text":"Traverse the array arr","code":"for ( i = 0 ; i < N ; i ++ ) {"}
{"text":"If arr [ i ] is an even number","code":"if ( arr [ i ] % 2 == 0 ) {"}
{"text":"Update cntEven","code":"cntEven += 1 ; } }"}
{"text":"Odd numbers in arr","code":"cntOdd = N - cntEven ;"}
{"text":"Return absolute difference divided by 2","code":"return Math . abs ( cntEven - cntOdd ) \/ 2 ; }"}
{"text":"Driver code","code":"var arr = [ 1 , 3 , 4 , 9 ] ; var N = arr . length ;"}
{"text":"Function call","code":"document . write ( minimumIncrement ( arr , N ) ) ;"}
{"text":"Function to find count the ways to construct an array , B such that abs ( A [ i ] - B [ i ] ) <= 1 and product of elements of B is even","code":"function cntWaysConsArray ( A , N ) {"}
{"text":"Stores count of arrays B such that abs ( A [ i ] - B [ i ] ) <= 1","code":"var total = 1 ;"}
{"text":"Stores count of arrays B whose product of elements is not even","code":"var oddArray = 1 ;"}
{"text":"Traverse the array","code":"for ( i = 0 ; i < N ; i ++ ) {"}
{"text":"Update total","code":"total = total * 3 ;"}
{"text":"If A [ i ] is an even number","code":"if ( A [ i ] % 2 == 0 ) {"}
{"text":"Update oddArray","code":"oddArray *= 2 ; } }"}
{"text":"Print var 3 ^ N - 2 ^ X","code":"document . write ( total - oddArray ) ; }"}
{"text":"Driver Code","code":"var A = [ 2 , 4 ] ; var N = A . length ; cntWaysConsArray ( A , N ) ;"}
{"text":"Function to count the numbers in the range [ 1 , N ] whose rightmost set bit is K","code":"function countNumberHavingKthBitSet ( N , K ) {"}
{"text":"Stores the number whose rightmost set bit is K","code":"let numbers_rightmost_setbit_K = 0 ; for ( let i = 1 ; i <= K ; i ++ ) {"}
{"text":"Numbers whose rightmost set bit is i","code":"let numbers_rightmost_bit_i = ( N + 1 ) \/ 2 ;"}
{"text":"Subtracting the number whose rightmost set bit is i , from N","code":"N -= numbers_rightmost_bit_i ;"}
{"text":"Since i = k , then the number whose rightmost set bit is K is stored","code":"if ( i == K ) { numbers_rightmost_setbit_K = numbers_rightmost_bit_i ; } } document . write ( numbers_rightmost_setbit_K ) ; }"}
{"text":"Driver Code","code":"let N = 15 ; let K = 2 ; countNumberHavingKthBitSet ( N , K ) ;"}
{"text":"Function to count set bits in binary representation of number N","code":"function countSetBits ( N ) { let count = 0 ;"}
{"text":"Count set bits in N","code":"while ( N != 0 ) { N = N & ( N - 1 ) ; count ++ ; }"}
{"text":"Return the final count","code":"return count ; }"}
{"text":"Driver Code","code":"let N = 4 ; let bits = countSetBits ( N ) ;"}
{"text":"Print odd Binomial coefficients","code":"document . write ( \" \" + \" \" + ( Math . pow ( 2 , bits ) ) + \" \" ) ;"}
{"text":"Print even Binomial coefficients","code":"document . write ( \" \" + \" \" + ( N + 1 - ( Math . pow ( 2 , bits ) ) ) ) ;"}
{"text":"Function to find the minimum number of replacements required to make all array elements even","code":"function minMoves ( arr , N ) {"}
{"text":"Stores the count of odd elements","code":"var odd_element_cnt = 0 ; var i ;"}
{"text":"Traverse the array","code":"for ( i = 0 ; i < N ; i ++ ) {"}
{"text":"Increase count of odd elements","code":"if ( arr [ i ] % 2 != 0 ) { odd_element_cnt ++ ; } }"}
{"text":"Store number of replacements required","code":"var moves = Math . floor ( ( odd_element_cnt ) \/ 2 ) ;"}
{"text":"Two extra moves will be required to make the last odd element even","code":"if ( odd_element_cnt % 2 != 0 ) moves += 2 ;"}
{"text":"Print the minimum replacements","code":"document . write ( moves ) ; }"}
{"text":"Driver Code","code":"var arr = [ 5 , 6 , 3 , 7 , 20 ] ; N = arr . length ;"}
{"text":"Function call","code":"minMoves ( arr , N ) ;"}
{"text":"Function to partition squares of N natural number in two subset","code":"function minimumSubsetDifference ( N ) {"}
{"text":"Store the count of blocks of size 8","code":"let blockOfSize8 = N \/ 8 ;"}
{"text":"Partition of block of 8 element","code":"let str = \" \" ;"}
{"text":"Store the minimum subset difference","code":"let subsetDifference = 0 ;"}
{"text":"Partition of N elements to minimize their subset sum difference","code":"let partition = \" \" ; while ( blockOfSize8 -- > 0 ) { partition += str ; }"}
{"text":"Store elements of subset A and B","code":"let A = [ ] ; let B = [ ] ; let x = 0 , y = 0 ; for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"If element is of type A","code":"if ( partition [ i ] == ' ' ) { A [ x ++ ] = ( ( i + 1 ) * ( i + 1 ) ) ; }"}
{"text":"If the element is of type B","code":"else { B [ y ++ ] = ( ( i + 1 ) * ( i + 1 ) ) ; } }"}
{"text":"Print the minimum subset difference","code":"document . write ( subsetDifference + \" \" ) ;"}
{"text":"Print the first subset","code":"for ( let i = 0 ; i < x ; i ++ ) document . write ( A [ i ] + \" \" ) ; document . write ( \" \" ) ;"}
{"text":"Print the second subset","code":"for ( let i = 0 ; i < y ; i ++ ) document . write ( B [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"let N = 8 ;"}
{"text":"Function Call","code":"minimumSubsetDifference ( N ) ;"}
{"text":"Function to find the largest number X such that it divides P but is not divisible by Q","code":"function findTheGreatestX ( P , Q ) {"}
{"text":"Stores the frequency count of of all Prime Factors","code":"var divisiors = new Map ( ) ; for ( var i = 2 ; i * i <= Q ; i ++ ) { while ( Q % i == 0 && Q > 1 ) { Q = parseInt ( Q \/ i ) ;"}
{"text":"Increment the frequency of the current prime factor","code":"if ( divisiors . has ( i ) ) divisiors . set ( i , divisiors . get ( i ) + 1 ) else divisiors . set ( i , 1 ) } }"}
{"text":"If Q is a prime factor","code":"if ( Q > 1 ) if ( divisiors . has ( Q ) ) divisiors . set ( Q , divisiors . get ( Q ) + 1 ) else divisiors . set ( Q , 1 )"}
{"text":"Stores the desired result","code":"var ans = 0 ;"}
{"text":"Iterate through all divisors of Q","code":"divisiors . forEach ( ( value , key ) => { var frequency = value ; var temp = P ;"}
{"text":"Stores the frequency count of current prime divisor on dividing P","code":"var cur = 0 ; while ( temp % key == 0 ) { temp = parseInt ( temp \/ key ) ;"}
{"text":"Count the frequency of the current prime factor","code":"cur ++ ; }"}
{"text":"If cur is less than frequency then P is the final result","code":"if ( cur < frequency ) { ans = P ; } temp = P ;"}
{"text":"Iterate to get temporary answer","code":"for ( var j = cur ; j >= frequency ; j -- ) { temp = parseInt ( temp \/ key ) ; }"}
{"text":"Update current answer","code":"ans = Math . max ( temp , ans ) ; } ) ;"}
{"text":"Print the desired result","code":"document . write ( ans ) ; }"}
{"text":"Given P and Q","code":"var P = 10 , Q = 4 ;"}
{"text":"Function Call","code":"findTheGreatestX ( P , Q ) ;"}
{"text":"Function to check if there is any row where number of unique elements are greater than 1","code":"function checkRearrangements ( mat , N , M ) {"}
{"text":"Iterate over the matrix","code":"for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 1 ; j < M ; j ++ ) { if ( mat [ i ] [ 0 ] != mat [ i ] [ j ] ) { return \" \" ; } } } return \" \" ; }"}
{"text":"Function to check if it is possible to rearrange mat [ ] [ ] such that XOR of its first column is non - zero","code":"function nonZeroXor ( mat , N , M ) { let res = 0 ;"}
{"text":"Find bitwise XOR of the first column of mat [ ] [ ]","code":"for ( let i = 0 ; i < N ; i ++ ) { res = res ^ mat [ i ] [ 0 ] ; }"}
{"text":"If bitwise XOR of the first column of mat [ ] [ ] is non - zero","code":"if ( res != 0 ) return \" \" ;"}
{"text":"Otherwise check rearrangements","code":"else return checkRearrangements ( mat , N , M ) ; }"}
{"text":"Given Matrix mat [ ] [ ]","code":"let mat = [ [ 1 , 1 , 2 ] , [ 2 , 2 , 2 ] , [ 3 , 3 , 3 ] ] ; let N = mat . length ; let M = mat [ 0 ] . length ;"}
{"text":"Function Call","code":"document . write ( nonZeroXor ( mat , N , M ) ) ;"}
{"text":"Javascript Program to implement the above approach","code":"var size_int = 32 ;"}
{"text":"Function to maximize the value for the given function and the array elements","code":"function functionMax ( arr , n ) {"}
{"text":"Vector array to maintain which bit is set for which integer in the given array by saving index of that integer","code":"var setBit = Array . from ( Array ( 32 ) , ( ) => new Array ( ) ) ; for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < size_int ; j ++ ) {"}
{"text":"Check if j - th bit is set for i - th integer","code":"if ( arr [ i ] & ( 1 << j ) )"}
{"text":"Push the index of that integer in setBit [ j ]","code":"setBit [ j ] . push ( i ) ; } }"}
{"text":"Find the element having highest significant set bit unset in other elements","code":"for ( var i = size_int - 1 ; i >= 0 ; i -- ) { if ( setBit [ i ] . length == 1 ) {"}
{"text":"Place that integer at 0 - th index","code":"[ arr [ 0 ] , arr [ setBit [ i ] [ 0 ] ] ] = [ arr [ setBit [ i ] [ 0 ] ] , arr [ 0 ] ] ; break ; } }"}
{"text":"Store the maximum AND value","code":"var maxAnd = arr [ 0 ] ; for ( var i = 1 ; i < n ; i ++ ) { maxAnd = maxAnd & ( ~ arr [ i ] ) ; }"}
{"text":"Return the answer","code":"return maxAnd ; }"}
{"text":"Driver Code","code":"var arr = [ 1 , 2 , 4 , 8 , 16 ] ; var n = arr . length ;"}
{"text":"Function call","code":"document . write ( functionMax ( arr , n ) ) ;"}
{"text":"Function returns nCr i . e . Binomial Coefficient","code":"function nCr ( n , r ) {"}
{"text":"Initialize res with 1","code":"let res = 1 ;"}
{"text":"Since C ( n , r ) = C ( n , n - r )","code":"if ( r > n - r ) r = n - r ;"}
{"text":"Evaluating expression","code":"for ( let i = 0 ; i < r ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; }"}
{"text":"Function to calculate and return the sum of the products","code":"function solve ( n , m , k ) {"}
{"text":"Initialize sum to 0","code":"let sum = 0 ;"}
{"text":"Traverse from 0 to k","code":"for ( let i = 0 ; i <= k ; i ++ ) sum += nCr ( n , i ) * nCr ( m , k - i ) ; return sum ; }"}
{"text":"Driver Code","code":"let n = 3 , m = 2 , k = 2 ; document . write ( solve ( n , m , k ) ) ;"}
{"text":"Function to return a ^ n","code":"function powerOptimised ( a , n ) {"}
{"text":"Stores final answer","code":"let ans = 1 ; while ( n > 0 ) { let last_bit = ( n & 1 ) ;"}
{"text":"Check if current LSB is set","code":"if ( last_bit > 0 ) { ans = ans * a ; } a = a * a ;"}
{"text":"Right shift","code":"n = n >> 1 ; } return ans ; }"}
{"text":"Driver Code","code":"let a = 3 , n = 5 ; document . write ( powerOptimised ( a , n ) ) ;"}
{"text":"Function to find the integer M such that gcd ( N , M ) is maximum","code":"function findMaximumGcd ( n ) {"}
{"text":"Initialize a variable","code":"let max_gcd = 1 ;"}
{"text":"Find all the divisors of N and return the maximum divisor","code":"for ( let i = 1 ; i * i <= n ; i ++ ) {"}
{"text":"Check if i is divisible by N","code":"if ( n % i == 0 ) {"}
{"text":"Update max_gcd","code":"if ( i > max_gcd ) max_gcd = i ; if ( ( n \/ i != i ) && ( n \/ i != n ) && ( ( n \/ i ) > max_gcd ) ) max_gcd = n \/ i ; } }"}
{"text":"Return the maximum value","code":"return max_gcd ; }"}
{"text":"Given Number","code":"let N = 10 ;"}
{"text":"Function Call","code":"document . write ( findMaximumGcd ( N ) ) ;"}
{"text":"Javascript program for the above approach","code":"let x = 2000021"}
{"text":"For storing smallest prime factor","code":"let v = new Array ( x ) ;"}
{"text":"Function construct smallest prime factor array","code":"function sieve ( ) { v [ 1 ] = 1 ;"}
{"text":"Mark smallest prime factor for every number to be itself .","code":"for ( let i = 2 ; i < x ; i ++ ) v [ i ] = i ;"}
{"text":"separately mark spf for every even number as 2","code":"for ( let i = 4 ; i < x ; i += 2 ) v [ i ] = 2 ; for ( let i = 3 ; i * i < x ; i ++ ) {"}
{"text":"Check if i is prime","code":"if ( v [ i ] == i ) {"}
{"text":"Mark SPF for all numbers divisible by i","code":"for ( let j = i * i ; j < x ; j += i ) {"}
{"text":"Mark spf [ j ] if it is not previously marked","code":"if ( v [ j ] == j ) { v [ j ] = i ; } } } } }"}
{"text":"Function for counts total number of prime factors","code":"function prime_factors ( n ) { let s = new Set ( ) ; while ( n != 1 ) { s . add ( v [ n ] ) ; n = n \/ v [ n ] ; } return s . size ; }"}
{"text":"Function to print elements of sets of K consecutive elements having K prime factors","code":"function distinctPrimes ( m , k ) {"}
{"text":"To store the result","code":"let result = new Array ( ) ; for ( let i = 14 ; i < m + k ; i ++ ) {"}
{"text":"Count number of prime factors of number","code":"let count = prime_factors ( i ) ;"}
{"text":"If number has exactly K factors push in result [ ]","code":"if ( count == k ) { result . push ( i ) ; } } let p = result . length ; for ( let index = 0 ; index < p - 1 ; index ++ ) { let element = result [ index ] ; let count = 1 , z = index ;"}
{"text":"Iterate till we get K consecutive elements in result [ ]","code":"while ( z < p - 1 && count <= k && result [ z ] + 1 == result [ z + 1 ] ) {"}
{"text":"Count sequence until K","code":"count ++ ; z ++ ; }"}
{"text":"Print the element if count >= K","code":"if ( count >= k ) document . write ( element + ' ' ) ; } }"}
{"text":"To construct spf [ ]","code":"sieve ( ) ;"}
{"text":"Given N and K","code":"let N = 1000 , K = 3 ;"}
{"text":"Function Call","code":"distinctPrimes ( N , K ) ;"}
{"text":"Function to multiply Complex Numbers with just three multiplications","code":"function print_product ( a , b , c , d ) {"}
{"text":"Find value of prod1 , prod2 and prod3","code":"let prod1 = a * c ; let prod2 = b * d ; let prod3 = ( a + b ) * ( c + d ) ;"}
{"text":"Real Part","code":"let real = prod1 - prod2 ;"}
{"text":"Imaginary Part","code":"let imag = prod3 - ( prod1 + prod2 ) ;"}
{"text":"Print the result","code":"document . write ( real + \" \" + imag + \" \" ) ; }"}
{"text":"Driver Code","code":"let a , b , c , d ;"}
{"text":"Given four Numbers","code":"a = 2 ; b = 3 ; c = 4 ; d = 5 ;"}
{"text":"Function Call","code":"print_product ( a , b , c , d ) ;"}
{"text":"Function to check if a number is an Insolite numbers","code":"function isInsolite ( n ) { let N = n ;"}
{"text":"To store sum of squares of digits","code":"let sum = 0 ;"}
{"text":"To store product of squares of digits","code":"let product = 1 ; while ( n != 0 ) {"}
{"text":"extracting digit","code":"let r = n % 10 ; sum = sum + r * r ; product = product * r * r ; n = parseInt ( n \/ 10 ) ; } return ( N % sum == 0 ) && ( N % product == 0 ) ; }"}
{"text":"Driver Code","code":"let N = 111 ;"}
{"text":"Function Call","code":"if ( isInsolite ( N ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to calculate the sum of all divisors of a given number","code":"function sigma ( n ) { if ( n == 1 ) return 1 ;"}
{"text":"Sum of divisors","code":"var result = 0 ;"}
{"text":"find all divisors which divides ' num '","code":"for ( var i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) {"}
{"text":"if ' i ' is divisor of ' n '","code":"if ( n % i == 0 ) {"}
{"text":"if both divisors are same then add it once else add both","code":"if ( i == ( n \/ i ) ) result += i ; else result += ( i + n \/ i ) ; } }"}
{"text":"Add 1 and n to result as above loop considers proper divisors greater than 1.","code":"return ( result + n + 1 ) ; }"}
{"text":"Function to check if N is a superabundant number","code":"function isSuperabundant ( N ) {"}
{"text":"to check all numbers from 1 to N","code":"for ( var i = 1 ; i < N ; i ++ ) { var x = sigma ( i ) \/ i ; var y = sigma ( N ) \/ ( N * 1.0 ) ; if ( x > y ) return false ; } return true ; }"}
{"text":"Driver code","code":"var N = 4 ; isSuperabundant ( N ) ? document . write ( \" \" ) : document . write ( \" \" ) ;"}
{"text":"Function to find the N - th icosikaipentagon number","code":"function isDNum ( n ) {"}
{"text":"Number should be greater than 3","code":"if ( n < 4 ) return false ; let numerator = 0 , hcf = 0 ;"}
{"text":"Check every k in range 2 to n - 1","code":"for ( k = 2 ; k <= n ; k ++ ) { numerator = parseInt ( ( Math . pow ( k , n - 2 ) - k ) ) ; hcf = __gcd ( n , k ) ; }"}
{"text":"Condition for D - Number","code":"if ( hcf == 1 && ( numerator % n ) != 0 ) return false ; return true ; } function __gcd ( a , b ) { return b == 0 ? a : __gcd ( b , a % b ) ; }"}
{"text":"Driver Code","code":"let n = 15 ; let a = isDNum ( n ) ; if ( a ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to find prime divisors of all numbers from 1 to N","code":"function Sum ( N ) { let SumOfPrimeDivisors = Array ( N + 1 ) . fill ( 0 ) ; for ( let i = 2 ; i <= N ; ++ i ) {"}
{"text":"if the number is prime","code":"if ( SumOfPrimeDivisors [ i ] == 1 ) {"}
{"text":"add this prime to all it 's multiples","code":"for ( let j = i ; j <= N ; j += i ) { SumOfPrimeDivisors [ j ] += i ; } } } return SumOfPrimeDivisors [ N ] ; }"}
{"text":"Function to check Ruth - Aaron number","code":"function RuthAaronNumber ( n ) { if ( Sum ( n ) == Sum ( n + 1 ) ) return true ; else return false ; }"}
{"text":"Driver code","code":"let N = 714 ; if ( RuthAaronNumber ( N ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function for maximising the sum","code":"function maxAdjacentDifference ( N , K ) {"}
{"text":"Difference is 0 when only one element is present in array","code":"if ( N == 1 ) { return 0 ; }"}
{"text":"Difference is K when two elements are present in array","code":"if ( N == 2 ) { return K ; }"}
{"text":"Otherwise","code":"return 2 * K ; }"}
{"text":"Driver Code","code":"let N = 6 ; let K = 11 ; document . write ( maxAdjacentDifference ( N , K ) ) ;"}
{"text":"JavaScript program for the above approach","code":"let mod = 1000000007 ;"}
{"text":"Functions returns sum of numbers from 1 to n","code":"function linearSum ( n ) { return ( n * ( n + 1 ) \/ 2 ) % mod ; }"}
{"text":"Functions returns sum of numbers from a + 1 to b","code":"function rangeSum ( b , a ) { return ( linearSum ( b ) - linearSum ( a ) ) % mod ; }"}
{"text":"Function returns total sum of divisors","code":"function totalSum ( n ) {"}
{"text":"Stores total sum","code":"let result = 0 ; let i = 1 ;"}
{"text":"Finding numbers and its occurence","code":"while ( true ) {"}
{"text":"Sum of product of each number and its occurence","code":"result += rangeSum ( Math . floor ( n \/ i ) , Math . floor ( n \/ ( i + 1 ) ) ) * ( i % mod ) % mod ; result %= mod ; if ( i == n ) break ; i = Math . floor ( n \/ ( n \/ ( i + 1 ) ) ) ; } return result ; }"}
{"text":"Driver Code","code":"let N = 4 ; document . write ( totalSum ( N ) + \" \" ) ; N = 12 ; document . write ( totalSum ( N ) ) ;"}
{"text":"Function to check if a string is double string or not","code":"function isDouble ( num ) { let s = num . toString ( ) ; let l = s . length ;"}
{"text":"a and b should not be equal","code":"if ( s [ 0 ] == s . charAt [ 1 ] ) return false ;"}
{"text":"Condition to check if length is odd make length even","code":"if ( l % 2 == 1 ) { s = s + s [ 1 ] ; l ++ ; }"}
{"text":"First half of s","code":"let s1 = s . substr ( 0 , l \/ 2 ) ;"}
{"text":"Second half of s","code":"let s2 = s . substr ( l \/ 2 ) ;"}
{"text":"Double string if first and last half are equal","code":"return ( s1 == s2 ) ; }"}
{"text":"Function to check if N is an Nontrivial undulant number","code":"function isNontrivialUndulant ( N ) { return N > 100 && isDouble ( N ) ; }"}
{"text":"Driver Code","code":"let n = 121 ; if ( isNontrivialUndulant ( n ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to find the nth Megagon Number","code":"function MegagonNum ( n ) { return ( 999998 * n * n - 999996 * n ) \/ 2 ; }"}
{"text":"Driver Code","code":"var n = 3 ; document . write ( MegagonNum ( n ) ) ;"}
{"text":"Javascript implementation to find the product of all the pairs from the given array","code":"mod = 1000000007"}
{"text":"Function to return the product of the elements of all possible pairs from the array","code":"function productPairs ( arr , n ) {"}
{"text":"To store the required product","code":"let product = 1 ;"}
{"text":"Nested loop to calculate all possible pairs","code":"for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) {"}
{"text":"Multiply the product of the elements of the current pair","code":"product *= ( arr [ i ] % mod * arr [ j ] % mod ) % mod ; product = product % mod ; } }"}
{"text":"Return the final result","code":"return product % mod ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 ] ; let n = arr . length ; document . write ( productPairs ( arr , n ) ) ;"}
{"text":"Javascript implementation to Find the product of all the pairs from the given array","code":"let mod = 1000000007 ;"}
{"text":"Function to calculate ( x ^ y ) % 1000000007","code":"function power ( x , y ) { let p = 1000000007 ;"}
{"text":"Initialize result","code":"let res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y % 2 == 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; }"}
{"text":"Return the final result","code":"return res ; }"}
{"text":"Function to return the product of the elements of all possible pairs from the array","code":"function productPairs ( arr , n ) {"}
{"text":"To store the required product","code":"let product = 1 ;"}
{"text":"Iterate for every element of the array","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Each element appears ( 2 * n ) times","code":"product = ( product % mod * power ( arr [ i ] , ( 2 * n ) ) % mod ) % mod ; } return product % mod ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 3 ] ; let n = arr . length ; document . write ( productPairs ( arr , n ) ) ;"}
{"text":"Function to create and print the array","code":"function constructArray ( N ) { let arr = new Array ( N ) ;"}
{"text":"initialise the array of size N","code":"for ( let i = 1 ; i <= N ; i ++ ) { arr [ i - 1 ] = i ; }"}
{"text":"Print the array","code":"for ( let i = 0 ; i < N ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; } }"}
{"text":"Driver code","code":"let N = 6 ; constructArray ( N ) ;"}
{"text":"Function to check whether a number is prime or not","code":"function isPrime ( n ) { if ( n <= 1 ) return false ; for ( var i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }"}
{"text":"Function to find number of subsequences whose product is a composite number","code":"function countSubsequences ( arr , n ) {"}
{"text":"Find total non empty subsequence","code":"var totalSubsequence = Math . pow ( 2 , n ) - 1 ; var countPrime = 0 , countOnes = 0 ;"}
{"text":"Find count of prime number and ones","code":"for ( var i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) countOnes ++ ; else if ( isPrime ( arr [ i ] ) ) countPrime ++ ; } var compositeSubsequence ;"}
{"text":"Calculate the non empty one subsequence","code":"var onesSequence = Math . pow ( 2 , countOnes ) - 1 ;"}
{"text":"Find count of composite subsequence","code":"compositeSubsequence = totalSubsequence - countPrime - onesSequence - onesSequence * countPrime ; return compositeSubsequence ; }"}
{"text":"Driver code","code":"var arr = [ 2 , 1 , 2 ] ; var n = arr . length ; document . write ( countSubsequences ( arr , n ) ) ;"}
{"text":"Function to check if a number can be expressed as the sum of k consecutive","code":"function checksum ( n , k ) {"}
{"text":"Finding the first term of AP","code":"var first_term = ( ( ( 2 * n ) \/ k + ( 1 - k ) ) \/ 2.0 ) ;"}
{"text":"Checking if first term is an integer","code":"if ( first_term - parseInt ( ( first_term ) ) == 0 ) {"}
{"text":"Loop to prvar the K consecutive integers","code":"for ( i = parseInt ( first_term ) ; i <= first_term + k - 1 ; i ++ ) { document . write ( i + \" \" ) ; } } else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"var n = 33 , k = 6 ; checksum ( n , k ) ;"}
{"text":"Function to prlet the representation","code":"function sumEvenNumbers ( N , K ) { let check = N - 2 * ( K - 1 ) ;"}
{"text":"N must be greater than equal to 2 * K and must be even","code":"if ( check > 0 && check % 2 == 0 ) { for ( let i = 0 ; i < K - 1 ; i ++ ) { document . write ( \" \" ) ; } document . write ( check ) ; } else { document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"let N = 8 ; let K = 2 ; sumEvenNumbers ( N , K ) ;"}
{"text":"Function to find the number of subarrays including the element at every index of the array","code":"function calculateWays ( n ) { let x = 0 ;"}
{"text":"Creating an array of size N","code":"let v = Array . from ( { length : n } , ( _ , i ) => 0 ) ; for ( let i = 0 ; i < n ; i ++ ) v [ i ] = 0 ;"}
{"text":"The loop is iterated till half the length of the array","code":"for ( let i = 0 ; i < n \/ 2 ; i ++ ) {"}
{"text":"Condition to avoid overwriting the middle element for the array with even length .","code":"if ( n % 2 == 0 && i == n \/ 2 ) break ;"}
{"text":"Computing the number of subarrays","code":"x = n * ( i + 1 ) - ( i + 1 ) * i ;"}
{"text":"The ith element from the beginning and the ending have the same number of possible subarray","code":"v [ i ] = x ; v [ n - i - 1 ] = x ; } return v ; }"}
{"text":"Function to prlet the vector","code":"function prletArray ( v ) { for ( let i = 0 ; i < v . length ; i ++ ) document . write ( v [ i ] + \" \" ) ; }"}
{"text":"Driver Code","code":"let v ; v = calculateWays ( 4 ) ; prletArray ( v ) ;"}
{"text":"javascript program to find the smallest number greater than or equal to X and divisible by Y","code":"var MAXN = 10000000 ;"}
{"text":"Function that returns the sum of digits of a number","code":"function sumOfDigits ( n ) {"}
{"text":"Initialize variable to store the sum","code":"var sum = 0 ; while ( n > 0 ) {"}
{"text":"Add the last digit of the number","code":"sum += n % 10 ;"}
{"text":"Remove the last digit from the number","code":"n = parseInt ( n \/ 10 ) ; } return sum ; }"}
{"text":"Function that returns the smallest number greater than or equal to X and divisible by Y","code":"function smallestNum ( X , Y ) {"}
{"text":"Initialize result variable","code":"var res = - 1 ;"}
{"text":"Loop through numbers greater than equal to X","code":"for ( i = X ; i < MAXN ; i ++ ) {"}
{"text":"Calculate sum of digits","code":"var sum_of_digit = sumOfDigits ( i ) ;"}
{"text":"Check if sum of digits is divisible by Y","code":"if ( sum_of_digit % Y == 0 ) { res = i ; break ; } } return res ; }"}
{"text":"Driver code","code":"var X = 5923 , Y = 13 ; document . write ( smallestNum ( X , Y ) ) ;"}
{"text":"Function to count the numbers which can convert N to 1 using the given operation","code":"function countValues ( N ) { var div = [ ] ;"}
{"text":"Store all the divisors of N","code":"for ( var i = 2 ; i * i <= N ; i ++ ) {"}
{"text":"If i is a divisor","code":"if ( N % i == 0 ) { div . push ( i ) ;"}
{"text":"If i is not equal to N \/ i","code":"if ( N != i * i ) { div . push ( N \/ i ) ; } } } var answer = 0 ;"}
{"text":"Iterate through all the divisors of N - 1 and count them in answer","code":"for ( var i = 1 ; i * i <= N - 1 ; i ++ ) {"}
{"text":"Check if N - 1 is a divisor or not","code":"if ( ( N - 1 ) % i == 0 ) { if ( i * i == N - 1 ) answer ++ ; else answer += 2 ; } }"}
{"text":"Iterate through all divisors and check for N mod d = 1 or ( N - 1 ) mod d = 0","code":"div . forEach ( d => { var K = N ; while ( K % d == 0 ) K \/= d ; if ( ( K - 1 ) % d == 0 ) answer ++ ; } ) ; return answer ; }"}
{"text":"Driver code","code":"var N = 6 ; document . write ( countValues ( N ) ) ;"}
{"text":"Function to find the maximum possible prime divisors of a number can have with N divisors","code":"function findMaxPrimeDivisor ( n ) { let max_possible_prime = 0 ;"}
{"text":"Number of time number divided by 2","code":"while ( n % 2 == 0 ) { max_possible_prime ++ ; n = Math . floor ( n \/ 2 ) ; }"}
{"text":"Divide by other prime numbers","code":"for ( let i = 3 ; i * i <= n ; i = i + 2 ) { while ( n % i == 0 ) { max_possible_prime ++ ; n = Math . floor ( n \/ i ) ; } }"}
{"text":"If the last number of also prime then also include it","code":"if ( n > 2 ) { max_possible_prime ++ ; } document . write ( max_possible_prime + \" \" ) ; }"}
{"text":"Driver Code","code":"let n = 4 ;"}
{"text":"Function Call","code":"findMaxPrimeDivisor ( n ) ;"}
{"text":"Function returns the count of ways express a number as sum of two numbers .","code":"function CountWays ( n ) { let ans = Math . floor ( ( n - 1 ) \/ 2 ) ; return ans ; }"}
{"text":"Driver Code","code":"let N = 8 ; document . write ( CountWays ( N ) ) ;"}
{"text":"Function to find the max - size to which an array can be divided leto 2 equal parts","code":"function Solve ( arr , size , n ) { let v = Array . from ( { length : n + 1 } , ( _ , i ) => 0 ) ;"}
{"text":"Array to find the frequency of each element of array","code":"for ( let i = 0 ; i < size ; i ++ ) v [ arr [ i ] ] ++ ;"}
{"text":"Find the index maximum frequency element present in array arr [ ]","code":"let max1 = - 1 , mx = - 1 ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] > mx ) { mx = v [ i ] ; max1 = i ; } }"}
{"text":"Find total unique elements present in array arr [ ]","code":"let cnt = 0 ; for ( let i in v ) { if ( i == 0 ) ++ cnt ; } let diff1 = n + 1 - cnt ;"}
{"text":"Find the Max - Size to which an array arr [ ] can be splitted","code":"let max_size = Math . max ( Math . min ( v [ max1 ] - 1 , diff1 ) , Math . min ( v [ max1 ] , diff1 - 1 ) ) ; document . write ( \" \" + max_size + \" \" ) ;"}
{"text":"Find the first array containing same elements","code":"document . write ( \" \" + \" \" ) ; for ( let i = 0 ; i < max_size ; i ++ ) { document . write ( max1 + \" \" ) ; v [ max1 ] -= 1 ; } document . write ( \" \" ) ;"}
{"text":"Find the second array containing unique elements","code":"document . write ( \" \" + \" \" ) ; for ( let i = 0 ; i < ( n + 1 ) ; i ++ ) { if ( v [ i ] > 0 ) { document . write ( i + \" \" ) ; max_size -- ; } if ( max_size < 1 ) break ; } document . write ( \" \" ) ; }"}
{"text":"initialise n","code":"let n = 7 ;"}
{"text":"array declaration","code":"let arr = [ 1 , 2 , 1 , 5 , 1 , 6 , 7 , 2 ] ;"}
{"text":"size of array","code":"let size = arr . length ; Solve ( arr , size , n ) ;"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"function power ( x , y , p ) {"}
{"text":"Initialize result","code":"let res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y >> 1 ; y = y \/ 2","code":"x = ( x * x ) % p ; } return res ; }"}
{"text":"Returns n ^ ( - 1 ) mod p","code":"function modInverse ( n , p ) { return power ( n , p - 2 , p ) ; }"}
{"text":"Returns nCr % p using Fermat 's little theorem.","code":"function nCrModPFermat ( n , r , p ) {"}
{"text":"Base case","code":"if ( r == 0 ) return 1 ; if ( n < r ) return 0 ;"}
{"text":"Fill factorial array so that we can find all factorial of r , n and n - r","code":"let fac = Array . from ( { length : n + 1 } , ( _ , i ) => 0 ) ; fac [ 0 ] = 1 ; for ( let i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % p ; return ( fac [ n ] * modInverse ( fac [ r ] , p ) % p * modInverse ( fac [ n - r ] , p ) % p ) % p ; }"}
{"text":"Function returns sum of xor of all unordered triplets of the array","code":"function SumOfXor ( a , n ) { let mod = 10037 ; let answer = 0 ;"}
{"text":"Iterating over the bits","code":"for ( let k = 0 ; k < 32 ; k ++ ) {"}
{"text":"Number of elements whith k 'th bit  1 and 0 respectively","code":"let x = 0 , y = 0 ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Checking if k 'th bit is 1","code":"if ( ( a [ i ] & ( 1 << k ) ) != 0 ) x ++ ; else y ++ ; }"}
{"text":"Adding this bit 's part to the answer","code":"answer += ( ( 1 << k ) % mod * ( nCrModPFermat ( x , 3 , mod ) + x * nCrModPFermat ( y , 2 , mod ) ) % mod ) % mod ; } return answer ; }"}
{"text":"Driver Code","code":"let n = 5 ; let A = [ 3 , 5 , 2 , 18 , 7 ] ; document . write ( SumOfXor ( A , n ) ) ;"}
{"text":"javascript implementation to find the probability of not getting two consecutive heads together when N coins are tossed","code":"function round ( vr , digit ) { var value = parseInt ( ( vr * Math . pow ( 10 , digit ) + .5 ) ) ; return value \/ Math . pow ( 10 , digit ) ; }"}
{"text":"Function to compute the N - th Fibonacci number in the sequence where a = 2 and b = 3","code":"function probability ( N ) {"}
{"text":"The first two numbers in the sequence are initialized","code":"var a = 2 ; var b = 3 ;"}
{"text":"Base cases","code":"if ( N == 1 ) { return a ; } else if ( N == 2 ) { return b ; } else {"}
{"text":"Loop to compute the fibonacci sequence based on the first two initialized numbers","code":"for ( i = 3 ; i <= N ; i ++ ) { var c = a + b ; a = b ; b = c ; } return b ; } }"}
{"text":"Function to find the probability of not getting two consecutive heads when N coins are tossed","code":"function operations ( N ) {"}
{"text":"Computing the number of favourable cases","code":"var x = probability ( N ) ;"}
{"text":"Computing the number of all possible outcomes for N tosses","code":"var y = parseInt ( Math . pow ( 2 , N ) ) ; return round ( x \/ y , 2 ) ; }"}
{"text":"Driver code","code":"var N = 10 ; document . write ( ( operations ( N ) ) ) ;"}
{"text":"Function to check if a number is a perfect Cube or not","code":"function isPerfectCube ( x ) { var cr = Math . round ( Math . cbrt ( x ) ) ; return ( cr * cr * cr == x ) ; }"}
{"text":"Function to check if concatenation of two numbers is a perfect cube or not","code":"function checkCube ( a , b ) {"}
{"text":"Convert numbers to string using to_string ( )","code":"s1 = a . toString ( ) ; s2 = b . toString ( ) ;"}
{"text":"Concatenate the numbers and convert it into integer","code":"var c = parseInt ( s1 + s2 ) ;"}
{"text":"Check if concatenated value is perfect cube or not","code":"if ( isPerfectCube ( c ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"var a = 6 ; var b = 4 ; checkCube ( a , b ) ;"}
{"text":"Function to return the largest sum","code":"function largest_sum ( arr , n ) {"}
{"text":"Variable to store the largest sum","code":"let maximum = - 1 ;"}
{"text":"Map to store the frequencies of each element","code":"let m = new Map ( ) ;"}
{"text":"Store the Frequencies","code":"for ( let i = 0 ; i < n ; i ++ ) { if ( m . has ( arr [ i ] ) ) { m . set ( arr [ i ] , m . get ( arr [ i ] ) + 1 ) ; } else { m . set ( arr [ i ] , 1 ) ; } }"}
{"text":"Loop to combine duplicate elements and update the sum in the map","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"If j is a duplicate element","code":"if ( m . get ( arr [ i ] ) > 1 ) { if ( m . has ( 2 * arr [ i ] ) ) {"}
{"text":"Update the frequency of 2 * j","code":"m . set ( 2 * arr [ i ] , m . get ( 2 * arr [ i ] ) + m . get ( arr [ i ] ) \/ 2 ) ; } else { m . set ( 2 * arr [ i ] , m . get ( arr [ i ] ) \/ 2 ) ; }"}
{"text":"If the new sum is greater than maximum value , Update the maximum","code":"if ( 2 * arr [ i ] > maximum ) maximum = 2 * arr [ i ] ; } }"}
{"text":"Returns the largest sum","code":"return maximum ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 1 , 2 , 4 , 7 , 8 ] ; let n = arr . length ;"}
{"text":"Function Calling","code":"document . write ( largest_sum ( arr , n ) ) ;"}
{"text":"Function to check if it is possible to make x and y can become 0 at same time","code":"function canBeReduced ( x , y ) { var maxi = Math . max ( x , y ) ; var mini = Math . min ( x , y ) ;"}
{"text":"Check the given conditions","code":"if ( ( ( x + y ) % 3 ) == 0 && maxi <= 2 * mini ) document . write ( \" \" + \" \" ) ; else document . write ( \" \" + \" \" ) ; }"}
{"text":"Driver Code","code":"var x = 6 , y = 9 ;"}
{"text":"Function Call","code":"canBeReduced ( x , y ) ;"}
{"text":"Function to check if a given number x is prime or not","code":"function isPrime ( N ) { let isPrime = true ;"}
{"text":"The Wheel for checking prime number","code":"let arr = [ 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 ] ;"}
{"text":"Base Case","code":"if ( N < 2 ) { isPrime = false ; }"}
{"text":"Check for the number taken as basis","code":"if ( N % 2 == 0 N % 3 == 0 N % 5 == 0 ) { isPrime = false ; }"}
{"text":"Check for Wheel Here i , acts as the layer of the wheel","code":"for ( let i = 0 ; i < Math . sqrt ( N ) ; i += 30 ) {"}
{"text":"Check for the list of Sieve in arr [ ]","code":"for ( let c of arr ) {"}
{"text":"If number is greater than sqrt ( N ) break","code":"if ( c > Math . sqrt ( N ) ) { break ; }"}
{"text":"Check if N is a multiple of prime number in the wheel","code":"else { if ( N % ( c + i ) == 0 ) { isPrime = false ; break ; } }"}
{"text":"If at any iteration isPrime is false , break from the loop","code":"if ( ! isPrime ) break ; } } if ( isPrime ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver 's Code","code":"let N = 121 ;"}
{"text":"Function call for primality check","code":"isPrime ( N ) ;"}
{"text":"Function to print all possible pairs from the array","code":"function printPairs ( arr , n ) {"}
{"text":"Nested loop for all possible pairs","code":"for ( var i = 0 ; i < n ; i ++ ) { for ( var j = 0 ; j < n ; j ++ ) { document . write ( \" \" + arr [ i ] + \" \" + arr [ j ] + \" \" + \" \" ) ; } } }"}
{"text":"Driver code","code":"var arr = [ 1 , 2 ] ; var n = arr . length ; printPairs ( arr , n ) ;"}
{"text":"javascript program to check if one circle lies inside another circle or not .","code":"function circle ( x1 , y1 , x2 , y2 , r1 , r2 ) { var distSq = parseInt ( Math . sqrt ( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) ) ) ; if ( distSq + r2 == r1 ) { document . write ( \" \" + \" \" + \" \" + \" \" ) ; } else if ( distSq + r2 < r1 ) { document . write ( \" \" + \" \" + \" \" + \" \" ) ; } else { document . write ( \" \" + \" \" ) ; } }"}
{"text":"Driver code","code":"var x1 = 10 , y1 = 8 ; var x2 = 1 , y2 = 2 ; var r1 = 30 , r2 = 10 ; circle ( x1 , y1 , x2 , y2 , r1 , r2 ) ;"}
{"text":"Function to find the length of the direct common tangent","code":"function lengtang ( r1 , r2 , d ) { document . write ( \" \" + \" \" + ( Math . sqrt ( Math . pow ( d , 2 ) - Math . pow ( ( r1 - r2 ) , 2 ) ) ) . toFixed ( 5 ) ) ; }"}
{"text":"Driver code","code":"var r1 = 4 , r2 = 6 , d = 3 ; lengtang ( r1 , r2 , d ) ;"}
{"text":"Function to find the radius","code":"function rad ( d , h ) { document . write ( \" \" + ( ( d * d ) \/ ( 8 * h ) + h \/ 2 ) ) ; }"}
{"text":"Driver code","code":"var d = 4 , h = 1 ; rad ( d , h ) ;"}
{"text":"Function to find the shortest distance","code":"function shortdis ( r , d ) { document . write ( \" \" + \" \" + Math . sqrt ( ( r * r ) - ( ( d * d ) \/ 4 ) ) + \" \" ) ; }"}
{"text":"Driver code","code":"let r = 4 , d = 3 ; shortdis ( r , d ) ;"}
{"text":"Function to find the length of the direct common tangent","code":"function lengtang ( r1 , r2 , d ) { document . write ( \" \" + Math . sqrt ( Math . pow ( d , 2 ) - Math . pow ( ( r1 - r2 ) , 2 ) ) ) ; }"}
{"text":"Driver code","code":"var r1 = 4 , r2 = 6 , d = 12 ; lengtang ( r1 , r2 , d ) ;"}
{"text":"Function to find the side of the square","code":"function square ( a ) {"}
{"text":"the side cannot be negative","code":"if ( a < 0 ) return - 1 ;"}
{"text":"side of the square","code":"var x = 0.464 * a ; return x ; }"}
{"text":"Driver code","code":"var a = 5 ; document . write ( square ( a ) . toFixed ( 2 ) ) ;"}
{"text":"Function to find the apothem of a regular polygon","code":"function polyapothem ( n , a ) {"}
{"text":"Side and side length cannot be negative","code":"if ( a < 0 && n < 0 ) return - 1 ;"}
{"text":"Degree converted to radians","code":"return ( a \/ ( 2 * Math . tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ) ; }"}
{"text":"Driver code","code":"var a = 9 , n = 6 ; document . write ( polyapothem ( n , a ) . toFixed ( 5 ) ) ;"}
{"text":"Function to find the area of a regular polygon","code":"function polyarea ( n , a ) {"}
{"text":"Side and side length cannot be negative","code":"if ( a < 0 && n < 0 ) return - 1 ;"}
{"text":"Area degree converted to radians","code":"var A = ( a * a * n ) \/ ( 4 * Math . tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ; return A ; }"}
{"text":"Driver code","code":"var a = 9 , n = 6 ; document . write ( polyarea ( n , a ) . toFixed ( 5 ) ) ;"}
{"text":"Function to calculate the side of the polygon circumscribed in a circle","code":"function calculateSide ( n , r ) { var theta , theta_in_radians ; theta = 360 \/ n ; theta_in_radians = theta * 3.14 \/ 180 ; return 2 * r * Math . sin ( theta_in_radians \/ 2 ) ; }"}
{"text":"Total sides of the polygon","code":"var n = 3 ;"}
{"text":"Radius of the circumscribing circle","code":"var r = 5 ; document . write ( calculateSide ( n , r ) . toFixed ( 5 ) ) ;"}
{"text":"Function to find the biggest right circular cylinder","code":"function cyl ( r , R , h ) {"}
{"text":"radii and height cannot be negative","code":"if ( h < 0 && r < 0 && R < 0 ) return - 1 ;"}
{"text":"radius of right circular cylinder","code":"var r1 = r ;"}
{"text":"height of right circular cylinder","code":"var h1 = h ;"}
{"text":"volume of right circular cylinder","code":"var V = ( 3.14 * Math . pow ( r1 , 2 ) * h1 ) ; return V ; }"}
{"text":"Driver code","code":"var r = 7 , R = 11 , h = 6 ; document . write ( cyl ( r , R , h ) . toFixed ( 5 ) ) ;"}
{"text":"Function to calculate the perimeter","code":"function Perimeter ( s , n ) { var perimeter = 1 ;"}
{"text":"Calculate Perimeter","code":"perimeter = n * s ; return perimeter ; }"}
{"text":"Get the number of sides","code":"var n = 5 ;"}
{"text":"Get the length of side","code":"var s = 2.5 , peri ;"}
{"text":"find perimeter","code":"peri = Perimeter ( s , n ) ; document . write ( \" \" + \" \" + n + \" \" + s . toFixed ( 6 ) + \" \" + peri . toFixed ( 6 ) ) ;"}
{"text":"Function to find the area of the biggest rhombus","code":"function rhombusarea ( l , b ) {"}
{"text":"the length and breadth cannot be negative","code":"if ( l < 0 b < 0 ) return - 1 ;"}
{"text":"area of the rhombus","code":"return ( l * b ) \/ 2 ; }"}
{"text":"Driver code","code":"var l = 16 , b = 6 ; document . write ( rhombusarea ( l , b ) ) ;"}
{"text":"function to find if given point lies inside a given rectangle or not .","code":"function FindPoint ( x1 , y1 , x2 , y2 , x , y ) { if ( x > x1 && x < x2 && y > y1 && y < y2 ) return true ; return false ; }"}
{"text":"bottom - left and top - right corners of rectangle","code":"let x1 = 0 , y1 = 0 , x2 = 10 , y2 = 8 ;"}
{"text":"given point","code":"let x = 1 , y = 5 ;"}
{"text":"function call","code":"if ( FindPoint ( x1 , y1 , x2 , y2 , x , y ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to find distance","code":"function shortest_distance ( x1 , y1 , z1 , a , b , c , d ) { d = Math . abs ( ( a * x1 + b * y1 + c * z1 + d ) ) ; let e = Math . sqrt ( a * a + b * b + c * c ) ; document . write ( \" \" + ( d \/ e ) ) ; return ; }"}
{"text":"driver code","code":"let x1 = 4 ; let y1 = - 4 ; let z1 = 3 ; let a = 2 ; let b = - 2 ; let c = 5 ; let d = 8 ;"}
{"text":"Function call","code":"shortest_distance ( x1 , y1 , z1 , a , b , c , d ) ;"}
{"text":"function to find the Volume of triangular prism","code":"function findVolume ( l , b , h ) {"}
{"text":"formula to find Volume","code":"let volume = ( l * b * h ) \/ 2 ; return volume ; }"}
{"text":"Driver Code","code":"let l = 18 , b = 12 , h = 9 ;"}
{"text":"function calling","code":"document . write ( \" \" + findVolume ( l , b , h ) ) ;"}
{"text":"Function to check if the given integers value make a rectangle","code":"function isRectangle ( a , b , c , d ) {"}
{"text":"Square is also a rectangle","code":"if ( a == b && a == c && a == d && c == d && b == c && b == d ) return true ; else if ( a == b && c == d ) return true ; else if ( a == d && c == b ) return true ; else if ( a == c && d == b ) return true ; else return false ; }"}
{"text":"Driver code","code":"let a = 1 , b = 2 , c = 3 , d = 4 ; if ( isRectangle ( a , b , c , d ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"function to find the midpoint of a line","code":"function midpoint ( x1 , x2 , y1 , y2 ) { document . write ( ( x1 + x2 ) \/ 2 + \" \" + ( y1 + y2 ) \/ 2 ) ; }"}
{"text":"Driver code","code":"let x1 = - 1 , y1 = 2 ; let x2 = 3 , y2 = - 6 ; midpoint ( x1 , x2 , y1 , y2 ) ;"}
{"text":"function to calculate arc length","code":"function arcLength ( diameter , angle ) { let pi = 22.0 \/ 7.0 ; let arc ; if ( angle >= 360 ) { document . write ( \" \" + \" \" ) ; return 0 ; } else { arc = ( pi * diameter ) * ( angle \/ 360.0 ) ; return arc ; } }"}
{"text":"Driver Code","code":"let diameter = 25.0 ; let angle = 45.0 ; let arc_len = arcLength ( diameter , angle ) ; document . write ( arc_len ) ;"}
{"text":"JavaScript program to check if a line touches or intersects or outside a circle .","code":"function checkCollision ( a , b , c , x , y , radius ) {"}
{"text":"Finding the distance of line from center .","code":"let dist = ( Math . abs ( a * x + b * y + c ) ) \/ Math . sqrt ( a * a + b * b ) ;"}
{"text":"Checking if the distance is less than , greater than or equal to radius .","code":"if ( radius == dist ) document . write ( \" \" ) ; else if ( radius > dist ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let radius = 5 ; let x = 0 , y = 0 ; let a = 3 , b = 4 , c = 25 ; checkCollision ( a , b , c , x , y , radius ) ;"}
{"text":"( X [ i ] , Y [ i ] ) are coordinates of i 'th point.","code":"function polygonArea ( X , Y , n ) {"}
{"text":"Initialize area","code":"let area = 0.0 ;"}
{"text":"Calculate value of shoelace formula","code":"let j = n - 1 ; for ( let i = 0 ; i < n ; i ++ ) { area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;"}
{"text":"j = i ; j is previous vertex to i","code":"}"}
{"text":"Return absolute value","code":"return Math . abs ( area \/ 2.0 ) ; }"}
{"text":"Driver program to test above function","code":"let X = [ 0 , 2 , 4 ] ; let Y = [ 1 , 3 , 7 ] ; let n = X . length ; document . write ( polygonArea ( X , Y , n ) ) ;"}
{"text":"Function top get LSB value of v","code":"const chk = ( n ) => {"}
{"text":"Binary conversion","code":"let v = [ ] ; while ( n != 0 ) { v . push ( n % 2 ) ; n = parseInt ( n \/ 2 ) ; } for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] == 1 ) { return Math . pow ( 2 , i ) ; } } return 0 ; }"}
{"text":"Function to find the sum of LSBs of all possible pairs of the given array","code":"const sumOfLSB = ( arr , N ) => {"}
{"text":"Stores the LSB of array elements","code":"let lsb_arr = [ ] ; for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Storing the LSB values","code":"lsb_arr . push ( chk ( arr [ i ] ) ) ; }"}
{"text":"Sort the array lab_arr [ ]","code":"lsb_arr . sort ( ( a , b ) => a - b ) let ans = 0 ; for ( let i = 0 ; i < N - 1 ; i += 2 ) {"}
{"text":"Taking pairwise sum to get the maximum sum of LSB","code":"ans += ( lsb_arr [ i + 1 ] ) ; }"}
{"text":"Print the result","code":"document . write ( ans ) ; }"}
{"text":"Driver Code","code":"let N = 5 ; let arr = [ 1 , 2 , 3 , 4 , 5 ] ;"}
{"text":"Function Call","code":"sumOfLSB ( arr , N ) ;"}
{"text":"Function to find count of subsequences having odd bitwise AND value","code":"function countSubsequences ( arr ) {"}
{"text":"Stores count of odd elements","code":"let odd = 0 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( let x = 0 ; x < arr . length ; x ++ ) {"}
{"text":"If x is odd increment count","code":"if ( arr [ x ] & 1 ) odd ++ ; }"}
{"text":"Return Answer","code":"return ( 1 << odd ) - 1 ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 3 , 3 ] ;"}
{"text":"Function Call","code":"document . write ( countSubsequences ( arr ) ) ;"}
{"text":"Function to find the number of pairs ( i , j ) such that abs ( a [ i ] - a [ j ] ) is at least the minimum of ( a [ i ] , a [ j ] )","code":"function getPairsCount ( arr , n ) {"}
{"text":"Stores the resultant count of pairs","code":"let count = 0 ;"}
{"text":"Iterate over the range [ 0 , n ]","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Iterate from arr [ i ] - ( i % arr [ i ] ) till n with an increment of arr [ i ]","code":"for ( let j = arr [ i ] - ( i % arr [ i ] ) ; j < n ; j += arr [ i ] ) {"}
{"text":"Count the possible pairs","code":"if ( i < j && Math . abs ( arr [ i ] - arr [ j ] ) >= Math . min ( arr [ i ] , arr [ j ] ) ) { count ++ ; } } }"}
{"text":"Return the total count","code":"return count ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 2 , 3 ] ; let N = arr . length ; document . write ( getPairsCount ( arr , N ) ) ;"}
{"text":"Function to check if N can be changed to 1 or not .","code":"function check ( N ) { var twos = 0 , fives = 0 ;"}
{"text":"Count the number of 2 in the prime factorisation of N","code":"while ( N % 2 == 0 ) { N \/= 2 ; twos ++ ; }"}
{"text":"Count the number of 5 in the prime factorisation of N","code":"while ( N % 5 == 0 ) { N \/= 5 ; fives ++ ; } if ( N == 1 && twos <= fives ) { document . write ( 2 * fives - twos ) ; } else { document . write ( - 1 ) ; } }"}
{"text":"Driver Code","code":"var N = 50 ; check ( N ) ;"}
{"text":"Function to find the sum of elements in a given range of an infinite array","code":"function rangeSum ( arr , N , L , R ) {"}
{"text":"Stores the sum of array elements from L to R","code":"let sum = 0 ;"}
{"text":"Traverse from L to R","code":"for ( let i = L - 1 ; i < R ; i ++ ) { sum += arr [ i % N ] ; }"}
{"text":"Print the resultant sum","code":"document . write ( sum ) ; }"}
{"text":"Driver Code","code":"let arr = [ 5 , 2 , 6 , 9 ] ; let L = 10 , R = 13 ; let N = arr . length rangeSum ( arr , N , L , R ) ;"}
{"text":"Function to find the sum of elements in a given range of an infinite array","code":"function rangeSum ( arr , N , L , R ) {"}
{"text":"Stores the prefix sum","code":"let prefix = new Array ( N + 1 ) ; prefix [ 0 ] = 0 ;"}
{"text":"Calculate the prefix sum","code":"for ( let i = 1 ; i <= N ; i ++ ) { prefix [ i ] = prefix [ i - 1 ] + arr [ i - 1 ] ; }"}
{"text":"Stores the sum of elements from 1 to L - 1","code":"let leftsum = ( ( L - 1 ) \/ N ) * prefix [ N ] + prefix [ ( L - 1 ) % N ] ;"}
{"text":"Stores the sum of elements from 1 to R","code":"let rightsum = ( R \/ N ) * prefix [ N ] + prefix [ R % N ] ;"}
{"text":"Print the resultant sum","code":"document . write ( rightsum - leftsum ) ; }"}
{"text":"Driver Code","code":"let arr = [ 5 , 2 , 6 , 9 ] ; let L = 10 , R = 13 ; let N = arr . length ; rangeSum ( arr , N , L , R ) ;"}
{"text":"Function to find exponential factorial of a given number","code":"function ExpoFactorial ( N ) {"}
{"text":"Stores the exponetial factor of N","code":"let res = 1 ; let mod = 1000000007 ;"}
{"text":"Iterare over the range [ 2 , N ]","code":"for ( let i = 2 ; i < N + 1 ; i ++ )"}
{"text":"Update res","code":"res = Math . pow ( i , res ) % mod ;"}
{"text":"Return res","code":"return res ; }"}
{"text":"Input","code":"let N = 4 ;"}
{"text":"Function call","code":"document . write ( ( ExpoFactorial ( N ) ) ) ;"}
{"text":"Function to find contiguous subarray with maximum sum if array is repeated K times","code":"function maxSubArraySumRepeated ( arr , N , K ) {"}
{"text":"Store the sum of the array arr [ ]","code":"let sum = 0 ;"}
{"text":"Traverse the array and find sum","code":"for ( let i = 0 ; i < N ; i ++ ) sum += arr [ i ] ; let curr = arr [ 0 ] ;"}
{"text":"Store the answer","code":"let ans = arr [ 0 ] ;"}
{"text":"If K = 1","code":"if ( K == 1 ) {"}
{"text":"Apply Kadane algorithm to find sum","code":"for ( let i = 1 ; i < N ; i ++ ) { curr = Math . max ( arr [ i ] , curr + arr [ i ] ) ; ans = Math . max ( ans , curr ) ; }"}
{"text":"Return the answer","code":"return ans ; }"}
{"text":"Stores the twice repeated array","code":"let V = [ ] ;"}
{"text":"Traverse the range [ 0 , 2 * N ]","code":"for ( let i = 0 ; i < 2 * N ; i ++ ) { V . push ( arr [ i % N ] ) ; }"}
{"text":"Stores the maximum suffix sum","code":"let maxSuf = V [ 0 ] ;"}
{"text":"Stores the maximum prefix sum","code":"let maxPref = V [ 2 * N - 1 ] ; curr = V [ 0 ] ; for ( let i = 1 ; i < 2 * N ; i ++ ) { curr += V [ i ] ; maxPref = Math . max ( maxPref , curr ) ; } curr = V [ 2 * N - 1 ] ; for ( let i = 2 * N - 2 ; i >= 0 ; i -- ) { curr += V [ i ] ; maxSuf = Math . max ( maxSuf , curr ) ; } curr = V [ 0 ] ;"}
{"text":"Apply Kadane algorithm for 2 repetition of the array","code":"for ( let i = 1 ; i < 2 * N ; i ++ ) { curr = Math . max ( V [ i ] , curr + V [ i ] ) ; ans = Math . max ( ans , curr ) ; }"}
{"text":"If the sum of the array is greater than 0","code":"if ( sum > 0 ) { let temp = sum * ( K - 2 ) ; ans = Math . max ( ans , Math . max ( temp + maxPref , temp + maxSuf ) ) ; }"}
{"text":"Return the answer","code":"return ans ; }"}
{"text":"Given Input","code":"let arr = [ 10 , 20 , - 30 , - 1 , 40 ] ; let N = arr . length ; let K = 10 ;"}
{"text":"Function Call","code":"document . write ( maxSubArraySumRepeated ( arr , N , K ) ) ;"}
{"text":"Function to find count of subarrays which have max element greater than twice maximum of all other elements","code":"function countSubarray ( arr , n ) {"}
{"text":"Stores the count of subarrays","code":"let count = 0 ;"}
{"text":"Generate all possible subarrays","code":"for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i ; j < n ; j ++ ) {"}
{"text":"Stores the maximum element of the subarray","code":"let mxSubarray = 0 ;"}
{"text":"Stores the maximum of all other elements","code":"let mxOther = 0 ;"}
{"text":"Find the maximum element in the subarray [ i , j ]","code":"for ( let k = i ; k <= j ; k ++ ) { mxSubarray = Math . max ( mxSubarray , arr [ k ] ) ; }"}
{"text":"Find the maximum of all other elements","code":"for ( let k = 0 ; k < i ; k ++ ) { mxOther = Math . max ( mxOther , arr [ k ] ) ; } for ( let k = j + 1 ; k < n ; k ++ ) { mxOther = Math . max ( mxOther , arr [ k ] ) ; }"}
{"text":"If the maximum of subarray is greater than twice the maximum of other elements","code":"if ( mxSubarray > ( 2 * mxOther ) ) count ++ ; } }"}
{"text":"Print the maximum value obtained","code":"document . write ( count ) ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 6 , 10 , 9 , 7 , 3 ] ; let N = arr . length ; countSubarray ( arr , N ) ;"}
{"text":"Function to find count of subarrays which have max element greater than twice maximum of all other elements","code":"function countSubarray ( arr , n ) { var count = 0 , L = 0 , R = 0 ;"}
{"text":"Stores the maximum element of the array","code":"var mx = Math . max . apply ( null , arr ) ; var i ;"}
{"text":"Traverse the given array","code":"for ( i = 0 ; i < n ; i ++ ) {"}
{"text":"If the value of 2 * arr [ i ] is greater than mx","code":"if ( arr [ i ] * 2 > mx ) {"}
{"text":"Update the value of L and break out of loop","code":"L = i ; break ; } } for ( i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"If the value 2 * arr [ i ] is greater than mx","code":"if ( arr [ i ] * 2 > mx ) {"}
{"text":"Update the value of R and break out of loop","code":"R = i ; break ; } }"}
{"text":"Print the final answer","code":"document . write ( ( L + 1 ) * ( n - R ) ) ; }"}
{"text":"Driver Code","code":"var arr = [ 1 , 6 , 10 , 9 , 7 , 3 ] var N = arr . length ; countSubarray ( arr , N ) ;"}
{"text":"Utility function to check for primality of a number X by checking whether X haACCs any factors other than 1 and itself .","code":"function isPrime ( X ) { for ( let i = 2 ; i * i <= X ; i ++ )"}
{"text":"if ( X % i == 0 ) Factor found","code":"return false ; return true ; }"}
{"text":"Function to print primes just less than and just greater than of each element in an array","code":"function printPrimes ( A , N ) {"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Traverse for finding prime just less than A [ i ]","code":"for ( let j = A [ i ] - 1 ; ; j -- ) {"}
{"text":"Prime just less than A [ i ] found","code":"if ( isPrime ( j ) ) { document . write ( j + \" \" ) ; break ; } }"}
{"text":"Traverse for finding prime just greater than A [ i ]","code":"for ( let j = A [ i ] + 1 ; ; j ++ ) {"}
{"text":"Prime just greater than A [ i ] found","code":"if ( isPrime ( j ) ) { document . write ( j + \" \" ) ; break ; } } document . write ( \" \" ) ; } }"}
{"text":"Input","code":"let A = [ 17 , 28 ] ; let N = A . length ;"}
{"text":"Function call","code":"printPrimes ( A , N ) ;"}
{"text":"Function to find the Kth smallest element that contains A [ i ] exactly B [ i ] times","code":"function KthSmallest ( A , B , N , K ) { let M = 0 ;"}
{"text":"Traverse the given array","code":"for ( let i = 0 ; i < N ; i ++ ) { M = Math . max ( A [ i ] , M ) ; }"}
{"text":"Stores the frequency of every elements","code":"let freq = Array . from ( { length : M + 1 } , ( _ , i ) => 0 ) ;"}
{"text":"Traverse the given array","code":"for ( let i = 0 ; i < N ; i ++ ) { freq [ A [ i ] ] += B [ i ] ; }"}
{"text":"Initialize a variable to store the prefix sums","code":"let sum = 0 ;"}
{"text":"Iterate over the range [ 0 , M ]","code":"for ( let i = 0 ; i <= M ; i ++ ) {"}
{"text":"Increment sum by freq [ i ]","code":"sum += freq [ i ] ;"}
{"text":"If sum is greater than or equal to K","code":"if ( sum >= K ) {"}
{"text":"Return the current element as answer","code":"return i ; } }"}
{"text":"Return - 1","code":"return - 1 ; }"}
{"text":"Given Input","code":"let A = [ 3 , 4 , 5 ] ; let B = [ 2 , 1 , 3 ] ; let N = A . length ; let K = 4 ;"}
{"text":"Function call","code":"document . write ( KthSmallest ( A , B , N , K ) ) ;"}
{"text":"Function to find the Bitwise OR of Bitwise AND of all subarrays","code":"function findbitwiseOR ( a , n ) {"}
{"text":"Stores the required result","code":"let res = 0 ;"}
{"text":"Generate all the subarrays","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Store the current element","code":"let curr_sub_array = a [ i ] ;"}
{"text":"Find the Bitwise OR","code":"res = res | curr_sub_array ; for ( let j = i ; j < n ; j ++ ) {"}
{"text":"Update the result","code":"curr_sub_array = curr_sub_array & a [ j ] ; res = res | curr_sub_array ; } }"}
{"text":"Print the result","code":"document . write ( res ) ; }"}
{"text":"Driver Code","code":"let A = [ 1 , 2 , 3 ] ; let N = A . length ; findbitwiseOR ( A , N ) ;"}
{"text":"Function to find the Bitwise OR of Bitwise AND of all consecutive subsets of the array","code":"function findbitwiseOR ( a , n ) {"}
{"text":"Stores the required result","code":"var res = 0 ; var i ;"}
{"text":"Traverse the given array","code":"for ( i = 0 ; i < n ; i ++ ) res = res | a [ i ] ;"}
{"text":"Print the result","code":"document . write ( res ) ; }"}
{"text":"Driver Code","code":"var A = [ 1 , 2 , 3 ] ; var N = A . length ; findbitwiseOR ( A , N ) ;"}
{"text":"Function to check if the sum of the digits of N is strictly greater than the product of the digits of N or not","code":"function check ( n ) {"}
{"text":"Stores the sum and the product of the digits of N","code":"let sumOfDigit = 0 ; let prodOfDigit = 1 ; while ( n > 0 ) {"}
{"text":"Stores the last digit if N","code":"let rem ; rem = n % 10 ;"}
{"text":"Increment the value of sumOfDigits","code":"sumOfDigit += rem ;"}
{"text":"Update the prodOfDigit","code":"prodOfDigit *= rem ;"}
{"text":"Divide N by 10","code":"n = Math . floor ( n \/ 10 ) ; }"}
{"text":"Prlet the result","code":"if ( sumOfDigit > prodOfDigit ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let N = 1234 ; check ( N ) ;"}
{"text":"Print all distinct even & odd prefix Bitwise XORs from 1 to N","code":"function evenOddBitwiseXOR ( N ) { document . write ( \" \" + 0 + \" \" ) ;"}
{"text":"Print the even number","code":"for ( let i = 4 ; i <= N ; i = i + 4 ) { document . write ( i + \" \" ) ; } document . write ( \" \" ) ; document . write ( \" \" + 1 + \" \" ) ;"}
{"text":"Print the odd number","code":"for ( let i = 4 ; i <= N ; i = i + 4 ) { document . write ( i - 1 + \" \" ) ; } if ( N % 4 == 2 ) document . write ( N + 1 ) ; else if ( N % 4 == 3 ) document . write ( N ) ; }"}
{"text":"Driver Code","code":"let N = 6 ; evenOddBitwiseXOR ( N ) ;"}
{"text":"Function to lexicographic largest permutation possible by a swap that is smaller than given array","code":"function findPermutation ( arr ) { let N = arr . length ; let i = N - 2 ;"}
{"text":"Find the index of first element such that arr [ i ] > arr [ i + 1 ]","code":"while ( i >= 0 && arr [ i ] <= arr [ i + 1 ] ) i -- ;"}
{"text":"If the array is sorted in increasing order","code":"if ( i == - 1 ) { document . write ( \" \" ) ; return ; } let j = N - 1 ;"}
{"text":"Find the index of first element which is smaller than arr [ i ]","code":"while ( j > i && arr [ j ] >= arr [ i ] ) j -- ;"}
{"text":"If arr [ j ] = = arr [ j - 1 ]","code":"while ( j > i && arr [ j ] == arr [ j - 1 ] ) {"}
{"text":"Decrement j","code":"j -- ; }"}
{"text":"Swap the element","code":"let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ;"}
{"text":"Print the array arr [ ]","code":"for ( let it in arr ) { document . write ( arr [ it ] + \" \" ) ; } }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 5 , 3 , 4 , 6 ] ; findPermutation ( arr ) ;"}
{"text":"Function to find the smallest prime factor of all the numbers using Sieve Of Eratosthenes","code":"function sieveOfEratosthenes ( N , s ) {"}
{"text":"Stores whether any number is prime or not","code":"let prime = Array . from ( { length : N + 1 } , ( _ , i ) => 0 ) ;"}
{"text":"Initialize smallest factor as 2 for all the even numbers","code":"for ( let i = 2 ; i <= N ; i += 2 ) s [ i ] = 2 ;"}
{"text":"Iterate over the range [ 3 , N ]","code":"for ( let i = 3 ; i <= N ; i += 2 ) {"}
{"text":"If i is prime","code":"if ( prime [ i ] == false ) { s [ i ] = i ;"}
{"text":"Iterate all multiples of i","code":"for ( let j = i ; j * i <= N ; j += 2 ) {"}
{"text":"i is the smallest prime factor of i * j","code":"if ( ! prime [ i * j ] ) { prime [ i * j ] = true ; s [ i * j ] = i ; } } } } }"}
{"text":"Function to find the absolute difference between the count of odd and even factors of N","code":"function findDifference ( N ) {"}
{"text":"Stores the smallest prime factor of i","code":"let s = Array . from ( { length : N + 1 } , ( _ , i ) => 0 ) ;"}
{"text":"Fill values in s [ ] using sieve of eratosthenes","code":"sieveOfEratosthenes ( N , s ) ;"}
{"text":"Stores the total number of factors and the total number of odd and even factors","code":"let total = 1 , odd = 1 , even = 0 ;"}
{"text":"Store the current prime factor of the number N","code":"let curr = s [ N ] ;"}
{"text":"Store the power of current prime factor","code":"let cnt = 1 ;"}
{"text":"Loop while N is greater than 1","code":"while ( N > 1 ) { N \/= s [ N ] ;"}
{"text":"If N also has smallest prime factor as curr , then increment cnt by 1","code":"if ( curr == s [ N ] ) { cnt ++ ; continue ; }"}
{"text":"Update only total number of factors if curr is 2","code":"if ( curr == 2 ) { total = total * ( cnt + 1 ) ; }"}
{"text":"Update total number of factors and total number of odd factors","code":"else { total = total * ( cnt + 1 ) ; odd = odd * ( cnt + 1 ) ; }"}
{"text":"Update current prime factor as s [ N ] and count as 1","code":"curr = s [ N ] ; cnt = 1 ; }"}
{"text":"Calculate the number of even factors","code":"even = total - odd ;"}
{"text":"Prlet the difference","code":"document . write ( Math . abs ( even - odd ) ) ; }"}
{"text":"Driver Code","code":"let N = 12 ; findDifference ( N ) ;"}
{"text":"Function to find the median of a group of data with given mean and mode","code":"function findMedian ( Mean , Mode ) {"}
{"text":"Calculate the median","code":"var Median = ( 2 * Mean + Mode ) \/ 3.0 ;"}
{"text":"Print the median","code":"document . write ( Median ) ; }"}
{"text":"Driver Code","code":"var mode = 6 , mean = 3 ; findMedian ( mean , mode ) ;"}
{"text":"Function to calculate magnitude of a 3 dimensional vector","code":"function vectorMagnitude ( x , y , z ) {"}
{"text":"Stores the sum of squares of coordinates of a vector","code":"var sum = x * x + y * y + z * z ;"}
{"text":"Return the magnitude","code":"return Math . sqrt ( sum ) ; }"}
{"text":"Driver Code","code":"var x = 1 ; var y = 2 ; var z = 3 ; document . write ( vectorMagnitude ( x , y , z ) ) ;"}
{"text":"Function to find prodcut of a Mersenne number with another number","code":"function multiplyByMersenne ( N , M ) {"}
{"text":"Stores the power of 2 of integer M + 1","code":"let x = ( Math . log ( M + 1 ) \/ Math . log ( 2 ) ) ;"}
{"text":"Return the product","code":"return ( ( N << x ) - N ) ; }"}
{"text":"Driver code","code":"let N = 4 ; let M = 15 ; document . write ( multiplyByMersenne ( N , M ) ) ;"}
{"text":"Function to find nearest perfect square of num","code":"function perfectSquare ( num ) {"}
{"text":"Calculate square root of num","code":"let sr = Math . floor ( Math . sqrt ( num ) ) ;"}
{"text":"Calculate perfect square","code":"let a = sr * sr ; let b = ( sr + 1 ) * ( sr + 1 ) ;"}
{"text":"Find the nearest perfect square","code":"if ( ( num - a ) < ( b - num ) ) { return a ; } else { return b ; } }"}
{"text":"Function to find the power of 2 nearest to the number num","code":"function powerOfTwo ( num ) {"}
{"text":"Calculate log base 2 of num","code":"let lg = Math . floor ( Math . log2 ( num ) ) ;"}
{"text":"Highest power of 2 which is <= num","code":"let p = Math . pow ( 2 , lg ) ; return p ; }"}
{"text":"Function to find the nearest perfect square and the nearest power of 2 of every array element whose occurrence is 1","code":"function uniqueElement ( arr , N ) { let ans = true ; arr . reverse ( ) ;"}
{"text":"Stores frequency of array elements","code":"let freq = new Map ( ) ;"}
{"text":"Traverse the array and update frequency of current array element","code":"for ( let i = 0 ; i < N ; i ++ ) { freq [ arr [ i ] ] ++ ; if ( freq . has ( arr [ i ] ) ) { freq . set ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) } else [ freq . set ( arr [ i ] , 1 ) ] }"}
{"text":"Traverse the map freq","code":"for ( let el of freq ) {"}
{"text":"If the frequency is 1","code":"if ( el [ 1 ] == 1 ) { ans = false ;"}
{"text":"Find nearest perfect square","code":"let ps = perfectSquare ( el [ 0 ] ) ;"}
{"text":"Print the nearest power of 2","code":"document . write ( powerOfTwo ( ps ) + ' ' ) ; } }"}
{"text":"If the any does not contain any non - repeating elements","code":"if ( ans ) document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 4 , 11 , 4 , 3 , 4 ] ; let N = arr . length ; uniqueElement ( arr , N ) ;"}
{"text":"Function to partition the array into two non - empty subarrays which satisfies the given condition","code":"function partitionArray ( a , n ) {"}
{"text":"Stores the suffix min array","code":"var min = Array ( n ) . fill ( 0 ) ;"}
{"text":"Stores the minimum of a suffix","code":"var mini = Number . MAX_VALUE ;"}
{"text":"Traverse the array in reverse","code":"for ( i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"Update minimum","code":"mini = Math . min ( mini , a [ i ] ) ;"}
{"text":"Store the minimum","code":"min [ i ] = mini ; }"}
{"text":"Stores the maximum value of a prefix","code":"var maxi = Number . MIN_VALUE ;"}
{"text":"Stores the index of the partition","code":"var ind = - 1 ; for ( i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Update max","code":"maxi = Math . max ( maxi , a [ i ] ) ;"}
{"text":"If max is less than min [ i + 1 ]","code":"if ( maxi < min [ i + 1 ] ) {"}
{"text":"Store the index of partition","code":"ind = i ;"}
{"text":"break","code":"break ; } }"}
{"text":"If ind is not - 1","code":"if ( ind != - 1 ) {"}
{"text":"Print the first subarray","code":"for ( i = 0 ; i <= ind ; i ++ ) document . write ( a [ i ] + \" \" ) ; document . write ( \" \" ) ;"}
{"text":"Print the second subarray","code":"for ( i = ind + 1 ; i < n ; i ++ ) document . write ( a [ i ] + \" \" ) ; }"}
{"text":"Otherwise","code":"else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"var arr = [ 5 , 3 , 2 , 7 , 9 ] ; var N = arr . length ; partitionArray ( arr , N ) ;"}
{"text":"Function to count all prime factors of a given number","code":"function countPrimeFactors ( n ) { var count = 0 ;"}
{"text":"Count the number of 2 s that divides n","code":"while ( n % 2 == 0 ) { n = parseInt ( n \/ 2 ) ; count ++ ; }"}
{"text":"Since n is odd at this point , skip one element","code":"for ( i = 3 ; i <= parseInt ( Math . sqrt ( n ) ) ; i = i + 2 ) {"}
{"text":"While i divides n , count i and divide n","code":"while ( n % i == 0 ) { n = parseInt ( n \/ i ) ; count ++ ; } }"}
{"text":"If n is a prime number greater than 2","code":"if ( n > 2 ) count ++ ; return ( count ) ; }"}
{"text":"Function to find the sum of first n nearly prime numbers","code":"function findSum ( n ) {"}
{"text":"Store the required sum","code":"var sum = 0 ; for ( i = 1 , num = 2 ; i <= n ; num ++ ) {"}
{"text":"Add this number if it is satisfies the condition","code":"if ( countPrimeFactors ( num ) == 2 ) { sum += num ;"}
{"text":"Increment count of nearly prime numbers","code":"i ++ ; } } return sum ; }"}
{"text":"Function to check if N can be represented as sum of K different positive integers out of which at least K - 1 of them are nearly prime","code":"function check ( n , k ) {"}
{"text":"Store the sum of first K - 1 nearly prime numbers","code":"var s = findSum ( k - 1 ) ;"}
{"text":"If sum is greater than or equal to n","code":"if ( s >= n ) document . write ( \" \" ) ;"}
{"text":"Otherwise , prvar Yes","code":"else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"var n = 100 , k = 6 ; check ( n , k ) ;"}
{"text":"Function to calculate GCD of a and b using Euclidean Algorithm","code":"function gcd ( a , b ) {"}
{"text":"Iterate until b is non - zero","code":"while ( b > 0 ) { let rem = a % b ; a = b ; b = rem ; }"}
{"text":"Return the GCD","code":"return a ; }"}
{"text":"Function to count the number of ways N can be expressed as x ^ y","code":"function countNumberOfWays ( n ) {"}
{"text":"Base Case","code":"if ( n == 1 ) return - 1 ;"}
{"text":"Stores the gcd of powers","code":"let g = 0 ; let power = 0 ;"}
{"text":"Calculate the degree of 2 in N","code":"while ( n % 2 == 0 ) { power ++ ; n \/= 2 ; } g = gcd ( g , power ) ;"}
{"text":"Calculate the degree of prime numbers in N","code":"for ( let i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { power = 0 ;"}
{"text":"Calculate the degree of prime ' i ' in N","code":"while ( n % i == 0 ) { power ++ ; n \/= i ; } g = gcd ( g , power ) ; }"}
{"text":"If N is a prime , g becomes 1.","code":"if ( n > 2 ) g = gcd ( g , 1 ) ;"}
{"text":"Stores the number of ways to represent N as x ^ y","code":"let ways = 1 ;"}
{"text":"Find the number of Factors of g","code":"power = 0 ; while ( g % 2 == 0 ) { g \/= 2 ; power ++ ; }"}
{"text":"Update the count of ways","code":"ways *= ( power + 1 ) ;"}
{"text":"Iterate to find rest of the prime numbers","code":"for ( let i = 3 ; i <= Math . sqrt ( g ) ; i += 2 ) { power = 0 ;"}
{"text":"Find the power of i","code":"while ( g % i == 0 ) { power ++ ; g \/= i ; }"}
{"text":"Update the count of ways","code":"ways *= ( power + 1 ) ; }"}
{"text":"If g is prime","code":"if ( g > 2 ) ways *= 2 ;"}
{"text":"Return the total number of ways","code":"return ways ; }"}
{"text":"Driver Code","code":"let N = 64 ; document . write ( countNumberOfWays ( N ) ) ;"}
{"text":"Function to return the lowest power of 2 close to given positive number","code":"function powOfPositive ( n ) {"}
{"text":"Floor function is used to determine the value close to the number","code":"let pos = Math . floor ( Math . log2 ( n ) ) ; return Math . pow ( 2 , pos ) ; }"}
{"text":"Function to return the lowest power of 2 close to given negative number","code":"function powOfNegative ( n ) {"}
{"text":"Ceil function is used for negative numbers as - 1 > - 4. It would be opposite to positive numbers where 1 < 4","code":"let pos = Math . ceil ( Math . log2 ( n ) ) ; return ( - 1 * Math . pow ( 2 , pos ) ) ; }"}
{"text":"Function to find the highest power of 2","code":"function highestPowerOf2 ( n ) {"}
{"text":"To check if the given number is positive or negative","code":"if ( n > 0 ) { document . write ( powOfPositive ( n ) ) ; } else {"}
{"text":"If the number is negative , then the ceil of the positive number is calculated and negative sign is added","code":"n = - n ; document . write ( powOfNegative ( n ) ) ; } }"}
{"text":"Driver code","code":"let n = - 24 ; highestPowerOf2 ( n ) ;"}
{"text":"Function to find number of cards needed","code":"function noOfCards ( n ) { return parseInt ( n * ( 3 * n + 1 ) \/ 2 ) ; }"}
{"text":"Driver Code","code":"var n = 3 ; document . write ( noOfCards ( n ) ) ;"}
{"text":"Function for finding the smallest possible number after swapping the digits any number of times","code":"function smallestPoss ( s , n ) {"}
{"text":"Variable to store the final answer","code":"var ans = \" \" ;"}
{"text":"Array to store the count of occurrence of each digit","code":"var arr = Array ( 10 ) . fill ( 0 ) ;"}
{"text":"Loop to calculate the number of occurrences of every digit","code":"for ( var i = 0 ; i < n ; i ++ ) { arr [ s [ i ] . charCodeAt ( 0 ) - 48 ] ++ ; }"}
{"text":"Loop to get smallest number","code":"for ( var i = 0 ; i < 10 ; i ++ ) { for ( var j = 0 ; j < arr [ i ] ; j ++ ) ans = ans + i . toString ( ) ; }"}
{"text":"Returning the answer","code":"return ans ; }"}
{"text":"Driver code","code":"var N = 15 ; var K = \" \" ; document . write ( smallestPoss ( K , N ) ) ;"}
{"text":"Function to count the number of sub - arrays with sum strictly greater than the remaining elements of array","code":"function Count_subarray ( arr , n ) { var subarray_sum , remaining_sum , count = 0 ; var i , j , k , l ;"}
{"text":"For loop for beginning point of a subarray","code":"for ( i = 0 ; i < n ; i ++ ) {"}
{"text":"For loop for ending point of the subarray","code":"for ( j = i ; j < n ; j ++ ) {"}
{"text":"Initialise subarray_sum and remaining_sum to 0","code":"subarray_sum = 0 ; remaining_sum = 0 ;"}
{"text":"For loop to calculate the sum of generated subarray","code":"for ( k = i ; k <= j ; k ++ ) { subarray_sum += arr [ k ] ; }"}
{"text":"For loop to calculate the sum remaining array element","code":"for ( l = 0 ; l < i ; l ++ ) { remaining_sum += arr [ l ] ; } for ( l = j + 1 ; l < n ; l ++ ) { remaining_sum += arr [ l ] ; }"}
{"text":"Checking for condition when subarray sum is strictly greater than remaining sum of array element","code":"if ( subarray_sum > remaining_sum ) { count += 1 ; } } } return count ; }"}
{"text":"Driver code","code":"var arr = [ 10 , 9 , 12 , 6 ] ; var n = arr . length ; document . write ( Count_subarray ( arr , n ) ) ;"}
{"text":"javascript implementation of the above approach","code":"function Count_subarray ( arr , n ) { var total_sum = 0 , subarray_sum , remaining_sum , count = 0 ;"}
{"text":"Calculating total sum of given array","code":"for ( i = 0 ; i < n ; i ++ ) { total_sum += arr [ i ] ; }"}
{"text":"For loop for beginning povar of a subarray","code":"for ( i = 0 ; i < n ; i ++ ) {"}
{"text":"initialise subarray_sum to 0","code":"subarray_sum = 0 ;"}
{"text":"For loop for calculating subarray_sum and remaining_sum","code":"for ( j = i ; j < n ; j ++ ) {"}
{"text":"Calculating subarray_sum and corresponding remaining_sum","code":"subarray_sum += arr [ j ] ; remaining_sum = total_sum - subarray_sum ;"}
{"text":"Checking for the condition when subarray sum is strictly greater than the remaining sum of the array element","code":"if ( subarray_sum > remaining_sum ) { count += 1 ; } } } return count ; }"}
{"text":"Driver code","code":"var arr = [ 10 , 9 , 12 , 6 ] ; var n = arr . length ; document . write ( Count_subarray ( arr , n ) ) ;"}
{"text":"Function to return the maximized XOR after removing an element from the array","code":"function maxXOR ( arr , n ) {"}
{"text":"Find XOR of the complete array","code":"let xorArr = 0 ; for ( let i = 0 ; i < n ; i ++ ) xorArr ^= arr [ i ] ;"}
{"text":"To store the final answer","code":"let ans = 0 ;"}
{"text":"Iterating through the array to find the final answer","code":"for ( let i = 0 ; i < n ; i ++ ) ans = Math . max ( ans , ( xorArr ^ arr [ i ] ) ) ;"}
{"text":"Return the final answer","code":"return ans ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 1 , 3 ] ; let n = arr . length ; document . write ( maxXOR ( arr , n ) ) ;"}
{"text":"Function that returns true if num contains at least one digit that divides k","code":"function digitDividesK ( num , k ) { while ( num ) {"}
{"text":"Get the last digit","code":"let d = num % 10 ;"}
{"text":"If the digit is non - zero and it divides k","code":"if ( d != 0 && k % d == 0 ) return true ;"}
{"text":"Remove the last digit","code":"num = parseInt ( num \/ 10 ) ; }"}
{"text":"There is no digit in num that divides k","code":"return false ; }"}
{"text":"Function to return the required count of elements from the given range which contain at least one digit that divides k","code":"function findCount ( l , r , k ) {"}
{"text":"To store the result","code":"let count = 0 ;"}
{"text":"For every number from the range","code":"for ( let i = l ; i <= r ; i ++ ) {"}
{"text":"If any digit of the current number divides k","code":"if ( digitDividesK ( i , k ) ) count ++ ; } return count ; }"}
{"text":"Driver code","code":"let l = 20 , r = 35 ; let k = 45 ; document . write ( findCount ( l , r , k ) ) ;"}
{"text":"Function to check if the given number is a factorial of any number","code":"function isFactorial ( n ) { for ( var i = 1 ; ; i ++ ) { if ( n % i == 0 ) { n = parseInt ( n \/ i ) ; } else { break ; } } if ( n == 1 ) { return true ; } else { return false ; } }"}
{"text":"Driver Code","code":"var n = 24 ; var ans = isFactorial ( n ) ; if ( ans == 1 ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to return the LCM of two numbers","code":"function lcm ( a , b ) { let GCD = __gcd ( a , b ) ; return Math . floor ( ( a * b ) \/ GCD ) ; } function __gcd ( a , b ) { return b == 0 ? a : __gcd ( b , a % b ) ; }"}
{"text":"Function to return the minimum LCM after removing a single element from the given array","code":"function MinLCM ( a , n ) {"}
{"text":"Prefix and Suffix arrays","code":"let Prefix = new Array ( n + 2 ) ; let Suffix = new Array ( n + 2 ) ;"}
{"text":"Single state dynamic programming relation for storing LCM of first i elements from the left in Prefix [ i ]","code":"Prefix [ 1 ] = a [ 0 ] ; for ( let i = 2 ; i <= n ; i += 1 ) { Prefix [ i ] = lcm ( Prefix [ i - 1 ] , a [ i - 1 ] ) ; }"}
{"text":"Initializing Suffix array","code":"Suffix [ n ] = a [ n - 1 ] ;"}
{"text":"Single state dynamic programming relation for storing LCM of all the elements having index greater than or equal to i in Suffix [ i ]","code":"for ( let i = n - 1 ; i >= 1 ; i -= 1 ) { Suffix [ i ] = lcm ( Suffix [ i + 1 ] , a [ i - 1 ] ) ; }"}
{"text":"If first or last element of the array has to be removed","code":"let ans = Math . min ( Suffix [ 2 ] , Prefix [ n - 1 ] ) ;"}
{"text":"If any other element is replaced","code":"for ( let i = 2 ; i < n ; i += 1 ) { ans = Math . min ( ans , lcm ( Prefix [ i - 1 ] , Suffix [ i + 1 ] ) ) ; }"}
{"text":"Return the minimum LCM","code":"return ans ; }"}
{"text":"Driver code","code":"let a = [ 5 , 15 , 9 , 36 ] ; let n = a . length ; document . write ( MinLCM ( a , n ) ) ;"}
{"text":"Function to return the count of coloured 0 s in an n - level hexagon","code":"function count ( n ) { return parseInt ( n * ( 3 * n - 1 ) \/ 2 ) ; }"}
{"text":"Driver code","code":"var n = 3 ; document . write ( count ( n ) ) ;"}
{"text":"Function to return the minimum required value","code":"function findMinValue ( arr , n ) {"}
{"text":"Find the sum of the array elements","code":"let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) sum += arr [ i ] ;"}
{"text":"Return the required value","code":"return ( parseInt ( sum \/ n ) + 1 ) ; }"}
{"text":"Driver code","code":"let arr = [ 4 , 2 , 1 , 10 , 6 ] ; let n = arr . length ; document . write ( findMinValue ( arr , n ) ) ;"}
{"text":"Javascript implementation of the approach","code":"const MOD = 1000000007 ;"}
{"text":"Function to return ( m ! % MOD )","code":"function modFact ( n , m ) { let result = 1 ; for ( let i = 1 ; i <= m ; i ++ ) result = ( result * i ) % MOD ; return result ; }"}
{"text":"Driver code","code":"let n = 3 , m = 2 ; document . write ( modFact ( n , m ) ) ;"}
{"text":"Javascript implementation of the approach","code":"const mod = 1000000000 + 7 ;"}
{"text":"Function to return ( 2 ^ P % mod )","code":"function power ( p ) { let res = 1 ; for ( let i = 1 ; i <= p ; ++ i ) { res *= 2 ; res %= mod ; } return res % mod ; }"}
{"text":"Function to return the sum of squares of subsets","code":"function subset_square_sum ( A ) { let n = A . length ; let ans = 0 ;"}
{"text":"Sqauaring the elements and adding it to ans","code":"for ( let i = 0 ; i < n ; i ++ ) { ans += ( A [ i ] * A [ i ] ) % mod ; ans %= mod ; } return ( ans * power ( n - 1 ) ) % mod ; }"}
{"text":"Driver code","code":"let A = [ 3 , 7 ] ; document . write ( subset_square_sum ( A ) ) ;"}
{"text":"Javascript program to find the number of pairs such that gcd equals to 1","code":"var N = 100050 ; var lpf = Array ( N ) . fill ( 0 ) ; var mobius = Array ( N ) . fill ( 0 ) ;"}
{"text":"Function to calculate least prime factor of each number","code":"function least_prime_factor ( ) { for ( i = 2 ; i < N ; i ++ )"}
{"text":"If it is a prime number","code":"if ( lpf [ i ] == 0 ) for ( j = i ; j < N ; j += i )"}
{"text":"For all multiples which are not visited yet .","code":"if ( lpf [ j ] == 0 ) lpf [ j ] = i ; }"}
{"text":"Function to find the value of Mobius function for all the numbers from 1 to n","code":"function Mobius ( ) { for ( i = 1 ; i < N ; i ++ ) {"}
{"text":"If number is one","code":"if ( i == 1 ) mobius [ i ] = 1 ; else {"}
{"text":"If number has a squared prime factor","code":"if ( lpf [ i \/ lpf [ i ] ] == lpf [ i ] ) mobius [ i ] = 0 ;"}
{"text":"Multiply - 1 with the previous number","code":"else mobius [ i ] = - 1 * mobius [ i \/ lpf [ i ] ] ; } } }"}
{"text":"Function to find the number of pairs such that gcd equals to 1","code":"function gcd_pairs ( a , n ) {"}
{"text":"To store maximum number","code":"var maxi = 0 ;"}
{"text":"To store frequency of each number","code":"var fre = Array ( n + 1 ) . fill ( 0 ) ;"}
{"text":"Find frequency and maximum number","code":"for ( i = 0 ; i < n ; i ++ ) { fre [ a [ i ] ] ++ ; maxi = Math . max ( a [ i ] , maxi ) ; } least_prime_factor ( ) ; Mobius ( ) ;"}
{"text":"To store number of pairs with gcd equals to 1","code":"var ans = 0 ;"}
{"text":"Traverse through the all possible elements","code":"for ( i = 1 ; i <= maxi ; i ++ ) { if ( mobius [ i ] == 0 ) continue ; var temp = 0 ; for ( j = i ; j <= maxi ; j += i ) temp = parseInt ( temp + fre [ j ] ) ; ans += parseInt ( temp * ( temp - 1 ) \/ 2 * mobius [ i ] ) ; }"}
{"text":"Return the number of pairs","code":"return ans ; }"}
{"text":"Driver code","code":"var a = [ 1 , 2 , 3 , 4 , 5 , 6 ] ; var n = a . length ;"}
{"text":"Function call","code":"document . write ( gcd_pairs ( a , n ) ) ;"}
{"text":"Function to compare x ^ y and y ^ x","code":"function compareVal ( x , y ) {"}
{"text":"Storing values OF x ^ y AND y ^ x","code":"let a = y * Math . log ( x ) ; let b = x * Math . log ( y ) ;"}
{"text":"Comparing values","code":"if ( a > b ) document . write ( x + \" \" + y + \" \" + y + \" \" + x ) ; else if ( a < b ) document . write ( x + \" \" + y + \" \" + y + \" \" + x ) ; else if ( a == b ) document . write ( x + \" \" + y + \" \" + y + \" \" + x ) ; }"}
{"text":"Driver code","code":"let x = 4 , y = 5 ; compareVal ( x , y ) ;"}
{"text":"Function to print first n zigzag numbers","code":"function ZigZag ( n ) {"}
{"text":"To store factorial and n 'th zig zag number","code":"var fact = Array ( n + 1 ) . fill ( 0 ) ; var zig = Array ( n + 1 ) . fill ( 0 ) ;"}
{"text":"Initialize factorial upto n","code":"fact [ 0 ] = 1 ; for ( var i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ;"}
{"text":"Set first two zig zag numbers","code":"zig [ 0 ] = 1 ; zig [ 1 ] = 1 ; document . write ( \" \" ) ;"}
{"text":"Print first two zig zag number","code":"document . write ( zig [ 0 ] + \" \" + zig [ 1 ] + \" \" ) ;"}
{"text":"Print the rest zig zag numbers","code":"for ( var i = 2 ; i < n ; i ++ ) { var sum = 0 ; for ( var k = 0 ; k <= i - 1 ; k ++ ) {"}
{"text":"Binomial ( n , k ) * a ( k ) * a ( n - k )","code":"sum += parseInt ( fact [ i - 1 ] \/ ( fact [ i - 1 - k ] * fact [ k ] ) ) * zig [ k ] * zig [ i - 1 - k ] ; }"}
{"text":"Store the value","code":"zig [ i ] = parseInt ( sum \/ 2 ) ;"}
{"text":"Print the number","code":"document . write ( parseInt ( sum \/ 2 ) + \" \" ) ; } }"}
{"text":"Driver code","code":"var n = 10 ;"}
{"text":"Function call","code":"ZigZag ( n ) ;"}
{"text":"if the sequence is a ( 1 ) a ( 2 ) a ( 3 ) . . a ( n - 1 ) check if the sequence can be represented as x * ( y ^ k ) find the largest value of k","code":"function find_count ( ele ) {"}
{"text":"count","code":"let count = 0 ; for ( let i = 0 ; i < ele . length ; i ++ ) {"}
{"text":"pattern of elements of size i from the end of sequence","code":"let p = [ ] ;"}
{"text":"count","code":"let c = 0 ;"}
{"text":"extract the pattern in a reverse order","code":"for ( let j = ele . length - 1 ; j >= ( ele . length - 1 - i ) && j >= 0 ; j -- ) p . push ( ele [ j ] ) ; let j = ele . length - 1 , k = 0 ;"}
{"text":"check how many times the pattern is repeated","code":"while ( j >= 0 ) {"}
{"text":"if the element dosent match","code":"if ( ele [ j ] != p [ k ] ) break ; j -- ; k ++ ;"}
{"text":"if the end of pattern is reached set value of k = 0 and increase the count","code":"if ( k == p . length ) { c ++ ; k = 0 ; } } count = Math . max ( count , c ) ; }"}
{"text":"return the max count","code":"return count ; }"}
{"text":"print first n terms of Gijswijt 's sequence","code":"function solve ( n ) {"}
{"text":"set the count","code":"let count = 1 ;"}
{"text":"stoes the element","code":"let ele = [ ] ;"}
{"text":"print the first n terms of the sequence","code":"for ( let i = 0 ; i < n ; i ++ ) { document . write ( count + \" \" ) ;"}
{"text":"push the element","code":"ele . push ( count ) ;"}
{"text":"find the count for next number","code":"count = find_count ( ele ) ; } }"}
{"text":"Driver code","code":"let n = 10 ; solve ( n ) ;"}
{"text":"Stores the Wedderburn Etherington numbers","code":"var store = new Map ( ) ;"}
{"text":"Function to return the nth Wedderburn Etherington numbers","code":"function Wedderburn ( n ) {"}
{"text":"Base case","code":"if ( n <= 2 ) return store [ n ] ;"}
{"text":"If n is even n = 2 x","code":"else if ( n % 2 == 0 ) {"}
{"text":"get x","code":"var x = parseInt ( n \/ 2 ) , ans = 0 ;"}
{"text":"a ( 2 x ) = a ( 1 ) a ( 2 x - 1 ) + a ( 2 ) a ( 2 x - 2 ) + ... + a ( x - 1 ) a ( x + 1 )","code":"for ( var i = 1 ; i < x ; i ++ ) { ans += store [ i ] * store [ n - i ] ; }"}
{"text":"a ( x ) ( a ( x ) + 1 ) \/ 2","code":"ans += ( store [ x ] * ( store [ x ] + 1 ) ) \/ 2 ;"}
{"text":"Store the ans","code":"store [ n ] = ans ;"}
{"text":"Return the required answer","code":"return ans ; } else {"}
{"text":"If n is odd","code":"var x = ( n + 1 ) \/ 2 , ans = 0 ;"}
{"text":"a ( 2 x - 1 ) = a ( 1 ) a ( 2 x - 2 ) + a ( 2 ) a ( 2 x - 3 ) + ... + a ( x - 1 ) a ( x ) ,","code":"for ( var i = 1 ; i < x ; i ++ ) { ans += store [ i ] * store [ n - i ] ; }"}
{"text":"Store the ans","code":"store [ n ] = ans ;"}
{"text":"Return the required answer","code":"return ans ; } }"}
{"text":"Function to print first N Wedderburn Etherington numbers","code":"function Wedderburn_Etherington ( n ) {"}
{"text":"Store first 3 numbers","code":"store [ 0 ] = 0 ; store [ 1 ] = 1 ; store [ 2 ] = 1 ;"}
{"text":"Print N terms","code":"for ( var i = 0 ; i < n ; i ++ ) { document . write ( Wedderburn ( i ) ) ; if ( i != n - 1 ) document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"var n = 10 ;"}
{"text":"function call","code":"Wedderburn_Etherington ( n ) ;"}
{"text":"Function to maximum value after merging all elements in the array","code":"function Max_sum ( a , n ) {"}
{"text":"To check if positive and negative elements present or not","code":"let pos = 0 , neg = 0 ; for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Check for positive integer","code":"if ( a [ i ] > 0 ) pos = 1 ;"}
{"text":"Check for negative integer","code":"else if ( a [ i ] < 0 ) neg = 1 ;"}
{"text":"If both positive and negative elements are present","code":"if ( pos == 1 && neg == 1 ) break ; }"}
{"text":"To store maximum value possible","code":"let sum = 0 ; if ( pos == 1 && neg == 1 ) { for ( let i = 0 ; i < n ; i ++ ) sum += Math . abs ( a [ i ] ) ; } else if ( pos == 1 ) {"}
{"text":"To find minimum value","code":"let mini = a [ 0 ] ; sum = a [ 0 ] ; for ( let i = 1 ; i < n ; i ++ ) { mini = Math . min ( mini , a [ i ] ) ; sum += a [ i ] ; }"}
{"text":"Remove minimum element","code":"sum -= 2 * mini ; } else if ( neg == 1 ) {"}
{"text":"Replace with absolute values","code":"for ( let i = 0 ; i < n ; i ++ ) a [ i ] = Math . abs ( a [ i ] ) ;"}
{"text":"To find minimum value","code":"let mini = a [ 0 ] ; sum = a [ 0 ] ; for ( let i = 1 ; i < n ; i ++ ) { mini = Math . min ( mini , a [ i ] ) ; sum += a [ i ] ; }"}
{"text":"Remove minimum element","code":"sum -= 2 * mini ; }"}
{"text":"Return the required sum","code":"return sum ; }"}
{"text":"Driver code","code":"let a = [ 1 , 3 , 5 , - 2 , - 6 ] ; let n = a . length ;"}
{"text":"Function call","code":"document . write ( Max_sum ( a , n ) ) ;"}
{"text":"Recursive function to convert n to its binary equivalent","code":"function decimalToBinary ( n ) {"}
{"text":"Base case","code":"if ( n == 0 ) { document . write ( \" \" ) ; return ; }"}
{"text":"Recursive call","code":"decimalToBinary ( parseInt ( n \/ 2 ) ) ; document . write ( n % 2 ) ; }"}
{"text":"Driver code","code":"var n = 13 ; decimalToBinary ( n ) ;"}
{"text":"Function to find A , B and C","code":"function MinimumValue ( x , y ) {"}
{"text":"Keep minimum number in x","code":"if ( x > y ) { var temp = x ; x = y ; y = temp ; }"}
{"text":"Find the numbers","code":"var a = 1 ; var b = x - 1 ; var c = y - b ; document . write ( a + \" \" + b + \" \" + c ) ; }"}
{"text":"Driver code","code":"var x = 123 , y = 13 ;"}
{"text":"Function call","code":"MinimumValue ( x , y ) ;"}
{"text":"Function that returns true if A can be converted to B with the given operations","code":"function canConvert ( a , b ) { while ( b > a ) {"}
{"text":"If the current number ends with 1","code":"if ( b % 10 == 1 ) { b = parseInt ( b \/ 10 ) ; continue ; }"}
{"text":"If the current number is divisible by 2","code":"if ( b % 2 == 0 ) { b = parseInt ( b \/ 2 ) ; continue ; }"}
{"text":"If above two conditions fail","code":"return false ; }"}
{"text":"If it is possible to convert A to B","code":"if ( b == a ) return true ; return false ; }"}
{"text":"Driver code","code":"let A = 2 , B = 82 ; if ( canConvert ( A , B ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to count distinct rectangles","code":"function count ( N ) { var a = 0 ; a = ( N * ( N + 1 ) ) \/ 2 ; return a ; }"}
{"text":"Driver Code","code":"var n = 4 ; document . write ( count ( n ) ) ;"}
{"text":"Function to return the number of days required","code":"function numberOfDays ( a , b , n ) { var Days = b * ( n + a ) \/ ( a + b ) ; return Days ; }"}
{"text":"Driver code","code":"var a = 10 , b = 20 , n = 5 ; document . write ( numberOfDays ( a , b , n ) ) ;"}
{"text":"Function to return the average of x and y using bit operations","code":"function getAverage ( x , y ) {"}
{"text":"Calculate the average Floor value of ( x + y ) \/ 2","code":"var avg = ( x & y ) + ( ( x ^ y ) >> 1 ) ; return avg ; }"}
{"text":"Driver code","code":"var x = 10 , y = 9 ; document . write ( getAverage ( x , y ) ) ;"}
{"text":"Function to find the smallest index such that there are no 0 or 1 to its right","code":"function smallestIndex ( a , n ) {"}
{"text":"Initially","code":"let right1 = 0 , right0 = 0 ;"}
{"text":"Traverse in the array","code":"let i ; for ( i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if array element is 1","code":"if ( a [ i ] == 1 ) right1 = i ;"}
{"text":"a [ i ] = 0","code":"else right0 = i ; }"}
{"text":"Return minimum of both","code":"return Math . min ( right1 , right0 ) ; }"}
{"text":"Driver Code","code":"var a = [ 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ; let n = a . length ; document . write ( smallestIndex ( a , n ) ) ;"}
{"text":"Function to return the count of squares that can be visited by king in m moves","code":"function countSquares ( r , c , m ) {"}
{"text":"To store the count of squares","code":"let squares = 0 ;"}
{"text":"Check all squares of the chessboard","code":"for ( let i = 1 ; i <= 8 ; i ++ ) { for ( let j = 1 ; j <= 8 ; j ++ ) {"}
{"text":"Check if square ( i , j ) is at a distance <= m units from king 's current position","code":"if ( Math . max ( Math . abs ( i - r ) , Math . abs ( j - c ) ) <= m ) squares ++ ; } }"}
{"text":"Return count of squares","code":"return squares ; }"}
{"text":"Driver Code","code":"let r = 4 , c = 4 , m = 1 ; document . write ( countSquares ( r , c , m ) ) ;"}
{"text":"Function to return the count of quadruples","code":"function countQuadruples ( a , n ) {"}
{"text":"Hash table to count the number of occurrences","code":"let mp = new Map ( ) ;"}
{"text":"Traverse and increment the count","code":"for ( let i = 0 ; i < n ; i ++ ) if ( mp . has ( a [ i ] ) ) { mp . set ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } else { mp . set ( a [ i ] , 1 ) ; } let count = 0 ;"}
{"text":"Run two nested loop for second and third element","code":"for ( let j = 0 ; j < n ; j ++ ) { for ( let k = 0 ; k < n ; k ++ ) {"}
{"text":"If they are same","code":"if ( j == k ) continue ;"}
{"text":"Initially decrease the count","code":"mp . set ( a [ j ] , mp . get ( a [ j ] ) - 1 ) ; mp . set ( a [ k ] , mp . get ( a [ k ] ) - 1 ) ;"}
{"text":"Find the first element using common difference","code":"let first = a [ j ] - ( a [ k ] - a [ j ] ) ;"}
{"text":"Find the fourth element using GP y ^ 2 = x * z property","code":"let fourth = ( a [ k ] * a [ k ] ) \/ a [ j ] ;"}
{"text":"If it is an leteger","code":"if ( ( a [ k ] * a [ k ] ) % a [ j ] == 0 ) {"}
{"text":"If not equal","code":"if ( a [ j ] != a [ k ] ) { if ( mp . has ( first ) && mp . has ( fourth ) ) count += mp . get ( first ) * mp . get ( fourth ) ; }"}
{"text":"Same elements","code":"else if ( mp . has ( first ) && mp . has ( fourth ) ) count += mp . get ( first ) * ( mp . get ( fourth ) - 1 ) ; }"}
{"text":"Later increase the value for future calculations","code":"if ( mp . has ( a [ j ] ) ) { mp . set ( a [ j ] , mp . get ( a [ j ] ) + 1 ) ; } else { mp . set ( a [ j ] , 1 ) ; } if ( mp . has ( a [ k ] ) ) { mp . set ( a [ k ] , mp . get ( a [ k ] ) + 1 ) ; } else { mp . set ( a [ k ] , 1 ) ; } } } return count ; }"}
{"text":"Driver code","code":"let a = [ 2 , 6 , 4 , 9 , 2 ] ; let n = a . length ; document . write ( countQuadruples ( a , n ) ) ;"}
{"text":"Function to return the count of required numbers","code":"function countNumbers ( L , R , K ) { if ( K == 9 ) { K = 0 ; }"}
{"text":"Count of numbers present in given range","code":"var totalnumbers = R - L + 1 ;"}
{"text":"Number of groups of 9 elements starting from L","code":"var factor9 = totalnumbers \/ 9 ;"}
{"text":"Left over elements not covered in factor 9","code":"var rem = totalnumbers % 9 ;"}
{"text":"One Number in each group of 9","code":"var ans = factor9 ;"}
{"text":"To check if any number in rem satisfy the property","code":"for ( var i = R ; i > R - rem ; i -- ) { var rem1 = i % 9 ; if ( rem1 == K ) { ans ++ ; } } return ans ; }"}
{"text":"Driver Code","code":"var L = 10 ; var R = 22 ; var K = 3 ; document . write ( Math . round ( countNumbers ( L , R , K ) ) ) ;"}
{"text":"Function to return the sum of even elements after updating value at given index","code":"function EvenSum ( A , index , value ) {"}
{"text":"Add given value to A [ index ]","code":"A [ index ] = A [ index ] + value ;"}
{"text":"To store the sum of even elements","code":"var sum = 0 ; for ( var i = 0 ; i < A . length ; i ++ )"}
{"text":"If current element is even","code":"if ( A [ i ] % 2 == 0 ) sum = sum + A [ i ] ; return sum ; }"}
{"text":"Function to print the result for every query","code":"function BalanceArray ( A , Q ) {"}
{"text":"Resultant vector that stores the result for every query","code":"var ANS = [ ] ; var i , sum ; for ( i = 0 ; i < Q . length ; i ++ ) { var index = Q [ i ] [ 0 ] ; var value = Q [ i ] [ 1 ] ;"}
{"text":"Get sum of even elements after updating value at given index","code":"sum = EvenSum ( A , index , value ) ;"}
{"text":"Store sum for each query","code":"ANS . push ( sum ) ; }"}
{"text":"Print the result for every query","code":"for ( i = 0 ; i < ANS . length ; i ++ ) document . write ( ANS [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"var A = [ 1 , 2 , 3 , 4 ] ; var Q = [ [ 0 , 1 ] , [ 1 , - 3 ] , [ 0 , - 4 ] , [ 3 , 2 ] ] ; BalanceArray ( A , Q ) ;"}
{"text":"Function to print the result for every query","code":"function BalanceArray ( A , Q ) { var ANS = [ ] ; var i , sum = 0 ; for ( i = 0 ; i < A . length ; i ++ )"}
{"text":"If current element is even","code":"if ( A [ i ] % 2 == 0 ) sum = sum + A [ i ] ; for ( i = 0 ; i < Q . length ; i ++ ) { var index = Q [ i ] [ 0 ] ; var value = Q [ i ] [ 1 ] ;"}
{"text":"If element is even then remove it from sum","code":"if ( A [ index ] % 2 == 0 ) sum = sum - A [ index ] ; A [ index ] = A [ index ] + value ;"}
{"text":"If the value becomes even after updating","code":"if ( A [ index ] % 2 == 0 ) sum = sum + A [ index ] ;"}
{"text":"Store sum for each query","code":"ANS . push ( sum ) ; }"}
{"text":"Print the result for every query","code":"for ( i = 0 ; i < ANS . length ; i ++ ) document . write ( ANS [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"var A = [ 1 , 2 , 3 , 4 ] ; var Q = [ [ 0 , 1 ] , [ 1 , - 3 ] , [ 0 , - 4 ] , [ 3 , 2 ] ] ; BalanceArray ( A , Q ) ;"}
{"text":"Function that calculates number of Hamiltonian cycle","code":"function Cycles ( N ) { var fact = 1 , result = 0 ; result = N - 1 ;"}
{"text":"Calculating factorial","code":"var i = result ; while ( i > 0 ) { fact = fact * i ; i -- ; } return fact \/ 2 ; }"}
{"text":"Driver code","code":"var N = 5 ; var Number = Cycles ( N ) ; document . write ( \" \" + Number ) ;"}
{"text":"Function that returns true if n contains digit m exactly k times","code":"function digitWell ( n , m , k ) { var cnt = 0 ; while ( n > 0 ) { if ( n % 10 == m ) ++ cnt ; n = Math . floor ( n \/ 10 ) ; } if ( cnt == k ) return true ; else return false ; }"}
{"text":"Function to return the smallest integer > n with digit m occurring exactly k times","code":"function findInt ( n , m , k ) { var i = n + 1 ; while ( true ) { if ( digitWell ( i , m , k ) ) return i ; i ++ ; } }"}
{"text":"Driver code","code":"var n = 111 , m = 2 , k = 2 ; document . write ( findInt ( n , m , k ) ) ;"}
{"text":"Function to return the count of odd numbers in the array","code":"function countOdd ( arr , n ) {"}
{"text":"Variable to count odd numbers","code":"var odd = 0 ; for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"Odd number","code":"if ( arr [ i ] % 2 == 1 ) odd ++ ; } return odd ; }"}
{"text":"Function to return the count of valid pairs","code":"function countValidPairs ( arr , n ) { var odd = countOdd ( arr , n ) ; return ( odd * ( odd - 1 ) ) \/ 2 ; }"}
{"text":"Driver Code","code":"var arr = [ 1 , 2 , 3 , 4 , 5 ] ; var n = arr . length ; document . write ( countValidPairs ( arr , n ) ) ;"}
{"text":"Function to return the gcd of two numbers","code":"function gcd ( a , b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }"}
{"text":"Function to return the lcm of all the elements of the array","code":"function lcmOfArray ( arr , n ) { if ( n < 1 ) return 0 ; let lcm = arr [ 0 ] ;"}
{"text":"To calculate lcm of two numbers multiply them and divide the result by gcd of both the numbers","code":"for ( let i = 1 ; i < n ; i ++ ) lcm = parseInt ( ( lcm * arr [ i ] ) \/ gcd ( lcm , arr [ i ] ) ) ;"}
{"text":"Return the LCM of the array elements","code":"return lcm ; }"}
{"text":"Function to return the smallest perfect cube divisible by all the elements of arr [ ]","code":"function minPerfectCube ( arr , n ) { let minPerfectCube ;"}
{"text":"LCM of all the elements of arr [ ]","code":"let lcm = lcmOfArray ( arr , n ) ; minPerfectCube = lcm ; let cnt = 0 ; while ( lcm > 1 && lcm % 2 == 0 ) { cnt ++ ; lcm = parseInt ( lcm \/ 2 ) ; }"}
{"text":"If 2 divides lcm cnt number of times","code":"if ( cnt % 3 == 2 ) minPerfectCube *= 2 ; else if ( cnt % 3 == 1 ) minPerfectCube *= 4 ; let i = 3 ;"}
{"text":"Check all the numbers that divide lcm","code":"while ( lcm > 1 ) { cnt = 0 ; while ( lcm % i == 0 ) { cnt ++ ; lcm = parseInt ( lcm \/ i ) ; } if ( cnt % 3 == 1 ) minPerfectCube *= i * i ; else if ( cnt % 3 == 2 ) minPerfectCube *= i ; i += 2 ; }"}
{"text":"Return the answer","code":"return minPerfectCube ; }"}
{"text":"Driver code","code":"let arr = [ 10 , 125 , 14 , 42 , 100 ] ; let n = arr . length ; document . write ( minPerfectCube ( arr , n ) ) ;"}
{"text":"Utility function to check if a number is prime or not","code":"function isPrime ( n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function that returns true if n is a strong prime","code":"function isStrongPrime ( n ) {"}
{"text":"If n is not a prime number or n is the first prime then return false","code":"if ( ! isPrime ( n ) n == 2 ) return false ;"}
{"text":"Initialize previous_prime to n - 1 and next_prime to n + 1","code":"let previous_prime = n - 1 ; let next_prime = n + 1 ;"}
{"text":"Find next prime number","code":"while ( ! isPrime ( next_prime ) ) next_prime ++ ;"}
{"text":"Find previous prime number","code":"while ( ! isPrime ( previous_prime ) ) previous_prime -- ;"}
{"text":"Arithmetic mean","code":"let mean = parseInt ( ( previous_prime + next_prime ) \/ 2 ) ;"}
{"text":"If n is a strong prime","code":"if ( n > mean ) return true ; else return false ; }"}
{"text":"Driver code","code":"let n = 11 ; if ( isStrongPrime ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to return the required number of digits to be removed","code":"function countDigitsToBeRemoved ( N , K ) {"}
{"text":"Converting the given number into string","code":"var s = N . toString ( ) ;"}
{"text":"variable to store number of digits to be removed","code":"var res = 0 ;"}
{"text":"variable to denote if atleast one zero has been found","code":"var f_zero = 0 ; for ( var i = s . length - 1 ; i >= 0 ; i -- ) { if ( K === 0 ) return res ; if ( s [ i ] === \" \" ) {"}
{"text":"zero found","code":"f_zero = 1 ; K -- ; } else res ++ ; }"}
{"text":"return size - 1 if K is not zero and atleast one zero is present , otherwise result","code":"if ( K === 0 ) return res ; else if ( f_zero === 1 ) return s . length - 1 ; return - 1 ; }"}
{"text":"Driver Code to test above function","code":"var N = 10904025 ; var K = 2 ; document . write ( countDigitsToBeRemoved ( N , K ) + \" \" ) ; N = 1000 ; K = 5 ; document . write ( countDigitsToBeRemoved ( N , K ) + \" \" ) ; N = 23985 ; K = 2 ; document . write ( countDigitsToBeRemoved ( N , K ) + \" \" ) ;"}
{"text":"Function to return the sum of the series","code":"function getSum ( a , n ) {"}
{"text":"variable to store the answer","code":"let sum = 0 ; for ( let i = 1 ; i <= n ; ++ i ) {"}
{"text":"Math . pow ( x , y ) returns x ^ y","code":"sum += ( i \/ Math . pow ( a , i ) ) ; } return sum ; }"}
{"text":"Driver code","code":"let a = 3 , n = 3 ;"}
{"text":"Prlet the sum of the series","code":"document . write ( getSum ( a , n ) . toFixed ( 7 ) ) ;"}
{"text":"Utility function to find largest prime factor of a number","code":"function largestPrimeFactor ( n ) {"}
{"text":"Initialize the maximum prime factor variable with the lowest one","code":"var max = - 1 ;"}
{"text":"Print the number of 2 s that divide n","code":"while ( n % 2 == 0 ) { max = 2 ;"}
{"text":"n >>= 1 ; equivalent to n \/= 2","code":"}"}
{"text":"n must be odd at this point , thus skip the even numbers and iterate only for odd integers","code":"for ( var i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { max = i ; n = n \/ i ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( n > 2 ) max = n ; return max ; }"}
{"text":"Function to check Unusual number","code":"function checkUnusual ( n ) {"}
{"text":"Get the largest Prime Factor of the number","code":"var factor = largestPrimeFactor ( n ) ;"}
{"text":"Check if largest prime factor is greater than sqrt ( n )","code":"if ( factor > Math . sqrt ( n ) ) { return true ; } else { return false ; } }"}
{"text":"Driver Code","code":"var n = 14 ; if ( checkUnusual ( n ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to print the desired result after computation","code":"function isHalfReducible ( arr , n , m ) { var frequencyHash = Array ( m + 1 ) . fill ( 0 ) ; var i ; for ( i = 0 ; i < n ; i ++ ) { frequencyHash [ arr [ i ] % ( m + 1 ) ] ++ ; } for ( i = 0 ; i <= m ; i ++ ) { if ( frequencyHash [ i ] >= n \/ 2 ) break ; } if ( i <= m ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"var arr = [ 8 , 16 , 32 , 3 , 12 ] ; var n = arr . length ; var m = 7 ; isHalfReducible ( arr , n , m ) ;"}
{"text":"Javascript program to check if the given number is Ore number","code":"var arr = [ ] ;"}
{"text":"Function that returns harmonic mean","code":"function generateDivisors ( n ) {"}
{"text":"Note that this loop runs till square root","code":"for ( var i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) {"}
{"text":"If divisors are equal , store ' i '","code":"if ( n \/ i == i ) arr . push ( i ) ;"}
{"text":"else Otherwise store ' i ' and ' n \/ i ' both","code":"{ arr . push ( i ) ; arr . push ( n \/ i ) ; } } } }"}
{"text":"Utility function to calculate harmonic mean of the divisors","code":"function harmonicMean ( n ) { generateDivisors ( n ) ;"}
{"text":"Declare sum variables and initialize with zero .","code":"var sum = 0.0 ; var len = arr . length ;"}
{"text":"calculate denominator","code":"for ( var i = 0 ; i < len ; i ++ ) sum = sum + ( n \/ arr [ i ] ) ; sum = ( sum \/ n ) ;"}
{"text":"Calculate harmonic mean and return","code":"return ( arr . length \/ sum ) ; }"}
{"text":"Function to check if a number is ore number","code":"function isOreNumber ( n ) {"}
{"text":"Calculate Harmonic mean of divisors of n","code":"var mean = harmonicMean ( n ) ;"}
{"text":"Check if harmonic mean is an integer or not","code":"if ( mean - parseInt ( mean ) == 0 ) return true ; else return false ; }"}
{"text":"Driver Code","code":"var n = 28 ; if ( isOreNumber ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Javascript program to check Euclid Number","code":"let MAX = 10000 ; let s = new Set ( ) ;"}
{"text":"Function to generate the Prime numbers and store their products","code":"function SieveOfEratosthenes ( ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"let prime = new Array ( MAX ) ; for ( let i = 0 ; i < prime . length ; i ++ ) { prime [ i ] = true ; } prime [ 0 ] = false ; prime [ 1 ] = false ; for ( let p = 2 ; p * p < MAX ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( let i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } }"}
{"text":"store prefix product of prime numbers to unordered_set ' s '","code":"let product = 1 ; for ( let p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) {"}
{"text":"update product by multiplying next prime","code":"product = product * p ;"}
{"text":"insert ' produc + 1' to set","code":"s . add ( product + 1 ) ; } } }"}
{"text":"Function to check the number for Euclid Number","code":"function isEuclid ( n ) {"}
{"text":"Check if number exist in unordered set or not If exist , return true","code":"if ( s . has ( n ) ) return true ; else return false ; }"}
{"text":"Get the prime numbers","code":"SieveOfEratosthenes ( ) ;"}
{"text":"Get n","code":"let n = 31 ;"}
{"text":"Check if n is Euclid Number","code":"if ( isEuclid ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Get n","code":"n = 42 ;"}
{"text":"Check if n is Euclid Number","code":"if ( isEuclid ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to check if a number is prime or not","code":"function isPrime ( n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( var i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } } return true ; }"}
{"text":"Utility function to check power of two","code":"function isPowerOfTwo ( n ) { return ( n != 0 ) && ( ( n & ( n - 1 ) ) == 0 ) ; }"}
{"text":"Driver Program","code":"var n = 43 ;"}
{"text":"Check if number is prime and of the form ( 2 ^ q + 1 ) \/ 3","code":"if ( isPrime ( n ) && ( isPowerOfTwo ( n * 3 - 1 ) ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to find the area of the square","code":"function area ( a ) {"}
{"text":"side of hexagon cannot be negative","code":"if ( a < 0 ) return - 1 ;"}
{"text":"area of the square","code":"var area = Math . pow ( ( a * Math . sqrt ( 3 ) ) \/ ( Math . sqrt ( 2 ) ) , 2 ) ; return area ; }"}
{"text":"Driver code","code":"var a = 5 ; document . write ( area ( a ) . toFixed ( 5 ) ) ;"}
{"text":"calculate Nth term of series","code":"function nthTerm ( n ) { return 3 * Math . pow ( n , 2 ) - 4 * n + 2 ; }"}
{"text":"Driver code","code":"let N = 4 ; document . write ( nthTerm ( N ) ) ;"}
{"text":"Function to calculate the sum","code":"function calculateSum ( n ) { return n * ( n + 1 ) \/ 2 + Math . pow ( ( n * ( n + 1 ) \/ 2 ) , 2 ) ; }"}
{"text":"number of terms to be included in the sum","code":"let n = 3 ;"}
{"text":"find the Sum","code":"document . write ( \" \" + calculateSum ( n ) ) ;"}
{"text":"Function to check if arrays are permutations of each other .","code":"function arePermutations ( a , b , n , m ) { let sum1 = 0 , sum2 = 0 , mul1 = 1 , mul2 = 1 ;"}
{"text":"Calculating sum and multiply of first array","code":"for ( let i = 0 ; i < n ; i ++ ) { sum1 += a [ i ] ; mul1 *= a [ i ] ; }"}
{"text":"Calculating sum and multiply of second array","code":"for ( let i = 0 ; i < m ; i ++ ) { sum2 += b [ i ] ; mul2 *= b [ i ] ; }"}
{"text":"If sum and mul of both arrays are equal , return true , else return false .","code":"return ( ( sum1 == sum2 ) && ( mul1 == mul2 ) ) ; }"}
{"text":"Driver code","code":"let a = [ 1 , 3 , 2 ] ; let b = [ 3 , 1 , 2 ] ; let n = a . length ; let m = b . length ; if ( arePermutations ( a , b , n , m ) == true ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to find the B start to C","code":"function Race ( B , C ) { var result = 0 ;"}
{"text":"When B completed it 's 100 meter  then Completed meters by C is","code":"result = ( ( C * 100 ) \/ B ) ; return 100 - result ; }"}
{"text":"Driver Code","code":"var B = 10 , C = 28 ;"}
{"text":"When A completed it 's 100 meter Then completed meters of B and C is","code":"B = 100 - B ; C = 100 - C ; document . write ( Race ( B , C ) + \" \" ) ;"}
{"text":"Function to calculate the time","code":"function Time ( arr , n , Emptypipe ) { var fill = 0 ; for ( var i = 0 ; i < n ; i ++ ) fill += 1 \/ arr [ i ] ; fill = fill - ( 1 \/ Emptypipe ) ; return 1 \/ fill ; }"}
{"text":"Driver Code","code":"var arr = [ 12 , 14 ] ; var Emptypipe = 30 ; var n = arr . length ; document . write ( Math . floor ( Time ( arr , n , Emptypipe ) ) + \" \" ) ;"}
{"text":"Function to check Divisibility","code":"function check ( n ) { let sum = 0 ;"}
{"text":"Sum of all individual digits","code":"while ( n != 0 ) { sum += n % 10 ; n = Math . floor ( n \/ 10 ) ; }"}
{"text":"Condition","code":"if ( sum % 7 == 0 ) return 1 ; else return 0 ; }"}
{"text":"Octal number","code":"let n = 25 ; ( check ( n ) == 1 ) ? document . write ( \" \" ) : document . write ( \" \" ) ;"}
{"text":"Javascript program to find sum of prime divisors of N","code":"let N = 1000005 ;"}
{"text":"Function to check if the number is prime or not .","code":"function isPrime ( n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"function to find sum of prime divisors of N","code":"function SumOfPrimeDivisors ( n ) { let sum = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { if ( isPrime ( i ) ) sum += i ; } } return sum ; }"}
{"text":"Driver code","code":"let n = 60 ; document . write ( \" \" + SumOfPrimeDivisors ( n ) ) ;"}
{"text":"function to find prime divisors of all numbers from 1 to n","code":"function Sum ( N ) { let SumOfPrimeDivisors = new Array ( N + 1 ) ; for ( let i = 0 ; i < SumOfPrimeDivisors . length ; i ++ ) { SumOfPrimeDivisors [ i ] = 0 ; } for ( let i = 2 ; i <= N ; ++ i ) {"}
{"text":"if the number is prime","code":"if ( SumOfPrimeDivisors [ i ] == 0 ) {"}
{"text":"add this prime to all it 's multiples","code":"for ( let j = i ; j <= N ; j += i ) { SumOfPrimeDivisors [ j ] += i ; } } } return SumOfPrimeDivisors [ N ] ; }"}
{"text":"Driver code","code":"let N = 60 ; document . write ( \" \" + \" \" + Sum ( N ) + \" \" ) ;"}
{"text":"Function to find the square of 333. . .333 , 666. . .666 and 999. . .999","code":"function find_Square_369 ( num ) { let a , b , c , d ;"}
{"text":"if the number is 333. . .333","code":"if ( num [ 0 ] == ' ' ) { a = ' ' ; b = ' ' ; c = ' ' ; d = ' ' ; }"}
{"text":"if the number is 666. . .666","code":"else if ( num [ 0 ] == ' ' ) { a = ' ' ; b = ' ' ; c = ' ' ; d = ' ' ; }"}
{"text":"if the number is 999. . .999","code":"else { a = ' ' ; b = ' ' ; c = ' ' ; d = ' ' ; }"}
{"text":"variable for hold result","code":"let result = \" \" ;"}
{"text":"find the no of digit","code":"let size = num . length ;"}
{"text":"add size - 1 time a in result","code":"for ( let i = 1 ; i < size ; i ++ ) result += a ;"}
{"text":"add one time b in result","code":"result += b ;"}
{"text":"add size - 1 time c in result","code":"for ( let i = 1 ; i < size ; i ++ ) result += c ;"}
{"text":"add one time d in result","code":"result += d ;"}
{"text":"return result","code":"return result ; }"}
{"text":"Drivers code","code":"let num_3 , num_6 , num_9 ; num_3 = \" \" ; num_6 = \" \" ; num_9 = \" \" ; let result = \" \" ;"}
{"text":"find square of 33. .33","code":"result = find_Square_369 ( num_3 ) ; document . write ( \" \" + num_3 + \" \" + result + \" \" ) ;"}
{"text":"find square of 66. .66","code":"result = find_Square_369 ( num_6 ) ; document . write ( \" \" + num_9 + \" \" + result + \" \" ) ;"}
{"text":"find square of 66. .66","code":"result = find_Square_369 ( num_9 ) ; document . write ( \" \" + num_9 + \" \" + result + \" \" ) ;"}
{"text":"Function to find the required factorial","code":"function fact ( n ) { if ( n == 0 n == 1 ) return 1 ; let ans = 1 ; for ( let i = 1 ; i <= n ; i ++ ) ans = ans * i ; return ans ; }"}
{"text":"Function to find nCr","code":"function nCr ( n , r ) { let Nr = n , Dr = 1 , ans = 1 ; for ( let i = 1 ; i <= r ; i ++ ) { ans = parseInt ( ( ans * Nr ) \/ ( Dr ) , 10 ) ; Nr -- ; Dr ++ ; } return ans ; }"}
{"text":"Function to find the number of ways","code":"function solve ( n ) { let N = 2 * n - 2 ; let R = n - 1 ; return nCr ( N , R ) * fact ( n - 1 ) ; }"}
{"text":"Driver code","code":"let n = 6 ; document . write ( solve ( n ) ) ;"}
{"text":"JavaScript program to find Pythagorean Triplet of given sum .","code":"function pythagoreanTriplet ( n ) {"}
{"text":"Considering triplets in sorted order . The value of first element in sorted triplet can be at - most n \/ 3.","code":"for ( let i = 1 ; i <= n \/ 3 ; i ++ ) {"}
{"text":"The value of second element must be less than equal to n \/ 2","code":"for ( let j = i + 1 ; j <= n \/ 2 ; j ++ ) { let k = n - i - j ; if ( i * i + j * j == k * k ) { document . write ( i + \" \" + j + \" \" + k ) ; return ; } } } document . write ( \" \" ) ; }"}
{"text":"Driver Code","code":"let n = 12 ; pythagoreanTriplet ( n ) ;"}
{"text":"function to calculate factorial of a number","code":"function factorial ( n ) { let f = 1 ; for ( let i = 2 ; i <= n ; i ++ ) f *= i ; return f ; }"}
{"text":"function to prlet the series","code":"function series ( A , X , n ) {"}
{"text":"calculating the value of n !","code":"let nFact = factorial ( n ) ;"}
{"text":"loop to display the series","code":"for ( let i = 0 ; i < n + 1 ; i ++ ) {"}
{"text":"For calculating the value of nCr","code":"let niFact = factorial ( n - i ) ; let iFact = factorial ( i ) ;"}
{"text":"calculating the value of A to the power k and X to the power k","code":"let aPow = Math . pow ( A , n - i ) ; let xPow = Math . pow ( X , i ) ;"}
{"text":"display the series","code":"document . write ( ( nFact * aPow * xPow ) \/ ( niFact * iFact ) + \" \" ) ; } }"}
{"text":"Driver Code","code":"let A = 3 , X = 4 , n = 5 ; series ( A , X , n ) ;"}
{"text":"function to calculate series sum","code":"function seiresSum ( n , a ) { let res = 0 , i ; for ( i = 0 ; i < 2 * n ; i ++ ) { if ( i % 2 == 0 ) res += a [ i ] * a [ i ] ; else res -= a [ i ] * a [ i ] ; } return res ; }"}
{"text":"Driver Code","code":"let n = 2 ; let a = [ 1 , 2 , 3 , 4 ] ; document . write ( seiresSum ( n , a ) ) ;"}
{"text":"Function to return power of a no . ' r ' in factorial of n","code":"function power ( n , r ) {"}
{"text":"Keep dividing n by powers of ' r ' and update count","code":"let count = 0 ; for ( let i = r ; ( n \/ i ) >= 1 ; i = i * r ) count += n \/ i ; return count ; }"}
{"text":"Driver code","code":"let n = 6 , r = 3 ; document . write ( power ( n , r ) ) ;"}
{"text":"Returns the Avg of first n odd numbers","code":"function avg_of_odd_num ( n ) {"}
{"text":"sum of first n odd number","code":"let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) sum += ( 2 * i + 1 ) ;"}
{"text":"Average of first n odd numbers","code":"return sum \/ n ; }"}
{"text":"Driver Code","code":"let n = 20 ; document . write ( avg_of_odd_num ( n ) ) ;"}
{"text":"Return the average of sum of first n odd numbers","code":"function avg_of_odd_num ( n ) { return n ; }"}
{"text":"Driver Code","code":"var n = 8 ; document . write ( avg_of_odd_num ( n ) ) ;"}
{"text":"Function to fill Fibonacci Numbers in f [ ]","code":"function fib ( f , N ) {"}
{"text":"1 st and 2 nd number of the series are 1 and 1","code":"f [ 1 ] = 1 ; f [ 2 ] = 1 ; for ( var i = 3 ; i <= N ; i ++ )"}
{"text":"Add the previous 2 numbers in the series and store it","code":"f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; } function fiboTriangle ( n ) {"}
{"text":"Fill Fibonacci numbers in f [ ] using fib ( ) . We need N = n * ( n + 1 ) \/ 2 Fibonacci numbers to make a triangle of height n","code":"var N = ( n * ( n + 1 ) ) \/ 2 ; var f = [ ... Array ( N + 1 ) ] ; fib ( f , N ) ;"}
{"text":"To store next Fibonacci Number to print","code":"var fiboNum = 1 ;"}
{"text":"for loop to keep track of number of lines","code":"for ( var i = 1 ; i <= n ; i ++ ) {"}
{"text":"For loop to keep track of numbers in each line","code":"for ( var j = 1 ; j <= i ; j ++ ) document . write ( f [ fiboNum ++ ] + \" \" ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"var n = 5 ; fiboTriangle ( n ) ;"}
{"text":"Function to calculate the average of odd numbers","code":"function averageOdd ( n ) { if ( n % 2 == 0 ) { document . write ( \" \" ) ; return - 1 ; } let sum = 0 , count = 0 ; while ( n >= 1 ) {"}
{"text":"count odd numbers","code":"count ++ ;"}
{"text":"store the sum of odd numbers","code":"sum += n ; n = n - 2 ; } return sum \/ count ; }"}
{"text":"driver function","code":"let n = 15 ; document . write ( averageOdd ( n ) ) ;"}
{"text":"Function to calculate the average of odd numbers","code":"function averageOdd ( n ) { if ( n % 2 == 0 ) { document . write ( \" \" ) ; return - 1 ; } return ( n + 1 ) \/ 2 ; }"}
{"text":"driver function","code":"let n = 15 ; document . write ( averageOdd ( n ) ) ;"}
{"text":"JAVASCRIPT program to find max between two Rational numbers","code":"class Rational { constructor ( nume , deno ) { this . nume = nume ; this . deno = deno ; } }"}
{"text":"Get lcm of two number 's","code":"function lcm ( a , b ) { return ( a * b ) \/ ( __gcd ( a , b ) ) ; }"}
{"text":"Get max rational number","code":"function maxRational ( first , sec ) {"}
{"text":"Find the LCM of first . denominator and sec . denominator","code":"let k = lcm ( first . deno , sec . deno ) ;"}
{"text":"Declare nume1 and nume2 for get the value of first numerator and second numerator","code":"let nume1 = first . nume ; let nume2 = sec . nume ; nume1 *= k \/ ( first . deno ) ; nume2 *= k \/ ( sec . deno ) ; return ( nume2 < nume1 ) ? first : sec ; } function __gcd ( a , b ) { return b == 0 ? a : __gcd ( b , a % b ) ; }"}
{"text":"Driver Code","code":"let first = new Rational ( 3 , 2 ) ; let sec = new Rational ( 3 , 4 ) ; let res = maxRational ( first , sec ) ; document . write ( res . nume + \" \" + res . deno ) ;"}
{"text":"Function to find the trinomial triangle value .","code":"function TrinomialValue ( n , k ) {"}
{"text":"base case","code":"if ( n == 0 && k == 0 ) return 1 ;"}
{"text":"base case","code":"if ( k < - n k > n ) return 0 ;"}
{"text":"recursive step .","code":"return TrinomialValue ( n - 1 , k - 1 ) + TrinomialValue ( n - 1 , k ) + TrinomialValue ( n - 1 , k + 1 ) ; }"}
{"text":"Function to print Trinomial Triangle of height n .","code":"function printTrinomial ( n ) {"}
{"text":"printing n rows .","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"printing first half of triangle","code":"for ( let j = - i ; j <= 0 ; j ++ ) document . write ( TrinomialValue ( i , j ) + \" \" ) ;"}
{"text":"printing second half of triangle .","code":"for ( let j = 1 ; j <= i ; j ++ ) document . write ( TrinomialValue ( i , j ) + \" \" ) ; document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"let n = 4 ; printTrinomial ( n ) ;"}
{"text":"Javascript Program to print trinomial triangle .","code":"var MAX = 10"}
{"text":"Function to find the trinomial triangle value .","code":"function TrinomialValue ( dp , n , k ) {"}
{"text":"Using property of trinomial triangle .","code":"if ( k < 0 ) k = - k ;"}
{"text":"If value already calculated , return that .","code":"if ( dp [ n ] [ k ] != 0 ) return dp [ n ] [ k ] ;"}
{"text":"base case","code":"if ( n == 0 && k == 0 ) return 1 ;"}
{"text":"base case","code":"if ( k < - n k > n ) return 0 ;"}
{"text":"recursive step and storing the value .","code":"return ( dp [ n ] [ k ] = TrinomialValue ( dp , n - 1 , k - 1 ) + TrinomialValue ( dp , n - 1 , k ) + TrinomialValue ( dp , n - 1 , k + 1 ) ) ; }"}
{"text":"Function to print Trinomial Triangle of height n .","code":"function printTrinomial ( n ) { var dp = Array . from ( Array ( MAX ) , ( ) => Array ( MAX ) . fill ( 0 ) ) ;"}
{"text":"printing n rows .","code":"for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"printing first half of triangle","code":"for ( var j = - i ; j <= 0 ; j ++ ) document . write ( TrinomialValue ( dp , i , j ) + \" \" ) ;"}
{"text":"printing second half of triangle .","code":"for ( var j = 1 ; j <= i ; j ++ ) document . write ( TrinomialValue ( dp , i , j ) + \" \" ) ; document . write ( \" \" ) ; } }"}
{"text":"Driven Program","code":"var n = 4 ; printTrinomial ( n ) ;"}
{"text":"function to find sum of largest prime factor of each number less than equal to n","code":"function sumOfLargePrimeFactor ( n ) {"}
{"text":"Create an integer array \" prime [ 0 . . n ] \" and initialize all entries of it as 0. A value in prime [ i ] will finally be 0 if ' i ' is a prime , else it will contain the largest prime factor of ' i ' .","code":"let prime = new Array ( n + 1 ) ; let sum = 0 ; let max = n \/ 2 ; for ( let i = 0 ; i < n + 1 ; i ++ ) prime [ i ] = 0 ; for ( let p = 2 ; p <= max ; p ++ ) {"}
{"text":"If prime [ p ] is '0' , then it is a prime number","code":"if ( prime [ p ] == 0 ) {"}
{"text":"Update all multiples of p","code":"for ( let i = p * 2 ; i <= n ; i += p ) prime [ i ] = p ; } }"}
{"text":"Sum up the largest prime factor of all the numbers","code":"for ( let p = 2 ; p <= n ; p ++ ) {"}
{"text":"If ' p ' is a non - prime number then prime [ p ] gives its largesr prime factor","code":"if ( prime [ p ] ) sum += prime [ p ] ;"}
{"text":"' p ' is a prime number","code":"else sum += p ; }"}
{"text":"Required sum","code":"return sum ; }"}
{"text":"Driver code","code":"let n = 12 ; document . write ( \" \" + sumOfLargePrimeFactor ( n ) ) ;"}
{"text":"Function for calculating sum of multiples of a upto N","code":"function calculate_sum ( a , N ) {"}
{"text":"Number of multiples","code":"m = N \/ a ;"}
{"text":"Sum of first m natural numbers","code":"sum = m * ( m + 1 ) \/ 2 ;"}
{"text":"Sum of multiples","code":"ans = a * sum ; return ans ; }"}
{"text":"Driver code","code":"let a = 7 ; let N = 49 ; document . write ( \" \" + a + \" \" + N + \" \" + calculate_sum ( a , N ) ) ;"}
{"text":"Function to check whether a number is power of 2 or not","code":"function ispowerof2 ( num ) { if ( ( num & ( num - 1 ) ) == 0 ) return 1 ; return 0 ; }"}
{"text":"Driver code","code":"var num = 549755813888 ; document . write ( ispowerof2 ( num ) ) ;"}
{"text":"To count number of factors in a number","code":"function counDivisors ( X ) {"}
{"text":"Initialize count with 0","code":"let count = 0 ;"}
{"text":"Increment count for every factor of the given number X .","code":"for ( let i = 1 ; i <= X ; ++ i ) { if ( X % i == 0 ) { count ++ ; } }"}
{"text":"Return number of factors","code":"return count ; }"}
{"text":"Returns number of divisors in array multiplication","code":"function countDivisorsMult ( arr , n ) {"}
{"text":"Multipliying all elements of the given array .","code":"let mul = 1 ; for ( let i = 0 ; i < n ; ++ i ) mul *= arr [ i ] ;"}
{"text":"Calling function which count number of factors of the number","code":"return counDivisors ( mul ) ; }"}
{"text":"driver function","code":"let arr = [ 2 , 4 , 6 ] ; let n = arr . length ; document . write ( countDivisorsMult ( arr , n ) ) ;"}
{"text":"javascript program to count divisors in array multiplication .","code":"function SieveOfEratosthenes ( largest , prime ) {"}
{"text":"Create a boolean array \" isPrime [ 0 . . n ] \" and initialize all entries it as true . A value in isPrime [ i ] will finally be false if i is Not a isPrime , else true .","code":"var isPrime = Array ( largest + 1 ) . fill ( true ) ; var p , i ; for ( p = 2 ; p * p <= largest ; p ++ ) {"}
{"text":"If isPrime [ p ] is not changed , then it is a isPrime","code":"if ( isPrime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( i = p * 2 ; i <= largest ; i += p ) isPrime [ i ] = false ; } }"}
{"text":"Print all isPrime numbers","code":"for ( p = 2 ; p <= largest ; p ++ ) if ( isPrime [ p ] ) prime . push ( p ) ; }"}
{"text":"Returns number of divisors in array multiplication","code":"function countDivisorsMult ( arr , n ) {"}
{"text":"Find all prime numbers smaller than the largest element .","code":"var largest = Math . max . apply ( null , arr ) ; var prime = [ ] ; SieveOfEratosthenes ( largest , prime ) ;"}
{"text":"Find counts of occurrences of each prime factor","code":"var j ; var mp = new Map ( ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < prime . length ; j ++ ) { while ( arr [ i ] > 1 && arr [ i ] % prime [ j ] == 0 ) { arr [ i ] \/= prime [ j ] ; if ( mp . has ( prime [ j ] ) ) mp . set ( prime [ j ] , mp . get ( prime [ j ] ) + 1 ) ; else mp . set ( prime [ j ] , 1 ) ; } } if ( arr [ i ] != 1 ) { if ( mp . has ( arr [ i ] ) ) mp . set ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; else mp . set ( arr [ i ] , 1 ) ; } }"}
{"text":"Compute count of all divisors using counts prime factors .","code":"var res = 1 ; for ( const [ key , value ] of mp . entries ( ) ) { res *= ( value + 1 ) ; } return res ; }"}
{"text":"Driver code","code":"var arr = [ 2 , 4 , 6 ] ; var n = arr . length ; document . write ( countDivisorsMult ( arr , n ) ) ;"}
{"text":"Function to generate prime numbers in the given range [ L , R ]","code":"function findPrimeNos ( L , R , M ) {"}
{"text":"Store all value in the range","code":"for ( var i = L ; i <= R ; i ++ ) { if ( M . has ( i ) ) M . set ( i , M . get ( i ) + 1 ) else M . set ( i , 1 ) }"}
{"text":"Erase 1 as its non - prime","code":"if ( M . has ( 1 ) ) { M . delete ( 1 ) ; }"}
{"text":"Perform Sieve of Eratosthenes","code":"for ( var i = 2 ; i <= parseInt ( Math . sqrt ( R ) ) ; i ++ ) { var multiple = 2 ; while ( ( i * multiple ) <= R ) {"}
{"text":"Find current multiple","code":"if ( M . has ( i * multiple ) ) {"}
{"text":"Erase as it is a non - prime","code":"M . delete ( i * multiple ) ; }"}
{"text":"Increment multiple","code":"multiple ++ ; } } return M ; }"}
{"text":"Function to print all the prime pairs in the given range that differs by K","code":"function getPrimePairs ( L , R , K ) { var M = new Map ( ) ;"}
{"text":"Generate all prime number","code":"M = findPrimeNos ( L , R , M ) ;"}
{"text":"Traverse the Map M","code":"M . forEach ( ( value , key ) => {"}
{"text":"If it . first & ( it . first + K ) is prime then print this pair","code":"if ( M . has ( key + K ) ) { document . write ( \" \" + key + \" \" + ( key + K ) + \" \" ) ; } } ) ; }"}
{"text":"Given range","code":"var L = 1 , R = 19 ;"}
{"text":"Given K","code":"var K = 6 ;"}
{"text":"Function Call","code":"getPrimePairs ( L , R , K ) ;"}
{"text":"Function to find the nth Enneacontahexagon Number","code":"function EnneacontahexagonNum ( n ) { return ( 94 * n * n - 92 * n ) \/ 2 ; }"}
{"text":"Driver code","code":"let n = 3 ; document . write ( EnneacontahexagonNum ( n ) ) ;"}
{"text":"Function to find the two composite numbers","code":"function find_composite_nos ( n ) { document . write ( 9 * n + \" \" + 8 * n ) ; }"}
{"text":"Driver code","code":"var n = 4 ; find_composite_nos ( n ) ;"}
{"text":"Function to find number of unordered pairs","code":"function freqPairs ( arr , n ) {"}
{"text":"Maximum element from the array","code":"let max = Math . max ( ... arr ) ;"}
{"text":"Array to store the frequency of each element","code":"let freq = new Array ( max + 1 ) . fill ( 0 ) ;"}
{"text":"Stores the number of unordered pairs","code":"let count = 0 ;"}
{"text":"Store the frequency of each element","code":"for ( let i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ;"}
{"text":"Find the number of unordered pairs","code":"for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 2 * arr [ i ] ; j <= max ; j += arr [ i ] ) {"}
{"text":"If the number j divisible by ith element is present in the array","code":"if ( freq [ j ] >= 1 ) count += freq [ j ] ; }"}
{"text":"If the ith element of the array has frequency more than one","code":"if ( freq [ arr [ i ] ] > 1 ) { count += freq [ arr [ i ] ] - 1 ; freq [ arr [ i ] ] -- ; } } return count ; }"}
{"text":"Driver code","code":"let arr = [ 3 , 2 , 4 , 2 , 6 ] ; let n = arr . length ; document . write ( freqPairs ( arr , n ) ) ;"}
{"text":"calculate Nth term of given series","code":"function Nth_Term ( n ) { return ( 2 * Math . pow ( n , 3 ) - 3 * Math . pow ( n , 2 ) + n + 6 ) \/ 6 ; }"}
{"text":"Driver code","code":"let N = 8 ; document . write ( Nth_Term ( N ) ) ;"}
{"text":"Function to find n - th number in series made of 3 and 5","code":"function prletNthElement ( n ) {"}
{"text":"create an array of size ( n + 1 )","code":"let arr = Array ( n + 1 ) . fill ( 0 ) ; arr [ 1 ] = 3 ; arr [ 2 ] = 5 ; for ( i = 3 ; i <= n ; i ++ ) {"}
{"text":"If i is odd","code":"if ( i % 2 != 0 ) arr [ i ] = arr [ i \/ 2 ] * 10 + 3 ; else arr [ i ] = arr [ ( i \/ 2 ) - 1 ] * 10 + 5 ; } return arr [ n ] ; }"}
{"text":"main function","code":"let n = 6 ; document . write ( prletNthElement ( n ) ) ;"}
{"text":"function to calculate Nth term of series","code":"function nthTerm ( N ) {"}
{"text":"By using above formula","code":"return parseInt ( N * ( parseInt ( N \/ 2 ) + ( ( N % 2 ) * 2 ) + N ) ) ; }"}
{"text":"get the value of N","code":"let N = 5 ;"}
{"text":"Calculate and print the Nth term","code":"document . write ( \" \" + N + \" \" + nthTerm ( N ) ) ;"}
{"text":"function to print the series","code":"function series ( A , X , n ) {"}
{"text":"Calculating and printing first term","code":"let term = Math . pow ( A , n ) ; document . write ( term + \" \" ) ;"}
{"text":"Computing and printing remaining terms","code":"for ( let i = 1 ; i <= n ; i ++ ) {"}
{"text":"Find current term using previous terms We increment power of X by 1 , decrement power of A by 1 and compute nCi using previous term by multiplying previous term with ( n - i + 1 ) \/ i","code":"term = term * X * ( n - i + 1 ) \/ ( i * A ) ; document . write ( term + \" \" ) ; } }"}
{"text":"main function started","code":"let A = 3 , X = 4 , n = 5 ; series ( A , X , n ) ;"}
{"text":"function to check number is div by 8 or not using bitwise operator","code":"function Div_by_8 ( n ) { return ( ( ( n >> 3 ) << 3 ) == n ) ; }"}
{"text":"Driver code","code":"var n = 16 ; if ( Div_by_8 ( n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to calculate the average of even numbers","code":"function averageEven ( n ) { if ( n % 2 != 0 ) { document . write ( \" \" ) ; return - 1 ; } let sum = 0 , count = 0 ; while ( n >= 2 ) {"}
{"text":"count even numbers","code":"count ++ ;"}
{"text":"store the sum of even numbers","code":"sum += n ; n = n - 2 ; } return sum \/ count ; }"}
{"text":"driver function","code":"let n = 16 ; document . write ( averageEven ( n ) ) ;"}
{"text":"Function to calculate the average of even numbers","code":"function averageEven ( n ) { if ( n % 2 != 0 ) { document . write ( \" \" ) ; return - 1 ; } return ( n + 2 ) \/ 2 ; }"}
{"text":"driver function","code":"let n = 16 ; document . write ( averageEven ( n ) ) ;"}
{"text":"Recursive function to return gcd of a and b","code":"function gcd ( a , b ) {"}
{"text":"Everything divides 0","code":"if ( a == 0 b == 0 ) return 0 ;"}
{"text":"base case","code":"if ( a == b ) return a ;"}
{"text":"a is greater","code":"if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }"}
{"text":"function to find largest coprime divisor","code":"function cpFact ( x , y ) { while ( gcd ( x , y ) != 1 ) { x = x \/ gcd ( x , y ) ; } return x ; }"}
{"text":"Driver Code","code":"let x = 15 ; let y = 3 ; document . write ( cpFact ( x , y ) + \" \" ) ; x = 14 ; y = 28 ; document . write ( cpFact ( x , y ) , \" \" ) ; x = 7 ; y = 3 ; document . write ( cpFact ( x , y ) ) ;"}
{"text":"Returns count of numbers with k as last digit .","code":"function counLastDigitK ( low , high , k ) { let count = 0 ; for ( let i = low ; i <= high ; i ++ ) if ( i % 10 == k ) count ++ ; return count ; }"}
{"text":"Driver Code","code":"let low = 3 ; let high = 35 ; let k = 3 ; document . write ( counLastDigitK ( low , high , k ) ) ;"}
{"text":"Javascript implementation to print first N Taxicab ( 2 ) numbers :","code":"function printTaxicab2 ( N ) {"}
{"text":"Starting from 1 , check every number if it is Taxicab until count reaches N .","code":"let i = 1 ; count = 0 ; while ( count < N ) { let int_count = 0 ;"}
{"text":"Try all possible pairs ( j , k ) whose cube sums can be i .","code":"for ( let j = 1 ; j <= Math . pow ( i , 1.0 \/ 3 ) ; j ++ ) for ( let k = j + 1 ; k <= Math . pow ( i , 1.0 \/ 3 ) ; k ++ ) if ( j * j * j + k * k * k == i ) int_count ++ ;"}
{"text":"Taxicab ( 2 ) found","code":"if ( int_count == 2 ) { count ++ ; document . write ( count + \" \" + i + \" \" ) ; } i ++ ; } }"}
{"text":"Driver code","code":"let N = 5 ; printTaxicab2 ( N ) ;"}
{"text":"A optimized school method based Javascript program to check if a number is composite .","code":"function isComposite ( n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return false ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return true ; for ( let i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; return false ; }"}
{"text":"Driver Program to test above function","code":"isComposite ( 11 ) ? document . write ( \" \" + \" \" ) : document . write ( \" \" + \" \" ) ; isComposite ( 15 ) ? document . write ( \" \" + \" \" ) : document . write ( \" \" + \" \" ) ;"}
{"text":"function to check if a number is prime or not","code":"function isPrime ( n ) {"}
{"text":"Corner case","code":"if ( n <= 1 ) return false ;"}
{"text":"Check from 2 to n - 1","code":"for ( let i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }"}
{"text":"Find prime number greater than a number","code":"function findPrime ( n ) { let num = n + 1 ;"}
{"text":"find prime greater than n","code":"while ( num > 0 ) {"}
{"text":"check if num is prime","code":"if ( isPrime ( num ) ) return num ;"}
{"text":"increment num","code":"num = num + 1 ; } return 0 ; }"}
{"text":"To find number to be added so sum of array is prime","code":"function minNumber ( arr , n ) { let sum = 0 ;"}
{"text":"To find sum of array elements","code":"for ( let i = 0 ; i < n ; i ++ ) sum += arr [ i ] ;"}
{"text":"if sum is already prime return 0","code":"if ( isPrime ( sum ) ) return 0 ;"}
{"text":"To find prime number greater than sum","code":"let num = findPrime ( sum ) ;"}
{"text":"Return difference of sum and num","code":"return num - sum ; }"}
{"text":"Driver Code","code":"let arr = [ 2 , 4 , 6 , 8 , 12 ] ; let n = arr . length ; document . write ( minNumber ( arr , n ) ) ;"}
{"text":"function to calculate factorial","code":"function fact ( n ) { if ( n == 0 ) return 1 ; return n * fact ( n - 1 ) ; }"}
{"text":"function to calculate sum of divisor","code":"function div ( x ) { let ans = 0 ; for ( let i = 1 ; i <= x ; i ++ ) if ( x % i == 0 ) ans += i ; return ans ; }"}
{"text":"Returns sum of divisors of n !","code":"function sumFactDiv ( n ) { return div ( fact ( n ) ) ; }"}
{"text":"Driver Code","code":"let n = 4 ; document . write ( sumFactDiv ( n ) ) ;"}
{"text":"allPrimes [ ] stores all prime numbers less than or equal to n .","code":"let allPrimes = [ ] ;"}
{"text":"Fills above vector allPrimes [ ] for a given n","code":"function sieve ( n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is not a prime , else true .","code":"let prime = new Array ( n + 1 ) ; for ( let i = 0 ; i < n + 1 ; i ++ ) prime [ i ] = true ;"}
{"text":"Loop to update prime [ ]","code":"for ( let p = 2 ; p * p <= n ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( let i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } }"}
{"text":"Store primes in the vector allPrimes","code":"for ( let p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) allPrimes . push ( p ) ; }"}
{"text":"Function to find all result of factorial number","code":"function factorialDivisors ( n ) {"}
{"text":"Create sieve","code":"sieve ( n ) ;"}
{"text":"Initialize result","code":"let result = 1 ;"}
{"text":"Find exponents of all primes which divides n and less than n","code":"for ( let i = 0 ; i < allPrimes . length ; i ++ ) {"}
{"text":"Current divisor","code":"let p = allPrimes [ i ] ;"}
{"text":"Find the highest power ( stored in exp ) ' \u2581 \u2581 of \u2581 allPrimes [ i ] \u2581 that \u2581 divides \u2581 n \u2581 using \u2581 \u2581 Legendre ' s formula .","code":"let exp = 0 ; while ( p <= n ) { exp = exp + Math . floor ( n \/ p ) ; p = p * allPrimes [ i ] ; }"}
{"text":"Using the divisor function to calculate the sum","code":"result = Math . floor ( result * ( Math . pow ( allPrimes [ i ] , exp + 1 ) - 1 ) \/ ( allPrimes [ i ] - 1 ) ) ; }"}
{"text":"Return total divisors","code":"return result ; }"}
{"text":"Driver code","code":"document . write ( factorialDivisors ( 4 ) ) ;"}
{"text":"Return true if n is pandigit else return false .","code":"function checkPandigital ( b , n ) {"}
{"text":"Checking length is less than base","code":"if ( n . length < b ) return 0 ; let hash = [ ] ; for ( let i = 0 ; i < b ; i ++ ) hash [ i ] = 0 ;"}
{"text":"Traversing each digit of the number .","code":"for ( let i = 0 ; i < n . length ; i ++ ) {"}
{"text":"If digit is integer","code":"if ( n [ i ] >= ' ' && n [ i ] <= ' ' ) hash [ n [ i ] - ' ' ] = 1 ;"}
{"text":"If digit is alphabet","code":"else if ( n . charCodeAt ( i ) - ' ' . charCodeAt ( 0 ) <= b - 11 ) hash [ n . charCodeAt ( i ) - ' ' . charCodeAt ( 0 ) + 10 ] = 1 ; }"}
{"text":"Checking hash array , if any index is unmarked .","code":"for ( let i = 0 ; i < b ; i ++ ) if ( hash [ i ] == 0 ) return 0 ; return 1 ; }"}
{"text":"Driver Program","code":"let b = 13 ; let n = \" \" ; if ( checkPandigital ( b , n ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"function to find minimum number of given operations to convert m to n","code":"function convert ( m , n ) { if ( m == n ) return 0 ;"}
{"text":"only way is to do - 1 ( m - n ) times","code":"if ( m > n ) return m - n ;"}
{"text":"not possible","code":"if ( m <= 0 && n > 0 ) return - 1 ;"}
{"text":"n is greater and n is odd","code":"if ( n % 2 == 1 )"}
{"text":"perform ' - 1' on m ( or + 1 on n )","code":"return 1 + convert ( m , n + 1 ) ;"}
{"text":"n is even","code":"else"}
{"text":"perform ' * 2' on m ( or n \/ 2 on n )","code":"return 1 + convert ( m , n \/ 2 ) ; }"}
{"text":"Driver Code","code":"var m = 3 , n = 11 ; document . write ( \" \" + \" \" + convert ( m , n ) ) ;"}
{"text":"Javascript program to find Seed of a number","code":"var MAX = 10000 ; var prodDig = Array . from ( { length : MAX } , ( _ , i ) => 0 ) ;"}
{"text":"Stores product of digits of x in prodDig [ x ]","code":"function getDigitProduct ( x ) {"}
{"text":"If x has single digit","code":"if ( x < 10 ) return x ;"}
{"text":"If digit product is already computed","code":"if ( prodDig [ x ] != 0 ) return prodDig [ x ] ;"}
{"text":"If digit product is not computed before .","code":"var prod = ( x % 10 ) * getDigitProduct ( parseInt ( x \/ 10 ) ) ; return ( prodDig [ x ] = prod ) ; }"}
{"text":"Prints all seeds of n","code":"function findSeed ( n ) {"}
{"text":"Find all seeds using prodDig","code":"var res = [ ] ; for ( var i = 1 ; i <= parseInt ( n \/ 2 ) ; i ++ ) if ( i * getDigitProduct ( i ) == n ) res . push ( i ) ;"}
{"text":"If there was no seed","code":"if ( res . length == 0 ) { document . write ( \" \" ) ; return ; }"}
{"text":"Print seeds","code":"for ( i = 0 ; i < res . length ; i ++ ) document . write ( res [ i ] + \" \" ) ; }"}
{"text":"Driver code","code":"var n = 138 ; findSeed ( n ) ;"}
{"text":"Return smallest number having maximum prime factors .","code":"function maxPrimefactorNum ( N ) { var arr = Array . from ( { length : N + 5 } , ( _ , i ) => 0 ) ;"}
{"text":"Sieve of eratosthenes method to count number of prime factors .","code":"for ( i = 2 ; i * i <= N ; i ++ ) { if ( arr [ i ] == 0 ) { for ( j = 2 * i ; j <= N ; j += i ) { arr [ j ] ++ ; } } arr [ i ] = 1 ; } var maxval = 0 , maxvar = 1 ;"}
{"text":"Finding number having maximum number of prime factor .","code":"for ( i = 1 ; i <= N ; i ++ ) { if ( arr [ i ] > maxval ) { maxval = arr [ i ] ; maxvar = i ; } } return maxvar ; }"}
{"text":"Driver program","code":"var N = 40 ; document . write ( maxPrimefactorNum ( N ) ) ;"}
{"text":"Function compute sum all sub - array","code":"function SubArraySum ( arr , n ) { let result = 0 ;"}
{"text":"Computing sum of subarray using formula","code":"for ( let i = 0 ; i < n ; i ++ ) result += ( arr [ i ] * ( i + 1 ) * ( n - i ) ) ;"}
{"text":"Return all subarray sum","code":"return result ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 2 , 3 ] ; let n = arr . length ; document . write ( \" \" + SubArraySum ( arr , n ) ) ;"}
{"text":"JavaScript program to find highest power of 2 smaller than or equal to n .","code":"function highestPowerof2 ( n ) { let res = 0 ; for ( let i = n ; i >= 1 ; i -- ) {"}
{"text":"If i is a power of 2","code":"if ( ( i & ( i - 1 ) ) == 0 ) { res = i ; break ; } } return res ; }"}
{"text":"Driver code","code":"let n = 10 ; document . write ( highestPowerof2 ( n ) ) ;"}
{"text":"Function to find pairs that can represent the given number as sum of two cubes","code":"function findPairs ( n ) {"}
{"text":"find cube root of n","code":"var cubeRoot = parseInt ( Math . pow ( n , 1.0 \/ 3.0 ) ) ;"}
{"text":"create a array of size of size ' cubeRoot '","code":"var cube = Array . from ( { length : cubeRoot + 1 } , ( _ , i ) => 0 ) ;"}
{"text":"for index i , cube [ i ] will contain i ^ 3","code":"for ( i = 1 ; i <= cubeRoot ; i ++ ) cube [ i ] = i * i * i ;"}
{"text":"Find all pairs in above sorted array cube whose sum is equal to n","code":"var l = 1 ; var r = cubeRoot ; while ( l < r ) { if ( cube [ l ] + cube [ r ] < n ) l ++ ; else if ( cube [ l ] + cube [ r ] > n ) r -- ; else { document . write ( \" \" + l + \" \" + r + \" \" ) ; l ++ ; r -- ; } } }"}
{"text":"Driver Code","code":"var n = 20683 ; findPairs ( n ) ;"}
{"text":"Utility function to find GCD of a and b","code":"function gcd ( a , b ) { while ( b != 0 ) { let t = b ; b = a % b ; a = t ; } return a ; }"}
{"text":"Returns minimum difference between any two terms of shifted tables of ' a ' and ' b ' . ' x ' is shift in table of ' a ' and ' y ' is shift in table of ' b ' .","code":"function findMinDiff ( a , b , x , y ) {"}
{"text":"Calculate gcd of a and b","code":"let g = gcd ( a , b ) ;"}
{"text":"Calculate difference between x and y","code":"let diff = Math . abs ( x - y ) % g ; return Math . min ( diff , g - diff ) ; }"}
{"text":"Driver Code","code":"let a = 20 , b = 52 , x = 5 , y = 7 ; document . write ( findMinDiff ( a , b , x , y ) ) ;"}
{"text":"function to print the divisors","code":"function printDivisors ( n ) {"}
{"text":"Vector to store half of the divisors","code":"let v = [ ] ; let t = 0 ; for ( let i = 1 ; i <= parseInt ( Math . sqrt ( n ) ) ; i ++ ) { if ( n % i == 0 ) {"}
{"text":"check if divisors are equal","code":"if ( parseInt ( n \/ i ) == i ) document . write ( i + \" \" ) ; else { document . write ( i + \" \" ) ;"}
{"text":"push the second divisor in the vector","code":"v [ t ++ ] = parseInt ( n \/ i ) ; } } }"}
{"text":"The vector will be printed in reverse","code":"for ( let i = v . length - 1 ; i >= 0 ; i -- ) { document . write ( v [ i ] + \" \" ) ; } }"}
{"text":"Driver code","code":"document . write ( \" \" ) ; printDivisors ( 100 ) ;"}
{"text":"function to print the divisors","code":"function printDivisors ( n ) { for ( var i = 1 ; i * i < n ; i ++ ) { if ( n % i == 0 ) document . write ( i + \" \" ) ; } for ( var i = Math . sqrt ( n ) ; i >= 1 ; i -- ) { if ( n % i == 0 ) document . write ( \" \" + n \/ i ) ; } }"}
{"text":"Driver program to test above function","code":"document . write ( \" \" ) ; printDivisors ( 100 ) ;"}
{"text":"function to print the divisors","code":"function printDivisors ( n ) { for ( i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) document . write ( i + \" \" ) ; }"}
{"text":"Driver program to test above function","code":"document . write ( \" \" + \" \" ) ; printDivisors ( 100 ) ;"}
{"text":"Function to print the divisors","code":"function printDivisors ( n ) {"}
{"text":"Note that this loop runs till square root","code":"for ( let i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) {"}
{"text":"If divisors are equal , print only one","code":"if ( parseInt ( n \/ i , 10 ) == i ) document . write ( i ) ;"}
{"text":"Otherwise print both","code":"else document . write ( i + \" \" + parseInt ( n \/ i , 10 ) + \" \" ) ; } } }"}
{"text":"Driver code","code":"document . write ( \" \" ) ; printDivisors ( 100 ) ;"}
{"text":"Javascript program for implementation of Sieve of Atkin","code":"function SieveOfAtkin ( limit ) {"}
{"text":"2 and 3 are known to be prime","code":"if ( limit > 2 ) document . write ( 2 + \" \" ) ; if ( limit > 3 ) document . write ( 3 + \" \" ) ;"}
{"text":"Initialise the sieve array with false values","code":"let sieve = new Array ( ) sieve [ limit ] = 0 ; for ( let i = 0 ; i < limit ; i ++ ) sieve [ i ] = false ;"}
{"text":"Mark sieve [ n ] is true if one of the following is true : a ) n = ( 4 * x * x ) + ( y * y ) has odd number of solutions , i . e . , there exist odd number of distinct pairs ( x , y ) that satisfy the equation and n % 12 = 1 or n % 12 = 5. b ) n = ( 3 * x * x ) + ( y * y ) has odd number of solutions and n % 12 = 7 c ) n = ( 3 * x * x ) - ( y * y ) has odd number of solutions , x > y and n % 12 = 11","code":"for ( let x = 1 ; x * x < limit ; x ++ ) { for ( let y = 1 ; y * y < limit ; y ++ ) {"}
{"text":"Main part of Sieve of Atkin","code":"let n = ( 4 * x * x ) + ( y * y ) ; if ( n <= limit && ( n % 12 == 1 n % 12 == 5 ) ) sieve [ n ] ^= true ; n = ( 3 * x * x ) + ( y * y ) ; if ( n <= limit && n % 12 == 7 ) sieve [ n ] = true ; n = ( 3 * x * x ) - ( y * y ) ; if ( x > y && n <= limit && n % 12 == 11 ) sieve [ n ] ^= true ; } }"}
{"text":"Mark all multiples of squares as non - prime","code":"for ( let r = 5 ; r * r < limit ; r ++ ) { if ( sieve [ r ] ) { for ( i = r * r ; i < limit ; i += r * r ) sieve [ i ] = false ; } }"}
{"text":"Print primes using sieve [ ]","code":"for ( let a = 5 ; a < limit ; a ++ ) if ( sieve [ a ] ) document . write ( a , \" \" ) ; }"}
{"text":"Driver Code","code":"let limit = 20 ; SieveOfAtkin ( limit ) ;"}
{"text":"Javascript program to check if a point lies inside a circle or not","code":"function isInside ( circle_x , circle_y , rad , x , y ) {"}
{"text":"Compare radius of circle with distance of its center from given point","code":"if ( ( x - circle_x ) * ( x - circle_x ) + ( y - circle_y ) * ( y - circle_y ) <= rad * rad ) return true ; else return false ; }"}
{"text":"Driver code","code":"var x = 1 ; var y = 1 ; var circle_x = 0 ; var circle_y = 1 ; var rad = 2 ; if ( isInside ( circle_x , circle_y , rad , x , y ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Utility function to evaluate a simple expression with one operator only .","code":"function eval ( a , op , b ) { if ( op == ' ' ) { return a + b ; } if ( op == ' ' ) { return a - b ; } if ( op == ' ' ) { return a * b ; } return Number . MAX_VALUE ; }"}
{"text":"This function evaluates all possible values and returns a list of evaluated values .","code":"function evaluateAll ( expr , low , high ) {"}
{"text":"To store result ( all possible evaluations of given expression ' expr ' )","code":"let res = [ ] ;"}
{"text":"If there is only one character , it must be a digit ( or operand ) , return it .","code":"if ( low == high ) { res . push ( expr [ low ] - ' ' ) ; return res ; }"}
{"text":"If there are only three characters , middle one must be operator and corner ones must be operand","code":"if ( low == ( high - 2 ) ) { let num = eval ( expr [ low ] - ' ' , expr [ low + 1 ] , expr [ low + 2 ] - ' ' ) ; res . push ( num ) ; return res ; }"}
{"text":"every i refers to an operator","code":"for ( let i = low + 1 ; i <= high ; i += 2 ) {"}
{"text":"l refers to all the possible values in the left of operator ' expr [ i ] '","code":"let l = evaluateAll ( expr , low , i - 1 ) ;"}
{"text":"r refers to all the possible values in the right of operator ' expr [ i ] '","code":"let r = evaluateAll ( expr , i + 1 , high ) ;"}
{"text":"Take above evaluated all possible values in left side of ' i '","code":"for ( let s1 = 0 ; s1 < l . length ; s1 ++ ) {"}
{"text":"Take above evaluated all possible values in right side of ' i '","code":"for ( let s2 = 0 ; s2 < r . length ; s2 ++ ) {"}
{"text":"Calculate value for every pair and add the value to result .","code":"let val = eval ( l [ s1 ] , expr [ i ] , r [ s2 ] ) ; res . push ( val ) ; } } } return res ; }"}
{"text":"Driver program","code":"let expr = \" \" ; let len = expr . length ; let ans = evaluateAll ( expr , 0 , len - 1 ) ; for ( let i = 0 ; i < ans . length ; i ++ ) { document . write ( ans [ i ] + \" \" ) ; }"}
{"text":"This function returns true if n is lucky","code":"function isLucky ( n ) {"}
{"text":"Create an array of size 10 and initialize all elements as false . This array is used to check if a digit is already seen or not .","code":"var arr = Array ( 10 ) . fill ( 0 ) ; for ( var i = 0 ; i < 10 ; i ++ ) arr [ i ] = false ;"}
{"text":"Traverse through all digits of given number","code":"while ( n > 0 ) {"}
{"text":"Find the last digit","code":"var digit = n % 10 ;"}
{"text":"If digit is already seen , return false","code":"if ( arr [ digit ] ) return false ;"}
{"text":"Mark this digit as seen","code":"arr [ digit ] = true ;"}
{"text":"REmove the last digit from number","code":"n = parseInt ( n \/ 10 ) ; } return true ; }"}
{"text":"Driver program to test above function .","code":"var arr = [ 1291 , 897 , 4566 , 1232 , 80 , 700 ] var n = arr . length ; for ( var i = 0 ; i < n ; i ++ ) isLucky ( arr [ i ] ) ? document . write ( arr [ i ] + \" \" ) : document . write ( arr [ i ] + \" \" ) ;"}
{"text":"Javascript program to print squares of first ' n ' natural numbers wothout using * , \/ and -","code":"function printSquares ( n ) {"}
{"text":"Initialize ' square ' and first odd number","code":"let square = 0 , odd = 1 ;"}
{"text":"Calculate and print squares","code":"for ( let x = 0 ; x < n ; x ++ ) {"}
{"text":"Print square","code":"document . write ( square + \" \" ) ;"}
{"text":"Update ' square ' and ' odd '","code":"square = square + odd ; odd = odd + 2 ; } }"}
{"text":"Driver program to test above function","code":"let n = 5 ; printSquares ( n ) ;"}
{"text":"Recursive function to reverse digits of num","code":"var rev_num = 0 ; var base_pos = 1 ; function reversDigits ( num ) { if ( num > 0 ) { reversDigits ( Math . floor ( num \/ 10 ) ) ; rev_num += ( num % 10 ) * base_pos ; base_pos *= 10 ; } return rev_num ; }"}
{"text":"Driver Code","code":"let num = 4562 ; document . write ( \" \" + reversDigits ( num ) ) ;"}
{"text":"Recursive function that find the minimum value after exclusive - OR","code":"function RecursiveFunction ( ref , bit ) {"}
{"text":"Condition if ref size is zero or bit is negative then return 0","code":"if ( ref . length == 0 bit < 0 ) return 0 ; let curr_on = [ ] , curr_off = [ ] ; for ( let i = 0 ; i < ref . length ; i ++ ) {"}
{"text":"Condition if current bit is off then push current value in curr_off vector","code":"if ( ( ( ref [ i ] >> bit ) & 1 ) == 0 ) curr_off . push ( ref [ i ] ) ;"}
{"text":"Condition if current bit is on then push current value in curr_on vector","code":"else curr_on . push ( ref [ i ] ) ; }"}
{"text":"Condition if curr_off is empty then call recursive function on curr_on vector","code":"if ( curr_off . length == 0 ) return RecursiveFunction ( curr_on , bit - 1 ) ;"}
{"text":"Condition if curr_on is empty then call recursive function on curr_off vector","code":"if ( curr_on . length == 0 ) return RecursiveFunction ( curr_off , bit - 1 ) ;"}
{"text":"Return the minimum of curr_off and curr_on and add power of 2 of current bit","code":"return Math . min ( RecursiveFunction ( curr_off , bit - 1 ) , RecursiveFunction ( curr_on , bit - 1 ) ) + ( 1 << bit ) ; }"}
{"text":"Function that print the minimum value after exclusive - OR","code":"function PrintMinimum ( a , n ) { let v = [ ] ;"}
{"text":"Pushing values in vector","code":"for ( let i = 0 ; i < n ; i ++ ) v . push ( a [ i ] ) ;"}
{"text":"Printing answer","code":"document . write ( RecursiveFunction ( v , 30 ) + \" \" ) ; }"}
{"text":"Driver Code","code":"let arr = [ 3 , 2 , 1 ] ; let size = arr . length ; PrintMinimum ( arr , size ) ;"}
{"text":"Function to return the count of elements which are equal to the XOR of the next two elements","code":"function cntElements ( arr , n ) {"}
{"text":"To store the required count","code":"let cnt = 0 ;"}
{"text":"For every element of the array such that it has at least two elements appearing after it in the array","code":"for ( let i = 0 ; i < n - 2 ; i ++ ) {"}
{"text":"If current element is equal to the XOR of the next two elements in the array","code":"if ( arr [ i ] == ( arr [ i + 1 ] ^ arr [ i + 2 ] ) ) { cnt ++ ; } } return cnt ; }"}
{"text":"Driver code","code":"let arr = [ 4 , 2 , 1 , 3 , 7 , 8 ] ; let n = arr . length ; document . write ( cntElements ( arr , n ) ) ;"}
{"text":"Function to return the count","code":"function xor_triplet ( arr , n ) {"}
{"text":"Initialise result","code":"let ans = 0 ;"}
{"text":"Pick 1 st element of the triplet","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Pick 2 nd element of the triplet","code":"for ( let j = i + 1 ; j < n ; j ++ ) {"}
{"text":"Pick 3 rd element of the triplet","code":"for ( let k = j ; k < n ; k ++ ) { let xor1 = 0 , xor2 = 0 ;"}
{"text":"Taking xor in the first subarray","code":"for ( let x = i ; x < j ; x ++ ) { xor1 ^= arr [ x ] ; }"}
{"text":"Taking xor in the second subarray","code":"for ( let x = j ; x <= k ; x ++ ) { xor2 ^= arr [ x ] ; }"}
{"text":"If both xor is equal","code":"if ( xor1 == xor2 ) { ans ++ ; } } } } return ans ; }"}
{"text":"Driver Code","code":"let arr = [ 1 , 2 , 3 , 4 , 5 ] ; let n = arr . length ;"}
{"text":"Function Calling","code":"document . write ( xor_triplet ( arr , n ) )"}
{"text":"Javascript implementation of the approach","code":"let N = 100005 ; let n , k ;"}
{"text":"Adjacency list","code":"let al = new Array ( N ) . fill ( 0 ) . map ( ( t ) => [ ] ) ; let Ideal_pair ; let bit = new Array ( N ) ; let root_node = new Array ( N ) ;"}
{"text":"bit : bit array i and j are starting and ending index INCLUSIVE","code":"function bit_q ( i , j ) { let sum = 0 ; while ( j > 0 ) { sum += bit [ j ] ; j -= ( j & ( j * - 1 ) ) ; } i -- ; while ( i > 0 ) { sum -= bit [ i ] ; i -= ( i & ( i * - 1 ) ) ; } return sum ; }"}
{"text":"bit : bit array n : size of bit array i is the index to be updated diff is ( new_val - old_val )","code":"function bit_up ( i , diff ) { while ( i <= n ) { bit [ i ] += diff ; i += i & - i ; } }"}
{"text":"DFS function to find ideal pairs","code":"function dfs ( node ) { Ideal_pair += bit_q ( Math . max ( 1 , node - k ) , Math . min ( n , node + k ) ) ; bit_up ( node , 1 ) ; for ( let i = 0 ; i < al [ node ] . length ; i ++ ) dfs ( al [ node ] [ i ] ) ; bit_up ( node , - 1 ) ; }"}
{"text":"Function for initialisation","code":"function initialise ( ) { Ideal_pair = 0 ; for ( let i = 0 ; i <= n ; i ++ ) { root_node [ i ] = true ; bit [ i ] = 0 ; } }"}
{"text":"Function to add an edge","code":"function Add_Edge ( x , y ) { al [ x ] . push ( y ) ; root_node [ y ] = false ; }"}
{"text":"Function to find number of ideal pairs","code":"function Idealpairs ( ) {"}
{"text":"Find root of the tree","code":"let r = - 1 ; for ( let i = 1 ; i <= n ; i ++ ) if ( root_node [ i ] ) { r = i ; break ; } dfs ( r ) ; return Ideal_pair ; }"}
{"text":"Driver code","code":"n = 6 , k = 3 ; initialise ( ) ;"}
{"text":"Add edges","code":"Add_Edge ( 1 , 2 ) ; Add_Edge ( 1 , 3 ) ; Add_Edge ( 3 , 4 ) ; Add_Edge ( 3 , 5 ) ; Add_Edge ( 3 , 6 ) ;"}
{"text":"Function call","code":"document . write ( Idealpairs ( ) ) ;"}
{"text":"Function to find bitwise subsets Efficient approach","code":"function printSubsets ( n ) { for ( let i = n ; i > 0 ; i = ( i - 1 ) & n ) document . write ( i + \" \" ) ; document . write ( \" \" + \" \" ) ; }"}
{"text":"Driver code","code":"let n = 9 ; printSubsets ( n ) ;"}
{"text":"function to check recursively if the number is divisible by 17 or not","code":"function isDivisibleby17 ( n ) {"}
{"text":"if n = 0 or n = 17 then yes","code":"if ( n == 0 n == 17 ) return true ;"}
{"text":"if n is less then 17 , not divisible by 17","code":"if ( n < 17 ) return false ;"}
{"text":"reducing the number by floor ( n \/ 16 ) - n % 16","code":"return isDivisibleby17 ( Math . floor ( n >> 4 ) - Math . floor ( n & 15 ) ) ; }"}
{"text":"driver code to check the above function","code":"let n = 35 ; if ( isDivisibleby17 ( n ) ) document . write ( n + \" \" ) ; else document . write ( n + \" \" ) ;"}
{"text":"Returns largest number with m set bits then m - 1 0 bits .","code":"function answer ( n ) {"}
{"text":"Start with 2 bits .","code":"let m = 2 ;"}
{"text":"initial answer is 1 which meets the given condition","code":"let ans = 1 ; let r = 1 ;"}
{"text":"check for all numbers","code":"while ( r < n ) {"}
{"text":"compute the number","code":"r = ( Math . pow ( 2 , m ) - 1 ) * ( Math . pow ( 2 , m - 1 ) ) ;"}
{"text":"if less then N","code":"if ( r < n ) ans = r ;"}
{"text":"increment m to get the next number","code":"m ++ ; } return ans ; }"}
{"text":"Driver code","code":"let n = 7 ; document . write ( answer ( n ) ) ;"}
{"text":"Javascript program to find MSB number for given n .","code":"function setBitNumber ( n ) { if ( n == 0 ) return 0 ; let msb = 0 ; n = n \/ 2 ; while ( n != 0 ) { n = $n \/ 2 ; msb ++ ; } return ( 1 << msb ) ; }"}
{"text":"Driver code","code":"let n = 0 ; document . write ( setBitNumber ( n ) ) ;"}
{"text":"Javascript program to find MSB number for given n .","code":"function setBitNumber ( n ) {"}
{"text":"Suppose n is 273 ( binary is 100010001 ) . It does following 100010001 | 010001000 = 110011001","code":"n |= n >> 1 ;"}
{"text":"This makes sure 4 bits ( From MSB and including MSB ) are set . It does following 110011001 | 001100110 = 111111111","code":"n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ;"}
{"text":"Increment n by 1 so that there is only one set bit which is just before original MSB . n now becomes 1000000000","code":"n = n + 1 ;"}
{"text":"Return original MSB after shifting . n now becomes 100000000","code":"return ( n >> 1 ) ; }"}
{"text":"Driver code","code":"let n = 273 ; document . write ( setBitNumber ( n ) ) ;"}
{"text":"Simple Javascript code for counting trailing zeros in binary representation of a number","code":"function countTrailingZero ( x ) { let count = 0 ; while ( ( x & 1 ) == 0 ) { x = x >> 1 ; count ++ ; } return count ; }"}
{"text":"Driver Code","code":"document . write ( countTrailingZero ( 11 ) ) ;"}
{"text":"Javascript code for counting trailing zeros in binary representation of a number","code":"function countTrailingZero ( x ) {"}
{"text":"Map a bit value mod 37 to its position","code":"let lookup = [ 32 , 0 , 1 , 26 , 2 , 23 , 27 , 0 , 3 , 16 , 24 , 30 , 28 , 11 , 0 , 13 , 4 , 7 , 17 , 0 , 25 , 22 , 31 , 15 , 29 , 10 , 12 , 6 , 0 , 21 , 14 , 9 , 5 , 20 , 8 , 19 , 18 ] ;"}
{"text":"Only difference between ( x and - x ) is the value of signed magnitude ( leftmostbit ) negative numbers signed bit is 1","code":"return lookup [ ( - x & x ) % 37 ] ; }"}
{"text":"Driver code","code":"document . write ( countTrailingZero ( 48 ) ) ;"}
{"text":"JavaScript program to evaluate ceil ( 7 n \/ 8 ) without using * and \/","code":"function multiplyBySevenByEight ( n ) {"}
{"text":"Note the inner bracket here . This is needed because precedence of ' - ' operator is higher than ' < < '","code":"return ( n - ( n >> 3 ) ) ; }"}
{"text":"Driver program to test above function","code":"let n = 9 ; document . write ( multiplyBySevenByEight ( n ) ) ;"}
{"text":"Javascript program to evaluate 7 n \/ 8 without using * and \/","code":"function multiplyBySevenByEight ( n ) {"}
{"text":"Step 1 ) First multiply number by 7 i . e . 7 n = ( n << 3 ) - n * Step 2 ) Divide result by 8","code":"return ( ( n << 3 ) - n ) >> 3 ; }"}
{"text":"Driver code","code":"var n = 15 ; document . write ( multiplyBySevenByEight ( n ) ) ;"}
{"text":"Function to search the rightmost index of given number","code":"function search ( list , num ) { var low = 0 , high = list . length - 1 ;"}
{"text":"Store the rightmost index","code":"var ans = - 1 ; while ( low <= high ) {"}
{"text":"Calculate the mid","code":"var mid = low + ( high - low ) \/ 2 ;"}
{"text":"If given number <= num","code":"if ( list [ mid ] <= num ) {"}
{"text":"Assign ans = mid","code":"ans = mid ;"}
{"text":"Update low","code":"low = mid + 1 ; } else"}
{"text":"Update high","code":"high = mid - 1 ; }"}
{"text":"return ans","code":"return ans ; }"}
{"text":"Function to check if the given number is palindrome or not","code":"function isPalindrome ( n ) { var rev = 0 ; var temp = n ;"}
{"text":"Generate reverse of the given number","code":"while ( n > 0 ) { rev = rev * 10 + n % 10 ; n = parseInt ( n \/ 10 ) ; }"}
{"text":"If n is a palindrome","code":"return rev == temp ; }"}
{"text":"Function to find the maximum size of group of palindrome numbers having difference between maximum and minimum element at most K","code":"function countNumbers ( L , R , K ) {"}
{"text":"Stores the all the palindromic numbers in the range [ L , R ]","code":"var list = [ ] ;"}
{"text":"Traverse over the range [ L , R ]","code":"for ( var i = L ; i <= R ; i ++ ) {"}
{"text":"If i is a palindrome","code":"if ( isPalindrome ( i ) ) {"}
{"text":"Append the number in the list","code":"list . push ( i ) ; } }"}
{"text":"Stores count of maximum palindromic numbers","code":"var count = 0 ;"}
{"text":"Iterate each element in the list","code":"for ( var i = 0 ; i < list . length ; i ++ ) {"}
{"text":"Calculate rightmost index in the list < current element + K","code":"var right_index = search ( list , list [ i ] + K - 1 ) ;"}
{"text":"Check if there is rightmost index from the current index","code":"if ( right_index != - 1 ) count = Math . max ( count , right_index - i + 1 ) ; }"}
{"text":"Return the count","code":"return count ; }"}
{"text":"Driver Code","code":"var L = 98 , R = 112 ; var K = 13 ; document . write ( countNumbers ( L , R , K ) ) ;"}
{"text":"Function to find the maximum sum by subtracting same value from all elements of a Subarray","code":"function findMaximumSum ( a , n ) {"}
{"text":"Stores previous smaller element","code":"var prev_smaller = findPrevious ( a , n ) ;"}
{"text":"Stores next smaller element","code":"var next_smaller = findNext ( a , n ) ; var max_value = 0 ; for ( var i = 0 ; i < n ; i ++ ) {"}
{"text":"Calculate contribution of each element","code":"max_value = Math . max ( max_value , a [ i ] * ( next_smaller [ i ] - prev_smaller [ i ] - 1 ) ) ; }"}
{"text":"Return answer","code":"return max_value ; }"}
{"text":"Function to generate previous smaller element for each array element","code":"function findPrevious ( a , n ) { var ps = Array ( n ) . fill ( 0 ) ;"}
{"text":"The first element has no previous smaller","code":"ps [ 0 ] = - 1 ;"}
{"text":"Stack to keep track of elements that have occurred previously","code":"let stack = Array ( ) ;"}
{"text":"Push the first index","code":"stack . push ( 0 ) ; for ( var i = 1 ; i < a . length ; i ++ ) {"}
{"text":"Pop all the elements until the previous element is smaller than current element","code":"while ( stack . length > 0 && a [ stack [ stack . length - 1 ] ] >= a [ i ] ) stack . pop ( ) ;"}
{"text":"Store the previous smaller element","code":"ps [ i ] = stack . length > 0 ? stack [ stack . length - 1 ] : - 1 ;"}
{"text":"Push the index of the current element","code":"stack . push ( i ) ; }"}
{"text":"Return the array","code":"return ps ; }"}
{"text":"Function to generate next smaller element for each array element","code":"function findNext ( a , n ) { var ns = Array ( n ) . fill ( 0 ) ; ns [ n - 1 ] = n ;"}
{"text":"Stack to keep track of elements that have occurring next","code":"var stack = Array ( ) ; stack . push ( n - 1 ) ;"}
{"text":"Iterate in reverse order for calculating next smaller","code":"for ( var i = n - 2 ; i >= 0 ; i -- ) {"}
{"text":"Pop all the elements until the next element is smaller than current element","code":"while ( stack . length > 0 && a [ stack [ stack . length - 1 ] ] >= a [ i ] ) stack . pop ( ) ;"}
{"text":"Store the next smaller element","code":"ns [ i ] = stack . length > 0 ? stack [ stack . length - 1 ] : a . length ;"}
{"text":"Push the index of the current element","code":"stack . push ( i ) ; }"}
{"text":"Return the array","code":"return ns ; }"}
{"text":"Driver Code","code":"var n = 3 ; var a = [ 80 , 48 , 82 ] ; document . write ( findMaximumSum ( a , n ) ) ;"}
{"text":"This function returns true if contents of arr1 [ ] and arr2 [ ] are same , otherwise false .","code":"function compare ( arr1 , arr2 ) { for ( let i = 0 ; i < 256 ; i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false ; return true ; }"}
{"text":"This function search for all permutations of pat [ ] in txt [ ]","code":"function search ( pat , txt ) { let M = pat . length ; let N = txt . length ;"}
{"text":"countP [ ] : Store count of all characters of pattern countTW [ ] : Store count of current window of text","code":"let countP = new Array ( 256 ) ; let countTW = new Array ( 256 ) ; for ( let i = 0 ; i < 256 ; i ++ ) { countP [ i ] = 0 ; countTW [ i ] = 0 ; } for ( let i = 0 ; i < 256 ; i ++ ) { countP [ i ] = 0 ; countTW [ i ] = 0 ; } for ( let i = 0 ; i < M ; i ++ ) { ( countP [ pat [ i ] . charCodeAt ( 0 ) ] ) ++ ; ( countTW [ txt [ i ] . charCodeAt ( 0 ) ] ) ++ ; }"}
{"text":"Traverse through remaining characters of pattern","code":"for ( let i = M ; i < N ; i ++ ) {"}
{"text":"Compare counts of current window of text with counts of pattern [ ]","code":"if ( compare ( countP , countTW ) ) return true ;"}
{"text":"Add current character to current window","code":"( countTW [ txt [ i ] . charCodeAt ( 0 ) ] ) ++ ;"}
{"text":"Remove the first character of previous window","code":"countTW [ txt [ i - M ] . charCodeAt ( 0 ) ] -- ; }"}
{"text":"Check for the last window in text","code":"if ( compare ( countP , countTW ) ) return true ; return false ; }"}
{"text":"Driver code","code":"let txt = \" \" ; let pat = \" \" ; if ( search ( pat , txt ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to return the maximized median","code":"function getMaxMedian ( arr , n , k ) { let size = n + k ;"}
{"text":"Sort the array","code":"arr . sort ( ( a , b ) => a - b ) ;"}
{"text":"If size is even","code":"if ( size % 2 == 0 ) { let median = ( arr [ Math . floor ( size \/ 2 ) - 1 ] + arr [ Math . floor ( size \/ 2 ) ] ) \/ 2 ; return median ; }"}
{"text":"If size is odd","code":"let median = arr [ Math . floor ( size \/ 2 ) ] ; return median ; }"}
{"text":"Driver code","code":"let arr = [ 3 , 2 , 3 , 4 , 2 ] ; let n = arr . length ; let k = 2 ; document . write ( getMaxMedian ( arr , n , k ) ) ;"}
{"text":"JavaScript program for the above approach","code":"function printSorted ( a , b , c ) {"}
{"text":"Find maximum element","code":"let get_max = Math . max ( a , Math . max ( b , c ) ) ;"}
{"text":"Find minimum element","code":"let get_min = - Math . max ( - a , Math . max ( - b , - c ) ) ; let get_mid = ( a + b + c ) - ( get_max + get_min ) ; document . write ( get_min + \" \" + get_mid + \" \" + get_max ) ; }"}
{"text":"Driver Code","code":"let a = 4 , b = 1 , c = 9 ; printSorted ( a , b , c ) ;"}
{"text":"iterative implementation","code":"function binarySearch ( a , item , low , high ) { while ( low <= high ) { var mid = low + ( high - low ) \/ 2 ; if ( item == a [ mid ] ) return mid + 1 ; else if ( item > a [ mid ] ) low = mid + 1 ; else high = mid - 1 ; } return low ; }"}
{"text":"Function to sort an array a [ ] of size ' n '","code":"function insertionSort ( a , n ) { var i , loc , j , k , selected ; for ( i = 1 ; i < n ; ++ i ) { j = i - 1 ; selected = a [ i ] ;"}
{"text":"find location where selected should be inseretd","code":"loc = binarySearch ( a , selected , 0 , j ) ;"}
{"text":"Move all elements after location to create space","code":"while ( j >= loc ) { a [ j + 1 ] = a [ j ] ; j -- ; } a [ j + 1 ] = selected ; } }"}
{"text":"Driver Code","code":"var a = [ 37 , 23 , 0 , 17 , 12 , 72 , 31 , 46 , 100 , 88 , 54 ] ; var n = a . length , i ; insertionSort ( a , n ) ; document . write ( \" \" + \" \" ) ; for ( i = 0 ; i < n ; i ++ ) document . write ( a [ i ] + \" \" ) ;"}
{"text":"Function to sort an array using insertion sort","code":"function insertionSort ( arr , n ) { let i , key , j ; for ( i = 1 ; i < n ; i ++ ) { key = arr [ i ] ; j = i - 1 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position","code":"while ( j >= 0 && arr [ j ] > key ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = key ; } }"}
{"text":"A utility function to print an array of size n","code":"function printArray ( arr , n ) { let i ; for ( i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"Driver code","code":"let arr = [ 12 , 11 , 13 , 5 , 6 ] ; let n = arr . length ; insertionSort ( arr , n ) ; printArray ( arr , n ) ;"}
{"text":"Function to calculate total number of valid permutations","code":"function validPermutations ( str ) { let m = new Map ( ) ;"}
{"text":"Creating count which is equal to the Total number of characters present and ans that will store the number of unique permutations","code":"let count = str . length , ans = 0 ;"}
{"text":"Storing frequency of each character present in the string","code":"for ( let i = 0 ; i < str . length ; i ++ ) { if ( m . has ( str [ i ] ) ) { m . set ( str [ i ] , m . get ( str [ i ] ) + 1 ) ; } else { m . set ( str [ i ] , 1 ) ; } } for ( let i = 0 ; i < str . length ; i ++ ) {"}
{"text":"Adding count of characters by excluding characters equal to current char","code":"ans += count - m . get ( str [ i ] ) ;"}
{"text":"Reduce the frequency of the current character and count by 1 , so that it cannot interfere with the calculations of the same elements present to the right of it .","code":"m . set ( str [ i ] , m . get ( str [ i ] ) - 1 ) ; count -- ; }"}
{"text":"Return ans + 1 ( Because the given string is also a unique permutation )","code":"return ans + 1 ; }"}
{"text":"Driver Code","code":"let str = \" \" ; document . write ( validPermutations ( str ) ) ;"}
{"text":"DP based function to count number of paths","code":"function countPaths ( n , m ) { var dp = Array ( n + 1 ) . fill ( 0 ) . map ( x => Array ( m + 1 ) . fill ( 0 ) ) ;"}
{"text":"Fill entries in bottommost row and leftmost columns","code":"for ( i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( i = 0 ; i <= m ; i ++ ) dp [ 0 ] [ i ] = 1 ;"}
{"text":"Fill DP in bottom up manner","code":"for ( i = 1 ; i <= n ; i ++ ) for ( j = 1 ; j <= m ; j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; return dp [ n ] [ m ] ; }"}
{"text":"Driver Code","code":"var n = 3 , m = 2 ; document . write ( \" \" + countPaths ( n , m ) ) ;"}
{"text":"Returns the count of ways we can sum S [ 0. . . m - 1 ] coins to get sum n","code":"function count ( S , m , n ) {"}
{"text":"If n is 0 then there is 1 solution ( do not include any coin )","code":"if ( n == 0 ) return 1 ;"}
{"text":"If n is less than 0 then no solution exists","code":"if ( n < 0 ) return 0 ;"}
{"text":"If there are no coins and n is greater than 0 , then no solution exist","code":"if ( m <= 0 && n >= 1 ) return 0 ;"}
{"text":"count is sum of solutions ( i ) including S [ m - 1 ] ( ii ) excluding S [ m - 1 ]","code":"return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ; }"}
{"text":"Driver program to test above function","code":"var arr = [ 1 , 2 , 3 ] ; var m = arr . length ; document . write ( count ( arr , m , 4 ) ) ;"}
{"text":"Function to compare two Strings ignoring their cases","code":"function equalIgnoreCase ( str1 , str2 ) { let i = 0 ;"}
{"text":"Convert to lowercase using toUpperCase function","code":"str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ;"}
{"text":"Comparing both using inbuilt function","code":"let x = str1 == ( str2 ) ;"}
{"text":"if Strings are equal , return true otherwise false","code":"if ( ! x ) { return false ; } else { return true ; } }"}
{"text":"Function to print the same or not same if Strings are equal or not equal","code":"function equalIgnoreCaseUtil ( str1 , str2 ) { let res = equalIgnoreCase ( str1 , str2 ) ; if ( res == true ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"let str1 , str2 ; str1 = \" \" ; str2 = \" \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; str1 = \" \" ; str2 = \" \" ; equalIgnoreCaseUtil ( str1 , str2 ) ;"}
{"text":"Function to return the converted string after replacing every consonant sequence with its length","code":"function replaceConsonants ( str ) {"}
{"text":"To store the resultant string","code":"var res = \" \" ; var i = 0 , count = 0 ;"}
{"text":"Checking each character for consonant sequence","code":"while ( i < str . length ) {"}
{"text":"Count the length of consonants sequence","code":"if ( str [ i ] !== \" \" && str [ i ] !== \" \" && str [ i ] !== \" \" && str [ i ] !== \" \" && str [ i ] !== \" \" ) { i ++ ; count ++ ; } else {"}
{"text":"Add the length in the string","code":"if ( count > 0 ) res += count . toString ( ) ;"}
{"text":"Add the vowel","code":"res += str [ i ] ; i ++ ; count = 0 ; } }"}
{"text":"Check for the last consonant sequence in the string","code":"if ( count > 0 ) res += count . toString ( ) ;"}
{"text":"Return the resultant string","code":"return res ; }"}
{"text":"Driver code","code":"var str = \" \" ; document . write ( replaceConsonants ( str ) ) ;"}
{"text":"isVowel ( ) is a function that returns true for a vowel and false otherwise .","code":"function isVowel ( c ) { return ( c == ' ' c == ' ' c == ' ' c == ' ' c == ' ' ) ; }"}
{"text":"function to Encrypt the dtring","code":"function encryptString ( s , n , k ) { var countVowels = 0 ; var countConsonants = 0 ; var ans = \" \" ;"}
{"text":"for each substring","code":"for ( var l = 0 ; l <= n - k ; l ++ ) { countVowels = 0 ; countConsonants = 0 ;"}
{"text":"substring of size k","code":"for ( var r = l ; r <= l + k - 1 ; r ++ ) {"}
{"text":"counting number of vowels and consonants","code":"if ( isVowel ( s [ r ] ) == true ) countVowels ++ ; else countConsonants ++ ; }"}
{"text":"append product to answer .","code":"ans += ( countVowels * countConsonants ) . toString ( ) ; } return ans ; }"}
{"text":"Driven Program","code":"var s = \" \" ; var n = s . length ; var k = 2 ; document . write ( encryptString ( s , n , k ) ) ;"}
{"text":"Javascript implementation of the above approach","code":"var charBuffer = \" \" ; function processWords ( input ) {"}
{"text":"we are splitting the input based on spaces ( s ) + : this regular expression will handle scenarios where we have words separated by multiple spaces","code":"var s = input . split ( ' ' ) ; s . forEach ( element => {"}
{"text":"charAt ( 0 ) will pick only the first character from the string and append to buffer","code":"charBuffer += element [ 0 ] ; } ) ; return charBuffer ; }"}
{"text":"Driver code","code":"var input = \" \" ; document . write ( processWords ( input ) ) ;"}
{"text":"A utility function generate all string without consecutive 1 'sof size K","code":"function generateAllStringsUtil ( K , str , n ) {"}
{"text":"Print binary string without consecutive 1 's","code":"if ( n == K ) {"}
{"text":"Terminate binary string","code":"str [ n ] = ' \\0 ' ; document . write ( str . join ( \" \" ) + \" \" ) ; return ; }"}
{"text":"If previous character is '1' then we put only 0 at end of string example str = \"01\" then new string be \"010\"","code":"if ( str [ n - 1 ] == ' ' ) { str [ n ] = ' ' ; generateAllStringsUtil ( K , str , n + 1 ) ; }"}
{"text":"If previous character is '0' than we put both '1' and '0' at end of string example str = \"00\" then new string \"001\" and \"000\"","code":"if ( str [ n - 1 ] == ' ' ) { str [ n ] = ' ' ; generateAllStringsUtil ( K , str , n + 1 ) ; str [ n ] = ' ' ; generateAllStringsUtil ( K , str , n + 1 ) ; } }"}
{"text":"Function generate all binary string without consecutive 1 's","code":"function generateAllStrings ( K ) {"}
{"text":"Base case","code":"if ( K <= 0 ) return ;"}
{"text":"One by one stores every binary string of length K","code":"var str = new Array ( K ) ;"}
{"text":"Generate all Binary string starts with '0'","code":"str [ 0 ] = ' ' ; generateAllStringsUtil ( K , str , 1 ) ;"}
{"text":"Generate all Binary string starts with '1'","code":"str [ 0 ] = ' ' ; generateAllStringsUtil ( K , str , 1 ) ; }"}
{"text":"Driver code","code":"var K = 3 ; generateAllStrings ( K ) ;"}
{"text":"Function to find the biggest right circular cylinder","code":"function findVolume ( a ) {"}
{"text":"side cannot be negative","code":"if ( a < 0 ) return - 1 ;"}
{"text":"radius of right circular cylinder","code":"var r = a \/ 2 ;"}
{"text":"height of right circular cylinder","code":"var h = a ;"}
{"text":"volume of right circular cylinder","code":"var V = ( 3.14 * Math . pow ( r , 2 ) * h ) ; return V ; }"}
{"text":"Driver code","code":"var a = 5 ; document . write ( findVolume ( a ) ) ;"}
{"text":"Function to find the volume of triangular pyramid","code":"function volumeTriangular ( a , b , h ) { let vol = ( 0.1666 ) * a * b * h ; return vol ; }"}
{"text":"Function to find the volume of square pyramid","code":"function volumeSquare ( b , h ) { let vol = ( 0.33 ) * b * b * h ; return vol ; }"}
{"text":"Function to find the volume of pentagonal pyramid","code":"function volumePentagonal ( a , b , h ) { let vol = ( 0.83 ) * a * b * h ; return vol ; }"}
{"text":"Function to find the volume of hexagonal pyramid","code":"function volumeHexagonal ( a , b , h ) { let vol = a * b * h ; return vol ; }"}
{"text":"Driver Code","code":"let b = 4 , h = 9 , a = 4 ; document . write ( \" \" + \" \" + volumeTriangular ( a , b , h ) + \" \" ) ; document . write ( \" \" + \" \" + volumeSquare ( b , h ) + \" \" ) ; document . write ( \" \" + \" \" + volumePentagonal ( a , b , h ) + \" \" ) ; document . write ( \" \" + \" \" + volumeHexagonal ( a , b , h ) ) ;"}
{"text":"Function for the area","code":"function Area ( b1 , b2 , h ) { return ( ( b1 + b2 ) \/ 2 ) * h ; }"}
{"text":"Driver Code","code":"let base1 = 8 , base2 = 10 , height = 6 ; let area = Area ( base1 , base2 , height ) ; document . write ( \" \" + area ) ;"}
{"text":"Javascript function to find number of diagonals in n sided convex polygon","code":"function numberOfDiagonals ( n ) { return n * ( n - 3 ) \/ 2 ; }"}
{"text":"Driver code","code":"var n = 5 ; document . write ( n + \" \" ) ; document . write ( numberOfDiagonals ( n ) + \" \" ) ;"}
{"text":"Function to find the maximum area such that it does not contains any hole","code":"function maximumArea ( l , b , x , y ) {"}
{"text":"Area for all the possible positions of the cut","code":"var left = x * b ; var right = ( l - x - 1 ) * b ; var above = l * y ; var below = ( b - y - 1 ) * l ;"}
{"text":"Find the maximum area among the above rectangles","code":"document . write ( Math . max ( Math . max ( left , right ) , Math . max ( above , below ) ) ) ; }"}
{"text":"Driver Code","code":"var L = 8 , B = 8 ; var X = 0 , Y = 0 ;"}
{"text":"Function call","code":"maximumArea ( L , B , X , Y ) ;"}
{"text":"Function to find the minimum cost of removing characters to make the string unique","code":"function delCost ( s , cost ) {"}
{"text":"Store the minimum cost required","code":"var ans = 0 ;"}
{"text":"Create a dictionary to store the maximum cost of removal a character","code":"var forMax = new Map ( ) ;"}
{"text":"Create a dictionary to store the total deletion cost of a character","code":"var forTot = new Map ( ) ;"}
{"text":"Traverse the string , S","code":"for ( var i = 0 ; i < s . length ; i ++ ) {"}
{"text":"Keep track of maximum cost of each character","code":"if ( ! forMax . has ( s [ i ] ) ) { forMax . set ( s [ i ] , cost [ i ] ) ; } else {"}
{"text":"Update the maximum deletion cost","code":"forMax . set ( s [ i ] , Math . max ( forMax . get ( s [ i ] ) , cost [ i ] ) ) }"}
{"text":"Keep track of the total cost of each character","code":"if ( ! forTot . has ( s [ i ] ) ) { forTot . set ( s [ i ] , cost [ i ] ) ; } else {"}
{"text":"Update the total deletion cost","code":"forTot . set ( s [ i ] , forTot . get ( s [ i ] ) + cost [ i ] ) } }"}
{"text":"Traverse through all the unique characters","code":"forMax . forEach ( ( value , key ) => {"}
{"text":"Keep the maximum cost character and delete the rest","code":"ans += forTot . get ( key ) - value ; } ) ;"}
{"text":"Return the answer","code":"return ans ; }"}
{"text":"Given string","code":"var s = \" \" ;"}
{"text":"Given cost array","code":"var cost = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;"}
{"text":"Function Call","code":"document . write ( delCost ( s , cost ) ) ;"}
{"text":"Define macros","code":"let MAX = 10000 ; let divisors = new Array ( MAX + 1 ) ;"}
{"text":"Stores divisors for all numbers in the vector divisors","code":"function computeDivisors ( ) { for ( let i = 1 ; i <= MAX ; i ++ ) { for ( let j = i ; j <= MAX ; j += i ) {"}
{"text":"i is the divisor and j is the multiple","code":"divisors [ j ] . push ( i ) ; } } }"}
{"text":"Function to compare the closeness of the given target","code":"function getClosest ( val1 , val2 , target ) { if ( target - val1 >= val2 - target ) return val2 ; else return val1 ; }"}
{"text":"Function to find the element closest to target in divisors vector","code":"function findClosest ( arr , n , target ) {"}
{"text":"Corner cases","code":"if ( target <= arr [ 0 ] ) return arr [ 0 ] ; if ( target >= arr [ n - 1 ] ) return arr [ n - 1 ] ;"}
{"text":"Perform binary search","code":"let i = 0 , j = n , mid = 0 ; while ( i < j ) { mid = Math . floor ( ( i + j ) \/ 2 ) ; if ( arr [ mid ] == target ) return arr [ mid ] ;"}
{"text":"Check if target is less than the array element then search in left half","code":"if ( target < arr [ mid ] ) {"}
{"text":"Check if target is greater than previous to mid , return closest of two","code":"if ( mid > 0 && target > arr [ mid - 1 ] ) return getClosest ( arr [ mid - 1 ] , arr [ mid ] , target ) ;"}
{"text":"Repeat for left half","code":"j = mid ; }"}
{"text":"Check if target is greater than mid","code":"else { if ( mid < n - 1 && target < arr [ mid + 1 ] ) return getClosest ( arr [ mid ] , arr [ mid + 1 ] , target ) ;"}
{"text":"Update i","code":"i = mid + 1 ; } }"}
{"text":"Only single element left after search","code":"return arr [ mid ] ; }"}
{"text":"Function to print the divisor of N closest to X","code":"function printClosest ( N , X ) {"}
{"text":"Function call to calculate and stores divisors of all numbers in a vector","code":"computeDivisors ( ) ;"}
{"text":"Stores the closest value to target","code":"let ans = findClosest ( divisors [ N ] , divisors [ N ] . length , X ) ;"}
{"text":"Print the answer","code":"document . write ( ans ) ; }"}
{"text":"Given N & X","code":"let N = 16 , X = 5 ; for ( let i = 0 ; i < divisors . length ; i ++ ) divisors [ i ] = [ ] ;"}
{"text":"Function Call","code":"printClosest ( N , X ) ;"}
{"text":"Function to count maximum matched elements from the arrays A [ ] and B [ ]","code":"function maxMatch ( A , B ) {"}
{"text":"Stores position of elements of array A [ ] in the array B [ ]","code":"var Aindex = { } ;"}
{"text":"Keep track of difference between the indices","code":"var diff = { } ;"}
{"text":"Traverse the array A [ ]","code":"for ( var i = 0 ; i < A . length ; i ++ ) { Aindex [ A [ i ] ] = i ; }"}
{"text":"Traverse the array B [ ]","code":"for ( var i = 0 ; i < B . length ; i ++ ) {"}
{"text":"If difference is negative , add N to it","code":"if ( i - Aindex [ B [ i ] ] < 0 ) { if ( ! diff . hasOwnProperty ( A . length + i - Aindex [ B [ i ] ] ) ) { diff [ A . length + i - Aindex [ B [ i ] ] ] = 1 ; } else { diff [ A . length + i - Aindex [ B [ i ] ] ] += 1 ; } }"}
{"text":"Keep track of the number of shifts required to place elements at same indices","code":"else { if ( ! diff . hasOwnProperty ( i - Aindex [ B [ i ] ] ) ) { diff [ i - Aindex [ B [ i ] ] ] = 1 ; } else { diff [ i - Aindex [ B [ i ] ] ] += 1 ; } } }"}
{"text":"Return the max matches","code":"var max = 0 ; for ( const [ key , value ] of Object . entries ( diff ) ) { if ( value > max ) { max = value ; } } return max ; }"}
{"text":"Driver Code","code":"var A = [ 5 , 3 , 7 , 9 , 8 ] ; var B = [ 8 , 7 , 3 , 5 , 9 ] ;"}
{"text":"Returns the count of matched elements","code":"document . write ( maxMatch ( A , B ) ) ;"}
{"text":"JavaScript program to implement the above approach","code":"var N = 9 ;"}
{"text":"Function to check if all elements of the board [ ] [ ] array store value in the range [ 1 , 9 ]","code":"function isinRange ( board ) {"}
{"text":"Traverse board [ ] [ ] array","code":"for ( var i = 0 ; i < N ; i ++ ) { for ( var j = 0 ; j < N ; j ++ ) {"}
{"text":"Check if board [ i ] [ j ] lies in the range","code":"if ( board [ i ] [ j ] <= 0 board [ i ] [ j ] > 9 ) { return false ; } } } return true ; }"}
{"text":"Function to check if the solution of sudoku puzzle is valid or not","code":"function isValidSudoku ( board ) {"}
{"text":"Check if all elements of board [ ] [ ] stores value in the range [ 1 , 9 ]","code":"if ( isinRange ( board ) == false ) { return false ; }"}
{"text":"Stores unique value from 1 to N","code":"var unique = Array ( N + 1 ) . fill ( false ) ;"}
{"text":"Traverse each row of the given array","code":"for ( var i = 0 ; i < N ; i ++ ) { unique = Array ( N + 1 ) . fill ( false ) ;"}
{"text":"Initialize unique [ ] array to false","code":"unique = Array ( N + 1 ) . fill ( false ) ;"}
{"text":"Traverse each column of current row","code":"for ( var j = 0 ; j < N ; j ++ ) {"}
{"text":"Stores the value of board [ i ] [ j ]","code":"var Z = board [ i ] [ j ] ;"}
{"text":"Check if current row stores duplicate value","code":"if ( unique [ Z ] ) { return false ; } unique [ Z ] = true ; } }"}
{"text":"Traverse each column of the given array","code":"for ( var i = 0 ; i < N ; i ++ ) {"}
{"text":"Traverse each row of current column","code":"for ( var j = 0 ; j < N ; j ++ ) {"}
{"text":"Stores the value of board [ j ] [ i ]","code":"var Z = board [ j ] [ i ] ;"}
{"text":"Check if current column stores duplicate value","code":"if ( unique [ Z ] ) { return false ; } unique [ Z ] = true ; } }"}
{"text":"Traverse each block of size 3 * 3 in board [ ] [ ] array","code":"for ( var i = 0 ; i < N - 2 ; i += 3 ) {"}
{"text":"j stores first column of each 3 * 3 block","code":"for ( var j = 0 ; j < N - 2 ; j += 3 ) {"}
{"text":"Initialize unique [ ] array to false","code":"unique = Array ( N + 1 ) . fill ( false ) ;"}
{"text":"Traverse current block","code":"for ( var k = 0 ; k < 3 ; k ++ ) { for ( var l = 0 ; l < 3 ; l ++ ) {"}
{"text":"Stores row number of current block","code":"var X = i + k ;"}
{"text":"Stores column number of current block","code":"var Y = j + l ;"}
{"text":"Stores the value of board [ X ] [ Y ]","code":"var Z = board [ X ] [ Y ] ;"}
{"text":"Check if current block stores duplicate value","code":"if ( unique [ Z ] ) { return false ; } unique [ Z ] = true ; } } } }"}
{"text":"If all conditions satisfied","code":"return true ; }"}
{"text":"Driver Code","code":"var board = [ [ 7 , 9 , 2 , 1 , 5 , 4 , 3 , 8 , 6 ] , [ 6 , 4 , 3 , 8 , 2 , 7 , 1 , 5 , 9 ] , [ 8 , 5 , 1 , 3 , 9 , 6 , 7 , 2 , 4 ] , [ 2 , 6 , 5 , 9 , 7 , 3 , 8 , 4 , 1 ] , [ 4 , 8 , 9 , 5 , 6 , 1 , 2 , 7 , 3 ] , [ 3 , 1 , 7 , 4 , 8 , 2 , 9 , 6 , 5 ] , [ 1 , 3 , 6 , 7 , 4 , 8 , 5 , 9 , 2 ] , [ 9 , 7 , 4 , 2 , 1 , 5 , 6 , 3 , 8 ] , [ 5 , 2 , 8 , 6 , 3 , 9 , 4 , 1 , 7 ] ] ; if ( isValidSudoku ( board ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to check if a number is Palindrome or not here i is the starting index and j is the last index of the subarray","code":"function palindrome ( a , i , j ) { while ( i < j ) {"}
{"text":"If the integer at i is not equal to j then the subarray is not palindrome","code":"if ( a [ i ] != a [ j ] ) return false ;"}
{"text":"Otherwise","code":"i ++ ; j -- ; }"}
{"text":"all a [ i ] is equal to a [ j ] then the subarray is palindrome","code":"return true ; }"}
{"text":"Function to find a subarray whose concatenation forms a palindrome and return its starting index","code":"function findSubArray ( arr , k ) { let n = arr . length ;"}
{"text":"Iterating over subarray of length k and checking if that subarray is palindrome","code":"for ( let i = 0 ; i <= n - k ; i ++ ) { if ( palindrome ( arr , i , i + k - 1 ) ) return i ; }"}
{"text":"If no subarray is palindrome","code":"return - 1 ; }"}
{"text":"Driver Code","code":"let arr = [ 2 , 3 , 5 , 1 , 3 ] ; let k = 4 ; let ans = findSubArray ( arr , k ) ; if ( ans == - 1 ) document . write ( - 1 + \" \" ) ; else { for ( let i = ans ; i < ans + k ; i ++ ) document . write ( arr [ i ] + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"Function to check if the man crosses previous visited coordinate or not","code":"function isCrossed ( path ) { if ( path . length == 0 ) return ;"}
{"text":"Stores the count of crossed vertex","code":"let ans = false ;"}
{"text":"Stores ( x , y ) coordinates","code":"let mySet = new Set ( ) ;"}
{"text":"The coordinates for the origin","code":"let x = 0 , y = 0 ; mySet . add ( [ x , y ] ) ;"}
{"text":"Iterate over the String","code":"for ( let i = 0 ; i < path . length ; i ++ ) {"}
{"text":"Condition to increment X or Y co - ordinates respectively","code":"if ( path [ i ] == ' ' ) mySet . add ( [ x , y ++ ] ) ; if ( path [ i ] == ' ' ) mySet . add ( [ x , y -- ] ) ; if ( path [ i ] == ' ' ) mySet . add ( [ x ++ , y ] ) ; if ( path [ i ] == ' ' ) mySet . add ( [ x -- , y ] ) ;"}
{"text":"Check if ( x , y ) is already visited","code":"if ( ! mySet . has ( [ x , y ] ) ) { ans = true ; break ; } }"}
{"text":"Print the result","code":"if ( ans ) document . write ( \" \" ) ; else document . write ( \" \" ) ; }"}
{"text":"Given String","code":"let path = \" \" ;"}
{"text":"Function call","code":"isCrossed ( path ) ;"}
{"text":"Function to find the maximum width of the tree using level order traversal","code":"function maxWidth ( N , M , cost , s ) {"}
{"text":"Store the edges of the tree","code":"let adj = [ ] ; for ( let i = 0 ; i < N ; i ++ ) { adj . push ( [ ] ) ; } for ( let i = 0 ; i < M ; i ++ ) { adj [ s [ i ] [ 0 ] ] . push ( s [ i ] [ 1 ] ) ; }"}
{"text":"Stores maximum width of the tree","code":"let result = 0 ;"}
{"text":"Stores the nodes of each level","code":"let q = [ ] ;"}
{"text":"Insert root node","code":"q . push ( 0 ) ;"}
{"text":"Perform level order traversal on the tree","code":"while ( q . length != 0 ) {"}
{"text":"Stores the size of the queue","code":"let count = q . length ;"}
{"text":"Update maximum width","code":"result = Math . max ( count , result ) ;"}
{"text":"Push the nodes of the next level and pop the elements of the current level","code":"while ( count -- > 0 ) {"}
{"text":"Get element from the front the Queue","code":"let temp = q . shift ( ) ;"}
{"text":"Push all nodes of the next level .","code":"for ( let i = 0 ; i < adj [ temp ] . length ; i ++ ) { q . push ( adj [ temp ] [ i ] ) ; } } }"}
{"text":"Return the result .","code":"return result ; }"}
{"text":"Driver Code","code":"let N = 11 , M = 10 ; let edges = [ ] ; edges . push ( [ 0 , 1 ] ) ; edges . push ( [ 0 , 2 ] ) ; edges . push ( [ 0 , 3 ] ) ; edges . push ( [ 1 , 4 ] ) ; edges . push ( [ 1 , 5 ] ) ; edges . push ( [ 3 , 6 ] ) ; edges . push ( [ 4 , 7 ] ) ; edges . push ( [ 6 , 10 ] ) ; edges . push ( [ 6 , 8 ] ) ; edges . push ( [ 6 , 9 ] ) ; let cost = [ 1 , 2 , - 1 , 3 , 4 , 5 , 8 , 2 , 6 , 12 , 7 ] ;"}
{"text":"Constructed tree is : 1 \/ | \\ 2 - 1 3 \/ \\ \\ 4 5 8 \/ \/ | \\ 2 6 12 7","code":"document . write ( maxWidth ( N , M , cost , edges ) ) ;"}
{"text":"Javascript Program to implement the above approach","code":"let MAX = 10000000 ;"}
{"text":"Stores if an index is a prime \/ non - prime value","code":"let isPrime = new Array ( MAX ) ;"}
{"text":"Stores the prime","code":"let primes = new Array ( ) ;"}
{"text":"Function to generate all prime numbers","code":"function SieveOfEratosthenes ( ) { isPrime . fill ( true ) ; for ( let p = 2 ; p * p <= MAX ; p ++ ) {"}
{"text":"If current element is prime","code":"if ( isPrime [ p ] == true ) {"}
{"text":"Set all its multiples non - prime","code":"for ( let i = p * p ; i <= MAX ; i += p ) isPrime [ i ] = false ; } }"}
{"text":"Store all prime numbers","code":"for ( let p = 2 ; p <= MAX ; p ++ ) if ( isPrime [ p ] ) primes . push ( p ) ; }"}
{"text":"Function to find the closest prime to a particular number","code":"function prime_search ( primes , diff ) {"}
{"text":"Applying binary search on primes vector","code":"let low = 0 ; let high = primes . length - 1 ; let res = 0 ; while ( low <= high ) { let mid = Math . floor ( ( low + high ) \/ 2 ) ;"}
{"text":"If the prime added makes the elements equal","code":"if ( primes [ mid ] == diff ) {"}
{"text":"Return this as the closest prime","code":"return primes [ mid ] ; }"}
{"text":"If the array remains non - decreasing","code":"else if ( primes [ mid ] < diff ) {"}
{"text":"Search for a bigger prime number","code":"low = mid + 1 ; }"}
{"text":"Otherwise","code":"else { res = primes [ mid ] ;"}
{"text":"Check if a smaller prime can make array non - decreasing or not","code":"high = mid - 1 ; } }"}
{"text":"Return closest number","code":"return res ; }"}
{"text":"Function to find the minimum cost","code":"function minCost ( arr , n ) {"}
{"text":"Find all primes","code":"SieveOfEratosthenes ( ) ;"}
{"text":"Store the result","code":"let res = 0 ;"}
{"text":"Iterate over the array","code":"for ( let i = 1 ; i < n ; i ++ ) {"}
{"text":"Current element is less than the previous element","code":"if ( arr [ i ] < arr [ i - 1 ] ) { let diff = arr [ i - 1 ] - arr [ i ] ;"}
{"text":"Find the closest prime which makes the array non decreasing","code":"let closest_prime = prime_search ( primes , diff ) ;"}
{"text":"Add to overall cost","code":"res += closest_prime ;"}
{"text":"Update current element","code":"arr [ i ] += closest_prime ; } }"}
{"text":"Return the minimum cost","code":"return res ; }"}
{"text":"Given array","code":"let arr = [ 2 , 1 , 5 , 4 , 3 ] ; let n = 5 ;"}
{"text":"Function Call","code":"document . write ( minCost ( arr , n ) )"}
{"text":"Function to return ways to split a string into three parts with the equal number of 0","code":"function count ( s ) {"}
{"text":"Store total count of 0 s","code":"var cnt = 0 ;"}
{"text":"Count total no . of 0 s character in given string","code":"s . split ( ' ' ) . forEach ( c => { cnt += ( c == ' ' ) ? 1 : 0 ; } ) ;"}
{"text":"If total count of 0 character is not divisible by 3","code":"if ( cnt % 3 != 0 ) return 0 ; var res = 0 , k = parseInt ( cnt \/ 3 ) , sum = 0 ;"}
{"text":"Initialize mp to store frequency of k","code":"var mp = new Map ( ) ;"}
{"text":"Traverse string to find ways to split string","code":"for ( var i = 0 ; i < s . length ; i ++ ) {"}
{"text":"Increment count if 0 appears","code":"sum += ( s [ i ] == ' ' ) ? 1 : 0 ;"}
{"text":"Increment result if sum equal to 2 * k and k exists in mp","code":"if ( sum == 2 * k && mp . has ( k ) && i < s . length - 1 && i > 0 ) { res += mp . get ( k ) ; }"}
{"text":"Insert sum in mp","code":"if ( mp . has ( sum ) ) mp . set ( sum , mp . get ( sum ) + 1 ) else mp . set ( sum , 1 ) ; }"}
{"text":"Return result","code":"return res ; }"}
{"text":"Given string","code":"var str = \" \" ;"}
{"text":"Function call","code":"document . write ( count ( str ) ) ;"}
{"text":"Function to calculate the number of ways to split","code":"function splitstring ( s ) { let n = s . length ;"}
{"text":"Calculating the total number of zeros","code":"let zeros = 0 ; for ( let i = 0 ; i < n ; i ++ ) if ( s [ i ] == ' ' ) zeros ++ ;"}
{"text":"Case1 If total count of zeros is not divisible by 3","code":"if ( zeros % 3 != 0 ) return 0 ;"}
{"text":"Case2 if total count of zeros is zero","code":"if ( zeros == 0 ) return parseInt ( ( ( n - 1 ) * ( n - 2 ) ) \/ 2 , 10 ) ;"}
{"text":"Number of zeros in each substring","code":"let zerosInEachSubstring = parseInt ( zeros \/ 3 , 10 ) ;"}
{"text":"Initialising zero to the number of ways for first and second cut","code":"let waysOfFirstCut = 0 ; let waysOfSecondCut = 0 ;"}
{"text":"Initializing the count","code":"let count = 0 ;"}
{"text":"Traversing from the beginning","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Incrementing the count if the element is '0'","code":"if ( s [ i ] == ' ' ) count ++ ;"}
{"text":"Incrementing the ways for the 1 st cut if count is equal to zeros required in each substring","code":"if ( count == zerosInEachSubstring ) waysOfFirstCut ++ ;"}
{"text":"Incrementing the ways for the 2 nd cut if count is equal to 2 * ( zeros required in each substring )","code":"else if ( count == 2 * zerosInEachSubstring ) waysOfSecondCut ++ ; }"}
{"text":"Total number of ways to split is multiplication of ways for the 1 st and 2 nd cut","code":"return waysOfFirstCut * waysOfSecondCut ; }"}
{"text":"Driver code","code":"let s = \" \" ;"}
{"text":"Function call","code":"document . write ( \" \" + \" \" + splitstring ( s ) ) ;"}
{"text":"Function to check if it is possible to transform start to end","code":"function canTransform ( str1 , str2 ) { var s1 = \" \" ; var s2 = \" \" ;"}
{"text":"Check the sequence of A , B in both Strings str1 and str2","code":"for ( const c of str1 ) { if ( c !== \" \" ) { s1 += c ; } } for ( const c of str2 ) { if ( c !== \" \" ) { s2 += c ; } }"}
{"text":"If both the Strings are not equal","code":"if ( s1 !== s2 ) return false ; var i = 0 ; var j = 0 ; var n = str1 . length ;"}
{"text":"Traverse the Strings","code":"while ( i < n && j < n ) { if ( str1 [ i ] === \" \" ) { i ++ ; } else if ( str2 [ j ] === \" \" ) { j ++ ; }"}
{"text":"Check for indexes of A and B","code":"else { if ( ( str1 [ i ] === \" \" && i < j ) || ( str1 [ i ] === \" \" && i > j ) ) { return false ; } i ++ ; j ++ ; } } return true ; }"}
{"text":"Driver Code","code":"var str1 = \" \" ; var str2 = \" \" ;"}
{"text":"Function call","code":"if ( canTransform ( str1 . split ( \" \" ) , str2 . split ( \" \" ) ) ) { document . write ( \" \" ) ; } else { document . write ( \" \" ) ; }"}
{"text":"Function to return the length of the longest subString having equal number of vowel and consonant","code":"function maxsubStringLength ( S , N ) { let arr = Array . from ( { length : N } , ( _ , i ) => 0 ) ;"}
{"text":"Generate the array","code":"for ( let i = 0 ; i < N ; i ++ ) if ( S [ i ] == ' ' S [ i ] == ' ' S [ i ] == ' ' S [ i ] == ' ' S [ i ] == ' ' ) arr [ i ] = 1 ; else arr [ i ] = - 1 ;"}
{"text":"Initialize variable to store result","code":"let maxLen = 0 ;"}
{"text":"Stores the sum of subarray","code":"let curr_sum = 0 ;"}
{"text":"Map to store indices of the sum","code":"let hash = new Map ( ) ;"}
{"text":"Loop through the array","code":"for ( let i = 0 ; i < N ; i ++ ) { curr_sum += arr [ i ] ;"}
{"text":"If sum is 0","code":"if ( curr_sum == 0 )"}
{"text":"Count of vowels and consonants are equal","code":"maxLen = Math . max ( maxLen , i + 1 ) ;"}
{"text":"Update the maximum length of subString in HashMap","code":"if ( hash . has ( curr_sum ) ) maxLen = Math . max ( maxLen , i - hash . get ( curr_sum ) ) ;"}
{"text":"Store the index of the sum","code":"else hash . set ( curr_sum , i ) ; }"}
{"text":"Return the maximum length of required subString","code":"return maxLen ; }"}
{"text":"Driver code","code":"let S = \" \" ; let n = S . length ; document . write ( maxsubStringLength ( S . split ( ' ' ) , n ) ) ;"}
{"text":"Javascript Program to implement the above approach","code":"let mat = new Array ( 1001 ) ; for ( let i = 0 ; i < 1001 ; i ++ ) { mat [ i ] = new Array ( 1001 ) ; for ( let j = 0 ; j < 1001 ; j ++ ) { mat [ i ] [ j ] = 0 ; } } let r , c , x , y ;"}
{"text":"Stores the accessible directions","code":"let dx = [ 0 , - 1 , - 1 , - 1 , 0 , 1 , 1 , 1 ] ; let dy = [ 1 , 1 , 0 , - 1 , - 1 , - 1 , 0 , 1 ] ;"}
{"text":"Function to find the minimum distance from a given cell to all other cells in the matrix","code":"function FindMinimumDistance ( ) {"}
{"text":"Stores the accessible cells from current cell","code":"let q = [ ] ;"}
{"text":"Insert pair ( x , y )","code":"q . push ( [ x , y ] ) ; mat [ x ] [ y ] = 0 ;"}
{"text":"Iterate untill queue is empty","code":"while ( q . length > 0 ) {"}
{"text":"Extract the pair","code":"x = q [ 0 ] [ 0 ] ; y = q [ 0 ] [ 1 ] ;"}
{"text":"Pop them","code":"q . shift ( ) ; for ( let i = 0 ; i < 8 ; i ++ ) { let a = x + dx [ i ] ; let b = y + dy [ i ] ;"}
{"text":"Checking boundary condition","code":"if ( a < 0 a >= r b >= c b < 0 ) continue ;"}
{"text":"If the cell is not visited","code":"if ( mat [ a ] [ b ] == 0 ) {"}
{"text":"Assign the minimum distance","code":"mat [ a ] [ b ] = mat [ x ] [ y ] + 1 ;"}
{"text":"Insert the traversed neighbour into the queue","code":"q . push ( [ a , b ] ) ; } } } }"}
{"text":"Driver Code","code":"r = 5 , c = 5 , x = 1 , y = 1 ; let t = x ; let l = y ; mat [ x ] [ y ] = 0 ; FindMinimumDistance ( ) ; mat [ t ] [ l ] = 0 ;"}
{"text":"Print the required distances","code":"for ( let i = 0 ; i < r ; i ++ ) { for ( let j = 0 ; j < c ; j ++ ) { document . write ( mat [ i ] [ j ] + \" \" ) ; } document . write ( \" \" ) ; }"}
{"text":"Function that returns the minimum number of flips to convert the s into a concatenation of K - length sub - string","code":"function minOperations ( S , K ) {"}
{"text":"Stores the result","code":"var ans = 0 ;"}
{"text":"Iterate through string index","code":"for ( var i = 0 ; i < K ; i ++ ) {"}
{"text":"Stores count of 0 s & 1 s","code":"var zero = 0 , one = 0 ;"}
{"text":"Iterate making K jumps","code":"for ( var j = i ; j < S . length ; j += K ) {"}
{"text":"Count 0 's","code":"if ( S [ j ] === \" \" ) zero ++ ;"}
{"text":"Count 1 's","code":"else one ++ ; }"}
{"text":"Add minimum flips for index i","code":"ans += Math . min ( zero , one ) ; }"}
{"text":"Return minimum number of flips","code":"return ans ; }"}
{"text":"Driver Code","code":"var S = \" \" ; var K = 3 ; document . write ( minOperations ( S , K ) ) ;"}
{"text":"Function to get the missing element","code":"function missingElement ( arr , n ) {"}
{"text":"For maximum Element in the array","code":"let max_ele = arr [ 0 ] ;"}
{"text":"For minimum Element in the array","code":"let min_ele = arr [ 0 ] ;"}
{"text":"For xor of all elements","code":"let x = 0 ;"}
{"text":"Common difference of AP series","code":"let d ;"}
{"text":"find maximum and minimum element","code":"for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max_ele ) max_ele = arr [ i ] ; if ( arr [ i ] < min_ele ) min_ele = arr [ i ] ; }"}
{"text":"Calculating common difference","code":"d = parseInt ( ( max_ele - min_ele ) \/ n , 10 ) ;"}
{"text":"Calculate the XOR of all elements","code":"for ( let i = 0 ; i < n ; i ++ ) { x = x ^ arr [ i ] ; }"}
{"text":"Perform XOR with actual AP series resultant x will be the ans","code":"for ( let i = 0 ; i <= n ; i ++ ) { x = x ^ ( min_ele + ( i * d ) ) ; }"}
{"text":"Return the missing element","code":"return x ; }"}
{"text":"Given array","code":"let arr = [ 12 , 3 , 6 , 15 , 18 ] ; let n = arr . length ;"}
{"text":"Function Call","code":"let element = missingElement ( arr , n ) ;"}
{"text":"Print the missing element","code":"document . write ( element ) ;"}
{"text":"Function to prints kth sub - string","code":"function Printksubstring ( str , n , k ) {"}
{"text":"Total sub - strings possible","code":"let total = parseInt ( ( n * ( n + 1 ) ) \/ 2 , 10 ) ;"}
{"text":"If k is greater than total number of sub - strings","code":"if ( k > total ) { document . write ( \" \" + \" \" ) ; return ; }"}
{"text":"To store number of sub - strings starting with ith character of the string","code":"let substring = new Array ( n + 1 ) ; substring [ 0 ] = 0 ;"}
{"text":"Compute the values","code":"let temp = n ; for ( let i = 1 ; i <= n ; i ++ ) {"}
{"text":"substring [ i - 1 ] is added to store the cumulative sum","code":"substring [ i ] = substring [ i - 1 ] + temp ; temp -- ; }"}
{"text":"Binary search to find the starting index of the kth sub - string","code":"let l = 1 ; let h = n ; let start = 0 ; while ( l <= h ) { let m = parseInt ( ( l + h ) \/ 2 , 10 ) ; if ( substring [ m ] > k ) { start = m ; h = m - 1 ; } else if ( substring [ m ] < k ) { l = m + 1 ; } else { start = m ; break ; } }"}
{"text":"To store the ending index of the kth sub - string","code":"let end = n - ( substring [ start ] - k ) ;"}
{"text":"Print the sub - string","code":"for ( let i = start - 1 ; i < end ; i ++ ) { document . write ( str [ i ] ) ; } }"}
{"text":"Driver code","code":"let str = \" \" ; let k = 4 ; let n = str . length ; Printksubstring ( str , n , k ) ;"}
{"text":"Function to return the lower insertion point of an element in a sorted array","code":"function LowerInsertionPoint ( arr , n , X ) {"}
{"text":"Base cases","code":"if ( X < arr [ 0 ] ) return 0 ; else if ( X > arr [ n - 1 ] ) return n ; let lowerPnt = 0 ; let i = 1 ; while ( i < n && arr [ i ] < X ) { lowerPnt = i ; i = i * 2 ; }"}
{"text":"Final check for the remaining elements which are < X","code":"while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++ ; return lowerPnt ; }"}
{"text":"Driver code","code":"let arr = [ 2 , 3 , 4 , 4 , 5 , 6 , 7 , 9 ] ; let n = arr . length ; let X = 4 ; document . write ( LowerInsertionPoint ( arr , n , X ) ) ;"}
{"text":"Returns count of required positions","code":"function getCount ( M , N ) { let count = 0 ;"}
{"text":"horizontal 1D array","code":"if ( M == 1 ) return N ;"}
{"text":"vertical 1D array","code":"if ( N == 1 ) return M ; if ( N > M ) {"}
{"text":"iterating for all possible i","code":"for ( let i = 1 ; i <= M ; i ++ ) { let numerator = N * i - N + M - i ; let denominator = M - 1 ;"}
{"text":"checking if j is integer","code":"if ( numerator % denominator == 0 ) { let j = parseInt ( numerator \/ denominator , 10 ) ;"}
{"text":"checking if j lies b \/ w 1 to N","code":"if ( j >= 1 && j <= N ) count ++ ; } } } else {"}
{"text":"iterating for all possible j","code":"for ( let j = 1 ; j <= N ; j ++ ) { let numerator = M * j - M + N - j ; let denominator = N - 1 ;"}
{"text":"checking if i is integer","code":"if ( numerator % denominator == 0 ) { let i = parseInt ( numerator \/ denominator , 10 ) ;"}
{"text":"checking if i lies b \/ w 1 to M","code":"if ( i >= 1 && i <= M ) count ++ ; } } } return count ; }"}
{"text":"Driver Code","code":"let M = 3 , N = 5 ; document . write ( getCount ( M , N ) ) ;"}
{"text":"Function to check whether there is any swappable element present to make the first array sorted","code":"function swapElement ( arr1 , arr2 , n ) {"}
{"text":"wrongIdx is the index of the element which is making the first array unsorted","code":"let wrongIdx = 0 ; for ( let i = 1 ; i < n ; i ++ ) { if ( arr1 [ i ] < arr1 [ i - 1 ] ) { wrongIdx = i ; } } let maximum = Number . MIN_VALUE ; let maxIdx = - 1 ; let res = false ;"}
{"text":"Find the maximum element which satisfies the above mentioned neighboring conditions","code":"for ( let i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] > maximum && arr2 [ i ] >= arr1 [ wrongIdx - 1 ] ) { if ( wrongIdx + 1 <= n - 1 && arr2 [ i ] <= arr1 [ wrongIdx + 1 ] ) { maximum = arr2 [ i ] ; maxIdx = i ; res = true ; } } }"}
{"text":"if res is true then swap the element and make the first array sorted","code":"if ( res ) { swap ( arr1 , wrongIdx , arr2 , maxIdx ) ; } return res ; } function swap ( a , wrongIdx , b , maxIdx ) { let c = a [ wrongIdx ] ; a [ wrongIdx ] = b [ maxIdx ] ; b [ maxIdx ] = c ; }"}
{"text":"Function to print the sorted array if elements are swapped .","code":"function getSortedArray ( arr1 , arr2 , n ) { if ( swapElement ( arr1 , arr2 , n ) ) { for ( let i = 0 ; i < n ; i ++ ) { document . write ( arr1 [ i ] + \" \" ) ; } } else { document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"let arr1 = [ 1 , 3 , 7 , 4 , 10 ] ; let arr2 = [ 2 , 1 , 6 , 8 , 9 ] ; let n = arr1 . length ; getSortedArray ( arr1 , arr2 , n ) ;"}
{"text":"Function to find the middle of three number","code":"function middleOfThree ( a , b , c ) {"}
{"text":"Compare each three number to find middle number . Enter only if a > b","code":"if ( a > b ) { if ( b > c ) return b ; else if ( a > c ) return c ; else return a ; } else {"}
{"text":"Decided a is not greater than b .","code":"if ( a > c ) return a ; else if ( b > c ) return c ; else return b ; } }"}
{"text":"Driver Code","code":"let a = 20 , b = 30 , c = 40 ; document . write ( middleOfThree ( a , b , c ) ) ;"}
{"text":"Function to find the transpose of the matrix mat [ ]","code":"function transpose ( mat , row , col ) {"}
{"text":"Stores the transpose of matrix mat [ ] [ ]","code":"let tr = new Array ( col ) ; for ( let i = 0 ; i < col ; i ++ ) { tr [ i ] = new Array ( row ) ; }"}
{"text":"Traverse each row of the matrix","code":"for ( let i = 0 ; i < row ; i ++ ) {"}
{"text":"Traverse each column of the matrix","code":"for ( let j = 0 ; j < col ; j ++ ) {"}
{"text":"Transpose matrix elements","code":"tr [ j ] [ i ] = mat [ i ] [ j ] ; } } return tr ; }"}
{"text":"Function to sort the given matrix in row wise manner","code":"function RowWiseSort ( B ) {"}
{"text":"Traverse the row","code":"for ( let i = 0 ; i < B . length ; i ++ ) {"}
{"text":"Row - Wise Sorting","code":"( B [ i ] ) . sort ( function ( a , b ) { return a - b ; } ) ; } }"}
{"text":"Function to print the matrix in column wise sorted manner","code":"function sortCol ( mat , n , M ) {"}
{"text":"Function call to find transpose of the the matrix mat [ ] [ ]","code":"let B = transpose ( mat , N , M ) ;"}
{"text":"Sorting the matrix row - wise","code":"RowWiseSort ( B ) ;"}
{"text":"Calculate transpose of B [ ] [ ]","code":"mat = transpose ( B , M , N ) ;"}
{"text":"Print the matrix mat [ ] [ ]","code":"for ( let i = 0 ; i < N ; i ++ ) { for ( let j = 0 ; j < M ; j ++ ) { document . write ( mat [ i ] [ j ] + \" \" ) ; } document . write ( \" \" ) ; } }"}
{"text":"Input","code":"let mat = [ [ 1 , 6 , 10 ] , [ 8 , 5 , 9 ] , [ 9 , 4 , 15 ] , [ 7 , 3 , 60 ] ] ; let N = mat . length ; let M = mat [ 0 ] . length ;"}
{"text":"Function call to print the matrix in column wise sorted manner","code":"sortCol ( mat , N , M ) ;"}
{"text":"Function to find the largest area when a series of horizontal & vertical bars are removed","code":"function largestArea ( N , M , H , V , h , v ) {"}
{"text":"Stores all bars","code":"var s1 = new Set ( ) ; var s2 = new Set ( ) ;"}
{"text":"Insert horizontal bars","code":"for ( var i = 1 ; i <= N + 1 ; i ++ ) s1 . add ( i ) ;"}
{"text":"Insert vertictal bars","code":"for ( var i = 1 ; i <= M + 1 ; i ++ ) s2 . add ( i ) ;"}
{"text":"Remove horizontal separators from s1","code":"for ( var i = 0 ; i < h ; i ++ ) { s1 . delete ( H [ i ] ) ; }"}
{"text":"Remove vertical separators from s2","code":"for ( var i = 0 ; i < v ; i ++ ) { s2 . delete ( V [ i ] ) ; }"}
{"text":"Stores left out horizontal and vertical separators","code":"var list1 = Array ( s1 . size ) ; var list2 = Array ( s2 . size ) ; var i = 0 ; s1 . forEach ( element => { list1 [ i ++ ] = element ; } ) ; i = 0 ; s2 . forEach ( element => { list2 [ i ++ ] = element ; } ) ;"}
{"text":"Sort both list in ascending order","code":"list1 . sort ( ( a , b ) => a - b ) list2 . sort ( ( a , b ) => a - b ) var maxH = 0 , p1 = 0 , maxV = 0 , p2 = 0 ;"}
{"text":"Find maximum difference of neighbors of list1","code":"for ( var j = 0 ; j < s1 . size ; j ++ ) { maxH = Math . max ( maxH , list1 [ j ] - p1 ) ; p1 = list1 [ j ] ; }"}
{"text":"Find max difference of neighbors of list2","code":"for ( var j = 0 ; j < s2 . size ; j ++ ) { maxV = Math . max ( maxV , list2 [ j ] - p2 ) ; p2 = list2 [ j ] ; }"}
{"text":"Print largest volume","code":"document . write ( maxV * maxH ) ; }"}
{"text":"Given value of N & M","code":"var N = 3 , M = 3 ;"}
{"text":"Given arrays","code":"var H = [ 2 ] ; var V = [ 2 ] ; var h = H . length ; var v = V . length ;"}
{"text":"Function call to find the largest area when a series of horizontal & vertical bars are removed","code":"largestArea ( N , M , H , V , h , v ) ;"}
{"text":"Function to check if array , A can be converted into sorted array by swapping ( A [ i ] , A [ j ] ) if B [ i ] not equal to B [ j ]","code":"function checkifSorted ( A , B , N ) {"}
{"text":"Stores if array A is sorted in descending order or not","code":"var flag = false ;"}
{"text":"Traverse the array A","code":"for ( i = 0 ; i < N - 1 ; i ++ ) {"}
{"text":"If A [ i ] is greater than A [ i + 1 ]","code":"if ( A [ i ] > A [ i + 1 ] ) {"}
{"text":"Update flag","code":"flag = true ; break ; } }"}
{"text":"If array is sorted in ascending order","code":"if ( ! flag ) { return true ; }"}
{"text":"count = 2 : Check if 0 s and 1 s both present in the B","code":"var count = 0 ;"}
{"text":"Traverse the array","code":"for ( i = 0 ; i < N ; i ++ ) {"}
{"text":"If current element is 0","code":"if ( B [ i ] == 0 ) {"}
{"text":"Update count","code":"count ++ ; break ; } }"}
{"text":"Traverse the array B","code":"for ( i = 0 ; i < N ; i ++ ) {"}
{"text":"If current element is 1","code":"if ( B [ i ] == 1 ) { count ++ ; break ; } }"}
{"text":"If both 0 s and 1 s are present in the array","code":"if ( count == 2 ) { return true ; } return false ; }"}
{"text":"Input array A","code":"var A = [ 3 , 1 , 2 ] ;"}
{"text":"Input array B","code":"var B = [ 0 , 1 , 1 ] ; var N = A . length ;"}
{"text":"Function call","code":"var check = checkifSorted ( A , B , N ) ;"}
{"text":"If true , print YES","code":"if ( check ) { document . write ( \" \" ) ; }"}
{"text":"Else print NO","code":"else { document . write ( \" \" ) ; }"}
{"text":"Function to find the minimum number of steps to make A > B","code":"function minSteps ( A , B , M , N ) { if ( A [ 0 ] > B [ 0 ] ) return 0 ; if ( B [ 0 ] > A [ 0 ] ) { return 1 ; }"}
{"text":"If all character are same and M <= N","code":"if ( M <= N && A [ 0 ] == B [ 0 ] && count ( A , A [ 0 ] ) == M && count ( B , B [ 0 ] ) == N ) return - 1 ;"}
{"text":"If there lies any character in B which is greater than B [ 0 ]","code":"for ( var i = 1 ; i < N ; i ++ ) { if ( B [ i ] > B [ 0 ] ) return 1 ; }"}
{"text":"If there lies any character in A which is smaller than A [ 0 ]","code":"for ( var i = 1 ; i < M ; i ++ ) { if ( A [ i ] < A [ 0 ] ) return 1 ; }"}
{"text":"If there lies a character which is in A and greater than A [ 0 ]","code":"for ( var i = 1 ; i < M ; i ++ ) { if ( A [ i ] > A [ 0 ] ) { swap ( A , i , B , 0 ) ; swap ( A , 0 , B , 0 ) ; return 2 ; } }"}
{"text":"If there lies a character which is in B and less than B [ 0 ]","code":"for ( var i = 1 ; i < N ; i ++ ) { if ( B [ i ] < B [ 0 ] ) { swap ( A , 0 , B , i ) ; swap ( A , 0 , B , 0 ) ; return 2 ; } }"}
{"text":"Otherwise","code":"return 0 ; } function count ( a , c ) { count = 0 ; for ( var i = 0 ; i < a . length ; i ++ ) if ( a [ i ] == c ) count ++ ; return count ; } function swap ( s1 , index1 , s2 , index2 ) { var c = s1 [ index1 ] ; s1 [ index1 ] = s2 [ index2 ] ; s2 [ index2 ] = c ; }"}
{"text":"Driver function","code":"var A = \" \" ; var B = \" \" ; var M = A . length ; var N = B . length ; document . write ( minSteps ( A , B , M , N ) ) ;"}
{"text":"JavaScript Program to implement the above approach","code":"var maxN = 201 ;"}
{"text":"Variables which represent the size of the array","code":"var n1 , n2 , n3 ;"}
{"text":"Stores the results","code":"var dp = Array . from ( Array ( maxN ) , ( ) => Array ( maxN ) ) ; for ( var i = 0 ; i < maxN ; i ++ ) for ( var j = 0 ; j < maxN ; j ++ ) dp [ i ] [ j ] = new Array ( maxN ) . fill ( - 1 ) ;"}
{"text":"Function to return the maximum possible sum","code":"function getMaxSum ( i , j , k , arr1 , arr2 , arr3 ) {"}
{"text":"Stores the count of arrays processed","code":"var cnt = 0 ; if ( i >= n1 ) cnt ++ ; if ( j >= n2 ) cnt ++ ; if ( k >= n3 ) cnt ++ ;"}
{"text":"If more than two arrays have been processed","code":"if ( cnt >= 2 ) return 0 ;"}
{"text":"If an already computed subproblem occurred","code":"if ( dp [ i ] [ j ] [ k ] != - 1 ) return dp [ i ] [ j ] [ k ] ; var ans = 0 ;"}
{"text":"Explore all the possible pairs","code":"if ( i < n1 && j < n2 )"}
{"text":"Recursive function call","code":"ans = Math . max ( ans , getMaxSum ( i + 1 , j + 1 , k , arr1 , arr2 , arr3 ) + arr1 [ i ] * arr2 [ j ] ) ; if ( i < n1 && k < n3 ) ans = Math . max ( ans , getMaxSum ( i + 1 , j , k + 1 , arr1 , arr2 , arr3 ) + arr1 [ i ] * arr3 [ k ] ) ; if ( j < n2 && k < n3 ) ans = Math . max ( ans , getMaxSum ( i , j + 1 , k + 1 , arr1 , arr2 , arr3 ) + arr2 [ j ] * arr3 [ k ] ) ;"}
{"text":"Memoize the maximum","code":"dp [ i ] [ j ] [ k ] = ans ;"}
{"text":"Returning the value","code":"return dp [ i ] [ j ] [ k ] ; }"}
{"text":"Function to return the maximum sum of products of pairs possible","code":"function maxProductSum ( arr1 , arr2 , arr3 ) {"}
{"text":"Sort the arrays in descending order","code":"arr1 . sort ( ) ; arr1 . reverse ( ) ; arr2 . sort ( ) ; arr2 . reverse ( ) ; arr3 . sort ( ) ; arr3 . reverse ( ) ; return getMaxSum ( 0 , 0 , 0 , arr1 , arr2 , arr3 ) ; }"}
{"text":"Driver Code","code":"n1 = 2 ; var arr1 = [ 3 , 5 ] ; n2 = 2 ; var arr2 = [ 2 , 1 ] ; n3 = 3 ; var arr3 = [ 4 , 3 , 5 ] ; document . write ( maxProductSum ( arr1 , arr2 , arr3 ) ) ;"}
{"text":"Function to find lexicographically largest triplet that forms a triangle in the given array","code":"function findTriplet ( arr , N ) {"}
{"text":"Sort the array","code":"arr . sort ( ( a , b ) => a - b ) ; var flag = 0 , i ;"}
{"text":"Iterate from the end of the array","code":"for ( i = N - 1 ; i - 2 >= 0 ; i -- ) {"}
{"text":"If the triplet forms a triangle","code":"if ( arr [ i - 2 ] + arr [ i - 1 ] > arr [ i ] ) { flag = 1 ; break ; } }"}
{"text":"If triplet found","code":"if ( flag ) {"}
{"text":"Print the triplet","code":"document . write ( arr [ i - 2 ] + \" \" + arr [ i - 1 ] + \" \" + arr [ i ] + \" \" ) ; }"}
{"text":"Otherwise","code":"else { document . write ( - 1 + \" \" ) ; } }"}
{"text":"Driver Code","code":"var arr = [ 4 , 2 , 10 , 3 , 5 ] ; var N = arr . length ; findTriplet ( arr , N ) ;"}
{"text":"Function to return the count of all pairs having minimal absolute difference","code":"function numberofpairs ( arr , N ) {"}
{"text":"Stores the count of pairs","code":"let answer = 0 ;"}
{"text":"Sort the array","code":"arr . sort ( ) ;"}
{"text":"Stores the minimum difference between adjacent pairs","code":"let minDiff = Number . MAX_VALUE ; for ( let i = 0 ; i < N - 1 ; i ++ )"}
{"text":"Update the minimum difference between pairs","code":"minDiff = Math . min ( minDiff , arr [ i + 1 ] - arr [ i ] ) ; for ( let i = 0 ; i < N - 1 ; i ++ ) { if ( arr [ i + 1 ] - arr [ i ] == minDiff )"}
{"text":"Increase count of pairs with difference equal to that of minimum difference","code":"answer ++ ; }"}
{"text":"Return the final count","code":"return answer ; }"}
{"text":"Given array arr [ ]","code":"let arr = [ 4 , 2 , 1 , 3 ] ; let N = arr . length ;"}
{"text":"Function Call","code":"document . write ( numberofpairs ( arr , N ) ) ;"}
{"text":"Initialise maximum possible length of subsequence","code":"let max_length = 0 ;"}
{"text":"Store elements to compare max_length with its size and change the value of max_length accordingly","code":"let store = [ ] ;"}
{"text":"Store the elements of the longest subsequence","code":"let ans = [ ] ;"}
{"text":"Function to find the length of longest subsequence","code":"function find_max_length ( arr , index , sum , k ) { sum = sum + arr [ index ] ; store . push ( arr [ index ] ) ; if ( sum == k ) { if ( max_length < store . length ) {"}
{"text":"Update max_length","code":"max_length = store . length ;"}
{"text":"Store the subsequence elements","code":"ans = store ; } } for ( let i = index + 1 ; i < arr . length ; i ++ ) { if ( sum + arr [ i ] <= k ) {"}
{"text":"Recursively proceed with obtained sum","code":"find_max_length ( arr , i , sum , k ) ;"}
{"text":"poping elements from back of vector store","code":"store . pop ( ) ; }"}
{"text":"if sum > 0 then we don 't  required thatsubsequence  so return and continue  with earlier elements","code":"else return ; } return ; } function longestSubsequence ( arr , n , k ) {"}
{"text":"Sort the given array","code":"arr . sort ( function ( a , b ) { return a - b ; } ) ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"If max_length is already greater than or equal than remaining length","code":"if ( max_length >= n - i ) break ; store = [ ] ; find_max_length ( arr , i , 0 , k ) ; } return max_length ; }"}
{"text":"Driver code","code":"let arr = [ - 3 , 0 , 1 , 1 , 2 ] ; let n = arr . length ; let k = 1 ; document . write ( longestSubsequence ( arr , n , k ) ) ;"}
{"text":"Function to sort array","code":"function sortArray ( A , N ) {"}
{"text":"The three indices that has to be chosen","code":"let x = 0 , y = 0 , z = 0 ;"}
{"text":"Check if possible to sort array","code":"if ( N % 4 == 0 N % 4 == 1 ) {"}
{"text":"Swapping to bring element at required position Bringing at least one element at correct position","code":"for ( let i = 0 ; i < N \/ 2 ; i ++ ) { x = i ; if ( i % 2 == 0 ) { y = N - i - 2 ; z = N - i - 1 ; }"}
{"text":"Tracing changes in array","code":"A [ z ] = A [ y ] ; A [ y ] = A [ x ] ; A [ x ] = x + 1 ; }"}
{"text":"Print the sorted array","code":"document . write ( \" \" ) ; for ( let i = 0 ; i < N ; i ++ ) document . write ( A [ i ] + \" \" ) ; }"}
{"text":"If not possible to sort","code":"else { document . write ( \" \" ) ; } }"}
{"text":"Driver Code","code":"let A = [ 5 , 4 , 3 , 2 , 1 ] ; let N = A . length ; sortArray ( A , N ) ;"}
{"text":"Function to return K such that changing all elements greater than K to K will make array sum N otherwise return - 1","code":"function findK ( arr , size , N ) {"}
{"text":"Sorting the array in increasing order","code":"arr . sort ( function ( a , b ) { return a - b } ) ; let temp_sum = 0 ;"}
{"text":"Loop through all the elements of the array","code":"for ( let i = 0 ; i < size ; i ++ ) { temp_sum += arr [ i ] ;"}
{"text":"Checking if sum of array equals N","code":"if ( N - temp_sum == arr [ i ] * ( size - i - 1 ) ) { return arr [ i ] ; } } return - 1 ; }"}
{"text":"Driver code","code":"let arr = [ 3 , 1 , 10 , 4 , 8 ] ; let size = arr . length ; let N = 16 ; document . write ( findK ( arr , size , N ) ) ;"}
{"text":"Function that returns true if there exists a triplet with sum x","code":"function existsTriplet ( a , b , c , x , l1 , l2 , l3 ) {"}
{"text":"Sorting arrays such that a [ ] represents smallest array","code":"if ( l2 <= l1 && l2 <= l3 ) { temp = l1 ; l1 = l2 ; l2 = temp ; temp = a ; a = b ; b = temp ; } else if ( l3 <= l1 && l3 <= l2 ) { temp = l1 ; l1 = l3 ; l3 = temp ; temp = a ; a = c ; c = temp ; }"}
{"text":"Iterating the smallest array","code":"for ( var i = 0 ; i < l1 ; i ++ ) {"}
{"text":"Two pointers on second and third array","code":"var j = 0 , k = l3 - 1 ; while ( j < l2 && k >= 0 ) {"}
{"text":"If a valid triplet is found","code":"if ( a [ i ] + b [ j ] + c [ k ] == x ) return true ; if ( a [ i ] + b [ j ] + c [ k ] < x ) j ++ ; else k -- ; } } return false ; }"}
{"text":"Driver code","code":"var a = [ 2 , 7 , 8 , 10 , 15 ] ; var b = [ 1 , 6 , 7 , 8 ] ; var c = [ 4 , 5 , 5 ] ; var l1 = a . length ; var l2 = b . length ; var l3 = c . length ; var x = 14 ; if ( existsTriplet ( a , b , c , x , l1 , l2 , l3 ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Utility function to print the contents of an array","code":"function printArr ( arr , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( arr [ i ] ) ; }"}
{"text":"A comparison function that return true if ' AB ' is smaller than ' BA ' when we concatenate two numbers ' A ' and ' B ' For example , it will return true if we pass 12 and 24 as arguments . This function will be used by sort ( ) function","code":"function compare ( num1 , num2 ) {"}
{"text":"Convert first number to string format","code":"let A = num1 . toString ( ) ;"}
{"text":"Convert second number to string format","code":"let B = num2 . toString ( ) ;"}
{"text":"Check if ' AB ' is smaller or ' BA ' and return bool value since comparison operator ' < = ' returns true or false","code":"return ( A + B ) . localeCompare ( B + A ) ; }"}
{"text":"Function to print the arrangement with the smallest value","code":"function printSmallest ( N , arr ) {"}
{"text":"If we pass the name of the comparison function it will sort the array according to the compare function Sort using compare function which is defined above","code":"for ( let i = 0 ; i < N ; i ++ ) { for ( let j = i + 1 ; j < N ; j ++ ) { if ( compare ( arr [ i ] , arr [ j ] ) > 0 ) { let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } }"}
{"text":"Print the sorted array","code":"printArr ( arr , N ) ; }"}
{"text":"Driver code","code":"let arr = [ 5 , 6 , 2 , 9 , 21 , 1 ] ; let N = arr . length ; printSmallest ( N , arr ) ;"}
{"text":"Javascript program for modifying Selection Sort so that it becomes stable .","code":"function stableSelectionSort ( a , n ) {"}
{"text":"Iterate through array elements","code":"for ( let i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Find minimum element from arr [ i ] to arr [ n - 1 ] .","code":"let min = i ; for ( let j = i + 1 ; j < n ; j ++ ) if ( a [ min ] > a [ j ] ) min = j ;"}
{"text":"Move minimum element at current i .","code":"let key = a [ min ] ; while ( min > i ) { a [ min ] = a [ min - 1 ] ; min -- ; } a [ i ] = key ; } } function prletArray ( a , n ) { for ( let i = 0 ; i < n ; i ++ ) document . write ( a [ i ] + \" \" ) ; document . write ( \" \" ) ; }"}
{"text":"driver function","code":"let a = [ 4 , 5 , 3 , 2 , 4 , 1 ] ; let n = a . length ; stableSelectionSort ( a , n ) ; prletArray ( a , n ) ;"}
{"text":"Check whether any permutation exists which satisfy the condition .","code":"function isPossible ( a , b , n , k ) {"}
{"text":"Sort the array a [ ] in decreasing order .","code":"a . sort ( function ( a , b ) { return a - b } ) ;"}
{"text":"Sort the array b [ ] in increasing order .","code":"b . reverse ( ) ;"}
{"text":"Checking condition on each index .","code":"for ( let i = 0 ; i < n ; i ++ ) if ( a [ i ] + b [ i ] < k ) return false ; return true ; }"}
{"text":"Driven Program","code":"let a = [ 2 , 1 , 3 ] ; let b = [ 7 , 8 , 9 ] ; let k = 10 ; let n = a . length ; if ( isPossible ( a , b , n , k ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Function to check if it is possible to reach the end of the binary string using the given jumps","code":"const canReach = ( s , L , R ) => {"}
{"text":"Stores the DP states","code":"let dp = new Array ( s . length ) . fill ( 1 ) ;"}
{"text":"Stores count of indices from which it is possible to reach index i","code":"let pre = 0 ;"}
{"text":"Traverse the given string","code":"for ( let i = 1 ; i < s . length ; i ++ ) {"}
{"text":"Update the values of pre accordingly","code":"if ( i >= L ) { pre += dp [ i - L ] ; }"}
{"text":"If the jump size is out of the range [ L , R ]","code":"if ( i > R ) { pre -= dp [ i - R - 1 ] ; } dp [ i ] = ( pre > 0 ) && ( s [ i ] == ' ' ) ; }"}
{"text":"Return answer","code":"return dp [ s . length - 1 ] ; }"}
{"text":"Driver Code","code":"let S = \" \" ; let L = 2 , R = 3 ; if ( canReach ( S , L , R ) ) document . write ( \" \" ) ; else document . write ( \" \" ) ;"}
{"text":"Recursive function to find all the possible breaking of arrays into subarrays and find the maximum Bitwise XOR","code":"function maxXORUtil ( arr , N , xrr , orr ) {"}
{"text":"If the value of N is 0","code":"if ( N == 0 ) return xrr ^ orr ;"}
{"text":"Stores the result if the new group is formed with the first element as arr [ i ]","code":"let x = maxXORUtil ( arr , N - 1 , xrr ^ orr , arr [ N - 1 ] ) ;"}
{"text":"Stores if the result if the arr [ i ] is included in the last group","code":"let y = maxXORUtil ( arr , N - 1 , xrr , orr arr [ N - 1 ] ) ;"}
{"text":"Returns the maximum of x and y","code":"return Math . max ( x , y ) ; }"}
{"text":"Function to find the maximum possible Bitwise XOR of all possible values of the array after breaking the arrays into subarrays","code":"function maximumXOR ( arr , N ) {"}
{"text":"Return the result","code":"return maxXORUtil ( arr , N , 0 , 0 ) ; }"}
{"text":"Driver code","code":"let arr = [ 1 , 5 , 7 ] ; let N = arr . length ; document . write ( maximumXOR ( arr , N ) ) ;"}
{"text":"Javascript program to implement the above approach","code":"let N = 100000 + 5 ;"}
{"text":"Keep track of visited nodes","code":"let visited = new Array ( N ) ; visited . fill ( 0 ) ;"}
{"text":"Function to construct a tree such that there are no two adjacent nodes with the same weight","code":"function construct_tree ( weights , n ) { let minimum = Number . MAX_VALUE ; let maximum = Number . MIN_VALUE ; for ( let i = 0 ; i < weights . length ; i ++ ) { minimum = Math . min ( minimum , weights [ i ] ) ; maximum = Math . max ( maximum , weights [ i ] ) ; }"}
{"text":"If minimum and maximum elements are equal , i . e . array contains one distinct element","code":"if ( minimum == maximum ) {"}
{"text":"Tree cannot be constructed","code":"document . write ( \" \" ) ; return ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"Tree can be constructed","code":"document . write ( \" \" + \" \" ) ; }"}
{"text":"Choose weights [ 0 ] as root","code":"let root = weights [ 0 ] ;"}
{"text":"First Node is visited","code":"visited [ 1 ] = 1 ;"}
{"text":"Traverse the array","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Otherwise , make an edge","code":"if ( weights [ i ] != root && visited [ i + 1 ] == 0 ) { document . write ( 1 + \" \" + ( i + 1 ) + \" \" ) ;"}
{"text":"Mark this node as visited","code":"visited [ i + 1 ] = 1 ; } }"}
{"text":"Find a weight not same as the root & make edges with that node","code":"let notroot = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( weights [ i ] != root ) { notroot = i + 1 ; break ; } }"}
{"text":"Join non - roots with remaining nodes","code":"for ( let i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if current node ' s \u2581 weight \u2581 \u2581 is \u2581 same \u2581 as \u2581 root \u2581 node ' s weight and if it is not visited or not","code":"if ( weights [ i ] == root && visited [ i + 1 ] == 0 ) { document . write ( notroot + \" \" + ( i + 1 ) + \" \" ) ; visited [ i + 1 ] = 1 ; } } }"}
{"text":"Driver code","code":"let weights = [ 1 , 2 , 1 , 2 , 5 ] ; let n = weights . length ;"}
{"text":"Function Call","code":"construct_tree ( weights , n ) ;"}
{"text":"Function to find minimum cost to convert given String into String of K length same subString","code":"function minCost ( s , k ) {"}
{"text":"Stores length of String","code":"var n = s . length ;"}
{"text":"Stores the minimum cost","code":"var ans = 0 ;"}
{"text":"Traverse left subString of k length","code":"for ( var i = 0 ; i < k ; i ++ ) {"}
{"text":"Stores the frequency","code":"var a = new Array ( 26 ) . fill ( 0 ) ; for ( var j = i ; j < n ; j += k ) { a [ s [ j ] . charCodeAt ( 0 ) - ' ' . charCodeAt ( 0 ) ] ++ ; }"}
{"text":"Stores minimum cost for sequence of S [ i ] % k indices","code":"var min_cost = 1000000000 ;"}
{"text":"Check for optimal character","code":"for ( var ch = 0 ; ch < 26 ; ch ++ ) { var cost = 0 ;"}
{"text":"Find sum of distance ' a ' + ch from character S [ i ] % k indices","code":"for ( var tr = 0 ; tr < 26 ; tr ++ ) cost += Math . abs ( ch - tr ) * a [ tr ] ;"}
{"text":"Choose minimum cost for each index i","code":"min_cost = Math . min ( min_cost , cost ) ; }"}
{"text":"Increment ans","code":"ans += min_cost ; }"}
{"text":"Print minimum cost to convert String","code":"document . write ( ans ) ; }"}
{"text":"Given String S","code":"var S = \" \" ; var K = 3 ;"}
{"text":"Function Call","code":"minCost ( S , K ) ;"}
{"text":"Function to split the first N natural numbers into two sets having minimum absolute difference of their sums","code":"function minAbsDiff ( N ) { if ( N % 4 == 0 N % 4 == 3 ) { return 0 ; } return 1 ; }"}
{"text":"Driver Code","code":"var N = 6 ; document . write ( minAbsDiff ( N ) ) ;"}
{"text":"Javascript Program to implement the above approach","code":"let N = 10000 ;"}
{"text":"Adjacency list to store edges","code":"let adj = new Array ( N ) ; let used = new Array ( N ) ; used . fill ( 0 ) ; let max_matching = 0 ;"}
{"text":"Add an edge between U and V in tree","code":"function AddEdge ( u , v ) {"}
{"text":"Edge from u to v","code":"adj [ u ] . push ( v ) ;"}
{"text":"Edge from V to U","code":"adj [ v ] . push ( u ) ; }"}
{"text":"Function that finds the maximum matching of the DFS","code":"function Matching_dfs ( u , p ) { for ( let i = 0 ; i < adj [ u ] . length ; i ++ ) {"}
{"text":"Go further as we are not allowed to go towards its parent","code":"if ( adj [ u ] [ i ] != p ) { Matching_dfs ( adj [ u ] [ i ] , u ) ; } }"}
{"text":"If U and its parent P is not taken then we must take & mark them as taken","code":"if ( used [ u ] == 0 && used [ p ] == 0 && p != 0 ) {"}
{"text":"Increment size of edge set","code":"max_matching ++ ; used [ u ] = used [ p ] = 1 ; } }"}
{"text":"Function to find the maximum matching in a graph","code":"function maxMatching ( ) {"}
{"text":"Taking 1 as a root of the tree","code":"Matching_dfs ( 1 , 0 ) ;"}
{"text":"Print maximum Matching","code":"document . write ( max_matching + \" \" ) ; }"}
{"text":"Driver Code","code":"for ( let i = 0 ; i < adj . length ; i ++ ) adj [ i ] = [ ] ;"}
{"text":"Joining edge between two nodes in tree","code":"AddEdge ( 1 , 2 ) ; AddEdge ( 1 , 3 ) ; AddEdge ( 3 , 4 ) ; AddEdge ( 3 , 5 ) ;"}
{"text":"Function call","code":"maxMatching ( ) ;"}
{"text":"Function to calculate and return the minimum cost required to swap two arrays","code":"function getMinCost ( A , B , N ) { let mini = Number . MAX_VALUE ; for ( let i = 0 ; i < N ; i ++ ) { mini = Math . min ( mini , Math . min ( A [ i ] , B [ i ] ) ) ; }"}
{"text":"Return the total minimum cost","code":"return mini * ( 2 * N - 1 ) ; }"}
{"text":"Driver Code","code":"let N = 3 ; let A = [ 1 , 4 , 2 ] ; let B = [ 10 , 6 , 12 ] ; document . write ( getMinCost ( A , B , N ) ) ;"}
{"text":"Function to print the values stored in vector arr","code":"function printVector ( arr ) { if ( arr . length != 1 ) {"}
{"text":"Traverse the vector arr","code":"for ( var i = 0 ; i < arr . length ; i ++ ) { document . write ( arr [ i ] + \" \" ) ; } document . write ( \" \" ) ; } }"}
{"text":"Recursive function to print different ways in which N can be written as a sum of at 2 or more positive integers","code":"function findWays ( arr , i , n ) {"}
{"text":"If n is zero then print this ways of breaking numbers","code":"if ( n == 0 ) printVector ( arr ) ;"}
{"text":"Start from previous element in the representation till n","code":"for ( var j = i ; j <= n ; j ++ ) {"}
{"text":"Include current element from representation","code":"arr . push ( j ) ;"}
{"text":"Call function again with reduced sum","code":"findWays ( arr , j , n - j ) ;"}
{"text":"Backtrack to remove current element from representation","code":"arr . pop ( ) ; } }"}
{"text":"Given sum N","code":"var n = 4 ;"}
{"text":"To store the representation of breaking N","code":"var arr = [ ] ;"}
{"text":"Function Call","code":"findWays ( arr , 1 , n ) ;"}
{"text":"Function to count maximum subsequence","code":"function Maximum_subsequence ( A , N ) {"}
{"text":"Stores the frequency of array elements","code":"var frequency = new Map ( ) ;"}
{"text":"Stores max frequency","code":"var max_freq = 0 ; for ( var i = 0 ; i < N ; i ++ ) {"}
{"text":"Update frequency of A [ i ]","code":"if ( frequency . has ( A [ i ] ) ) frequency . set ( A [ i ] , frequency . get ( A [ i ] ) + 1 ) else frequency . set ( A [ i ] , 1 ) ; } frequency . forEach ( ( value , key ) => {"}
{"text":"Update max subsequence","code":"if ( value > max_freq ) { max_freq = value ; } } ) ;"}
{"text":"Print the count","code":"document . write ( max_freq ) ; }"}
{"text":"Driver Code","code":"var arr = [ 5 , 2 , 6 , 5 , 2 , 4 , 5 , 2 ] ; var N = arr . length ; Maximum_subsequence ( arr , N ) ;"}
{"text":"Function to print the arrangement of characters","code":"function DivideString ( s , n , k ) { var i , c = 0 , no = 1 ; var c1 = 0 , c2 = 0 ;"}
{"text":"Stores frequency of characters","code":"var fr = new Array ( 26 ) . fill ( 0 ) ; var ans = [ ] ; for ( i = 0 ; i < n ; i ++ ) { fr [ s [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ] ++ ; } var ch = \" \" , ch1 = \" \" ; for ( i = 0 ; i < 26 ; i ++ ) {"}
{"text":"Count the character having frequency K","code":"if ( fr [ i ] === k ) { c ++ ; }"}
{"text":"Count the character having frequency greater than K and not equal to 2 K","code":"if ( fr [ i ] > k && fr [ i ] !== 2 * k ) { c1 ++ ; ch = String . fromCharCode ( i + \" \" . charCodeAt ( 0 ) ) ; } if ( fr [ i ] === 2 * k ) { c2 ++ ; ch1 = String . fromCharCode ( i + \" \" . charCodeAt ( 0 ) ) ; } } for ( i = 0 ; i < n ; i ++ ) ans . push ( \" \" ) ; var mp = { } ; if ( c % 2 === 0 c1 > 0 c2 > 0 ) { for ( i = 0 ; i < n ; i ++ ) {"}
{"text":"Case 1","code":"if ( fr [ s [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ] === k ) { if ( mp . hasOwnProperty ( s [ i ] ) ) { ans [ i ] = \" \" ; } else { if ( no <= parseInt ( c \/ 2 ) ) { ans [ i ] = \" \" ; no ++ ; mp [ s [ i ] ] = 1 ; } } } }"}
{"text":"Case 2","code":"if ( c % 2 === 1 && c1 > 0 ) { no = 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] === ch && no <= k ) { ans [ i ] = \" \" ; no ++ ; } } }"}
{"text":"Case 3","code":"if ( c % 2 === 1 && c1 === 0 ) { no = 1 ; var flag = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] === ch1 && no <= k ) { ans [ i ] = \" \" ; no ++ ; } if ( fr [ s [ i ] . charCodeAt ( 0 ) - \" \" . charCodeAt ( 0 ) ] === k && flag === 0 && ans [ i ] === \" \" ) { ans [ i ] = \" \" ; flag = 1 ; } } } document . write ( ans . join ( \" \" ) ) ; } else {"}
{"text":"If all cases fail","code":"document . write ( \" \" ) ; } }"}
{"text":"Driver code","code":"var S = \" \" ; var N = S . length ; var K = 1 ; DivideString ( S , N , K ) ;"}
{"text":"Function to check if two items can be selected from two different categories without exceeding the total price","code":"function check ( S , prices , type , n ) {"}
{"text":"Loop to choose two different pairs using two nested loops","code":"for ( let j = 0 ; j < n ; j ++ ) { for ( let k = j + 1 ; k < n ; k ++ ) {"}
{"text":"Condition to check if the price of these two elements is less than S","code":"if ( ( type [ j ] == 0 && type [ k ] == 1 ) || ( type [ j ] == 1 && type [ k ] == 0 ) ) { if ( prices [ j ] + prices [ k ] <= S ) { return \" \" ; } } } } return \" \" ; }"}
{"text":"Driver code","code":"let prices = [ 3 , 8 , 6 , 5 ] ; let type = [ 0 , 1 , 1 , 0 ] ; let S = 10 ; let n = 4 ;"}
{"text":"Function call","code":"document . write ( check ( S , prices , type , n ) ) ;"}
{"text":"Function to return the maximum sum of a + b satisfying the given condition","code":"function getLargestSum ( N ) {"}
{"text":"Initialize max_sum","code":"let max_sum = 0 ;"}
{"text":"Consider all possible pairs and check the sum divides product property","code":"for ( let i = 1 ; i * i <= N ; i ++ ) { for ( let j = i + 1 ; j * j <= N ; j ++ ) {"}
{"text":"To find the largest factor k","code":"let k = parseInt ( N \/ j , 10 ) ; let a = k * i ; let b = k * j ;"}
{"text":"Check if the product is divisible by the sum","code":"if ( a <= N && b <= N && a * b % ( a + b ) == 0 )"}
{"text":"Storing the maximum sum in the max_sum variable","code":"max_sum = Math . max ( max_sum , a + b ) ; } }"}
{"text":"Return the max_sum value","code":"return max_sum ; }"}
{"text":"Driver code","code":"let N = 25 ; let max_sum = getLargestSum ( N ) ; document . write ( max_sum + \" \" ) ;"}
{"text":"Function to return the encrypted String","code":"function encryptString ( str , n ) { let i = 0 , cnt = 0 ; let encryptedStr = \" \" ; while ( i < n ) {"}
{"text":"Number of times the current character will be repeated","code":"cnt = i + 1 ;"}
{"text":"Repeat the current character in the encrypted String","code":"while ( cnt -- > 0 ) encryptedStr += str [ i ] ; i ++ ; } return encryptedStr ; }"}
{"text":"Driver code","code":"let str = \" \" ; let n = str . length ; document . write ( encryptString ( str , n ) ) ;"}
{"text":"Function to return required minimum difference","code":"function minDiff ( n , x , A ) { var mn = A [ 0 ] , mx = A [ 0 ] ;"}
{"text":"finding minimum and maximum values","code":"for ( var i = 0 ; i < n ; ++ i ) { mn = Math . min ( mn , A [ i ] ) ; mx = Math . max ( mx , A [ i ] ) ; }"}
{"text":"returning minimum possible difference","code":"return Math . max ( 0 , mx - mn - 2 * x ) ; }"}
{"text":"Driver program","code":"var n = 3 , x = 3 ; var A = [ 1 , 3 , 6 ] ;"}
{"text":"function to return the answer","code":"document . write ( minDiff ( n , x , A ) ) ;"}
{"text":"Javascript Program to count swaps required to balance string","code":"function swapCount ( s ) { let chars = s . split ( ' ' ) ;"}
{"text":"stores the total number of Left and Right brackets encountered","code":"let countLeft = 0 , countRight = 0 ;"}
{"text":"swap stores the number of swaps required imbalance maintains the number of imbalance pair","code":"let swap = 0 , imbalance = 0 ; for ( let i = 0 ; i < chars . length ; i ++ ) { if ( chars [ i ] == ' ' ) {"}
{"text":"increment count of Left bracket","code":"countLeft ++ ; if ( imbalance > 0 ) {"}
{"text":"swaps count is last swap count + total number imbalanced brackets","code":"swap += imbalance ;"}
{"text":"imbalance decremented by 1 as it solved only one imbalance of Left and Right","code":"imbalance -- ; } } else if ( chars [ i ] == ' ' ) {"}
{"text":"increment count of Right bracket","code":"countRight ++ ;"}
{"text":"imbalance is reset to current difference between Left and Right brackets","code":"imbalance = ( countRight - countLeft ) ; } } return swap ; }"}
{"text":"Driver code","code":"let s = \" \" ; document . write ( swapCount ( s ) + \" \" ) ; s = \" \" ; document . write ( swapCount ( s ) ) ;"}
{"text":"Function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing","code":"function longestSubSequence ( A , N ) {"}
{"text":"dp [ i ] : Stores the longest subsequence upto i","code":"let dp = new Array ( N ) ; for ( let i = 0 ; i < N ; i ++ ) {"}
{"text":"Base case","code":"dp [ i ] = 1 ; for ( let j = 0 ; j < i ; j ++ ) {"}
{"text":"When the conditions hold","code":"if ( A [ j ] [ 0 ] < A [ i ] [ 0 ] && A [ j ] [ 1 ] > A [ i ] [ 1 ] ) { dp [ i ] = Math . max ( dp [ i ] , dp [ j ] + 1 ) ; } } }"}
{"text":"Finally , print the required answer","code":"document . write ( dp [ N - 1 ] + \" \" ) ; }"}
{"text":"Given Input","code":"let A = [ [ 1 , 2 ] , [ 2 , 2 ] , [ 3 , 1 ] ] ; let N = A . length ;"}
{"text":"Function Call","code":"longestSubSequence ( A , N ) ;"}
{"text":"Function to calculate the total number of ways to have sum N","code":"function findWays ( N , dp ) {"}
{"text":"Base Case","code":"if ( N == 0 ) { return 1 ; }"}
{"text":"Return already stored result","code":"if ( dp [ N ] != - 1 ) { return dp [ N ] ; } let cnt = 0 ;"}
{"text":"Recur for all 6 states","code":"for ( let i = 1 ; i <= 6 ; i ++ ) { if ( N - i >= 0 ) { cnt = cnt + findWays ( N - i , dp ) ; } }"}
{"text":"Return the result","code":"return dp [ N ] = cnt ; }"}
{"text":"Given sum N","code":"let N = 4 ;"}
{"text":"Initialize the dp array","code":"let dp = new Array ( N + 1 ) ; for ( let i = 0 ; i < dp . length ; i ++ ) dp [ i ] = - 1 ;"}
{"text":"Function Call","code":"document . write ( findWays ( N , dp ) ) ;"}
{"text":"Function to calculate the total number of ways to have sum N","code":"function findWays ( N ) {"}
{"text":"Initialize dp array","code":"let dp = new Array ( N + 1 ) ; dp [ 0 ] = 1 ;"}
{"text":"Iterate over all the possible intermediate values to reach N","code":"for ( let i = 1 ; i <= N ; i ++ ) { dp [ i ] = 0 ;"}
{"text":"Calculate the sum for all 6 faces","code":"for ( let j = 1 ; j <= 6 ; j ++ ) { if ( i - j >= 0 ) { dp [ i ] = dp [ i ] + dp [ i - j ] ; } } }"}
{"text":"Print the total number of ways","code":"document . write ( dp [ N ] ) ; }"}
{"text":"Given sum N","code":"let N = 4 ;"}
{"text":"Function call","code":"findWays ( N ) ;"}
{"text":"Javascript implementation to split the String into minimum number of parts such that each part is also present in the another String","code":"let INF = ( 1e9 + 9 ) ;"}
{"text":"Node of Trie","code":"class Node { constructor ( ) { } } function TrieNode ( ) { let temp = new Node ( ) ; temp . child = new Node ( 26 ) ; for ( let i = 0 ; i < 26 ; i ++ ) { temp . child [ i ] = null ; } return temp ; }"}
{"text":"Function to insert a node in the Trie Data Structure","code":"function insert ( idx , s , root ) { let temp = root ; for ( let i = idx ; i < s . length ; i ++ ) {"}
{"text":"Inserting every character from idx till end to String into trie","code":"if ( temp . child [ s [ i ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] == null )"}
{"text":"If there is no edge corresponding to the ith character , then make a new node","code":"temp . child [ s [ i ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] = new TrieNode ( ) ; temp = temp . child [ s [ i ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] ; } }"}
{"text":"Function to find the minimum number of parts such that each part is present into another String","code":"function minCuts ( S1 , S2 ) { let n1 = S1 . length ; let n2 = S2 . length ;"}
{"text":"Making a new trie","code":"let root = new TrieNode ( ) ; for ( let i = 0 ; i < n2 ; i ++ ) {"}
{"text":"Inserting every subString of S2 in trie","code":"insert ( i , S2 , root ) ; }"}
{"text":"Creating dp array and init it with infinity","code":"let dp = new Array ( n1 + 1 ) ; dp . fill ( INF ) ;"}
{"text":"Base Case","code":"dp [ 0 ] = 0 ; for ( let i = 0 ; i < n1 ; i ++ ) {"}
{"text":"Starting the cut from ith character taking temporary node pointer for checking whether the subString [ i , j ) is present in trie of not","code":"let temp = root ; for ( let j = i + 1 ; j <= n1 ; j ++ ) { if ( temp . child [ S1 [ j - 1 ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] == null )"}
{"text":"If the jth character is not in trie we 'll break","code":"break ;"}
{"text":"Updating the the ending of jth character with dp [ i ] + 1","code":"dp [ j ] = Math . min ( dp [ j ] , dp [ i ] + 1 ) ;"}
{"text":"Descending the trie pointer","code":"temp = temp . child [ S1 [ j - 1 ] . charCodeAt ( ) - ' ' . charCodeAt ( ) ] ; } }"}
{"text":"Answer not possible","code":"if ( dp [ n1 ] >= INF ) return - 1 ; else return dp [ n1 ] ; }"}
{"text":"Driver Code","code":"let S1 = \" \" ; let S2 = \" \" ; document . write ( minCuts ( S1 , S2 ) ) ;"}
{"text":"Function to find the largest square in the matrix such that it contains atmost K 1 's","code":"function largestSquare ( matrix , R , C , q_i , q_j , K , Q ) { let countDP = new Array ( R ) ; for ( let i = 0 ; i < R ; i ++ ) { countDP [ i ] = new Array ( C ) ; for ( let j = 0 ; j < C ; j ++ ) countDP [ i ] [ j ] = 0 ; }"}
{"text":"Precomputation of the countDP prefix sum of the matrix","code":"countDP [ 0 ] [ 0 ] = matrix [ 0 ] [ 0 ] ; for ( let i = 1 ; i < R ; i ++ ) countDP [ i ] [ 0 ] = countDP [ i - 1 ] [ 0 ] + matrix [ i ] [ 0 ] ; for ( let j = 1 ; j < C ; j ++ ) countDP [ 0 ] [ j ] = countDP [ 0 ] [ j - 1 ] + matrix [ 0 ] [ j ] ; for ( let i = 1 ; i < R ; i ++ ) for ( let j = 1 ; j < C ; j ++ ) countDP [ i ] [ j ] = matrix [ i ] [ j ] + countDP [ i - 1 ] [ j ] + countDP [ i ] [ j - 1 ] - countDP [ i - 1 ] [ j - 1 ] ;"}
{"text":"Loop to solve each query","code":"for ( let q = 0 ; q < Q ; q ++ ) { let i = q_i [ q ] ; let j = q_j [ q ] ; let min_dist = Math . min ( Math . min ( i , j ) , Math . min ( R - i - 1 , C - j - 1 ) ) ; let ans = - 1 , l = 0 , u = min_dist ;"}
{"text":"Binary Search to the side which have atmost in K 1 's in square","code":"while ( l <= u ) { let mid = Math . floor ( ( l + u ) \/ 2 ) ; let x1 = i - mid , x2 = i + mid ; let y1 = j - mid , y2 = j + mid ;"}
{"text":"Count total number of 1 s in the sub square considered","code":"let count = countDP [ x2 ] [ y2 ] ; if ( x1 > 0 ) count -= countDP [ x1 - 1 ] [ y2 ] ; if ( y1 > 0 ) count -= countDP [ x2 ] [ y1 - 1 ] ; if ( x1 > 0 && y1 > 0 ) count += countDP [ x1 - 1 ] [ y1 - 1 ] ;"}
{"text":"If the count is less than or equals to the maximum move to right half","code":"if ( count <= K ) { ans = 2 * mid + 1 ; l = mid + 1 ; } else u = mid - 1 ; } document . write ( ans + \" \" ) ; } }"}
{"text":"Driver code","code":"let matrix = [ [ 1 , 0 , 1 , 0 , 0 ] , [ 1 , 0 , 1 , 1 , 1 ] , [ 1 , 1 , 1 , 1 , 1 ] , [ 1 , 0 , 0 , 1 , 0 ] ] ; let K = 9 , Q = 1 ; let q_i = [ 1 ] ; let q_j = [ 2 ] ; largestSquare ( matrix , 4 , 5 , q_i , q_j , K , Q ) ;"}
