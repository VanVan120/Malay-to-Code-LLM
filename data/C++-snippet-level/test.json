{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum sum after deletion","code":"int minSum ( int A [ ] , int N ) {"}
{"text":"Stores frequency of array elements","code":"map < int , int > mp ; int sum = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Calculate sum","code":"sum += A [ i ] ;"}
{"text":"Update frequency of the current element","code":"mp [ A [ i ] ] ++ ; }"}
{"text":"Stores the minimum sum required","code":"int minSum = INT_MAX ;"}
{"text":"Traverse map","code":"for ( auto it : mp ) {"}
{"text":"Find the minimum sum obtained","code":"minSum = min ( minSum , sum - ( it . first * it . second ) ) ; }"}
{"text":"Return minimum sum","code":"return minSum ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Input array","code":"int arr [ ] = { 4 , 5 , 6 , 6 } ;"}
{"text":"Size of array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << minSum ( arr , N ) << \" STRNEWLINE \" ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate maximum difference between adjacent elements excluding every array element once","code":"void maxAdjacent ( int * arr , int N ) { vector < int > res ;"}
{"text":"Traverse the array","code":"for ( int i = 1 ; i < N - 1 ; i ++ ) { int prev = arr [ 0 ] ;"}
{"text":"Stores the maximum diff","code":"int maxi = INT_MIN ;"}
{"text":"Check for maximum adjacent element","code":"for ( int j = 1 ; j < N ; j ++ ) {"}
{"text":"Exclude current element","code":"if ( i == j ) continue ;"}
{"text":"Update maximum difference","code":"maxi = max ( maxi , abs ( arr [ j ] - prev ) ) ;"}
{"text":"Update previous value","code":"prev = arr [ j ] ; }"}
{"text":"Append the result into a vector","code":"res . push_back ( maxi ) ; }"}
{"text":"Print the result","code":"for ( auto x : res ) cout << x << \" \u2581 \" ; cout << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 3 , 4 , 7 , 8 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; maxAdjacent ( arr , N ) ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the size of the array if the array initially contains a single element","code":"int findSize ( int N ) {"}
{"text":"Base case","code":"if ( N == 0 ) return 1 ; if ( N == 1 ) return 1 ; int Size = 2 * findSize ( N \/ 2 ) + 1 ;"}
{"text":"P \/ 2 -> findSize ( N \/ 2 ) P % 2 -> 1 P \/ 2 -> findSize ( N \/ 2 )","code":"return Size ; }"}
{"text":"Function to return the count of 1 s in the range [ L , R ]","code":"int CountOnes ( int N , int L , int R ) { if ( L > R ) { return 0 ; }"}
{"text":"Base Case","code":"if ( N <= 1 ) { return N ; } int ret = 0 ; int M = N \/ 2 ; int Siz_M = findSize ( M ) ;"}
{"text":"PART 1 -> N \/ 2 [ 1 , Siz_M ]","code":"if ( L <= Siz_M ) {"}
{"text":"Update the right end point of the range to min ( Siz_M , R )","code":"ret += CountOnes ( N \/ 2 , L , min ( Siz_M , R ) ) ; }"}
{"text":"PART 2 -> N % 2 [ SizM + 1 , Siz_M + 1 ]","code":"if ( L <= Siz_M + 1 && Siz_M + 1 <= R ) { ret += N % 2 ; }"}
{"text":"PART 3 -> N \/ 2 [ SizM + 2 , 2 * Siz_M - 1 ] Same as PART 1 Property of Symmetricity Shift the coordinates according to PART 1 Subtract ( Siz_M + 1 ) from both L , R","code":"if ( Siz_M + 1 < R ) { ret += CountOnes ( N \/ 2 , max ( 1 , L - Siz_M - 1 ) , R - Siz_M - 1 ) ; } return ret ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input","code":"int N = 7 , L = 2 , R = 5 ;"}
{"text":"Counts the number of 1 's in  the range [L, R]","code":"cout << CountOnes ( N , L , R ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if number is prime or not","code":"bool prime ( int n ) {"}
{"text":"As 1 is neither prime nor composite return false","code":"if ( n == 1 ) return false ;"}
{"text":"Check if it is divided by any number then it is not prime , return false","code":"for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; }"}
{"text":"Check if n is not divided by any number then it is prime and hence return true","code":"return true ; }"}
{"text":"Function to find the pair ( a , b ) such that sum is N & LCM is minimum","code":"void minDivisior ( int n ) {"}
{"text":"Check if the number is prime","code":"if ( prime ( n ) ) { cout << 1 << \" \u2581 \" << n - 1 ; }"}
{"text":"Now , if it is not prime then find the least divisior","code":"else { for ( int i = 2 ; i * i <= n ; i ++ ) {"}
{"text":"Check if divides n then it is a factor","code":"if ( n % i == 0 ) {"}
{"text":"Required output is a = n \/ i & b = n \/ i * ( n - 1 )","code":"cout << n \/ i << \" \u2581 \" << n \/ i * ( i - 1 ) ; break ; } } } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 4 ;"}
{"text":"Function call","code":"minDivisior ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"To store Landau 's function of the number","code":"int Landau = INT_MIN ;"}
{"text":"Function to return gcd of 2 numbers","code":"int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }"}
{"text":"Function to return LCM of two numbers","code":"int lcm ( int a , int b ) { return ( a * b ) \/ gcd ( a , b ) ; }"}
{"text":"Function to find max lcm value among all representations of n","code":"void findLCM ( vector < int > & arr ) { int nth_lcm = arr [ 0 ] ; for ( int i = 1 ; i < arr . size ( ) ; i ++ ) nth_lcm = lcm ( nth_lcm , arr [ i ] ) ;"}
{"text":"Calculate Landau 's value","code":"Landau = max ( Landau , nth_lcm ) ; }"}
{"text":"Recursive function to find different ways in which n can be written as sum of atleast one positive integers","code":"void findWays ( vector < int > & arr , int i , int n ) {"}
{"text":"Check if sum becomes n , consider this representation","code":"if ( n == 0 ) findLCM ( arr ) ;"}
{"text":"Start from previous element in the representation till n","code":"for ( int j = i ; j <= n ; j ++ ) {"}
{"text":"Include current element from representation","code":"arr . push_back ( j ) ;"}
{"text":"Call function again with reduced sum","code":"findWays ( arr , j , n - j ) ;"}
{"text":"Backtrack - remove current element from representation","code":"arr . pop_back ( ) ; } }"}
{"text":"Function to find the Landau 's function","code":"void Landau_function ( int n ) { vector < int > arr ;"}
{"text":"Using recurrence find different ways in which n can be written as a sum of atleast one + ve integers","code":"findWays ( arr , 1 , n ) ;"}
{"text":"Print the result","code":"cout << Landau ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given N","code":"int N = 4 ;"}
{"text":"Function Call","code":"Landau_function ( N ) ; return 0 ; }"}
{"text":"C ++ implementation to check the following expression for an integer N is valid or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if a number holds the condition ( N - 1 ) ! % N = N - 1","code":"bool isPrime ( int n ) {"}
{"text":"Corner cases","code":"if ( n == 1 ) return true ; if ( n <= 3 ) return true ;"}
{"text":"Number divisible by 2 or 3 are not prime","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ;"}
{"text":"Iterate from 5 and keep checking for prime","code":"for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function to check the expression for the value N","code":"void checkExpression ( int n ) { if ( isPrime ( n ) ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"Driver Program","code":"int main ( ) { int N = 3 ; checkExpression ( N ) ; return 0 ; }"}
{"text":"C ++ implementation to check if it is possible to split array into K subsets with odd sum","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if array can be split in required K subsets","code":"bool checkArray ( int n , int k , int arr [ ] ) {"}
{"text":"Store count of odd numbers","code":"int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if element is odd","code":"if ( arr [ i ] & 1 ) cnt += 1 ; }"}
{"text":"Check if split is possible","code":"if ( cnt >= k && cnt % 2 == k % 2 ) return true ; else return false ; }"}
{"text":"Driver Program","code":"int main ( ) { int arr [ ] = { 1 , 3 , 4 , 7 , 5 , 3 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 4 ; if ( checkArray ( n , k , arr ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation to compute the sum of division of all the possible pairs for the given array","code":"#include <bits\/stdc++.h> NEW_LINE #define ll  long long NEW_LINE using namespace std ;"}
{"text":"Function to compute the sum","code":"int func ( int arr [ ] , int n ) { double ans = 0 ; int maxx = 0 ; double freq [ 100005 ] = { 0 } ; int temp ;"}
{"text":"counting frequency of each term and finding maximum among it","code":"for ( int i = 0 ; i < n ; i ++ ) { temp = arr [ i ] ; freq [ temp ] ++ ; maxx = max ( maxx , temp ) ; }"}
{"text":"Making cumulative frequency","code":"for ( int i = 1 ; i <= maxx ; i ++ ) { freq [ i ] += freq [ i - 1 ] ; } for ( int i = 1 ; i <= maxx ; i ++ ) { if ( freq [ i ] ) { i = ( double ) i ; double j ; ll value = 0 ;"}
{"text":"Taking the ceil value","code":"double cur = ceil ( 0.5 * i ) - 1.0 ; for ( j = 1.5 ; ; j ++ ) { int val = min ( maxx , ( int ) ( ceil ( i * j ) - 1.0 ) ) ; int times = ( freq [ i ] - freq [ i - 1 ] ) , con = j - 0.5 ;"}
{"text":"nos . in [ ( n - 0.5 ) X , ( n + 0.5 ) X ) range will add n to the ans","code":"ans += times * con * ( freq [ ( int ) val ] - freq [ ( int ) cur ] ) ; cur = val ; if ( val == maxx ) break ; } } }"}
{"text":"Return the final result","code":"return ( ll ) ans ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << func ( arr , n ) << endl ; return 0 ; }"}
{"text":"C ++ program to find the count of elements to be inserted to make Array sum twice the XOR of Array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of elements that need to be inserted such that the sum of the elements of the array is twice the XOR of the array","code":"void insert_element ( int a [ ] , int n ) {"}
{"text":"Variable to store the Xor of all the elements","code":"int Xor = 0 ;"}
{"text":"Variable to store the sum of all elements","code":"int Sum = 0 ;"}
{"text":"Loop to find the Xor and the sum of the array","code":"for ( int i = 0 ; i < n ; i ++ ) { Xor ^= a [ i ] ; Sum += a [ i ] ; }"}
{"text":"If sum = 2 * Xor","code":"if ( Sum == 2 * Xor ) {"}
{"text":"No need to insert more elements","code":"cout << \"0\" << endl ; return ; }"}
{"text":"We insert one more element which is Sum","code":"if ( Xor == 0 ) { cout << \"1\" << endl ; cout << Sum << endl ; return ; }"}
{"text":"We insert two more elements Sum + Xor and Xor .","code":"int num1 = Sum + Xor ; int num2 = Xor ;"}
{"text":"Print the number of elements inserted in the array","code":"cout << \"2\" ;"}
{"text":"Print the elements that are inserted in the array","code":"cout << num1 << \" \u2581 \" << num2 << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 1 , 2 , 3 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; insert_element ( a , n ) ; }"}
{"text":"C ++ program to check if roots of a Quadratic Equation are reciprocal of each other or not","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check if the roots of a quadratic equation are reciprocal of each other or not","code":"void checkSolution ( int a , int b , int c ) { if ( a == c ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"Driver code","code":"int main ( ) { int a = 2 , b = 0 , c = 2 ; checkSolution ( a , b , c ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include \" bits \/ stdc + + . h \" NEW_LINE using namespace std ;"}
{"text":"Function check whether x is a perfect square or not","code":"bool isPerfectSquare ( long double x ) {"}
{"text":"Find floating point value of square root of x .","code":"long double sr = sqrt ( x ) ;"}
{"text":"If square root is an integer","code":"return ( ( sr - floor ( sr ) ) == 0 ) ; }"}
{"text":"Function to check Sunny Number","code":"void checkSunnyNumber ( int N ) {"}
{"text":"Check if ( N + 1 ) is a perfect square or not","code":"if ( isPerfectSquare ( N + 1 ) ) { cout << \" Yes STRNEWLINE \" ; }"}
{"text":"If ( N + 1 ) is not a perfect square","code":"else { cout << \" No STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Number","code":"int N = 8 ;"}
{"text":"Function call","code":"checkSunnyNumber ( N ) ; return 0 ; }"}
{"text":"C ++ program to count the numbers which can convert N to 1 using the given operation","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the numbers which can convert N to 1 using the given operation","code":"int countValues ( int n ) { int answer = 0 ;"}
{"text":"Iterate through all the integers","code":"for ( int i = 2 ; i <= n ; i ++ ) { int k = n ;"}
{"text":"Check if N can be converted to 1","code":"while ( k >= i ) { if ( k % i == 0 ) k \/= i ; else k -= i ; }"}
{"text":"Incrementing the count if it can be converted","code":"if ( k == 1 ) answer ++ ; } return answer ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 6 ; cout << countValues ( N ) ; return 0 ; }"}
{"text":"C ++ program to find K numbers with sum equal to N and the sum of their squares maximized","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that prints the required K numbers","code":"void printKNumbers ( int N , int K ) {"}
{"text":"Print 1 , K - 1 times","code":"for ( int i = 0 ; i < K - 1 ; i ++ ) cout << 1 << \" \u2581 \" ;"}
{"text":"Print ( N - K + 1 )","code":"cout << ( N - K + 1 ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 10 , K = 3 ; printKNumbers ( N , K ) ; return 0 ; }"}
{"text":"C ++ implementation to find NaTMth stepping natural Number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the Nth stepping natural number","code":"int NthSmallest ( int K ) {"}
{"text":"Declare the queue","code":"queue < int > Q ; int x ;"}
{"text":"Enqueue 1 , 2 , ... , 9 in this order","code":"for ( int i = 1 ; i < 10 ; i ++ ) Q . push ( i ) ;"}
{"text":"Perform K operation on queue","code":"for ( int i = 1 ; i <= K ; i ++ ) {"}
{"text":"Get the ith Stepping number","code":"x = Q . front ( ) ;"}
{"text":"Perform Dequeue from the Queue","code":"Q . pop ( ) ;"}
{"text":"If x mod 10 is not equal to 0","code":"if ( x % 10 != 0 ) {"}
{"text":"then Enqueue 10 x + ( x mod 10 ) - 1","code":"Q . push ( x * 10 + x % 10 - 1 ) ; }"}
{"text":"Enqueue 10 x + ( x mod 10 )","code":"Q . push ( x * 10 + x % 10 ) ;"}
{"text":"If x mod 10 is not equal to 9","code":"if ( x % 10 != 9 ) {"}
{"text":"then Enqueue 10 x + ( x mod 10 ) + 1","code":"Q . push ( x * 10 + x % 10 + 1 ) ; } }"}
{"text":"Return the dequeued number of the K - th operation as the Nth stepping number","code":"return x ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"initialise K","code":"int N = 16 ; cout << NthSmallest ( N ) << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the Least number","code":"int nearest ( int n ) {"}
{"text":"Get the perfect square before and after N","code":"int prevSquare = sqrt ( n ) ; int nextSquare = prevSquare + 1 ; prevSquare = prevSquare * prevSquare ; nextSquare = nextSquare * nextSquare ;"}
{"text":"Check which is nearest to N","code":"int ans = ( n - prevSquare ) < ( nextSquare - n ) ? ( prevSquare - n ) : ( nextSquare - n ) ;"}
{"text":"return the result","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 14 ; cout << nearest ( n ) << endl ; n = 16 ; cout << nearest ( n ) << endl ; n = 18 ; cout << nearest ( n ) << endl ; return 0 ; }"}
{"text":"C ++ program to calculate the value of pi up to n decimal places","code":"#include \" bits \/ stdc + + . h \" NEW_LINE using namespace std ;"}
{"text":"Function that prints the value of pi upto N decimal places","code":"void printValueOfPi ( int N ) {"}
{"text":"Find value of pi upto using acos ( ) function","code":"double pi = 2 * acos ( 0.0 ) ;"}
{"text":"Print value of pi upto N decimal places","code":"printf ( \" % . * lf STRNEWLINE \" , N , pi ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 45 ;"}
{"text":"Function that prints the value of pi","code":"printValueOfPi ( N ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to convert decimal number n to its binary representation stored as an array arr [ ]","code":"void decBinary ( int arr [ ] , int n ) { int k = log2 ( n ) ; while ( n > 0 ) { arr [ k -- ] = n % 2 ; n \/= 2 ; } }"}
{"text":"Function to convert the number represented as a binary array arr [ ] into its decimal equivalent","code":"int binaryDec ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += arr [ i ] << ( n - i - 1 ) ; return ans ; }"}
{"text":"Function to return the updated integer after flipping the kth bit","code":"int getNum ( int n , int k ) {"}
{"text":"Number of bits in n","code":"int l = log2 ( n ) + 1 ;"}
{"text":"Find the binary representation of n","code":"int a [ l ] = { 0 } ; decBinary ( a , n ) ;"}
{"text":"The number of bits in n are less than k","code":"if ( k > l ) return n ;"}
{"text":"Flip the kth bit","code":"a [ k - 1 ] = ( a [ k - 1 ] == 0 ) ? 1 : 0 ;"}
{"text":"Return the decimal equivalent of the number","code":"return binaryDec ( a , l ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 56 , k = 2 ; cout << getNum ( n , k ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define ll  long long NEW_LINE #define MAX  1000000 NEW_LINE const ll MOD = 1e9 + 7 ;"}
{"text":"Declare result array globally","code":"ll result [ MAX + 1 ] ; ll fact [ MAX + 1 ] ;"}
{"text":"Function to precompute the product of factorials upto MAX","code":"void preCompute ( ) {"}
{"text":"Initialize base condition if n = 0 then factorial of 0 is equal to 1 and answer for n = 0 is 1","code":"fact [ 0 ] = 1 ; result [ 0 ] = 1 ;"}
{"text":"Iterate loop from 1 to MAX","code":"for ( int i = 1 ; i <= MAX ; i ++ ) {"}
{"text":"factorial ( i ) = factorial ( i - 1 ) * i","code":"fact [ i ] = ( ( fact [ i - 1 ] % MOD ) * i ) % MOD ;"}
{"text":"Result for current n is equal to result [ i - 1 ] multiplied by the factorial of i","code":"result [ i ] = ( ( result [ i - 1 ] % MOD ) * ( fact [ i ] % MOD ) ) % MOD ; } }"}
{"text":"Function to perform the queries","code":"void performQueries ( int q [ ] , int n ) {"}
{"text":"Precomputing the result till MAX","code":"preCompute ( ) ;"}
{"text":"Perform queries","code":"for ( int i = 0 ; i < n ; i ++ ) cout << result [ q [ i ] ] << \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"int main ( ) { int q [ ] = { 4 , 5 } ; int n = sizeof ( q ) \/ sizeof ( q [ 0 ] ) ; performQueries ( q , n ) ; return 0 ; }"}
{"text":"C ++ program to find nth term divisible by a , b or c","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return gcd of a and b","code":"int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }"}
{"text":"Function to return the count of integers from the range [ 1 , num ] which are divisible by either a , b or c","code":"long divTermCount ( long a , long b , long c , long num ) {"}
{"text":"Calculate the number of terms divisible by a , b and c then remove the terms which are divisible by both ( a , b ) or ( b , c ) or ( c , a ) and then add the numbers which are divisible by a , b and c","code":"return ( ( num \/ a ) + ( num \/ b ) + ( num \/ c ) - ( num \/ ( ( a * b ) \/ gcd ( a , b ) ) ) - ( num \/ ( ( c * b ) \/ gcd ( c , b ) ) ) - ( num \/ ( ( a * c ) \/ gcd ( a , c ) ) ) + ( num \/ ( ( ( ( a * b ) \/ gcd ( a , b ) ) * c ) \/ gcd ( ( ( a * b ) \/ gcd ( a , b ) ) , c ) ) ) ) ; }"}
{"text":"Function for binary search to find the nth term divisible by a , b or c","code":"int findNthTerm ( int a , int b , int c , long n ) {"}
{"text":"Set low to 1 and high to LONG_MAX","code":"long low = 1 , high = LONG_MAX , mid ; while ( low < high ) { mid = low + ( high - low ) \/ 2 ;"}
{"text":"If the current term is less than n then we need to increase low to mid + 1","code":"if ( divTermCount ( a , b , c , mid ) < n ) low = mid + 1 ;"}
{"text":"If current term is greater than equal to n then high = mid","code":"else high = mid ; } return low ; }"}
{"text":"Driver code","code":"int main ( ) { long a = 2 , b = 3 , c = 5 , n = 100 ; cout << findNthTerm ( a , b , c , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that checks whether given angle can be created using any 3 sides","code":"double calculate_angle ( int n , int i , int j , int k ) {"}
{"text":"Initialize x and y","code":"int x , y ;"}
{"text":"Calculate the number of vertices between i and j , j and k","code":"if ( i < j ) x = j - i ; else x = j + n - i ; if ( j < k ) y = k - j ; else y = k + n - j ;"}
{"text":"Calculate the angle subtended at the circumference","code":"double ang1 = ( 180 * x ) \/ n ; double ang2 = ( 180 * y ) \/ n ;"}
{"text":"Angle subtended at j can be found using the fact that the sum of angles of a triangle is equal to 180 degrees","code":"double ans = 180 - ang1 - ang2 ; return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 5 ; int a1 = 1 ; int a2 = 2 ; int a3 = 5 ; cout << calculate_angle ( n , a1 , a2 , a3 ) ; return 0 ; }"}
{"text":"C ++ implementation of above approach .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that will find loss","code":"void Loss ( int SP , int P ) { float loss = 0 ; loss = ( 2 * P * P * SP ) \/ float ( 100 * 100 - P * P ) ; cout << \" Loss \u2581 = \u2581 \" << loss ; }"}
{"text":"Driver Code","code":"int main ( ) { int SP = 2400 , P = 30 ;"}
{"text":"Calling Function","code":"Loss ( SP , P ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAXN  1000001"}
{"text":"Stores smallest prime factor for every number","code":"int spf [ MAXN ] ;"}
{"text":"Hash to store prime factors count","code":"int hash1 [ MAXN ] = { 0 } ;"}
{"text":"Function to calculate SPF ( Smallest Prime Factor ) for every number till MAXN","code":"void sieve ( ) { spf [ 1 ] = 1 ; for ( int i = 2 ; i < MAXN ; i ++ )"}
{"text":"Marking smallest prime factor for every number to be itself","code":"spf [ i ] = i ;"}
{"text":"Separately marking spf for every even number as 2","code":"for ( int i = 4 ; i < MAXN ; i += 2 ) spf [ i ] = 2 ;"}
{"text":"Checking if i is prime","code":"for ( int i = 3 ; i * i < MAXN ; i ++ ) {"}
{"text":"Marking SPF for all numbers divisible by i","code":"if ( spf [ i ] == i ) { for ( int j = i * i ; j < MAXN ; j += i )"}
{"text":"Marking spf [ j ] if it is not previously marked","code":"if ( spf [ j ] == j ) spf [ j ] = i ; } } }"}
{"text":"Function to store the prime factors after dividing by the smallest prime factor at every step","code":"void getFactorization ( int x ) { int temp ; while ( x != 1 ) { temp = spf [ x ] ; if ( x % temp == 0 ) {"}
{"text":"Storing the count of prime factors in hash","code":"hash1 [ spf [ x ] ] ++ ; x = x \/ spf [ x ] ; } while ( x % temp == 0 ) x = x \/ temp ; } }"}
{"text":"Function that returns true if there are no common prime factors between x and other numbers of the array","code":"bool check ( int x ) { int temp ; while ( x != 1 ) { temp = spf [ x ] ;"}
{"text":"Checking whether it common prime factor with other numbers","code":"if ( x % temp == 0 && hash1 [ temp ] > 1 ) return false ; while ( x % temp == 0 ) x = x \/ temp ; } return true ; }"}
{"text":"Function that returns true if there is an element in the array which is coprime with all the other elements of the array","code":"bool hasValidNum ( int arr [ ] , int n ) {"}
{"text":"Using sieve for generating prime factors","code":"sieve ( ) ; for ( int i = 0 ; i < n ; i ++ ) getFactorization ( arr [ i ] ) ;"}
{"text":"Checking the common prime factors with other numbers","code":"for ( int i = 0 ; i < n ; i ++ ) if ( check ( arr [ i ] ) ) return true ; return false ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 8 , 4 , 10 , 6 , 7 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; if ( hasValidNum ( arr , n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the number of ways to remove edges from the graph so that odd number of edges are left in the graph","code":"int countWays ( int N ) {"}
{"text":"Total number of edges","code":"int E = ( N * ( N - 1 ) ) \/ 2 ; if ( N == 1 ) return 0 ; return pow ( 2 , E - 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 4 ; cout << countWays ( N ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Initialize the matrix with 0","code":"int l [ 1001 ] [ 1001 ] = { 0 } ; void initialize ( ) {"}
{"text":"0 C0 = 1","code":"l [ 0 ] [ 0 ] = 1 ; for ( int i = 1 ; i < 1001 ; i ++ ) {"}
{"text":"Set every nCr = 1 where r = 0","code":"l [ i ] [ 0 ] = 1 ; for ( int j = 1 ; j < i + 1 ; j ++ ) {"}
{"text":"Value for the current cell of Pascal 's triangle","code":"l [ i ] [ j ] = ( l [ i - 1 ] [ j - 1 ] + l [ i - 1 ] [ j ] ) ; } } }"}
{"text":"Function to return the value of nCr","code":"int nCr ( int n , int r ) {"}
{"text":"Return nCr","code":"return l [ n ] [ r ] ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Build the Pascal 's triangle","code":"initialize ( ) ; int n = 8 ; int r = 3 ; cout << nCr ( n , r ) ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the minimum required absolute difference","code":"int minAbsDiff ( int n ) { int mod = n % 4 ; if ( mod == 0 mod == 3 ) return 0 ; return 1 ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 5 ; cout << minAbsDiff ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool check ( int s ) {"}
{"text":"creating a frequency array","code":"int freq [ 10 ] = { 0 } , r ; while ( s != 0 ) {"}
{"text":"Finding the last digit of the number","code":"r = s % 10 ;"}
{"text":"Dividing the number by 10 to eliminate last digit","code":"s = int ( s \/ 10 ) ;"}
{"text":"counting frequency of each digit","code":"freq [ r ] += 1 ; } int xor__ = 0 ;"}
{"text":"checking if the xor of all frequency is zero or not","code":"for ( int i = 0 ; i < 10 ; i ++ ) { xor__ = xor__ ^ freq [ i ] ; if ( xor__ == 0 ) return true ; else return false ; } }"}
{"text":"Driver function","code":"int main ( ) { int s = 122233 ; if ( check ( s ) ) cout << \" Yes \" << endl ; else cout << \" No \" << endl ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print N lines","code":"void printLines ( int n , int k ) {"}
{"text":"Iterate N times to print N lines","code":"for ( int i = 0 ; i < n ; i ++ ) { cout << k * ( 6 * i + 1 ) << \" \u2581 \" << k * ( 6 * i + 2 ) << \" \u2581 \" << k * ( 6 * i + 3 ) << \" \u2581 \" << k * ( 6 * i + 5 ) << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { int n = 2 , k = 2 ; printLines ( n , k ) ; return 0 ; }"}
{"text":"C ++ program to find sum of first n terms","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int calculateSum ( int n ) {"}
{"text":"Sn = n * ( 4 * n * n + 6 * n - 1 ) \/ 3","code":"return ( pow ( 2 , n + 1 ) + n - 2 ) ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"number of terms to be included in sum","code":"int n = 4 ;"}
{"text":"find the Sn","code":"cout << \" Sum \u2581 = \u2581 \" << calculateSum ( n ) ; return 0 ; }"}
{"text":"C ++ Program to Count the number of Special Strings of a given length N","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define mod  1000000007"}
{"text":"Function to return count of special strings","code":"long count_special ( long n ) {"}
{"text":"stores the answer for a particular value of n","code":"long fib [ n + 1 ] ;"}
{"text":"for n = 0 we have empty string","code":"fib [ 0 ] = 1 ;"}
{"text":"for n = 1 we have 2 special strings","code":"fib [ 1 ] = 2 ; for ( int i = 2 ; i <= n ; i ++ ) {"}
{"text":"calculate count of special string of length i","code":"fib [ i ] = ( fib [ i - 1 ] % mod + fib [ i - 2 ] % mod ) % mod ; }"}
{"text":"fib [ n ] stores the count of special strings of length n","code":"return fib [ n ] ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"initialise n","code":"long n = 3 ; cout << count_special ( n ) << endl ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int mod = 1e9 + 7 ;"}
{"text":"Find the number of ways to reach the end","code":"int ways ( int i , int arr [ ] , int n ) {"}
{"text":"Base case","code":"if ( i == n - 1 ) return 1 ; int sum = 0 ;"}
{"text":"Recursive structure","code":"for ( int j = 1 ; j + i < n && j <= arr [ i ] ; j ++ ) { sum += ( ways ( i + j , arr , n ) ) % mod ; sum %= mod ; } return sum % mod ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 5 , 3 , 1 , 4 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << ways ( 0 , arr , n ) << endl ; return 0 ; }"}
{"text":"C ++ implementation","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int mod = 1e9 + 7 ;"}
{"text":"find the number of ways to reach the end","code":"int ways ( int arr [ ] , int n ) {"}
{"text":"dp to store value","code":"int dp [ n + 1 ] ;"}
{"text":"base case","code":"dp [ n - 1 ] = 1 ;"}
{"text":"Bottom up dp structure","code":"for ( int i = n - 2 ; i >= 0 ; i -- ) { dp [ i ] = 0 ;"}
{"text":"F [ i ] is dependent of F [ i + 1 ] to F [ i + k ]","code":"for ( int j = 1 ; ( ( j + i ) < n && j <= arr [ i ] ) ; j ++ ) { dp [ i ] += dp [ i + j ] ; dp [ i ] %= mod ; } }"}
{"text":"Return value of dp [ 0 ]","code":"return dp [ 0 ] % mod ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 5 , 3 , 1 , 4 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << ways ( arr , n ) % mod << endl ; return 0 ; }"}
{"text":"C ++ implementation","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns the count of odd and even subsequences","code":"pair < int , int > countSum ( int arr [ ] , int n ) { int result = 0 ;"}
{"text":"Variables to store the count of even subsequences and odd subsequences","code":"int count_odd , count_even ;"}
{"text":"Initialising count_even and count_odd to 0 since as there is no subsequence before the iteration with even or odd count .","code":"count_odd = 0 ; count_even = 0 ;"}
{"text":"Find sum of all subsequences with even count and odd count and storing them as we iterate .","code":"for ( int i = 1 ; i <= n ; i ++ ) {"}
{"text":"if the number is even","code":"if ( arr [ i - 1 ] % 2 == 0 ) { count_even = count_even + count_even + 1 ; count_odd = count_odd + count_odd ; }"}
{"text":"if the number is odd","code":"else { int temp = count_even ; count_even = count_even + count_odd ; count_odd = count_odd + temp + 1 ; } } return { count_even , count_odd } ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Calling the function","code":"pair < int , int > ans = countSum ( arr , n ) ; cout << \" EvenSum \u2581 = \u2581 \" << ans . first ; cout << \" \u2581 OddSum \u2581 = \u2581 \" << ans . second ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  10"}
{"text":"Function to convert a number into vector","code":"vector < int > numToVec ( int N ) { vector < int > digit ;"}
{"text":"Push all the digits of N from the end one by one to the vector","code":"while ( N != 0 ) { digit . push_back ( N % 10 ) ; N = N \/ 10 ; }"}
{"text":"If the original number was 0","code":"if ( digit . size ( ) == 0 ) digit . push_back ( 0 ) ;"}
{"text":"Reverse the vector elements","code":"reverse ( digit . begin ( ) , digit . end ( ) ) ;"}
{"text":"Return the required vector","code":"return digit ; }"}
{"text":"Function to return the count of B length integers which are less than C and they contain digits from set A [ ] only","code":"int solve ( vector < int > & A , int B , int C ) { vector < int > digit ; int d , d2 ;"}
{"text":"Convert number to digit array","code":"digit = numToVec ( C ) ; d = A . size ( ) ;"}
{"text":"Case 1 : No such number possible as the generated numbers will always be greater than C","code":"if ( B > digit . size ( ) d == 0 ) return 0 ;"}
{"text":"Case 2 : All integers of length B are valid as they all are less than C","code":"else if ( B < digit . size ( ) ) {"}
{"text":"contain 0","code":"if ( A [ 0 ] == 0 && B != 1 ) return ( d - 1 ) * pow ( d , B - 1 ) ; else return pow ( d , B ) ; }"}
{"text":"Case 3","code":"else { int dp [ B + 1 ] = { 0 } ; int lower [ MAX + 1 ] = { 0 } ;"}
{"text":"Update the lower [ ] array such that lower [ i ] stores the count of elements in A [ ] which are less than i","code":"for ( int i = 0 ; i < d ; i ++ ) lower [ A [ i ] + 1 ] = 1 ; for ( int i = 1 ; i <= MAX ; i ++ ) lower [ i ] = lower [ i - 1 ] + lower [ i ] ; bool flag = true ; dp [ 0 ] = 0 ; for ( int i = 1 ; i <= B ; i ++ ) { d2 = lower [ digit [ i - 1 ] ] ; dp [ i ] = dp [ i - 1 ] * d ;"}
{"text":"For first index we can 't use 0","code":"if ( i == 1 && A [ 0 ] == 0 && B != 1 ) d2 = d2 - 1 ;"}
{"text":"Whether ( i - 1 ) digit of generated number can be equal to ( i - 1 ) digit of C","code":"if ( flag ) dp [ i ] += d2 ;"}
{"text":"Is digit [ i - 1 ] present in A ?","code":"flag = ( flag & ( lower [ digit [ i - 1 ] + 1 ] == lower [ digit [ i - 1 ] ] + 1 ) ) ; } return dp [ B ] ; } }"}
{"text":"Driver code","code":"int main ( ) { vector < int > A = { 0 , 1 , 2 , 5 } ; int N = 2 ; int k = 21 ; cout << solve ( A , N , k ) ; return 0 ; }"}
{"text":"C ++ program to count the number of paths with weight W in a K - ary tree","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the number of ways having weight as wt in K - ary tree","code":"int solve ( int dp [ ] [ 2 ] , int wt , int K , int M , int used ) {"}
{"text":"Return 0 if weight becomes less than zero","code":"if ( wt < 0 ) return 0 ; if ( wt == 0 ) {"}
{"text":"Return one only if the current path has included edge weight of atleast M","code":"if ( used ) return 1 ; return 0 ; } if ( dp [ wt ] [ used ] != -1 ) return dp [ wt ] [ used ] ; int ans = 0 ; for ( int i = 1 ; i <= K ; i ++ ) {"}
{"text":"If the current edge weight is greater than or equal to M , set used as true","code":"if ( i >= M ) ans += solve ( dp , wt - i , K , M , used 1 ) ; else ans += solve ( dp , wt - i , K , M , used ) ; } return dp [ wt ] [ used ] = ans ; }"}
{"text":"Driver Code to test above function","code":"int main ( ) { int W = 3 , K = 3 , M = 2 ; int dp [ W + 1 ] [ 2 ] ; memset ( dp , -1 , sizeof ( dp ) ) ; cout << solve ( dp , W , K , M , 0 ) << endl ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the number of partitions of N","code":"long long partitions ( int n ) { vector < long long > p ( n + 1 , 0 ) ;"}
{"text":"Base case","code":"p [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; ++ i ) { int k = 1 ; while ( ( k * ( 3 * k - 1 ) ) \/ 2 <= i ) { p [ i ] += ( k % 2 ? 1 : -1 ) * p [ i - ( k * ( 3 * k - 1 ) ) \/ 2 ] ; if ( k > 0 ) k *= -1 ; else k = 1 - k ; } } return p [ n ] ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 20 ; cout << partitions ( N ) ; return 0 ; }"}
{"text":"CPP program to find longest increasing path in a matrix .","code":"#include <bits\/stdc++.h> NEW_LINE #define MAX  10 NEW_LINE using namespace std ;"}
{"text":"Return the length of LIP in 2D matrix","code":"int LIP ( int dp [ ] [ MAX ] , int mat [ ] [ MAX ] , int n , int m , int x , int y ) {"}
{"text":"If value not calculated yet .","code":"if ( dp [ x ] [ y ] < 0 ) { int result = 0 ;"}
{"text":"If reach bottom left cell , return 1.","code":"if ( x == n - 1 && y == m - 1 ) return dp [ x ] [ y ] = 1 ;"}
{"text":"If reach the corner of the matrix .","code":"if ( x == n - 1 y == m - 1 ) result = 1 ;"}
{"text":"If value greater than below cell .","code":"if ( mat [ x ] [ y ] < mat [ x + 1 ] [ y ] ) result = 1 + LIP ( dp , mat , n , m , x + 1 , y ) ;"}
{"text":"If value greater than left cell .","code":"if ( mat [ x ] [ y ] < mat [ x ] [ y + 1 ] ) result = max ( result , 1 + LIP ( dp , mat , n , m , x , y + 1 ) ) ; dp [ x ] [ y ] = result ; } return dp [ x ] [ y ] ; }"}
{"text":"Wrapper function","code":"int wrapper ( int mat [ ] [ MAX ] , int n , int m ) { int dp [ MAX ] [ MAX ] ; memset ( dp , -1 , sizeof dp ) ; return LIP ( dp , mat , n , m , 0 , 0 ) ; }"}
{"text":"Driven Program","code":"int main ( ) { int mat [ ] [ MAX ] = { { 1 , 2 , 3 , 4 } , { 2 , 2 , 3 , 4 } , { 3 , 2 , 3 , 4 } , { 4 , 5 , 6 , 7 } , } ; int n = 4 , m = 4 ; cout << wrapper ( mat , n , m ) << endl ; return 0 ; }"}
{"text":"C ++ program to count total number of paths from a point to origin","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive function to count number of paths","code":"int countPaths ( int n , int m ) {"}
{"text":"If we reach bottom or top left , we are have only one way to reach ( 0 , 0 )","code":"if ( n == 0 m == 0 ) return 1 ;"}
{"text":"Else count sum of both ways","code":"return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 , m = 2 ; cout << \" \u2581 Number \u2581 of \u2581 Paths \u2581 \" << countPaths ( n , m ) ; return 0 ; }"}
{"text":"C ++ program to solve Gold Mine problem","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 100 ;"}
{"text":"Returns maximum amount of gold that can be collected when journey started from first column and moves allowed are right , right - up and right - down","code":"int getMaxGold ( int gold [ ] [ MAX ] , int m , int n ) {"}
{"text":"Create a table for storing intermediate results and initialize all cells to 0. The first row of goldMineTable gives the maximum gold that the miner can collect when starts that row","code":"int goldTable [ m ] [ n ] ; memset ( goldTable , 0 , sizeof ( goldTable ) ) ; for ( int col = n - 1 ; col >= 0 ; col -- ) { for ( int row = 0 ; row < m ; row ++ ) {"}
{"text":"Gold collected on going to the cell on the right ( -> )","code":"int right = ( col == n - 1 ) ? 0 : goldTable [ row ] [ col + 1 ] ;"}
{"text":"Gold collected on going to the cell to right up ( \/ )","code":"int right_up = ( row == 0 col == n - 1 ) ? 0 : goldTable [ row - 1 ] [ col + 1 ] ;"}
{"text":"Gold collected on going to the cell to right down ( \\ )","code":"int right_down = ( row == m - 1 col == n - 1 ) ? 0 : goldTable [ row + 1 ] [ col + 1 ] ;"}
{"text":"Max gold collected from taking either of the above 3 paths","code":"goldTable [ row ] [ col ] = gold [ row ] [ col ] + max ( right , max ( right_up , right_down ) ) ; } }"}
{"text":"The max amount of gold collected will be the max value in first column of all rows","code":"int res = goldTable [ 0 ] [ 0 ] ; for ( int i = 1 ; i < m ; i ++ ) res = max ( res , goldTable [ i ] [ 0 ] ) ; return res ; }"}
{"text":"Driver Code","code":"int main ( ) { int gold [ MAX ] [ MAX ] = { { 1 , 3 , 1 , 5 } , { 2 , 2 , 4 , 1 } , { 5 , 0 , 2 , 3 } , { 0 , 6 , 1 , 2 } } ; int m = 4 , n = 4 ; cout << getMaxGold ( gold , m , n ) ; return 0 ; }"}
{"text":"C ++ program to find minimum adjustment cost of an array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define M  100"}
{"text":"Function to find minimum adjustment cost of an array","code":"int minAdjustmentCost ( int A [ ] , int n , int target ) {"}
{"text":"dp [ i ] [ j ] stores minimal adjustment cost on changing A [ i ] to j","code":"int dp [ n ] [ M + 1 ] ;"}
{"text":"handle first element of array separately","code":"for ( int j = 0 ; j <= M ; j ++ ) dp [ 0 ] [ j ] = abs ( j - A [ 0 ] ) ;"}
{"text":"do for rest elements of the array","code":"for ( int i = 1 ; i < n ; i ++ ) {"}
{"text":"replace A [ i ] to j and calculate minimal adjustment cost dp [ i ] [ j ]","code":"for ( int j = 0 ; j <= M ; j ++ ) {"}
{"text":"initialize minimal adjustment cost to INT_MAX","code":"dp [ i ] [ j ] = INT_MAX ;"}
{"text":"consider all k such that k >= max ( j - target , 0 ) and k <= min ( M , j + target ) and take minimum","code":"for ( int k = max ( j - target , 0 ) ; k <= min ( M , j + target ) ; k ++ ) dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ i - 1 ] [ k ] + abs ( A [ i ] - j ) ) ; } }"}
{"text":"return minimum value from last row of dp table","code":"int res = INT_MAX ; for ( int j = 0 ; j <= M ; j ++ ) res = min ( res , dp [ n - 1 ] [ j ] ) ; return res ; }"}
{"text":"Driver Program to test above functions","code":"int main ( ) { int arr [ ] = { 55 , 77 , 52 , 61 , 39 , 6 , 25 , 60 , 49 , 47 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int target = 10 ; cout << \" Minimum \u2581 adjustment \u2581 cost \u2581 is \u2581 \" << minAdjustmentCost ( arr , n , target ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the number of triplets from the range [ L , R ] having sum of two numbers from the triplet equal to the third number","code":"int totalCombination ( int L , int R ) {"}
{"text":"Stores the total number of triplets","code":"int count = 0 ;"}
{"text":"Find the difference of the range","code":"int K = R - L ;"}
{"text":"Case 1 : If triplets can 't  be formed, then return 0","code":"if ( K < L ) return 0 ;"}
{"text":"Otherwise","code":"int ans = K - L ;"}
{"text":"Update the total number of triplets","code":"count = ( ( ans + 1 ) * ( ans + 2 ) ) \/ 2 ;"}
{"text":"Return the count","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int L = 2 , R = 6 ; cout << totalCombination ( L , R ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to generate two arrays satisfying the given conditions","code":"void printArrays ( int n ) {"}
{"text":"Declare the two arrays A and B","code":"vector < int > A , B ;"}
{"text":"Iterate from range [ 1 , 2 * n ]","code":"for ( int i = 1 ; i <= 2 * n ; i ++ ) {"}
{"text":"Assign consecutive numbers to same indices of the two arrays","code":"if ( i % 2 == 0 ) A . push_back ( i ) ; else B . push_back ( i ) ; }"}
{"text":"Print the first array","code":"cout << \" { \u2581 \" ; for ( int i = 0 ; i < n ; i ++ ) { cout << A [ i ] ; if ( i != n - 1 ) cout << \" , \u2581 \" ; } cout << \" \u2581 } STRNEWLINE \" ;"}
{"text":"Print the second array , B","code":"cout << \" { \u2581 \" ; for ( int i = 0 ; i < n ; i ++ ) { cout << B [ i ] ; if ( i != n - 1 ) cout << \" , \u2581 \" ; } cout << \" \u2581 } \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 5 ;"}
{"text":"Function Call","code":"printArrays ( N ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to flip bits of A and B which are set bits in A and B","code":"void flipBitsOfAandB ( int A , int B ) {"}
{"text":"Iterater all possible bits of A and B","code":"for ( int i = 0 ; i < 32 ; i ++ ) {"}
{"text":"If ith bit is set in both A and B","code":"if ( ( A & ( 1 << i ) ) && ( B & ( 1 << i ) ) ) {"}
{"text":"Clear i - th bit of A","code":"A = A ^ ( 1 << i ) ;"}
{"text":"Clear i - th bit of B","code":"B = B ^ ( 1 << i ) ; } }"}
{"text":"Print A and B","code":"cout << A << \" \u2581 \" << B ; }"}
{"text":"Driver Code","code":"int main ( ) { int A = 7 , B = 4 ; flipBitsOfAandB ( A , B ) ; return 0 ; }"}
{"text":"C ++ implementation to find count of distinct pair sum between two 1 to N value Arrays","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the distinct sums","code":"int findDistinctSums ( int N ) { return ( 2 * N - 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 3 ; cout << findDistinctSums ( N ) ; return 0 ; }"}
{"text":"C ++ program for above approach","code":"#include <iostream> NEW_LINE #include <string> NEW_LINE using namespace std ;"}
{"text":"Function to count the number of substrings consists of 0 , 1 , and 2","code":"int countSubstrings ( string & str ) {"}
{"text":"Initialize frequency array of size 3","code":"int freq [ 3 ] = { 0 } ;"}
{"text":"Stores the resultant count","code":"int count = 0 ; int i = 0 ;"}
{"text":"Traversing string str","code":"for ( int j = 0 ; j < str . length ( ) ; j ++ ) {"}
{"text":"Update frequency array","code":"freq [ str [ j ] - '0' ] ++ ;"}
{"text":"If all the characters are present counting number of substrings possible","code":"while ( freq [ 0 ] > 0 && freq [ 1 ] > 0 && freq [ 2 ] > 0 ) { freq [ str [ i ++ ] - '0' ] -- ; }"}
{"text":"Update number of substrings","code":"count += i ; }"}
{"text":"Return the number of substrings","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \"00021\" ; int count = countSubstrings ( str ) ; cout << count ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of flips to make all three pairs of consecutive characters different","code":"int minFlips ( string str ) {"}
{"text":"Stores resultant count of pairs","code":"int count = 0 ;"}
{"text":"Base Case","code":"if ( str . size ( ) <= 2 ) { return 0 ; }"}
{"text":"Iterate over the range [ 0 , N - 2 ]","code":"for ( int i = 0 ; i < str . size ( ) - 2 ; ) {"}
{"text":"If the consecutive 3 numbers are the same then increment the count and the counter","code":"if ( str [ i ] == str [ i + 1 ] && str [ i + 2 ] == str [ i + 1 ] ) { i = i + 3 ; count ++ ; } else { i ++ ; } }"}
{"text":"Return the answer","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { string S = \"0011101\" ; cout << minFlips ( S ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to convert Decimal to Hex","code":"string convertToHex ( int num ) { string temp = \" \" ; while ( num != 0 ) { int rem = num % 16 ; char c ; if ( rem < 10 ) { c = rem + 48 ; } else { c = rem + 87 ; } temp += c ; num = num \/ 16 ; } return temp ; }"}
{"text":"Function to encrypt the string","code":"string encryptString ( string S , int N ) { string ans = \" \" ;"}
{"text":"Iterate the characters of the string","code":"for ( int i = 0 ; i < N ; i ++ ) { char ch = S [ i ] ; int count = 0 ; string hex ;"}
{"text":"Iterate until S [ i ] is equal to ch","code":"while ( i < N && S [ i ] == ch ) {"}
{"text":"Update count and i","code":"count ++ ; i ++ ; }"}
{"text":"Decrement i by 1","code":"i -- ;"}
{"text":"Convert count to hexadecimal representation","code":"hex = convertToHex ( count ) ;"}
{"text":"Append the character","code":"ans += ch ;"}
{"text":"Append the characters frequency in hexadecimal representation","code":"ans += hex ; }"}
{"text":"Reverse the obtained answer","code":"reverse ( ans . begin ( ) , ans . end ( ) ) ;"}
{"text":"Return required answer","code":"return ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Input","code":"string S = \" abc \" ; int N = S . size ( ) ;"}
{"text":"Function Call","code":"cout << encryptString ( S , N ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate and return the value of Binomial Coefficient C ( n , k )","code":"unsigned long int binomialCoeff ( unsigned long int n , unsigned long int k ) { unsigned long int res = 1 ;"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( k > n - k ) k = n - k ;"}
{"text":"Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- - * 1 ]","code":"for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; }"}
{"text":"Function to return the count of binary strings of length N such that frequency of 1 ' s \u2581 exceed \u2581 that \u2581 of \u2581 0' s","code":"unsigned long int countOfString ( int N ) {"}
{"text":"Count of N - length binary strings","code":"unsigned long int Stotal = pow ( 2 , N ) ;"}
{"text":"Count of N - length binary strings having equal count of 0 ' s \u2581 and \u2581 1' s","code":"unsigned long int Sequal = 0 ;"}
{"text":"For even length strings","code":"if ( N % 2 == 0 ) Sequal = binomialCoeff ( N , N \/ 2 ) ; unsigned long int S1 = ( Stotal - Sequal ) \/ 2 ; return S1 ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 3 ; cout << countOfString ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to remove all occurrences of a character in the string","code":"string removeCharRecursive ( string str , char X ) {"}
{"text":"Base Case","code":"if ( str . length ( ) == 0 ) { return \" \" ; }"}
{"text":"Check the first character of the given string","code":"if ( str [ 0 ] == X ) {"}
{"text":"Pass the rest of the string to recursion Function call","code":"return removeCharRecursive ( str . substr ( 1 ) , X ) ; }"}
{"text":"Add the first character of str and string from recursion","code":"return str [ 0 ] + removeCharRecursive ( str . substr ( 1 ) , X ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given String","code":"string str = \" geeksforgeeks \" ;"}
{"text":"Given character","code":"char X = ' e ' ;"}
{"text":"Function Call","code":"str = removeCharRecursive ( str , X ) ; cout << str ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function checks whether given time is correct","code":"bool isValid ( char a1 , char a2 , string str , int flag ) { char v1 , v2 ;"}
{"text":"To check minute value of time","code":"if ( flag == 0 ) { v1 = str [ 4 ] ; v2 = str [ 3 ] ; } else {"}
{"text":"To check hour value of time","code":"v1 = str [ 1 ] ; v2 = str [ 0 ] ; }"}
{"text":"Changes in value is not allowed at position where ' ? ' is not present","code":"if ( v1 != a1 && v1 != ' ? ' ) return false ; if ( v2 != a2 && v2 != ' ? ' ) return false ; return true ; }"}
{"text":"Function checks whether the absolute difference between hour and minute value is within [ L , R ]","code":"bool inRange ( int hh , int mm , int L , int R ) { int a = abs ( hh - mm ) ;"}
{"text":"Checks if the difference is outside the give range","code":"if ( a < L a > R ) return false ; return true ; }"}
{"text":"Displays time in proper 24 - hour format","code":"void displayTime ( int hh , int mm ) { if ( hh > 10 ) cout << hh << \" : \" ; else if ( hh < 10 ) cout << \"0\" << hh << \" : \" ; if ( mm > 10 ) cout << mm << endl ; else if ( mm < 10 ) cout << \"0\" << mm << endl ; }"}
{"text":"Function find the desired value of time whose difference lies in the range [ L , R ]","code":"void maximumTimeWithDifferenceInRange ( string str , int L , int R ) { int i , j ; int h1 , h2 , m1 , m2 ;"}
{"text":"Decrease hour value from 23 to 0","code":"for ( i = 23 ; i >= 0 ; i -- ) { h1 = i % 10 ; h2 = i \/ 10 ;"}
{"text":"Check if the hour value is valid if not valid then no need to change minute value , since time will still remain in valid , to check hour value flag is set to 1.","code":"if ( ! isValid ( h1 + '0' , h2 + '0' , str , 1 ) ) { continue ; }"}
{"text":"Decrease minute value from 59 to 0","code":"for ( j = 59 ; j >= 0 ; j -- ) { m1 = j % 10 ; m2 = j \/ 10 ;"}
{"text":"Check if the minute value is valid , if not valid then skip the current iteration , to check ' minute ' value flag is set to 0.","code":"if ( ! isValid ( m1 + '0' , m2 + '0' , str , 0 ) ) { continue ; } if ( inRange ( i , j , L , R ) ) { displayTime ( i , j ) ; return ; } } } if ( inRange ( i , j , L , R ) ) displayTime ( i , j ) ; else cout << \" - 1\" << endl ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Input time","code":"string timeValue = \" ? ? : ? ? \" ;"}
{"text":"Difference range","code":"int L = 20 , R = 39 ; maximumTimeWithDifferenceInRange ( timeValue , L , R ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check string str can be split a string into even length palindromic substrings","code":"bool check ( string s , int n ) {"}
{"text":"Initialize a stack","code":"stack < char > st ;"}
{"text":"Iterate the string","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If the i - th character is same as that at the top of the stack then pop the top element","code":"if ( ! st . empty ( ) && st . top ( ) == s [ i ] ) st . pop ( ) ;"}
{"text":"Else push the current charactor into the stack","code":"else st . push ( s [ i ] ) ; }"}
{"text":"If the stack is empty , then even palindromic substrings are possible","code":"if ( st . empty ( ) ) { return true ; }"}
{"text":"Else not - possible","code":"else { return false ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given string","code":"string str = \" aanncddc \" ; int n = str . length ( ) ;"}
{"text":"Function Call","code":"if ( check ( str , n ) ) { cout << \" Yes \" << endl ; } else { cout << \" No \" << endl ; } return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void findNumOfValidWords ( vector < string > & w , vector < string > & p ) {"}
{"text":"To store the frequency of string after bitmasking","code":"unordered_map < int , int > m ;"}
{"text":"To store result for each string in arr2 [ ]","code":"vector < int > res ;"}
{"text":"Traverse the arr1 [ ] and bitmask each string in it","code":"for ( string & s : w ) { int val = 0 ;"}
{"text":"Bitmasking for each string s","code":"for ( char c : s ) { val = val | ( 1 << ( c - ' a ' ) ) ; }"}
{"text":"Update the frequency of string with it 's bitmasking value","code":"m [ val ] ++ ; }"}
{"text":"Traverse the arr2 [ ]","code":"for ( string & s : p ) { int val = 0 ;"}
{"text":"Bitmasking for each string s","code":"for ( char c : s ) { val = val | ( 1 << ( c - ' a ' ) ) ; } int temp = val ; int first = s [ 0 ] - ' a ' ; int count = 0 ; while ( temp != 0 ) {"}
{"text":"Check if temp is present in an unordered_map or not","code":"if ( ( ( temp >> first ) & 1 ) == 1 ) { if ( m . find ( temp ) != m . end ( ) ) { count += m [ temp ] ; } }"}
{"text":"Check for next set bit","code":"temp = ( temp - 1 ) & val ; }"}
{"text":"Push the count for current string in resultant array","code":"res . push_back ( count ) ; }"}
{"text":"Print the count for each string","code":"for ( auto & it : res ) { cout << it << ' ' ; } }"}
{"text":"Driver Code","code":"int main ( ) { vector < string > arr1 ; arr1 = { \" aaaa \" , \" asas \" , \" able \" , \" ability \" , \" actt \" , \" actor \" , \" access \" } ; vector < string > arr2 ; arr2 = { \" aboveyz \" , \" abrodyz \" , \" absolute \" , \" absoryz \" , \" actresz \" , \" gaswxyz \" } ;"}
{"text":"Function call","code":"findNumOfValidWords ( arr1 , arr2 ) ; return 0 ; }"}
{"text":"C ++ implementation to Maximize the value of the decimal equivalent given in the binary form","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the binary number","code":"void flip ( string & s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) {"}
{"text":"Check if the current number is 0","code":"if ( s [ i ] == '0' ) {"}
{"text":"Find the continuous 0 s","code":"while ( s [ i ] == '0' ) {"}
{"text":"Replace initially occurring 0 with 1","code":"s [ i ] = '1' ; i ++ ; }"}
{"text":"Break out of loop if 1 occurs","code":"break ; } } }"}
{"text":"Driver code","code":"int main ( ) { string s = \"100010001\" ; flip ( s ) ; cout << s ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the original string after converting it back from camelCase","code":"void getOrgString ( string s ) {"}
{"text":"Print the first character as it is","code":"cout << s [ 0 ] ;"}
{"text":"Traverse the rest of the characters one by one","code":"int i = 1 ; while ( i < s . length ( ) ) {"}
{"text":"If current character is uppercase print space followed by the current character in lowercase","code":"if ( s [ i ] >= ' A ' && s [ i ] <= ' Z ' ) cout << \" \u2581 \" << ( char ) tolower ( s [ i ] ) ;"}
{"text":"Else print the current character","code":"else cout < < s [ i ] ; i ++ ; } }"}
{"text":"Driver code","code":"int main ( ) { string s = \" ILoveGeeksForGeeks \" ; getOrgString ( s ) ; return 0 ; }"}
{"text":"CPP program to find the occurrences of character x in the infinite repeated string upto length n","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the character ' a '","code":"int countChar ( string str , char x ) { int count = 0 , n = 10 ; for ( int i = 0 ; i < str . size ( ) ; i ++ ) if ( str [ i ] == x ) count ++ ;"}
{"text":"atleast k repetition are required","code":"int repetitions = n \/ str . size ( ) ; count = count * repetitions ;"}
{"text":"if n is not the multiple of the string size check for the remaining repeating character .","code":"for ( int i = 0 ; i < n % str . size ( ) ; i ++ ) { if ( str [ i ] == x ) count ++ ; } return count ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" abcac \" ; cout << countChar ( str , ' a ' ) ; return 0 ; }"}
{"text":"C ++ program to count frequencies of array items having small values .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void countFreq ( int arr [ ] , int n , int limit ) {"}
{"text":"Create an array to store counts . The size of array is limit + 1 and all values are initially 0","code":"vector < int > count ( limit + 1 , 0 ) ;"}
{"text":"Traverse through array elements and count frequencies ( assuming that elements are limited by limit )","code":"for ( int i = 0 ; i < n ; i ++ ) count [ arr [ i ] ] ++ ; for ( int i = 0 ; i <= limit ; i ++ ) if ( count [ i ] > 0 ) cout << i << \" \u2581 \" << count [ i ] << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 5 , 6 , 6 , 5 , 6 , 1 , 2 , 3 , 10 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int limit = 10 ; countFreq ( arr , n , limit ) ; return 0 ; }"}
{"text":"Program to check if the binary string contains m consecutive 1 ' s \u2581 or \u2581 0' s","code":"#include <bits\/stdc++.h> NEW_LINE #include <stdio.h> NEW_LINE using namespace std ;"}
{"text":"Function that checks if the binary string contains m consecutive 1 ' s \u2581 or \u2581 0' s","code":"bool check ( string s , int m ) {"}
{"text":"length of binary string","code":"int l = s . length ( ) ;"}
{"text":"counts zeros","code":"int c1 = 0 ;"}
{"text":"counts 1 's","code":"int c2 = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s [ i ] == '0' ) { c2 = 0 ;"}
{"text":"count consecutive 0 's","code":"c1 ++ ; } else { c1 = 0 ;"}
{"text":"count consecutive 1 's","code":"c2 ++ ; } if ( c1 == m c2 == m ) return true ; } return false ; }"}
{"text":"Drivers Code","code":"int main ( ) { string s = \"001001\" ; int m = 2 ;"}
{"text":"function call","code":"if ( check ( s , m ) ) cout << \" YES \" ; else cout << \" NO \" ; return 0 ; }"}
{"text":"C ++ implementation to find product of digits of elements at k - th level","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find product of digits of elements at k - th level","code":"int productAtKthLevel ( string tree , int k ) { int level = -1 ;"}
{"text":"int product = 1 ; Initialize result","code":"int n = tree . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"increasing level number","code":"if ( tree [ i ] == ' ( ' ) level ++ ;"}
{"text":"decreasing level number","code":"else if ( tree [ i ] == ' ) ' ) level -- ; else {"}
{"text":"check if current level is the desired level or not","code":"if ( level == k ) product *= ( tree [ i ] - '0' ) ; } }"}
{"text":"required product","code":"return product ; }"}
{"text":"Driver program","code":"int main ( ) { string tree = \" ( 0(5(6 ( ) ( ) ) ( 4 ( ) (9 ( ) ( ) ) ) ) ( 7(1 ( ) ( ) ) ( 3 ( ) ( ) ) ) ) \" ; int k = 2 ; cout << productAtKthLevel ( tree , k ) ; return 0 ; }"}
{"text":"CPP code to form string after removing duplicates from rows and columns .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check duplicates in row and column","code":"void findDuplciates ( string a [ ] , int n , int m ) {"}
{"text":"Create an array isPresent and initialize all entries of it as false . The value of isPresent [ i ] [ j ] is going to be true if s [ i ] [ j ] is present in its row or column .","code":"bool isPresent [ n ] [ m ] ; memset ( isPresent , 0 , sizeof ( isPresent ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) {"}
{"text":"Checking every row for duplicates of a [ i ] [ j ]","code":"for ( int k = 0 ; k < n ; k ++ ) { if ( a [ i ] [ j ] == a [ k ] [ j ] && i != k ) { isPresent [ i ] [ j ] = true ; isPresent [ k ] [ j ] = true ; } }"}
{"text":"Checking every column for duplicate characters","code":"for ( int k = 0 ; k < m ; k ++ ) { if ( a [ i ] [ j ] == a [ i ] [ k ] && j != k ) { isPresent [ i ] [ j ] = true ; isPresent [ i ] [ k ] = true ; } } } } for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < m ; j ++ )"}
{"text":"If the character is unique in its row and column","code":"if ( ! isPresent [ i ] [ j ] ) printf ( \" % c \" , a [ i ] [ j ] ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 2 , m = 5 ;"}
{"text":"character array","code":"string a [ ] = { \" zx \" , \" xz \" } ;"}
{"text":"Calling function","code":"findDuplciates ( a , n , m ) ; return 0 ; }"}
{"text":"CPP program to check if a given ISBN is valid or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isValidISBN ( string & isbn ) {"}
{"text":"length must be 10","code":"int n = isbn . length ( ) ; if ( n != 10 ) return false ;"}
{"text":"Computing weighted sum of first 9 digits","code":"int sum = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { int digit = isbn [ i ] - '0' ; if ( 0 > digit 9 < digit ) return false ; sum += ( digit * ( 10 - i ) ) ; }"}
{"text":"Checking last digit .","code":"char last = isbn [ 9 ] ; if ( last != ' X ' && ( last < '0' last > '9' ) ) return false ;"}
{"text":"If last digit is ' X ' , add 10 to sum , else add its value .","code":"sum += ( ( last == ' X ' ) ? 10 : ( last - '0' ) ) ;"}
{"text":"Return true if weighted sum of digits is divisible by 11.","code":"return ( sum % 11 == 0 ) ; }"}
{"text":"Driver code","code":"int main ( ) { string isbn = \"007462542X \" ; if ( isValidISBN ( isbn ) ) cout << \" Valid \" ; else cout << \" Invalid \" ; return 0 ; }"}
{"text":"C ++ program to reverse order of vowels","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"utility function to check for vowel","code":"bool isVowel ( char c ) { return ( c == ' a ' c == ' A ' c == ' e ' c == ' E ' c == ' i ' c == ' I ' c == ' o ' c == ' O ' c == ' u ' c == ' U ' ) ; }"}
{"text":"Function to reverse order of vowels","code":"string reverseVowel ( string str ) { int j = 0 ;"}
{"text":"Storing the vowels separately","code":"string vowel ; for ( int i = 0 ; str [ i ] != ' \\0' ; i ++ ) if ( isVowel ( str [ i ] ) ) vowel [ j ++ ] = str [ i ] ;"}
{"text":"Placing the vowels in the reverse order in the string","code":"for ( int i = 0 ; str [ i ] != ' \\0' ; i ++ ) if ( isVowel ( str [ i ] ) ) str [ i ] = vowel [ -- j ] ; return str ; }"}
{"text":"Driver function","code":"int main ( ) { string str = \" hello \u2581 world \" ; cout << reverseVowel ( str ) ; return 0 ; }"}
{"text":"C ++ program to find the string which contain the first character of each word of another string .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find string which has first character of each word .","code":"string firstLetterWord ( string str ) { string result = \" \" ;"}
{"text":"Traverse the string .","code":"bool v = true ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) {"}
{"text":"If it is space , set v as true .","code":"if ( str [ i ] == ' \u2581 ' ) v = true ;"}
{"text":"Else check if v is true or not . If true , copy character in output string and set v as false .","code":"else if ( str [ i ] != ' \u2581 ' && v == true ) { result . push_back ( str [ i ] ) ; v = false ; } } return result ; }"}
{"text":"Driver cpde","code":"int main ( ) { string str = \" geeks \u2581 for \u2581 geeks \" ; cout << firstLetterWord ( str ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function for dfs . i , j == > Current cell indexes vis == > To mark visited cells ans == > Result z == > Current count 0 s visited z_count == > Total 0 s present","code":"void dfs ( int i , int j , vector < vector < int > > & grid , vector < vector < bool > > & vis , int & ans , int z , int z_count ) { int n = grid . size ( ) , m = grid [ 0 ] . size ( ) ;"}
{"text":"Mark the block as visited","code":"vis [ i ] [ j ] = 1 ; if ( grid [ i ] [ j ] == 0 )"}
{"text":"update the count","code":"z ++ ;"}
{"text":"If end block reached","code":"if ( grid [ i ] [ j ] == 2 ) {"}
{"text":"If path covered all the non - obstacle blocks","code":"if ( z == z_count ) ans ++ ; vis [ i ] [ j ] = 0 ; return ; }"}
{"text":"Up","code":"if ( i >= 1 && ! vis [ i - 1 ] [ j ] && grid [ i - 1 ] [ j ] != -1 ) dfs ( i - 1 , j , grid , vis , ans , z , z_count ) ;"}
{"text":"Down","code":"if ( i < n - 1 && ! vis [ i + 1 ] [ j ] && grid [ i + 1 ] [ j ] != -1 ) dfs ( i + 1 , j , grid , vis , ans , z , z_count ) ;"}
{"text":"Left","code":"if ( j >= 1 && ! vis [ i ] [ j - 1 ] && grid [ i ] [ j - 1 ] != -1 ) dfs ( i , j - 1 , grid , vis , ans , z , z_count ) ;"}
{"text":"Right","code":"if ( j < m - 1 && ! vis [ i ] [ j + 1 ] && grid [ i ] [ j + 1 ] != -1 ) dfs ( i , j + 1 , grid , vis , ans , z , z_count ) ;"}
{"text":"Unmark the block ( unvisited )","code":"vis [ i ] [ j ] = 0 ; }"}
{"text":"Function to return the count of the unique paths","code":"int uniquePaths ( vector < vector < int > > & grid ) {"}
{"text":"int z_count = 0 ; Total 0 s present","code":"int n = grid . size ( ) , m = grid [ 0 ] . size ( ) ; int ans = 0 ; vector < vector < bool > > vis ( n , vector < bool > ( m , 0 ) ) ; int x , y ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) {"}
{"text":"Count non - obstacle blocks","code":"if ( grid [ i ] [ j ] == 0 ) z_count ++ ; else if ( grid [ i ] [ j ] == 1 ) {"}
{"text":"Starting position","code":"x = i , y = j ; } } } dfs ( x , y , grid , vis , ans , 0 , z_count ) ; return ans ; }"}
{"text":"Driver code","code":"int main ( ) { vector < vector < int > > grid { { 1 , 0 , 0 , 0 } , { 0 , 0 , 0 , 0 } , { 0 , 0 , 2 , -1 } } ; cout << uniquePaths ( grid ) ; return 0 ; }"}
{"text":"C ++ Program to find the number of unordered pairs ( x , y ) which satisfy the given equation for the array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return the number of unordered pairs satisfying the conditions","code":"int numPairs ( int a [ ] , int n ) { int ans , i , index ;"}
{"text":"ans stores the number of unordered pairs","code":"ans = 0 ;"}
{"text":"Making each value of array to positive","code":"for ( i = 0 ; i < n ; i ++ ) a [ i ] = abs ( a [ i ] ) ;"}
{"text":"Sort the array","code":"sort ( a , a + n ) ;"}
{"text":"For each index calculating the right boundary for the unordered pairs","code":"for ( i = 0 ; i < n ; i ++ ) { index = upper_bound ( a , a + n , 2 * a [ i ] ) - a ; ans += index - i - 1 ; }"}
{"text":"Return the final result","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 3 , 6 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << numPairs ( a , n ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of a square","code":"int areaOfSquare ( int S ) {"}
{"text":"Use above formula","code":"int area = S * S ; return area ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Side of square","code":"int S = 5 ;"}
{"text":"Function call","code":"cout << areaOfSquare ( S ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int maxPointOfIntersection ( int x , int y ) { int k = y * ( y - 1 ) \/ 2 ; k = k + x * ( 2 * y + x - 1 ) ; return k ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Number of circles","code":"int x = 3 ;"}
{"text":"Number of straight lines","code":"int y = 4 ;"}
{"text":"Function Call","code":"cout << ( maxPointOfIntersection ( x , y ) ) ; }"}
{"text":"C ++ program to find nth Icosihenagonal number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find Icosihenagonal number","code":"int Icosihenagonal_num ( int n ) {"}
{"text":"Formula to calculate nth Icosihenagonal number","code":"return ( 19 * n * n - 17 * n ) \/ 2 ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; cout << Icosihenagonal_num ( n ) << endl ; n = 10 ; cout << Icosihenagonal_num ( n ) << endl ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; pair < double , double > find_Centroid ( vector < pair < double , double > > & v ) { pair < double , double > ans = { 0 , 0 } ; int n = v . size ( ) ; double signedArea = 0 ;"}
{"text":"For all vertices","code":"for ( int i = 0 ; i < v . size ( ) ; i ++ ) { double x0 = v [ i ] . first , y0 = v [ i ] . second ; double x1 = v [ ( i + 1 ) % n ] . first , y1 = v [ ( i + 1 ) % n ] . second ;"}
{"text":"Calculate value of A using shoelace formula","code":"double A = ( x0 * y1 ) - ( x1 * y0 ) ; signedArea += A ;"}
{"text":"Calculating coordinates of centroid of polygon","code":"ans . first += ( x0 + x1 ) * A ; ans . second += ( y0 + y1 ) * A ; } signedArea *= 0.5 ; ans . first = ( ans . first ) \/ ( 6 * signedArea ) ; ans . second = ( ans . second ) \/ ( 6 * signedArea ) ; return ans ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Coordinate of the vertices","code":"vector < pair < double , double > > vp = { { 1 , 2 } , { 3 , -4 } , { 6 , -7 } } ; pair < double , double > ans = find_Centroid ( vp ) ; cout << setprecision ( 12 ) << ans . first << \" \u2581 \" << ans . second << ' ' ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE #define ll  long long int NEW_LINE using namespace std ;"}
{"text":"Driver code","code":"int main ( ) { int d = 10 ; double a ;"}
{"text":"according to formula derived above","code":"a = ( double ) ( 360 - ( 6 * d ) ) \/ 4 ;"}
{"text":"print all the angles","code":"cout << a << \" , \u2581 \" << a + d << \" , \u2581 \" << a + ( 2 * d ) << \" , \u2581 \" << a + ( 3 * d ) << endl ; return 0 ; }"}
{"text":"C ++ program to find the Distance between two parallel Planes in 3 D .","code":"#include <bits\/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"Function to find distance","code":"void distance ( float a1 , float b1 , float c1 , float d1 , float a2 , float b2 , float c2 , float d2 ) { float x1 , y1 , z1 , d ; if ( a1 \/ a2 == b1 \/ b2 && b1 \/ b2 == c1 \/ c2 ) { x1 = y1 = 0 ; z1 = - d1 \/ c1 ; d = fabs ( ( c2 * z1 + d2 ) ) \/ ( sqrt ( a2 * a2 + b2 * b2 + c2 * c2 ) ) ; cout << \" Perpendicular \u2581 distance \u2581 is \u2581 \" << d << endl ; } else cout << \" Planes \u2581 are \u2581 not \u2581 parallel \" ; return ; }"}
{"text":"Driver Code","code":"int main ( ) { float a1 = 1 ; float b1 = 2 ; float c1 = -1 ; float d1 = 1 ; float a2 = 3 ; float b2 = 6 ; float c2 = -3 ; float d2 = -4 ; distance ( a1 , b1 , c1 , d1 , a2 , b2 , c2 , d2 ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate factorial","code":"int factorial ( int n ) { if ( n == 0 ) return 1 ; return n * factorial ( n - 1 ) ; }"}
{"text":"Function to count number of ways to make 2 necklace having exactly N \/ 2 beads if each bead is considered different","code":"long long numOfNecklace ( int N ) {"}
{"text":"Number of ways to choose N \/ 2 beads from N beads","code":"long long ans = factorial ( N ) \/ ( factorial ( N \/ 2 ) * factorial ( N \/ 2 ) ) ;"}
{"text":"Number of ways to permute N \/ 2 beads","code":"ans = ans * factorial ( N \/ 2 - 1 ) ; ans = ans * factorial ( N \/ 2 - 1 ) ;"}
{"text":"Divide ans by 2 to remove repetitions","code":"ans \/= 2 ;"}
{"text":"Return ans","code":"return ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Input","code":"int N = 4 ;"}
{"text":"Function Call","code":"cout << numOfNecklace ( N ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if S is divisible by D while changing S to ( S + S % D )","code":"string isDivisibleByDivisor ( int S , int D ) {"}
{"text":"V ( 0 ) = S % D","code":"S %= D ;"}
{"text":"Stores the encountered values","code":"unordered_set < int > hashMap ; hashMap . insert ( S ) ; for ( int i = 0 ; i <= D ; i ++ ) {"}
{"text":"V ( i ) = ( V ( i - 1 ) + V ( i - 1 ) % D ) % D","code":"S += ( S % D ) ; S %= D ;"}
{"text":"Check if the value has already been encountered","code":"if ( hashMap . find ( S ) != hashMap . end ( ) ) {"}
{"text":"Edge Case","code":"if ( S == 0 ) { return \" Yes \" ; } return \" No \" ; }"}
{"text":"Otherwise , insert it into the hashmap","code":"else hashMap . insert ( S ) ; } return \" Yes \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int S = 3 , D = 6 ; cout << isDivisibleByDivisor ( S , D ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the number of steps required to convert ( x , y ) to ( 1 , 1 )","code":"int minimumSteps ( int x , int y ) {"}
{"text":"Store the required result","code":"int cnt = 0 ;"}
{"text":"Iterate while both x and y are not equal to 0","code":"while ( x != 0 && y != 0 ) {"}
{"text":"If x is greater than y","code":"if ( x > y ) {"}
{"text":"Update count and value of x","code":"cnt += x \/ y ; x %= y ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"Update count and value of y","code":"cnt += y \/ x ; y %= x ; } } cnt -- ;"}
{"text":"If both x and y > 1","code":"if ( x > 1 y > 1 ) cnt = -1 ;"}
{"text":"Print the result","code":"cout << cnt ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given X and Y","code":"int x = 3 , y = 1 ; minimumSteps ( x , y ) ; return 0 ; }"}
{"text":"C ++ implementation of above approach .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if A [ ] is Stack Sortable or Not .","code":"bool check ( int A [ ] , int N ) {"}
{"text":"Stack S","code":"stack < int > S ;"}
{"text":"Pointer to the end value of array B .","code":"int B_end = 0 ;"}
{"text":"Traversing each element of A [ ] from starting Checking if there is a valid operation that can be performed .","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If the stack is not empty","code":"if ( ! S . empty ( ) ) {"}
{"text":"Top of the Stack .","code":"int top = S . top ( ) ;"}
{"text":"If the top of the stack is Equal to B_end + 1 , we will pop it And increment B_end by 1.","code":"while ( top == B_end + 1 ) {"}
{"text":"if current top is equal to B_end + 1 , we will increment B_end to B_end + 1","code":"B_end = B_end + 1 ;"}
{"text":"Pop the top element .","code":"S . pop ( ) ;"}
{"text":"If the stack is empty We cannot further perfom this operation . Therefore break","code":"if ( S . empty ( ) ) { break ; }"}
{"text":"Current Top","code":"top = S . top ( ) ; }"}
{"text":"If stack is empty Push the Current element","code":"if ( S . empty ( ) ) { S . push ( A [ i ] ) ; } else { top = S . top ( ) ;"}
{"text":"If the Current element of the array A [ ] if smaller than the top of the stack We can push it in the Stack .","code":"if ( A [ i ] < top ) { S . push ( A [ i ] ) ; }"}
{"text":"Else We cannot sort the array Using any valid operations .","code":"else {"}
{"text":"Not Stack Sortable","code":"return false ; } } } else {"}
{"text":"If the stack is empty push the current element in the stack .","code":"S . push ( A [ i ] ) ; } }"}
{"text":"Stack Sortable","code":"return true ; }"}
{"text":"Driver 's Code","code":"int main ( ) { int A [ ] = { 4 , 1 , 2 , 3 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; check ( A , N ) ? cout << \" YES \" : cout << \" NO \" ; return 0 ; }"}
{"text":"C ++ program to find minimum number of reversals required to balance an expression","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced .","code":"int countMinReversals ( string expr ) { int len = expr . length ( ) ;"}
{"text":"length of expression must be even to make it balanced by using reversals .","code":"if ( len % 2 ) return -1 ;"}
{"text":"After this loop , stack contains unbalanced part of expression , i . e . , expression of the form \" } } . . } { { . . { \"","code":"stack < char > s ; for ( int i = 0 ; i < len ; i ++ ) { if ( expr [ i ] == ' } ' && ! s . empty ( ) ) { if ( s . top ( ) == ' { ' ) s . pop ( ) ; else s . push ( expr [ i ] ) ; } else s . push ( expr [ i ] ) ; }"}
{"text":"Length of the reduced expression red_len = ( m + n )","code":"int red_len = s . size ( ) ;"}
{"text":"count opening brackets at the end of stack","code":"int n = 0 ; while ( ! s . empty ( ) && s . top ( ) == ' { ' ) { s . pop ( ) ; n ++ ; }"}
{"text":"return ceil ( m \/ 2 ) + ceil ( n \/ 2 ) which is actually equal to ( m + n ) \/ 2 + n % 2 when m + n is even .","code":"return ( red_len \/ 2 + n % 2 ) ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { string expr = \" } } { { \" ; cout << countMinReversals ( expr ) ; return 0 ; }"}
{"text":"C ++ program to find minimum number of reversals required to balance an expression","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced .","code":"int countMinReversals ( string expr ) { int len = expr . length ( ) ;"}
{"text":"Expressions of odd lengths cannot be balanced","code":"if ( len % 2 != 0 ) { return -1 ; } int left_brace = 0 , right_brace = 0 ; int ans ; for ( int i = 0 ; i < len ; i ++ ) {"}
{"text":"If we find a left bracket then we simply increment the left bracket","code":"if ( expr [ i ] == ' { ' ) { left_brace ++ ; }"}
{"text":"Else if left bracket is 0 then we find unbalanced right bracket and increment right bracket or if the expression is balanced then we decrement left","code":"else { if ( left_brace == 0 ) { right_brace ++ ; } else { left_brace -- ; } } } ans = ceil ( left_brace \/ 2 ) + ceil ( right_brace \/ 2 ) ; return ans ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { string expr = \" } } { { \" ; cout << countMinReversals ( expr ) ; return 0 ; }"}
{"text":"C ++ program to print minimum number that can be formed from a given sequence of Is and Ds","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Prints the minimum number that can be formed from input sequence of I ' s \u2581 and \u2581 D ' s","code":"void PrintMinNumberForPattern ( string arr ) {"}
{"text":"Initialize current_max ( to make sure that we don 't use repeated character","code":"int curr_max = 0 ;"}
{"text":"Initialize last_entry ( Keeps track for last printed digit )","code":"int last_entry = 0 ; int j ;"}
{"text":"Iterate over input array","code":"for ( int i = 0 ; i < arr . length ( ) ; i ++ ) {"}
{"text":"Initialize ' noOfNextD ' to get count of next D 's available","code":"int noOfNextD = 0 ; switch ( arr [ i ] ) { case ' I ' :"}
{"text":"If letter is ' I ' Calculate number of next consecutive D 's  available","code":"j = i + 1 ; while ( arr [ j ] == ' D ' && j < arr . length ( ) ) { noOfNextD ++ ; j ++ ; } if ( i == 0 ) { curr_max = noOfNextD + 2 ;"}
{"text":"If ' I ' is first letter , print incremented sequence from 1","code":"cout << \" \u2581 \" << ++ last_entry ; cout << \" \u2581 \" << curr_max ;"}
{"text":"Set max digit reached","code":"last_entry = curr_max ; } else {"}
{"text":"If not first letter Get next digit to print","code":"curr_max = curr_max + noOfNextD + 1 ;"}
{"text":"Print digit for I","code":"last_entry = curr_max ; cout << \" \u2581 \" << last_entry ; }"}
{"text":"For all next consecutive ' D ' print decremented sequence","code":"for ( int k = 0 ; k < noOfNextD ; k ++ ) { cout << \" \u2581 \" << -- last_entry ; i ++ ; } break ;"}
{"text":"If letter is ' D '","code":"case ' D ' : if ( i == 0 ) {"}
{"text":"If ' D ' is first letter in sequence Find number of Next D 's available","code":"j = i + 1 ; while ( arr [ j ] == ' D ' && j < arr . length ( ) ) { noOfNextD ++ ; j ++ ; }"}
{"text":"Calculate first digit to print based on number of consecutive D 's","code":"curr_max = noOfNextD + 2 ;"}
{"text":"Print twice for the first time","code":"cout << \" \u2581 \" << curr_max << \" \u2581 \" << curr_max - 1 ;"}
{"text":"Store last entry","code":"last_entry = curr_max - 1 ; } else {"}
{"text":"If current ' D ' is not first letter Decrement last_entry","code":"cout << \" \u2581 \" << last_entry - 1 ; last_entry -- ; } break ; } } cout << endl ; }"}
{"text":"Driver program to test above","code":"int main ( ) { PrintMinNumberForPattern ( \" IDID \" ) ; PrintMinNumberForPattern ( \" I \" ) ; PrintMinNumberForPattern ( \" DD \" ) ; PrintMinNumberForPattern ( \" II \" ) ; PrintMinNumberForPattern ( \" DIDI \" ) ; PrintMinNumberForPattern ( \" IIDDD \" ) ; PrintMinNumberForPattern ( \" DDIDDIID \" ) ; return 0 ; }"}
{"text":"C ++ program to print minimum number that can be formed from a given sequence of Is and Ds","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void printLeast ( string arr ) {"}
{"text":"min_avail represents the minimum number which is still available for inserting in the output vector . pos_of_I keeps track of the most recent index where ' I ' was encountered w . r . t the output vector","code":"int min_avail = 1 , pos_of_I = 0 ;"}
{"text":"vector to store the output","code":"vector < int > v ;"}
{"text":"cover the base cases","code":"if ( arr [ 0 ] == ' I ' ) { v . push_back ( 1 ) ; v . push_back ( 2 ) ; min_avail = 3 ; pos_of_I = 1 ; } else { v . push_back ( 2 ) ; v . push_back ( 1 ) ; min_avail = 3 ; pos_of_I = 0 ; }"}
{"text":"Traverse rest of the input","code":"for ( int i = 1 ; i < arr . length ( ) ; i ++ ) { if ( arr [ i ] == ' I ' ) { v . push_back ( min_avail ) ; min_avail ++ ; pos_of_I = i + 1 ; } else { v . push_back ( v [ i ] ) ; for ( int j = pos_of_I ; j <= i ; j ++ ) v [ j ] ++ ; min_avail ++ ; } }"}
{"text":"print the number","code":"for ( int i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << \" \u2581 \" ; cout << endl ; }"}
{"text":"Driver program to check the above function","code":"int main ( ) { printLeast ( \" IDID \" ) ; printLeast ( \" I \" ) ; printLeast ( \" DD \" ) ; printLeast ( \" II \" ) ; printLeast ( \" DIDI \" ) ; printLeast ( \" IIDDD \" ) ; printLeast ( \" DDIDDIID \" ) ; return 0 ; }"}
{"text":"C ++ program to print minimum number that can be formed from a given sequence of Is and Ds","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to decode the given sequence to construct minimum number without repeated digits","code":"void PrintMinNumberForPattern ( string seq ) {"}
{"text":"result store output string","code":"string result ;"}
{"text":"create an empty stack of integers","code":"stack < int > stk ;"}
{"text":"run n + 1 times where n is length of input sequence","code":"for ( int i = 0 ; i <= seq . length ( ) ; i ++ ) {"}
{"text":"push number i + 1 into the stack","code":"stk . push ( i + 1 ) ;"}
{"text":"if all characters of the input sequence are processed or current character is ' I ' ( increasing )","code":"if ( i == seq . length ( ) seq [ i ] == ' I ' ) {"}
{"text":"run till stack is empty","code":"while ( ! stk . empty ( ) ) {"}
{"text":"remove top element from the stack and add it to solution","code":"result += to_string ( stk . top ( ) ) ; result += \" \u2581 \" ; stk . pop ( ) ; } } } cout << result << endl ; }"}
{"text":"main function","code":"int main ( ) { PrintMinNumberForPattern ( \" IDID \" ) ; PrintMinNumberForPattern ( \" I \" ) ; PrintMinNumberForPattern ( \" DD \" ) ; PrintMinNumberForPattern ( \" II \" ) ; PrintMinNumberForPattern ( \" DIDI \" ) ; PrintMinNumberForPattern ( \" IIDDD \" ) ; PrintMinNumberForPattern ( \" DDIDDIID \" ) ; return 0 ; }"}
{"text":"C ++ program of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns minimum number made from given sequence without repeating digits","code":"string getMinNumberForPattern ( string seq ) { int n = seq . length ( ) ; if ( n >= 9 ) return \" - 1\" ; string result ( n + 1 , ' \u2581 ' ) ; int count = 1 ;"}
{"text":"The loop runs for each input character as well as one additional time for assigning rank to remaining characters","code":"for ( int i = 0 ; i <= n ; i ++ ) { if ( i == n seq [ i ] == ' I ' ) { for ( int j = i - 1 ; j >= -1 ; j -- ) { result [ j + 1 ] = '0' + count ++ ; if ( j >= 0 && seq [ j ] == ' I ' ) break ; } } } return result ; }"}
{"text":"Driver Code","code":"int main ( ) { string inputs [ ] = { \" IDID \" , \" I \" , \" DD \" , \" II \" , \" DIDI \" , \" IIDDD \" , \" DDIDDIID \" } ; for ( string input : inputs ) { cout << getMinNumberForPattern ( input ) << \" STRNEWLINE \" ; } return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check prime","code":"int isPrime ( int n ) { int i , c = 0 ; for ( i = 1 ; i < n \/ 2 ; i ++ ) { if ( n % i == 0 ) c ++ ; } if ( c == 1 ) return 1 ; else return 0 ; }"}
{"text":"Function to generate smallest possible number with given digits","code":"void findMinNum ( int arr [ ] , int n ) {"}
{"text":"Declare a hash array of size 10 and initialize all the elements to zero","code":"int first = 0 , last = 0 , num , rev , i ; int hash [ 10 ] = { 0 } ;"}
{"text":"store the number of occurrences of the digits in the given array into the hash table","code":"for ( int i = 0 ; i < n ; i ++ ) { hash [ arr [ i ] ] ++ ; }"}
{"text":"Traverse the hash in ascending order to print the required number","code":"cout << \" Minimum \u2581 number : \u2581 \" ; for ( int i = 0 ; i <= 9 ; i ++ ) {"}
{"text":"Print the number of times a digits occurs","code":"for ( int j = 0 ; j < hash [ i ] ; j ++ ) cout << i ; } cout << endl ;"}
{"text":"extracting the first digit","code":"for ( i = 0 ; i <= 9 ; i ++ ) { if ( hash [ i ] != 0 ) { first = i ; break ; } }"}
{"text":"extracting the last digit","code":"for ( i = 9 ; i >= 0 ; i -- ) { if ( hash [ i ] != 0 ) { last = i ; break ; } } num = first * 10 + last ; rev = last * 10 + first ;"}
{"text":"printing the prime combinations","code":"cout << \" Prime \u2581 combinations : \u2581 \" ; if ( isPrime ( num ) && isPrime ( rev ) ) cout << num << \" \u2581 \" << rev ; else if ( isPrime ( num ) ) cout << num ; else if ( isPrime ( rev ) ) cout << rev ; else cout << \" No \u2581 combinations \u2581 exist \" ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 4 , 7 , 8 } ; findMinNum ( arr , 5 ) ; return 0 ; }"}
{"text":"C ++ program to find possible non transitive triplets btw L and R","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return gcd of a and b","code":"int gcd ( int a , int b ) { if ( a == 0 ) return b ; return gcd ( b % a , a ) ; }"}
{"text":"function to check for gcd","code":"bool coprime ( int a , int b ) {"}
{"text":"a and b are coprime if their gcd is 1.","code":"return ( gcd ( a , b ) == 1 ) ; }"}
{"text":"Checks if any possible triplet ( a , b , c ) satisfying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt","code":"void possibleTripletInRange ( int L , int R ) { bool flag = false ; int possibleA , possibleB , possibleC ;"}
{"text":"Generate and check for all possible triplets between L and R","code":"for ( int a = L ; a <= R ; a ++ ) { for ( int b = a + 1 ; b <= R ; b ++ ) { for ( int c = b + 1 ; c <= R ; c ++ ) {"}
{"text":"if we find any such triplets set flag to true","code":"if ( coprime ( a , b ) && coprime ( b , c ) && ! coprime ( a , c ) ) { flag = true ; possibleA = a ; possibleB = b ; possibleC = c ; break ; } } } }"}
{"text":"flag = True indicates that a pair exists between L and R","code":"if ( flag == true ) { cout << \" ( \" << possibleA << \" , \u2581 \" << possibleB << \" , \u2581 \" << possibleC << \" ) \" << \" \u2581 is \u2581 one \u2581 such \u2581 possible \u2581 triplet \u2581 between \u2581 \" << L << \" \u2581 and \u2581 \" << R << \" STRNEWLINE \" ; } else { cout << \" No \u2581 Such \u2581 Triplet \u2581 exists \u2581 between \u2581 \" << L << \" \u2581 and \u2581 \" << R << \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int L , R ;"}
{"text":"finding possible Triplet between 2 and 10","code":"L = 2 ; R = 10 ; possibleTripletInRange ( L , R ) ;"}
{"text":"finding possible Triplet between 23 and 46","code":"L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ; return 0 ; }"}
{"text":"CPP program to determine if A and B can be reached starting from 1 , 1 following the given steps .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check is it is possible to reach A and B starting from 1 and 1","code":"bool possibleToReach ( int a , int b ) {"}
{"text":"find the cuberoot of the number","code":"int c = cbrt ( a * b ) ;"}
{"text":"divide the number by cuberoot","code":"int re1 = a \/ c ; int re2 = b \/ c ;"}
{"text":"if it is a perfect cuberoot and divides a and b","code":"if ( ( re1 * re1 * re2 == a ) && ( re2 * re2 * re1 == b ) ) return true ; else return false ; }"}
{"text":"Driver code","code":"int main ( ) { int A = 60 , B = 450 ; if ( possibleToReach ( A , B ) ) cout << \" yes \" ; else cout << \" no \" ; return 0 ; }"}
{"text":"C ++ program to check whether a number is undulating or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isUndulating ( string n ) {"}
{"text":"Considering the definition with restriction that there should be at least 3 digits","code":"if ( n . length ( ) <= 2 ) return false ;"}
{"text":"Check if all alternate digits are same or not .","code":"for ( int i = 2 ; i < n . length ( ) ; i ++ ) if ( n [ i - 2 ] != n [ i ] ) false ; return true ; }"}
{"text":"Driver code","code":"int main ( ) { string n = \"1212121\" ; if ( isUndulating ( n ) ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"CPP program to calculate the following series","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the following series","code":"int Series ( int n ) { int i ; int sums = 0 ; for ( i = 1 ; i <= n ; i ++ ) sums += ( i * i ) ; return sums ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; int res = Series ( n ) ; cout << res << endl ; }"}
{"text":"Efficient CPP program to count numbers with last digit as k in given range .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns count of numbers with k as last digit .","code":"int countLastDigitK ( long long low , long long high , long long K ) { long long mlow = 10 * ceil ( low \/ 10.0 ) ; long long mhigh = 10 * floor ( high \/ 10.0 ) ; int count = ( mhigh - mlow ) \/ 10 ; if ( high % 10 >= K ) count ++ ; if ( low % 10 <= K && ( low % 10 ) ) count ++ ; return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int low = 3 , high = 35 , k = 3 ; cout << countLastDigitK ( low , high , k ) ; return 0 ; }"}
{"text":"CPP program to find sum of numbers divisible by 6 in a given range .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to calculate the sum of all numbers divisible by 6 in range L - R . .","code":"int sum ( int L , int R ) {"}
{"text":"no of multiples of 6 upto r","code":"int p = R \/ 6 ;"}
{"text":"no of multiples of 6 upto l - 1","code":"int q = ( L - 1 ) \/ 6 ;"}
{"text":"summation of all multiples of 6 upto r","code":"int sumR = 3 * ( p * ( p + 1 ) ) ;"}
{"text":"summation of all multiples of 6 upto l - 1","code":"int sumL = ( q * ( q + 1 ) ) * 3 ;"}
{"text":"returns the answer","code":"return sumR - sumL ; }"}
{"text":"driver program to test the above function","code":"int main ( ) { int L = 1 , R = 20 ; cout << sum ( L , R ) ; return 0 ; }"}
{"text":"C ++ program to find the largest smaller number by swapping one digit .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns largest possible number with one swap such that the number is smaller than str . It is assumed that there are leading 0 s .","code":"string prevNum ( string str ) { int len = str . length ( ) ; int index = -1 ;"}
{"text":"Traverse from right until we find a digit which is greater than its next digit . For example , in 34125 , our index is 4.","code":"for ( int i = len - 2 ; i >= 0 ; i -- ) { if ( str [ i ] > str [ i + 1 ] ) { index = i ; break ; } }"}
{"text":"We can also use binary search here as digits after index are sorted in increasing order . Find the biggest digit in the right of arr [ index ] which is smaller than arr [ index ]","code":"int smallGreatDgt = -1 ; for ( int i = len - 1 ; i > index ; i -- ) { if ( str [ i ] < str [ index ] ) { if ( smallGreatDgt == -1 ) smallGreatDgt = i ; else if ( str [ i ] >= str [ smallGreatDgt ] ) smallGreatDgt = i ; } }"}
{"text":"If index is - 1 i . e . digits are in increasing order .","code":"if ( index == -1 ) return \" - 1\" ;"}
{"text":"Swap both values","code":"if ( smallGreatDgt != -1 ) { swap ( str [ index ] , str [ smallGreatDgt ] ) ; return str ; } return \" - 1\" ; }"}
{"text":"Drivers code","code":"int main ( ) { string str = \"34125\" ; cout << prevNum ( str ) ; return 0 ; }"}
{"text":"CPP program to find sign value of a polynomial","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"returns value of poly [ 0 ] x ( n - 1 ) + poly [ 1 ] x ( n - 2 ) + . . + poly [ n - 1 ]","code":"int horner ( int poly [ ] , int n , int x ) {"}
{"text":"Evaluate value of polynomial using Horner 's method","code":"for ( int i = 1 ; i < n ; i ++ ) result = result * x + poly [ i ] ; return result ; }"}
{"text":"Returns sign value of polynomial","code":"int findSign ( int poly [ ] , int n , int x ) { int result = horner ( poly , n , x ) ; if ( result > 0 ) return 1 ; else if ( result < 0 ) return -1 ; return 0 ; }"}
{"text":"Driver program to test above function .","code":"int main ( ) {"}
{"text":"Let us evaluate value of 2 x3 - 6 x2 + 2 x - 1 for x = 3","code":"int poly [ ] = { 2 , -6 , 2 , -1 } ; int x = 3 ; int n = sizeof ( poly ) \/ sizeof ( poly [ 0 ] ) ; cout << \" Sign \u2581 of \u2581 polynomial \u2581 is \u2581 \" << findSign ( poly , n , x ) ; return 0 ; }"}
{"text":"C ++ program to find minimum number to insert in array so their sum is prime","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  100005"}
{"text":"Array to store primes","code":"bool isPrime [ MAX ] ;"}
{"text":"function to calculate primes using sieve of eratosthenes","code":"void sieveOfEratostheneses ( ) { memset ( isPrime , true , sizeof ( isPrime ) ) ; isPrime [ 1 ] = false ; for ( int i = 2 ; i * i < MAX ; i ++ ) { if ( isPrime [ i ] ) { for ( int j = 2 * i ; j < MAX ; j += i ) isPrime [ j ] = false ; } } }"}
{"text":"Find prime number greater than a number","code":"int findPrime ( int n ) { int num = n + 1 ;"}
{"text":"To return prime number greater than n","code":"while ( num ) {"}
{"text":"check if num is prime","code":"if ( isPrime [ num ] ) return num ;"}
{"text":"increment num","code":"num = num + 1 ; } return 0 ; }"}
{"text":"To find number to be added so sum of array is prime","code":"int minNumber ( int arr [ ] , int n ) {"}
{"text":"call sieveOfEratostheneses to calculate primes","code":"sieveOfEratostheneses ( ) ; int sum = 0 ;"}
{"text":"To find sum of array elements","code":"for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ; if ( isPrime [ sum ] ) return 0 ;"}
{"text":"To find prime number greater then sum","code":"int num = findPrime ( sum ) ;"}
{"text":"Return difference of sum and num","code":"return num - sum ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 6 , 8 , 12 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << minNumber ( arr , n ) ; return 0 ; }"}
{"text":"Simple C ++ program to compute sum of subarray elements","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Computes sum all sub - array","code":"long int SubArraySum ( int arr [ ] , int n ) { long int result = 0 , temp = 0 ;"}
{"text":"Pick starting point","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Pick ending point","code":"temp = 0 ; for ( int j = i ; j < n ; j ++ ) {"}
{"text":"sum subarray between current starting and ending points","code":"temp += arr [ j ] ; result += temp ; } } return result ; }"}
{"text":"driver program to test above function","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Sum \u2581 of \u2581 SubArray \u2581 : \u2581 \" << SubArraySum ( arr , n ) << endl ; return 0 ; }"}
{"text":"C ++ program to find highest power of 2 smaller than or equal to n .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int highestPowerof2 ( int n ) { int p = ( int ) log2 ( n ) ; return ( int ) pow ( 2 , p ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 ; cout << highestPowerof2 ( n ) ; return 0 ; }"}
{"text":"C ++ program to rearrange characters in a string so that no two adjacent characters are same .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX_CHAR = 26 ; struct Key {"}
{"text":"store frequency of character","code":"int freq ; char ch ;"}
{"text":"function for priority_queue to store Key according to freq","code":"bool operator< ( const Key & k ) const { return freq < k . freq ; } } ;"}
{"text":"Function to rearrange character of a string so that no char repeat twice","code":"void rearrangeString ( string str ) { int n = str . length ( ) ;"}
{"text":"Store frequencies of all characters in string","code":"int count [ MAX_CHAR ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) count [ str [ i ] - ' a ' ] ++ ;"}
{"text":"Insert all characters with their frequencies into a priority_queue","code":"priority_queue < Key > pq ; for ( char c = ' a ' ; c <= ' z ' ; c ++ ) { int val = c - ' a ' ; if ( count [ val ] ) { pq . push ( Key { count [ val ] , c } ) ; } }"}
{"text":"' str ' that will store resultant value","code":"str = \" \" ;"}
{"text":"work as the previous visited element initial previous element be . ( ' # ' and it ' s \u2581 frequency \u2581 ' - 1 ' )","code":"Key prev { -1 , ' # ' } ;"}
{"text":"traverse queue","code":"while ( ! pq . empty ( ) ) {"}
{"text":"pop top element from queue and add it to string .","code":"Key k = pq . top ( ) ; pq . pop ( ) ; str = str + k . ch ;"}
{"text":"IF frequency of previous character is less than zero that means it is useless , we need not to push it","code":"if ( prev . freq > 0 ) pq . push ( prev ) ;"}
{"text":"make current character as the previous ' char ' decrease frequency by ' one '","code":"( k . freq ) -- ; prev = k ; }"}
{"text":"If length of the resultant string and original string is not same then string is not valid","code":"if ( n != str . length ( ) ) cout << \" \u2581 Not \u2581 valid \u2581 String \u2581 \" << endl ;"}
{"text":"valid string","code":"else cout < < str << endl ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { string str = \" bbbaa \" ; rearrangeString ( str ) ; return 0 ; }"}
{"text":"C ++ program to find ( a ^ b ) mod m for a large ' a '","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"utility function to calculate a % m","code":"unsigned int aModM ( string s , unsigned int mod ) { unsigned int number = 0 ; for ( unsigned int i = 0 ; i < s . length ( ) ; i ++ ) {"}
{"text":"( s [ i ] - '0' ) gives the digit value and form the number","code":"number = ( number * 10 + ( s [ i ] - '0' ) ) ; number %= mod ; } return number ; }"}
{"text":"Returns find ( a ^ b ) % m","code":"unsigned int ApowBmodM ( string & a , unsigned int b , unsigned int m ) {"}
{"text":"Find a % m","code":"unsigned int ans = aModM ( a , m ) ; unsigned int mul = ans ;"}
{"text":"now multiply ans by b - 1 times and take mod with m","code":"for ( unsigned int i = 1 ; i < b ; i ++ ) ans = ( ans * mul ) % m ; return ans ; }"}
{"text":"Driver program to run the case","code":"int main ( ) { string a = \"987584345091051645734583954832576\" ; unsigned int b = 3 , m = 11 ; cout << ApowBmodM ( a , b , m ) ; return 0 ; }"}
{"text":"C ++ program for implementation of Lagrange 's Interpolation","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"To represent a data point corresponding to x and y = f ( x )","code":"struct Data { int x , y ; } ;"}
{"text":"function to interpolate the given data points using Lagrange 's formula xi corresponds to the new data point whose value is to be obtained n represents the number of known data points","code":"double interpolate ( Data f [ ] , int xi , int n ) {"}
{"text":"double result = 0 ; Initialize result","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Compute individual terms of above formula","code":"double term = f [ i ] . y ; for ( int j = 0 ; j < n ; j ++ ) { if ( j != i ) term = term * ( xi - f [ j ] . x ) \/ double ( f [ i ] . x - f [ j ] . x ) ; }"}
{"text":"Add current term to result","code":"result += term ; } return result ; }"}
{"text":"driver function to check the program","code":"int main ( ) {"}
{"text":"creating an array of 4 known data points","code":"Data f [ ] = { { 0 , 2 } , { 1 , 3 } , { 2 , 12 } , { 5 , 147 } } ;"}
{"text":"Using the interpolate function to obtain a data point corresponding to x = 3","code":"cout << \" Value \u2581 of \u2581 f ( 3 ) \u2581 is \u2581 : \u2581 \" << interpolate ( f , 3 , 5 ) ; return 0 ; }"}
{"text":"C ++ program to print primes smaller than n using Sieve of Sundaram .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Prints all prime numbers smaller","code":"int SieveOfSundaram ( int n ) {"}
{"text":"In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than n , we reduce n to half","code":"int nNew = ( n - 1 ) \/ 2 ;"}
{"text":"This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j","code":"bool marked [ nNew + 1 ] ;"}
{"text":"Initialize all elements as not marked","code":"memset ( marked , false , sizeof ( marked ) ) ;"}
{"text":"Main logic of Sundaram . Mark all numbers of the form i + j + 2 ij as true where 1 <= i <= j","code":"for ( int i = 1 ; i <= nNew ; i ++ ) for ( int j = i ; ( i + j + 2 * i * j ) <= nNew ; j ++ ) marked [ i + j + 2 * i * j ] = true ;"}
{"text":"Since 2 is a prime number","code":"if ( n > 2 ) cout << 2 << \" \u2581 \" ;"}
{"text":"Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .","code":"for ( int i = 1 ; i <= nNew ; i ++ ) if ( marked [ i ] == false ) cout << 2 * i + 1 << \" \u2581 \" ; }"}
{"text":"Driver program to test above","code":"int main ( void ) { int n = 20 ; SieveOfSundaram ( n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to construct an array with each element equal to XOR of all array elements except the element at the same index","code":"void constructArray ( int A [ ] , int N , int K ) {"}
{"text":"Original array","code":"int B [ N ] ;"}
{"text":"Stores Bitwise XOR of array","code":"int totalXOR = A [ 0 ] ^ K ;"}
{"text":"Calculate XOR of all array elements","code":"for ( int i = 0 ; i < N ; i ++ ) B [ i ] = totalXOR ^ A [ i ] ;"}
{"text":"Print the original array B [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) { cout << B [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int A [ ] = { 13 , 14 , 10 , 6 } , K = 2 ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ;"}
{"text":"Function Call","code":"constructArray ( A , N , K ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the extra element in B [ ]","code":"int extraElement ( int A [ ] , int B [ ] , int n ) {"}
{"text":"To store the result","code":"int ans = 0 ;"}
{"text":"Find the XOR of all the element of array A [ ] and array B [ ]","code":"for ( int i = 0 ; i < n ; i ++ ) ans ^= A [ i ] ; for ( int i = 0 ; i < n + 1 ; i ++ ) ans ^= B [ i ] ; return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int A [ ] = { 10 , 15 , 5 } ; int B [ ] = { 10 , 100 , 15 , 5 } ; int n = sizeof ( A ) \/ sizeof ( int ) ; cout << extraElement ( A , B , n ) ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate hamming distance","code":"int hammingDistance ( int n1 , int n2 ) { int x = n1 ^ n2 ; int setBits = 0 ; while ( x > 0 ) { setBits += x & 1 ; x >>= 1 ; } return setBits ; }"}
{"text":"Driver code","code":"int main ( ) { int n1 = 9 , n2 = 14 ; cout << hammingDistance ( 9 , 14 ) << endl ; return 0 ; }"}
{"text":"CPP program to print all bitwise subsets of N ( Naive approach )","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find bitwise subsets Naive approach","code":"void printSubsets ( int n ) { for ( int i = 0 ; i <= n ; i ++ ) if ( ( n & i ) == i ) cout << i << \" \u2581 \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 9 ; printSubsets ( n ) ; return 0 ; }"}
{"text":"CPP program to find MSB number for given n .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int setBitNumber ( int n ) {"}
{"text":"To find the position of the most significant set bit","code":"int k = ( int ) ( log2 ( n ) ) ;"}
{"text":"To return the the value of the number with set bit at k - th position","code":"return 1 << k ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 273 ; cout << setBitNumber ( n ) ; return 0 ; }"}
{"text":"A sorting based solution to find the minimum number of subsets of a set such that every subset contains distinct elements .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count subsets such that all subsets have distinct elements .","code":"int subset ( int ar [ ] , int n ) {"}
{"text":"Take input and initialize res = 0","code":"int res = 0 ;"}
{"text":"Sort the array","code":"sort ( ar , ar + n ) ;"}
{"text":"Traverse the input array and find maximum frequency","code":"for ( int i = 0 ; i < n ; i ++ ) { int count = 1 ;"}
{"text":"For each number find its repetition \/ frequency","code":"for ( ; i < n - 1 ; i ++ ) { if ( ar [ i ] == ar [ i + 1 ] ) count ++ ; else break ; }"}
{"text":"Update res","code":"res = max ( res , count ) ; } return res ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 5 , 6 , 9 , 3 , 4 , 3 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << subset ( arr , n ) ; return 0 ; }"}
{"text":"A hashing based solution to find the minimum number of subsets of a set such that every subset contains distinct elements .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count subsets such that all subsets have distinct elements .","code":"int subset ( int arr [ ] , int n ) {"}
{"text":"Traverse the input array and store frequencies of elements","code":"unordered_map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ arr [ i ] ] ++ ;"}
{"text":"Find the maximum value in map .","code":"int res = 0 ; for ( auto x : mp ) res = max ( res , x . second ) ; return res ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 5 , 6 , 9 , 3 , 4 , 3 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << subset ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Store perfect squares less than or equal to N","code":"vector < int > psquare ;"}
{"text":"Utility function to calculate perfect squares less than or equal to N","code":"void calcPsquare ( int N ) { for ( int i = 1 ; i * i <= N ; i ++ ) psquare . push_back ( i * i ) ; }"}
{"text":"Function to find the number of ways to represent a number as sum of perfect squares","code":"int countWays ( int index , int target ) {"}
{"text":"Handle the base cases","code":"if ( target == 0 ) return 1 ; if ( index < 0 target < 0 ) return 0 ;"}
{"text":"Include the i - th index element","code":"int inc = countWays ( index , target - psquare [ index ] ) ;"}
{"text":"Exclude the i - th index element","code":"int exc = countWays ( index - 1 , target ) ;"}
{"text":"Return the result","code":"return inc + exc ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Input","code":"int N = 9 ;"}
{"text":"Precalculate perfect squares <= N","code":"calcPsquare ( N ) ;"}
{"text":"Function Call","code":"cout << countWays ( psquare . size ( ) - 1 , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Structure of a binary tree node","code":"class TreeNode { public : int data , size ; TreeNode * left ; TreeNode * right ; } ;"}
{"text":"Function that allocates a new node with the given data and NULL to its left and right pointers","code":"TreeNode * newNode ( int data ) { TreeNode * Node = new TreeNode ( ) ; Node -> data = data ; Node -> left = NULL ; Node -> right = NULL ;"}
{"text":"Return newly created node","code":"return ( Node ) ; }"}
{"text":"Function to count the number of nodes in the left and right subtrees","code":"pair < int , int > sumofsubtree ( TreeNode * root ) {"}
{"text":"Initialize a pair that stores the pair { number of nodes , depth }","code":"pair < int , int > p = make_pair ( 1 , 0 ) ;"}
{"text":"Finding the number of nodes in the left subtree","code":"if ( root -> left ) { pair < int , int > ptemp = sumofsubtree ( root -> left ) ; p . second += ptemp . first + ptemp . second ; p . first += ptemp . first ; }"}
{"text":"Find the number of nodes in the right subtree","code":"if ( root -> right ) { pair < int , int > ptemp = sumofsubtree ( root -> right ) ; p . second += ptemp . first + ptemp . second ; p . first += ptemp . first ; }"}
{"text":"Filling up size field","code":"root -> size = p . first ; return p ; }"}
{"text":"Stores the sum of distances of all nodes from the given node","code":"int sum = 0 ;"}
{"text":"Function to find the total distance","code":"void distance ( TreeNode * root , int target , int distancesum , int n ) {"}
{"text":"If target node matches with the current node","code":"if ( root -> data == target ) { sum = distancesum ; }"}
{"text":"If root -> left is not null","code":"if ( root -> left ) {"}
{"text":"Update sum","code":"int tempsum = distancesum - root -> left -> size + ( n - root -> left -> size ) ;"}
{"text":"Recur for the left subtree","code":"distance ( root -> left , target , tempsum , n ) ; }"}
{"text":"If root -> right is not null","code":"if ( root -> right ) {"}
{"text":"Apply the formula given in the approach","code":"int tempsum = distancesum - root -> right -> size + ( n - root -> right -> size ) ;"}
{"text":"Recur for the right subtree","code":"distance ( root -> right , target , tempsum , n ) ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input tree","code":"TreeNode * root = newNode ( 1 ) ; root -> left = newNode ( 2 ) ; root -> right = newNode ( 3 ) ; root -> left -> left = newNode ( 4 ) ; root -> left -> right = newNode ( 5 ) ; root -> right -> left = newNode ( 6 ) ; root -> right -> right = newNode ( 7 ) ; root -> left -> left -> left = newNode ( 8 ) ; root -> left -> left -> right = newNode ( 9 ) ; int target = 3 ; pair < int , int > p = sumofsubtree ( root ) ;"}
{"text":"Total number of nodes","code":"int totalnodes = p . first ; distance ( root , target , p . second , totalnodes ) ;"}
{"text":"Print the sum of distances","code":"cout << sum << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to rearrange array such that sum of similar indexed elements does not exceed K","code":"void rearrangeArray ( int A [ ] , int B [ ] , int N , int K ) {"}
{"text":"Sort the array B [ ] in descending order","code":"sort ( B , B + N , greater < int > ( ) ) ; bool flag = true ; for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If condition fails","code":"if ( A [ i ] + B [ i ] > K ) { flag = false ; break ; } } if ( ! flag ) { cout << \" - 1\" << endl ; } else {"}
{"text":"Print the array","code":"for ( int i = 0 ; i < N ; i ++ ) { cout << B [ i ] << \" \u2581 \" ; } } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given arrays","code":"int A [ ] = { 1 , 2 , 3 , 4 , 2 } ; int B [ ] = { 1 , 2 , 3 , 1 , 1 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; int K = 5 ; rearrangeArray ( A , B , N , K ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  3 NEW_LINE #define M  3"}
{"text":"Function to count the number of rows whose sum exceeds the sum of elements of the remaining matrix","code":"void countRows ( int mat [ M ] [ N ] ) {"}
{"text":"To store the result","code":"int count = 0 ;"}
{"text":"Stores the total sum of the matrix elements","code":"int totalSum = 0 ;"}
{"text":"Calculate the total sum","code":"for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { totalSum += mat [ i ] [ j ] ; } }"}
{"text":"Traverse to check for each row","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Stores the sum of elements of the current row","code":"int currSum = 0 ;"}
{"text":"Calculate the sum of elements of the current row","code":"for ( int j = 0 ; j < M ; j ++ ) { currSum += mat [ i ] [ j ] ; }"}
{"text":"If sum of current row exceeds the sum of rest of the matrix","code":"if ( currSum > totalSum - currSum )"}
{"text":"Increase count","code":"count ++ ; }"}
{"text":"Print the result","code":"cout << count ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given matrix","code":"int mat [ N ] [ M ] = { { 2 , -1 , 5 } , { -3 , 0 , -2 } , { 5 , 1 , 2 } } ;"}
{"text":"Function Call","code":"countRows ( mat ) ; }"}
{"text":"C ++ implementation to check whether the array contains a set of contiguous integers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check whether the array contains a set of contiguous integers","code":"bool areElementsContiguous ( int arr [ ] , int n ) {"}
{"text":"Find maximum and minimum elements .","code":"int max = * max_element ( arr , arr + n ) ; int min = * min_element ( arr , arr + n ) ; int m = max - min + 1 ;"}
{"text":"There should be at least m elements in array to make them contiguous .","code":"if ( m > n ) return false ;"}
{"text":"Create a visited array and initialize false .","code":"bool visited [ m ] ; memset ( visited , false , sizeof ( visited ) ) ;"}
{"text":"Mark elements as true .","code":"for ( int i = 0 ; i < n ; i ++ ) visited [ arr [ i ] - min ] = true ;"}
{"text":"If any element is not marked , all elements are not contiguous .","code":"for ( int i = 0 ; i < m ; i ++ ) if ( visited [ i ] == false ) return false ; return true ; }"}
{"text":"Driver program","code":"int main ( ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; if ( areElementsContiguous ( arr , n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation to check whether the array contains a set of contiguous integers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check whether the array contains a set of contiguous integers","code":"bool areElementsContiguous ( int arr [ ] , int n ) {"}
{"text":"Storing elements of ' arr [ ] ' in a hash table ' us '","code":"unordered_set < int > us ; for ( int i = 0 ; i < n ; i ++ ) us . insert ( arr [ i ] ) ;"}
{"text":"as arr [ 0 ] is present in ' us '","code":"int count = 1 ;"}
{"text":"starting with previous smaller element of arr [ 0 ]","code":"int curr_ele = arr [ 0 ] - 1 ;"}
{"text":"if ' curr _ ele ' is present in ' us '","code":"while ( us . find ( curr_ele ) != us . end ( ) ) {"}
{"text":"increment count","code":"count ++ ;"}
{"text":"update 'curr_ele\"","code":"curr_ele -- ; }"}
{"text":"starting with next greater element of arr [ 0 ]","code":"curr_ele = arr [ 0 ] + 1 ;"}
{"text":"if ' curr _ ele ' is present in ' us '","code":"while ( us . find ( curr_ele ) != us . end ( ) ) {"}
{"text":"increment count","code":"count ++ ;"}
{"text":"update 'curr_ele\"","code":"curr_ele ++ ; }"}
{"text":"returns true if array contains a set of contiguous integers else returns false","code":"return ( count == ( int ) ( us . size ( ) ) ) ; }"}
{"text":"Driver program to test above","code":"int main ( ) { int arr [ ] = { 5 , 2 , 3 , 6 , 4 , 4 , 6 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; if ( areElementsContiguous ( arr , n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"CPP program to find longest subarray with k or less distinct elements .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to print the longest sub - array","code":"void longest ( int a [ ] , int n , int k ) { unordered_map < int , int > freq ; int start = 0 , end = 0 , now = 0 , l = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"mark the element visited","code":"freq [ a [ i ] ] ++ ;"}
{"text":"if its visited first time , then increase the counter of distinct elements by 1","code":"if ( freq [ a [ i ] ] == 1 ) now ++ ;"}
{"text":"When the counter of distinct elements increases from k , then reduce it to k","code":"while ( now > k ) {"}
{"text":"from the left , reduce the number of time of visit","code":"freq [ a [ l ] ] -- ;"}
{"text":"if the reduced visited time element is not present in further segment then decrease the count of distinct elements","code":"if ( freq [ a [ l ] ] == 0 ) now -- ;"}
{"text":"increase the subsegment mark","code":"l ++ ; }"}
{"text":"check length of longest sub - segment when greater then previous best then change it","code":"if ( i - l + 1 >= end - start + 1 ) end = i , start = l ; }"}
{"text":"print the longest sub - segment","code":"for ( int i = start ; i <= end ; i ++ ) cout << a [ i ] << \" \u2581 \" ; }"}
{"text":"driver program to test the above function","code":"int main ( ) { int a [ ] = { 6 , 5 , 1 , 2 , 3 , 2 , 1 , 4 , 5 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; int k = 3 ; longest ( a , n , k ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Comparator to sort the vector of pairs","code":"bool sortby ( const pair < int , int > & a , const pair < int , int > & b ) { if ( a . first != b . first ) return a . first < b . first ; return ( a . second < b . second ) ; }"}
{"text":"Function that returns true if any k segments overlap at any point","code":"bool kOverlap ( vector < pair < int , int > > pairs , int k ) { vector < pair < int , int > > vec ; for ( int i = 0 ; i < pairs . size ( ) ; i ++ ) {"}
{"text":"Starting points are marked by - 1 and ending points by + 1","code":"vec . push_back ( { pairs [ i ] . first , -1 } ) ; vec . push_back ( { pairs [ i ] . second , +1 } ) ; }"}
{"text":"Sort the vector by first element","code":"sort ( vec . begin ( ) , vec . end ( ) ) ;"}
{"text":"Stack to store the overlaps","code":"stack < pair < int , int > > st ; for ( int i = 0 ; i < vec . size ( ) ; i ++ ) {"}
{"text":"Get the current element","code":"pair < int , int > cur = vec [ i ] ;"}
{"text":"If it is the starting point","code":"if ( cur . second == -1 ) {"}
{"text":"Push it in the stack","code":"st . push ( cur ) ; }"}
{"text":"It is the ending point","code":"else {"}
{"text":"Pop an element from stack","code":"st . pop ( ) ; }"}
{"text":"If more than k ranges overlap","code":"if ( st . size ( ) >= k ) { return true ; } } return false ; }"}
{"text":"Driver code","code":"int main ( ) { vector < pair < int , int > > pairs ; pairs . push_back ( make_pair ( 1 , 3 ) ) ; pairs . push_back ( make_pair ( 2 , 4 ) ) ; pairs . push_back ( make_pair ( 3 , 5 ) ) ; pairs . push_back ( make_pair ( 7 , 10 ) ) ; int n = pairs . size ( ) , k = 3 ; if ( kOverlap ( pairs , k ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program to finds out smallest range that includes elements from each of the given sorted lists .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  5"}
{"text":"array for storing the current index of list i","code":"int ptr [ 501 ] ;"}
{"text":"This function takes an k sorted lists in the form of 2D array as an argument . It finds out smallest range that includes elements from each of the k lists .","code":"void findSmallestRange ( int arr [ ] [ N ] , int n , int k ) { int i , minval , maxval , minrange , minel , maxel , flag , minind ;"}
{"text":"initializing to 0 index ;","code":"for ( i = 0 ; i <= k ; i ++ ) ptr [ i ] = 0 ; minrange = INT_MAX ; while ( 1 ) {"}
{"text":"for maintaining the index of list containing the minimum element","code":"minind = -1 ; minval = INT_MAX ; maxval = INT_MIN ; flag = 0 ;"}
{"text":"iterating over all the list","code":"for ( i = 0 ; i < k ; i ++ ) {"}
{"text":"if every element of list [ i ] is traversed then break the loop","code":"if ( ptr [ i ] == n ) { flag = 1 ; break ; }"}
{"text":"find minimum value among all the list elements pointing by the ptr [ ] array","code":"if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {"}
{"text":"update the index of the list","code":"minind = i ; minval = arr [ i ] [ ptr [ i ] ] ; }"}
{"text":"find maximum value among all the list elements pointing by the ptr [ ] array","code":"if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) { maxval = arr [ i ] [ ptr [ i ] ] ; } }"}
{"text":"if any list exhaust we will not get any better answer , so break the while loop","code":"if ( flag ) break ; ptr [ minind ] ++ ;"}
{"text":"updating the minrange","code":"if ( ( maxval - minval ) < minrange ) { minel = minval ; maxel = maxval ; minrange = maxel - minel ; } } printf ( \" The \u2581 smallest \u2581 range \u2581 is \u2581 [ % d , \u2581 % d ] STRNEWLINE \" , minel , maxel ) ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int arr [ ] [ N ] = { { 4 , 7 , 9 , 12 , 15 } , { 0 , 8 , 10 , 14 , 20 } , { 6 , 12 , 16 , 30 , 50 } } ; int k = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findSmallestRange ( arr , N , k ) ; return 0 ; }"}
{"text":"CPP Program to find the largest d such that d = a + b + c","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find largest d","code":"int findLargestd ( int S [ ] , int n ) { bool found = false ;"}
{"text":"sort the array in ascending order","code":"sort ( S , S + n ) ;"}
{"text":"iterating from backwards to find the required largest d","code":"for ( int i = n - 1 ; i >= 0 ; i -- ) { for ( int j = 0 ; j < n ; j ++ ) {"}
{"text":"since all four a , b , c , d should be distinct","code":"if ( i == j ) continue ; for ( int k = j + 1 ; k < n ; k ++ ) { if ( i == k ) continue ; for ( int l = k + 1 ; l < n ; l ++ ) { if ( i == l ) continue ;"}
{"text":"if the current combination of j , k , l in the set is equal to S [ i ] return this value as this would be the largest d since we are iterating in descending order","code":"if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) { found = true ; return S [ i ] ; } } } } } if ( found == false ) return INT_MIN ; }"}
{"text":"Driver Code","code":"int main ( ) { int S [ ] = { 2 , 3 , 5 , 7 , 12 } ; int n = sizeof ( S ) \/ sizeof ( S [ 0 ] ) ; int ans = findLargestd ( S , n ) ; if ( ans == INT_MIN ) cout << \" No \u2581 Solution \" << endl ; else cout << \" Largest \u2581 d \u2581 such \u2581 that \u2581 a \u2581 + \u2581 b \u2581 + \u2581 \" << \" c \u2581 = \u2581 d \u2581 is \u2581 \" << ans << endl ; return 0 ; }"}
{"text":"A hashing based CPP program to find largest d such that a + b + c = d .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"The function finds four elements with given sum X","code":"int findFourElements ( int arr [ ] , int n ) { unordered_map < int , pair < int , int > > mp ;"}
{"text":"Store sums ( a + b ) of all pairs ( a , b ) in a hash table","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ ) mp [ arr [ i ] + arr [ j ] ] = { i , j } ;"}
{"text":"Traverse through all pairs and find ( d - c ) is present in hash table","code":"int d = INT_MIN ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int abs_diff = abs ( arr [ i ] - arr [ j ] ) ;"}
{"text":"If d - c is present in hash table ,","code":"if ( mp . find ( abs_diff ) != mp . end ( ) ) {"}
{"text":"Making sure that all elements are distinct array elements and an element is not considered more than once .","code":"pair < int , int > p = mp [ abs_diff ] ; if ( p . first != i && p . first != j && p . second != i && p . second != j ) d = max ( d , max ( arr [ i ] , arr [ j ] ) ) ; } } } return d ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int arr [ ] = { 2 , 3 , 5 , 7 , 12 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int res = findFourElements ( arr , n ) ; if ( res == INT_MIN ) cout << \" No \u2581 Solution . \" ; else cout << res ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count maximum number of elements that can be selected","code":"int CountMaximum ( int arr [ ] , int n , int k ) {"}
{"text":"Sort the array","code":"sort ( arr , arr + n ) ; int sum = 0 , count = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Add current element to the sum","code":"sum += arr [ i ] ;"}
{"text":"IF sum exceeds k","code":"if ( sum > k ) break ;"}
{"text":"Increment count","code":"count ++ ; }"}
{"text":"Return the count","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 30 , 30 , 10 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 50 ;"}
{"text":"Function call","code":"cout << CountMaximum ( arr , n , k ) ; return 0 ; }"}
{"text":"C ++ program to rotate an array by d elements","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to left Rotate arr [ ] of size n by 1","code":"void leftRotatebyOne ( int arr [ ] , int n ) { int temp = arr [ 0 ] , i ; for ( i = 0 ; i < n - 1 ; i ++ ) arr [ i ] = arr [ i + 1 ] ; arr [ n - 1 ] = temp ; }"}
{"text":"Function to left rotate arr [ ] of size n by d","code":"void leftRotate ( int arr [ ] , int d , int n ) { for ( int i = 0 ; i < d ; i ++ ) leftRotatebyOne ( arr , n ) ; }"}
{"text":"utility function to print an array","code":"void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; leftRotate ( arr , 2 , n ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to sort the array in a given index range","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to sort the elements of the array from index a to index b","code":"void partSort ( int arr [ ] , int N , int a , int b ) {"}
{"text":"Variables to store start and end of the index range","code":"int l = min ( a , b ) ; int r = max ( a , b ) ;"}
{"text":"Temporary array","code":"int temp [ r - l + 1 ] ; int j = 0 ; for ( int i = l ; i <= r ; i ++ ) { temp [ j ] = arr [ i ] ; j ++ ; }"}
{"text":"Sort the temporary array","code":"sort ( temp , temp + r - l + 1 ) ;"}
{"text":"Modifying original array with temporary array elements","code":"j = 0 ; for ( int i = l ; i <= r ; i ++ ) { arr [ i ] = temp [ j ] ; j ++ ; }"}
{"text":"Print the modified array","code":"for ( int i = 0 ; i < N ; i ++ ) { cout << arr [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 7 , 8 , 4 , 5 , 2 } ; int a = 1 ; int b = 4 ;"}
{"text":"length of the array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; partSort ( arr , N , a , b ) ; return 0 ; }"}
{"text":"C ++ implementation to sort the rows of matrix in descending order followed by sorting the columns in ascending order","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX_SIZE  10"}
{"text":"function to sort each row of the matrix according to the order specified by descending .","code":"void sortByRow ( int mat [ ] [ MAX_SIZE ] , int n , bool descending ) { for ( int i = 0 ; i < n ; i ++ ) { if ( descending == true ) sort ( mat [ i ] , mat [ i ] + n , greater < int > ( ) ) ; else sort ( mat [ i ] , mat [ i ] + n ) ; } }"}
{"text":"function to find transpose of the matrix","code":"void transpose ( int mat [ ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ )"}
{"text":"swapping element at index ( i , j ) by element at index ( j , i )","code":"swap ( mat [ i ] [ j ] , mat [ j ] [ i ] ) ; }"}
{"text":"function to sort the matrix row - wise and column - wise","code":"void sortMatRowAndColWise ( int mat [ ] [ MAX_SIZE ] , int n ) {"}
{"text":"sort rows of mat [ ] [ ] in descending order","code":"sortByRow ( mat , n , true ) ;"}
{"text":"get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ;"}
{"text":"again sort rows of mat [ ] [ ] in ascending order .","code":"sortByRow ( mat , n , false ) ;"}
{"text":"again get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ; }"}
{"text":"function to print the matrix","code":"void printMat ( int mat [ ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << mat [ i ] [ j ] << \" \u2581 \" ; cout << endl ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 3 ; int mat [ n ] [ MAX_SIZE ] = { { 3 , 2 , 1 } , { 9 , 8 , 7 } , { 6 , 5 , 4 } } ; cout << \" Original \u2581 Matrix : STRNEWLINE \" ; printMat ( mat , n ) ; sortMatRowAndColWise ( mat , n ) ; cout << \" Matrix After Sorting : \" ; printMat ( mat , n ) ; return 0 ; }"}
{"text":"A C ++ program to move all zeroes at the end of array","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function which pushes all zeros to end of an array .","code":"void pushZerosToEnd ( int arr [ ] , int n ) {"}
{"text":"Count of non - zero elements","code":"int count = 0 ;"}
{"text":"Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with this element","code":"for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 )"}
{"text":"here count is","code":"arr [ count ++ ] = arr [ i ] ;"}
{"text":"incremented Now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. Make all elements 0 from count to end .","code":"while ( count < n ) arr [ count ++ ] = 0 ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int arr [ ] = { 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; pushZerosToEnd ( arr , n ) ; cout << \" Array \u2581 after \u2581 pushing \u2581 all \u2581 zeros \u2581 to \u2581 end \u2581 of \u2581 array \u2581 : STRNEWLINE \" ; for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; return 0 ; }"}
{"text":"C ++ implementation to move all zeroes at the end of array","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function to move all zeroes at the end of array","code":"void moveZerosToEnd ( int arr [ ] , int n ) {"}
{"text":"Count of non - zero elements","code":"int count = 0 ;"}
{"text":"Traverse the array . If arr [ i ] is non - zero , then swap the element at index ' count ' with the element at index ' i '","code":"for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 ) swap ( arr [ count ++ ] , arr [ i ] ) ; }"}
{"text":"function to print the array elements","code":"void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver program to test above","code":"int main ( ) { int arr [ ] = { 0 , 1 , 9 , 8 , 4 , 0 , 0 , 2 , 7 , 0 , 6 , 0 , 9 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Original \u2581 array : \u2581 \" ; printArray ( arr , n ) ; moveZerosToEnd ( arr , n ) ; cout << \" Modified array : \" printArray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation to rearrange the array elements after modification","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function which pushes all zeros to end of an array .","code":"void pushZerosToEnd ( int arr [ ] , int n ) {"}
{"text":"Count of non - zero elements","code":"int count = 0 ;"}
{"text":"Traverse the array . If element encountered is non - zero , then replace the element at index ' count ' with this element","code":"for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] != 0 )"}
{"text":"here count is incremented","code":"arr [ count ++ ] = arr [ i ] ;"}
{"text":"Now all non - zero elements have been shifted to front and ' count ' is set as index of first 0. Make all elements 0 from count to end .","code":"while ( count < n ) arr [ count ++ ] = 0 ; }"}
{"text":"function to rearrange the array elements after modification","code":"void modifyAndRearrangeArr ( int arr [ ] , int n ) {"}
{"text":"if ' arr [ ] ' contains a single element only","code":"if ( n == 1 ) return ;"}
{"text":"traverse the array","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"if true , perform the required modification","code":"if ( ( arr [ i ] != 0 ) && ( arr [ i ] == arr [ i + 1 ] ) ) {"}
{"text":"double current index value","code":"arr [ i ] = 2 * arr [ i ] ;"}
{"text":"put 0 in the next index","code":"arr [ i + 1 ] = 0 ;"}
{"text":"increment by 1 so as to move two indexes ahead during loop iteration","code":"i ++ ; } }"}
{"text":"push all the zeros at the end of ' arr [ ] '","code":"pushZerosToEnd ( arr , n ) ; }"}
{"text":"function to print the array elements","code":"void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver program to test above","code":"int main ( ) { int arr [ ] = { 0 , 2 , 2 , 2 , 0 , 6 , 6 , 0 , 0 , 8 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Original \u2581 array : \u2581 \" ; printArray ( arr , n ) ; modifyAndRearrangeArr ( arr , n ) ; cout << \" Modified array : \" printArray ( arr , n ) ; return 0 ; }"}
{"text":"Utility Function For Swaping Two Element Of An Array","code":"void swap ( int & a , int & b ) { a = b + a - ( b = a ) ; }"}
{"text":"shift all zero to left side of an array","code":"void shiftAllZeroToLeft ( int array [ ] , int n ) {"}
{"text":"Maintain last index with positive value","code":"int lastSeenNonZero = 0 ; for ( index = 0 ; index < n ; index ++ ) {"}
{"text":"If Element is non - zero","code":"if ( array [ index ] != 0 ) {"}
{"text":"swap current index , with lastSeen non - zero","code":"swap ( array [ index ] , array [ lastSeenNonZero ] ) ;"}
{"text":"next element will be last seen non - zero","code":"lastSeenNonZero ++ ; } } }"}
{"text":"C ++ program to Rearrange positive and negative numbers in a array","code":"#include <stdio.h>"}
{"text":"A utility function to print an array of size n","code":"void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( \" % d \u2581 \" , arr [ i ] ) ; printf ( \" STRNEWLINE \" ) ; }"}
{"text":"Function to Rearrange positive and negative numbers in a array","code":"void RearrangePosNeg ( int arr [ ] , int n ) { int key , j ; for ( int i = 1 ; i < n ; i ++ ) { key = arr [ i ] ;"}
{"text":"if current element is positive do nothing","code":"if ( key > 0 ) continue ;"}
{"text":"if current element is negative , shift positive elements of arr [ 0. . i - 1 ] , to one position to their right","code":"j = i - 1 ; while ( j >= 0 && arr [ j ] > 0 ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; }"}
{"text":"Put negative element at its right position","code":"arr [ j + 1 ] = key ; } }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int arr [ ] = { -12 , 11 , -13 , -5 , 6 , -7 , 5 , -3 , -6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; RearrangePosNeg ( arr , n ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to Rearrange positive and negative numbers in a array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print an array","code":"void printArray ( int A [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << A [ i ] << \" \u2581 \" ; cout << endl ; }"}
{"text":"Function to reverse an array . An array can be reversed in O ( n ) time and O ( 1 ) space .","code":"void reverse ( int arr [ ] , int l , int r ) { if ( l < r ) { swap ( arr [ l ] , arr [ r ] ) ; reverse ( arr , ++ l , -- r ) ; } }"}
{"text":"Merges two subarrays of arr [ ] . First subarray is arr [ l . . m ] Second subarray is arr [ m + 1. . r ]","code":"void merge ( int arr [ ] , int l , int m , int r ) {"}
{"text":"Initial index of 1 st subarray","code":"int i = l ;"}
{"text":"Initial index of IInd","code":"int j = m + 1 ; while ( i <= m && arr [ i ] < 0 ) i ++ ;"}
{"text":"arr [ i . . m ] is positive","code":"while ( j <= r && arr [ j ] < 0 ) j ++ ;"}
{"text":"arr [ j . . r ] is positive reverse positive part of left sub - array ( arr [ i . . m ] )","code":"reverse ( arr , i , m ) ;"}
{"text":"reverse negative part of right sub - array ( arr [ m + 1. . j - 1 ] )","code":"reverse ( arr , m + 1 , j - 1 ) ;"}
{"text":"reverse arr [ i . . j - 1 ]","code":"reverse ( arr , i , j - 1 ) ; }"}
{"text":"Function to Rearrange positive and negative numbers in a array","code":"void RearrangePosNeg ( int arr [ ] , int l , int r ) { if ( l < r ) {"}
{"text":"Same as ( l + r ) \/ 2 , but avoids overflow for large l and h","code":"int m = l + ( r - l ) \/ 2 ;"}
{"text":"Sort first and second halves","code":"RearrangePosNeg ( arr , l , m ) ; RearrangePosNeg ( arr , m + 1 , r ) ; merge ( arr , l , m , r ) ; } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { -12 , 11 , -13 , -5 , 6 , -7 , 5 , -3 , -6 } ; int arr_size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; RearrangePosNeg ( arr , 0 , arr_size - 1 ) ; printArray ( arr , arr_size ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <iostream> NEW_LINE using namespace std ; void RearrangePosNeg ( int arr [ ] , int n ) { int i = 0 ; int j = n - 1 ; while ( true ) {"}
{"text":"Loop until arr [ i ] < 0 and still inside the array","code":"while ( arr [ i ] < 0 && i < n ) i ++ ;"}
{"text":"Loop until arr [ j ] > 0 and still inside the array","code":"while ( arr [ j ] > 0 && j >= 0 ) j -- ;"}
{"text":"if i is less than j","code":"if ( i < j ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } else break ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { -12 , 11 , -13 , -5 , 6 , -7 , 5 , -3 , -6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; RearrangePosNeg ( arr , n ) ; for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the winner of the game played based on given conditions","code":"void winner ( int arr [ ] , int N ) {"}
{"text":"A wins if size of array is odd","code":"if ( N % 2 == 1 ) { cout << \" A \" ; }"}
{"text":"Otherwise , B wins","code":"else { cout << \" B \" ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input array","code":"int arr [ ] = { 24 , 45 , 45 , 24 } ;"}
{"text":"Size of the array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; winner ( arr , N ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int sz = 20 ; const int sqr = int ( sqrt ( sz ) ) + 1 ;"}
{"text":"Function to sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all possible values of X and Y , where Y is less than or equal to sqrt ( N ) .","code":"void precomputeExpressionForAllVal ( int arr [ ] , int N , int dp [ sz ] [ sqr ] ) {"}
{"text":"Iterate over all possible values of X","code":"for ( int i = N - 1 ; i >= 0 ; i -- ) {"}
{"text":"Precompute for all possible values of an expression such that y <= sqrt ( N )","code":"for ( int j = 1 ; j <= sqrt ( N ) ; j ++ ) {"}
{"text":"If i + j less than N","code":"if ( i + j < N ) {"}
{"text":"Update dp [ i ] [ j ]","code":"dp [ i ] [ j ] = arr [ i ] + dp [ i + j ] [ j ] ; } else {"}
{"text":"Update dp [ i ] [ j ]","code":"dp [ i ] [ j ] = arr [ i ] ; } } } }"}
{"text":"Function to Find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries","code":"int querySum ( int arr [ ] , int N , int Q [ ] [ 2 ] , int M ) {"}
{"text":"dp [ x ] [ y ] : Stores sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ...","code":"int dp [ sz ] [ sqr ] ; precomputeExpressionForAllVal ( arr , N , dp ) ;"}
{"text":"Traverse the query array , Q [ ] [ ]","code":"for ( int i = 0 ; i < M ; i ++ ) { int x = Q [ i ] [ 0 ] ; int y = Q [ i ] [ 1 ] ;"}
{"text":"If y is less than or equal to sqrt ( N )","code":"if ( y <= sqrt ( N ) ) { cout << dp [ x ] [ y ] << \" \u2581 \" ; continue ; }"}
{"text":"Stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ...","code":"int sum = 0 ;"}
{"text":"Traverse the array , arr [ ]","code":"while ( x < N ) {"}
{"text":"Update sum","code":"sum += arr [ x ] ;"}
{"text":"Update x","code":"x += y ; } cout << sum << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 7 , 5 , 4 } ; int Q [ ] [ 2 ] = { { 2 , 1 } , { 3 , 2 } } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int M = sizeof ( Q ) \/ sizeof ( Q [ 0 ] ) ; querySum ( arr , N , Q , M ) ; return 0 ; }"}
{"text":"Simple C ++ program to find all elements in array which have at - least two greater elements itself .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void findElements ( int arr [ ] , int n ) {"}
{"text":"Pick elements one by one and count greater elements . If count is more than 2 , print that element .","code":"for ( int i = 0 ; i < n ; i ++ ) { int count = 0 ; for ( int j = 0 ; j < n ; j ++ ) if ( arr [ j ] > arr [ i ] ) count ++ ; if ( count >= 2 ) cout << arr [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , -6 , 3 , 5 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findElements ( arr , n ) ; return 0 ; }"}
{"text":"Sorting based C ++ program to find all elements in array which have atleast two greater elements itself .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void findElements ( int arr [ ] , int n ) { sort ( arr , arr + n ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 2 , -6 , 3 , 5 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findElements ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to find all elements in array which have atleast two greater elements itself .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void findElements ( int arr [ ] , int n ) { int first = INT_MIN , second = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If current element is smaller than first then update both first and second","code":"if ( arr [ i ] > first ) { second = first ; first = arr [ i ] ; }"}
{"text":"If arr [ i ] is in between first and second then update second","code":"else if ( arr [ i ] > second ) second = arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] < second ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , -6 , 3 , 5 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findElements ( arr , n ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of operations required to make the array non - increasing","code":"int getMinOps ( int arr [ ] , int n ) {"}
{"text":"Stores the count of required operations","code":"int res = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"If arr [ i ] > arr [ i + 1 ] , no increments required . Otherwise , add their difference to the answer","code":"res += max ( arr [ i + 1 ] - arr [ i ] , 0 ) ; }"}
{"text":"Return the result res","code":"return res ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 3 , 4 , 1 , 2 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << getMinOps ( arr , N ) ; }"}
{"text":"C ++ program to find the smallest elements missing in a sorted array .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function that returns smallest elements missing in a sorted array .","code":"int findFirstMissing ( int array [ ] , int start , int end ) { if ( start > end ) return end + 1 ; if ( start != array [ start ] ) return start ; int mid = ( start + end ) \/ 2 ;"}
{"text":"Left half has all elements from 0 to mid","code":"if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ; return findFirstMissing ( array , start , mid ) ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Smallest \u2581 missing \u2581 element \u2581 is \u2581 \" << findFirstMissing ( arr , 0 , n - 1 ) << endl ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Program to find Smallest Missing in Sorted Array","code":"int findSmallestMissinginSortedArray ( vector < int > arr ) {"}
{"text":"Check if 0 is missing in the array","code":"if ( arr [ 0 ] != 0 ) return 0 ;"}
{"text":"Check is all numbers 0 to n - 1 are prsent in array","code":"if ( arr [ arr . size ( ) - 1 ] == arr . size ( ) - 1 ) return arr . size ( ) ; int first = arr [ 0 ] ; return findFirstMissing ( arr , 0 , arr . size ( ) - 1 , first ) ; }"}
{"text":"Program to find missing element","code":"int findFirstMissing ( vector < int > arr , int start , int end , int first ) { if ( start < end ) { int mid = ( start + end ) \/ 2 ;"}
{"text":"* Index matches with value at that index , means missing element cannot be upto that po","code":"if ( arr [ mid ] != mid + first ) return findFirstMissing ( arr , start , mid , first ) ; else return findFirstMissing ( arr , mid + 1 , end , first ) ; } return start + first ; }"}
{"text":"Driver program to test the above function","code":"int main ( ) { vector < int > arr = { 0 , 1 , 2 , 3 , 4 , 5 , 7 } ; int n = arr . size ( ) ;"}
{"text":"Function Call","code":"cout << \" First \u2581 Missing \u2581 element \u2581 is \u2581 : \u2581 \" << findSmallestMissinginSortedArray ( arr ) ; }"}
{"text":"c ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return max sum such that no two elements are adjacent","code":"int FindMaxSum ( vector < int > arr , int n ) { int incl = arr [ 0 ] ; int excl = 0 ; int excl_new ; int i ; for ( i = 1 ; i < n ; i ++ ) {"}
{"text":"current max excluding i","code":"excl_new = ( incl > excl ) ? incl : excl ;"}
{"text":"current max including i","code":"incl = excl + arr [ i ] ; excl = excl_new ; }"}
{"text":"return max of incl and excl","code":"return ( ( incl > excl ) ? incl : excl ) ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { vector < int > arr = { 5 , 5 , 10 , 100 , 10 , 5 } ; cout << FindMaxSum ( arr , arr . size ( ) ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  7"}
{"text":"Function for counting minimum number of changes","code":"int countChanges ( int matrix [ ] [ N ] , int n , int m ) {"}
{"text":"Distance of elements from ( 0 , 0 ) will is i range [ 0 , n + m - 2 ]","code":"int dist = n + m - 1 ;"}
{"text":"Store frequencies of [ 0 , 9 ] at distance i","code":"int freq [ dist ] [ 10 ] ;"}
{"text":"Initialize frequencies as 0","code":"for ( int i = 0 ; i < dist ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) freq [ i ] [ j ] = 0 ; }"}
{"text":"Count frequencies of [ 0 , 9 ]","code":"for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) {"}
{"text":"Increment frequency of value matrix [ i ] [ j ] at distance i + j","code":"freq [ i + j ] [ matrix [ i ] [ j ] ] ++ ; } } int min_changes_sum = 0 ; for ( int i = 0 ; i < dist \/ 2 ; i ++ ) { int maximum = 0 ; int total_values = 0 ;"}
{"text":"Find value with max frequency and count total cells at distance i from front end and rear end","code":"for ( int j = 0 ; j < 10 ; j ++ ) { maximum = max ( maximum , freq [ i ] [ j ] + freq [ n + m - 2 - i ] [ j ] ) ; total_values += ( freq [ i ] [ j ] + freq [ n + m - 2 - i ] [ j ] ) ; }"}
{"text":"Change all values to the value with max frequency","code":"min_changes_sum += ( total_values - maximum ) ; }"}
{"text":"Return the answer","code":"return min_changes_sum ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Matrix","code":"int mat [ ] [ N ] = { { 1 , 2 } , { 3 , 5 } } ;"}
{"text":"Function Call","code":"cout << countChanges ( mat , 2 , 2 ) ; return 0 ; }"}
{"text":"C ++ program to do range minimum query using sparse table","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  500"}
{"text":"lookup [ i ] [ j ] is going to store minimum value in arr [ i . . j ] . Ideally lookup table size should not be fixed and should be determined using n Log n . It is kept constant to keep code simple .","code":"int lookup [ MAX ] [ MAX ] ;"}
{"text":"Fills lookup array lookup [ ] [ ] in bottom up manner .","code":"void buildSparseTable ( int arr [ ] , int n ) {"}
{"text":"Initialize M for the intervals with length 1","code":"for ( int i = 0 ; i < n ; i ++ ) lookup [ i ] [ 0 ] = arr [ i ] ;"}
{"text":"Compute values from smaller to bigger intervals","code":"for ( int j = 1 ; ( 1 << j ) <= n ; j ++ ) {"}
{"text":"Compute minimum value for all intervals with size 2 ^ j","code":"for ( int i = 0 ; ( i + ( 1 << j ) - 1 ) < n ; i ++ ) {"}
{"text":"For arr [ 2 ] [ 10 ] , we compare arr [ lookup [ 0 ] [ 7 ] ] and arr [ lookup [ 3 ] [ 10 ] ]","code":"if ( lookup [ i ] [ j - 1 ] < lookup [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ) lookup [ i ] [ j ] = lookup [ i ] [ j - 1 ] ; else lookup [ i ] [ j ] = lookup [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ; } } }"}
{"text":"Returns minimum of arr [ L . . R ]","code":"int query ( int L , int R ) {"}
{"text":"Find highest power of 2 that is smaller than or equal to count of elements in given range . For [ 2 , 10 ] , j = 3","code":"int j = ( int ) log2 ( R - L + 1 ) ;"}
{"text":"Compute minimum of last 2 ^ j elements with first 2 ^ j elements in range . For [ 2 , 10 ] , we compare arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ] ,","code":"if ( lookup [ L ] [ j ] <= lookup [ R - ( 1 << j ) + 1 ] [ j ] ) return lookup [ L ] [ j ] ; else return lookup [ R - ( 1 << j ) + 1 ] [ j ] ; }"}
{"text":"Driver program","code":"int main ( ) { int a [ ] = { 7 , 2 , 3 , 0 , 5 , 10 , 3 , 12 , 18 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; buildSparseTable ( a , n ) ; cout << query ( 0 , 4 ) << endl ; cout << query ( 4 , 7 ) << endl ; cout << query ( 7 , 8 ) << endl ; return 0 ; }"}
{"text":"C ++ program to do range minimum query using sparse table","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  500"}
{"text":"lookup [ i ] [ j ] is going to store GCD of arr [ i . . j ] . Ideally lookup table size should not be fixed and should be determined using n Log n . It is kept constant to keep code simple .","code":"int table [ MAX ] [ MAX ] ;"}
{"text":"it builds sparse table .","code":"void buildSparseTable ( int arr [ ] , int n ) {"}
{"text":"GCD of single element is element itself","code":"for ( int i = 0 ; i < n ; i ++ ) table [ i ] [ 0 ] = arr [ i ] ;"}
{"text":"Build sparse table","code":"for ( int j = 1 ; j <= n ; j ++ ) for ( int i = 0 ; i <= n - ( 1 << j ) ; i ++ ) table [ i ] [ j ] = __gcd ( table [ i ] [ j - 1 ] , table [ i + ( 1 << ( j - 1 ) ) ] [ j - 1 ] ) ; }"}
{"text":"Returns GCD of arr [ L . . R ]","code":"int query ( int L , int R ) {"}
{"text":"Find highest power of 2 that is smaller than or equal to count of elements in given range . For [ 2 , 10 ] , j = 3","code":"int j = ( int ) log2 ( R - L + 1 ) ;"}
{"text":"Compute GCD of last 2 ^ j elements with first 2 ^ j elements in range . For [ 2 , 10 ] , we find GCD of arr [ lookup [ 0 ] [ 3 ] ] and arr [ lookup [ 3 ] [ 3 ] ] ,","code":"return __gcd ( table [ L ] [ j ] , table [ R - ( 1 << j ) + 1 ] [ j ] ) ; }"}
{"text":"Driver program","code":"int main ( ) { int a [ ] = { 7 , 2 , 3 , 0 , 5 , 10 , 3 , 12 , 18 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; buildSparseTable ( a , n ) ; cout << query ( 0 , 2 ) << endl ; cout << query ( 1 , 3 ) << endl ; cout << query ( 4 , 5 ) << endl ; return 0 ; }"}
{"text":"C ++ program to find lexicographically minimum value after k swaps .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Modifies arr [ 0. . n - 1 ] to lexicographically smallest with k swaps .","code":"void minimizeWithKSwaps ( int arr [ ] , int n , int k ) { for ( int i = 0 ; i < n - 1 && k > 0 ; ++ i ) {"}
{"text":"Set the position where we want to put the smallest integer","code":"int pos = i ; for ( int j = i + 1 ; j < n ; ++ j ) {"}
{"text":"If we exceed the Max swaps then terminate the loop","code":"if ( j - i > k ) break ;"}
{"text":"Find the minimum value from i + 1 to max k or n","code":"if ( arr [ j ] < arr [ pos ] ) pos = j ; }"}
{"text":"Swap the elements from Minimum position we found till now to the i index","code":"for ( int j = pos ; j > i ; -- j ) swap ( arr [ j ] , arr [ j - 1 ] ) ;"}
{"text":"Set the final value after swapping pos - i elements","code":"k -= pos - i ; } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 7 , 6 , 9 , 2 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 3 ;"}
{"text":"Function calling","code":"minimizeWithKSwaps ( arr , n , k ) ;"}
{"text":"Print the final Array","code":"for ( int i = 0 ; i < n ; ++ i ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"C ++ program to find maximum average subarray of given length .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns beginning index of maximum average subarray of length ' k '","code":"int findMaxAverage ( int arr [ ] , int n , int k ) {"}
{"text":"Check if ' k ' is valid","code":"if ( k > n ) return -1 ;"}
{"text":"Create and fill array to store cumulative sum . csum [ i ] stores sum of arr [ 0 ] to arr [ i ]","code":"int * csum = new int [ n ] ; csum [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;"}
{"text":"Initialize max_sm as sum of first subarray","code":"int max_sum = csum [ k - 1 ] , max_end = k - 1 ;"}
{"text":"Find sum of other subarrays and update max_sum if required .","code":"for ( int i = k ; i < n ; i ++ ) { int curr_sum = csum [ i ] - csum [ i - k ] ; if ( curr_sum > max_sum ) { max_sum = curr_sum ; max_end = i ; } }"}
{"text":"To avoid memory leak","code":"delete [ ] csum ;"}
{"text":"Return starting index","code":"return max_end - k + 1 ; }"}
{"text":"Driver program","code":"int main ( ) { int arr [ ] = { 1 , 12 , -5 , -6 , 50 , 3 } ; int k = 4 ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" The \u2581 maximum \u2581 average \u2581 subarray \u2581 of \u2581 \" \" length \u2581 \" << k << \" \u2581 begins \u2581 at \u2581 index \u2581 \" << findMaxAverage ( arr , n , k ) ; return 0 ; }"}
{"text":"C ++ program to find maximum average subarray of given length .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns beginning index of maximum average subarray of length ' k '","code":"int findMaxAverage ( int arr [ ] , int n , int k ) {"}
{"text":"Check if ' k ' is valid","code":"if ( k > n ) return -1 ;"}
{"text":"Compute sum of first ' k ' elements","code":"int sum = arr [ 0 ] ; for ( int i = 1 ; i < k ; i ++ ) sum += arr [ i ] ; int max_sum = sum , max_end = k - 1 ;"}
{"text":"Compute sum of remaining subarrays","code":"for ( int i = k ; i < n ; i ++ ) { int sum = sum + arr [ i ] - arr [ i - k ] ; if ( sum > max_sum ) { max_sum = sum ; max_end = i ; } }"}
{"text":"Return starting index","code":"return max_end - k + 1 ; }"}
{"text":"Driver program","code":"int main ( ) { int arr [ ] = { 1 , 12 , -5 , -6 , 50 , 3 } ; int k = 4 ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" The \u2581 maximum \u2581 average \u2581 subarray \u2581 of \u2581 \" \" length \u2581 \" << k << \" \u2581 begins \u2581 at \u2581 index \u2581 \" << findMaxAverage ( arr , n , k ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Stores the minimum score for each states as map < pair < pos , myturn > , ans >","code":"map < pair < int , int > , int > m ;"}
{"text":"Function to find the minimum score after choosing element from array","code":"int findMinimum ( int a [ ] , int n , int pos , int myturn ) {"}
{"text":"Return the stored state","code":"if ( m . find ( { pos , myturn } ) != m . end ( ) ) { return m [ { pos , myturn } ] ; }"}
{"text":"Base Case","code":"if ( pos >= n ) { return 0 ; }"}
{"text":"Player A 's turn","code":"if ( ! myturn ) {"}
{"text":"Find the minimum score","code":"int ans = min ( findMinimum ( a , n , pos + 1 , ! myturn ) + a [ pos ] , findMinimum ( a , n , pos + 2 , ! myturn ) + a [ pos ] + a [ pos + 1 ] ) ;"}
{"text":"Store the current state","code":"m [ { pos , myturn } ] = ans ;"}
{"text":"Return the result","code":"return ans ; }"}
{"text":"Player B 's turn","code":"if ( myturn ) {"}
{"text":"Find minimum score","code":"int ans = min ( findMinimum ( a , n , pos + 1 , ! myturn ) , findMinimum ( a , n , pos + 2 , ! myturn ) ) ;"}
{"text":"Store the current state","code":"m [ { pos , myturn } ] = ans ;"}
{"text":"Return the result","code":"return ans ; } return 0 ; }"}
{"text":"Function that finds the minimum penality after choosing element from the given binary array","code":"int countPenality ( int arr [ ] , int N ) {"}
{"text":"Starting position of choosing element from array","code":"int pos = 0 ;"}
{"text":"0 denotes player A turn 1 denotes player B turn","code":"int turn = 0 ;"}
{"text":"Function Call","code":"return findMinimum ( arr , N , pos , turn ) ; }"}
{"text":"Print the answer for player A and B","code":"void printAnswer ( int * arr , int N ) {"}
{"text":"Minimum penalty","code":"int a = countPenality ( arr , N ) ;"}
{"text":"Calculate sum of all arr elements","code":"int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum += arr [ i ] ; }"}
{"text":"Print the minimum score","code":"cout << a ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printAnswer ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int const MAX = 1000001 ; bool prime [ MAX ] ;"}
{"text":"Function to find the prime numbers","code":"void SieveOfEratosthenes ( ) {"}
{"text":"Create a boolean array prime [ ] and initialize all entries it as true A value in prime [ i ] will finally be false if i is Not a prime","code":"memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p <= MAX ; p ++ ) {"}
{"text":"Check if prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked","code":"for ( int i = p * p ; i <= MAX ; i += p ) prime [ i ] = false ; } } }"}
{"text":"Function to get the middle index from corner indexes","code":"int getMid ( int s , int e ) { return s + ( e - s ) \/ 2 ; }"}
{"text":"Function to get the sum of values in the given range of the array","code":"int getSumUtil ( int * st , int ss , int se , int qs , int qe , int si ) {"}
{"text":"If segment of this node is a part of given range , then return the sum of the segment","code":"if ( qs <= ss && qe >= se ) return st [ si ] ;"}
{"text":"If segment of this node is outside the given range","code":"if ( se < qs ss > qe ) return 0 ;"}
{"text":"If a part of this segment overlaps with the given range","code":"int mid = getMid ( ss , se ) ; return getSumUtil ( st , ss , mid , qs , qe , 2 * si + 1 ) + getSumUtil ( st , mid + 1 , se , qs , qe , 2 * si + 2 ) ; }"}
{"text":"Function to update the nodes which have the given index in their range","code":"void updateValueUtil ( int * st , int ss , int se , int i , int diff , int si ) {"}
{"text":"If the input index lies outside the range of this segment","code":"if ( i < ss i > se ) return ;"}
{"text":"If the input index is in range of this node , then update the value of the node and its children","code":"st [ si ] = st [ si ] + diff ; if ( se != ss ) { int mid = getMid ( ss , se ) ; updateValueUtil ( st , ss , mid , i , diff , 2 * si + 1 ) ; updateValueUtil ( st , mid + 1 , se , i , diff , 2 * si + 2 ) ; } }"}
{"text":"Function to update a value in input array and segment tree","code":"void updateValue ( int arr [ ] , int * st , int n , int i , int new_val ) {"}
{"text":"Check for erroneous input index","code":"if ( i < 0 i > n - 1 ) { cout << \" - 1\" ; return ; }"}
{"text":"Get the difference between new value and old value","code":"int diff = new_val - arr [ i ] ; int prev_val = arr [ i ] ;"}
{"text":"Update the value in array","code":"arr [ i ] = new_val ;"}
{"text":"Update the values of nodes in segment tree only if either previous value or new value or both are prime","code":"if ( prime [ new_val ] prime [ prev_val ] ) {"}
{"text":"If only new value is prime","code":"if ( ! prime [ prev_val ] ) updateValueUtil ( st , 0 , n - 1 , i , new_val , 0 ) ;"}
{"text":"If only new value is prime","code":"else if ( ! prime [ new_val ] ) updateValueUtil ( st , 0 , n - 1 , i , - prev_val , 0 ) ;"}
{"text":"If both are prime","code":"else updateValueUtil ( st , 0 , n - 1 , i , diff , 0 ) ; } }"}
{"text":"Return sum of elements in range from index qs ( query start ) to qe ( query end ) . It mainly uses getSumUtil ( )","code":"int getSum ( int * st , int n , int qs , int qe ) {"}
{"text":"Check for erroneous input values","code":"if ( qs < 0 qe > n - 1 qs > qe ) { cout << \" - 1\" ; return -1 ; } return getSumUtil ( st , 0 , n - 1 , qs , qe , 0 ) ; }"}
{"text":"Function that constructs Segment Tree","code":"int constructSTUtil ( int arr [ ] , int ss , int se , int * st , int si ) {"}
{"text":"If there is one element in array , store it in current node of segment tree and return","code":"if ( ss == se ) {"}
{"text":"Only add those elements in segment tree which are prime","code":"if ( prime [ arr [ ss ] ] ) st [ si ] = arr [ ss ] ; else st [ si ] = 0 ; return st [ si ] ; }"}
{"text":"If there are more than one elements , then recur for left and right subtrees and store the sum of values in this node","code":"int mid = getMid ( ss , se ) ; st [ si ] = constructSTUtil ( arr , ss , mid , st , si * 2 + 1 ) + constructSTUtil ( arr , mid + 1 , se , st , si * 2 + 2 ) ; return st [ si ] ; }"}
{"text":"Function to construct segment tree from given array","code":"int * constructST ( int arr [ ] , int n ) {"}
{"text":"Height of segment tree","code":"int x = ( int ) ( ceil ( log2 ( n ) ) ) ;"}
{"text":"Maximum size of segment tree","code":"int max_size = 2 * ( int ) pow ( 2 , x ) - 1 ;"}
{"text":"Allocate memory","code":"int * st = new int [ max_size ] ;"}
{"text":"Fill the allocated memory st","code":"constructSTUtil ( arr , 0 , n - 1 , st , 0 ) ;"}
{"text":"Return the constructed segment tree","code":"return st ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 3 , 5 , 7 , 9 , 11 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int Q [ 3 ] [ 3 ] = { { 1 , 1 , 3 } , { 2 , 1 , 10 } , { 1 , 1 , 3 } } ;"}
{"text":"Function call","code":"SieveOfEratosthenes ( ) ;"}
{"text":"Build segment tree from given array","code":"int * st = constructST ( arr , n ) ;"}
{"text":"Print sum of values in array from index 1 to 3","code":"cout << getSum ( st , n , 1 , 3 ) << endl ;"}
{"text":"Update : set arr [ 1 ] = 10 and update corresponding segment tree nodes","code":"updateValue ( arr , st , n , 1 , 10 ) ;"}
{"text":"Find sum after the value is updated","code":"cout << getSum ( st , n , 1 , 3 ) << endl ; return 0 ; }"}
{"text":"C ++ Program to Count the number of ways to construct the target string","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int mod = 1000000007 ; int dp [ 1000 ] [ 1000 ] ; int calculate ( int pos , int prev , string s , vector < int > * index ) {"}
{"text":"base case","code":"if ( pos == s . length ( ) ) return 1 ;"}
{"text":"If current subproblem has been solved , use the value","code":"if ( dp [ pos ] [ prev ] != -1 ) return dp [ pos ] [ prev ] ;"}
{"text":"current character","code":"int c = s [ pos ] - ' a ' ;"}
{"text":"search through all the indiced at which the current character occurs . For each index greater than prev , take the index and move to the next position , and add to the answer .","code":"int answer = 0 ; for ( int i = 0 ; i < index . size ( ) ; i ++ ) { if ( index [ i ] > prev ) { answer = ( answer % mod + calculate ( pos + 1 , index [ i ] , s , index ) % mod ) % mod ; } }"}
{"text":"Store and return the solution for this subproblem","code":"return dp [ pos ] [ prev ] = answer ; } int countWays ( vector < string > & a , string s ) { int n = a . size ( ) ;"}
{"text":"preprocess the strings by storing for each character of every string , the index of their occurrence we will use a common list for all because of only the index matter in the string from which the character was picked","code":"vector < int > index [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < a [ i ] . length ( ) ; j ++ ) {"}
{"text":"we are storing j + 1 because the initial picked index in the recursive step will ne 0. This is just for ease of implementation","code":"index [ a [ i ] [ j ] - ' a ' ] . push_back ( j + 1 ) ; } }"}
{"text":"initialise dp table . - 1 represents that the subproblem hasn 't been solved","code":"memset ( dp , -1 , sizeof ( dp ) ) ; return calculate ( 0 , 0 , s , index ) ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < string > A ; A . push_back ( \" adc \" ) ; A . push_back ( \" aec \" ) ; A . push_back ( \" erg \" ) ; string S = \" ac \" ; cout << countWays ( A , S ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  100005 NEW_LINE #define MOD  1000000007"}
{"text":"To store the states of the dp","code":"int dp [ MAX ] [ 101 ] [ 2 ] ;"}
{"text":"Function to return the count of numbers from the range [ 0 , n ] whose digit sum is a multiple of k using bottom - up dp","code":"int countNum ( int idx , int sum , int tight , vector < int > num , int len , int k ) { if ( len == idx ) { if ( sum == 0 ) return 1 ; else return 0 ; } if ( dp [ idx ] [ sum ] [ tight ] != -1 ) return dp [ idx ] [ sum ] [ tight ] ; int res = 0 , limit ;"}
{"text":"The digit in this index can only be from [ 0 , num [ idx ] ]","code":"if ( tight == 0 ) { limit = num [ idx ] ; }"}
{"text":"The digit in this index can be anything from [ 0 , 9 ]","code":"else { limit = 9 ; } for ( int i = 0 ; i <= limit ; i ++ ) {"}
{"text":"new_tight is the flag value for the next position","code":"int new_tight = tight ; if ( tight == 0 && i < limit ) new_tight = 1 ; res += countNum ( idx + 1 , ( sum + i ) % k , new_tight , num , len , k ) ; res %= MOD ; }"}
{"text":"res can 't be negative","code":"if ( res < 0 ) res += MOD ; return dp [ idx ] [ sum ] [ tight ] = res ; }"}
{"text":"Function to process the string to a vector of digits from MSD to LSD","code":"vector < int > process ( string s ) { vector < int > num ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { num . push_back ( s [ i ] - '0' ) ; } return num ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"For large input number n","code":"string n = \"98765432109876543210\" ;"}
{"text":"Total number of digits in n","code":"int len = n . length ( ) ; int k = 58 ;"}
{"text":"Clean dp table","code":"memset ( dp , -1 , sizeof ( dp ) ) ;"}
{"text":"Process the string to a vector of digits from MSD to LSD","code":"vector < int > num = process ( n ) ; cout << countNum ( 0 , 0 , 0 , num , len , k ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE #define maxN  31 NEW_LINE #define maxW  31 NEW_LINE using namespace std ;"}
{"text":"3D array to store states of DP","code":"int dp [ maxN ] [ maxW ] [ maxW ] ;"}
{"text":"w1_r represents remaining capacity of 1 st knapsack w2_r represents remaining capacity of 2 nd knapsack i represents index of the array arr we are working on","code":"int maxWeight ( int * arr , int n , int w1_r , int w2_r , int i ) {"}
{"text":"Base case","code":"if ( i == n ) return 0 ; if ( dp [ i ] [ w1_r ] [ w2_r ] != -1 ) return dp [ i ] [ w1_r ] [ w2_r ] ;"}
{"text":"Variables to store the result of three parts of recurrence relation","code":"int fill_w1 = 0 , fill_w2 = 0 , fill_none = 0 ; if ( w1_r >= arr [ i ] ) fill_w1 = arr [ i ] + maxWeight ( arr , n , w1_r - arr [ i ] , w2_r , i + 1 ) ; if ( w2_r >= arr [ i ] ) fill_w2 = arr [ i ] + maxWeight ( arr , n , w1_r , w2_r - arr [ i ] , i + 1 ) ; fill_none = maxWeight ( arr , n , w1_r , w2_r , i + 1 ) ;"}
{"text":"Store the state in the 3D array","code":"dp [ i ] [ w1_r ] [ w2_r ] = max ( fill_none , max ( fill_w1 , fill_w2 ) ) ; return dp [ i ] [ w1_r ] [ w2_r ] ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Input array","code":"int arr [ ] = { 8 , 2 , 3 } ;"}
{"text":"Initializing the array with - 1","code":"memset ( dp , -1 , sizeof ( dp ) ) ;"}
{"text":"Number of elements in the array","code":"int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Capacity of knapsacks","code":"int w1 = 10 , w2 = 3 ;"}
{"text":"Function to be called","code":"cout << maxWeight ( arr , n , w1 , w2 , 0 ) ; return 0 ; }"}
{"text":"C ++ program to find sum of Bit - wise AND of all submatrices","code":"#include <iostream> NEW_LINE #include <stack> NEW_LINE using namespace std ; #define n  3"}
{"text":"Function to find prefix - count for each row from right to left","code":"void findPrefixCount ( int p_arr [ ] [ n ] , bool set_bit [ ] [ n ] ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( ! set_bit [ i ] [ j ] ) continue ; if ( j != n - 1 ) p_arr [ i ] [ j ] += p_arr [ i ] [ j + 1 ] ; p_arr [ i ] [ j ] += ( int ) set_bit [ i ] [ j ] ; } } }"}
{"text":"Function to find the number of submatrices with all 1 s","code":"int matrixAllOne ( bool set_bit [ ] [ n ] ) {"}
{"text":"Array to store required prefix count of 1 s from right to left for boolean array","code":"int p_arr [ n ] [ n ] = { 0 } ; findPrefixCount ( p_arr , set_bit ) ;"}
{"text":"Variable to store the final answer","code":"int ans = 0 ;"}
{"text":"For each index of a column , determine the number of sub - matrices starting from that index and has all 1 s","code":"for ( int j = 0 ; j < n ; j ++ ) { int i = n - 1 ;"}
{"text":"Stack to store elements and the count of the numbers they popped First part of pair is value of inserted element Second part is count of the number of elements pushed before with a greater value","code":"stack < pair < int , int > > q ;"}
{"text":"variable to store the number of submatrices with all 1 s","code":"int to_sum = 0 ; while ( i >= 0 ) { int c = 0 ; while ( q . size ( ) != 0 and q . top ( ) . first > p_arr [ i ] [ j ] ) { to_sum -= ( q . top ( ) . second + 1 ) * ( q . top ( ) . first - p_arr [ i ] [ j ] ) ; c += q . top ( ) . second + 1 ; q . pop ( ) ; } to_sum += p_arr [ i ] [ j ] ; ans += to_sum ; q . push ( { p_arr [ i ] [ j ] , c } ) ; i -- ; } } return ans ; }"}
{"text":"Function to find the sum of Bitwise - AND of all submatrices","code":"int sumAndMatrix ( int arr [ ] [ n ] ) { int sum = 0 ; int mul = 1 ; for ( int i = 0 ; i < 30 ; i ++ ) {"}
{"text":"matrix to store the status of ith bit of each element of matrix arr","code":"bool set_bit [ n ] [ n ] ; for ( int R = 0 ; R < n ; R ++ ) for ( int C = 0 ; C < n ; C ++ ) set_bit [ R ] [ C ] = ( ( arr [ R ] [ C ] & ( 1 << i ) ) != 0 ) ; sum += ( mul * matrixAllOne ( set_bit ) ) ; mul *= 2 ; } return sum ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] [ n ] = { { 9 , 7 , 4 } , { 8 , 9 , 2 } , { 11 , 11 , 5 } } ; cout << sumAndMatrix ( arr ) ; return 0 ; }"}
{"text":"Bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed","code":"#include <iostream> NEW_LINE using namespace std ; int CountWays ( int n ) {"}
{"text":"noOfWays [ i ] will store count for last 3 values before i .","code":"int noOfWays [ 3 ] ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 1 + 1 ;"}
{"text":"Loop till \" n + 1\" to compute value for \" n \"","code":"for ( int i = 3 ; i < n + 1 ; i ++ ) { noOfWays [ i ] ="}
{"text":"number of ways if first run is 1","code":"noOfWays [ 3 - 1 ]"}
{"text":"number of ways if first run is 2 and second run is 1","code":"+ noOfWays [ 3 - 3 ] ;"}
{"text":"Remember last 3 values","code":"noOfWays [ 0 ] = noOfWays [ 1 ] ; noOfWays [ 1 ] = noOfWays [ 2 ] ; noOfWays [ 2 ] = noOfWays [ i ] ; } return noOfWays [ n ] ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 5 ; cout << CountWays ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  105 NEW_LINE void sieve ( int prime [ ] ) { for ( int i = 2 ; i * i <= MAX ; i ++ ) { if ( prime [ i ] == 0 ) { for ( int j = i * i ; j <= MAX ; j += i ) prime [ j ] = 1 ; } } }"}
{"text":"Depth First Search","code":"void dfs ( int i , int j , int k , int * q , int n , int m , int mappedMatrix [ ] [ MAX ] , int mark [ ] [ MAX ] , pair < int , int > ans [ ] ) {"}
{"text":"Return if cell contain non prime number or obstacle , or going out of matrix or already visited the cell or already found the lexicographical largest path","code":"if ( mappedMatrix [ i ] [ j ] == 0 || i > n || j > m || mark [ i ] [ j ] || ( * q ) ) return ;"}
{"text":"marking cell is already visited","code":"mark [ i ] [ j ] = 1 ;"}
{"text":"storing the lexicographical largest path index","code":"ans [ k ] = make_pair ( i , j ) ;"}
{"text":"if reached the end of the matrix","code":"if ( i == n && j == m ) {"}
{"text":"updating the final number of steps in lexicographical largest path","code":"( * q ) = k ; return ; }"}
{"text":"moving diagonal ( trying lexicographical largest path )","code":"dfs ( i + 1 , j + 1 , k + 1 , q , n , m , mappedMatrix , mark , ans ) ;"}
{"text":"moving cell right to current cell","code":"dfs ( i + 1 , j , k + 1 , q , n , m , mappedMatrix , mark , ans ) ;"}
{"text":"moving cell down to current cell .","code":"dfs ( i , j + 1 , k + 1 , q , n , m , mappedMatrix , mark , ans ) ; }"}
{"text":"Print lexicographical largest prime path","code":"void lexicographicalPath ( int n , int m , int mappedMatrix [ ] [ MAX ] ) {"}
{"text":"to count the number of step in lexicographical largest prime path","code":"int q = 0 ;"}
{"text":"to store the lexicographical largest prime path index","code":"pair < int , int > ans [ MAX ] ;"}
{"text":"to mark if the cell is already traversed or not","code":"int mark [ MAX ] [ MAX ] ;"}
{"text":"traversing by DFS","code":"dfs ( 1 , 1 , 1 , & q , n , m , mappedMatrix , mark , ans ) ;"}
{"text":"printing the lexicographical largest prime path","code":"for ( int i = 1 ; i <= q ; i ++ ) cout << ans [ i ] . first << \" \u2581 \" << ans [ i ] . second << \" STRNEWLINE \" ; }"}
{"text":"Return the number of prime path in ther matrix .","code":"void countPrimePath ( int mappedMatrix [ ] [ MAX ] , int n , int m ) { int dp [ MAX ] [ MAX ] = { 0 } ; dp [ 1 ] [ 1 ] = 1 ;"}
{"text":"for each cell","code":"for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 1 ; j <= m ; j ++ ) {"}
{"text":"If on the top row or leftmost column , there is no path there .","code":"if ( i == 1 && j == 1 ) continue ; dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] + dp [ i - 1 ] [ j - 1 ] ) ;"}
{"text":"If non prime number","code":"if ( mappedMatrix [ i ] [ j ] == 0 ) dp [ i ] [ j ] = 0 ; } } cout << dp [ n ] [ m ] << \" STRNEWLINE \" ; }"}
{"text":"Finding the matrix mapping by considering non prime number as obstacle and prime number be valid path .","code":"void preprocessMatrix ( int mappedMatrix [ ] [ MAX ] , int a [ ] [ MAX ] , int n , int m ) { int prime [ MAX ] ;"}
{"text":"Sieve","code":"sieve ( prime ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) {"}
{"text":"If prime","code":"if ( prime [ a [ i ] [ j ] ] == 0 ) mappedMatrix [ i + 1 ] [ j + 1 ] = 1 ;"}
{"text":"if non prime","code":"else mappedMatrix [ i + 1 ] [ j + 1 ] = 0 ; } } }"}
{"text":"Driver code","code":"int main ( ) { int n = 3 ; int m = 3 ; int a [ MAX ] [ MAX ] = { { 2 , 3 , 7 } , { 5 , 4 , 2 } , { 3 , 7 , 11 } } ; int mappedMatrix [ MAX ] [ MAX ] = { 0 } ; preprocessMatrix ( mappedMatrix , a , n , m ) ; countPrimePath ( mappedMatrix , n , m ) ; lexicographicalPath ( n , m , mappedMatrix ) ; return 0 ; }"}
{"text":"A Dynamic Programming solution for subset sum problem + maximal subset value .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns size of maximum sized subset if there is a subset of set [ ] with sun equal to given sum . It returns - 1 if there is no subset with given sum .","code":"int isSubsetSum ( int set [ ] , int n , int sum ) {"}
{"text":"The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i","code":"bool subset [ sum + 1 ] [ n + 1 ] ; int count [ sum + 1 ] [ n + 1 ] ;"}
{"text":"If sum is 0 , then answer is true","code":"for ( int i = 0 ; i <= n ; i ++ ) { subset [ 0 ] [ i ] = true ; count [ 0 ] [ i ] = 0 ; }"}
{"text":"If sum is not 0 and set is empty , then answer is false","code":"for ( int i = 1 ; i <= sum ; i ++ ) { subset [ i ] [ 0 ] = false ; count [ i ] [ 0 ] = -1 ; }"}
{"text":"Fill the subset table in bottom up manner","code":"for ( int i = 1 ; i <= sum ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) { subset [ i ] [ j ] = subset [ i ] [ j - 1 ] ; count [ i ] [ j ] = count [ i ] [ j - 1 ] ; if ( i >= set [ j - 1 ] ) { subset [ i ] [ j ] = subset [ i ] [ j ] || subset [ i - set [ j - 1 ] ] [ j - 1 ] ; if ( subset [ i ] [ j ] ) count [ i ] [ j ] = max ( count [ i ] [ j - 1 ] , count [ i - set [ j - 1 ] ] [ j - 1 ] + 1 ) ; } } } return count [ sum ] [ n ] ; }"}
{"text":"Driver code","code":"int main ( ) { int set [ ] = { 2 , 3 , 5 , 10 } ; int sum = 20 ; int n = 4 ; cout << isSubsetSum ( set , n , sum ) ; }"}
{"text":"C ++ program to find all LCS of two strings in sorted order .","code":"#include <bits\/stdc++.h> NEW_LINE #define MAX  100 NEW_LINE using namespace std ;"}
{"text":"length of lcs","code":"int lcslen = 0 ;"}
{"text":"dp matrix to store result of sub calls for lcs","code":"int dp [ MAX ] [ MAX ] ;"}
{"text":"A memoization based function that returns LCS of str1 [ i . . len1 - 1 ] and str2 [ j . . len2 - 1 ]","code":"int lcs ( string str1 , string str2 , int len1 , int len2 , int i , int j ) { int & ret = dp [ i ] [ j ] ;"}
{"text":"base condition","code":"if ( i == len1 j == len2 ) return ret = 0 ;"}
{"text":"if lcs has been computed","code":"if ( ret != -1 ) return ret ; ret = 0 ;"}
{"text":"if characters are same return previous + 1 else max of two sequences after removing i ' th \u2581 and \u2581 j ' th char one by one","code":"if ( str1 [ i ] == str2 [ j ] ) ret = 1 + lcs ( str1 , str2 , len1 , len2 , i + 1 , j + 1 ) ; else ret = max ( lcs ( str1 , str2 , len1 , len2 , i + 1 , j ) , lcs ( str1 , str2 , len1 , len2 , i , j + 1 ) ) ; return ret ; }"}
{"text":"Function to print all routes common sub - sequences of length lcslen","code":"void printAll ( string str1 , string str2 , int len1 , int len2 , char data [ ] , int indx1 , int indx2 , int currlcs ) {"}
{"text":"if currlcs is equal to lcslen then print it","code":"if ( currlcs == lcslen ) { data [ currlcs ] = ' \\0' ; puts ( data ) ; return ; }"}
{"text":"if we are done with all the characters of both string","code":"if ( indx1 == len1 indx2 == len2 ) return ;"}
{"text":"here we have to print all sub - sequences lexicographically , that ' s \u2581 why \u2581 we \u2581 start \u2581 from \u2581 ' a ' to ' z ' if this character is  present in both of them then append it in data[] and same  remaining part","code":"for ( char ch = ' a ' ; ch <= ' z ' ; ch ++ ) {"}
{"text":"done is a flag to tell that we have printed all the subsequences corresponding to current character","code":"bool done = false ; for ( int i = indx1 ; i < len1 ; i ++ ) {"}
{"text":"if character ch is present in str1 then check if it is present in str2","code":"if ( ch == str1 [ i ] ) { for ( int j = indx2 ; j < len2 ; j ++ ) {"}
{"text":"if ch is present in both of them and remaining length is equal to remaining lcs length then add ch in sub - sequenece","code":"if ( ch == str2 [ j ] && dp [ i ] [ j ] == lcslen - currlcs ) { data [ currlcs ] = ch ; printAll ( str1 , str2 , len1 , len2 , data , i + 1 , j + 1 , currlcs + 1 ) ; done = true ; break ; } } }"}
{"text":"If we found LCS beginning with current character .","code":"if ( done ) break ; } } }"}
{"text":"This function prints all LCS of str1 and str2 in lexicographic order .","code":"void prinlAllLCSSorted ( string str1 , string str2 ) {"}
{"text":"Find lengths of both strings","code":"int len1 = str1 . length ( ) , len2 = str2 . length ( ) ;"}
{"text":"Find length of LCS","code":"memset ( dp , -1 , sizeof ( dp ) ) ; lcslen = lcs ( str1 , str2 , len1 , len2 , 0 , 0 ) ;"}
{"text":"Print all LCS using recursive backtracking data [ ] is used to store individual LCS .","code":"char data [ MAX ] ; printAll ( str1 , str2 , len1 , len2 , data , 0 , 0 , 0 ) ; }"}
{"text":"Driver program to run the case","code":"int main ( ) { string str1 = \" abcabcaa \" , str2 = \" acbacba \" ; prinlAllLCSSorted ( str1 , str2 ) ; return 0 ; }"}
{"text":"C ++ Program to check for majority element in a sorted array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isMajority ( int arr [ ] , int n , int x ) { int i ;"}
{"text":"get last index according to n ( even or odd )","code":"int last_index = n % 2 ? ( n \/ 2 + 1 ) : ( n \/ 2 ) ;"}
{"text":"search for first occurrence of x in arr [ ]","code":"for ( i = 0 ; i < last_index ; i ++ ) {"}
{"text":"check if x is present and is present more than n \/ 2 times","code":"if ( arr [ i ] == x && arr [ i + n \/ 2 ] == x ) return 1 ; } return 0 ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 4 , 4 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int x = 4 ; if ( isMajority ( arr , n , x ) ) cout << x << \" \u2581 appears \u2581 more \u2581 than \u2581 \" << n \/ 2 << \" \u2581 times \u2581 in \u2581 arr [ ] \" << endl ; else cout << x << \" \u2581 does \u2581 not \u2581 appear \u2581 more \u2581 than \" << n \/ 2 << \" \u2581 times \u2581 in \u2581 arr [ ] \" << endl ; return 0 ; }"}
{"text":"C ++ program to check for majority element in a sorted array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"If x is present in arr [ low ... high ] then returns the index of first occurrence of x , otherwise returns - 1","code":"int _binarySearch ( int arr [ ] , int low , int high , int x ) { if ( high >= low ) { int mid = ( low + high ) \/ 2 ;"}
{"text":"Check if arr [ mid ] is the first occurrence of x . arr [ mid ] is first occurrence if x is one of the following is true : ( i ) mid == 0 and arr [ mid ] = = x ( ii ) arr [ mid - 1 ] < x and arr [ mid ] == x","code":"if ( ( mid == 0 x > arr [ mid - 1 ] ) && ( arr [ mid ] == x ) ) return mid ; else if ( x > arr [ mid ] ) return _binarySearch ( arr , ( mid + 1 ) , high , x ) ; else return _binarySearch ( arr , low , ( mid - 1 ) , x ) ; } return -1 ; }"}
{"text":"This function returns true if the x is present more than n \/ 2 times in arr [ ] of size n","code":"bool isMajority ( int arr [ ] , int n , int x ) {"}
{"text":"Find the index of first occurrence of x in arr [ ]","code":"int i = _binarySearch ( arr , 0 , n - 1 , x ) ;"}
{"text":"If element is not present at all , return false","code":"if ( i == -1 ) return false ;"}
{"text":"Check if the element is present more than n \/ 2 times","code":"if ( ( ( i + n \/ 2 ) <= ( n - 1 ) ) && arr [ i + n \/ 2 ] == x ) return true ; else return false ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 3 , 3 , 3 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int x = 3 ; if ( isMajority ( arr , n , x ) ) cout << x << \" \u2581 appears \u2581 more \u2581 than \u2581 \" << n \/ 2 << \" \u2581 times \u2581 in \u2581 arr [ ] \" << endl ; else cout << x << \" \u2581 does \u2581 not \u2581 appear \u2581 more \u2581 than \" << n \/ 2 << \" \u2581 times \u2581 in \u2581 arr [ ] \" << endl ; return 0 ; }"}
{"text":"A Dynamic Programming solution for Rod cutting problem","code":"#include <iostream> NEW_LINE #include <bits\/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"A utility function to get the maximum of two integers","code":"int max ( int a , int b ) { return ( a > b ) ? a : b ; }"}
{"text":"Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces","code":"int cutRod ( int price [ ] , int n ) { int val [ n + 1 ] ; val [ 0 ] = 0 ; int i , j ;"}
{"text":"Build the table val [ ] in bottom up manner and return the last entry from the table","code":"for ( i = 1 ; i <= n ; i ++ ) { int max_val = INT_MIN ; for ( j = 0 ; j < i ; j ++ ) max_val = max ( max_val , price [ j ] + val [ i - j - 1 ] ) ; val [ i ] = max_val ; } return val [ n ] ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int arr [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Maximum \u2581 Obtainable \u2581 Value \u2581 is \u2581 \" << cutRod ( arr , size ) ; getchar ( ) ; return 0 ; }"}
{"text":"CPP program for above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Global Array for the purpose of memoization .","code":"int t [ 9 ] [ 9 ] ;"}
{"text":"A recursive program , using , memoization , to implement the rod cutting problem ( Top - Down ) .","code":"int un_kp ( int price [ ] , int length [ ] , int Max_len , int n ) {"}
{"text":"The maximum price will be zero , when either the length of the rod is zero or price is zero .","code":"if ( n == 0 Max_len == 0 ) { return 0 ; }"}
{"text":"If the length of the rod is less than the maximum length , Max_lene will consider it . Now depending upon the profit , either Max_lene we will take it or discard it .","code":"if ( length [ n - 1 ] <= Max_len ) { t [ n ] [ Max_len ] = max ( price [ n - 1 ] + un_kp ( price , length , Max_len - length [ n - 1 ] , n ) , un_kp ( price , length , Max_len , n - 1 ) ) ; }"}
{"text":"If the length of the rod is greater than the permitted size , Max_len we will not consider it .","code":"else { t [ n ] [ Max_len ] = un_kp ( price , length , Max_len , n - 1 ) ; }"}
{"text":"Max_lene Max_lenill return the maximum value obtained , Max_lenhich is present at the nth roMax_len and Max_lenth column .","code":"return t [ n ] [ Max_len ] ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int price [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int n = sizeof ( price ) \/ sizeof ( price [ 0 ] ) ; int length [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { length [ i ] = i + 1 ; } int Max_len = n ;"}
{"text":"Function Call","code":"cout << \" Maximum \u2581 obtained \u2581 value \u2581 is \u2581 \" << un_kp ( price , length , n , Max_len ) << endl ; }"}
{"text":"CPP program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the arr [ ] can be converted to target [ ] by replacing any element in arr [ ] by the sum of arr [ ]","code":"bool isPossible ( int target [ ] , int n ) {"}
{"text":"Store the maximum element","code":"int max = 0 ;"}
{"text":"Store the index of the maximum element","code":"int index = 0 ;"}
{"text":"Traverse the array target [ ]","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If current element is greater than max","code":"if ( max < target [ i ] ) { max = target [ i ] ; index = i ; } }"}
{"text":"If max element is 1","code":"if ( max == 1 ) return true ;"}
{"text":"Traverse the array , target [ ]","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If current index is not equal to maximum element index","code":"if ( i != index ) {"}
{"text":"Update max","code":"max -= target [ i ] ;"}
{"text":"If max is less than or equal to 0 ,","code":"if ( max <= 0 ) return false ; } }"}
{"text":"Update the maximum element","code":"target [ index ] = max ;"}
{"text":"Recursively call the function","code":"return isPossible ( target , n ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int target [ ] = { 9 , 3 , 5 } ;"}
{"text":"Size of the array","code":"int n = sizeof ( target ) \/ sizeof ( target [ 0 ] ) ; bool res = isPossible ( target , n ) ; if ( res ) { cout << \" YES \" ; } else { cout << \" NO \" ; } return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function returns nCr i . e . Binomial Coefficient","code":"int nCr ( int n , int r ) {"}
{"text":"Initialize res with 1","code":"int res = 1 ;"}
{"text":"Since C ( n , r ) = C ( n , n - r )","code":"if ( r > n - r ) r = n - r ;"}
{"text":"Evaluating expression","code":"for ( int i = 0 ; i < r ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 , m = 2 , k = 2 ; cout << nCr ( n + m , k ) ; return 0 ; }"}
{"text":"C ++ program to check if N can be obtained from 1 by repetitive multiplication by 10 or 20","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if N can be obtained or not","code":"void Is_possible ( long long int N ) { int C = 0 ; int D = 0 ;"}
{"text":"Count and remove trailing zeroes","code":"while ( N % 10 == 0 ) { N = N \/ 10 ; C += 1 ; }"}
{"text":"Check if remaining N is a power of 2","code":"if ( pow ( 2 , ( int ) log2 ( N ) ) == N ) { D = ( int ) log2 ( N ) ;"}
{"text":"To check the condition to print YES or NO","code":"if ( C >= D ) cout << \" YES \" ; else cout << \" NO \" ; } else cout << \" NO \" ; }"}
{"text":"Driver code","code":"int main ( ) { long long int N = 2000000000000 ; Is_possible ( N ) ; }"}
{"text":"C ++ program to find N - th term in the series","code":"#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"Function to find N - th term in the series","code":"void findNthTerm ( int n ) { cout << n * n - n + 1 << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 4 ; findNthTerm ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Iterative function to reverse digits of num","code":"int rev ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num \/ 10 ; }"}
{"text":"Return the reversed num","code":"return rev_num ; }"}
{"text":"Function to calculate sum of reverse all proper divisors","code":"int divSum ( int num ) {"}
{"text":"Final result of summation of divisors","code":"int result = 0 ;"}
{"text":"Find all divisors of num","code":"for ( int i = 2 ; i <= sqrt ( num ) ; i ++ ) {"}
{"text":"If ' i ' is divisor of ' num '","code":"if ( num % i == 0 ) {"}
{"text":"If both divisors are same then add it only once else add both","code":"if ( i == ( num \/ i ) ) result += rev ( i ) ; else result += ( rev ( i ) + rev ( num \/ i ) ) ; } }"}
{"text":"Add 1 to the result as 1 is also a divisor","code":"return ( result + 1 ) ; }"}
{"text":"Function to check if N is anti - perfect or not","code":"bool isAntiPerfect ( int n ) { return divSum ( n ) == n ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Number N","code":"int N = 244 ;"}
{"text":"Function Call","code":"if ( isAntiPerfect ( N ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation to print the N terms of the series whose three terms are given","code":"#include \" bits \/ stdc + + . h \" NEW_LINE using namespace std ;"}
{"text":"Function to print the series","code":"void printSeries ( int n , int a , int b , int c ) { int d ;"}
{"text":"Generate the ith term and print it","code":"if ( n == 1 ) { cout << a << \" \u2581 \" ; return ; } if ( n == 2 ) { cout << a << \" \u2581 \" << b << \" \u2581 \" ; return ; } cout << a << \" \u2581 \" << b << \" \u2581 \" << c << \" \u2581 \" ; for ( int i = 4 ; i <= n ; i ++ ) { d = a + b + c ; cout << d << \" \u2581 \" ; a = b ; b = c ; c = d ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 7 , a = 1 , b = 3 ; int c = 4 ;"}
{"text":"Function Call","code":"printSeries ( N , a , b , c ) ; return 0 ; }"}
{"text":"Function to find diameter of BIT with N + 1 nodes","code":"int diameter ( int n ) {"}
{"text":"L is size of subtree just before subtree in which N lies","code":"int L , H , templen ; L = 1 ;"}
{"text":"H is the height of subtree just before subtree in which N lies","code":"H = 0 ;"}
{"text":"Base Cases","code":"if ( n == 1 ) { return 1 ; } if ( n == 2 ) { return 2 ; } if ( n == 3 ) { return 3 ; }"}
{"text":"Size of subtree are power of 2","code":"while ( L * 2 <= n ) { L *= 2 ; H ++ ; }"}
{"text":"3 Cases as explained in Approach","code":"if ( n >= L * 2 - 1 ) return 2 * H + 1 ; else if ( n >= L + ( L \/ 2 ) - 1 ) return 2 * H ; return 2 * H - 1 ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 15 ; cout << diameter ( n ) << endl ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find whether a ^ b is greater or c ^ d","code":"void compareValues ( int a , int b , int c , int d ) {"}
{"text":"Find b * log ( a )","code":"double log1 = log10 ( a ) ; double num1 = log1 * b ;"}
{"text":"Find d * log ( c )","code":"double log2 = log10 ( c ) ; double num2 = log2 * d ;"}
{"text":"Compare both values","code":"if ( num1 > num2 ) cout << a << \" ^ \" << b ; else cout << c << \" ^ \" << d ; }"}
{"text":"Driver code","code":"int main ( ) { int a = 8 , b = 29 , c = 60 , d = 59 ; compareValues ( a , b , c , d ) ; }"}
{"text":"Find all prime numbers","code":"vector < int > addPrimes ( ) { int n = MAX ; bool prime [ n + 1 ] ; memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p <= n ; p ++ ) { if ( prime [ p ] == true ) { for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } } vector < int > ans ;"}
{"text":"Store all prime numbers","code":"for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) ans . push_back ( p ) ; return ans ; }"}
{"text":"Function to check if a digit is odd prime or not","code":"bool is_prime ( int n ) { return ( n == 3 n == 5 n == 7 ) ; }"}
{"text":"Function to find sum","code":"int find_Sum ( int n ) {"}
{"text":"To store required answer","code":"int sum = 0 ;"}
{"text":"Get all prime numbers","code":"vector < int > v = addPrimes ( ) ;"}
{"text":"Traverse through all the prime numbers","code":"for ( int i = 0 ; i < v . size ( ) and n ; i ++ ) {"}
{"text":"Flag stores 1 if a number does not contain any odd primes","code":"int flag = 1 ; int a = v [ i ] ;"}
{"text":"Find all digits of a number","code":"while ( a != 0 ) { int d = a % 10 ; a = a \/ 10 ; if ( is_prime ( d ) ) { flag = 0 ; break ; } }"}
{"text":"If number does not contain any odd primes","code":"if ( flag == 1 ) { n -- ; sum = sum + v [ i ] ; } }"}
{"text":"Return the required answer","code":"return sum ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 7 ;"}
{"text":"Function call","code":"cout << find_Sum ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of primes in the given array","code":"int primeCount ( int arr [ ] , int n ) {"}
{"text":"Find maximum value in the array","code":"int max_val = * max_element ( arr , arr + n ) ;"}
{"text":"USE SIEVE TO FIND ALL PRIME NUMBERS LESS THAN OR EQUAL TO max_val Create a boolean array \" prime [ 0 . . n ] \" . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"vector < bool > prime ( max_val + 1 , true ) ;"}
{"text":"Remaining part of SIEVE","code":"prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= max_val ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( int i = p * 2 ; i <= max_val ; i += p ) prime [ i ] = false ; } }"}
{"text":"Find all primes in arr [ ]","code":"int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( prime [ arr [ i ] ] ) count ++ ; return count ; }"}
{"text":"Function to generate the prefix array","code":"void getPrefixArray ( int arr [ ] , int n , int pre [ ] ) {"}
{"text":"Fill the prefix array","code":"pre [ 0 ] = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { pre [ i ] = pre [ i - 1 ] + arr [ i ] ; } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 4 , 8 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Prefix array of arr [ ]","code":"int pre [ n ] ; getPrefixArray ( arr , n , pre ) ;"}
{"text":"Count of primes in the prefix array","code":"cout << primeCount ( pre , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the required value that must be added to x so that it is at least y percent of n","code":"int minValue ( int n , int x , int y ) {"}
{"text":"Required value","code":"float val = ( y * n ) \/ 100 ;"}
{"text":"If x is already >= y percent of n","code":"if ( x >= val ) return 0 ; else return ( ceil ( val ) - x ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 , x = 2 , y = 40 ; cout << minValue ( n , x , y ) ; }"}
{"text":"C ++ program to check if given number is a factorial prime","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to check if a number is prime or not","code":"bool isPrime ( int n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function that returns true if n is a factorial prime","code":"bool isFactorialPrime ( long n ) {"}
{"text":"If n is not prime then return false","code":"if ( ! isPrime ( n ) ) return false ; long fact = 1 ; int i = 1 ; while ( fact <= n + 1 ) {"}
{"text":"Calculate factorial","code":"fact = fact * i ;"}
{"text":"If n is a factorial prime","code":"if ( n + 1 == fact n - 1 == fact ) return true ; i ++ ; }"}
{"text":"n is not a factorial prime","code":"return false ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 23 ; if ( isFactorialPrime ( n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program to find number of ways in which n boys and n girls can sit alternatively sound a round table .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define ll  long int"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Get n","code":"ll n = 5 ;"}
{"text":"find fac1 = ( n - 1 ) !","code":"ll fac1 = 1 ; for ( int i = 2 ; i <= n - 1 ; i ++ ) fac1 = fac1 * i ;"}
{"text":"Find fac2 = n !","code":"ll fac2 = fac1 * n ;"}
{"text":"Find total number of ways","code":"ll totalWays = fac1 * fac2 ;"}
{"text":"Print the total number of ways","code":"cout << totalWays << endl ; return 0 ; }"}
{"text":"CPP program to check Euclid Number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  10000 NEW_LINE vector < int > arr ;"}
{"text":"Function to generate prime numbers","code":"void SieveOfEratosthenes ( ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"bool prime [ MAX ] ; memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p < MAX ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } }"}
{"text":"store all prime numbers to vector ' arr '","code":"for ( int p = 2 ; p < MAX ; p ++ ) if ( prime [ p ] ) arr . push_back ( p ) ; }"}
{"text":"Function to check the number for Euclid Number","code":"bool isEuclid ( long n ) { long long product = 1 ; int i = 0 ; while ( product < n ) {"}
{"text":"Multiply next prime number and check if product + 1 = n holds or not","code":"product = product * arr [ i ] ; if ( product + 1 == n ) return true ; i ++ ; } return false ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Get the prime numbers","code":"SieveOfEratosthenes ( ) ;"}
{"text":"Get n","code":"long n = 31 ;"}
{"text":"Check if n is Euclid Number","code":"if ( isEuclid ( n ) ) cout << \" YES STRNEWLINE \" ; else cout << \" NO STRNEWLINE \" ;"}
{"text":"Get n","code":"n = 42 ;"}
{"text":"Check if n is Euclid Number","code":"if ( isEuclid ( n ) ) cout << \" YES STRNEWLINE \" ; else cout << \" NO STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <cmath> NEW_LINE #include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find the next perfect cube","code":"int nextPerfectCube ( int N ) { int nextN = floor ( cbrt ( N ) ) + 1 ; return nextN * nextN * nextN ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 35 ; cout << nextPerfectCube ( n ) ; return 0 ; }"}
{"text":"C ++ program to find sum of prime divisors of N","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the number is prime or not .","code":"bool isPrime ( int n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"function to find sum of prime divisors of N","code":"int SumOfPrimeDivisors ( int n ) { int sum = 0 ;"}
{"text":"return type of sqrt function if float","code":"int root_n = ( int ) sqrt ( n ) ; for ( int i = 1 ; i <= root_n ; i ++ ) { if ( n % i == 0 ) {"}
{"text":"both factors are same","code":"if ( i == n \/ i && isPrime ( i ) ) { sum += i ; } else {"}
{"text":"both factors are not same ( i and n \/ i )","code":"if ( isPrime ( i ) ) { sum += i ; } if ( isPrime ( n \/ i ) ) { sum += ( n \/ i ) ; } } } } return sum ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 60 ; cout << \" Sum \u2581 of \u2581 prime \u2581 divisors \u2581 of \u2581 60 \u2581 is \u2581 \" << SumOfPrimeDivisors ( n ) << endl ; }"}
{"text":"If number is 2 then it is on the position pos * 2 + 1","code":"case '2' : pos = pos * 4 + 1 ; break ;"}
{"text":"If number is 3 then it is on the position pos * 2 + 2","code":"case '3' : pos = pos * 4 + 2 ; break ;"}
{"text":"If number is 5 then it is on the position pos * 2 + 3","code":"case '5' : pos = pos * 4 + 3 ; break ;"}
{"text":"If number is 7 then it is on the position pos * 2 + 4","code":"case '7' : pos = pos * 4 + 4 ; break ; } } return pos ; }"}
{"text":"Driver code","code":"int main ( ) { string n = \"777\" ; cout << findpos ( n ) ; }"}
{"text":"C ++ program to find a non transitive co - prime triplets between L and R","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Checks if any possible triplet ( a , b , c ) satisfying the condition that ( a , b ) is coprime , ( b , c ) is coprime but ( a , c ) isnt","code":"void possibleTripletInRange ( int L , int R ) { bool flag = false ; int possibleA , possibleB , possibleC ; int numbersInRange = ( R - L + 1 ) ;"}
{"text":"Case 1 : Less than 3 numbers between L and R","code":"if ( numbersInRange < 3 ) { flag = false ; }"}
{"text":"Case 2 : More than 3 numbers between L and R","code":"else if ( numbersInRange > 3 ) { flag = true ;"}
{"text":"triplets should always be of form ( 2 k , 2 k + 1 , 2 k + 2 )","code":"if ( L % 2 ) { L ++ ; } possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else {"}
{"text":"Case 3.1 : Exactly 3 numbers in range of form ( 2 k , 2 k + 1 , 2 k + 2 )","code":"if ( ! ( L % 2 ) ) { flag = true ; possibleA = L ; possibleB = L + 1 ; possibleC = L + 2 ; } else {"}
{"text":"Case 3.2 : Exactly 3 numbers in range of form ( 2 k - 1 , 2 k , 2 k + 1 )","code":"flag = false ; } }"}
{"text":"flag = True indicates that a pair exists between L and R","code":"if ( flag == true ) { cout << \" ( \" << possibleA << \" , \u2581 \" << possibleB << \" , \u2581 \" << possibleC << \" ) \" << \" \u2581 is \u2581 one \u2581 such \u2581 possible \u2581 triplet \u2581 between \u2581 \" << L << \" \u2581 and \u2581 \" << R << \" STRNEWLINE \" ; } else { cout << \" No \u2581 Such \u2581 Triplet \u2581 exists \u2581 between \u2581 \" << L << \" \u2581 and \u2581 \" << R << \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int L , R ;"}
{"text":"finding possible Triplet between 2 and 10","code":"L = 2 ; R = 10 ; possibleTripletInRange ( L , R ) ;"}
{"text":"finding possible Triplet between 23 and 46","code":"L = 23 ; R = 46 ; possibleTripletInRange ( L , R ) ; return 0 ; }"}
{"text":"C ++ Implementation of above method","code":"#include <bits\/stdc++.h> NEW_LINE #define mod  1000000007 NEW_LINE using namespace std ;"}
{"text":"Finding number of possible number with n digits excluding a particular digit","code":"long long digitNumber ( long long n ) {"}
{"text":"Checking if number of digits is zero","code":"if ( n == 0 ) return 1 ;"}
{"text":"Checking if number of digits is one","code":"if ( n == 1 ) return 9 ;"}
{"text":"Checking if number of digits is odd","code":"if ( n % 2 ) {"}
{"text":"Calling digitNumber function with ( digit - 1 ) \/ 2 digits","code":"long long temp = digitNumber ( ( n - 1 ) \/ 2 ) % mod ; return ( 9 * ( temp * temp ) % mod ) % mod ; } else {"}
{"text":"Calling digitNumber function with n \/ 2 digits","code":"long long temp = digitNumber ( n \/ 2 ) % mod ; return ( temp * temp ) % mod ; } } int countExcluding ( int n , int d ) {"}
{"text":"Calling digitNumber function Checking if excluding digit is zero or non - zero","code":"if ( d == 0 ) return ( 9 * digitNumber ( n - 1 ) ) % mod ; else return ( 8 * digitNumber ( n - 1 ) ) % mod ; }"}
{"text":"Driver function to run above program","code":"int main ( ) {"}
{"text":"Initializing variables","code":"long long d = 9 ; int n = 3 ; cout << countExcluding ( n , d ) << endl ; return 0 ; }"}
{"text":"C ++ program to check if given number is Emirp or not .","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Returns true if n is prime . Else false .","code":"bool isPrime ( int n ) {"}
{"text":"Corner case","code":"if ( n <= 1 ) return false ;"}
{"text":"Check from 2 to n - 1","code":"for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }"}
{"text":"Function will check whether number is Emirp or not","code":"bool isEmirp ( int n ) {"}
{"text":"Check if n is prime","code":"if ( isPrime ( n ) == false ) return false ;"}
{"text":"Find reverse of n","code":"int rev = 0 ; while ( n != 0 ) { int d = n % 10 ; rev = rev * 10 + d ; n \/= 10 ; }"}
{"text":"If both Original and Reverse are Prime , then it is an Emirp number","code":"return isPrime ( rev ) ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Input number","code":"int n = 13 ; if ( isEmirp ( n ) == true ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"C ++ code to convert radian to degree","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function for convertion","code":"double Convert ( double radian ) { double pi = 3.14159 ; return ( radian * ( 180 \/ pi ) ) ; }"}
{"text":"Driver code","code":"int main ( ) { double radian = 5.0 ; double degree = Convert ( radian ) ; cout << degree ; return 0 ; }"}
{"text":"C ++ program to find trace of matrix formed by adding Row - major and Column - major order of same matrix","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return sum of first n integers of an AP","code":"int sn ( int n , int an ) { return ( n * ( 1 + an ) ) \/ 2 ; }"}
{"text":"Return the trace of sum of row - major matrix and column - major matrix","code":"int trace ( int n , int m ) {"}
{"text":"Finding nth element in AP in case of Row major matrix .","code":"int an = 1 + ( n - 1 ) * ( m + 1 ) ;"}
{"text":"Finding sum of first n integers of AP in case of Row major matrix","code":"int rowmajorSum = sn ( n , an ) ;"}
{"text":"Finding nth element in AP in case of Row major matrix","code":"an = 1 + ( n - 1 ) * ( n + 1 ) ;"}
{"text":"Finding sum of first n integers of AP in case of Column major matrix","code":"int colmajorSum = sn ( n , an ) ; return rowmajorSum + colmajorSum ; }"}
{"text":"Driven Program","code":"int main ( ) { int N = 3 , M = 3 ; cout << trace ( N , M ) << endl ; return 0 ; }"}
{"text":"C ++ code for Maximum of smallest possible area that can get with exactly k cut of given rectangular","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility Function","code":"void max_area ( int n , int m , int k ) { if ( k > ( n + m - 2 ) ) cout << \" Not \u2581 possible \" << endl ; else { int result ;"}
{"text":"for the 1 st case","code":"if ( k < max ( m , n ) - 1 ) { result = max ( m * ( n \/ ( k + 1 ) ) , n * ( m \/ ( k + 1 ) ) ) ; }"}
{"text":"for the second case","code":"else { result = max ( m \/ ( k - n + 2 ) , n \/ ( k - m + 2 ) ) ; }"}
{"text":"print final result","code":"cout << result << endl ; } }"}
{"text":"driver code","code":"int main ( ) { int n = 3 , m = 4 , k = 1 ; max_area ( n , m , k ) ; }"}
{"text":"CPP program to find the area of a square","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function to find the area","code":"int area_fun ( int side ) { int area = side * side ; return area ; }"}
{"text":"Driver program","code":"int main ( ) { int side = 4 ; int area = area_fun ( side ) ; cout << area ; return 0 ; }"}
{"text":"C ++ program to count number of ways to express N as sum of consecutive numbers .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility method to compute number of ways in which N can be represented as sum of consecutive number","code":"long int countConsecutive ( long int N ) {"}
{"text":"constraint on values of L gives us the time Complexity as O ( N ^ 0.5 )","code":"long int count = 0 ; for ( long int L = 1 ; L * ( L + 1 ) < 2 * N ; L ++ ) { double a = ( 1.0 * N - ( L * ( L + 1 ) ) \/ 2 ) \/ ( L + 1 ) ; if ( a - ( int ) a == 0.0 ) count ++ ; } return count ; }"}
{"text":"Driver Code","code":"int main ( ) { long int N = 15 ; cout << countConsecutive ( N ) << endl ; N = 10 ; cout << countConsecutive ( N ) << endl ; return 0 ; }"}
{"text":"C ++ program to check if a number is Authomorphic","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check Automorphic number","code":"bool isAutomorphic ( int N ) {"}
{"text":"Store the square","code":"int sq = N * N ;"}
{"text":"Start Comparing digits","code":"while ( N > 0 ) {"}
{"text":"Return false , if any digit of N doesn ' t \u2581 \u2581 match \u2581 with \u2581 its \u2581 square ' s digits from last","code":"if ( N % 10 != sq % 10 ) return false ;"}
{"text":"Reduce N and square","code":"N \/= 10 ; sq \/= 10 ; } return true ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 5 ; isAutomorphic ( N ) ? cout << \" Automorphic \" : cout << \" Not \u2581 Automorphic \" ; return 0 ; }"}
{"text":"C ++ program to find integer having maximum number of prime factor in first N natural numbers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return smallest number having maximum prime factors .","code":"int maxPrimefactorNum ( int N ) {"}
{"text":"default value of boolean is false","code":"bool arr [ N + 5 ] ; memset ( arr , true , sizeof ( arr ) ) ;"}
{"text":"Sieve of eratosthenes","code":"for ( int i = 3 ; i * i <= N ; i += 2 ) { if ( arr [ i ] ) for ( int j = i * i ; j <= N ; j += i ) arr [ j ] = false ; }"}
{"text":"Storing prime numbers .","code":"vector < int > prime ; prime . push_back ( 2 ) ; for ( int i = 3 ; i <= N ; i += 2 ) if ( arr [ i ] ) prime . push_back ( i ) ;"}
{"text":"Generating number having maximum prime factors .","code":"int i = 0 , ans = 1 ; while ( ans * prime [ i ] <= N && i < prime . size ( ) ) { ans *= prime [ i ] ; i ++ ; } return ans ; }"}
{"text":"Driven Program","code":"int main ( ) { int N = 40 ; cout << maxPrimefactorNum ( N ) << endl ; return 0 ; }"}
{"text":"C ++ program to find highest power of 2 smaller than or equal to n .","code":"#include <iostream> NEW_LINE using namespace std ; unsigned highestPowerof2 ( unsigned x ) {"}
{"text":"check for the set bits","code":"x |= x >> 1 ; x |= x >> 2 ; x |= x >> 4 ; x |= x >> 8 ; x |= x >> 16 ;"}
{"text":"Then we remove all but the top bit by xor ' ing \u2581 the \u2581 \u2581 string \u2581 of \u2581 1' s with that string of 1 ' s \u2581 shifted \u2581 one \u2581 to \u2581 \u2581 the \u2581 left , \u2581 and \u2581 we \u2581 end \u2581 up \u2581 with \u2581 just \u2581 the \u2581 one \u2581 top \u2581 bit \u2581 \u2581 followed \u2581 by \u2581 0' s .","code":"return x ^ ( x >> 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 ; cout << highestPowerof2 ( n ) << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program to find sum of all divisors of a natural number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate sum of all proper divisors num -- > given natural number","code":"int divSum ( int num ) {"}
{"text":"Final result of summation of divisors","code":"int result = 0 ;"}
{"text":"there will be no proper divisor","code":"if ( num == 1 ) return result ;"}
{"text":"find all divisors which divides ' num '","code":"for ( int i = 2 ; i <= sqrt ( num ) ; i ++ ) {"}
{"text":"if ' i ' is divisor of ' num '","code":"if ( num % i == 0 ) {"}
{"text":"if both divisors are same then add it only once else add both","code":"if ( i == ( num \/ i ) ) result += i ; else result += ( i + num \/ i ) ; } }"}
{"text":"Add 1 to the result as 1 is also a divisor","code":"return ( result + 1 ) ; }"}
{"text":"Driver program to run the case","code":"int main ( ) { int num = 36 ; cout << divSum ( num ) ; return 0 ; }"}
{"text":"An efficient C ++ program to find square root under modulo p when p is 7 , 11 , 19 , 23 , 31 , ... etc .","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Utility function to do modular exponentiation . It returns ( x ^ y ) % p .","code":"int power ( int x , int y , int p ) {"}
{"text":"int res = 1 ; Initialize result x = x % p ; Update x if it is more than or equal to p","code":"while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y & 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y >> 1 ; y = y \/ 2","code":"x = ( x * x ) % p ; } return res ; }"}
{"text":"Returns true if square root of n under modulo p exists Assumption : p is of the form 3 * i + 4 where i >= 1","code":"void squareRoot ( int n , int p ) { if ( p % 4 != 3 ) { cout << \" Invalid \u2581 Input \" ; return ; }"}
{"text":"Try \" + ( n ^ ( ( p \u2581 + \u2581 1 ) \/ 4 ) ) \"","code":"n = n % p ; int x = power ( n , ( p + 1 ) \/ 4 , p ) ; if ( ( x * x ) % p == n ) { cout << \" Square \u2581 root \u2581 is \u2581 \" << x ; return ; }"}
{"text":"Try \" - ( n \u2581 ^ \u2581 ( ( p \u2581 + \u2581 1 ) \/ 4 ) ) \"","code":"x = p - x ; if ( ( x * x ) % p == n ) { cout << \" Square \u2581 root \u2581 is \u2581 \" << x ; return ; }"}
{"text":"If none of the above two work , then square root doesn 't exist","code":"cout << \" Square \u2581 root \u2581 doesn ' t \u2581 exist \u2581 \" ; }"}
{"text":"Driver program to test","code":"int main ( ) { int p = 7 ; int n = 2 ; squareRoot ( n , p ) ; return 0 ; }"}
{"text":"C ++ program Miller - Rabin primality test","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to do modular exponentiation . It returns ( x ^ y ) % p","code":"int power ( int x , unsigned int y , int p ) {"}
{"text":"Initialize result","code":"int res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y & 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y >> 1 ; y = y \/ 2","code":"x = ( x * x ) % p ; } return res ; }"}
{"text":"This function is called for all k trials . It returns false if n is composite and returns true if n is probably prime . d is an odd number such that d * 2 < sup > r < \/ sup > = n - 1 for some r >= 1","code":"bool miillerTest ( int d , int n ) {"}
{"text":"Pick a random number in [ 2. . n - 2 ] Corner cases make sure that n > 4","code":"int a = 2 + rand ( ) % ( n - 4 ) ;"}
{"text":"Compute a ^ d % n","code":"int x = power ( a , d , n ) ; if ( x == 1 x == n - 1 ) return true ;"}
{"text":"Keep squaring x while one of the following doesn 't  happen  (i) d does not reach n-1  (ii) (x^2) % n is not 1  (iii) (x^2) % n is not n-1","code":"while ( d != n - 1 ) { x = ( x * x ) % n ; d *= 2 ; if ( x == 1 ) return false ; if ( x == n - 1 ) return true ; }"}
{"text":"Return composite","code":"return false ; }"}
{"text":"It returns false if n is composite and returns true if n is probably prime . k is an input parameter that determines accuracy level . Higher value of k indicates more accuracy .","code":"bool isPrime ( int n , int k ) {"}
{"text":"Corner cases","code":"if ( n <= 1 n == 4 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"Find r such that n = 2 ^ d * r + 1 for some r >= 1","code":"int d = n - 1 ; while ( d % 2 == 0 ) d \/= 2 ;"}
{"text":"Iterate given nber of ' k ' times","code":"for ( int i = 0 ; i < k ; i ++ ) if ( ! miillerTest ( d , n ) ) return false ; return true ; }"}
{"text":"Driver program","code":"int main ( ) { int k = 4 ; cout << \" All \u2581 primes \u2581 smaller \u2581 than \u2581 100 : \u2581 STRNEWLINE \" ; for ( int n = 1 ; n < 100 ; n ++ ) if ( isPrime ( n , k ) ) cout << n << \" \u2581 \" ; return 0 ; }"}
{"text":"C ++ program to find length of the longest consecutive 1 s in binary representation of a number .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find length of the longest consecutive 1 s in binary representation of a number","code":"int maxConsecutiveOnes ( int x ) {"}
{"text":"Initialize result","code":"int count = 0 ;"}
{"text":"Count the number of iterations to reach x = 0.","code":"while ( x != 0 ) {"}
{"text":"This operation reduces length of every sequence of 1 s by one .","code":"x = ( x & ( x << 1 ) ) ; count ++ ; } return count ; }"}
{"text":"Driver code","code":"int main ( ) { cout << maxConsecutiveOnes ( 14 ) << endl ; cout << maxConsecutiveOnes ( 222 ) << endl ; return 0 ; }"}
{"text":"C ++ program to Subtract two numbers without using arithmetic operators","code":"#include <iostream> NEW_LINE using namespace std ; int subtract ( int x , int y ) {"}
{"text":"Iterate till there is no carry","code":"while ( y != 0 ) {"}
{"text":"borrow contains common set bits of y and unset bits of x","code":"int borrow = ( ~ x ) & y ;"}
{"text":"Subtraction of bits of x and y where at least one of the bits is not set","code":"x = x ^ y ;"}
{"text":"Borrow is shifted by one so that subtracting it from x gives the required sum","code":"y = borrow << 1 ; } return x ; }"}
{"text":"Driver Code","code":"int main ( ) { int x = 29 , y = 13 ; cout << \" x \u2581 - \u2581 y \u2581 is \u2581 \" << subtract ( x , y ) ; return 0 ; }"}
{"text":"CPP Program to subtract two Number without using arithmetic operator Recursive implementation .","code":"#include <iostream> NEW_LINE using namespace std ; int subtract ( int x , int y ) { if ( y == 0 ) return x ; return subtract ( x ^ y , ( ~ x & y ) << 1 ) ; }"}
{"text":"Driver program","code":"int main ( ) { int x = 29 , y = 13 ; cout << \" x \u2581 - \u2581 y \u2581 is \u2581 \" << subtract ( x , y ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to add an edge in the tree","code":"void addEdge ( vector < int > v [ ] , int x , int y ) { v [ x ] . push_back ( y ) ; v [ y ] . push_back ( x ) ; }"}
{"text":"DFS to find the Kth ancestor of every node","code":"void dfs ( vector < int > tree [ ] , vector < int > & temp , int ancestor [ ] , int u , int parent , int k ) {"}
{"text":"Pushing current node in the vector","code":"temp . push_back ( u ) ;"}
{"text":"Traverse its neighbors","code":"for ( auto i : tree [ u ] ) { if ( i == parent ) continue ; dfs ( tree , temp , ancestor , i , u , k ) ; } temp . pop_back ( ) ;"}
{"text":"If K ancestors are not found for current node","code":"if ( temp . size ( ) < k ) { ancestor [ u ] = -1 ; } else {"}
{"text":"Add the Kth ancestor for the node","code":"ancestor [ u ] = temp [ temp . size ( ) - k ] ; } }"}
{"text":"Function to find Kth ancestor of each node","code":"void KthAncestor ( int N , int K , int E , int edges [ ] [ 2 ] ) {"}
{"text":"Building the tree","code":"vector < int > tree [ N + 1 ] ; for ( int i = 0 ; i < E ; i ++ ) { addEdge ( tree , edges [ i ] [ 0 ] , edges [ i ] [ 1 ] ) ; }"}
{"text":"Stores all parents of a node","code":"vector < int > temp ;"}
{"text":"Store Kth ancestor of all nodes","code":"int ancestor [ N + 1 ] ; dfs ( tree , temp , ancestor , 1 , 0 , K ) ;"}
{"text":"Print the ancestors","code":"for ( int i = 1 ; i <= N ; i ++ ) { cout << ancestor [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given N and K","code":"int N = 9 ; int K = 2 ;"}
{"text":"Given edges of n - ary tree","code":"int E = 8 ; int edges [ 8 ] [ 2 ] = { { 1 , 2 } , { 1 , 3 } , { 2 , 4 } , { 2 , 5 } , { 2 , 6 } , { 3 , 7 } , { 3 , 8 } , { 3 , 9 } } ;"}
{"text":"Function Call","code":"KthAncestor ( N , K , E , edges ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to build a segment tree","code":"void build ( vector < int > & sum , vector < int > & a , int l , int r , int rt ) {"}
{"text":"Check for base case","code":"if ( l == r ) { sum [ rt ] = a [ l - 1 ] ; return ; }"}
{"text":"Find mid point","code":"int m = ( l + r ) >> 1 ;"}
{"text":"Recursively build the segment tree","code":"build ( sum , a , l , m , rt << 1 ) ; build ( sum , a , m + 1 , r , rt << 1 1 ) ; }"}
{"text":"Function for push down operation on the segment tree","code":"void pushDown ( vector < int > & sum , vector < int > & add , int rt , int ln , int rn ) { if ( add [ rt ] ) { add [ rt << 1 ] += add [ rt ] ; add [ rt << 1 1 ] += add [ rt ] ; sum [ rt << 1 ] += add [ rt ] * ln ; sum [ rt << 1 1 ] += add [ rt ] * rn ; add [ rt ] = 0 ; } }"}
{"text":"Function to update the segment tree","code":"void update ( vector < int > & sum , vector < int > & add , int L , int R , int C , int l , int r , int rt ) {"}
{"text":"Complete overlap","code":"if ( L <= l && r <= R ) { sum [ rt ] += C * ( r - l + 1 ) ; add [ rt ] += C ; return ; }"}
{"text":"Find mid","code":"int m = ( l + r ) >> 1 ;"}
{"text":"Perform push down operation on segment tree","code":"pushDown ( sum , add , rt , m - l + 1 , r - m ) ;"}
{"text":"Recursively update the segment tree","code":"if ( L <= m ) update ( sum , add , L , R , C , l , m , rt << 1 ) ; if ( R > m ) update ( sum , add , L , R , C , m + 1 , r , rt << 1 1 ) ; }"}
{"text":"Function to process the query","code":"int query ( vector < int > & sum , vector < int > & add , int L , int R , int l , int r , int rt ) {"}
{"text":"Base case","code":"if ( L <= l && r <= R ) { return sum [ rt ] ; }"}
{"text":"Find mid","code":"int m = ( l + r ) >> 1 ;"}
{"text":"Perform push down operation on segment tree","code":"pushDown ( sum , add , rt , m - l + 1 , r - m ) ; int ans = 0 ;"}
{"text":"Recursively calculate the result of the query","code":"if ( L <= m ) ans += query ( sum , add , L , R , l , m , rt << 1 ) ; if ( R > m ) ans += query ( sum , add , L , R , m + 1 , r , rt << 1 1 ) ;"}
{"text":"Return the result","code":"return ans ; }"}
{"text":"Function to count the numbers which are greater than the given query","code":"void sequenceMaintenance ( int n , int q , vector < int > & a , vector < int > & b , int m ) {"}
{"text":"Sort the input array","code":"sort ( a . begin ( ) , a . end ( ) ) ;"}
{"text":"Create segment tree of size 4 * n","code":"vector < int > sum , add , ans ; sum . assign ( n << 2 , 0 ) ; add . assign ( n << 2 , 0 ) ;"}
{"text":"Build the segment tree","code":"build ( sum , a , 1 , n , 1 ) ;"}
{"text":"Iterate over the queries","code":"for ( int i = 0 ; i < q ; i ++ ) { int l = 1 , r = n , pos = -1 ; while ( l <= r ) { int m = ( l + r ) >> 1 ; if ( query ( sum , add , m , m , 1 , n , 1 ) >= b [ i ] ) { r = m - 1 ; pos = m ; } else { l = m + 1 ; } } if ( pos == -1 ) ans . push_back ( 0 ) ; else {"}
{"text":"Store result in array","code":"ans . push_back ( n - pos + 1 ) ;"}
{"text":"Update the elements in the given range","code":"update ( sum , add , pos , n , - m , 1 , n , 1 ) ; } }"}
{"text":"Print the result of queries","code":"for ( int i = 0 ; i < ans . size ( ) ; i ++ ) { cout << ans [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 4 ; int Q = 3 ; int M = 1 ; vector < int > arr = { 1 , 2 , 3 , 4 } ; vector < int > query = { 4 , 3 , 1 } ;"}
{"text":"Function Call","code":"sequenceMaintenance ( N , Q , arr , query , M ) ; return 0 ; }"}
{"text":"C ++ Program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the final array length by replacing coprime pair with 1","code":"bool hasCoprimePair ( vector < int > & arr , int n ) {"}
{"text":"Iterate over all pairs of element","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) {"}
{"text":"Check if gcd is 1","code":"if ( __gcd ( arr [ i ] , arr [ j ] ) == 1 ) { return true ; } } }"}
{"text":"If no coprime pair found return false","code":"return false ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 3 ; vector < int > arr = { 6 , 9 , 15 } ;"}
{"text":"Check if atleast one coprime pair exists in the array","code":"if ( hasCoprimePair ( arr , n ) ) { cout << 1 << endl ; }"}
{"text":"If no such pair exists","code":"else { cout << n << endl ; } }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the required number of ways","code":"int Numberofways ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ;"}
{"text":"Check if a , b and c can form a triangle","code":"if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } }"}
{"text":"Return number of ways","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 15 ; cout << Numberofways ( n ) << endl ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the count of pair","code":"void countPairs ( int N , int arr [ ] ) { int count = 0 ;"}
{"text":"Iterate over all the elements of the array","code":"for ( int i = 0 ; i < N ; i ++ ) { if ( i == arr [ arr [ i ] - 1 ] - 1 ) {"}
{"text":"Increment the count","code":"count ++ ; } }"}
{"text":"Print the result","code":"cout << ( count \/ 2 ) << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 2 , 1 , 4 , 3 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; countPairs ( N , arr ) ; }"}
{"text":"CPP implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the max Length of Fibonacci subsequence","code":"int LongestFibSubseq ( int A [ ] , int n ) {"}
{"text":"Store all array elements in a hash table","code":"unordered_set < int > S ( A , A + n ) ; int maxLen = 0 , x , y ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { x = A [ j ] ; y = A [ i ] + A [ j ] ; int length = 2 ;"}
{"text":"check until next fib element is found","code":"while ( S . find ( y ) != S . end ( ) ) {"}
{"text":"next element of fib subseq","code":"int z = x + y ; x = y ; y = z ; maxLen = max ( maxLen , ++ length ) ; } } } return maxLen >= 3 ? maxLen : 0 ; }"}
{"text":"Driver program","code":"int main ( ) { int A [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } ; int n = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; cout << LongestFibSubseq ( A , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count maximum number of elements that can be selected","code":"int CountMaximum ( int arr [ ] , int n , int k ) {"}
{"text":"Sort he array","code":"sort ( arr , arr + n ) ; int sum = 0 , count = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Add current element to the sum","code":"sum += arr [ i ] ;"}
{"text":"IF sum exceeds k","code":"if ( sum > k ) break ;"}
{"text":"Increment count","code":"count ++ ; }"}
{"text":"Return the count","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 30 , 30 , 10 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 50 ;"}
{"text":"Function call","code":"cout << CountMaximum ( arr , n , k ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find number of candy types","code":"int num_candyTypes ( vector < int > & candies ) {"}
{"text":"Declare a hashset to store candies","code":"unordered_set < int > s ;"}
{"text":"Traverse the given array and inserts element into set","code":"for ( int i = 0 ; i < candies . size ( ) ; i ++ ) { s . insert ( candies [ i ] ) ; }"}
{"text":"Return the result","code":"return s . size ( ) ; }"}
{"text":"Function to find maximum number of types of candies a person can eat","code":"void distribute_candies ( vector < int > & candies ) {"}
{"text":"Store the number of candies allowed to eat","code":"int allowed = candies . size ( ) \/ 2 ;"}
{"text":"Store the number of candy types","code":"int types = num_candyTypes ( candies ) ;"}
{"text":"Return the result","code":"if ( types < allowed ) cout << types ; else cout << allowed ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Input","code":"vector < int > candies = { 4 , 4 , 5 , 5 , 3 , 3 } ;"}
{"text":"Function Call","code":"distribute_candies ( candies ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the length of diagonals of a rhombus using length of sides and vertex angle","code":"double Length_Diagonals ( int a , double theta ) { double p = a * sqrt ( 2 + ( 2 * cos ( theta * ( 3.141 \/ 180 ) ) ) ) ; double q = a * sqrt ( 2 - ( 2 * cos ( theta * ( 3.141 \/ 180 ) ) ) ) ; cout << fixed << setprecision ( 2 ) << p << \" \u2581 \" << q ; }"}
{"text":"Driver Code","code":"int main ( ) { int a = 6 ; int theta = 45 ; Length_Diagonals ( a , theta ) ; return 0 ; }"}
{"text":"C ++ program to count the set bits after taking XOR with a number K","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to store EVEN and odd variable","code":"void countEvenOdd ( int arr [ ] , int n , int K ) { int even = 0 , odd = 0 ;"}
{"text":"Store the count of even and odd set bit","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Count the set bit using in built function","code":"int x = __builtin_popcount ( arr [ i ] ) ; if ( x % 2 == 0 ) even ++ ; else odd ++ ; } int y ;"}
{"text":"Count of set - bit of K","code":"y = __builtin_popcount ( K ) ;"}
{"text":"If y is odd then , count of even and odd set bit will be interchanged","code":"if ( y & 1 ) { cout << \" Even \u2581 = \u2581 \" << odd << \" , \u2581 Odd \u2581 = \u2581 \" << even ; }"}
{"text":"Else it will remain same as the original array","code":"else { cout << \" Even \u2581 = \u2581 \" << even << \" , \u2581 Odd \u2581 = \u2581 \" << odd ; } }"}
{"text":"Driver 's Code","code":"int main ( void ) { int arr [ ] = { 4 , 2 , 15 , 9 , 8 , 8 } ; int K = 3 ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function call to count even and odd","code":"countEvenOdd ( arr , n , K ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Driver code","code":"int main ( ) { int N = 6 ; int Even = N \/ 2 ; int Odd = N - Even ; cout << Even * Odd ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing","code":"int longestSubSequence ( pair < int , int > A [ ] , int N , int ind = 0 , int lastf = INT_MIN , int lasts = INT_MAX ) {"}
{"text":"Base case","code":"if ( ind == N ) return 0 ;"}
{"text":"Not include the current pair in the longest subsequence","code":"int ans = longestSubSequence ( A , N , ind + 1 , lastf , lasts ) ;"}
{"text":"Including the current pair in the longest subsequence","code":"if ( A [ ind ] . first > lastf && A [ ind ] . second < lasts ) ans = max ( ans , longestSubSequence ( A , N , ind + 1 , A [ ind ] . first , A [ ind ] . second ) + 1 ) ; return ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Input","code":"pair < int , int > A [ ] = { { 1 , 2 } , { 2 , 2 } , { 3 , 1 } } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ;"}
{"text":"Function Call","code":"cout << longestSubSequence ( A , N ) << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE #include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find the number of triplets whose Bitwise AND is 0.","code":"int countTriplets ( vector < int > & A ) {"}
{"text":"Stores the count of triplets having bitwise AND equal to 0","code":"int cnt = 0 ;"}
{"text":"Stores frequencies of all possible A [ i ] & A [ j ]","code":"unordered_map < int , int > tuples ;"}
{"text":"Traverse the array","code":"for ( auto a : A )"}
{"text":"Update frequency of Bitwise AND of all array elements with a","code":"for ( auto b : A ) ++ tuples [ a & b ] ;"}
{"text":"Traverse the array","code":"for ( auto a : A )"}
{"text":"Iterate the map","code":"for ( auto t : tuples )"}
{"text":"If bitwise AND of triplet is zero , increment cnt","code":"if ( ( t . first & a ) == 0 ) cnt += t . second ;"}
{"text":"Return the number of triplets whose Bitwise AND is 0.","code":"return cnt ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input Array","code":"vector < int > A = { 2 , 1 , 3 } ;"}
{"text":"Function Call","code":"cout << countTriplets ( A ) ; return 0 ; }"}
{"text":"Bottom up approach for counting ways to reach a score using 1 and 2 with consecutive 2 allowed","code":"#include <iostream> NEW_LINE using namespace std ; int CountWays ( int n ) {"}
{"text":"noOfWays [ i ] will store count for value i . 3 extra values are to take care of corner case n = 0","code":"int noOfWays [ n + 3 ] ; noOfWays [ 0 ] = 1 ; noOfWays [ 1 ] = 1 ; noOfWays [ 2 ] = 1 + 1 ;"}
{"text":"Loop till \" n + 1\" to compute value for \" n \"","code":"for ( int i = 3 ; i < n + 1 ; i ++ ) {"}
{"text":"number of ways if first run is 1","code":"noOfWays [ i ] = noOfWays [ i - 1 ] + noOfWays [ i - 3 ] ; } return noOfWays [ n ] ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 0 ; cout << CountWays ( n ) ; return 0 ; }"}
{"text":"Create row and col to traverse rows and columns","code":"int row = 0 , col = 0 ; int boundary = size - 1 ; int sizeLeft = size - 1 ; int flag = 1 ;"}
{"text":"Variable to determine the movement r = right , l = left , d = down , u = upper","code":"char move = ' r ' ;"}
{"text":"Array for matrix","code":"int matrix [ size ] [ size ] = { 0 } ; for ( int i = 1 ; i < size * size + 1 ; i ++ ) {"}
{"text":"Assign the value","code":"matrix [ row ] [ col ] = i ;"}
{"text":"switch - case to determine the next index","code":"switch ( move ) {"}
{"text":"If right , go right","code":"case ' r ' : col += 1 ; break ;"}
{"text":"if left , go left","code":"case ' l ' : col -= 1 ; break ;"}
{"text":"if up , go up","code":"case ' u ' : row -= 1 ; break ;"}
{"text":"if down , go down","code":"case ' d ' : row += 1 ; break ; }"}
{"text":"Check if the matrix has reached array boundary","code":"if ( i == boundary ) {"}
{"text":"Add the left size for the next boundary","code":"boundary += sizeLeft ;"}
{"text":"If 2 rotations has been made , decrease the size left by 1","code":"if ( flag != 2 ) { flag = 2 ; } else { flag = 1 ; sizeLeft -= 1 ; }"}
{"text":"switch - case to rotate the movement","code":"switch ( move ) {"}
{"text":"if right , rotate to down","code":"case ' r ' : move = ' d ' ; break ;"}
{"text":"if down , rotate to left","code":"case ' d ' : move = ' l ' ; break ;"}
{"text":"if left , rotate to up","code":"case ' l ' : move = ' u ' ; break ;"}
{"text":"if up , rotate to right","code":"case ' u ' : move = ' r ' ; break ; } } }"}
{"text":"Print the matrix","code":"for ( row = 0 ; row < size ; row ++ ) { for ( col = 0 ; col < size ; col ++ ) { int n = matrix [ row ] [ col ] ; if ( n < 10 ) cout << n << \" \u2581 \" ; else cout << n << \" \u2581 \" ; } cout << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Get the size of size","code":"int size = 5 ;"}
{"text":"Print the Spiral Pattern","code":"printSpiral ( size ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if player A wins the game or not","code":"void findWinner ( string a , int n ) {"}
{"text":"Stores size of the groups of 0 s","code":"vector < int > v ;"}
{"text":"Stores size of the group of 0 s","code":"int c = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Increment c by 1 if a [ i ] is 0","code":"if ( a [ i ] == '0' ) { c ++ ; }"}
{"text":"Otherwise , push the size in array and reset c to 0","code":"else { if ( c != 0 ) v . push_back ( c ) ; c = 0 ; } } if ( c != 0 ) v . push_back ( c ) ;"}
{"text":"If there is no substring of odd length consisting only of 0 s","code":"if ( v . size ( ) == 0 ) { cout << \" Player \u2581 B \" ; return ; }"}
{"text":"If there is only 1 substring of odd length consisting only of 0 s","code":"if ( v . size ( ) == 1 ) { if ( v [ 0 ] & 1 ) cout << \" Player \u2581 A \" ;"}
{"text":"Otherwise","code":"else cout < < \" Player \u2581 B \" ; return ; }"}
{"text":"Stores the size of the largest and second largest substrings of 0 s","code":"int first = INT_MIN ; int second = INT_MIN ;"}
{"text":"Traverse the array v [ ]","code":"for ( int i = 0 ; i < v . size ( ) ; i ++ ) {"}
{"text":"If current element is greater than first , then update both first and second","code":"if ( a [ i ] > first ) { second = first ; first = a [ i ] ; }"}
{"text":"If arr [ i ] is in between first and second , then update second","code":"else if ( a [ i ] > second && a [ i ] != first ) second = a [ i ] ; }"}
{"text":"If the condition is satisfied","code":"if ( ( first & 1 ) && ( first + 1 ) \/ 2 > second ) cout << \" Player \u2581 A \" ; else cout << \" Player \u2581 B \" ; }"}
{"text":"Driver Code","code":"int main ( ) { string S = \"1100011\" ; int N = S . length ( ) ; findWinner ( S , N ) ; return 0 ; }"}
{"text":"C ++ program to check whether the string is K palindrome or not","code":"#include <iostream> NEW_LINE #include <map> NEW_LINE using namespace std ;"}
{"text":"function to check whether the string is K palindrome or not","code":"bool can_Construct ( string S , int K ) {"}
{"text":"map to frequency of character","code":"map < int , int > m ; int i = 0 , j = 0 , p = 0 ;"}
{"text":"Check when k is given as same as length of string","code":"if ( S . length ( ) == K ) { return true ; }"}
{"text":"iterator for map","code":"map < int , int > :: iterator h ;"}
{"text":"storing the frequency of every character in map","code":"for ( i = 0 ; i < S . length ( ) ; i ++ ) { m [ S [ i ] ] = m [ S [ i ] ] + 1 ; }"}
{"text":"if K is greater than size of string then return false","code":"if ( K > S . length ( ) ) { return false ; } else {"}
{"text":"check that number of character having the odd frequency","code":"for ( h = m . begin ( ) ; h != m . end ( ) ; h ++ ) { if ( m [ h -> first ] % 2 != 0 ) { p = p + 1 ; } } }"}
{"text":"if k is less than number of odd frequency character then it is again false other wise true","code":"if ( K < p ) { return false ; } return true ; }"}
{"text":"Driver code","code":"int main ( ) { string S = \" annabelle \" ; int K = 4 ; if ( can_Construct ( S , K ) ) { cout << \" Yes \" ; } else { cout << \" No \" ; } }"}
{"text":"Function to compare two strings ignoring their cases","code":"bool equalIgnoreCase ( string str1 , string str2 ) { int i = 0 ;"}
{"text":"Convert to lowercase using transform ( ) function and :: tolower in STL","code":"transform ( str1 . begin ( ) , str1 . end ( ) , str1 . begin ( ) , :: tolower ) ; transform ( str2 . begin ( ) , str2 . end ( ) , str2 . begin ( ) , :: tolower ) ;"}
{"text":"Comparing both using inbuilt function","code":"int x = str1 . compare ( str2 ) ;"}
{"text":"if strings are equal , return true otherwise false","code":"if ( x != 0 ) return false ; else return true ; }"}
{"text":"Function to print the same or not same if strings are equal or not equal","code":"void equalIgnoreCaseUtil ( string str1 , string str2 ) { bool res = equalIgnoreCase ( str1 , str2 ) ; if ( res == true ) cout << \" Same \" << endl ; else cout << \" Not \u2581 Same \" << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string str1 , str2 ; str1 = \" Geeks \" ; str2 = \" geeks \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; str1 = \" Geek \" ; str2 = \" geeksforgeeks \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; return 0 ; }"}
{"text":"C ++ program to print Step Pattern","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function to print the steps","code":"void steps ( string str , int n ) {"}
{"text":"declare a flag","code":"bool flag ; int x = 0 ;"}
{"text":"traverse through all the characters in the string","code":"for ( int i = 0 ; i < str . length ( ) ; i ++ ) {"}
{"text":"if the x value is 0. . then we must increment till n ... set flag to true","code":"if ( x == 0 ) flag = true ;"}
{"text":"if the x value is n - 1 then we must decrement till 0 ... set flag as false","code":"if ( x == n - 1 ) flag = false ;"}
{"text":"print x * s","code":"for ( int j = 0 ; j < x ; j ++ ) cout << \" * \" ; cout << str [ i ] << \" STRNEWLINE \" ;"}
{"text":"checking whether to increment or decrement x","code":"if ( flag == true ) x ++ ; else x -- ; } }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Get the String and the number n","code":"int n = 4 ; string str = \" GeeksForGeeks \" ; cout << \" String : \u2581 \" << str << endl ; cout << \" Max \u2581 Length \u2581 of \u2581 Steps : \u2581 \" << n << endl ;"}
{"text":"calling the function","code":"steps ( str , n ) ; return 0 ; }"}
{"text":"C ++ program to count frequencies of array items","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void countFreq ( int arr [ ] , int n ) {"}
{"text":"Mark all array elements as not visited","code":"vector < int > visited ( n , false ) ;"}
{"text":"Traverse through array elements and count frequencies","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Skip this element if already processed","code":"if ( visited [ i ] == true ) continue ;"}
{"text":"Count frequency","code":"int count = 1 ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ] == arr [ j ] ) { visited [ j ] = true ; count ++ ; } } cout << arr [ i ] << \" \u2581 \" << count << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 10 , 20 , 20 , 10 , 10 , 20 , 5 , 20 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; countFreq ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation to check whether given binary number is evenly divisible by 2 ^ k or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check whether given binary number is evenly divisible by 2 ^ k or not","code":"bool isDivisible ( char str [ ] , int k ) { int n = strlen ( str ) ; int c = 0 ;"}
{"text":"count of number of 0 from last","code":"for ( int i = 0 ; i < k ; i ++ ) if ( str [ n - i - 1 ] == '0' ) c ++ ;"}
{"text":"if count = k , number is evenly divisible , so returns true else false","code":"return ( c == k ) ; }"}
{"text":"Driver program to test above","code":"int main ( ) {"}
{"text":"first example","code":"char str1 [ ] = \"10101100\" ; int k = 2 ; if ( isDivisible ( str1 , k ) ) cout << \" Yes \" << endl ; else cout << \" No \" << \" STRNEWLINE \" ;"}
{"text":"Second example","code":"char str2 [ ] = \"111010100\" ; k = 2 ; if ( isDivisible ( str2 , k ) ) cout << \" Yes \" << endl ; else cout << \" No \" << endl ; return 0 ; }"}
{"text":"function to check whether characters of a string can form a palindrome","code":"bool canFormPalindrome ( string str ) {"}
{"text":"Create a count array and initialize all values as 0","code":"int count [ NO_OF_CHARS ] = { 0 } ;"}
{"text":"For each character in input strings , increment count in the corresponding count array","code":"for ( int i = 0 ; str [ i ] ; i ++ ) count [ str [ i ] ] ++ ;"}
{"text":"Count odd occurring characters","code":"int odd = 0 ; for ( int i = 0 ; i < NO_OF_CHARS ; i ++ ) { if ( count [ i ] & 1 ) odd ++ ; if ( odd > 1 ) return false ; }"}
{"text":"Return true if odd count is 0 or 1 ,","code":"return true ; }"}
{"text":"Driver program to test to print printDups","code":"int main ( ) { canFormPalindrome ( \" geeksforgeeks \" ) ? cout << \" Yes STRNEWLINE \" : cout << \" No STRNEWLINE \" ; canFormPalindrome ( \" geeksogeeks \" ) ? cout << \" Yes STRNEWLINE \" : cout << \" No STRNEWLINE \" ; return 0 ; }"}
{"text":"CPP program to check if a given string is a valid integer","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Returns true if s is a number else false","code":"bool isNumber ( string s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( isdigit ( s [ i ] ) == false ) return false ; return true ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Saving the input in a string","code":"string str = \"6790\" ;"}
{"text":"Function returns 1 if all elements are in range '0-9'","code":"if ( isNumber ( str ) ) cout << \" Integer \" ;"}
{"text":"Function returns 0 if the input is not an integer","code":"else cout < < \" String \" ; }"}
{"text":"C ++ program to reverse a string using recursion","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print reverse of the passed string","code":"void reverse ( string str ) { if ( str . size ( ) == 0 ) { return ; } reverse ( str . substr ( 1 ) ) ; cout << str [ 0 ] ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { string a = \" Geeks \u2581 for \u2581 Geeks \" ; reverse ( a ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Stores the count of distinct colors in box1","code":"static int box1 = 0 ;"}
{"text":"Stores the count of distinct colors in box2","code":"static int box2 = 0 ; static int fact [ 11 ] ;"}
{"text":"Function to calculate the required probability","code":"double getProbability ( int balls [ ] , int M ) {"}
{"text":"Calculate factorial from [ 1 , 10 ]","code":"factorial ( 10 ) ;"}
{"text":"Assign all distinct balls to second box","code":"box2 = M ;"}
{"text":"Total number of balls","code":"int K = 0 ;"}
{"text":"Calculate total number of balls","code":"for ( int i = 0 ; i < M ; i ++ ) K += balls [ i ] ;"}
{"text":"If K is an odd number","code":"if ( K % 2 == 1 ) return 0 ;"}
{"text":"Total ways of distributing the balls in two equal halves","code":"long all = comb ( K , K \/ 2 ) ;"}
{"text":"Required number of ways","code":"long validPermutation = validPermutations ( K \/ 2 , balls , 0 , 0 , M ) ;"}
{"text":"Return the required probability","code":"return ( double ) validPermutation \/ all ; }"}
{"text":"Function to calculate total number of possible distributions which satisfies the given conditions","code":"long validPermutations ( int n , int balls [ ] , int usedBalls , int i , int M ) {"}
{"text":"If used balls is equal to K \/ 2","code":"if ( usedBalls == n ) {"}
{"text":"If box1 is equal to box2","code":"return box1 == box2 ? 1 : 0 ; }"}
{"text":"Base condition","code":"if ( i >= M ) return 0 ;"}
{"text":"Stores the number of ways of distributing remaining balls without including the current balls in box1","code":"long res = validPermutations ( n , balls , usedBalls , i + 1 , M ) ;"}
{"text":"Increment box1 by one","code":"box1 ++ ;"}
{"text":"Iterate over the range [ 1 , balls [ i ] ]","code":"for ( int j = 1 ; j <= balls [ i ] ; j ++ ) {"}
{"text":"If all the balls goes to box1 , then decrease box2 by one","code":"if ( j == balls [ i ] ) box2 -- ;"}
{"text":"Total number of ways of selecting j balls","code":"long combinations = comb ( balls [ i ] , j ) ;"}
{"text":"Increment res by total number of valid ways of distributing the remaining balls","code":"res += combinations * validPermutations ( n , balls , usedBalls + j , i + 1 , M ) ; }"}
{"text":"Decrement box1 by one","code":"box1 -- ;"}
{"text":"Increment box2 by 1","code":"box2 ++ ; return res ; }"}
{"text":"Function to calculate factorial of N","code":"void factorial ( int N ) {"}
{"text":"Base Case","code":"fact [ 0 ] = 1 ;"}
{"text":"Iterate over the range [ 1 , N ]","code":"for ( int i = 1 ; i <= N ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ; }"}
{"text":"Function to calculate NcR","code":"long comb ( int n , int r ) { long res = fact [ n ] \/ fact [ r ] ; res \/= fact [ n - r ] ; return res ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 2 , 1 , 1 } ; int N = 4 ; int M = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Print the result","code":"cout << ( getProbability ( arr , M ) ) ; return 0 ; }"}
{"text":"C ++ Program to find the area of a regular polygon with given radius","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of a regular polygon","code":"float polyarea ( float n , float r ) {"}
{"text":"Side and radius cannot be negative","code":"if ( r < 0 && n < 0 ) return -1 ;"}
{"text":"Area degree converted to radians","code":"float A = ( ( r * r * n ) * sin ( ( 360 \/ n ) * 3.14159 \/ 180 ) ) \/ 2 ; return A ; }"}
{"text":"Driver code","code":"int main ( ) { float r = 9 , n = 6 ; cout << polyarea ( n , r ) << endl ; return 0 ; }"}
{"text":"Checking if a plane can be divide by a line at 45 degrees such that weight sum is equal","code":"void is_partition_possible ( int n , int x [ ] , int y [ ] , int w [ ] ) { map < int , int > weight_at_x ; int max_x = -2e3 , min_x = 2e3 ;"}
{"text":"Rotating each point by 45 degrees and calculating prefix sum . Also , finding maximum and minimum x coordinates","code":"for ( int i = 0 ; i < n ; i ++ ) { int new_x = x [ i ] - y [ i ] ; max_x = max ( max_x , new_x ) ; min_x = min ( min_x , new_x ) ;"}
{"text":"storing weight sum upto x - y point","code":"weight_at_x [ new_x ] += w [ i ] ; } vector < int > sum_till ; sum_till . push_back ( 0 ) ;"}
{"text":"Finding prefix sum","code":"for ( int x = min_x ; x <= max_x ; x ++ ) { sum_till . push_back ( sum_till . back ( ) + weight_at_x [ x ] ) ; } int total_sum = sum_till . back ( ) ; int partition_possible = false ; for ( int i = 1 ; i < sum_till . size ( ) ; i ++ ) { if ( sum_till [ i ] == total_sum - sum_till [ i ] ) partition_possible = true ;"}
{"text":"Line passes through i , so it neither falls left nor right .","code":"if ( sum_till [ i - 1 ] == total_sum - sum_till [ i ] ) partition_possible = true ; } printf ( partition_possible ? \" YES STRNEWLINE \" : \" NO STRNEWLINE \" ) ; }"}
{"text":"Driven Program","code":"int main ( ) { int n = 3 ; int x [ ] = { -1 , -2 , 1 } ; int y [ ] = { 1 , 1 , -1 } ; int w [ ] = { 3 , 1 , 4 } ; is_partition_possible ( n , x , y , w ) ; return 0 ; }"}
{"text":"C ++ program find slope of perpendicular line","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the Slope of other line","code":"double findPCSlope ( double m ) { return -1.0 \/ m ; }"}
{"text":"Driver code","code":"int main ( ) { double m = 2.0 ; cout << findPCSlope ( m ) ; return 0 ; }"}
{"text":"C ++ Program to find area of segment of a circle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; float pi = 3.14159 ;"}
{"text":"Function to find area of segment","code":"float area_of_segment ( float radius , float angle ) {"}
{"text":"Calculating area of sector","code":"float area_of_sector = pi * ( radius * radius ) * ( angle \/ 360 ) ;"}
{"text":"Calculating area of triangle","code":"float area_of_triangle = ( float ) 1 \/ 2 * ( radius * radius ) * sin ( ( angle * pi ) \/ 180 ) ; return area_of_sector - area_of_triangle ; }"}
{"text":"Driver Code","code":"int main ( ) { float radius = 10.0 , angle = 90.0 ; cout << \" Area \u2581 of \u2581 minor \u2581 segment \u2581 = \u2581 \" << area_of_segment ( radius , angle ) << endl ; cout << \" Area \u2581 of \u2581 major \u2581 segment \u2581 = \u2581 \" << area_of_segment ( radius , ( 360 - angle ) ) ; }"}
{"text":"C ++ program to find Area of a Sector","code":"#include <iostream> NEW_LINE using namespace std ; void SectorArea ( double radius , double angle ) { if ( angle >= 360 ) cout << \" Angle \u2581 not \u2581 possible \" ;"}
{"text":"Calculating area of the sector","code":"else { double sector = ( ( 22 * radius * radius ) \/ 7 ) * ( angle \/ 360 ) ; cout << sector ; } }"}
{"text":"Driver code","code":"int main ( ) { double radius = 9 ; double angle = 60 ; SectorArea ( radius , angle ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate total number of prime factor with their prime factor","code":"unordered_map < int , int > PrimeFactor ( int N ) { unordered_map < int , int > primef ;"}
{"text":"Iterate while the number is even","code":"while ( N % 2 == 0 ) { if ( primef . count ( 2 ) ) { primef [ 2 ] += 1 ; } else { primef [ 2 ] = 1 ; }"}
{"text":"Reduce to half","code":"N \/= 2 ; }"}
{"text":"Iterate up to sqrt ( N )","code":"for ( int i = 3 ; i <= sqrt ( N ) ; i ++ ) {"}
{"text":"Iterate while N has factors of i","code":"while ( N % i == 0 ) { if ( primef . count ( i ) ) { primef [ i ] += 1 ; } else { primef [ i ] = 1 ; }"}
{"text":"Removing one factor of i","code":"N \/= 2 ; } } if ( N > 2 ) { primef [ N ] = 1 ; } return primef ; }"}
{"text":"Function to count the number of factors","code":"int CountToMakeEqual ( int X , int Y ) {"}
{"text":"Find the GCD","code":"int gcdofXY = __gcd ( X , Y ) ;"}
{"text":"Find multiples left in X and Y","code":"int newX = Y \/ gcdofXY ; int newY = X \/ gcdofXY ;"}
{"text":"Find prime factor of multiple left in X and Y","code":"unordered_map < int , int > primeX ; unordered_map < int , int > primeY ; primeX = PrimeFactor ( newX ) ; primeY = PrimeFactor ( newY ) ;"}
{"text":"Initialize ans","code":"int ans = 0 ;"}
{"text":"Check if it possible to obtain X or not","code":"for ( auto c : primeX ) { if ( X % c . first != 0 ) { return -1 ; } ans += primeX [ c . first ] ; }"}
{"text":"Check if it possible to obtain Y or not","code":"for ( auto c : primeY ) { if ( Y % c . first != 0 ) { return -1 ; } ans += primeY [ c . first ] ; }"}
{"text":"return main ans","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Given Input","code":"int X = 36 ; int Y = 48 ;"}
{"text":"Function Call","code":"int ans = CountToMakeEqual ( X , Y ) ; cout << ans << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Stores the details of the Segment","code":"struct Node { int L , R , V ; } ;"}
{"text":"Function to check whether the graph is bipartite or not","code":"bool check ( vector < int > Adj [ ] , int Src , int N , bool visited [ ] ) { int color [ N ] = { 0 } ;"}
{"text":"Mark source node as visited","code":"visited [ Src ] = true ; queue < int > q ;"}
{"text":"Push the source vertex in queue","code":"q . push ( Src ) ; while ( ! q . empty ( ) ) {"}
{"text":"Get the front of the queue","code":"int u = q . front ( ) ; q . pop ( ) ;"}
{"text":"Assign the color to the popped node","code":"int Col = color [ u ] ;"}
{"text":"Traverse the adjacency list of the node u","code":"for ( int x : Adj [ u ] ) {"}
{"text":"If any node is visited & a different colors has been assigned , then return false","code":"if ( visited [ x ] == true && color [ x ] == Col ) { return false ; } else if ( visited [ x ] == false ) {"}
{"text":"Set visited [ x ]","code":"visited [ x ] = true ;"}
{"text":"Push the node x into the queue","code":"q . push ( x ) ;"}
{"text":"Update color of node","code":"color [ x ] = 1 - Col ; } } }"}
{"text":"If the graph is bipartite","code":"return true ; }"}
{"text":"Function to add an edge between the nodes u and v","code":"void addEdge ( vector < int > Adj [ ] , int u , int v ) { Adj [ u ] . push_back ( v ) ; Adj [ v ] . push_back ( u ) ; }"}
{"text":"Function to check if the assignment of direction can be possible to all the segments , such that they do not intersect after a long period of time","code":"void isPossible ( struct Node Arr [ ] , int N ) {"}
{"text":"Stores the adjacency list of the created graph","code":"vector < int > Adj [ N ] ;"}
{"text":"Generate all possible pairs","code":"for ( int i = 0 ; i < N - 1 ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) {"}
{"text":"If segments do not overlap","code":"if ( Arr [ i ] . R < Arr [ j ] . L Arr [ i ] . L > Arr [ j ] . R ) { continue ; }"}
{"text":"Otherwise , the segments overlap","code":"else { if ( Arr [ i ] . V == Arr [ j ] . V ) {"}
{"text":"If both segments have same speed , then add an edge","code":"addEdge ( Adj , i , j ) ; } } } }"}
{"text":"Keep the track of visited nodes","code":"bool visited [ N ] = { false } ;"}
{"text":"Iterate for all possible nodes","code":"for ( int i = 0 ; i < N ; i ++ ) { if ( visited [ i ] == false && Adj [ i ] . size ( ) > 0 ) {"}
{"text":"Check whether graph is bipartite or not","code":"if ( check ( Adj , i , N , visited ) == false ) { cout << \" No \" ; return ; } } }"}
{"text":"If the graph is bipartite","code":"cout << \" Yes \" ; }"}
{"text":"Driver Code","code":"int main ( ) { struct Node arr [ ] = { { 5 , 7 , 2 } , { 4 , 6 , 1 } , { 1 , 5 , 2 } , { 6 , 5 , 1 } } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; isPossible ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void dfs ( int temp , int n , vector < int > & sol ) ; void lexNumbers ( int n ) { vector < int > sol ; dfs ( 1 , n , sol ) ; cout << \" [ \" << sol [ 0 ] ; for ( int i = 1 ; i < sol . size ( ) ; i ++ ) cout << \" , \u2581 \" << sol [ i ] ; cout << \" ] \" ; } void dfs ( int temp , int n , vector < int > & sol ) { if ( temp > n ) return ; sol . push_back ( temp ) ; dfs ( temp * 10 , n , sol ) ; if ( temp % 10 != 9 ) dfs ( temp + 1 , n , sol ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 15 ; lexNumbers ( n ) ; return 0 ; }"}
{"text":"Function to find minimum swaps","code":"#include <iostream> NEW_LINE using namespace std ; int minimumSwaps ( int arr [ ] , int n ) {"}
{"text":"Initialise count variable","code":"int count = 0 ; int i = 0 ; while ( i < n ) {"}
{"text":"If current element is not at the right position","code":"if ( arr [ i ] != i + 1 ) { while ( arr [ i ] != i + 1 ) { int temp = 0 ;"}
{"text":"Swap current element with correct position of that element","code":"temp = arr [ arr [ i ] - 1 ] ; arr [ arr [ i ] - 1 ] = arr [ i ] ; arr [ i ] = temp ; count ++ ; } }"}
{"text":"Increment for next index when current element is at correct position","code":"i ++ ; } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 3 , 4 , 1 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function to find minimum swaps","code":"cout << minimumSwaps ( arr , n ) ; }"}
{"text":"C ++ program to merge K sorted doubly linked list in sorted order","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"A linked list node","code":"struct Node { int data ; Node * next ; Node * prev ; } ;"}
{"text":"Given a reference ( pointer to pointer ) to the head Of a DLL and an int , appends a new node at the end","code":"void append ( struct Node * * head_ref , int new_data ) {"}
{"text":"Allocate node","code":"struct Node * new_node = ( struct Node * ) malloc ( sizeof ( struct Node ) ) ; struct Node * last = * head_ref ;"}
{"text":"Put in the data","code":"new_node -> data = new_data ;"}
{"text":"This new node is going to be the last node , so make next of it as NULL","code":"new_node -> next = NULL ;"}
{"text":"If the Linked List is empty , then make the new node as head","code":"if ( * head_ref == NULL ) { new_node -> prev = NULL ; * head_ref = new_node ; return ; }"}
{"text":"Else traverse till the last node","code":"while ( last -> next != NULL ) last = last -> next ;"}
{"text":"Change the next of last node","code":"last -> next = new_node ;"}
{"text":"Make last node as previous of new node","code":"new_node -> prev = last ; return ; }"}
{"text":"Function to print the list","code":"void printList ( Node * node ) { Node * last ;"}
{"text":"Run while loop unless node becomes null","code":"while ( node != NULL ) { cout << node -> data << \" \u2581 \" ; last = node ; node = node -> next ; } }"}
{"text":"Function to merge two sorted doubly linked lists","code":"Node * mergeList ( Node * p , Node * q ) { Node * s = NULL ;"}
{"text":"If any of the list is empty","code":"if ( p == NULL q == NULL ) { return ( p == NULL ? q : p ) ; }"}
{"text":"Comparison the data of two linked list","code":"if ( p -> data < q -> data ) { p -> prev = s ; s = p ; p = p -> next ; } else { q -> prev = s ; s = q ; q = q -> next ; }"}
{"text":"Store head pointer before merge the list","code":"Node * head = s ; while ( p != NULL && q != NULL ) { if ( p -> data < q -> data ) {"}
{"text":"Changing of pointer between Two list for merging","code":"s -> next = p ; p -> prev = s ; s = s -> next ; p = p -> next ; } else {"}
{"text":"Changing of pointer between Two list for merging","code":"s -> next = q ; q -> prev = s ; s = s -> next ; q = q -> next ; } }"}
{"text":"Condition to check if any anyone list not end","code":"if ( p == NULL ) { s -> next = q ; q -> prev = s ; } if ( q == NULL ) { s -> next = p ; p -> prev = s ; }"}
{"text":"Return head pointer of merged list","code":"return head ; }"}
{"text":"Function to merge all sorted linked list in sorted order","code":"Node * mergeAllList ( Node * head [ ] , int k ) { Node * finalList = NULL ; for ( int i = 0 ; i < k ; i ++ ) {"}
{"text":"Function call to merge two sorted doubly linked list at a time","code":"finalList = mergeList ( finalList , head [ i ] ) ; }"}
{"text":"Return final sorted doubly linked list","code":"return finalList ; }"}
{"text":"Driver code","code":"int main ( ) { int k = 3 ; Node * head [ k ] ;"}
{"text":"Loop to initialize all the lists to empty","code":"for ( int i = 0 ; i < k ; i ++ ) { head [ i ] = NULL ; }"}
{"text":"Create first doubly linked List List1 -> 1 <= > 5 <= > 9","code":"append ( & head [ 0 ] , 1 ) ; append ( & head [ 0 ] , 5 ) ; append ( & head [ 0 ] , 9 ) ;"}
{"text":"Create second doubly linked List List2 -> 2 <= > 3 <= > 7 <= > 12","code":"append ( & head [ 1 ] , 2 ) ; append ( & head [ 1 ] , 3 ) ; append ( & head [ 1 ] , 7 ) ; append ( & head [ 1 ] , 12 ) ;"}
{"text":"Create third doubly linked List List3 -> 8 <= > 11 <= > 13 <= > 18","code":"append ( & head [ 2 ] , 8 ) ; append ( & head [ 2 ] , 11 ) ; append ( & head [ 2 ] , 13 ) ; append ( & head [ 2 ] , 18 ) ;"}
{"text":"Function call to merge all sorted doubly linked lists in sorted order","code":"Node * finalList = mergeAllList ( head , k ) ;"}
{"text":"Print final sorted list","code":"printList ( finalList ) ; return 0 ; }"}
{"text":"Recursive C ++ program to sort an array using selection sort","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Return minimum index","code":"int minIndex ( int a [ ] , int i , int j ) { if ( i == j ) return i ;"}
{"text":"Find minimum of remaining elements","code":"int k = minIndex ( a , i + 1 , j ) ;"}
{"text":"Return minimum of current and remaining .","code":"return ( a [ i ] < a [ k ] ) ? i : k ; }"}
{"text":"Recursive selection sort . n is size of a [ ] and index is index of starting element .","code":"void recurSelectionSort ( int a [ ] , int n , int index = 0 ) {"}
{"text":"Return when starting and size are same","code":"if ( index == n ) return ;"}
{"text":"calling minimum index function for minimum index","code":"int k = minIndex ( a , index , n - 1 ) ;"}
{"text":"Swapping when index nd minimum index are not same","code":"if ( k != index )"}
{"text":"swap","code":"swap ( a [ k ] , a [ index ] ) ;"}
{"text":"Recursively calling selection sort function","code":"recurSelectionSort ( a , n , index + 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 3 , 1 , 5 , 2 , 7 , 0 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Calling function","code":"recurSelectionSort ( arr , n ) ;"}
{"text":"printing sorted array","code":"for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; cout << endl ; return 0 ; }"}
{"text":"Recursive C ++ program for insertion sort","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Recursive function to sort an array using insertion sort","code":"void insertionSortRecursive ( int arr [ ] , int n ) {"}
{"text":"Base case","code":"if ( n <= 1 ) return ;"}
{"text":"Sort first n - 1 elements","code":"insertionSortRecursive ( arr , n - 1 ) ;"}
{"text":"Insert last element at its correct position in sorted array .","code":"int last = arr [ n - 1 ] ; int j = n - 2 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position","code":"while ( j >= 0 && arr [ j ] > last ) { arr [ j + 1 ] = arr [ j ] ; j -- ; } arr [ j + 1 ] = last ; }"}
{"text":"A utility function to print an array of size n","code":"void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver program to test insertion sort","code":"int main ( ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; insertionSortRecursive ( arr , n ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"C \/ C ++ program for recursive implementation of Bubble sort","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"A function to implement bubble sort","code":"void bubbleSort ( int arr [ ] , int n ) {"}
{"text":"Base case","code":"if ( n == 1 ) return ;"}
{"text":"One pass of bubble sort . After this pass , the largest element is moved ( or bubbled ) to end .","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] )"}
{"text":"swap arr [ i ] , arr [ i + 1 ]","code":"swap ( arr [ i ] , arr [ i + 1 ] ) ;"}
{"text":"Largest element is fixed , recur for remaining array","code":"bubbleSort ( arr , n - 1 ) ; }"}
{"text":"Function to print an array","code":"void printArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( \" % d \u2581 \" , arr [ i ] ) ; printf ( \" STRNEWLINE \" ) ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int arr [ ] = { 64 , 34 , 25 , 12 , 22 , 11 , 90 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; bubbleSort ( arr , n ) ; printf ( \" Sorted \u2581 array \u2581 : \u2581 STRNEWLINE \" ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ Program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int maxSumAfterPartition ( int arr [ ] , int n ) {"}
{"text":"Stores the positive elements","code":"vector < int > pos ;"}
{"text":"Stores the negative elements","code":"vector < int > neg ;"}
{"text":"Stores the count of 0 s","code":"int zero = 0 ;"}
{"text":"Sum of all positive numbers","code":"int pos_sum = 0 ;"}
{"text":"Sum of all negative numbers","code":"int neg_sum = 0 ;"}
{"text":"Iterate over the array","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > 0 ) { pos . push_back ( arr [ i ] ) ; pos_sum += arr [ i ] ; } else if ( arr [ i ] < 0 ) { neg . push_back ( arr [ i ] ) ; neg_sum += arr [ i ] ; } else { zero ++ ; } }"}
{"text":"Stores the difference","code":"int ans = 0 ;"}
{"text":"Sort the positive numbers in ascending order","code":"sort ( pos . begin ( ) , pos . end ( ) ) ;"}
{"text":"Sort the negative numbers in decreasing order","code":"sort ( neg . begin ( ) , neg . end ( ) , greater < int > ( ) ) ;"}
{"text":"Case 1 : Include both positive and negative numbers","code":"if ( pos . size ( ) > 0 && neg . size ( ) > 0 ) { ans = ( pos_sum - neg_sum ) ; } else if ( pos . size ( ) > 0 ) { if ( zero > 0 ) {"}
{"text":"Put all numbers in subset A and one 0 in subset B","code":"ans = ( pos_sum ) ; } else {"}
{"text":"Put all numbers in subset A except the smallest positive number which is put in B","code":"ans = ( pos_sum - 2 * pos [ 0 ] ) ; } } else { if ( zero > 0 ) {"}
{"text":"Put all numbers in subset B and one 0 in subset A","code":"ans = ( -1 * neg_sum ) ; } else {"}
{"text":"Place the largest negative number in subset A and remaining in B","code":"ans = ( neg [ 0 ] - ( neg_sum - neg [ 0 ] ) ) ; } } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , -5 , -7 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << maxSumAfterPartition ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the bitwise OR of array elements","code":"int MaxXOR ( int arr [ ] , int N ) {"}
{"text":"Stores the resultant maximum value of Bitwise XOR","code":"int res = 0 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) { res |= arr [ i ] ; }"}
{"text":"Return the maximum value res","code":"return res ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 5 , 7 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << MaxXOR ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the number of elements common in both the arrays","code":"int countEqual ( int A [ ] , int B [ ] , int N ) {"}
{"text":"Used to traverse array A [ ] and B [ ] from the front and the back","code":"int first = 0 ; int second = N - 1 ;"}
{"text":"Stores the count of numbers common in both array","code":"int count = 0 ; while ( first < N && second >= 0 ) {"}
{"text":"If A [ first ] is less than B [ second ]","code":"if ( A [ first ] < B [ second ] ) {"}
{"text":"Increment the value of first","code":"first ++ ; }"}
{"text":"IF B [ second ] is less than A [ first ]","code":"else if ( B [ second ] < A [ first ] ) {"}
{"text":"Decrement the value of second","code":"second -- ; }"}
{"text":"A [ first ] is equal to B [ second ]","code":"else {"}
{"text":"Increment the value of count","code":"count ++ ;"}
{"text":"Increment the value of first","code":"first ++ ;"}
{"text":"Decrement the value of second","code":"second -- ; } }"}
{"text":"Return the value of count","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int A [ ] = { 2 , 4 , 5 , 8 , 12 , 13 , 17 , 18 , 20 , 22 , 309 , 999 } ; int B [ ] = { 109 , 99 , 68 , 54 , 22 , 19 , 17 , 13 , 11 , 5 , 3 , 1 } ; int N = sizeof ( A ) \/ sizeof ( int ) ; cout << countEqual ( A , B , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int arr [ 100005 ] ;"}
{"text":"Function to check if the number N is palindrome or not","code":"bool isPalindrome ( int N ) {"}
{"text":"Store the value of N","code":"int temp = N ;"}
{"text":"Store the reverse of number N","code":"int res = 0 ;"}
{"text":"Reverse temp and store in res","code":"while ( temp != 0 ) { int rem = temp % 10 ; res = res * 10 + rem ; temp \/= 10 ; }"}
{"text":"If N is the same as res , then return true","code":"if ( res == N ) { return true ; } else { return false ; } }"}
{"text":"Function to find the sum of the digits of the number N","code":"int sumOfDigits ( int N ) {"}
{"text":"Stores the sum of the digits","code":"int sum = 0 ; while ( N != 0 ) {"}
{"text":"Add the last digit of the number N to the sum","code":"sum += N % 10 ;"}
{"text":"Remove the last digit from N","code":"N \/= 10 ; }"}
{"text":"Return the resultant sum","code":"return sum ; }"}
{"text":"Function to check if N is prime or not","code":"bool isPrime ( int n ) {"}
{"text":"If i is 1 or 0 , then return false","code":"if ( n <= 1 ) { return false ; }"}
{"text":"Check if i is divisible by any number in the range [ 2 , n \/ 2 ]","code":"for ( int i = 2 ; i <= n \/ 2 ; ++ i ) {"}
{"text":"If n is divisible by i","code":"if ( n % i == 0 ) return false ; } return true ; }"}
{"text":"Function to precompute all the numbers till 10 ^ 5 that are palindromic and whose sum of digits is prime numbers","code":"void precompute ( ) {"}
{"text":"Iterate over the range 1 to 10 ^ 5","code":"for ( int i = 1 ; i <= 100000 ; i ++ ) {"}
{"text":"If i is a palindrome number","code":"if ( isPalindrome ( i ) ) {"}
{"text":"Stores the sum of the digits in i","code":"int sum = sumOfDigits ( i ) ;"}
{"text":"If the sum of digits in i is a prime number","code":"if ( isPrime ( sum ) ) arr [ i ] = 1 ; else arr [ i ] = 0 ; } else arr [ i ] = 0 ; }"}
{"text":"Find the prefix sum of arr [ ]","code":"for ( int i = 1 ; i <= 100000 ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; } }"}
{"text":"Function to count all the numbers in the given ranges that are palindromic and the sum of digits is prime numbers","code":"void countNumbers ( int Q [ ] [ 2 ] , int N ) {"}
{"text":"Function Call to precompute all the numbers till 10 ^ 5","code":"precompute ( ) ;"}
{"text":"Traverse the given queries Q [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Print the result for each query","code":"cout << ( arr [ Q [ i ] [ 1 ] ] - arr [ Q [ i ] [ 0 ] - 1 ] ) ; cout << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { int Q [ ] [ 2 ] = { { 5 , 9 } , { 1 , 101 } } ; int N = sizeof ( Q ) \/ sizeof ( Q [ 0 ] ) ;"}
{"text":"Function Call","code":"countNumbers ( Q , N ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate sum digits of n","code":"int sum ( int n ) { int res = 0 ; while ( n > 0 ) { res += n % 10 ; n \/= 10 ; } return res ; }"}
{"text":"Function to find the smallest possible integer satisfying the given condition","code":"int smallestNumber ( int n , int s ) {"}
{"text":"If the sum of digits is already smaller than S","code":"if ( sum ( n ) <= s ) { return n ; }"}
{"text":"Initialize variables","code":"int ans = n , k = 1 ; for ( int i = 0 ; i < 9 ; ++ i ) {"}
{"text":"Finding last kth digit","code":"int digit = ( ans \/ k ) % 10 ;"}
{"text":"Add remaining to make digit 0","code":"int add = k * ( ( 10 - digit ) % 10 ) ; ans += add ;"}
{"text":"If sum of digits does not exceed S","code":"if ( sum ( ans ) <= s ) { break ; }"}
{"text":"Update k","code":"k *= 10 ; } return ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given N and S","code":"int N = 3 , S = 2 ;"}
{"text":"Function call","code":"cout << smallestNumber ( N , S ) << endl ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the maximum number number of required subsequences","code":"int maxSubsequences ( int arr [ ] , int n ) {"}
{"text":"HashMap to store number of arrows available with height of arrow as key","code":"unordered_map < int , int > m ;"}
{"text":"Stores the maximum count of possible subsequences","code":"int maxCount = 0 ;"}
{"text":"Stores the count of possible subsequences","code":"int count ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if i - th element can be part of any of the previous subsequence","code":"if ( m . find ( arr [ i ] ) != m . end ( ) ) {"}
{"text":"Count of subsequences possible with arr [ i ] as the next element","code":"count = m [ arr [ i ] ] ;"}
{"text":"If more than one such subsequence exists","code":"if ( count > 1 ) {"}
{"text":"Include arr [ i ] in a subsequence","code":"m [ arr [ i ] ] = count - 1 ; }"}
{"text":"Otherwise","code":"else m . erase ( arr [ i ] ) ;"}
{"text":"Increase count of subsequence possible with arr [ i ] - 1 as the next element","code":"if ( arr [ i ] - 1 > 0 ) m [ arr [ i ] - 1 ] += 1 ; } else {"}
{"text":"Start a new subsequence","code":"maxCount ++ ;"}
{"text":"Increase count of subsequence possible with arr [ i ] - 1 as the next element","code":"if ( arr [ i ] - 1 > 0 ) m [ arr [ i ] - 1 ] += 1 ; } }"}
{"text":"Return the answer","code":"return maxCount ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 5 ; int arr [ ] = { 4 , 5 , 2 , 1 , 4 } ; cout << maxSubsequences ( arr , n ) << endl ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to remove first and last occurrence of a given character from the given string","code":"string removeOcc ( string & s , char ch ) {"}
{"text":"Traverse the given string from the beginning","code":"for ( int i = 0 ; s [ i ] ; i ++ ) {"}
{"text":"If ch is found","code":"if ( s [ i ] == ch ) { s . erase ( s . begin ( ) + i ) ; break ; } }"}
{"text":"Traverse the given string from the end","code":"for ( int i = s . length ( ) - 1 ; i > -1 ; i -- ) {"}
{"text":"If ch is found","code":"if ( s [ i ] == ch ) { s . erase ( s . begin ( ) + i ) ; break ; } } return s ; }"}
{"text":"Driver Code","code":"int main ( ) { string s = \" hello \u2581 world \" ; char ch = ' l ' ; cout << removeOcc ( s , ch ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that finds the minimum steps to reach either 0 or N for given increasing and decreasing arrays","code":"void minSteps ( int N , int increasing [ ] , int decreasing [ ] , int m1 , int m2 ) {"}
{"text":"Initialize variable to find the minimum element","code":"int mini = INT_MAX ;"}
{"text":"Find minimum element in increasing [ ] array","code":"for ( int i = 0 ; i < m1 ; i ++ ) { if ( mini > increasing [ i ] ) mini = increasing [ i ] ; }"}
{"text":"Initialize variable to find the maximum element","code":"int maxi = INT_MIN ;"}
{"text":"Find maximum element in decreasing [ ] array","code":"for ( int i = 0 ; i < m2 ; i ++ ) { if ( maxi < decreasing [ i ] ) maxi = decreasing [ i ] ; }"}
{"text":"Find the minimum steps","code":"int minSteps = max ( maxi , N - mini ) ;"}
{"text":"Print the minimum steps","code":"cout << minSteps << endl ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Given N","code":"int N = 7 ;"}
{"text":"Given increasing and decreasing array","code":"int increasing [ ] = { 3 , 5 } ; int decreasing [ ] = { 6 } ;"}
{"text":"Find length of arrays increasing and decreasing","code":"int m1 = sizeof ( increasing ) \/ sizeof ( increasing [ 0 ] ) ; int m2 = sizeof ( decreasing ) \/ sizeof ( decreasing [ 0 ] ) ;"}
{"text":"Function call","code":"minSteps ( N , increasing , decreasing , m1 , m2 ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of swaps","code":"void solve ( vector < int > & P , int n ) {"}
{"text":"New array to convert to 1 - based indexing","code":"vector < int > arr ; arr . push_back ( 0 ) ; for ( auto x : P ) arr . push_back ( x ) ;"}
{"text":"Keeps count of swaps","code":"int cnt = 0 ; for ( int i = 1 ; i < n ; i ++ ) {"}
{"text":"Check if it is an ' X ' position","code":"if ( arr [ i ] == i ) { swap ( arr [ i ] , arr [ i + 1 ] ) ; cnt ++ ; } }"}
{"text":"Corner Case","code":"if ( arr [ n ] == n ) {"}
{"text":"Swap","code":"swap ( arr [ n - 1 ] , arr [ n ] ) ; cnt ++ ; }"}
{"text":"Print the minimum swaps","code":"cout << cnt << endl ; }"}
{"text":"Driver Code","code":"signed main ( ) {"}
{"text":"Given Number N","code":"int N = 9 ;"}
{"text":"Given Permutation of N numbers","code":"vector < int > P = { 1 , 2 , 4 , 9 , 5 , 8 , 7 , 3 , 6 } ;"}
{"text":"Function Call","code":"solve ( P , N ) ; return 0 ; }"}
{"text":"C ++ program to find the number of interesting primes up to N .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find all prime numbers","code":"void SieveOfEratosthenes ( int n , unordered_set < int > & allPrimes ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries as true . A value in prime [ i ] will finally be false if i is Not a prime .","code":"bool prime [ n + 1 ] ; memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p <= n ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p greater than or equal to the square of it","code":"for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } }"}
{"text":"Store all prime numbers","code":"for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) allPrimes . insert ( p ) ; }"}
{"text":"Function to check if a number is perfect square or not","code":"int countInterestingPrimes ( int n ) {"}
{"text":"To store all primes","code":"unordered_set < int > allPrimes ; SieveOfEratosthenes ( n , allPrimes ) ;"}
{"text":"To store all interseting primes","code":"unordered_set < int > intersetingPrimes ; vector < int > squares , quadruples ;"}
{"text":"Store all perfect squares","code":"for ( int i = 1 ; i * i <= n ; i ++ ) { squares . push_back ( i * i ) ; }"}
{"text":"Store all perfect quadruples","code":"for ( int i = 1 ; i * i * i * i <= n ; i ++ ) { quadruples . push_back ( i * i * i * i ) ; }"}
{"text":"Store all interseting primes","code":"for ( auto a : squares ) { for ( auto b : quadruples ) { if ( allPrimes . count ( a + b ) ) intersetingPrimes . insert ( a + b ) ; } }"}
{"text":"Return count of interseting primes","code":"return intersetingPrimes . size ( ) ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 10 ; cout << countInterestingPrimes ( N ) ; return 0 ; }"}
{"text":"CPP code to check if the array is wave array","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check if array is wave array arr : input array n : size of array","code":"bool isWaveArray ( int arr [ ] , int n ) { bool result = true ;"}
{"text":"Check the wave form * If arr [ 1 ] is greater than left and right * Same pattern will be followed by whole * elements , else reverse pattern * will be followed by array elements","code":"if ( arr [ 1 ] > arr [ 0 ] && arr [ 1 ] > arr [ 2 ] ) { for ( int i = 1 ; i < n - 1 ; i += 2 ) { if ( arr [ i ] > arr [ i - 1 ] && arr [ i ] > arr [ i + 1 ] ) { result = true ; } else { result = false ; break ; } }"}
{"text":"Check for last element","code":"if ( result == true && n % 2 == 0 ) { if ( arr [ n - 1 ] <= arr [ n - 2 ] ) { result = false ; } } } else if ( arr [ 1 ] < arr [ 0 ] && arr [ 1 ] < arr [ 2 ] ) { for ( int i = 1 ; i < n - 1 ; i += 2 ) { if ( arr [ i ] < arr [ i - 1 ] && arr [ i ] < arr [ i + 1 ] ) { result = true ; } else { result = false ; break ; } }"}
{"text":"Check for last element","code":"if ( result == true && n % 2 == 0 ) { if ( arr [ n - 1 ] >= arr [ n - 2 ] ) { result = false ; } } } return result ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Array","code":"int arr [ ] = { 1 , 3 , 2 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; if ( isWaveArray ( arr , n ) ) { cout << \" YES \" << endl ; } else { cout << \" NO \" << endl ; } return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count number of sequences satisfying the given criteria","code":"void countPossiblities ( int arr [ ] , int n ) {"}
{"text":"Stores the index of the last occurrence of the element","code":"int lastOccur [ 100000 ] ; for ( int i = 0 ; i < n ; i ++ ) { lastOccur [ i ] = -1 ; }"}
{"text":"Initialize an array to store the number of different sequences that are possible of length i","code":"int dp [ n + 1 ] ;"}
{"text":"Base Case","code":"dp [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { int curEle = arr [ i - 1 ] ;"}
{"text":"If no operation is applied on ith element","code":"dp [ i ] = dp [ i - 1 ] ;"}
{"text":"If operation is applied on ith element","code":"if ( lastOccur [ curEle ] != -1 & lastOccur [ curEle ] < i - 1 ) { dp [ i ] += dp [ lastOccur [ curEle ] ] ; }"}
{"text":"Update the last occurrence of curEle","code":"lastOccur [ curEle ] = i ; }"}
{"text":"Finally , print the answer","code":"cout << dp [ n ] << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 1 , 2 , 2 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; countPossiblities ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE #include <vector> NEW_LINE using namespace std ;"}
{"text":"Function to print the maximum sum","code":"void maxSum ( vector < vector < int > > arr , int n , int m ) {"}
{"text":"Dp table","code":"vector < vector < int > > dp ( n ) ;"}
{"text":"Initializing dp array with 0 s","code":"for ( int i = 0 ; i < 2 ; i ++ ) { dp [ i ] = vector < int > ( m ) ; for ( int j = 0 ; j < m ; j ++ ) { dp [ i ] [ j ] = 0 ; } }"}
{"text":"Base case","code":"dp [ 0 ] [ m - 1 ] = arr [ 0 ] [ m - 1 ] ; dp [ 1 ] [ m - 1 ] = arr [ 1 ] [ m - 1 ] ;"}
{"text":"Traverse each column","code":"for ( int j = m - 2 ; j >= 0 ; j -- ) {"}
{"text":"Update answer for both rows","code":"for ( int i = 0 ; i < 2 ; i ++ ) { if ( i == 1 ) { dp [ i ] [ j ] = max ( arr [ i ] [ j ] + dp [ 0 ] [ j + 1 ] , arr [ i ] [ j ] + dp [ 0 ] [ j + 2 ] ) ; } else { dp [ i ] [ j ] = max ( arr [ i ] [ j ] + dp [ 1 ] [ j + 1 ] , arr [ i ] [ j ] + dp [ 1 ] [ j + 2 ] ) ; } } }"}
{"text":"Print the maximum sum","code":"cout << max ( dp [ 0 ] [ 0 ] , dp [ 1 ] [ 0 ] ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"vector < vector < int > > arr = { { 1 , 50 , 21 , 5 } , { 2 , 10 , 10 , 5 } } ;"}
{"text":"Number of Columns","code":"int N = arr [ 0 ] . size ( ) ;"}
{"text":"Function calls","code":"maxSum ( arr , 2 , N ) ; return 0 ; }"}
{"text":"C ++ code for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the maximum sum possible by selecting at most one element from each column such that no consecutive pairs are selected from a single row","code":"void maxSum ( vector < vector < int > > arr , int n ) {"}
{"text":"Initialize variables","code":"int r1 = 0 , r2 = 0 ;"}
{"text":"Traverse each column","code":"for ( int i = 0 ; i < n ; i ++ ) { int temp = r1 ; r1 = max ( r1 , r2 + arr [ 0 ] [ i ] ) ; r2 = max ( r2 , temp + arr [ 1 ] [ i ] ) ; }"}
{"text":"Print answer","code":"cout << max ( r1 , r2 ) ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < vector < int > > arr = { { 1 , 50 , 21 , 5 } , { 2 , 10 , 10 , 5 } } ;"}
{"text":"Numberof columns","code":"int n = arr [ 0 ] . size ( ) ; maxSum ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int mod = 1e9 + 7 ; const int mx = 1e6 ; int fact [ mx + 1 ] ;"}
{"text":"Function to calculate the factorials up to a number","code":"void Calculate_factorial ( ) { fact [ 0 ] = 1 ;"}
{"text":"Calculate the factorial","code":"for ( int i = 1 ; i <= mx ; i ++ ) { fact [ i ] = i * fact [ i - 1 ] ; fact [ i ] %= mod ; } }"}
{"text":"Function to find power ( a , b )","code":"int UniModal_per ( int a , int b ) { long long int res = 1 ;"}
{"text":"Iterate until b exists","code":"while ( b ) {"}
{"text":"If b is divisible by 2","code":"if ( b % 2 ) res = res * a ; res %= mod ; a = a * a ; a %= mod ;"}
{"text":"Decrease the value of b","code":"b \/= 2 ; }"}
{"text":"Return the answer","code":"return res ; }"}
{"text":"Function that counts the unimodal and non - unimodal permutations of a given integer N","code":"void countPermutations ( int n ) {"}
{"text":"Function Call for finding factorials up to N","code":"Calculate_factorial ( ) ;"}
{"text":"Function to count unimodal permutations","code":"int uni_modal = UniModal_per ( 2 , n - 1 ) ;"}
{"text":"Non - unimodal permutation is N ! - unimodal permutations","code":"int nonuni_modal = fact [ n ] - uni_modal ; cout << uni_modal << \" \u2581 \" << nonuni_modal ; return ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Number N","code":"int N = 4 ;"}
{"text":"Function Call","code":"countPermutations ( N ) ; return 0 ; }"}
{"text":"C ++ Program to find the longest subsequence possible that starts and ends with 1 and filled with 0 in the middle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int longestSubseq ( string s , int length ) {"}
{"text":"Prefix array to store the occurences of '1' and '0'","code":"int ones [ length + 1 ] , zeroes [ length + 1 ] ;"}
{"text":"Initialise prefix arrays with 0","code":"memset ( ones , 0 , sizeof ( ones ) ) ; memset ( zeroes , 0 , sizeof ( zeroes ) ) ;"}
{"text":"Iterate over the length of the string","code":"for ( int i = 0 ; i < length ; i ++ ) {"}
{"text":"If current character is '1'","code":"if ( s [ i ] == '1' ) { ones [ i + 1 ] = ones [ i ] + 1 ; zeroes [ i + 1 ] = zeroes [ i ] ; }"}
{"text":"If current character is '0'","code":"else { zeroes [ i + 1 ] = zeroes [ i ] + 1 ; ones [ i + 1 ] = ones [ i ] ; } } int answer = INT_MIN ; int x = 0 ; for ( int i = 0 ; i <= length ; i ++ ) { for ( int j = i ; j <= length ; j ++ ) {"}
{"text":"Add '1' available for the first string","code":"x += ones [ i ] ;"}
{"text":"Add '0' available for the second string","code":"x += ( zeroes [ j ] - zeroes [ i ] ) ;"}
{"text":"Add '1' available for the third string","code":"x += ( ones [ length ] - ones [ j ] ) ;"}
{"text":"Update answer","code":"answer = max ( answer , x ) ; x = 0 ; } }"}
{"text":"Print the final result","code":"cout << answer << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string s = \"10010010111100101\" ; int length = s . length ( ) ; longestSubseq ( s , length ) ; return 0 ; }"}
{"text":"C ++ implementation to find the largest square in the matrix such that it contains atmost K 1 's","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 100 ;"}
{"text":"Function to calculate the largest square with atmost K 1 s for Q queries","code":"void largestSquare ( int matrix [ ] [ MAX ] , int R , int C , int q_i [ ] , int q_j [ ] , int K , int Q ) {"}
{"text":"Loop to solve for each query","code":"for ( int q = 0 ; q < Q ; q ++ ) { int i = q_i [ q ] ; int j = q_j [ q ] ; int min_dist = min ( min ( i , j ) , min ( R - i - 1 , C - j - 1 ) ) ; int ans = -1 ; for ( int k = 0 ; k <= min_dist ; k ++ ) { int count = 0 ;"}
{"text":"Traversing the each sub square and counting total","code":"for ( int row = i - k ; row <= i + k ; row ++ ) for ( int col = j - k ; col <= j + k ; col ++ ) count += matrix [ row ] [ col ] ;"}
{"text":"Breaks when exceeds the maximum count","code":"if ( count > K ) break ; ans = 2 * k + 1 ; } cout << ans << \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int matrix [ ] [ MAX ] = { { 1 , 0 , 1 , 0 , 0 } , { 1 , 0 , 1 , 1 , 1 } , { 1 , 1 , 1 , 1 , 1 } , { 1 , 0 , 0 , 1 , 0 } } ; int K = 9 , Q = 1 ; int q_i [ ] = { 1 } ; int q_j [ ] = { 2 } ; largestSquare ( matrix , 4 , 5 , q_i , q_j , K , Q ) ; return 0 ; }"}
{"text":"C ++ implementation to find the largest square in the matrix such that it contains atmost K 1 's","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 100 ;"}
{"text":"Function to find the largest square in the matrix such that it contains atmost K 1 's","code":"void largestSquare ( int matrix [ ] [ MAX ] , int R , int C , int q_i [ ] , int q_j [ ] , int K , int Q ) { int countDP [ R ] [ C ] ; memset ( countDP , 0 , sizeof ( countDP ) ) ;"}
{"text":"Precomputing the countDP prefix sum of the matrix","code":"countDP [ 0 ] [ 0 ] = matrix [ 0 ] [ 0 ] ; for ( int i = 1 ; i < R ; i ++ ) countDP [ i ] [ 0 ] = countDP [ i - 1 ] [ 0 ] + matrix [ i ] [ 0 ] ; for ( int j = 1 ; j < C ; j ++ ) countDP [ 0 ] [ j ] = countDP [ 0 ] [ j - 1 ] + matrix [ 0 ] [ j ] ; for ( int i = 1 ; i < R ; i ++ ) for ( int j = 1 ; j < C ; j ++ ) countDP [ i ] [ j ] = matrix [ i ] [ j ] + countDP [ i - 1 ] [ j ] + countDP [ i ] [ j - 1 ] - countDP [ i - 1 ] [ j - 1 ] ;"}
{"text":"Loop to solve Queries","code":"for ( int q = 0 ; q < Q ; q ++ ) { int i = q_i [ q ] ; int j = q_j [ q ] ;"}
{"text":"Calculating the maximum possible distance of the centre from edge","code":"int min_dist = min ( min ( i , j ) , min ( R - i - 1 , C - j - 1 ) ) ; int ans = -1 ; for ( int k = 0 ; k <= min_dist ; k ++ ) { int x1 = i - k , x2 = i + k ; int y1 = j - k , y2 = j + k ;"}
{"text":"Calculating the number of 1 s in the submatrix","code":"int count = countDP [ x2 ] [ y2 ] ; if ( x1 > 0 ) count -= countDP [ x1 - 1 ] [ y2 ] ; if ( y1 > 0 ) count -= countDP [ x2 ] [ y1 - 1 ] ; if ( x1 > 0 && y1 > 0 ) count += countDP [ x1 - 1 ] [ y1 - 1 ] ; if ( count > K ) break ; ans = 2 * k + 1 ; } cout << ans << \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int matrix [ ] [ MAX ] = { { 1 , 0 , 1 , 0 , 0 } , { 1 , 0 , 1 , 1 , 1 } , { 1 , 1 , 1 , 1 , 1 } , { 1 , 0 , 0 , 1 , 0 } } ; int K = 9 , Q = 1 ; int q_i [ ] = { 1 } ; int q_j [ ] = { 2 } ; largestSquare ( matrix , 4 , 5 , q_i , q_j , K , Q ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the minimum cost to connect the given ropes","code":"int MinCost ( int arr [ ] , int n ) {"}
{"text":"dp [ i ] [ j ] = minimum cost in range ( i , j ) sum [ i ] [ j ] = sum of range ( i , j )","code":"int dp [ n + 5 ] [ n + 5 ] , sum [ n + 5 ] [ n + 5 ] ;"}
{"text":"Initializing the sum table","code":"memset ( sum , 0 , sizeof ( 0 ) ) ; for ( int i = 0 ; i < n ; i ++ ) { int k = arr [ i ] ; for ( int j = i ; j < n ; j ++ ) { if ( i == j ) sum [ i ] [ j ] = k ; else { k += arr [ j ] ; sum [ i ] [ j ] = k ; } } }"}
{"text":"Computing minimum cost for all the possible interval ( i , j ) Left range","code":"for ( int i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"Right range","code":"for ( int j = i ; j < n ; j ++ ) { dp [ i ] [ j ] = INT_MAX ;"}
{"text":"No cost for a single rope","code":"if ( i == j ) dp [ i ] [ j ] = 0 ; else { for ( int k = i ; k < j ; k ++ ) { dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] + sum [ i ] [ j ] ) ; } } } } return dp [ 0 ] [ n - 1 ] ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 7 , 6 , 8 , 6 , 1 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << MinCost ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to recursively fill the dp array","code":"int f ( int i , int state , int A [ ] , int dp [ ] [ 3 ] , int N ) { if ( i >= N ) return 0 ;"}
{"text":"If f ( i , state ) is already calculated then return the value","code":"else if ( dp [ i ] [ state ] != -1 ) { return dp [ i ] [ state ] ; }"}
{"text":"Calculate f ( i , state ) according to the recurrence relation and store in dp [ ] [ ]","code":"else { if ( i == N - 1 ) dp [ i ] [ state ] = 1 ; else if ( state == 1 && A [ i ] > A [ i + 1 ] ) dp [ i ] [ state ] = 1 ; else if ( state == 2 && A [ i ] < A [ i + 1 ] ) dp [ i ] [ state ] = 1 ; else if ( state == 1 && A [ i ] <= A [ i + 1 ] ) dp [ i ] [ state ] = 1 + f ( i + 1 , 2 , A , dp , N ) ; else if ( state == 2 && A [ i ] >= A [ i + 1 ] ) dp [ i ] [ state ] = 1 + f ( i + 1 , 1 , A , dp , N ) ; return dp [ i ] [ state ] ; } }"}
{"text":"Function that calls the resucrsive function to fill the dp array and then returns the result","code":"int maxLenSeq ( int A [ ] , int N ) { int i , tmp , y , ans ;"}
{"text":"dp [ ] [ ] array for storing result of f ( i , 1 ) and f ( 1 , 2 )","code":"int dp [ 1000 ] [ 3 ] ;"}
{"text":"Populating the array dp [ ] with - 1","code":"memset ( dp , -1 , sizeof dp ) ;"}
{"text":"Make sure that longest UD and DU sequence starting at each index is calculated","code":"for ( i = 0 ; i < N ; i ++ ) { tmp = f ( i , 1 , A , dp , N ) ; tmp = f ( i , 2 , A , dp , N ) ; }"}
{"text":"Assume the answer to be - 1 This value will only increase","code":"ans = -1 ; for ( i = 0 ; i < N ; i ++ ) {"}
{"text":"y is the length of the longest UD sequence starting at i","code":"y = dp [ i ] [ 1 ] ; if ( i + y >= N ) ans = max ( ans , dp [ i ] [ 1 ] + 1 ) ;"}
{"text":"If length is even then add an integer and then a DU sequence starting at i + y","code":"else if ( y % 2 == 0 ) { ans = max ( ans , dp [ i ] [ 1 ] + 1 + dp [ i + y ] [ 2 ] ) ; }"}
{"text":"If length is odd then add an integer and then a UD sequence starting at i + y","code":"else if ( y % 2 == 1 ) { ans = max ( ans , dp [ i ] [ 1 ] + 1 + dp [ i + y ] [ 1 ] ) ; } } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int A [ ] = { 1 , 10 , 3 , 20 , 25 , 24 } ; int n = sizeof ( A ) \/ sizeof ( int ) ; cout << maxLenSeq ( A , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the maximized gcd after removing a single element from the given array","code":"int MaxGCD ( int a [ ] , int n ) {"}
{"text":"Prefix and Suffix arrays","code":"int Prefix [ n + 2 ] ; int Suffix [ n + 2 ] ;"}
{"text":"Single state dynamic programming relation for storing gcd of first i elements from the left in Prefix [ i ]","code":"Prefix [ 1 ] = a [ 0 ] ; for ( int i = 2 ; i <= n ; i += 1 ) { Prefix [ i ] = __gcd ( Prefix [ i - 1 ] , a [ i - 1 ] ) ; }"}
{"text":"Initializing Suffix array","code":"Suffix [ n ] = a [ n - 1 ] ;"}
{"text":"Single state dynamic programming relation for storing gcd of all the elements having greater than or equal to i in Suffix [ i ]","code":"for ( int i = n - 1 ; i >= 1 ; i -= 1 ) { Suffix [ i ] = __gcd ( Suffix [ i + 1 ] , a [ i - 1 ] ) ; }"}
{"text":"If first or last element of the array has to be removed","code":"int ans = max ( Suffix [ 2 ] , Prefix [ n - 1 ] ) ;"}
{"text":"If any other element is replaced","code":"for ( int i = 2 ; i < n ; i += 1 ) { ans = max ( ans , __gcd ( Prefix [ i - 1 ] , Suffix [ i + 1 ] ) ) ; }"}
{"text":"Return the maximized gcd","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 14 , 17 , 28 , 70 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << MaxGCD ( a , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define right  2 NEW_LINE #define left  4 NEW_LINE int dp [ left ] [ right ] ;"}
{"text":"Function to find the maximum subarray sum with flips starting from index i","code":"int findSubarraySum ( int ind , int flips , int n , int a [ ] , int k ) {"}
{"text":"If the number of flips have exceeded","code":"if ( flips > k ) return -1e9 ;"}
{"text":"Complete traversal","code":"if ( ind == n ) return 0 ;"}
{"text":"If the state has previously been visited","code":"if ( dp [ ind ] [ flips ] != -1 ) return dp [ ind ] [ flips ] ;"}
{"text":"Initially","code":"int ans = 0 ;"}
{"text":"Use Kadane 's algorithm and call two states","code":"ans = max ( 0 , a [ ind ] + findSubarraySum ( ind + 1 , flips , n , a , k ) ) ; ans = max ( ans , - a [ ind ] + findSubarraySum ( ind + 1 , flips + 1 , n , a , k ) ) ;"}
{"text":"Memoize the answer and return it","code":"return dp [ ind ] [ flips ] = ans ; }"}
{"text":"Utility function to call flips from index and return the answer","code":"int findMaxSubarraySum ( int a [ ] , int n , int k ) {"}
{"text":"Create DP array int dp [ n ] [ k + 1 ] ;","code":"memset ( dp , -1 , sizeof ( dp ) ) ; int ans = -1e9 ;"}
{"text":"Iterate and call recursive function from every index to get the maximum subarray sum","code":"for ( int i = 0 ; i < n ; i ++ ) ans = max ( ans , findSubarraySum ( i , 0 , n , a , k ) ) ;"}
{"text":"corner case","code":"if ( ans == 0 && k == 0 ) return * max_element ( a , a + n ) ; return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { int a [ ] = { -1 , -2 , -100 , -10 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; int k = 1 ; cout << findMaxSubarraySum ( a , n , k ) ; return 0 ; }"}
{"text":"CPP program to Find the sum of first N odd Fibonacci numbers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define mod  1000000007"}
{"text":"Function to calculate sum of first N odd Fibonacci numbers","code":"long long sumOddFibonacci ( int n ) { long long Sum [ n + 1 ] ;"}
{"text":"base values","code":"Sum [ 0 ] = 0 ; Sum [ 1 ] = 1 ; Sum [ 2 ] = 2 ; Sum [ 3 ] = 5 ; Sum [ 4 ] = 10 ; Sum [ 5 ] = 23 ; for ( int i = 6 ; i <= n ; i ++ ) { Sum [ i ] = ( ( Sum [ i - 1 ] + ( 4 * Sum [ i - 2 ] ) % mod - ( 4 * Sum [ i - 3 ] ) % mod + mod ) % mod + ( Sum [ i - 4 ] - Sum [ i - 5 ] + mod ) % mod ) % mod ; } return Sum [ n ] ; }"}
{"text":"Driver code","code":"int main ( ) { long long n = 6 ; cout << sumOddFibonacci ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; long long fun ( int marks [ ] , int n ) {"}
{"text":"Initializing one tablet for each student","code":"long long dp [ n ] , temp ; fill ( dp , dp + n , 1 ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"if left adjacent is having higher marks review and change all the dp values assigned before until assigned dp values are found wrong according to given constrains","code":"if ( marks [ i ] > marks [ i + 1 ] ) { temp = i ; while ( true ) { if ( ( marks [ temp ] > marks [ temp + 1 ] ) && temp >= 0 ) { if ( dp [ temp ] > dp [ temp + 1 ] ) { temp -= 1 ; continue ; } else { dp [ temp ] = dp [ temp + 1 ] + 1 ; temp -= 1 ; } } else break ; } }"}
{"text":"if right adjacent is having higher marks add one in dp of left adjacent and assign to right one","code":"else if ( marks [ i ] < marks [ i + 1 ] ) dp [ i + 1 ] = dp [ i ] + 1 ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += dp [ i ] ; return sum ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"n number of students","code":"int n = 6 ;"}
{"text":"marks of students","code":"int marks [ 6 ] = { 1 , 4 , 5 , 2 , 2 , 1 } ;"}
{"text":"solution of problem","code":"cout << fun ( marks , n ) ; return 0 ; }"}
{"text":"C ++ program to reach N - th stair by taking a maximum of K leap","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int solve ( int N , int K ) {"}
{"text":"elements of combo [ ] stores the no of possible ways to reach it by all combinations of k leaps or less","code":"int combo [ N + 1 ] = { 0 } ;"}
{"text":"assuming leap 0 exist and assigning its value to 1 for calculation","code":"combo [ 0 ] = 1 ;"}
{"text":"loop to iterate over all possible leaps upto k ;","code":"for ( int i = 1 ; i <= K ; i ++ ) {"}
{"text":"in this loop we count all possible leaps to reach the jth stair with the help of ith leap or less","code":"for ( int j = 0 ; j <= N ; j ++ ) {"}
{"text":"if the leap is not more than the i - j","code":"if ( j >= i ) {"}
{"text":"calculate the value and store in combo [ j ] to reuse it for next leap calculation for the jth stair","code":"combo [ j ] += combo [ j - i ] ; } } }"}
{"text":"returns the no of possible number of leaps to reach the top of building of n stairs","code":"return combo [ N ] ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"N i the no of total stairs K is the value of the greatest leap","code":"int N = 29 ; int K = 5 ; cout << solve ( N , K ) ; solve ( N , K ) ; return 0 ; }"}
{"text":"C ++ implementation to find LIS in circular way","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to find LIS using Dynamic programming","code":"int computeLIS ( int circBuff [ ] , int start , int end , int n ) { int LIS [ end - start ] ;"}
{"text":"Initialize LIS values for all indexes","code":"for ( int i = start ; i < end ; i ++ ) LIS [ i ] = 1 ;"}
{"text":"Compute optimized LIS values in bottom up manner","code":"for ( int i = start + 1 ; i < end ; i ++ )"}
{"text":"Set j on the basis of current window i . e . first element of the current window","code":"for ( int j = start ; j < i ; j ++ ) if ( circBuff [ i ] > circBuff [ j ] && LIS [ i ] < LIS [ j ] + 1 ) LIS [ i ] = LIS [ j ] + 1 ;"}
{"text":"Pick maximum of all LIS values","code":"int res = INT_MIN ; for ( int i = start ; i < end ; i ++ ) res = max ( res , LIS [ i ] ) ; return res ; }"}
{"text":"Function to find Longest Increasing subsequence in Circular manner","code":"int LICS ( int arr [ ] , int n ) {"}
{"text":"Make a copy of given array by appending same array elements to itself","code":"int circBuff [ 2 * n ] ; for ( int i = 0 ; i < n ; i ++ ) circBuff [ i ] = arr [ i ] ; for ( int i = n ; i < 2 * n ; i ++ ) circBuff [ i ] = arr [ i - n ] ;"}
{"text":"Perform LIS for each window of size n","code":"int res = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) res = max ( computeLIS ( circBuff , i , i + n , n ) , res ) ; return res ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int arr [ ] = { 1 , 4 , 6 , 2 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Length \u2581 of \u2581 LICS \u2581 is \u2581 \" << LICS ( arr , n ) ; return 0 ; }"}
{"text":"C ++ Program for above approach","code":"#include <iostream> NEW_LINE #include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find binomial Coefficient","code":"int binomialCoeff ( int n , int k ) { int C [ k + 1 ] ; memset ( C , 0 , sizeof ( C ) ) ; C [ 0 ] = 1 ;"}
{"text":"Constructing Pascal 's Triangle","code":"for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = min ( i , k ) ; j > 0 ; j -- ) C [ j ] = C [ j ] + C [ j - 1 ] ; } return C [ k ] ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 , m = 2 ; cout << \" Number \u2581 of \u2581 Paths : \u2581 \" << binomialCoeff ( n + m , n ) << endl ; return 0 ; }"}
{"text":"A C ++ Program to find length of the Longest Common Increasing Subsequence ( LCIS )","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns the length and the LCIS of two arrays arr1 [ 0. . n - 1 ] and arr2 [ 0. . m - 1 ]","code":"int LCIS ( int arr1 [ ] , int n , int arr2 [ ] , int m ) {"}
{"text":"table [ j ] is going to store length of LCIS ending with arr2 [ j ] . We initialize it as 0 ,","code":"int table [ m ] ; for ( int j = 0 ; j < m ; j ++ ) table [ j ] = 0 ;"}
{"text":"Traverse all elements of arr1 [ ]","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Initialize current length of LCIS","code":"int current = 0 ;"}
{"text":"For each element of arr1 [ ] , traverse all elements of arr2 [ ] .","code":"for ( int j = 0 ; j < m ; j ++ ) {"}
{"text":"If both the array have same elements . Note that we don 't break the loop here.","code":"if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ;"}
{"text":"Now seek for previous smaller common element for current element of arr1","code":"if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ] ; } }"}
{"text":"The maximum value in table [ ] is out result","code":"int result = 0 ; for ( int i = 0 ; i < m ; i ++ ) if ( table [ i ] > result ) result = table [ i ] ; return result ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int arr1 [ ] = { 3 , 4 , 9 , 1 } ; int arr2 [ ] = { 5 , 3 , 8 , 9 , 10 , 2 , 1 } ; int n = sizeof ( arr1 ) \/ sizeof ( arr1 [ 0 ] ) ; int m = sizeof ( arr2 ) \/ sizeof ( arr2 [ 0 ] ) ; cout << \" Length \u2581 of \u2581 LCIS \u2581 is \u2581 \" << LCIS ( arr1 , n , arr2 , m ) ; return ( 0 ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to get the length of the longest common prefix by rearranging the strings","code":"int longComPre ( string arr [ ] , int N ) {"}
{"text":"freq [ i ] [ j ] : stores the frequency of a character ( = j ) in a string arr [ i ]","code":"int freq [ N ] [ 256 ] ; for ( let String of DistString ) {"}
{"text":"Traverse the given array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Stores length of current string","code":"int M = arr [ i ] . length ( ) ;"}
{"text":"Traverse current string of the given array","code":"for ( int j = 0 ; j < M ; j ++ ) {"}
{"text":"Update the value of freq [ i ] [ arr [ i ] [ j ] ]","code":"freq [ i ] [ arr [ i ] [ j ] ] ++ ; } }"}
{"text":"Stores the length of longest common prefix","code":"int maxLen = 0 ;"}
{"text":"Count the minimum frequency of each character in in all the strings of arr [ ]","code":"for ( int j = 0 ; j < 256 ; j ++ ) {"}
{"text":"Stores minimum value in each row of freq [ ] [ ]","code":"int minRowVal = INT_MAX ;"}
{"text":"Calculate minimum frequency of current character in all the strings .","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Update minRowVal","code":"minRowVal = min ( minRowVal , freq [ i ] [ j ] ) ; }"}
{"text":"Update maxLen","code":"maxLen += minRowVal ; } return maxLen ; }"}
{"text":"Driver Code","code":"int main ( ) { string arr [ ] = { \" aabdc \" , \" abcd \" , \" aacd \" } ; int N = 3 ; cout << longComPre ( arr , N ) ; }"}
{"text":"C ++ program to remove characters from a String that appears exactly K times","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX_CHAR = 26 ;"}
{"text":"Function to reduce the string by removing the characters which appears exactly k times","code":"string removeChars ( char arr [ ] , int k ) {"}
{"text":"Hash table initialised to 0","code":"int hash [ MAX_CHAR ] = { 0 } ;"}
{"text":"Increment the frequency of the character","code":"int n = strlen ( arr ) ; for ( int i = 0 ; i < n ; ++ i ) hash [ arr [ i ] - ' a ' ] ++ ;"}
{"text":"To store answer","code":"string ans = \" \" ;"}
{"text":"Next index in reduced string","code":"int index = 0 ; for ( int i = 0 ; i < n ; ++ i ) {"}
{"text":"Append the characters which appears exactly k times","code":"if ( hash [ arr [ i ] - ' a ' ] != k ) { ans += arr [ i ] ; } } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { char str [ ] = \" geeksforgeeks \" ; int k = 2 ;"}
{"text":"Function call","code":"cout << removeChars ( str , k ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that prints the segments","code":"void sub_segments ( string str , int n ) { int l = str . length ( ) ; for ( int x = 0 ; x < l ; x += n ) { string newlist = str . substr ( x , n ) ;"}
{"text":"New array for every iteration","code":"list < char > arr ; list < char > :: iterator it ; for ( auto y : newlist ) { it = find ( arr . begin ( ) , arr . end ( ) , y ) ;"}
{"text":"Check if iterator points to end or not","code":"if ( it == arr . end ( ) ) arr . push_back ( y ) ; } for ( auto y : arr ) cout << y ; cout << endl ; } }"}
{"text":"Driver code","code":"int main ( ) { string str = \" geeksforgeeksgfg \" ; int n = 4 ; sub_segments ( str , n ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the encrypted string","code":"void findWord ( string c , int n ) { int co = 0 , i ;"}
{"text":"to store the encrypted string","code":"string s ( n , ' \u2581 ' ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i < n \/ 2 ) co ++ ; else co = n - i ;"}
{"text":"after ' z ' , it should go to a .","code":"if ( c [ i ] + co <= 122 ) s [ i ] = ( char ) ( ( int ) c [ i ] + co ) ; else s [ i ] = ( char ) ( ( int ) c [ i ] + co - 26 ) ; } cout << s ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \" abcd \" ; findWord ( s , s . length ( ) ) ; return 0 ; }"}
{"text":"Function to compare two strings ignoring their cases","code":"#include <iostream> NEW_LINE using namespace std ; bool equalIgnoreCase ( string str1 , string str2 ) { int i = 0 ;"}
{"text":"length of first string","code":"int len1 = str1 . size ( ) ;"}
{"text":"length of second string","code":"int len2 = str2 . size ( ) ;"}
{"text":"if length is not same simply return false since both string can not be same if length is not equal","code":"if ( len1 != len2 ) return false ;"}
{"text":"loop to match one by one all characters of both string","code":"while ( i < len1 ) {"}
{"text":"if current characters of both string are same , increase value of i to compare next character","code":"if ( str1 [ i ] == str2 [ i ] ) { i ++ ; }"}
{"text":"if any character of first string is some special character or numeric character and not same as corresponding character of second string then return false","code":"else if ( ! ( ( str1 [ i ] >= ' a ' && str1 [ i ] <= ' z ' ) || ( str1 [ i ] >= ' A ' && str1 [ i ] <= ' Z ' ) ) ) { return false ; }"}
{"text":"do the same for second string","code":"else if ( ! ( ( str2 [ i ] >= ' a ' && str2 [ i ] <= ' z ' ) || ( str2 [ i ] >= ' A ' && str2 [ i ] <= ' Z ' ) ) ) { return false ; }"}
{"text":"this block of code will be executed if characters of both strings are of different cases","code":"else {"}
{"text":"compare characters by ASCII value","code":"if ( str1 [ i ] >= ' a ' && str1 [ i ] <= ' z ' ) { if ( str1 [ i ] - 32 != str2 [ i ] ) return false ; } else if ( str1 [ i ] >= ' A ' && str1 [ i ] <= ' Z ' ) { if ( str1 [ i ] + 32 != str2 [ i ] ) return false ; }"}
{"text":"if characters matched , increase the value of i to compare next char","code":"i ++ ;"}
{"text":"if all characters of the first string are matched with corresponding characters of the second string , then return true","code":"return true ;"}
{"text":"Function to print the same or not same if strings are equal or not equal","code":"void equalIgnoreCaseUtil ( string str1 , string str2 ) { bool res = equalIgnoreCase ( str1 , str2 ) ; if ( res == true ) cout << \" Same \" << endl ; else cout << \" Not \u2581 Same \" << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string str1 , str2 ; str1 = \" Geeks \" ; str2 = \" geeks \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; str1 = \" Geek \" ; str2 = \" geeksforgeeks \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the maximized value of A","code":"string maxValue ( string a , string b ) {"}
{"text":"Sort digits in ascending order","code":"sort ( b . begin ( ) , b . end ( ) ) ; int n = a . length ( ) ; int m = b . length ( ) ;"}
{"text":"j points to largest digit in B","code":"int j = m - 1 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If all the digits of b have been used","code":"if ( j < 0 ) break ; if ( b [ j ] > a [ i ] ) { a [ i ] = b [ j ] ;"}
{"text":"Current digit has been used","code":"j -- ; } }"}
{"text":"Return the maximized value","code":"return a ; }"}
{"text":"Driver code","code":"int main ( ) { string a = \"1234\" ; string b = \"4321\" ; cout << maxValue ( a , b ) ; return 0 ; }"}
{"text":"C ++ program for above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if all of the digits in a number and it 's product with q are unequal or not","code":"bool checkIfUnequal ( int n , int q ) {"}
{"text":"convert first number into string","code":"string s1 = to_string ( n ) ; int a [ 26 ] = { 0 } ;"}
{"text":"Insert elements from 1 st number to hash","code":"for ( int i = 0 ; i < s1 . size ( ) ; i ++ ) a [ s1 [ i ] - '0' ] ++ ;"}
{"text":"Calculate corresponding product","code":"int prod = n * q ;"}
{"text":"Convert the product to string","code":"string s2 = to_string ( prod ) ;"}
{"text":"Using the hash check if any digit of product matches with the digits of input number","code":"for ( int i = 0 ; i < s2 . size ( ) ; i ++ ) {"}
{"text":"If yes , return false","code":"if ( a [ s2 [ i ] - '0' ] ) return false ; }"}
{"text":"Return true","code":"return true ; }"}
{"text":"Function to count numbers in the range [ l , r ] such that all of the digits of the number and it 's product with q are unequal","code":"int countInRange ( int l , int r , int q ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) {"}
{"text":"check for every number between l and r","code":"if ( checkIfUnequal ( i , q ) ) count ++ ; } return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int l = 10 , r = 12 , q = 2 ;"}
{"text":"Function Call","code":"cout << countInRange ( l , r , q ) ; return 0 ; }"}
{"text":"CPP program to check if we can rearrange a string such that it has alternate 0 s and 1 s .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check the binary string","code":"bool is_possible ( string s ) {"}
{"text":"length of string","code":"int l = s . length ( ) ; int one = 0 , zero = 0 ; for ( int i = 0 ; i < l ; i ++ ) {"}
{"text":"count zero 's","code":"if ( s [ i ] == '0' ) zero ++ ;"}
{"text":"count one 's","code":"else one ++ ; }"}
{"text":"if length is even","code":"if ( l % 2 == 0 ) return ( one == zero ) ;"}
{"text":"if length is odd","code":"else return ( abs ( one - zero ) == 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \"100110\" ; if ( is_possible ( s ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program to count frequencies of array items","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int limit = 255 ; void countFreq ( string str ) {"}
{"text":"Create an array to store counts . The size of array is limit + 1 and all values are initially 0","code":"vector < int > count ( limit + 1 , 0 ) ;"}
{"text":"Traverse through string characters and count frequencies","code":"for ( int i = 0 ; i < str . length ( ) ; i ++ ) count [ str [ i ] ] ++ ; for ( int i = 0 ; i <= limit ; i ++ ) if ( count [ i ] > 0 ) cout << ( char ) i << \" \u2581 \" << count [ i ] << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \" GeeksforGeeks \" ; countFreq ( str ) ; return 0 ; }"}
{"text":"C ++ program to count the set bits after taking XOR with a number K","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to store EVEN and odd variable","code":"void countEvenOdd ( int arr [ ] , int n , int K ) { int even = 0 , odd = 0 ;"}
{"text":"Store the count of even and odd set bit","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Count the set bit using in built function","code":"int x = __builtin_popcount ( arr [ i ] ) ; if ( x % 2 == 0 ) even ++ ; else odd ++ ; } int y ;"}
{"text":"Count of set - bit of K","code":"y = __builtin_popcount ( K ) ;"}
{"text":"If y is odd then , count of even and odd set bit will be interchanged","code":"if ( y & 1 ) { cout << \" Even \u2581 = \u2581 \" << odd << \" , \u2581 Odd \u2581 = \u2581 \" << even ; }"}
{"text":"Else it will remain same as the original array","code":"else { cout << \" Even \u2581 = \u2581 \" << even << \" , \u2581 Odd \u2581 = \u2581 \" << odd ; } }"}
{"text":"Driver 's Code","code":"int main ( void ) { int arr [ ] = { 4 , 2 , 15 , 9 , 8 , 8 } ; int K = 3 ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function call to count even and odd","code":"countEvenOdd ( arr , n , K ) ; return 0 ; }"}
{"text":"CPP program to convert given sentence to camel case .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to remove spaces and convert into camel case","code":"string convert ( string s ) { int n = s . length ( ) ; s [ 0 ] = tolower ( s [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) {"}
{"text":"check for spaces in the sentence","code":"if ( s [ i ] == ' \u2581 ' && i < n ) {"}
{"text":"conversion into upper case","code":"s [ i + 1 ] = tolower ( s [ i + 1 ] ) ; i ++ ; }"}
{"text":"If not space , copy character","code":"else s [ i ] = toupper ( s [ i ] ) ; }"}
{"text":"return string to main","code":"return s ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \" I \u2581 get \u2581 intern \u2581 at \u2581 geeksforgeeks \" ; cout << convert ( str ) ; return 0 ; }"}
{"text":"CPP code to transform string","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to change character 's case","code":"string change_case ( string a ) { int l = a . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) {"}
{"text":"If character is lowercase change to uppercase","code":"if ( a [ i ] >= ' a ' && a [ i ] <= ' z ' ) a [ i ] = ( char ) ( 65 + ( int ) ( a [ i ] - ' a ' ) ) ;"}
{"text":"If character is uppercase change to lowercase","code":"else if ( a [ i ] >= ' A ' && a [ i ] <= ' Z ' ) a [ i ] = ( char ) ( 97 + ( int ) ( a [ i ] - ' A ' ) ) ; } return a ; }"}
{"text":"Function to delete vowels","code":"string delete_vowels ( string a ) { string temp = \" \" ; int l = a . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) {"}
{"text":"If character is consonant","code":"if ( a [ i ] != ' a ' && a [ i ] != ' e ' && a [ i ] != ' i ' && a [ i ] != ' o ' && a [ i ] != ' u ' && a [ i ] != ' A ' && a [ i ] != ' E ' && a [ i ] != ' O ' && a [ i ] != ' U ' && a [ i ] != ' I ' ) temp += a [ i ] ; } return temp ; }"}
{"text":"Function to insert \" # \"","code":"string insert_hash ( string a ) { string temp = \" \" ; int l = a . length ( ) ; for ( int i = 0 ; i < l ; i ++ ) {"}
{"text":"If character is not special","code":"if ( ( a [ i ] >= ' a ' && a [ i ] <= ' z ' ) || ( a [ i ] >= ' A ' && a [ i ] <= ' Z ' ) ) temp = temp + ' # ' + a [ i ] ; else temp = temp + a [ i ] ; } return temp ; }"}
{"text":"Function to transform string","code":"void transformSting ( string a ) { string b = delete_vowels ( a ) ; string c = change_case ( b ) ; string d = insert_hash ( c ) ; cout << d ; }"}
{"text":"Driver function","code":"int main ( ) { string a = \" SunshinE ! ! \" ;"}
{"text":"Calling function","code":"transformSting ( a ) ; return 0 ; }"}
{"text":"C ++ implementation to check if N is a Tcefrep number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Iterative function to reverse digits of num","code":"int reverse ( int num ) { int rev_num = 0 ; while ( num > 0 ) { rev_num = rev_num * 10 + num % 10 ; num = num \/ 10 ; } return rev_num ; }"}
{"text":"Function to calculate sum of all proper divisors num -- > given natural number","code":"int properDivSum ( int num ) {"}
{"text":"Final result of summation of divisors","code":"int result = 0 ;"}
{"text":"find all divisors which divides ' num '","code":"for ( int i = 2 ; i <= sqrt ( num ) ; i ++ ) {"}
{"text":"if ' i ' is divisor of ' num '","code":"if ( num % i == 0 ) {"}
{"text":"if both divisors are same then add it only once else add both","code":"if ( i == ( num \/ i ) ) result += i ; else result += ( i + num \/ i ) ; } }"}
{"text":"Add 1 to the result as 1 is also a divisor","code":"return ( result + 1 ) ; } bool isTcefrep ( int n ) { return properDivSum ( n ) == reverse ( n ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Number N","code":"int N = 6 ;"}
{"text":"Function Call","code":"if ( isTcefrep ( N ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program to find n - th number containing only 3 and 5.","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; string findNthNo ( int n ) { string res = \" \" ; while ( n >= 1 ) {"}
{"text":"If n is odd , append 3 and move to parent","code":"if ( n & 1 ) { res = res + \"3\" ; n = ( n - 1 ) \/ 2 ; }"}
{"text":"If n is even , append 5 and move to parent","code":"else { res = res + \"5\" ; n = ( n - 2 ) \/ 2 ; } }"}
{"text":"Reverse res and return .","code":"reverse ( res . begin ( ) , res . end ( ) ) ; return res ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 5 ; cout << findNthNo ( n ) ; return 0 ; }"}
{"text":"CPP program to find n - th non - square number .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find the nth Non - Square Number","code":"int findNthNonSquare ( int n ) {"}
{"text":"conversion from int to long double is necessary in order to preserve decimal places after square root .","code":"long double x = ( long double ) n ;"}
{"text":"calculating the result","code":"long double ans = x + floor ( 0.5 + sqrt ( x ) ) ; return ( int ) ans ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"initializing the term number","code":"int n = 16 ;"}
{"text":"Print the result","code":"cout << \" The \u2581 \" << n << \" th \u2581 Non - Square \u2581 number \u2581 is \u2581 \" ; cout << findNthNonSquare ( n ) ; return 0 ; }"}
{"text":"Efficient CPP program to find sum of series with alternate signed square AP sums .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to calculate series sum","code":"int seiresSum ( int n , int a [ ] ) { return n * ( a [ 0 ] * a [ 0 ] - a [ 2 * n - 1 ] * a [ 2 * n - 1 ] ) \/ ( 2 * n - 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 2 ; int a [ ] = { 1 , 2 , 3 , 4 } ; cout << seiresSum ( n , a ) ; return 0 ; }"}
{"text":"C ++ program to find nth number that contains the digit k or divisible by k .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function for checking if digit k is in n or not","code":"int checkdigit ( int n , int k ) { while ( n ) {"}
{"text":"finding remainder","code":"int rem = n % 10 ;"}
{"text":"if digit found","code":"if ( rem == k ) return 1 ; n = n \/ 10 ; } return 0 ; }"}
{"text":"Function for finding nth number","code":"int findNthNumber ( int n , int k ) {"}
{"text":"since k is the first which satisfy the criteria , so consider it in count making count = 1 and starting from i = k + 1","code":"for ( int i = k + 1 , count = 1 ; count < n ; i ++ ) {"}
{"text":"checking that the number contain k digit or divisible by k","code":"if ( checkdigit ( i , k ) || ( i % k == 0 ) ) count ++ ; if ( count == n ) return i ; } return -1 ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 , k = 2 ; cout << findNthNumber ( n , k ) << endl ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <iostream> NEW_LINE #include <unordered_map> NEW_LINE #include <vector> NEW_LINE using namespace std ; int find_permutations ( vector < int > & arr ) { int cnt = 0 ; int max_ind = -1 , min_ind = 10000000 ; int n = arr . size ( ) ; unordered_map < int , int > index_of ;"}
{"text":"Save index of numbers of the array","code":"for ( int i = 0 ; i < n ; i ++ ) { index_of [ arr [ i ] ] = i + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) {"}
{"text":"Update min and max index with the current index and check if it 's a valid permutation","code":"max_ind = max ( max_ind , index_of [ i ] ) ; min_ind = min ( min_ind , index_of [ i ] ) ; if ( max_ind - min_ind + 1 == i ) cnt ++ ; } return cnt ; }"}
{"text":"Driver code","code":"int main ( ) { vector < int > nums ; nums . push_back ( 2 ) ; nums . push_back ( 3 ) ; nums . push_back ( 1 ) ; nums . push_back ( 5 ) ; nums . push_back ( 4 ) ; cout << find_permutations ( nums ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of the required integers","code":"int getCount ( int a [ ] , int n ) {"}
{"text":"To store the gcd of the array elements","code":"int gcd = 0 ; for ( int i = 0 ; i < n ; i ++ ) gcd = __gcd ( gcd , a [ i ] ) ;"}
{"text":"To store the count of factors of the found gcd","code":"int cnt = 0 ; for ( int i = 1 ; i * i <= gcd ; i ++ ) { if ( gcd % i == 0 ) {"}
{"text":"If g is a perfect square","code":"if ( i * i == gcd ) cnt ++ ;"}
{"text":"Factors appear in pairs","code":"else cnt += 2 ; } } return cnt ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 4 , 16 , 1024 , 48 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << getCount ( a , n ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum cost of removing characters to make the String unique","code":"int delCost ( string s , int cost [ ] , int l1 , int l2 ) {"}
{"text":"stores the visited character","code":"bool visited [ l1 ] ; memset ( visited , 0 , sizeof ( visited ) ) ;"}
{"text":"stores the answer","code":"int ans = 0 ;"}
{"text":"traverse the String","code":"for ( int i = 0 ; i < l1 ; i ++ ) {"}
{"text":"if already visited","code":"if ( visited [ i ] ) { continue ; }"}
{"text":"Stores the maximum cost of removing a particular character","code":"int maxDel = 0 ;"}
{"text":"Store the total deletion cost of a particular character","code":"int totalCost = 0 ;"}
{"text":"Mark the current character visited","code":"visited [ i ] = 1 ;"}
{"text":"Traverse the indices of the String [ i , N - 1 ]","code":"for ( int j = i ; j < l1 ; j ++ ) {"}
{"text":"If any duplicate is found","code":"if ( s [ i ] == s [ j ] ) {"}
{"text":"Update the maximum cost and total cost","code":"maxDel = max ( maxDel , cost [ j ] ) ; totalCost += cost [ j ] ;"}
{"text":"Mark the current character visited","code":"visited [ j ] = 1 ; } }"}
{"text":"Keep the character with maximum cost and delete the rest","code":"ans += totalCost - maxDel ; }"}
{"text":"return the minimum cost","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"input String","code":"string s = \" AAABBB \" ; int l1 = s . size ( ) ;"}
{"text":"input array","code":"int cost [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int l2 = sizeof ( cost ) \/ sizeof ( cost [ 0 ] ) ;"}
{"text":"function call","code":"cout << delCost ( s , cost , l1 , l2 ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find triplets such that replacing them with their XOR make all array elements equal","code":"void checkXOR ( int arr [ ] , int N ) {"}
{"text":"If N is even","code":"if ( N % 2 == 0 ) {"}
{"text":"Calculate xor of array elements","code":"int xro = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Update xor","code":"xro ^= arr [ i ] ; }"}
{"text":"If xor is not equal to 0","code":"if ( xro != 0 ) { cout << -1 << endl ; return ; }"}
{"text":"Selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal","code":"for ( int i = 0 ; i < N - 3 ; i += 2 ) { cout << i << \" \u2581 \" << i + 1 << \" \u2581 \" << i + 2 << endl ; }"}
{"text":"Selecting the triplets such that all array elements can be made equal to arr [ N - 1 ]","code":"for ( int i = 0 ; i < N - 3 ; i += 2 ) { cout << i << \" \u2581 \" << i + 1 << \" \u2581 \" << N - 1 << endl ; } } else {"}
{"text":"Selecting the triplets such that elements of the pairs ( arr [ 0 ] , arr [ 1 ] ) , ( arr [ 2 ] , arr [ 3 ] ) . . . can be made equal","code":"for ( int i = 0 ; i < N - 2 ; i += 2 ) { cout << i << \" \u2581 \" << i + 1 << \" \u2581 \" << i + 2 << endl ; }"}
{"text":"Selecting the triplets such that all array elements can be made equal to arr [ N - 1 ]","code":"for ( int i = 0 ; i < N - 2 ; i += 2 ) { cout << i << \" \u2581 \" << i + 1 << \" \u2581 \" << N - 1 << endl ; } } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 4 , 2 , 1 , 7 , 2 } ;"}
{"text":"Size of array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function call","code":"checkXOR ( arr , N ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum count of operations required to make all array elements even","code":"int make_array_element_even ( int arr [ ] , int N ) {"}
{"text":"Stores minimum count of replacements to make all array elements even","code":"int res = 0 ;"}
{"text":"Stores the count of odd continuous numbers","code":"int odd_cont_seg = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If arr [ i ] is an odd number","code":"if ( arr [ i ] % 2 == 1 ) {"}
{"text":"Update odd_cont_seg","code":"odd_cont_seg ++ ; } else { if ( odd_cont_seg > 0 ) {"}
{"text":"If odd_cont_seg is even","code":"if ( odd_cont_seg % 2 == 0 ) {"}
{"text":"Update res","code":"res += odd_cont_seg \/ 2 ; } else {"}
{"text":"Update res","code":"res += ( odd_cont_seg \/ 2 ) + 2 ; }"}
{"text":"Reset odd_cont_seg = 0","code":"odd_cont_seg = 0 ; } } }"}
{"text":"If odd_cont_seg exceeds 0","code":"if ( odd_cont_seg > 0 ) {"}
{"text":"If odd_cont_seg is even","code":"if ( odd_cont_seg % 2 == 0 ) {"}
{"text":"Update res","code":"res += odd_cont_seg \/ 2 ; } else {"}
{"text":"Update res","code":"res += odd_cont_seg \/ 2 + 2 ; } }"}
{"text":"Print the result","code":"return res ; }"}
{"text":"Drivers Code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 5 , 11 , 6 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << make_array_element_even ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find K for which there are exactly K array elements greater than or equal to K","code":"int zvalue ( vector < int > & nums ) {"}
{"text":"Finding the largest array element","code":"int m = * max_element ( nums . begin ( ) , nums . end ( ) ) ; int cnt = 0 ;"}
{"text":"Possible values of K","code":"for ( int i = 0 ; i <= m ; i ++ ) { cnt = 0 ;"}
{"text":"Traverse the array","code":"for ( int j = 0 ; j < nums . size ( ) ; j ++ ) {"}
{"text":"If current array element is greater than or equal to i","code":"if ( nums [ j ] >= i ) cnt ++ ; }"}
{"text":"If i array elements are greater than or equal to i","code":"if ( cnt == i ) return i ; }"}
{"text":"Otherwise","code":"return -1 ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > nums = { 7 , 8 , 9 , 0 , 0 , 1 } ; cout << zvalue ( nums ) << endl ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the lexicographically smallest anagram of string which contains another string","code":"pair < string , int > lexico_smallest ( string s1 , string s2 ) {"}
{"text":"Initializing the map and set","code":"map < char , int > M ; set < char > S ; pair < string , int > pr ;"}
{"text":"Iterating over s1","code":"for ( int i = 0 ; i <= s1 . size ( ) - 1 ; ++ i ) {"}
{"text":"Storing the frequency of characters present in s1","code":"M [ s1 [ i ] ] ++ ;"}
{"text":"Storing the distinct characters present in s1","code":"S . insert ( s1 [ i ] ) ; }"}
{"text":"Decreasing the frequency of characters from M that are already present in s2","code":"for ( int i = 0 ; i <= s2 . size ( ) - 1 ; ++ i ) { M [ s2 [ i ] ] -- ; } char c = s2 [ 0 ] ; int index = 0 ; string res = \" \" ;"}
{"text":"Traversing alphabets in sorted order","code":"for ( auto x : S ) {"}
{"text":"If current character of set is not equal to current character of s2","code":"if ( x != c ) { for ( int i = 1 ; i <= M [ x ] ; ++ i ) { res += x ; } } else {"}
{"text":"If element is equal to current character of s2","code":"int j = 0 ; index = res . size ( ) ;"}
{"text":"Checking for second distinct character in s2","code":"while ( s2 [ j ] == x ) { j ++ ; }"}
{"text":"s2 [ j ] will store second distinct character","code":"if ( s2 [ j ] < c ) { res += s2 ; for ( int i = 1 ; i <= M [ x ] ; ++ i ) { res += x ; } } else { for ( int i = 1 ; i <= M [ x ] ; ++ i ) { res += x ; } index += M [ x ] ; res += s2 ; } } } pr . first = res ; pr . second = index ;"}
{"text":"Return the answer","code":"return pr ; }"}
{"text":"Function to find the lexicographically largest anagram of string which contains another string","code":"string lexico_largest ( string s1 , string s2 ) {"}
{"text":"Getting the lexicographically smallest anagram","code":"pair < string , int > pr = lexico_smallest ( s1 , s2 ) ;"}
{"text":"d1 stores the prefix","code":"string d1 = \" \" ; for ( int i = pr . second - 1 ; i >= 0 ; i -- ) { d1 += pr . first [ i ] ; }"}
{"text":"d2 stores the suffix","code":"string d2 = \" \" ; for ( int i = pr . first . size ( ) - 1 ; i >= pr . second + s2 . size ( ) ; -- i ) { d2 += pr . first [ i ] ; } string res = d2 + s2 + d1 ;"}
{"text":"Return the result","code":"return res ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given two strings","code":"string s1 = \" ethgakagmenpgs \" ; string s2 = \" geeks \" ;"}
{"text":"Function Calls","code":"cout << lexico_smallest ( s1 , s2 ) . first << \" STRNEWLINE \" ; cout << lexico_largest ( s1 , s2 ) ; return ( 0 ) ; }"}
{"text":"C ++ implementation for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int sz = 1e5 ;"}
{"text":"Adjacency list to represent the tree","code":"vector < int > tree [ sz ] ;"}
{"text":"Number of vertices","code":"int n ;"}
{"text":"Mark visited \/ unvisited vertices","code":"bool vis [ sz ] ;"}
{"text":"Stores the subtree size of the corresponding nodes","code":"int subtreeSize [ sz ] ;"}
{"text":"Function to create an edge between two vertices","code":"void addEdge ( int a , int b ) {"}
{"text":"Add a to b 's list","code":"tree [ a ] . push_back ( b ) ;"}
{"text":"Add b to a 's list","code":"tree [ b ] . push_back ( a ) ; }"}
{"text":"Function to perform DFS","code":"void dfs ( int x ) {"}
{"text":"Mark the vertex visited","code":"vis [ x ] = true ;"}
{"text":"Include the node in the subtree","code":"subtreeSize [ x ] = 1 ;"}
{"text":"Traverse all its children","code":"for ( auto i : tree [ x ] ) { if ( ! vis [ i ] ) { dfs ( i ) ; subtreeSize [ x ] += subtreeSize [ i ] ; } } }"}
{"text":"Function to print the required number of paths","code":"void countPairs ( int a , int b ) { int sub = min ( subtreeSize [ a ] , subtreeSize [ b ] ) ; cout << sub * ( n - sub ) << endl ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Number of vertices","code":"n = 6 ; addEdge ( 0 , 1 ) ; addEdge ( 0 , 2 ) ; addEdge ( 1 , 3 ) ; addEdge ( 3 , 4 ) ; addEdge ( 3 , 5 ) ;"}
{"text":"Calling modified dfs function","code":"dfs ( 0 ) ;"}
{"text":"Count pairs of vertices in the tree","code":"countPairs ( 1 , 3 ) ; countPairs ( 0 , 2 ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the count of desired permutations","code":"int findPermutation ( unordered_set < int > & arr , int N ) { int pos = arr . size ( ) + 1 ;"}
{"text":"Base case","code":"if ( pos > N ) return 1 ; int res = 0 ; for ( int i = 1 ; i <= N ; i ++ ) {"}
{"text":"If i has not been inserted","code":"if ( arr . find ( i ) == arr . end ( ) ) {"}
{"text":"Backtrack","code":"if ( i % pos == 0 or pos % i == 0 ) {"}
{"text":"Insert i","code":"arr . insert ( i ) ;"}
{"text":"Recur to find valid permutations","code":"res += findPermutation ( arr , N ) ;"}
{"text":"Remove i","code":"arr . erase ( arr . find ( i ) ) ; } } }"}
{"text":"Return the final count","code":"return res ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 5 ; unordered_set < int > arr ; cout << findPermutation ( arr , N ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check if it is possible to obtain sum Y from a sequence of sum X from the array arr [ ]","code":"void solve ( int arr [ ] , int n , int X , int Y ) {"}
{"text":"Store the difference","code":"int diff = Y - X ;"}
{"text":"Iterate over the array","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 1 ) { diff = diff % ( arr [ i ] - 1 ) ; } }"}
{"text":"If diff reduced to 0","code":"if ( diff == 0 ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 7 , 9 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int X = 11 , Y = 13 ; solve ( arr , n , X , Y ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define maxN  100001"}
{"text":"Adjacency List to store the graph","code":"vector < int > adj [ maxN ] ;"}
{"text":"Stores the height of each node","code":"int height [ maxN ] ;"}
{"text":"Stores the maximum distance of a node from its ancestors","code":"int dist [ maxN ] ;"}
{"text":"Function to add edge between two vertices","code":"void addEdge ( int u , int v ) {"}
{"text":"Insert edge from u to v","code":"adj [ u ] . push_back ( v ) ;"}
{"text":"Insert edge from v to u","code":"adj [ v ] . push_back ( u ) ; }"}
{"text":"Function to calculate height of each Node","code":"void dfs1 ( int cur , int par ) {"}
{"text":"Iterate in the adjacency list of the current node","code":"for ( auto u : adj [ cur ] ) { if ( u != par ) {"}
{"text":"Dfs for child node","code":"dfs1 ( u , cur ) ;"}
{"text":"Calculate height of nodes","code":"height [ cur ] = max ( height [ cur ] , height [ u ] ) ; } }"}
{"text":"Increase height","code":"height [ cur ] += 1 ; }"}
{"text":"Function to calculate the maximum distance of a node from its ancestor","code":"void dfs2 ( int cur , int par ) { int max1 = 0 ; int max2 = 0 ;"}
{"text":"Iterate in the adjacency list of the current node","code":"for ( auto u : adj [ cur ] ) { if ( u != par ) {"}
{"text":"Find two children with maximum heights","code":"if ( height [ u ] >= max1 ) { max2 = max1 ; max1 = height [ u ] ; } else if ( height [ u ] > max2 ) { max2 = height [ u ] ; } } } int sum = 0 ; for ( auto u : adj [ cur ] ) { if ( u != par ) {"}
{"text":"Calculate the maximum distance with ancestor for every node","code":"sum = ( ( max1 == height [ u ] ) ? max2 : max1 ) ; if ( max1 == height [ u ] ) dist [ u ] = 1 + max ( 1 + max2 , dist [ cur ] ) ; else dist [ u ] = 1 + max ( 1 + max1 , dist [ cur ] ) ;"}
{"text":"Calculating for children","code":"dfs2 ( u , cur ) ; } } }"}
{"text":"Driver Code","code":"int main ( ) { int n = 6 ; addEdge ( 1 , 2 ) ; addEdge ( 2 , 3 ) ; addEdge ( 2 , 4 ) ; addEdge ( 2 , 5 ) ; addEdge ( 5 , 6 ) ;"}
{"text":"Calculate height of nodes of the tree","code":"dfs1 ( 1 , 0 ) ;"}
{"text":"Calculate the maximum distance with ancestors","code":"dfs2 ( 1 , 0 ) ;"}
{"text":"Print the maximum of the two distances from each node","code":"for ( int i = 1 ; i <= n ; i ++ ) cout << ( max ( dist [ i ] , height [ i ] ) - 1 ) << \" \u2581 \" ; return 0 ; }"}
{"text":"CPP program to find middle of three distinct numbers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int middleOfThree ( int a , int b , int c ) {"}
{"text":"Function to find the middle of three number","code":"int middleOfThree ( int a , int b , int c ) {"}
{"text":"Checking for b","code":"if ( ( a < b && b < c ) || ( c < b && b < a ) ) return b ;"}
{"text":"Checking for a","code":"else if ( ( b < a && a < c ) || ( c < a && a < b ) ) return a ; else return c ; }"}
{"text":"Driver Code","code":"int main ( ) { int a = 20 , b = 30 , c = 40 ; cout << middleOfThree ( a , b , c ) ; return 0 ; }"}
{"text":"C ++ program for implementation of selection sort","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to implement the selection sort","code":"void swap ( int * xp , int * yp ) { int temp = * xp ; * xp = * yp ; * yp = temp ; } void selectionSort ( int arr [ ] , int n ) { int i , j , min_idx ;"}
{"text":"One by one move boundary of unsorted subarray","code":"for ( i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Find the minimum element in unsorted array","code":"min_idx = i ; for ( j = i + 1 ; j < n ; j ++ ) if ( arr [ j ] < arr [ min_idx ] ) min_idx = j ;"}
{"text":"Swap the found minimum element with the first element","code":"swap ( & arr [ min_idx ] , & arr [ i ] ) ; } }"}
{"text":"Function to print an array","code":"void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) { cout << arr [ i ] << \" \u2581 \" ; } cout << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 64 , 25 , 12 , 22 , 11 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"selectionSort ( arr , n ) ; cout << \" Sorted \u2581 array : \u2581 STRNEWLINE \" ;"}
{"text":"Print the array","code":"printArray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool checkStr1CanConStr2 ( string & str1 , string & str2 ) {"}
{"text":"Stores length of str1","code":"int N = str1 . length ( ) ;"}
{"text":"Stores length of str2","code":"int M = str2 . length ( ) ;"}
{"text":"Stores distinct characters of str1","code":"set < int > st1 ;"}
{"text":"Stores distinct characters of str2","code":"set < int > st2 ;"}
{"text":"Stores frequency of each character of str1","code":"int hash1 [ 256 ] = { 0 } ;"}
{"text":"Traverse the string str1","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Update frequency of str1 [ i ]","code":"hash1 [ str1 [ i ] ] ++ ; }"}
{"text":"Traverse the string str1","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Insert str1 [ i ] into st1","code":"st1 . insert ( str1 [ i ] ) ; }"}
{"text":"Traverse the string str2","code":"for ( int i = 0 ; i < M ; i ++ ) {"}
{"text":"Insert str1 [ i ] into st1","code":"st2 . insert ( str2 [ i ] ) ; }"}
{"text":"If distinct characters in str1 and str2 are not same","code":"if ( st1 != st2 ) { return false ; }"}
{"text":"Stores frequency of each character of str2","code":"int hash2 [ 256 ] = { 0 } ;"}
{"text":"Traverse the string str2","code":"for ( int i = 0 ; i < M ; i ++ ) {"}
{"text":"Update frequency of str2 [ i ]","code":"hash2 [ str2 [ i ] ] ++ ; }"}
{"text":"Sort hash1 [ ] array","code":"sort ( hash1 , hash1 + 256 ) ;"}
{"text":"Sort hash2 [ ] array","code":"sort ( hash2 , hash2 + 256 ) ;"}
{"text":"Traverse hash1 [ ] and hash2 [ ]","code":"for ( int i = 0 ; i < 256 ; i ++ ) {"}
{"text":"If hash1 [ i ] not equal to hash2 [ i ]","code":"if ( hash1 [ i ] != hash2 [ i ] ) { return false ; } } return true ; }"}
{"text":"Driver Code","code":"int main ( ) { string str1 = \" xyyzzlll \" ; string str2 = \" yllzzxxx \" ; if ( checkStr1CanConStr2 ( str1 , str2 ) ) { cout << \" True \" ; } else { cout << \" False \" ; } }"}
{"text":"C ++ program to sort the array in a given index range","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to sort the elements of the array from index a to index b","code":"void partSort ( int arr [ ] , int N , int a , int b ) {"}
{"text":"Variables to store start and end of the index range","code":"int l = min ( a , b ) ; int r = max ( a , b ) ; vector < int > v ( arr , arr + N ) ;"}
{"text":"Sort the subarray from arr [ l ] to arr [ r ]","code":"sort ( v . begin ( ) + l , v . begin ( ) + r + 1 ) ;"}
{"text":"Print the modified array","code":"for ( int i = 0 ; i < N ; i ++ ) cout << v [ i ] << \" \u2581 \" ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 7 , 8 , 4 , 5 , 2 } ; int a = 1 , b = 4 ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; partSort ( arr , N , a , b ) ; }"}
{"text":"A Dynamic Programming based solution to find min cost to reach station N - 1 from station 0.","code":"#include <iostream> NEW_LINE #include <climits> NEW_LINE using namespace std ; #define INF  INT_MAX NEW_LINE #define N  4"}
{"text":"This function returns the smallest possible cost to reach station N - 1 from station 0.","code":"int minCost ( int cost [ ] [ N ] ) {"}
{"text":"dist [ i ] stores minimum cost to reach station i from station 0.","code":"int dist [ N ] ; for ( int i = 0 ; i < N ; i ++ ) dist [ i ] = INF ; dist [ 0 ] = 0 ;"}
{"text":"Go through every station and check if using it as an intermediate station gives better path","code":"for ( int i = 0 ; i < N ; i ++ ) for ( int j = i + 1 ; j < N ; j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ] ; return dist [ N - 1 ] ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int cost [ N ] [ N ] = { { 0 , 15 , 80 , 90 } , { INF , 0 , 40 , 50 } , { INF , INF , 0 , 70 } , { INF , INF , INF , 0 } } ; cout << \" The \u2581 Minimum \u2581 cost \u2581 to \u2581 reach \u2581 station \u2581 \" << N << \" \u2581 is \u2581 \" << minCost ( cost ) ; return 0 ; }"}
{"text":"C ++ Program to find number of cycles of length k in a graph with n nodes .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return the Number of ways from a node to make a loop of size K in undirected complete connected graph of N nodes","code":"int numOfways ( int n , int k ) { int p = 1 ; if ( k % 2 ) p = -1 ; return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) \/ n ; }"}
{"text":"Driven Program","code":"int main ( ) { int n = 4 , k = 2 ; cout << numOfways ( n , k ) << endl ; return 0 ; }"}
{"text":"C ++ program to find largest and smallest characters in a string .","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function that return the largest alphabet .","code":"char largest_alphabet ( char a [ ] , int n ) {"}
{"text":"initializing max alphabet to ' a '","code":"char max = ' A ' ;"}
{"text":"find largest alphabet","code":"for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] > max ) max = a [ i ] ;"}
{"text":"returning largest element","code":"return max ; }"}
{"text":"function that return the smallest alphabet","code":"char smallest_alphabet ( char a [ ] , int n ) {"}
{"text":"initializing smallest alphabet to ' z '","code":"char min = ' z ' ;"}
{"text":"find smallest alphabet","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a [ i ] < min ) min = a [ i ] ;"}
{"text":"returning smallest alphabet","code":"return min ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Character array","code":"char a [ ] = \" GeEksforGeeks \" ;"}
{"text":"Calculating size of the string","code":"int size = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ;"}
{"text":"calling functions and print returned value","code":"cout << \" Largest \u2581 and \u2581 smallest \u2581 alphabet \u2581 is \u2581 : \u2581 \" ; cout << largest_alphabet ( a , size ) << \" \u2581 and \u2581 \" ; cout << smallest_alphabet ( a , size ) << endl ; return 0 ; }"}
{"text":"C ++ program to get largest palindrome changing atmost K digits","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns maximum possible palindrome using k changes","code":"string maximumPalinUsingKChanges ( string str , int k ) { string palin = str ;"}
{"text":"Initialize l and r by leftmost and rightmost ends","code":"int l = 0 ; int r = str . length ( ) - 1 ;"}
{"text":"first try to make string palindrome","code":"while ( l < r ) {"}
{"text":"Replace left and right character by maximum of both","code":"if ( str [ l ] != str [ r ] ) { palin [ l ] = palin [ r ] = max ( str [ l ] , str [ r ] ) ; k -- ; } l ++ ; r -- ; }"}
{"text":"If k is negative then we can 't make  string palindrome","code":"if ( k < 0 ) return \" Not \u2581 possible \" ; l = 0 ; r = str . length ( ) - 1 ; while ( l <= r ) {"}
{"text":"At mid character , if K > 0 then change it to 9","code":"if ( l == r ) { if ( k > 0 ) palin [ l ] = '9' ; }"}
{"text":"If character at lth ( same as rth ) is less than 9","code":"if ( palin [ l ] < '9' ) {"}
{"text":"If none of them is changed in the previous loop then subtract 2 from K and convert both to 9","code":"if ( k >= 2 && palin [ l ] == str [ l ] && palin [ r ] == str [ r ] ) { k -= 2 ; palin [ l ] = palin [ r ] = '9' ; }"}
{"text":"If one of them is changed in the previous loop then subtract 1 from K ( 1 more is subtracted already ) and make them 9","code":"else if ( k >= 1 && ( palin [ l ] != str [ l ] palin [ r ] != str [ r ] ) ) { k -- ; palin [ l ] = palin [ r ] = '9' ; } } l ++ ; r -- ; } return palin ; }"}
{"text":"Driver code to test above methods","code":"int main ( ) { string str = \"43435\" ; int k = 3 ; cout << maximumPalinUsingKChanges ( str , k ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE #include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find the number of triplets whose Bitwise AND is 0.","code":"int countTriplets ( vector < int > & A ) {"}
{"text":"Stores the count of triplets having bitwise AND equal to 0","code":"int cnt = 0 ;"}
{"text":"Stores frequencies of all possible A [ i ] & A [ j ]","code":"unordered_map < int , int > tuples ;"}
{"text":"Traverse the array","code":"for ( auto a : A )"}
{"text":"Update frequency of Bitwise AND of all array elements with a","code":"for ( auto b : A ) ++ tuples [ a & b ] ;"}
{"text":"Traverse the array","code":"for ( auto a : A )"}
{"text":"Iterate the map","code":"for ( auto t : tuples )"}
{"text":"If bitwise AND of triplet is zero , increment cnt","code":"if ( ( t . first & a ) == 0 ) cnt += t . second ;"}
{"text":"Return the number of triplets whose Bitwise AND is 0.","code":"return cnt ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input Array","code":"vector < int > A = { 2 , 1 , 3 } ;"}
{"text":"Function Call","code":"cout << countTriplets ( A ) ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive function to calculate minimum adjacent pairs with different parity","code":"void parity ( vector < int > even , vector < int > odd , vector < int > v , int i , int & min ) {"}
{"text":"If all the numbers are placed","code":"if ( i == v . size ( ) || even . size ( ) == 0 && odd . size ( ) == 0 ) { int count = 0 ; for ( int j = 0 ; j < v . size ( ) - 1 ; j ++ ) { if ( v [ j ] % 2 != v [ j + 1 ] % 2 ) count ++ ; } if ( count < min ) min = count ; return ; }"}
{"text":"If replacement is not required","code":"if ( v [ i ] != -1 ) parity ( even , odd , v , i + 1 , min ) ;"}
{"text":"If replacement is required","code":"else { if ( even . size ( ) != 0 ) { int x = even . back ( ) ; even . pop_back ( ) ; v [ i ] = x ; parity ( even , odd , v , i + 1 , min ) ;"}
{"text":"backtracking","code":"even . push_back ( x ) ; } if ( odd . size ( ) != 0 ) { int x = odd . back ( ) ; odd . pop_back ( ) ; v [ i ] = x ; parity ( even , odd , v , i + 1 , min ) ;"}
{"text":"backtracking","code":"odd . push_back ( x ) ; } } }"}
{"text":"Function to display the minimum number of adjacent elements with different parity","code":"void minDiffParity ( vector < int > v , int n ) {"}
{"text":"Store no of even numbers not present in the array","code":"vector < int > even ;"}
{"text":"Store no of odd numbers not present in the array","code":"vector < int > odd ; unordered_map < int , int > m ; for ( int i = 1 ; i <= n ; i ++ ) m [ i ] = 1 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) {"}
{"text":"Erase exisiting numbers","code":"if ( v [ i ] != -1 ) m . erase ( v [ i ] ) ; }"}
{"text":"Store non - exisiting even and odd numbers","code":"for ( auto i : m ) { if ( i . first % 2 == 0 ) even . push_back ( i . first ) ; else odd . push_back ( i . first ) ; } int min = 1000 ; parity ( even , odd , v , 0 , min ) ; cout << min << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 8 ; vector < int > v = { 2 , 1 , 4 , -1 , -1 , 6 , -1 , 8 } ; minDiffParity ( v , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE #define ll  long long int NEW_LINE #define MAX  100005 NEW_LINE using namespace std ; vector < int > adjacent [ MAX ] ; bool visited [ MAX ] ;"}
{"text":"To store the required nodes","code":"int startnode , endnode , thirdnode ; int maxi = -1 , N ;"}
{"text":"Parent array to retrace the nodes","code":"int parent [ MAX ] ;"}
{"text":"Visited array to prevent DFS in direction on Diameter path","code":"bool vis [ MAX ] ;"}
{"text":"DFS function to find the startnode","code":"void dfs ( int u , int count ) { visited [ u ] = true ; int temp = 0 ; for ( int i = 0 ; i < adjacent [ u ] . size ( ) ; i ++ ) { if ( ! visited [ adjacent [ u ] [ i ] ] ) { temp ++ ; dfs ( adjacent [ u ] [ i ] , count + 1 ) ; } } if ( temp == 0 ) { if ( maxi < count ) { maxi = count ; startnode = u ; } } }"}
{"text":"DFS function to find the endnode of diameter and maintain the parent array","code":"void dfs1 ( int u , int count ) { visited [ u ] = true ; int temp = 0 ; for ( int i = 0 ; i < adjacent [ u ] . size ( ) ; i ++ ) { if ( ! visited [ adjacent [ u ] [ i ] ] ) { temp ++ ; parent [ adjacent [ u ] [ i ] ] = u ; dfs1 ( adjacent [ u ] [ i ] , count + 1 ) ; } } if ( temp == 0 ) { if ( maxi < count ) { maxi = count ; endnode = u ; } } }"}
{"text":"DFS function to find the end node of the Longest Branch to Diameter","code":"void dfs2 ( int u , int count ) { visited [ u ] = true ; int temp = 0 ; for ( int i = 0 ; i < adjacent [ u ] . size ( ) ; i ++ ) { if ( ! visited [ adjacent [ u ] [ i ] ] && ! vis [ adjacent [ u ] [ i ] ] ) { temp ++ ; dfs2 ( adjacent [ u ] [ i ] , count + 1 ) ; } } if ( temp == 0 ) { if ( maxi < count ) { maxi = count ; thirdnode = u ; } } }"}
{"text":"Function to find the required nodes","code":"void findNodes ( ) {"}
{"text":"To find start node of diameter","code":"dfs ( 1 , 0 ) ; for ( int i = 0 ; i <= N ; i ++ ) visited [ i ] = false ; maxi = -1 ;"}
{"text":"To find end node of diameter","code":"dfs1 ( startnode , 0 ) ; for ( int i = 0 ; i <= N ; i ++ ) visited [ i ] = false ;"}
{"text":"x is the end node of diameter","code":"int x = endnode ; vis [ startnode ] = true ;"}
{"text":"Mark all the nodes on diameter using back tracking","code":"while ( x != startnode ) { vis [ x ] = true ; x = parent [ x ] ; } maxi = -1 ;"}
{"text":"Find the end node of longest branch to diameter","code":"for ( int i = 1 ; i <= N ; i ++ ) { if ( vis [ i ] ) dfs2 ( i , 0 ) ; } }"}
{"text":"Driver code","code":"int main ( ) { N = 4 ; adjacent [ 1 ] . push_back ( 2 ) ; adjacent [ 2 ] . push_back ( 1 ) ; adjacent [ 1 ] . push_back ( 3 ) ; adjacent [ 3 ] . push_back ( 1 ) ; adjacent [ 1 ] . push_back ( 4 ) ; adjacent [ 4 ] . push_back ( 1 ) ; findNodes ( ) ; cout << \" ( \" << startnode << \" , \u2581 \" << endnode << \" , \u2581 \" << thirdnode << \" ) \" ; return 0 ; }"}
{"text":"C ++ program to find percentage increase in the volume of the sphere if radius is increased by a given percentage","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void newvol ( double x ) { cout << \" percentage \u2581 increase \u2581 in \u2581 the \" << \" \u2581 volume \u2581 of \u2581 the \u2581 sphere \u2581 is \u2581 \" << pow ( x , 3 ) \/ 10000 + 3 * x + ( 3 * pow ( x , 2 ) ) \/ 100 << \" % \" << endl ; }"}
{"text":"Driver code","code":"int main ( ) { double x = 10 ; newvol ( x ) ; return 0 ; }"}
{"text":"C ++ program to find the length chord of the circle whose radius and the angle subtended at the centre is also given","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the length of the chord","code":"void length_of_chord ( double r , double x ) { cout << \" The \u2581 length \u2581 of \u2581 the \u2581 chord \" << \" \u2581 of \u2581 the \u2581 circle \u2581 is \u2581 \" << 2 * r * sin ( x * ( 3.14 \/ 180 ) ) << endl ; }"}
{"text":"Driver code","code":"int main ( ) { double r = 4 , x = 63 ; length_of_chord ( r , x ) ; return 0 ; }"}
{"text":"C ++ Program to find the area of the square inscribed within the circle which in turn is inscribed in an equilateral triangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of the square","code":"float area ( float a ) {"}
{"text":"a cannot be negative","code":"if ( a < 0 ) return -1 ;"}
{"text":"area of the square","code":"float area = sqrt ( a ) \/ 6 ; return area ; }"}
{"text":"Driver code","code":"int main ( ) { float a = 10 ; cout << area ( a ) << endl ; return 0 ; }"}
{"text":"C ++ program to find the longest rod that can fit in a cuboid","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the length","code":"double longestRodInCuboid ( int length , int breadth , int height ) { double result ; int temp ;"}
{"text":"temporary variable to hold the intermediate result","code":"temp = length * length + breadth * breadth + height * height ;"}
{"text":"length of longest rod is calculated using square root function","code":"result = sqrt ( temp ) ; return result ; }"}
{"text":"Driver code","code":"int main ( ) { int length = 12 , breadth = 9 , height = 8 ;"}
{"text":"calling longestRodInCuboid ( ) function to get the length of longest rod","code":"cout << longestRodInCuboid ( length , breadth , height ) ; return 0 ; }"}
{"text":"C ++ program to Check whether a given point lies inside or on the rectangle or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to Check whether a given point lies inside or on the rectangle or not","code":"bool LiesInsieRectangle ( int a , int b , int x , int y ) { if ( x - y - b <= 0 && x - y + b >= 0 && x + y - 2 * a + b <= 0 && x + y - b >= 0 ) return true ; return false ; }"}
{"text":"Driver code","code":"int main ( ) { int a = 7 , b = 2 , x = 4 , y = 5 ; if ( LiesInsieRectangle ( a , b , x , y ) ) cout << \" Given \u2581 point \u2581 lies \u2581 inside \u2581 the \u2581 rectangle \" ; else cout << \" Given \u2581 point \u2581 does \u2581 not \u2581 lie \u2581 on \u2581 the \u2581 rectangle \" ; return 0 ; }"}
{"text":"Return the maximum volume .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return the maximum volume .","code":"int maxvolume ( int s ) { int maxvalue = 0 ;"}
{"text":"for length","code":"for ( int i = 1 ; i <= s - 2 ; i ++ ) {"}
{"text":"for breadth","code":"for ( int j = 1 ; j <= s - 1 ; j ++ ) {"}
{"text":"for height","code":"int k = s - i - j ;"}
{"text":"calculating maximum volume .","code":"maxvalue = max ( maxvalue , i * j * k ) ; } } return maxvalue ; }"}
{"text":"Driven Program","code":"int main ( ) { int s = 8 ; cout << maxvolume ( s ) << endl ; return 0 ; }"}
{"text":"Return the maximum volume .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return the maximum volume .","code":"int maxvolume ( int s ) {"}
{"text":"finding length","code":"int length = s \/ 3 ; s -= length ;"}
{"text":"finding breadth","code":"int breadth = s \/ 2 ;"}
{"text":"finding height","code":"int height = s - breadth ; return length * breadth * height ; }"}
{"text":"Driven Program","code":"int main ( ) { int s = 8 ; cout << maxvolume ( s ) << endl ; return 0 ; }"}
{"text":"CPP program to find area of a Hexagon","code":"#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"function for calculating area of the hexagon .","code":"double hexagonArea ( double s ) { return ( ( 3 * sqrt ( 3 ) * ( s * s ) ) \/ 2 ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Length of a side","code":"double s = 4 ; cout << \" Area \u2581 : \u2581 \" << hexagonArea ( s ) ; return 0 ; }"}
{"text":"CPP program for finding maximum squares that can fit in right angle isosceles triangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function for finding max squares","code":"int maxSquare ( int b , int m ) {"}
{"text":"return in O ( 1 ) with derived formula","code":"return ( b \/ m - 1 ) * ( b \/ m ) \/ 2 ; }"}
{"text":"driver program","code":"int main ( ) { int b = 10 , m = 2 ; cout << maxSquare ( b , m ) ; return 0 ; }"}
{"text":"C ++ program to check existence of right triangle .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Prints three sides of a right triangle from given area and hypotenuse if triangle is possible , else prints - 1.","code":"void findRightAngle ( int A , int H ) {"}
{"text":"Descriminant of the equation","code":"long D = pow ( H , 4 ) - 16 * A * A ; if ( D >= 0 ) {"}
{"text":"applying the linear equation formula to find both the roots","code":"long root1 = ( H * H + sqrt ( D ) ) \/ 2 ; long root2 = ( H * H - sqrt ( D ) ) \/ 2 ; long a = sqrt ( root1 ) ; long b = sqrt ( root2 ) ; if ( b >= a ) cout << a << \" \u2581 \" << b << \" \u2581 \" << H ; else cout << b << \" \u2581 \" << a << \" \u2581 \" << H ; } else cout << \" - 1\" ; }"}
{"text":"Driver code","code":"int main ( ) { findRightAngle ( 6 , 5 ) ; }"}
{"text":"C ++ program to count number of 2 x 2 squares in a right isosceles triangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int numberOfSquares ( int base ) {"}
{"text":"removing the extra part we would always need","code":"base = ( base - 2 ) ;"}
{"text":"Since each square has base of length of 2","code":"base = floor ( base \/ 2 ) ; return base * ( base + 1 ) \/ 2 ; }"}
{"text":"Driver code","code":"int main ( ) { int base = 8 ; cout << numberOfSquares ( base ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the Bitwise OR of Bitwise AND of all possible subarrays after performing the every query","code":"void performQuery ( vector < int > arr , vector < vector < int > > Q ) {"}
{"text":"Traversing each pair of the query","code":"for ( int i = 0 ; i < Q . size ( ) ; i ++ ) {"}
{"text":"Stores the Bitwise OR","code":"int or1 = 0 ;"}
{"text":"Updating the array","code":"int x = Q [ i ] [ 0 ] ; arr [ x - 1 ] = Q [ i ] [ 1 ] ;"}
{"text":"Find the Bitwise OR of new updated array","code":"for ( int j = 0 ; j < arr . size ( ) ; j ++ ) { or1 = or1 | arr [ j ] ; }"}
{"text":"Print the ans","code":"cout << or1 << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > arr ( { 1 , 2 , 3 } ) ; vector < int > v1 ( { 1 , 4 } ) ; vector < int > v2 ( { 3 , 0 } ) ; vector < vector < int > > Q ; Q . push_back ( v1 ) ; Q . push_back ( v2 ) ; performQuery ( arr , Q ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to form the smallest number possible","code":"int smallest ( int k , int d ) { int cnt = 1 ; int m = d % k ;"}
{"text":"Array to mark the remainders counted already","code":"vector < int > v ( k , 0 ) ; v [ m ] = 1 ;"}
{"text":"Iterate over the range","code":"while ( 1 ) { if ( m == 0 ) return cnt ; m = ( ( ( m * ( 10 % k ) ) % k ) + ( d % k ) ) % k ;"}
{"text":"If that remainder is already found , return - 1","code":"if ( v [ m ] == 1 ) return -1 ; v [ m ] = 1 ; cnt ++ ; } return -1 ; }"}
{"text":"Driver Code","code":"int main ( ) { int d = 1 ; int k = 41 ; cout << smallest ( k , d ) ; return 0 ; }"}
{"text":"CPP code to find vertices in a fibonacci cube graph of order n","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function to find fibonacci number","code":"int fib ( int n ) { if ( n <= 1 ) return n ; return fib ( n - 1 ) + fib ( n - 2 ) ; }"}
{"text":"function for finding number of vertices in fibonacci cube graph","code":"int findVertices ( int n ) {"}
{"text":"return fibonacci number for f ( n + 2 )","code":"return fib ( n + 2 ) ; }"}
{"text":"driver program","code":"int main ( ) { int n = 3 ; cout << findVertices ( n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if it is possible to modify the array such that there is no common factor between array elements except 1","code":"void checkCommonDivisor ( int arr [ ] , int N , int X ) {"}
{"text":"Stores GCD of the array","code":"int G = 0 ;"}
{"text":"Calculate GCD of the array","code":"for ( int i = 0 ; i < N ; i ++ ) { G = __gcd ( G , arr [ i ] ) ; } int copy_G = G ; for ( int divisor = 2 ; divisor <= X ; divisor ++ ) {"}
{"text":"If the current divisor is smaller than X","code":"while ( G % divisor == 0 ) {"}
{"text":"Divide GCD by the current divisor","code":"G = G \/ divisor ; } }"}
{"text":"If possible","code":"if ( G <= X ) { cout << \" Yes STRNEWLINE \" ;"}
{"text":"Print the modified array","code":"for ( int i = 0 ; i < N ; i ++ ) cout << arr [ i ] \/ copy_G << \" \u2581 \" ; cout << endl ; }"}
{"text":"Otherwise","code":"else cout < < \" No \" ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 6 , 15 , 6 } , X = 6 ;"}
{"text":"Size of the array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; checkCommonDivisor ( arr , N , X ) ; }"}
{"text":"Create row and col to traverse rows and columns","code":"#include <iostream> NEW_LINE using namespace std ; void printSpiral ( int size ) { int row = 0 , col = 0 ; int boundary = size - 1 ; int sizeLeft = size - 1 ; int flag = 1 ;"}
{"text":"Variable to determine the movement r = right , l = left , d = down , u = upper","code":"char move = ' r ' ;"}
{"text":"Array for matrix","code":"int matrix [ size ] [ size ] = { 0 } ; for ( int i = 1 ; i < size * size + 1 ; i ++ ) {"}
{"text":"Assign the value","code":"matrix [ row ] [ col ] = i ;"}
{"text":"switch - case to determine the next index","code":"switch ( move ) {"}
{"text":"If right , go right","code":"case ' r ' : col += 1 ; break ;"}
{"text":"if left , go left","code":"case ' l ' : col -= 1 ; break ;"}
{"text":"if up , go up","code":"case ' u ' : row -= 1 ; break ;"}
{"text":"if down , go down","code":"case ' d ' : row += 1 ; break ; }"}
{"text":"Check if the matrix has reached array boundary","code":"if ( i == boundary ) {"}
{"text":"Add the left size for the next boundary","code":"boundary += sizeLeft ;"}
{"text":"If 2 rotations has been made , decrease the size left by 1","code":"if ( flag != 2 ) { flag = 2 ; } else { flag = 1 ; sizeLeft -= 1 ; }"}
{"text":"switch - case to rotate the movement","code":"switch ( move ) {"}
{"text":"if right , rotate to down","code":"case ' r ' : move = ' d ' ; break ;"}
{"text":"if down , rotate to left","code":"case ' d ' : move = ' l ' ; break ;"}
{"text":"if left , rotate to up","code":"case ' l ' : move = ' u ' ; break ;"}
{"text":"if up , rotate to right","code":"case ' u ' : move = ' r ' ; break ; } } }"}
{"text":"Print the matrix","code":"for ( row = 0 ; row < size ; row ++ ) { for ( col = 0 ; col < size ; col ++ ) { int n = matrix [ row ] [ col ] ; if ( n < 10 ) cout << n << \" \u2581 \" ; else cout << n << \" \u2581 \" ; } cout << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Get the size of size","code":"int size = 5 ;"}
{"text":"Print the Spiral Pattern","code":"printSpiral ( size ) ; return 0 ; }"}
{"text":"C ++ implementation to sort the biotonic doubly linked list","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"a node of the doubly linked list","code":"struct Node { int data ; struct Node * next ; struct Node * prev ; } ;"}
{"text":"Function to reverse a Doubly Linked List","code":"void reverse ( struct Node * * head_ref ) { struct Node * temp = NULL ; struct Node * current = * head_ref ;"}
{"text":"swap next and prev for all nodes of doubly linked list","code":"while ( current != NULL ) { temp = current -> prev ; current -> prev = current -> next ; current -> next = temp ; current = current -> prev ; }"}
{"text":"Before changing head , check for the cases like empty list and list with only one node","code":"if ( temp != NULL ) * head_ref = temp -> prev ; }"}
{"text":"Function to merge two sorted doubly linked lists","code":"struct Node * merge ( struct Node * first , struct Node * second ) {"}
{"text":"If first linked list is empty","code":"if ( ! first ) return second ;"}
{"text":"If second linked list is empty","code":"if ( ! second ) return first ;"}
{"text":"Pick the smaller value","code":"if ( first -> data < second -> data ) { first -> next = merge ( first -> next , second ) ; first -> next -> prev = first ; first -> prev = NULL ; return first ; } else { second -> next = merge ( first , second -> next ) ; second -> next -> prev = second ; second -> prev = NULL ; return second ; } }"}
{"text":"function to sort a biotonic doubly linked list","code":"struct Node * sort ( struct Node * head ) {"}
{"text":"if list is empty or if it contains a single node only","code":"if ( head == NULL head -> next == NULL ) return head ; struct Node * current = head -> next ; while ( current != NULL ) {"}
{"text":"if true , then ' current ' is the first node which is smaller than its previous node","code":"if ( current -> data < current -> prev -> data ) break ;"}
{"text":"move to the next node","code":"current = current -> next ; }"}
{"text":"if true , then list is already sorted","code":"if ( current == NULL ) return head ;"}
{"text":"spilt into two lists , one starting with ' head ' and other starting with ' current '","code":"current -> prev -> next = NULL ; current -> prev = NULL ;"}
{"text":"reverse the list starting with ' current '","code":"reverse ( & current ) ;"}
{"text":"merge the two lists and return the final merged doubly linked list","code":"return merge ( head , current ) ; }"}
{"text":"Function to insert a node at the beginning of the Doubly Linked List","code":"void push ( struct Node * * head_ref , int new_data ) {"}
{"text":"allocate node","code":"struct Node * new_node = ( struct Node * ) malloc ( sizeof ( struct Node ) ) ;"}
{"text":"put in the data","code":"new_node -> data = new_data ;"}
{"text":"since we are adding at the beginning , prev is always NULL","code":"new_node -> prev = NULL ;"}
{"text":"link the old list off the new node","code":"new_node -> next = ( * head_ref ) ;"}
{"text":"change prev of head node to new node","code":"if ( ( * head_ref ) != NULL ) ( * head_ref ) -> prev = new_node ;"}
{"text":"move the head to point to the new node","code":"( * head_ref ) = new_node ; }"}
{"text":"Function to print nodes in a given doubly linked list","code":"void printList ( struct Node * head ) {"}
{"text":"if list is empty","code":"if ( head == NULL ) cout << \" Doubly \u2581 Linked \u2581 list \u2581 empty \" ; while ( head != NULL ) { cout << head -> data << \" \u2581 \" ; head = head -> next ; } }"}
{"text":"Driver program to test above","code":"int main ( ) { struct Node * head = NULL ;"}
{"text":"Create the doubly linked list : 2 < -> 5 < -> 7 < -> 12 < -> 10 < -> 6 < -> 4 < -> 1","code":"push ( & head , 1 ) ; push ( & head , 4 ) ; push ( & head , 6 ) ; push ( & head , 10 ) ; push ( & head , 12 ) ; push ( & head , 7 ) ; push ( & head , 5 ) ; push ( & head , 2 ) ; cout << \" Original \u2581 Doubly \u2581 linked \u2581 list : n \" ; printList ( head ) ;"}
{"text":"sort the biotonic DLL","code":"head = sort ( head ) ; cout << \" Doubly linked list after sorting : n \" ; printList ( head ) ; return 0 ; }"}
{"text":"C ++ program to arrange consonants and vowels nodes in a linked list","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"A linked list node","code":"struct Node { char data ; struct Node * next ; } ;"}
{"text":"Function to add new node to the List","code":"Node * newNode ( char key ) { Node * temp = new Node ; temp -> data = key ; temp -> next = NULL ; return temp ; }"}
{"text":"utility function to print linked list","code":"void printlist ( Node * head ) { if ( ! head ) { cout << \" Empty \u2581 List STRNEWLINE \" ; return ; } while ( head != NULL ) { cout << head -> data << \" \u2581 \" ; if ( head -> next ) cout << \" - > \u2581 \" ; head = head -> next ; } cout << endl ; }"}
{"text":"utility function for checking vowel","code":"bool isVowel ( char x ) { return ( x == ' a ' x == ' e ' x == ' i ' x == ' o ' x == ' u ' ) ; }"}
{"text":"function to arrange consonants and vowels nodes","code":"Node * arrange ( Node * head ) { Node * newHead = head ;"}
{"text":"for keep track of vowel","code":"Node * latestVowel ; Node * curr = head ;"}
{"text":"list is empty","code":"if ( head == NULL ) return NULL ;"}
{"text":"We need to discover the first vowel in the list . It is going to be the returned head , and also the initial latestVowel .","code":"if ( isVowel ( head -> data ) )"}
{"text":"first element is a vowel . It will also be the new head and the initial latestVowel ;","code":"latestVowel = head ; else {"}
{"text":"First element is not a vowel . Iterate through the list until we find a vowel . Note that curr points to the element * before * the element with the vowel .","code":"while ( curr -> next != NULL && ! isVowel ( curr -> next -> data ) ) curr = curr -> next ;"}
{"text":"This is an edge case where there are only consonants in the list .","code":"if ( curr -> next == NULL ) return head ;"}
{"text":"Set the initial latestVowel and the new head to the vowel item that we found . Relink the chain of consonants after that vowel item : old_head_consonant -> consonant1 -> consonant2 -> vowel -> rest_of_list becomes vowel -> old_head_consonant -> consonant1 -> consonant2 -> rest_of_list","code":"latestVowel = newHead = curr -> next ; curr -> next = curr -> next -> next ; latestVowel -> next = head ; }"}
{"text":"Now traverse the list . Curr is always the item * before * the one we are checking , so that we can use it to re - link .","code":"while ( curr != NULL && curr -> next != NULL ) { if ( isVowel ( curr -> next -> data ) ) {"}
{"text":"The next discovered item is a vowel","code":"if ( curr == latestVowel ) {"}
{"text":"If it comes directly after the previous vowel , we don 't need to  move items around, just mark the  new latestVowel and advance curr.","code":"latestVowel = curr = curr -> next ; } else {"}
{"text":"But if it comes after an intervening chain of consonants , we need to chain the newly discovered vowel right after the old vowel . Curr is not changed as after the re - linking it will have a new next , that has not been checked yet , and we always keep curr at one before the next to check .","code":"Node * temp = latestVowel -> next ;"}
{"text":"Chain in new vowel","code":"latestVowel -> next = curr -> next ;"}
{"text":"Advance latestVowel","code":"latestVowel = latestVowel -> next ;"}
{"text":"Remove found vowel from previous place","code":"curr -> next = curr -> next -> next ;"}
{"text":"Re - link chain of consonants after latestVowel","code":"latestVowel -> next = temp ; } } else {"}
{"text":"No vowel in the next element , advance curr .","code":"curr = curr -> next ; } } return newHead ; }"}
{"text":"Driver code","code":"int main ( ) { Node * head = newNode ( ' a ' ) ; head -> next = newNode ( ' b ' ) ; head -> next -> next = newNode ( ' c ' ) ; head -> next -> next -> next = newNode ( ' e ' ) ; head -> next -> next -> next -> next = newNode ( ' d ' ) ; head -> next -> next -> next -> next -> next = newNode ( ' o ' ) ; head -> next -> next -> next -> next -> next -> next = newNode ( ' x ' ) ; head -> next -> next -> next -> next -> next -> next -> next = newNode ( ' i ' ) ; printf ( \" Linked \u2581 list \u2581 before \u2581 : STRNEWLINE \" ) ; printlist ( head ) ; head = arrange ( head ) ; printf ( \" Linked \u2581 list \u2581 after \u2581 : STRNEWLINE \" ) ; printlist ( head ) ; return 0 ; }"}
{"text":"CPP code for finding K - th largest Node using O ( 1 ) extra memory and reverse Morris traversal .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Node structure","code":"struct Node { int data ; struct Node * left , * right ; } ;"}
{"text":"helper function to create a new Node","code":"Node * newNode ( int data ) { Node * temp = new Node ; temp -> data = data ; temp -> right = temp -> left = NULL ; return temp ; } Node * KthLargestUsingMorrisTraversal ( Node * root , int k ) { Node * curr = root ; Node * Klargest = NULL ;"}
{"text":"count variable to keep count of visited Nodes","code":"int count = 0 ; while ( curr != NULL ) {"}
{"text":"if right child is NULL","code":"if ( curr -> right == NULL ) {"}
{"text":"first increment count and check if count = k","code":"if ( ++ count == k ) Klargest = curr ;"}
{"text":"otherwise move to the left child","code":"curr = curr -> left ; } else {"}
{"text":"find inorder successor of current Node","code":"Node * succ = curr -> right ; while ( succ -> left != NULL && succ -> left != curr ) succ = succ -> left ; if ( succ -> left == NULL ) {"}
{"text":"set left child of successor to the current Node","code":"succ -> left = curr ;"}
{"text":"move current to its right","code":"curr = curr -> right ; }"}
{"text":"restoring the tree back to original binary search tree removing threaded links","code":"else { succ -> left = NULL ; if ( ++ count == k ) Klargest = curr ;"}
{"text":"move current to its left child","code":"curr = curr -> left ; } } } return Klargest ; } int main ( ) {"}
{"text":"Constructed binary tree is 4 \/ \\ 2 7 \/ \\ \/ \\ 1 3 6 10","code":"Node * root = newNode ( 4 ) ; root -> left = newNode ( 2 ) ; root -> right = newNode ( 7 ) ; root -> left -> left = newNode ( 1 ) ; root -> left -> right = newNode ( 3 ) ; root -> right -> left = newNode ( 6 ) ; root -> right -> right = newNode ( 10 ) ; cout << \" Finding \u2581 K - th \u2581 largest \u2581 Node \u2581 in \u2581 BST \u2581 : \u2581 \" << KthLargestUsingMorrisTraversal ( root , 2 ) -> data ; return 0 ; }"}
{"text":"C ++ implementation to sort the rows of matrix in ascending order followed by sorting the columns in descending order","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX_SIZE  10"}
{"text":"function to sort each row of the matrix according to the order specified by ascending .","code":"void sortByRow ( int mat [ ] [ MAX_SIZE ] , int n , bool ascending ) { for ( int i = 0 ; i < n ; i ++ ) { if ( ascending ) sort ( mat [ i ] , mat [ i ] + n ) ; else sort ( mat [ i ] , mat [ i ] + n , greater < int > ( ) ) ; } }"}
{"text":"function to find transpose of the matrix","code":"void transpose ( int mat [ ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ )"}
{"text":"swapping element at index ( i , j ) by element at index ( j , i )","code":"swap ( mat [ i ] [ j ] , mat [ j ] [ i ] ) ; }"}
{"text":"function to sort the matrix row - wise and column - wise","code":"void sortMatRowAndColWise ( int mat [ ] [ MAX_SIZE ] , int n ) {"}
{"text":"sort rows of mat [ ] [ ]","code":"sortByRow ( mat , n , true ) ;"}
{"text":"get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ;"}
{"text":"again sort rows of mat [ ] [ ] in descending order .","code":"sortByRow ( mat , n , false ) ;"}
{"text":"again get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ; }"}
{"text":"function to print the matrix","code":"void printMat ( int mat [ ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << mat [ i ] [ j ] << \" \u2581 \" ; cout << endl ; } }"}
{"text":"Driver program to test above","code":"int main ( ) { int n = 3 ; int mat [ n ] [ MAX_SIZE ] = { { 3 , 2 , 1 } , { 9 , 8 , 7 } , { 6 , 5 , 4 } } ; cout << \" Original \u2581 Matrix : STRNEWLINE \" ; printMat ( mat , n ) ; sortMatRowAndColWise ( mat , n ) ; cout << \" Matrix After Sorting : \" ; printMat ( mat , n ) ; return 0 ; }"}
{"text":"C ++ implementation to sort the matrix row - wise and column - wise","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX_SIZE  10"}
{"text":"function to sort each row of the matrix","code":"void sortByRow ( int mat [ MAX_SIZE ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ )"}
{"text":"sorting row number ' i '","code":"sort ( mat [ i ] , mat [ i ] + n ) ; }"}
{"text":"function to find transpose of the matrix","code":"void transpose ( int mat [ MAX_SIZE ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) for ( int j = i + 1 ; j < n ; j ++ )"}
{"text":"swapping element at index ( i , j ) by element at index ( j , i )","code":"swap ( mat [ i ] [ j ] , mat [ j ] [ i ] ) ; }"}
{"text":"function to sort the matrix row - wise and column - wise","code":"void sortMatRowAndColWise ( int mat [ MAX_SIZE ] [ MAX_SIZE ] , int n ) {"}
{"text":"sort rows of mat [ ] [ ]","code":"sortByRow ( mat , n ) ;"}
{"text":"get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ;"}
{"text":"again sort rows of mat [ ] [ ]","code":"sortByRow ( mat , n ) ;"}
{"text":"again get transpose of mat [ ] [ ]","code":"transpose ( mat , n ) ; }"}
{"text":"function to print the matrix","code":"void printMat ( int mat [ MAX_SIZE ] [ MAX_SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << mat [ i ] [ j ] << \" \u2581 \" ; cout << endl ; } }"}
{"text":"Driver program to test above","code":"int main ( ) { int mat [ MAX_SIZE ] [ MAX_SIZE ] = { { 4 , 1 , 3 } , { 9 , 6 , 8 } , { 5 , 2 , 7 } } ; int n = 3 ; cout << \" Original \u2581 Matrix : STRNEWLINE \" ; printMat ( mat , n ) ; sortMatRowAndColWise ( mat , n ) ; cout << \" Matrix After Sorting : \" ; printMat ( mat , n ) ; return 0 ; }"}
{"text":"C ++ Program to print Magic square of Doubly even order","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function for calculating Magic square","code":"void doublyEven ( int n ) { int arr [ n ] [ n ] , i , j ;"}
{"text":"filling matrix with its count value starting from 1 ;","code":"for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) arr [ i ] [ j ] = ( n * i ) + j + 1 ;"}
{"text":"change value of Array elements at fix location as per rule ( n * n + 1 ) - arr [ i ] [ j ] Top Left corner of Matrix ( order ( n \/ 4 ) * ( n \/ 4 ) )","code":"for ( i = 0 ; i < n \/ 4 ; i ++ ) for ( j = 0 ; j < n \/ 4 ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Top Right corner of Matrix ( order ( n \/ 4 ) * ( n \/ 4 ) )","code":"for ( i = 0 ; i < n \/ 4 ; i ++ ) for ( j = 3 * ( n \/ 4 ) ; j < n ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Bottom Left corner of Matrix ( order ( n \/ 4 ) * ( n \/ 4 ) )","code":"for ( i = 3 * n \/ 4 ; i < n ; i ++ ) for ( j = 0 ; j < n \/ 4 ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Bottom Right corner of Matrix ( order ( n \/ 4 ) * ( n \/ 4 ) )","code":"for ( i = 3 * n \/ 4 ; i < n ; i ++ ) for ( j = 3 * n \/ 4 ; j < n ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Centre of Matrix ( order ( n \/ 2 ) * ( n \/ 2 ) )","code":"for ( i = n \/ 4 ; i < 3 * n \/ 4 ; i ++ ) for ( j = n \/ 4 ; j < 3 * n \/ 4 ; j ++ ) arr [ i ] [ j ] = ( n * n + 1 ) - arr [ i ] [ j ] ;"}
{"text":"Printing the magic - square","code":"for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) cout << arr [ i ] [ j ] << \" \u2581 \" ; cout << \" STRNEWLINE \" ; } }"}
{"text":"driver program","code":"int main ( ) { int n = 8 ;"}
{"text":"Function call","code":"doublyEven ( n ) ; return 0 ; }"}
{"text":"C ++ code to find the Kronecker Product of two matrices and stores it as matrix C","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"rowa and cola are no of rows and columns of matrix A rowb and colb are no of rows and columns of matrix B","code":"const int cola = 2 , rowa = 3 , colb = 3 , rowb = 2 ;"}
{"text":"Function to computes the Kronecker Product of two matrices","code":"void Kroneckerproduct ( int A [ ] [ cola ] , int B [ ] [ colb ] ) { int C [ rowa * rowb ] [ cola * colb ] ;"}
{"text":"i loops till rowa","code":"for ( int i = 0 ; i < rowa ; i ++ ) {"}
{"text":"k loops till rowb","code":"for ( int k = 0 ; k < rowb ; k ++ ) {"}
{"text":"j loops till cola","code":"for ( int j = 0 ; j < cola ; j ++ ) {"}
{"text":"l loops till colb","code":"for ( int l = 0 ; l < colb ; l ++ ) {"}
{"text":"Each element of matrix A is multiplied by whole Matrix B resp and stored as Matrix C","code":"C [ i + l + 1 ] [ j + k + 1 ] = A [ i ] [ j ] * B [ k ] [ l ] ; cout << C [ i + l + 1 ] [ j + k + 1 ] << \" \u2581 \" ; } } cout << endl ; } } }"}
{"text":"Driver Code","code":"int main ( ) { int A [ 3 ] [ 2 ] = { { 1 , 2 } , { 3 , 4 } , { 1 , 0 } } , B [ 2 ] [ 3 ] = { { 0 , 5 , 2 } , { 6 , 7 , 3 } } ; Kroneckerproduct ( A , B ) ; return 0 ; }"}
{"text":"Program to check lower triangular matrix .","code":"#include <bits\/stdc++.h> NEW_LINE #define N  4 NEW_LINE using namespace std ;"}
{"text":"Function to check matrix is in lower triangular form or not .","code":"bool isLowerTriangularMatrix ( int mat [ N ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = i + 1 ; j < N ; j ++ ) if ( mat [ i ] [ j ] != 0 ) return false ; return true ; }"}
{"text":"Driver function .","code":"int main ( ) { int mat [ N ] [ N ] = { { 1 , 0 , 0 , 0 } , { 1 , 4 , 0 , 0 } , { 4 , 6 , 2 , 0 } , { 0 , 4 , 7 , 6 } } ;"}
{"text":"Function call","code":"if ( isLowerTriangularMatrix ( mat ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"Program to check upper triangular matrix .","code":"#include <bits\/stdc++.h> NEW_LINE #define N  4 NEW_LINE using namespace std ;"}
{"text":"Function to check matrix is in upper triangular form or not .","code":"bool isUpperTriangularMatrix ( int mat [ N ] [ N ] ) { for ( int i = 1 ; i < N ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( mat [ i ] [ j ] != 0 ) return false ; return true ; }"}
{"text":"Driver function .","code":"int main ( ) { int mat [ N ] [ N ] = { { 1 , 3 , 5 , 3 } , { 0 , 4 , 6 , 2 } , { 0 , 0 , 2 , 5 } , { 0 , 0 , 0 , 6 } } ; if ( isUpperTriangularMatrix ( mat ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"CPP program to compute number of sets in a binary matrix .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"no of columns","code":"const int m = 3 ;"}
{"text":"no of rows","code":"const int n = 2 ;"}
{"text":"function to calculate the number of non empty sets of cell","code":"long long countSets ( int a [ n ] [ m ] ) {"}
{"text":"stores the final answer","code":"long long res = 0 ;"}
{"text":"traverses row - wise","code":"for ( int i = 0 ; i < n ; i ++ ) { int u = 0 , v = 0 ; for ( int j = 0 ; j < m ; j ++ ) a [ i ] [ j ] ? u ++ : v ++ ; res += pow ( 2 , u ) - 1 + pow ( 2 , v ) - 1 ; }"}
{"text":"traverses column wise","code":"for ( int i = 0 ; i < m ; i ++ ) { int u = 0 , v = 0 ; for ( int j = 0 ; j < n ; j ++ ) a [ j ] [ i ] ? u ++ : v ++ ; res += pow ( 2 , u ) - 1 + pow ( 2 , v ) - 1 ; }"}
{"text":"at the end subtract n * m as no of single sets have been added twice .","code":"return res - ( n * m ) ; }"}
{"text":"driver program to test the above function .","code":"int main ( ) { int a [ ] [ 3 ] = { ( 1 , 0 , 1 ) , ( 0 , 1 , 0 ) } ; cout << countSets ( a ) ; return 0 ; }"}
{"text":"Simple c ++ code for check a matrix is symmetric or not .","code":"#include <iostream> NEW_LINE using namespace std ; const int MAX = 100 ;"}
{"text":"Fills transpose of mat [ N ] [ N ] in tr [ N ] [ N ]","code":"void transpose ( int mat [ ] [ MAX ] , int tr [ ] [ MAX ] , int N ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) tr [ i ] [ j ] = mat [ j ] [ i ] ; }"}
{"text":"Returns true if mat [ N ] [ N ] is symmetric , else false","code":"bool isSymmetric ( int mat [ ] [ MAX ] , int N ) { int tr [ N ] [ MAX ] ; transpose ( mat , tr , N ) ; for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) if ( mat [ i ] [ j ] != tr [ i ] [ j ] ) return false ; return true ; }"}
{"text":"Driver code","code":"int main ( ) { int mat [ ] [ MAX ] = { { 1 , 3 , 5 } , { 3 , 2 , 4 } , { 5 , 4 , 1 } } ; if ( isSymmetric ( mat , 3 ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"Efficient c ++ code for check a matrix is symmetric or not .","code":"#include <iostream> NEW_LINE using namespace std ; const int MAX = 100 ;"}
{"text":"Returns true if mat [ N ] [ N ] is symmetric , else false","code":"bool isSymmetric ( int mat [ ] [ MAX ] , int N ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = 0 ; j < N ; j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false ; return true ; }"}
{"text":"Driver code","code":"int main ( ) { int mat [ ] [ MAX ] = { { 1 , 3 , 5 } , { 3 , 2 , 4 } , { 5 , 4 , 1 } } ; if ( isSymmetric ( mat , 3 ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program to find trace and normal of given matrix","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Size of given matrix","code":"const int MAX = 100 ;"}
{"text":"Returns Normal of a matrix of size n x n","code":"int findNormal ( int mat [ ] [ MAX ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) sum += mat [ i ] [ j ] * mat [ i ] [ j ] ; return sqrt ( sum ) ; }"}
{"text":"Returns trace of a matrix of size n x n","code":"int findTrace ( int mat [ ] [ MAX ] , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += mat [ i ] [ i ] ; return sum ; }"}
{"text":"Driven source","code":"int main ( ) { int mat [ ] [ MAX ] = { { 1 , 1 , 1 , 1 , 1 } , { 2 , 2 , 2 , 2 , 2 } , { 3 , 3 , 3 , 3 , 3 } , { 4 , 4 , 4 , 4 , 4 } , { 5 , 5 , 5 , 5 , 5 } , } ; cout << \" Trace \u2581 of \u2581 Matrix \u2581 = \u2581 \" << findTrace ( mat , 5 ) << endl ; cout << \" Normal \u2581 of \u2581 Matrix \u2581 = \u2581 \" << findNormal ( mat , 5 ) << endl ; return 0 ; }"}
{"text":"C ++ program to find maximum possible determinant of 0 \/ n matrix .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function for maximum determinant","code":"int maxDet ( int n ) { return ( 2 * n * n * n ) ; }"}
{"text":"Function to print resulatant matrix","code":"void resMatrix ( int n ) { for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) {"}
{"text":"three position where 0 appears","code":"if ( i == 0 && j == 2 ) cout << \"0 \u2581 \" ; else if ( i == 1 && j == 0 ) cout << \"0 \u2581 \" ; else if ( i == 2 && j == 1 ) cout << \"0 \u2581 \" ;"}
{"text":"position where n appears","code":"else cout < < n << \" \u2581 \" ; } cout << \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 15 ; cout << \" Maximum \u2581 Determinant \u2581 = \u2581 \" << maxDet ( n ) ; cout << \" Resultant Matrix : \" resMatrix ( n ) ; return 0 ; }"}
{"text":"CPP implementation of Naive method to count of negative numbers in M [ n ] [ m ]","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int countNegative ( int M [ ] [ 4 ] , int n , int m ) { int count = 0 ;"}
{"text":"Follow the path shown using arrows above","code":"for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( M [ i ] [ j ] < 0 ) count += 1 ;"}
{"text":"no more negative numbers in this row","code":"else break ; } } return count ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int M [ 3 ] [ 4 ] = { { -3 , -2 , -1 , 1 } , { -2 , 2 , 3 , 4 } , { 4 , 5 , 7 , 8 } } ; cout << countNegative ( M , 3 , 4 ) ; return 0 ; }"}
{"text":"CPP implementation of Efficient method to count of negative numbers in M [ n ] [ m ]","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count negative number","code":"int countNegative ( int M [ ] [ 4 ] , int n , int m ) {"}
{"text":"initialize result","code":"int count = 0 ;"}
{"text":"Start with top right corner","code":"int i = 0 ; int j = m - 1 ;"}
{"text":"Follow the path shown using arrows above","code":"while ( j >= 0 && i < n ) { if ( M [ i ] [ j ] < 0 ) {"}
{"text":"j is the index of the last negative number in this row . So there must be ( j + 1 )","code":"count += j + 1 ;"}
{"text":"negative numbers in this row .","code":"i += 1 ; }"}
{"text":"move to the left and see if we can find a negative number there","code":"else j -= 1 ; } return count ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int M [ 3 ] [ 4 ] = { { -3 , -2 , -1 , 1 } , { -2 , 2 , 3 , 4 } , { 4 , 5 , 7 , 8 } } ; cout << countNegative ( M , 3 , 4 ) ; return 0 ; }"}
{"text":"C ++ implementation of More efficient method to count number of negative numbers in row - column sorted matrix M [ n ] [ m ]","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive binary search to get last negative value in a row between a start and an end","code":"int getLastNegativeIndex ( int array [ ] , int start , int end , int n ) {"}
{"text":"Base case","code":"if ( start == end ) { return start ; }"}
{"text":"Get the mid for binary search","code":"int mid = start + ( end - start ) \/ 2 ;"}
{"text":"If current element is negative","code":"if ( array [ mid ] < 0 ) {"}
{"text":"If it is the rightmost negative element in the current row","code":"if ( mid + 1 < n && array [ mid + 1 ] >= 0 ) { return mid ; }"}
{"text":"Check in the right half of the array","code":"return getLastNegativeIndex ( array , mid + 1 , end , n ) ; } else {"}
{"text":"Check in the left half of the array","code":"return getLastNegativeIndex ( array , start , mid - 1 , n ) ; } }"}
{"text":"Function to return the count of negative numbers in the given matrix","code":"int countNegative ( int M [ ] [ 4 ] , int n , int m ) {"}
{"text":"Initialize result","code":"int count = 0 ;"}
{"text":"To store the index of the rightmost negative element in the row under consideration","code":"int nextEnd = m - 1 ;"}
{"text":"Iterate over all rows of the matrix","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If the first element of the current row is positive then there will be no negatives in the matrix below or after it","code":"if ( M [ i ] [ 0 ] >= 0 ) { break ; }"}
{"text":"Run binary search only until the index of last negative Integer in the above row","code":"nextEnd = getLastNegativeIndex ( M [ i ] , 0 , nextEnd , 4 ) ; count += nextEnd + 1 ; } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int M [ ] [ 4 ] = { { -3 , -2 , -1 , 1 } , { -2 , 2 , 3 , 4 } , { 4 , 5 , 7 , 8 } } ; int r = 3 ; int c = 4 ; cout << ( countNegative ( M , r , c ) ) ; return 0 ; }"}
{"text":"A Naive method to find maximum value of mat [ d ] [ e ] - ma [ a ] [ b ] such that d > a and e > b","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  5"}
{"text":"The function returns maximum value A ( d , e ) - A ( a , b ) over all choices of indexes such that both d > a and e > b .","code":"int findMaxValue ( int mat [ ] [ N ] ) {"}
{"text":"stores maximum value","code":"int maxValue = INT_MIN ;"}
{"text":"Consider all possible pairs mat [ a ] [ b ] and mat [ d ] [ e ]","code":"for ( int a = 0 ; a < N - 1 ; a ++ ) for ( int b = 0 ; b < N - 1 ; b ++ ) for ( int d = a + 1 ; d < N ; d ++ ) for ( int e = b + 1 ; e < N ; e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ] ; return maxValue ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int mat [ N ] [ N ] = { { 1 , 2 , -1 , -4 , -20 } , { -8 , -3 , 4 , 2 , 1 } , { 3 , 8 , 6 , 1 , 3 } , { -4 , -1 , 1 , 7 , -6 } , { 0 , -4 , 10 , -5 , 1 } } ; cout << \" Maximum \u2581 Value \u2581 is \u2581 \" << findMaxValue ( mat ) ; return 0 ; }"}
{"text":"An efficient method to find maximum value of mat [ d ] - ma [ a ] [ b ] such that c > a and d > b","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  5"}
{"text":"The function returns maximum value A ( c , d ) - A ( a , b ) over all choices of indexes such that both c > a and d > b .","code":"int findMaxValue ( int mat [ ] [ N ] ) {"}
{"text":"stores maximum value","code":"int maxValue = INT_MIN ;"}
{"text":"maxArr [ i ] [ j ] stores max of elements in matrix from ( i , j ) to ( N - 1 , N - 1 )","code":"int maxArr [ N ] [ N ] ;"}
{"text":"last element of maxArr will be same 's as of  the input matrix","code":"maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;"}
{"text":"preprocess last row Initialize max","code":"int maxv = mat [ N - 1 ] [ N - 1 ] ; for ( int j = N - 2 ; j >= 0 ; j -- ) { if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ] ; maxArr [ N - 1 ] [ j ] = maxv ; }"}
{"text":"preprocess last column Initialize max","code":"maxv = mat [ N - 1 ] [ N - 1 ] ; for ( int i = N - 2 ; i >= 0 ; i -- ) { if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ] ; maxArr [ i ] [ N - 1 ] = maxv ; }"}
{"text":"preprocess rest of the matrix from bottom","code":"for ( int i = N - 2 ; i >= 0 ; i -- ) { for ( int j = N - 2 ; j >= 0 ; j -- ) {"}
{"text":"Update maxValue","code":"if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ;"}
{"text":"set maxArr ( i , j )","code":"maxArr [ i ] [ j ] = max ( mat [ i ] [ j ] , max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) ) ; } } return maxValue ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int mat [ N ] [ N ] = { { 1 , 2 , -1 , -4 , -20 } , { -8 , -3 , 4 , 2 , 1 } , { 3 , 8 , 6 , 1 , 3 } , { -4 , -1 , 1 , 7 , -6 } , { 0 , -4 , 10 , -5 , 1 } } ; cout << \" Maximum \u2581 Value \u2581 is \u2581 \" << findMaxValue ( mat ) ; return 0 ; }"}
{"text":"A C ++ program to Print all elements in sorted order from row and column wise sorted matrix","code":"#include <iostream> NEW_LINE #include <climits> NEW_LINE using namespace std ; #define INF  INT_MAX NEW_LINE #define N  4"}
{"text":"A utility function to youngify a Young Tableau . This is different from standard youngify . It assumes that the value at mat [ 0 ] [ 0 ] is infinite .","code":"void youngify ( int mat [ ] [ N ] , int i , int j ) {"}
{"text":"Find the values at down and right sides of mat [ i ] [ j ]","code":"int downVal = ( i + 1 < N ) ? mat [ i + 1 ] [ j ] : INF ; int rightVal = ( j + 1 < N ) ? mat [ i ] [ j + 1 ] : INF ;"}
{"text":"If mat [ i ] [ j ] is the down right corner element , return","code":"if ( downVal == INF && rightVal == INF ) return ;"}
{"text":"Move the smaller of two values ( downVal and rightVal ) to mat [ i ] [ j ] and recur for smaller value","code":"if ( downVal < rightVal ) { mat [ i ] [ j ] = downVal ; mat [ i + 1 ] [ j ] = INF ; youngify ( mat , i + 1 , j ) ; } else { mat [ i ] [ j ] = rightVal ; mat [ i ] [ j + 1 ] = INF ; youngify ( mat , i , j + 1 ) ; } }"}
{"text":"A utility function to extract minimum element from Young tableau","code":"int extractMin ( int mat [ ] [ N ] ) { int ret = mat [ 0 ] [ 0 ] ; mat [ 0 ] [ 0 ] = INF ; youngify ( mat , 0 , 0 ) ; return ret ; }"}
{"text":"This function uses extractMin ( ) to print elements in sorted order","code":"void printSorted ( int mat [ ] [ N ] ) { cout << \" Elements \u2581 of \u2581 matrix \u2581 in \u2581 sorted \u2581 order \u2581 n \" ; for ( int i = 0 ; i < N * N ; i ++ ) cout << extractMin ( mat ) << \" \u2581 \" ; }"}
{"text":"driver program to test above function","code":"int main ( ) { int mat [ N ] [ N ] = { { 10 , 20 , 30 , 40 } , { 15 , 25 , 35 , 45 } , { 27 , 29 , 37 , 48 } , { 32 , 33 , 39 , 50 } , } ; printSorted ( mat ) ; return 0 ; }"}
{"text":"A simple C ++ program to find sum of all subsquares of size k x k","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Size of given matrix","code":"#define n  5"}
{"text":"A simple function to find sum of all sub - squares of size k x k in a given square matrix of size n x n","code":"void printSumSimple ( int mat [ ] [ n ] , int k ) {"}
{"text":"k must be smaller than or equal to n","code":"if ( k > n ) return ;"}
{"text":"row number of first cell in current sub - square of size k x k","code":"for ( int i = 0 ; i < n - k + 1 ; i ++ ) {"}
{"text":"column of first cell in current sub - square of size k x k","code":"for ( int j = 0 ; j < n - k + 1 ; j ++ ) {"}
{"text":"Calculate and print sum of current sub - square","code":"int sum = 0 ; for ( int p = i ; p < k + i ; p ++ ) for ( int q = j ; q < k + j ; q ++ ) sum += mat [ p ] [ q ] ; cout << sum << \" \u2581 \" ; }"}
{"text":"Line separator for sub - squares starting with next row","code":"cout << endl ; } }"}
{"text":"Driver program to test above function","code":"int main ( ) { int mat [ n ] [ n ] = { { 1 , 1 , 1 , 1 , 1 } , { 2 , 2 , 2 , 2 , 2 } , { 3 , 3 , 3 , 3 , 3 } , { 4 , 4 , 4 , 4 , 4 } , { 5 , 5 , 5 , 5 , 5 } , } ; int k = 3 ; printSumSimple ( mat , k ) ; return 0 ; }"}
{"text":"An efficient C ++ program to find sum of all subsquares of size k x k","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Size of given matrix","code":"#define n  5"}
{"text":"A O ( n ^ 2 ) function to find sum of all sub - squares of size k x k in a given square matrix of size n x n","code":"void printSumTricky ( int mat [ ] [ n ] , int k ) {"}
{"text":"k must be smaller than or equal to n","code":"if ( k > n ) return ;"}
{"text":"1 : PREPROCESSING To store sums of all strips of size k x 1","code":"int stripSum [ n ] [ n ] ;"}
{"text":"Go column by column","code":"for ( int j = 0 ; j < n ; j ++ ) {"}
{"text":"Calculate sum of first k x 1 rectangle in this column","code":"int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) sum += mat [ i ] [ j ] ; stripSum [ 0 ] [ j ] = sum ;"}
{"text":"Calculate sum of remaining rectangles","code":"for ( int i = 1 ; i < n - k + 1 ; i ++ ) { sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) ; stripSum [ i ] [ j ] = sum ; } }"}
{"text":"2 : CALCULATE SUM of Sub - Squares using stripSum [ ] [ ]","code":"for ( int i = 0 ; i < n - k + 1 ; i ++ ) {"}
{"text":"Calculate and print sum of first subsquare in this row","code":"int sum = 0 ; for ( int j = 0 ; j < k ; j ++ ) sum += stripSum [ i ] [ j ] ; cout << sum << \" \u2581 \" ;"}
{"text":"Calculate sum of remaining squares in current row by removing the leftmost strip of previous sub - square and adding a new strip","code":"for ( int j = 1 ; j < n - k + 1 ; j ++ ) { sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] ) ; cout << sum << \" \u2581 \" ; } cout << endl ; } }"}
{"text":"Driver program to test above function","code":"int main ( ) { int mat [ n ] [ n ] = { { 1 , 1 , 1 , 1 , 1 } , { 2 , 2 , 2 , 2 , 2 } , { 3 , 3 , 3 , 3 , 3 } , { 4 , 4 , 4 , 4 , 4 } , { 5 , 5 , 5 , 5 , 5 } , } ; int k = 3 ; printSumTricky ( mat , k ) ; return 0 ; }"}
{"text":"This function stores transpose of A [ ] [ ] in B [ ] [ ]","code":"void transpose ( int A [ ] [ N ] , int B [ ] [ M ] ) { int i , j ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j < M ; j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ; }"}
{"text":"Driver code","code":"int main ( ) { int A [ M ] [ N ] = { { 1 , 1 , 1 , 1 } , { 2 , 2 , 2 , 2 } , { 3 , 3 , 3 , 3 } } ; int B [ N ] [ M ] , i , j ; transpose ( A , B ) ; printf ( \" Result \u2581 matrix \u2581 is \u2581 STRNEWLINE \" ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j < M ; j ++ ) printf ( \" % d \u2581 \" , B [ i ] [ j ] ) ; printf ( \" STRNEWLINE \" ) ; } return 0 ; }"}
{"text":"Converts A [ ] [ ] to its transpose","code":"void transpose ( int A [ ] [ N ] ) { for ( int i = 0 ; i < N ; i ++ ) for ( int j = i + 1 ; j < N ; j ++ ) swap ( A [ i ] [ j ] , A [ j ] [ i ] ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int A [ N ] [ N ] = { { 1 , 1 , 1 , 1 } , { 2 , 2 , 2 , 2 } , { 3 , 3 , 3 , 3 } , { 4 , 4 , 4 , 4 } } ; transpose ( A ) ; printf ( \" Modified \u2581 matrix \u2581 is \u2581 STRNEWLINE \" ) ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) printf ( \" % d \u2581 \" , A [ i ] [ j ] ) ; printf ( \" STRNEWLINE \" ) ; } return 0 ; }"}
{"text":"A Naive Recursive C ++ program to count paths with exactly ' k ' coins","code":"#include <bits\/stdc++.h> NEW_LINE #define R  3 NEW_LINE #define C  3 NEW_LINE using namespace std ;"}
{"text":"Recursive function to count paths with sum k from ( 0 , 0 ) to ( m , n )","code":"int pathCountRec ( int mat [ ] [ C ] , int m , int n , int k ) {"}
{"text":"Base cases","code":"if ( m < 0 n < 0 ) return 0 ; if ( m == 0 && n == 0 ) return ( k == mat [ m ] [ n ] ) ;"}
{"text":"( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 )","code":"return pathCountRec ( mat , m - 1 , n , k - mat [ m ] [ n ] ) + pathCountRec ( mat , m , n - 1 , k - mat [ m ] [ n ] ) ; }"}
{"text":"A wrapper over pathCountRec ( )","code":"int pathCount ( int mat [ ] [ C ] , int k ) { return pathCountRec ( mat , R - 1 , C - 1 , k ) ; }"}
{"text":"Driver program","code":"int main ( ) { int k = 12 ; int mat [ R ] [ C ] = { { 1 , 2 , 3 } , { 4 , 6 , 5 } , { 3 , 2 , 1 } } ; cout << pathCount ( mat , k ) ; return 0 ; }"}
{"text":"A Dynamic Programming based C ++ program to count paths with exactly ' k ' coins","code":"#include <bits\/stdc++.h> NEW_LINE #define R  3 NEW_LINE #define C  3 NEW_LINE #define MAX_K  1000 NEW_LINE using namespace std ; int dp [ R ] [ C ] [ MAX_K ] ; int pathCountDPRecDP ( int mat [ ] [ C ] , int m , int n , int k ) {"}
{"text":"Base cases","code":"if ( m < 0 n < 0 ) return 0 ; if ( m == 0 && n == 0 ) return ( k == mat [ m ] [ n ] ) ;"}
{"text":"If this subproblem is already solved","code":"if ( dp [ m ] [ n ] [ k ] != -1 ) return dp [ m ] [ n ] [ k ] ;"}
{"text":"( m , n ) can be reached either through ( m - 1 , n ) or through ( m , n - 1 )","code":"dp [ m ] [ n ] [ k ] = pathCountDPRecDP ( mat , m - 1 , n , k - mat [ m ] [ n ] ) + pathCountDPRecDP ( mat , m , n - 1 , k - mat [ m ] [ n ] ) ; return dp [ m ] [ n ] [ k ] ; }"}
{"text":"This function mainly initializes dp [ ] [ ] [ ] and calls pathCountDPRecDP ( )","code":"int pathCountDP ( int mat [ ] [ C ] , int k ) { memset ( dp , -1 , sizeof dp ) ; return pathCountDPRecDP ( mat , R - 1 , C - 1 , k ) ; }"}
{"text":"Driver Program to test above functions","code":"int main ( ) { int k = 12 ; int mat [ R ] [ C ] = { { 1 , 2 , 3 } , { 4 , 6 , 5 } , { 3 , 2 , 1 } } ; cout << pathCountDP ( mat , k ) ; return 0 ; }"}
{"text":"C ++ implementation to sort the given matrix","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define SIZE  10"}
{"text":"function to sort the given matrix","code":"void sortMat ( int mat [ SIZE ] [ SIZE ] , int n ) {"}
{"text":"temporary matrix of size n ^ 2","code":"int temp [ n * n ] ; int k = 0 ;"}
{"text":"copy the elements of matrix one by one into temp [ ]","code":"for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) temp [ k ++ ] = mat [ i ] [ j ] ;"}
{"text":"sort temp [ ]","code":"sort ( temp , temp + k ) ;"}
{"text":"copy the elements of temp [ ] one by one in mat [ ] [ ]","code":"k = 0 ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = 0 ; j < n ; j ++ ) mat [ i ] [ j ] = temp [ k ++ ] ; }"}
{"text":"function to print the given matrix","code":"void printMat ( int mat [ SIZE ] [ SIZE ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) cout << mat [ i ] [ j ] << \" \u2581 \" ; cout << endl ; } }"}
{"text":"Driver program to test above","code":"int main ( ) { int mat [ SIZE ] [ SIZE ] = { { 5 , 4 , 7 } , { 1 , 3 , 8 } , { 2 , 9 , 6 } } ; int n = 3 ; cout << \" Original \u2581 Matrix : STRNEWLINE \" ; printMat ( mat , n ) ; sortMat ( mat , n ) ; cout << \" Matrix After Sorting : \" ; printMat ( mat , n ) ; return 0 ; }"}
{"text":"C ++ program for implementation of selection sort","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"swap function","code":"void swap ( int * xp , int * yp ) { int temp = * xp ; * xp = * yp ; * yp = temp ; }"}
{"text":"sort function","code":"void selectionSort ( int arr [ ] , int n ) { int i , j , min_idx ;"}
{"text":"One by one move boundary of unsorted subarray","code":"for ( i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Find the minimum element in unsorted array","code":"min_idx = i ; for ( j = i + 1 ; j < n ; j ++ ) if ( arr [ j ] < arr [ min_idx ] ) min_idx = j ;"}
{"text":"Swap the found minimum element with the first element","code":"swap ( & arr [ min_idx ] , & arr [ i ] ) ; } }"}
{"text":"Function to print an array","code":"void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; cout << endl ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int arr [ ] = { 64 , 25 , 12 , 22 , 11 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; selectionSort ( arr , n ) ; cout << \" Sorted \u2581 array : \u2581 STRNEWLINE \" ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"Optimized implementation of Bubble sort","code":"#include <stdio.h> NEW_LINE void swap ( int * xp , int * yp ) { int temp = * xp ; * xp = * yp ; * yp = temp ; }"}
{"text":"An optimized version of Bubble Sort","code":"void bubbleSort ( int arr [ ] , int n ) { int i , j ; bool swapped ; for ( i = 0 ; i < n - 1 ; i ++ ) { swapped = false ; for ( j = 0 ; j < n - i - 1 ; j ++ ) { if ( arr [ j ] > arr [ j + 1 ] ) {"}
{"text":"swap arr [ j ] and arr [ j + 1 ]","code":"swap ( & arr [ j ] , & arr [ j + 1 ] ) ; swapped = true ; } }"}
{"text":"IF no two elements were swapped by inner loop , then break","code":"if ( swapped == false ) break ; } }"}
{"text":"Function to print an array","code":"void printArray ( int arr [ ] , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) printf ( \" % d \u2581 \" , arr [ i ] ) ; printf ( \" n \" ) ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int arr [ ] = { 64 , 34 , 25 , 12 , 22 , 11 , 90 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; bubbleSort ( arr , n ) ; printf ( \" Sorted \u2581 array : \u2581 STRNEWLINE \" ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"Function to find the cross over point ( the point beforewhich elements are smaller than or equal to x and afterwhich greater than x )","code":"int findCrossOver ( int arr [ ] , int low , int high , int x ) {"}
{"text":"Base cases x is greater than all","code":"if ( arr [ high ] <= x ) return high ;"}
{"text":"x is smaller than all","code":"if ( arr [ low ] > x ) return low ;"}
{"text":"Find the middle point","code":"int mid = ( low + high ) \/ 2 ;"}
{"text":"If x is same as middle element , then return mid","code":"if ( arr [ mid ] <= x && arr [ mid + 1 ] > x ) return mid ;"}
{"text":"If x is greater than arr [ mid ] , then either arr [ mid + 1 ] is ceiling of x or ceiling lies in arr [ mid + 1. . . high ]","code":"if ( arr [ mid ] < x ) return findCrossOver ( arr , mid + 1 , high , x ) ; return findCrossOver ( arr , low , mid - 1 , x ) ; }"}
{"text":"This function prints k closest elements to x in arr [ ] . n is the number of elements in arr [ ]","code":"void printKclosest ( int arr [ ] , int x , int k , int n ) {"}
{"text":"Find the crossover point","code":"int l = findCrossOver ( arr , 0 , n - 1 , x ) ;"}
{"text":"Right index to search","code":"int r = l + 1 ;"}
{"text":"To keep track of count of elements already printed","code":"int count = 0 ;"}
{"text":"If x is present in arr [ ] , then reduce left index Assumption : all elements in arr [ ] are distinct","code":"if ( arr [ l ] == x ) l -- ;"}
{"text":"Compare elements on left and right of crossover point to find the k closest elements","code":"while ( l >= 0 && r < n && count < k ) { if ( x - arr [ l ] < arr [ r ] - x ) printf ( \" % d \u2581 \" , arr [ l -- ] ) ; else printf ( \" % d \u2581 \" , arr [ r ++ ] ) ; count ++ ; }"}
{"text":"If there are no more elements on right side , then print left elements","code":"while ( count < k && l >= 0 ) printf ( \" % d \u2581 \" , arr [ l -- ] ) , count ++ ;"}
{"text":"If there are no more elements on left side , then print right elements","code":"while ( count < k && r < n ) printf ( \" % d \u2581 \" , arr [ r ++ ] ) , count ++ ; }"}
{"text":"Driver program to check above functions","code":"int main ( ) { int arr [ ] = { 12 , 16 , 22 , 30 , 35 , 39 , 42 , 45 , 48 , 50 , 53 , 55 , 56 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int x = 35 , k = 4 ; printKclosest ( arr , x , 4 , n ) ; return 0 ; }"}
{"text":"Recursive C program for coin change problem .","code":"#include <stdio.h>"}
{"text":"Returns the count of ways we can sum S [ 0. . . m - 1 ] coins to get sum n","code":"int count ( int S [ ] , int m , int n ) {"}
{"text":"If n is 0 then there is 1 solution ( do not include any coin )","code":"if ( n == 0 ) return 1 ;"}
{"text":"If n is less than 0 then no solution exists","code":"if ( n < 0 ) return 0 ;"}
{"text":"If there are no coins and n is greater than 0 , then no solution exist","code":"if ( m <= 0 && n >= 1 ) return 0 ;"}
{"text":"count is sum of solutions ( i ) including S [ m - 1 ] ( ii ) excluding S [ m - 1 ]","code":"return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int i , j ; int arr [ ] = { 1 , 2 , 3 } ; int m = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printf ( \" % d \u2581 \" , count ( arr , m , 4 ) ) ; getchar ( ) ; return 0 ; }"}
{"text":"Dynamic Programming C ++ implementation of Coin Change problem","code":"#include <bits\/stdc++.h> NEW_LINE int count ( int S [ ] , int m , int n ) {"}
{"text":"table [ i ] will be storing the number of solutions for value i . We need n + 1 rows as the table is constructed in bottom up manner using the base case ( n = 0 )","code":"int table [ n + 1 ] ; memset ( table , 0 , sizeof ( table ) ) ;"}
{"text":"Base case ( If given value is 0 )","code":"table [ 0 ] = 1 ;"}
{"text":"Pick all coins one by one and update the table [ ] values after the index greater than or equal to the value of the picked coin","code":"for ( int i = 0 ; i < m ; i ++ ) for ( int j = S [ i ] ; j <= n ; j ++ ) table [ j ] += table [ j - S [ i ] ] ; return table [ n ] ; }"}
{"text":"C ++ program using memoization","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int dp [ 100 ] [ 100 ] ;"}
{"text":"Function for matrix chain multiplication","code":"int matrixChainMemoised ( int * p , int i , int j ) { if ( i == j ) { return 0 ; } if ( dp [ i ] [ j ] != -1 ) { return dp [ i ] [ j ] ; } dp [ i ] [ j ] = INT_MAX ; for ( int k = i ; k < j ; k ++ ) { dp [ i ] [ j ] = min ( dp [ i ] [ j ] , matrixChainMemoised ( p , i , k ) + matrixChainMemoised ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ) ; } return dp [ i ] [ j ] ; } int MatrixChainOrder ( int * p , int n ) { int i = 1 , j = n - 1 ; return matrixChainMemoised ( p , i , j ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; memset ( dp , -1 , sizeof dp ) ; cout << \" Minimum \u2581 number \u2581 of \u2581 multiplications \u2581 is \u2581 \" << MatrixChainOrder ( arr , n ) ; }"}
{"text":"See the Cormen book for details of the following algorithm","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Matrix Ai has dimension p [ i - 1 ] x p [ i ] for i = 1. . n","code":"int MatrixChainOrder ( int p [ ] , int n ) {"}
{"text":"For simplicity of the program , one extra row and one extra column are allocated in m [ ] [ ] . 0 th row and 0 th column of m [ ] [ ] are not used","code":"int m [ n ] [ n ] ; int i , j , k , L , q ;"}
{"text":"cost is zero when multiplying one matrix .","code":"for ( i = 1 ; i < n ; i ++ ) m [ i ] [ i ] = 0 ;"}
{"text":"L is chain length .","code":"for ( L = 2 ; L < n ; L ++ ) { for ( i = 1 ; i < n - L + 1 ; i ++ ) { j = i + L - 1 ; m [ i ] [ j ] = INT_MAX ; for ( k = i ; k <= j - 1 ; k ++ ) {"}
{"text":"q = cost \/ scalar multiplications","code":"q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ] ; if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q ; } } } return m [ 1 ] [ n - 1 ] ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Minimum \u2581 number \u2581 of \u2581 multiplications \u2581 is \u2581 \" << MatrixChainOrder ( arr , size ) ; getchar ( ) ; return 0 ; }"}
{"text":"A Naive recursive solution for Rod cutting problem","code":"#include <stdio.h> NEW_LINE #include <limits.h>"}
{"text":"A utility function to get the maximum of two integers","code":"int max ( int a , int b ) { return ( a > b ) ? a : b ; }"}
{"text":"Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces","code":"int cutRod ( int price [ ] , int n ) { if ( n <= 0 ) return 0 ; int max_val = INT_MIN ;"}
{"text":"Recursively cut the rod in different pieces and compare different configurations","code":"for ( int i = 0 ; i < n ; i ++ ) max_val = max ( max_val , price [ i ] + cutRod ( price , n - i - 1 ) ) ; return max_val ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int arr [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printf ( \" Maximum \u2581 Obtainable \u2581 Value \u2581 is \u2581 % dn \" , cutRod ( arr , size ) ) ; getchar ( ) ; return 0 ; }"}
{"text":"A Dynamic Programming solution for Rod cutting problem","code":"#include <stdio.h> NEW_LINE #include <limits.h>"}
{"text":"A utility function to get the maximum of two integers","code":"int max ( int a , int b ) { return ( a > b ) ? a : b ; }"}
{"text":"Returns the best obtainable price for a rod of length n and price [ ] as prices of different pieces","code":"int cutRod ( int price [ ] , int n ) { int val [ n + 1 ] ; val [ 0 ] = 0 ; int i , j ;"}
{"text":"Build the table val [ ] in bottom up manner and return the last entry from the table","code":"for ( i = 1 ; i <= n ; i ++ ) { int max_val = INT_MIN ; for ( j = 0 ; j < i ; j ++ ) max_val = max ( max_val , price [ j ] + val [ i - j - 1 ] ) ; val [ i ] = max_val ; } return val [ n ] ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int arr [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printf ( \" Maximum \u2581 Obtainable \u2581 Value \u2581 is \u2581 % dn \" , cutRod ( arr , size ) ) ; getchar ( ) ; return 0 ; }"}
{"text":"CPP program for above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Global Array for the purpose of memoization .","code":"int t [ 9 ] [ 9 ] ;"}
{"text":"A recursive program , using , memoization , to implement the rod cutting problem ( Top - Down ) .","code":"int un_kp ( int price [ ] , int length [ ] , int Max_len , int n ) {"}
{"text":"The maximum price will be zero , when either the length of the rod is zero or price is zero .","code":"if ( n == 0 Max_len == 0 ) { return 0 ; }"}
{"text":"If the length of the rod is less than the maximum length , Max_lene will consider it . Now depending upon the profit , either Max_lene we will take it or discard it .","code":"if ( length [ n - 1 ] <= Max_len ) { t [ n ] [ Max_len ] = max ( price [ n - 1 ] + un_kp ( price , length , Max_len - length [ n - 1 ] , n ) , un_kp ( price , length , Max_len , n - 1 ) ) ; }"}
{"text":"If the length of the rod is greater than the permitted size , Max_len we will not consider it .","code":"else { t [ n ] [ Max_len ] = un_kp ( price , length , Max_len , n - 1 ) ; }"}
{"text":"Max_lene Max_lenill return the maximum value obtained , Max_lenhich is present at the nth roMax_len and Max_lenth column .","code":"return t [ n ] [ Max_len ] ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { int price [ ] = { 1 , 5 , 8 , 9 , 10 , 17 , 17 , 20 } ; int n = sizeof ( price ) \/ sizeof ( price [ 0 ] ) ; int length [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { length [ i ] = i + 1 ; } int Max_len = n ;"}
{"text":"Function Call","code":"cout << \" Maximum \u2581 obtained \u2581 value \u2581 is \u2581 \" << un_kp ( price , length , n , Max_len ) << endl ; }"}
{"text":"C ++ program to Multiply two integers without using multiplication , division and bitwise operators , and no loops","code":"#include <iostream> NEW_LINE using namespace std ; class GFG {"}
{"text":"function to multiply two numbers x and y","code":"public : int multiply ( int x , int y ) {"}
{"text":"0 multiplied with anything gives 0","code":"if ( y == 0 ) return 0 ;"}
{"text":"Add x one by one","code":"if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;"}
{"text":"the case where y is negative","code":"if ( y < 0 ) return - multiply ( x , - y ) ; } } ;"}
{"text":"Driver code","code":"int main ( ) { GFG g ; cout << endl << g . multiply ( 5 , -11 ) ; getchar ( ) ; return 0 ; }"}
{"text":"C ++ program to print all primes smaller than or equal to n using Sieve of Eratosthenes","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void SieveOfEratosthenes ( int n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"bool prime [ n + 1 ] ; memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p <= n ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p greater than or equal to the square of it numbers which are multiple of p and are less than p ^ 2 are already been marked .","code":"for ( int i = p * p ; i <= n ; i += p ) prime [ i ] = false ; } }"}
{"text":"Print all prime numbers","code":"for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) cout << p << \" \u2581 \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 30 ; cout << \" Following \u2581 are \u2581 the \u2581 prime \u2581 numbers \u2581 smaller \u2581 \" << \" \u2581 than \u2581 or \u2581 equal \u2581 to \u2581 \" << n << endl ; SieveOfEratosthenes ( n ) ; return 0 ; }"}
{"text":"C ++ code for Pascal 's Triangle","code":"#include <stdio.h>"}
{"text":"binomialCoeff","code":"int binomialCoeff ( int n , int k ) ; int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; }"}
{"text":"Function to print first n lines of Pascal 's Triangle","code":"void printPascal ( int n ) {"}
{"text":"Iterate through every line and print entries in it","code":"for ( int line = 0 ; line < n ; line ++ ) {"}
{"text":"Every line has number of integers equal to line number","code":"for ( int i = 0 ; i <= line ; i ++ ) printf ( \" % d \u2581 \" , binomialCoeff ( line , i ) ) ; printf ( \" STRNEWLINE \" ) ; } }"}
{"text":"Driver program","code":"int main ( ) { int n = 7 ; printPascal ( n ) ; return 0 ; }"}
{"text":"C ++ program for Pascals Triangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"A O ( n ^ 2 ) time and O ( n ^ 2 ) extra space method for Pascal 's Triangle","code":"void printPascal ( int n ) {"}
{"text":"An auxiliary array to store generated pscal triangle values","code":"int arr [ n ] [ n ] ;"}
{"text":"Iterate through every line and print integer ( s ) in it","code":"for ( int line = 0 ; line < n ; line ++ ) {"}
{"text":"Every line has number of integers equal to line number","code":"for ( int i = 0 ; i <= line ; i ++ ) {"}
{"text":"First and last values in every row are 1","code":"if ( line == i i == 0 ) arr [ line ] [ i ] = 1 ;"}
{"text":"Other values are sum of values just above and left of above","code":"else arr [ line ] [ i ] = arr [ line - 1 ] [ i - 1 ] + arr [ line - 1 ] [ i ] ; cout << arr [ line ] [ i ] << \" \u2581 \" ; } cout << \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 5 ; printPascal ( n ) ; return 0 ; }"}
{"text":"C ++ program for Pascals Triangle A O ( n ^ 2 ) time and O ( 1 ) extra space function for Pascal 's Triangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void printPascal ( int n ) { for ( int line = 1 ; line <= n ; line ++ ) {"}
{"text":"used to represent C ( line , i )","code":"int C = 1 ; for ( int i = 1 ; i <= line ; i ++ ) {"}
{"text":"The first value in a line is always 1","code":"cout << C << \" \u2581 \" ; C = C * ( line - i ) \/ i ; } cout << \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 5 ; printPascal ( n ) ; return 0 ; }"}
{"text":"C ++ Program to add two numbers without using arithmetic operator","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int Add ( int x , int y ) {"}
{"text":"Iterate till there is no carry","code":"while ( y != 0 ) {"}
{"text":"carry now contains common set bits of x and y","code":"int carry = x & y ;"}
{"text":"Sum of bits of x and y where at least one of the bits is not set","code":"x = x ^ y ;"}
{"text":"Carry is shifted by one so that adding it to x gives the required sum","code":"y = carry << 1 ; } return x ; }"}
{"text":"Driver code","code":"int main ( ) { cout << Add ( 15 , 32 ) ; return 0 ; }"}
{"text":"This function will return n % d . d must be one of : 1 , 2 , 4 , 8 , 16 , 32 , ...","code":"unsigned int getModulo ( unsigned int n , unsigned int d ) { return ( n & ( d - 1 ) ) ; }"}
{"text":"Driver Code","code":"int main ( ) { unsigned int n = 6 ;"}
{"text":"d must be a power of 2","code":"unsigned int d = 4 ; printf ( \" % u \u2581 moduo \u2581 % u \u2581 is \u2581 % u \" , n , d , getModulo ( n , d ) ) ; getchar ( ) ; return 0 ; }"}
{"text":"C ++ program to Count set bits in an integer","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to get no of set bits in binary representation of positive integer n","code":"unsigned int countSetBits ( unsigned int n ) { unsigned int count = 0 ; while ( n ) { count += n & 1 ; n >>= 1 ; } return count ; }"}
{"text":"Program to test function countSetBits","code":"int main ( ) { int i = 9 ; cout << countSetBits ( i ) ; return 0 ; }"}
{"text":"CPP implementation for recursive approach to find the number of set bits using Brian Kernighans Algorithm","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"recursive function to count set bits","code":"int countSetBits ( int n ) {"}
{"text":"base case","code":"if ( n == 0 ) return 0 ; else return 1 + countSetBits ( n & ( n - 1 ) ) ; }"}
{"text":"driver code","code":"int main ( ) {"}
{"text":"get value from user","code":"int n = 9 ;"}
{"text":"function calling","code":"cout << countSetBits ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Lookup table","code":"int BitsSetTable256 [ 256 ] ;"}
{"text":"Function to initialise the lookup table","code":"void initialize ( ) {"}
{"text":"To initially generate the table algorithmically","code":"BitsSetTable256 [ 0 ] = 0 ; for ( int i = 0 ; i < 256 ; i ++ ) { BitsSetTable256 [ i ] = ( i & 1 ) + BitsSetTable256 [ i \/ 2 ] ; } }"}
{"text":"Function to return the count of set bits in n","code":"int countSetBits ( int n ) { return ( BitsSetTable256 [ n & 0xff ] + BitsSetTable256 [ ( n >> 8 ) & 0xff ] + BitsSetTable256 [ ( n >> 16 ) & 0xff ] + BitsSetTable256 [ n >> 24 ] ) ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Initialise the lookup table","code":"initialize ( ) ; int n = 9 ; cout << countSetBits ( n ) ; }"}
{"text":"C ++ program to demonstrate __builtin_popcount ( )","code":"#include <iostream>"}
{"text":"Driver code","code":"using namespace std ; int main ( ) { cout << __builtin_popcount ( 4 ) << endl ; cout << __builtin_popcount ( 15 ) ; return 0 ; }"}
{"text":"C ++ program to count set bits by pre - storing count set bits in nibbles .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int num_to_bits [ 16 ] = { 0 , 1 , 1 , 2 , 1 , 2 , 2 , 3 , 1 , 2 , 2 , 3 , 2 , 3 , 3 , 4 } ;"}
{"text":"Recursively get nibble of a given number and map them in the array","code":"unsigned int countSetBitsRec ( unsigned int num ) { int nibble = 0 ; if ( 0 == num ) return num_to_bits [ 0 ] ;"}
{"text":"Find last nibble","code":"nibble = num & 0xf ;"}
{"text":"Use pre - stored values to find count in last nibble plus recursively add remaining nibbles .","code":"return num_to_bits [ nibble ] + countSetBitsRec ( num >> 4 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int num = 31 ; cout << countSetBitsRec ( num ) ; return 0 ; }"}
{"text":"Check each bit in a number is set or not and return the total count of the set bits .","code":"int countSetBits ( int N ) { int count = 0 ;"}
{"text":"( 1 << i ) = pow ( 2 , i )","code":"for ( int i = 0 ; i < sizeof ( int ) * 8 ; i ++ ) { if ( N & ( 1 << i ) ) count ++ ; } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 15 ; cout << countSetBits ( N ) << endl ; return 0 ; }"}
{"text":"C ++ program to find parity of an integer","code":"# include <bits\/stdc++.h> NEW_LINE # define bool  int NEW_LINE using namespace std ;"}
{"text":"Function to get parity of number n . It returns 1 if n has odd parity , and returns 0 if n has even parity","code":"bool getParity ( unsigned int n ) { bool parity = 0 ; while ( n ) { parity = ! parity ; n = n & ( n - 1 ) ; } return parity ; }"}
{"text":"Driver program to test getParity ( )","code":"int main ( ) { unsigned int n = 7 ; cout << \" Parity \u2581 of \u2581 no \u2581 \" << n << \" \u2581 = \u2581 \" << ( getParity ( n ) ? \" odd \" : \" even \" ) ; getchar ( ) ; return 0 ; }"}
{"text":"C ++ Program to find whether a no is power of two","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if x is power of 2","code":"bool isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; return ( ceil ( log2 ( n ) ) == floor ( log2 ( n ) ) ) ; }"}
{"text":"Driver program","code":"int main ( ) { isPowerOfTwo ( 31 ) ? cout << \" Yes \" << endl : cout << \" No \" << endl ; isPowerOfTwo ( 64 ) ? cout << \" Yes \" << endl : cout << \" No \" << endl ; return 0 ; }"}
{"text":"Function to check if x is power of 2","code":"bool isPowerOfTwo ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 2 != 0 ) return 0 ; n = n \/ 2 ; } return 1 ; }"}
{"text":"Driver code","code":"int main ( ) { isPowerOfTwo ( 31 ) ? cout << \" Yes STRNEWLINE \" : cout << \" No STRNEWLINE \" ; isPowerOfTwo ( 64 ) ? cout << \" Yes STRNEWLINE \" : cout << \" No STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program for above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function which checks whether a number is a power of 2","code":"bool powerOf2 ( int n ) {"}
{"text":"base cases '1' is the only odd number which is a power of 2 ( 2 ^ 0 )","code":"if ( n == 1 ) return true ;"}
{"text":"all other odd numbers are not powers of 2","code":"else if ( n % 2 != 0 n == 0 ) return false ;"}
{"text":"recursive function call","code":"return powerOf2 ( n \/ 2 ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"True","code":"int n = 64 ;"}
{"text":"False","code":"int m = 12 ; if ( powerOf2 ( n ) == 1 ) cout << \" True \" << endl ; else cout << \" False \" << endl ; if ( powerOf2 ( m ) == 1 ) cout << \" True \" << endl ; else cout << \" False \" << endl ; }"}
{"text":"Function to check if x is power of 2","code":"bool isPowerOfTwo ( int x ) {"}
{"text":"First x in the below expression is for the case when x is 0","code":"return x && ( ! ( x & ( x - 1 ) ) ) ; }"}
{"text":"Driver code","code":"int main ( ) { isPowerOfTwo ( 31 ) ? cout << \" Yes STRNEWLINE \" : cout << \" No STRNEWLINE \" ; isPowerOfTwo ( 64 ) ? cout << \" Yes STRNEWLINE \" : cout << \" No STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program to find the maximum repeating number","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Returns maximum repeating element in arr [ 0. . n - 1 ] . The array elements are in range from 0 to k - 1","code":"int maxRepeating ( int * arr , int n , int k ) {"}
{"text":"Iterate though input array , for every element arr [ i ] , increment arr [ arr [ i ] % k ] by k","code":"for ( int i = 0 ; i < n ; i ++ ) arr [ arr [ i ] % k ] += k ;"}
{"text":"Find index of the maximum repeating element","code":"int max = arr [ 0 ] , result = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; result = i ; } }"}
{"text":"Return index of the maximum element","code":"return result ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int arr [ ] = { 2 , 3 , 3 , 5 , 3 , 4 , 1 , 7 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 8 ; cout << \" The \u2581 maximum \u2581 repeating \u2581 number \u2581 is \u2581 \" << maxRepeating ( arr , n , k ) << endl ; return 0 ; }"}
{"text":"CPP Program to solve range query on array whose each element is XOR of index value and previous element .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function return derived formula value .","code":"int fun ( int x ) { int y = ( x \/ 4 ) * 4 ;"}
{"text":"finding xor value of range [ y ... x ]","code":"int ans = 0 ; for ( int i = y ; i <= x ; i ++ ) ans ^= i ; return ans ; }"}
{"text":"function to solve query for l and r .","code":"int query ( int x ) {"}
{"text":"if l or r is 0.","code":"if ( x == 0 ) return 0 ; int k = ( x + 1 ) \/ 2 ;"}
{"text":"finding x is divisible by 2 or not .","code":"return ( x %= 2 ) ? 2 * fun ( k ) : ( ( fun ( k - 1 ) * 2 ) ^ ( k & 1 ) ) ; } void allQueries ( int q , int l [ ] , int r [ ] ) { for ( int i = 0 ; i < q ; i ++ ) cout << ( query ( r [ i ] ) ^ query ( l [ i ] - 1 ) ) << endl ; }"}
{"text":"Driven Program","code":"int main ( ) { int q = 3 ; int l [ ] = { 2 , 2 , 5 } ; int r [ ] = { 4 , 8 , 9 } ; allQueries ( q , l , r ) ; return 0 ; }"}
{"text":"Precompute the prefix XOR of greatest odd divisor","code":"void prefixXOR ( int arr [ ] , int preXOR [ ] , int n ) {"}
{"text":"Finding the Greatest Odd divisor","code":"for ( int i = 0 ; i < n ; i ++ ) { while ( arr [ i ] % 2 != 1 ) arr [ i ] \/= 2 ; preXOR [ i ] = arr [ i ] ; }"}
{"text":"Finding prefix XOR","code":"for ( int i = 1 ; i < n ; i ++ ) preXOR [ i ] = preXOR [ i - 1 ] ^ preXOR [ i ] ; }"}
{"text":"Return XOR of the range","code":"int query ( int preXOR [ ] , int l , int r ) { if ( l == 0 ) return preXOR [ r ] ; else return preXOR [ r ] ^ preXOR [ l - 1 ] ; }"}
{"text":"Driven Program","code":"int main ( ) { int arr [ ] = { 3 , 4 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int preXOR [ n ] ; prefixXOR ( arr , preXOR , n ) ; cout << query ( preXOR , 0 , 2 ) << endl ; cout << query ( preXOR , 1 , 2 ) << endl ; return 0 ; }"}
{"text":"C ++ code to find minimum number of swaps to sort a binary array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum swaps to sort an array of 0 s and 1 s .","code":"int findMinSwaps ( int arr [ ] , int n ) {"}
{"text":"Array to store count of zeroes","code":"int noOfZeroes [ n ] ; memset ( noOfZeroes , 0 , sizeof ( noOfZeroes ) ) ; int i , count = 0 ;"}
{"text":"Count number of zeroes on right side of every one .","code":"noOfZeroes [ n - 1 ] = 1 - arr [ n - 1 ] ; for ( i = n - 2 ; i >= 0 ; i -- ) { noOfZeroes [ i ] = noOfZeroes [ i + 1 ] ; if ( arr [ i ] == 0 ) noOfZeroes [ i ] ++ ; }"}
{"text":"Count total number of swaps by adding number of zeroes on right side of every one .","code":"for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) count += noOfZeroes [ i ] ; } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << findMinSwaps ( arr , n ) ; return 0 ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 } ; cout << minswaps ( arr , 9 ) ; return 0 ; }"}
{"text":"C ++ program to check if an Array is sorted or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if array is sorted in non - decreasing order .","code":"bool arraySortedOrNot ( int arr [ ] , int n ) {"}
{"text":"Array has one or no element","code":"if ( n == 0 n == 1 ) return true ; for ( int i = 1 ; i < n ; i ++ )"}
{"text":"Unsorted pair found","code":"if ( arr [ i - 1 ] > arr [ i ] ) return false ;"}
{"text":"No unsorted pair found","code":"return true ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 20 , 23 , 23 , 45 , 78 , 88 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; if ( arraySortedOrNot ( arr , n ) ) cout << \" Yes STRNEWLINE \" ; else cout << \" No STRNEWLINE \" ; }"}
{"text":"C ++ Program to find the two odd occurring elements","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Prints two numbers that occur odd number of times . The function assumes that the array size is at least 2 and there are exactly two numbers occurring odd number of times .","code":"void printTwoOdd ( int arr [ ] , int size ) { int xor2 = arr [ 0 ] ;"}
{"text":"Will hold XOR of two odd occurring elements","code":"int set_bit_no ;"}
{"text":"Will have only single set bit of xor2","code":"int i ; int n = size - 2 ; int x = 0 , y = 0 ;"}
{"text":"Get the xor of all elements in arr [ ] . The xor will basically be xor of two odd occurring elements","code":"for ( i = 1 ; i < size ; i ++ ) xor2 = xor2 ^ arr [ i ] ;"}
{"text":"Get one set bit in the xor2 . We get rightmost set bit in the following line as it is easy to get","code":"set_bit_no = xor2 & ~ ( xor2 - 1 ) ;"}
{"text":"Now divide elements in two sets : 1 ) The elements having the corresponding bit as 1. 2 ) The elements having the corresponding bit as 0.","code":"for ( i = 0 ; i < size ; i ++ ) {"}
{"text":"XOR of first set is finally going to hold one odd occurring number x","code":"if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ] ;"}
{"text":"XOR of second set is finally going to hold the other odd occurring number y","code":"else y = y ^ arr [ i ] ; } cout << \" The \u2581 two \u2581 ODD \u2581 elements \u2581 are \u2581 \" << x << \" \u2581 & \u2581 \" << y ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 } ; int arr_size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printTwoOdd ( arr , arr_size ) ; return 0 ; }"}
{"text":"C ++ Program to find the two odd occurring elements","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Prints two numbers that occur odd number of times . The function assumes that the array size is at least 2 and there are exactly two numbers occurring odd number of times .","code":"void printTwoOdd ( int arr [ ] , int size ) {"}
{"text":"Create map and calculate frequency of array of * elements using array .","code":"map < int , int > m ; for ( int i = 0 ; i < size ; i ++ ) { m [ arr [ i ] ] ++ ; }"}
{"text":"Traverse through the map and check if its second element that is the frequency is odd or not . Then this is the odd occurring element . Its is clearly mentioned in problem that there are only two odd occurring elements so this will print those two elements .","code":"cout << \" The \u2581 two \u2581 ODD \u2581 elements \u2581 are \u2581 \" ; for ( auto & x : m ) { if ( x . second % 2 != 0 ) cout << x . first << \" , \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 4 , 2 , 4 , 5 , 2 , 3 , 3 , 1 } ; int arr_size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printTwoOdd ( arr , arr_size ) ; return 0 ; }"}
{"text":"C ++ program to find a pair with the given difference","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"The function assumes that the array is sorted","code":"bool findPair ( int arr [ ] , int size , int n ) {"}
{"text":"Initialize positions of two elements","code":"int i = 0 ; int j = 1 ;"}
{"text":"Search for a pair","code":"while ( i < size && j < size ) { if ( i != j && arr [ j ] - arr [ i ] == n ) { cout << \" Pair \u2581 Found : \u2581 ( \" << arr [ i ] << \" , \u2581 \" << arr [ j ] << \" ) \" ; return true ; } else if ( arr [ j ] - arr [ i ] < n ) j ++ ; else i ++ ; } cout << \" No \u2581 such \u2581 pair \" ; return false ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int arr [ ] = { 1 , 8 , 30 , 40 , 100 } ; int size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int n = 60 ; findPair ( arr , size , n ) ; return 0 ; }"}
{"text":"C ++ program to find k maximum elements of array in original order","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print m Maximum elements","code":"void printMax ( int arr [ ] , int k , int n ) {"}
{"text":"vector to store the copy of the original array","code":"vector < int > brr ( arr , arr + n ) ;"}
{"text":"Sorting the vector in descending order . Please refer below link for details www . geeksforgeeks . org \/ sort - c - stl \/ https :","code":"sort ( brr . begin ( ) , brr . end ( ) , greater < int > ( ) ) ;"}
{"text":"Traversing through original array and printing all those elements that are in first k of sorted vector . goo . gl \/ 44 Rwgt Please refer https : for details of binary_search ( )","code":"for ( int i = 0 ; i < n ; ++ i ) if ( binary_search ( brr . begin ( ) , brr . begin ( ) + k , arr [ i ] , greater < int > ( ) ) ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 50 , 8 , 45 , 12 , 25 , 40 , 84 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 3 ; printMax ( arr , k , n ) ; return 0 ; }"}
{"text":"CPP for printing smallest n number in order","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print smallest n numbers","code":"void printSmall ( int arr [ ] , int asize , int n ) {"}
{"text":"Make copy of array","code":"vector < int > copy_arr ( arr , arr + asize ) ;"}
{"text":"Sort copy array","code":"sort ( copy_arr . begin ( ) , copy_arr . begin ( ) + asize ) ;"}
{"text":"For each arr [ i ] find whether it is a part of n - smallest with binary search","code":"for ( int i = 0 ; i < asize ; ++ i ) if ( binary_search ( copy_arr . begin ( ) , copy_arr . begin ( ) + n , arr [ i ] ) ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver program","code":"int main ( ) { int arr [ ] = { 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 } ; int asize = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int n = 5 ; printSmall ( arr , asize , n ) ; return 0 ; }"}
{"text":"C ++ program to check if a given array can form arithmetic progression","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression","code":"bool checkIsAP ( int arr [ ] , int n ) { if ( n == 1 ) return true ;"}
{"text":"Sort array","code":"sort ( arr , arr + n ) ;"}
{"text":"After sorting , difference between consecutive elements must be same .","code":"int d = arr [ 1 ] - arr [ 0 ] ; for ( int i = 2 ; i < n ; i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ; return true ; }"}
{"text":"Driven Program","code":"int main ( ) { int arr [ ] = { 20 , 15 , 5 , 0 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; ( checkIsAP ( arr , n ) ) ? ( cout << \" Yes \" << endl ) : ( cout << \" No \" << endl ) ; return 0 ; }"}
{"text":"C ++ program to check if a given array can form arithmetic progression","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns true if a permutation of arr [ 0. . n - 1 ] can form arithmetic progression","code":"bool checkIsAP ( int arr [ ] , int n ) { unordered_map < int , int > hm ; int smallest = INT_MAX , second_smallest = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Find the smallest and and update second smallest","code":"if ( arr [ i ] < smallest ) { second_smallest = smallest ; smallest = arr [ i ] ; }"}
{"text":"Find second smallest","code":"else if ( arr [ i ] != smallest && arr [ i ] < second_smallest ) second_smallest = arr [ i ] ;"}
{"text":"Check if the duplicate element found or not","code":"if ( hm . find ( arr [ i ] ) == hm . end ( ) ) hm [ arr [ i ] ] ++ ;"}
{"text":"If duplicate found then return false","code":"else return false ; }"}
{"text":"Find the difference between smallest and second smallest","code":"int diff = second_smallest - smallest ;"}
{"text":"As we have used smallest and second smallest , so we should now only check for n - 2 elements","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( hm . find ( second_smallest ) == hm . end ( ) ) return false ; second_smallest += diff ; } return true ; }"}
{"text":"Driven Program","code":"int main ( ) { int arr [ ] = { 20 , 15 , 5 , 0 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; ( checkIsAP ( arr , n ) ) ? ( cout << \" Yes \" << endl ) : ( cout << \" No \" << endl ) ; return 0 ; }"}
{"text":"CPP Code to find no . of Ways of choosing a pair with maximum difference","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int countPairs ( int a [ ] , int n ) {"}
{"text":"To find minimum and maximum of the array","code":"int mn = INT_MAX ; int mx = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) { mn = min ( mn , a [ i ] ) ; mx = max ( mx , a [ i ] ) ; }"}
{"text":"to find the count of minimum and maximum elements","code":"int c1 = 0 ;"}
{"text":"Count variables","code":"int c2 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == mn ) c1 ++ ; if ( a [ i ] == mx ) c2 ++ ; }"}
{"text":"condition for all elements equal","code":"if ( mn == mx ) return n * ( n - 1 ) \/ 2 ; else return c1 * c2 ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 3 , 2 , 1 , 1 , 3 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << countPairs ( a , n ) ; return 0 ; }"}
{"text":"C ++ code to rearrange linked list in place","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; struct node { int data ; struct node * next ; } ; typedef struct node Node ;"}
{"text":"function for rearranging a linked list with high and low value .","code":"void rearrange ( Node * head ) {"}
{"text":"Base case .","code":"if ( head == NULL ) return ;"}
{"text":"two pointer variable .","code":"Node * prev = head , * curr = head -> next ; while ( curr ) {"}
{"text":"swap function for swapping data .","code":"if ( prev -> data > curr -> data ) swap ( prev -> data , curr -> data ) ;"}
{"text":"swap function for swapping data .","code":"if ( curr -> next && curr -> next -> data > curr -> data ) swap ( curr -> next -> data , curr -> data ) ; prev = curr -> next ; if ( ! curr -> next ) break ; curr = curr -> next -> next ; } }"}
{"text":"function to insert a node in the linked list at the beginning .","code":"void push ( Node * * head , int k ) { Node * tem = ( Node * ) malloc ( sizeof ( Node ) ) ; tem -> data = k ; tem -> next = * head ; * head = tem ; }"}
{"text":"function to display node of linked list .","code":"void display ( Node * head ) { Node * curr = head ; while ( curr != NULL ) { printf ( \" % d \u2581 \" , curr -> data ) ; curr = curr -> next ; } }"}
{"text":"driver code","code":"int main ( ) { Node * head = NULL ;"}
{"text":"let create a linked list . 9 -> 6 -> 8 -> 3 -> 7","code":"push ( & head , 7 ) ; push ( & head , 3 ) ; push ( & head , 8 ) ; push ( & head , 6 ) ; push ( & head , 9 ) ; rearrange ( head ) ; display ( head ) ; return 0 ; }"}
{"text":"C ++ program to subtract smaller valued list from larger valued list and return result as a list .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"A linked List Node","code":"struct Node { int data ; struct Node * next ; } ; Node * newNode ( int data ) { Node * temp = new Node ; temp -> data = data ; temp -> next = NULL ; return temp ; }"}
{"text":"A utility function to get length of linked list","code":"int getLength ( Node * Node ) { int size = 0 ; while ( Node != NULL ) { Node = Node -> next ; size ++ ; } return size ; }"}
{"text":"A Utility that padds zeros in front of the Node , with the given diff","code":"Node * paddZeros ( Node * sNode , int diff ) { if ( sNode == NULL ) return NULL ; Node * zHead = newNode ( 0 ) ; diff -- ; Node * temp = zHead ; while ( diff -- ) { temp -> next = newNode ( 0 ) ; temp = temp -> next ; } temp -> next = sNode ; return zHead ; }"}
{"text":"Subtract LinkedList Helper is a recursive function , move till the last Node , and subtract the digits and create the Node and return the Node . If d1 < d2 , we borrow the number from previous digit .","code":"Node * subtractLinkedListHelper ( Node * l1 , Node * l2 , bool & borrow ) { if ( l1 == NULL && l2 == NULL && borrow == 0 ) return NULL ; Node * previous = subtractLinkedListHelper ( l1 ? l1 -> next : NULL , l2 ? l2 -> next : NULL , borrow ) ; int d1 = l1 -> data ; int d2 = l2 -> data ; int sub = 0 ;"}
{"text":"if you have given the value value to next digit then reduce the d1 by 1","code":"if ( borrow ) { d1 -- ; borrow = false ; }"}
{"text":"If d1 < d2 , then borrow the number from previous digit . Add 10 to d1 and set borrow = true ;","code":"if ( d1 < d2 ) { borrow = true ; d1 = d1 + 10 ; }"}
{"text":"subtract the digits","code":"sub = d1 - d2 ;"}
{"text":"Create a Node with sub value","code":"Node * current = newNode ( sub ) ;"}
{"text":"Set the Next pointer as Previous","code":"current -> next = previous ; return current ; }"}
{"text":"This API subtracts two linked lists and returns the linked list which shall have the subtracted result .","code":"Node * subtractLinkedList ( Node * l1 , Node * l2 ) {"}
{"text":"Base Case .","code":"if ( l1 == NULL && l2 == NULL ) return NULL ;"}
{"text":"In either of the case , get the lengths of both Linked list .","code":"int len1 = getLength ( l1 ) ; int len2 = getLength ( l2 ) ; Node * lNode = NULL , * sNode = NULL ; Node * temp1 = l1 ; Node * temp2 = l2 ;"}
{"text":"If lengths differ , calculate the smaller Node and padd zeros for smaller Node and ensure both larger Node and smaller Node has equal length .","code":"if ( len1 != len2 ) { lNode = len1 > len2 ? l1 : l2 ; sNode = len1 > len2 ? l2 : l1 ; sNode = paddZeros ( sNode , abs ( len1 - len2 ) ) ; } else {"}
{"text":"If both list lengths are equal , then calculate the larger and smaller list . If 5 - 6 - 7 & 5 - 6 - 8 are linked list , then walk through linked list at last Node as 7 < 8 , larger Node is 5 - 6 - 8 and smaller Node is 5 - 6 - 7.","code":"while ( l1 && l2 ) { if ( l1 -> data != l2 -> data ) { lNode = l1 -> data > l2 -> data ? temp1 : temp2 ; sNode = l1 -> data > l2 -> data ? temp2 : temp1 ; break ; } l1 = l1 -> next ; l2 = l2 -> next ; } }"}
{"text":"After calculating larger and smaller Node , call subtractLinkedListHelper which returns the subtracted linked list .","code":"bool borrow = false ; return subtractLinkedListHelper ( lNode , sNode , borrow ) ; }"}
{"text":"A utility function to print linked list","code":"void printList ( struct Node * Node ) { while ( Node != NULL ) { printf ( \" % d \u2581 \" , Node -> data ) ; Node = Node -> next ; } printf ( \" STRNEWLINE \" ) ; }"}
{"text":"Driver program to test above functions","code":"int main ( ) { Node * head1 = newNode ( 1 ) ; head1 -> next = newNode ( 0 ) ; head1 -> next -> next = newNode ( 0 ) ; Node * head2 = newNode ( 1 ) ; Node * result = subtractLinkedList ( head1 , head2 ) ; printList ( result ) ; return 0 ; }"}
{"text":"C ++ implementation to insert node at the middle of the linked list","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"structure of a node","code":"struct Node { int data ; Node * next ; } ;"}
{"text":"function to create and return a node","code":"Node * getNode ( int data ) { Node * newNode = ( Node * ) malloc ( sizeof ( Node ) ) ; newNode -> data = data ; newNode -> next = NULL ; return newNode ; }"}
{"text":"function to insert node at the middle of the linked list","code":"void insertAtMid ( Node * * head_ref , int x ) {"}
{"text":"if list is empty","code":"if ( * head_ref == NULL ) * head_ref = getNode ( x ) ; else {"}
{"text":"get a new node","code":"Node * newNode = getNode ( x ) ; Node * ptr = * head_ref ; int len = 0 ;"}
{"text":"calculate length of the linked list , i . e , the number of nodes","code":"while ( ptr != NULL ) { len ++ ; ptr = ptr -> next ; }"}
{"text":"' count ' the number of nodes after which the new node is to be inserted","code":"int count = ( ( len % 2 ) == 0 ) ? ( len \/ 2 ) : ( len + 1 ) \/ 2 ; ptr = * head_ref ;"}
{"text":"' ptr ' points to the node after which the new node is to be inserted","code":"while ( count -- > 1 ) ptr = ptr -> next ;"}
{"text":"insert the ' newNode ' and adjust the required links","code":"newNode -> next = ptr -> next ; ptr -> next = newNode ; } }"}
{"text":"function to display the linked list","code":"void display ( Node * head ) { while ( head != NULL ) { cout << head -> data << \" \u2581 \" ; head = head -> next ; } }"}
{"text":"Driver program to test above","code":"int main ( ) {"}
{"text":"Creating the list 1 -> 2 -> 4 -> 5","code":"Node * head = NULL ; head = getNode ( 1 ) ; head -> next = getNode ( 2 ) ; head -> next -> next = getNode ( 4 ) ; head -> next -> next -> next = getNode ( 5 ) ; cout << \" Linked \u2581 list \u2581 before \u2581 insertion : \u2581 \" ; display ( head ) ; int x = 3 ; insertAtMid ( & head , x ) ; cout << \" Linked list after insertion : \" display ( head ) ; return 0 ; }"}
{"text":"C ++ implementation to insert node at the middle of the linked list","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"structure of a node","code":"struct Node { int data ; Node * next ; } ; Node * getNode ( int data ) { Node * newNode = ( Node * ) malloc ( sizeof ( Node ) ) ; newNode -> data = data ; newNode -> next = NULL ; return newNode ; }"}
{"text":"function to insert node at the middle of the linked list","code":"void insertAtMid ( Node * * head_ref , int x ) {"}
{"text":"if list is empty","code":"if ( * head_ref == NULL ) * head_ref = getNode ( x ) ; else {"}
{"text":"get a new node","code":"Node * newNode = getNode ( x ) ;"}
{"text":"assign values to the slow and fast pointers","code":"Node * slow = * head_ref ; Node * fast = ( * head_ref ) -> next ; while ( fast && fast -> next ) {"}
{"text":"move slow pointer to next node","code":"slow = slow -> next ;"}
{"text":"move fast pointer two nodes at a time","code":"fast = fast -> next -> next ; }"}
{"text":"insert the ' newNode ' and adjust the required links","code":"newNode -> next = slow -> next ; slow -> next = newNode ; } }"}
{"text":"function to display the linked list","code":"void display ( Node * head ) { while ( head != NULL ) { cout << head -> data << \" \u2581 \" ; head = head -> next ; } }"}
{"text":"Driver program to test above","code":"int main ( ) {"}
{"text":"Creating the list 1 -> 2 -> 4 -> 5","code":"Node * head = NULL ; head = getNode ( 1 ) ; head -> next = getNode ( 2 ) ; head -> next -> next = getNode ( 4 ) ; head -> next -> next -> next = getNode ( 5 ) ; cout << \" Linked \u2581 list \u2581 before \u2581 insertion : \u2581 \" ; display ( head ) ; int x = 3 ; insertAtMid ( & head , x ) ; cout << \" Linked list after insertion : \" display ( head ) ; return 0 ; }"}
{"text":"C ++ implementation for insertion Sort on a doubly linked list","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Node of a doubly linked list","code":"struct Node { int data ; struct Node * prev , * next ; } ;"}
{"text":"function to create and return a new node of a doubly linked list","code":"struct Node * getNode ( int data ) {"}
{"text":"allocate node","code":"struct Node * newNode = ( struct Node * ) malloc ( sizeof ( struct Node ) ) ;"}
{"text":"put in the data","code":"newNode -> data = data ; newNode -> prev = newNode -> next = NULL ; return newNode ; }"}
{"text":"function to insert a new node in sorted way in a sorted doubly linked list","code":"void sortedInsert ( struct Node * * head_ref , struct Node * newNode ) { struct Node * current ;"}
{"text":"if list is empty","code":"if ( * head_ref == NULL ) * head_ref = newNode ;"}
{"text":"if the node is to be inserted at the beginning of the doubly linked list","code":"else if ( ( * head_ref ) -> data >= newNode -> data ) { newNode -> next = * head_ref ; newNode -> next -> prev = newNode ; * head_ref = newNode ; } else { current = * head_ref ;"}
{"text":"locate the node after which the new node is to be inserted","code":"while ( current -> next != NULL && current -> next -> data < newNode -> data ) current = current -> next ;"}
{"text":"Make the appropriate links","code":"newNode -> next = current -> next ;"}
{"text":"if the new node is not inserted at the end of the list","code":"if ( current -> next != NULL ) newNode -> next -> prev = newNode ; current -> next = newNode ; newNode -> prev = current ; } }"}
{"text":"function to sort a doubly linked list using insertion sort","code":"void insertionSort ( struct Node * * head_ref ) {"}
{"text":"Initialize ' sorted ' - a sorted doubly linked list","code":"struct Node * sorted = NULL ;"}
{"text":"Traverse the given doubly linked list and insert every node to ' sorted '","code":"struct Node * current = * head_ref ; while ( current != NULL ) {"}
{"text":"Store next for next iteration","code":"struct Node * next = current -> next ;"}
{"text":"removing all the links so as to create ' current ' as a new node for insertion","code":"current -> prev = current -> next = NULL ;"}
{"text":"insert current in ' sorted ' doubly linked list","code":"sortedInsert ( & sorted , current ) ;"}
{"text":"Update current","code":"current = next ; }"}
{"text":"Update head_ref to point to sorted doubly linked list","code":"* head_ref = sorted ; }"}
{"text":"function to print the doubly linked list","code":"void printList ( struct Node * head ) { while ( head != NULL ) { cout << head -> data << \" \u2581 \" ; head = head -> next ; } }"}
{"text":"function to insert a node at the beginning of the doubly linked list","code":"void push ( struct Node * * head_ref , int new_data ) {"}
{"text":"allocate node","code":"struct Node * new_node = ( struct Node * ) malloc ( sizeof ( struct Node ) ) ;"}
{"text":"put in the data","code":"new_node -> data = new_data ;"}
{"text":"Make next of new node as head and previous as NULL","code":"new_node -> next = ( * head_ref ) ; new_node -> prev = NULL ;"}
{"text":"change prev of head node to new node","code":"if ( ( * head_ref ) != NULL ) ( * head_ref ) -> prev = new_node ;"}
{"text":"move the head to point to the new node","code":"( * head_ref ) = new_node ; }"}
{"text":"Driver program to test above","code":"int main ( ) {"}
{"text":"start with the empty doubly linked list","code":"struct Node * head = NULL ;"}
{"text":"insert the following data","code":"push ( & head , 9 ) ; push ( & head , 3 ) ; push ( & head , 5 ) ; push ( & head , 10 ) ; push ( & head , 12 ) ; push ( & head , 8 ) ; cout << \" Doubly \u2581 Linked \u2581 List \u2581 Before \u2581 Sortingn \" ; printList ( head ) ; insertionSort ( & head ) ; cout << \" nDoubly \u2581 Linked \u2581 List \u2581 After \u2581 Sortingn \" ; printList ( head ) ; return 0 ; }"}
{"text":"C ++ program to print all possible rotations of the given array","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Global declaration of array","code":"int arr [ 10000 ] ;"}
{"text":"Function to reverse array between indices s and e","code":"void reverse ( int arr [ ] , int s , int e ) { while ( s < e ) { int tem = arr [ s ] ; arr [ s ] = arr [ e ] ; arr [ e ] = tem ; s = s + 1 ; e = e - 1 ; } }"}
{"text":"Function to generate all possible rotations of array","code":"void fun ( int arr [ ] , int k ) { int n = 4 - 1 ; int v = n - k ; if ( v >= 0 ) { reverse ( arr , 0 , v ) ; reverse ( arr , v + 1 , n ) ; reverse ( arr , 0 , n ) ; } }"}
{"text":"Driver code","code":"int main ( ) { arr [ 0 ] = 1 ; arr [ 1 ] = 2 ; arr [ 2 ] = 3 ; arr [ 3 ] = 4 ; for ( int i = 0 ; i < 4 ; i ++ ) { fun ( arr , i ) ; cout << ( \" [ \" ) ; for ( int j = 0 ; j < 4 ; j ++ ) { cout << ( arr [ j ] ) << \" , \u2581 \" ; } cout << ( \" ] \" ) ; } }"}
{"text":"C ++ Program to find Bitwise OR of two equal halves of an array after performing K right circular shifts","code":"#include <bits\/stdc++.h> NEW_LINE const int MAX = 100005 ; using namespace std ;"}
{"text":"Array for storing the segment tree","code":"int seg [ 4 * MAX ] ;"}
{"text":"Function to build the segment tree","code":"void build ( int node , int l , int r , int a [ ] ) { if ( l == r ) seg [ node ] = a [ l ] ; else { int mid = ( l + r ) \/ 2 ; build ( 2 * node , l , mid , a ) ; build ( 2 * node + 1 , mid + 1 , r , a ) ; seg [ node ] = ( seg [ 2 * node ] seg [ 2 * node + 1 ] ) ; } }"}
{"text":"Function to return the OR of elements in the range [ l , r ]","code":"int query ( int node , int l , int r , int start , int end , int a [ ] ) {"}
{"text":"Check for out of bound condition","code":"if ( l > end or r < start ) return 0 ; if ( start <= l and r <= end ) return seg [ node ] ;"}
{"text":"Find middle of the range","code":"int mid = ( l + r ) \/ 2 ;"}
{"text":"Recurse for all the elements in array","code":"return ( ( query ( 2 * node , l , mid , start , end , a ) ) | ( query ( 2 * node + 1 , mid + 1 , r , start , end , a ) ) ) ; }"}
{"text":"Function to find the OR sum","code":"void orsum ( int a [ ] , int n , int q , int k [ ] ) {"}
{"text":"Function to build the segment Tree","code":"build ( 1 , 0 , n - 1 , a ) ;"}
{"text":"Loop to handle q queries","code":"for ( int j = 0 ; j < q ; j ++ ) {"}
{"text":"Effective number of right circular shifts","code":"int i = k [ j ] % ( n \/ 2 ) ;"}
{"text":"OR of second half of the array [ n \/ 2 - i , n - 1 - i ]","code":"int sec = query ( 1 , 0 , n - 1 , n \/ 2 - i , n - i - 1 , a ) ;"}
{"text":"OR of first half of the array [ n - i , n - 1 ] OR [ 0 , n \/ 2 - 1 - i ]","code":"int first = ( query ( 1 , 0 , n - 1 , 0 , n \/ 2 - 1 - i , a ) | query ( 1 , 0 , n - 1 , n - i , n - 1 , a ) ) ; int temp = sec + first ;"}
{"text":"Print final answer to the query","code":"cout << temp << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { int a [ ] = { 7 , 44 , 19 , 86 , 65 , 39 , 75 , 101 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; int q = 2 ; int k [ q ] = { 4 , 2 } ; orsum ( a , n , q , k ) ; return 0 ; }"}
{"text":"C ++ program of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that prints maximum equal elements","code":"void maximumEqual ( int a [ ] , int b [ ] , int n ) {"}
{"text":"Vector to store the index of elements of array b","code":"vector < int > store ( 1e5 ) ;"}
{"text":"Storing the positions of array B","code":"for ( int i = 0 ; i < n ; i ++ ) { store [ b [ i ] ] = i + 1 ; }"}
{"text":"frequency array to keep count of elements with similar difference in distances","code":"vector < int > ans ( 1e5 ) ;"}
{"text":"Iterate through all element in arr1 [ ]","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Calculate number of shift required to make current element equal","code":"int d = abs ( store [ a [ i ] ] - ( i + 1 ) ) ;"}
{"text":"If d is less than 0","code":"if ( store [ a [ i ] ] < i + 1 ) { d = n - d ; }"}
{"text":"Store the frequency of current diff","code":"ans [ d ] ++ ; } int finalans = 0 ;"}
{"text":"Compute the maximum frequency stored","code":"for ( int i = 0 ; i < 1e5 ; i ++ ) finalans = max ( finalans , ans [ i ] ) ;"}
{"text":"Printing the maximum number of equal elements","code":"cout << finalans << \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given two arrays","code":"int A [ ] = { 6 , 7 , 3 , 9 , 5 } ; int B [ ] = { 7 , 3 , 9 , 5 , 6 } ; int size = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ;"}
{"text":"Function Call","code":"maximumEqual ( A , B , size ) ; return 0 ; }"}
{"text":"C ++ implementation of right rotation of an array K number of times","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to rightRotate array","code":"void RightRotate ( int a [ ] , int n , int k ) {"}
{"text":"If rotation is greater than size of array","code":"k = k % n ; for ( int i = 0 ; i < n ; i ++ ) { if ( i < k ) {"}
{"text":"Printing rightmost kth elements","code":"cout << a [ n + i - k ] << \" \u2581 \" ; } else {"}
{"text":"Prints array after ' k ' elements","code":"cout << ( a [ i - k ] ) << \" \u2581 \" ; } } cout << \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"int main ( ) { int Array [ ] = { 1 , 2 , 3 , 4 , 5 } ; int N = sizeof ( Array ) \/ sizeof ( Array [ 0 ] ) ; int K = 2 ; RightRotate ( Array , N , K ) ; }"}
{"text":"C ++ implementation for restoring original sort in rotated sorted array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to restore the Original Sort","code":"void restoreSortedArray ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) {"}
{"text":"In reverse ( ) , the first parameter is iterator to beginning element and second parameter is iterator to last element plus one .","code":"reverse ( arr , arr + i + 1 ) ; reverse ( arr + i + 1 , arr + n ) ; reverse ( arr , arr + n ) ; } } }"}
{"text":"Function to print the Array","code":"void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver function","code":"int main ( ) { int arr [ ] = { 3 , 4 , 5 , 1 , 2 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; restoreSortedArray ( arr , n ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation for restoring original sort in rotated sorted array using binary search","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find start index of array","code":"int findStartIndexOfArray ( int arr [ ] , int low , int high ) { if ( low > high ) { return -1 ; } if ( low == high ) { return low ; } int mid = low + ( high - low ) \/ 2 ; if ( arr [ mid ] > arr [ mid + 1 ] ) return mid + 1 ; if ( arr [ mid - 1 ] > arr [ mid ] ) return mid ; if ( arr [ low ] > arr [ mid ] ) return findStartIndexOfArray ( arr , low , mid - 1 ) ; else return findStartIndexOfArray ( arr , mid + 1 , high ) ; }"}
{"text":"Function to restore the Original Sort","code":"void restoreSortedArray ( int arr [ ] , int n ) {"}
{"text":"array is already sorted","code":"if ( arr [ 0 ] < arr [ n - 1 ] ) return ; int start = findStartIndexOfArray ( arr , 0 , n - 1 ) ;"}
{"text":"In reverse ( ) , the first parameter is iterator to beginning element and second parameter is iterator to last element plus one .","code":"reverse ( arr , arr + start ) ; reverse ( arr + start , arr + n ) ; reverse ( arr , arr + n ) ; }"}
{"text":"Function to print the Array","code":"void printArray ( int arr [ ] , int size ) { for ( int i = 0 ; i < size ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver function","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; restoreSortedArray ( arr , n ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"C program for Left Rotation and Right Rotation of a String","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"In - place rotates s towards left by d","code":"void leftrotate ( string & s , int d ) { reverse ( s . begin ( ) , s . begin ( ) + d ) ; reverse ( s . begin ( ) + d , s . end ( ) ) ; reverse ( s . begin ( ) , s . end ( ) ) ; }"}
{"text":"In - place rotates s towards right by d","code":"void rightrotate ( string & s , int d ) { leftrotate ( s , s . length ( ) - d ) ; }"}
{"text":"Driver code","code":"int main ( ) { string str1 = \" GeeksforGeeks \" ; leftrotate ( str1 , 2 ) ; cout << str1 << endl ; string str2 = \" GeeksforGeeks \" ; rightrotate ( str2 , 2 ) ; cout << str2 << endl ; return 0 ; }"}
{"text":"C ++ program to illustrate inserting a Node in a Cicular Doubly Linked list in begging , end and middle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Structure of a Node","code":"struct Node { int data ; struct Node * next ; struct Node * prev ; } ;"}
{"text":"Function to insert a node at the end","code":"void insertNode ( struct Node * * start , int value ) {"}
{"text":"If the list is empty , create a single node circular and doubly list","code":"if ( * start == NULL ) { struct Node * new_node = new Node ; new_node -> data = value ; new_node -> next = new_node -> prev = new_node ; * start = new_node ; return ; }"}
{"text":"Find last node","code":"Node * last = ( * start ) -> prev ;"}
{"text":"Create Node dynamically","code":"struct Node * new_node = new Node ; new_node -> data = value ;"}
{"text":"Start is going to be next of new_node","code":"new_node -> next = * start ;"}
{"text":"Make new node previous of start","code":"( * start ) -> prev = new_node ;"}
{"text":"Make last preivous of new node","code":"new_node -> prev = last ;"}
{"text":"Make new node next of old last","code":"last -> next = new_node ; }"}
{"text":"Function to display the circular doubly linked list","code":"void displayList ( struct Node * start ) { struct Node * temp = start ; while ( temp -> next != start ) { printf ( \" % d \u2581 \" , temp -> data ) ; temp = temp -> next ; } printf ( \" % d \u2581 \" , temp -> data ) ; }"}
{"text":"Function to search the particular element from the list","code":"int searchList ( struct Node * start , int search ) {"}
{"text":"Declare the temp variable","code":"struct Node * temp = start ;"}
{"text":"Declare other control variable for the searching","code":"int count = 0 , flag = 0 , value ;"}
{"text":"If start is NULL return - 1","code":"if ( temp == NULL ) return -1 ; else {"}
{"text":"Move the temp pointer until , temp -> next doesn 't move  start address (Circular Fashion)","code":"while ( temp -> next != start ) {"}
{"text":"Increment count for location","code":"count ++ ;"}
{"text":"If it is found raise the flag and break the loop","code":"if ( temp -> data == search ) { flag = 1 ; count -- ; break ; }"}
{"text":"Increment temp pointer","code":"temp = temp -> next ; }"}
{"text":"Check whether last element in the list content the value if contain , raise a flag and increment count","code":"if ( temp -> data == search ) { count ++ ; flag = 1 ; }"}
{"text":"If flag is true , then element found , else not","code":"if ( flag == 1 ) cout << \" STRNEWLINE \" << search << \" \u2581 found \u2581 at \u2581 location \u2581 \" << count << endl ; else cout << \" STRNEWLINE \" << search << \" \u2581 not \u2581 found \" << endl ; } }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Start with the empty list","code":"struct Node * start = NULL ;"}
{"text":"Insert 4. So linked list becomes 4 -> NULL","code":"insertNode ( & start , 4 ) ;"}
{"text":"Insert 5. So linked list becomes 4 -> 5","code":"insertNode ( & start , 5 ) ;"}
{"text":"Insert 7. So linked list becomes 4 -> 5 -> 7","code":"insertNode ( & start , 7 ) ;"}
{"text":"Insert 8. So linked list becomes 4 -> 5 -> 7 -> 8","code":"insertNode ( & start , 8 ) ;"}
{"text":"Insert 6. So linked list becomes 4 -> 5 -> 7 -> 8 -> 6","code":"insertNode ( & start , 6 ) ; printf ( \" Created \u2581 circular \u2581 doubly \u2581 linked \u2581 list \u2581 is : \u2581 \" ) ; displayList ( start ) ; searchList ( start , 5 ) ; return 0 ; }"}
{"text":"C ++ implementation to revesre a doubly circular linked list","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"structure of a node of linked list","code":"struct Node { int data ; Node * next , * prev ; } ;"}
{"text":"function to create and return a new node","code":"Node * getNode ( int data ) { Node * newNode = ( Node * ) malloc ( sizeof ( Node ) ) ; newNode -> data = data ; return newNode ; }"}
{"text":"Function to insert at the end","code":"void insertEnd ( Node * * head , Node * new_node ) {"}
{"text":"If the list is empty , create a single node circular and doubly list","code":"if ( * head == NULL ) { new_node -> next = new_node -> prev = new_node ; * head = new_node ; return ; }"}
{"text":"Find last node","code":"Node * last = ( * head ) -> prev ;"}
{"text":"Start is going to be next of new_node","code":"new_node -> next = * head ;"}
{"text":"Make new node previous of start","code":"( * head ) -> prev = new_node ;"}
{"text":"Make last preivous of new node","code":"new_node -> prev = last ;"}
{"text":"Make new node next of old last","code":"last -> next = new_node ; }"}
{"text":"Uitlity function to revesre a doubly circular linked list","code":"Node * reverse ( Node * head ) { if ( ! head ) return NULL ;"}
{"text":"Initialize a new head pointer","code":"Node * new_head = NULL ;"}
{"text":"get pointer to the the last node","code":"Node * last = head -> prev ;"}
{"text":"set ' curr ' to last node","code":"Node * curr = last , * prev ;"}
{"text":"traverse list in backward direction","code":"while ( curr -> prev != last ) { prev = curr -> prev ;"}
{"text":"insert ' curr ' at the end of the list starting with the ' new _ head ' pointer","code":"insertEnd ( & new_head , curr ) ; curr = prev ; } insertEnd ( & new_head , curr ) ;"}
{"text":"head pointer of the reversed list","code":"return new_head ; }"}
{"text":"function to display a doubly circular list in forward and backward direction","code":"void display ( Node * head ) { if ( ! head ) return ; Node * temp = head ; cout << \" Forward \u2581 direction : \u2581 \" ; while ( temp -> next != head ) { cout << temp -> data << \" \u2581 \" ; temp = temp -> next ; } cout << temp -> data ; Node * last = head -> prev ; temp = last ; cout << \" Backward direction : \" while ( temp -> prev != last ) { cout << temp -> data << \" \u2581 \" ; temp = temp -> prev ; } cout << temp -> data ; }"}
{"text":"Driver program to test above","code":"int main ( ) { Node * head = NULL ; insertEnd ( & head , getNode ( 1 ) ) ; insertEnd ( & head , getNode ( 2 ) ) ; insertEnd ( & head , getNode ( 3 ) ) ; insertEnd ( & head , getNode ( 4 ) ) ; insertEnd ( & head , getNode ( 5 ) ) ; cout << \" Current \u2581 list : STRNEWLINE \" ; display ( head ) ; head = reverse ( head ) ; cout << \" Reversed list : \" display ( head ) ; return 0 ; }"}
{"text":"Naive C ++ implementation to find LCA in a tree","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAXN  1001"}
{"text":"stores depth for each node","code":"int depth [ MAXN ] ;"}
{"text":"stores first parent for each node","code":"int parent [ MAXN ] ; vector < int > adj [ MAXN ] ; void addEdge ( int u , int v ) { adj [ u ] . push_back ( v ) ; adj [ v ] . push_back ( u ) ; } void dfs ( int cur , int prev ) {"}
{"text":"marking parent for each node","code":"parent [ cur ] = prev ;"}
{"text":"marking depth for each node","code":"depth [ cur ] = depth [ prev ] + 1 ;"}
{"text":"propogating marking down the tree","code":"for ( int i = 0 ; i < adj [ cur ] . size ( ) ; i ++ ) if ( adj [ cur ] [ i ] != prev ) dfs ( adj [ cur ] [ i ] , cur ) ; } void preprocess ( ) {"}
{"text":"a dummy node","code":"depth [ 0 ] = -1 ;"}
{"text":"precalclating 1 ) depth . 2 ) parent . for each node","code":"dfs ( 1 , 0 ) ; }"}
{"text":"Time Complexity : O ( Height of tree ) recursively jumps one node above till both the nodes become equal","code":"int LCANaive ( int u , int v ) { if ( u == v ) return u ; if ( depth [ u ] > depth [ v ] ) swap ( u , v ) ; v = parent [ v ] ; return LCANaive ( u , v ) ; }"}
{"text":"Driver function to call the above functions","code":"int main ( int argc , char const * argv [ ] ) {"}
{"text":"adding edges to the tree","code":"addEdge ( 1 , 2 ) ; addEdge ( 1 , 3 ) ; addEdge ( 1 , 4 ) ; addEdge ( 2 , 5 ) ; addEdge ( 2 , 6 ) ; addEdge ( 3 , 7 ) ; addEdge ( 4 , 8 ) ; addEdge ( 4 , 9 ) ; addEdge ( 9 , 10 ) ; addEdge ( 9 , 11 ) ; addEdge ( 7 , 12 ) ; addEdge ( 7 , 13 ) ; preprocess ( ) ; cout << \" LCA ( 11,8 ) \u2581 : \u2581 \" << LCANaive ( 11 , 8 ) << endl ; cout << \" LCA ( 3,13 ) \u2581 : \u2581 \" << LCANaive ( 3 , 13 ) << endl ; return 0 ; }"}
{"text":"C ++ program to find LCA using Sqrt decomposition","code":"#include \" iostream \" NEW_LINE #include \" vector \" NEW_LINE #include \" math . h \" NEW_LINE using namespace std ; #define MAXN  1001"}
{"text":"block size = sqrt ( height )","code":"int block_sz ;"}
{"text":"stores depth for each node","code":"int depth [ MAXN ] ;"}
{"text":"stores first parent for each node","code":"int parent [ MAXN ] ;"}
{"text":"stores first ancestor in previous block","code":"int jump_parent [ MAXN ] ; vector < int > adj [ MAXN ] ; void addEdge ( int u , int v ) { adj [ u ] . push_back ( v ) ; adj [ v ] . push_back ( u ) ; } int LCANaive ( int u , int v ) { if ( u == v ) return u ; if ( depth [ u ] > depth [ v ] ) swap ( u , v ) ; v = parent [ v ] ; return LCANaive ( u , v ) ; }"}
{"text":"precalculating the required parameters associated with every node","code":"void dfs ( int cur , int prev ) {"}
{"text":"marking depth of cur node","code":"depth [ cur ] = depth [ prev ] + 1 ;"}
{"text":"marking parent of cur node","code":"parent [ cur ] = prev ;"}
{"text":"making jump_parent of cur node","code":"if ( depth [ cur ] % block_sz == 0 )"}
{"text":"if it is first node of the block then its jump_parent is its cur parent","code":"jump_parent [ cur ] = parent [ cur ] ; else"}
{"text":"if it is not the first node of this block then its jump_parent is jump_parent of its parent","code":"jump_parent [ cur ] = jump_parent [ prev ] ;"}
{"text":"propogating the marking down the subtree","code":"for ( int i = 0 ; i < adj [ cur ] . size ( ) ; ++ i ) if ( adj [ cur ] [ i ] != prev ) dfs ( adj [ cur ] [ i ] , cur ) ; }"}
{"text":"using sqrt decomposition trick","code":"int LCASQRT ( int u , int v ) { while ( jump_parent [ u ] != jump_parent [ v ] ) { if ( depth [ u ] > depth [ v ] )"}
{"text":"maintaining depth [ v ] > depth [ u ]","code":"swap ( u , v ) ;"}
{"text":"climb to its jump parent","code":"v = jump_parent [ v ] ; }"}
{"text":"u and v have same jump_parent","code":"return LCANaive ( u , v ) ; } void preprocess ( int height ) { block_sz = sqrt ( height ) ; depth [ 0 ] = -1 ;"}
{"text":"precalclating 1 ) depth . 2 ) parent . 3 ) jump_parent for each node","code":"dfs ( 1 , 0 ) ; }"}
{"text":"Driver function to call the above functions","code":"int main ( int argc , char const * argv [ ] ) {"}
{"text":"adding edges to the tree","code":"addEdge ( 1 , 2 ) ; addEdge ( 1 , 3 ) ; addEdge ( 1 , 4 ) ; addEdge ( 2 , 5 ) ; addEdge ( 2 , 6 ) ; addEdge ( 3 , 7 ) ; addEdge ( 4 , 8 ) ; addEdge ( 4 , 9 ) ; addEdge ( 9 , 10 ) ; addEdge ( 9 , 11 ) ; addEdge ( 7 , 12 ) ; addEdge ( 7 , 13 ) ;"}
{"text":"here we are directly taking height = 4 according to the given tree but we can pre - calculate height = max depth in one more dfs","code":"int height = 4 ; preprocess ( height ) ; cout << \" LCA ( 11,8 ) \u2581 : \u2581 \" << LCASQRT ( 11 , 8 ) << endl ; cout << \" LCA ( 3,13 ) \u2581 : \u2581 \" << LCASQRT ( 3 , 13 ) << endl ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include \" bits \/ stdc + + . h \" NEW_LINE using namespace std ;"}
{"text":"Driver Code","code":"int main ( ) { int N = 3 ;"}
{"text":"Formula for number of trails for N consecutive heads","code":"cout << pow ( 2 , N + 1 ) - 2 ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <algorithm> NEW_LINE #include <iostream> NEW_LINE #include <set> NEW_LINE #define ll  long long NEW_LINE using namespace std ;"}
{"text":"Function to return the count of numbers which are divisible by both A and B in the range [ 1 , N ] in constant time","code":"ll int countOfNum ( ll int n , ll int a , ll int b ) { ll int cnt_of_a , cnt_of_b , cnt_of_ab , sum ;"}
{"text":"Compute the count of numbers divisible by A in the range [ 1 , N ]","code":"cnt_of_a = n \/ a ;"}
{"text":"Compute the count of numbers divisible by B in the range [ 1 , N ]","code":"cnt_of_b = n \/ b ;"}
{"text":"Adding the counts which are divisible by A and B","code":"sum = cnt_of_b + cnt_of_a ;"}
{"text":"The above value might contain repeated values which are divisible by both A and B . Therefore , the count of numbers which are divisible by both A and B are found","code":"cnt_of_ab = n \/ ( a * b ) ;"}
{"text":"The count computed above is subtracted to compute the final count","code":"sum = sum - cnt_of_ab ; return sum ; }"}
{"text":"Function to return the sum of numbers which are divisible by both A and B in the range [ 1 , N ]","code":"ll int sumOfNum ( ll int n , ll int a , ll int b ) { ll int i ; ll int sum = 0 ;"}
{"text":"Set to store the numbers so that the numbers are not repeated","code":"set < ll int > ans ;"}
{"text":"For loop to find the numbers which are divisible by A and insert them into the set","code":"for ( i = a ; i <= n ; i = i + a ) { ans . insert ( i ) ; }"}
{"text":"For loop to find the numbers which are divisible by A and insert them into the set","code":"for ( i = b ; i <= n ; i = i + b ) { ans . insert ( i ) ; }"}
{"text":"For loop to iterate through the set and find the sum","code":"for ( auto it = ans . begin ( ) ; it != ans . end ( ) ; it ++ ) { sum = sum + * it ; } return sum ; }"}
{"text":"Driver code","code":"int main ( ) { ll int N = 88 ; ll int A = 11 ; ll int B = 8 ; ll int count = countOfNum ( N , A , B ) ; ll int sumofnum = sumOfNum ( N , A , B ) ; cout << sumofnum % count << endl ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the value of the given expression","code":"double get ( double L , double R ) {"}
{"text":"Value of the first term","code":"double x = 1.0 \/ L ;"}
{"text":"Value of the last term","code":"double y = 1.0 \/ ( R + 1.0 ) ; return ( x - y ) ; }"}
{"text":"Driver code","code":"int main ( ) { int L = 6 , R = 12 ;"}
{"text":"Get the result","code":"double ans = get ( L , R ) ; cout << fixed << setprecision ( 2 ) << ans ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 100000 ;"}
{"text":"To store the pre - computed integers","code":"vector < int > v ;"}
{"text":"Function that returns true if the binary representation of x contains consecutive 1 s","code":"int consecutiveOnes ( int x ) {"}
{"text":"To store the previous bit","code":"int p = 0 ; while ( x > 0 ) {"}
{"text":"Check whether the previous bit and the current bit are both 1","code":"if ( x % 2 == 1 and p == 1 ) return true ;"}
{"text":"Update previous bit","code":"p = x % 2 ;"}
{"text":"Go to the next bit","code":"x \/= 2 ; } return false ; }"}
{"text":"Function to pre - compute the valid numbers from 0 to MAX","code":"void preCompute ( ) {"}
{"text":"Store all the numbers which do not have consecutive 1 s","code":"for ( int i = 0 ; i <= MAX ; i ++ ) { if ( ! consecutiveOnes ( i ) ) v . push_back ( i ) ; } }"}
{"text":"Function to return the minimum number greater than n which does not contain consecutive 1 s","code":"int nextValid ( int n ) {"}
{"text":"Search for the next greater element with no consecutive 1 s","code":"int it = upper_bound ( v . begin ( ) , v . end ( ) , n ) - v . begin ( ) ; int val = v [ it ] ; return val ; }"}
{"text":"Function to perform the queries","code":"void performQueries ( int queries [ ] , int q ) { for ( int i = 0 ; i < q ; i ++ ) cout << nextValid ( queries [ i ] ) << \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"int main ( ) { int queries [ ] = { 4 , 6 } ; int q = sizeof ( queries ) \/ sizeof ( int ) ;"}
{"text":"Pre - compute the numbers","code":"preCompute ( ) ;"}
{"text":"Perform the queries","code":"performQueries ( queries , q ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the number of operations required","code":"int changeToOnes ( string str ) {"}
{"text":"ctr will store the number of consecutive ones at the end of the given binary string","code":"int i , l , ctr = 0 ; l = str . length ( ) ;"}
{"text":"Loop to find number of 1 s at the end of the string","code":"for ( i = l - 1 ; i >= 0 ; i -- ) {"}
{"text":"If the current character is 1","code":"if ( str [ i ] == '1' ) ctr ++ ;"}
{"text":"If we encounter the first 0 from the LSB position then we 'll break the loop","code":"else break ; }"}
{"text":"Number of operations required is ( l - ctr )","code":"return l - ctr ; }"}
{"text":"Function to remove leading zeroes from the string","code":"string removeZeroesFromFront ( string str ) { string s ; int i = 0 ;"}
{"text":"Loop until s [ i ] becomes not equal to 1","code":"while ( i < str . length ( ) && str [ i ] == '0' ) i ++ ;"}
{"text":"If we reach the end of the string , it means that string contains only 0 's","code":"if ( i == str . length ( ) ) s = \"0\" ;"}
{"text":"Return the string without leading zeros","code":"else s = str . substr ( i , str . length ( ) - i ) ; return s ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \"10010111\" ;"}
{"text":"Removing the leading zeroes","code":"str = removeZeroesFromFront ( str ) ; cout << changeToOnes ( str ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the minimum deletions required","code":"int MinDeletion ( int a [ ] , int n ) {"}
{"text":"To store the frequency of the array elements","code":"unordered_map < int , int > map ;"}
{"text":"Store frequency of each element","code":"for ( int i = 0 ; i < n ; i ++ ) map [ a [ i ] ] ++ ;"}
{"text":"To store the minimum deletions required","code":"int ans = 0 ; for ( auto i : map ) {"}
{"text":"Value","code":"int x = i . first ;"}
{"text":"It 's frequency","code":"int frequency = i . second ;"}
{"text":"If number less than or equal to it 's frequency","code":"if ( x <= frequency ) {"}
{"text":"Delete extra occurrences","code":"ans += ( frequency - x ) ; }"}
{"text":"Delete every occurrence of x","code":"else ans += frequency ; } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 2 , 3 , 2 , 3 , 4 , 4 , 4 , 4 , 5 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << MinDeletion ( a , n ) ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find maximum number of ABs","code":"int maxCountAB ( string s [ ] , int n ) {"}
{"text":"variable A , B , AB for count strings that end with ' A ' but not end with ' B ' , ' B ' but does not end with ' A ' and ' B ' and ends with ' A ' respectively .","code":"int A = 0 , B = 0 , BA = 0 , ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { string S = s [ i ] ; int L = S . size ( ) ; for ( int j = 0 ; j < L - 1 ; j ++ ) {"}
{"text":"' AB ' is already present in string before concatenate them","code":"if ( S . at ( j ) == ' A ' && S . at ( j + 1 ) == ' B ' ) { ans ++ ; } }"}
{"text":"count of strings that begins with ' B ' and ends with 'A","code":"if ( S . at ( 0 ) == ' B ' && S . at ( L - 1 ) == ' A ' ) BA ++ ;"}
{"text":"count of strings that begins with ' B ' but does not end with ' A '","code":"else if ( S . at ( 0 ) == ' B ' ) B ++ ;"}
{"text":"count of strings that ends with ' A ' but not end with ' B '","code":"else if ( S . at ( L - 1 ) == ' A ' ) A ++ ; }"}
{"text":"updating the value of ans and add extra count of ' AB '","code":"if ( BA == 0 ) ans += min ( B , A ) ; else if ( A + B == 0 ) ans += BA - 1 ; else ans += BA + min ( B , A ) ; return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { string s [ ] = { \" ABCA \" , \" BOOK \" , \" BAND \" } ; int n = sizeof ( s ) \/ sizeof ( s [ 0 ] ) ; cout << maxCountAB ( s , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the minimum number of operations required","code":"int MinOperations ( int n , int x , int * arr ) {"}
{"text":"To store total operations required","code":"int total = 0 ; for ( int i = 0 ; i < n ; ++ i ) {"}
{"text":"First make all elements equal to x which are currenctly greater","code":"if ( arr [ i ] > x ) { int difference = arr [ i ] - x ; total = total + difference ; arr [ i ] = x ; } }"}
{"text":"Left scan the array","code":"for ( int i = 1 ; i < n ; ++ i ) { int LeftNeigbouringSum = arr [ i ] + arr [ i - 1 ] ;"}
{"text":"Update the current element such that neighbouring sum is < x","code":"if ( LeftNeigbouringSum > x ) { int current_diff = LeftNeigbouringSum - x ; arr [ i ] = max ( 0 , arr [ i ] - current_diff ) ; total = total + current_diff ; } } return total ; }"}
{"text":"Driver code","code":"int main ( ) { int X = 1 ; int arr [ ] = { 1 , 6 , 1 , 2 , 0 , 4 } ; int N = sizeof ( arr ) \/ sizeof ( int ) ; cout << MinOperations ( N , X , arr ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <cmath> NEW_LINE #include <bits\/stdc++.h> NEW_LINE #include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to print the required numbers","code":"void findNumbers ( int arr [ ] , int n ) {"}
{"text":"Sum of first n natural numbers","code":"int sumN = ( n * ( n + 1 ) ) \/ 2 ;"}
{"text":"Sum of squares of first n natural numbers","code":"int sumSqN = ( n * ( n + 1 ) * ( 2 * n + 1 ) ) \/ 6 ;"}
{"text":"To store the sum and sum of squares of the array elements","code":"int sum = 0 , sumSq = 0 , i ; for ( i = 0 ; i < n ; i ++ ) { sum += arr [ i ] ; sumSq = sumSq + ( pow ( arr [ i ] , 2 ) ) ; } int B = ( ( ( sumSq - sumSqN ) \/ ( sum - sumN ) ) + sumN - sum ) \/ 2 ; int A = sum - sumN + B ; cout << \" A \u2581 = \u2581 \" ; cout << A << endl ; cout << \" B \u2581 = \u2581 \" ; cout << B << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 2 , 3 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findNumbers ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the whether the string temp starts with str or not","code":"bool is_prefix ( string temp , string str ) {"}
{"text":"Base Case","code":"if ( temp . length ( ) < str . length ( ) ) return 0 ; else {"}
{"text":"Check for the corresponding characters in temp & str","code":"for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] != temp [ i ] ) return 0 ; } return 1 ; } }"}
{"text":"Function to find lexicographic smallest string consisting of the string str as prefix","code":"string lexicographicallyString ( string input [ ] , int n , string str ) {"}
{"text":"Sort the given array string arr [ ]","code":"sort ( input , input + n ) ; for ( int i = 0 ; i < n ; i ++ ) { string temp = input [ i ] ;"}
{"text":"If the i - th string contains given string as a prefix , then print the result","code":"if ( is_prefix ( temp , str ) ) { return temp ; } }"}
{"text":"If no string exists then return \" - 1\"","code":"return \" - 1\" ; }"}
{"text":"Driver Code","code":"int main ( ) { string arr [ ] = { \" apple \" , \" appe \" , \" apl \" , \" aapl \" , \" appax \" } ; string S = \" app \" ; int N = 5 ; cout << lexicographicallyString ( arr , N , S ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to rearrange the array","code":"void Rearrange ( int arr [ ] , int K , int N ) {"}
{"text":"Stores the rearranged array","code":"int ans [ N + 1 ] ;"}
{"text":"Stores whether the arrangement is possible or not","code":"int f = -1 ; for ( int i = 0 ; i < N ; i ++ ) { ans [ i ] = -1 ; }"}
{"text":"Update K with the position of K","code":"K = find ( arr , arr + N , K ) - arr ;"}
{"text":"Stores all elements lesser than and greater than in vector smaller and greater respectively","code":"vector < int > smaller , greater ;"}
{"text":"Traverse the array arr [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If arr [ i ] is less than arr [ K ]","code":"if ( arr [ i ] < arr [ K ] ) smaller . push_back ( arr [ i ] ) ;"}
{"text":"Else","code":"else if ( arr [ i ] > arr [ K ] ) greater . push_back ( arr [ i ] ) ; } int low = 0 , high = N - 1 ;"}
{"text":"Iterate unil low is less than or equal to high","code":"while ( low <= high ) {"}
{"text":"Stores mid point","code":"int mid = ( low + high ) \/ 2 ;"}
{"text":"If mid is equal to K","code":"if ( mid == K ) { ans [ mid ] = arr [ K ] ; f = 1 ; break ; }"}
{"text":"If mid is less than K","code":"else if ( mid < K ) { if ( smaller . size ( ) == 0 ) { break ; } ans [ mid ] = smaller . back ( ) ; smaller . pop_back ( ) ; low = mid + 1 ; }"}
{"text":"If mid is greater than K","code":"else { if ( greater . size ( ) == 0 ) { break ; } ans [ mid ] = greater . back ( ) ; greater . pop_back ( ) ; high = mid - 1 ; } }"}
{"text":"If f is - 1","code":"if ( f == -1 ) { cout << -1 << endl ; return ; }"}
{"text":"Iterate in the range [ 1 , N ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If ans [ i ] is equal to - 1","code":"if ( ans [ i ] == -1 ) { if ( smaller . size ( ) ) { ans [ i ] = smaller . back ( ) ; smaller . pop_back ( ) ; } else if ( greater . size ( ) ) { ans [ i ] = greater . back ( ) ; greater . pop_back ( ) ; } } }"}
{"text":"Print the rearranged array","code":"for ( int i = 0 ; i < N ; i ++ ) cout << ans [ i ] << \" \u2581 \" ; cout << endl ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input","code":"int arr [ ] = { 10 , 7 , 2 , 5 , 3 , 8 } ; int K = 7 ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"Rearrange ( arr , K , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum value of K such that the first person gets at least ( N \/ ( M + 1 ) ) candies","code":"void minimumK ( vector < int > & arr , int M , int N ) {"}
{"text":"Find the minimum required value of candies for the first person","code":"int good = ceil ( ( N * 1.0 ) \/ ( ( M + 1 ) * 1.0 ) ) ;"}
{"text":"Iterate K from [ 1 , n ]","code":"for ( int i = 1 ; i <= N ; i ++ ) { int K = i ;"}
{"text":"Total number of candies","code":"int candies = N ;"}
{"text":"Candies taken by Person 1","code":"int taken = 0 ; while ( candies > 0 ) {"}
{"text":"Candies taken by 1 st person is minimum of K and candies left","code":"taken += min ( K , candies ) ; candies -= min ( K , candies ) ;"}
{"text":"Traverse the array arr [ ]","code":"for ( int j = 0 ; j < M ; j ++ ) {"}
{"text":"Amount consumed by the person j","code":"int consume = ( arr [ j ] * candies ) \/ 100 ;"}
{"text":"Update the number of candies","code":"candies -= consume ; } }"}
{"text":"Good share of candies achieved","code":"if ( taken >= good ) { cout << i ; return ; } } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 13 , M = 1 ; vector < int > arr = { 50 } ; minimumK ( arr , M , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the value of mid gives at least ( N \/ ( M + 1 ) ) candies or not","code":"bool check ( int K , int n , int m , vector < int > arr , int good_share ) { int candies = n , taken = 0 ; while ( candies > 0 ) {"}
{"text":"Candies taken by 1 st person is minimum of K and candies left","code":"taken += min ( K , candies ) ; candies -= min ( K , candies ) ;"}
{"text":"Traverse the given array","code":"for ( int j = 0 ; j < m ; j ++ ) {"}
{"text":"Amount consumed by person j","code":"int consume = ( arr [ j ] * candies ) \/ 100 ;"}
{"text":"Update the count of candies","code":"candies -= consume ; } }"}
{"text":"Check if person 1 gets the good share of candies","code":"return ( taken >= good_share ) ; }"}
{"text":"Function to find minimum value of K such that the first person gets at least ( N \/ ( M + 1 ) ) candies","code":"void minimumK ( vector < int > & arr , int N , int M ) {"}
{"text":"Find the minimum required value of candies for the first person","code":"int good_share = ceil ( ( N * 1.0 ) \/ ( ( M + 1 ) * 1.0 ) ) ; int lo = 1 , hi = N ;"}
{"text":"Iterate until low is less than or equal to mid","code":"while ( lo < hi ) {"}
{"text":"Find the value of mid","code":"int mid = ( lo + hi ) \/ 2 ;"}
{"text":"Check for mid , whether it can be the possible value of K or not","code":"if ( check ( mid , N , M , arr , good_share ) ) {"}
{"text":"Update the value of hi","code":"hi = mid ; }"}
{"text":"Otherwise , update the value of lo","code":"else { lo = mid + 1 ; } }"}
{"text":"Print the resultant minimum value of K","code":"cout << hi ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 13 , M = 1 ; vector < int > arr = { 50 } ; minimumK ( arr , N , M ) ; return 0 ; }"}
{"text":"C ++ code for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate time taken to travel the path","code":"void calcTotalTime ( string path ) {"}
{"text":"Stores total time","code":"int time = 0 ;"}
{"text":"Initial position","code":"int x = 0 , y = 0 ;"}
{"text":"Stores visited segments","code":"set < pair < int , int > > s ; for ( int i = 0 ; i < path . size ( ) ; i ++ ) { int p = x ; int q = y ; if ( path [ i ] == ' N ' ) y ++ ; else if ( path [ i ] == ' S ' ) y -- ; else if ( path [ i ] == ' E ' ) x ++ ; else if ( path [ i ] == ' W ' ) x -- ;"}
{"text":"Check whether segment is present in the set","code":"if ( s . find ( { p + x , q + y } ) == s . end ( ) ) {"}
{"text":"Increment the value of time by 2","code":"time += 2 ;"}
{"text":"Insert segment into the set","code":"s . insert ( { p + x , q + y } ) ; } else time += 1 ; }"}
{"text":"Print the value of time","code":"cout << time << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string path = \" NSE \" ; calcTotalTime ( path ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the cost required to make all array elements equal to 1","code":"int findCost ( int A [ ] , int N ) {"}
{"text":"Stores the total cost","code":"int totalCost = 0 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If current element is 0","code":"if ( A [ i ] == 0 ) {"}
{"text":"Convert 0 to 1","code":"A [ i ] = 1 ;"}
{"text":"Add the cost","code":"totalCost += i ; } }"}
{"text":"Return the total cost","code":"return totalCost ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 0 , 1 , 0 , 1 , 0 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << findCost ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the peak index for the given array","code":"int peakIndex ( int arr [ ] , int N ) {"}
{"text":"Base Case","code":"if ( N < 3 ) return -1 ; int i = 0 ;"}
{"text":"Check for strictly increasing array","code":"while ( i + 1 < N ) {"}
{"text":"If the strictly increasing condition is violated , then break","code":"if ( arr [ i + 1 ] < arr [ i ] arr [ i ] == arr [ i + 1 ] ) break ; i ++ ; } if ( i == 0 i == N - 1 ) return -1 ;"}
{"text":"Stores the value of i , which is a potential peak index","code":"int ans = i ;"}
{"text":"Second traversal , for strictly decreasing array","code":"while ( i < N - 1 ) {"}
{"text":"When the strictly decreasing condition is violated , then break","code":"if ( arr [ i ] < arr [ i + 1 ] arr [ i ] == arr [ i + 1 ] ) break ; i ++ ; }"}
{"text":"If i = N - 1 , it means that ans is the peak index","code":"if ( i == N - 1 ) return ans ;"}
{"text":"Otherwise , peak index doesn 't exist","code":"return -1 ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 0 , 1 , 0 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << peakIndex ( arr , N ) << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the array has 2 elements whose sum is equal to the given value","code":"void hasArrayTwoPairs ( int nums [ ] , int n , int target ) {"}
{"text":"Sort the array in increasing order","code":"sort ( nums , nums + n ) ;"}
{"text":"Traverse the array , nums [ ]","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Store the required number to be found","code":"int x = target - nums [ i ] ;"}
{"text":"Perform binary search","code":"int low = 0 , high = n - 1 ; while ( low <= high ) {"}
{"text":"Store the mid value","code":"int mid = low + ( ( high - low ) \/ 2 ) ;"}
{"text":"If nums [ mid ] is greater than x , then update high to mid - 1","code":"if ( nums [ mid ] > x ) { high = mid - 1 ; }"}
{"text":"If nums [ mid ] is less than x , then update low to mid + 1","code":"else if ( nums [ mid ] < x ) { low = mid + 1 ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"If mid is equal i , check mid - 1 and mid + 1","code":"if ( mid == i ) { if ( ( mid - 1 >= 0 ) && nums [ mid - 1 ] == x ) { cout << nums [ i ] << \" , \u2581 \" ; cout << nums [ mid - 1 ] ; return ; } if ( ( mid + 1 < n ) && nums [ mid + 1 ] == x ) { cout << nums [ i ] << \" , \u2581 \" ; cout << nums [ mid + 1 ] ; return ; } break ; }"}
{"text":"Otherwise , print the pair and return","code":"else { cout << nums [ i ] << \" , \u2581 \" ; cout << nums [ mid ] ; return ; } } } }"}
{"text":"If no such pair is found , then print - 1","code":"cout << -1 ; }"}
{"text":"Driver Code","code":"int main ( ) { int A [ ] = { 0 , -1 , 2 , -3 , 1 } ; int X = -2 ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ;"}
{"text":"Function Call","code":"hasArrayTwoPairs ( A , N , X ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the divisor of N closest to the target","code":"int findClosest ( int N , int target ) { int closest = -1 ; int diff = INT_MAX ;"}
{"text":"Iterate till square root of N","code":"for ( int i = 1 ; i <= sqrt ( N ) ; i ++ ) { if ( N % i == 0 ) {"}
{"text":"Check if divisors are equal","code":"if ( N \/ i == i ) {"}
{"text":"Check if i is the closest","code":"if ( abs ( target - i ) < diff ) { diff = abs ( target - i ) ; closest = i ; } } else {"}
{"text":"Check if i is the closest","code":"if ( abs ( target - i ) < diff ) { diff = abs ( target - i ) ; closest = i ; }"}
{"text":"Check if n \/ i is the closest","code":"if ( abs ( target - N \/ i ) < diff ) { diff = abs ( target - N \/ i ) ; closest = N \/ i ; } } } }"}
{"text":"Print the closest value","code":"cout << closest ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given N & X","code":"int N = 16 , X = 5 ;"}
{"text":"Function Call","code":"findClosest ( N , X ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the minimum power of A and B greater than N","code":"int power ( long long int A , long long int N ) {"}
{"text":"Stores the power of A which is greater than N","code":"int count = 0 ; if ( A == 1 ) return 0 ; while ( N ) {"}
{"text":"Increment count by 1","code":"count ++ ;"}
{"text":"Divide N by A","code":"N \/= A ; } return count ; }"}
{"text":"Function to find a pair ( a , b ) such that A ^ a + B ^ b = N","code":"void Pairs ( long long int N , long long int A , long long int B ) { int powerA , powerB ;"}
{"text":"Calculate the minimum power of A greater than N","code":"powerA = power ( A , N ) ;"}
{"text":"Calculate the minimum power of B greater than N","code":"powerB = power ( B , N ) ;"}
{"text":"Make copy of A and B","code":"long long int intialB = B , intialA = A ;"}
{"text":"Traverse for every pair ( i , j )","code":"A = 1 ; for ( int i = 0 ; i <= powerA ; i ++ ) { B = 1 ; for ( int j = 0 ; j <= powerB ; j ++ ) {"}
{"text":"Check if B ^ j + A ^ i = N To overcome the overflow problem use B = N - A rather than B + A = N","code":"if ( B == N - A ) { cout << i << \" \u2581 \" << j << endl ; return ; }"}
{"text":"Increment power B by 1","code":"B *= intialB ; }"}
{"text":"Increment power A by 1","code":"A *= intialA ; }"}
{"text":"Finally print - 1 if no pair is found","code":"cout << -1 << endl ; return ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given A , B and N","code":"long long int N = 106 , A = 3 , B = 5 ;"}
{"text":"Function Call","code":"Pairs ( N , A , B ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the non - multiples till k","code":"int findNonMultiples ( int arr [ ] , int n , int k ) {"}
{"text":"Stores all unique multiples","code":"set < int > multiples ;"}
{"text":"Iterate the array","code":"for ( int i = 0 ; i < n ; ++ i ) {"}
{"text":"For finding duplicates only once","code":"if ( multiples . find ( arr [ i ] ) == multiples . end ( ) ) {"}
{"text":"Inserting all multiples into the set","code":"for ( int j = 1 ; j <= k \/ arr [ i ] ; j ++ ) { multiples . insert ( arr [ i ] * j ) ; } } }"}
{"text":"Returning only the count of numbers that are not divisible by any of the array elements","code":"return k - multiples . size ( ) ; }"}
{"text":"Function to count the total values in the range [ L , R ]","code":"int countValues ( int arr [ ] , int N , int L , int R ) {"}
{"text":"Count all values in the range using exclusion principle","code":"return findNonMultiples ( arr , N , R ) - findNonMultiples ( arr , N , L - 1 ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 2 , 3 , 4 , 5 , 6 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int L = 1 , R = 20 ;"}
{"text":"Function Call","code":"cout << countValues ( arr , N , L , R ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of coins to be collected per hour to empty N piles in H hours","code":"int minCollectingSpeed ( vector < int > & piles , int H ) {"}
{"text":"Stores the minimum coins to be removed per hour","code":"int ans = -1 ; int low = 1 , high ;"}
{"text":"Find the maximum array element","code":"high = * max_element ( piles . begin ( ) , piles . end ( ) ) ;"}
{"text":"Perform Binary Search","code":"while ( low <= high ) {"}
{"text":"Store the mid value of the range in K","code":"int K = low + ( high - low ) \/ 2 ; int time = 0 ;"}
{"text":"Find the total time taken to empty N piles by removing K coins per hour","code":"for ( int ai : piles ) { time += ( ai + K - 1 ) \/ K ; }"}
{"text":"If total time does not exceed H","code":"if ( time <= H ) { ans = K ; high = K - 1 ; }"}
{"text":"Otherwise","code":"else { low = K + 1 ; } }"}
{"text":"Print the required result","code":"cout << ans ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > arr = { 3 , 6 , 7 , 11 } ; int H = 8 ;"}
{"text":"Function Call","code":"minCollectingSpeed ( arr , H ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count distinct pairs in array whose sum equal to K","code":"int cntDisPairs ( int arr [ ] , int N , int K ) {"}
{"text":"Stores count of distinct pairs whose sum equal to K","code":"int cntPairs = 0 ;"}
{"text":"Sort the array","code":"sort ( arr , arr + N ) ;"}
{"text":"Stores index of the left pointer","code":"int i = 0 ;"}
{"text":"Stores index of the right pointer","code":"int j = N - 1 ;"}
{"text":"Calculate count of distinct pairs whose sum equal to K","code":"while ( i < j ) {"}
{"text":"If sum of current pair is equal to K","code":"if ( arr [ i ] + arr [ j ] == K ) {"}
{"text":"Remove consecutive duplicate array elements","code":"while ( i < j && arr [ i ] == arr [ i + 1 ] ) {"}
{"text":"Update i","code":"i ++ ; }"}
{"text":"Remove consecutive duplicate array elements","code":"while ( i < j && arr [ j ] == arr [ j - 1 ] ) {"}
{"text":"Update j","code":"j -- ; }"}
{"text":"Update cntPairs","code":"cntPairs += 1 ;"}
{"text":"Update i","code":"i ++ ;"}
{"text":"Update j","code":"j -- ; }"}
{"text":"if sum of current pair less than K","code":"else if ( arr [ i ] + arr [ j ] < K ) {"}
{"text":"Update i","code":"i ++ ; } else {"}
{"text":"Update j","code":"j -- ; } } return cntPairs ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 6 , 5 , 7 , 7 , 8 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int K = 13 ; cout << cntDisPairs ( arr , N , K ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count distinct pairs in array whose sum equal to K","code":"int cntDisPairs ( int arr [ ] , int N , int K ) {"}
{"text":"Stores count of distinct pairs whose sum equal to K","code":"int cntPairs = 0 ;"}
{"text":"Store frequency of each distinct element of the array","code":"unordered_map < int , int > cntFre ; for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Update frequency of arr [ i ]","code":"cntFre [ arr [ i ] ] ++ ; }"}
{"text":"Traverse the map","code":"for ( auto it : cntFre ) {"}
{"text":"Stores key value of the map","code":"int i = it . first ;"}
{"text":"If i is the half of K","code":"if ( 2 * i == K ) {"}
{"text":"If frequency of i greater than 1","code":"if ( cntFre [ i ] > 1 ) cntPairs += 2 ; } else { if ( cntFre [ K - i ] ) {"}
{"text":"Update cntPairs","code":"cntPairs += 1 ; } } }"}
{"text":"Update cntPairs","code":"cntPairs = cntPairs \/ 2 ; return cntPairs ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 6 , 5 , 7 , 7 , 8 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int K = 13 ; cout << cntDisPairs ( arr , N , K ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the length of the longest subsequence such that no two adjacent elements are equal","code":"void longestSubsequence ( int N , int Q , int arr [ ] , int Queries [ ] [ 2 ] ) { for ( int i = 0 ; i < Q ; i ++ ) {"}
{"text":"Replace element at index x with y","code":"int x = Queries [ i ] [ 0 ] ; int y = Queries [ i ] [ 1 ] ;"}
{"text":"Since x is 1 - indexed , decrement x by 1","code":"arr [ x - 1 ] = y ;"}
{"text":"Keep track of number of elements in subsequence","code":"int count = 1 ; for ( int j = 1 ; j < N ; j ++ ) {"}
{"text":"If previous element is not same as current element","code":"if ( arr [ j ] != arr [ j - 1 ] ) { count += 1 ; } }"}
{"text":"Print the desired count","code":"cout << count << ' \u2581 ' ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 1 , 2 , 5 , 2 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int Q = 2 ; int Queries [ Q ] [ 2 ] = { { 1 , 3 } , { 4 , 2 } } ;"}
{"text":"Function Call","code":"longestSubsequence ( N , Q , arr , Queries ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void longestSubsequence ( int N , int Q , int arr [ ] , int Queries [ ] [ 2 ] ) { int count = 1 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( int i = 1 ; i < N ; i ++ ) {"}
{"text":"If previous element is not same as current element","code":"if ( arr [ i ] != arr [ i - 1 ] ) { count += 1 ; } }"}
{"text":"Traverse the queries","code":"for ( int i = 0 ; i < Q ; i ++ ) {"}
{"text":"Replace element at index x with y","code":"int x = Queries [ i ] [ 0 ] ; int y = Queries [ i ] [ 1 ] ;"}
{"text":"Recalculate for index x","code":"if ( x > 1 ) {"}
{"text":"Subtract contribution of element at index x","code":"if ( arr [ x - 1 ] != arr [ x - 2 ] ) { count -= 1 ; }"}
{"text":"Add contribution of y","code":"if ( arr [ x - 2 ] != y ) { count += 1 ; } }"}
{"text":"Recalculate for index x + 1","code":"if ( x < N ) {"}
{"text":"Subtract contribution of element at index x + 1","code":"if ( arr [ x ] != arr [ x - 1 ] ) { count -= 1 ; }"}
{"text":"Adds contribution of y","code":"if ( y != arr [ x ] ) { count += 1 ; } } cout << count << ' \u2581 ' ;"}
{"text":"Replace the element","code":"arr [ x - 1 ] = y ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 1 , 2 , 5 , 2 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int Q = 2 ; int Queries [ Q ] [ 2 ] = { { 1 , 3 } , { 4 , 2 } } ;"}
{"text":"Function Call","code":"longestSubsequence ( N , Q , arr , Queries ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find sum of differences of indices of occurrences of each unique array element","code":"void sum ( int arr [ ] , int n ) {"}
{"text":"Stores indices of each array element","code":"map < int , vector < int > > mp ;"}
{"text":"Store the indices","code":"for ( int i = 0 ; i < n ; i ++ ) { mp [ arr [ i ] ] . push_back ( i ) ; }"}
{"text":"Stores the sums","code":"int ans [ n ] ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Find sum for each element","code":"int sum = 0 ;"}
{"text":"Iterate over the Map","code":"for ( auto it : mp [ arr [ i ] ] ) {"}
{"text":"Calculate sum of occurrences of arr [ i ]","code":"sum += abs ( it - i ) ; }"}
{"text":"Store sum for current element","code":"ans [ i ] = sum ; }"}
{"text":"Print answer for each element","code":"for ( int i = 0 ; i < n ; i ++ ) { cout << ans [ i ] << \" \u2581 \" ; } return ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 1 , 3 , 1 , 1 , 2 } ;"}
{"text":"Given size","code":"int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function call","code":"sum ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to convert vowels into uppercase","code":"string conVowUpp ( string & str ) {"}
{"text":"Stores the length of str","code":"int N = str . length ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( str [ i ] == ' a ' str [ i ] == ' e ' str [ i ] == ' i ' str [ i ] == ' o ' str [ i ] == ' u ' ) { str [ i ] = str [ i ] - ' a ' + ' A ' ; } } return str ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \" eutopia \" ; cout << conVowUpp ( str ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Stores the frequency of each type of chocolate","code":"map < int , int > mp ; int N , P ;"}
{"text":"Function to check if chocolates can be eaten for ' mid ' no . of days","code":"bool helper ( int mid ) { int cnt = 0 ; for ( auto i : mp ) { int temp = i . second ; while ( temp >= mid ) { temp -= mid ; cnt ++ ; } }"}
{"text":"If cnt exceeds N , return true","code":"return cnt >= N ; }"}
{"text":"Function to find the maximum number of days for which chocolates can be eaten","code":"int findMaximumDays ( int arr [ ] ) {"}
{"text":"Store the frequency of each type of chocolate","code":"for ( int i = 0 ; i < P ; i ++ ) { mp [ arr [ i ] ] ++ ; }"}
{"text":"Initialize start and end with 0 and P respectively","code":"int start = 0 , end = P , ans = 0 ; while ( start <= end ) {"}
{"text":"Calculate mid","code":"int mid = start + ( ( end - start ) \/ 2 ) ;"}
{"text":"Check if chocolates can be distributed for mid days","code":"if ( mid != 0 and helper ( mid ) ) { ans = mid ;"}
{"text":"Check if chocolates can be distributed for more than mid consecutive days","code":"start = mid + 1 ; } else if ( mid == 0 ) { start = mid + 1 ; } else { end = mid - 1 ; } } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { N = 3 , P = 10 ; int arr [ ] = { 1 , 2 , 2 , 1 , 1 , 3 , 3 , 3 , 2 , 4 } ;"}
{"text":"Function call","code":"cout << findMaximumDays ( arr ) ; return 0 ; }"}
{"text":"C ++ program of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that counts the subarrays having sum modulo k equal to the length of subarray","code":"long long int countSubarrays ( int a [ ] , int n , int k ) {"}
{"text":"Stores the count of subarrays","code":"int ans = 0 ;"}
{"text":"Stores prefix sum of the array","code":"vector < int > pref ; pref . push_back ( 0 ) ;"}
{"text":"Calculate prefix sum array","code":"for ( int i = 0 ; i < n ; i ++ ) pref . push_back ( ( a [ i ] + pref [ i ] ) % k ) ;"}
{"text":"Generate all the subarrays","code":"for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) {"}
{"text":"Check if this subarray is a valid subarray or not","code":"if ( ( pref [ j ] - pref [ i - 1 ] + k ) % k == j - i + 1 ) { ans ++ ; } } }"}
{"text":"Total count of subarrays","code":"cout << ans << ' \u2581 ' ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given arr [ ]","code":"int arr [ ] = { 2 , 3 , 5 , 3 , 1 , 5 } ;"}
{"text":"Size of the array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Given K","code":"int K = 4 ;"}
{"text":"Function Call","code":"countSubarrays ( arr , N , K ) ; return 0 ; }"}
{"text":"C ++ program of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that counts the subarrays s . t . sum of elements in the subarray modulo k is equal to size of subarray","code":"long long int countSubarrays ( int a [ ] , int n , int k ) {"}
{"text":"Stores the count of ( pref [ i ] - i ) % k","code":"unordered_map < int , int > cnt ;"}
{"text":"Stores the count of subarray","code":"long long int ans = 0 ;"}
{"text":"Stores prefix sum of the array","code":"vector < int > pref ; pref . push_back ( 0 ) ;"}
{"text":"Find prefix sum array","code":"for ( int i = 0 ; i < n ; i ++ ) pref . push_back ( ( a [ i ] + pref [ i ] ) % k ) ;"}
{"text":"Base Condition","code":"cnt [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) {"}
{"text":"Remove the index at present after K indices from the current index","code":"int remIdx = i - k ; if ( remIdx >= 0 ) { cnt [ ( pref [ remIdx ] - remIdx % k + k ) % k ] -- ; }"}
{"text":"Update the answer for subarrays ending at the i - th index","code":"ans += cnt [ ( pref [ i ] - i % k + k ) % k ] ;"}
{"text":"Add the calculated value of current index to count","code":"cnt [ ( pref [ i ] - i % k + k ) % k ] ++ ; }"}
{"text":"Print the count of subarrays","code":"cout << ans << ' \u2581 ' ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given arr [ ]","code":"int arr [ ] = { 2 , 3 , 5 , 3 , 1 , 5 } ;"}
{"text":"Size of the array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Given K","code":"int K = 4 ;"}
{"text":"Function Call","code":"countSubarrays ( arr , N , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check if the substring of length K has equal 0 and 1","code":"int check ( string & s , int k ) { int n = s . size ( ) ;"}
{"text":"Traverse the string","code":"for ( int i = 0 ; i < k ; i ++ ) { for ( int j = i ; j < n ; j += k ) {"}
{"text":"Check if every K - th character is the same or not","code":"if ( s [ i ] != s [ j ] ) return false ; } } int c = 0 ;"}
{"text":"Traverse substring of length K","code":"for ( int i = 0 ; i < k ; i ++ ) {"}
{"text":"If current character is 0","code":"if ( s [ i ] == '0' )"}
{"text":"Increment count","code":"c ++ ;"}
{"text":"Otherwise","code":"else"}
{"text":"Decrement count","code":"c -- ; }"}
{"text":"Check for equal 0 s and 1 s","code":"if ( c == 0 ) return true ; else return false ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \"101010\" ; int k = 2 ; if ( check ( s , k ) ) cout << \" Yes \" << endl ; else cout << \" No \" << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the freq of any character is divisible by N","code":"bool isSame ( string str , int n ) {"}
{"text":"Stores the frequency of characters","code":"map < int , int > mp ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { mp [ str [ i ] - ' a ' ] ++ ; } for ( auto it : mp ) {"}
{"text":"If frequency of a character is not divisible by n","code":"if ( ( it . second ) >= n ) { return true ; } }"}
{"text":"If no character has frequency at least N","code":"return false ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \" ccabcba \" ; int n = 4 ;"}
{"text":"Function Call","code":"if ( isSame ( str , n ) ) { cout << \" Yes \" ; } else { cout << \" No \" ; } }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define eps  1e-6"}
{"text":"Given function","code":"double func ( double a , double b , double c , double x ) { return a * x * x + b * x + c ; }"}
{"text":"Function to find the root of the given non - decreasing Function","code":"double findRoot ( double a , double b , double c , double low , double high ) { double x ;"}
{"text":"To get the minimum possible answer for the root","code":"while ( fabs ( high - low ) > eps ) {"}
{"text":"Find mid","code":"x = ( low + high ) \/ 2 ;"}
{"text":"Search in [ low , x ]","code":"if ( func ( a , b , c , low ) * func ( a , b , c , x ) <= 0 ) { high = x ; }"}
{"text":"Search in [ x , high ]","code":"else { low = x ; } }"}
{"text":"Return the required answer","code":"return x ; }"}
{"text":"Function to find the roots of the given equation within range [ a , b ]","code":"void solve ( double a , double b , double c , double A , double B ) {"}
{"text":"If root doesn 't exists","code":"if ( func ( a , b , c , A ) * func ( a , b , c , B ) > 0 ) { cout << \" No \u2581 solution \" ; }"}
{"text":"Else find the root upto 4 decimal places","code":"else { cout << fixed << setprecision ( 4 ) << findRoot ( a , b , c , A , B ) ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given range","code":"double a = 2 , b = -3 , c = -2 , A = 0 , B = 3 ;"}
{"text":"Function Call","code":"solve ( a , b , c , A , B ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE #define ll  long long NEW_LINE using namespace std ;"}
{"text":"Function check if mid can be median index of the difference array","code":"bool possible ( ll mid , vector < ll > & a ) {"}
{"text":"Size of the array","code":"ll n = a . size ( ) ;"}
{"text":"Total possible no of pair possible","code":"ll total = ( n * ( n - 1 ) ) \/ 2 ;"}
{"text":"The index of the element in the difference of all pairs from the array","code":"ll need = ( total + 1 ) \/ 2 ; ll count = 0 ; ll start = 0 , end = 1 ;"}
{"text":"Count the number of pairs having difference <= mid","code":"while ( end < n ) { if ( a [ end ] - a [ start ] <= mid ) { end ++ ; } else { count += ( end - start - 1 ) ; start ++ ; } }"}
{"text":"If the difference between end and first element is less then or equal to mid","code":"if ( end == n && start < end && a [ end - 1 ] - a [ start ] <= mid ) { ll t = end - start - 1 ; count += ( t * ( t + 1 ) \/ 2 ) ; }"}
{"text":"Checking for the no of element less than or equal to mid is greater than median or not","code":"if ( count >= need ) return true ; else return false ; }"}
{"text":"Function to calculate the median of differences of all pairs from the array","code":"ll findMedian ( vector < ll > & a ) {"}
{"text":"Size of the array","code":"ll n = a . size ( ) ;"}
{"text":"Initialising the low and high","code":"ll low = 0 , high = a [ n - 1 ] - a [ 0 ] ;"}
{"text":"Binary search","code":"while ( low <= high ) {"}
{"text":"Calculate mid","code":"ll mid = ( low + high ) \/ 2 ;"}
{"text":"If mid can be the median of the array","code":"if ( possible ( mid , a ) ) high = mid - 1 ; else low = mid + 1 ; }"}
{"text":"Returning the median of the differences of pairs from the array","code":"return high + 1 ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < ll > a = { 1 , 7 , 5 , 2 } ; sort ( a . begin ( ) , a . end ( ) ) ; cout << findMedian ( a ) << endl ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find strings from A [ ] having all strings in B [ ] as subsequence","code":"void UniversalSubset ( vector < string > A , vector < string > B ) {"}
{"text":"Calculate respective sizes","code":"int n1 = A . size ( ) ; int n2 = B . size ( ) ;"}
{"text":"Stores the answer","code":"vector < string > res ;"}
{"text":"Stores the frequency of each character in strings of A [ ]","code":"int A_fre [ n1 ] [ 26 ] ; for ( int i = 0 ; i < n1 ; i ++ ) { for ( int j = 0 ; j < 26 ; j ++ ) A_fre [ i ] [ j ] = 0 ; }"}
{"text":"Compute the frequencies of characters of all strings","code":"for ( int i = 0 ; i < n1 ; i ++ ) { for ( int j = 0 ; j < A [ i ] . size ( ) ; j ++ ) { A_fre [ i ] [ A [ i ] [ j ] - ' a ' ] ++ ; } }"}
{"text":"Stores the frequency of each character in strings of B [ ] each character of a string in B [ ]","code":"int B_fre [ 26 ] = { 0 } ; for ( int i = 0 ; i < n2 ; i ++ ) { int arr [ 26 ] = { 0 } ; for ( int j = 0 ; j < B [ i ] . size ( ) ; j ++ ) { arr [ B [ i ] [ j ] - ' a ' ] ++ ; B_fre [ B [ i ] [ j ] - ' a ' ] = max ( B_fre [ B [ i ] [ j ] - ' a ' ] , arr [ B [ i ] [ j ] - ' a ' ] ) ; } } for ( int i = 0 ; i < n1 ; i ++ ) { int flag = 0 ; for ( int j = 0 ; j < 26 ; j ++ ) {"}
{"text":"If the frequency of a character in B [ ] exceeds that in A [ ]","code":"if ( A_fre [ i ] [ j ] < B_fre [ j ] ) {"}
{"text":"A string exists in B [ ] which is not a proper subset of A [ i ]","code":"flag = 1 ; break ; } }"}
{"text":"If all strings in B [ ] are proper subset of A [ ]","code":"if ( flag == 0 )"}
{"text":"Push the string in resultant vector","code":"res . push_back ( A [ i ] ) ; }"}
{"text":"If any string is found","code":"if ( res . size ( ) ) {"}
{"text":"Print those strings","code":"for ( int i = 0 ; i < res . size ( ) ; i ++ ) { for ( int j = 0 ; j < res [ i ] . size ( ) ; j ++ ) cout << res [ i ] [ j ] ; } cout << \" \u2581 \" ; }"}
{"text":"Otherwise","code":"else cout < < \" - 1\" ; }"}
{"text":"Driver code","code":"int main ( ) { vector < string > A = { \" geeksforgeeks \" , \" topcoder \" , \" leetcode \" } ; vector < string > B = { \" geek \" , \" ee \" } ; UniversalSubset ( A , B ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum distance pair where one is the multiple of the other","code":"void findPair ( int a [ ] , int n ) {"}
{"text":"Initialize the variables","code":"int min_dist = INT_MAX ; int index_a = -1 , index_b = -1 ;"}
{"text":"Iterate for all the elements","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Loop to make pairs","code":"for ( int j = i + 1 ; j < n ; j ++ ) {"}
{"text":"Check for minimum distance","code":"if ( j - i < min_dist ) {"}
{"text":"Check if one is a multiple of other","code":"if ( a [ i ] % a [ j ] == 0 a [ j ] % a [ i ] == 0 ) {"}
{"text":"Update the distance","code":"min_dist = j - i ;"}
{"text":"Store indexes","code":"index_a = i ; index_b = j ; } } } }"}
{"text":"If no such pair exists","code":"if ( index_a == -1 ) { cout << ( \" - 1\" ) ; }"}
{"text":"Print the answer","code":"else { cout << \" ( \" << a [ index_a ] << \" , \u2581 \" << a [ index_b ] << \" ) \" ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array arr [ ]","code":"int a [ ] = { 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( a ) \/ sizeof ( int ) ;"}
{"text":"Function Call","code":"findPair ( a , n ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print all numbers in the range [ L , R ] having digits in strictly increasing order","code":"void printNum ( int L , int R ) {"}
{"text":"Iterate over the range","code":"for ( int i = L ; i <= R ; i ++ ) { int temp = i ; int c = 10 ; int flag = 0 ;"}
{"text":"Iterate over the digits","code":"while ( temp > 0 ) {"}
{"text":"Check if the current digit is >= the previous digit","code":"if ( temp % 10 >= c ) { flag = 1 ; break ; } c = temp % 10 ; temp \/= 10 ; }"}
{"text":"If the digits are in ascending order","code":"if ( flag == 0 ) cout << i << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given range L and R","code":"int L = 10 , R = 15 ;"}
{"text":"Function Call","code":"printNum ( L , R ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the missing element","code":"int findMissing ( int arr [ ] , int left , int right , int diff ) {"}
{"text":"Fix left and right boundary for binary search","code":"if ( right <= left ) return INT_MAX ;"}
{"text":"Find index of middle element","code":"int mid = left + ( right - left ) \/ 2 ;"}
{"text":"Check if the element just after the middle element is missing","code":"if ( arr [ mid + 1 ] - arr [ mid ] != diff ) return ( arr [ mid ] + diff ) ;"}
{"text":"Check if the element just before mid is missing","code":"if ( mid > 0 && arr [ mid ] - arr [ mid - 1 ] != diff ) return ( arr [ mid - 1 ] + diff ) ;"}
{"text":"Check if the elements till mid follow the AP , then recur for right half","code":"if ( arr [ mid ] == arr [ 0 ] + mid * diff ) return findMissing ( arr , mid + 1 , right , diff ) ;"}
{"text":"Else recur for left half","code":"return findMissing ( arr , left , mid - 1 , diff ) ; }"}
{"text":"Function to find the missing element in AP series","code":"int missingElement ( int arr [ ] , int n ) {"}
{"text":"Sort the array arr [ ]","code":"sort ( arr , arr + n ) ;"}
{"text":"Calculate Common Difference","code":"int diff = ( arr [ n - 1 ] - arr [ 0 ] ) \/ n ;"}
{"text":"Binary search for the missing","code":"return findMissing ( arr , 0 , n - 1 , diff ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array arr [ ]","code":"int arr [ ] = { 2 , 8 , 6 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"cout << missingElement ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate x raised to the power y in O ( logn )","code":"int power ( int x , unsigned int y ) { int temp ; if ( y == 0 ) return 1 ; temp = power ( x , y \/ 2 ) ; if ( y % 2 == 0 ) return temp * temp ; else return x * temp * temp ; }"}
{"text":"Function to find the Kth root of the number N using BS","code":"int nthRootSearch ( int low , int high , int N , int K ) {"}
{"text":"If the range is still valid","code":"if ( low <= high ) {"}
{"text":"Find the mid - value of range","code":"int mid = ( low + high ) \/ 2 ;"}
{"text":"Base Case","code":"if ( ( power ( mid , K ) <= N ) && ( power ( mid + 1 , K ) > N ) ) { return mid ; }"}
{"text":"Condition to check if the left search space is useless","code":"else if ( power ( mid , K ) < N ) { return nthRootSearch ( mid + 1 , high , N , K ) ; } else { return nthRootSearch ( low , mid - 1 , N , K ) ; } } return low ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given N and K","code":"int N = 16 , K = 4 ;"}
{"text":"Function Call","code":"cout << nthRootSearch ( 0 , N , N , K ) << endl ; return 0 ; }"}
{"text":"C ++ program to print count of subsets S such that min ( S ) + max ( S ) < K","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that return the count of subset such that min ( S ) + max ( S ) < K","code":"int get_subset_count ( int arr [ ] , int K , int N ) {"}
{"text":"Sorting the array","code":"sort ( arr , arr + N ) ; int left , right ; left = 0 ; right = N - 1 ;"}
{"text":"ans stores total number of subsets","code":"int ans = 0 ; while ( left <= right ) { if ( arr [ left ] + arr [ right ] < K ) {"}
{"text":"add all possible subsets between i and j","code":"ans += 1 << ( right - left ) ; left ++ ; } else {"}
{"text":"Decrease the sum","code":"right -- ; } } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 5 , 7 } ; int K = 8 ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << get_subset_count ( arr , K , N ) ; return 0 ; }"}
{"text":"C ++ Program to find the minimum of maximum differerence between adjacent elements after at most K insertions","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int minMaxDiff ( int arr [ ] , int n , int k ) { int max_adj_dif = INT_MIN ;"}
{"text":"Calculate the maximum adjacent difference","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) max_adj_dif = max ( max_adj_dif , abs ( arr [ i ] - arr [ i + 1 ] ) ) ;"}
{"text":"If the maximum adjacent difference is already zero","code":"if ( max_adj_dif == 0 ) return 0 ;"}
{"text":"best and worst specifies range of the maximum adjacent difference","code":"int best = 1 ; int worst = max_adj_dif ; int mid , required ; while ( best < worst ) { mid = ( best + worst ) \/ 2 ;"}
{"text":"To store the no of insertions required for respective values of mid","code":"required = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { required += ( abs ( arr [ i ] - arr [ i + 1 ] ) - 1 ) \/ mid ; }"}
{"text":"If the number of insertions required exceeds K","code":"if ( required > k ) best = mid + 1 ;"}
{"text":"Otherwise","code":"else worst = mid ; } return worst ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 3 , 12 , 25 , 50 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 7 ; cout << minMaxDiff ( arr , n , k ) ; return 0 ; }"}
{"text":"C ++ implementation to Check if the minimum element in the array is greater than or equal to half of every other elements","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to Check if the minimum element in the array is greater than or equal to half of every other element","code":"void checkMin ( int arr [ ] , int len ) {"}
{"text":"Initialise the variables to store smallest and second smallest","code":"int smallest = INT_MAX , secondSmallest = INT_MAX ; for ( int i = 0 ; i < len ; i ++ ) {"}
{"text":"Check if current element is smaller than smallest , the current smallest will become secondSmallest and current element will be the new smallest","code":"if ( arr [ i ] < smallest ) { secondSmallest = smallest ; smallest = arr [ i ] ; }"}
{"text":"Check if current element is smaller than secondSmallest simply update the latter","code":"else if ( arr [ i ] < secondSmallest ) { secondSmallest = arr [ i ] ; } } if ( 2 * smallest <= secondSmallest ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 3 , 4 , 5 } ; int len = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; checkMin ( arr , len ) ; }"}
{"text":"C ++ program to find minimum and maximum fibonacci number in given array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to create hash table to check Fibonacci numbers","code":"void createHash ( set < int > & hash , int maxElement ) {"}
{"text":"Insert initial two numbers in the hash table","code":"int prev = 0 , curr = 1 ; hash . insert ( prev ) ; hash . insert ( curr ) ; while ( curr <= maxElement ) {"}
{"text":"Sum of previous two numbers","code":"int temp = curr + prev ; hash . insert ( temp ) ;"}
{"text":"Update the variable each time","code":"prev = curr ; curr = temp ; } }"}
{"text":"Function to find minimum and maximum fibonacci number in given array","code":"void fibonacci ( int arr [ ] , int n ) {"}
{"text":"Find maximum value in the array","code":"int max_val = * max_element ( arr , arr + n ) ;"}
{"text":"Creating a set containing all Fibonacci numbers up to maximum value in the array","code":"set < int > hash ; createHash ( hash , max_val ) ;"}
{"text":"For storing the Minimum and Maximum Fibonacci number","code":"int minimum = INT_MAX ; int maximum = INT_MIN ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if current element is a fibonacci number","code":"if ( hash . find ( arr [ i ] ) != hash . end ( ) ) {"}
{"text":"Update the maximum and minimum accordingly","code":"minimum = min ( minimum , arr [ i ] ) ; maximum = max ( maximum , arr [ i ] ) ; } } cout << minimum << \" , \u2581 \" << maximum << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 , 7 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; fibonacci ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if there is a substring of length len with <= k unique characters","code":"bool isValidLen ( string s , int len , int k ) {"}
{"text":"Size of the string","code":"int n = s . size ( ) ;"}
{"text":"Map to store the characters and their frequency","code":"unordered_map < char , int > mp ; int right = 0 ;"}
{"text":"Update the map for the first substring","code":"while ( right < len ) { mp [ s [ right ] ] ++ ; right ++ ; } if ( mp . size ( ) <= k ) return true ;"}
{"text":"Check for the rest of the substrings","code":"while ( right < n ) {"}
{"text":"Add the new character","code":"mp [ s [ right ] ] ++ ;"}
{"text":"Remove the first character of the previous window","code":"mp [ s [ right - len ] ] -- ;"}
{"text":"Update the map","code":"if ( mp [ s [ right - len ] ] == 0 ) mp . erase ( s [ right - len ] ) ; if ( mp . size ( ) <= k ) return true ; right ++ ; } return mp . size ( ) <= k ; }"}
{"text":"Function to return the length of the longest substring which has K unique characters","code":"int maxLenSubStr ( string s , int k ) {"}
{"text":"Check if the complete string contains K unique characters","code":"set < char > uni ; for ( auto x : s ) uni . insert ( x ) ; if ( uni . size ( ) < k ) return -1 ;"}
{"text":"Size of the string","code":"int n = s . size ( ) ;"}
{"text":"Apply binary search","code":"int lo = -1 , hi = n + 1 ; while ( hi - lo > 1 ) { int mid = lo + hi >> 1 ; if ( isValidLen ( s , mid , k ) ) lo = mid ; else hi = mid ; } return lo ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \" aabacbebebe \" ; int k = 3 ; cout << maxLenSubStr ( s , k ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if it is possible to make a square with side equal to l","code":"bool isSquarePossible ( int arr [ ] , int n , int l ) {"}
{"text":"To store the count of elements greater than or equal to l","code":"int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Increment the count","code":"if ( arr [ i ] >= l ) cnt ++ ;"}
{"text":"If the count becomes greater than or equal to l","code":"if ( cnt >= l ) return true ; } return false ; }"}
{"text":"Function to return the maximum area of the square that can be obtained","code":"int maxArea ( int arr [ ] , int n ) { int l = 0 , r = n ; int len = 0 ; while ( l <= r ) { int m = l + ( ( r - l ) \/ 2 ) ;"}
{"text":"If square is possible with side length m","code":"if ( isSquarePossible ( arr , n , m ) ) { len = m ; l = m + 1 ; }"}
{"text":"Try to find a square with smaller side length","code":"else r = m - 1 ; }"}
{"text":"Return the area","code":"return ( len * len ) ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 3 , 4 , 5 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; cout << maxArea ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to insert the names and check whether they appear for the first time","code":"void insertNames ( string arr [ ] , int n ) {"}
{"text":"To store the names of the employees","code":"unordered_set < string > set ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If current name is appearing for the first time","code":"if ( set . find ( arr [ i ] ) == set . end ( ) ) { cout << \" No STRNEWLINE \" ; set . insert ( arr [ i ] ) ; } else { cout << \" Yes STRNEWLINE \" ; } } }"}
{"text":"Driver code","code":"int main ( ) { string arr [ ] = { \" geeks \" , \" for \" , \" geeks \" } ; int n = sizeof ( arr ) \/ sizeof ( string ) ; insertNames ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of elements in arr [ ] which are less than the given key","code":"int countLessThan ( int arr [ ] , int n , int key ) { int l = 0 , r = n - 1 ; int index = -1 ;"}
{"text":"Modified binary search","code":"while ( l <= r ) { int m = ( l + r ) \/ 2 ; if ( arr [ m ] < key ) { l = m + 1 ; index = m ; } else { r = m - 1 ; } } return ( index + 1 ) ; }"}
{"text":"Function to return the count of elements in arr [ ] which are greater than the given key","code":"int countGreaterThan ( int arr [ ] , int n , int key ) { int l = 0 , r = n - 1 ; int index = -1 ;"}
{"text":"Modified binary search","code":"while ( l <= r ) { int m = ( l + r ) \/ 2 ; if ( arr [ m ] <= key ) { l = m + 1 ; } else { r = m - 1 ; index = m ; } } if ( index == -1 ) return 0 ; return ( n - index ) ; }"}
{"text":"Function to return the count of the required triplets","code":"int countTriplets ( int n , int * a , int * b , int * c ) {"}
{"text":"Sort all three arrays","code":"sort ( a , a + n ) ; sort ( b , b + n ) ; sort ( c , c + n ) ; int count = 0 ;"}
{"text":"Iterate for all the elements of array B","code":"for ( int i = 0 ; i < n ; ++ i ) { int current = b [ i ] ; int a_index = -1 , c_index = -1 ;"}
{"text":"Count of elements in A [ ] which are less than the chosen element from B [ ]","code":"int low = countLessThan ( a , n , current ) ;"}
{"text":"Count of elements in C [ ] which are greater than the chosen element from B [ ]","code":"int high = countGreaterThan ( c , n , current ) ;"}
{"text":"Update the count","code":"count += ( low * high ) ; } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 1 , 5 } ; int b [ ] = { 2 , 4 } ; int c [ ] = { 3 , 6 } ; int size = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << countTriplets ( size , a , b , c ) ; return 0 ; }"}
{"text":"CPP code to calculate the minimum cost to make the given parentheses balanced","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int costToBalance ( string s ) { if ( s . length ( ) == 0 ) cout << 0 << endl ;"}
{"text":"To store absolute count of balanced and unbalanced parenthesis","code":"int ans = 0 ;"}
{"text":"o ( open bracket ) stores count of ' ( ' and c ( close bracket ) stores count of ' ) '","code":"int o = 0 , c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == ' ( ' ) o ++ ; if ( s [ i ] == ' ) ' ) c ++ ; } if ( o != c ) return -1 ; int a [ s . size ( ) ] ; if ( s [ 0 ] == ' ( ' ) a [ 0 ] = 1 ; else a [ 0 ] = -1 ; if ( a [ 0 ] < 0 ) ans += abs ( a [ 0 ] ) ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == ' ( ' ) a [ i ] = a [ i - 1 ] + 1 ; else a [ i ] = a [ i - 1 ] - 1 ; if ( a [ i ] < 0 ) ans += abs ( a [ i ] ) ; } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { string s ; s = \" ) ) ) ( ( ( \" ; cout << costToBalance ( s ) << endl ; s = \" ) ) ( ( \" ; cout << costToBalance ( s ) << endl ; return 0 ; }"}
{"text":"CPP program to find middle of three distinct numbers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the middle of three number","code":"int middleOfThree ( int a , int b , int c ) {"}
{"text":"x is positive if a is greater than b . x is negative if b is greater than a .","code":"int x = a - b ;"}
{"text":"Similar to x","code":"int y = b - c ;"}
{"text":"Similar to x and y .","code":"int z = a - c ;"}
{"text":"Checking if b is middle ( x and y both are positive )","code":"if ( x * y > 0 ) return b ;"}
{"text":"Checking if c is middle ( x and z both are positive )","code":"else if ( x * z > 0 ) return c ; else return a ; }"}
{"text":"Driver Code","code":"int main ( ) { int a = 20 , b = 30 , c = 40 ; cout << middleOfThree ( a , b , c ) ; return 0 ; }"}
{"text":"CPP program to find missing 4 elements in an array of size N where elements are in range from 1 to N + 4.","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Finds missing 4 numbers in O ( N ) time and O ( 1 ) auxiliary space .","code":"void missing4 ( int arr [ ] , int n ) {"}
{"text":"To keep track of 4 possible numbers greater than length of input array In Java , helper is automatically initialized as 0.","code":"int helper [ 4 ] ;"}
{"text":"Traverse the input array and mark visited elements either by marking them as negative in arr [ ] or in helper [ ] .","code":"for ( int i = 0 ; i < n ; i ++ ) { int temp = abs ( arr [ i ] ) ;"}
{"text":"If element is smaller than or equal to length , mark its presence in arr [ ]","code":"if ( temp <= n ) arr [ temp - 1 ] *= ( -1 ) ;"}
{"text":"Mark presence in helper [ ]","code":"else if ( temp > n ) { if ( temp % n != 0 ) helper [ temp % n - 1 ] = -1 ; else helper [ ( temp % n ) + n - 1 ] = -1 ; } }"}
{"text":"Print all those elements whose presence is not marked .","code":"for ( int i = 0 ; i < n ; i ++ ) if ( arr [ i ] > 0 ) cout << ( i + 1 ) << \" \u2581 \" ; for ( int i = 0 ; i < 4 ; i ++ ) if ( helper [ i ] >= 0 ) cout << ( n + i + 1 ) << \" \u2581 \" ; return ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 7 , 3 , 12 , 5 , 10 , 8 , 4 , 9 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; missing4 ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that finds the middle the lexicographical smallest sequence","code":"void lexiMiddleSmallest ( int K , int N ) {"}
{"text":"If K is even","code":"if ( K % 2 == 0 ) {"}
{"text":"First element is K \/ 2","code":"cout << K \/ 2 << \" \u2581 \" ;"}
{"text":"Remaining elements of the sequence are all integer K","code":"for ( int i = 0 ; i < N - 1 ; ++ i ) { cout << K << \" \u2581 \" ; } cout << \" STRNEWLINE \" ; exit ( 0 ) ; }"}
{"text":"Stores the sequence when K is odd","code":"vector < int > a ( N , ( K + 1 ) \/ 2 ) ;"}
{"text":"Iterate over the range [ 0 , N \/ 2 ]","code":"for ( int i = 0 ; i < N \/ 2 ; ++ i ) {"}
{"text":"Check if the sequence ends with in 1 or not","code":"if ( a . back ( ) == 1 ) {"}
{"text":"Remove the sequence ending in 1","code":"a . pop_back ( ) ; }"}
{"text":"If it doesn 't end in 1","code":"else {"}
{"text":"Decrement by 1","code":"-- a . back ( ) ;"}
{"text":"Insert K to the sequence till its size is N","code":"while ( ( int ) a . size ( ) < N ) { a . push_back ( K ) ; } } }"}
{"text":"Print the sequence stored in the vector","code":"for ( auto i : a ) { cout << i << \" \u2581 \" ; } cout << \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int K = 2 , N = 4 ; lexiMiddleSmallest ( K , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the last remaining array element after repeatedly removing the smallest from pairs having absolute difference 2 or 0","code":"void findLastElement ( int arr [ ] , int N ) {"}
{"text":"Sort the given array in ascending order","code":"sort ( arr , arr + N ) ; int i = 0 ;"}
{"text":"Traverse the array","code":"for ( i = 1 ; i < N ; i ++ ) {"}
{"text":"If difference between adjacent elements is not equal to 0 or 2","code":"if ( arr [ i ] - arr [ i - 1 ] != 0 && arr [ i ] - arr [ i - 1 ] != 2 ) { cout << \" - 1\" << endl ; return ; } }"}
{"text":"If operations can be performed","code":"cout << arr [ N - 1 ] << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 6 , 8 , 0 , 8 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findLastElement ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count maximum subsets into which the given array can be split such that it satisfies the given condition","code":"void maxDivisions ( int arr [ ] , int N , int X ) {"}
{"text":"Sort the array in decreasing order","code":"sort ( arr , arr + N , greater < int > ( ) ) ;"}
{"text":"Stores count of subsets possible","code":"int maxSub = 0 ;"}
{"text":"Stores count of elements in current subset","code":"int size = 0 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Update size","code":"size ++ ;"}
{"text":"If product of the smallest element present in the current subset and size of current subset is >= K","code":"if ( arr [ i ] * size >= X ) {"}
{"text":"Update maxSub","code":"maxSub ++ ;"}
{"text":"Update size","code":"size = 0 ; } } cout << maxSub << endl ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 1 , 3 , 3 , 7 } ;"}
{"text":"Size of the array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Given value of X","code":"int X = 3 ; maxDivisions ( arr , N , X ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE #include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find maximum possible sum of second minimums in each quadruple","code":"void maxPossibleSum ( int arr [ ] , int N ) {"}
{"text":"Sort the array","code":"sort ( arr , arr + N ) ; int sum = 0 ; int j = N - 3 ; while ( j >= 0 ) {"}
{"text":"Add the second minimum","code":"sum += arr [ j ] ; j -= 3 ; }"}
{"text":"Print maximum possible sum","code":"cout << sum ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 7 , 4 , 5 , 2 , 3 , 1 , 5 , 9 } ;"}
{"text":"Size of the array","code":"int N = 8 ; maxPossibleSum ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the insertion sort","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to sort an array using insertion sort","code":"void insertionSort ( int arr [ ] , int n ) { int i , key , j ; for ( i = 1 ; i < n ; i ++ ) { key = arr [ i ] ; j = i - 1 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] , that are greater than key to one position ahead of their current position","code":"while ( j >= 0 && arr [ j ] > key ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = key ; } }"}
{"text":"Function to print an array of size N","code":"void printArray ( int arr [ ] , int n ) { int i ;"}
{"text":"Print the array","code":"for ( i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \u2581 \" ; } cout << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"insertionSort ( arr , N ) ; printArray ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the count required pairs","code":"int getPairs ( int arr [ ] , int N , int K ) {"}
{"text":"Stores count of pairs","code":"int count = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) { for ( int j = i + 1 ; j < N ; j ++ ) {"}
{"text":"Check if the condition is satisfied or not","code":"if ( arr [ i ] > K * arr [ i + 1 ] ) count ++ ; } } cout << count ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 6 , 2 , 1 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int K = 2 ;"}
{"text":"Function Call","code":"getPairs ( arr , N , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to merge two sorted arrays","code":"int merge ( int arr [ ] , int temp [ ] , int l , int m , int r , int K ) {"}
{"text":"i : index to left subarray","code":"int i = l ;"}
{"text":"j : index to right subarray","code":"int j = m + 1 ;"}
{"text":"Stores count of pairs that satisfy the given condition","code":"int cnt = 0 ; for ( int l = 0 ; i <= m ; i ++ ) { bool found = false ;"}
{"text":"Traverse to check for the valid conditions","code":"while ( j <= r ) {"}
{"text":"If condition satisfies","code":"if ( arr [ i ] >= K * arr [ j ] ) { found = true ; } else break ; j ++ ; }"}
{"text":"All elements in the right side of the left subarray also satisfies","code":"if ( found ) { cnt += j - ( m + 1 ) ; j -- ; } }"}
{"text":"Sort the two given arrays and store in the resultant array","code":"int k = l ; i = l ; j = m + 1 ; while ( i <= m && j <= r ) { if ( arr [ i ] <= arr [ j ] ) temp [ k ++ ] = arr [ i ++ ] ; else temp [ k ++ ] = arr [ j ++ ] ; }"}
{"text":"Elements which are left in the left subarray","code":"while ( i <= m ) temp [ k ++ ] = arr [ i ++ ] ;"}
{"text":"Elements which are left in the right subarray","code":"while ( j <= r ) temp [ k ++ ] = arr [ j ++ ] ; for ( int i = l ; i <= r ; i ++ ) arr [ i ] = temp [ i ] ;"}
{"text":"Return the count obtained","code":"return cnt ; }"}
{"text":"Function to partition array into two halves","code":"int mergeSortUtil ( int arr [ ] , int temp [ ] , int l , int r , int K ) { int cnt = 0 ; if ( l < r ) {"}
{"text":"Same as ( l + r ) \/ 2 , but avoids overflow for large l and h","code":"int m = ( l + r ) \/ 2 ;"}
{"text":"Sort first and second halves","code":"cnt += mergeSortUtil ( arr , temp , l , m , K ) ; cnt += mergeSortUtil ( arr , temp , m + 1 , r , K ) ;"}
{"text":"Call the merging function","code":"cnt += merge ( arr , temp , l , m , r , K ) ; } return cnt ; }"}
{"text":"Function to print the count of required pairs using Merge Sort","code":"int mergeSort ( int arr [ ] , int N , int K ) { int temp [ N ] ; cout << mergeSortUtil ( arr , temp , 0 , N - 1 , K ) ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 5 , 6 , 2 , 5 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int K = 2 ;"}
{"text":"Function Call","code":"mergeSort ( arr , N , K ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count minimum consecutive removals of elements of the same type","code":"void minRemovals ( int A [ ] , int N ) {"}
{"text":"Sort the array","code":"sort ( A , A + N ) ;"}
{"text":"Stores the maximum element present in the array","code":"int mx = A [ N - 1 ] ;"}
{"text":"Stores sum of the array","code":"int sum = 1 ;"}
{"text":"Calculate sum of the array","code":"for ( int i = 0 ; i < N ; i ++ ) { sum += A [ i ] ; } if ( sum - mx >= mx ) { cout << 0 << \" STRNEWLINE \" ; } else { cout << 2 * mx - sum << \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int A [ ] = { 3 , 3 , 2 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ;"}
{"text":"Function call","code":"minRemovals ( A , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to rearrange the array a [ ] such that none of the array elements is same as its index","code":"void rearrangeArray ( int a [ ] , int n ) {"}
{"text":"Sort the array","code":"sort ( a , a + n ) ;"}
{"text":"Traverse the indices [ 0 , N - 2 ] of the given array","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Check if the current element is equal to its index","code":"if ( a [ i ] == i + 1 ) {"}
{"text":"If found to be true , swap current element with the next element","code":"swap ( a [ i ] , a [ i + 1 ] ) ; } }"}
{"text":"Check if the last element is same as its index","code":"if ( a [ n - 1 ] == n ) {"}
{"text":"If found to be true , swap current element with the previous element","code":"swap ( a [ n - 1 ] , a [ n - 2 ] ) ; }"}
{"text":"Print the modified array","code":"for ( int i = 0 ; i < n ; i ++ ) { cout << a [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 5 , 3 , 2 , 4 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"rearrangeArray ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that counts the minimum moves required to covert arr [ ] to brr [ ]","code":"int minOperations ( int arr1 [ ] , int arr2 [ ] , int i , int j , int n ) {"}
{"text":"Base Case","code":"int f = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr1 [ i ] != arr2 [ i ] ) f = 1 ; break ; } if ( f == 0 ) return 0 ; if ( i >= n j >= n ) return 0 ;"}
{"text":"If arr [ i ] < arr [ j ]","code":"if ( arr1 [ i ] < arr2 [ j ] )"}
{"text":"Include the current element","code":"return 1 + minOperations ( arr1 , arr2 , i + 1 , j + 1 , n ) ;"}
{"text":"Otherwise , excluding the current element","code":"return max ( minOperations ( arr1 , arr2 , i , j + 1 , n ) , minOperations ( arr1 , arr2 , i + 1 , j , n ) ) ; }"}
{"text":"Function that counts the minimum moves required to sort the array","code":"void minOperationsUtil ( int arr [ ] , int n ) { int brr [ n ] ; for ( int i = 0 ; i < n ; i ++ ) brr [ i ] = arr [ i ] ; sort ( brr , brr + n ) ; int f = 0 ;"}
{"text":"If both the arrays are equal","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != brr [ i ] )"}
{"text":"No moves required","code":"f = 1 ; break ; }"}
{"text":"Otherwise","code":"if ( f == 1 )"}
{"text":"Print minimum operations required","code":"cout << ( minOperations ( arr , brr , 0 , 0 , n ) ) ; else cout < < \"0\" ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 4 , 7 , 2 , 3 , 9 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; minOperationsUtil ( arr , n ) ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if str1 can be transformed to t by sorting substrings","code":"void canTransform ( string & s , string & t ) { int n = s . length ( ) ;"}
{"text":"Occur [ i ] stores the indices of char ( ' a ' + i ) in string s","code":"vector < int > occur [ 26 ] ; for ( int x = 0 ; x < n ; x ++ ) { char ch = s [ x ] - ' a ' ; occur [ ch ] . push_back ( x ) ; }"}
{"text":"idx [ i ] stores the next available index of char ( ' a ' + i ) in occur [ i ]","code":"vector < int > idx ( 26 , 0 ) ; bool poss = true ; for ( int x = 0 ; x < n ; x ++ ) { char ch = t [ x ] - ' a ' ;"}
{"text":"If this char is not available anymore","code":"if ( idx [ ch ] >= occur [ ch ] . size ( ) ) {"}
{"text":"Conversion not possible","code":"poss = false ; break ; } for ( int small = 0 ; small < ch ; small ++ ) {"}
{"text":"If one of the smaller characters is available and occurs before","code":"if ( idx [ small ] < occur [ small ] . size ( ) && occur [ small ] [ idx [ small ] ] < occur [ ch ] [ idx [ ch ] ] ) {"}
{"text":"Conversion not possible","code":"poss = false ; break ; } } idx [ ch ] ++ ; }"}
{"text":"Print the answer","code":"if ( poss ) { cout << \" Yes \" << endl ; } else { cout << \" No \" << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { string s , t ; s = \" hdecb \" ; t = \" cdheb \" ; canTransform ( s , t ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to count inversion count of the string","code":"int inversionCount ( string & s ) {"}
{"text":"for storing frequency","code":"int freq [ 26 ] = { 0 } ; int inv = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int temp = 0 ;"}
{"text":"Add all the characters which are less than the ith character before i .","code":"for ( int j = 0 ; j < int ( s [ i ] - ' a ' ) ; j ++ )"}
{"text":"adding the count to inversion count","code":"temp += freq [ j ] ; inv += ( i - temp ) ;"}
{"text":"updating the character in the frequency array","code":"freq [ s [ i ] - ' a ' ] ++ ; } return inv ; }"}
{"text":"function to check whether any of the string have a repeated character","code":"bool haveRepeated ( string & S1 , string & S2 ) { int freq [ 26 ] = { 0 } ; for ( char i : S1 ) { if ( freq [ i - ' a ' ] > 0 ) return true ; freq [ i - ' a ' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) freq [ i ] = 0 ; for ( char i : S2 ) { if ( freq [ i - ' a ' ] > 0 ) return true ; freq [ i - ' a ' ] ++ ; } return false ; }"}
{"text":"function to check whether the string S1 and S2 can be made equal by reversing sub strings of same size in both strings","code":"void checkToMakeEqual ( string S1 , string S2 ) {"}
{"text":"frequency array to check whether both string have same character or not","code":"int freq [ 26 ] = { 0 } ; for ( int i = 0 ; i < S1 . length ( ) ; i ++ ) {"}
{"text":"adding the frequency ;","code":"freq [ S1 [ i ] - ' a ' ] ++ ; } bool flag = 0 ; for ( int i = 0 ; i < S2 . length ( ) ; i ++ ) { if ( freq [ S2 [ i ] - ' a ' ] == 0 ) {"}
{"text":"if the character is not in S1","code":"flag = true ; break ; }"}
{"text":"decrementing the frequency","code":"freq [ S2 [ i ] - ' a ' ] -- ; } if ( flag == true ) {"}
{"text":"If both string doesnot have same characters or not","code":"cout << \" No STRNEWLINE \" ; return ; }"}
{"text":"finding inversion count of both strings","code":"int invCount1 = inversionCount ( S1 ) ; int invCount2 = inversionCount ( S2 ) ; if ( invCount1 == invCount2 || ( invCount1 & 1 ) == ( invCount2 & 1 ) || haveRepeated ( S1 , S2 ) ) {"}
{"text":"If inversion count is same , or have same parity or if any of the string have a repeated character then the answer is Yes else No","code":"cout << \" Yes STRNEWLINE \" ; } else cout << \" No STRNEWLINE \" ; }"}
{"text":"driver code","code":"int main ( ) { string S1 = \" abbca \" , S2 = \" acabb \" ; checkToMakeEqual ( S1 , S2 ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to Sort a Bitonic array in constant space","code":"void sortArr ( int a [ ] , int n ) { int i , k ;"}
{"text":"Initialize the value of k","code":"k = ( int ) log2 ( n ) ; k = pow ( 2 , k ) ;"}
{"text":"In each iteration compare elements k distance apart and swap if they are not in order","code":"while ( k > 0 ) { for ( i = 0 ; i + k < n ; i ++ ) if ( a [ i ] > a [ i + k ] ) swap ( a [ i ] , a [ i + k ] ) ;"}
{"text":"k is reduced to half after every iteration","code":"k = k \/ 2 ; }"}
{"text":"Print the array elements","code":"for ( i = 0 ; i < n ; i ++ ) { cout << a [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array arr [ ]","code":"int arr [ ] = { 5 , 20 , 30 , 40 , 36 , 33 , 25 , 15 , 10 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"sortArr ( arr , n ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that prints the maximum sum possible","code":"void maximumSum ( int arr [ ] , int n , int k ) {"}
{"text":"Find elements in each group","code":"int elt = n \/ k ; int sum = 0 ;"}
{"text":"Sort all elements in non - descending order","code":"sort ( arr , arr + n ) ; int count = 0 ; int i = n - 1 ;"}
{"text":"Add K largest elements","code":"while ( count < k ) { sum += arr [ i ] ; i -- ; count ++ ; } count = 0 ; i = 0 ;"}
{"text":"For sum of minimum elements from each subset","code":"while ( count < k ) { sum += arr [ i ] ; i += elt - 1 ; count ++ ; }"}
{"text":"Printing the maximum sum","code":"cout << sum << \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int Arr [ ] = { 1 , 13 , 7 , 17 , 6 , 5 } ; int K = 2 ; int size = sizeof ( Arr ) \/ sizeof ( Arr [ 0 ] ) ; maximumSum ( Arr , size , K ) ; return 0 ; }"}
{"text":"C ++ Program to find the minimum possible sum of the smallest elements from K subsequences","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum sum","code":"int findMinSum ( int arr [ ] , int K , int L , int size ) { if ( K * L > size ) return -1 ; int minsum = 0 ;"}
{"text":"Sort the array","code":"sort ( arr , arr + size ) ;"}
{"text":"Calculate sum of smallest K elements","code":"for ( int i = 0 ; i < K ; i ++ ) minsum += arr [ i ] ;"}
{"text":"Return the sum","code":"return minsum ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 2 , 15 , 5 , 1 , 35 , 16 , 67 , 10 } ; int K = 3 ; int L = 2 ; int length = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << findMinSum ( arr , K , L , length ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find the Kth smallest element in Unsorted Array","code":"int findKthSmallest ( int arr [ ] , int n , int k ) {"}
{"text":"Initialize the max Element as 0","code":"int max = 0 ;"}
{"text":"Iterate arr [ ] and find the maximum element in it","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max ) max = arr [ i ] ; }"}
{"text":"Frequency array to store the frequencies","code":"int counter [ max + 1 ] = { 0 } ;"}
{"text":"Counter variable","code":"int smallest = 0 ;"}
{"text":"Counting the frequencies","code":"for ( int i = 0 ; i < n ; i ++ ) { counter [ arr [ i ] ] ++ ; }"}
{"text":"Iterate through the freq [ ]","code":"for ( int num = 1 ; num <= max ; num ++ ) {"}
{"text":"Check if num is present in the array","code":"if ( counter [ num ] > 0 ) {"}
{"text":"Increment the counter with the frequency of num","code":"smallest += counter [ num ] ; }"}
{"text":"Checking if we have reached the Kth smallest element","code":"if ( smallest >= k ) {"}
{"text":"Return the Kth smallest element","code":"return num ; } } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 7 , 1 , 4 , 4 , 20 , 15 , 8 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int K = 5 ;"}
{"text":"Function Call","code":"cout << findKthSmallest ( arr , N , K ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print all the numbers up to n in lexicographical order","code":"void lexNumbers ( int n ) { vector < string > s ; for ( int i = 1 ; i <= n ; i ++ ) { s . push_back ( to_string ( i ) ) ; } sort ( s . begin ( ) , s . end ( ) ) ; vector < int > ans ; for ( int i = 0 ; i < n ; i ++ ) ans . push_back ( stoi ( s [ i ] ) ) ; for ( int i = 0 ; i < n ; i ++ ) cout << ans [ i ] << \" \u2581 \" ; }"}
{"text":"Driver Program","code":"int main ( ) { int n = 15 ; lexNumbers ( n ) ; return 0 ; }"}
{"text":"C ++ implementation to print row of matrix in ascending or descending order alternatively","code":"#include <stdio.h> NEW_LINE #define N  4 NEW_LINE void func ( int a [ ] [ N ] ) {"}
{"text":"Iterate matrix rowwise","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Sort even rows in ascending order","code":"if ( i % 2 == 0 ) { for ( int j = 0 ; j < N ; j ++ ) { for ( int k = j + 1 ; k < N ; ++ k ) {"}
{"text":"compare adjacent elements","code":"if ( a [ i ] [ j ] > a [ i ] [ k ] ) {"}
{"text":"swap adjacent element","code":"int temp = a [ i ] [ j ] ; a [ i ] [ j ] = a [ i ] [ k ] ; a [ i ] [ k ] = temp ; } } } }"}
{"text":"Sort even rows in descending order","code":"else { for ( int j = 0 ; j < N ; j ++ ) { for ( int k = j + 1 ; k < N ; ++ k ) {"}
{"text":"compare adjacent elements","code":"if ( a [ i ] [ j ] < a [ i ] [ k ] ) {"}
{"text":"swap adjacent element","code":"int temp = a [ i ] [ j ] ; a [ i ] [ j ] = a [ i ] [ k ] ; a [ i ] [ k ] = temp ; } } } } }"}
{"text":"Printing the final Output","code":"for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { printf ( \" % d \u2581 \" , a [ i ] [ j ] ) ; } printf ( \" STRNEWLINE \" ) ; } }"}
{"text":"Driver code","code":"int main ( ) { int a [ N ] [ N ] = { { 5 , 7 , 3 , 4 } , { 9 , 5 , 8 , 2 } , { 6 , 3 , 8 , 1 } , { 5 , 8 , 9 , 3 } } ; func ( a ) ; return 0 ; }"}
{"text":"C ++ Program to find weight of minimum spanning tree in a complete graph where edges have weight either 0 or 1","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"To store the edges of the given graph","code":"map < int , int > g [ 200005 ] ; set < int > s , ns ;"}
{"text":"A utility function to perform DFS Traversal","code":"void dfs ( int x ) { vector < int > v ; v . clear ( ) ; ns . clear ( ) ;"}
{"text":"Check those vertices which are stored in the set","code":"for ( int it : s ) {"}
{"text":"Vertices are included if the weight of edge is 0","code":"if ( ! g [ x ] [ it ] ) { v . push_back ( it ) ; } else { ns . insert ( it ) ; } } s = ns ; for ( int i : v ) { dfs ( i ) ; } }"}
{"text":"A utility function to find the weight of Minimum Spanning Tree","code":"void weightOfMST ( int N ) {"}
{"text":"To count the connected components","code":"int cnt = 0 ;"}
{"text":"Inserting the initial vertices in the set","code":"for ( int i = 1 ; i <= N ; ++ i ) { s . insert ( i ) ; }"}
{"text":"Traversing vertices stored in the set and Run DFS Traversal for each vertices","code":"for ( ; s . size ( ) ; ) {"}
{"text":"Incrementing the zero weight connected components","code":"++ cnt ; int t = * s . begin ( ) ; s . erase ( t ) ;"}
{"text":"DFS Traversal for every vertex remove","code":"dfs ( t ) ; } cout << cnt - 1 ; }"}
{"text":"Driver 's Code","code":"int main ( ) { int N = 6 , M = 11 ; int edges [ ] [ ] = { { 1 , 3 } , { 1 , 4 } , { 1 , 5 } , { 1 , 6 } , { 2 , 3 } , { 2 , 4 } , { 2 , 5 } , { 2 , 6 } , { 3 , 4 } , { 3 , 5 } , { 3 , 6 } } ;"}
{"text":"Insert edges","code":"for ( int i = 0 ; i < M ; ++ i ) { int u = edges [ i ] [ 0 ] ; int v = edges [ i ] [ 1 ] ; g [ u ] [ v ] = 1 ; g [ v ] [ u ] = 1 ; }"}
{"text":"Function call find the weight of Minimum Spanning Tree","code":"weightOfMST ( N ) ; return 0 ; }"}
{"text":"C ++ Program to count number of distinct pairs possible from the two arrays such that element selected from one array is always greater than the one selected from the other array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of pairs","code":"int countPairs ( vector < int > A , vector < int > B ) { int n = A . size ( ) ; sort ( A . begin ( ) , A . end ( ) ) ; sort ( B . begin ( ) , B . end ( ) ) ; int ans = 0 , i ; for ( int i = 0 ; i < n ; i ++ ) { if ( A [ i ] > B [ ans ] ) { ans ++ ; } } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { vector < int > A = { 30 , 28 , 45 , 22 } ; vector < int > B = { 35 , 25 , 22 , 48 } ; cout << countPairs ( A , B ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the maximum mod value for any pair from the array","code":"int maxMod ( int arr [ ] , int n ) { int maxVal = * max_element ( arr , arr + n ) ; int secondMax = 0 ;"}
{"text":"Find the second maximum element from the array","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < maxVal && arr [ i ] > secondMax ) { secondMax = arr [ i ] ; } } return secondMax ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 1 , 5 , 3 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; cout << maxMod ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to that returns true if it possible to choose the elements","code":"bool isPossible ( int A [ ] , int B [ ] , int n , int m , int x , int y ) {"}
{"text":"If elements can 't be chosen","code":"if ( x > n y > m ) return false ;"}
{"text":"Sort both the arrays","code":"sort ( A , A + n ) ; sort ( B , B + m ) ;"}
{"text":"If xth smallest element of A [ ] is smaller than the yth greatest element of B [ ]","code":"if ( A [ x - 1 ] < B [ m - y ] ) return true ; else return false ; }"}
{"text":"Driver code","code":"int main ( ) { int A [ ] = { 1 , 1 , 1 , 1 , 1 } ; int B [ ] = { 2 , 2 } ; int n = sizeof ( A ) \/ sizeof ( int ) ; int m = sizeof ( B ) \/ sizeof ( int ) ; int x = 3 , y = 1 ; if ( isPossible ( A , B , n , m , x , y ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"CPP program to minimum changes required in an array for k distinct elements .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  100005"}
{"text":"Function to minimum changes required in an array for k distinct elements .","code":"int Min_Replace ( int arr [ ] , int n , int k ) { sort ( arr , arr + n ) ;"}
{"text":"Store the frequency of each element","code":"int freq [ MAX ] ; memset ( freq , 0 , sizeof freq ) ; int p = 0 ; freq [ p ] = 1 ;"}
{"text":"Store the frequency of elements","code":"for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) ++ freq [ p ] ; else ++ freq [ ++ p ] ; }"}
{"text":"Sort frequencies in descending order","code":"sort ( freq , freq + n , greater < int > ( ) ) ;"}
{"text":"To store the required answer","code":"int ans = 0 ; for ( int i = k ; i <= p ; i ++ ) ans += freq [ i ] ;"}
{"text":"Return the required answer","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 7 , 8 , 2 , 3 , 2 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 2 ; cout << Min_Replace ( arr , n , k ) ; return 0 ; }"}
{"text":"CPP program to find maximum number of elements without overlapping in a line","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find maximum number of elements without overlapping in a line","code":"int Segment ( int x [ ] , int l [ ] , int n ) {"}
{"text":"If n = 1 , then answer is one","code":"if ( n == 1 ) return 1 ;"}
{"text":"We can always make 1 st element to cover left segment and nth the right segment","code":"int ans = 2 ; for ( int i = 1 ; i < n - 1 ; i ++ ) {"}
{"text":"If left segment for ith element doesnt overlap with i - 1 th element then do left","code":"if ( x [ i ] - l [ i ] > x [ i - 1 ] ) ans ++ ;"}
{"text":"else try towards right if possible","code":"else if ( x [ i ] + l [ i ] < x [ i + 1 ] ) {"}
{"text":"update x [ i ] to right endpoint of segment covered by it","code":"x [ i ] = x [ i ] + l [ i ] ; ans ++ ; } }"}
{"text":"Return the required answer","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int x [ ] = { 1 , 3 , 4 , 5 , 8 } , l [ ] = { 10 , 1 , 2 , 2 , 5 } ; int n = sizeof ( x ) \/ sizeof ( x [ 0 ] ) ;"}
{"text":"Function call","code":"cout << Segment ( x , l , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimized sum","code":"int MinimizeleftOverSum ( int a [ ] , int n ) { vector < int > v1 , v2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 ) v1 . push_back ( a [ i ] ) ; else v2 . push_back ( a [ i ] ) ; }"}
{"text":"If more odd elements","code":"if ( v1 . size ( ) > v2 . size ( ) ) {"}
{"text":"Sort the elements","code":"sort ( v1 . begin ( ) , v1 . end ( ) ) ; sort ( v2 . begin ( ) , v2 . end ( ) ) ;"}
{"text":"Left - over elements","code":"int x = v1 . size ( ) - v2 . size ( ) - 1 ; int sum = 0 ; int i = 0 ;"}
{"text":"Find the sum of leftover elements","code":"while ( i < x ) { sum += v1 [ i ++ ] ; }"}
{"text":"Return the sum","code":"return sum ; }"}
{"text":"If more even elements","code":"else if ( v2 . size ( ) > v1 . size ( ) ) {"}
{"text":"Sort the elements","code":"sort ( v1 . begin ( ) , v1 . end ( ) ) ; sort ( v2 . begin ( ) , v2 . end ( ) ) ;"}
{"text":"Left - over elements","code":"int x = v2 . size ( ) - v1 . size ( ) - 1 ; int sum = 0 ; int i = 0 ;"}
{"text":"Find the sum of leftover elements","code":"while ( i < x ) { sum += v2 [ i ++ ] ; }"}
{"text":"Return the sum","code":"return sum ; }"}
{"text":"If same elements","code":"else return 0 ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 2 , 2 , 2 , 2 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << MinimizeleftOverSum ( a , n ) ; return 0 ; }"}
{"text":"C ++ program to convert the given string","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of operations to convert the given string","code":"void minOperation ( string S , int N , int K ) {"}
{"text":"Check if N is divisible by K","code":"if ( N % K ) { cout << \" Not \u2581 Possible \" << endl ; return ; }"}
{"text":"Array to store frequency of characters in given string","code":"int count [ 26 ] = { 0 } ; for ( int i = 0 ; i < N ; i ++ ) { count [ S [ i ] - 97 ] ++ ; } int E = N \/ K ; vector < int > greaterE ; vector < int > lessE ; for ( int i = 0 ; i < 26 ; i ++ ) {"}
{"text":"Two arrays with number of operations required","code":"if ( count [ i ] < E ) lessE . push_back ( E - count [ i ] ) ; else greaterE . push_back ( count [ i ] - E ) ; } sort ( greaterE . begin ( ) , greaterE . end ( ) ) ; sort ( lessE . begin ( ) , lessE . end ( ) ) ; int mi = INT_MAX ; for ( int i = 0 ; i <= K ; i ++ ) {"}
{"text":"Checking for all possibility","code":"int set1 = i ; int set2 = K - i ; if ( greaterE . size ( ) >= set1 && lessE . size ( ) >= set2 ) { int step1 = 0 ; int step2 = 0 ; for ( int j = 0 ; j < set1 ; j ++ ) step1 += greaterE [ j ] ; for ( int j = 0 ; j < set2 ; j ++ ) step2 += lessE [ j ] ; mi = min ( mi , max ( step1 , step2 ) ) ; } } cout << mi << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string S = \" accb \" ; int N = S . size ( ) ; int K = 2 ; minOperation ( S , N , K ) ; return 0 ; }"}
{"text":"C ++ program to find minimum range increments to sort an array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum range increments to sort an array","code":"int minMovesToSort ( int arr [ ] , int n ) { int moves = 0 ; int i , mn = arr [ n - 1 ] ; for ( i = n - 2 ; i >= 0 ; i -- ) {"}
{"text":"If current element is found greater than last element Increment all terms in range i + 1 to n - 1","code":"if ( arr [ i ] > mn ) moves += arr [ i ] - mn ;"}
{"text":"mn = arr [ i ] ; Minimum in range i to n - 1","code":"} return moves ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 3 , 5 , 2 , 8 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << minMovesToSort ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool prime [ 100005 ] ; void SieveOfEratosthenes ( int n ) { memset ( prime , true , sizeof ( prime ) ) ;"}
{"text":"false here indicates that it is not prime","code":"prime [ 1 ] = false ; for ( int p = 2 ; p * p <= n ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] ) {"}
{"text":"Update all multiples of p , set them to non - prime","code":"for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } } }"}
{"text":"Function that sorts all the prime numbers from the array in descending","code":"void sortPrimes ( int arr [ ] , int n ) { SieveOfEratosthenes ( 100005 ) ;"}
{"text":"this vector will contain prime numbers to sort","code":"vector < int > v ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"if the element is prime","code":"if ( prime [ arr [ i ] ] ) v . push_back ( arr [ i ] ) ; } sort ( v . begin ( ) , v . end ( ) , greater < int > ( ) ) ; int j = 0 ;"}
{"text":"update the array elements","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( prime [ arr [ i ] ] ) arr [ i ] = v [ j ++ ] ; } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 4 , 3 , 2 , 6 , 100 , 17 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; sortPrimes ( arr , n ) ;"}
{"text":"print the results .","code":"for ( int i = 0 ; i < n ; i ++ ) { cout << arr [ i ] << \" \u2581 \" ; } return 0 ; }"}
{"text":"CPP Program to divide the array into N pairs such that maximum pair is minimized","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void findOptimalPairs ( int arr [ ] , int N ) { sort ( arr , arr + N ) ;"}
{"text":"After Sorting Maintain two variables i and j pointing to start and end of array Such that smallest element of array pairs with largest element","code":"for ( int i = 0 , j = N - 1 ; i <= j ; i ++ , j -- ) cout << \" ( \" << arr [ i ] << \" , \u2581 \" << arr [ j ] << \" ) \" << \" \u2581 \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 9 , 6 , 5 , 1 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findOptimalPairs ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program to implement simple approach to sort an array according to count of set bits .","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"a utility function that returns total set bits count in an integer","code":"int countBits ( int a ) { int count = 0 ; while ( a ) { if ( a & 1 ) count += 1 ; a = a >> 1 ; } return count ; }"}
{"text":"Function to simultaneously sort both arrays using insertion sort ( https : www . geeksforgeeks . org \/ insertion - sort \/ )","code":"void insertionSort ( int arr [ ] , int aux [ ] , int n ) { for ( int i = 1 ; i < n ; i ++ ) {"}
{"text":"use 2 keys because we need to sort both arrays simultaneously","code":"int key1 = aux [ i ] ; int key2 = arr [ i ] ; int j = i - 1 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] and aux [ 0. . i - 1 ] , such that elements of aux [ 0. . i - 1 ] are greater than key1 , to one position ahead of their current position","code":"while ( j >= 0 && aux [ j ] < key1 ) { aux [ j + 1 ] = aux [ j ] ; arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } aux [ j + 1 ] = key1 ; arr [ j + 1 ] = key2 ; } }"}
{"text":"Function to sort according to bit count using an auxiliary array","code":"void sortBySetBitCount ( int arr [ ] , int n ) {"}
{"text":"Create an array and store count of set bits in it .","code":"int aux [ n ] ; for ( int i = 0 ; i < n ; i ++ ) aux [ i ] = countBits ( arr [ i ] ) ;"}
{"text":"Sort arr [ ] according to values in aux [ ]","code":"insertionSort ( arr , aux , n ) ; }"}
{"text":"Utility function to print an array","code":"void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; sortBySetBitCount ( arr , n ) ; printArr ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to sort an array according to count of set bits using std :: sort ( )","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"a utility function that returns total set bits count in an integer","code":"int countBits ( int a ) { int count = 0 ; while ( a ) { if ( a & 1 ) count += 1 ; a = a >> 1 ; } return count ; }"}
{"text":"Function to sort according to bit count This function assumes that there are 32 bits in an integer .","code":"void sortBySetBitCount ( int arr [ ] , int n ) { vector < vector < int > > count ( 32 ) ; int setbitcount = 0 ; for ( int i = 0 ; i < n ; i ++ ) { setbitcount = countBits ( arr [ i ] ) ; count [ setbitcount ] . push_back ( arr [ i ] ) ; }"}
{"text":"Traverse through all bit counts ( Note that we sort array in decreasing order )","code":"for ( int i = 31 ; i >= 0 ; i -- ) { vector < int > v1 = count [ i ] ; for ( int i = 0 ; i < v1 . size ( ) ; i ++ ) arr [ j ++ ] = v1 [ i ] ; } }"}
{"text":"Utility function to print an array","code":"void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; sortBySetBitCount ( arr , n ) ; printArr ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find lexicographically smallest string having number of 1 s greater than number of 0 s","code":"void generateString ( int k1 , int k2 , string s ) {"}
{"text":"C1s And C0s stores the count of 1 s and 0 s at every position","code":"int C1s = 0 , C0s = 0 ; int flag = 0 ; vector < int > pos ;"}
{"text":"Traverse the string S","code":"for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '0' ) { C0s ++ ;"}
{"text":"If the position is not divisible by k1 and k2","code":"if ( ( i + 1 ) % k1 != 0 && ( i + 1 ) % k2 != 0 ) { pos . push_back ( i ) ; } } else { C1s ++ ; } if ( C0s >= C1s ) {"}
{"text":"If C0s >= C1s and pos [ ] is empty then the string can 't  be formed","code":"if ( pos . size ( ) == 0 ) { cout << -1 ; flag = 1 ; break ; }"}
{"text":"If pos [ ] is not empty then flip the bit of last position present in pos [ ]","code":"else { int k = pos . back ( ) ; s [ k ] = '1' ; C0s -- ; C1s ++ ; pos . pop_back ( ) ; } } }"}
{"text":"Print the result","code":"if ( flag == 0 ) { cout << s ; } }"}
{"text":"Driver Code","code":"int main ( ) { int K1 = 2 , K2 = 4 ; string S = \"11000100\" ; generateString ( K1 , K2 , S ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the pair ( X , Y ) such that X xor Y = N and the count of set bits in X and Y is less than count of set bit in N","code":"void maximizeProduct ( int N ) {"}
{"text":"Stores MSB ( Most Significant Bit )","code":"int MSB = ( int ) log2 ( N ) ;"}
{"text":"Stores the value of X","code":"int X = 1 << MSB ;"}
{"text":"Stores the value of Y","code":"int Y = N - ( 1 << MSB ) ;"}
{"text":"Traversing over all bits of N","code":"for ( int i = 0 ; i < MSB ; i ++ ) {"}
{"text":"If ith bit of N is 0","code":"if ( ! ( N & ( 1 << i ) ) ) {"}
{"text":"Set ith bit of X to 1","code":"X += 1 << i ;"}
{"text":"Set ith bit of Y to 1","code":"Y += 1 << i ; } }"}
{"text":"Print Answer","code":"cout << X << \" \u2581 \" << Y ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 45 ; maximizeProduct ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the number is valid","code":"bool check ( int num ) {"}
{"text":"Sum of digits of num","code":"int sm = 0 ;"}
{"text":"Squared number","code":"int num2 = num * num ; while ( num ) { sm += num % 10 ; num \/= 10 ; }"}
{"text":"Sum of digits of ( num * num )","code":"int sm2 = 0 ; while ( num2 ) { sm2 += num2 % 10 ; num2 \/= 10 ; } return ( ( sm * sm ) == sm2 ) ; }"}
{"text":"Function to convert a string to an integer","code":"int convert ( string s ) { int val = 0 ; reverse ( s . begin ( ) , s . end ( ) ) ; int cur = 1 ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) { val += ( s [ i ] - '0' ) * cur ; cur *= 10 ; } return val ; }"}
{"text":"Function to generate all possible strings of length len","code":"void generate ( string s , int len , set < int > & uniq ) {"}
{"text":"Desired string","code":"if ( s . size ( ) == len ) {"}
{"text":"Take only valid numbers","code":"if ( check ( convert ( s ) ) ) { uniq . insert ( convert ( s ) ) ; } return ; }"}
{"text":"Recurse for all possible digits","code":"for ( int i = 0 ; i <= 3 ; i ++ ) { generate ( s + char ( i + '0' ) , len , uniq ) ; } }"}
{"text":"Function to calculate unique numbers in range [ L , R ]","code":"int totalNumbers ( int L , int R ) {"}
{"text":"Initialize a variable to store the answer","code":"int ans = 0 ;"}
{"text":"Calculate the maximum possible length","code":"int max_len = log10 ( R ) + 1 ;"}
{"text":"Set to store distinct valid numbers","code":"set < int > uniq ; for ( int i = 1 ; i <= max_len ; i ++ ) {"}
{"text":"Generate all possible strings of length i","code":"generate ( \" \" , i , uniq ) ; }"}
{"text":"Iterate the set to get the count of valid numbers in the range [ L , R ]","code":"for ( auto x : uniq ) { if ( x >= L && x <= R ) { ans ++ ; } } return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { int L = 22 , R = 22 ; cout << totalNumbers ( L , R ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if X can be converted to Y by multiplying X by 2 or appending 1 at the end","code":"void convertXintoY ( int X , int Y ) {"}
{"text":"Iterate until Y is at least X","code":"while ( Y > X ) {"}
{"text":"If Y is even","code":"if ( Y % 2 == 0 ) Y \/= 2 ;"}
{"text":"If the last digit of Y is 1","code":"else if ( Y % 10 == 1 ) Y \/= 10 ;"}
{"text":"Otherwise","code":"else break ; }"}
{"text":"Check if X is equal to Y","code":"if ( X == Y ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int X = 100 , Y = 40021 ; convertXintoY ( X , Y ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the lexicographically smallest string of the first K lower case alphabets having unique substrings","code":"void generateString ( int K ) {"}
{"text":"Stores the resultant string","code":"string s = \" \" ;"}
{"text":"Iterate through all the characters","code":"for ( int i = 97 ; i < 97 + K ; i ++ ) { s = s + char ( i ) ;"}
{"text":"Inner Loop for making pairs and adding them into string","code":"for ( int j = i + 1 ; j < 97 + K ; j ++ ) { s += char ( i ) ; s += char ( j ) ; } }"}
{"text":"Adding first character so that substring consisting of the last the first alphabet is present","code":"s += char ( 97 ) ;"}
{"text":"Print the resultant string","code":"cout << s ; }"}
{"text":"Driver Code","code":"int main ( ) { int K = 4 ; generateString ( K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the quadratic equation from the given sum and products of roots","code":"void findEquation ( int S , int M ) {"}
{"text":"Print the coefficients","code":"cout << \"1 \u2581 \" << ( -1 ) * S << \" \u2581 \" << M << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int S = 5 , M = 6 ; findEquation ( S , M ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the minimum number of pairs of adjacent elements required to be replaced by their sum to make all array elements equal","code":"int minSteps ( vector < int > a , int n ) {"}
{"text":"Stores the prefix sum of the array","code":"vector < int > prefix_sum ( n ) ; prefix_sum [ 0 ] = a [ 0 ] ;"}
{"text":"Calculate the prefix sum array","code":"for ( int i = 1 ; i < n ; i ++ ) prefix_sum [ i ] += prefix_sum [ i - 1 ] + a [ i ] ;"}
{"text":"Stores the maximum number of subarrays into which the array can be split","code":"int mx = -1 ;"}
{"text":"Iterate over all possible sums","code":"for ( int subgroupsum : prefix_sum ) { int sum = 0 ; int i = 0 ; int grp_count = 0 ;"}
{"text":"Traverse the array","code":"while ( i < n ) { sum += a [ i ] ;"}
{"text":"If the sum is equal to the current prefix sum","code":"if ( sum == subgroupsum ) {"}
{"text":"Increment count of groups by 1","code":"grp_count += 1 ; sum = 0 ; }"}
{"text":"Otherwise discard this subgroup sum","code":"else if ( sum > subgroupsum ) { grp_count = -1 ; break ; } i += 1 ; }"}
{"text":"Update the maximum this of subarrays","code":"if ( grp_count > mx ) mx = grp_count ; }"}
{"text":"Return the minimum number of operations","code":"return n - mx ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > A = { 1 , 2 , 3 , 2 , 1 , 3 } ; int N = A . size ( ) ;"}
{"text":"Function Call","code":"cout << minSteps ( A , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the most frequent character after replacing X with either '0' or '1' according as per the given conditions","code":"void maxOccuringCharacter ( string s ) {"}
{"text":"Store the count of 0 s and 1 s in the string S","code":"int count0 = 0 , count1 = 0 ;"}
{"text":"Count the frequency of 0 and 1","code":"for ( int i = 0 ; i < s . length ( ) ; i ++ ) {"}
{"text":"If the character is 1","code":"if ( s [ i ] == '1' ) { count1 ++ ; }"}
{"text":"If the character is 0","code":"else if ( s [ i ] == '0' ) { count0 ++ ; } }"}
{"text":"Stores first occurence of 1","code":"int prev = -1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '1' ) { prev = i ; break ; } }"}
{"text":"Traverse the string to count the number of X between two consecutive 1 s","code":"for ( int i = prev + 1 ; i < s . length ( ) ; i ++ ) {"}
{"text":"If the current character is not X","code":"if ( s [ i ] != ' X ' ) {"}
{"text":"If the current character is 1 , add the number of Xs to count1 and set prev to i","code":"if ( s [ i ] == '1' ) { count1 += i - prev - 1 ; prev = i ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"Find next occurence of 1 in the string","code":"bool flag = true ; for ( int j = i + 1 ; j < s . length ( ) ; j ++ ) { if ( s [ j ] == '1' ) { flag = false ; prev = j ; break ; } }"}
{"text":"If it is found , set i to prev","code":"if ( ! flag ) { i = prev ; }"}
{"text":"Otherwise , break out of the loop","code":"else { i = s . length ( ) ; } } } }"}
{"text":"Store the first occurence of 0","code":"prev = -1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '0' ) { prev = i ; break ; } }"}
{"text":"Repeat the same procedure to count the number of X between two consecutive 0 s","code":"for ( int i = prev + 1 ; i < s . length ( ) ; i ++ ) {"}
{"text":"If the current character is not X","code":"if ( s [ i ] != ' X ' ) {"}
{"text":"If the current character is 0","code":"if ( s [ i ] == '0' ) {"}
{"text":"Add the count of Xs to count0","code":"count0 += i - prev - 1 ;"}
{"text":"Set prev to i","code":"prev = i ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"Find the next occurence of 0 in the string","code":"bool flag = true ; for ( int j = i + 1 ; j < s . length ( ) ; j ++ ) { if ( s [ j ] == '0' ) { prev = j ; flag = false ; break ; } }"}
{"text":"If it is found , set i to prev","code":"if ( ! flag ) { i = prev ; }"}
{"text":"Otherwise , break out of the loop","code":"else { i = s . length ( ) ; } } } }"}
{"text":"Count number of X present in the starting of the string as XXXX1 ...","code":"if ( s [ 0 ] == ' X ' ) {"}
{"text":"Store the count of X","code":"int count = 0 ; int i = 0 ; while ( s [ i ] == ' X ' ) { count ++ ; i ++ ; }"}
{"text":"Increment count1 by count if the condition is satisfied","code":"if ( s [ i ] == '1' ) { count1 += count ; } }"}
{"text":"Count the number of X present in the ending of the string as ... XXXX0","code":"if ( s [ ( s . length ( ) - 1 ) ] == ' X ' ) {"}
{"text":"Store the count of X","code":"int count = 0 ; int i = s . length ( ) - 1 ; while ( s [ i ] == ' X ' ) { count ++ ; i -- ; }"}
{"text":"Increment count0 by count if the condition is satisfied","code":"if ( s [ i ] == '0' ) { count0 += count ; } }"}
{"text":"If count of 1 is equal to count of 0 , print X","code":"if ( count0 == count1 ) { cout << \" X \" << endl ; }"}
{"text":"Otherwise , if count of 1 is greater than count of 0","code":"else if ( count0 > count1 ) { cout << 0 << endl ; }"}
{"text":"Otherwise , print 0","code":"else cout < < 1 << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string S = \" XX10XX10XXX1XX \" ; maxOccuringCharacter ( S ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the maximum number of sheets possible by given operations","code":"int maxSheets ( int A , int B ) { int area = A * B ;"}
{"text":"Initial count of sheets","code":"int count = 1 ;"}
{"text":"Keep dividing the sheets into half","code":"while ( area % 2 == 0 ) {"}
{"text":"Reduce area by half","code":"area \/= 2 ;"}
{"text":"Increase count by twice","code":"count *= 2 ; } return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int A = 5 , B = 10 ; cout << maxSheets ( A , B ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum moves required to reach origin from ( a , b )","code":"void findMinMoves ( int a , int b ) {"}
{"text":"Stores the minimum number of moves","code":"int ans = 0 ;"}
{"text":"Check if the absolute difference is 1 or 0","code":"if ( a == b || abs ( a - b ) == 1 ) { ans = a + b ; } else {"}
{"text":"Store the minimum of a , b","code":"int k = min ( a , b ) ;"}
{"text":"Store the maximum of a , b","code":"int j = max ( a , b ) ; ans = 2 * k + 2 * ( j - k ) - 1 ; }"}
{"text":"Print the answer","code":"cout << ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given co - ordinates","code":"int a = 3 , b = 5 ;"}
{"text":"Function Call","code":"findMinMoves ( a , b ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count even sum pairs in the given range","code":"long long cntEvenSumPairs ( long long X , long long Y ) {"}
{"text":"Stores the count of even numbers between 1 to X","code":"long long cntXEvenNums = X \/ 2 ;"}
{"text":"Stores the count of odd numbers between 1 to X","code":"long long cntXOddNums = ( X + 1 ) \/ 2 ;"}
{"text":"Stores the count of even numbers between 1 to Y","code":"long long cntYEvenNums = Y \/ 2 ;"}
{"text":"Stores the count of odd numbers between 1 to Y","code":"long long cntYOddNums = ( Y + 1 ) \/ 2 ;"}
{"text":"Stores the count of pairs having even sum","code":"long long cntPairs = ( cntXEvenNums * 1LL * cntYEvenNums ) + ( cntXOddNums * 1LL * cntYOddNums ) ;"}
{"text":"Retuens the count of pairs having even sum","code":"return cntPairs ; }"}
{"text":"Driver Code","code":"int main ( ) { long long X = 2 ; long long Y = 3 ; cout << cntEvenSumPairs ( X , Y ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate minimum number of moves to make the sequence a Fibonacci series","code":"int minMoves ( vector < int > arr ) { int N = arr . size ( ) ;"}
{"text":"If number of elements is less than 3","code":"if ( N <= 2 ) return 0 ;"}
{"text":"Initialize the value of the result","code":"int ans = INT_MAX ;"}
{"text":"Try all permutations of the first two elements","code":"for ( int i = -1 ; i <= 1 ; i ++ ) { for ( int j = -1 ; j <= 1 ; j ++ ) {"}
{"text":"Value of first element after operation","code":"int num1 = arr [ 0 ] + i ;"}
{"text":"Value of second element after operation","code":"int num2 = arr [ 1 ] + j ; int flag = 1 ; int moves = abs ( i ) + abs ( j ) ;"}
{"text":"Calculate number of moves for rest of the elements of the array","code":"for ( int idx = 2 ; idx < N ; idx ++ ) {"}
{"text":"Element at idx index","code":"int num = num1 + num2 ;"}
{"text":"If it is not possible to change the element in atmost one move","code":"if ( abs ( arr [ idx ] - num ) > 1 ) flag = 0 ;"}
{"text":"Otherwise","code":"else moves += abs ( arr [ idx ] - num ) ; num1 = num2 ; num2 = num ; }"}
{"text":"Update the answer","code":"if ( flag ) ans = min ( ans , moves ) ; } }"}
{"text":"Return the answer","code":"if ( ans == INT_MAX ) return -1 ; return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > arr = { 4 , 8 , 9 , 17 , 27 } ; cout << minMoves ( arr ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to Find the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ... for all queries","code":"void querySum ( int arr [ ] , int N , int Q [ ] [ 2 ] , int M ) {"}
{"text":"Iterate over each query","code":"for ( int i = 0 ; i < M ; i ++ ) { int x = Q [ i ] [ 0 ] ; int y = Q [ i ] [ 1 ] ;"}
{"text":"Stores the sum of arr [ x ] + arr [ x + y ] + arr [ x + 2 * y ] + ...","code":"int sum = 0 ;"}
{"text":"Traverse the array and calculate the sum of the expression","code":"while ( x < N ) {"}
{"text":"Update sum","code":"sum += arr [ x ] ;"}
{"text":"Update x","code":"x += y ; } cout << sum << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 7 , 5 , 4 } ; int Q [ ] [ 2 ] = { { 2 , 1 } , { 3 , 2 } } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int M = sizeof ( Q ) \/ sizeof ( Q [ 0 ] ) ; querySum ( arr , N , Q , M ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate Bitwise OR from given bitwise XOR and bitwise AND values","code":"int findBitwiseORGivenXORAND ( int X , int Y ) { return X + Y ; }"}
{"text":"Driver Code","code":"int main ( ) { int X = 5 , Y = 2 ; cout << findBitwiseORGivenXORAND ( X , Y ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return GCD of two numbers a and b","code":"int GCD ( int a , int b ) {"}
{"text":"Base Case","code":"if ( b == 0 ) return a ;"}
{"text":"Recursively Find the GCD","code":"return GCD ( b , a % b ) ; }"}
{"text":"Function to check of B can be reaced from A with a jump of K elements in the circular queue","code":"void canReach ( int N , int A , int B , int K ) {"}
{"text":"Find GCD of N and K","code":"int gcd = GCD ( N , K ) ;"}
{"text":"If A - B is divisible by gcd then print Yes","code":"if ( abs ( A - B ) % gcd == 0 ) { cout << \" Yes \" ; }"}
{"text":"Otherwise","code":"else { cout << \" No \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 5 , A = 2 , B = 1 , K = 2 ;"}
{"text":"Function Call","code":"canReach ( N , A , B , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that counts the subarrays with sum of its elements as its length","code":"int countOfSubarray ( int arr [ ] , int N ) {"}
{"text":"Store count of elements upto current element with length i","code":"unordered_map < int , int > mp ;"}
{"text":"Stores the final count of subarray","code":"int answer = 0 ;"}
{"text":"Stores the prefix sum","code":"int sum = 0 ;"}
{"text":"If size of subarray is 1","code":"mp [ 1 ] ++ ;"}
{"text":"Iterate the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Find the sum","code":"sum += arr [ i ] ; answer += mp [ sum - i ] ;"}
{"text":"Update frequency in map","code":"mp [ sum - i ] ++ ; }"}
{"text":"Print the total count","code":"cout << answer ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array arr [ ]","code":"int arr [ ] = { 1 , 0 , 2 , 1 , 2 , -2 , 2 , 4 } ;"}
{"text":"Size of array","code":"int N = sizeof arr \/ sizeof arr [ 0 ] ;"}
{"text":"Function Call","code":"countOfSubarray ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to split the first N natural numbers into two sets having minimum absolute difference of their sums","code":"int minAbsDiff ( int N ) {"}
{"text":"Stores the sum of elements of set1","code":"int sumSet1 = 0 ;"}
{"text":"Stores the sum of elements of set2","code":"int sumSet2 = 0 ;"}
{"text":"Traverse first N natural numbers","code":"for ( int i = N ; i > 0 ; i -- ) {"}
{"text":"Check if sum of elements of set1 is less than or equal to sum of elements of set2","code":"if ( sumSet1 <= sumSet2 ) { sumSet1 += i ; } else { sumSet2 += i ; } } return abs ( sumSet1 - sumSet2 ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 6 ; cout << minAbsDiff ( N ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if N contains digits 0 , 1 , 2 , 5 , 8 only","code":"bool checkDigits ( int n ) {"}
{"text":"Extract digits of N","code":"do { int r = n % 10 ;"}
{"text":"Return false if any of these digits are present","code":"if ( r == 3 r == 4 r == 6 r == 7 r == 9 ) return false ; n \/= 10 ; } while ( n != 0 ) ; return true ; }"}
{"text":"Function to check if N is prime or not","code":"bool isPrime ( int n ) { if ( n <= 1 ) return false ;"}
{"text":"Check for all factors","code":"for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) return false ; } return true ; }"}
{"text":"Function to check if n is prime in all the desired forms","code":"int isAllPrime ( int n ) { return isPrime ( n ) && checkDigits ( n ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 101 ; if ( isAllPrime ( N ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the minimum cost required to generate a balanced bracket sequence","code":"void minCost ( string str , int a , int b ) {"}
{"text":"Stores the count of unbalanced open brackets","code":"int openUnbalanced = 0 ;"}
{"text":"Stores the count of unbalanced closed brackets","code":"int closedUnbalanced = 0 ;"}
{"text":"Stores the count of open brackets","code":"int openCount = 0 ;"}
{"text":"Stores the count of closed brackets","code":"int closedCount = 0 ; for ( int i = 0 ; str [ i ] != ' \\0' ; i ++ ) {"}
{"text":"If open brace is encountered","code":"if ( str [ i ] == ' ( ' ) { openUnbalanced ++ ; openCount ++ ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"If no unbalanced open brackets are present","code":"if ( openUnbalanced == 0 )"}
{"text":"Increase count of unbalanced closed brackets","code":"closedUnbalanced ++ ;"}
{"text":"Otherwise","code":"else"}
{"text":"Reduce count of unbalanced open brackets","code":"openUnbalanced -- ;"}
{"text":"Increase count of closed brackets","code":"closedCount ++ ; } }"}
{"text":"Calculate lower bound of minimum cost","code":"int result = a * ( abs ( openCount - closedCount ) ) ;"}
{"text":"Reduce excess open or closed brackets to prevent counting them twice","code":"if ( closedCount > openCount ) closedUnbalanced -= ( closedCount - openCount ) ; if ( openCount > closedCount ) openUnbalanced -= ( openCount - closedCount ) ;"}
{"text":"Update answer by adding minimum of removing both unbalanced open and closed brackets or inserting closed unbalanced brackets to end of string","code":"result += min ( a * ( openUnbalanced + closedUnbalanced ) , b * closedUnbalanced ) ;"}
{"text":"Print the result","code":"cout << result << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \" ) ) ( ) ( ( ) ( ) ( \" ; int A = 1 , B = 3 ; minCost ( str , A , B ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the number of all permutations such that sum of K numbers in range is even","code":"int countEvenSum ( int low , int high , int k ) {"}
{"text":"Find total count of even and odd number in given range","code":"int even_count = high \/ 2 - ( low - 1 ) \/ 2 ; int odd_count = ( high + 1 ) \/ 2 - low \/ 2 ; long even_sum = 1 ; long odd_sum = 0 ;"}
{"text":"Iterate loop k times and update even_sum & odd_sum using previous values","code":"for ( int i = 0 ; i < k ; i ++ ) {"}
{"text":"Update the prev_even and odd_sum","code":"long prev_even = even_sum ; long prev_odd = odd_sum ;"}
{"text":"Even sum","code":"even_sum = ( prev_even * even_count ) + ( prev_odd * odd_count ) ;"}
{"text":"Odd sum","code":"odd_sum = ( prev_even * odd_count ) + ( prev_odd * even_count ) ; }"}
{"text":"Return even_sum","code":"cout << ( even_sum ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given ranges","code":"int low = 4 ; int high = 5 ;"}
{"text":"Length of permutation","code":"int K = 3 ;"}
{"text":"Function call","code":"countEvenSum ( low , high , K ) ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the number of N - digit numbers such that sum of every K consecutive digits are equal","code":"void count ( int n , int k ) { long count = ( long ) ( pow ( 10 , k ) - pow ( 10 , k - 1 ) ) ;"}
{"text":"Print the answer","code":"cout << ( count ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 2 , k = 1 ; count ( n , k ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the sum of largest divisors of numbers in range 1 to N not divisible by prime number P","code":"int func ( int N , int P ) {"}
{"text":"Total sum upto N","code":"int sumUptoN = ( N * ( N + 1 ) \/ 2 ) ; int sumOfMultiplesOfP ;"}
{"text":"If no multiple of P exist up to N","code":"if ( N < P ) { return sumUptoN ; }"}
{"text":"If only P itself is in the range from 1 to N","code":"else if ( ( N \/ P ) == 1 ) { return sumUptoN - P + 1 ; }"}
{"text":"Sum of those that are divisible by P","code":"sumOfMultiplesOfP = ( ( N \/ P ) * ( 2 * P + ( N \/ P - 1 ) * P ) ) \/ 2 ;"}
{"text":"Recursively function call to find the sum for N \/ P","code":"return ( sumUptoN + func ( N \/ P , P ) - sumOfMultiplesOfP ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given N and P","code":"int N = 10 , P = 5 ;"}
{"text":"Function Call","code":"cout << func ( N , P ) << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ Program to implement the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the right shifts required for each element to reach its sorted array position in A [ ]","code":"void findShifts ( int A [ ] , int N ) {"}
{"text":"Stores required number of shifts for each element","code":"int shift [ N ] ; for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If the element is at sorted position","code":"if ( i == A [ i ] - 1 ) shift [ i ] = 0 ;"}
{"text":"Otherwise","code":"else"}
{"text":"Calculate right shift","code":"shift [ i ] = ( A [ i ] - 1 - i + N ) % N ; }"}
{"text":"Print the respective shifts","code":"for ( int i = 0 ; i < N ; i ++ ) cout << shift [ i ] << \" \u2581 \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 4 , 3 , 2 , 5 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findShifts ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to construct matrix with diagonal sum equal to matrix sum","code":"void constructmatrix ( int N ) { bool check = true ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) {"}
{"text":"If diagonal position","code":"if ( i == j ) { cout << 1 << \" \u2581 \" ; } else if ( check ) {"}
{"text":"Positive element","code":"cout << 2 << \" \u2581 \" ; check = false ; } else {"}
{"text":"Negative element","code":"cout << -2 << \" \u2581 \" ; check = true ; } } cout << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 5 ; constructmatrix ( 5 ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate and return the minimum number of times a number with unit digit X needs to be added to get a sum N","code":"int check ( int unit_digit , int X ) { int times , digit ;"}
{"text":"Calculate the number of additions required to get unit digit of N","code":"for ( int times = 1 ; times <= 10 ; times ++ ) { digit = ( X * times ) % 10 ; if ( digit == unit_digit ) return times ; }"}
{"text":"If unit digit of N cannot be obtained","code":"return -1 ; }"}
{"text":"Function to return the minimum number required to represent N","code":"int getNum ( int N , int X ) { int unit_digit ;"}
{"text":"Stores unit digit of N","code":"unit_digit = N % 10 ;"}
{"text":"Stores minimum addition of X required to obtain unit digit of N","code":"int times = check ( unit_digit , X ) ;"}
{"text":"If unit digit of N cannot be obtained","code":"if ( times == -1 ) return times ;"}
{"text":"Otherwise","code":"else {"}
{"text":"If N is greater than or equal to ( X * times )","code":"if ( N >= ( times * X ) )"}
{"text":"Minimum count of numbers that needed to represent N","code":"return times ;"}
{"text":"Representation not possible","code":"else return -1 ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 58 , X = 7 ; cout << getNum ( N , X ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of Points required to cover a grid","code":"int minPoints ( int n , int m ) { int ans = 0 ;"}
{"text":"If number of block is even","code":"if ( ( n % 2 != 0 ) && ( m % 2 != 0 ) ) { ans = ( ( n * m ) \/ 2 ) + 1 ; } else { ans = ( n * m ) \/ 2 ; }"}
{"text":"Return the minimum points","code":"return ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given size of grid","code":"int N = 5 , M = 7 ;"}
{"text":"Function Call","code":"cout << minPoints ( N , M ) ; return 0 ; }"}
{"text":"C ++ code for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define ll  long long int"}
{"text":"Function to find the largest lexicographical string with given constraints .","code":"string getLargestString ( string s , ll k ) {"}
{"text":"vector containing frequency of each character .","code":"vector < int > frequency_array ( 26 , 0 ) ;"}
{"text":"assigning frequency to","code":"for ( int i = 0 ; i < s . length ( ) ; i ++ ) { frequency_array [ s [ i ] - ' a ' ] ++ ; }"}
{"text":"empty string of string class type","code":"string ans = \" \" ;"}
{"text":"loop to iterate over maximum priority first .","code":"for ( int i = 25 ; i >= 0 ; ) {"}
{"text":"if frequency is greater than or equal to k .","code":"if ( frequency_array [ i ] > k ) {"}
{"text":"temporary variable to operate in - place of k .","code":"int temp = k ; string st ( 1 , i + ' a ' ) ; while ( temp > 0 ) {"}
{"text":"concatenating with the resultant string ans .","code":"ans += st ; temp -- ; } frequency_array [ i ] -= k ;"}
{"text":"handling k case by adjusting with just smaller priority element .","code":"int j = i - 1 ; while ( frequency_array [ j ] <= 0 && j >= 0 ) { j -- ; }"}
{"text":"condition to verify if index j does have frequency greater than 0 ;","code":"if ( frequency_array [ j ] > 0 && j >= 0 ) { string str ( 1 , j + ' a ' ) ; ans += str ; frequency_array [ j ] -= 1 ; } else {"}
{"text":"if no such element is found than string can not be processed further .","code":"break ; } }"}
{"text":"if frequency is greater than 0 and less than k .","code":"else if ( frequency_array [ i ] > 0 ) {"}
{"text":"here we don 't need to fix K  consecutive element criteria.","code":"int temp = frequency_array [ i ] ; frequency_array [ i ] -= temp ; string st ( 1 , i + ' a ' ) ; while ( temp > 0 ) { ans += st ; temp -- ; } }"}
{"text":"otherwise check for next possible element .","code":"else { i -- ; } } return ans ; }"}
{"text":"Driver program","code":"int main ( ) { string S = \" xxxxzza \" ; int k = 3 ; cout << getLargestString ( S , k ) << endl ; return 0 ; }"}
{"text":"C ++ implementation to find the minimum operations make all elements equal using the second array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum operations required to make all elements of the array equal","code":"int minOperations ( int a [ ] , int b [ ] , int n ) {"}
{"text":"Minimum element of A [ ]","code":"int minA = * min_element ( a , a + n ) ;"}
{"text":"Traverse through all final values","code":"for ( int x = minA ; x >= 0 ; x -- ) {"}
{"text":"Variable indicating whether all elements can be converted to x or not","code":"bool check = 1 ;"}
{"text":"Total operations","code":"int operations = 0 ;"}
{"text":"Traverse through all array elements","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( x % b [ i ] == a [ i ] % b [ i ] ) { operations += ( a [ i ] - x ) \/ b [ i ] ; }"}
{"text":"All elements can 't  be converted to x","code":"else { check = 0 ; break ; } } if ( check ) return operations ; } return -1 ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 5 ; int A [ N ] = { 5 , 7 , 10 , 5 , 15 } ; int B [ N ] = { 2 , 2 , 1 , 3 , 5 } ; cout << minOperations ( A , B , N ) ; return 0 ; }"}
{"text":"C ++ implementation to find the largest value of a + b satisfying the given condition","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the maximum sum of a + b satisfying the given condition","code":"int getLargestSum ( int N ) {"}
{"text":"Initialize max_sum","code":"int max_sum = 0 ;"}
{"text":"Consider all the possible pairs","code":"for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = i + 1 ; j <= N ; j ++ ) {"}
{"text":"Check if the product is divisible by the sum","code":"if ( i * j % ( i + j ) == 0 )"}
{"text":"Storing the maximum sum in the max_sum variable","code":"max_sum = max ( max_sum , i + j ) ; } }"}
{"text":"Return the max_sum value","code":"return max_sum ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 25 ; int max_sum = getLargestSum ( N ) ; cout << max_sum << endl ; return 0 ; }"}
{"text":"C ++ implementation to find the maximum sum of the array by multiplying the prefix and suffix of the array by - 1","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Kadane 's algorithm to find the maximum subarray sum","code":"int maxSubArraySum ( int a [ ] , int size ) { int max_so_far = INT_MIN , max_ending_here = 0 ;"}
{"text":"Loop to find the maximum subarray array sum in the given array","code":"for ( int i = 0 ; i < size ; i ++ ) { max_ending_here = max_ending_here + a [ i ] ; if ( max_ending_here < 0 ) max_ending_here = 0 ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; } return max_so_far ; }"}
{"text":"Function to find the maximum sum of the array by multiplying the prefix and suffix by - 1","code":"int maxSum ( int a [ ] , int n ) {"}
{"text":"Total intital sum","code":"int S = 0 ;"}
{"text":"Loop to find the maximum sum of the array","code":"for ( int i = 0 ; i < n ; i ++ ) S += a [ i ] ; int X = maxSubArraySum ( a , n ) ;"}
{"text":"Maximum value","code":"return 2 * X - S ; }"}
{"text":"Driver Code","code":"int main ( ) { int a [ ] = { -1 , -2 , -3 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; int max_sum = maxSum ( a , n ) ; cout << max_sum ; return 0 ; }"}
{"text":"C ++ program to find the number of interesting primes up to N","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if a number is prime or not","code":"bool isPrime ( int n ) { int flag = 1 ;"}
{"text":"If n is divisible by any number between 2 and sqrt ( n ) , it is not prime","code":"for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { flag = 0 ; break ; } } return ( flag == 1 ? true : false ) ; }"}
{"text":"Function to check if a number is perfect square or not","code":"bool isPerfectSquare ( int x ) {"}
{"text":"Find floating point value of square root of x .","code":"long double sr = sqrt ( x ) ;"}
{"text":"If square root is an integer","code":"return ( ( sr - floor ( sr ) ) == 0 ) ; }"}
{"text":"Function to find the number of interesting primes less than equal to N .","code":"int countInterestingPrimes ( int n ) { int answer = 0 ; for ( int i = 2 ; i <= n ; i ++ ) {"}
{"text":"Check whether the number is prime or not","code":"if ( isPrime ( i ) ) {"}
{"text":"Iterate for values of b","code":"for ( int j = 1 ; j * j * j * j <= i ; j ++ ) {"}
{"text":"Check condition for a","code":"if ( isPerfectSquare ( i - j * j * j * j ) ) { answer ++ ; break ; } } } }"}
{"text":"Return the required answer","code":"return answer ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 10 ; cout << countInterestingPrimes ( N ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to convert decimal number n to its binary representation stored as an array arr [ ]","code":"void decBinary ( int arr [ ] , int n ) { int k = log2 ( n ) ; while ( n > 0 ) { arr [ k -- ] = n % 2 ; n \/= 2 ; } }"}
{"text":"Function to convert the number represented as a binary array arr [ ] into its decimal equivalent","code":"int binaryDec ( int arr [ ] , int n ) { int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) ans += arr [ i ] << ( n - i - 1 ) ; return ans ; }"}
{"text":"Function to return the maximized number by flipping atmost k bits","code":"int maxNum ( int n , int k ) {"}
{"text":"Number of bits in n","code":"int l = log2 ( n ) + 1 ;"}
{"text":"Find the binary representation of n","code":"int a [ l ] = { 0 } ; decBinary ( a , n ) ;"}
{"text":"To count the number of 0 s flipped","code":"int cn = 0 ; for ( int i = 0 ; i < l ; i ++ ) { if ( a [ i ] == 0 && cn < k ) { a [ i ] = 1 ; cn ++ ; } }"}
{"text":"Return the decimal equivalent of the maximized number","code":"return binaryDec ( a , l ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 4 , k = 1 ; cout << maxNum ( n , k ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the required subsequence","code":"void findSubSeq ( int arr [ ] , int n , int sum ) { for ( int i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"Current element cannot be a part of the required subsequence","code":"if ( sum < arr [ i ] ) arr [ i ] = -1 ;"}
{"text":"Include current element in the required subsequence So update the sum","code":"else sum -= arr [ i ] ; }"}
{"text":"Print the elements of the required subsequence","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If the current element was included in the subsequence","code":"if ( arr [ i ] != -1 ) cout << arr [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 17 , 25 , 46 , 94 , 201 , 400 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; int sum = 272 ; findSubSeq ( arr , n , sum ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 26 ;"}
{"text":"Function to return the maximum valued alphabet","code":"char maxAlpha ( string str , int len ) {"}
{"text":"To store the first and the last occurrence of all the characters","code":"int first [ MAX ] , last [ MAX ] ;"}
{"text":"Set the first and the last occurrence of all the characters to - 1","code":"for ( int i = 0 ; i < MAX ; i ++ ) { first [ i ] = -1 ; last [ i ] = -1 ; }"}
{"text":"Update the occurrences of the characters","code":"for ( int i = 0 ; i < len ; i ++ ) { int index = ( str [ i ] - ' a ' ) ;"}
{"text":"Only set the first occurrence if it hasn 't already been set","code":"if ( first [ index ] == -1 ) first [ index ] = i ; last [ index ] = i ; }"}
{"text":"To store the result","code":"int ans = -1 , maxVal = -1 ;"}
{"text":"For every alphabet","code":"for ( int i = 0 ; i < MAX ; i ++ ) {"}
{"text":"If current alphabet doesn 't appear  in the given string","code":"if ( first [ i ] == -1 ) continue ;"}
{"text":"If the current character has the highest value so far","code":"if ( ( last [ i ] - first [ i ] ) > maxVal ) { maxVal = last [ i ] - first [ i ] ; ans = i ; } } return ( char ) ( ans + ' a ' ) ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" abbba \" ; int len = str . length ( ) ; cout << maxAlpha ( str , len ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  100001"}
{"text":"Function to perform queries to find number of distinct elements from a given index till last index in an array","code":"void find_distinct ( int a [ ] , int n , int q , int queries [ ] ) { int check [ MAX ] = { 0 } ; int idx [ MAX ] ; int cnt = 1 ; for ( int i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"Check if current element already visited or not","code":"if ( check [ a [ i ] ] == 0 ) {"}
{"text":"If not visited store current counter and increment it and mark check as 1","code":"idx [ i ] = cnt ; check [ a [ i ] ] = 1 ; cnt ++ ; } else {"}
{"text":"Otherwise if visited simply store current counter","code":"idx [ i ] = cnt - 1 ; } }"}
{"text":"Perform queries","code":"for ( int i = 0 ; i < q ; i ++ ) { int m = queries [ i ] ; cout << idx [ m ] << \" \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 1 , 2 , 3 , 1 , 2 , 3 , 4 , 5 } ; int n = sizeof ( a ) \/ sizeof ( int ) ; int queries [ ] = { 0 , 3 , 5 , 7 } ; int q = sizeof ( queries ) \/ sizeof ( int ) ; find_distinct ( a , n , q , queries ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 24 ;"}
{"text":"Function to return the count of operations required","code":"int countOp ( int x ) {"}
{"text":"To store the powers of 2","code":"int arr [ MAX ] ; arr [ 0 ] = 1 ; for ( int i = 1 ; i < MAX ; i ++ ) arr [ i ] = arr [ i - 1 ] * 2 ;"}
{"text":"Temporary variable to store x","code":"int temp = x ; bool flag = true ;"}
{"text":"To store the index of smaller number larger than x","code":"int ans ;"}
{"text":"To store the count of operations","code":"int operations = 0 ; bool flag2 = false ; for ( int i = 0 ; i < MAX ; i ++ ) { if ( arr [ i ] - 1 == x ) flag2 = true ;"}
{"text":"Stores the index of number in the form of 2 ^ n - 1","code":"if ( arr [ i ] > x ) { ans = i ; break ; } }"}
{"text":"If x is already in the form 2 ^ n - 1 then no operation is required","code":"if ( flag2 ) return 0 ; while ( flag ) {"}
{"text":"If number is less than x increase the index","code":"if ( arr [ ans ] < x ) ans ++ ; operations ++ ;"}
{"text":"Calculate all the values ( x xor 2 ^ n - 1 ) for all possible n","code":"for ( int i = 0 ; i < MAX ; i ++ ) { int take = x ^ ( arr [ i ] - 1 ) ; if ( take <= arr [ ans ] - 1 ) {"}
{"text":"Only take value which is closer to the number","code":"if ( take > temp ) temp = take ; } }"}
{"text":"If number is in the form of 2 ^ n - 1 then break","code":"if ( temp == arr [ ans ] - 1 ) { flag = false ; break ; } temp ++ ; operations ++ ; x = temp ; if ( x == arr [ ans ] - 1 ) flag = false ; }"}
{"text":"Return the count of operations required to obtain the number","code":"return operations ; }"}
{"text":"Driver code","code":"int main ( ) { int x = 39 ; cout << countOp ( x ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the minimum operations required","code":"int minOperations ( int * arr , int n ) { int maxi , result = 0 ;"}
{"text":"Count the frequency of each element","code":"vector < int > freq ( 1000001 , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ; freq [ x ] ++ ; }"}
{"text":"Maximum element from the array","code":"maxi = * ( max_element ( arr , arr + n ) ) ; for ( int i = 1 ; i <= maxi ; i ++ ) { if ( freq [ i ] != 0 ) {"}
{"text":"Find all the multiples of i","code":"for ( int j = i * 2 ; j <= maxi ; j = j + i ) {"}
{"text":"Delete the multiples","code":"freq [ j ] = 0 ; }"}
{"text":"Increment the operations","code":"result ++ ; } } return result ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 2 , 4 , 4 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << minOperations ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return minimum GCD among all subarrays","code":"int minGCD ( int arr [ ] , int n ) { int minGCD = 0 ;"}
{"text":"Minimum GCD among all sub - arrays will be the GCD of all the elements of the array","code":"for ( int i = 0 ; i < n ; i ++ ) minGCD = __gcd ( minGCD , arr [ i ] ) ; return minGCD ; }"}
{"text":"Function to return minimum LCM among all subarrays","code":"int minLCM ( int arr [ ] , int n ) { int minLCM = arr [ 0 ] ;"}
{"text":"Minimum LCM among all sub - arrays will be the minimum element from the array","code":"for ( int i = 1 ; i < n ; i ++ ) minLCM = min ( minLCM , arr [ i ] ) ; return minLCM ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 66 , 14 , 521 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" LCM \u2581 = \u2581 \" << minLCM ( arr , n ) << \" , \u2581 GCD \u2581 = \u2581 \" << minGCD ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns the modified lexicographically smallest string after performing minimum number of given operations","code":"string formStringMinOperations ( string s ) {"}
{"text":"Stores the initial frequencies of characters 0 s , 1 s and 2 s","code":"int count [ 3 ] = { 0 } ; for ( auto & c : s ) count ++ ;"}
{"text":"Stores number of processed characters upto that point of each type","code":"int processed [ 3 ] = { 0 } ;"}
{"text":"Required number of characters of each type","code":"int reqd = ( int ) s . size ( ) \/ 3 ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) {"}
{"text":"If the current type has already reqd number of characters , no need to perform any operation","code":"if ( count [ s [ i ] - '0' ] == reqd ) continue ;"}
{"text":"Process all 3 cases","code":"if ( s [ i ] == '0' && count [ 0 ] > reqd && processed [ 0 ] >= reqd ) {"}
{"text":"Check for 1 first","code":"if ( count [ 1 ] < reqd ) { s [ i ] = '1' ; count [ 1 ] ++ ; count [ 0 ] -- ; }"}
{"text":"Else 2","code":"else if ( count [ 2 ] < reqd ) { s [ i ] = '2' ; count [ 2 ] ++ ; count [ 0 ] -- ; } }"}
{"text":"Here we need to check processed [ 1 ] only for 2 since 0 is less than 1 and we can replace it anytime","code":"if ( s [ i ] == '1' && count [ 1 ] > reqd ) { if ( count [ 0 ] < reqd ) { s [ i ] = '0' ; count [ 0 ] ++ ; count [ 1 ] -- ; } else if ( count [ 2 ] < reqd && processed [ 1 ] >= reqd ) { s [ i ] = '2' ; count [ 2 ] ++ ; count [ 1 ] -- ; } }"}
{"text":"Here we can replace 2 with 0 and 1 anytime","code":"if ( s [ i ] == '2' && count [ 2 ] > reqd ) { if ( count [ 0 ] < reqd ) { s [ i ] = '0' ; count [ 0 ] ++ ; count [ 2 ] -- ; } else if ( count [ 1 ] < reqd ) { s [ i ] = '1' ; count [ 1 ] ++ ; count [ 2 ] -- ; } }"}
{"text":"keep count of processed characters of each type","code":"processed [ s [ i ] - '0' ] ++ ; } return s ; }"}
{"text":"Driver Code","code":"int main ( ) { string s = \"011200\" ; cout << formStringMinOperations ( s ) ; return 0 ; }"}
{"text":"C ++ Program to find the minimum number of adjacent swaps to arrange similar items together","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum swaps","code":"int findMinimumAdjacentSwaps ( int arr [ ] , int N ) {"}
{"text":"visited array to check if value is seen already","code":"bool visited [ N + 1 ] ; int minimumSwaps = 0 ; memset ( visited , false , sizeof ( visited ) ) ; for ( int i = 0 ; i < 2 * N ; i ++ ) {"}
{"text":"If the arr [ i ] is seen first time","code":"if ( visited [ arr [ i ] ] == false ) { visited [ arr [ i ] ] = true ;"}
{"text":"stores the number of swaps required to find the correct position of current element 's partner","code":"int count = 0 ; for ( int j = i + 1 ; j < 2 * N ; j ++ ) {"}
{"text":"Increment count only if the current element has not been visited yet ( if is visited , means it has already been placed at its correct position )","code":"if ( visited [ arr [ j ] ] == false ) count ++ ;"}
{"text":"If current element 's partner is found","code":"else if ( arr [ i ] == arr [ j ] ) minimumSwaps += count ; } } } return minimumSwaps ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 3 , 1 , 2 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; N \/= 2 ; cout << findMinimumAdjacentSwaps ( arr , N ) << endl ; return 0 ; }"}
{"text":"CPP program to print the largest palindromic number by permuting digits of a number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check if a number can be permuted to form a palindrome number","code":"bool possibility ( unordered_map < int , int > m , int length , string s ) {"}
{"text":"counts the occurrence of number which is odd","code":"int countodd = 0 ; for ( int i = 0 ; i < length ; i ++ ) {"}
{"text":"if occurrence is odd","code":"if ( m [ s [ i ] - '0' ] & 1 ) countodd ++ ;"}
{"text":"if number exceeds 1","code":"if ( countodd > 1 ) return false ; } return true ; }"}
{"text":"function to print the largest palindromic number by permuting digits of a number","code":"void largestPalindrome ( string s ) {"}
{"text":"string length","code":"int l = s . length ( ) ;"}
{"text":"map that marks the occurrence of a number","code":"unordered_map < int , int > m ; for ( int i = 0 ; i < l ; i ++ ) m [ s [ i ] - '0' ] ++ ;"}
{"text":"check the possibility of a palindromic number","code":"if ( possibility ( m , l , s ) == false ) { cout << \" Palindrome \u2581 cannot \u2581 be \u2581 formed \" ; return ; }"}
{"text":"string array that stores the largest permuted palindromic number","code":"char largest [ l ] ;"}
{"text":"pointer of front","code":"int front = 0 ;"}
{"text":"greedily start from 9 to 0 and place the greater number in front and odd in the middle","code":"for ( int i = 9 ; i >= 0 ; i -- ) {"}
{"text":"if the occurrence of number is odd","code":"if ( m [ i ] & 1 ) {"}
{"text":"place one odd occurring number in the middle","code":"largest [ l \/ 2 ] = char ( i + 48 ) ;"}
{"text":"decrease the count","code":"m [ i ] -- ;"}
{"text":"place the rest of numbers greedily","code":"while ( m [ i ] > 0 ) { largest [ front ] = char ( i + 48 ) ; largest [ l - front - 1 ] = char ( i + 48 ) ; m [ i ] -= 2 ; front ++ ; } } else {"}
{"text":"if all numbers occur even times , then place greedily","code":"while ( m [ i ] > 0 ) {"}
{"text":"place greedily at front","code":"largest [ front ] = char ( i + 48 ) ; largest [ l - front - 1 ] = char ( i + 48 ) ;"}
{"text":"2 numbers are placed , so decrease the count","code":"m [ i ] -= 2 ;"}
{"text":"increase placing position","code":"front ++ ; } } }"}
{"text":"print the largest string thus formed","code":"for ( int i = 0 ; i < l ; i ++ ) cout << largest [ i ] ; }"}
{"text":"Driver Code","code":"int main ( ) { string s = \"313551\" ; largestPalindrome ( s ) ; return 0 ; }"}
{"text":"C ++ program to count swaps required to balance string","code":"#include <iostream> NEW_LINE #include <vector> NEW_LINE #include <algorithm> NEW_LINE using namespace std ;"}
{"text":"Function to calculate swaps required","code":"long swapCount ( string s ) {"}
{"text":"Keep track of ' [ '","code":"vector < int > pos ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) if ( s [ i ] == ' [ ' ) pos . push_back ( i ) ;"}
{"text":"To count number of encountered ' [ '","code":"int count = 0 ;"}
{"text":"To track position of next ' [ ' in pos","code":"int p = 0 ;"}
{"text":"To store result","code":"long sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) {"}
{"text":"Increment count and move p to next position","code":"if ( s [ i ] == ' [ ' ) { ++ count ; ++ p ; } else if ( s [ i ] == ' ] ' ) -- count ;"}
{"text":"We have encountered an unbalanced part of string","code":"if ( count < 0 ) {"}
{"text":"Increment sum by number of swaps required i . e . position of next ' [ ' - current position","code":"sum += pos [ p ] - i ; swap ( s [ i ] , s [ pos [ p ] ] ) ; ++ p ;"}
{"text":"Reset count to 1","code":"count = 1 ; } } return sum ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \" [ ] ] [ ] [ \" ; cout << swapCount ( s ) << \" STRNEWLINE \" ; s = \" [ [ ] [ ] ] \" ; cout << swapCount ( s ) << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program to divide a board into m * n squares","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"method returns minimum cost to break board into m * n squares","code":"int minimumCostOfBreaking ( int X [ ] , int Y [ ] , int m , int n ) { int res = 0 ;"}
{"text":"sort the horizontal cost in reverse order","code":"sort ( X , X + m , greater < int > ( ) ) ;"}
{"text":"sort the vertical cost in reverse order","code":"sort ( Y , Y + n , greater < int > ( ) ) ;"}
{"text":"initialize current width as 1","code":"int hzntl = 1 , vert = 1 ;"}
{"text":"loop until one or both cost array are processed","code":"int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( X [ i ] > Y [ j ] ) { res += X [ i ] * vert ;"}
{"text":"increase current horizontal part count by 1","code":"hzntl ++ ; i ++ ; } else { res += Y [ j ] * hzntl ;"}
{"text":"increase current vertical part count by 1","code":"vert ++ ; j ++ ; } }"}
{"text":"loop for horizontal array , if remains","code":"int total = 0 ; while ( i < m ) total += X [ i ++ ] ; res += total * vert ;"}
{"text":"loop for vertical array , if remains","code":"total = 0 ; while ( j < n ) total += Y [ j ++ ] ; res += total * hzntl ; return res ; }"}
{"text":"Driver code to test above methods","code":"int main ( ) { int m = 6 , n = 4 ; int X [ m - 1 ] = { 2 , 1 , 3 , 1 , 4 } ; int Y [ n - 1 ] = { 4 , 1 , 2 } ; cout << minimumCostOfBreaking ( X , Y , m - 1 , n - 1 ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum of the three numbers","code":"int getMin ( int x , int y , int z ) { return min ( min ( x , y ) , z ) ; }"}
{"text":"Function to find the minimum number operations required to convert string str1 to str2 using the operations","code":"int editDistance ( string str1 , string str2 , int m , int n ) {"}
{"text":"Stores the results of subproblems","code":"int dp [ m + 1 ] [ n + 1 ] ;"}
{"text":"Fill dp [ ] [ ] in bottom up manner","code":"for ( int i = 0 ; i <= m ; i ++ ) { for ( int j = 0 ; j <= n ; j ++ ) {"}
{"text":"If str1 is empty , then insert all characters of string str2","code":"if ( i == 0 )"}
{"text":"Minimum operations is j","code":"dp [ i ] [ j ] = j ;"}
{"text":"If str2 is empty , then remove all characters of string str2","code":"else if ( j == 0 )"}
{"text":"Minimum operations is i","code":"dp [ i ] [ j ] = i ;"}
{"text":"If the last characters are same , then ignore last character","code":"else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;"}
{"text":"If the last character is different , then find the minimum","code":"else {"}
{"text":"Perform one of the insert , remove and the replace","code":"dp [ i ] [ j ] = 1 + getMin ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ; } } }"}
{"text":"Return the minimum number of steps required","code":"return dp [ m ] [ n ] ; }"}
{"text":"Function to find the minimum number of steps to modify the string such that first half and second half becomes the same","code":"void minimumSteps ( string & S , int N ) {"}
{"text":"Stores the minimum number of operations required","code":"int ans = INT_MAX ;"}
{"text":"Traverse the given string S","code":"for ( int i = 1 ; i < N ; i ++ ) { string S1 = S . substr ( 0 , i ) ; string S2 = S . substr ( i ) ;"}
{"text":"Find the minimum operations","code":"int count = editDistance ( S1 , S2 , S1 . length ( ) , S2 . length ( ) ) ;"}
{"text":"Update the ans","code":"ans = min ( ans , count ) ; }"}
{"text":"Print the result","code":"cout << ans << ' ' }"}
{"text":"Driver Code","code":"int main ( ) { string S = \" aabb \" ; int N = S . length ( ) ; minimumSteps ( S , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of operations to reduce N to 2 by dividing N by 5 or decrementing by 3","code":"int minimumOperations ( int N ) {"}
{"text":"Initialize the dp array","code":"int dp [ N + 1 ] ; int i ;"}
{"text":"Initialize the array dp [ ]","code":"for ( int i = 0 ; i <= N ; i ++ ) { dp [ i ] = 1e9 ; }"}
{"text":"For N = 2 number of operations needed is zero","code":"dp [ 2 ] = 0 ;"}
{"text":"Iterating over the range [ 1 , N ]","code":"for ( i = 2 ; i <= N ; i ++ ) {"}
{"text":"If it 's not possible to  create current N","code":"if ( dp [ i ] == 1e9 ) continue ;"}
{"text":"Multiply with 5","code":"if ( i * 5 <= N ) { dp [ i * 5 ] = min ( dp [ i * 5 ] , dp [ i ] + 1 ) ; }"}
{"text":"Adding the value 3","code":"if ( i + 3 <= N ) { dp [ i + 3 ] = min ( dp [ i + 3 ] , dp [ i ] + 1 ) ; } }"}
{"text":"Checking if not possible to make the number as 2","code":"if ( dp [ N ] == 1e9 ) return -1 ;"}
{"text":"Return the minimum number of operations","code":"return dp [ N ] ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 25 ; cout << minimumOperations ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the maximum profit with transaction fee","code":"int MaxProfit ( int arr [ ] , int n , int transactionFee ) { int buy = - arr [ 0 ] ; int sell = 0 ;"}
{"text":"Traversing the stocks for each day","code":"for ( int i = 1 ; i < n ; i ++ ) { int temp = buy ;"}
{"text":"Update buy and sell","code":"buy = max ( buy , sell - arr [ i ] ) ; sell = max ( sell , temp + arr [ i ] - transactionFee ) ; }"}
{"text":"Return the maximum profit","code":"return max ( sell , buy ) ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Given Input","code":"int arr [ ] = { 6 , 1 , 7 , 2 , 8 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int transactionFee = 2 ;"}
{"text":"Function Call","code":"cout << MaxProfit ( arr , n , transactionFee ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Stores the maximum path sum from the cell ( 1 , 1 ) to ( N , M )","code":"int start [ 3 ] [ 3 ] ;"}
{"text":"Stores the maximum path sum from the cell ( j , j ) to ( N , M )","code":"int ending [ 3 ] [ 3 ] ;"}
{"text":"Function to find the maximum path sum from the cell ( 1 , 1 ) to ( N , M )","code":"void calculateStart ( int n , int m ) {"}
{"text":"Traverse the first row","code":"for ( int i = 1 ; i < m ; ++ i ) { start [ 0 ] [ i ] += start [ 0 ] [ i - 1 ] ; }"}
{"text":"Traverse the first column","code":"for ( int i = 1 ; i < n ; ++ i ) { start [ i ] [ 0 ] += start [ i - 1 ] [ 0 ] ; }"}
{"text":"Traverse the matrix","code":"for ( int i = 1 ; i < n ; ++ i ) { for ( int j = 1 ; j < m ; ++ j ) {"}
{"text":"Update the value of start [ i ] [ j ]","code":"start [ i ] [ j ] += max ( start [ i - 1 ] [ j ] , start [ i ] [ j - 1 ] ) ; } } }"}
{"text":"Function to find the maximum path sum from the cell ( j , j ) to ( N , M )","code":"void calculateEnd ( int n , int m ) {"}
{"text":"Traverse the last row","code":"for ( int i = n - 2 ; i >= 0 ; -- i ) { ending [ i ] [ m - 1 ] += ending [ i + 1 ] [ m - 1 ] ; }"}
{"text":"Traverse the last column","code":"for ( int i = m - 2 ; i >= 0 ; -- i ) { ending [ n - 1 ] [ i ] += ending [ n - 1 ] [ i + 1 ] ; }"}
{"text":"Traverse the matrix","code":"for ( int i = n - 2 ; i >= 0 ; -- i ) { for ( int j = m - 2 ; j >= 0 ; -- j ) {"}
{"text":"Update the value of ending [ i ] [ j ]","code":"ending [ i ] [ j ] += max ( ending [ i + 1 ] [ j ] , ending [ i ] [ j + 1 ] ) ; } } }"}
{"text":"Function to find the maximum path sum from the top - left to the bottom right cell such that path contains one of the cells in the array coordinates [ ] [ ]","code":"void maximumPathSum ( int mat [ ] [ 3 ] , int n , int m , int q , int coordinates [ ] [ 2 ] ) {"}
{"text":"Initialize the start and the end matrices","code":"for ( int i = 0 ; i < n ; ++ i ) { for ( int j = 0 ; j < m ; ++ j ) { start [ i ] [ j ] = mat [ i ] [ j ] ; ending [ i ] [ j ] = mat [ i ] [ j ] ; } }"}
{"text":"Calculate the start matrix","code":"calculateStart ( n , m ) ;"}
{"text":"Calculate the end matrix","code":"calculateEnd ( n , m ) ;"}
{"text":"Stores the maximum path sum","code":"int ans = 0 ;"}
{"text":"Traverse the coordinates","code":"for ( int i = 0 ; i < q ; ++ i ) { int X = coordinates [ i ] [ 0 ] - 1 ; int Y = coordinates [ i ] [ 1 ] - 1 ;"}
{"text":"Update the value of ans","code":"ans = max ( ans , start [ X ] [ Y ] + ending [ X ] [ Y ] - mat [ X ] [ Y ] ) ; }"}
{"text":"Print the resultant maximum sum path value","code":"cout << ans ; }"}
{"text":"Drive Code","code":"int main ( ) { int mat [ ] [ 3 ] = { { 1 , 2 , 3 } , { 4 , 5 , 6 } , { 7 , 8 , 9 } } ; int N = 3 ; int M = 3 ; int Q = 2 ; int coordinates [ ] [ 2 ] = { { 1 , 2 } , { 2 , 2 } } ; maximumPathSum ( mat , N , M , Q , coordinates ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the length of the longest subset of an array of strings with at most A 0 s and B 1 s","code":"int MaxSubsetlength ( vector < string > arr , int A , int B ) {"}
{"text":"Initialize a 2D array with its entries as 0","code":"int dp [ A + 1 ] [ B + 1 ] ; memset ( dp , 0 , sizeof ( dp ) ) ;"}
{"text":"Traverse the given array","code":"for ( auto & str : arr ) {"}
{"text":"Store the count of 0 s and 1 s in the current string","code":"int zeros = count ( str . begin ( ) , str . end ( ) , '0' ) ; int ones = count ( str . begin ( ) , str . end ( ) , '1' ) ;"}
{"text":"Iterate in the range [ A , zeros ]","code":"for ( int i = A ; i >= zeros ; i -- )"}
{"text":"Iterate in the range [ B , ones ]","code":"for ( int j = B ; j >= ones ; j -- )"}
{"text":"Update the value of dp [ i ] [ j ]","code":"dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - zeros ] [ j - ones ] + 1 ) ; }"}
{"text":"Print the result","code":"return dp [ A ] [ B ] ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < string > arr = { \"1\" , \"0\" , \"0001\" , \"10\" , \"111001\" } ; int A = 5 , B = 3 ; cout << MaxSubsetlength ( arr , A , B ) ; return 0 ; }"}
{"text":"C ++ 14 program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count ways to select N distinct pairs of candies with different colours","code":"int numOfWays ( vector < vector < int > > a , int n , int i , set < int > & blue ) {"}
{"text":"If n pairs are selected","code":"if ( i == n ) return 1 ;"}
{"text":"Stores count of ways to select the i - th pair","code":"int count = 0 ;"}
{"text":"Iterate over the range [ 0 , n ]","code":"for ( int j = 0 ; j < n ; j ++ ) {"}
{"text":"If pair ( i , j ) is not included","code":"if ( a [ i ] [ j ] == 1 && blue . find ( j ) == blue . end ( ) ) { blue . insert ( j ) ; count += numOfWays ( a , n , i + 1 , blue ) ; blue . erase ( j ) ; } } return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; vector < vector < int > > mat = { { 0 , 1 , 1 } , { 1 , 0 , 1 } , { 1 , 1 , 1 } } ; set < int > mpp ; cout << ( numOfWays ( mat , n , 0 , mpp ) ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum cost to reach the end of an array","code":"void minCost ( int arr [ ] , int n ) {"}
{"text":"Base Case : When N < 3","code":"if ( n < 3 ) { cout << arr [ 0 ] ; return ; }"}
{"text":"Store the results in table","code":"int * dp = new int [ n ] ;"}
{"text":"Initialize base cases","code":"dp [ 0 ] = arr [ 0 ] ; dp [ 1 ] = dp [ 0 ] + arr [ 1 ] + arr [ 2 ] ;"}
{"text":"Iterate over the range [ 2 , N - 2 ] to construct the dp array","code":"for ( int i = 2 ; i < n - 1 ; i ++ ) dp [ i ] = min ( dp [ i - 2 ] + arr [ i ] , dp [ i - 1 ] + arr [ i ] + arr [ i + 1 ] ) ;"}
{"text":"Handle case for the last index , i . e . N - 1","code":"dp [ n - 1 ] = min ( dp [ n - 2 ] , dp [ n - 3 ] + arr [ n - 1 ] ) ;"}
{"text":"Print the answer","code":"cout << dp [ n - 1 ] ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 9 , 4 , 6 , 8 , 5 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; minCost ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define M  1000000007"}
{"text":"Function to find the value of power ( X , Y ) in O ( log Y )","code":"long long power ( long long X , long long Y ) {"}
{"text":"Stores power ( X , Y )","code":"long long res = 1 ;"}
{"text":"Update X","code":"X = X % M ;"}
{"text":"Base Case","code":"if ( X == 0 ) return 0 ;"}
{"text":"Calculate power ( X , Y )","code":"while ( Y > 0 ) {"}
{"text":"If Y is an odd number","code":"if ( Y & 1 ) {"}
{"text":"Update res","code":"res = ( res * X ) % M ; }"}
{"text":"Update Y","code":"Y = Y >> 1 ;"}
{"text":"Update X","code":"X = ( X * X ) % M ; } return res ; }"}
{"text":"Function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )","code":"int findValue ( long long int n ) {"}
{"text":"Stores binary representation of n","code":"long long X = 0 ;"}
{"text":"Stores power of 10","code":"long long pow_10 = 1 ;"}
{"text":"Calculate the binary representation of n","code":"while ( n ) {"}
{"text":"If n is an odd number","code":"if ( n & 1 ) {"}
{"text":"Update X","code":"X += pow_10 ; }"}
{"text":"Update pow_10","code":"pow_10 *= 10 ;"}
{"text":"Update n","code":"n \/= 2 ; }"}
{"text":"Double the value of X","code":"X = ( X * 2 ) % M ;"}
{"text":"Stores the value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )","code":"long long res = power ( 2 , X ) ; return res ; }"}
{"text":"Driver Code","code":"int main ( ) { long long n = 2 ; cout << findValue ( n ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define M  1000000007"}
{"text":"Function to find the value of power ( X , Y ) in O ( log Y )","code":"long long power ( long long X , long long Y ) {"}
{"text":"Stores power ( X , Y )","code":"long long res = 1 ;"}
{"text":"Update X","code":"X = X % M ;"}
{"text":"Base Case","code":"if ( X == 0 ) return 0 ;"}
{"text":"Calculate power ( X , Y )","code":"while ( Y > 0 ) {"}
{"text":"If Y is an odd number","code":"if ( Y & 1 ) {"}
{"text":"Update res","code":"res = ( res * X ) % M ; }"}
{"text":"Update Y","code":"Y = Y >> 1 ;"}
{"text":"Update X","code":"X = ( X * X ) % M ; } return res ; }"}
{"text":"Function to calculate ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )","code":"long long findValue ( long long N ) {"}
{"text":"dp [ N ] * dp [ N ] : Stores value of ( 2 ^ ( 2 * x ) ) % ( 10 ^ 9 + 7 )","code":"long long dp [ N + 1 ] ;"}
{"text":"Base Case","code":"dp [ 1 ] = 2 ; dp [ 2 ] = 1024 ;"}
{"text":"Iterate over the range [ 3 , N ]","code":"for ( int i = 3 ; i <= N ; i ++ ) {"}
{"text":"Stores rightmost bit of i","code":"int y = ( i & ( - i ) ) ;"}
{"text":"Stores the value of ( i - y )","code":"int x = i - y ;"}
{"text":"If x is power of 2","code":"if ( x == 0 ) {"}
{"text":"Update dp [ i ]","code":"dp [ i ] = power ( dp [ i \/ 2 ] , 10 ) ; } else {"}
{"text":"Update dp [ i ]","code":"dp [ i ] = ( dp [ x ] * dp [ y ] ) % M ; } } return ( dp [ N ] * dp [ N ] ) % M ; }"}
{"text":"Driver Code","code":"int main ( ) { long long n = 150 ; cout << findValue ( n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the number of ways to get the sum N with throw of dice","code":"int findWays ( int N ) {"}
{"text":"Base Case","code":"if ( N == 0 ) { return 1 ; }"}
{"text":"Stores the count of total number of ways to get sum N","code":"int cnt = 0 ;"}
{"text":"Recur for all 6 states","code":"for ( int i = 1 ; i <= 6 ; i ++ ) { if ( N - i >= 0 ) { cnt = cnt + findWays ( N - i ) ; } }"}
{"text":"Return answer","code":"return cnt ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 4 ;"}
{"text":"Function call","code":"cout << findWays ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to check array can be partition to 3 subsequences of equal sum or not","code":"int checkEqualSumUtil ( int arr [ ] , int N , int sm1 , int sm2 , int sm3 , int j ) {"}
{"text":"Base Case","code":"if ( j == N ) { if ( sm1 == sm2 && sm2 == sm3 ) return 1 ; else return 0 ; } else {"}
{"text":"When element at index j is added to sm1","code":"int l = checkEqualSumUtil ( arr , N , sm1 + arr [ j ] , sm2 , sm3 , j + 1 ) ;"}
{"text":"When element at index j is added to sm2","code":"int m = checkEqualSumUtil ( arr , N , sm1 , sm2 + arr [ j ] , sm3 , j + 1 ) ;"}
{"text":"When element at index j is added to sm3","code":"int r = checkEqualSumUtil ( arr , N , sm1 , sm2 , sm3 + arr [ j ] , j + 1 ) ;"}
{"text":"Return maximum value among all above 3 recursive call","code":"return max ( max ( l , m ) , r ) ; } }"}
{"text":"Function to check array can be partition to 3 subsequences of equal sum or not","code":"void checkEqualSum ( int arr [ ] , int N ) {"}
{"text":"Initialise 3 sums to 0","code":"int sum1 , sum2 , sum3 ; sum1 = sum2 = sum3 = 0 ;"}
{"text":"Function Call","code":"if ( checkEqualSumUtil ( arr , N , sum1 , sum2 , sum3 , 0 ) == 1 ) { cout << \" Yes \" ; } else { cout << \" No \" ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array arr [ ]","code":"int arr [ ] = { 17 , 34 , 59 , 23 , 17 , 67 , 57 , 2 , 18 , 59 , 1 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"checkEqualSum ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; map < string , int > dp ;"}
{"text":"Function to check array can be partition into sum of 3 equal","code":"int checkEqualSumUtil ( int arr [ ] , int N , int sm1 , int sm2 , int sm3 , int j ) { string s = to_string ( sm1 ) + \" _ \" + to_string ( sm2 ) + to_string ( j ) ;"}
{"text":"Base Case","code":"if ( j == N ) { if ( sm1 == sm2 && sm2 == sm3 ) return 1 ; else return 0 ; }"}
{"text":"If value at particular index is not - 1 then return value at that index which ensure no more further calls","code":"if ( dp . find ( s ) != dp . end ( ) ) return dp [ s ] ; else {"}
{"text":"When element at index j is added to sm1","code":"int l = checkEqualSumUtil ( arr , N , sm1 + arr [ j ] , sm2 , sm3 , j + 1 ) ;"}
{"text":"When element at index j is added to sm2","code":"int m = checkEqualSumUtil ( arr , N , sm1 , sm2 + arr [ j ] , sm3 , j + 1 ) ;"}
{"text":"When element at index j is added to sm3","code":"int r = checkEqualSumUtil ( arr , N , sm1 , sm2 , sm3 + arr [ j ] , j + 1 ) ;"}
{"text":"Update the current state and return that value","code":"return dp [ s ] = max ( max ( l , m ) , r ) ; } }"}
{"text":"Function to check array can be partition to 3 subsequences of equal sum or not","code":"void checkEqualSum ( int arr [ ] , int N ) {"}
{"text":"Initialise 3 sums to 0","code":"int sum1 , sum2 , sum3 ; sum1 = sum2 = sum3 = 0 ;"}
{"text":"Function Call","code":"if ( checkEqualSumUtil ( arr , N , sum1 , sum2 , sum3 , 0 ) == 1 ) { cout << \" Yes \" ; } else { cout << \" No \" ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array arr [ ]","code":"int arr [ ] = { 17 , 34 , 59 , 23 , 17 , 67 , 57 , 2 , 18 , 59 , 1 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"checkEqualSum ( arr , N ) ; return 0 ; }"}
{"text":"C ++ Program to find the smallest index in the array in the range [ L , R ] which does not contain X","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Precompute the index of next different element in the array for every array element","code":"void precompute ( int nextpos [ ] , int arr [ ] , int N ) {"}
{"text":"Default value","code":"nextpos [ N - 1 ] = N ; for ( int i = N - 2 ; i >= 0 ; i -- ) {"}
{"text":"Compute nextpos [ i ] using nextpos [ i + 1 ]","code":"if ( arr [ i ] == arr [ i + 1 ] ) nextpos [ i ] = nextpos [ i + 1 ] ; else nextpos [ i ] = i + 1 ; } }"}
{"text":"Function to return the smallest index","code":"void findIndex ( int query [ ] [ 3 ] , int arr [ ] , int N , int Q ) {"}
{"text":"nextpos [ i ] will store the next position p where arr [ p ] != arr [ i ]","code":"int nextpos [ N ] ; precompute ( nextpos , arr , N ) ; for ( int i = 0 ; i < Q ; i ++ ) { int l , r , x ; l = query [ i ] [ 0 ] ; r = query [ i ] [ 1 ] ; x = query [ i ] [ 2 ] ; int ans = -1 ;"}
{"text":"If X is not present at l","code":"if ( arr [ l ] != x ) ans = l ;"}
{"text":"Otherwise","code":"else {"}
{"text":"Find the index which stores a value different from X","code":"int d = nextpos [ l ] ;"}
{"text":"If that index is within the range","code":"if ( d <= r ) ans = d ; } cout << ans << \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N , Q ; N = 6 ; Q = 3 ; int arr [ ] = { 1 , 2 , 1 , 1 , 3 , 5 } ; int query [ Q ] [ 3 ] = { { 0 , 3 , 1 } , { 1 , 5 , 2 } , { 2 , 3 , 1 } } ; findIndex ( query , arr , N , Q ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define mod  10000000007"}
{"text":"Function to count number of ways to convert string S to string T by performing K cyclic shifts","code":"long long countWays ( string s , string t , int k ) {"}
{"text":"Calculate length of string","code":"int n = s . size ( ) ;"}
{"text":"' a ' is no of good cyclic shifts ' b ' is no of bad cyclic shifts","code":"int a = 0 , b = 0 ;"}
{"text":"Iterate in the string","code":"for ( int i = 0 ; i < n ; i ++ ) { string p = s . substr ( i , n - i ) + s . substr ( 0 , i ) ;"}
{"text":"Precompute the number of good and bad cyclic shifts","code":"if ( p == t ) a ++ ; else b ++ ; }"}
{"text":"dp2 [ i ] to store the no of ways to get to a bad shift in i moves","code":"vector < long long > dp1 ( k + 1 ) , dp2 ( k + 1 ) ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; }"}
{"text":"Calculate good and bad shifts","code":"for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; }"}
{"text":"Return the required number of ways","code":"return dp1 [ k ] ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Strings","code":"string S = \" ab \" , T = \" ab \" ;"}
{"text":"Given K shifts required","code":"int K = 2 ;"}
{"text":"Function Call","code":"cout << countWays ( S , T , K ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum operations","code":"int minOperation ( int k ) {"}
{"text":"vector dp is initialised to store the steps","code":"vector < int > dp ( k + 1 , 0 ) ; for ( int i = 1 ; i <= k ; i ++ ) { dp [ i ] = dp [ i - 1 ] + 1 ;"}
{"text":"For all even numbers","code":"if ( i % 2 == 0 ) { dp [ i ] = min ( dp [ i ] , dp [ i \/ 2 ] + 1 ) ; } } return dp [ k ] ; }"}
{"text":"Driver Code","code":"int main ( ) { int K = 12 ; cout << minOperation ( k ) ; }"}
{"text":"CPP implementation for the above mentioned recursive approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the maximum subset sum","code":"int maxSum ( int p0 , int p1 , int a [ ] , int pos , int n ) { if ( pos == n ) { if ( p0 == p1 ) return p0 ; else return 0 ; }"}
{"text":"Ignore the current element","code":"int ans = maxSum ( p0 , p1 , a , pos + 1 , n ) ;"}
{"text":"including element in partition 1","code":"ans = max ( ans , maxSum ( p0 + a [ pos ] , p1 , a , pos + 1 , n ) ) ;"}
{"text":"including element in partition 2","code":"ans = max ( ans , maxSum ( p0 , p1 + a [ pos ] , a , pos + 1 , n ) ) ; return ans ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"size of the array","code":"int n = 4 ; int a [ n ] = { 1 , 2 , 3 , 6 } ; cout << maxSum ( 0 , 0 , a , 0 , n ) ; return 0 ; }"}
{"text":"CPP implementation for the above mentioned Dynamic Programming approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the maximum subset sum","code":"int maxSum ( int a [ ] , int n ) {"}
{"text":"sum of all elements","code":"int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += a [ i ] ; int limit = 2 * sum + 1 ;"}
{"text":"bottom up lookup table ;","code":"int dp [ n + 1 ] [ limit ] ;"}
{"text":"initialising dp table with INT_MIN where , INT_MIN means no solution","code":"for ( int i = 0 ; i < n + 1 ; i ++ ) { for ( int j = 0 ; j < limit ; j ++ ) dp [ i ] [ j ] = INT_MIN ; }"}
{"text":"Case when diff is 0","code":"dp [ 0 ] [ sum ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = 0 ; j < limit ; j ++ ) {"}
{"text":"Putting ith element in g0","code":"if ( ( j - a [ i - 1 ] ) >= 0 && dp [ i - 1 ] [ j - a [ i - 1 ] ] != INT_MIN ) dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j - a [ i - 1 ] ] + a [ i - 1 ] ) ;"}
{"text":"Putting ith element in g1","code":"if ( ( j + a [ i - 1 ] ) < limit && dp [ i - 1 ] [ j + a [ i - 1 ] ] != INT_MIN ) dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j + a [ i - 1 ] ] ) ;"}
{"text":"Ignoring ith element","code":"if ( dp [ i - 1 ] [ j ] != INT_MIN ) dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i - 1 ] [ j ] ) ; } } return dp [ n ] [ sum ] ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 4 ; int a [ n ] = { 1 , 2 , 3 , 6 } ; cout << maxSum ( a , n ) ; return 0 ; }"}
{"text":"C ++ program to count the different possible string form by replacing two same characters with one","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Array to find the fibonacci sequence","code":"int fib [ 100005 ] ;"}
{"text":"Function to find the fibonacci sequence","code":"void computeFibonacci ( ) { fib [ 0 ] = 1 ; fib [ 1 ] = 1 ; for ( int i = 2 ; i < 100005 ; i ++ ) { fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; } }"}
{"text":"Function to count all possible strings","code":"int countString ( string str ) {"}
{"text":"Initialize ans = 1","code":"int ans = 1 ; int cnt = 1 ; for ( int i = 1 ; str [ i ] ; i ++ ) {"}
{"text":"If two consecutive char are same increase cnt","code":"if ( str [ i ] == str [ i - 1 ] ) { cnt ++ ; }"}
{"text":"Else multiply the fib [ cnt ] to ans and initialize ans to 1","code":"else { ans = ans * fib [ cnt ] ; cnt = 1 ; } }"}
{"text":"If str = abcdeeee , then for last \" eeee \" the count munst be updated","code":"ans = ans * fib [ cnt ] ;"}
{"text":"Return the total count","code":"return ans ; }"}
{"text":"Driver 's Code","code":"int main ( ) { string str = \" abdllldefkkkk \" ;"}
{"text":"Function to precompute all the fibonacci number","code":"computeFibonacci ( ) ;"}
{"text":"Function call to find the count","code":"cout << countString ( str ) ; return 0 ; }"}
{"text":"C ++ program to find the first N terms of Golomb Sequence","code":"#include \" bits \/ stdc + + . h \" NEW_LINE #define MAX  100001 NEW_LINE using namespace std ;"}
{"text":"Function to print the Golomb Sequence","code":"void printGolombSequence ( int N ) {"}
{"text":"Initialise the array","code":"int arr [ MAX ] ;"}
{"text":"Initialise the cnt to 0","code":"int cnt = 0 ;"}
{"text":"First and second element of Golomb Sequence is 0 , 1","code":"arr [ 0 ] = 0 ; arr [ 1 ] = 1 ;"}
{"text":"Map to store the count of current element in Golomb Sequence","code":"map < int , int > M ;"}
{"text":"Store the count of 2","code":"M [ 2 ] = 2 ;"}
{"text":"Iterate over 2 to N","code":"for ( int i = 2 ; i <= N ; i ++ ) {"}
{"text":"If cnt is equals to 0 then we have new number for Golomb Sequence which is 1 + previous element","code":"if ( cnt == 0 ) { arr [ i ] = 1 + arr [ i - 1 ] ; cnt = M [ arr [ i ] ] ; cnt -- ; }"}
{"text":"Else the current element is the previous element in this Sequence","code":"else { arr [ i ] = arr [ i - 1 ] ; cnt -- ; }"}
{"text":"Map the current index to current value in arr [ ]","code":"M [ i ] = arr [ i ] ; }"}
{"text":"Print the Golomb Sequence","code":"for ( int i = 1 ; i <= N ; i ++ ) { cout << arr [ i ] << ' \u2581 ' ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 11 ; printGolombSequence ( N ) ; return 0 ; }"}
{"text":"C ++ implementation to find the number the number of ways to reach Nth stair by taking 1 , 2 step at a time and 3 Steps at a time exactly once .","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find the number the number of ways to reach Nth stair","code":"int number_of_ways ( int n ) {"}
{"text":"Array including number of ways that includes 3","code":"int includes_3 [ n + 1 ] = { } ;"}
{"text":"Array including number of ways that doesn 't includes 3","code":"int not_includes_3 [ n + 1 ] = { } ;"}
{"text":"Initially to reach 3 stairs by taking 3 steps can be reached by 1 way","code":"includes_3 [ 3 ] = 1 ; not_includes_3 [ 1 ] = 1 ; not_includes_3 [ 2 ] = 2 ; not_includes_3 [ 3 ] = 3 ;"}
{"text":"Loop to find the number the number of ways to reach Nth stair","code":"for ( int i = 4 ; i <= n ; i ++ ) { includes_3 [ i ] = includes_3 [ i - 1 ] + includes_3 [ i - 2 ] + not_includes_3 [ i - 3 ] ; not_includes_3 [ i ] = not_includes_3 [ i - 1 ] + not_includes_3 [ i - 2 ] ; } return includes_3 [ n ] ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 7 ; cout << number_of_ways ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 100000 ;"}
{"text":"Map to store the divisor count","code":"int divisors [ MAX ] ;"}
{"text":"Function to generate the divisors of all the array elements","code":"int generateDivisors ( int n ) { for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n \/ i == i ) { divisors [ i ] ++ ; } else { divisors [ i ] ++ ; divisors [ n \/ i ] ++ ; } } } }"}
{"text":"Function to find the maximum number of multiples in an array before it","code":"int findMaxMultiples ( int * arr , int n ) {"}
{"text":"To store the maximum divisor count","code":"int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Update ans if more number of divisors are found","code":"ans = max ( divisors [ arr [ i ] ] , ans ) ;"}
{"text":"Generating all the divisors of the next element of the array","code":"generateDivisors ( arr [ i ] ) ; } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 8 , 1 , 28 , 4 , 2 , 6 , 7 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; cout << findMaxMultiples ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE #define n  3 NEW_LINE #define maxV  20 NEW_LINE using namespace std ;"}
{"text":"3d array to store states of dp","code":"int dp [ n ] [ n ] [ maxV ] ;"}
{"text":"Array to determine whether a state has been solved before","code":"int v [ n ] [ n ] [ maxV ] ;"}
{"text":"Function to return the count of required paths","code":"int countWays ( int i , int j , int x , int arr [ ] [ n ] ) {"}
{"text":"Base cases","code":"if ( i == n j == n ) return 0 ; x = ( x & arr [ i ] [ j ] ) ; if ( x == 0 ) return 0 ; if ( i == n - 1 && j == n - 1 ) return 1 ;"}
{"text":"If a state has been solved before it won 't be evaluated again","code":"if ( v [ i ] [ j ] [ x ] ) return dp [ i ] [ j ] [ x ] ; v [ i ] [ j ] [ x ] = 1 ;"}
{"text":"Recurrence relation","code":"dp [ i ] [ j ] [ x ] = countWays ( i + 1 , j , x , arr ) + countWays ( i , j + 1 , x , arr ) ; return dp [ i ] [ j ] [ x ] ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ n ] [ n ] = { { 1 , 2 , 1 } , { 1 , 1 , 0 } , { 2 , 1 , 1 } } ; cout << countWays ( 0 , 0 , arr [ 0 ] [ 0 ] , arr ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int N = 3 ;"}
{"text":"Function to return the maximum sum","code":"int FindMaximumSum ( int ind , int kon , int a [ ] , int b [ ] , int c [ ] , int n , int dp [ ] [ N ] ) {"}
{"text":"Base case","code":"if ( ind == n ) return 0 ;"}
{"text":"Already visited","code":"if ( dp [ ind ] [ kon ] != -1 ) return dp [ ind ] [ kon ] ; int ans = -1e9 + 5 ;"}
{"text":"If the element has been taken from first array in previous step","code":"if ( kon == 0 ) { ans = max ( ans , b [ ind ] + FindMaximumSum ( ind + 1 , 1 , a , b , c , n , dp ) ) ; ans = max ( ans , c [ ind ] + FindMaximumSum ( ind + 1 , 2 , a , b , c , n , dp ) ) ; }"}
{"text":"If the element has been taken from second array in previous step","code":"else if ( kon == 1 ) { ans = max ( ans , a [ ind ] + FindMaximumSum ( ind + 1 , 0 , a , b , c , n , dp ) ) ; ans = max ( ans , c [ ind ] + FindMaximumSum ( ind + 1 , 2 , a , b , c , n , dp ) ) ; }"}
{"text":"If the element has been taken from third array in previous step","code":"else if ( kon == 2 ) { ans = max ( ans , a [ ind ] + FindMaximumSum ( ind + 1 , 1 , a , b , c , n , dp ) ) ; ans = max ( ans , b [ ind ] + FindMaximumSum ( ind + 1 , 0 , a , b , c , n , dp ) ) ; } return dp [ ind ] [ kon ] = ans ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 6 , 8 , 2 , 7 , 4 , 2 , 7 } ; int b [ ] = { 7 , 8 , 5 , 8 , 6 , 3 , 5 } ; int c [ ] = { 8 , 3 , 2 , 6 , 8 , 4 , 1 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; int dp [ n ] [ N ] ; memset ( dp , -1 , sizeof dp ) ;"}
{"text":"Pick element from first array","code":"int x = FindMaximumSum ( 0 , 0 , a , b , c , n , dp ) ;"}
{"text":"Pick element from second array","code":"int y = FindMaximumSum ( 0 , 1 , a , b , c , n , dp ) ;"}
{"text":"Pick element from third array","code":"int z = FindMaximumSum ( 0 , 2 , a , b , c , n , dp ) ;"}
{"text":"Print the maximum of them","code":"cout << max ( x , max ( y , z ) ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int mod = 1000000007 ;"}
{"text":"Function to return no of ways to build a binary string of length N such that 0 s always occur in groups of size K","code":"int noOfBinaryStrings ( int N , int k ) { int dp [ 100002 ] ; for ( int i = 1 ; i <= k - 1 ; i ++ ) { dp [ i ] = 1 ; } dp [ k ] = 2 ; for ( int i = k + 1 ; i <= N ; i ++ ) { dp [ i ] = ( dp [ i - 1 ] + dp [ i - k ] ) % mod ; } return dp [ N ] ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 4 ; int K = 2 ; cout << noOfBinaryStrings ( N , K ) ; return 0 ; }"}
{"text":"CPP program to find number of ways to pair people in party","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find number of ways to pair people in party","code":"int findWaysToPair ( int p ) {"}
{"text":"To store count of number of ways .","code":"int dp [ p + 1 ] ; dp [ 1 ] = 1 ; dp [ 2 ] = 2 ;"}
{"text":"Using the recurrence defined find count for different values of p .","code":"for ( int i = 3 ; i <= p ; i ++ ) { dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ; } return dp [ p ] ; }"}
{"text":"Driver code","code":"int main ( ) { int p = 3 ; cout << findWaysToPair ( p ) ; return 0 ; }"}
{"text":"A simple recursive implementation for counting ways to reach a score using 1 and 2 with consecutive 2 allowed","code":"#include <iostream> NEW_LINE using namespace std ; int CountWays ( int n ) {"}
{"text":"base cases","code":"if ( n == 0 ) { return 1 ; } if ( n == 1 ) { return 1 ; } if ( n == 2 ) { return 1 + 1 ; }"}
{"text":"For cases n > 2","code":"return CountWays ( n - 1 ) + CountWays ( n - 3 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 ; cout << CountWays ( n ) ; return 0 ; }"}
{"text":"C ++ program to check if the number is weird or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"code to find all the factors of the number excluding the number itself","code":"vector < int > factors ( int n ) {"}
{"text":"vector to store the factors","code":"vector < int > v ; v . push_back ( 1 ) ;"}
{"text":"note that this loop runs till sqrt ( n )","code":"for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) {"}
{"text":"if the value of i is a factor","code":"if ( n % i == 0 ) { v . push_back ( i ) ;"}
{"text":"condition to check the divisor is not the number itself","code":"if ( n \/ i != i ) { v . push_back ( n \/ i ) ; } } }"}
{"text":"return the vector","code":"return v ; }"}
{"text":"Function to check if the number is abundant or not","code":"bool checkAbundant ( int n ) { vector < int > v ; int sum = 0 ;"}
{"text":"find the divisors using function","code":"v = factors ( n ) ;"}
{"text":"sum all the factors","code":"for ( int i = 0 ; i < v . size ( ) ; i ++ ) { sum += v [ i ] ; }"}
{"text":"check for abundant or not","code":"if ( sum > n ) return true ; else return false ; }"}
{"text":"Function to check if the number is semi - perfect or not","code":"bool checkSemiPerfect ( int n ) { vector < int > v ;"}
{"text":"find the divisors","code":"v = factors ( n ) ;"}
{"text":"sorting the vector","code":"sort ( v . begin ( ) , v . end ( ) ) ; int r = v . size ( ) ;"}
{"text":"subset to check if no is semiperfect","code":"bool subset [ r + 1 ] [ n + 1 ] ;"}
{"text":"initialising 1 st column to true","code":"for ( int i = 0 ; i <= r ; i ++ ) subset [ i ] [ 0 ] = true ;"}
{"text":"initialing 1 st row except zero position to 0","code":"for ( int i = 1 ; i <= n ; i ++ ) subset [ 0 ] [ i ] = false ;"}
{"text":"loop to find whether the number is semiperfect","code":"for ( int i = 1 ; i <= r ; i ++ ) { for ( int j = 1 ; j <= n ; j ++ ) {"}
{"text":"calculation to check if the number can be made by summation of divisors","code":"if ( j < v [ i - 1 ] ) subset [ i ] [ j ] = subset [ i - 1 ] [ j ] ; else { subset [ i ] [ j ] = subset [ i - 1 ] [ j ] || subset [ i - 1 ] [ j - v [ i - 1 ] ] ; } } }"}
{"text":"if not possible to make the number by any combination of divisors","code":"if ( ( subset [ r ] [ n ] ) == 0 ) return false ; else return true ; }"}
{"text":"Function to check for weird or not","code":"bool checkweird ( int n ) { if ( checkAbundant ( n ) == true && checkSemiPerfect ( n ) == false ) return true ; else return false ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 70 ; if ( checkweird ( n ) ) cout << \" Weird \u2581 Number \" ; else cout << \" Not \u2581 Weird \u2581 Number \" ; return 0 ; }"}
{"text":"C ++ program to print largest contiguous array sum when array is created after concatenating a small array k times .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns sum of maximum sum subarray created after concatenating a [ 0. . n - 1 ] k times .","code":"int maxSubArraySumRepeated ( int a [ ] , int n , int k ) { int max_so_far = INT_MIN , max_ending_here = 0 ; for ( int i = 0 ; i < n * k ; i ++ ) {"}
{"text":"This is where it differs from Kadane 's  algorithm. We use modular arithmetic to  find next element.","code":"max_ending_here = max_ending_here + a [ i % n ] ; if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ; if ( max_ending_here < 0 ) max_ending_here = 0 ; } return max_so_far ; }"}
{"text":"Driver program to test maxSubArraySum","code":"int main ( ) { int a [ ] = { 10 , 20 , -30 , -1 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; int k = 3 ; cout << \" Maximum \u2581 contiguous \u2581 sum \u2581 is \u2581 \" << maxSubArraySumRepeated ( a , n , k ) ; return 0 ; }"}
{"text":"C ++ implementation to find the longest increasing odd even subsequence","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find the longest increasing odd even subsequence","code":"int longOddEvenIncSeq ( int arr [ ] , int n ) {"}
{"text":"lioes [ i ] stores longest increasing odd even subsequence ending at arr [ i ]","code":"int lioes [ n ] ;"}
{"text":"to store the length of longest increasing odd even subsequence","code":"int maxLen = 0 ;"}
{"text":"Initialize LIOES values for all indexes","code":"for ( int i = 0 ; i < n ; i ++ ) lioes [ i ] = 1 ;"}
{"text":"Compute optimized LIOES values in bottom up manner","code":"for ( int i = 1 ; i < n ; i ++ ) for ( int j = 0 ; j < i ; j ++ ) if ( arr [ i ] > arr [ j ] && ( arr [ i ] + arr [ j ] ) % 2 != 0 && lioes [ i ] < lioes [ j ] + 1 ) lioes [ i ] = lioes [ j ] + 1 ;"}
{"text":"Pick maximum of all LIOES values","code":"for ( int i = 0 ; i < n ; i ++ ) if ( maxLen < lioes [ i ] ) maxLen = lioes [ i ] ;"}
{"text":"required maximum length","code":"return maxLen ; }"}
{"text":"Driver program to test above","code":"int main ( ) { int arr [ ] = { 1 , 12 , 2 , 22 , 5 , 30 , 31 , 14 , 17 , 11 } ; int n = sizeof ( arr ) \/ sizeof ( n ) ; cout << \" Longest \u2581 Increasing \u2581 Odd \u2581 Even \u2581 \" << \" Subsequence : \u2581 \" << longOddEvenIncSeq ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to get maximum and minimum values of an expression","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility method to check whether a character is operator or not","code":"bool isOperator ( char op ) { return ( op == ' + ' op == ' * ' ) ; }"}
{"text":"method prints minimum and maximum value obtainable from an expression","code":"void printMinAndMaxValueOfExp ( string exp ) { vector < int > num ; vector < char > opr ; string tmp = \" \" ;"}
{"text":"store operator and numbers in different vectors","code":"for ( int i = 0 ; i < exp . length ( ) ; i ++ ) { if ( isOperator ( exp [ i ] ) ) { opr . push_back ( exp [ i ] ) ; num . push_back ( atoi ( tmp . c_str ( ) ) ) ; tmp = \" \" ; } else { tmp += exp [ i ] ; } }"}
{"text":"storing last number in vector","code":"num . push_back ( atoi ( tmp . c_str ( ) ) ) ; int len = num . size ( ) ; int minVal [ len ] [ len ] ; int maxVal [ len ] [ len ] ;"}
{"text":"initializing minval and maxval 2D array","code":"for ( int i = 0 ; i < len ; i ++ ) { for ( int j = 0 ; j < len ; j ++ ) { minVal [ i ] [ j ] = INT_MAX ; maxVal [ i ] [ j ] = 0 ;"}
{"text":"initializing main diagonal by num values","code":"if ( i == j ) minVal [ i ] [ j ] = maxVal [ i ] [ j ] = num [ i ] ; } }"}
{"text":"looping similar to matrix chain multiplication and updating both 2D arrays","code":"for ( int L = 2 ; L <= len ; L ++ ) { for ( int i = 0 ; i < len - L + 1 ; i ++ ) { int j = i + L - 1 ; for ( int k = i ; k < j ; k ++ ) { int minTmp = 0 , maxTmp = 0 ;"}
{"text":"if current operator is ' + ' , updating tmp variable by addition","code":"if ( opr [ k ] == ' + ' ) { minTmp = minVal [ i ] [ k ] + minVal [ k + 1 ] [ j ] ; maxTmp = maxVal [ i ] [ k ] + maxVal [ k + 1 ] [ j ] ; }"}
{"text":"if current operator is ' * ' , updating tmp variable by multiplication","code":"else if ( opr [ k ] == ' * ' ) { minTmp = minVal [ i ] [ k ] * minVal [ k + 1 ] [ j ] ; maxTmp = maxVal [ i ] [ k ] * maxVal [ k + 1 ] [ j ] ; }"}
{"text":"updating array values by tmp variables","code":"if ( minTmp < minVal [ i ] [ j ] ) minVal [ i ] [ j ] = minTmp ; if ( maxTmp > maxVal [ i ] [ j ] ) maxVal [ i ] [ j ] = maxTmp ; } } }"}
{"text":"last element of first row will store the result","code":"cout << \" Minimum \u2581 value \u2581 : \u2581 \" << minVal [ 0 ] [ len - 1 ] << \" , \u2581 Maximum \u2581 value \u2581 : \u2581 \" << maxVal [ 0 ] [ len - 1 ] ; }"}
{"text":"Driver code to test above methods","code":"int main ( ) { string expression = \"1 + 2*3 + 4*5\" ; printMinAndMaxValueOfExp ( expression ) ; return 0 ; }"}
{"text":"A naive recursive implementation that simply follows the above optimal substructure property","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Matrix Ai has dimension p [ i - 1 ] x p [ i ] for i = 1. . n","code":"int MatrixChainOrder ( int p [ ] , int i , int j ) { if ( i == j ) return 0 ; int k ; int min = INT_MAX ; int count ;"}
{"text":"place parenthesis at different places between first and last matrix , recursively calculate count of multiplications for each parenthesis placement and return the minimum count","code":"for ( k = i ; k < j ; k ++ ) { count = MatrixChainOrder ( p , i , k ) + MatrixChainOrder ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ; if ( count < min ) min = count ; }"}
{"text":"Return minimum count","code":"return min ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Minimum \u2581 number \u2581 of \u2581 multiplications \u2581 is \u2581 \" << MatrixChainOrder ( arr , 1 , n - 1 ) ; }"}
{"text":"C ++ program using memoization","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int dp [ 100 ] [ 100 ] ;"}
{"text":"Function for matrix chain multiplication","code":"int matrixChainMemoised ( int * p , int i , int j ) { if ( i == j ) { return 0 ; } if ( dp [ i ] [ j ] != -1 ) { return dp [ i ] [ j ] ; } dp [ i ] [ j ] = INT_MAX ; for ( int k = i ; k < j ; k ++ ) { dp [ i ] [ j ] = min ( dp [ i ] [ j ] , matrixChainMemoised ( p , i , k ) + matrixChainMemoised ( p , k + 1 , j ) + p [ i - 1 ] * p [ k ] * p [ j ] ) ; } return dp [ i ] [ j ] ; } int MatrixChainOrder ( int * p , int n ) { int i = 1 , j = n - 1 ; return matrixChainMemoised ( p , i , j ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; memset ( dp , -1 , sizeof dp ) ; cout << \" Minimum \u2581 number \u2581 of \u2581 multiplications \u2581 is \u2581 \" << MatrixChainOrder ( arr , n ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to flip bits of A and B which are set in both of them","code":"void flipBitsOfAandB ( int A , int B ) {"}
{"text":"Clear the bits of A which are set in both A and B","code":"A = A ^ ( A & B ) ;"}
{"text":"Clear the bits of B which are set in both A and B","code":"B = B ^ ( A & B ) ;"}
{"text":"Print updated A and B","code":"cout << A << \" \u2581 \" << B ; }"}
{"text":"Driver Code","code":"int main ( ) { int A = 10 , B = 20 ; flipBitsOfAandB ( A , B ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate and return the hamming distance between all consecutive numbers from 0 to N","code":"int TotalHammingDistance ( int n ) { int i = 1 , sum = 0 ; while ( n \/ i > 0 ) { sum = sum + n \/ i ; i = i * 2 ; } return sum ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 9 ; cout << TotalHammingDistance ( N ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define int  long long int NEW_LINE #define m  1000000007"}
{"text":"Function to find the sum of all divisors of all numbers from 1 to N","code":"void solve ( long long n ) {"}
{"text":"Stores the sum","code":"long long s = 0 ; for ( int l = 1 ; l <= n ; ) {"}
{"text":"Marks the last point of occurence with same count","code":"int r = n \/ floor ( n \/ l ) ; int x = ( ( ( r % m ) * ( ( r + 1 ) % m ) ) \/ 2 ) % m ; int y = ( ( ( l % m ) * ( ( l - 1 ) % m ) ) \/ 2 ) % m ; int p = ( ( n \/ l ) % m ) ;"}
{"text":"Calculate the sum","code":"s = ( s + ( ( ( x - y ) % m ) * p ) % m + m ) % m ; s %= m ; l = r + 1 ; }"}
{"text":"Return the result","code":"cout << ( s + m ) % m ; }"}
{"text":"Driver Code","code":"signed main ( ) { long long n = 12 ; solve ( n ) ; return 0 ; }"}
{"text":"C ++ program to find minimum time required to split a stick of N length into unit pieces","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the minimum time required to split stick of N into length into unit pieces","code":"int min_time_to_cut ( int N ) { if ( N == 0 ) return 0 ;"}
{"text":"Return the minimum unit of time required","code":"return ceil ( log2 ( N ) ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 100 ; cout << min_time_to_cut ( N ) ; return 0 ; }"}
{"text":"C ++ implementation to count of distinct pair sum between two Array with values 1 to N","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the distinct sums","code":"int findDistinctSums ( int n ) {"}
{"text":"Set to store distinct sums","code":"set < int > s ; for ( int i = 1 ; i <= n ; i ++ ) { for ( int j = i ; j <= n ; j ++ ) {"}
{"text":"Inserting every sum","code":"s . insert ( i + j ) ; } }"}
{"text":"returning distinct sums","code":"return s . size ( ) ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 3 ; cout << findDistinctSums ( N ) ; return 0 ; }"}
{"text":"C ++ program to print the triangle separated pattern using star and slash character","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print pattern recursively","code":"int printPattern ( int i , int j , int n ) {"}
{"text":"Base Case","code":"if ( j >= n ) { return 0 ; } if ( i >= n ) { return 1 ; }"}
{"text":"Conditions to print slash","code":"if ( j == i j == n - 1 - i ) {"}
{"text":"Condition to print forword slash","code":"if ( i == n - 1 - j ) { cout << \" \/ \" ; }"}
{"text":"Condition to print backward slash","code":"else { cout << \" \\ \\\" ; } }"}
{"text":"Else print ' * '","code":"else { cout << \" * \" ; }"}
{"text":"Recursive call for rows","code":"if ( printPattern ( i , j + 1 , n ) == 1 ) { return 1 ; } cout << endl ;"}
{"text":"Recursive call for changing the rows","code":"return printPattern ( i + 1 , 0 , n ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 9 ;"}
{"text":"Function Call","code":"printPattern ( 0 , 0 , N ) ; return 0 ; }"}
{"text":"CPP implementation for pattern searching in an array using Z - Algorithm","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate Z - Array","code":"vector < int > zArray ( vector < int > arr ) { int n = arr . size ( ) ; vector < int > z ( n ) ; int r = 0 , l = 0 ;"}
{"text":"Loop to calculate Z - Array","code":"for ( int k = 1 ; k < n ; k ++ ) {"}
{"text":"Outside the Z - box","code":"if ( k > r ) { r = l = k ; while ( r < n && arr [ r ] == arr [ r - l ] ) r ++ ; z [ k ] = r - l ; r -- ; }"}
{"text":"Inside Z - box","code":"else { int k1 = k - l ; if ( z [ k1 ] < r - k + 1 ) z [ k ] = z [ k1 ] ; else { l = k ; while ( r < n && arr [ r ] == arr [ r - l ] ) r ++ ; z [ k ] = r - l ; r -- ; } } } return z ; }"}
{"text":"Helper function to merge two arrays and create a single array","code":"vector < int > mergeArray ( vector < int > A , vector < int > B ) { int n = A . size ( ) ; int m = B . size ( ) ; vector < int > z ;"}
{"text":"Array to store merged array","code":"vector < int > c ( n + m + 1 ) ;"}
{"text":"Copying array B","code":"for ( int i = 0 ; i < m ; i ++ ) c [ i ] = B [ i ] ;"}
{"text":"Adding a separator","code":"c [ m ] = INT_MAX ;"}
{"text":"Copying array A","code":"for ( int i = 0 ; i < n ; i ++ ) c [ m + i + 1 ] = A [ i ] ;"}
{"text":"Calling Z - function","code":"z = zArray ( c ) ; return z ; }"}
{"text":"Function to help compute the Z array","code":"void findZArray ( vector < int > A , vector < int > B , int n ) { int flag = 0 ; vector < int > z ; z = mergeArray ( A , B ) ;"}
{"text":"Printing indexes where array B occur","code":"for ( int i = 0 ; i < z . size ( ) ; i ++ ) { if ( z [ i ] == n ) { cout << ( i - n - 1 ) << \" \u2581 \" ; flag = 1 ; } } if ( flag == 0 ) { cout << ( \" Not \u2581 Found \" ) ; } }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > A { 1 , 2 , 3 , 2 , 3 , 2 } ; vector < int > B { 2 , 3 } ; int n = B . size ( ) ; findZArray ( A , B , n ) ; }"}
{"text":"CPP implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of repetitions of string a to generate string b","code":"int getCount ( string a , string b ) {"}
{"text":"If b cannot be generated by repeating a","code":"if ( b . length ( ) % a . length ( ) != 0 ) return -1 ; int count = b . length ( ) \/ a . length ( ) ;"}
{"text":"Repeat a count number of times","code":"string str = \" \" ; for ( int i = 0 ; i < count ; i ++ ) { str = str + a ; } if ( str == b ) return count ; return -1 ; }"}
{"text":"Driver code","code":"int main ( ) { string a = \" geeks \" ; string b = \" geeksgeeks \" ; cout << ( getCount ( a , b ) ) ; return 0 ; }"}
{"text":"CPP program to Check if a given string can be formed from another string using given constraints","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if S2 can be formed of S1","code":"bool check ( string S1 , string S2 ) {"}
{"text":"length of strings","code":"int n1 = S1 . size ( ) ; int n2 = S2 . size ( ) ;"}
{"text":"hash - table to store count","code":"unordered_map < int , int > mp ;"}
{"text":"store count of each character","code":"for ( int i = 0 ; i < n1 ; i ++ ) { mp [ S1 [ i ] ] ++ ; }"}
{"text":"traverse and check for every character","code":"for ( int i = 0 ; i < n2 ; i ++ ) {"}
{"text":"if the character of s2 is present in s1","code":"if ( mp [ S2 [ i ] ] ) { mp [ S2 [ i ] ] -- ; }"}
{"text":"if the character of s2 is not present in S1 , then check if previous two ASCII characters are present in S1","code":"else if ( mp [ S2 [ i ] - 1 ] && mp [ S2 [ i ] - 2 ] ) { mp [ S2 [ i ] - 1 ] -- ; mp [ S2 [ i ] - 2 ] -- ; } else { return false ; } } return true ; }"}
{"text":"Driver Code","code":"int main ( ) { string S1 = \" abbat \" ; string S2 = \" cat \" ;"}
{"text":"Calling function to check","code":"if ( check ( S1 , S2 ) ) cout << \" YES \" ; else cout << \" NO \" ; }"}
{"text":"C ++ program to calculate number of times the pattern occurred in given string","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Returns count of occurrences of \"1(0 + ) 1\" int str .","code":"int countPattern ( string str ) { int len = str . size ( ) ; bool oneSeen = 0 ;"}
{"text":"int count = 0 ; Initialize result","code":"for ( int i = 0 ; i < len ; i ++ ) {"}
{"text":"Check if encountered '1' forms a valid pattern as specified","code":"if ( str [ i ] == '1' && oneSeen == 1 ) if ( str [ i - 1 ] == '0' ) count ++ ;"}
{"text":"if 1 encountered for first time set oneSeen to 1","code":"if ( str [ i ] == '1' && oneSeen == 0 ) { oneSeen = 1 ; continue ; }"}
{"text":"Check if there is any other character other than '0' or '1' . If so then set oneSeen to 0 to search again for new pattern","code":"if ( str [ i ] != '0' && str [ i ] != '1' ) oneSeen = 0 ; } return count ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { string str = \"100001abc101\" ; cout << countPattern ( str ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check if it possible to make all the strings equal to the string T","code":"string checkIfPossible ( int N , string arr [ ] , string T ) {"}
{"text":"Stores the frequency of all the strings in the array arr [ ]","code":"int freqS [ 256 ] = { 0 } ;"}
{"text":"Stores the frequency of the string T","code":"int freqT [ 256 ] = { 0 } ;"}
{"text":"Iterate over the characters of the string T","code":"for ( char ch : T ) { freqT [ ch - ' a ' ] ++ ; }"}
{"text":"Iterate in the range [ 0 , N - 1 ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Iterate over the characters of the string arr [ i ]","code":"for ( char ch : arr [ i ] ) { freqS [ ch - ' a ' ] ++ ; } } for ( int i = 0 ; i < 256 ; i ++ ) {"}
{"text":"If freqT [ i ] is 0 and freqS [ i ] is not 0","code":"if ( freqT [ i ] == 0 && freqS [ i ] != 0 ) { return \" No \" ; }"}
{"text":"If freqS [ i ] is 0 and freqT [ i ] is not 0","code":"else if ( freqS [ i ] == 0 && freqT [ i ] != 0 ) { return \" No \" ; }"}
{"text":"If freqS [ i ] is not freqT [ i ] * N","code":"else if ( freqT [ i ] != 0 && freqS [ i ] != ( freqT [ i ] * N ) ) { return \" No \" ; } }"}
{"text":"Otherwise , return \" Yes \"","code":"return \" Yes \" ; }"}
{"text":"Driver Code","code":"int main ( ) { string arr [ ] = { \" abc \" , \" abb \" , \" acc \" } ; string T = \" abc \" ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << checkIfPossible ( N , arr , T ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the number of the groups of 1 s only in the binary string","code":"int groupsOfOnes ( string S , int N ) {"}
{"text":"Stores number of groups of 1 s","code":"int count = 0 ;"}
{"text":"Initialization of the stack","code":"stack < int > st ;"}
{"text":"Traverse the string S","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If S [ i ] is '1'","code":"if ( S [ i ] == '1' ) st . push ( 1 ) ;"}
{"text":"Otherwise","code":"else {"}
{"text":"If st is empty","code":"if ( ! st . empty ( ) ) { count ++ ; while ( ! st . empty ( ) ) { st . pop ( ) ; } } } }"}
{"text":"If st is not empty","code":"if ( ! st . empty ( ) ) count ++ ;"}
{"text":"Return answer","code":"return count ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Input","code":"string S = \"100110111\" ; int N = S . length ( ) ;"}
{"text":"Function call","code":"cout << groupsOfOnes ( S , N ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print all palindromic strings of length 3 that can be formed using characters of string S","code":"void generatePalindrome ( string S ) {"}
{"text":"Stores the count of character","code":"unordered_map < char , int > Hash ;"}
{"text":"Traverse the string S","code":"for ( auto ch : S ) { Hash [ ch ] ++ ; }"}
{"text":"Stores all palindromic strings","code":"set < string > st ;"}
{"text":"Iterate over the charchaters over the range [ ' a ' , ' z ' ]","code":"for ( char i = ' a ' ; i <= ' z ' ; i ++ ) {"}
{"text":"If Hash [ ch ] is equal to 2","code":"if ( Hash [ i ] == 2 ) {"}
{"text":"Iterate over the characters over the range [ ' a ' , ' z ' ]","code":"for ( char j = ' a ' ; j <= ' z ' ; j ++ ) {"}
{"text":"Stores all the palindromic string","code":"string s = \" \" ; if ( Hash [ j ] && i != j ) { s += i ; s += j ; s += i ;"}
{"text":"Push the s into the set st","code":"st . insert ( s ) ; } } }"}
{"text":"If Hash [ i ] is greater than or equal to 3","code":"if ( Hash [ i ] >= 3 ) {"}
{"text":"Iterate over charchaters over the range [ ' a ' , ' z ' ]","code":"for ( char j = ' a ' ; j <= ' z ' ; j ++ ) {"}
{"text":"Stores all the palindromic string","code":"string s = \" \" ;"}
{"text":"If Hash [ j ] is positive","code":"if ( Hash [ j ] ) { s += i ; s += j ; s += i ;"}
{"text":"Push s into the set st","code":"st . insert ( s ) ; } } } }"}
{"text":"Iterate over the set","code":"for ( auto ans : st ) { cout << ans << \" STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { string S = \" ddabdac \" ; generatePalindrome ( S ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count occurrences of the string Y in the string S for every occurrence of X in S","code":"void countOccurrences ( string S , string X , string Y ) {"}
{"text":"Stores the count of occurrences of X","code":"int count = 0 ;"}
{"text":"Stores the lengths of the three strings","code":"int N = S . length ( ) , A = X . length ( ) ; int B = Y . length ( ) ;"}
{"text":"Traverse the string S","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If the current substring is Y , then increment the value of count by 1","code":"if ( S . substr ( i , B ) == Y ) count ++ ;"}
{"text":"If the current substring is X , then print the count","code":"if ( S . substr ( i , A ) == X ) cout << count << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { string S = \" abcdefdefabc \" ; string X = \" abc \" ; string Y = \" def \" ; countOccurrences ( S , X , Y ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find whether the given string is Accepted by the DFA","code":"void DFA ( string str , int N ) {"}
{"text":"If n <= 1 , then print No","code":"if ( N <= 1 ) { cout << \" No \" ; return ; }"}
{"text":"To count the matched characters","code":"int count = 0 ;"}
{"text":"Check if the first character is C","code":"if ( str [ 0 ] == ' C ' ) { count ++ ;"}
{"text":"Traverse the rest of string","code":"for ( int i = 1 ; i < N ; i ++ ) {"}
{"text":"If character is A or B , increment count by 1","code":"if ( str [ i ] == ' A ' str [ i ] == ' B ' ) count ++ ; else break ; } } else {"}
{"text":"If the first character is not C , print - 1","code":"cout << \" No \" ; return ; }"}
{"text":"If all characters matches","code":"if ( count == N ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \" CAABBAAB \" ; int N = str . size ( ) ; DFA ( str , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the maximum and minimum number of digits to be removed to make str divisible by 3","code":"void minMaxDigits ( string str , int N ) {"}
{"text":"Convert the string into array of digits","code":"int arr [ N ] ; for ( int i = 0 ; i < N ; i ++ ) arr [ i ] = ( str [ i ] - '0' ) % 3 ;"}
{"text":"Count of 0 s , 1 s , and 2 s","code":"int zero = 0 , one = 0 , two = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] == 0 ) zero ++ ; if ( arr [ i ] == 1 ) one ++ ; if ( arr [ i ] == 2 ) two ++ ; }"}
{"text":"Find the sum of digits % 3","code":"int sum = 0 ; for ( int i = 0 ; i < N ; i ++ ) { sum = ( sum + arr [ i ] ) % 3 ; }"}
{"text":"Cases to find minimum number of digits to be removed","code":"if ( sum == 0 ) { cout << 0 << ' \u2581 ' ; } if ( sum == 1 ) { if ( one && N > 1 ) cout << 1 << ' \u2581 ' ; else if ( two > 1 && N > 2 ) cout << 2 << ' \u2581 ' ; else cout << -1 << ' \u2581 ' ; } if ( sum == 2 ) { if ( two && N > 1 ) cout << 1 << ' \u2581 ' ; else if ( one > 1 && N > 2 ) cout << 2 << ' \u2581 ' ; else cout << -1 << ' \u2581 ' ; }"}
{"text":"Cases to find maximum number of digits to be removed","code":"if ( zero > 0 ) cout << N - 1 << ' \u2581 ' ; else if ( one > 0 && two > 0 ) cout << N - 2 << ' \u2581 ' ; else if ( one > 2 two > 2 ) cout << N - 3 << ' \u2581 ' ; else cout << -1 << ' \u2581 ' ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \"12345\" ; int N = str . length ( ) ;"}
{"text":"Function Call","code":"minMaxDigits ( str , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of changes to make the string K - periodic and palindrome","code":"int findMinimumChanges ( int N , int K , string S ) {"}
{"text":"Initialize ans with 0","code":"int ans = 0 ;"}
{"text":"Iterate from 0 to ( K + 1 ) \/ 2","code":"for ( int i = 0 ; i < ( K + 1 ) \/ 2 ; i ++ ) {"}
{"text":"Store frequency of character","code":"map < char , int > mp ;"}
{"text":"Iterate through all indices , i , i + K , i + 2 k ... . and store the frequency of character","code":"for ( int j = i ; j < N ; j += K ) {"}
{"text":"Increase the frequency of current character","code":"mp [ S [ j ] ] ++ ; }"}
{"text":"Iterate through all indices K - i , 2 K - i , 3 K - i ... . and store the frequency of character","code":"for ( int j = N - i - 1 ; j >= 0 ; j -= K ) {"}
{"text":"If K is odd & i is samw as K \/ 2 , break the loop","code":"if ( K & 1 and i == K \/ 2 ) break ;"}
{"text":"Increase the frequency of current character","code":"mp [ S [ j ] ] ++ ; }"}
{"text":"Find the maximum frequency of a character among all visited characters","code":"int curr_max = INT_MIN ; for ( auto p : mp ) curr_max = max ( curr_max , p . second ) ;"}
{"text":"If K is odd and i is same as K \/ 2 then , only N \/ K characters is visited","code":"if ( K & 1 and i == K \/ 2 ) ans += ( N \/ K - curr_max ) ;"}
{"text":"Otherwise N \/ K * 2 characters has visited","code":"else ans += ( N \/ K * 2 - curr_max ) ; }"}
{"text":"Return the result","code":"return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { string S = \" aabbcbbcb \" ; int N = S . length ( ) ; int K = 3 ;"}
{"text":"Function Call","code":"cout << findMinimumChanges ( N , K , S ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if any index contains more than K active characters","code":"string checkString ( string s , int K ) { int n = s . length ( ) ;"}
{"text":"Store the last occurrence of each character in the map .","code":"unordered_map < char , int > mp ; for ( int i = 0 ; i < n ; i ++ ) { mp [ s [ i ] ] = i ; } int cnt = 0 , f = 0 ;"}
{"text":"Stores the active characters","code":"unordered_set < int > st ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Insert the character","code":"st . insert ( s [ i ] ) ;"}
{"text":"If the size of set exceeds K","code":"if ( st . size ( ) > K ) { f = 1 ; break ; }"}
{"text":"Remove the character from set if i is the last index of the current character","code":"if ( mp [ s [ i ] ] == i ) st . erase ( s [ i ] ) ; } return ( f == 1 ? \" Yes \" : \" No \" ) ; }"}
{"text":"Driver Code","code":"int main ( ) { string s = \" aabbcdca \" ; int k = 2 ; cout << checkString ( s , k ) ; return 0 ; }"}
{"text":"C ++ implementation to count the number of strings in the array whose distinct characters is less than or equal to M","code":"#include <bits\/stdc++.h> NEW_LINE #include <set> NEW_LINE using namespace std ;"}
{"text":"Function to count the strings whose distinct characters count is less than M","code":"void distinct ( string S [ ] , int M , int n ) { int count = 0 ;"}
{"text":"Loop to iterate over all the strings of the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Distinct characters in the String with the help of set","code":"set < char > set1 ; for ( int j = 0 ; j < S [ i ] . length ( ) ; j ++ ) { if ( set1 . find ( S [ i ] [ j ] ) == set1 . end ( ) ) set1 . insert ( S [ i ] [ j ] ) ; } int c = set1 . size ( ) ;"}
{"text":"Checking if its less than or equal to M","code":"if ( c <= M ) count += 1 ; } cout << ( count ) ; }"}
{"text":"Driver Code","code":"int main ( ) { string S [ ] = { \" HERBIVORES \" , \" AEROPLANE \" , \" GEEKSFORGEEKS \" } ; int M = 7 ; int n = sizeof ( S ) \/ sizeof ( S [ 0 ] ) ; distinct ( S , M , n ) ; return 0 ; }"}
{"text":"C ++ program to remove the characters having odd frequencies in the string","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to remove the characters which have odd frequencies in the string","code":"string removeOddFrequencyCharacters ( string s ) {"}
{"text":"Create a map to store the frequency of each character","code":"unordered_map < char , int > m ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { m [ s [ i ] ] ++ ; }"}
{"text":"To store the new string","code":"string new_string = \" \" ;"}
{"text":"Remove the characters which have odd frequencies","code":"for ( int i = 0 ; i < s . length ( ) ; i ++ ) {"}
{"text":"If the character has odd frequency then skip","code":"if ( m [ s [ i ] ] & 1 ) continue ;"}
{"text":"Else concatenate the character to the new string","code":"new_string += s [ i ] ; }"}
{"text":"Return the modified string","code":"return new_string ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" geeksforgeeks \" ;"}
{"text":"Remove the characters which have odd frequencies","code":"str = removeOddFrequencyCharacters ( str ) ; cout << str << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ implementation to find product of elements at k - th level","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive Function to find product of elements at k - th level","code":"int productAtKthLevel ( string tree , int k , int & i , int level ) { if ( tree [ i ++ ] == ' ( ' ) {"}
{"text":"if subtree is null , just like if root == NULL","code":"if ( tree [ i ] == ' ) ' ) return 1 ; int product = 1 ;"}
{"text":"Consider only level k node to be part of the product","code":"if ( level == k ) product = tree [ i ] - '0' ;"}
{"text":"Recur for Left Subtree","code":"int leftproduct = productAtKthLevel ( tree , k , ++ i , level + 1 ) ;"}
{"text":"Recur for Right Subtree","code":"int rightproduct = productAtKthLevel ( tree , k , ++ i , level + 1 ) ;"}
{"text":"Taking care of ' ) ' after left and right subtree","code":"++ i ; return product * leftproduct * rightproduct ; } }"}
{"text":"Driver Code","code":"int main ( ) { string tree = \" ( 0(5(6 ( ) ( ) ) ( 4 ( ) \" \" ( 9 ( ) ( ) ) ) ) ( 7(1 ( ) ( ) ) ( 3 ( ) ( ) ) ) ) \" ; int k = 2 ; int i = 0 ; cout << productAtKthLevel ( tree , k , i , 0 ) ; return 0 ; }"}
{"text":"C ++ program to print the most occurring character in an array of strings","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the most occurring character","code":"void findMostOccurringChar ( vector < string > str ) {"}
{"text":"Creating a hash of size 26","code":"int hash [ 26 ] = { 0 } ;"}
{"text":"For loop to iterate through every string of the array","code":"for ( int i = 0 ; i < str . size ( ) ; i ++ ) {"}
{"text":"For loop to iterate through every character of the string","code":"for ( int j = 0 ; j < str [ i ] . length ( ) ; j ++ ) {"}
{"text":"Incrementing the count of the character in the hash","code":"hash [ str [ i ] [ j ] ] ++ ; } }"}
{"text":"Finding the character with the maximum count","code":"int max = 0 ; for ( int i = 0 ; i < 26 ; i ++ ) { max = hash [ i ] > hash [ max ] ? i : max ; } cout << ( char ) ( max + 97 ) << endl ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Declaring Vector of String type","code":"vector < string > str ; str . push_back ( \" animal \" ) ; str . push_back ( \" zebra \" ) ; str . push_back ( \" lion \" ) ; str . push_back ( \" giraffe \" ) ; findMostOccurringChar ( str ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if num is palindrome","code":"bool isPalindrome ( float num ) {"}
{"text":"Convert the given floating point number into a string","code":"stringstream ss ; ss << num ; string s ; ss >> s ;"}
{"text":"Pointers pointing to the first and the last character of the string","code":"int low = 0 ; int high = s . size ( ) - 1 ; while ( low < high ) {"}
{"text":"Not a palindrome","code":"if ( s [ low ] != s [ high ] ) return false ;"}
{"text":"Update the pointers","code":"low ++ ; high -- ; } return true ; }"}
{"text":"Driver code","code":"int main ( ) { float n = 123.321f ; if ( isPalindrome ( n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 26 ;"}
{"text":"Function to return the maximum number of times str1 can appear as a non - overlapping substring in str2","code":"int maxSubStr ( string str1 , int len1 , string str2 , int len2 ) {"}
{"text":"str1 cannot never be substring of str2","code":"if ( len1 > len2 ) return 0 ;"}
{"text":"Store the frequency of the characters of str1","code":"int freq1 [ MAX ] = { 0 } ; for ( int i = 0 ; i < len1 ; i ++ ) freq1 [ str1 [ i ] - ' a ' ] ++ ;"}
{"text":"Store the frequency of the characters of str2","code":"int freq2 [ MAX ] = { 0 } ; for ( int i = 0 ; i < len2 ; i ++ ) freq2 [ str2 [ i ] - ' a ' ] ++ ;"}
{"text":"To store the required count of substrings","code":"int minPoss = INT_MAX ; for ( int i = 0 ; i < MAX ; i ++ ) {"}
{"text":"Current character doesn 't appear in str1","code":"if ( freq1 [ i ] == 0 ) continue ;"}
{"text":"Frequency of the current character in str1 is greater than its frequency in str2","code":"if ( freq1 [ i ] > freq2 [ i ] ) return 0 ;"}
{"text":"Update the count of possible substrings","code":"minPoss = min ( minPoss , freq2 [ i ] \/ freq1 [ i ] ) ; } return minPoss ; }"}
{"text":"Driver code","code":"int main ( ) { string str1 = \" geeks \" , str2 = \" gskefrgoekees \" ; int len1 = str1 . length ( ) ; int len2 = str2 . length ( ) ; cout << maxSubStr ( str1 , len1 , str2 , len2 ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the number of ways to insert the bracket pairs","code":"int cntWays ( string str , int n ) { int x = n + 1 ; int ways = x * x * ( x * x - 1 ) \/ 12 ; return ways ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" ab \" ; int n = str . length ( ) ; cout << cntWays ( str , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Set to store all the strings from the given array","code":"unordered_set < string > uSet ;"}
{"text":"To store the required count","code":"int minCnt = INT_MAX ;"}
{"text":"Recursive function to find the count of substrings that can be splitted starting from the index start such that all the substrings are present in the map","code":"void findSubStr ( string str , int cnt , int start ) {"}
{"text":"All the chosen substrings are present in the map","code":"if ( start == str . length ( ) ) {"}
{"text":"Update the minimum count of substrings","code":"minCnt = min ( cnt , minCnt ) ; }"}
{"text":"Starting from the substrings of length 1 that start with the given index","code":"for ( int len = 1 ; len <= ( str . length ( ) - start ) ; len ++ ) {"}
{"text":"Get the substring","code":"string subStr = str . substr ( start , len ) ;"}
{"text":"If the substring is present in the set","code":"if ( uSet . find ( subStr ) != uSet . end ( ) ) {"}
{"text":"Recursive call for the rest of the string","code":"findSubStr ( str , cnt + 1 , start + len ) ; } } }"}
{"text":"Function that inserts all the strings from the given array in a set and calls the recursive function to find the minimum count of substrings str can be splitted into that satisfy the given condition","code":"void findMinSubStr ( string arr [ ] , int n , string str ) {"}
{"text":"Insert all the strings from the given array in a set","code":"for ( int i = 0 ; i < n ; i ++ ) uSet . insert ( arr [ i ] ) ;"}
{"text":"Find the required count","code":"findSubStr ( str , 0 , 0 ) ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \"123456\" ; string arr [ ] = { \"1\" , \"12345\" , \"2345\" , \"56\" , \"23\" , \"456\" } ; int n = sizeof ( arr ) \/ sizeof ( string ) ; findMinSubStr ( arr , n , str ) ; cout << minCnt ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of required substrings","code":"int countSubStr ( string s , int n ) { int c1 = 0 , c2 = 0 ;"}
{"text":"For every index of the string","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If the substring starting at the current index is \" geeks \"","code":"if ( s . substr ( i , 5 ) == \" geeks \" ) c1 ++ ;"}
{"text":"If the substring is \" for \"","code":"if ( s . substr ( i , 3 ) == \" for \" ) c2 = c2 + c1 ; } return c2 ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \" geeksforgeeksisforgeeks \" ; int n = s . size ( ) ; cout << countSubStr ( s , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int main ( ) {"}
{"text":"Defining the string","code":"string String = \" { [ ( ) ] } [ ] \" ;"}
{"text":"Storing opening braces in list lst1","code":"vector < char > lst1 = { ' { ' , ' ( ' , ' [ ' } ;"}
{"text":"Storing closing braces in list lst2","code":"vector < char > lst2 = { ' } ' , ' ) ' , ' ] ' } ;"}
{"text":"Creating an empty list lst","code":"vector < char > lst ; int k ;"}
{"text":"Creating dictionary to map closing braces to opening ones","code":"map < char , char > Dict ; Dict . insert ( pair < int , int > ( ' ) ' , ' ( ' ) ) ; Dict . insert ( pair < int , int > ( ' } ' , ' { ' ) ) ; Dict . insert ( pair < int , int > ( ' ] ' , ' [ ' ) ) ; int a = 0 , b = 0 , c = 0 ;"}
{"text":"If first position of string contain any closing braces return 1","code":"if ( count ( lst2 . begin ( ) , lst2 . end ( ) , String [ 0 ] ) ) { cout << 1 << endl ; } else {"}
{"text":"If characters of string are opening braces then append them in a list","code":"for ( int i = 0 ; i < String . size ( ) ; i ++ ) { if ( count ( lst1 . begin ( ) , lst1 . end ( ) , String [ i ] ) ) { lst . push_back ( String [ i ] ) ; k = i + 2 ; } else {"}
{"text":"When size of list is 0 and new closing braces is encountered then print its index starting from 1","code":"if ( lst . size ( ) == 0 && ( count ( lst2 . begin ( ) , lst2 . end ( ) , String [ i ] ) ) ) { cout << ( i + 1 ) << endl ; c = 1 ; break ; } else {"}
{"text":"As we encounter closing braces we map them with theircorresponding opening braces using dictionary and check if it is same as last opened braces ( last element in list ) if yes then we delete that element from list","code":"if ( Dict [ String [ i ] ] == lst [ lst . size ( ) - 1 ] ) { lst . pop_back ( ) ; } else {"}
{"text":"Otherwise we return the index ( starting from 1 ) at which nesting is found wrong","code":"break ; cout << ( i + 1 ) << endl ; a = 1 ; } } } }"}
{"text":"At end if the list is empty it means the string is perfectly nested","code":"if ( lst . size ( ) == 0 && c == 0 ) { cout << 0 << endl ; b = 1 ; } if ( a == 0 && b == 0 && c == 0 ) { cout << k << endl ; } } return 0 ; }"}
{"text":"C ++ implementation of the above approach :","code":"#include <bits\/stdc++.h> NEW_LINE #define MAX  26 NEW_LINE using namespace std ;"}
{"text":"Function to return the encrypted string","code":"string encryptStr ( string str , int n , int x ) {"}
{"text":"Reduce x because rotation of length 26 is unnecessary","code":"x = x % MAX ;"}
{"text":"Calculate the frequency of characters","code":"int freq [ MAX ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { freq [ str [ i ] - ' a ' ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If the frequency of current character is even then increment it by x","code":"if ( freq [ str [ i ] - ' a ' ] % 2 == 0 ) { int pos = ( str [ i ] - ' a ' + x ) % MAX ; str [ i ] = ( char ) ( pos + ' a ' ) ; }"}
{"text":"Else decrement it by x","code":"else { int pos = ( str [ i ] - ' a ' - x ) ; if ( pos < 0 ) { pos += MAX ; } str [ i ] = ( char ) ( pos + ' a ' ) ; } }"}
{"text":"Return the count","code":"return str ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \" abcda \" ; int n = s . size ( ) ; int x = 3 ; cout << encryptStr ( s , n , x ) << endl ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE #include <time.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if it is possible to rearrange the characters of the string such that no two consecutive characters are same","code":"int isPossible ( string str ) {"}
{"text":"To store the frequency of each of the character","code":"unordered_map < char , int > freq ;"}
{"text":"To store the maximum frequency so far","code":"int max_freq = 0 ; for ( int j = 0 ; j < ( str . length ( ) ) ; j ++ ) { freq [ str [ j ] ] ++ ; if ( freq [ str [ j ] ] > max_freq ) max_freq = freq [ str [ j ] ] ; }"}
{"text":"If possible","code":"if ( max_freq <= ( str . length ( ) - max_freq + 1 ) ) return true ; return false ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" geeksforgeeks \" ; if ( isPossible ( str ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the uncommon characters in the given string in sorted order","code":"void printUncommon ( string str1 , string str2 ) { int a1 = 0 , a2 = 0 ; for ( int i = 0 ; i < str1 . length ( ) ; i ++ ) {"}
{"text":"Converting character to ASCII code","code":"int ch = int ( str1 [ i ] ) - ' a ' ;"}
{"text":"Bit operation","code":"a1 = a1 | ( 1 << ch ) ; } for ( int i = 0 ; i < str2 . length ( ) ; i ++ ) {"}
{"text":"Converting character to ASCII code","code":"int ch = int ( str2 [ i ] ) - ' a ' ;"}
{"text":"Bit operation","code":"a2 = a2 | ( 1 << ch ) ; }"}
{"text":"XOR operation leaves only uncommon characters in the ans variable","code":"int ans = a1 ^ a2 ; int i = 0 ; while ( i < 26 ) { if ( ans % 2 == 1 ) { cout << char ( ' a ' + i ) ; } ans = ans \/ 2 ; i ++ ; } }"}
{"text":"Driver code","code":"int main ( ) { string str1 = \" geeksforgeeks \" ; string str2 = \" geeksquiz \" ; printUncommon ( str1 , str2 ) ; return 0 ; }"}
{"text":"C ++ program to find minimum number of reversals required to balance an expression","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns count of minimum reversals for making expr balanced . Returns - 1 if expr cannot be balanced .","code":"int countMinReversals ( string expr ) { int len = expr . length ( ) ;"}
{"text":"length of expression must be even to make it balanced by using reversals .","code":"if ( len % 2 ) return -1 ;"}
{"text":"To store number of reversals required .","code":"int ans = 0 ; int i ;"}
{"text":"To store number of unbalanced opening brackets .","code":"int open = 0 ;"}
{"text":"To store number of unbalanced closing brackets .","code":"int close = 0 ; for ( i = 0 ; i < len ; i ++ ) {"}
{"text":"If current bracket is open then increment open count .","code":"if ( expr [ i ] == ' { ' ) open ++ ;"}
{"text":"If current bracket is close , check if it balances opening bracket . If yes then decrement count of unbalanced opening bracket else increment count of closing bracket .","code":"else { if ( ! open ) close ++ ; else open -- ; } } ans = ( close \/ 2 ) + ( open \/ 2 ) ;"}
{"text":"For the case : \" } { \" or when one closing and one opening bracket remains for pairing , then both need to be reversed .","code":"close %= 2 ; open %= 2 ; if ( close ) ans += 2 ; return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { string expr = \" } } { { \" ; cout << countMinReversals ( expr ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the total number of valid pairs","code":"int totalPairs ( string s1 , string s2 ) { int a1 = 0 , b1 = 0 ;"}
{"text":"Count total number of even and odd ascii values for string s1","code":"for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( int ( s1 [ i ] ) % 2 != 0 ) a1 ++ ; else b1 ++ ; } int a2 = 0 , b2 = 0 ;"}
{"text":"Count total number of even and odd ascii values for string s2","code":"for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) { if ( int ( s2 [ i ] ) % 2 != 0 ) a2 ++ ; else b2 ++ ; }"}
{"text":"Return total valid pairs","code":"return ( ( a1 * a2 ) + ( b1 * b2 ) ) ; }"}
{"text":"Driver code","code":"int main ( ) { string s1 = \" geeks \" , s2 = \" for \" ; cout << totalPairs ( s1 , s2 ) ; return 0 ; }"}
{"text":"CPP program to find the number of occurrences of prefix which occurs maximum no . of time","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of the required prefix","code":"int prefixOccurrences ( string str ) { char c = str [ 0 ] ; int countc = 0 ;"}
{"text":"Find the frequency of first character of string","code":"for ( int i = 0 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] == c ) countc ++ ; } return countc ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" abbcdabbcd \" ; cout << prefixOccurrences ( str ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the minimum operations of the given type required to convert string s to string t","code":"int minOperations ( string s , string t , int n ) { int ct0 = 0 , ct1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Characters are already equal","code":"if ( s [ i ] == t [ i ] ) continue ;"}
{"text":"Increment count of 0 s","code":"if ( s [ i ] == '0' ) ct0 ++ ;"}
{"text":"Increment count of 1 s","code":"else ct1 ++ ; } return max ( ct0 , ct1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \"010\" , t = \"101\" ; int n = s . length ( ) ; cout << minOperations ( s , t , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the decrypted string","code":"string decryptString ( string str , int n ) {"}
{"text":"Initial jump will be 1","code":"int i = 0 , jump = 1 ; string decryptedStr = \" \" ; while ( i < n ) { decryptedStr += str [ i ] ; i += jump ;"}
{"text":"Increment jump by 1 with every character","code":"jump ++ ; } return decryptedStr ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" geeeeekkkksssss \" ; int n = str . length ( ) ; cout << decryptString ( str , n ) ; return 0 ; }"}
{"text":"C ++ program to find which bit sequence to be flipped","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check which bit is to be flipped","code":"char bitToBeFlipped ( string s ) {"}
{"text":"variable to store first and last character of string","code":"char last = s [ s . length ( ) - 1 ] ; char first = s [ 0 ] ;"}
{"text":"Check if first and last characters are equal , if yes , then return the character which is not at last","code":"if ( last == first ) { if ( last == '0' ) { return '1' ; } else { return '0' ; } }"}
{"text":"else return last","code":"else if ( last != first ) { return last ; } }"}
{"text":"Driver Code","code":"int main ( ) { string s = \"1101011000\" ; cout << bitToBeFlipped ( s ) << endl ; return 0 ; }"}
{"text":"C ++ program to find Sum and product of Prime Frequencies of Characters in a String","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to create Sieve to check primes","code":"void SieveOfEratosthenes ( bool prime [ ] , int p_size ) {"}
{"text":"false here indicates that it is not prime","code":"prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int p = 2 ; p * p <= p_size ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] ) {"}
{"text":"Update all multiples of p , set them to non - prime","code":"for ( int i = p * 2 ; i <= p_size ; i += p ) prime [ i ] = false ; } } }"}
{"text":"Function to find the sum of prime frequencies of the characters of the given string","code":"void sumProdOfPrimeFreq ( string s ) { bool prime [ s . length ( ) + 1 ] ; memset ( prime , true , sizeof ( prime ) ) ; SieveOfEratosthenes ( prime , s . length ( ) + 1 ) ; int i , j ;"}
{"text":"map is used to store character frequencies","code":"unordered_map < char , int > m ; for ( i = 0 ; i < s . length ( ) ; i ++ ) m [ s [ i ] ] ++ ; int sum = 0 , product = 1 ;"}
{"text":"Traverse the map","code":"for ( auto it = m . begin ( ) ; it != m . end ( ) ; it ++ ) {"}
{"text":"If the frequency is prime","code":"if ( prime [ it -> second ] ) { sum += it -> second ; product *= it -> second ; } } cout << \" Sum \u2581 = \u2581 \" << sum ; cout << \" Product = \" }"}
{"text":"Driver code","code":"int main ( ) { string s = \" geeksforgeeks \" ; sumProdOfPrimeFreq ( s ) ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that checks if the frequency of character are a factor or multiple of each other","code":"bool multipleOrFactor ( string s1 , string s2 ) {"}
{"text":"map store frequency of each character","code":"map < char , int > m1 , m2 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) m1 [ s1 [ i ] ] ++ ; for ( int i = 0 ; i < s2 . length ( ) ; i ++ ) m2 [ s2 [ i ] ] ++ ; map < char , int > :: iterator it ; for ( it = m1 . begin ( ) ; it != m1 . end ( ) ; it ++ ) {"}
{"text":"if any frequency is 0 , then continue as condition is satisfied","code":"if ( m2 . find ( ( * it ) . first ) == m2 . end ( ) ) continue ;"}
{"text":"if factor or multiple , then condition satisfied","code":"if ( m2 [ ( * it ) . first ] % ( * it ) . second == 0 || ( * it ) . second % m2 [ ( * it ) . first ] == 0 ) continue ;"}
{"text":"if condition not satisfied","code":"else return false ; } }"}
{"text":"Driver code","code":"int main ( ) { string s1 = \" geeksforgeeks \" ; string s2 = \" geeks \" ; multipleOrFactor ( s1 , s2 ) ? cout << \" YES \" : cout << \" NO \" ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that removes the characters which have even frequencies in the string","code":"void solve ( string s ) {"}
{"text":"create a map to store the frequency of each character","code":"unordered_map < char , int > m ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { m [ s [ i ] ] ++ ; }"}
{"text":"to store the new string","code":"string new_string = \" \" ;"}
{"text":"remove the characters which have even frequencies","code":"for ( int i = 0 ; i < s . length ( ) ; i ++ ) {"}
{"text":"if the character has even frequency then skip","code":"if ( m [ s [ i ] ] % 2 == 0 ) continue ;"}
{"text":"else concatenate the character to the new string","code":"new_string += s [ i ] ; }"}
{"text":"display the modified string","code":"cout << new_string << endl ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \" aabbbddeeecc \" ;"}
{"text":"remove the characters which have even frequencies","code":"solve ( s ) ; return 0 ; }"}
{"text":"C ++ implementation to remove all the palindromic words from the given sentence","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check if ' str ' is palindrome","code":"bool isPalindrome ( string str ) { int i = 0 , j = str . size ( ) - 1 ;"}
{"text":"traversing from both the ends","code":"while ( i < j )"}
{"text":"not palindrome","code":"if ( str [ i ++ ] != str [ j -- ] ) return false ;"}
{"text":"palindrome","code":"return true ; }"}
{"text":"function to remove all the palindromic words from the given sentence","code":"string removePalinWords ( string str ) {"}
{"text":"' final _ str ' to store the final string and ' word ' to one by one store each word of ' str '","code":"string final_str = \" \" , word = \" \" ;"}
{"text":"add space at the end of ' str '","code":"str = str + \" \u2581 \" ; int n = str . size ( ) ;"}
{"text":"traversing ' str '","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"accumulating characters of the current word","code":"if ( str [ i ] != ' \u2581 ' ) word = word + str [ i ] ; else {"}
{"text":"if ' word ' is not palindrome then a add it to ' final _ str '","code":"if ( ! ( isPalindrome ( word ) ) ) final_str += word + \" \u2581 \" ;"}
{"text":"reset","code":"word = \" \" ; } }"}
{"text":"required final string","code":"return final_str ; }"}
{"text":"Driver program to test above","code":"int main ( ) { string str = \" Text \u2581 contains \u2581 malayalam \u2581 and \u2581 level \u2581 words \" ; cout << removePalinWords ( str ) ; return 0 ; }"}
{"text":"CPP program to find the sum of elements present in all subsequences","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns numeric value of a subsequence of s . The subsequence to be picked is decided using bit pattern of num ( We pick all thosedigits for which there is a set bit in num )","code":"int findSubSequence ( string s , int num ) {"}
{"text":"Initialize the result","code":"int res = 0 ;"}
{"text":"till n != 0","code":"int i = 0 ; while ( num ) {"}
{"text":"if i - th bit is set then add this number","code":"if ( num & 1 ) res += s [ i ] - '0' ; i ++ ;"}
{"text":"right shift i","code":"num = num >> 1 ; } return res ; }"}
{"text":"function to find combined sum of all individual subsequence sum","code":"int combinedSum ( string s ) {"}
{"text":"length of string","code":"int n = s . length ( ) ;"}
{"text":"stores the combined","code":"int c_sum = 0 ;"}
{"text":"2 ^ n - 1 subsequences","code":"int range = ( 1 << n ) - 1 ;"}
{"text":"loop for all subsequences","code":"for ( int i = 0 ; i <= range ; i ++ ) c_sum += findSubSequence ( s , i ) ;"}
{"text":"returns the combined sum","code":"return c_sum ; }"}
{"text":"driver code","code":"int main ( ) { string s = \"123\" ; cout << combinedSum ( s ) ; return 0 ; }"}
{"text":"CPP Program to find the subsequence with each character occurring at least k times in string s","code":"#include <iostream> NEW_LINE using namespace std ; #define MAX_CHAR  26"}
{"text":"Function to find the subsequence","code":"void findSubsequence ( string str , int k ) {"}
{"text":"Taking an extra array to keep record for character count in s","code":"int a [ MAX_CHAR ] = { 0 } ;"}
{"text":"Counting occurrences of all characters in str [ ]","code":"for ( int i = 0 ; i < str . size ( ) ; i ++ ) a [ str [ i ] - ' a ' ] ++ ;"}
{"text":"Printing characters with count >= k in same order as they appear in str .","code":"for ( int i = 0 ; i < l ; i ++ ) if ( a [ str [ i ] - ' a ' ] >= k ) cout << str [ i ] ; }"}
{"text":"Driver code","code":"int main ( ) { int k = 2 ; findSubsequence ( \" geeksforgeeks \" , k ) ; return 0 ; }"}
{"text":"C ++ program to convert a sentence to gOOGLE cASE .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; string convert ( string str ) {"}
{"text":"Empty strings","code":"string w = \" \" , z = \" \" ;"}
{"text":"Convert input string to upper case","code":"transform ( str . begin ( ) , str . end ( ) , str . begin ( ) , :: toupper ) ; str += \" \u2581 \" ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) {"}
{"text":"Check if character is not a space and adding it to string w","code":"char ch = str [ i ] ; if ( ch != ' \u2581 ' ) { w = w + ch ; } else {"}
{"text":"Converting first character to lower case and subsequent initial letter of another word to lower case","code":"z = z + char ( tolower ( w [ 0 ] ) ) + w . substr ( 1 ) + \" \u2581 \" ; w = \" \" ; } } return z ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" I \u2581 got \u2581 intern \u2581 at \u2581 geeksforgeeks \" ; cout << convert ( str ) << endl ; return 0 ; }"}
{"text":"CPP Program to Encrypt string with product of number of vowels and consonants in substring of size k","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"isVowel ( ) is a function that returns true for a vowel and false otherwise .","code":"bool isVowel ( char c ) { return ( c == ' a ' c == ' e ' c == ' i ' c == ' o ' c == ' u ' ) ; }"}
{"text":"function to Encrypt the string","code":"string encryptString ( string s , int n , int k ) {"}
{"text":"cv to count vowel cc to count consonants","code":"int cv [ n ] , cc [ n ] ; if ( isVowel ( s [ 0 ] ) ) cv [ 0 ] = 1 ; else cc [ 0 ] = 1 ;"}
{"text":"Counting prefix count of vowel and prefix count of consonants","code":"for ( int i = 1 ; i < n ; i ++ ) { cv [ i ] = cv [ i - 1 ] + isVowel ( s [ i ] ) ; cc [ i ] = cc [ i - 1 ] + ! isVowel ( s [ i ] ) ; } string ans = \" \" ; int prod = 0 ; prod = cc [ k - 1 ] * cv [ k - 1 ] ; ans += to_string ( prod ) ;"}
{"text":"generating the encrypted string .","code":"for ( int i = k ; i < s . length ( ) ; i ++ ) { prod = ( cc [ i ] - cc [ i - k ] ) * ( cv [ i ] - cv [ i - k ] ) ; ans += to_string ( prod ) ; } return ans ; }"}
{"text":"Driven Program","code":"int main ( ) { string s = \" hello \" ; int n = s . length ( ) ; int k = 2 ; cout << encryptString ( s , n , k ) << endl ; return 0 ; }"}
{"text":"C ++ program to count the number of occurrence of a word in the given string","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int countOccurrences ( char * str , string word ) { char * p ;"}
{"text":"split the string by spaces in a","code":"vector < string > a ; p = strtok ( str , \" \u2581 \" ) ; while ( p != NULL ) { a . push_back ( p ) ; p = strtok ( NULL , \" \u2581 \" ) ; }"}
{"text":"search for pattern in a","code":"int c = 0 ; for ( int i = 0 ; i < a . size ( ) ; i ++ )"}
{"text":"if match found increase count","code":"if ( word == a [ i ] ) c ++ ; return c ; }"}
{"text":"Driver code","code":"int main ( ) { char str [ ] = \" GeeksforGeeks \u2581 A \u2581 computer \u2581 science \u2581 portal \u2581 for \u2581 geeks \u2581 \" ; string word = \" portal \" ; cout << countOccurrences ( str , word ) ; return 0 ; }"}
{"text":"CPP code to print all permutations with respect to cases","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to generate permutations","code":"void permute ( string input ) { int n = input . length ( ) ;"}
{"text":"Number of permutations is 2 ^ n","code":"int max = 1 << n ;"}
{"text":"Converting string to lower case","code":"transform ( input . begin ( ) , input . end ( ) , input . begin ( ) , :: tolower ) ;"}
{"text":"Using all subsequences and permuting them","code":"for ( int i = 0 ; i < max ; i ++ ) {"}
{"text":"If j - th bit is set , we convert it to upper case","code":"string combination = input ; for ( int j = 0 ; j < n ; j ++ ) if ( ( ( i >> j ) & 1 ) == 1 ) combination [ j ] = toupper ( input . at ( j ) ) ;"}
{"text":"Printing current combination","code":"cout << combination << \" \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { permute ( \" ABC \" ) ; return 0 ; }"}
{"text":"C ++ program for above implementation","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to print the string","code":"void printString ( string str , char ch , int count ) { int occ = 0 , i ;"}
{"text":"If given count is 0 print the given string and return","code":"if ( count == 0 ) { cout << str ; return ; }"}
{"text":"Start traversing the string","code":"for ( i = 0 ; i < str . length ( ) ; i ++ ) {"}
{"text":"Increment occ if current char is equal to given character","code":"if ( str [ i ] == ch ) occ ++ ;"}
{"text":"Break the loop if given character has been occurred given no . of times","code":"if ( occ == count ) break ; }"}
{"text":"Print the string after the occurrence of given character given no . of times","code":"if ( i < str . length ( ) - 1 ) cout << str . substr ( i + 1 , str . length ( ) - ( i + 1 ) ) ;"}
{"text":"Otherwise string is empty","code":"else cout < < \" Empty \u2581 string \" ; }"}
{"text":"Drivers code","code":"int main ( ) { string str = \" geeks \u2581 for \u2581 geeks \" ; printString ( str , ' e ' , 2 ) ; return 0 ; }"}
{"text":"C ++ program to reverse order of vowels","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"utility function to check for vowel","code":"bool isVowel ( char c ) { return ( c == ' a ' c == ' A ' c == ' e ' c == ' E ' c == ' i ' c == ' I ' c == ' o ' c == ' O ' c == ' u ' c == ' U ' ) ; }"}
{"text":"Function to reverse order of vowels","code":"string reverseVowel ( string str ) {"}
{"text":"Start two indexes from two corners and move toward each other","code":"int i = 0 ; int j = str . length ( ) - 1 ; while ( i < j ) { if ( ! isVowel ( str [ i ] ) ) { i ++ ; continue ; } if ( ! isVowel ( str [ j ] ) ) { j -- ; continue ; }"}
{"text":"swapping","code":"swap ( str [ i ] , str [ j ] ) ; i ++ ; j -- ; } return str ; }"}
{"text":"Driver function","code":"int main ( ) { string str = \" hello \u2581 world \" ; cout << reverseVowel ( str ) ; return 0 ; }"}
{"text":"C ++ program to count minimum palindromic subsequences to be removed to make an string empty .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"A function to check if a string str is palindrome","code":"bool isPalindrome ( const char * str ) {"}
{"text":"Start from leftmost and rightmost corners of str","code":"int l = 0 ; int h = strlen ( str ) - 1 ;"}
{"text":"Keep comparing characters while they are same","code":"while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return false ; return true ; }"}
{"text":"Returns count of minimum palindromic subseuqnces to be removed to make string empty","code":"int minRemovals ( const char * str ) {"}
{"text":"If string is empty","code":"if ( str [ 0 ] == ' ' ) return 0 ;"}
{"text":"If string is palindrome","code":"if ( isPalindrome ( str ) ) return 1 ;"}
{"text":"If string is not palindrome","code":"return 2 ; }"}
{"text":"Driver code to test above","code":"int main ( ) { cout << minRemovals ( \"010010\" ) << endl ; cout << minRemovals ( \"0100101\" ) << endl ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Iterative function to calculate ( x ^ y ) % p in O ( log y )","code":"int power ( int x , unsigned int y , int p ) {"}
{"text":"Initialize result","code":"int res = 1 ;"}
{"text":"Update x if it is >= p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y & 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y \/ 2","code":"y = y >> 1 ; x = ( x * x ) % p ; } return res ; }"}
{"text":"Function to return XXX ... . . ( N times ) % M","code":"int findModuloByM ( int X , int N , int M ) {"}
{"text":"Return the mod by M of smaller numbers","code":"if ( N < 6 ) {"}
{"text":"Creating a string of N X 's","code":"string temp ( N , ( char ) ( 48 + X ) ) ;"}
{"text":"Converting the string to int and calculating the modulo","code":"int res = stoi ( temp ) % M ; return res ; }"}
{"text":"Checking the parity of N","code":"if ( N % 2 == 0 ) {"}
{"text":"Dividing the number into equal half","code":"int half = findModuloByM ( X , N \/ 2 , M ) % M ;"}
{"text":"Utilizing the formula for even N","code":"int res = ( half * power ( 10 , N \/ 2 , M ) + half ) % M ; return res ; } else {"}
{"text":"Dividing the number into equal half","code":"int half = findModuloByM ( X , N \/ 2 , M ) % M ;"}
{"text":"Utilizing the formula for odd N","code":"int res = ( half * power ( 10 , N \/ 2 + 1 , M ) + half * 10 + X ) % M ; return res ; } }"}
{"text":"Driver code","code":"int main ( ) { int X = 6 , N = 14 , M = 9 ;"}
{"text":"Print XXX ... ( N times ) % M","code":"cout << findModuloByM ( X , N , M ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Structure of the circle","code":"class circle { public : double x ; double y ; double r ; } ;"}
{"text":"Utility function to check if given circles satisfy required criteria","code":"bool check ( circle C [ ] ) {"}
{"text":"Stores the distance between the centres of C1 and C2","code":"double C1C2 = sqrt ( ( C [ 1 ] . x - C [ 0 ] . x ) * ( C [ 1 ] . x - C [ 0 ] . x ) + ( C [ 1 ] . y - C [ 0 ] . y ) * ( C [ 1 ] . y - C [ 0 ] . y ) ) ;"}
{"text":"Stores the status if the given given criteria is satisfied or not","code":"bool flag = 0 ;"}
{"text":"If C1C2 is less than the sum of the radii of the first 2 circles","code":"if ( C1C2 < ( C [ 0 ] . r + C [ 1 ] . r ) ) {"}
{"text":"If C3 is the midpoint of the centres at C1 and C2","code":"if ( ( C [ 0 ] . x + C [ 1 ] . x ) == 2 * C [ 2 ] . x && ( C [ 0 ] . y + C [ 1 ] . y ) == 2 * C [ 2 ] . y ) {"}
{"text":"Mark flag true","code":"flag = 1 ; } }"}
{"text":"Return flag","code":"return flag ; }"}
{"text":"Function to check if the given circles satisfy required criteria","code":"bool IsFairTriplet ( circle c [ ] ) { bool f = false ;"}
{"text":"Check for the current combination of circles","code":"f |= check ( c ) ; for ( int i = 0 ; i < 2 ; i ++ ) { swap ( c [ 0 ] , c [ 2 ] ) ;"}
{"text":"Check for the next combination","code":"f |= check ( c ) ; } return f ; }"}
{"text":"Driver Code","code":"int main ( ) { circle C [ 3 ] ; C [ 0 ] = { 0 , 0 , 8 } ; C [ 1 ] = { 0 , 10 , 6 } ; C [ 2 ] = { 0 , 5 , 5 } ; if ( IsFairTriplet ( C ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the eccentricity of a hyperbola","code":"double eccHyperbola ( double A , double B ) {"}
{"text":"Stores the squared ratio of major axis to minor axis","code":"double r = ( double ) B * B \/ A * A ;"}
{"text":"Increment r by 1","code":"r += 1 ;"}
{"text":"Return the square root of r","code":"return sqrt ( r ) ; }"}
{"text":"Driver Code","code":"int main ( ) { double A = 3.0 , B = 2.0 ; cout << eccHyperbola ( A , B ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of cyclic quadrilateral","code":"float calculateArea ( float A , float B , float C , float D ) {"}
{"text":"Stores the value of half of the perimeter","code":"float S = ( A + B + C + D ) \/ 2 ;"}
{"text":"Stores area of cyclic quadrilateral","code":"float area = sqrt ( ( S - A ) * ( S - B ) * ( S - C ) * ( S - D ) ) ;"}
{"text":"Return the resultant area","code":"return area ; }"}
{"text":"Driver Code","code":"int main ( ) { float A = 10 ; float B = 15 ; float C = 20 ; float D = 25 ; cout << calculateArea ( A , B , C , D ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate ratio of a triangle inscribed in an ellipse to the triangle on the auxiliary circle","code":"void triangleArea ( int a , int b ) {"}
{"text":"Stores the ratio of the semi - major to semi - minor axes","code":"double ratio = ( double ) b \/ a ;"}
{"text":"Print the ratio","code":"cout << ratio ; }"}
{"text":"Driver Code","code":"int main ( ) { int a = 1 , b = 2 ; triangleArea ( a , b ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the distance between a pair of points","code":"float distance ( int m , int n , int p , int q ) { return sqrt ( pow ( n - m , 2 ) + pow ( q - p , 2 ) * 1.0 ) ; }"}
{"text":"Function to calculate the coordinates of the excenters of a triangle","code":"void Excenters ( int x1 , int y1 , int x2 , int y2 , int x3 , int y3 ) {"}
{"text":"Length of the sides of the triangle","code":"float a = distance ( x2 , x3 , y2 , y3 ) ; float b = distance ( x3 , x1 , y3 , y1 ) ; float c = distance ( x1 , x2 , y1 , y2 ) ;"}
{"text":"Stores the coordinates of the excenters of the triangle","code":"vector < pair < float , float > > excenter ( 4 ) ;"}
{"text":"For I1","code":"excenter [ 1 ] . first = ( - ( a * x1 ) + ( b * x2 ) + ( c * x3 ) ) \/ ( - a + b + c ) ; excenter [ 1 ] . second = ( - ( a * y1 ) + ( b * y2 ) + ( c * y3 ) ) \/ ( - a + b + c ) ;"}
{"text":"For I2","code":"excenter [ 2 ] . first = ( ( a * x1 ) - ( b * x2 ) + ( c * x3 ) ) \/ ( a - b + c ) ; excenter [ 2 ] . second = ( ( a * y1 ) - ( b * y2 ) + ( c * y3 ) ) \/ ( a - b + c ) ;"}
{"text":"For I3","code":"excenter [ 3 ] . first = ( ( a * x1 ) + ( b * x2 ) - ( c * x3 ) ) \/ ( a + b - c ) ; excenter [ 3 ] . second = ( ( a * y1 ) + ( b * y2 ) - ( c * y3 ) ) \/ ( a + b - c ) ;"}
{"text":"Print the excenters of the triangle","code":"for ( int i = 1 ; i <= 3 ; i ++ ) { cout << excenter [ i ] . first << \" \u2581 \" << excenter [ i ] . second << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { float x1 , x2 , x3 , y1 , y2 , y3 ; x1 = 0 ; x2 = 3 ; x3 = 0 ; y1 = 0 ; y2 = 0 ; y3 = 4 ; Excenters ( x1 , y1 , x2 , y2 , x3 , y3 ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate height of the trapezoid","code":"void findHeight ( float p1 , float p2 , float b , float c ) { float a = max ( p1 , p2 ) - min ( p1 , p2 ) ;"}
{"text":"Apply Heron 's formula","code":"float s = ( a + b + c ) \/ 2 ;"}
{"text":"Calculate the area","code":"float area = sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ;"}
{"text":"Calculate height of trapezoid","code":"float height = ( area * 2 ) \/ a ;"}
{"text":"Print the height","code":"cout << \" Height \u2581 is : \u2581 \" << height ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given a , b , p1 and p2","code":"float p1 = 25 , p2 = 10 ; float a = 14 , b = 13 ; findHeight ( p1 , p2 , a , b ) ; return 0 ; }"}
{"text":"C ++ program to find nth Icositetragonal number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find Icositetragonal number","code":"int Icositetragonal_num ( int n ) {"}
{"text":"Formula to calculate nth Icositetragonal number","code":"return ( 22 * n * n - 20 * n ) \/ 2 ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; cout << Icositetragonal_num ( n ) << endl ; n = 10 ; cout << Icositetragonal_num ( n ) ; return 0 ; }"}
{"text":"CPP implementation to find the rea of the circle inscribed in a trapezoid having non - parallel sides m , n","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find area of circle inscribed in a trapezoid having non - parallel sides m , n","code":"double area_of_circle ( int m , int n ) {"}
{"text":"radius of circle by the formula i . e . root ( m * n ) \/ 2 area of circle = ( 3.141 ) * ( R * * 2 )","code":"int square_of_radius = ( m * n ) \/ 4 ; double area = ( 3.141 * square_of_radius ) ; return area ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 10 ; int m = 30 ; cout << ( area_of_circle ( m , n ) ) ; }"}
{"text":"C ++ implementation to find the area of the equilateral triangle inscribed in a circle of radius R","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of equilateral triangle inscribed in a circle of radius R","code":"double area ( int R ) {"}
{"text":"Base and Height of equilateral triangle","code":"double base = 1.732 * R ; double height = ( 1.5 ) * R ;"}
{"text":"Area using Base and Height","code":"double area = 0.5 * base * height ; return area ; }"}
{"text":"Driver Code","code":"int main ( ) { int R = 7 ; cout << ( area ( R ) ) ; return 0 ; }"}
{"text":"C ++ Program to find the biggest circle which can be inscribed within the semicircle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of the circle","code":"float circlearea ( float R ) {"}
{"text":"Radius cannot be negative","code":"if ( R < 0 ) return -1 ;"}
{"text":"Area of the largest circle","code":"float a = 3.14 * R * R \/ 4 ; return a ; }"}
{"text":"Driver code","code":"int main ( ) { float R = 2 ; cout << circlearea ( R ) << endl ; return 0 ; }"}
{"text":"C ++ program to Number of pairs of lines having integer intersection points","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Count number of pairs of lines having integer intersection point","code":"int countPairs ( int * P , int * Q , int N , int M ) {"}
{"text":"Initialize arrays to store counts","code":"int A [ 2 ] = { 0 } , B [ 2 ] = { 0 } ;"}
{"text":"Count number of odd and even Pi","code":"for ( int i = 0 ; i < N ; i ++ ) A [ P [ i ] % 2 ] ++ ;"}
{"text":"Count number of odd and even Qi","code":"for ( int i = 0 ; i < M ; i ++ ) B [ Q [ i ] % 2 ] ++ ;"}
{"text":"Return the count of pairs","code":"return ( A [ 0 ] * B [ 0 ] + A [ 1 ] * B [ 1 ] ) ; }"}
{"text":"Driver code","code":"int main ( ) { int P [ ] = { 1 , 3 , 2 } , Q [ ] = { 3 , 0 } ; int N = sizeof ( P ) \/ sizeof ( P [ 0 ] ) ; int M = sizeof ( Q ) \/ sizeof ( Q [ 0 ] ) ; cout << countPairs ( P , Q , N , M ) ; return 0 ; }"}
{"text":"C ++ implementation of the above pproach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count maximum number of intersections possible","code":"int countIntersections ( int n ) { return n * ( n - 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; cout << countIntersections ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE #define PI  3.14159 NEW_LINE using namespace std ;"}
{"text":"Function to return the area of triangle BCD","code":"double areaOfTriangle ( float d ) {"}
{"text":"Using Golden ratio","code":"float c = 1.618 * d ; float s = ( d + c + c ) \/ 2 ;"}
{"text":"Calculate area of triangle BCD","code":"double area = sqrt ( s * ( s - c ) * ( s - c ) * ( s - d ) ) ;"}
{"text":"Return area of all 5 triangle are same","code":"return 5 * area ; }"}
{"text":"Function to return the area of regular pentagon","code":"double areaOfRegPentagon ( float d ) {"}
{"text":"Calculate the area of regular pentagon using above formula","code":"double cal = 4 * tan ( PI \/ 5 ) ; double area = ( 5 * d * d ) \/ cal ;"}
{"text":"Return area of regular pentagon","code":"return area ; }"}
{"text":"Function to return the area of pentagram","code":"double areaOfPentagram ( float d ) {"}
{"text":"Area of a pentagram is equal to the area of regular pentagon and five times the area of Triangle","code":"return areaOfRegPentagon ( d ) + areaOfTriangle ( d ) ; }"}
{"text":"Driver code","code":"int main ( ) { float d = 5 ; cout << areaOfPentagram ( d ) << endl ; return 0 ; }"}
{"text":"C ++ program to find the angle subtended by the chord to the centre of the circle when the angle subtended by another equal chord of a congruent circle is given","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void anglequichord ( int z ) { cout << \" The \u2581 angle \u2581 is \u2581 \" << z << \" \u2581 degrees \" << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int z = 48 ; anglequichord ( z ) ; return 0 ; }"}
{"text":"C ++ program to convert the digits of a number to its ASCII values","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to convert digits of N to respective ASCII values","code":"int convertToASCII ( int N ) { string num = to_string ( N ) ; for ( char ch : num ) { cout << ch << \" \u2581 ( \" << ( int ) ch << \" ) STRNEWLINE \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 36 ; convertToASCII ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to form product array with O ( n ) time and O ( 1 ) space","code":"void productExceptSelf ( int arr [ ] , int N ) {"}
{"text":"Stores the product of array","code":"int product = 1 ;"}
{"text":"Stores the count of zeros","code":"int z = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If arr [ i ] is not zero","code":"if ( arr [ i ] ) product *= arr [ i ] ;"}
{"text":"If arr [ i ] is zero then increment count of z by 1","code":"z += ( arr [ i ] == 0 ) ; }"}
{"text":"Stores the absolute value of the product","code":"int a = abs ( product ) , b ; for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If Z is equal to 1","code":"if ( z == 1 ) {"}
{"text":"If arr [ i ] is not zero","code":"if ( arr [ i ] ) arr [ i ] = 0 ;"}
{"text":"Else","code":"else arr [ i ] = product ; continue ; }"}
{"text":"If count of 0 s at least 2","code":"else if ( z > 1 ) {"}
{"text":"Assign arr [ i ] = 0","code":"arr [ i ] = 0 ; continue ; }"}
{"text":"Store absolute value of arr [ i ]","code":"int b = abs ( arr [ i ] ) ;"}
{"text":"Find the value of a \/ b","code":"int curr = round ( exp ( log ( a ) - log ( b ) ) ) ;"}
{"text":"If arr [ i ] and product both are less than zero","code":"if ( arr [ i ] < 0 && product < 0 ) arr [ i ] = curr ;"}
{"text":"If arr [ i ] and product both are greater than zero","code":"else if ( arr [ i ] > 0 && product > 0 ) arr [ i ] = curr ;"}
{"text":"Else","code":"else arr [ i ] = -1 * curr ; }"}
{"text":"Traverse the array arr [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) { cout << arr [ i ] << \" \u2581 \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 10 , 3 , 5 , 6 , 2 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"productExceptSelf ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count of subarrays made up of single digit integers only","code":"int singleDigitSubarrayCount ( int arr [ ] , int N ) {"}
{"text":"Stores count of subarrays","code":"int res = 0 ;"}
{"text":"Stores the count of consecutive single digit numbers in the array","code":"int count = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) { if ( arr [ i ] <= 9 ) {"}
{"text":"Increment size of block by 1","code":"count ++ ;"}
{"text":"Increment res by count","code":"res += count ; } else {"}
{"text":"Assign count = 0","code":"count = 0 ; } } cout << res ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 0 , 1 , 14 , 2 , 5 } ;"}
{"text":"Size of the array","code":"int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; singleDigitSubarrayCount ( arr , N ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the number N can be expressed as sum of 2 or more consecutive numbers or not","code":"bool isPossible ( int N ) { return ( ( N & ( N - 1 ) ) && N ) ; }"}
{"text":"Function to count integers in the range [ 1 , N ] that can be expressed as sum of 2 or more consecutive numbers","code":"void countElements ( int N ) {"}
{"text":"Stores the required count","code":"int count = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( isPossible ( i ) ) count ++ ; } cout << count ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 15 ; countElements ( N ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count integers in the range [ 1 , N ] that can be expressed as sum of 2 or more consecutive numbers","code":"void countElements ( int N ) { int Cur_Ele = 1 ; int Count = 0 ;"}
{"text":"Count powers of 2 up to N","code":"while ( Cur_Ele <= N ) {"}
{"text":"Increment count","code":"Count ++ ;"}
{"text":"Update current power of 2","code":"Cur_Ele = Cur_Ele * 2 ; } cout << N - Count ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 15 ; countElements ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate maximum difference between adjacent elements excluding every array element once","code":"void maxAdjacent ( int * arr , int N ) { vector < int > res ; int arr_max = INT_MIN ;"}
{"text":"Compute maximum adjacent difference for whole array","code":"for ( int i = 1 ; i < N ; i ++ ) { arr_max = max ( arr_max , abs ( arr [ i - 1 ] - arr [ i ] ) ) ; } for ( int i = 1 ; i < N - 1 ; i ++ ) { int curr_max = abs ( arr [ i - 1 ] - arr [ i + 1 ] ) ;"}
{"text":"Store the maximum between arr_max and curr_max","code":"int ans = max ( curr_max , arr_max ) ;"}
{"text":"Append the result into a vector","code":"res . push_back ( ans ) ; }"}
{"text":"Print the result","code":"for ( auto x : res ) cout << x << \" \u2581 \" ; cout << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 3 , 4 , 7 , 8 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; maxAdjacent ( arr , N ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find min operations to make even and odd count equal","code":"int minimumIncrement ( int arr [ ] , int N ) {"}
{"text":"Odd size will never make odd and even counts equal","code":"if ( N % 2 != 0 ) { cout << \" - 1\" ; exit ( 0 ) ; }"}
{"text":"Stores the count of even numbers in the array arr [ ]","code":"int cntEven = 0 ;"}
{"text":"Stores count of odd numbers in the array arr [ ]","code":"int cntOdd = 0 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If arr [ i ] is an even number","code":"if ( arr [ i ] % 2 == 0 ) {"}
{"text":"Update cntEven","code":"cntEven += 1 ; } }"}
{"text":"Odd numbers in arr [ ]","code":"cntOdd = N - cntEven ;"}
{"text":"Return absolute difference divided by 2","code":"return abs ( cntEven - cntOdd ) \/ 2 ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 3 , 4 , 9 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function call","code":"cout << minimumIncrement ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find count the ways to construct an array , B [ ] such that abs ( A [ i ] - B [ i ] ) <= 1 and product of elements of B [ ] is even","code":"void cntWaysConsArray ( int A [ ] , int N ) {"}
{"text":"Stores count of arrays B [ ] such that abs ( A [ i ] - B [ i ] ) <= 1","code":"int total = 1 ;"}
{"text":"Stores count of arrays B [ ] whose product of elements is not even","code":"int oddArray = 1 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Update total","code":"total = total * 3 ;"}
{"text":"If A [ i ] is an even number","code":"if ( A [ i ] % 2 == 0 ) {"}
{"text":"Update oddArray","code":"oddArray *= 2 ; } }"}
{"text":"Print 3 ^ N - 2 ^ X","code":"cout << total - oddArray << \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int A [ ] = { 2 , 4 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; cntWaysConsArray ( A , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the numbers in the range [ 1 , N ] whose rightmost set bit is K","code":"int countNumberHavingKthBitSet ( int N , int K ) {"}
{"text":"Stores the number whose rightmost set bit is K","code":"int numbers_rightmost_setbit_K ; for ( int i = 1 ; i <= K ; i ++ ) {"}
{"text":"Numbers whose rightmost set bit is i","code":"int numbers_rightmost_bit_i = ( N + 1 ) \/ 2 ;"}
{"text":"Subtracting the number whose rightmost set bit is i , from N","code":"N -= numbers_rightmost_bit_i ;"}
{"text":"Since i = k , then the number whose rightmost set bit is K is stored","code":"if ( i == K ) { numbers_rightmost_setbit_K = numbers_rightmost_bit_i ; } } cout << numbers_rightmost_setbit_K ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 15 ; int K = 2 ; countNumberHavingKthBitSet ( N , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"Function to count set bits in binary representation of number N","code":"int countSetBits ( int N ) { int count = 0 ;"}
{"text":"Count set bits in N","code":"while ( N ) { N = N & ( N - 1 ) ; count ++ ; }"}
{"text":"Return the final count","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 4 ; int bits = countSetBits ( N ) ;"}
{"text":"Print odd Binomial coefficients","code":"cout << \" Odd \u2581 \" << \" : \u2581 \" << pow ( 2 , bits ) << \" STRNEWLINE \" ;"}
{"text":"Print even Binomial coefficients","code":"cout << \" Even \u2581 \" << \" : \u2581 \" << N + 1 - pow ( 2 , bits ) << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of replacements required to make all array elements even","code":"void minMoves ( int arr [ ] , int N ) {"}
{"text":"Stores the count of odd elements","code":"int odd_element_cnt = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Increase count of odd elements","code":"if ( arr [ i ] % 2 != 0 ) { odd_element_cnt ++ ; } }"}
{"text":"Store number of replacements required","code":"int moves = ( odd_element_cnt ) \/ 2 ;"}
{"text":"Two extra moves will be required to make the last odd element even","code":"if ( odd_element_cnt % 2 != 0 ) moves += 2 ;"}
{"text":"Print the minimum replacements","code":"cout << moves ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 6 , 3 , 7 , 20 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function call","code":"minMoves ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to partition squares of N natural number in two subset","code":"void minimumSubsetDifference ( int N ) {"}
{"text":"Store the count of blocks of size 8","code":"int blockOfSize8 = N \/ 8 ;"}
{"text":"Partition of block of 8 element","code":"string str = \" ABBABAAB \" ;"}
{"text":"Store the minimum subset difference","code":"int subsetDifference = 0 ;"}
{"text":"Partition of N elements to minimize their subset sum difference","code":"string partition = \" \" ; while ( blockOfSize8 -- ) { partition += str ; }"}
{"text":"Store elements of subset A and B","code":"vector < int > A , B ; for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If element is of type A","code":"if ( partition [ i ] == ' A ' ) { A . push_back ( ( i + 1 ) * ( i + 1 ) ) ; }"}
{"text":"If the element is of type B","code":"else { B . push_back ( ( i + 1 ) * ( i + 1 ) ) ; } }"}
{"text":"Print the minimum subset difference","code":"cout << subsetDifference << \" STRNEWLINE \" ;"}
{"text":"Print the first subset","code":"for ( int i = 0 ; i < A . size ( ) ; i ++ ) cout << A [ i ] << \" \u2581 \" ; cout << \" STRNEWLINE \" ;"}
{"text":"Print the second subset","code":"for ( int i = 0 ; i < B . size ( ) ; i ++ ) cout << B [ i ] << \" \u2581 \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 8 ;"}
{"text":"Function Call","code":"minimumSubsetDifference ( N ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the largest number X such that it divides P but is not divisible by Q","code":"void findTheGreatestX ( int P , int Q ) {"}
{"text":"Stores the frequency count of of all Prime Factors","code":"map < int , int > divisiors ; for ( int i = 2 ; i * i <= Q ; i ++ ) { while ( Q % i == 0 and Q > 1 ) { Q \/= i ;"}
{"text":"Increment the frequency of the current prime factor","code":"divisiors [ i ] ++ ; } }"}
{"text":"If Q is a prime factor","code":"if ( Q > 1 ) divisiors [ Q ] ++ ;"}
{"text":"Stores the desired result","code":"int ans = 0 ;"}
{"text":"Iterate through all divisors of Q","code":"for ( auto i : divisiors ) { int frequency = i . second ; int temp = P ;"}
{"text":"Stores the frequency count of current prime divisor on dividing P","code":"int cur = 0 ; while ( temp % i . first == 0 ) { temp \/= i . first ;"}
{"text":"Count the frequency of the current prime factor","code":"cur ++ ; }"}
{"text":"If cur is less than frequency then P is the final result","code":"if ( cur < frequency ) { ans = P ; break ; } temp = P ;"}
{"text":"Iterate to get temporary answer","code":"for ( int j = cur ; j >= frequency ; j -- ) { temp \/= i . first ; }"}
{"text":"Update current answer","code":"ans = max ( temp , ans ) ; }"}
{"text":"Print the desired result","code":"cout << ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given P and Q","code":"int P = 10 , Q = 4 ;"}
{"text":"Function Call","code":"findTheGreatestX ( P , Q ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if there is any row where number of unique elements are greater than 1","code":"string checkRearrangements ( vector < vector < int > > mat , int N , int M ) {"}
{"text":"Iterate over the matrix","code":"for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j < M ; j ++ ) { if ( mat [ i ] [ 0 ] != mat [ i ] [ j ] ) { return \" Yes \" ; } } } return \" No \" ; }"}
{"text":"Function to check if it is possible to rearrange mat [ ] [ ] such that XOR of its first column is non - zero","code":"string nonZeroXor ( vector < vector < int > > mat , int N , int M ) { int res = 0 ;"}
{"text":"Find bitwise XOR of the first column of mat [ ] [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) { res = res ^ mat [ i ] [ 0 ] ; }"}
{"text":"If bitwise XOR of the first column of mat [ ] [ ] is non - zero","code":"if ( res != 0 ) return \" Yes \" ;"}
{"text":"Otherwise check rearrangements","code":"else return checkRearrangements ( mat , N , M ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Matrix mat [ ] [ ]","code":"vector < vector < int > > mat = { { 1 , 1 , 2 } , { 2 , 2 , 2 } , { 3 , 3 , 3 } } ; int N = mat . size ( ) ; int M = mat [ 0 ] . size ( ) ;"}
{"text":"Function Call","code":"cout << nonZeroXor ( mat , N , M ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define size_int  32"}
{"text":"Function to maximize the value for the given function and the array elements","code":"int functionMax ( int arr [ ] , int n ) {"}
{"text":"Vector array to maintain which bit is set for which integer in the given array by saving index of that integer","code":"vector < int > setBit [ 32 ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < size_int ; j ++ ) {"}
{"text":"Check if j - th bit is set for i - th integer","code":"if ( arr [ i ] & ( 1 << j ) )"}
{"text":"Push the index of that integer in setBit [ j ]","code":"setBit [ j ] . push_back ( i ) ; } }"}
{"text":"Find the element having highest significant set bit unset in other elements","code":"for ( int i = size_int ; i >= 0 ; i -- ) { if ( setBit [ i ] . size ( ) == 1 ) {"}
{"text":"Place that integer at 0 - th index","code":"swap ( arr [ 0 ] , arr [ setBit [ i ] [ 0 ] ] ) ; break ; } }"}
{"text":"Store the maximum AND value","code":"int maxAnd = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { maxAnd = maxAnd & ( ~ arr [ i ] ) ; }"}
{"text":"Return the answer","code":"return maxAnd ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 4 , 8 , 16 } ; int n = sizeof arr \/ sizeof arr [ 0 ] ;"}
{"text":"Function call","code":"cout << functionMax ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function returns nCr i . e . Binomial Coefficient","code":"int nCr ( int n , int r ) {"}
{"text":"Initialize res with 1","code":"int res = 1 ;"}
{"text":"Since C ( n , r ) = C ( n , n - r )","code":"if ( r > n - r ) r = n - r ;"}
{"text":"Evaluating expression","code":"for ( int i = 0 ; i < r ; ++ i ) { res *= ( n - i ) ; res \/= ( i + 1 ) ; } return res ; }"}
{"text":"Function to calculate and return the sum of the products","code":"int solve ( int n , int m , int k ) {"}
{"text":"Initialize sum to 0","code":"int sum = 0 ;"}
{"text":"Traverse from 0 to k","code":"for ( int i = 0 ; i <= k ; i ++ ) sum += nCr ( n , i ) * nCr ( m , k - i ) ; return sum ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 , m = 2 , k = 2 ; cout << solve ( n , m , k ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to return a ^ n","code":"int powerOptimised ( int a , int n ) {"}
{"text":"Stores final answer","code":"int ans = 1 ; while ( n > 0 ) { int last_bit = ( n & 1 ) ;"}
{"text":"Check if current LSB is set","code":"if ( last_bit ) { ans = ans * a ; } a = a * a ;"}
{"text":"Right shift","code":"n = n >> 1 ; } return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { int a = 3 , n = 5 ; cout << powerOptimised ( a , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the integer M such that gcd ( N , M ) is maximum","code":"int findMaximumGcd ( int n ) {"}
{"text":"Initialize a variable","code":"int max_gcd = 1 ;"}
{"text":"Find all the divisors of N and return the maximum divisor","code":"for ( int i = 1 ; i * i <= n ; i ++ ) {"}
{"text":"Check if i is divisible by N","code":"if ( n % i == 0 ) {"}
{"text":"Update max_gcd","code":"if ( i > max_gcd ) max_gcd = i ; if ( ( n \/ i != i ) && ( n \/ i != n ) && ( ( n \/ i ) > max_gcd ) ) max_gcd = n \/ i ; } }"}
{"text":"Return the maximum value","code":"return max_gcd ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Number","code":"int N = 10 ;"}
{"text":"Function Call","code":"cout << findMaximumGcd ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE #define x  2000021 NEW_LINE using namespace std ;"}
{"text":"For storing smallest prime factor","code":"long long int v [ x ] ;"}
{"text":"Function construct smallest prime factor array","code":"void sieve ( ) { v [ 1 ] = 1 ;"}
{"text":"Mark smallest prime factor for every number to be itself .","code":"for ( long long int i = 2 ; i < x ; i ++ ) v [ i ] = i ;"}
{"text":"separately mark spf for every even number as 2","code":"for ( long long int i = 4 ; i < x ; i += 2 ) v [ i ] = 2 ; for ( long long int i = 3 ; i * i < x ; i ++ ) {"}
{"text":"Check if i is prime","code":"if ( v [ i ] == i ) {"}
{"text":"Mark SPF for all numbers divisible by i","code":"for ( long long int j = i * i ; j < x ; j += i ) {"}
{"text":"Mark spf [ j ] if it is not previously marked","code":"if ( v [ j ] == j ) { v [ j ] = i ; } } } } }"}
{"text":"Function for counts total number of prime factors","code":"long long int prime_factors ( long long n ) { set < long long int > s ; while ( n != 1 ) { s . insert ( v [ n ] ) ; n = n \/ v [ n ] ; } return s . size ( ) ; }"}
{"text":"Function to print elements of sets of K consecutive elements having K prime factors","code":"void distinctPrimes ( long long int m , long long int k ) {"}
{"text":"To store the result","code":"vector < long long int > result ; for ( long long int i = 14 ; i < m + k ; i ++ ) {"}
{"text":"Count number of prime factors of number","code":"long long count = prime_factors ( i ) ;"}
{"text":"If number has exactly K factors push in result [ ]","code":"if ( count == k ) { result . push_back ( i ) ; } } long long int p = result . size ( ) ; for ( long long int index = 0 ; index < p - 1 ; index ++ ) { long long element = result [ index ] ; long long count = 1 , z = index ;"}
{"text":"Iterate till we get K consecutive elements in result [ ]","code":"while ( z < p - 1 && count <= k && result [ z ] + 1 == result [ z + 1 ] ) {"}
{"text":"Count sequence until K","code":"count ++ ; z ++ ; }"}
{"text":"Print the element if count >= K","code":"if ( count >= k ) cout << element << ' \u2581 ' ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"To construct spf [ ]","code":"sieve ( ) ;"}
{"text":"Given N and K","code":"long long int N = 1000 , K = 3 ;"}
{"text":"Function Call","code":"distinctPrimes ( N , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to multiply Complex Numbers with just three multiplications","code":"void print_product ( int a , int b , int c , int d ) {"}
{"text":"Find value of prod1 , prod2 and prod3","code":"int prod1 = a * c ; int prod2 = b * d ; int prod3 = ( a + b ) * ( c + d ) ;"}
{"text":"Real Part","code":"int real = prod1 - prod2 ;"}
{"text":"Imaginary Part","code":"int imag = prod3 - ( prod1 + prod2 ) ;"}
{"text":"Print the result","code":"cout << real << \" \u2581 + \u2581 \" << imag << \" i \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int a , b , c , d ;"}
{"text":"Given four Numbers","code":"a = 2 ; b = 3 ; c = 4 ; d = 5 ;"}
{"text":"Function Call","code":"print_product ( a , b , c , d ) ; return 0 ; }"}
{"text":"C ++ implementation for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if a number is an Insolite numbers","code":"bool isInsolite ( int n ) { int N = n ;"}
{"text":"To store sum of squares of digits","code":"int sum = 0 ;"}
{"text":"To store product of squares of digits","code":"int product = 1 ; while ( n != 0 ) {"}
{"text":"extracting digit","code":"int r = n % 10 ; sum = sum + r * r ; product = product * r * r ; n = n \/ 10 ; } return ( N % sum == 0 ) && ( N % product == 0 ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 111 ;"}
{"text":"Function Call","code":"if ( isInsolite ( N ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation to check if a number is Superabundant","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the sum of all divisors of a given number","code":"int sigma ( int n ) { if ( n == 1 ) return 1 ;"}
{"text":"Sum of divisors","code":"int result = 0 ;"}
{"text":"find all divisors which divides ' num '","code":"for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) {"}
{"text":"if ' i ' is divisor of ' n '","code":"if ( n % i == 0 ) {"}
{"text":"if both divisors are same then add it once else add both","code":"if ( i == ( n \/ i ) ) result += i ; else result += ( i + n \/ i ) ; } }"}
{"text":"Add 1 and n to result as above loop considers proper divisors greater than 1.","code":"return ( result + n + 1 ) ; }"}
{"text":"Function to check if N is a superabundant number","code":"bool isSuperabundant ( int N ) {"}
{"text":"to check all numbers from 1 to N","code":"for ( float i = 1 ; i < N ; i ++ ) { float x = sigma ( i ) \/ i ; float y = sigma ( N ) \/ ( N * 1.0 ) ; if ( x > y ) return false ; } return true ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 4 ; isSuperabundant ( N ) ? cout << \" Yes \" : cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the N - th icosikaipentagon number","code":"int isDNum ( int n ) {"}
{"text":"number should be greater than 3","code":"if ( n < 4 ) return false ; int numerator , hcf ;"}
{"text":"Check every k in range 2 to n - 1","code":"for ( int k = 2 ; k <= n ; k ++ ) { numerator = pow ( k , n - 2 ) - k ; hcf = __gcd ( n , k ) ; }"}
{"text":"condition for D - Number","code":"if ( hcf == 1 && ( numerator % n ) != 0 ) return false ; return true ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 15 ; int a = isDNum ( n ) ; if ( a ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find prime divisors of all numbers from 1 to N","code":"int Sum ( int N ) { int SumOfPrimeDivisors [ N + 1 ] = { 0 } ; for ( int i = 2 ; i <= N ; ++ i ) {"}
{"text":"if the number is prime","code":"if ( ! SumOfPrimeDivisors [ i ] ) {"}
{"text":"add this prime to all it 's multiples","code":"for ( int j = i ; j <= N ; j += i ) { SumOfPrimeDivisors [ j ] += i ; } } } return SumOfPrimeDivisors [ N ] ; }"}
{"text":"Function to check Ruth - Aaron number","code":"bool RuthAaronNumber ( int n ) { if ( Sum ( n ) == Sum ( n + 1 ) ) return true ; else return false ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 714 ; if ( RuthAaronNumber ( N ) ) { cout << \" Yes \" ; } else { cout << \" No \" ; } return 0 ; }"}
{"text":"C ++ program to maximize the sum of absolute differences between adjacent elements","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function for maximizing the sum","code":"int maxAdjacentDifference ( int N , int K ) {"}
{"text":"Difference is 0 when only one element is present in array","code":"if ( N == 1 ) { return 0 ; }"}
{"text":"Difference is K when two elements are present in array","code":"if ( N == 2 ) { return K ; }"}
{"text":"Otherwise","code":"return 2 * K ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 6 ; int K = 11 ; cout << maxAdjacentDifference ( N , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int mod = 1000000007 ;"}
{"text":"Functions returns sum of numbers from 1 to n","code":"int linearSum ( int n ) { return ( n * ( n + 1 ) \/ 2 ) % mod ; }"}
{"text":"Functions returns sum of numbers from a + 1 to b","code":"int rangeSum ( int b , int a ) { return ( linearSum ( b ) - linearSum ( a ) ) % mod ; }"}
{"text":"Function returns total sum of divisors","code":"int totalSum ( int n ) {"}
{"text":"Stores total sum","code":"int result = 0 ; int i = 1 ;"}
{"text":"Finding numbers and its occurence","code":"while ( true ) {"}
{"text":"Sum of product of each number and its occurence","code":"result += rangeSum ( n \/ i , n \/ ( i + 1 ) ) * ( i % mod ) % mod ; result %= mod ; if ( i == n ) break ; i = n \/ ( n \/ ( i + 1 ) ) ; } return result ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 4 ; cout << totalSum ( N ) << endl ; N = 12 ; cout << totalSum ( N ) << endl ; return 0 ; }"}
{"text":"C ++ implementation to check if N is a Nontrivial undulant number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if a string is double string or not","code":"bool isDouble ( int num ) { string s = to_string ( num ) ; int l = s . length ( ) ;"}
{"text":"a and b should not be equal","code":"if ( s [ 0 ] == s [ 1 ] ) return false ;"}
{"text":"Condition to check if length is odd make length even","code":"if ( l % 2 == 1 ) { s = s + s [ 1 ] ; l ++ ; }"}
{"text":"first half of s","code":"string s1 = s . substr ( 0 , l \/ 2 ) ;"}
{"text":"second half of s","code":"string s2 = s . substr ( l \/ 2 ) ;"}
{"text":"Double string if first and last half are equal","code":"return s1 == s2 ; }"}
{"text":"Function to check if N is an Nontrivial undulant number","code":"bool isNontrivialUndulant ( int N ) { return N > 100 && isDouble ( N ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 121 ; if ( isNontrivialUndulant ( n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the nth Megagon Number","code":"int MegagonNum ( int n ) { return ( 999998 * n * n - 999996 * n ) \/ 2 ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; cout << MegagonNum ( n ) ; return 0 ; }"}
{"text":"C ++ implementation to find the product of all the pairs from the given array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define mod  1000000007"}
{"text":"Function to return the product of the elements of all possible pairs from the array","code":"int productPairs ( int arr [ ] , int n ) {"}
{"text":"To store the required product","code":"int product = 1 ;"}
{"text":"Nested loop to calculate all possible pairs","code":"for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) {"}
{"text":"Multiply the product of the elements of the current pair","code":"product *= ( arr [ i ] % mod * arr [ j ] % mod ) % mod ; product = product % mod ; } }"}
{"text":"Return the final result","code":"return product % mod ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << productPairs ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation to Find the product of all the pairs from the given array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define mod  1000000007 NEW_LINE #define ll  long long int"}
{"text":"Function to calculate ( x ^ y ) % 1000000007","code":"int power ( int x , unsigned int y ) { int p = 1000000007 ;"}
{"text":"Initialize result","code":"int res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y & 1 ) res = ( res * x ) % p ; y = y >> 1 ; x = ( x * x ) % p ; }"}
{"text":"Return the final result","code":"return res ; }"}
{"text":"Function to return the product of the elements of all possible pairs from the array","code":"ll productPairs ( ll arr [ ] , ll n ) {"}
{"text":"To store the required product","code":"ll product = 1 ;"}
{"text":"Iterate for every element of the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Each element appears ( 2 * n ) times","code":"product = ( product % mod * ( int ) power ( arr [ i ] , ( 2 * n ) ) % mod ) % mod ; } return product % mod ; }"}
{"text":"Driver code","code":"int main ( ) { ll arr [ ] = { 1 , 2 , 3 } ; ll n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << productPairs ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to construct an array that cube sum of all element is a perfect square","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to create and print the array","code":"void constructArray ( int N ) { int arr [ N ] ;"}
{"text":"initialise the array of size N","code":"for ( int i = 1 ; i <= N ; i ++ ) { arr [ i - 1 ] = i ; }"}
{"text":"Print the array","code":"for ( int i = 0 ; i < N ; i ++ ) { cout << arr [ i ] << \" , \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int N = 6 ; constructArray ( N ) ; return 0 ; }"}
{"text":"C ++ implementation to count all subsequence whose product is Composite number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check whether a number is prime or not","code":"bool isPrime ( int n ) { if ( n <= 1 ) return false ; for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }"}
{"text":"Function to find number of subsequences whose product is a composite number","code":"int countSubsequences ( int arr [ ] , int n ) {"}
{"text":"Find total non empty subsequence","code":"int totalSubsequence = pow ( 2 , n ) - 1 ; int countPrime = 0 , countOnes = 0 ;"}
{"text":"Find count of prime number and ones","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) countOnes ++ ; else if ( isPrime ( arr [ i ] ) ) countPrime ++ ; } int compositeSubsequence ;"}
{"text":"Calculate the non empty one subsequence","code":"int onesSequence = pow ( 2 , countOnes ) - 1 ;"}
{"text":"Find count of composite subsequence","code":"compositeSubsequence = totalSubsequence - countPrime - onesSequence - onesSequence * countPrime ; return compositeSubsequence ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 1 , 2 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << countSubsequences ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation to check if a number can be expressed as sum of K consecutive integer","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if a number can be expressed as the sum of k consecutive","code":"void checksum ( int n , int k ) {"}
{"text":"Finding the first term of AP","code":"float first_term = ( ( 2 * n ) \/ k + ( 1 - k ) ) \/ 2.0 ;"}
{"text":"Checking if first term is an integer","code":"if ( first_term - int ( first_term ) == 0 ) {"}
{"text":"Loop to print the K consecutive integers","code":"for ( int i = first_term ; i <= first_term + k - 1 ; i ++ ) { cout << i << \" \u2581 \" ; } } else cout << \" - 1\" ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 33 , k = 6 ; checksum ( n , k ) ; return 0 ; }"}
{"text":"C ++ implementation to represent N as sum of K even numbers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the representation","code":"void sumEvenNumbers ( int N , int K ) { int check = N - 2 * ( K - 1 ) ;"}
{"text":"N must be greater than equal to 2 * K and must be even","code":"if ( check > 0 && check % 2 == 0 ) { for ( int i = 0 ; i < K - 1 ; i ++ ) { cout << \"2 \u2581 \" ; } cout << check ; } else { cout << \" - 1\" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 8 ; int K = 2 ; sumEvenNumbers ( N , K ) ; return 0 ; }"}
{"text":"C ++ program to find the number of contiguous subarrays including the element at every index of the array of size N","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the number of subarrays including the element at every index of the array","code":"vector < int > calculateWays ( int N ) { int x = 0 ; vector < int > v ;"}
{"text":"Creating an array of size N","code":"for ( int i = 0 ; i < N ; i ++ ) v . push_back ( 0 ) ;"}
{"text":"The loop is iterated till half the length of the array","code":"for ( int i = 0 ; i <= N \/ 2 ; i ++ ) {"}
{"text":"Condition to avoid overwriting the middle element for the array with even length .","code":"if ( N % 2 == 0 && i == N \/ 2 ) break ;"}
{"text":"Computing the number of subarrays","code":"x = N * ( i + 1 ) - ( i + 1 ) * i ;"}
{"text":"The ith element from the beginning and the ending have the same number of possible subarrays","code":"v [ i ] = x ; v [ N - i - 1 ] = x ; } return v ; }"}
{"text":"Function to print the vector","code":"void printArray ( vector < int > v ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) cout << v [ i ] << \" \u2581 \" ; }"}
{"text":"Driver code","code":"int main ( ) { vector < int > v ; v = calculateWays ( 4 ) ; printArray ( v ) ; return 0 ; }"}
{"text":"C ++ program to find the smallest number greater than or equal to X and divisible by Y","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAXN  10000000"}
{"text":"Function that returns the sum of digits of a number","code":"int sumOfDigits ( int n ) {"}
{"text":"Initialize variable to store the sum","code":"int sum = 0 ; while ( n > 0 ) {"}
{"text":"Add the last digit of the number","code":"sum += n % 10 ;"}
{"text":"Remove the last digit from the number","code":"n \/= 10 ; } return sum ; }"}
{"text":"Function that returns the smallest number greater than or equal to X and divisible by Y","code":"int smallestNum ( int X , int Y ) {"}
{"text":"Initialize result variable","code":"int res = -1 ;"}
{"text":"Loop through numbers greater than equal to X","code":"for ( int i = X ; i < MAXN ; i ++ ) {"}
{"text":"Calculate sum of digits","code":"int sum_of_digit = sumOfDigits ( i ) ;"}
{"text":"Check if sum of digits is divisible by Y","code":"if ( sum_of_digit % Y == 0 ) { res = i ; break ; } } return res ; }"}
{"text":"Driver code","code":"int main ( ) { int X = 5923 , Y = 13 ; cout << smallestNum ( X , Y ) ; return 0 ; }"}
{"text":"C ++ program to count the numbers which can convert N to 1 using the given operation","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the numbers which can convert N to 1 using the given operation","code":"int countValues ( int N ) { vector < int > div ;"}
{"text":"Store all the divisors of N","code":"for ( int i = 2 ; i * i <= N ; i ++ ) {"}
{"text":"If i is a divisor","code":"if ( N % i == 0 ) { div . push_back ( i ) ;"}
{"text":"If i is not equal to N \/ i","code":"if ( N != i * i ) { div . push_back ( N \/ i ) ; } } } int answer = 0 ;"}
{"text":"Iterate through all the divisors of N - 1 and count them in answer","code":"for ( int i = 1 ; i * i <= N - 1 ; i ++ ) {"}
{"text":"Check if N - 1 is a divisor or not","code":"if ( ( N - 1 ) % i == 0 ) { if ( i * i == N - 1 ) answer ++ ; else answer += 2 ; } }"}
{"text":"Iterate through all divisors and check for N mod d = 1 or ( N - 1 ) mod d = 0","code":"for ( auto d : div ) { int K = N ; while ( K % d == 0 ) K \/= d ; if ( ( K - 1 ) % d == 0 ) answer ++ ; } return answer ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 6 ; cout << countValues ( N ) ; return 0 ; }"}
{"text":"C ++ implementation to find the maximum possible prime divisor of a number can have N divisors","code":"#include <iostream> NEW_LINE using namespace std ; #define ll  long long int"}
{"text":"Function to find the maximum possible prime divisors of a number can have with N divisors","code":"void findMaxPrimeDivisor ( int n ) { int max_possible_prime = 0 ;"}
{"text":"Number of time number divided by 2","code":"while ( n % 2 == 0 ) { max_possible_prime ++ ; n = n \/ 2 ; }"}
{"text":"Divide by other prime numbers","code":"for ( int i = 3 ; i * i <= n ; i = i + 2 ) { while ( n % i == 0 ) { max_possible_prime ++ ; n = n \/ i ; } }"}
{"text":"If the last number of also prime then also include it","code":"if ( n > 2 ) { max_possible_prime ++ ; } cout << max_possible_prime << \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 4 ;"}
{"text":"Function Call","code":"findMaxPrimeDivisor ( n ) ; return 0 ; }"}
{"text":"C ++ program to Count ways to express a number as sum of two numbers .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function returns the count of ways express a number as sum of two numbers .","code":"int CountWays ( int n ) { int ans = ( n - 1 ) \/ 2 ; return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 8 ; cout << CountWays ( N ) ; }"}
{"text":"C ++ program to find the max - size to which an array can be divided into 2 equal parts such that one part contains unique elements while another contains similar elements","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the max - size to which an array can be divided into 2 equal parts","code":"void Solve ( int arr [ ] , int size , int n ) { vector < int > v ( n + 1 ) ;"}
{"text":"Vector to find the frequency of each element of array","code":"for ( int i = 0 ; i < size ; i ++ ) v [ arr [ i ] ] ++ ;"}
{"text":"Find the maximum frequency element present in array arr [ ]","code":"int max1 = ( max_element ( v . begin ( ) , v . end ( ) ) - v . begin ( ) ) ;"}
{"text":"Find total unique elements present in array arr [ ]","code":"int diff1 = n + 1 - count ( v . begin ( ) , v . end ( ) , 0 ) ;"}
{"text":"Find the Max - Size to which an array arr [ ] can be splitted","code":"int max_size = max ( min ( v [ max1 ] - 1 , diff1 ) , min ( v [ max1 ] , diff1 - 1 ) ) ; cout << \" Maximum \u2581 size \u2581 is \u2581 : \" << max_size << \" STRNEWLINE \" ;"}
{"text":"Find the first array containing same elements","code":"cout << \" The \u2581 First \u2581 Array \u2581 Is \u2581 : \u2581 STRNEWLINE \" ; for ( int i = 0 ; i < max_size ; i ++ ) { cout << max1 << \" \u2581 \" ; v [ max1 ] -= 1 ; } cout << \" STRNEWLINE \" ;"}
{"text":"Find the second array containing unique elements","code":"cout << \" The \u2581 Second \u2581 Array \u2581 Is \u2581 : \u2581 STRNEWLINE \" ; for ( int i = 0 ; i < ( n + 1 ) ; i ++ ) { if ( v [ i ] > 0 ) { cout << i << \" \u2581 \" ; max_size -- ; } if ( max_size < 1 ) break ; } cout << \" STRNEWLINE \" ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"initialise n","code":"int n = 7 ;"}
{"text":"array declaration","code":"int arr [ ] = { 1 , 2 , 1 , 5 , 1 , 6 , 7 , 2 } ;"}
{"text":"size of array","code":"int size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; Solve ( arr , size , n ) ; return 0 ; }"}
{"text":"C ++ program to find sum of xor of all unordered triplets of the array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"int power ( int x , int y , int p ) {"}
{"text":"Initialize result","code":"int res = 1 ;"}
{"text":"Update x if it is more than or equal to p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with result","code":"if ( y & 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y >> 1 ; y = y \/ 2","code":"x = ( x * x ) % p ; } return res ; }"}
{"text":"Returns n ^ ( - 1 ) mod p","code":"int modInverse ( int n , int p ) { return power ( n , p - 2 , p ) ; }"}
{"text":"Returns nCr % p using Fermat 's little theorem.","code":"int nCrModPFermat ( int n , int r , int p ) {"}
{"text":"Base case","code":"if ( r == 0 ) return 1 ; if ( n < r ) return 0 ;"}
{"text":"Fill factorial array so that we can find all factorial of r , n and n - r","code":"int fac [ n + 1 ] ; fac [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fac [ i ] = fac [ i - 1 ] * i % p ; return ( fac [ n ] * modInverse ( fac [ r ] , p ) % p * modInverse ( fac [ n - r ] , p ) % p ) % p ; }"}
{"text":"Function returns sum of xor of all unordered triplets of the array","code":"int SumOfXor ( int a [ ] , int n ) { int mod = 10037 ; int answer = 0 ;"}
{"text":"Iterating over the bits","code":"for ( int k = 0 ; k < 32 ; k ++ ) {"}
{"text":"Number of elements whith k 'th bit  1 and 0 respectively","code":"int x = 0 , y = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Checking if k 'th bit is 1","code":"if ( a [ i ] & ( 1 << k ) ) x ++ ; else y ++ ; }"}
{"text":"Adding this bit 's part to the answer","code":"answer += ( ( 1 << k ) % mod * ( nCrModPFermat ( x , 3 , mod ) + x * nCrModPFermat ( y , 2 , mod ) ) % mod ) % mod ; } return answer ; }"}
{"text":"Drivers code","code":"int main ( ) { int n = 5 ; int A [ n ] = { 3 , 5 , 2 , 18 , 7 } ; cout << SumOfXor ( A , n ) ; return 0 ; }"}
{"text":"C ++ implementation to find the probability of not getting two consecutive heads together when N coins are tossed","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; float round ( float var , int digit ) { float value = ( int ) ( var * pow ( 10 , digit ) + .5 ) ; return ( float ) value \/ pow ( 10 , digit ) ; }"}
{"text":"Function to compute the N - th Fibonacci number in the sequence where a = 2 and b = 3","code":"int probability ( int N ) {"}
{"text":"The first two numbers in the sequence are initialized","code":"int a = 2 ; int b = 3 ;"}
{"text":"Base cases","code":"if ( N == 1 ) { return a ; } else if ( N == 2 ) { return b ; } else {"}
{"text":"Loop to compute the fibonacci sequence based on the first two initialized numbers","code":"for ( int i = 3 ; i <= N ; i ++ ) { int c = a + b ; a = b ; b = c ; } return b ; } }"}
{"text":"Function to find the probability of not getting two consecutive heads when N coins are tossed","code":"float operations ( int N ) {"}
{"text":"Computing the number of favourable cases","code":"int x = probability ( N ) ;"}
{"text":"Computing the number of all possible outcomes for N tosses","code":"int y = pow ( 2 , N ) ; return round ( ( float ) x \/ ( float ) y , 2 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 10 ; cout << ( operations ( N ) ) ; }"}
{"text":"C ++ program to check if the concatenation of two numbers is a perfect cube or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if a number is a perfect Cube or not","code":"bool isPerfectCube ( int x ) { long double cr = round ( cbrt ( x ) ) ; return ( cr * cr * cr == x ) ; }"}
{"text":"Function to check if concatenation of two numbers is a perfect cube or not","code":"void checkCube ( int a , int b ) {"}
{"text":"Convert numbers to string using to_string ( )","code":"string s1 = to_string ( a ) ; string s2 = to_string ( b ) ;"}
{"text":"Concatenate the numbers and convert it into integer","code":"int c = stoi ( s1 + s2 ) ;"}
{"text":"Check if concatenated value is perfect cube or not","code":"if ( isPerfectCube ( c ) ) { cout << \" Yes \" ; } else { cout << \" No \" ; } }"}
{"text":"Driver Code","code":"int main ( ) { int a = 6 ; int b = 4 ; checkCube ( a , b ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the largest sum","code":"int largest_sum ( int arr [ ] , int n ) {"}
{"text":"Variable to store the largest sum","code":"int maximum = -1 ;"}
{"text":"Map to store the frequencies of each element","code":"map < int , int > m ;"}
{"text":"Store the Frequencies","code":"for ( int i = 0 ; i < n ; i ++ ) { m [ arr [ i ] ] ++ ; }"}
{"text":"Loop to combine duplicate elements and update the sum in the map","code":"for ( auto j : m ) {"}
{"text":"If j is a duplicate element","code":"if ( j . second > 1 ) {"}
{"text":"Update the frequency of 2 * j","code":"m [ 2 * j . first ] = m [ 2 * j . first ] + j . second \/ 2 ;"}
{"text":"If the new sum is greater than maximum value , Update the maximum","code":"if ( 2 * j . first > maximum ) maximum = 2 * j . first ; } }"}
{"text":"Returns the largest sum","code":"return maximum ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 1 , 2 , 4 , 7 , 8 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Calling","code":"cout << largest_sum ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if it is possible to make x and y can become 0 at same time","code":"void canBeReduced ( int x , int y ) { int maxi = max ( x , y ) ; int mini = min ( x , y ) ;"}
{"text":"Check the given conditions","code":"if ( ( ( x + y ) % 3 ) == 0 && maxi <= 2 * mini ) cout << \" YES \" << endl ; else cout << \" NO \" << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int x = 6 , y = 9 ;"}
{"text":"Function Call","code":"canBeReduced ( x , y ) ; return 0 ; }"}
{"text":"C ++ program to check if the given number is prime using Wheel Factorization Method","code":"#include \" bits \/ stdc + + . h \" NEW_LINE using namespace std ;"}
{"text":"Function to check if a given number x is prime or not","code":"void isPrime ( int N ) { bool isPrime = true ;"}
{"text":"The Wheel for checking prime number","code":"int arr [ 8 ] = { 7 , 11 , 13 , 17 , 19 , 23 , 29 , 31 } ;"}
{"text":"Base Case","code":"if ( N < 2 ) { isPrime = false ; }"}
{"text":"Check for the number taken as basis","code":"if ( N % 2 == 0 N % 3 == 0 N % 5 == 0 ) { isPrime = false ; }"}
{"text":"Check for Wheel Here i , acts as the layer of the wheel","code":"for ( int i = 0 ; i < sqrt ( N ) ; i += 30 ) {"}
{"text":"Check for the list of Sieve in arr [ ]","code":"for ( int c : arr ) {"}
{"text":"If number is greater than sqrt ( N ) break","code":"if ( c > sqrt ( N ) ) { break ; }"}
{"text":"Check if N is a multiple of prime number in the wheel","code":"else { if ( N % ( c + i ) == 0 ) { isPrime = false ; break ; } }"}
{"text":"If at any iteration isPrime is false , break from the loop","code":"if ( ! isPrime ) break ; } } if ( isPrime ) cout << \" Prime \u2581 Number \" ; else cout << \" Not \u2581 a \u2581 Prime \u2581 Number \" ; }"}
{"text":"Driver 's Code","code":"int main ( ) { int N = 121 ;"}
{"text":"Function call for primality check","code":"isPrime ( N ) ; return 0 ; }"}
{"text":"C ++ implementation to find all Pairs possible from the given Array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print all possible pairs from the array","code":"void printPairs ( int arr [ ] , int n ) {"}
{"text":"Nested loop for all possible pairs","code":"for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { cout << \" ( \" << arr [ i ] << \" , \u2581 \" << arr [ j ] << \" ) \" << \" , \u2581 \" ; } } }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 2 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printPairs ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int mod = 1e9 + 7 ;"}
{"text":"Function to return ( 2 ^ P % mod )","code":"long long power ( int p ) { long long res = 1 ; for ( int i = 1 ; i <= p ; ++ i ) { res *= 2 ; res %= mod ; } return res % mod ; }"}
{"text":"Function to return the sum of cubes of subsets","code":"long long subset_cube_sum ( vector < int > & A ) { int n = ( int ) A . size ( ) ; long long ans = 0 ;"}
{"text":"cubing the elements and adding it to ans","code":"for ( int i : A ) { ans += ( 1LL * i * i * i ) % mod ; ans %= mod ; } return ( 1LL * ans * power ( n - 1 ) ) % mod ; }"}
{"text":"Driver code","code":"int main ( ) { vector < int > A = { 1 , 2 } ; cout << subset_cube_sum ( A ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the Least number","code":"int nearest ( int n ) {"}
{"text":"Get the perfect cube before and after N","code":"int prevCube = cbrt ( n ) ; int nextCube = prevCube + 1 ; prevCube = prevCube * prevCube * prevCube ; nextCube = nextCube * nextCube * nextCube ;"}
{"text":"Check which is nearest to N","code":"int ans = ( n - prevCube ) < ( nextCube - n ) ? ( prevCube - n ) : ( nextCube - n ) ;"}
{"text":"return the result","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 25 ; cout << nearest ( n ) << endl ; n = 27 ; cout << nearest ( n ) << endl ; n = 40 ; cout << nearest ( n ) << endl ; return 0 ; }"}
{"text":"C ++ program to check if one circle lies inside another circle or not .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void circle ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int distSq = sqrt ( ( ( x1 - x2 ) * ( x1 - x2 ) ) + ( ( y1 - y2 ) * ( y1 - y2 ) ) ) ; if ( distSq + r2 == r1 ) cout << \" The \u2581 smaller \u2581 circle \u2581 lies \u2581 completely \" << \" \u2581 inside \u2581 the \u2581 bigger \u2581 circle \u2581 with \u2581 \" << \" touching \u2581 each \u2581 other \u2581 \" << \" at \u2581 a \u2581 point \u2581 of \u2581 circumference . \u2581 \" << endl ; else if ( distSq + r2 < r1 ) cout << \" The \u2581 smaller \u2581 circle \u2581 lies \u2581 completely \" << \" \u2581 inside \u2581 the \u2581 bigger \u2581 circle \u2581 without \" << \" \u2581 touching \u2581 each \u2581 other \u2581 \" << \" at \u2581 a \u2581 point \u2581 of \u2581 circumference . \u2581 \" << endl ; else cout << \" The \u2581 smaller \u2581 does \u2581 not \u2581 lies \u2581 inside \" << \" \u2581 the \u2581 bigger \u2581 circle \u2581 completely . \" << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int x1 = 10 , y1 = 8 ; int x2 = 1 , y2 = 2 ; int r1 = 30 , r2 = 10 ; circle ( x1 , y1 , x2 , y2 , r1 , r2 ) ; return 0 ; }"}
{"text":"C ++ program to find the length of the direct common tangent between two circles which intersect each other","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the length of the direct common tangent","code":"void lengtang ( double r1 , double r2 , double d ) { cout << \" The \u2581 length \u2581 of \u2581 the \u2581 direct \" << \" \u2581 common \u2581 tangent \u2581 is \u2581 \" << sqrt ( pow ( d , 2 ) - pow ( ( r1 - r2 ) , 2 ) ) << endl ; }"}
{"text":"Driver code","code":"int main ( ) { double r1 = 4 , r2 = 6 , d = 3 ; lengtang ( r1 , r2 , d ) ; return 0 ; }"}
{"text":"C ++ program to find radius of the circle when the width and height of an arc is given","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the radius","code":"void rad ( double d , double h ) { cout << \" The \u2581 radius \u2581 of \u2581 the \u2581 circle \u2581 is \u2581 \" << ( ( d * d ) \/ ( 8 * h ) + h \/ 2 ) << endl ; }"}
{"text":"Driver code","code":"int main ( ) { double d = 4 , h = 1 ; rad ( d , h ) ; return 0 ; }"}
{"text":"C ++ program to find the shortest distance from chord to the centre of circle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the shortest distance","code":"void shortdis ( double r , double d ) { cout << \" The \u2581 shortest \u2581 distance \u2581 \" << \" from \u2581 the \u2581 chord \u2581 to \u2581 centre \u2581 \" << sqrt ( ( r * r ) - ( ( d * d ) \/ 4 ) ) << endl ; }"}
{"text":"Driver code","code":"int main ( ) { double r = 4 , d = 3 ; shortdis ( r , d ) ; return 0 ; }"}
{"text":"C ++ program to find the length of the direct common tangent between two circles which donot touch each other","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the length of the direct common tangent","code":"void lengtang ( double r1 , double r2 , double d ) { cout << \" The \u2581 length \u2581 of \u2581 the \u2581 direct \" << \" \u2581 common \u2581 tangent \u2581 is \u2581 \" << sqrt ( pow ( d , 2 ) - pow ( ( r1 - r2 ) , 2 ) ) << endl ; }"}
{"text":"Driver code","code":"int main ( ) { double r1 = 4 , r2 = 6 , d = 12 ; lengtang ( r1 , r2 , d ) ; return 0 ; }"}
{"text":"C ++ Program to find the biggest square which can be inscribed within the equilateral triangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the side of the square","code":"float square ( float a ) {"}
{"text":"the side cannot be negative","code":"if ( a < 0 ) return -1 ;"}
{"text":"side of the square","code":"float x = 0.464 * a ; return x ; }"}
{"text":"Driver code","code":"int main ( ) { float a = 5 ; cout << square ( a ) << endl ; return 0 ; }"}
{"text":"C ++ Program to find the apothem of a regular polygon with given side length","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the apothem of a regular polygon","code":"float polyapothem ( float n , float a ) {"}
{"text":"Side and side length cannot be negative","code":"if ( a < 0 && n < 0 ) return -1 ;"}
{"text":"Degree converted to radians","code":"return a \/ ( 2 * tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ; }"}
{"text":"Driver code","code":"int main ( ) { float a = 9 , n = 6 ; cout << polyapothem ( n , a ) << endl ; return 0 ; }"}
{"text":"C ++ Program to find the area of a regular polygon with given side length","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of a regular polygon","code":"float polyarea ( float n , float a ) {"}
{"text":"Side and side length cannot be negative","code":"if ( a < 0 && n < 0 ) return -1 ;"}
{"text":"Area degree converted to radians","code":"float A = ( a * a * n ) \/ ( 4 * tan ( ( 180 \/ n ) * 3.14159 \/ 180 ) ) ; return A ; }"}
{"text":"Driver code","code":"int main ( ) { float a = 9 , n = 6 ; cout << polyarea ( n , a ) << endl ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the side of the polygon circumscribed in a circle","code":"float calculateSide ( float n , float r ) { float theta , theta_in_radians ; theta = 360 \/ n ; theta_in_radians = theta * 3.14 \/ 180 ; return 2 * r * sin ( theta_in_radians \/ 2 ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Total sides of the polygon","code":"float n = 3 ;"}
{"text":"Radius of the circumscribing circle","code":"float r = 5 ; cout << calculateSide ( n , r ) ; }"}
{"text":"C ++ Program to find the biggest right circular cylinder that can be fit within a frustum","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the biggest right circular cylinder","code":"float cyl ( float r , float R , float h ) {"}
{"text":"radii and height cannot be negative","code":"if ( h < 0 && r < 0 && R < 0 ) return -1 ;"}
{"text":"radius of right circular cylinder","code":"float r1 = r ;"}
{"text":"height of right circular cylinder","code":"float h1 = h ;"}
{"text":"volume of right circular cylinder","code":"float V = 3.14 * pow ( r1 , 2 ) * h1 ; return V ; }"}
{"text":"Driver code","code":"int main ( ) { float r = 7 , R = 11 , h = 6 ; cout << cyl ( r , R , h ) << endl ; return 0 ; }"}
{"text":"C ++ program to find the perimeter of a regular polygon","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the perimeter","code":"float Perimeter ( float s , int n ) { float perimeter = 1 ;"}
{"text":"Calculate Perimeter","code":"perimeter = n * s ; return perimeter ; }"}
{"text":"driver code","code":"int main ( ) {"}
{"text":"Get the number of sides","code":"int n = 5 ;"}
{"text":"Get the length of side","code":"float s = 2.5 , peri ;"}
{"text":"find perimeter","code":"peri = Perimeter ( s , n ) ; cout << \" Perimeter \u2581 of \u2581 Regular \u2581 Polygon \" << \" \u2581 with \u2581 \" << n << \" \u2581 sides \u2581 of \u2581 length \u2581 \" << s << \" \u2581 = \u2581 \" << peri << endl ; return 0 ; }"}
{"text":"C ++ Program to find the biggest rhombus which can be inscribed within the rectangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of the biggest rhombus","code":"float rhombusarea ( float l , float b ) {"}
{"text":"the length and breadth cannot be negative","code":"if ( l < 0 b < 0 ) return -1 ;"}
{"text":"area of the rhombus","code":"return ( l * b ) \/ 2 ; }"}
{"text":"Driver code","code":"int main ( ) { float l = 16 , b = 6 ; cout << rhombusarea ( l , b ) << endl ; return 0 ; }"}
{"text":"CPP program to Check if a point lies on or inside a rectangle | Set - 2","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find if given point lies inside a given rectangle or not .","code":"bool FindPoint ( int x1 , int y1 , int x2 , int y2 , int x , int y ) { if ( x > x1 and x < x2 and y > y1 and y < y2 ) return true ; return false ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"bottom - left and top - right corners of rectangle","code":"int x1 = 0 , y1 = 0 , x2 = 10 , y2 = 8 ;"}
{"text":"given point","code":"int x = 1 , y = 5 ;"}
{"text":"function call","code":"if ( FindPoint ( x1 , y1 , x2 , y2 , x , y ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program to find the Perpendicular ( shortest ) distance between a point and a Plane in 3 D .","code":"#include <bits\/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"Function to find distance","code":"void shortest_distance ( float x1 , float y1 , float z1 , float a , float b , float c , float d ) { d = fabs ( ( a * x1 + b * y1 + c * z1 + d ) ) ; float e = sqrt ( a * a + b * b + c * c ) ; cout << \" Perpendicular \u2581 distance \u2581 is \u2581 \" << ( d \/ e ) ; return ; }"}
{"text":"Driver Code","code":"int main ( ) { float x1 = 4 ; float y1 = -4 ; float z1 = 3 ; float a = 2 ; float b = -2 ; float c = 5 ; float d = 8 ;"}
{"text":"Function call","code":"shortest_distance ( x1 , y1 , z1 , a , b , c , d ) ; }"}
{"text":"CPP program to find the volume of the triangular prism","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find the Volume of triangular prism","code":"float findVolume ( float l , float b , float h ) {"}
{"text":"formula to find Volume","code":"float volume = ( l * b * h ) \/ 2 ; return volume ; }"}
{"text":"Driver Code","code":"int main ( ) { float l = 18 , b = 12 , h = 9 ;"}
{"text":"function calling","code":"cout << \" Volume \u2581 of \u2581 triangular \u2581 prism : \u2581 \" << findVolume ( l , b , h ) ; return 0 ; }"}
{"text":"A simple program to find if given 4 values can represent 4 sides of rectangle","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check if the given integers value make a rectangle","code":"bool isRectangle ( int a , int b , int c , int d ) {"}
{"text":"Square is also a rectangle","code":"if ( a == b == c == d ) return true ; else if ( a == b && c == d ) return true ; else if ( a == d && c == b ) return true ; else if ( a == c && d == b ) return true ; else return false ; }"}
{"text":"Driver code","code":"int main ( ) { int a , b , c , d ; a = 1 , b = 2 , c = 3 , d = 4 ; if ( isRectangle ( a , b , c , d ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program to find the midpoint of a line","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function to find the midpoint of a line","code":"void midpoint ( int x1 , int x2 , int y1 , int y2 ) { cout << ( float ) ( x1 + x2 ) \/ 2 << \" \u2581 , \u2581 \" << ( float ) ( y1 + y2 ) \/ 2 ; }"}
{"text":"Driver Function to test above","code":"int main ( ) { int x1 = -1 , y1 = 2 ; int x2 = 3 , y2 = -6 ; midpoint ( x1 , x2 , y1 , y2 ) ; return 0 ; }"}
{"text":"C ++ program to calculate length of an arc","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function to calculate arc length","code":"double arcLength ( double diameter , double angle ) { double pi = 22.0 \/ 7.0 ; double arc ; if ( angle >= 360 ) { cout << \" Angle \u2581 cannot \" , \" \u2581 be \u2581 formed \" ; return 0 ; } else { arc = ( pi * diameter ) * ( angle \/ 360.0 ) ; return arc ; } }"}
{"text":"Driver Code","code":"int main ( ) { double diameter = 25.0 ; double angle = 45.0 ; double arc_len = arcLength ( diameter , angle ) ; cout << ( arc_len ) ; return 0 ; }"}
{"text":"CPP program to check if a line touches or intersects or outside a circle .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void checkCollision ( int a , int b , int c , int x , int y , int radius ) {"}
{"text":"Finding the distance of line from center .","code":"int dist = ( abs ( a * x + b * y + c ) ) \/ sqrt ( a * a + b * b ) ;"}
{"text":"Checking if the distance is less than , greater than or equal to radius .","code":"if ( radius == dist ) cout << \" Touch \" << endl ; else if ( radius > dist ) cout << \" Intersect \" << endl ; else cout << \" Outside \" << endl ; }"}
{"text":"Driven Program","code":"int main ( ) { int radius = 5 ; int x = 0 , y = 0 ; int a = 3 , b = 4 , c = 25 ; checkCollision ( a , b , c , x , y , radius ) ; return 0 ; }"}
{"text":"C ++ program to find the CIRCUMCENTER of a triangle","code":"#include <iostream> NEW_LINE #include <cfloat> NEW_LINE using namespace std ;"}
{"text":"This pair is used to store the X and Y coordinate of a point respectively","code":"#define pdd  pair<double, double>"}
{"text":"Function to find the line given two points","code":"void lineFromPoints ( pdd P , pdd Q , double & a , double & b , double & c ) { a = Q . second - P . second ; b = P . first - Q . first ; c = a * ( P . first ) + b * ( P . second ) ; }"}
{"text":"Function which converts the input line to its perpendicular bisector . It also inputs the points whose mid - point lies on the bisector","code":"void perpendicularBisectorFromLine ( pdd P , pdd Q , double & a , double & b , double & c ) { pdd mid_point = make_pair ( ( P . first + Q . first ) \/ 2 , ( P . second + Q . second ) \/ 2 ) ;"}
{"text":"c = - bx + ay","code":"c = - b * ( mid_point . first ) + a * ( mid_point . second ) ; double temp = a ; a = - b ; b = temp ; }"}
{"text":"Returns the intersection point of two lines","code":"pdd lineLineIntersection ( double a1 , double b1 , double c1 , double a2 , double b2 , double c2 ) { double determinant = a1 * b2 - a2 * b1 ; if ( determinant == 0 ) {"}
{"text":"The lines are parallel . This is simplified by returning a pair of FLT_MAX","code":"return make_pair ( FLT_MAX , FLT_MAX ) ; } else { double x = ( b2 * c1 - b1 * c2 ) \/ determinant ; double y = ( a1 * c2 - a2 * c1 ) \/ determinant ; return make_pair ( x , y ) ; } } void findCircumCenter ( pdd P , pdd Q , pdd R ) {"}
{"text":"Line PQ is represented as ax + by = c","code":"double a , b , c ; lineFromPoints ( P , Q , a , b , c ) ;"}
{"text":"Line QR is represented as ex + fy = g","code":"double e , f , g ; lineFromPoints ( Q , R , e , f , g ) ;"}
{"text":"Converting lines PQ and QR to perpendicular vbisectors . After this , L = ax + by = c M = ex + fy = g","code":"perpendicularBisectorFromLine ( P , Q , a , b , c ) ; perpendicularBisectorFromLine ( Q , R , e , f , g ) ;"}
{"text":"The point of intersection of L and M gives the circumcenter","code":"pdd circumcenter = lineLineIntersection ( a , b , c , e , f , g ) ; if ( circumcenter . first == FLT_MAX && circumcenter . second == FLT_MAX ) { cout << \" The \u2581 two \u2581 perpendicular \u2581 bisectors \u2581 \" \" found \u2581 come \u2581 parallel \" << endl ; cout << \" Thus , \u2581 the \u2581 given \u2581 points \u2581 do \u2581 not \u2581 form \u2581 \" \" a \u2581 triangle \u2581 and \u2581 are \u2581 collinear \" << endl ; } else { cout << \" The \u2581 circumcenter \u2581 of \u2581 the \u2581 triangle \u2581 PQR \u2581 is : \u2581 \" ; cout << \" ( \" << circumcenter . first << \" , \u2581 \" << circumcenter . second << \" ) \" << endl ; } }"}
{"text":"Driver code .","code":"int main ( ) { pdd P = make_pair ( 6 , 0 ) ; pdd Q = make_pair ( 0 , 0 ) ; pdd R = make_pair ( 0 , 8 ) ; findCircumCenter ( P , Q , R ) ; return 0 ; }"}
{"text":"C ++ program to evaluate area of a polygon using shoelace formula","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"( X [ i ] , Y [ i ] ) are coordinates of i 'th point.","code":"double polygonArea ( double X [ ] , double Y [ ] , int n ) {"}
{"text":"Initialize area","code":"double area = 0.0 ;"}
{"text":"Calculate value of shoelace formula","code":"int j = n - 1 ; for ( int i = 0 ; i < n ; i ++ ) { area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;"}
{"text":"j = i ; j is previous vertex to i","code":"}"}
{"text":"Return absolute value","code":"return abs ( area \/ 2.0 ) ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { double X [ ] = { 0 , 2 , 4 } ; double Y [ ] = { 1 , 3 , 7 } ; int n = sizeof ( X ) \/ sizeof ( X [ 0 ] ) ; cout << polygonArea ( X , Y , n ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function top get LSB value of v","code":"int chk ( int n ) {"}
{"text":"Binary conversion","code":"vector < int > v ; while ( n != 0 ) { v . push_back ( n % 2 ) ; n = n \/ 2 ; } for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v [ i ] == 1 ) { return pow ( 2 , i ) ; } } return 0 ; }"}
{"text":"Function to find the sum of LSBs of all possible pairs of the given array","code":"void sumOfLSB ( int arr [ ] , int N ) {"}
{"text":"Stores the LSB of array elements","code":"vector < int > lsb_arr ; for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Storing the LSB values","code":"lsb_arr . push_back ( chk ( arr [ i ] ) ) ; }"}
{"text":"Sort the array lab_arr [ ]","code":"sort ( lsb_arr . begin ( ) , lsb_arr . end ( ) , greater < int > ( ) ) ; int ans = 0 ; for ( int i = 0 ; i < N - 1 ; i += 2 ) {"}
{"text":"Taking pairwise sum to get the maximum sum of LSB","code":"ans += ( lsb_arr [ i + 1 ] ) ; }"}
{"text":"Print the result","code":"cout << ( ans ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 5 ; int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ;"}
{"text":"Function Call","code":"sumOfLSB ( arr , N ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find count of subsequences having odd bitwise AND value","code":"int countSubsequences ( vector < int > arr ) {"}
{"text":"Stores count of odd elements","code":"int odd = 0 ;"}
{"text":"Traverse the array arr [ ]","code":"for ( int x : arr ) {"}
{"text":"If x is odd increment count","code":"if ( x & 1 ) odd ++ ; }"}
{"text":"Return Answer","code":"return ( 1 << odd ) - 1 ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > arr = { 1 , 3 , 3 } ;"}
{"text":"Function Call","code":"cout << countSubsequences ( arr ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the number of pairs ( i , j ) such that abs ( a [ i ] - a [ j ] ) is at least the minimum of ( a [ i ] , a [ j ] )","code":"int getPairsCount ( int arr [ ] , int n ) {"}
{"text":"Stores the resultant count of pairs","code":"int count = 0 ;"}
{"text":"Iterate over the range [ 0 , n ]","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Iterate from arr [ i ] - ( i % arr [ i ] ) till n with an increment of arr [ i ]","code":"for ( int j = arr [ i ] - ( i % arr [ i ] ) ; j < n ; j += arr [ i ] ) {"}
{"text":"Count the possible pairs","code":"if ( i < j && abs ( arr [ i ] - arr [ j ] ) >= min ( arr [ i ] , arr [ j ] ) ) { count ++ ; } } }"}
{"text":"Return the total count","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 2 , 3 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << getPairsCount ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if N can be changed to 1 or not .","code":"void check ( int N ) { int twos = 0 , fives = 0 ;"}
{"text":"Count the number of 2 in the prime factorisation of N","code":"while ( N % 2 == 0 ) { N \/= 2 ; twos ++ ; }"}
{"text":"Count the number of 5 in the prime factorisation of N","code":"while ( N % 5 == 0 ) { N \/= 5 ; fives ++ ; } if ( N == 1 && twos <= fives ) { cout << 2 * fives - twos ; } else { cout << -1 ; } }"}
{"text":"Driver Code","code":"int main ( ) { int N = 50 ; check ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the sum of elements in a given range of an infinite array","code":"void rangeSum ( int arr [ ] , int N , int L , int R ) {"}
{"text":"Stores the sum of array elements from L to R","code":"int sum = 0 ;"}
{"text":"Traverse from L to R","code":"for ( int i = L - 1 ; i < R ; i ++ ) { sum += arr [ i % N ] ; }"}
{"text":"Print the resultant sum","code":"cout << sum ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 2 , 6 , 9 } ; int L = 10 , R = 13 ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; rangeSum ( arr , N , L , R ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the sum of elements in a given range of an infinite array","code":"void rangeSum ( int arr [ ] , int N , int L , int R ) {"}
{"text":"Stores the prefix sum","code":"int prefix [ N + 1 ] ; prefix [ 0 ] = 0 ;"}
{"text":"Calculate the prefix sum","code":"for ( int i = 1 ; i <= N ; i ++ ) { prefix [ i ] = prefix [ i - 1 ] + arr [ i - 1 ] ; }"}
{"text":"Stores the sum of elements from 1 to L - 1","code":"int leftsum = ( ( L - 1 ) \/ N ) * prefix [ N ] + prefix [ ( L - 1 ) % N ] ;"}
{"text":"Stores the sum of elements from 1 to R","code":"int rightsum = ( R \/ N ) * prefix [ N ] + prefix [ R % N ] ;"}
{"text":"Print the resultant sum","code":"cout << rightsum - leftsum ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 2 , 6 , 9 } ; int L = 10 , R = 13 ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; rangeSum ( arr , N , L , R ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find exponential factorial of a given number","code":"int ExpoFactorial ( int N ) {"}
{"text":"Stores the exponetial factor of N","code":"int res = 1 ; int mod = 1000000007 ;"}
{"text":"Iterare over the range [ 2 , N ]","code":"for ( int i = 2 ; i < N + 1 ; i ++ )"}
{"text":"Update res","code":"res = ( int ) pow ( i , res ) % mod ;"}
{"text":"Return res","code":"return res ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input","code":"int N = 4 ;"}
{"text":"Function call","code":"cout << ( ExpoFactorial ( N ) ) ;"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find contiguous subarray with maximum sum if array is repeated K times","code":"int maxSubArraySumRepeated ( int arr [ ] , int N , int K ) {"}
{"text":"Store the sum of the array arr [ ]","code":"int sum = 0 ;"}
{"text":"Traverse the array and find sum","code":"for ( int i = 0 ; i < N ; i ++ ) sum += arr [ i ] ; int curr = arr [ 0 ] ;"}
{"text":"Store the answer","code":"int ans = arr [ 0 ] ;"}
{"text":"If K = 1","code":"if ( K == 1 ) {"}
{"text":"Apply Kadane algorithm to find sum","code":"for ( int i = 1 ; i < N ; i ++ ) { curr = max ( arr [ i ] , curr + arr [ i ] ) ; ans = max ( ans , curr ) ; }"}
{"text":"Return the answer","code":"return ans ; }"}
{"text":"Stores the twice repeated array","code":"vector < int > V ;"}
{"text":"Traverse the range [ 0 , 2 * N ]","code":"for ( int i = 0 ; i < 2 * N ; i ++ ) { V . push_back ( arr [ i % N ] ) ; }"}
{"text":"Stores the maximum suffix sum","code":"int maxSuf = V [ 0 ] ;"}
{"text":"Stores the maximum prefix sum","code":"int maxPref = V [ 2 * N - 1 ] ; curr = V [ 0 ] ; for ( int i = 1 ; i < 2 * N ; i ++ ) { curr += V [ i ] ; maxPref = max ( maxPref , curr ) ; } curr = V [ 2 * N - 1 ] ; for ( int i = 2 * N - 2 ; i >= 0 ; i -- ) { curr += V [ i ] ; maxSuf = max ( maxSuf , curr ) ; } curr = V [ 0 ] ;"}
{"text":"Apply Kadane algorithm for 2 repetition of the array","code":"for ( int i = 1 ; i < 2 * N ; i ++ ) { curr = max ( V [ i ] , curr + V [ i ] ) ; ans = max ( ans , curr ) ; }"}
{"text":"If the sum of the array is greater than 0","code":"if ( sum > 0 ) { int temp = 1LL * sum * ( K - 2 ) ; ans = max ( ans , max ( temp + maxPref , temp + maxSuf ) ) ; }"}
{"text":"Return the answer","code":"return ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Input","code":"int arr [ ] = { 10 , 20 , -30 , -1 , 40 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int K = 10 ;"}
{"text":"Function Call","code":"cout << maxSubArraySumRepeated ( arr , N , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find count of subarrays which have max element greater than twice maximum of all other elements","code":"void countSubarray ( int arr [ ] , int n ) {"}
{"text":"Stores the count of subarrays","code":"int count = 0 ;"}
{"text":"Generate all possible subarrays","code":"for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) {"}
{"text":"Stores the maximum element of the subarray","code":"int mxSubarray = 0 ;"}
{"text":"Stores the maximum of all other elements","code":"int mxOther = 0 ;"}
{"text":"Find the maximum element in the subarray [ i , j ]","code":"for ( int k = i ; k <= j ; k ++ ) { mxSubarray = max ( mxSubarray , arr [ k ] ) ; }"}
{"text":"Find the maximum of all other elements","code":"for ( int k = 0 ; k < i ; k ++ ) { mxOther = max ( mxOther , arr [ k ] ) ; } for ( int k = j + 1 ; k < n ; k ++ ) { mxOther = max ( mxOther , arr [ k ] ) ; }"}
{"text":"If the maximum of subarray is greater than twice the maximum of other elements","code":"if ( mxSubarray > ( 2 * mxOther ) ) count ++ ; } }"}
{"text":"Print the maximum value obtained","code":"cout << count ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 6 , 10 , 9 , 7 , 3 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; countSubarray ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find count of subarrays which have max element greater than twice maximum of all other elements","code":"void countSubarray ( int arr [ ] , int n ) { int count = 0 , L = 0 , R = 0 ;"}
{"text":"Stores the maximum element of the array","code":"int mx = * max_element ( arr , arr + n ) ;"}
{"text":"Traverse the given array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If the value of 2 * arr [ i ] is greater than mx","code":"if ( arr [ i ] * 2 > mx ) {"}
{"text":"Update the value of L and break out of loop","code":"L = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"If the value 2 * arr [ i ] is greater than mx","code":"if ( arr [ i ] * 2 > mx ) {"}
{"text":"Update the value of R and break out of loop","code":"R = i ; break ; } }"}
{"text":"Print the final answer","code":"cout << ( L + 1 ) * ( n - R ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 6 , 10 , 9 , 7 , 3 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; countSubarray ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to check for primality of a number X by checking whether X haACCs any factors other than 1 and itself .","code":"bool isPrime ( int X ) { for ( int i = 2 ; i * i <= X ; i ++ )"}
{"text":"if ( X % i == 0 ) Factor found","code":"return false ; return true ; }"}
{"text":"Function to print primes just less than and just greater than of each element in an array","code":"void printPrimes ( int A [ ] , int N ) {"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Traverse for finding prime just less than A [ i ]","code":"for ( int j = A [ i ] - 1 ; ; j -- ) {"}
{"text":"Prime just less than A [ i ] found","code":"if ( isPrime ( j ) ) { cout << j << \" \u2581 \" ; break ; } }"}
{"text":"Traverse for finding prime just greater than A [ i ]","code":"for ( int j = A [ i ] + 1 ; ; j ++ ) {"}
{"text":"Prime just greater than A [ i ] found","code":"if ( isPrime ( j ) ) { cout << j << \" \u2581 \" ; break ; } } cout << endl ; } }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Input","code":"int A [ ] = { 17 , 28 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ;"}
{"text":"Function call","code":"printPrimes ( A , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the Kth smallest element that contains A [ i ] exactly B [ i ] times","code":"int KthSmallest ( int A [ ] , int B [ ] , int N , int K ) { int M = 0 ;"}
{"text":"Traverse the given array","code":"for ( int i = 0 ; i < N ; i ++ ) { M = max ( A [ i ] , M ) ; }"}
{"text":"Stores the frequency of every elements","code":"int freq [ M + 1 ] = { 0 } ;"}
{"text":"Traverse the given array","code":"for ( int i = 0 ; i < N ; i ++ ) { freq [ A [ i ] ] += B [ i ] ; }"}
{"text":"Initialize a variable to store the prefix sums","code":"int sum = 0 ;"}
{"text":"Iterate over the range [ 0 , M ]","code":"for ( int i = 0 ; i <= M ; i ++ ) {"}
{"text":"Increment sum by freq [ i ]","code":"sum += freq [ i ] ;"}
{"text":"If sum is greater than or equal to K","code":"if ( sum >= K ) {"}
{"text":"Return the current element as answer","code":"return i ; } }"}
{"text":"Return - 1","code":"return -1 ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Input","code":"int A [ ] = { 3 , 4 , 5 } ; int B [ ] = { 2 , 1 , 3 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; int K = 4 ;"}
{"text":"Function call","code":"cout << KthSmallest ( A , B , N , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the Bitwise OR of Bitwise AND of all subarrays","code":"void findbitwiseOR ( int * a , int n ) {"}
{"text":"Stores the required result","code":"int res = 0 ;"}
{"text":"Generate all the subarrays","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Store the current element","code":"int curr_sub_array = a [ i ] ;"}
{"text":"Find the Bitwise OR","code":"res = res | curr_sub_array ; for ( int j = i ; j < n ; j ++ ) {"}
{"text":"Update the result","code":"curr_sub_array = curr_sub_array & a [ j ] ; res = res | curr_sub_array ; } }"}
{"text":"Print the result","code":"cout << res ; }"}
{"text":"Driver Code","code":"int main ( ) { int A [ ] = { 1 , 2 , 3 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; findbitwiseOR ( A , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the Bitwise OR of Bitwise AND of all consecutive subsets of the array","code":"void findbitwiseOR ( int * a , int n ) {"}
{"text":"Stores the required result","code":"int res = 0 ;"}
{"text":"Traverse the given array","code":"for ( int i = 0 ; i < n ; i ++ ) res = res | a [ i ] ;"}
{"text":"Print the result","code":"cout << res ; }"}
{"text":"Driver Code","code":"int main ( ) { int A [ ] = { 1 , 2 , 3 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; findbitwiseOR ( A , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check if the sum of the digits of N is strictly greater than the product of the digits of N or not","code":"void check ( int n ) {"}
{"text":"Stores the sum and the product of the digits of N","code":"int sumOfDigit = 0 ; int prodOfDigit = 1 ; while ( n > 0 ) {"}
{"text":"Stores the last digit if N","code":"int rem ; rem = n % 10 ;"}
{"text":"Increment the value of sumOfDigits","code":"sumOfDigit += rem ;"}
{"text":"Update the prodOfDigit","code":"prodOfDigit *= rem ;"}
{"text":"Divide N by 10","code":"n \/= 10 ; }"}
{"text":"Print the result","code":"if ( sumOfDigit > prodOfDigit ) cout << \" Yes \" ; else cout << \" No \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 1234 ; check ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Print all distinct even & odd prefix Bitwise XORs from 1 to N","code":"void evenOddBitwiseXOR ( int N ) { cout << \" Even : \u2581 \" << 0 << \" \u2581 \" ;"}
{"text":"Print the even number","code":"for ( int i = 4 ; i <= N ; i = i + 4 ) { cout << i << \" \u2581 \" ; } cout << \" STRNEWLINE \" ; cout << \" Odd : \u2581 \" << 1 << \" \u2581 \" ;"}
{"text":"Print the odd number","code":"for ( int i = 4 ; i <= N ; i = i + 4 ) { cout << i - 1 << \" \u2581 \" ; } if ( N % 4 == 2 ) cout << N + 1 ; else if ( N % 4 == 3 ) cout << N ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 6 ; evenOddBitwiseXOR ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to lexicographic largest permutation possible by a swap that is smaller than given array","code":"void findPermutation ( vector < int > & arr ) { int N = arr . size ( ) ; int i = N - 2 ;"}
{"text":"Find the index of first element such that arr [ i ] > arr [ i + 1 ]","code":"while ( i >= 0 && arr [ i ] <= arr [ i + 1 ] ) i -- ;"}
{"text":"If the array is sorted in increasing order","code":"if ( i == -1 ) { cout << \" - 1\" ; return ; } int j = N - 1 ;"}
{"text":"Find the index of first element which is smaller than arr [ i ]","code":"while ( j > i && arr [ j ] >= arr [ i ] ) j -- ;"}
{"text":"If arr [ j ] = = arr [ j - 1 ]","code":"while ( j > i && arr [ j ] == arr [ j - 1 ] ) {"}
{"text":"Decrement j","code":"j -- ; }"}
{"text":"Swap the element","code":"swap ( arr [ i ] , arr [ j ] ) ;"}
{"text":"Print the array arr [ ]","code":"for ( auto & it : arr ) { cout << it << ' \u2581 ' ; } }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > arr = { 1 , 2 , 5 , 3 , 4 , 6 } ; findPermutation ( arr ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the smallest prime factor of all the numbers using Sieve Of Eratosthenes","code":"void sieveOfEratosthenes ( int N , int s [ ] ) {"}
{"text":"Stores whether any number is prime or not","code":"vector < bool > prime ( N + 1 , false ) ;"}
{"text":"Initialize smallest factor as 2 for all the even numbers","code":"for ( int i = 2 ; i <= N ; i += 2 ) s [ i ] = 2 ;"}
{"text":"Iterate over the range [ 3 , N ]","code":"for ( int i = 3 ; i <= N ; i += 2 ) {"}
{"text":"If i is prime","code":"if ( prime [ i ] == false ) { s [ i ] = i ;"}
{"text":"Iterate all multiples of i","code":"for ( int j = i ; j * i <= N ; j += 2 ) {"}
{"text":"i is the smallest prime factor of i * j","code":"if ( ! prime [ i * j ] ) { prime [ i * j ] = true ; s [ i * j ] = i ; } } } } }"}
{"text":"Function to find the absolute difference between the count of odd and even factors of N","code":"void findDifference ( int N ) {"}
{"text":"Stores the smallest prime factor of i","code":"int s [ N + 1 ] ;"}
{"text":"Fill values in s [ ] using sieve of eratosthenes","code":"sieveOfEratosthenes ( N , s ) ;"}
{"text":"Stores the total number of factors and the total number of odd and even factors","code":"int total = 1 , odd = 1 , even = 0 ;"}
{"text":"Store the current prime factor of the number N","code":"int curr = s [ N ] ;"}
{"text":"Store the power of current prime factor","code":"int cnt = 1 ;"}
{"text":"Loop while N is greater than 1","code":"while ( N > 1 ) { N \/= s [ N ] ;"}
{"text":"If N also has smallest prime factor as curr , then increment cnt by 1","code":"if ( curr == s [ N ] ) { cnt ++ ; continue ; }"}
{"text":"Update only total number of factors if curr is 2","code":"if ( curr == 2 ) { total = total * ( cnt + 1 ) ; }"}
{"text":"Update total number of factors and total number of odd factors","code":"else { total = total * ( cnt + 1 ) ; odd = odd * ( cnt + 1 ) ; }"}
{"text":"Update current prime factor as s [ N ] and count as 1","code":"curr = s [ N ] ; cnt = 1 ; }"}
{"text":"Calculate the number of even factors","code":"even = total - odd ;"}
{"text":"Print the difference","code":"cout << abs ( even - odd ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 12 ; findDifference ( N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the median of a group of data with given mean and mode","code":"void findMedian ( int Mean , int Mode ) {"}
{"text":"Calculate the median","code":"double Median = ( 2 * Mean + Mode ) \/ 3.0 ;"}
{"text":"Print the median","code":"cout << Median ; }"}
{"text":"Driver Code","code":"int main ( ) { int mode = 6 , mean = 3 ; findMedian ( mean , mode ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate magnitude of a 3 dimensional vector","code":"float vectorMagnitude ( int x , int y , int z ) {"}
{"text":"Stores the sum of squares of coordinates of a vector","code":"int sum = x * x + y * y + z * z ;"}
{"text":"Return the magnitude","code":"return sqrt ( sum ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int x = 1 ; int y = 2 ; int z = 3 ; cout << vectorMagnitude ( x , y , z ) ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find prodcut of a Mersenne number with another number","code":"long multiplyByMersenne ( long N , long M ) {"}
{"text":"Stores the power of 2 of integer M + 1","code":"long x = log2 ( M + 1 ) ;"}
{"text":"Return the product","code":"return ( ( N << x ) - N ) ; }"}
{"text":"Driver Code","code":"int main ( ) { long N = 4 ; long M = 15 ; cout << multiplyByMersenne ( N , M ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find nearest perfect square of num","code":"int perfectSquare ( int num ) {"}
{"text":"Calculate square root of num","code":"int sr = sqrt ( num ) ;"}
{"text":"Calculate perfect square","code":"int a = sr * sr ; int b = ( sr + 1 ) * ( sr + 1 ) ;"}
{"text":"Find the nearest perfect square","code":"if ( ( num - a ) < ( b - num ) ) { return a ; } else { return b ; } }"}
{"text":"Function to find the power of 2 nearest to the number num","code":"int powerOfTwo ( int num ) {"}
{"text":"Calculate log base 2 of num","code":"int lg = log2 ( num ) ;"}
{"text":"Highest power of 2 which is <= num","code":"int p = pow ( 2 , lg ) ; return p ; }"}
{"text":"Function to find the nearest perfect square and the nearest power of 2 of every array element whose occurrence is 1","code":"void uniqueElement ( int arr [ ] , int N ) { bool ans = true ;"}
{"text":"Stores frequency of array elements","code":"unordered_map < int , int > freq ;"}
{"text":"Traverse the array and update frequency of current array element","code":"for ( int i = 0 ; i < N ; i ++ ) { freq [ arr [ i ] ] ++ ; }"}
{"text":"Traverse the map freq","code":"for ( auto el : freq ) {"}
{"text":"If the frequency is 1","code":"if ( el . second == 1 ) { ans = false ;"}
{"text":"Find nearest perfect square","code":"int ps = perfectSquare ( el . first ) ;"}
{"text":"Print the nearest power of 2","code":"cout << powerOfTwo ( ps ) << ' \u2581 ' ; } }"}
{"text":"If the any does not contain any non - repeating elements","code":"if ( ans ) cout << \" - 1\" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 4 , 11 , 4 , 3 , 4 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; uniqueElement ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to partition the array into two non - empty subarrays which satisfies the given condition","code":"void partitionArray ( int * a , int n ) {"}
{"text":"Stores the suffix Min array","code":"int * Min = new int [ n ] ;"}
{"text":"Stores the Minimum of a suffix","code":"int Mini = INT_MAX ;"}
{"text":"Traverse the array in reverse","code":"for ( int i = n - 1 ; i >= 0 ; i -- ) {"}
{"text":"Update Minimum","code":"Mini = min ( Mini , a [ i ] ) ;"}
{"text":"Store the Minimum","code":"Min [ i ] = Mini ; }"}
{"text":"Stores the Maximum value of a prefix","code":"int Maxi = INT_MIN ;"}
{"text":"Stores the index of the partition","code":"int ind = -1 ; for ( int i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Update Max","code":"Maxi = max ( Maxi , a [ i ] ) ;"}
{"text":"If Max is less than Min [ i + 1 ]","code":"if ( Maxi < Min [ i + 1 ] ) {"}
{"text":"Store the index of partition","code":"ind = i ;"}
{"text":"break","code":"break ; } }"}
{"text":"If ind is not - 1","code":"if ( ind != -1 ) {"}
{"text":"Print the first subarray","code":"for ( int i = 0 ; i <= ind ; i ++ ) cout << a [ i ] << \" \u2581 \" ; cout << endl ;"}
{"text":"Print the second subarray","code":"for ( int i = ind + 1 ; i < n ; i ++ ) cout << a [ i ] << \" \u2581 \" ; }"}
{"text":"Otherwise","code":"else cout < < \" Impossible \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 3 , 2 , 7 , 9 } ; int N = 5 ; partitionArray ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count all prime factors of a given number","code":"int countPrimeFactors ( int n ) { int count = 0 ;"}
{"text":"Count the number of 2 s that divides n","code":"while ( n % 2 == 0 ) { n = n \/ 2 ; count ++ ; }"}
{"text":"Since n is odd at this point , skip one element","code":"for ( int i = 3 ; i <= sqrt ( n ) ; i = i + 2 ) {"}
{"text":"While i divides n , count i and divide n","code":"while ( n % i == 0 ) { n = n \/ i ; count ++ ; } }"}
{"text":"If n is a prime number greater than 2","code":"if ( n > 2 ) count ++ ; return ( count ) ; }"}
{"text":"Function to find the sum of first n nearly prime numbers","code":"int findSum ( int n ) {"}
{"text":"Store the required sum","code":"int sum = 0 ; for ( int i = 1 , num = 2 ; i <= n ; num ++ ) {"}
{"text":"Add this number if it is satisfies the condition","code":"if ( countPrimeFactors ( num ) == 2 ) { sum += num ;"}
{"text":"Increment count of nearly prime numbers","code":"i ++ ; } } return sum ; }"}
{"text":"Function to check if N can be represented as sum of K different positive integers out of which at least K - 1 of them are nearly prime","code":"void check ( int n , int k ) {"}
{"text":"Store the sum of first K - 1 nearly prime numbers","code":"int s = findSum ( k - 1 ) ;"}
{"text":"If sum is greater than or equal to n","code":"if ( s >= n ) cout << \" No \" ;"}
{"text":"Otherwise , print Yes","code":"else cout < < \" Yes \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 100 , k = 6 ; check ( n , k ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate GCD of a and b using Euclidean Algorithm","code":"long long int gcd ( long long int a , long long int b ) {"}
{"text":"Iterate until b is non - zero","code":"while ( b > 0 ) { long long int rem = a % b ; a = b ; b = rem ; }"}
{"text":"Return the GCD","code":"return a ; }"}
{"text":"Function to count the number of ways N can be expressed as x ^ y","code":"int countNumberOfWays ( long long int n ) {"}
{"text":"Base Case","code":"if ( n == 1 ) return -1 ;"}
{"text":"Stores the gcd of powers","code":"long long int g = 0 ; int power = 0 ;"}
{"text":"Calculate the degree of 2 in N","code":"while ( n % 2 == 0 ) { power ++ ; n \/= 2 ; } g = gcd ( g , power ) ;"}
{"text":"Calculate the degree of prime numbers in N","code":"for ( int i = 3 ; i <= sqrt ( n ) ; i += 2 ) { power = 0 ;"}
{"text":"Calculate the degree of prime ' i ' in N","code":"while ( n % i == 0 ) { power ++ ; n \/= i ; } g = gcd ( g , power ) ; }"}
{"text":"If N is a prime , g becomes 1.","code":"if ( n > 2 ) g = gcd ( g , 1 ) ;"}
{"text":"Stores the number of ways to represent N as x ^ y","code":"int ways = 1 ;"}
{"text":"Find the number of Factors of g","code":"power = 0 ; while ( g % 2 == 0 ) { g \/= 2 ; power ++ ; }"}
{"text":"Update the count of ways","code":"ways *= ( power + 1 ) ;"}
{"text":"Iterate to find rest of the prime numbers","code":"for ( int i = 3 ; i <= sqrt ( g ) ; i += 2 ) { power = 0 ;"}
{"text":"Find the power of i","code":"while ( g % i == 0 ) { power ++ ; g \/= i ; }"}
{"text":"Update the count of ways","code":"ways *= ( power + 1 ) ; }"}
{"text":"If g is prime","code":"if ( g > 2 ) ways *= 2 ;"}
{"text":"Return the total number of ways","code":"return ways ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 64 ; cout << countNumberOfWays ( N ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the lowest power of 2 close to given positive number","code":"int powOfPositive ( int n ) {"}
{"text":"Floor function is used to determine the value close to the number","code":"int pos = floor ( log2 ( n ) ) ; return pow ( 2 , pos ) ; }"}
{"text":"Function to return the lowest power of 2 close to given negative number","code":"int powOfNegative ( int n ) {"}
{"text":"Ceil function is used for negative numbers as - 1 > - 4. It would be opposite to positive numbers where 1 < 4","code":"int pos = ceil ( log2 ( n ) ) ; return ( -1 * pow ( 2 , pos ) ) ; }"}
{"text":"Function to find the highest power of 2","code":"void highestPowerOf2 ( int n ) {"}
{"text":"To check if the given number is positive or negative","code":"if ( n > 0 ) { cout << powOfPositive ( n ) ; } else {"}
{"text":"If the number is negative , then the ceil of the positive number is calculated and negative sign is added","code":"n = - n ; cout << powOfNegative ( n ) ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = -24 ; highestPowerOf2 ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find number of cards needed","code":"int noOfCards ( int n ) { return n * ( 3 * n + 1 ) \/ 2 ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; cout << noOfCards ( n ) << \" , \u2581 \" ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function for finding the smallest possible number after swapping the digits any number of times","code":"string smallestPoss ( string s , int n ) {"}
{"text":"Variable to store the final answer","code":"string ans = \" \" ;"}
{"text":"Array to store the count of occurrence of each digit","code":"int arr [ 10 ] = { 0 } ;"}
{"text":"Loop to calculate the number of occurrences of every digit","code":"for ( int i = 0 ; i < n ; i ++ ) { arr [ s [ i ] - 48 ] ++ ; }"}
{"text":"Loop to get smallest number","code":"for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < arr [ i ] ; j ++ ) ans = ans + to_string ( i ) ; }"}
{"text":"Returning the answer","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 15 ; string K = \"325343273113434\" ; cout << smallestPoss ( K , N ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count the number of sub - arrays with sum strictly greater than the remaining elements of array","code":"int Count_subarray ( int arr [ ] , int n ) { int subarray_sum , remaining_sum , count = 0 ;"}
{"text":"For loop for beginning point of a subarray","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"For loop for ending point of the subarray","code":"for ( int j = i ; j < n ; j ++ ) {"}
{"text":"Initialise subarray_sum and remaining_sum to 0","code":"subarray_sum = 0 ; remaining_sum = 0 ;"}
{"text":"For loop to calculate the sum of generated subarray","code":"for ( int k = i ; k <= j ; k ++ ) { subarray_sum += arr [ k ] ; }"}
{"text":"For loop to calculate the sum remaining array element","code":"for ( int l = 0 ; l < i ; l ++ ) { remaining_sum += arr [ l ] ; } for ( int l = j + 1 ; l < n ; l ++ ) { remaining_sum += arr [ l ] ; }"}
{"text":"Checking for condition when subarray sum is strictly greater than remaining sum of array element","code":"if ( subarray_sum > remaining_sum ) { count += 1 ; } } } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 10 , 9 , 12 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << Count_subarray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int Count_subarray ( int arr [ ] , int n ) { int total_sum = 0 , subarray_sum , remaining_sum , count = 0 ;"}
{"text":"Calculating total sum of given array","code":"for ( int i = 0 ; i < n ; i ++ ) { total_sum += arr [ i ] ; }"}
{"text":"For loop for beginning point of a subarray","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"initialise subarray_sum to 0","code":"subarray_sum = 0 ;"}
{"text":"For loop for calculating subarray_sum and remaining_sum","code":"for ( int j = i ; j < n ; j ++ ) {"}
{"text":"Calculating subarray_sum and corresponding remaining_sum","code":"subarray_sum += arr [ j ] ; remaining_sum = total_sum - subarray_sum ;"}
{"text":"Checking for the condition when subarray sum is strictly greater than the remaining sum of the array element","code":"if ( subarray_sum > remaining_sum ) { count += 1 ; } } } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 10 , 9 , 12 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << Count_subarray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the maximized XOR after removing an element from the array","code":"int maxXOR ( int * arr , int n ) {"}
{"text":"Find XOR of the complete array","code":"int xorArr = 0 ; for ( int i = 0 ; i < n ; i ++ ) xorArr ^= arr [ i ] ;"}
{"text":"To store the final answer","code":"int ans = 0 ;"}
{"text":"Iterating through the array to find the final answer","code":"for ( int i = 0 ; i < n ; i ++ ) ans = max ( ans , ( xorArr ^ arr [ i ] ) ) ;"}
{"text":"Return the final answer","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 1 , 1 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; cout << maxXOR ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if num contains at least one digit that divides k","code":"bool digitDividesK ( int num , int k ) { while ( num ) {"}
{"text":"Get the last digit","code":"int d = num % 10 ;"}
{"text":"If the digit is non - zero and it divides k","code":"if ( d != 0 and k % d == 0 ) return true ;"}
{"text":"Remove the last digit","code":"num = num \/ 10 ; }"}
{"text":"There is no digit in num that divides k","code":"return false ; }"}
{"text":"Function to return the required count of elements from the given range which contain at least one digit that divides k","code":"int findCount ( int l , int r , int k ) {"}
{"text":"To store the result","code":"int count = 0 ;"}
{"text":"For every number from the range","code":"for ( int i = l ; i <= r ; i ++ ) {"}
{"text":"If any digit of the current number divides k","code":"if ( digitDividesK ( i , k ) ) count ++ ; } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int l = 20 , r = 35 ; int k = 45 ; cout << findCount ( l , r , k ) ; return 0 ; }"}
{"text":"C ++ implementation for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the given number is a factorial of any number","code":"bool isFactorial ( int n ) { for ( int i = 1 ; ; i ++ ) { if ( n % i == 0 ) { n \/= i ; } else { break ; } } if ( n == 1 ) { return true ; } else { return false ; } }"}
{"text":"Driver Code","code":"int main ( ) { int n = 24 ; bool ans = isFactorial ( n ) ; if ( ans == 1 ) { cout << \" Yes STRNEWLINE \" ; } else { cout << \" No STRNEWLINE \" ; } return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the LCM of two numbers","code":"int lcm ( int a , int b ) { int GCD = __gcd ( a , b ) ; return ( a * b ) \/ GCD ; }"}
{"text":"Function to return the minimum LCM after removing a single element from the given array","code":"int MinLCM ( int a [ ] , int n ) {"}
{"text":"Prefix and Suffix arrays","code":"int Prefix [ n + 2 ] ; int Suffix [ n + 2 ] ;"}
{"text":"Single state dynamic programming relation for storing LCM of first i elements from the left in Prefix [ i ]","code":"Prefix [ 1 ] = a [ 0 ] ; for ( int i = 2 ; i <= n ; i += 1 ) { Prefix [ i ] = lcm ( Prefix [ i - 1 ] , a [ i - 1 ] ) ; }"}
{"text":"Initializing Suffix array","code":"Suffix [ n ] = a [ n - 1 ] ;"}
{"text":"Single state dynamic programming relation for storing LCM of all the elements having index greater than or equal to i in Suffix [ i ]","code":"for ( int i = n - 1 ; i >= 1 ; i -= 1 ) { Suffix [ i ] = lcm ( Suffix [ i + 1 ] , a [ i - 1 ] ) ; }"}
{"text":"If first or last element of the array has to be removed","code":"int ans = min ( Suffix [ 2 ] , Prefix [ n - 1 ] ) ;"}
{"text":"If any other element is replaced","code":"for ( int i = 2 ; i < n ; i += 1 ) { ans = min ( ans , lcm ( Prefix [ i - 1 ] , Suffix [ i + 1 ] ) ) ; }"}
{"text":"Return the minimum LCM","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 5 , 15 , 9 , 36 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << MinLCM ( a , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of coloured 0 s in an n - level hexagon","code":"int count ( int n ) { return n * ( 3 * n - 1 ) \/ 2 ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 3 ; cout << count ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the minimum required value","code":"int findMinValue ( int arr [ ] , int n ) {"}
{"text":"Find the sum of the array elements","code":"long sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ;"}
{"text":"Return the required value","code":"return ( ( sum \/ n ) + 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 4 , 2 , 1 , 10 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; cout << findMinValue ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MOD  1000000007"}
{"text":"Function to return ( m ! % MOD )","code":"int modFact ( int n , int m ) { int result = 1 ; for ( int i = 1 ; i <= m ; i ++ ) result = ( result * i ) % MOD ; return result ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 3 , m = 2 ; cout << modFact ( n , m ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int mod = 1e9 + 7 ;"}
{"text":"Function to return ( 2 ^ P % mod )","code":"long long power ( int p ) { long long res = 1 ; for ( int i = 1 ; i <= p ; ++ i ) { res *= 2 ; res %= mod ; } return res % mod ; }"}
{"text":"Function to return the sum of squares of subsets","code":"long long subset_square_sum ( vector < int > & A ) { int n = ( int ) A . size ( ) ; long long ans = 0 ;"}
{"text":"Sqauaring the elements and adding it to ans","code":"for ( int i : A ) { ans += ( 1LL * i * i ) % mod ; ans %= mod ; } return ( 1LL * ans * power ( n - 1 ) ) % mod ; }"}
{"text":"Driver code","code":"int main ( ) { vector < int > A = { 3 , 7 } ; cout << subset_square_sum ( A ) ; return 0 ; }"}
{"text":"CPP program to find the number of pairs such that gcd equals to 1","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  100050 NEW_LINE int lpf [ N ] , mobius [ N ] ;"}
{"text":"Function to calculate least prime factor of each number","code":"void least_prime_factor ( ) { for ( int i = 2 ; i < N ; i ++ )"}
{"text":"If it is a prime number","code":"if ( ! lpf [ i ] ) for ( int j = i ; j < N ; j += i )"}
{"text":"For all multiples which are not visited yet .","code":"if ( ! lpf [ j ] ) lpf [ j ] = i ; }"}
{"text":"Function to find the value of Mobius function for all the numbers from 1 to n","code":"void Mobius ( ) { for ( int i = 1 ; i < N ; i ++ ) {"}
{"text":"If number is one","code":"if ( i == 1 ) mobius [ i ] = 1 ; else {"}
{"text":"If number has a squared prime factor","code":"if ( lpf [ i \/ lpf [ i ] ] == lpf [ i ] ) mobius [ i ] = 0 ;"}
{"text":"Multiply - 1 with the previous number","code":"else mobius [ i ] = -1 * mobius [ i \/ lpf [ i ] ] ; } } }"}
{"text":"Function to find the number of pairs such that gcd equals to 1","code":"int gcd_pairs ( int a [ ] , int n ) {"}
{"text":"To store maximum number","code":"int maxi = 0 ;"}
{"text":"To store frequency of each number","code":"int fre [ N ] = { 0 } ;"}
{"text":"Find frequency and maximum number","code":"for ( int i = 0 ; i < n ; i ++ ) { fre [ a [ i ] ] ++ ; maxi = max ( a [ i ] , maxi ) ; } least_prime_factor ( ) ; Mobius ( ) ;"}
{"text":"To store number of pairs with gcd equals to 1","code":"int ans = 0 ;"}
{"text":"Traverse through the all possible elements","code":"for ( int i = 1 ; i <= maxi ; i ++ ) { if ( ! mobius [ i ] ) continue ; int temp = 0 ; for ( int j = i ; j <= maxi ; j += i ) temp += fre [ j ] ; ans += temp * ( temp - 1 ) \/ 2 * mobius [ i ] ; }"}
{"text":"Return the number of pairs","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ;"}
{"text":"Function call","code":"cout << gcd_pairs ( a , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to compare x ^ y and y ^ x","code":"void compareVal ( int x , int y ) {"}
{"text":"Storing values OF x ^ y AND y ^ x","code":"long double a = y * log ( x ) ; long double b = x * log ( y ) ;"}
{"text":"Comparing values","code":"if ( a > b ) cout << x << \" ^ \" << y << \" \u2581 > \u2581 \" << y << \" ^ \" << x ; else if ( a < b ) cout << x << \" ^ \" << y << \" \u2581 < \u2581 \" << y << \" ^ \" << x ; else if ( a == b ) cout << x << \" ^ \" << y << \" \u2581 = \u2581 \" << y << \" ^ \" << x ; }"}
{"text":"Driver code","code":"int main ( ) { long double x = 4 , y = 5 ; compareVal ( x , y ) ; return 0 ; }"}
{"text":"CPP program to find zigzag sequence","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print first n zigzag numbers","code":"void ZigZag ( int n ) {"}
{"text":"To store factorial and n 'th zig zag number","code":"long long fact [ n + 1 ] , zig [ n + 1 ] = { 0 } ;"}
{"text":"Initialize factorial upto n","code":"fact [ 0 ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ) fact [ i ] = fact [ i - 1 ] * i ;"}
{"text":"Set first two zig zag numbers","code":"zig [ 0 ] = 1 ; zig [ 1 ] = 1 ; cout << \" zig \u2581 zag \u2581 numbers : \u2581 \" ;"}
{"text":"Print first two zig zag number","code":"cout << zig [ 0 ] << \" \u2581 \" << zig [ 1 ] << \" \u2581 \" ;"}
{"text":"Print the rest zig zag numbers","code":"for ( int i = 2 ; i < n ; i ++ ) { long long sum = 0 ; for ( int k = 0 ; k <= i - 1 ; k ++ ) {"}
{"text":"Binomial ( n , k ) * a ( k ) * a ( n - k )","code":"sum += ( fact [ i - 1 ] \/ ( fact [ i - 1 - k ] * fact [ k ] ) ) * zig [ k ] * zig [ i - 1 - k ] ; }"}
{"text":"Store the value","code":"zig [ i ] = sum \/ 2 ;"}
{"text":"Print the number","code":"cout << sum \/ 2 << \" \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 ;"}
{"text":"Function call","code":"ZigZag ( n ) ; return 0 ; }"}
{"text":"C ++ program to demonstrate Gijswijt 's sequence","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"if the sequence is a ( 1 ) a ( 2 ) a ( 3 ) . . a ( n - 1 ) check if the sequence can be represented as x * ( y ^ k ) find the largest value of k","code":"int find_count ( vector < int > ele ) {"}
{"text":"count","code":"int count = 0 ; for ( int i = 0 ; i < ele . size ( ) ; i ++ ) {"}
{"text":"pattern of elements of size i from the end of sequence","code":"vector < int > p ;"}
{"text":"count","code":"int c = 0 ;"}
{"text":"extract the pattern in a reverse order","code":"for ( int j = ele . size ( ) - 1 ; j >= ( ele . size ( ) - 1 - i ) && j >= 0 ; j -- ) p . push_back ( ele [ j ] ) ; int j = ele . size ( ) - 1 , k = 0 ;"}
{"text":"check how many times the pattern is repeated","code":"while ( j >= 0 ) {"}
{"text":"if the element dosent match","code":"if ( ele [ j ] != p [ k ] ) break ; j -- ; k ++ ;"}
{"text":"if the end of pattern is reached set value of k = 0 and increase the count","code":"if ( k == p . size ( ) ) { c ++ ; k = 0 ; } } count = max ( count , c ) ; }"}
{"text":"return the max count","code":"return count ; }"}
{"text":"print first n terms of Gijswijt 's sequence","code":"void solve ( int n ) {"}
{"text":"set the count","code":"int count = 1 ;"}
{"text":"stoes the element","code":"vector < int > ele ;"}
{"text":"print the first n terms of the sequence","code":"for ( int i = 0 ; i < n ; i ++ ) { cout << count << \" , \u2581 \" ;"}
{"text":"push the element","code":"ele . push_back ( count ) ;"}
{"text":"find the count for next number","code":"count = find_count ( ele ) ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 ; solve ( n ) ; return 0 ; }"}
{"text":"CPP program to find N terms of the sequence","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Stores the Wedderburn Etherington numbers","code":"map < int , int > store ;"}
{"text":"Function to return the nth Wedderburn Etherington numbers","code":"int Wedderburn ( int n ) {"}
{"text":"Base case","code":"if ( n <= 2 ) return store [ n ] ;"}
{"text":"If n is even n = 2 x","code":"else if ( n % 2 == 0 ) {"}
{"text":"get x","code":"int x = n \/ 2 , ans = 0 ;"}
{"text":"a ( 2 x ) = a ( 1 ) a ( 2 x - 1 ) + a ( 2 ) a ( 2 x - 2 ) + ... + a ( x - 1 ) a ( x + 1 )","code":"for ( int i = 1 ; i < x ; i ++ ) { ans += store [ i ] * store [ n - i ] ; }"}
{"text":"a ( x ) ( a ( x ) + 1 ) \/ 2","code":"ans += ( store [ x ] * ( store [ x ] + 1 ) ) \/ 2 ;"}
{"text":"Store the ans","code":"store [ n ] = ans ;"}
{"text":"Return the required answer","code":"return ans ; } else {"}
{"text":"If n is odd","code":"int x = ( n + 1 ) \/ 2 , ans = 0 ;"}
{"text":"a ( 2 x - 1 ) = a ( 1 ) a ( 2 x - 2 ) + a ( 2 ) a ( 2 x - 3 ) + ... + a ( x - 1 ) a ( x ) ,","code":"for ( int i = 1 ; i < x ; i ++ ) { ans += store [ i ] * store [ n - i ] ; }"}
{"text":"Store the ans","code":"store [ n ] = ans ;"}
{"text":"Return the required answer","code":"return ans ; } }"}
{"text":"Function to print first N Wedderburn Etherington numbers","code":"void Wedderburn_Etherington ( int n ) {"}
{"text":"Store first 3 numbers","code":"store [ 0 ] = 0 ; store [ 1 ] = 1 ; store [ 2 ] = 1 ;"}
{"text":"Print N terms","code":"for ( int i = 0 ; i < n ; i ++ ) { cout << Wedderburn ( i ) ; if ( i != n - 1 ) cout << \" , \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 ;"}
{"text":"function call","code":"Wedderburn_Etherington ( n ) ; return 0 ; }"}
{"text":"CPP program to maximum value after merging all elements in the array","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to maximum value after merging all elements in the array","code":"int Max_sum ( int a [ ] , int n ) {"}
{"text":"To check if positive and negative elements present or not","code":"int pos = 0 , neg = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Check for positive integer","code":"if ( a [ i ] > 0 ) pos = 1 ;"}
{"text":"Check for negative integer","code":"else if ( a [ i ] < 0 ) neg = 1 ;"}
{"text":"If both positive and negative elements are present","code":"if ( pos == 1 and neg == 1 ) break ; }"}
{"text":"To store maximum value possible","code":"int sum = 0 ; if ( pos == 1 and neg == 1 ) { for ( int i = 0 ; i < n ; i ++ ) sum += abs ( a [ i ] ) ; } else if ( pos == 1 ) {"}
{"text":"To find minimum value","code":"int mini = a [ 0 ] ; sum = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { mini = min ( mini , a [ i ] ) ; sum += a [ i ] ; }"}
{"text":"Remove minimum element","code":"sum -= 2 * mini ; } else if ( neg == 1 ) {"}
{"text":"Replace with absolute values","code":"for ( int i = 0 ; i < n ; i ++ ) a [ i ] = abs ( a [ i ] ) ;"}
{"text":"To find minimum value","code":"int mini = a [ 0 ] ; sum = a [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { mini = min ( mini , a [ i ] ) ; sum += a [ i ] ; }"}
{"text":"Remove minimum element","code":"sum -= 2 * mini ; }"}
{"text":"Return the required sum","code":"return sum ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 1 , 3 , 5 , -2 , -6 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ;"}
{"text":"Function call","code":"cout << Max_sum ( a , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive function to convert n to its binary equivalent","code":"void decimalToBinary ( int n ) {"}
{"text":"Base case","code":"if ( n == 0 ) { cout << \"0\" ; return ; }"}
{"text":"Recursive call","code":"decimalToBinary ( n \/ 2 ) ; cout << n % 2 ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 13 ; decimalToBinary ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find A , B and C","code":"void MinimumValue ( int x , int y ) {"}
{"text":"Keep minimum number in x","code":"if ( x > y ) swap ( x , y ) ;"}
{"text":"Find the numbers","code":"int a = 1 ; int b = x - 1 ; int c = y - b ; cout << a << \" \u2581 \" << b << \" \u2581 \" << c ; }"}
{"text":"Driver code","code":"int main ( ) { int x = 123 , y = 13 ;"}
{"text":"Function call","code":"MinimumValue ( x , y ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if A can be converted to B with the given operations","code":"bool canConvert ( int a , int b ) { while ( b > a ) {"}
{"text":"If the current number ends with 1","code":"if ( b % 10 == 1 ) { b \/= 10 ; continue ; }"}
{"text":"If the current number is divisible by 2","code":"if ( b % 2 == 0 ) { b \/= 2 ; continue ; }"}
{"text":"If above two conditions fail","code":"return false ; }"}
{"text":"If it is possible to convert A to B","code":"if ( b == a ) return true ; return false ; }"}
{"text":"Driver code","code":"int main ( ) { int A = 2 , B = 82 ; if ( canConvert ( A , B ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ code to count distinct rectangle in a chessboard","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of distinct rectangles","code":"int count ( int N ) { int a = 0 ; a = ( N * ( N + 1 ) ) \/ 2 ; return a ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 4 ; cout << count ( N ) ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the number of days required","code":"int numberOfDays ( int a , int b , int n ) { int Days = b * ( n + a ) \/ ( a + b ) ; return Days ; }"}
{"text":"Driver code","code":"int main ( ) { int a = 10 , b = 20 , n = 5 ; cout << numberOfDays ( a , b , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the average of x and y using bit operations","code":"int getAverage ( int x , int y ) {"}
{"text":"Calculate the average Floor value of ( x + y ) \/ 2","code":"int avg = ( x & y ) + ( ( x ^ y ) >> 1 ) ; return avg ; }"}
{"text":"Driver code","code":"int main ( ) { int x = 10 , y = 9 ; cout << getAverage ( x , y ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the smallest index such that there are no 0 or 1 to its right","code":"int smallestIndex ( int a [ ] , int n ) {"}
{"text":"Initially","code":"int right1 = 0 , right0 = 0 ;"}
{"text":"Traverse in the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if array element is 1","code":"if ( a [ i ] == 1 ) right1 = i ;"}
{"text":"a [ i ] = 0","code":"else right0 = i ; }"}
{"text":"Return minimum of both","code":"return min ( right1 , right0 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << smallestIndex ( a , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of squares that can be visited by king in m moves","code":"int countSquares ( int r , int c , int m ) {"}
{"text":"To store the count of squares","code":"int squares = 0 ;"}
{"text":"Check all squares of the chessboard","code":"for ( int i = 1 ; i <= 8 ; i ++ ) { for ( int j = 1 ; j <= 8 ; j ++ ) {"}
{"text":"Check if square ( i , j ) is at a distance <= m units from king 's current position","code":"if ( max ( abs ( i - r ) , abs ( j - c ) ) <= m ) squares ++ ; } }"}
{"text":"Return count of squares","code":"return squares ; }"}
{"text":"Driver code","code":"int main ( ) { int r = 4 , c = 4 , m = 1 ; cout << countSquares ( r , c , m ) << endl ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of quadruples","code":"int countQuadruples ( int a [ ] , int n ) {"}
{"text":"Hash table to count the number of occurrences","code":"unordered_map < int , int > mpp ;"}
{"text":"Traverse and increment the count","code":"for ( int i = 0 ; i < n ; i ++ ) mpp [ a [ i ] ] ++ ; int count = 0 ;"}
{"text":"Run two nested loop for second and third element","code":"for ( int j = 0 ; j < n ; j ++ ) { for ( int k = 0 ; k < n ; k ++ ) {"}
{"text":"If they are same","code":"if ( j == k ) continue ;"}
{"text":"Initially decrease the count","code":"mpp [ a [ j ] ] -- ; mpp [ a [ k ] ] -- ;"}
{"text":"Find the first element using common difference","code":"int first = a [ j ] - ( a [ k ] - a [ j ] ) ;"}
{"text":"Find the fourth element using GP y ^ 2 = x * z property","code":"int fourth = ( a [ k ] * a [ k ] ) \/ a [ j ] ;"}
{"text":"If it is an integer","code":"if ( ( a [ k ] * a [ k ] ) % a [ j ] == 0 ) {"}
{"text":"If not equal","code":"if ( a [ j ] != a [ k ] ) count += mpp [ first ] * mpp [ fourth ] ;"}
{"text":"Same elements","code":"else count += mpp [ first ] * ( mpp [ fourth ] - 1 ) ; }"}
{"text":"Later increase the value for future calculations","code":"mpp [ a [ j ] ] ++ ; mpp [ a [ k ] ] ++ ; } } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 2 , 6 , 4 , 9 , 2 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; cout << countQuadruples ( a , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE #define ll  long long int NEW_LINE using namespace std ;"}
{"text":"Function to return the count of required numbers","code":"int countNumbers ( int L , int R , int K ) { if ( K == 9 ) K = 0 ;"}
{"text":"Count of numbers present in given range","code":"int totalnumbers = R - L + 1 ;"}
{"text":"Number of groups of 9 elements starting from L","code":"int factor9 = totalnumbers \/ 9 ;"}
{"text":"Left over elements not covered in factor 9","code":"int rem = totalnumbers % 9 ;"}
{"text":"One Number in each group of 9","code":"int ans = factor9 ;"}
{"text":"To check if any number in rem satisfy the property","code":"for ( int i = R ; i > R - rem ; i -- ) { int rem1 = i % 9 ; if ( rem1 == K ) ans ++ ; } return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int L = 10 ; int R = 22 ; int K = 3 ; cout << countNumbers ( L , R , K ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the sum of even elements after updating value at given index","code":"int EvenSum ( vector < int > & A , int index , int value ) {"}
{"text":"Add given value to A [ index ]","code":"A [ index ] = A [ index ] + value ;"}
{"text":"To store the sum of even elements","code":"int sum = 0 ; for ( int i = 0 ; i < A . size ( ) ; i ++ )"}
{"text":"If current element is even","code":"if ( A [ i ] % 2 == 0 ) sum = sum + A [ i ] ; return sum ; }"}
{"text":"Function to print the result for every query","code":"void BalanceArray ( vector < int > & A , vector < vector < int > > & Q ) {"}
{"text":"Resultant vector that stores the result for every query","code":"vector < int > ANS ; int i , sum ; for ( i = 0 ; i < Q . size ( ) ; i ++ ) { int index = Q [ i ] [ 0 ] ; int value = Q [ i ] [ 1 ] ;"}
{"text":"Get sum of even elements after updating value at given index","code":"sum = EvenSum ( A , index , value ) ;"}
{"text":"Store sum for each query","code":"ANS . push_back ( sum ) ; }"}
{"text":"Print the result for every query","code":"for ( i = 0 ; i < ANS . size ( ) ; i ++ ) cout << ANS [ i ] << \" \u2581 \" ; }"}
{"text":"Driver code","code":"int main ( ) { vector < int > A = { 1 , 2 , 3 , 4 } ; vector < vector < int > > Q = { { 0 , 1 } , { 1 , -3 } , { 0 , -4 } , { 3 , 2 } } ; BalanceArray ( A , Q ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the result for every query","code":"void BalanceArray ( vector < int > & A , vector < vector < int > > & Q ) { vector < int > ANS ; int i , sum = 0 ; for ( i = 0 ; i < A . size ( ) ; i ++ )"}
{"text":"If current element is even","code":"if ( A [ i ] % 2 == 0 ) sum = sum + A [ i ] ; for ( i = 0 ; i < Q . size ( ) ; i ++ ) { int index = Q [ i ] [ 0 ] ; int value = Q [ i ] [ 1 ] ;"}
{"text":"If element is even then remove it from sum","code":"if ( A [ index ] % 2 == 0 ) sum = sum - A [ index ] ; A [ index ] = A [ index ] + value ;"}
{"text":"If the value becomes even after updating","code":"if ( A [ index ] % 2 == 0 ) sum = sum + A [ index ] ;"}
{"text":"Store sum for each query","code":"ANS . push_back ( sum ) ; }"}
{"text":"Print the result for every query","code":"for ( i = 0 ; i < ANS . size ( ) ; i ++ ) cout << ANS [ i ] << \" \u2581 \" ; }"}
{"text":"Driver code","code":"int main ( ) { vector < int > A = { 1 , 2 , 3 , 4 } ; vector < vector < int > > Q = { { 0 , 1 } , { 1 , -3 } , { 0 , -4 } , { 3 , 2 } } ; BalanceArray ( A , Q ) ; return 0 ; }"}
{"text":"C ++ program for implementation of the above program","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that calculates number of Hamiltonian cycle","code":"int Cycles ( int N ) { int fact = 1 , result = 0 ; result = N - 1 ;"}
{"text":"Calculating factorial","code":"int i = result ; while ( i > 0 ) { fact = fact * i ; i -- ; } return fact \/ 2 ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 5 ; int Number = Cycles ( N ) ; cout << \" Hamiltonian \u2581 cycles \u2581 = \u2581 \" << Number ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if n contains digit m exactly k times","code":"bool digitWell ( int n , int m , int k ) { int cnt = 0 ; while ( n > 0 ) { if ( n % 10 == m ) ++ cnt ; n \/= 10 ; } return cnt == k ; }"}
{"text":"Function to return the smallest integer > n with digit m occurring exactly k times","code":"int findInt ( int n , int m , int k ) { int i = n + 1 ; while ( true ) { if ( digitWell ( i , m , k ) ) return i ; i ++ ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 111 , m = 2 , k = 2 ; cout << findInt ( n , m , k ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of odd numbers in the array","code":"int countOdd ( int arr [ ] , int n ) {"}
{"text":"Variable to count odd numbers","code":"int odd = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Odd number","code":"if ( arr [ i ] % 2 == 1 ) odd ++ ; } return odd ; }"}
{"text":"Function to return the count of valid pairs","code":"int countValidPairs ( int arr [ ] , int n ) { int odd = countOdd ( arr , n ) ; return ( odd * ( odd - 1 ) ) \/ 2 ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << countValidPairs ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define ll  long long int"}
{"text":"Function to return the gcd of two numbers","code":"ll gcd ( ll a , ll b ) { if ( b == 0 ) return a ; else return gcd ( b , a % b ) ; }"}
{"text":"Function to return the lcm of all the elements of the array","code":"ll lcmOfArray ( int arr [ ] , int n ) { if ( n < 1 ) return 0 ; ll lcm = arr [ 0 ] ;"}
{"text":"To calculate lcm of two numbers multiply them and divide the result by gcd of both the numbers","code":"for ( int i = 1 ; i < n ; i ++ ) lcm = ( lcm * arr [ i ] ) \/ gcd ( lcm , arr [ i ] ) ;"}
{"text":"Return the LCM of the array elements","code":"return lcm ; }"}
{"text":"Function to return the smallest perfect cube divisible by all the elements of arr [ ]","code":"int minPerfectCube ( int arr [ ] , int n ) { ll minPerfectCube ;"}
{"text":"LCM of all the elements of arr [ ]","code":"ll lcm = lcmOfArray ( arr , n ) ; minPerfectCube = ( long long ) lcm ; int cnt = 0 ; while ( lcm > 1 && lcm % 2 == 0 ) { cnt ++ ; lcm \/= 2 ; }"}
{"text":"If 2 divides lcm cnt number of times","code":"if ( cnt % 3 == 2 ) minPerfectCube *= 2 ; else if ( cnt % 3 == 1 ) minPerfectCube *= 4 ; int i = 3 ;"}
{"text":"Check all the numbers that divide lcm","code":"while ( lcm > 1 ) { cnt = 0 ; while ( lcm % i == 0 ) { cnt ++ ; lcm \/= i ; } if ( cnt % 3 == 1 ) minPerfectCube *= i * i ; else if ( cnt % 3 == 2 ) minPerfectCube *= i ; i += 2 ; }"}
{"text":"Return the answer","code":"return minPerfectCube ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 10 , 125 , 14 , 42 , 100 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << minPerfectCube ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to check if given number is strong prime","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to check if a number is prime or not","code":"bool isPrime ( int n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"Function that returns true if n is a strong prime","code":"static bool isStrongPrime ( int n ) {"}
{"text":"If n is not a prime number or n is the first prime then return false","code":"if ( ! isPrime ( n ) n == 2 ) return false ;"}
{"text":"Initialize previous_prime to n - 1 and next_prime to n + 1","code":"int previous_prime = n - 1 ; int next_prime = n + 1 ;"}
{"text":"Find next prime number","code":"while ( ! isPrime ( next_prime ) ) next_prime ++ ;"}
{"text":"Find previous prime number","code":"while ( ! isPrime ( previous_prime ) ) previous_prime -- ;"}
{"text":"Arithmetic mean","code":"int mean = ( previous_prime + next_prime ) \/ 2 ;"}
{"text":"If n is a strong prime","code":"if ( n > mean ) return true ; else return false ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 11 ; if ( isStrongPrime ( n ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"CPP Program to count the number of digits that can be removed such that number is divisible by 10 ^ K","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to return the required number of digits to be removed","code":"int countDigitsToBeRemoved ( int N , int K ) {"}
{"text":"Converting the given number into string","code":"string s = to_string ( N ) ;"}
{"text":"variable to store number of digits to be removed","code":"int res = 0 ;"}
{"text":"variable to denote if atleast one zero has been found","code":"int f_zero = 0 ; for ( int i = s . size ( ) - 1 ; i >= 0 ; i -- ) { if ( K == 0 ) return res ; if ( s [ i ] == '0' ) {"}
{"text":"zero found","code":"f_zero = 1 ; K -- ; } else res ++ ; }"}
{"text":"return size - 1 if K is not zero and atleast one zero is present , otherwise result","code":"if ( ! K ) return res ; else if ( f_zero ) return s . size ( ) - 1 ; return -1 ; }"}
{"text":"Driver Code to test above function","code":"int main ( ) { int N = 10904025 , K = 2 ; cout << countDigitsToBeRemoved ( N , K ) << endl ; N = 1000 , K = 5 ; cout << countDigitsToBeRemoved ( N , K ) << endl ; N = 23985 , K = 2 ; cout << countDigitsToBeRemoved ( N , K ) << endl ; return 0 ; }"}
{"text":"C ++ program to find the sum of the given series","code":"#include <stdio.h> NEW_LINE #include <math.h> NEW_LINE #include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to return the sum of the series","code":"float getSum ( int a , int n ) {"}
{"text":"variable to store the answer","code":"float sum = 0 ; for ( int i = 1 ; i <= n ; ++ i ) {"}
{"text":"Math . pow ( x , y ) returns x ^ y","code":"sum += ( i \/ pow ( a , i ) ) ; } return sum ; }"}
{"text":"Driver code","code":"int main ( ) { int a = 3 , n = 3 ;"}
{"text":"Print the sum of the series","code":"cout << ( getSum ( a , n ) ) ; return 0 ; }"}
{"text":"C ++ Program to check Unusual number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to find largest prime factor of a number","code":"int largestPrimeFactor ( int n ) {"}
{"text":"Initialize the maximum prime factor variable with the lowest one","code":"int max = -1 ;"}
{"text":"Print the number of 2 s that divide n","code":"while ( n % 2 == 0 ) { max = 2 ;"}
{"text":"n >>= 1 ; equivalent to n \/= 2","code":"}"}
{"text":"n must be odd at this point , thus skip the even numbers and iterate only for odd integers","code":"for ( int i = 3 ; i <= sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { max = i ; n = n \/ i ; } }"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( n > 2 ) max = n ; return max ; }"}
{"text":"Function to check Unusual number","code":"bool checkUnusual ( int n ) {"}
{"text":"Get the largest Prime Factor of the number","code":"int factor = largestPrimeFactor ( n ) ;"}
{"text":"Check if largest prime factor is greater than sqrt ( n )","code":"if ( factor > sqrt ( n ) ) { return true ; } else { return false ; } }"}
{"text":"Driver Code","code":"int main ( ) { int n = 14 ; if ( checkUnusual ( n ) ) { cout << \" YES \" << \" STRNEWLINE \" ; } else { cout << \" NO \" << \" STRNEWLINE \" ; } return 0 ; }"}
{"text":"C ++ program to find whether half - array reducible to 0","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the desired result after computation","code":"void isHalfReducible ( int arr [ ] , int n , int m ) { int frequencyHash [ m + 1 ] ; int i ; memset ( frequencyHash , 0 , sizeof ( frequencyHash ) ) ; for ( i = 0 ; i < n ; i ++ ) { frequencyHash [ arr [ i ] % ( m + 1 ) ] ++ ; } for ( i = 0 ; i <= m ; i ++ ) { if ( frequencyHash [ i ] >= n \/ 2 ) break ; } if ( i <= m ) cout << \" Yes \" << endl ; else cout << \" No \" << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 8 , 16 , 32 , 3 , 12 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int m = 7 ; isHalfReducible ( arr , n , m ) ; return 0 ; }"}
{"text":"CPP program to check if the given number is Ore number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; vector < int > arr ;"}
{"text":"Function that returns harmonic mean","code":"void generateDivisors ( int n ) {"}
{"text":"Note that this loop runs till square root","code":"for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) {"}
{"text":"If divisors are equal , store ' i '","code":"if ( n \/ i == i ) arr . push_back ( i ) ;"}
{"text":"else Otherwise store ' i ' and ' n \/ i ' both","code":"{ arr . push_back ( i ) ; arr . push_back ( n \/ i ) ; } } } }"}
{"text":"Utility function to calculate harmonic mean of the divisors","code":"double harmonicMean ( int n ) { generateDivisors ( n ) ;"}
{"text":"Declare sum variables and initialize with zero .","code":"double sum = 0.0 ; int len = arr . size ( ) ;"}
{"text":"calculate denominator","code":"for ( int i = 0 ; i < len ; i ++ ) sum = sum + double ( n \/ arr [ i ] ) ; sum = double ( sum \/ n ) ;"}
{"text":"Calculate harmonic mean and return","code":"return double ( arr . size ( ) \/ sum ) ; }"}
{"text":"Function to check if a number is ore number","code":"bool isOreNumber ( int n ) {"}
{"text":"Calculate Harmonic mean of divisors of n","code":"double mean = harmonicMean ( n ) ;"}
{"text":"Check if harmonic mean is an integer or not","code":"if ( mean - int ( mean ) == 0 ) return true ; else return false ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 28 ; if ( isOreNumber ( n ) ) cout << \" YES \" ; else cout << \" NO \" ; return 0 ; }"}
{"text":"CPP program to check Euclid Number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  10000 NEW_LINE unordered_set < long long int > s ;"}
{"text":"Function to generate the Prime numbers and store their products","code":"void SieveOfEratosthenes ( ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"bool prime [ MAX ] ; memset ( prime , true , sizeof ( prime ) ) ; for ( int p = 2 ; p * p < MAX ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( int i = p * 2 ; i < MAX ; i += p ) prime [ i ] = false ; } }"}
{"text":"store prefix product of prime numbers to unordered_set ' s '","code":"long long int product = 1 ; for ( int p = 2 ; p < MAX ; p ++ ) { if ( prime [ p ] ) {"}
{"text":"update product by multiplying next prime","code":"product = product * p ;"}
{"text":"insert ' produc + 1' to set","code":"s . insert ( product + 1 ) ; } } }"}
{"text":"Function to check the number for Euclid Number","code":"bool isEuclid ( long n ) {"}
{"text":"Check if number exist in unordered set or not If exist , return true","code":"if ( s . find ( n ) != s . end ( ) ) return true ; else return false ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Get the prime numbers","code":"SieveOfEratosthenes ( ) ;"}
{"text":"Get n","code":"long n = 31 ;"}
{"text":"Check if n is Euclid Number","code":"if ( isEuclid ( n ) ) cout << \" YES STRNEWLINE \" ; else cout << \" NO STRNEWLINE \" ;"}
{"text":"Get n","code":"n = 42 ;"}
{"text":"Check if n is Euclid Number","code":"if ( isEuclid ( n ) ) cout << \" YES STRNEWLINE \" ; else cout << \" NO STRNEWLINE \" ; return 0 ; }"}
{"text":"CPP program to check if a number is Wagstaff prime or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if a number is prime or not","code":"bool isPrime ( int n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return false ; } } return true ; }"}
{"text":"Utility function to check power of two","code":"bool isPowerOfTwo ( int n ) { return ( n && ! ( n & ( n - 1 ) ) ) ; }"}
{"text":"Driver Program","code":"int main ( ) { int n = 43 ;"}
{"text":"Check if number is prime and of the form ( 2 ^ q + 1 ) \/ 3","code":"if ( isPrime ( n ) && ( isPowerOfTwo ( n * 3 - 1 ) ) ) { cout << \" YES STRNEWLINE \" ; } else { cout << \" NO STRNEWLINE \" ; } return 0 ; }"}
{"text":"C ++ Program to find the area of the square inscribed within the circle which in turn is inscribed in a hexagon","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the area of the square","code":"float area ( float a ) {"}
{"text":"side of hexagon cannot be negative","code":"if ( a < 0 ) return -1 ;"}
{"text":"area of the square","code":"float area = pow ( ( a * sqrt ( 3 ) ) \/ ( sqrt ( 2 ) ) , 2 ) ; return area ; }"}
{"text":"Driver code","code":"int main ( ) { float a = 5 ; cout << area ( a ) << endl ; return 0 ; }"}
{"text":"C ++ program to find the N - th term of the series : 1 , 6 , 17 , 34 , 56 , 86 , 121 , 162 , ... . .","code":"#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"calculate Nth term of series","code":"int nthTerm ( int n ) { return 3 * pow ( n , 2 ) - 4 * n + 2 ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 4 ; cout << nthTerm ( N ) << endl ; return 0 ; }"}
{"text":"C ++ program to find sum of first n terms","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the sum","code":"int calculateSum ( int n ) { return n * ( n + 1 ) \/ 2 + pow ( ( n * ( n + 1 ) \/ 2 ) , 2 ) ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"number of terms to be included in the sum","code":"int n = 3 ;"}
{"text":"find the Sum","code":"cout << \" Sum \u2581 = \u2581 \" << calculateSum ( n ) ; return 0 ; }"}
{"text":"CPP code to check if arrays are permutations of eah other","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to check if arrays are permutations of each other .","code":"bool arePermutations ( int a [ ] , int b [ ] , int n , int m ) { int sum1 = 0 , sum2 = 0 , mul1 = 1 , mul2 = 1 ;"}
{"text":"Calculating sum and multiply of first array","code":"for ( int i = 0 ; i < n ; i ++ ) { sum1 += a [ i ] ; mul1 *= a [ i ] ; }"}
{"text":"Calculating sum and multiply of second array","code":"for ( int i = 0 ; i < m ; i ++ ) { sum2 += b [ i ] ; mul2 *= b [ i ] ; }"}
{"text":"If sum and mul of both arrays are equal , return true , else return false .","code":"return ( ( sum1 == sum2 ) && ( mul1 == mul2 ) ) ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 1 , 3 , 2 } ; int b [ ] = { 3 , 1 , 2 } ; int n = sizeof ( a ) \/ sizeof ( int ) ; int m = sizeof ( b ) \/ sizeof ( int ) ; if ( arePermutations ( a , b , n , m ) ) cout << \" Yes \" << endl ; else cout << \" No \" << endl ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the B start to C","code":"int Race ( int B , int C ) { int result = 0 ;"}
{"text":"When B completed it 's 100 meter  then Completed meters by C is","code":"result = ( ( C * 100 ) \/ B ) ; return 100 - result ; }"}
{"text":"Driver Code .","code":"int main ( ) { int B = 10 , C = 28 ;"}
{"text":"When A completed it 's 100 meter  Then completed meters of B and C is","code":"B = 100 - B ; C = 100 - C ; cout << Race ( B , C ) << \" \u2581 meters \" ; return 0 ; }"}
{"text":"C ++ implementation of above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the time","code":"float Time ( float arr [ ] , int n , int Emptypipe ) { float fill = 0 ; for ( int i = 0 ; i < n ; i ++ ) fill += 1 \/ arr [ i ] ; fill = fill - ( 1 \/ ( float ) Emptypipe ) ; return 1 \/ fill ; }"}
{"text":"Driver Code","code":"int main ( ) { float arr [ ] = { 12 , 14 } ; float Emptypipe = 30 ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << floor ( Time ( arr , n , Emptypipe ) ) << \" \u2581 Hours \" ; return 0 ; }"}
{"text":"CPP program to check if Decimal representation of an Octal number is divisible by 7 or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check Divisibility","code":"int check ( int n ) { int sum = 0 ;"}
{"text":"Sum of all individual digits","code":"while ( n != 0 ) { sum += n % 10 ; n = n \/ 10 ; }"}
{"text":"Condition","code":"if ( sum % 7 == 0 ) return 1 ; else return 0 ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Octal number","code":"int n = 25 ; ( check ( n ) == 1 ) ? cout << \" YES \" : cout << \" NO \" ; return 0 ; }"}
{"text":"CPP program to find sum of prime divisors of N","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  1000005"}
{"text":"Function to check if the number is prime or not .","code":"bool isPrime ( int n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return true ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return false ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return false ; return true ; }"}
{"text":"function to find sum of prime divisors of N","code":"int SumOfPrimeDivisors ( int n ) { int sum = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( n % i == 0 ) { if ( isPrime ( i ) ) sum += i ; } } return sum ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 60 ; cout << \" Sum \u2581 of \u2581 prime \u2581 divisors \u2581 of \u2581 60 \u2581 is \u2581 \" << SumOfPrimeDivisors ( n ) << endl ; }"}
{"text":"CPP program to find prime divisors of all numbers from 1 to n","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find prime divisors of all numbers from 1 to n","code":"int Sum ( int N ) { int SumOfPrimeDivisors [ N + 1 ] = { 0 } ; for ( int i = 2 ; i <= N ; ++ i ) {"}
{"text":"if the number is prime","code":"if ( ! SumOfPrimeDivisors [ i ] ) {"}
{"text":"add this prime to all it 's multiples","code":"for ( int j = i ; j <= N ; j += i ) { SumOfPrimeDivisors [ j ] += i ; } } } return SumOfPrimeDivisors [ N ] ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 60 ; cout << \" Sum \u2581 of \u2581 prime \u2581 divisors \u2581 of \u2581 60 \u2581 is \u2581 \" << Sum ( N ) << endl ; }"}
{"text":"C ++ program to find ( a ^ b ) % m for b very large .","code":"#include <bits\/stdc++.h> NEW_LINE #define ll  long long int NEW_LINE using namespace std ;"}
{"text":"Function to find power","code":"ll power ( ll x , ll y , ll p ) {"}
{"text":"Update x if it is more than or equal to p","code":"x = x % p ; while ( y > 0 ) {"}
{"text":"If y is odd , multiply x with the result","code":"if ( y & 1 ) res = ( res * x ) % p ;"}
{"text":"y must be even now y = y >> 1 ; y = y \/ 2","code":"x = ( x * x ) % p ; } return res ; }"}
{"text":"Driver Code","code":"int main ( ) { ll a = 3 ;"}
{"text":"String input as b is very large","code":"string b = \"100000000000000000000000000\" ; ll remainderB = 0 ; ll MOD = 1000000007 ;"}
{"text":"Reduce the number B to a small number using Fermat Little","code":"for ( int i = 0 ; i < b . length ( ) ; i ++ ) remainderB = ( remainderB * 10 + b [ i ] - '0' ) % ( MOD - 1 ) ; cout << power ( a , remainderB , MOD ) << endl ; return 0 ; }"}
{"text":"C ++ program to find square of these large numbers","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to find the square of 333. . .333 , 666. . .666 and 999. . .999","code":"string find_Square_369 ( string num ) { char a , b , c , d ;"}
{"text":"if the number is 333. . .333","code":"if ( num [ 0 ] == '3' ) a = '1' , b = '0' , c = '8' , d = '9' ;"}
{"text":"if the number is 666. . .666","code":"else if ( num [ 0 ] == '6' ) a = '4' , b = '3' , c = '5' , d = '6' ;"}
{"text":"if the number is 999. . .999","code":"else a = '9' , b = '8' , c = '0' , d = '1' ;"}
{"text":"variable for hold result","code":"string result = \" \" ;"}
{"text":"find the no of digit","code":"int size = num . size ( ) ;"}
{"text":"add size - 1 time a in result","code":"for ( int i = 1 ; i < num . size ( ) ; i ++ ) result += a ;"}
{"text":"add one time b in result","code":"result += b ;"}
{"text":"add size - 1 time c in result","code":"for ( int i = 1 ; i < num . size ( ) ; i ++ ) result += c ;"}
{"text":"add one time d in result","code":"result += d ;"}
{"text":"return result","code":"return result ; }"}
{"text":"Drivers code","code":"int main ( ) { string num_3 , num_6 , num_9 ; num_3 = \"3333\" ; num_6 = \"6666\" ; num_9 = \"9999\" ; string result = \" \" ;"}
{"text":"find square of 33. .33","code":"result = find_Square_369 ( num_3 ) ; cout << \" Square \u2581 of \u2581 \" << num_3 << \" \u2581 is \u2581 : \u2581 \" << result << endl ;"}
{"text":"find square of 66. .66","code":"result = find_Square_369 ( num_6 ) ; cout << \" Square \u2581 of \u2581 \" << num_6 << \" \u2581 is \u2581 : \u2581 \" << result << endl ;"}
{"text":"find square of 66. .66","code":"result = find_Square_369 ( num_9 ) ; cout << \" Square \u2581 of \u2581 \" << num_9 << \" \u2581 is \u2581 : \u2581 \" << result << endl ; return 0 ; }"}
{"text":"To run this code , we need to copy modular inverse from below post . https : www . geeksforgeeks . org \/ multiplicative - inverse - under - modulo - m \/","code":"int main ( ) {"}
{"text":"naive method - calculating the result in a single line","code":"long int naive_answer = ( ( long int ) ( 55555 * 55554 * 55553 * 55552 * 55551 ) \/ 120 ) % 1000000007 ; long int ans = 1 ;"}
{"text":"modular_inverse ( ) is a user defined function that calculates inverse of a number","code":"long int i = modular_inverse ( 120 , 10000007 ) ;"}
{"text":"it will use extended Eucledian algorithm or Fermats Little Theorem for calculation . MMI of 120 under division by 1000000007 will be 808333339","code":"for ( int i = 0 ; i < 5 ; i ++ ) ans = ( ans * ( 55555 - i ) ) % 1000000007 ; ans = ( ans * i ) % 1000000007 ; cout << \" Answer \u2581 using \u2581 naive \u2581 method : \u2581 \" << naive_answer << endl ; cout << \" Answer \u2581 using \u2581 multiplicative \" << \" \u2581 modular \u2581 inverse \u2581 concept : \u2581 \" << ans ; return 0 ; }"}
{"text":"C ++ code to find number of ways to multiply n elements with an associative operation","code":"# include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the required factorial","code":"int fact ( int n ) { if ( n == 0 n == 1 ) return 1 ; int ans = 1 ; for ( int i = 1 ; i <= n ; i ++ ) ans = ans * i ; return ans ; }"}
{"text":"Function to find nCr","code":"int nCr ( int n , int r ) { int Nr = n , Dr = 1 , ans = 1 ; for ( int i = 1 ; i <= r ; i ++ ) { ans = ( ans * Nr ) \/ ( Dr ) ; Nr -- ; Dr ++ ; } return ans ; }"}
{"text":"function to find the number of ways","code":"int solve ( int n ) { int N = 2 * n - 2 ; int R = n - 1 ; return nCr ( N , R ) * fact ( n - 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 6 ; cout << solve ( n ) ; return 0 ; }"}
{"text":"C ++ program to find Pythagorean Triplet of given sum .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void pythagoreanTriplet ( int n ) {"}
{"text":"Considering triplets in sorted order . The value of first element in sorted triplet can be at - most n \/ 3.","code":"for ( int i = 1 ; i <= n \/ 3 ; i ++ ) {"}
{"text":"The value of second element must be less than equal to n \/ 2","code":"for ( int j = i + 1 ; j <= n \/ 2 ; j ++ ) { int k = n - i - j ; if ( i * i + j * j == k * k ) { cout << i << \" , \u2581 \" << j << \" , \u2581 \" << k ; return ; } } } cout << \" No \u2581 Triplet \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 12 ; pythagoreanTriplet ( n ) ; return 0 ; }"}
{"text":"CPP program to print terms of binomial series and also calculate sum of series .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to calculate factorial of a number","code":"int factorial ( int n ) { int f = 1 ; for ( int i = 2 ; i <= n ; i ++ ) f *= i ; return f ; }"}
{"text":"function to print the series","code":"void series ( int A , int X , int n ) {"}
{"text":"calculating the value of n !","code":"int nFact = factorial ( n ) ;"}
{"text":"loop to display the series","code":"for ( int i = 0 ; i < n + 1 ; i ++ ) {"}
{"text":"For calculating the value of nCr","code":"int niFact = factorial ( n - i ) ; int iFact = factorial ( i ) ;"}
{"text":"calculating the value of A to the power k and X to the power k","code":"int aPow = pow ( A , n - i ) ; int xPow = pow ( X , i ) ;"}
{"text":"display the series","code":"cout << ( nFact * aPow * xPow ) \/ ( niFact * iFact ) << \" \u2581 \" ; } }"}
{"text":"main function started","code":"int main ( ) { int A = 3 , X = 4 , n = 5 ; series ( A , X , n ) ; return 0 ; }"}
{"text":"CPP program to find sum of series with alternate signed square AP sums .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to calculate series sum","code":"int seiresSum ( int n , int a [ ] ) { int res = 0 ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i % 2 == 0 ) res += a [ i ] * a [ i ] ; else res -= a [ i ] * a [ i ] ; } return res ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 2 ; int a [ ] = { 1 , 2 , 3 , 4 } ; cout << seiresSum ( n , a ) ; return 0 ; }"}
{"text":"C ++ program to find power of a prime number r in n !","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return power of a no . ' r ' in factorial of n","code":"int power ( int n , int r ) {"}
{"text":"Keep dividing n by powers of ' r ' and update count","code":"int count = 0 ; for ( int i = r ; ( n \/ i ) >= 1 ; i = i * r ) count += n \/ i ; return count ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int n = 6 , r = 3 ; printf ( \" \u2581 % d \u2581 \" , power ( n , r ) ) ; return 0 ; }"}
{"text":"A C ++ program to find average of sum of first n odd natural numbers .","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Returns the Avg of first n odd numbers","code":"int avg_of_odd_num ( int n ) {"}
{"text":"sum of first n odd number","code":"int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum += ( 2 * i + 1 ) ;"}
{"text":"Average of first n odd numbers","code":"return sum \/ n ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 20 ; cout << avg_of_odd_num ( n ) ; return 0 ; }"}
{"text":"CPP Program to find the average of sum of first n odd numbers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return the average of sum of first n odd numbers","code":"int avg_of_odd_num ( int n ) { return n ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 8 ; cout << avg_of_odd_num ( n ) ; return 0 ; }"}
{"text":"C ++ Implementation for Fibonacci triangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to fill Fibonacci Numbers in f [ ]","code":"void fib ( int f [ ] , int N ) {"}
{"text":"1 st and 2 nd number of the series are 1 and 1","code":"f [ 1 ] = 1 ; f [ 2 ] = 1 ; for ( int i = 3 ; i <= N ; i ++ )"}
{"text":"Add the previous 2 numbers in the series and store it","code":"f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; } void fiboTriangle ( int n ) {"}
{"text":"Fill Fibonacci numbers in f [ ] using fib ( ) . We need N = n * ( n + 1 ) \/ 2 Fibonacci numbers to make a triangle of height n","code":"int N = n * ( n + 1 ) \/ 2 ; int f [ N + 1 ] ; fib ( f , N ) ;"}
{"text":"To store next Fibonacci Number to print","code":"int fiboNum = 1 ;"}
{"text":"for loop to keep track of number of lines","code":"for ( int i = 1 ; i <= n ; i ++ ) {"}
{"text":"For loop to keep track of numbers in each line","code":"for ( int j = 1 ; j <= i ; j ++ ) cout << f [ fiboNum ++ ] << \" \u2581 \" ; cout << endl ; } }"}
{"text":"Driver code","code":"int main ( ) { int n = 5 ; fiboTriangle ( n ) ; return 0 ; }"}
{"text":"Program to find average of odd numbers till a given odd number .","code":"#include <stdio.h>"}
{"text":"Function to calculate the average of odd numbers","code":"int averageOdd ( int n ) { if ( n % 2 == 0 ) { printf ( \" Invalid \u2581 Input \" ) ; return -1 ; } int sum = 0 , count = 0 ; while ( n >= 1 ) {"}
{"text":"count odd numbers","code":"count ++ ;"}
{"text":"store the sum of odd numbers","code":"sum += n ; n = n - 2 ; } return sum \/ count ; }"}
{"text":"driver function","code":"int main ( ) { int n = 15 ; printf ( \" % d \" , averageOdd ( n ) ) ; return 0 ; }"}
{"text":"CPP program to find max between two Rational numbers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; struct Rational { int nume , deno ; } ;"}
{"text":"Get lcm of two number 's","code":"int lcm ( int a , int b ) { return ( a * b ) \/ ( __gcd ( a , b ) ) ; }"}
{"text":"Get max rational number","code":"Rational maxRational ( Rational first , Rational sec ) {"}
{"text":"Find the LCM of first -> denominator and sec -> denominator","code":"int k = lcm ( first . deno , sec . deno ) ;"}
{"text":"Declare nume1 and nume2 for get the value of first numerator and second numerator","code":"int nume1 = first . nume ; int nume2 = sec . nume ; nume1 *= k \/ ( first . deno ) ; nume2 *= k \/ ( sec . deno ) ; return ( nume2 < nume1 ) ? first : sec ; }"}
{"text":"Driver Code","code":"int main ( ) { Rational first = { 3 , 2 } ; Rational sec = { 3 , 4 } ; Rational res = maxRational ( first , sec ) ; cout << res . nume << \" \/ \" << res . deno ; return 0 ; }"}
{"text":"CPP Program to print trinomial triangle .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the trinomial triangle value .","code":"int TrinomialValue ( int n , int k ) {"}
{"text":"base case","code":"if ( n == 0 && k == 0 ) return 1 ;"}
{"text":"base case","code":"if ( k < - n k > n ) return 0 ;"}
{"text":"recursive step .","code":"return TrinomialValue ( n - 1 , k - 1 ) + TrinomialValue ( n - 1 , k ) + TrinomialValue ( n - 1 , k + 1 ) ; }"}
{"text":"Function to print Trinomial Triangle of height n .","code":"void printTrinomial ( int n ) {"}
{"text":"printing n rows .","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"printing first half of triangle","code":"for ( int j = - i ; j <= 0 ; j ++ ) cout << TrinomialValue ( i , j ) << \" \u2581 \" ;"}
{"text":"printing second half of triangle .","code":"for ( int j = 1 ; j <= i ; j ++ ) cout << TrinomialValue ( i , j ) << \" \u2581 \" ; cout << endl ; } }"}
{"text":"Driven Program","code":"int main ( ) { int n = 4 ; printTrinomial ( n ) ; return 0 ; }"}
{"text":"C ++ implementation to find sum of largest prime factor of each number less than equal to n","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find sum of largest prime factor of each number less than equal to n","code":"int sumOfLargePrimeFactor ( int n ) {"}
{"text":"Create an integer array \" prime [ 0 . . n ] \" and initialize all entries of it as 0. A value in prime [ i ] will finally be 0 if ' i ' is a prime , else it will contain the largest prime factor of ' i ' .","code":"int prime [ n + 1 ] , sum = 0 ; memset ( prime , 0 , sizeof ( prime ) ) ; int max = n \/ 2 ; for ( int p = 2 ; p <= max ; p ++ ) {"}
{"text":"If prime [ p ] is '0' , then it is a prime number","code":"if ( prime [ p ] == 0 ) {"}
{"text":"Update all multiples of p","code":"for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = p ; } }"}
{"text":"Sum up the largest prime factor of all the numbers","code":"for ( int p = 2 ; p <= n ; p ++ ) {"}
{"text":"if ' p ' is a non - prime number then prime [ p ] gives its largesr prime factor","code":"if ( prime [ p ] ) sum += prime [ p ] ;"}
{"text":"' p ' is a prime number","code":"else sum += p ; }"}
{"text":"required sum","code":"return sum ; }"}
{"text":"Driver program to test above","code":"int main ( ) { int n = 12 ; cout << \" Sum \u2581 = \u2581 \" << sumOfLargePrimeFactor ( n ) ; return 0 ; }"}
{"text":"C ++ program to find sum of multiples of a number up to N efficiently","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function for calculating sum of multiples of a upto N","code":"int calculate_sum ( int a , int N ) {"}
{"text":"Number of multiples","code":"int m = N \/ a ;"}
{"text":"sum of first m natural numbers","code":"int sum = m * ( m + 1 ) \/ 2 ;"}
{"text":"sum of multiples","code":"int ans = a * sum ; return ans ; }"}
{"text":"Driver code","code":"int main ( ) { int a = 7 , N = 49 ; cout << \" Sum \u2581 of \u2581 multiples \u2581 of \u2581 \" << a << \" \u2581 up \u2581 to \u2581 \" << N << \" \u2581 = \u2581 \" << calculate_sum ( a , N ) << endl ; return 0 ; }"}
{"text":"C ++ program to find whether a number is power of 2 or not","code":"#include <bits\/stdc++.h> NEW_LINE #include <boost\/multiprecision\/cpp_int.hpp> NEW_LINE using namespace std ; using namespace boost :: multiprecision ;"}
{"text":"Function to check whether a number is power of 2 or not","code":"bool ispowerof2 ( cpp_int num ) { if ( ( num & ( num - 1 ) ) == 0 ) return 1 ; return 0 ; }"}
{"text":"Driver function","code":"int main ( ) { cpp_int num = 549755813888 ; cout << ispowerof2 ( num ) << endl ; return 0 ; }"}
{"text":"A simple C ++ program to count divisors in array multiplication .","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"To count number of factors in a number","code":"int counDivisors ( int X ) {"}
{"text":"Initialize count with 0","code":"int count = 0 ;"}
{"text":"Increment count for every factor of the given number X .","code":"for ( int i = 1 ; i <= X ; ++ i ) { if ( X % i == 0 ) { count ++ ; } }"}
{"text":"Return number of factors","code":"return count ; }"}
{"text":"Returns number of divisors in array multiplication","code":"int countDivisorsMult ( int arr [ ] , int n ) {"}
{"text":"Multipliying all elements of the given array .","code":"int mul = 1 ; for ( int i = 0 ; i < n ; ++ i ) mul *= arr [ i ] ;"}
{"text":"Calling function which count number of factors of the number","code":"return counDivisors ( mul ) ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << countDivisorsMult ( arr , n ) << endl ; return 0 ; }"}
{"text":"C ++ program to count divisors in array multiplication .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void SieveOfEratosthenes ( int largest , vector < int > & prime ) {"}
{"text":"Create a boolean array \" isPrime [ 0 . . n ] \" and initialize all entries it as true . A value in isPrime [ i ] will finally be false if i is Not a isPrime , else true .","code":"bool isPrime [ largest + 1 ] ; memset ( isPrime , true , sizeof ( isPrime ) ) ; for ( int p = 2 ; p * p <= largest ; p ++ ) {"}
{"text":"If isPrime [ p ] is not changed , then it is a isPrime","code":"if ( isPrime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( int i = p * 2 ; i <= largest ; i += p ) isPrime [ i ] = false ; } }"}
{"text":"Print all isPrime numbers","code":"for ( int p = 2 ; p <= largest ; p ++ ) if ( isPrime [ p ] ) prime . push_back ( p ) ; }"}
{"text":"Returns number of divisors in array multiplication","code":"int countDivisorsMult ( int arr [ ] , int n ) {"}
{"text":"Find all prime numbers smaller than the largest element .","code":"int largest = * max_element ( arr , arr + n ) ; vector < int > prime ; SieveOfEratosthenes ( largest , prime ) ;"}
{"text":"Find counts of occurrences of each prime factor","code":"unordered_map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < prime . size ( ) ; j ++ ) { while ( arr [ i ] > 1 && arr [ i ] % prime [ j ] == 0 ) { arr [ i ] \/= prime [ j ] ; mp [ prime [ j ] ] ++ ; } } if ( arr [ i ] != 1 ) mp [ arr [ i ] ] ++ ; }"}
{"text":"Compute count of all divisors using counts prime factors .","code":"long long int res = 1 ; for ( auto it : mp ) res *= ( it . second + 1L ) ; return res ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << countDivisorsMult ( arr , n ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to generate prime numbers in the given range [ L , R ]","code":"void findPrimeNos ( int L , int R , unordered_map < int , int > & M ) {"}
{"text":"Store all value in the range","code":"for ( int i = L ; i <= R ; i ++ ) { M [ i ] ++ ; }"}
{"text":"Erase 1 as its non - prime","code":"if ( M . find ( 1 ) != M . end ( ) ) { M . erase ( 1 ) ; }"}
{"text":"Perform Sieve of Eratosthenes","code":"for ( int i = 2 ; i <= sqrt ( R ) ; i ++ ) { int multiple = 2 ; while ( ( i * multiple ) <= R ) {"}
{"text":"Find current multiple","code":"if ( M . find ( i * multiple ) != M . end ( ) ) {"}
{"text":"Erase as it is a non - prime","code":"M . erase ( i * multiple ) ; }"}
{"text":"Increment multiple","code":"multiple ++ ; } } }"}
{"text":"Function to print all the prime pairs in the given range that differs by K","code":"void getPrimePairs ( int L , int R , int K ) { unordered_map < int , int > M ;"}
{"text":"Generate all prime number","code":"findPrimeNos ( L , R , M ) ;"}
{"text":"Traverse the Map M","code":"for ( auto & it : M ) {"}
{"text":"If it . first & ( it . first + K ) is prime then print this pair","code":"if ( M . find ( it . first + K ) != M . end ( ) ) { cout << \" ( \" << it . first << \" , \u2581 \" << it . first + K << \" ) \u2581 \" ; } } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given range","code":"int L = 1 , R = 19 ;"}
{"text":"Given K","code":"int K = 6 ;"}
{"text":"Function Call","code":"getPrimePairs ( L , R , K ) ; return 0 ; }"}
{"text":"C ++ implementation for above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the Nth Enneacontahexagon Number","code":"int EnneacontahexagonNum ( int n ) { return ( 94 * n * n - 92 * n ) \/ 2 ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; cout << EnneacontahexagonNum ( n ) ; return 0 ; }"}
{"text":"C ++ code to Find two Composite Numbers such that there difference is N","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the two composite numbers","code":"void find_composite_nos ( int n ) { cout << 9 * n << \" \u2581 \" << 8 * n ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 4 ; find_composite_nos ( n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find number of unordered pairs","code":"int freqPairs ( int arr [ ] , int n ) {"}
{"text":"Maximum element from the array","code":"int max = * ( std :: max_element ( arr , arr + n ) ) ;"}
{"text":"Array to store the frequency of each element","code":"int freq [ max + 1 ] = { 0 } ;"}
{"text":"Stores the number of unordered pairs","code":"int count = 0 ;"}
{"text":"Store the frequency of each element","code":"for ( int i = 0 ; i < n ; i ++ ) freq [ arr [ i ] ] ++ ;"}
{"text":"Find the number of unordered pairs","code":"for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 2 * arr [ i ] ; j <= max ; j += arr [ i ] ) {"}
{"text":"If the number j divisible by ith element is present in the array","code":"if ( freq [ j ] >= 1 ) count += freq [ j ] ; }"}
{"text":"If the ith element of the array has frequency more than one","code":"if ( freq [ arr [ i ] ] > 1 ) { count += freq [ arr [ i ] ] - 1 ; freq [ arr [ i ] ] -- ; } } return count ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 3 , 2 , 4 , 2 , 6 } ; int n = ( sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ) ; cout << freqPairs ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to find Nth term of the series : 1 + 2 + 6 + 15 + 31 + 56 + ...","code":"#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"calculate Nth term of given series","code":"int Nth_Term ( int n ) { return ( 2 * pow ( n , 3 ) - 3 * pow ( n , 2 ) + n + 6 ) \/ 6 ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 8 ; cout << Nth_Term ( N ) ; }"}
{"text":"C ++ program to find n - th number in a series made of digits 3 and 5","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find n - th number in series made of 3 and 5","code":"int printNthElement ( int n ) {"}
{"text":"create an array of size ( n + 1 )","code":"int arr [ n + 1 ] ; arr [ 1 ] = 3 ; arr [ 2 ] = 5 ; for ( int i = 3 ; i <= n ; i ++ ) {"}
{"text":"If i is odd","code":"if ( i % 2 != 0 ) arr [ i ] = arr [ i \/ 2 ] * 10 + 3 ; else arr [ i ] = arr [ ( i \/ 2 ) - 1 ] * 10 + 5 ; } return arr [ n ] ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 6 ; cout << printNthElement ( n ) ; return 0 ; }"}
{"text":"CPP program to find N - th term of the series : 3 , 6 , 18 , 24 , 45 , 54. . .","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function to calculate Nth term of series","code":"int nthTerm ( int N ) {"}
{"text":"By using above formula","code":"return ( N * ( ( N \/ 2 ) + ( ( N % 2 ) * 2 ) + N ) ) ; }"}
{"text":"Driver Function","code":"int main ( ) {"}
{"text":"get the value of N","code":"int N = 5 ;"}
{"text":"Calculate and print the Nth term","code":"cout << \" Nth \u2581 term \u2581 for \u2581 N \u2581 = \u2581 \" << N << \" \u2581 : \u2581 \" << nthTerm ( N ) ; return 0 ; }"}
{"text":"CPP program to print terms of binomial series and also calculate sum of series .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to print the series","code":"void series ( int A , int X , int n ) {"}
{"text":"Calculating and printing first term","code":"int term = pow ( A , n ) ; cout << term << \" \u2581 \" ;"}
{"text":"Computing and printing remaining terms","code":"for ( int i = 1 ; i <= n ; i ++ ) {"}
{"text":"Find current term using previous terms We increment power of X by 1 , decrement power of A by 1 and compute nCi using previous term by multiplying previous term with ( n - i + 1 ) \/ i","code":"term = term * X * ( n - i + 1 ) \/ ( i * A ) ; cout << term << \" \u2581 \" ; } }"}
{"text":"main function started","code":"int main ( ) { int A = 3 , X = 4 , n = 5 ; series ( A , X , n ) ; return 0 ; }"}
{"text":"C ++ program to check whether the number is divisible by 8 or not using bitwise operator","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check number is div by 8 or not using bitwise operator","code":"int Div_by_8 ( int n ) { return ( ( ( n >> 3 ) << 3 ) == n ) ; }"}
{"text":"Driver program","code":"int main ( ) { int n = 16 ; if ( Div_by_8 ( n ) ) cout << \" YES \" << endl ; else cout << \" NO \" << endl ; return 0 ; }"}
{"text":"Program to find average of even numbers till a given even number .","code":"#include <stdio.h>"}
{"text":"Function to calculate the average of even numbers","code":"int averageEven ( int n ) { if ( n % 2 != 0 ) { printf ( \" Invalid \u2581 Input \" ) ; return -1 ; } int sum = 0 , count = 0 ; while ( n >= 2 ) {"}
{"text":"count even numbers","code":"count ++ ;"}
{"text":"store the sum of even numbers","code":"sum += n ; n = n - 2 ; } return sum \/ count ; }"}
{"text":"driver function","code":"int main ( ) { int n = 16 ; printf ( \" % d \" , averageEven ( n ) ) ; return 0 ; }"}
{"text":"Program to find average of even numbers till a given even nend umber .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the average of even numbers","code":"int averageEven ( int n ) { if ( n % 2 != 0 ) { cout << \" Invalid \u2581 Input \" ; return -1 ; } return ( n + 2 ) \/ 2 ; }"}
{"text":"driver function","code":"int main ( ) { int n = 16 ; cout << averageEven ( n ) << endl ; return 0 ; }"}
{"text":"CPP program to find the Largest Coprime Divisor","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive function to return gcd of a and b","code":"int gcd ( int a , int b ) {"}
{"text":"Everything divides 0","code":"if ( a == 0 b == 0 ) return 0 ;"}
{"text":"base case","code":"if ( a == b ) return a ;"}
{"text":"a is greater","code":"if ( a > b ) return gcd ( a - b , b ) ; return gcd ( a , b - a ) ; }"}
{"text":"function to find largest coprime divisor","code":"int cpFact ( int x , int y ) { while ( gcd ( x , y ) != 1 ) { x = x \/ gcd ( x , y ) ; } return x ; }"}
{"text":"divisor code","code":"int main ( ) { int x = 15 ; int y = 3 ; cout << cpFact ( x , y ) << endl ; x = 14 ; y = 28 ; cout << cpFact ( x , y ) << endl ; x = 7 ; y = 3 ; cout << cpFact ( x , y ) ; return 0 ; }"}
{"text":"Simple CPP program to count numbers with last digit as k in given range .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns count of numbers with k as last digit .","code":"int counLastDigitK ( int low , int high , int k ) { int count = 0 ; for ( int i = low ; i <= high ; i ++ ) if ( i % 10 == k ) count ++ ; return count ; }"}
{"text":"Driver Program","code":"int main ( ) { int low = 3 , high = 35 , k = 3 ; cout << counLastDigitK ( low , high , k ) ; return 0 ; }"}
{"text":"C ++ implementation to print first N Taxicab ( 2 ) numbers :","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void printTaxicab2 ( int N ) {"}
{"text":"Starting from 1 , check every number if it is Taxicab until count reaches N .","code":"int i = 1 , count = 0 ; while ( count < N ) { int int_count = 0 ;"}
{"text":"Try all possible pairs ( j , k ) whose cube sums can be i .","code":"for ( int j = 1 ; j <= pow ( i , 1.0 \/ 3 ) ; j ++ ) for ( int k = j + 1 ; k <= pow ( i , 1.0 \/ 3 ) ; k ++ ) if ( j * j * j + k * k * k == i ) int_count ++ ;"}
{"text":"Taxicab ( 2 ) found","code":"if ( int_count == 2 ) { count ++ ; cout << count << \" \u2581 \" << i << endl ; } i ++ ; } }"}
{"text":"Driver code","code":"int main ( ) { int N = 5 ; printTaxicab2 ( N ) ; return 0 ; }"}
{"text":"A optimized school method based C ++ program to check if a number is composite .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isComposite ( int n ) {"}
{"text":"Corner cases","code":"if ( n <= 1 ) return false ; if ( n <= 3 ) return false ;"}
{"text":"This is checked so that we can skip middle five numbers in below loop","code":"if ( n % 2 == 0 n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; return false ; }"}
{"text":"Driver Program to test above function","code":"int main ( ) { isComposite ( 11 ) ? cout << \" \u2581 true STRNEWLINE \" : cout << \" \u2581 false STRNEWLINE \" ; isComposite ( 15 ) ? cout << \" \u2581 true STRNEWLINE \" : cout << \" \u2581 false STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program to find minimum number to insert in array so their sum is prime","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check if a number is prime or not","code":"bool isPrime ( int n ) {"}
{"text":"Corner case","code":"if ( n <= 1 ) return false ;"}
{"text":"Check from 2 to n - 1","code":"for ( int i = 2 ; i < n ; i ++ ) if ( n % i == 0 ) return false ; return true ; }"}
{"text":"Find prime number greater than a number","code":"int findPrime ( int n ) { int num = n + 1 ;"}
{"text":"find prime greater than n","code":"while ( num ) {"}
{"text":"check if num is prime","code":"if ( isPrime ( num ) ) return num ;"}
{"text":"increment num","code":"num = num + 1 ; } return 0 ; }"}
{"text":"To find number to be added so sum of array is prime","code":"int minNumber ( int arr [ ] , int n ) { int sum = 0 ;"}
{"text":"To find sum of array elements","code":"for ( int i = 0 ; i < n ; i ++ ) sum += arr [ i ] ;"}
{"text":"if sum is already prime return 0","code":"if ( isPrime ( sum ) ) return 0 ;"}
{"text":"To find prime number greater than sum","code":"int num = findPrime ( sum ) ;"}
{"text":"Return difference of sum and num","code":"return num - sum ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 4 , 6 , 8 , 12 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << minNumber ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program to find sum of proper divisor of factorial of a number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to calculate factorial","code":"int fact ( int n ) { if ( n == 0 ) return 1 ; return n * fact ( n - 1 ) ; }"}
{"text":"function to calculate sum of divisor","code":"int div ( int x ) { int ans = 0 ; for ( int i = 1 ; i <= x ; i ++ ) if ( x % i == 0 ) ans += i ; return ans ; }"}
{"text":"Returns sum of divisors of n !","code":"int sumFactDiv ( int n ) { return div ( fact ( n ) ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 4 ; cout << sumFactDiv ( n ) ; }"}
{"text":"C ++ program to find sum of divisors in n !","code":"#include <bits\/stdc++.h> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"allPrimes [ ] stores all prime numbers less than or equal to n .","code":"vector < int > allPrimes ;"}
{"text":"Fills above vector allPrimes [ ] for a given n","code":"void sieve ( int n ) {"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is not a prime , else true .","code":"vector < bool > prime ( n + 1 , true ) ;"}
{"text":"Loop to update prime [ ]","code":"for ( int p = 2 ; p * p <= n ; p ++ ) {"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == true ) {"}
{"text":"Update all multiples of p","code":"for ( int i = p * 2 ; i <= n ; i += p ) prime [ i ] = false ; } }"}
{"text":"Store primes in the vector allPrimes","code":"for ( int p = 2 ; p <= n ; p ++ ) if ( prime [ p ] ) allPrimes . push_back ( p ) ; }"}
{"text":"Function to find all result of factorial number","code":"int factorialDivisors ( int n ) {"}
{"text":"Initialize result","code":"int result = 1 ;"}
{"text":"find exponents of all primes which divides n and less than n","code":"for ( int i = 0 ; i < allPrimes . size ( ) ; i ++ ) {"}
{"text":"Current divisor","code":"int p = allPrimes [ i ] ;"}
{"text":"Find the highest power ( stored in exp ) ' \u2581 \u2581 of \u2581 allPrimes [ i ] \u2581 that \u2581 divides \u2581 n \u2581 using \u2581 \u2581 Legendre ' s formula .","code":"int exp = 0 ; while ( p <= n ) { exp = exp + ( n \/ p ) ; p = p * allPrimes [ i ] ; }"}
{"text":"Using the divisor function to calculate the sum","code":"result = result * ( pow ( allPrimes [ i ] , exp + 1 ) - 1 ) \/ ( allPrimes [ i ] - 1 ) ; }"}
{"text":"return total divisors","code":"return result ; }"}
{"text":"Driver program to run the cases","code":"int main ( ) { cout << factorialDivisors ( 4 ) ; return 0 ; }"}
{"text":"C ++ program to check if a number is pandigital in given base .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return true if n is pandigit else return false .","code":"bool checkPandigital ( int b , char n [ ] ) {"}
{"text":"Checking length is less than base","code":"if ( strlen ( n ) < b ) return false ; bool hash [ b ] ; memset ( hash , false , sizeof ( hash ) ) ;"}
{"text":"Traversing each digit of the number .","code":"for ( int i = 0 ; i < strlen ( n ) ; i ++ ) {"}
{"text":"If digit is integer","code":"if ( n [ i ] >= '0' && n [ i ] <= '9' ) hash [ n [ i ] - '0' ] = true ;"}
{"text":"If digit is alphabet","code":"else if ( n [ i ] - ' A ' <= b - 11 ) hash [ n [ i ] - ' A ' + 10 ] = true ; }"}
{"text":"Checking hash array , if any index is unmarked .","code":"for ( int i = 0 ; i < b ; i ++ ) if ( hash [ i ] == false ) return false ; return true ; }"}
{"text":"Driver Program","code":"int main ( ) { int b = 13 ; char n [ ] = \"1298450376ABC \" ; ( checkPandigital ( b , n ) ) ? ( cout << \" Yes \" << endl ) : ( cout << \" No \" << endl ) ; return 0 ; }"}
{"text":"C ++ implementation to convert a number m to n using minimum number of given operations","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum number of given operations to convert m to n","code":"int convert ( int m , int n ) { if ( m == n ) return 0 ;"}
{"text":"only way is to do - 1 ( m - n ) times","code":"if ( m > n ) return m - n ;"}
{"text":"not possible","code":"if ( m <= 0 && n > 0 ) return -1 ;"}
{"text":"n is greater and n is odd","code":"if ( n % 2 == 1 )"}
{"text":"perform ' - 1' on m ( or + 1 on n )","code":"return 1 + convert ( m , n + 1 ) ;"}
{"text":"n is even","code":"else"}
{"text":"perform ' * 2' on m ( or n \/ 2 on n )","code":"return 1 + convert ( m , n \/ 2 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int m = 3 , n = 11 ; cout << \" Minimum \u2581 number \u2581 of \u2581 operations \u2581 : \u2581 \" << convert ( m , n ) ; return 0 ; }"}
{"text":"C ++ program to find Seed of a number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 10000 ; int prodDig [ MAX ] ;"}
{"text":"Stores product of digits of x in prodDig [ x ]","code":"int getDigitProduct ( int x ) {"}
{"text":"If x has single digit","code":"if ( x < 10 ) return x ;"}
{"text":"If digit product is already computed","code":"if ( prodDig [ x ] != 0 ) return prodDig [ x ] ;"}
{"text":"If digit product is not computed before .","code":"int prod = ( x % 10 ) * getDigitProduct ( x \/ 10 ) ; return ( prodDig [ x ] = prod ) ; }"}
{"text":"Prints all seeds of n","code":"void findSeed ( int n ) {"}
{"text":"Find all seeds using prodDig [ ]","code":"vector < int > res ; for ( int i = 1 ; i <= n \/ 2 ; i ++ ) if ( i * getDigitProduct ( i ) == n ) res . push_back ( i ) ;"}
{"text":"If there was no seed","code":"if ( res . size ( ) == 0 ) { cout << \" NO \u2581 seed \u2581 exists STRNEWLINE \" ; return ; }"}
{"text":"Print seeds","code":"for ( int i = 0 ; i < res . size ( ) ; i ++ ) cout << res [ i ] << \" \u2581 \" ; }"}
{"text":"Driver code","code":"int main ( ) { long long int n = 138 ; findSeed ( n ) ; return 0 ; }"}
{"text":"C ++ program to find integer having maximum number of prime factor in first N natural numbers .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Return smallest number having maximum prime factors .","code":"int maxPrimefactorNum ( int N ) { int arr [ N + 5 ] ; memset ( arr , 0 , sizeof ( arr ) ) ;"}
{"text":"Sieve of eratosthenes method to count number of prime factors .","code":"for ( int i = 2 ; i * i <= N ; i ++ ) { if ( ! arr [ i ] ) for ( int j = 2 * i ; j <= N ; j += i ) arr [ j ] ++ ; arr [ i ] = 1 ; } int maxval = 0 , maxint = 1 ;"}
{"text":"Finding number having maximum number of prime factor .","code":"for ( int i = 1 ; i <= N ; i ++ ) { if ( arr [ i ] > maxval ) { maxval = arr [ i ] ; maxint = i ; } } return maxint ; }"}
{"text":"Driven Program","code":"int main ( ) { int N = 40 ; cout << maxPrimefactorNum ( N ) << endl ; return 0 ; }"}
{"text":"Efficient C ++ program to compute sum of subarray elements","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function compute sum all sub - array","code":"long int SubArraySum ( int arr [ ] , int n ) { long int result = 0 ;"}
{"text":"computing sum of subarray using formula","code":"for ( int i = 0 ; i < n ; i ++ ) result += ( arr [ i ] * ( i + 1 ) * ( n - i ) ) ;"}
{"text":"return all subarray sum","code":"return result ; }"}
{"text":"driver program to test above function","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" Sum \u2581 of \u2581 SubArray \u2581 : \u2581 \" << SubArraySum ( arr , n ) << endl ; return 0 ; }"}
{"text":"C ++ program to find highest power of 2 smaller than or equal to n .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int highestPowerof2 ( int n ) { int res = 0 ; for ( int i = n ; i >= 1 ; i -- ) {"}
{"text":"If i is a power of 2","code":"if ( ( i & ( i - 1 ) ) == 0 ) { res = i ; break ; } } return res ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 10 ; cout << highestPowerof2 ( n ) ; return 0 ; }"}
{"text":"C ++ program to find pairs that can represent the given number as sum of two cubes","code":"#include <iostream> NEW_LINE #include <cmath> NEW_LINE using namespace std ;"}
{"text":"Function to find pairs that can represent the given number as sum of two cubes","code":"void findPairs ( int n ) {"}
{"text":"find cube root of n","code":"int cubeRoot = pow ( n , 1.0 \/ 3.0 ) ;"}
{"text":"create a array of size of size ' cubeRoot '","code":"int cube [ cubeRoot + 1 ] ;"}
{"text":"for index i , cube [ i ] will contain i ^ 3","code":"for ( int i = 1 ; i <= cubeRoot ; i ++ ) cube [ i ] = i * i * i ;"}
{"text":"Find all pairs in above sorted array cube [ ] whose sum is equal to n","code":"int l = 1 ; int r = cubeRoot ; while ( l < r ) { if ( cube [ l ] + cube [ r ] < n ) l ++ ; else if ( cube [ l ] + cube [ r ] > n ) r -- ; else { cout << \" ( \" << l << \" , \u2581 \" << r << \" ) \" << endl ; l ++ ; r -- ; } } }"}
{"text":"Driver function","code":"int main ( ) { int n = 20683 ; findPairs ( n ) ; return 0 ; }"}
{"text":"C ++ program to find pairs that can represent the given number as sum of two cubes","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find pairs that can represent the given number as sum of two cubes","code":"void findPairs ( int n ) {"}
{"text":"find cube root of n","code":"int cubeRoot = pow ( n , 1.0 \/ 3.0 ) ;"}
{"text":"create an empty map","code":"unordered_map < int , pair < int , int > > s ;"}
{"text":"Consider all pairs such with values less than cuberoot","code":"for ( int x = 1 ; x < cubeRoot ; x ++ ) { for ( int y = x + 1 ; y <= cubeRoot ; y ++ ) {"}
{"text":"find sum of current pair ( x , y )","code":"int sum = x * x * x + y * y * y ;"}
{"text":"do nothing if sum is not equal to given number","code":"if ( sum != n ) continue ;"}
{"text":"if sum is seen before , we found two pairs","code":"if ( s . find ( sum ) != s . end ( ) ) { cout << \" ( \" << s [ sum ] . first << \" , \u2581 \" << s [ sum ] . second << \" ) \u2581 and \u2581 ( \" << x << \" , \u2581 \" << y << \" ) \" << endl ; } else"}
{"text":"if sum is seen for the first time","code":"s [ sum ] = make_pair ( x , y ) ; } } }"}
{"text":"Driver function","code":"int main ( ) { int n = 13832 ; findPairs ( n ) ; return 0 ; }"}
{"text":"C ++ program to find the minimum difference between any two terms of two tables","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to find GCD of a and b","code":"int gcd ( int a , int b ) { while ( b != 0 ) { int t = b ; b = a % b ; a = t ; } return a ; }"}
{"text":"Returns minimum difference between any two terms of shifted tables of ' a ' and ' b ' . ' x ' is shift in table of ' a ' and ' y ' is shift in table of ' b ' .","code":"int findMinDiff ( int a , int b , int x , int y ) {"}
{"text":"Calculate gcd of a nd b","code":"int g = gcd ( a , b ) ;"}
{"text":"Calculate difference between x and y","code":"int diff = abs ( x - y ) % g ; return min ( diff , g - diff ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int a = 20 , b = 52 , x = 5 , y = 7 ; cout << findMinDiff ( a , b , x , y ) << endl ; return 0 ; }"}
{"text":"A O ( sqrt ( n ) ) program that prints all divisors in sorted order","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to print the divisors","code":"void printDivisors ( int n ) {"}
{"text":"Vector to store half of the divisors","code":"vector < int > v ; for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) {"}
{"text":"check if divisors are equal","code":"if ( n \/ i == i ) printf ( \" % d \u2581 \" , i ) ; else { printf ( \" % d \u2581 \" , i ) ;"}
{"text":"push the second divisor in the vector","code":"v . push_back ( n \/ i ) ; } } }"}
{"text":"The vector will be printed in reverse","code":"for ( int i = v . size ( ) - 1 ; i >= 0 ; i -- ) printf ( \" % d \u2581 \" , v [ i ] ) ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { printf ( \" The \u2581 divisors \u2581 of \u2581 100 \u2581 are : \u2581 n \" ) ; printDivisors ( 100 ) ; return 0 ; }"}
{"text":"A O ( sqrt ( n ) ) program that prints all divisors in sorted order","code":"#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the divisors","code":"void printDivisors ( int n ) { int i ; for ( i = 1 ; i * i < n ; i ++ ) { if ( n % i == 0 ) cout << i << \" \u2581 \" ; } if ( i - ( n \/ i ) == 1 ) { i -- ; } for ( ; i >= 1 ; i -- ) { if ( n % i == 0 ) cout << n \/ i << \" \u2581 \" ; } }"}
{"text":"Driver code","code":"int main ( ) { cout << \" The \u2581 divisors \u2581 of \u2581 100 \u2581 are : \u2581 STRNEWLINE \" ; printDivisors ( 100 ) ; return 0 ; }"}
{"text":"C ++ implementation of Naive method to print all divisors","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"function to print the divisors","code":"void printDivisors ( int n ) { for ( int i = 1 ; i <= n ; i ++ ) if ( n % i == 0 ) cout << \" \u2581 \" << i ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { cout << \" The \u2581 divisors \u2581 of \u2581 100 \u2581 are : \u2581 STRNEWLINE \" ; printDivisors ( 100 ) ; return 0 ; }"}
{"text":"A Better ( than Naive ) Solution to find all divisiors","code":"#include <iostream> NEW_LINE #include <math.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the divisors","code":"void printDivisors ( int n ) {"}
{"text":"Note that this loop runs till square root","code":"for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) {"}
{"text":"If divisors are equal , print only one","code":"if ( n \/ i == i ) cout << \" \u2581 \" << i ;"}
{"text":"else Otherwise print both","code":"cout << \" \u2581 \" << i << \" \u2581 \" << n \/ i ; } } }"}
{"text":"Driver program to test above function","code":"int main ( ) { cout << \" The \u2581 divisors \u2581 of \u2581 100 \u2581 are : \u2581 STRNEWLINE \" ; printDivisors ( 100 ) ; return 0 ; }"}
{"text":"C ++ program for implementation of Sieve of Atkin","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int SieveOfAtkin ( int limit ) {"}
{"text":"2 and 3 are known to be prime","code":"if ( limit > 2 ) cout << 2 << \" \u2581 \" ; if ( limit > 3 ) cout << 3 << \" \u2581 \" ;"}
{"text":"Initialise the sieve array with false values","code":"bool sieve [ limit ] ; for ( int i = 0 ; i < limit ; i ++ ) sieve [ i ] = false ;"}
{"text":"Mark sieve [ n ] is true if one of the following is true : a ) n = ( 4 * x * x ) + ( y * y ) has odd number of solutions , i . e . , there exist odd number of distinct pairs ( x , y ) that satisfy the equation and n % 12 = 1 or n % 12 = 5. b ) n = ( 3 * x * x ) + ( y * y ) has odd number of solutions and n % 12 = 7 c ) n = ( 3 * x * x ) - ( y * y ) has odd number of solutions , x > y and n % 12 = 11","code":"for ( int x = 1 ; x * x < limit ; x ++ ) { for ( int y = 1 ; y * y < limit ; y ++ ) {"}
{"text":"Main part of Sieve of Atkin","code":"int n = ( 4 * x * x ) + ( y * y ) ; if ( n <= limit && ( n % 12 == 1 n % 12 == 5 ) ) sieve [ n ] ^= true ; n = ( 3 * x * x ) + ( y * y ) ; if ( n <= limit && n % 12 == 7 ) sieve [ n ] ^= true ; n = ( 3 * x * x ) - ( y * y ) ; if ( x > y && n <= limit && n % 12 == 11 ) sieve [ n ] ^= true ; } }"}
{"text":"Mark all multiples of squares as non - prime","code":"for ( int r = 5 ; r * r < limit ; r ++ ) { if ( sieve [ r ] ) { for ( int i = r * r ; i < limit ; i += r * r ) sieve [ i ] = false ; } }"}
{"text":"Print primes using sieve [ ]","code":"for ( int a = 5 ; a < limit ; a ++ ) if ( sieve [ a ] ) cout << a << \" \u2581 \" ; }"}
{"text":"Driver program","code":"int main ( void ) { int limit = 20 ; SieveOfAtkin ( limit ) ; return 0 ; }"}
{"text":"C ++ program to check if a point lies inside a circle or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool isInside ( int circle_x , int circle_y , int rad , int x , int y ) {"}
{"text":"Compare radius of circle with distance of its center from given point","code":"if ( ( x - circle_x ) * ( x - circle_x ) + ( y - circle_y ) * ( y - circle_y ) <= rad * rad ) return true ; else return false ; }"}
{"text":"Driver function","code":"int main ( ) { int x = 1 , y = 1 ; int circle_x = 0 , circle_y = 1 , rad = 2 ; isInside ( circle_x , circle_y , rad , x , y ) ? cout << \" Inside \" : cout << \" Outside \" ; }"}
{"text":"C ++ program to evaluate all possible values of a expression","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Utility function to evaluate a simple expression with one operator only .","code":"int eval ( int a , char op , int b ) { if ( op == ' + ' ) return a + b ; if ( op == ' - ' ) return a - b ; if ( op == ' * ' ) return a * b ; }"}
{"text":"This function evaluates all possible values and returns a list of evaluated values .","code":"vector < int > evaluateAll ( string expr , int low , int high ) {"}
{"text":"To store result ( all possible evaluations of given expression ' expr ' )","code":"vector < int > res ;"}
{"text":"If there is only one character , it must be a digit ( or operand ) , return it .","code":"if ( low == high ) { res . push_back ( expr [ low ] - '0' ) ; return res ; }"}
{"text":"If there are only three characters , middle one must be operator and corner ones must be operand","code":"if ( low == ( high - 2 ) ) { int num = eval ( expr [ low ] - '0' , expr [ low + 1 ] , expr [ low + 2 ] - '0' ) ; res . push_back ( num ) ; return res ; }"}
{"text":"every i refers to an operator","code":"for ( int i = low + 1 ; i <= high ; i += 2 ) {"}
{"text":"l refers to all the possible values in the left of operator ' expr [ i ] '","code":"vector < int > l = evaluateAll ( expr , low , i - 1 ) ;"}
{"text":"r refers to all the possible values in the right of operator ' expr [ i ] '","code":"vector < int > r = evaluateAll ( expr , i + 1 , high ) ;"}
{"text":"Take above evaluated all possible values in left side of ' i '","code":"for ( int s1 = 0 ; s1 < l . size ( ) ; s1 ++ ) {"}
{"text":"Take above evaluated all possible values in right side of ' i '","code":"for ( int s2 = 0 ; s2 < r . size ( ) ; s2 ++ ) {"}
{"text":"Calculate value for every pair and add the value to result .","code":"int val = eval ( l [ s1 ] , expr [ i ] , r [ s2 ] ) ; res . push_back ( val ) ; } } } return res ; }"}
{"text":"Driver program","code":"int main ( ) { string expr = \"1*2 + 3*4\" ; int len = expr . length ( ) ; vector < int > ans = evaluateAll ( expr , 0 , len - 1 ) ; for ( int i = 0 ; i < ans . size ( ) ; i ++ ) cout << ans [ i ] << endl ; return 0 ; }"}
{"text":"C ++ program to check if a given number is lucky","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"This function returns true if n is lucky","code":"bool isLucky ( int n ) {"}
{"text":"Create an array of size 10 and initialize all elements as false . This array is used to check if a digit is already seen or not .","code":"bool arr [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) arr [ i ] = false ;"}
{"text":"Traverse through all digits of given number","code":"while ( n > 0 ) {"}
{"text":"Find the last digit","code":"int digit = n % 10 ;"}
{"text":"If digit is already seen , return false","code":"if ( arr [ digit ] ) return false ;"}
{"text":"Mark this digit as seen","code":"arr [ digit ] = true ;"}
{"text":"REmove the last digit from number","code":"n = n \/ 10 ; } return true ; }"}
{"text":"Driver program to test above function .","code":"int main ( ) { int arr [ ] = { 1291 , 897 , 4566 , 1232 , 80 , 700 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; for ( int i = 0 ; i < n ; i ++ ) isLucky ( arr [ i ] ) ? cout << arr [ i ] << \" \u2581 is \u2581 Lucky \u2581 STRNEWLINE \" : cout << arr [ i ] << \" \u2581 is \u2581 not \u2581 Lucky \u2581 STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ program to print squares of first ' n ' natural numbers wothout using * , \/ and -","code":"#include <iostream> NEW_LINE using namespace std ; void printSquares ( int n ) {"}
{"text":"Initialize ' square ' and first odd number","code":"int square = 0 , odd = 1 ;"}
{"text":"Calculate and print squares","code":"for ( int x = 0 ; x < n ; x ++ ) {"}
{"text":"Print square","code":"cout << square << \" \u2581 \" ;"}
{"text":"Update ' square ' and ' odd '","code":"square = square + odd ; odd = odd + 2 ; } }"}
{"text":"Driver program to test above function","code":"int main ( ) { int n = 5 ; printSquares ( n ) ; }"}
{"text":"C ++ program to reverse digits of a number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive function to reverse digits of num","code":"int reversDigits ( int num ) { static int rev_num = 0 ; static int base_pos = 1 ; if ( num > 0 ) { reversDigits ( num \/ 10 ) ; rev_num += ( num % 10 ) * base_pos ; base_pos *= 10 ; } return rev_num ; }"}
{"text":"Driver Code","code":"int main ( ) { int num = 4562 ; cout << \" Reverse \u2581 of \u2581 no . \u2581 is \u2581 \" << reversDigits ( num ) ; return 0 ; }"}
{"text":"C ++ program that find the minimum possible maximum","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive function that find the minimum value after exclusive - OR","code":"int RecursiveFunction ( vector < int > ref , int bit ) {"}
{"text":"Condition if ref size is zero or bit is negative then return 0","code":"if ( ref . size ( ) == 0 bit < 0 ) return 0 ; vector < int > curr_on , curr_off ; for ( int i = 0 ; i < ref . size ( ) ; i ++ ) {"}
{"text":"Condition if current bit is off then push current value in curr_off vector","code":"if ( ( ( ref [ i ] >> bit ) & 1 ) == 0 ) curr_off . push_back ( ref [ i ] ) ;"}
{"text":"Condition if current bit is on then push current value in curr_on vector","code":"else curr_on . push_back ( ref [ i ] ) ; }"}
{"text":"Condition if curr_off is empty then call recursive function on curr_on vector","code":"if ( curr_off . size ( ) == 0 ) return RecursiveFunction ( curr_on , bit - 1 ) ;"}
{"text":"Condition if curr_on is empty then call recursive function on curr_off vector","code":"if ( curr_on . size ( ) == 0 ) return RecursiveFunction ( curr_off , bit - 1 ) ;"}
{"text":"Return the minimum of curr_off and curr_on and add power of 2 of current bit","code":"return min ( RecursiveFunction ( curr_off , bit - 1 ) , RecursiveFunction ( curr_on , bit - 1 ) ) + ( 1 << bit ) ; }"}
{"text":"Function that print the minimum value after exclusive - OR","code":"void PrintMinimum ( int a [ ] , int n ) { vector < int > v ;"}
{"text":"Pushing values in vector","code":"for ( int i = 0 ; i < n ; i ++ ) v . push_back ( a [ i ] ) ;"}
{"text":"Printing answer","code":"cout << RecursiveFunction ( v , 30 ) << \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 3 , 2 , 1 } ; int size = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; PrintMinimum ( arr , size ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of elements which are equal to the XOR of the next two elements","code":"int cntElements ( int arr [ ] , int n ) {"}
{"text":"To store the required count","code":"int cnt = 0 ;"}
{"text":"For every element of the array such that it has at least two elements appearing after it in the array","code":"for ( int i = 0 ; i < n - 2 ; i ++ ) {"}
{"text":"If current element is equal to the XOR of the next two elements in the array","code":"if ( arr [ i ] == ( arr [ i + 1 ] ^ arr [ i + 2 ] ) ) { cnt ++ ; } } return cnt ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 4 , 2 , 1 , 3 , 7 , 8 } ; int n = sizeof ( arr ) \/ sizeof ( int ) ; cout << cntElements ( arr , n ) ; return 0 ; }"}
{"text":"A simple C ++ program to find Number of triplets in array having subarray xor equal","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count","code":"int xor_triplet ( int arr [ ] , int n ) {"}
{"text":"Initialise result","code":"int ans = 0 ;"}
{"text":"Pick 1 st element of the triplet","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Pick 2 nd element of the triplet","code":"for ( int j = i + 1 ; j < n ; j ++ ) {"}
{"text":"Pick 3 rd element of the triplet","code":"for ( int k = j ; k < n ; k ++ ) { int xor1 = 0 , xor2 = 0 ;"}
{"text":"Taking xor in the first subarray","code":"for ( int x = i ; x < j ; x ++ ) { xor1 ^= arr [ x ] ; }"}
{"text":"Taking xor in the second subarray","code":"for ( int x = j ; x <= k ; x ++ ) { xor2 ^= arr [ x ] ; }"}
{"text":"If both xor is equal","code":"if ( xor1 == xor2 ) { ans ++ ; } } } } return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Calling","code":"cout << xor_triplet ( arr , n ) ; return 0 ; }"}
{"text":"C ++ trie based program to find the Number of triplets in array having subarray xor equal","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"maximum number of bits in an integer <= 1e9","code":"#define lg  31"}
{"text":"Structure of a Trie Node","code":"struct TrieNode {"}
{"text":"[ 0 ] index is bit 0 and [ 1 ] index is bit 1","code":"TrieNode * children [ 2 ] ;"}
{"text":"Sum of indexes inserted at at a node","code":"int sum_of_indexes ;"}
{"text":"Number of indexes inserted at a node","code":"int number_of_indexes ;"}
{"text":"Constructor to initialize a newly created node","code":"TrieNode ( ) { this -> children [ 0 ] = nullptr ; this -> children [ 1 ] = nullptr ; this -> sum_of_indexes = 0 ; this -> number_of_indexes = 0 ; } } ;"}
{"text":"Function to insert curr_xor into the trie","code":"void insert ( TrieNode * node , int num , int index ) {"}
{"text":"Iterate from the 31 st bit to the 0 th bit of curr_xor number","code":"for ( int bits = lg ; bits >= 0 ; bits -- ) {"}
{"text":"Check if the current bit is set or not","code":"int curr_bit = ( num >> bits ) & 1 ;"}
{"text":"If this node isn 't already  present in the trie structure  insert it into the trie.","code":"if ( node -> children [ curr_bit ] == nullptr ) { node -> children [ curr_bit ] = new TrieNode ( ) ; } node = node -> children [ curr_bit ] ; }"}
{"text":"Increase the sum of indexes by the current index value","code":"node -> sum_of_indexes += index ;"}
{"text":"Increase the number of indexes by 1","code":"node -> number_of_indexes ++ ; }"}
{"text":"Function to check if curr_xor is present in trie or not","code":"int query ( TrieNode * node , int num , int index ) {"}
{"text":"Iterate from the 31 st bit to the 0 th bit of curr_xor number","code":"for ( int bits = lg ; bits >= 0 ; bits -- ) {"}
{"text":"Check if the current bit is set or not","code":"int curr_bit = ( num >> bits ) & 1 ;"}
{"text":"If this node isn 't already  present in the trie structure  that means no sub array till  current index has 0 xor so  return 0","code":"if ( node -> children [ curr_bit ] == nullptr ) { return 0 ; } node = node -> children [ curr_bit ] ; }"}
{"text":"Calculate the number of index inserted at final node","code":"int sz = node -> number_of_indexes ;"}
{"text":"Calculate the sum of index inserted at final node","code":"int sum = node -> sum_of_indexes ; int ans = ( sz * index ) - ( sum ) ; return ans ; }"}
{"text":"Function to return the count of valid triplets","code":"int no_of_triplets ( int arr [ ] , int n ) {"}
{"text":"To store cumulative xor","code":"int curr_xor = 0 ; int number_of_triplets = 0 ;"}
{"text":"The root of the trie","code":"TrieNode * root = new TrieNode ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] ;"}
{"text":"Insert the curr_xor in the trie","code":"insert ( root , curr_xor , i ) ;"}
{"text":"Update the cumulative xor","code":"curr_xor ^= x ;"}
{"text":"Check if the cumulative xor is present in the trie or not if present then add ( sz * index ) - sum","code":"number_of_triplets += query ( root , curr_xor , i ) ; } return number_of_triplets ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 5 , 2 , 7 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << no_of_triplets ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  100005 NEW_LINE int n , k ;"}
{"text":"Adjacency list","code":"vector < int > al [ N ] ; long long Ideal_pair ; long long bit [ N ] ; bool root_node [ N ] ;"}
{"text":"bit : bit array i and j are starting and ending index INCLUSIVE","code":"long long bit_q ( int i , int j ) { long long sum = 0ll ; while ( j > 0 ) { sum += bit [ j ] ; j -= ( j & ( j * -1 ) ) ; } i -- ; while ( i > 0 ) { sum -= bit [ i ] ; i -= ( i & ( i * -1 ) ) ; } return sum ; }"}
{"text":"bit : bit array n : size of bit array i is the index to be updated diff is ( new_val - old_val )","code":"void bit_up ( int i , long long diff ) { while ( i <= n ) { bit [ i ] += diff ; i += i & - i ; } }"}
{"text":"DFS function to find ideal pairs","code":"void dfs ( int node ) { Ideal_pair += bit_q ( max ( 1 , node - k ) , min ( n , node + k ) ) ; bit_up ( node , 1 ) ; for ( int i = 0 ; i < al [ node ] . size ( ) ; i ++ ) dfs ( al [ node ] [ i ] ) ; bit_up ( node , -1 ) ; }"}
{"text":"Function for initialisation","code":"void initialise ( ) { Ideal_pair = 0 ; for ( int i = 0 ; i <= n ; i ++ ) { root_node [ i ] = true ; bit [ i ] = 0LL ; } }"}
{"text":"Function to add an edge","code":"void Add_Edge ( int x , int y ) { al [ x ] . push_back ( y ) ; root_node [ y ] = false ; }"}
{"text":"Function to find number of ideal pairs","code":"long long Idealpairs ( ) {"}
{"text":"Find root of the tree","code":"int r = -1 ; for ( int i = 1 ; i <= n ; i ++ ) if ( root_node [ i ] ) { r = i ; break ; } dfs ( r ) ; return Ideal_pair ; }"}
{"text":"Driver code","code":"int main ( ) { n = 6 , k = 3 ; initialise ( ) ;"}
{"text":"Add edges","code":"Add_Edge ( 1 , 2 ) ; Add_Edge ( 1 , 3 ) ; Add_Edge ( 3 , 4 ) ; Add_Edge ( 3 , 5 ) ; Add_Edge ( 3 , 6 ) ;"}
{"text":"Function call","code":"cout << Idealpairs ( ) ; return 0 ; }"}
{"text":"CPP program to print all bitwise subsets of N ( Efficient approach )","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to find bitwise subsets Efficient approach","code":"void printSubsets ( int n ) { for ( int i = n ; i > 0 ; i = ( i - 1 ) & n ) cout << i << \" \u2581 \" ; cout << 0 ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 9 ; printSubsets ( n ) ; return 0 ; }"}
{"text":"CPP program to check if a number is divisible by 17 or not using bitwise operator .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"function to check recursively if the number is divisible by 17 or not","code":"bool isDivisibleby17 ( int n ) {"}
{"text":"if n = 0 or n = 17 then yes","code":"if ( n == 0 n == 17 ) return true ;"}
{"text":"if n is less then 17 , not divisible by 17","code":"if ( n < 17 ) return false ;"}
{"text":"reducing the number by floor ( n \/ 16 ) - n % 16","code":"return isDivisibleby17 ( ( int ) ( n >> 4 ) - ( int ) ( n & 15 ) ) ; }"}
{"text":"driver code to check the above function","code":"int main ( ) { int n = 35 ; if ( isDivisibleby17 ( n ) ) cout << n << \" \u2581 is \u2581 divisible \u2581 by \u2581 17\" ; else cout << n << \" \u2581 is \u2581 not \u2581 divisible \u2581 by \u2581 17\" ; return 0 ; }"}
{"text":"CPP program to find largest number smaller than equal to n with m set bits then m - 1 0 bits .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns largest number with m set bits then m - 1 0 bits .","code":"long long answer ( long long n ) {"}
{"text":"Start with 2 bits .","code":"long m = 2 ;"}
{"text":"initial answer is 1 which meets the given condition","code":"long long ans = 1 ; long long r = 1 ;"}
{"text":"check for all numbers","code":"while ( r < n ) {"}
{"text":"compute the number","code":"r = ( int ) ( pow ( 2 , m ) - 1 ) * ( pow ( 2 , m - 1 ) ) ;"}
{"text":"if less then N","code":"if ( r < n ) ans = r ;"}
{"text":"increment m to get the next number","code":"m ++ ; } return ans ; }"}
{"text":"driver code to check the above condition","code":"int main ( ) { long long n = 7 ; cout << answer ( n ) ; return 0 ; }"}
{"text":"Simple CPP program to find MSB number for given n .","code":"#include <iostream> NEW_LINE using namespace std ; int setBitNumber ( int n ) { if ( n == 0 ) return 0 ; int msb = 0 ; n = n \/ 2 ; while ( n != 0 ) { n = n \/ 2 ; msb ++ ; } return ( 1 << msb ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 0 ; cout << setBitNumber ( n ) ; return 0 ; }"}
{"text":"CPP program to find MSB number for given n .","code":"#include <iostream> NEW_LINE using namespace std ; int setBitNumber ( int n ) {"}
{"text":"Suppose n is 273 ( binary is 100010001 ) . It does following 100010001 | 010001000 = 110011001","code":"n |= n >> 1 ;"}
{"text":"This makes sure 4 bits ( From MSB and including MSB ) are set . It does following 110011001 | 001100110 = 111111111","code":"n |= n >> 2 ; n |= n >> 4 ; n |= n >> 8 ; n |= n >> 16 ;"}
{"text":"Increment n by 1 so that there is only one set bit which is just before original MSB . n now becomes 1000000000","code":"n = n + 1 ;"}
{"text":"Return original MSB after shifting . n now becomes 100000000","code":"return ( n >> 1 ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 273 ; cout << setBitNumber ( n ) ; return 0 ; }"}
{"text":"Simple C ++ code for counting trailing zeros in binary representation of a number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int countTrailingZero ( int x ) { int count = 0 ; while ( ( x & 1 ) == 0 ) { x = x >> 1 ; count ++ ; } return count ; }"}
{"text":"Driver Code","code":"int main ( ) { cout << countTrailingZero ( 11 ) << endl ; return 0 ; }"}
{"text":"C ++ code for counting trailing zeros in binary representation of a number","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int countTrailingZero ( int x ) {"}
{"text":"Map a bit value mod 37 to its position","code":"static const int lookup [ ] = { 32 , 0 , 1 , 26 , 2 , 23 , 27 , 0 , 3 , 16 , 24 , 30 , 28 , 11 , 0 , 13 , 4 , 7 , 17 , 0 , 25 , 22 , 31 , 15 , 29 , 10 , 12 , 6 , 0 , 21 , 14 , 9 , 5 , 20 , 8 , 19 , 18 } ;"}
{"text":"Only difference between ( x and - x ) is the value of signed magnitude ( leftmostbit ) negative numbers signed bit is 1","code":"return lookup [ ( - x & x ) % 37 ] ; }"}
{"text":"Driver Code","code":"int main ( ) { cout << countTrailingZero ( 48 ) << endl ; return 0 ; }"}
{"text":"C ++ program to evaluate ceil ( 7 n \/ 8 ) without using * and \/","code":"#include <iostream> NEW_LINE using namespace std ; int multiplyBySevenByEight ( int n ) {"}
{"text":"Note the inner bracket here . This is needed because precedence of ' - ' operator is higher than ' < < '","code":"return ( n - ( n >> 3 ) ) ; }"}
{"text":"Driver code","code":"int main ( ) { int n = 9 ; cout << multiplyBySevenByEight ( n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to search the rightmost index of given number","code":"static int search ( vector < int > list , int num ) { int low = 0 , high = list . size ( ) - 1 ;"}
{"text":"Store the rightmost index","code":"int ans = -1 ; while ( low <= high ) {"}
{"text":"Calculate the mid","code":"int mid = low + ( high - low ) \/ 2 ;"}
{"text":"If given number <= num","code":"if ( list [ mid ] <= num ) {"}
{"text":"Assign ans = mid","code":"ans = mid ;"}
{"text":"Update low","code":"low = mid + 1 ; } else"}
{"text":"Update high","code":"high = mid - 1 ; }"}
{"text":"return ans","code":"return ans ; }"}
{"text":"Function to check if the given number is palindrome or not","code":"bool isPalindrome ( int n ) { int rev = 0 ; int temp = n ;"}
{"text":"Generate reverse of the given number","code":"while ( n > 0 ) { rev = rev * 10 + n % 10 ; n \/= 10 ; }"}
{"text":"If n is a palindrome","code":"return rev == temp ; }"}
{"text":"Function to find the maximum size of group of palindrome numbers having difference between maximum and minimum element at most K","code":"int countNumbers ( int L , int R , int K ) {"}
{"text":"Stores the all the palindromic numbers in the range [ L , R ]","code":"vector < int > list ;"}
{"text":"Traverse over the range [ L , R ]","code":"for ( int i = L ; i <= R ; i ++ ) {"}
{"text":"If i is a palindrome","code":"if ( isPalindrome ( i ) ) {"}
{"text":"Append the number in the list","code":"list . push_back ( i ) ; } }"}
{"text":"Stores count of maximum palindromic numbers","code":"int count = 0 ;"}
{"text":"Iterate each element in the list","code":"for ( int i = 0 ; i < list . size ( ) ; i ++ ) {"}
{"text":"Calculate rightmost index in the list < current element + K","code":"int right_index = search ( list , list [ i ] + K - 1 ) ;"}
{"text":"Check if there is rightmost index from the current index","code":"if ( right_index != -1 ) count = max ( count , right_index - i + 1 ) ; }"}
{"text":"Return the count","code":"return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int L = 98 , R = 112 ; int K = 13 ; cout << countNumbers ( L , R , K ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to generate previous smaller element for each array element","code":"vector < int > findPrevious ( vector < int > a , int n ) { vector < int > ps ( n ) ;"}
{"text":"The first element has no previous smaller","code":"ps [ 0 ] = -1 ;"}
{"text":"Stack to keep track of elements that have occurred previously","code":"stack < int > Stack ;"}
{"text":"Push the first index","code":"Stack . push ( 0 ) ; for ( int i = 1 ; i < n ; i ++ ) {"}
{"text":"Pop all the elements until the previous element is smaller than current element","code":"while ( Stack . size ( ) > 0 && a [ Stack . top ( ) ] >= a [ i ] ) Stack . pop ( ) ;"}
{"text":"Store the previous smaller element","code":"ps [ i ] = Stack . size ( ) > 0 ? Stack . top ( ) : -1 ;"}
{"text":"Push the index of the current element","code":"Stack . push ( i ) ; }"}
{"text":"Return the array","code":"return ps ; }"}
{"text":"Function to generate next smaller element for each array element","code":"vector < int > findNext ( vector < int > a , int n ) { vector < int > ns ( n ) ; ns [ n - 1 ] = n ;"}
{"text":"Stack to keep track of elements that have occurring next","code":"stack < int > Stack ; Stack . push ( n - 1 ) ;"}
{"text":"Iterate in reverse order for calculating next smaller","code":"for ( int i = n - 2 ; i >= 0 ; i -- ) {"}
{"text":"Pop all the elements until the next element is smaller than current element","code":"while ( Stack . size ( ) > 0 && a [ Stack . top ( ) ] >= a [ i ] ) Stack . pop ( ) ;"}
{"text":"Store the next smaller element","code":"ns [ i ] = Stack . size ( ) > 0 ? Stack . top ( ) : n ;"}
{"text":"Push the index of the current element","code":"Stack . push ( i ) ; }"}
{"text":"Return the array","code":"return ns ; }"}
{"text":"Function to find the maximum sum by subtracting same value from all elements of a Subarray","code":"int findMaximumSum ( vector < int > a , int n ) {"}
{"text":"Stores previous smaller element","code":"vector < int > prev_smaller = findPrevious ( a , n ) ;"}
{"text":"Stores next smaller element","code":"vector < int > next_smaller = findNext ( a , n ) ; int max_value = 0 ; for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Calculate contribution of each element","code":"max_value = max ( max_value , a [ i ] * ( next_smaller [ i ] - prev_smaller [ i ] - 1 ) ) ; }"}
{"text":"Return answer","code":"return max_value ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 ; vector < int > a { 80 , 48 , 82 } ; cout << findMaximumSum ( a , n ) ; return 0 ; }"}
{"text":"This function returns true if contents of arr1 [ ] and arr2 [ ] are same , otherwise false .","code":"#include <iostream> NEW_LINE #include <cstring> NEW_LINE #define MAX  256 NEW_LINE using namespace std ; bool compare ( char arr1 [ ] , char arr2 [ ] ) { for ( int i = 0 ; i < MAX ; i ++ ) if ( arr1 [ i ] != arr2 [ i ] ) return false ; return true ; }"}
{"text":"This function search for all permutations of pat [ ] in txt [ ]","code":"bool search ( char * pat , char * txt ) { int M = strlen ( pat ) , N = strlen ( txt ) ;"}
{"text":"countP [ ] : Store count of all characters of pattern countTW [ ] : Store count of current window of text","code":"char countP [ MAX ] = { 0 } , countTW [ MAX ] = { 0 } ; for ( int i = 0 ; i < M ; i ++ ) { ( countP [ pat [ i ] ] ) ++ ; ( countTW [ txt [ i ] ] ) ++ ; }"}
{"text":"Traverse through remaining characters of pattern","code":"for ( int i = M ; i < N ; i ++ ) {"}
{"text":"Compare counts of current window of text with counts of pattern [ ]","code":"if ( compare ( countP , countTW ) ) return true ;"}
{"text":"Add current character to current window","code":"( countTW [ txt [ i ] ] ) ++ ;"}
{"text":"Remove the first character of previous window","code":"countTW [ txt [ i - M ] ] -- ; }"}
{"text":"Check for the last window in text","code":"if ( compare ( countP , countTW ) ) return true ; return false ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { char txt [ ] = \" BACDGABCDA \" ; char pat [ ] = \" ABCD \" ; if ( search ( pat , txt ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the maximized median","code":"float getMaxMedian ( int arr [ ] , int n , int k ) { int size = n + k ;"}
{"text":"Sort the array","code":"sort ( arr , arr + n ) ;"}
{"text":"If size is even","code":"if ( size % 2 == 0 ) { float median = ( float ) ( arr [ ( size \/ 2 ) - 1 ] + arr [ size \/ 2 ] ) \/ 2 ; return median ; }"}
{"text":"If size is odd","code":"float median = arr [ size \/ 2 ] ; return median ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 3 , 2 , 3 , 4 , 2 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int k = 2 ; cout << getMaxMedian ( arr , n , k ) ; return 0 ; }"}
{"text":"C ++ program to print three numbers in sorted order using max function","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; void printSorted ( int a , int b , int c ) {"}
{"text":"Find maximum element","code":"int get_max = max ( a , max ( b , c ) ) ;"}
{"text":"Find minimum element","code":"int get_min = - max ( - a , max ( - b , - c ) ) ; int get_mid = ( a + b + c ) - ( get_max + get_min ) ; cout << get_min << \" \u2581 \" << get_mid << \" \u2581 \" << get_max ; }"}
{"text":"Driver code","code":"int main ( ) { int a = 4 , b = 1 , c = 9 ; printSorted ( a , b , c ) ; return 0 ; }"}
{"text":"iterative implementation","code":"#include <iostream> NEW_LINE using namespace std ; int binarySearch ( int a [ ] , int item , int low , int high ) { while ( low <= high ) { int mid = low + ( high - low ) \/ 2 ; if ( item == a [ mid ] ) return mid + 1 ; else if ( item > a [ mid ] ) low = mid + 1 ; else high = mid - 1 ; } return low ; }"}
{"text":"Function to sort an array a [ ] of size ' n '","code":"void insertionSort ( int a [ ] , int n ) { int i , loc , j , k , selected ; for ( i = 1 ; i < n ; ++ i ) { j = i - 1 ; selected = a [ i ] ;"}
{"text":"find location where selected should be inseretd","code":"loc = binarySearch ( a , selected , 0 , j ) ;"}
{"text":"Move all elements after location to create space","code":"while ( j >= loc ) { a [ j + 1 ] = a [ j ] ; j -- ; } a [ j + 1 ] = selected ; } }"}
{"text":"Driver Code","code":"int main ( ) { int a [ ] = { 37 , 23 , 0 , 17 , 12 , 72 , 31 , 46 , 100 , 88 , 54 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) , i ; insertionSort ( a , n ) ; cout << \" Sorted \u2581 array : \u2581 STRNEWLINE \" ; for ( i = 0 ; i < n ; i ++ ) cout << \" \u2581 \" << a [ i ] ; return 0 ; }"}
{"text":"C ++ program for insertion sort","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to sort an array using insertion sort","code":"void insertionSort ( int arr [ ] , int n ) { int i , key , j ; for ( i = 1 ; i < n ; i ++ ) { key = arr [ i ] ; j = i - 1 ;"}
{"text":"Move elements of arr [ 0. . i - 1 ] , that are greater than key , to one position ahead of their current position","code":"while ( j >= 0 && arr [ j ] > key ) { arr [ j + 1 ] = arr [ j ] ; j = j - 1 ; } arr [ j + 1 ] = key ; } }"}
{"text":"A utility function to print an array of size n","code":"void printArray ( int arr [ ] , int n ) { int i ; for ( i = 0 ; i < n ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; cout << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 12 , 11 , 13 , 5 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; insertionSort ( arr , n ) ; printArray ( arr , n ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate total number of valid permutations","code":"int validPermutations ( string str ) { unordered_map < char , int > m ;"}
{"text":"Creating count which is equal to the Total number of characters present and ans that will store the number of unique permutations","code":"int count = str . length ( ) , ans = 0 ;"}
{"text":"Storing frequency of each character present in the string","code":"for ( int i = 0 ; i < str . length ( ) ; i ++ ) { m [ str [ i ] ] ++ ; } for ( int i = 0 ; i < str . length ( ) ; i ++ ) {"}
{"text":"Adding count of characters by excluding characters equal to current char","code":"ans += count - m [ str [ i ] ] ;"}
{"text":"Reduce the frequency of the current character and count by 1 , so that it cannot interfere with the calculations of the same elements present to the right of it .","code":"m [ str [ i ] ] -- ; count -- ; }"}
{"text":"Return ans + 1 ( Because the given string is also a unique permutation )","code":"return ans + 1 ; }"}
{"text":"Driver Code","code":"int main ( ) { string str = \" sstt \" ; cout << validPermutations ( str ) ; return 0 ; }"}
{"text":"C ++ program to count total number of paths from a point to origin","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"DP based function to count number of paths","code":"int countPaths ( int n , int m ) { int dp [ n + 1 ] [ m + 1 ] ;"}
{"text":"Fill entries in bottommost row and leftmost columns","code":"for ( int i = 0 ; i <= n ; i ++ ) dp [ i ] [ 0 ] = 1 ; for ( int i = 0 ; i <= m ; i ++ ) dp [ 0 ] [ i ] = 1 ;"}
{"text":"Fill DP in bottom up manner","code":"for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= m ; j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ; return dp [ n ] [ m ] ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 3 , m = 2 ; cout << \" \u2581 Number \u2581 of \u2581 Paths \u2581 \" << countPaths ( n , m ) ; return 0 ; }"}
{"text":"Recursive C ++ program for coin change problem .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns the count of ways we can sum S [ 0. . . m - 1 ] coins to get sum n","code":"int count ( int S [ ] , int m , int n ) {"}
{"text":"If n is 0 then there is 1 solution ( do not include any coin )","code":"if ( n == 0 ) return 1 ;"}
{"text":"If n is less than 0 then no solution exists","code":"if ( n < 0 ) return 0 ;"}
{"text":"If there are no coins and n is greater than 0 , then no solution exist","code":"if ( m <= 0 && n >= 1 ) return 0 ;"}
{"text":"count is sum of solutions ( i ) including S [ m - 1 ] ( ii ) excluding S [ m - 1 ]","code":"return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ; }"}
{"text":"Driver code","code":"int main ( ) { int i , j ; int arr [ ] = { 1 , 2 , 3 } ; int m = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << \" \u2581 \" << count ( arr , m , 4 ) ; return 0 ; }"}
{"text":"Either Pick this coin or not","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int coinchange ( vector < int > & a , int v , int n , vector < vector < int > > & dp ) { if ( v == 0 ) return dp [ n ] [ v ] = 1 ; if ( n == 0 ) return 0 ; if ( dp [ n ] [ v ] != -1 ) return dp [ n ] [ v ] ; if ( a [ n - 1 ] <= v ) { return dp [ n ] [ v ] = coinchange ( a , v - a [ n - 1 ] , n , dp ) + coinchange ( a , v , n - 1 , dp ) ; }"}
{"text":"else We have no option but to leave this coin","code":"return dp [ n ] [ v ] = coinchange ( a , v , n - 1 , dp ) ; } int32_t main ( ) { int tc = 1 ;"}
{"text":"cin >> tc ;","code":"while ( tc -- ) { int n , v ; n = 3 , v = 4 ; vector < int > a = { 1 , 2 , 3 } ; vector < vector < int > > dp ( n + 1 , vector < int > ( v + 1 , -1 ) ) ; int res = coinchange ( a , v , n , dp ) ; cout << res << endl ; } }"}
{"text":"Function to compare two strings ignoring their cases","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; bool equalIgnoreCase ( string str1 , string str2 ) { int i = 0 ;"}
{"text":"Convert to uppercase using transform ( ) function and :: toupper in STL","code":"transform ( str1 . begin ( ) , str1 . end ( ) , str1 . begin ( ) , :: toupper ) ; transform ( str2 . begin ( ) , str2 . end ( ) , str2 . begin ( ) , :: toupper ) ;"}
{"text":"Comparing both using inbuilt function","code":"int x = str1 . compare ( str2 ) ;"}
{"text":"if strings are equal , return true otherwise false","code":"if ( x != 0 ) return false ; else return true ; }"}
{"text":"Function to print the same or not same if strings are equal or not equal","code":"void equalIgnoreCaseUtil ( string str1 , string str2 ) { bool res = equalIgnoreCase ( str1 , str2 ) ; if ( res == true ) cout << \" Same \" << endl ; else cout << \" Not \u2581 Same \" << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { string str1 , str2 ; str1 = \" Geeks \" ; str2 = \" geeks \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; str1 = \" Geek \" ; str2 = \" geeksforgeeks \" ; equalIgnoreCaseUtil ( str1 , str2 ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the converted string after replacing every consonant sequence with its length","code":"string replaceConsonants ( string str ) {"}
{"text":"To store the resultant string","code":"string res = \" \" ; int i = 0 , count = 0 ;"}
{"text":"Checking each character for consonant sequence","code":"while ( i < str . length ( ) ) {"}
{"text":"Count the length of consonants sequence","code":"if ( str [ i ] != ' a ' && str [ i ] != ' e ' && str [ i ] != ' i ' && str [ i ] != ' o ' && str [ i ] != ' u ' ) { i ++ ; count ++ ; } else {"}
{"text":"Add the length in the string","code":"if ( count > 0 ) res += to_string ( count ) ;"}
{"text":"Add the vowel","code":"res += str [ i ] ; i ++ ; count = 0 ; } }"}
{"text":"Check for the last consonant sequence in the string","code":"if ( count > 0 ) res += to_string ( count ) ;"}
{"text":"Return the resultant string","code":"return res ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" abcdeiop \" ; cout << replaceConsonants ( str ) ; return 0 ; }"}
{"text":"CPP Program to Encrypt string with product of number of vowels and consonants in every substring of size k","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"isVowel ( ) is a function that returns true for a vowel and false otherwise .","code":"bool isVowel ( char c ) { return ( c == ' a ' c == ' e ' c == ' i ' c == ' o ' c == ' u ' ) ; }"}
{"text":"function to Encrypt the dtring","code":"string encryptString ( string s , int n , int k ) { int countVowels = 0 ; int countConsonants = 0 ; string ans = \" \" ;"}
{"text":"for each substring","code":"for ( int l = 0 ; l <= n - k ; l ++ ) { countVowels = 0 ; countConsonants = 0 ;"}
{"text":"substring of size k","code":"for ( int r = l ; r <= l + k - 1 ; r ++ ) {"}
{"text":"counting number of vowels and consonants","code":"if ( isVowel ( s [ r ] ) == true ) countVowels ++ ; else countConsonants ++ ; }"}
{"text":"append product to answer .","code":"ans += to_string ( countVowels * countConsonants ) ; } return ans ; }"}
{"text":"Driven Program","code":"int main ( ) { string s = \" hello \" ; int n = s . length ( ) ; int k = 2 ; cout << encryptString ( s , n , k ) << endl ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; string processWords ( char * input ) {"}
{"text":"we are splitting the input based on spaces ( s ) + : this regular expression will handle scenarios where we have words separated by multiple spaces","code":"char * p ; vector < string > s ; p = strtok ( input , \" \u2581 \" ) ; while ( p != NULL ) { s . push_back ( p ) ; p = strtok ( NULL , \" \u2581 \" ) ; } string charBuffer ; for ( string values : s )"}
{"text":"charAt ( 0 ) will pick only the first character from the string and append to buffer","code":"charBuffer += values [ 0 ] ; return charBuffer ; }"}
{"text":"Driver code","code":"int main ( ) { char input [ ] = \" geeks \u2581 for \u2581 geeks \" ; cout << processWords ( input ) ; return 0 ; }"}
{"text":"C ++ program to Generate all binary string without consecutive 1 's of size K","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"A utility function generate all string without consecutive 1 'sof size K","code":"void generateAllStringsUtil ( int K , char str [ ] , int n ) {"}
{"text":"Print binary string without consecutive 1 's","code":"if ( n == K ) {"}
{"text":"Terminate binary string","code":"str [ n ] = ' \\0' ; cout << str << \" \u2581 \" ; return ; }"}
{"text":"If previous character is '1' then we put only 0 at end of string example str = \"01\" then new string be \"010\"","code":"if ( str [ n - 1 ] == '1' ) { str [ n ] = '0' ; generateAllStringsUtil ( K , str , n + 1 ) ; }"}
{"text":"If previous character is '0' than we put both '1' and '0' at end of string example str = \"00\" then new string \"001\" and \"000\"","code":"if ( str [ n - 1 ] == '0' ) { str [ n ] = '0' ; generateAllStringsUtil ( K , str , n + 1 ) ; str [ n ] = '1' ; generateAllStringsUtil ( K , str , n + 1 ) ; } }"}
{"text":"Function generate all binary string without consecutive 1 's","code":"void generateAllStrings ( int K ) {"}
{"text":"Base case","code":"if ( K <= 0 ) return ;"}
{"text":"One by one stores every binary string of length K","code":"char str [ K ] ;"}
{"text":"Generate all Binary string starts with '0'","code":"str [ 0 ] = '0' ; generateAllStringsUtil ( K , str , 1 ) ;"}
{"text":"Generate all Binary string starts with '1'","code":"str [ 0 ] = '1' ; generateAllStringsUtil ( K , str , 1 ) ; }"}
{"text":"Driver program to test above function","code":"int main ( ) { int K = 3 ; generateAllStrings ( K ) ; return 0 ; }"}
{"text":"C ++ Program to find the biggest right circular cylinder that can be fit within a cube","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the biggest right circular cylinder","code":"float findVolume ( float a ) {"}
{"text":"side cannot be negative","code":"if ( a < 0 ) return -1 ;"}
{"text":"radius of right circular cylinder","code":"float r = a \/ 2 ;"}
{"text":"height of right circular cylinder","code":"float h = a ;"}
{"text":"volume of right circular cylinder","code":"float V = 3.14 * pow ( r , 2 ) * h ; return V ; }"}
{"text":"Driver code","code":"int main ( ) { float a = 5 ; cout << findVolume ( a ) << endl ; return 0 ; }"}
{"text":"CPP program to find the volume .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the volume of triangular pyramid","code":"float volumeTriangular ( int a , int b , int h ) { float vol = ( 0.1666 ) * a * b * h ; return vol ; }"}
{"text":"Function to find the volume of square pyramid","code":"float volumeSquare ( int b , int h ) { float vol = ( 0.33 ) * b * b * h ; return vol ; }"}
{"text":"Function to find the volume of pentagonal pyramid","code":"float volumePentagonal ( int a , int b , int h ) { float vol = ( 0.83 ) * a * b * h ; return vol ; }"}
{"text":"Function to find the volume of hexagonal pyramid","code":"float volumeHexagonal ( int a , int b , int h ) { float vol = a * b * h ; return vol ; }"}
{"text":"Driver Code","code":"int main ( ) { int b = 4 , h = 9 , a = 4 ; cout << \" Volume \u2581 of \u2581 triangular \" << \" \u2581 base \u2581 pyramid \u2581 is \u2581 \" << volumeTriangular ( a , b , h ) << endl ; cout << \" Volume \u2581 of \u2581 square \u2581 \" << \" \u2581 base \u2581 pyramid \u2581 is \u2581 \" << volumeSquare ( b , h ) << endl ; cout << \" Volume \u2581 of \u2581 pentagonal \" << \" \u2581 base \u2581 pyramid \u2581 is \u2581 \" << volumePentagonal ( a , b , h ) << endl ; cout << \" Volume \u2581 of \u2581 Hexagonal \" << \" \u2581 base \u2581 pyramid \u2581 is \u2581 \" << volumeHexagonal ( a , b , h ) ; return 0 ; }"}
{"text":"C ++ program to calculate area of a trapezoid","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function for the area","code":"double Area ( int b1 , int b2 , int h ) { return ( ( b1 + b2 ) \/ 2 ) * h ; }"}
{"text":"Driver Code","code":"int main ( ) { int base1 = 8 , base2 = 10 , height = 6 ; double area = Area ( base1 , base2 , height ) ; cout << \" Area \u2581 is : \u2581 \" << area ; return 0 ; }"}
{"text":"C ++ function to find number of diagonals in n sided convex polygon","code":"#include <iostream> NEW_LINE using namespace std ; int numberOfDiagonals ( int n ) { return n * ( n - 3 ) \/ 2 ; }"}
{"text":"driver code to test above function","code":"int main ( ) { int n = 5 ; cout << n << \" \u2581 sided \u2581 convex \u2581 polygon \u2581 have \u2581 \" ; cout << numberOfDiagonals ( n ) << \" \u2581 diagonals \" ; return 0 ; }"}
{"text":"C ++ implementation to find area of largest Rectangle without hole within a given Rectangle","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the maximum area such that it does not contains any hole","code":"void maximumArea ( int l , int b , int x , int y ) {"}
{"text":"Area for all the possible positions of the cut","code":"int left , right , above , below ; left = x * b ; right = ( l - x - 1 ) * b ; above = l * y ; below = ( b - y - 1 ) * l ;"}
{"text":"Find the maximum area among the above rectangles","code":"cout << max ( max ( left , right ) , max ( above , below ) ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int L = 8 , B = 8 ; int X = 0 , Y = 0 ;"}
{"text":"Function call","code":"maximumArea ( l , b , x , y ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum cost of removing characters to make the string unique","code":"int delCost ( string s , int cost [ ] ) {"}
{"text":"Store the minimum cost required","code":"int ans = 0 ;"}
{"text":"Create a dictionary to store the maximum cost of removal a character","code":"map < char , int > forMax ;"}
{"text":"Create a dictionary to store the total deletion cost of a character","code":"map < char , int > forTot ;"}
{"text":"Traverse the string , S","code":"for ( int i = 0 ; i < s . length ( ) ; i ++ ) {"}
{"text":"Keep track of maximum cost of each character","code":"if ( ! forMax [ s [ i ] ] ) { forMax [ s [ i ] ] = cost [ i ] ; } else {"}
{"text":"Update the maximum deletion cost","code":"forMax [ s [ i ] ] = max ( cost [ i ] , forMax [ s [ i ] ] ) ; }"}
{"text":"Keep track of the total cost of each character","code":"if ( ! forTot [ s [ i ] ] ) { forTot [ s [ i ] ] = cost [ i ] ; } else {"}
{"text":"Update the total deletion cost","code":"forTot [ s [ i ] ] = forTot [ s [ i ] ] + cost [ i ] ; } }"}
{"text":"Traverse through all the unique characters","code":"for ( auto i : forMax ) {"}
{"text":"Keep the maximum cost character and delete the rest","code":"ans += forTot [ i . first ] - i . second ; }"}
{"text":"Return the answer","code":"return ans ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Given string","code":"string s = \" AAABBB \" ;"}
{"text":"Given cost array","code":"int cost [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ;"}
{"text":"Function Call","code":"cout << ( delCost ( s , cost ) ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Define macros","code":"#define MAX  10000 NEW_LINE vector < vector < int > > divisors ( MAX + 1 ) ;"}
{"text":"Stores divisors for all numbers in the vector divisors","code":"void computeDivisors ( ) { for ( int i = 1 ; i <= MAX ; i ++ ) { for ( int j = i ; j <= MAX ; j += i ) {"}
{"text":"i is the divisor and j is the multiple","code":"divisors [ j ] . push_back ( i ) ; } } }"}
{"text":"Function to compare the closeness of the given target","code":"int getClosest ( int val1 , int val2 , int target ) { if ( target - val1 >= val2 - target ) return val2 ; else return val1 ; }"}
{"text":"Function to find the element closest to target in divisors vector","code":"int findClosest ( vector < int > & arr , int n , int target ) {"}
{"text":"Corner cases","code":"if ( target <= arr [ 0 ] ) return arr [ 0 ] ; if ( target >= arr [ n - 1 ] ) return arr [ n - 1 ] ;"}
{"text":"Perform binary search","code":"int i = 0 , j = n , mid = 0 ; while ( i < j ) { mid = ( i + j ) \/ 2 ; if ( arr [ mid ] == target ) return arr [ mid ] ;"}
{"text":"Check if target is less than the array element then search in left half","code":"if ( target < arr [ mid ] ) {"}
{"text":"Check if target is greater than previous to mid , return closest of two","code":"if ( mid > 0 && target > arr [ mid - 1 ] ) return getClosest ( arr [ mid - 1 ] , arr [ mid ] , target ) ;"}
{"text":"Repeat for left half","code":"j = mid ; }"}
{"text":"Check if target is greater than mid","code":"else { if ( mid < n - 1 && target < arr [ mid + 1 ] ) return getClosest ( arr [ mid ] , arr [ mid + 1 ] , target ) ;"}
{"text":"Update i","code":"i = mid + 1 ; } }"}
{"text":"Only single element left after search","code":"return arr [ mid ] ; }"}
{"text":"Function to print the divisor of N closest to X","code":"void printClosest ( int N , int X ) {"}
{"text":"Function call to calculate and stores divisors of all numbers in a vector","code":"computeDivisors ( ) ;"}
{"text":"Stores the closest value to target","code":"int ans = findClosest ( divisors [ N ] , divisors [ N ] . size ( ) , X ) ;"}
{"text":"Print the answer","code":"cout << ans ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given N & X","code":"int N = 16 , X = 5 ;"}
{"text":"Function Call","code":"printClosest ( N , X ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count maximum matched elements from the arrays A [ ] and B [ ]","code":"int maxMatch ( int A [ ] , int B [ ] , int M , int N ) {"}
{"text":"Stores position of elements of array A [ ] in the array B [ ]","code":"map < int , int > Aindex ;"}
{"text":"Keep track of difference between the indices","code":"map < int , int > diff ;"}
{"text":"Traverse the array A [ ]","code":"for ( int i = 0 ; i < M ; i ++ ) { Aindex [ A [ i ] ] = i ; }"}
{"text":"Traverse the array B [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If difference is negative , add N to it","code":"if ( i - Aindex [ B [ i ] ] < 0 ) { diff [ M + i - Aindex [ B [ i ] ] ] += 1 ; }"}
{"text":"Keep track of the number of shifts required to place elements at same indices","code":"else { diff [ i - Aindex [ B [ i ] ] ] += 1 ; } }"}
{"text":"Return the max matches","code":"int max = 0 ; for ( auto ele = diff . begin ( ) ; ele != diff . end ( ) ; ele ++ ) { if ( ele -> second > max ) { max = ele -> second ; } } return max ; }"}
{"text":"Driver code","code":"int main ( ) { int A [ ] = { 5 , 3 , 7 , 9 , 8 } ; int B [ ] = { 8 , 7 , 3 , 5 , 9 } ; int M = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; int N = sizeof ( B ) \/ sizeof ( B [ 0 ] ) ;"}
{"text":"Returns the count of matched elements","code":"cout << maxMatch ( A , B , M , N ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  9"}
{"text":"Function to check if all elements of the board [ ] [ ] array store value in the range [ 1 , 9 ]","code":"bool isinRange ( int board [ ] [ N ] ) {"}
{"text":"Traverse board [ ] [ ] array","code":"for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) {"}
{"text":"Check if board [ i ] [ j ] lies in the range","code":"if ( board [ i ] [ j ] <= 0 board [ i ] [ j ] > 9 ) { return false ; } } } return true ; }"}
{"text":"Function to check if the solution of sudoku puzzle is valid or not","code":"bool isValidSudoku ( int board [ ] [ N ] ) {"}
{"text":"Check if all elements of board [ ] [ ] stores value in the range [ 1 , 9 ]","code":"if ( isinRange ( board ) == false ) { return false ; }"}
{"text":"Stores unique value from 1 to N","code":"bool unique [ N + 1 ] ;"}
{"text":"Traverse each row of the given array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Initialize unique [ ] array to false","code":"memset ( unique , false , sizeof ( unique ) ) ;"}
{"text":"Traverse each column of current row","code":"for ( int j = 0 ; j < N ; j ++ ) {"}
{"text":"Stores the value of board [ i ] [ j ]","code":"int Z = board [ i ] [ j ] ;"}
{"text":"Check if current row stores duplicate value","code":"if ( unique [ Z ] ) { return false ; } unique [ Z ] = true ; } }"}
{"text":"Traverse each column of the given array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Initialize unique [ ] array to false","code":"memset ( unique , false , sizeof ( unique ) ) ;"}
{"text":"Traverse each row of current column","code":"for ( int j = 0 ; j < N ; j ++ ) {"}
{"text":"Stores the value of board [ j ] [ i ]","code":"int Z = board [ j ] [ i ] ;"}
{"text":"Check if current column stores duplicate value","code":"if ( unique [ Z ] ) { return false ; } unique [ Z ] = true ; } }"}
{"text":"Traverse each block of size 3 * 3 in board [ ] [ ] array","code":"for ( int i = 0 ; i < N - 2 ; i += 3 ) {"}
{"text":"j stores first column of each 3 * 3 block","code":"for ( int j = 0 ; j < N - 2 ; j += 3 ) {"}
{"text":"Initialize unique [ ] array to false","code":"memset ( unique , false , sizeof ( unique ) ) ;"}
{"text":"Traverse current block","code":"for ( int k = 0 ; k < 3 ; k ++ ) { for ( int l = 0 ; l < 3 ; l ++ ) {"}
{"text":"Stores row number of current block","code":"int X = i + k ;"}
{"text":"Stores column number of current block","code":"int Y = j + l ;"}
{"text":"Stores the value of board [ X ] [ Y ]","code":"int Z = board [ X ] [ Y ] ;"}
{"text":"Check if current block stores duplicate value","code":"if ( unique [ Z ] ) { return false ; } unique [ Z ] = true ; } } } }"}
{"text":"If all conditions satisfied","code":"return true ; }"}
{"text":"Driver Code","code":"int main ( ) { int board [ N ] [ N ] = { { 7 , 9 , 2 , 1 , 5 , 4 , 3 , 8 , 6 } , { 6 , 4 , 3 , 8 , 2 , 7 , 1 , 5 , 9 } , { 8 , 5 , 1 , 3 , 9 , 6 , 7 , 2 , 4 } , { 2 , 6 , 5 , 9 , 7 , 3 , 8 , 4 , 1 } , { 4 , 8 , 9 , 5 , 6 , 1 , 2 , 7 , 3 } , { 3 , 1 , 7 , 4 , 8 , 2 , 9 , 6 , 5 } , { 1 , 3 , 6 , 7 , 4 , 8 , 5 , 9 , 2 } , { 9 , 7 , 4 , 2 , 1 , 5 , 6 , 3 , 8 } , { 5 , 2 , 8 , 6 , 3 , 9 , 4 , 1 , 7 } } ; if ( isValidSudoku ( board ) ) { cout << \" Valid \" ; } else { cout << \" Not \u2581 Valid \" ; } }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if a number is Palindrome or not here i is the starting index and j is the last index of the subarray","code":"bool palindrome ( vector < int > a , int i , int j ) { while ( i < j ) {"}
{"text":"If the integer at i is not equal to j then the subarray is not palindrome","code":"if ( a [ i ] != a [ j ] ) return false ;"}
{"text":"Otherwise","code":"i ++ ; j -- ; }"}
{"text":"all a [ i ] is equal to a [ j ] then the subarray is palindrome","code":"return true ; }"}
{"text":"Function to find a subarray whose concatenation forms a palindrome and return its starting index","code":"int findSubArray ( vector < int > arr , int k ) { int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Iterating over subarray of length k and checking if that subarray is palindrome","code":"for ( int i = 0 ; i <= n - k ; i ++ ) { if ( palindrome ( arr , i , i + k - 1 ) ) return i ; }"}
{"text":"If no subarray is palindrome","code":"return -1 ; }"}
{"text":"Driver Code","code":"int main ( ) { vector < int > arr = { 2 , 3 , 5 , 1 , 3 } ; int k = 4 ; int ans = findSubArray ( arr , k ) ; if ( ans == -1 ) cout << -1 << \" STRNEWLINE \" ; else { for ( int i = ans ; i < ans + k ; i ++ ) cout << arr [ i ] << \" \u2581 \" ; cout << \" STRNEWLINE \" ; } return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if the man crosses previous visited coordinate or not","code":"bool isCrossed ( string path ) { if ( path . size ( ) == 0 ) return false ;"}
{"text":"Stores the count of crossed vertex","code":"bool ans = false ;"}
{"text":"Stores ( x , y ) coordinates","code":"set < pair < int , int > > set ;"}
{"text":"The coordinates for the origin","code":"int x = 0 , y = 0 ; set . insert ( { x , y } ) ;"}
{"text":"Iterate over the string","code":"for ( int i = 0 ; i < path . size ( ) ; i ++ ) {"}
{"text":"Condition to increment X or Y co - ordinates respectively","code":"if ( path [ i ] == ' N ' ) set . insert ( { x , y ++ } ) ; if ( path [ i ] == ' S ' ) set . insert ( { x , y -- } ) ; if ( path [ i ] == ' E ' ) set . insert ( { x ++ , y } ) ; if ( path [ i ] == ' W ' ) set . insert ( { x -- , y } ) ;"}
{"text":"Check if ( x , y ) is already visited","code":"if ( set . find ( { x , y } ) != set . end ( ) ) { ans = true ; break ; } }"}
{"text":"Print the result","code":"if ( ans ) cout << \" Crossed \" ; else cout << \" Not \u2581 Crossed \" ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given string","code":"string path = \" NESW \" ;"}
{"text":"Function Call","code":"isCrossed ( path ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the maximum width of the tree using level order traversal","code":"int maxWidth ( int N , int M , vector < int > cost , vector < vector < int > > s ) {"}
{"text":"Store the edges of the tree","code":"vector < int > adj [ N ] ; for ( int i = 0 ; i < M ; i ++ ) { adj [ s [ i ] [ 0 ] ] . push_back ( s [ i ] [ 1 ] ) ; }"}
{"text":"Stores maximum width of the tree","code":"int result = 0 ;"}
{"text":"Stores the nodes of each level","code":"queue < int > q ;"}
{"text":"Insert root node","code":"q . push ( 0 ) ;"}
{"text":"Perform level order traversal on the tree","code":"while ( ! q . empty ( ) ) {"}
{"text":"Stores the size of the queue","code":"int count = q . size ( ) ;"}
{"text":"Update maximum width","code":"result = max ( count , result ) ;"}
{"text":"Push the nodes of the next level and pop the elements of the current level","code":"while ( count -- ) {"}
{"text":"Get element from the front the Queue","code":"int temp = q . front ( ) ; q . pop ( ) ;"}
{"text":"Push all nodes of the next level .","code":"for ( int i = 0 ; i < adj [ temp ] . size ( ) ; i ++ ) { q . push ( adj [ temp ] [ i ] ) ; } } }"}
{"text":"Return the result .","code":"return result ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 11 , M = 10 ; vector < vector < int > > edges ; edges . push_back ( { 0 , 1 } ) ; edges . push_back ( { 0 , 2 } ) ; edges . push_back ( { 0 , 3 } ) ; edges . push_back ( { 1 , 4 } ) ; edges . push_back ( { 1 , 5 } ) ; edges . push_back ( { 3 , 6 } ) ; edges . push_back ( { 4 , 7 } ) ; edges . push_back ( { 6 , 10 } ) ; edges . push_back ( { 6 , 8 } ) ; edges . push_back ( { 6 , 9 } ) ; vector < int > cost = { 1 , 2 , -1 , 3 , 4 , 5 , 8 , 2 , 6 , 12 , 7 } ;"}
{"text":"Constructed tree is : 1 \/ | \\ 2 - 1 3 \/ \\ \\ 4 5 8 \/ \/ | \\ 2 6 12 7","code":"cout << maxWidth ( N , M , cost , edges ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define MAX  10000000"}
{"text":"Stores if an index is a prime \/ non - prime value","code":"bool isPrime [ MAX ] ;"}
{"text":"Stores the prime","code":"vector < int > primes ;"}
{"text":"Function to generate all prime numbers","code":"void SieveOfEratosthenes ( ) { memset ( isPrime , true , sizeof ( isPrime ) ) ; for ( int p = 2 ; p * p <= MAX ; p ++ ) {"}
{"text":"If current element is prime","code":"if ( isPrime [ p ] == true ) {"}
{"text":"Set all its multiples non - prime","code":"for ( int i = p * p ; i <= MAX ; i += p ) isPrime [ i ] = false ; } }"}
{"text":"Store all prime numbers","code":"for ( int p = 2 ; p <= MAX ; p ++ ) if ( isPrime [ p ] ) primes . push_back ( p ) ; }"}
{"text":"Function to find the closest prime to a particular number","code":"int prime_search ( vector < int > primes , int diff ) {"}
{"text":"Applying binary search on primes vector","code":"int low = 0 ; int high = primes . size ( ) - 1 ; int res ; while ( low <= high ) { int mid = ( low + high ) \/ 2 ;"}
{"text":"If the prime added makes the elements equal","code":"if ( primes [ mid ] == diff ) {"}
{"text":"Return this as the closest prime","code":"return primes [ mid ] ; }"}
{"text":"If the array remains non - decreasing","code":"else if ( primes [ mid ] < diff ) {"}
{"text":"Search for a bigger prime number","code":"low = mid + 1 ; }"}
{"text":"Otherwise","code":"else { res = primes [ mid ] ;"}
{"text":"Check if a smaller prime can make array non - decreasing or not","code":"high = mid - 1 ; } }"}
{"text":"Return closest number","code":"return res ; }"}
{"text":"Function to find the minimum cost","code":"int minCost ( int arr [ ] , int n ) {"}
{"text":"Find all primes","code":"SieveOfEratosthenes ( ) ;"}
{"text":"Store the result","code":"int res = 0 ;"}
{"text":"Iterate over the array","code":"for ( int i = 1 ; i < n ; i ++ ) {"}
{"text":"Current element is less than the previous element","code":"if ( arr [ i ] < arr [ i - 1 ] ) { int diff = arr [ i - 1 ] - arr [ i ] ;"}
{"text":"Find the closest prime which makes the array non decreasing","code":"int closest_prime = prime_search ( primes , diff ) ;"}
{"text":"Add to overall cost","code":"res += closest_prime ;"}
{"text":"Update current element","code":"arr [ i ] += closest_prime ; } }"}
{"text":"Return the minimum cost","code":"return res ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 2 , 1 , 5 , 4 , 3 } ; int n = 5 ;"}
{"text":"Function Call","code":"cout << minCost ( arr , n ) ; return 0 ; }"}
{"text":"C ++ implementation for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return ways to split a string into three parts with the equal number of 0","code":"int count ( string s ) {"}
{"text":"Store total count of 0 s","code":"int cnt = 0 ;"}
{"text":"Count total no . of 0 s character in given string","code":"for ( char c : s ) { cnt += c == '0' ? 1 : 0 ; }"}
{"text":"If total count of 0 character is not divisible by 3","code":"if ( cnt % 3 != 0 ) return 0 ; int res = 0 , k = cnt \/ 3 , sum = 0 ;"}
{"text":"Initialize mp to store frequency of k","code":"map < int , int > mp ;"}
{"text":"Traverse string to find ways to split string","code":"for ( int i = 0 ; i < s . length ( ) ; i ++ ) {"}
{"text":"Increment count if 0 appears","code":"sum += s [ i ] == '0' ? 1 : 0 ;"}
{"text":"Increment result if sum equal to 2 * k and k exists in mp","code":"if ( sum == 2 * k && mp . find ( k ) != mp . end ( ) && i < s . length ( ) - 1 && i > 0 ) { res += mp [ k ] ; }"}
{"text":"Insert sum in mp","code":"mp [ sum ] ++ ; }"}
{"text":"Return result","code":"return res ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given string","code":"string str = \"01010\" ;"}
{"text":"Function call","code":"cout << count ( str ) ; }"}
{"text":"C ++ program for above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the number of ways to split","code":"int splitstring ( string s ) { int n = s . length ( ) ;"}
{"text":"Calculating the total number of zeros","code":"int zeros = 0 ; for ( int i = 0 ; i < n ; i ++ ) if ( s [ i ] == '0' ) zeros ++ ;"}
{"text":"Case1 If total count of zeros is not divisible by 3","code":"if ( zeros % 3 != 0 ) return 0 ;"}
{"text":"Case2 if total count of zeros is zero","code":"if ( zeros == 0 ) return ( ( n - 1 ) * ( n - 2 ) ) \/ 2 ;"}
{"text":"Number of zeros in each substring","code":"int zerosInEachSubstring = zeros \/ 3 ;"}
{"text":"Initialising zero to the number of ways for first and second cut","code":"int waysOfFirstCut = 0 , waysOfSecondCut = 0 ;"}
{"text":"Initializing the count","code":"int count = 0 ;"}
{"text":"Traversing from the beginning","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Incrementing the count if the element is '0'","code":"if ( s [ i ] == '0' ) count ++ ;"}
{"text":"Incrementing the ways for the 1 st cut if count is equal to zeros required in each substring","code":"if ( count == zerosInEachSubstring ) waysOfFirstCut ++ ;"}
{"text":"Incrementing the ways for the 2 nd cut if count is equal to 2 * ( zeros required in each substring )","code":"else if ( count == 2 * zerosInEachSubstring ) waysOfSecondCut ++ ; }"}
{"text":"Total number of ways to split is multiplication of ways for the 1 st and 2 nd cut","code":"return waysOfFirstCut * waysOfSecondCut ; }"}
{"text":"Driver Code","code":"int main ( ) { string s = \"01010\" ;"}
{"text":"Function Call","code":"cout << \" The \u2581 number \u2581 of \u2581 ways \u2581 to \u2581 split \u2581 is \u2581 \" << splitstring ( s ) << endl ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if it is possible to transform start to end","code":"bool canTransform ( string str1 , string str2 ) { string s1 = \" \" ; string s2 = \" \" ;"}
{"text":"Check the sequence of A , B in both strings str1 and str2","code":"for ( char c : str1 ) { if ( c != ' C ' ) { s1 += c ; } } for ( char c : str2 ) { if ( c != ' C ' ) { s2 += c ; } }"}
{"text":"If both the strings are not equal","code":"if ( s1 != s2 ) return false ; int i = 0 ; int j = 0 ; int n = str1 . length ( ) ;"}
{"text":"Traverse the strings","code":"while ( i < n and j < n ) { if ( str1 [ i ] == ' C ' ) { i ++ ; } else if ( str2 [ j ] == ' C ' ) { j ++ ; }"}
{"text":"Check for indexes of A and B","code":"else { if ( ( str1 [ i ] == ' A ' and i < j ) or ( str1 [ i ] == ' B ' and i > j ) ) { return false ; } i ++ ; j ++ ; } } return true ; }"}
{"text":"Driver Code","code":"int main ( ) { string str1 = \" BCCABCBCA \" ; string str2 = \" CBACCBBAC \" ;"}
{"text":"Function Call","code":"if ( canTransform ( str1 , str2 ) ) { cout << \" Yes \" ; } else { cout << \" No \" ; } return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the length of the longest substring having equal number of vowel and consonant","code":"int maxsubstringLength ( string S , int N ) { int arr [ N ] ;"}
{"text":"Generate the array","code":"for ( int i = 0 ; i < N ; i ++ ) if ( S [ i ] == ' a ' S [ i ] == ' e ' S [ i ] == ' i ' S [ i ] == ' o ' S [ i ] == ' u ' ) arr [ i ] = 1 ; else arr [ i ] = -1 ;"}
{"text":"Initialize variable to store result","code":"int maxLen = 0 ;"}
{"text":"Stores the sum of subarray","code":"int curr_sum = 0 ;"}
{"text":"Map to store indices of the sum","code":"unordered_map < int , int > hash ;"}
{"text":"Loop through the array","code":"for ( int i = 0 ; i < N ; i ++ ) { curr_sum += arr [ i ] ;"}
{"text":"If sum is 0","code":"if ( curr_sum == 0 )"}
{"text":"Count of vowels and consonants are equal","code":"maxLen = max ( maxLen , i + 1 ) ;"}
{"text":"Update the maximum length of substring in HashMap","code":"if ( hash . find ( curr_sum ) != hash . end ( ) ) maxLen = max ( maxLen , i - hash [ curr_sum ] ) ;"}
{"text":"Store the index of the sum","code":"else hash [ curr_sum ] = i ; }"}
{"text":"Return the maximum length of required substring","code":"return maxLen ; }"}
{"text":"Driver Code","code":"int main ( ) { string S = \" geeksforgeeks \" ; int n = sizeof ( S ) \/ sizeof ( S [ 0 ] ) ; cout << maxsubstringLength ( S , n ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; int mat [ 1001 ] [ 1001 ] ; int r , c , x , y ;"}
{"text":"Stores the accessible directions","code":"int dx [ ] = { 0 , -1 , -1 , -1 , 0 , 1 , 1 , 1 } ; int dy [ ] = { 1 , 1 , 0 , -1 , -1 , -1 , 0 , 1 } ;"}
{"text":"Function to find the minimum distance from a given cell to all other cells in the matrix","code":"void FindMinimumDistance ( ) {"}
{"text":"Stores the accessible cells from current cell","code":"queue < pair < int , int > > q ;"}
{"text":"Insert pair ( x , y )","code":"q . push ( { x , y } ) ; mat [ x ] [ y ] = 0 ;"}
{"text":"Iterate untill queue is empty","code":"while ( ! q . empty ( ) ) {"}
{"text":"Extract the pair","code":"x = q . front ( ) . first ; y = q . front ( ) . second ;"}
{"text":"Pop them","code":"q . pop ( ) ; for ( int i = 0 ; i < 8 ; i ++ ) { int a = x + dx [ i ] ; int b = y + dy [ i ] ;"}
{"text":"Checking boundary condition","code":"if ( a < 0 a > = r b >= c b < 0 ) continue ;"}
{"text":"If the cell is not visited","code":"if ( mat [ a ] [ b ] == 0 ) {"}
{"text":"Assign the minimum distance","code":"mat [ a ] [ b ] = mat [ x ] [ y ] + 1 ;"}
{"text":"Insert the traversed neighbour into the queue","code":"q . push ( { a , b } ) ; } } } }"}
{"text":"Driver Code","code":"int main ( ) { r = 5 , c = 5 , x = 1 , y = 1 ; int t = x ; int l = y ; mat [ x ] [ y ] = 0 ; FindMinimumDistance ( ) ; mat [ t ] [ l ] = 0 ;"}
{"text":"Print the required distances","code":"for ( int i = 0 ; i < r ; i ++ ) { for ( int j = 0 ; j < c ; j ++ ) { cout << mat [ i ] [ j ] << \" \u2581 \" ; } cout << endl ; } }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns the minimum number of flips to convert the s into a concatenation of K - length sub - string","code":"int minOperations ( string S , int K ) {"}
{"text":"Stores the result","code":"int ans = 0 ;"}
{"text":"Iterate through string index","code":"for ( int i = 0 ; i < K ; i ++ ) {"}
{"text":"Stores count of 0 s & 1 s","code":"int zero = 0 , one = 0 ;"}
{"text":"Iterate making K jumps","code":"for ( int j = i ; j < S . size ( ) ; j += K ) {"}
{"text":"Count 0 's","code":"if ( S [ j ] == '0' ) zero ++ ;"}
{"text":"Count 1 's","code":"else one ++ ; }"}
{"text":"Add minimum flips for index i","code":"ans += min ( zero , one ) ; }"}
{"text":"Return minimum number of flips","code":"return ans ; }"}
{"text":"Driver Code","code":"int main ( ) { string S = \"110100101\" ; int K = 3 ; cout << minOperations ( S , K ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to get the missing element","code":"int missingElement ( int arr [ ] , int n ) {"}
{"text":"For maximum Element in the array","code":"int max_ele = arr [ 0 ] ;"}
{"text":"For minimum Element in the array","code":"int min_ele = arr [ 0 ] ;"}
{"text":"For xor of all elements","code":"int x = 0 ;"}
{"text":"Common difference of AP series","code":"int d ;"}
{"text":"find maximum and minimum element","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > max_ele ) max_ele = arr [ i ] ; if ( arr [ i ] < min_ele ) min_ele = arr [ i ] ; }"}
{"text":"Calculating common difference","code":"d = ( max_ele - min_ele ) \/ n ;"}
{"text":"Calculate the XOR of all elements","code":"for ( int i = 0 ; i < n ; i ++ ) { x = x ^ arr [ i ] ; }"}
{"text":"Perform XOR with actual AP series resultant x will be the ans","code":"for ( int i = 0 ; i <= n ; i ++ ) { x = x ^ ( min_ele + ( i * d ) ) ; }"}
{"text":"Return the missing element","code":"return x ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array","code":"int arr [ ] = { 12 , 3 , 6 , 15 , 18 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ;"}
{"text":"Function Call","code":"int element = missingElement ( arr , n ) ;"}
{"text":"Print the missing element","code":"cout << element ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to prints kth sub - string","code":"void Printksubstring ( string str , int n , int k ) {"}
{"text":"Total sub - strings possible","code":"int total = ( n * ( n + 1 ) ) \/ 2 ;"}
{"text":"If k is greater than total number of sub - strings","code":"if ( k > total ) { printf ( \" - 1 STRNEWLINE \" ) ; return ; }"}
{"text":"To store number of sub - strings starting with ith character of the string","code":"int substring [ n + 1 ] ; substring [ 0 ] = 0 ;"}
{"text":"Compute the values","code":"int temp = n ; for ( int i = 1 ; i <= n ; i ++ ) {"}
{"text":"substring [ i - 1 ] is added to store the cumulative sum","code":"substring [ i ] = substring [ i - 1 ] + temp ; temp -- ; }"}
{"text":"Binary search to find the starting index of the kth sub - string","code":"int l = 1 ; int h = n ; int start = 0 ; while ( l <= h ) { int m = ( l + h ) \/ 2 ; if ( substring [ m ] > k ) { start = m ; h = m - 1 ; } else if ( substring [ m ] < k ) l = m + 1 ; else { start = m ; break ; } }"}
{"text":"To store the ending index of the kth sub - string","code":"int end = n - ( substring [ start ] - k ) ;"}
{"text":"Print the sub - string","code":"for ( int i = start - 1 ; i < end ; i ++ ) cout << str [ i ] ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" abc \" ; int k = 4 ; int n = str . length ( ) ; Printksubstring ( str , n , k ) ; return 0 ; }"}
{"text":"C ++ program to find the lower insertion point of an element in a sorted array","code":"#include <iostream> NEW_LINE using namespace std ;"}
{"text":"Function to return the lower insertion point of an element in a sorted array","code":"int LowerInsertionPoint ( int arr [ ] , int n , int X ) {"}
{"text":"Base cases","code":"if ( X < arr [ 0 ] ) return 0 ; else if ( X > arr [ n - 1 ] ) return n ; int lowerPnt = 0 ; int i = 1 ; while ( i < n && arr [ i ] < X ) { lowerPnt = i ; i = i * 2 ; }"}
{"text":"Final check for the remaining elements which are < X","code":"while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++ ; return lowerPnt ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 2 , 3 , 4 , 4 , 5 , 6 , 7 , 9 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int X = 4 ; cout << LowerInsertionPoint ( arr , n , X ) ; return 0 ; }"}
{"text":"CPP Program to count the number of positions with same address in row major and column major order","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Returns count of required positions","code":"int getCount ( int M , int N ) { int count = 0 ;"}
{"text":"horizontal 1D array","code":"if ( M == 1 ) return N ;"}
{"text":"vertical 1D array","code":"if ( N == 1 ) return M ; if ( N > M ) {"}
{"text":"iterating for all possible i","code":"for ( int i = 1 ; i <= M ; i ++ ) { int numerator = N * i - N + M - i ; int denominator = M - 1 ;"}
{"text":"checking if j is integer","code":"if ( numerator % denominator == 0 ) { int j = numerator \/ denominator ;"}
{"text":"checking if j lies b \/ w 1 to N","code":"if ( j >= 1 && j <= N ) count ++ ; } } } else {"}
{"text":"iterating for all possible j","code":"for ( int j = 1 ; j <= N ; j ++ ) { int numerator = M * j - M + N - j ; int denominator = N - 1 ;"}
{"text":"checking if i is integer","code":"if ( numerator % denominator == 0 ) { int i = numerator \/ denominator ;"}
{"text":"checking if i lies b \/ w 1 to M","code":"if ( i >= 1 && i <= M ) count ++ ; } } } return count ; }"}
{"text":"Driver Code","code":"int main ( ) { int M = 3 , N = 5 ; cout << getCount ( M , N ) << endl ; return 0 ; }"}
{"text":"C ++ program to make array sorted","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check whether there is any swappable element present to make the first array sorted","code":"bool swapElement ( int arr1 [ ] , int arr2 [ ] , int n ) {"}
{"text":"wrongIdx is the index of the element which is making the first array unsorted","code":"int wrongIdx = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr1 [ i ] < arr1 [ i - 1 ] ) wrongIdx = i ; int maximum = INT_MIN ; int maxIdx = -1 ; bool res = false ;"}
{"text":"Find the maximum element which satisfies the the above mentioned neighboring conditions","code":"for ( int i = 0 ; i < n ; i ++ ) { if ( arr2 [ i ] > maximum && arr2 [ i ] >= arr1 [ wrongIdx - 1 ] ) { if ( wrongIdx + 1 <= n - 1 && arr2 [ i ] <= arr1 [ wrongIdx + 1 ] ) { maximum = arr2 [ i ] ; maxIdx = i ; res = true ; } } }"}
{"text":"if res is true then swap the element and make the first array sorted","code":"if ( res ) swap ( arr1 [ wrongIdx ] , arr2 [ maxIdx ] ) ; return res ; }"}
{"text":"Function to print the sorted array if elements are swapped .","code":"void getSortedArray ( int arr1 [ ] , int arr2 [ ] , int n ) { if ( swapElement ( arr1 , arr2 , n ) ) for ( int i = 0 ; i < n ; i ++ ) cout << arr1 [ i ] << \" \u2581 \" ; else cout << \" Not \u2581 Possible \" << endl ; }"}
{"text":"Drivers code","code":"int main ( ) { int arr1 [ ] = { 1 , 3 , 7 , 4 , 10 } ; int arr2 [ ] = { 2 , 1 , 6 , 8 , 9 } ; int n = sizeof ( arr1 ) \/ sizeof ( arr1 [ 0 ] ) ; getSortedArray ( arr1 , arr2 , n ) ; }"}
{"text":"CPP program to find middle of three distinct numbers","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the middle of three numbers","code":"int middleOfThree ( int a , int b , int c ) {"}
{"text":"Compare each three number to find middle number . Enter only if a > b","code":"if ( a > b ) { if ( b > c ) return b ; else if ( a > c ) return c ; else return a ; } else {"}
{"text":"Decided a is not greater than b .","code":"if ( a > c ) return a ; else if ( b > c ) return c ; else return b ; } }"}
{"text":"Driver Code","code":"int main ( ) { int a = 20 , b = 30 , c = 40 ; cout << middleOfThree ( a , b , c ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the transpose of the matrix mat [ ]","code":"vector < vector < int > > transpose ( vector < vector < int > > mat , int row , int col ) {"}
{"text":"Stores the transpose of matrix mat [ ] [ ]","code":"vector < vector < int > > tr ( col , vector < int > ( row ) ) ;"}
{"text":"Traverse each row of the matrix","code":"for ( int i = 0 ; i < row ; i ++ ) {"}
{"text":"Traverse each column of the matrix","code":"for ( int j = 0 ; j < col ; j ++ ) {"}
{"text":"Transpose matrix elements","code":"tr [ j ] [ i ] = mat [ i ] [ j ] ; } } return tr ; }"}
{"text":"Function to sort the given matrix in row wise manner","code":"void RowWiseSort ( vector < vector < int > > & B ) {"}
{"text":"Traverse the row","code":"for ( int i = 0 ; i < ( int ) B . size ( ) ; i ++ ) {"}
{"text":"Row - Wise Sorting","code":"sort ( B [ i ] . begin ( ) , B [ i ] . end ( ) ) ; } }"}
{"text":"Function to print the matrix in column wise sorted manner","code":"void sortCol ( vector < vector < int > > mat , int N , int M ) {"}
{"text":"Function call to find transpose of the the matrix mat [ ] [ ]","code":"vector < vector < int > > B = transpose ( mat , N , M ) ;"}
{"text":"Sorting the matrix row - wise","code":"RowWiseSort ( B ) ;"}
{"text":"Calculate transpose of B [ ] [ ]","code":"mat = transpose ( B , M , N ) ;"}
{"text":"Print the matrix mat [ ] [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < M ; j ++ ) { cout << mat [ i ] [ j ] << \" \u2581 \" ; } cout << ' ' ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input","code":"vector < vector < int > > mat = { { 1 , 6 , 10 } , { 8 , 5 , 9 } , { 9 , 4 , 15 } , { 7 , 3 , 60 } } ; int N = mat . size ( ) ; int M = mat [ 0 ] . size ( ) ;"}
{"text":"Function call to print the matrix in column wise sorted manner","code":"sortCol ( mat , N , M ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the largest area when a series of horizontal & vertical bars are removed","code":"void largestArea ( int N , int M , int H [ ] , int V [ ] , int h , int v ) {"}
{"text":"Stores all bars","code":"set < int > s1 ; set < int > s2 ;"}
{"text":"Insert horizontal bars","code":"for ( int i = 1 ; i <= N + 1 ; i ++ ) s1 . insert ( i ) ;"}
{"text":"Insert vertictal bars","code":"for ( int i = 1 ; i <= M + 1 ; i ++ ) s2 . insert ( i ) ;"}
{"text":"Remove horizontal separators from s1","code":"for ( int i = 0 ; i < h ; i ++ ) { s1 . erase ( H [ i ] ) ; }"}
{"text":"Remove vertical separators from s2","code":"for ( int i = 0 ; i < v ; i ++ ) { s2 . erase ( V [ i ] ) ; }"}
{"text":"Stores left out horizontal and vertical separators","code":"int list1 [ s1 . size ( ) ] ; int list2 [ s2 . size ( ) ] ; int i = 0 ; for ( auto it1 = s1 . begin ( ) ; it1 != s1 . end ( ) ; it1 ++ ) { list1 [ i ++ ] = * it1 ; } i = 0 ; for ( auto it2 = s2 . begin ( ) ; it2 != s2 . end ( ) ; it2 ++ ) { list2 [ i ++ ] = * it2 ; }"}
{"text":"Sort both list in ascending order","code":"sort ( list1 , list1 + s1 . size ( ) ) ; sort ( list2 , list2 + s2 . size ( ) ) ; int maxH = 0 , p1 = 0 , maxV = 0 , p2 = 0 ;"}
{"text":"Find maximum difference of neighbors of list1","code":"for ( int j = 0 ; j < s1 . size ( ) ; j ++ ) { maxH = max ( maxH , list1 [ j ] - p1 ) ; p1 = list1 [ j ] ; }"}
{"text":"Find max difference of neighbors of list2","code":"for ( int j = 0 ; j < s2 . size ( ) ; j ++ ) { maxV = max ( maxV , list2 [ j ] - p2 ) ; p2 = list2 [ j ] ; }"}
{"text":"Print largest volume","code":"cout << ( maxV * maxH ) << endl ; }"}
{"text":"Driver code","code":"int main ( ) {"}
{"text":"Given value of N & M","code":"int N = 3 , M = 3 ;"}
{"text":"Given arrays","code":"int H [ ] = { 2 } ; int V [ ] = { 2 } ; int h = sizeof ( H ) \/ sizeof ( H [ 0 ] ) ; int v = sizeof ( V ) \/ sizeof ( V [ 0 ] ) ;"}
{"text":"Function call to find the largest area when a series of horizontal & vertical bars are removed","code":"largestArea ( N , M , H , V , h , v ) ; return 0 ; }"}
{"text":"C ++ Program for above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if array , A [ ] can be converted into sorted array by swapping ( A [ i ] , A [ j ] ) if B [ i ] not equal to B [ j ]","code":"bool checkifSorted ( int A [ ] , int B [ ] , int N ) {"}
{"text":"Stores if array A [ ] is sorted in descending order or not","code":"bool flag = false ;"}
{"text":"Traverse the array A [ ]","code":"for ( int i = 0 ; i < N - 1 ; i ++ ) {"}
{"text":"If A [ i ] is greater than A [ i + 1 ]","code":"if ( A [ i ] > A [ i + 1 ] ) {"}
{"text":"Update flag","code":"flag = true ; break ; } }"}
{"text":"If array is sorted in ascending order","code":"if ( ! flag ) { return true ; }"}
{"text":"count = 2 : Check if 0 s and 1 s both present in the B [ ]","code":"int count = 0 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If current element is 0","code":"if ( B [ i ] == 0 ) {"}
{"text":"Update count","code":"count ++ ; break ; } }"}
{"text":"Traverse the array B [ ]","code":"for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"If current element is 1","code":"if ( B [ i ] == 1 ) { count ++ ; break ; } }"}
{"text":"If both 0 s and 1 s are present in the array","code":"if ( count == 2 ) { return true ; } return false ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Input array A [ ]","code":"int A [ ] = { 3 , 1 , 2 } ;"}
{"text":"Input array B [ ]","code":"int B [ ] = { 0 , 1 , 1 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ;"}
{"text":"Function call","code":"bool check = checkifSorted ( A , B , N ) ;"}
{"text":"If true , print YES","code":"if ( check ) { cout << \" YES \" << endl ; }"}
{"text":"Else print NO","code":"else { cout << \" NO \" << endl ; } return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the minimum number of steps to make A > B","code":"int minSteps ( string A , string B , int M , int N ) { if ( A [ 0 ] > B [ 0 ] ) return 0 ; if ( B [ 0 ] > A [ 0 ] ) { return 1 ; }"}
{"text":"If all character are same and M <= N","code":"if ( M <= N && A [ 0 ] == B [ 0 ] && count ( A . begin ( ) , A . end ( ) , A [ 0 ] ) == M && count ( B . begin ( ) , B . end ( ) , B [ 0 ] ) == N ) return -1 ;"}
{"text":"If there lies any character in B which is greater than B [ 0 ]","code":"for ( int i = 1 ; i < N ; i ++ ) { if ( B [ i ] > B [ 0 ] ) return 1 ; }"}
{"text":"If there lies any character in A which is smaller than A [ 0 ]","code":"for ( int i = 1 ; i < M ; i ++ ) { if ( A [ i ] < A [ 0 ] ) return 1 ; }"}
{"text":"If there lies a character which is in A and greater than A [ 0 ]","code":"for ( int i = 1 ; i < M ; i ++ ) { if ( A [ i ] > A [ 0 ] ) { swap ( A [ i ] , B [ 0 ] ) ; swap ( A [ 0 ] , B [ 0 ] ) ; return 2 ; } }"}
{"text":"If there lies a character which is in B and less than B [ 0 ]","code":"for ( int i = 1 ; i < N ; i ++ ) { if ( B [ i ] < B [ 0 ] ) { swap ( A [ 0 ] , B [ i ] ) ; swap ( A [ 0 ] , B [ 0 ] ) ; return 2 ; } }"}
{"text":"Otherwise","code":"return 0 ; }"}
{"text":"Driver Code","code":"int main ( ) { string A = \" adsfd \" ; string B = \" dffff \" ; int M = A . length ( ) ; int N = B . length ( ) ; cout << minSteps ( A , B , M , N ) ; return 0 ; }"}
{"text":"C ++ algorithm of above approach","code":"#include <bits\/stdc++.h> NEW_LINE #include <vector> NEW_LINE using namespace std ;"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 4 , 7 , 2 , 3 , 9 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; int count = minOperations ( arr , n ) ; cout << count ; }"}
{"text":"Function to find minimum number of operation required so that array becomes meaningful","code":"int minOperations ( int arr [ ] , int n ) {"}
{"text":"Initializing vector of pair type which contains value and index of arr","code":"vector < pair < int , int > > vect ; for ( int i = 0 ; i < n ; i ++ ) { vect . push_back ( make_pair ( arr [ i ] , i ) ) ; }"}
{"text":"Sorting array num on the basis of value","code":"sort ( vect . begin ( ) , vect . end ( ) ) ;"}
{"text":"Initializing variables used to find maximum length of increasing streak in index","code":"int res = 1 ; int streak = 1 ; int prev = vect [ 0 ] . second ; for ( int i = 1 ; i < n ; i ++ ) { if ( prev < vect [ i ] . second ) { res ++ ;"}
{"text":"Updating streak","code":"streak = max ( streak , res ) ; } else res = 1 ; prev = vect [ i ] . second ; }"}
{"text":"Returning number of elements left except streak","code":"return n - streak ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define maxN  201"}
{"text":"Variables which represent the size of the array","code":"int n1 , n2 , n3 ;"}
{"text":"Stores the results","code":"int dp [ maxN ] [ maxN ] [ maxN ] ;"}
{"text":"Function to return the maximum possible sum","code":"int getMaxSum ( int i , int j , int k , int arr1 [ ] , int arr2 [ ] , int arr3 [ ] ) {"}
{"text":"Stores the count of arrays processed","code":"int cnt = 0 ; if ( i >= n1 ) cnt ++ ; if ( j >= n2 ) cnt ++ ; if ( k >= n3 ) cnt ++ ;"}
{"text":"If more than two arrays have been processed","code":"if ( cnt >= 2 ) return 0 ;"}
{"text":"If an already computed subproblem occurred","code":"if ( dp [ i ] [ j ] [ k ] != -1 ) return dp [ i ] [ j ] [ k ] ; int ans = 0 ;"}
{"text":"Explore all the possible pairs","code":"if ( i < n1 && j < n2 )"}
{"text":"Recursive function call","code":"ans = max ( ans , getMaxSum ( i + 1 , j + 1 , k , arr1 , arr2 , arr3 ) + arr1 [ i ] * arr2 [ j ] ) ; if ( i < n1 && k < n3 ) ans = max ( ans , getMaxSum ( i + 1 , j , k + 1 , arr1 , arr2 , arr3 ) + arr1 [ i ] * arr3 [ k ] ) ; if ( j < n2 && k < n3 ) ans = max ( ans , getMaxSum ( i , j + 1 , k + 1 , arr1 , arr2 , arr3 ) + arr2 [ j ] * arr3 [ k ] ) ;"}
{"text":"Memoize the maximum","code":"dp [ i ] [ j ] [ k ] = ans ;"}
{"text":"Returning the value","code":"return dp [ i ] [ j ] [ k ] ; }"}
{"text":"Function to return the maximum sum of products of pairs possible","code":"int maxProductSum ( int arr1 [ ] , int arr2 [ ] , int arr3 [ ] ) {"}
{"text":"Initialising the dp array to - 1","code":"memset ( dp , -1 , sizeof ( dp ) ) ;"}
{"text":"Sort the arrays in descending order","code":"sort ( arr1 , arr1 + n1 ) ; reverse ( arr1 , arr1 + n1 ) ; sort ( arr2 , arr2 + n2 ) ; reverse ( arr2 , arr2 + n2 ) ; sort ( arr3 , arr3 + n3 ) ; reverse ( arr3 , arr3 + n3 ) ; return getMaxSum ( 0 , 0 , 0 , arr1 , arr2 , arr3 ) ; }"}
{"text":"Driver Code","code":"int main ( ) { n1 = 2 ; int arr1 [ ] = { 3 , 5 } ; n2 = 2 ; int arr2 [ ] = { 2 , 1 } ; n3 = 3 ; int arr3 [ ] = { 4 , 3 , 5 } ; cout << maxProductSum ( arr1 , arr2 , arr3 ) ; return 0 ; }"}
{"text":"C ++ Program to implement the the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find lexicographically largest triplet that forms a triangle in the given array","code":"void findTriplet ( int arr [ ] , int N ) {"}
{"text":"Sort the array","code":"sort ( arr , arr + N ) ; int flag = 0 , i ;"}
{"text":"Iterate from the end of the array","code":"for ( i = N - 1 ; i - 2 >= 0 ; i -- ) {"}
{"text":"If the triplet forms a triangle","code":"if ( arr [ i - 2 ] + arr [ i - 1 ] > arr [ i ] ) { flag = 1 ; break ; } }"}
{"text":"If triplet found","code":"if ( flag ) {"}
{"text":"Print the triplet","code":"cout << arr [ i - 2 ] << \" \u2581 \" << arr [ i - 1 ] << \" \u2581 \" << arr [ i ] << endl ; }"}
{"text":"Otherwise","code":"else { cout << -1 << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 4 , 2 , 10 , 3 , 5 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; findTriplet ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the count of all pairs having minimal absolute difference","code":"int numberofpairs ( int arr [ ] , int N ) {"}
{"text":"Stores the count of pairs","code":"int answer = 0 ;"}
{"text":"Sort the array","code":"sort ( arr , arr + N ) ;"}
{"text":"Stores the minimum difference between adjacent pairs","code":"int minDiff = INT_MAX ; for ( int i = 0 ; i < N - 1 ; i ++ )"}
{"text":"Update the minimum difference between pairs","code":"minDiff = min ( minDiff , arr [ i + 1 ] - arr [ i ] ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( arr [ i + 1 ] - arr [ i ] == minDiff )"}
{"text":"Increase count of pairs with difference equal to that of minimum difference","code":"answer ++ ; }"}
{"text":"Return the final count","code":"return answer ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given array arr [ ]","code":"int arr [ ] = { 4 , 2 , 1 , 3 } ; int N = ( sizeof arr ) \/ ( sizeof arr [ 0 ] ) ;"}
{"text":"Function Call","code":"cout << numberofpairs ( arr , N ) << \" STRNEWLINE \" ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Initialise maximum possible length of subsequence","code":"int max_length = 0 ;"}
{"text":"Store elements to compare max_length with its size and change the value of max_length accordingly","code":"vector < int > store ;"}
{"text":"Store the elements of the longest subsequence","code":"vector < int > ans ;"}
{"text":"Function to find the length of longest subsequence","code":"void find_max_length ( vector < int > & arr , int index , int sum , int k ) { sum = sum + arr [ index ] ; store . push_back ( arr [ index ] ) ; if ( sum == k ) { if ( max_length < store . size ( ) ) {"}
{"text":"Update max_length","code":"max_length = store . size ( ) ;"}
{"text":"Store the subsequence elements","code":"ans = store ; } } for ( int i = index + 1 ; i < arr . size ( ) ; i ++ ) { if ( sum + arr [ i ] <= k ) {"}
{"text":"Recursively proceed with obtained sum","code":"find_max_length ( arr , i , sum , k ) ;"}
{"text":"poping elements from back of vector store","code":"store . pop_back ( ) ; }"}
{"text":"if sum > 0 then we don 't  required thatsubsequence  so return and continue  with earlier elements","code":"else return ; } return ; } int longestSubsequence ( vector < int > arr , int n , int k ) {"}
{"text":"Sort the given array","code":"sort ( arr . begin ( ) , arr . end ( ) ) ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"If max_length is already greater than or equal than remaining length","code":"if ( max_length >= n - i ) break ; store . clear ( ) ; find_max_length ( arr , i , 0 , k ) ; } return max_length ; }"}
{"text":"Driver code","code":"int main ( ) { vector < int > arr { -3 , 0 , 1 , 1 , 2 } ; int n = arr . size ( ) ; int k = 1 ; cout << longestSubsequence ( arr , n , k ) ; return 0 ; }"}
{"text":"C ++ implementation to sort decreasing permutation of N using triple swaps","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to sort Array","code":"void sortArray ( int A [ ] , int N ) {"}
{"text":"The three indices that has to be chosen","code":"int x , y , z ;"}
{"text":"Check if possible to sort array","code":"if ( N % 4 == 0 N % 4 == 1 ) {"}
{"text":"Swapping to bring element at required position Bringing at least one element at correct position","code":"for ( int i = 0 ; i < N \/ 2 ; i ++ ) { x = i ; if ( i % 2 == 0 ) { y = N - i - 2 ; z = N - i - 1 ; }"}
{"text":"Tracing changes in Array","code":"A [ z ] = A [ y ] ; A [ y ] = A [ x ] ; A [ x ] = x + 1 ; }"}
{"text":"Print the sorted array","code":"cout << \" Sorted \u2581 Array : \u2581 \" ; for ( int i = 0 ; i < N ; i ++ ) cout << A [ i ] << \" \u2581 \" ; }"}
{"text":"If not possible to sort","code":"else cout < < \" - 1\" ; }"}
{"text":"Driver code","code":"int main ( ) { int A [ ] = { 5 , 4 , 3 , 2 , 1 } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ; sortArray ( A , N ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return K such that changing all elements greater than K to K will make array sum N otherwise return - 1","code":"int findK ( int arr [ ] , int size , int N ) {"}
{"text":"Sorting the array in increasing order","code":"sort ( arr , arr + size ) ; int temp_sum = 0 ;"}
{"text":"Loop through all the elements of the array","code":"for ( int i = 0 ; i < size ; i ++ ) { temp_sum += arr [ i ] ;"}
{"text":"Checking if sum of array equals N","code":"if ( N - temp_sum == arr [ i ] * ( size - i - 1 ) ) { return arr [ i ] ; } } return -1 ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 3 , 1 , 10 , 4 , 8 } ; int size = sizeof ( arr ) \/ sizeof ( int ) ; int N = 16 ; cout << findK ( arr , size , N ) ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function that returns true if there exists a triplet with sum x","code":"bool existsTriplet ( int a [ ] , int b [ ] , int c [ ] , int x , int l1 , int l2 , int l3 ) {"}
{"text":"Sorting arrays such that a [ ] represents smallest array","code":"if ( l2 <= l1 and l2 <= l3 ) swap ( l2 , l1 ) , swap ( a , b ) ; else if ( l3 <= l1 and l3 <= l2 ) swap ( l3 , l1 ) , swap ( a , c ) ;"}
{"text":"Iterating the smallest array","code":"for ( int i = 0 ; i < l1 ; i ++ ) {"}
{"text":"Two pointers on second and third array","code":"int j = 0 , k = l3 - 1 ; while ( j < l2 and k > = 0 ) {"}
{"text":"If a valid triplet is found","code":"if ( a [ i ] + b [ j ] + c [ k ] == x ) return true ; if ( a [ i ] + b [ j ] + c [ k ] < x ) j ++ ; else k -- ; } } return false ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 2 , 7 , 8 , 10 , 15 } ; int b [ ] = { 1 , 6 , 7 , 8 } ; int c [ ] = { 4 , 5 , 5 } ; int l1 = sizeof ( a ) \/ sizeof ( int ) ; int l2 = sizeof ( b ) \/ sizeof ( int ) ; int l3 = sizeof ( c ) \/ sizeof ( int ) ; int x = 14 ; if ( existsTriplet ( a , b , c , x , l1 , l2 , l3 ) ) cout << \" Yes \" ; else cout << \" No \" ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <algorithm> NEW_LINE #include <iostream> NEW_LINE using namespace std ;"}
{"text":"Utility function to print the contents of an array","code":"void printArr ( int arr [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << arr [ i ] ; }"}
{"text":"A comparison function that return true if ' AB ' is smaller than ' BA ' when we concatenate two numbers ' A ' and ' B ' For example , it will return true if we pass 12 and 24 as arguments . This function will be used by sort ( ) function","code":"bool compare ( int num1 , int num2 ) {"}
{"text":"Convert first number to string format","code":"string A = to_string ( num1 ) ;"}
{"text":"Convert second number to string format","code":"string B = to_string ( num2 ) ;"}
{"text":"Check if ' AB ' is smaller or ' BA ' and return bool value since comparison operator ' < = ' returns true or false","code":"return ( A + B ) <= ( B + A ) ; }"}
{"text":"Function to print the arrangement with the smallest value","code":"void printSmallest ( int N , int arr [ ] ) {"}
{"text":"If we pass the name of the comparison function it will sort the array according to the compare function","code":"sort ( arr , arr + N , compare ) ;"}
{"text":"Print the sorted array","code":"printArr ( arr , N ) ; }"}
{"text":"Driver code","code":"int main ( ) { int arr [ ] = { 5 , 6 , 2 , 9 , 21 , 1 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; printSmallest ( N , arr ) ; return 0 ; }"}
{"text":"C ++ program for modifying Selection Sort so that it becomes stable .","code":"#include <iostream> NEW_LINE using namespace std ; void stableSelectionSort ( int a [ ] , int n ) {"}
{"text":"Iterate through array elements","code":"for ( int i = 0 ; i < n - 1 ; i ++ ) {"}
{"text":"Find minimum element from arr [ i ] to arr [ n - 1 ] .","code":"int min = i ; for ( int j = i + 1 ; j < n ; j ++ ) if ( a [ min ] > a [ j ] ) min = j ;"}
{"text":"Move minimum element at current i .","code":"int key = a [ min ] ; while ( min > i ) { a [ min ] = a [ min - 1 ] ; min -- ; } a [ i ] = key ; } } void printArray ( int a [ ] , int n ) { for ( int i = 0 ; i < n ; i ++ ) cout << a [ i ] << \" \u2581 \" ; cout << endl ; }"}
{"text":"Driver code","code":"int main ( ) { int a [ ] = { 4 , 5 , 3 , 2 , 4 , 1 } ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; stableSelectionSort ( a , n ) ; printArray ( a , n ) ; return 0 ; }"}
{"text":"C ++ program to check whether permutation of two arrays satisfy the condition a [ i ] + b [ i ] >= k .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Check whether any permutation exists which satisfy the condition .","code":"bool isPossible ( int a [ ] , int b [ ] , int n , int k ) {"}
{"text":"Sort the array a [ ] in decreasing order .","code":"sort ( a , a + n ) ;"}
{"text":"Sort the array b [ ] in increasing order .","code":"sort ( b , b + n , greater < int > ( ) ) ;"}
{"text":"Checking condition on each index .","code":"for ( int i = 0 ; i < n ; i ++ ) if ( a [ i ] + b [ i ] < k ) return false ; return true ; }"}
{"text":"Driven Program","code":"int main ( ) { int a [ ] = { 2 , 1 , 3 } ; int b [ ] = { 7 , 8 , 9 } ; int k = 10 ; int n = sizeof ( a ) \/ sizeof ( a [ 0 ] ) ; isPossible ( a , b , n , k ) ? cout << \" Yes \" : cout << \" No \" ; return 0 ; }"}
{"text":"C ++ program to implement simple approach to sort an array according to count of set bits .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count setbits","code":"int setBitCount ( int num ) { int count = 0 ; while ( num ) { if ( num & 1 ) count ++ ; num >>= 1 ; } return count ; }"}
{"text":"Function to sort By SetBitCount","code":"void sortBySetBitCount ( int arr [ ] , int n ) { multimap < int , int > count ;"}
{"text":"Iterate over all values and insert into multimap","code":"for ( int i = 0 ; i < n ; ++ i ) { count . insert ( { ( -1 ) * setBitCount ( arr [ i ] ) , arr [ i ] } ) ; } for ( auto i : count ) cout << i . second << \" \u2581 \" ; cout << \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 2 , 3 , 4 , 5 , 6 } ; int n = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; sortBySetBitCount ( arr , n ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if it is possible to reach the end of the binary string using the given jumps","code":"bool canReach ( string s , int L , int R ) {"}
{"text":"Stores the DP states","code":"vector < int > dp ( s . length ( ) ) ;"}
{"text":"Initial state","code":"dp [ 0 ] = 1 ;"}
{"text":"Stores count of indices from which it is possible to reach index i","code":"int pre = 0 ;"}
{"text":"Traverse the given string","code":"for ( int i = 1 ; i < s . length ( ) ; i ++ ) {"}
{"text":"Update the values of pre accordingly","code":"if ( i >= L ) { pre += dp [ i - L ] ; }"}
{"text":"If the jump size is out of the range [ L , R ]","code":"if ( i > R ) { pre -= dp [ i - R - 1 ] ; } dp [ i ] = ( pre > 0 ) and ( s [ i ] == '0' ) ; }"}
{"text":"Return answer","code":"return dp [ s . length ( ) - 1 ] ; }"}
{"text":"Driver Code","code":"int main ( ) { string S = \"01101110\" ; int L = 2 , R = 3 ; cout << ( canReach ( S , L , R ) ? \" Yes \" : \" No \" ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Recursive function to find all the possible breaking of arrays into subarrays and find the maximum Bitwise XOR","code":"int maxXORUtil ( int arr [ ] , int N , int xrr , int orr ) {"}
{"text":"If the value of N is 0","code":"if ( N == 0 ) return xrr ^ orr ;"}
{"text":"Stores the result if the new group is formed with the first element as arr [ i ]","code":"int x = maxXORUtil ( arr , N - 1 , xrr ^ orr , arr [ N - 1 ] ) ;"}
{"text":"Stores if the result if the arr [ i ] is included in the last group","code":"int y = maxXORUtil ( arr , N - 1 , xrr , orr arr [ N - 1 ] ) ;"}
{"text":"Returns the maximum of x and y","code":"return max ( x , y ) ; }"}
{"text":"Function to find the maximum possible Bitwise XOR of all possible values of the array after breaking the arrays into subarrays","code":"int maximumXOR ( int arr [ ] , int N ) {"}
{"text":"Return the result","code":"return maxXORUtil ( arr , N , 0 , 0 ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 1 , 5 , 7 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; cout << maximumXOR ( arr , N ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int N = 1e5 + 5 ;"}
{"text":"Keep track of visited nodes","code":"int visited [ N ] ;"}
{"text":"Function to construct a tree such that there are no two adjacent nodes with the same weight","code":"void construct_tree ( int weights [ ] , int n ) { int minimum = * min_element ( weights , weights + n ) ; int maximum = * max_element ( weights , weights + n ) ;"}
{"text":"If minimum and maximum elements are equal , i . e . array contains one distinct element","code":"if ( minimum == maximum ) {"}
{"text":"Tree cannot be constructed","code":"cout << \" No \" ; return ; }"}
{"text":"Otherwise","code":"else {"}
{"text":"Tree can be constructed","code":"cout << \" Yes \" << endl ; }"}
{"text":"Choose weights [ 0 ] as root","code":"int root = weights [ 0 ] ;"}
{"text":"First Node is visited","code":"visited [ 1 ] = 1 ;"}
{"text":"Traverse the array","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Otherwise , make an edge","code":"if ( weights [ i ] != root && visited [ i + 1 ] == 0 ) { cout << 1 << \" \u2581 \" << i + 1 << \" \u2581 \" << endl ;"}
{"text":"Mark this node as visited","code":"visited [ i + 1 ] = 1 ; } }"}
{"text":"Find a weight not same as the root & make edges with that node","code":"int notroot = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( weights [ i ] != root ) { notroot = i + 1 ; break ; } }"}
{"text":"Join non - roots with remaining nodes","code":"for ( int i = 0 ; i < n ; i ++ ) {"}
{"text":"Check if current node ' s \u2581 weight \u2581 \u2581 is \u2581 same \u2581 as \u2581 root \u2581 node ' s weight and if it is not visited or not","code":"if ( weights [ i ] == root && visited [ i + 1 ] == 0 ) { cout << notroot << \" \u2581 \" << i + 1 << endl ; visited [ i + 1 ] = 1 ; } } }"}
{"text":"Driver Code","code":"int main ( ) { int weights [ ] = { 1 , 2 , 1 , 2 , 5 } ; int N = sizeof ( weights ) \/ sizeof ( weights [ 0 ] ) ;"}
{"text":"Function Call","code":"construct_tree ( weights , N ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find minimum cost to convert given String into String of K length same subString","code":"void minCost ( string s , int k ) {"}
{"text":"Stores length of String","code":"int n = s . size ( ) ;"}
{"text":"Stores the minimum cost","code":"int ans = 0 ;"}
{"text":"Traverse left subString of k length","code":"for ( int i = 0 ; i < k ; i ++ ) {"}
{"text":"Stores the frequency","code":"int a [ 26 ] ; for ( int p = 0 ; p < 26 ; p ++ ) { a [ p ] = 0 ; } for ( int j = i ; j < n ; j += k ) { a [ s [ j ] - ' a ' ] ++ ; }"}
{"text":"Stores minimum cost for sequence of S [ i ] % k indices","code":"int min_cost = INT_MAX ;"}
{"text":"Check for optimal character","code":"for ( int ch = 0 ; ch < 26 ; ch ++ ) { int cost = 0 ;"}
{"text":"Find sum of distance ' a ' + ch from character S [ i ] % k indices","code":"for ( int tr = 0 ; tr < 26 ; tr ++ ) cost += abs ( ch - tr ) * a [ tr ] ;"}
{"text":"Choose minimum cost for each index i","code":"min_cost = min ( min_cost , cost ) ; }"}
{"text":"Increment ans","code":"ans += min_cost ; }"}
{"text":"Print minimum cost to convert String","code":"cout << ( ans ) ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given String S","code":"string S = \" abcdefabc \" ; int K = 3 ;"}
{"text":"Function Call","code":"minCost ( S , K ) ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to split the first N natural numbers into two sets having minimum absolute difference of their sums","code":"int minAbsDiff ( int N ) { if ( N % 4 == 0 N % 4 == 3 ) { return 0 ; } return 1 ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 6 ; cout << minAbsDiff ( N ) ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; #define N  10000"}
{"text":"Adjacency list to store edges","code":"vector < int > adj [ N ] ; int used [ N ] ; int max_matching ;"}
{"text":"Add an edge between U and V in tree","code":"void AddEdge ( int u , int v ) {"}
{"text":"Edge from u to v","code":"adj [ u ] . push_back ( v ) ;"}
{"text":"Edge from V to U","code":"adj [ v ] . push_back ( u ) ; }"}
{"text":"Function that finds the maximum matching of the DFS","code":"void Matching_dfs ( int u , int p ) { for ( int i = 0 ; i < adj [ u ] . size ( ) ; i ++ ) {"}
{"text":"Go further as we are not allowed to go towards its parent","code":"if ( adj [ u ] [ i ] != p ) { Matching_dfs ( adj [ u ] [ i ] , u ) ; } }"}
{"text":"If U and its parent P is not taken then we must take & mark them as taken","code":"if ( ! used [ u ] and ! used [ p ] and p != 0 ) {"}
{"text":"Increment size of edge set","code":"max_matching ++ ; used [ u ] = used [ p ] = 1 ; } }"}
{"text":"Function to find the maximum matching in a graph","code":"void maxMatching ( ) {"}
{"text":"Taking 1 as a root of the tree","code":"Matching_dfs ( 1 , 0 ) ;"}
{"text":"Print maximum Matching","code":"cout << max_matching << \" STRNEWLINE \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int n = 5 ;"}
{"text":"Joining edge between two nodes in tree","code":"AddEdge ( 1 , 2 ) ; AddEdge ( 1 , 3 ) ; AddEdge ( 3 , 4 ) ; AddEdge ( 3 , 5 ) ;"}
{"text":"Function Call","code":"maxMatching ( ) ; return 0 ; }"}
{"text":"C ++ program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate and return the minimum cost required to swap two arrays","code":"int getMinCost ( vector < int > A , vector < int > B , int N ) { int mini = INT_MAX ; for ( int i = 0 ; i < N ; i ++ ) { mini = min ( mini , min ( A [ i ] , B [ i ] ) ) ; }"}
{"text":"Return the total minimum cost","code":"return mini * ( 2 * N - 1 ) ; }"}
{"text":"Driver Code","code":"int main ( ) { int N = 3 ; vector < int > A = { 1 , 4 , 2 } ; vector < int > B = { 10 , 6 , 12 } ; cout << getMinCost ( A , B , N ) ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the values stored in vector arr","code":"void printVector ( vector < int > & arr ) { if ( arr . size ( ) != 1 ) {"}
{"text":"Traverse the vector arr","code":"for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { cout << arr [ i ] << \" \u2581 \" ; } cout << endl ; } }"}
{"text":"Recursive function to print different ways in which N can be written as a sum of at 2 or more positive integers","code":"void findWays ( vector < int > & arr , int i , int n ) {"}
{"text":"If n is zero then print this ways of breaking numbers","code":"if ( n == 0 ) printVector ( arr ) ;"}
{"text":"Start from previous element in the representation till n","code":"for ( int j = i ; j <= n ; j ++ ) {"}
{"text":"Include current element from representation","code":"arr . push_back ( j ) ;"}
{"text":"Call function again with reduced sum","code":"findWays ( arr , j , n - j ) ;"}
{"text":"Backtrack to remove current element from representation","code":"arr . pop_back ( ) ; } }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given sum N","code":"int n = 4 ;"}
{"text":"To store the representation of breaking N","code":"vector < int > arr ;"}
{"text":"Function Call","code":"findWays ( arr , 1 , n ) ; return 0 ; }"}
{"text":"C ++ Program to implement the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to count maximum subsequence","code":"void Maximum_subsequence ( int A [ ] , int N ) {"}
{"text":"Stores the frequency of array elements","code":"unordered_map < int , int > frequency ;"}
{"text":"Stores max frequency","code":"int max_freq = 0 ; for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Update frequency of A [ i ]","code":"frequency [ A [ i ] ] ++ ; } for ( auto it : frequency ) {"}
{"text":"Update max subsequence","code":"if ( it . second > max_freq ) { max_freq = it . second ; } }"}
{"text":"Print the count","code":"cout << max_freq << endl ; }"}
{"text":"Driver Code","code":"int main ( ) { int arr [ ] = { 5 , 2 , 6 , 5 , 2 , 4 , 5 , 2 } ; int N = sizeof ( arr ) \/ sizeof ( arr [ 0 ] ) ; Maximum_subsequence ( arr , N ) ; return 0 ; }"}
{"text":"C ++ implementation of the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to print the arrangement of characters","code":"void DivideString ( string s , int n , int k ) { int i , c = 0 , no = 1 ; int c1 = 0 , c2 = 0 ;"}
{"text":"Stores frequency of characters","code":"int fr [ 26 ] = { 0 } ; string ans = \" \" ; for ( i = 0 ; i < n ; i ++ ) { fr [ s [ i ] - ' a ' ] ++ ; } char ch , ch1 ; for ( i = 0 ; i < 26 ; i ++ ) {"}
{"text":"Count the character having frequency K","code":"if ( fr [ i ] == k ) { c ++ ; }"}
{"text":"Count the character having frequency greater than K and not equal to 2 K","code":"if ( fr [ i ] > k && fr [ i ] != 2 * k ) { c1 ++ ; ch = i + ' a ' ; } if ( fr [ i ] == 2 * k ) { c2 ++ ; ch1 = i + ' a ' ; } } for ( i = 0 ; i < n ; i ++ ) ans = ans + \"1\" ; map < char , int > mp ; if ( c % 2 == 0 c1 > 0 c2 > 0 ) { for ( i = 0 ; i < n ; i ++ ) {"}
{"text":"Case 1","code":"if ( fr [ s [ i ] - ' a ' ] == k ) { if ( mp . find ( s [ i ] ) != mp . end ( ) ) { ans [ i ] = '2' ; } else { if ( no <= ( c \/ 2 ) ) { ans [ i ] = '2' ; no ++ ; mp [ s [ i ] ] = 1 ; } } } }"}
{"text":"Case 2","code":"if ( c % 2 == 1 && c1 > 0 ) { no = 1 ; for ( i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ch && no <= k ) { ans [ i ] = '2' ; no ++ ; } } }"}
{"text":"Case 3","code":"if ( c % 2 == 1 && c1 == 0 ) { no = 1 ; int flag = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == ch1 && no <= k ) { ans [ i ] = '2' ; no ++ ; } if ( fr [ s [ i ] - ' a ' ] == k && flag == 0 && ans [ i ] == '1' ) { ans [ i ] = '2' ; flag = 1 ; } } } cout << ans << endl ; } else {"}
{"text":"If all cases fail","code":"cout << \" NO \" << endl ; } }"}
{"text":"Driver Code","code":"int main ( ) { string S = \" abbbccc \" ; int N = S . size ( ) ; int K = 1 ; DivideString ( S , N , K ) ; return 0 ; }"}
{"text":"C ++ implementation to check if two items can be selected from two different categories without exceeding the total price","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to check if two items can be selected from two different categories without exceeding the total price","code":"string check ( int S , int prices [ ] , int type [ ] , int n ) {"}
{"text":"Loop to choose two different pairs using two nested loops","code":"for ( int j = 0 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) {"}
{"text":"Condition to check if the price of these two elements is less than S","code":"if ( ( type [ j ] == 0 && type [ k ] == 1 ) || ( type [ j ] == 1 && type [ k ] == 0 ) ) { if ( prices [ j ] + prices [ k ] <= S ) { return \" Yes \" ; } } } } return \" No \" ; }"}
{"text":"Driver Code","code":"int main ( ) { int prices [ ] = { 3 , 8 , 6 , 5 } ; int type [ ] = { 0 , 1 , 1 , 0 } ; int S = 10 ; int n = 4 ;"}
{"text":"Function Call","code":"cout << check ( S , prices , type , n ) ; return 0 ; }"}
{"text":"C ++ implementation to find the largest value of a + b satisfying the given condition","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the maximum sum of a + b satisfying the given condition","code":"int getLargestSum ( int N ) {"}
{"text":"Consider all possible pairs and check the sum divides product property","code":"for ( int i = 1 ; i * i <= N ; i ++ ) { for ( int j = i + 1 ; j * j <= N ; j ++ ) {"}
{"text":"To find the largest factor k","code":"int k = N \/ j ; int a = k * i ; int b = k * j ;"}
{"text":"Check if the product is divisible by the sum","code":"if ( a <= N && b <= N && a * b % ( a + b ) == 0 )"}
{"text":"Storing the maximum sum in the max_sum variable","code":"max_sum = max ( max_sum , a + b ) ; } }"}
{"text":"Return the max_sum value","code":"return max_sum ; }"}
{"text":"Driver code","code":"int main ( ) { int N = 25 ; int max_sum = getLargestSum ( N ) ; cout << max_sum << endl ; return 0 ; }"}
{"text":"C ++ implementation of the approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return the encrypted string","code":"string encryptString ( string str , int n ) { int i = 0 , cnt = 0 ; string encryptedStr = \" \" ; while ( i < n ) {"}
{"text":"Number of times the current character will be repeated","code":"cnt = i + 1 ;"}
{"text":"Repeat the current character in the encrypted string","code":"while ( cnt -- ) encryptedStr += str [ i ] ; i ++ ; } return encryptedStr ; }"}
{"text":"Driver code","code":"int main ( ) { string str = \" geeks \" ; int n = str . length ( ) ; cout << encryptString ( str , n ) ; return 0 ; }"}
{"text":"C ++ program to find the minimum difference .","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to return required minimum difference","code":"int minDiff ( int n , int x , int A [ ] ) { int mn = A [ 0 ] , mx = A [ 0 ] ;"}
{"text":"finding minimum and maximum values","code":"for ( int i = 0 ; i < n ; ++ i ) { mn = min ( mn , A [ i ] ) ; mx = max ( mx , A [ i ] ) ; }"}
{"text":"returning minimum possible difference","code":"return max ( 0 , mx - mn - 2 * x ) ; }"}
{"text":"Driver program","code":"int main ( ) { int n = 3 , x = 3 ; int A [ ] = { 1 , 3 , 6 } ;"}
{"text":"function to return the answer","code":"cout << minDiff ( n , x , A ) ; return 0 ; }"}
{"text":"C ++ program to count swaps required to balance string","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; long swapCount ( string chars ) {"}
{"text":"Stores total number of Left and Right brackets encountered","code":"int countLeft = 0 , countRight = 0 ;"}
{"text":"swap stores the number of swaps required imbalance maintains the number of imbalance pair","code":"int swap = 0 , imbalance = 0 ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { if ( chars [ i ] == ' [ ' ) {"}
{"text":"Increment count of Left bracket","code":"countLeft ++ ; if ( imbalance > 0 ) {"}
{"text":"swaps count is last swap count + total number imbalanced brackets","code":"swap += imbalance ;"}
{"text":"imbalance decremented by 1 as it solved only one imbalance of Left and Right","code":"imbalance -- ; } } else if ( chars [ i ] == ' ] ' ) {"}
{"text":"Increment count of Right bracket","code":"countRight ++ ;"}
{"text":"imbalance is reset to current difference between Left and Right brackets","code":"imbalance = ( countRight - countLeft ) ; } } return swap ; }"}
{"text":"Driver code","code":"int main ( ) { string s = \" [ ] ] [ ] [ \" ; cout << swapCount ( s ) << endl ; s = \" [ [ ] [ ] ] \" ; cout << swapCount ( s ) << endl ; return 0 ; }"}
{"text":"C ++ program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to find the length of the longest subsequence of pairs whose first element is increasing and second is decreasing","code":"void longestSubSequence ( pair < int , int > A [ ] , int N ) {"}
{"text":"dp [ i ] : Stores the longest subsequence upto i","code":"int dp [ N ] ; for ( int i = 0 ; i < N ; i ++ ) {"}
{"text":"Base case","code":"dp [ i ] = 1 ; for ( int j = 0 ; j < i ; j ++ ) {"}
{"text":"When the conditions hold","code":"if ( A [ j ] . first < A [ i ] . first && A [ j ] . second > A [ i ] . second ) { dp [ i ] = max ( dp [ i ] , dp [ j ] + 1 ) ; } } }"}
{"text":"Finally , print the required answer","code":"cout << dp [ N - 1 ] << endl ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given Input","code":"pair < int , int > A [ ] = { { 1 , 2 } , { 2 , 2 } , { 3 , 1 } } ; int N = sizeof ( A ) \/ sizeof ( A [ 0 ] ) ;"}
{"text":"Function Call","code":"longestSubSequence ( A , N ) ; return 0 ; }"}
{"text":"C ++ Program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the total number of ways to have sum N","code":"int findWays ( int N , int dp [ ] ) {"}
{"text":"Base Case","code":"if ( N == 0 ) { return 1 ; }"}
{"text":"Return already stored result","code":"if ( dp [ N ] != -1 ) { return dp [ N ] ; } int cnt = 0 ;"}
{"text":"Recur for all 6 states","code":"for ( int i = 1 ; i <= 6 ; i ++ ) { if ( N - i >= 0 ) { cnt = cnt + findWays ( N - i , dp ) ; } }"}
{"text":"Return the result","code":"return dp [ N ] = cnt ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given sum N","code":"int N = 4 ;"}
{"text":"Initialize the dp array","code":"int dp [ N + 1 ] ; memset ( dp , -1 , sizeof ( dp ) ) ;"}
{"text":"Function Call","code":"cout << findWays ( N , dp ) ; return 0 ; }"}
{"text":"C ++ Program for the above approach","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ;"}
{"text":"Function to calculate the total number of ways to have sum N","code":"void findWays ( int N ) {"}
{"text":"Initialize dp array","code":"int dp [ N + 1 ] ; dp [ 0 ] = 1 ;"}
{"text":"Iterate over all the possible intermediate values to reach N","code":"for ( int i = 1 ; i <= N ; i ++ ) { dp [ i ] = 0 ;"}
{"text":"Calculate the sum for all 6 faces","code":"for ( int j = 1 ; j <= 6 ; j ++ ) { if ( i - j >= 0 ) { dp [ i ] = dp [ i ] + dp [ i - j ] ; } } }"}
{"text":"Print the total number of ways","code":"cout << dp [ N ] ; }"}
{"text":"Driver Code","code":"int main ( ) {"}
{"text":"Given sum N","code":"int N = 4 ;"}
{"text":"Function call","code":"findWays ( N ) ; return 0 ; }"}
{"text":"C ++ implementation to split the string into minimum number of parts such that each part is also present in the another string","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int INF = 1e9 + 9 ;"}
{"text":"Node of Trie","code":"struct TrieNode { TrieNode * child [ 26 ] = { NULL } ; } ;"}
{"text":"Function to insert a node in the Trie Data Structure","code":"void insert ( int idx , string & s , TrieNode * root ) { TrieNode * temp = root ; for ( int i = idx ; i < s . length ( ) ; i ++ ) {"}
{"text":"Inserting every character from idx till end to string into trie","code":"if ( temp -> child [ s [ i ] - ' a ' ] == NULL )"}
{"text":"if there is no edge corresponding to the ith character , then make a new node","code":"temp -> child [ s [ i ] - ' a ' ] = new TrieNode ; temp = temp -> child [ s [ i ] - ' a ' ] ; } }"}
{"text":"Function to find the minimum number of parts such that each part is present into another string","code":"int minCuts ( string S1 , string S2 ) { int n1 = S1 . length ( ) ; int n2 = S2 . length ( ) ;"}
{"text":"Making a new trie","code":"TrieNode * root = new TrieNode ; for ( int i = 0 ; i < n2 ; i ++ ) {"}
{"text":"Inserting every substring of S2 in trie","code":"insert ( i , S2 , root ) ; }"}
{"text":"Creating dp array and init it with infinity","code":"vector < int > dp ( n1 + 1 , INF ) ;"}
{"text":"Base Case","code":"dp [ 0 ] = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) {"}
{"text":"Starting the cut from ith character taking temporary node pointer for checking whether the substring [ i , j ) is present in trie of not","code":"TrieNode * temp = root ; for ( int j = i + 1 ; j <= n1 ; j ++ ) { if ( temp -> child [ S1 [ j - 1 ] - ' a ' ] == NULL )"}
{"text":"if the jth character is not in trie we 'll break","code":"break ;"}
{"text":"Updating the the ending of jth character with dp [ i ] + 1","code":"dp [ j ] = min ( dp [ j ] , dp [ i ] + 1 ) ;"}
{"text":"Descending the trie pointer","code":"temp = temp -> child [ S1 [ j - 1 ] - ' a ' ] ; } }"}
{"text":"Answer not possible","code":"if ( dp [ n1 ] >= INF ) return -1 ; else return dp [ n1 ] ; }"}
{"text":"Driver Code","code":"int main ( ) { string S1 = \" abcdab \" ; string S2 = \" dabc \" ; cout << minCuts ( S1 , S2 ) ; }"}
{"text":"C ++ implementation to find the largest square in the matrix such that it contains atmost K 1 's","code":"#include <bits\/stdc++.h> NEW_LINE using namespace std ; const int MAX = 100 ;"}
{"text":"Function to find the largest square in the matrix such that it contains atmost K 1 's","code":"void largestSquare ( int matrix [ ] [ MAX ] , int R , int C , int q_i [ ] , int q_j [ ] , int K , int Q ) { int countDP [ R ] [ C ] ; memset ( countDP , 0 , sizeof ( countDP ) ) ;"}
{"text":"Precomputation of the countDP prefix sum of the matrix","code":"countDP [ 0 ] [ 0 ] = matrix [ 0 ] [ 0 ] ; for ( int i = 1 ; i < R ; i ++ ) countDP [ i ] [ 0 ] = countDP [ i - 1 ] [ 0 ] + matrix [ i ] [ 0 ] ; for ( int j = 1 ; j < C ; j ++ ) countDP [ 0 ] [ j ] = countDP [ 0 ] [ j - 1 ] + matrix [ 0 ] [ j ] ; for ( int i = 1 ; i < R ; i ++ ) for ( int j = 1 ; j < C ; j ++ ) countDP [ i ] [ j ] = matrix [ i ] [ j ] + countDP [ i - 1 ] [ j ] + countDP [ i ] [ j - 1 ] - countDP [ i - 1 ] [ j - 1 ] ;"}
{"text":"Loop to solve each query","code":"for ( int q = 0 ; q < Q ; q ++ ) { int i = q_i [ q ] ; int j = q_j [ q ] ; int min_dist = min ( min ( i , j ) , min ( R - i - 1 , C - j - 1 ) ) ; int ans = -1 , l = 0 , u = min_dist ;"}
{"text":"Binary Search to the side which have atmost in K 1 's in square","code":"while ( l <= u ) { int mid = ( l + u ) \/ 2 ; int x1 = i - mid , x2 = i + mid ; int y1 = j - mid , y2 = j + mid ;"}
{"text":"Count total number of 1 s in the sub square considered","code":"int count = countDP [ x2 ] [ y2 ] ; if ( x1 > 0 ) count -= countDP [ x1 - 1 ] [ y2 ] ; if ( y1 > 0 ) count -= countDP [ x2 ] [ y1 - 1 ] ; if ( x1 > 0 && y1 > 0 ) count += countDP [ x1 - 1 ] [ y1 - 1 ] ;"}
{"text":"If the count is less than or equals to the maximum move to right half","code":"if ( count <= K ) { ans = 2 * mid + 1 ; l = mid + 1 ; } else u = mid - 1 ; } cout << ans << \" STRNEWLINE \" ; } }"}
{"text":"Driver code","code":"int main ( ) { int matrix [ ] [ MAX ] = { { 1 , 0 , 1 , 0 , 0 } , { 1 , 0 , 1 , 1 , 1 } , { 1 , 1 , 1 , 1 , 1 } , { 1 , 0 , 0 , 1 , 0 } } ; int K = 9 , Q = 1 ; int q_i [ ] = { 1 } ; int q_j [ ] = { 2 } ; largestSquare ( matrix , 4 , 5 , q_i , q_j , K , Q ) ; return 0 ; }"}
