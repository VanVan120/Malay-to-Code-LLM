{"text":"Function to convert centimeters to pixels","code":"def Conversion ( centi ) : NEW_LINE INDENT pixels = ( 96 * centi ) \/ 2.54 NEW_LINE print ( round ( pixels , 2 ) ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"centi = 15 NEW_LINE Conversion ( centi ) NEW_LINE"}
{"text":"Method that returns the corresponding output by taking the given inputs .","code":"def xor_operations ( N , arr , M , K ) : NEW_LINE"}
{"text":"If this condition is satisfied , value of M is invalid","code":"if M < 0 or M >= N : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"Check if index K is valid","code":"if K < 0 or K >= N - M : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"Loop to perform M operations","code":"for _ in range ( M ) : NEW_LINE"}
{"text":"Creating a temporary list","code":"temp = [ ] NEW_LINE"}
{"text":"Traversing the array","code":"for i in range ( len ( arr ) - 1 ) : NEW_LINE"}
{"text":"Calculate XOR values of adjacent elements","code":"value = arr [ i ] ^ arr [ i + 1 ] NEW_LINE"}
{"text":"Adding this value to the temporary list","code":"temp . append ( value ) NEW_LINE"}
{"text":"Update the original array","code":"arr = temp [ : ] NEW_LINE"}
{"text":"Getting value at index K","code":"ans = arr [ K ] NEW_LINE return ans NEW_LINE"}
{"text":"Number of elements","code":"N = 5 NEW_LINE"}
{"text":"Given array arr [ ]","code":"arr = [ 1 , 4 , 5 , 6 , 7 ] NEW_LINE M = 1 NEW_LINE K = 2 NEW_LINE"}
{"text":"Function Call","code":"print ( xor_operations ( N , arr , M , K ) ) NEW_LINE"}
{"text":"Function to find the K consecutive elements with a sum equal to N","code":"def canBreakN ( n ) : NEW_LINE"}
{"text":"Iterate over [ 2 , INF ]","code":"for i in range ( 2 , n ) : NEW_LINE"}
{"text":"Store the sum","code":"m = i * ( i + 1 ) \/\/ 2 NEW_LINE"}
{"text":"If the sum exceeds N then break the loop","code":"if ( m > n ) : NEW_LINE INDENT break NEW_LINE DEDENT k = n - m NEW_LINE"}
{"text":"Common difference should be divisible by number of terms","code":"if ( k % i ) : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"Print value of i & return","code":"print ( i ) NEW_LINE return NEW_LINE"}
{"text":"Print \" - 1\" if not possible to break N","code":"print ( \" - 1\" ) NEW_LINE"}
{"text":"Given N","code":"N = 12 NEW_LINE"}
{"text":"Function call","code":"canBreakN ( N ) NEW_LINE"}
{"text":"Python3 program to find two coprime divisors of a given number such that both are greater than 1","code":"import math NEW_LINE"}
{"text":"Function which finds the required pair of divisors of N","code":"def findCoprimePair ( N ) : NEW_LINE"}
{"text":"We iterate upto sqrt ( N ) as we can find all the divisors of N in this time","code":"for x in range ( 2 , int ( math . sqrt ( N ) ) + 1 ) : NEW_LINE INDENT if ( N % x == 0 ) : NEW_LINE DEDENT"}
{"text":"If x is a divisor of N keep dividing as long as possible","code":"while ( N % x == 0 ) : NEW_LINE INDENT N \/\/= x NEW_LINE DEDENT if ( N > 1 ) : NEW_LINE"}
{"text":"We have found a required pair","code":"print ( x , N ) NEW_LINE return ; NEW_LINE"}
{"text":"No such pair of divisors of N was found , hence print - 1","code":"print ( \" - 1\" ) NEW_LINE"}
{"text":"Sample example 1","code":"N = 45 NEW_LINE findCoprimePair ( N ) NEW_LINE"}
{"text":"Sample example 2","code":"N = 25 NEW_LINE findCoprimePair ( N ) NEW_LINE"}
{"text":"Python3 program for the above approach","code":"import math NEW_LINE MAX = 10000 NEW_LINE"}
{"text":"Array to store all prime less than and equal to MAX .","code":"primes = [ ] NEW_LINE"}
{"text":"Function for Sieve of Sundaram","code":"def sieveSundaram ( ) : NEW_LINE"}
{"text":"Boolean Array","code":"marked = [ False ] * ( ( MAX \/\/ 2 ) + 1 ) NEW_LINE"}
{"text":"Mark all numbers which do not generate prime number by 2 * i + 1","code":"for i in range ( 1 , ( ( int ( math . sqrt ( MAX ) ) - 1 ) \/\/ 2 ) + 1 ) : NEW_LINE INDENT j = ( i * ( i + 1 ) ) << 1 NEW_LINE while j <= ( MAX \/\/ 2 ) : NEW_LINE INDENT marked [ j ] = True NEW_LINE j = j + 2 * i + 1 NEW_LINE DEDENT DEDENT"}
{"text":"Since 2 is a prime number","code":"primes . append ( 2 ) NEW_LINE"}
{"text":"Print remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .","code":"for i in range ( 1 , ( MAX \/\/ 2 ) + 1 ) : NEW_LINE INDENT if marked [ i ] == False : NEW_LINE INDENT primes . append ( 2 * i + 1 ) NEW_LINE DEDENT DEDENT"}
{"text":"Function that returns true if n is a Wasteful number","code":"def isWasteful ( n ) : NEW_LINE INDENT if ( n == 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT"}
{"text":"Count digits in original number","code":"original_no = n NEW_LINE sumDigits = 0 NEW_LINE while ( original_no > 0 ) : NEW_LINE INDENT sumDigits += 1 NEW_LINE original_no = original_no \/\/ 10 NEW_LINE DEDENT pDigit , count_exp , p = 0 , 0 , 0 NEW_LINE"}
{"text":"Count all digits in prime factors of N pDigit is going to hold this value .","code":"i = 0 NEW_LINE while ( primes [ i ] <= ( n \/\/ 2 ) ) : NEW_LINE"}
{"text":"Count powers of p in n","code":"while ( n % primes [ i ] == 0 ) : NEW_LINE"}
{"text":"If primes [ i ] is a prime factor ,","code":"p = primes [ i ] NEW_LINE n = n \/\/ p NEW_LINE"}
{"text":"Count the power of prime factors","code":"count_exp += 1 NEW_LINE"}
{"text":"Add its digits to pDigit","code":"while ( p > 0 ) : NEW_LINE INDENT pDigit += 1 NEW_LINE p = p \/\/ 10 NEW_LINE DEDENT"}
{"text":"Add digits of power of prime factors to pDigit .","code":"while ( count_exp > 1 ) : NEW_LINE INDENT pDigit += 1 NEW_LINE count_exp = count_exp \/\/ 10 NEW_LINE DEDENT i += 1 NEW_LINE"}
{"text":"If n != 1 then one prime factor still to be summed up","code":"if ( n != 1 ) : NEW_LINE INDENT while ( n > 0 ) : NEW_LINE INDENT pDigit += 1 NEW_LINE n = n \/\/ 10 NEW_LINE DEDENT DEDENT"}
{"text":"If digits in prime factors is more than digits in original number then return true . Else return false .","code":"return bool ( pDigit > sumDigits ) NEW_LINE"}
{"text":"Function to print Wasteful Number before N","code":"def Solve ( N ) : NEW_LINE"}
{"text":"Iterate till N and check if i is wastefull or not","code":"for i in range ( 1 , N ) : NEW_LINE INDENT if ( isWasteful ( i ) ) : NEW_LINE INDENT print ( i , end = \" \u2581 \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Precompute prime numbers upto 10 ^ 6","code":"sieveSundaram ( ) NEW_LINE N = 10 NEW_LINE"}
{"text":"Function Call","code":"Solve ( N ) NEW_LINE"}
{"text":"Function to print the Nth Hexanacci number","code":"def printhexaRec ( n ) : NEW_LINE INDENT if ( n == 0 or n == 1 or \\ n == 2 or n == 3 or \\ n == 4 or n == 5 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif ( n == 6 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return ( printhexaRec ( n - 1 ) + printhexaRec ( n - 2 ) + printhexaRec ( n - 3 ) + printhexaRec ( n - 4 ) + printhexaRec ( n - 5 ) + printhexaRec ( n - 6 ) ) NEW_LINE DEDENT DEDENT def printhexa ( n ) : NEW_LINE INDENT print ( printhexaRec ( n ) ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"n = 11 NEW_LINE printhexa ( n ) NEW_LINE"}
{"text":"Function to print the Nth term of the Hexanacci number","code":"def printhexa ( n ) : NEW_LINE INDENT if ( n < 0 ) : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT"}
{"text":"Initialize first five numbers to base cases","code":"first = 0 NEW_LINE second = 0 NEW_LINE third = 0 NEW_LINE fourth = 0 NEW_LINE fifth = 0 NEW_LINE sixth = 1 NEW_LINE"}
{"text":"declare a current variable","code":"curr = 0 NEW_LINE if ( n < 6 ) : NEW_LINE INDENT print ( first ) NEW_LINE DEDENT elif ( n == 6 ) : NEW_LINE INDENT print ( sixth ) NEW_LINE DEDENT else : NEW_LINE"}
{"text":"Loop to add previous five numbers for each number starting from 5 and then assign first , second , third , fourth fifth to second , third , fourth , fifth and curr to sixth respectively","code":"for i in range ( 6 , n ) : NEW_LINE INDENT curr = first + second + third + fourth + fifth + sixth NEW_LINE first = second NEW_LINE second = third NEW_LINE third = fourth NEW_LINE fourth = fifth NEW_LINE fifth = sixth NEW_LINE sixth = curr NEW_LINE DEDENT print ( curr ) NEW_LINE"}
{"text":"Driver code","code":"n = 11 NEW_LINE printhexa ( n ) NEW_LINE"}
{"text":"Function to find the smallest number whose sum of digits is also N","code":"def smallestNumber ( N ) : NEW_LINE INDENT print ( ( N % 9 + 1 ) * pow ( 10 , ( N \/\/ 9 ) ) - 1 ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"N = 10 NEW_LINE smallestNumber ( N ) NEW_LINE"}
{"text":"Function to check if a number is composite .","code":"def isComposite ( n ) : NEW_LINE"}
{"text":"Corner cases","code":"if ( n <= 3 ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"This is checked so that we can skip the middle five numbers in the below loop","code":"if ( n % 2 == 0 or n % 3 == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT i = 5 NEW_LINE while ( i * i <= n ) : NEW_LINE INDENT if ( n % i == 0 or n % ( i + 2 ) == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT i = i + 6 NEW_LINE DEDENT return False NEW_LINE"}
{"text":"This function stores all Composite numbers less than N","code":"def Compositorial_list ( n ) : NEW_LINE INDENT l = 0 NEW_LINE for i in range ( 4 , 10 ** 6 ) : NEW_LINE INDENT if l < n : NEW_LINE INDENT if isComposite ( i ) : NEW_LINE INDENT compo . append ( i ) NEW_LINE l += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT"}
{"text":"Function to calculate the Compositorial of n","code":"def calculateCompositorial ( n ) : NEW_LINE"}
{"text":"Multiply first n composite number","code":"result = 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT result = result * compo [ i ] NEW_LINE DEDENT return result NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 5 NEW_LINE DEDENT"}
{"text":"Vector to store all the composite less than N","code":"compo = [ ] NEW_LINE Compositorial_list ( n ) NEW_LINE print ( calculateCompositorial ( n ) ) NEW_LINE"}
{"text":"Initializing the PowerArray with all 0 's","code":"b = [ 0 for i in range ( 50 ) ] NEW_LINE"}
{"text":"Function to find the powers of N that add up to K","code":"def PowerArray ( n , k ) : NEW_LINE"}
{"text":"Initializing the counter","code":"count = 0 NEW_LINE"}
{"text":"Executing the while loop until K is greater than 0","code":"while ( k ) : NEW_LINE INDENT if ( k % n == 0 ) : NEW_LINE INDENT k \/\/= n NEW_LINE count += 1 NEW_LINE DEDENT DEDENT"}
{"text":"If K % N == 1 , then the power array is incremented by 1","code":"elif ( k % n == 1 ) : NEW_LINE INDENT k -= 1 NEW_LINE b [ count ] += 1 NEW_LINE DEDENT"}
{"text":"Checking if any power is occurred more than once","code":"if ( b [ count ] > 1 ) : NEW_LINE INDENT print ( - 1 ) NEW_LINE return 0 NEW_LINE DEDENT"}
{"text":"For any other value , the sum of powers cannot be added up to K","code":"else : NEW_LINE INDENT print ( - 1 ) NEW_LINE return 0 NEW_LINE DEDENT"}
{"text":"Printing the powers of N that sum up to K","code":"for i in range ( 50 ) : NEW_LINE INDENT if ( b [ i ] ) : NEW_LINE INDENT print ( i , end = \" , \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 3 NEW_LINE K = 40 NEW_LINE PowerArray ( N , K ) NEW_LINE DEDENT"}
{"text":"Python 3 Program to find the value 1 ^ K + 2 ^ K + 3 ^ K + . . + N ^ K","code":"from math import pow NEW_LINE"}
{"text":"Function to find value of 1 ^ K + 2 ^ K + 3 ^ K + . . + N ^ K","code":"def findSum ( N , k ) : NEW_LINE"}
{"text":"Initialise sum to 0","code":"sum = 0 NEW_LINE for i in range ( 1 , N + 1 , 1 ) : NEW_LINE"}
{"text":"Find the value of pow ( i , 4 ) and then add it to the sum","code":"sum += pow ( i , k ) NEW_LINE"}
{"text":"Return the sum","code":"return sum NEW_LINE"}
{"text":"Drives Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 8 NEW_LINE k = 4 NEW_LINE DEDENT"}
{"text":"Function call to find the sum","code":"print ( int ( findSum ( N , k ) ) ) NEW_LINE"}
{"text":"Function to return the count of indices that satisfy the given condition","code":"def countIndices ( arr , n ) : NEW_LINE"}
{"text":"To store the result","code":"cnt = 0 ; NEW_LINE"}
{"text":"To store the current maximum Initialized to 0 since there are only positive elements in the array","code":"max = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"i is a valid index","code":"if ( max < arr [ i ] ) : NEW_LINE"}
{"text":"Update the maximum so far","code":"max = arr [ i ] ; NEW_LINE"}
{"text":"Increment the counter","code":"cnt += 1 ; NEW_LINE return cnt ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( countIndices ( arr , n ) ) ; NEW_LINE DEDENT"}
{"text":"Binary representation of the digits","code":"bin = [ \"000\" , \"001\" , \"010\" , \"011\" , \"100\" , \"101\" , \"110\" , \"111\" ] ; NEW_LINE"}
{"text":"Function to return the maximum frequency of s modulo with a power of 2","code":"def maxFreq ( s ) : NEW_LINE"}
{"text":"Store the binary representation","code":"binary = \" \" ; NEW_LINE"}
{"text":"Convert the octal to binary","code":"for i in range ( len ( s ) ) : NEW_LINE INDENT binary += bin [ ord ( s [ i ] ) - ord ( '0' ) ] ; NEW_LINE DEDENT"}
{"text":"Remove the LSB","code":"binary = binary [ 0 : len ( binary ) - 1 ] ; NEW_LINE count = 1 ; prev = - 1 ; j = 0 ; NEW_LINE for i in range ( len ( binary ) - 1 , - 1 , - 1 ) : NEW_LINE"}
{"text":"If there is 1 in the binary representation","code":"if ( binary [ i ] == '1' ) : NEW_LINE"}
{"text":"Find the number of zeroes in between two 1 's in the binary representation","code":"count = max ( count , j - prev ) ; NEW_LINE prev = j ; NEW_LINE j += 1 ; NEW_LINE return count ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT octal = \"13\" ; NEW_LINE print ( maxFreq ( octal ) ) ; NEW_LINE DEDENT"}
{"text":"Python 3 implementation of the approach","code":"from math import sqrt , pow NEW_LINE sz = 100005 NEW_LINE isPrime = [ True for i in range ( sz + 1 ) ] NEW_LINE"}
{"text":"Function for Sieve of Eratosthenes","code":"def sieve ( ) : NEW_LINE INDENT isPrime [ 0 ] = isPrime [ 1 ] = False NEW_LINE for i in range ( 2 , int ( sqrt ( sz ) ) + 1 , 1 ) : NEW_LINE INDENT if ( isPrime [ i ] ) : NEW_LINE INDENT for j in range ( i * i , sz , i ) : NEW_LINE INDENT isPrime [ j ] = False NEW_LINE DEDENT DEDENT DEDENT DEDENT"}
{"text":"Function to print all the prime numbers with d digits","code":"def findPrimesD ( d ) : NEW_LINE"}
{"text":"Range to check integers","code":"left = int ( pow ( 10 , d - 1 ) ) NEW_LINE right = int ( pow ( 10 , d ) - 1 ) NEW_LINE"}
{"text":"For every integer in the range","code":"for i in range ( left , right + 1 , 1 ) : NEW_LINE"}
{"text":"If the current integer is prime","code":"if ( isPrime [ i ] ) : NEW_LINE INDENT print ( i , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Generate primes","code":"sieve ( ) NEW_LINE d = 1 NEW_LINE findPrimesD ( d ) NEW_LINE"}
{"text":"Function to find number of cells in the table contains X","code":"def Cells ( n , x ) : NEW_LINE INDENT if ( n <= 0 or x <= 0 or x > n * n ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT i = 1 NEW_LINE count = 0 NEW_LINE while ( i * i < x ) : NEW_LINE INDENT if ( x % i == 0 and x <= n * i ) : NEW_LINE INDENT count += 2 ; NEW_LINE DEDENT i += 1 NEW_LINE DEDENT if ( i * i == x ) : NEW_LINE INDENT return count + 1 NEW_LINE DEDENT else : NEW_LINE INDENT return count NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"n = 6 NEW_LINE x = 12 NEW_LINE"}
{"text":"Function call","code":"print ( Cells ( n , x ) ) NEW_LINE"}
{"text":"Function to find the maximum possible value of the minimum value of the modified array","code":"def maxOfMin ( a , n , S ) : NEW_LINE"}
{"text":"To store minimum value of array","code":"mi = 10 ** 9 NEW_LINE"}
{"text":"To store sum of elements of array","code":"s1 = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT s1 += a [ i ] NEW_LINE mi = min ( a [ i ] , mi ) NEW_LINE DEDENT"}
{"text":"Solution is not possible","code":"if ( s1 < S ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"zero is the possible value","code":"if ( s1 == S ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"minimum possible value","code":"low = 0 NEW_LINE"}
{"text":"maximum possible value","code":"high = mi NEW_LINE"}
{"text":"to store a required answer","code":"ans = 0 NEW_LINE"}
{"text":"Binary Search","code":"while ( low <= high ) : NEW_LINE INDENT mid = ( low + high ) \/\/ 2 NEW_LINE DEDENT"}
{"text":"If mid is possible then try to increase required answer","code":"if ( s1 - ( mid * n ) >= S ) : NEW_LINE INDENT ans = mid NEW_LINE low = mid + 1 NEW_LINE DEDENT"}
{"text":"If mid is not possible then decrease required answer","code":"else : NEW_LINE INDENT high = mid - 1 NEW_LINE DEDENT"}
{"text":"Return required answer","code":"return ans NEW_LINE"}
{"text":"Driver Code","code":"a = [ 10 , 10 , 10 , 10 , 10 ] NEW_LINE S = 10 NEW_LINE n = len ( a ) NEW_LINE print ( maxOfMin ( a , n , S ) ) NEW_LINE"}
{"text":"Function to print the desired Alphabet N Pattern","code":"def Alphabet_N_Pattern ( N ) : NEW_LINE"}
{"text":"Declaring the values of Right , Left and Diagonal values","code":"Right = 1 NEW_LINE Left = 1 NEW_LINE Diagonal = 2 NEW_LINE"}
{"text":"Main Loop for the rows","code":"for index in range ( N ) : NEW_LINE"}
{"text":"For the left Values","code":"print ( Left , end = \" \" ) NEW_LINE Left += 1 NEW_LINE"}
{"text":"Spaces for the diagonals","code":"for side_index in range ( 0 , 2 * ( index ) , 1 ) : NEW_LINE INDENT print ( \" \u2581 \" , end = \" \" ) NEW_LINE DEDENT"}
{"text":"Condition for the diagonals","code":"if ( index != 0 and index != N - 1 ) : NEW_LINE INDENT print ( Diagonal , end = \" \" ) NEW_LINE Diagonal += 1 NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" \u2581 \" , end = \" \" ) NEW_LINE DEDENT"}
{"text":"Spaces for the Right Values","code":"for side_index in range ( 0 , 2 * ( N - index - 1 ) , 1 ) : NEW_LINE INDENT print ( \" \u2581 \" , end = \" \" ) NEW_LINE DEDENT"}
{"text":"For the right values","code":"print ( Right , end = \" \" ) NEW_LINE Right += 1 NEW_LINE print ( \" \" , \u2581 end \u2581 = \u2581 \" \" ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Size of the Pattern","code":"Size = 6 NEW_LINE"}
{"text":"Calling the function to print the desired Pattern","code":"Alphabet_N_Pattern ( Size ) NEW_LINE"}
{"text":"Function to check if sum of digits of a number divides it","code":"def isSumDivides ( N ) : NEW_LINE INDENT temp = N NEW_LINE sum = 0 NEW_LINE DEDENT"}
{"text":"Calculate sum of all of digits of N","code":"while ( temp ) : NEW_LINE INDENT sum += temp % 10 NEW_LINE temp = int ( temp \/ 10 ) NEW_LINE DEDENT if ( N % sum == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 12 NEW_LINE if ( isSumDivides ( N ) ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to calculate the sum of numbers divisible by 3 or 4","code":"def sum ( N ) : NEW_LINE INDENT global S1 , S2 , S3 NEW_LINE S1 = ( ( ( N \/\/ 3 ) ) * ( 2 * 3 + ( N \/\/ 3 - 1 ) * 3 ) \/\/ 2 ) NEW_LINE S2 = ( ( ( N \/\/ 4 ) ) * ( 2 * 4 + ( N \/\/ 4 - 1 ) * 4 ) \/\/ 2 ) NEW_LINE S3 = ( ( ( N \/\/ 12 ) ) * ( 2 * 12 + ( N \/\/ 12 - 1 ) * 12 ) \/\/ 2 ) NEW_LINE return int ( S1 + S2 - S3 ) NEW_LINE DEDENT"}
{"text":"Function to find next greater number than N with exactly one bit different in binary representation of N","code":"def nextGreater ( N ) : NEW_LINE INDENT power_of_2 = 1 ; NEW_LINE shift_count = 0 ; NEW_LINE DEDENT"}
{"text":"It is guaranteed that there is a bit zero in the number","code":"while ( True ) : NEW_LINE"}
{"text":"If the shifted bit is zero then break","code":"if ( ( ( N >> shift_count ) & 1 ) % 2 == 0 ) : NEW_LINE INDENT break ; NEW_LINE DEDENT"}
{"text":"increase the bit shift","code":"shift_count += 1 ; NEW_LINE"}
{"text":"increase the power of 2","code":"power_of_2 = power_of_2 * 2 ; NEW_LINE"}
{"text":"set the lowest bit of the number","code":"return ( N + power_of_2 ) ; NEW_LINE"}
{"text":"Driver code","code":"N = 11 ; NEW_LINE"}
{"text":"display the next number","code":"print ( \" The \u2581 next \u2581 number \u2581 is \u2581 = \" , nextGreater ( N ) ) ; NEW_LINE"}
{"text":"Function to return the count of the total number of ways to cover the distance with 1 , 2 and 3 steps","code":"def countWays ( n ) : NEW_LINE"}
{"text":"Base conditions","code":"if ( n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( n <= 2 ) : NEW_LINE INDENT return n NEW_LINE DEDENT"}
{"text":"To store the last three stages","code":"f0 = 1 NEW_LINE f1 = 1 NEW_LINE f2 = 2 NEW_LINE ans = 0 NEW_LINE"}
{"text":"Find the numbers of steps required to reach the distance i","code":"for i in range ( 3 , n + 1 ) : NEW_LINE INDENT ans = f0 + f1 + f2 NEW_LINE f0 = f1 NEW_LINE f1 = f2 NEW_LINE f2 = ans NEW_LINE DEDENT"}
{"text":"Return the required answer","code":"return ans NEW_LINE"}
{"text":"Driver code","code":"n = 4 NEW_LINE print ( countWays ( n ) ) NEW_LINE"}
{"text":"Python3 program for the above approach","code":"import numpy as np NEW_LINE n = 6 ; m = 6 ; NEW_LINE"}
{"text":"Function to find the maximum value","code":"def maxSum ( arr ) : NEW_LINE"}
{"text":"Dp table","code":"dp = np . zeros ( ( n + 1 , 3 ) ) ; NEW_LINE"}
{"text":"Fill the dp in bottom up manner","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Maximum of the three sections","code":"m1 = 0 ; m2 = 0 ; m3 = 0 ; NEW_LINE for j in range ( m ) : NEW_LINE"}
{"text":"Maximum of the first section","code":"if ( ( j \/\/ ( m \/\/ 3 ) ) == 0 ) : NEW_LINE INDENT m1 = max ( m1 , arr [ i ] [ j ] ) ; NEW_LINE DEDENT"}
{"text":"Maximum of the second section","code":"elif ( ( j \/\/ ( m \/\/ 3 ) ) == 1 ) : NEW_LINE INDENT m2 = max ( m2 , arr [ i ] [ j ] ) ; NEW_LINE DEDENT"}
{"text":"Maximum of the third section","code":"elif ( ( j \/\/ ( m \/\/ 3 ) ) == 2 ) : NEW_LINE INDENT m3 = max ( m3 , arr [ i ] [ j ] ) ; NEW_LINE DEDENT"}
{"text":"If we choose element from section 1 , we cannot have selection from same section in adjacent rows","code":"dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 1 ] , dp [ i ] [ 2 ] ) + m1 ; NEW_LINE dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 2 ] ) + m2 ; NEW_LINE dp [ i + 1 ] [ 2 ] = max ( dp [ i ] [ 1 ] , dp [ i ] [ 0 ] ) + m3 ; NEW_LINE"}
{"text":"Print the maximum sum","code":"print ( max ( max ( dp [ n ] [ 0 ] , dp [ n ] [ 1 ] ) , dp [ n ] [ 2 ] ) ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ [ 1 , 3 , 5 , 2 , 4 , 6 ] , [ 6 , 4 , 5 , 1 , 3 , 2 ] , [ 1 , 3 , 5 , 2 , 4 , 6 ] , [ 6 , 4 , 5 , 1 , 3 , 2 ] , [ 6 , 4 , 5 , 1 , 3 , 2 ] , [ 1 , 3 , 5 , 2 , 4 , 6 ] ] ; NEW_LINE maxSum ( arr ) ; NEW_LINE DEDENT"}
{"text":"Function to find the total palindromic odd Length sub - sequences","code":"def solve ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE DEDENT"}
{"text":"dp array to store the number of palindromic subsequences for 0 to i - 1 and j + 1 to n - 1","code":"dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ] NEW_LINE"}
{"text":"We will start with the largest distance between i and j","code":"for Len in range ( n - 1 , - 1 , - 1 ) : NEW_LINE"}
{"text":"For each Len , we fix our i","code":"for i in range ( n ) : NEW_LINE INDENT if i + Len >= n : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT"}
{"text":"For this i we will find our j","code":"j = i + Len NEW_LINE"}
{"text":"Base cases","code":"if ( i == 0 and j == n - 1 ) : NEW_LINE INDENT if ( s [ i ] == s [ j ] ) : NEW_LINE INDENT dp [ i ] [ j ] = 2 NEW_LINE DEDENT elif ( s [ i ] != s [ j ] ) : NEW_LINE INDENT dp [ i ] [ j ] = 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if ( s [ i ] == s [ j ] ) : NEW_LINE DEDENT"}
{"text":"If the characters are equal then look for out of bound index","code":"if ( i - 1 >= 0 ) : NEW_LINE INDENT dp [ i ] [ j ] += dp [ i - 1 ] [ j ] NEW_LINE DEDENT if ( j + 1 <= n - 1 ) : NEW_LINE INDENT dp [ i ] [ j ] += dp [ i ] [ j + 1 ] NEW_LINE DEDENT if ( i - 1 < 0 or j + 1 >= n ) : NEW_LINE"}
{"text":"We have only 1 way that is to just pick these characters","code":"dp [ i ] [ j ] += 1 NEW_LINE elif ( s [ i ] != s [ j ] ) : NEW_LINE"}
{"text":"If the characters are not equal","code":"if ( i - 1 >= 0 ) : NEW_LINE INDENT dp [ i ] [ j ] += dp [ i - 1 ] [ j ] NEW_LINE DEDENT if ( j + 1 <= n - 1 ) : NEW_LINE INDENT dp [ i ] [ j ] += dp [ i ] [ j + 1 ] NEW_LINE DEDENT if ( i - 1 >= 0 and j + 1 <= n - 1 ) : NEW_LINE"}
{"text":"Subtract it as we have counted it twice","code":"dp [ i ] [ j ] -= dp [ i - 1 ] [ j + 1 ] NEW_LINE ways = [ ] NEW_LINE for i in range ( n ) : NEW_LINE if ( i == 0 or i == n - 1 ) : NEW_LINE"}
{"text":"We have just 1 palindrome sequence of Length 1","code":"ways . append ( 1 ) NEW_LINE else : NEW_LINE"}
{"text":"Else total ways would be sum of dp [ i - 1 ] [ i + 1 ] , that is number of palindrome sub - sequences from 1 to i - 1 + number of palindrome sub - sequences from i + 1 to n - 1","code":"total = dp [ i - 1 ] [ i + 1 ] NEW_LINE ways . append ( total ) NEW_LINE for i in ways : NEW_LINE print ( i , end = \" \u2581 \" ) NEW_LINE"}
{"text":"Driver code","code":"s = \" xyxyx \" NEW_LINE solve ( s ) NEW_LINE"}
{"text":"Function to return the number of chicks on the nth day","code":"def getChicks ( n ) : NEW_LINE"}
{"text":"Size of dp [ ] has to be at least 6 ( 1 - based indexing )","code":"size = max ( n , 7 ) ; NEW_LINE dp = [ 0 ] * size ; NEW_LINE dp [ 0 ] = 0 ; NEW_LINE dp [ 1 ] = 1 ; NEW_LINE"}
{"text":"Every day current population will be three times of the previous day","code":"for i in range ( 2 , 7 ) : NEW_LINE INDENT dp [ i ] = dp [ i - 1 ] * 3 ; NEW_LINE DEDENT"}
{"text":"Manually calculated value","code":"dp [ 6 ] = 726 ; NEW_LINE"}
{"text":"From 8 th day onwards","code":"for i in range ( 8 , n + 1 ) : NEW_LINE"}
{"text":"Chick population decreases by 2 \/ 3 everyday . For 8 th day on [ i - 6 ] i . e 2 nd day population was 3 and so 2 new born die on the 6 th day and so on for the upcoming days","code":"dp [ i ] = ( dp [ i - 1 ] - ( 2 * dp [ i - 6 ] \/\/ 3 ) ) * 3 ; NEW_LINE return dp [ n ] ; NEW_LINE"}
{"text":"Driver code","code":"n = 3 ; NEW_LINE print ( getChicks ( n ) ) ; NEW_LINE"}
{"text":"Function to return the number of chicks on the nth day","code":"def getChicks ( n ) : NEW_LINE INDENT chicks = pow ( 3 , n - 1 ) NEW_LINE return chicks NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 3 NEW_LINE print ( getChicks ( n ) ) NEW_LINE DEDENT"}
{"text":"Python3 implementation of the approach","code":"import numpy as np NEW_LINE n = 3 NEW_LINE"}
{"text":"2d array to store states of dp","code":"dp = np . zeros ( ( n , n ) ) NEW_LINE"}
{"text":"Array to determine whether a state has been solved before","code":"v = np . zeros ( ( n , n ) ) ; NEW_LINE"}
{"text":"Function to return the minimum steps required","code":"def minSteps ( i , j , arr ) : NEW_LINE"}
{"text":"Base cases","code":"if ( i == n - 1 and j == n - 1 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT if ( i > n - 1 or j > n - 1 ) : NEW_LINE INDENT return 9999999 ; NEW_LINE DEDENT"}
{"text":"If a state has been solved before it won 't be evaluated again","code":"if ( v [ i ] [ j ] ) : NEW_LINE INDENT return dp [ i ] [ j ] ; NEW_LINE DEDENT v [ i ] [ j ] = 1 ; NEW_LINE dp [ i ] [ j ] = 9999999 ; NEW_LINE"}
{"text":"Recurrence relation","code":"for k in range ( max ( 0 , arr [ i ] [ j ] + j - n + 1 ) , min ( n - i - 1 , arr [ i ] [ j ] ) + 1 ) : NEW_LINE INDENT dp [ i ] [ j ] = min ( dp [ i ] [ j ] , minSteps ( i + k , j + arr [ i ] [ j ] - k , arr ) ) ; NEW_LINE DEDENT dp [ i ] [ j ] += 1 ; NEW_LINE return dp [ i ] [ j ] ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ [ 4 , 1 , 2 ] , [ 1 , 1 , 1 ] , [ 2 , 1 , 1 ] ] ; NEW_LINE ans = minSteps ( 0 , 0 , arr ) ; NEW_LINE if ( ans >= 9999999 ) : NEW_LINE INDENT print ( - 1 ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( ans ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Python3 program to implement above approach","code":"import numpy as np ; NEW_LINE n = 3 NEW_LINE"}
{"text":"2d array to store states of dp","code":"dp = np . zeros ( ( n , n ) ) ; NEW_LINE"}
{"text":"array to determine whether a state has been solved before","code":"v = np . zeros ( ( n , n ) ) ; NEW_LINE"}
{"text":"Function to find the minimum number of steps to reach the end of matrix","code":"def minSteps ( i , j , arr ) : NEW_LINE"}
{"text":"base cases","code":"if ( i == n - 1 and j == n - 1 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT if ( i > n - 1 or j > n - 1 ) : NEW_LINE INDENT return 9999999 ; NEW_LINE DEDENT"}
{"text":"if a state has been solved before it won 't be evaluated again.","code":"if ( v [ i ] [ j ] ) : NEW_LINE INDENT return dp [ i ] [ j ] ; NEW_LINE DEDENT v [ i ] [ j ] = 1 ; NEW_LINE"}
{"text":"recurrence relation","code":"dp [ i ] [ j ] = 1 + min ( minSteps ( i + arr [ i ] [ j ] , j , arr ) , minSteps ( i , j + arr [ i ] [ j ] , arr ) ) ; NEW_LINE return dp [ i ] [ j ] ; NEW_LINE"}
{"text":"Driver Code","code":"arr = [ [ 2 , 1 , 2 ] , [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] ; NEW_LINE ans = minSteps ( 0 , 0 , arr ) ; NEW_LINE if ( ans >= 9999999 ) : NEW_LINE INDENT print ( - 1 ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( ans ) ; NEW_LINE DEDENT"}
{"text":"A memoization based program to find maximum treasure that can be collected .","code":"MAX = 1001 NEW_LINE dp = [ [ - 1 for i in range ( MAX ) ] for i in range ( MAX ) ] NEW_LINE"}
{"text":"k is current index and col is previous color .","code":"def MaxProfit ( treasure , color , n , k , col , A , B ) : NEW_LINE INDENT if ( k == n ) : NEW_LINE DEDENT"}
{"text":"base case","code":"dp [ k ] [ col ] = 0 NEW_LINE return dp [ k ] [ col ] NEW_LINE if ( dp [ k ] [ col ] != - 1 ) : NEW_LINE return dp [ k ] [ col ] NEW_LINE summ = 0 NEW_LINE"}
{"text":"we have two options either visit current city or skip that","code":"if ( col == color [ k ] ) : NEW_LINE"}
{"text":"check if color of this city is equal to prev visited city","code":"summ += max ( A * treasure [ k ] + MaxProfit ( treasure , color , n , k + 1 , color [ k ] , A , B ) , MaxProfit ( treasure , color , n , k + 1 , col , A , B ) ) NEW_LINE else : NEW_LINE summ += max ( B * treasure [ k ] + MaxProfit ( treasure , color , n , k + 1 , color [ k ] , A , B ) , MaxProfit ( treasure , color , n , k + 1 , col , A , B ) ) NEW_LINE dp [ k ] [ col ] = summ NEW_LINE"}
{"text":"return max of both options","code":"return dp [ k ] [ col ] NEW_LINE"}
{"text":"Driver code","code":"A = - 5 NEW_LINE B = 7 NEW_LINE treasure = [ 4 , 8 , 2 , 9 ] NEW_LINE color = [ 2 , 2 , 6 , 2 ] NEW_LINE n = len ( color ) NEW_LINE print ( MaxProfit ( treasure , color , n , 0 , 0 , A , B ) ) NEW_LINE"}
{"text":"Function to print the N - th tetranacci number","code":"def printTetra ( n ) : NEW_LINE INDENT dp = [ 0 ] * ( n + 5 ) ; NEW_LINE DEDENT"}
{"text":"base cases","code":"dp [ 0 ] = 0 ; NEW_LINE dp [ 1 ] = 1 ; NEW_LINE dp [ 2 ] = 1 ; NEW_LINE dp [ 3 ] = 2 ; NEW_LINE for i in range ( 4 , n + 1 ) : NEW_LINE INDENT dp [ i ] = ( dp [ i - 1 ] + dp [ i - 2 ] + dp [ i - 3 ] + dp [ i - 4 ] ) ; NEW_LINE DEDENT print ( dp [ n ] ) ; NEW_LINE"}
{"text":"Driver code","code":"n = 10 ; NEW_LINE printTetra ( n ) ; NEW_LINE"}
{"text":"Function to calculate the sum from 0 th position to ( n - 2 ) th position","code":"def maxSum1 ( arr , n ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE maxi = 0 NEW_LINE for i in range ( n - 1 ) : NEW_LINE DEDENT"}
{"text":"copy the element of original array to dp [ ]","code":"dp [ i ] = arr [ i ] NEW_LINE"}
{"text":"find the maximum element in the array","code":"if ( maxi < arr [ i ] ) : NEW_LINE INDENT maxi = arr [ i ] NEW_LINE DEDENT"}
{"text":"start from 2 nd to n - 1 th pos","code":"for i in range ( 2 , n - 1 ) : NEW_LINE"}
{"text":"traverse for all pairs bottom - up approach","code":"for j in range ( i - 1 ) : NEW_LINE"}
{"text":"dp - condition","code":"if ( dp [ i ] < dp [ j ] + arr [ i ] ) : NEW_LINE INDENT dp [ i ] = dp [ j ] + arr [ i ] NEW_LINE DEDENT"}
{"text":"find maximum sum","code":"if ( maxi < dp [ i ] ) : NEW_LINE INDENT maxi = dp [ i ] NEW_LINE DEDENT"}
{"text":"return the maximum","code":"return maxi NEW_LINE"}
{"text":"Function to find the maximum sum from 1 st position to n - 1 - th position","code":"def maxSum2 ( arr , n ) : NEW_LINE INDENT dp = [ 0 ] * n NEW_LINE maxi = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT dp [ i ] = arr [ i ] NEW_LINE if ( maxi < arr [ i ] ) : NEW_LINE INDENT maxi = arr [ i ] NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Traverse from third to n - th pos","code":"for i in range ( 3 , n ) : NEW_LINE"}
{"text":"bootom - up approach","code":"for j in range ( 1 , i - 1 ) : NEW_LINE"}
{"text":"dp condition","code":"if ( dp [ i ] < arr [ i ] + dp [ j ] ) : NEW_LINE INDENT dp [ i ] = arr [ i ] + dp [ j ] NEW_LINE DEDENT"}
{"text":"find max sum","code":"if ( maxi < dp [ i ] ) : NEW_LINE INDENT maxi = dp [ i ] NEW_LINE DEDENT"}
{"text":"return max","code":"return maxi NEW_LINE def findMaxSum ( arr , n ) : NEW_LINE return max ( maxSum1 ( arr , n ) , maxSum2 ( arr , n ) ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxSum ( arr , n ) ) NEW_LINE DEDENT"}
{"text":"Returns value of Permutation Coefficient P ( n , k )","code":"def permutationCoeff ( n , k ) : NEW_LINE INDENT P = [ [ 0 for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] NEW_LINE DEDENT"}
{"text":"Calculate value of Permutation Coefficient in bottom up manner","code":"for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( min ( i , k ) + 1 ) : NEW_LINE DEDENT"}
{"text":"Base cases","code":"if ( j == 0 ) : NEW_LINE INDENT P [ i ] [ j ] = 1 NEW_LINE DEDENT"}
{"text":"Calculate value using previously stored values","code":"else : NEW_LINE INDENT P [ i ] [ j ] = P [ i - 1 ] [ j ] + ( j * P [ i - 1 ] [ j - 1 ] ) NEW_LINE DEDENT"}
{"text":"This step is important as P ( i , j ) = 0 for j > i","code":"if ( j < k ) : NEW_LINE INDENT P [ i ] [ j + 1 ] = 0 NEW_LINE DEDENT return P [ n ] [ k ] NEW_LINE"}
{"text":"Driver Code","code":"n = 10 NEW_LINE k = 2 NEW_LINE print ( \" Value \u2581 fo \u2581 P ( \" , n , \" , \u2581 \" , k , \" ) \u2581 is \u2581 \" , permutationCoeff ( n , k ) , sep = \" \" ) NEW_LINE"}
{"text":"Returns value of Permutation Coefficient P ( n , k )","code":"def permutationCoeff ( n , k ) : NEW_LINE INDENT fact = [ 0 for i in range ( n + 1 ) ] NEW_LINE DEDENT"}
{"text":"base case","code":"fact [ 0 ] = 1 NEW_LINE"}
{"text":"Calculate value factorials up to n","code":"for i in range ( 1 , n + 1 ) : NEW_LINE INDENT fact [ i ] = i * fact [ i - 1 ] NEW_LINE DEDENT"}
{"text":"P ( n , k ) = n ! \/ ( n - k ) !","code":"return int ( fact [ n ] \/ fact [ n - k ] ) NEW_LINE"}
{"text":"Driver Code","code":"n = 10 NEW_LINE k = 2 NEW_LINE print ( \" Value \u2581 of \u2581 P ( \" , n , \" , \u2581 \" , k , \" ) \u2581 is \u2581 \" , permutationCoeff ( n , k ) , sep = \" \" ) NEW_LINE"}
{"text":"Returns true if there is a subset of set [ ] with sun equal to given sum","code":"def isSubsetSum ( set , n , sum ) : NEW_LINE"}
{"text":"Base Cases","code":"if ( sum == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"If last element is greater than sum , then ignore it","code":"if ( set [ n - 1 ] > sum ) : NEW_LINE INDENT return isSubsetSum ( set , n - 1 , sum ) NEW_LINE DEDENT"}
{"text":"else , check if sum can be obtained by any of the following ( a ) including the last element ( b ) excluding the last element","code":"return isSubsetSum ( set , n - 1 , sum ) or isSubsetSum ( set , n - 1 , sum - set [ n - 1 ] ) NEW_LINE"}
{"text":"Driver code","code":"set = [ 3 , 34 , 4 , 12 , 5 , 2 ] NEW_LINE sum = 9 NEW_LINE n = len ( set ) NEW_LINE if ( isSubsetSum ( set , n , sum ) == True ) : NEW_LINE INDENT print ( \" Found \u2581 a \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT"}
{"text":"Implementation of Z - algorithm for linear time pattern searching","code":"def compute_z ( s , z ) : NEW_LINE INDENT l = 0 NEW_LINE r = 0 NEW_LINE n = len ( s ) NEW_LINE for i in range ( 1 , n , 1 ) : NEW_LINE INDENT if ( i > r ) : NEW_LINE INDENT l = i NEW_LINE r = i NEW_LINE while ( r < n and s [ r - l ] == s [ r ] ) : NEW_LINE INDENT r += 1 NEW_LINE DEDENT z [ i ] = r - l NEW_LINE r -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT k = i - l NEW_LINE if ( z [ k ] < r - i + 1 ) : NEW_LINE INDENT z [ i ] = z [ k ] NEW_LINE DEDENT else : NEW_LINE INDENT l = i NEW_LINE while ( r < n and s [ r - l ] == s [ r ] ) : NEW_LINE INDENT r += 1 NEW_LINE DEDENT z [ i ] = r - l NEW_LINE r -= 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT"}
{"text":"Function to get the count of the cyclic permutations of b that given 0 when XORed with a","code":"def countPermutation ( a , b ) : NEW_LINE"}
{"text":"concatenate b with b","code":"b = b + b NEW_LINE"}
{"text":"new b now contains all the cyclic permutations of old b as it 's sub-strings","code":"b = b [ 0 : len ( b ) - 1 ] NEW_LINE"}
{"text":"concatenate pattern with text","code":"ans = 0 NEW_LINE s = a + \" $ \" + b NEW_LINE n = len ( s ) NEW_LINE"}
{"text":"Fill z array used in Z algorithm","code":"z = [ 0 for i in range ( n ) ] NEW_LINE compute_z ( s , z ) NEW_LINE for i in range ( 1 , n , 1 ) : NEW_LINE"}
{"text":"pattern occurs at index i since z value of i equals pattern length","code":"if ( z [ i ] == len ( a ) ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = \"101\" NEW_LINE b = \"101\" NEW_LINE print ( countPermutation ( a , b ) ) NEW_LINE DEDENT"}
{"text":"Function to find lexicographically smallest subsequence of size K","code":"def smallestSubsequence ( S , K ) : NEW_LINE"}
{"text":"Length of string","code":"N = len ( S ) NEW_LINE"}
{"text":"Stores the minimum subsequence","code":"answer = [ ] NEW_LINE"}
{"text":"Traverse the string S","code":"for i in range ( N ) : NEW_LINE"}
{"text":"If the stack is empty","code":"if ( len ( answer ) == 0 ) : NEW_LINE INDENT answer . append ( S [ i ] ) NEW_LINE DEDENT else : NEW_LINE"}
{"text":"Iterate till the current character is less than the the character at the top of stack","code":"while ( len ( answer ) > 0 and ( S [ i ] < answer [ len ( answer ) - 1 ] ) and ( len ( answer ) - 1 + N - i >= K ) ) : NEW_LINE INDENT answer = answer [ : - 1 ] NEW_LINE DEDENT"}
{"text":"If stack size is < K","code":"if ( len ( answer ) == 0 or len ( answer ) < K ) : NEW_LINE"}
{"text":"Push the current character into it","code":"answer . append ( S [ i ] ) NEW_LINE"}
{"text":"Stores the resultant string","code":"ret = [ ] NEW_LINE"}
{"text":"Iterate until stack is empty","code":"while ( len ( answer ) > 0 ) : NEW_LINE INDENT ret . append ( answer [ len ( answer ) - 1 ] ) NEW_LINE answer = answer [ : - 1 ] NEW_LINE DEDENT"}
{"text":"Reverse the string","code":"ret = ret [ : : - 1 ] NEW_LINE ret = ' ' . join ( ret ) NEW_LINE"}
{"text":"Print the string","code":"print ( ret ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT S = \" aabdaabc \" NEW_LINE K = 3 NEW_LINE smallestSubsequence ( S , K ) NEW_LINE DEDENT"}
{"text":"Python3 program to Check if the given is right to left diagonal or not","code":"from math import sqrt , floor , ceil NEW_LINE"}
{"text":"Function to check if the given is right to left diagonal or not","code":"def is_rtol ( s ) : NEW_LINE INDENT tmp = floor ( sqrt ( len ( s ) ) ) - 1 NEW_LINE first = s [ tmp ] NEW_LINE DEDENT"}
{"text":"Iterate over string","code":"for pos in range ( tmp , len ( s ) - 1 , tmp ) : NEW_LINE"}
{"text":"If character is not same as the first character then return false","code":"if ( s [ pos ] != first ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given String str","code":"str = \" abcxabxcaxbcxabc \" NEW_LINE"}
{"text":"Function Call","code":"if ( is_rtol ( str ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Function for checking string","code":"def check ( str , K ) : NEW_LINE"}
{"text":"Check if the string can be split into substrings of K length only","code":"if ( len ( str ) % K == 0 ) : NEW_LINE INDENT sum = 0 NEW_LINE DEDENT"}
{"text":"Compute the sum of first substring of length K","code":"for i in range ( K ) : NEW_LINE INDENT sum += ord ( str [ i ] ) ; NEW_LINE DEDENT"}
{"text":"Compute the sum of remaining substrings","code":"for j in range ( K , len ( str ) , K ) : NEW_LINE INDENT s_comp = 0 ; NEW_LINE for p in range ( j , j + K ) : NEW_LINE INDENT s_comp += ord ( str [ p ] ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Check if sum is equal to that of the first substring","code":"if ( s_comp != sum ) : NEW_LINE"}
{"text":"Since all sums are not equal , return False","code":"return False ; NEW_LINE"}
{"text":"All sums are equal , Return true","code":"return True ; NEW_LINE"}
{"text":"All substrings cannot be of size K","code":"return False ; NEW_LINE"}
{"text":"Driver code","code":"K = 3 ; NEW_LINE str = \" abdcbbdba \" ; NEW_LINE if ( check ( str , K ) ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT"}
{"text":"Function to maximize the sum of the count of zeros and ones in the left and right substring","code":"def maxSum ( str ) : NEW_LINE INDENT maximumSum = 0 NEW_LINE DEDENT"}
{"text":"Count the total numbers of ones in str","code":"totalOnes = 0 NEW_LINE for i in str : NEW_LINE INDENT if i == '1' : NEW_LINE INDENT totalOnes += 1 NEW_LINE DEDENT DEDENT"}
{"text":"To store the count of zeros and ones while traversing string","code":"zero = 0 NEW_LINE ones = 0 NEW_LINE"}
{"text":"Iterate the given and update the maximum sum","code":"i = 0 NEW_LINE while i < len ( str ) : NEW_LINE INDENT if ( str [ i ] == '0' ) : NEW_LINE INDENT zero += 1 NEW_LINE DEDENT else : NEW_LINE INDENT ones += 1 NEW_LINE DEDENT DEDENT"}
{"text":"Update the maximum Sum","code":"maximumSum = max ( maximumSum , zero + ( totalOnes - ones ) ) NEW_LINE i += 1 NEW_LINE return maximumSum NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given binary string","code":"str = \"011101\" NEW_LINE"}
{"text":"Function call","code":"print ( maxSum ( str ) ) NEW_LINE"}
{"text":"Function to return the length of the longest substring such that no three consecutive characters are same","code":"def maxLenSubStr ( s ) : NEW_LINE"}
{"text":"If the length of the given string is less than 3","code":"if ( len ( s ) < 3 ) : NEW_LINE INDENT return len ( s ) NEW_LINE DEDENT"}
{"text":"Initialize temporary and final ans to 2 as this is the minimum length of substring when length of the given string is greater than 2","code":"temp = 2 NEW_LINE ans = 2 NEW_LINE"}
{"text":"Traverse the string from the third character to the last","code":"for i in range ( 2 , len ( s ) ) : NEW_LINE"}
{"text":"If no three consecutive characters are same then increment temporary count","code":"if ( s [ i ] != s [ i - 1 ] or s [ i ] != s [ i - 2 ] ) : NEW_LINE INDENT temp += 1 NEW_LINE DEDENT"}
{"text":"Else update the final ans and reset the temporary count","code":"else : NEW_LINE INDENT ans = max ( temp , ans ) NEW_LINE temp = 2 NEW_LINE DEDENT ans = max ( temp , ans ) NEW_LINE return ans NEW_LINE"}
{"text":"Driver code","code":"s = \" baaabbabbb \" NEW_LINE print ( maxLenSubStr ( s ) ) NEW_LINE"}
{"text":"Function to return the number of ways of removing a sub - string from s such that all the remaining characters are same","code":"def no_of_ways ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE DEDENT"}
{"text":"To store the count of prefix and suffix","code":"count_left = 0 NEW_LINE count_right = 0 NEW_LINE"}
{"text":"Loop to count prefix","code":"for i in range ( 0 , n , 1 ) : NEW_LINE INDENT if ( s [ i ] == s [ 0 ] ) : NEW_LINE INDENT count_left += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT"}
{"text":"Loop to count suffix","code":"i = n - 1 NEW_LINE while ( i >= 0 ) : NEW_LINE INDENT if ( s [ i ] == s [ n - 1 ] ) : NEW_LINE INDENT count_right += 1 NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT i -= 1 NEW_LINE DEDENT"}
{"text":"First and last characters of the string are same","code":"if ( s [ 0 ] == s [ n - 1 ] ) : NEW_LINE INDENT return ( ( count_left + 1 ) * ( count_right + 1 ) ) NEW_LINE DEDENT"}
{"text":"Otherwise","code":"else : NEW_LINE INDENT return ( count_left + count_right + 1 ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = \" geeksforgeeks \" NEW_LINE print ( no_of_ways ( s ) ) NEW_LINE DEDENT"}
{"text":"Function to create prefix array","code":"def preCompute ( n , s , pref ) : NEW_LINE INDENT for i in range ( 1 , n ) : NEW_LINE INDENT pref [ i ] = pref [ i - 1 ] NEW_LINE if s [ i - 1 ] == s [ i ] : NEW_LINE INDENT pref [ i ] += 1 NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Function to return the result of the query","code":"def query ( pref , l , r ) : NEW_LINE INDENT return pref [ r ] - pref [ l ] NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \" ggggggg \" NEW_LINE n = len ( s ) NEW_LINE pref = [ 0 ] * n NEW_LINE preCompute ( n , s , pref ) NEW_LINE DEDENT"}
{"text":"Query 1","code":"l = 1 NEW_LINE r = 2 NEW_LINE print ( query ( pref , l , r ) ) NEW_LINE"}
{"text":"Query 2","code":"l = 1 NEW_LINE r = 5 NEW_LINE print ( query ( pref , l , r ) ) NEW_LINE"}
{"text":"Function to find the final direction","code":"def findDirection ( s ) : NEW_LINE INDENT count = 0 NEW_LINE d = \" \" NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT if ( s [ i ] == ' L ' ) : NEW_LINE INDENT count -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT if ( s [ i ] == ' R ' ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT DEDENT"}
{"text":"if count is positive that implies resultant is clockwise direction","code":"if ( count > 0 ) : NEW_LINE INDENT if ( count % 4 == 0 ) : NEW_LINE INDENT d = \" N \" NEW_LINE DEDENT elif ( count % 4 == 10 ) : NEW_LINE INDENT d = \" E \" NEW_LINE DEDENT elif ( count % 4 == 2 ) : NEW_LINE INDENT d = \" S \" NEW_LINE DEDENT elif ( count % 4 == 3 ) : NEW_LINE INDENT d = \" W \" NEW_LINE DEDENT DEDENT"}
{"text":"if count is negative that implies resultant is anti - clockwise direction","code":"if ( count < 0 ) : NEW_LINE INDENT count *= - 1 NEW_LINE if ( count % 4 == 0 ) : NEW_LINE INDENT d = \" N \" NEW_LINE DEDENT elif ( count % 4 == 1 ) : NEW_LINE INDENT d = \" W \" NEW_LINE DEDENT elif ( count % 4 == 2 ) : NEW_LINE INDENT d = \" S \" NEW_LINE DEDENT elif ( count % 4 == 3 ) : NEW_LINE INDENT d = \" E \" NEW_LINE DEDENT DEDENT return d NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = \" LLRLRRL \" NEW_LINE print ( findDirection ( s ) ) NEW_LINE s = \" LL \" NEW_LINE print ( findDirection ( s ) ) NEW_LINE DEDENT"}
{"text":"Function to check if both the case follow the same order","code":"def isCheck ( str ) : NEW_LINE INDENT length = len ( str ) NEW_LINE lowerStr , upperStr = \" \" , \" \" NEW_LINE DEDENT"}
{"text":"Traverse the string","code":"for i in range ( length ) : NEW_LINE"}
{"text":"Store both lowercase and uppercase in two different strings","code":"if ( ord ( str [ i ] ) >= 65 and ord ( str [ i ] ) <= 91 ) : NEW_LINE INDENT upperStr = upperStr + str [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT lowerStr = lowerStr + str [ i ] NEW_LINE DEDENT"}
{"text":"transfor lowerStr to uppercase","code":"transformStr = lowerStr . upper ( ) NEW_LINE return transformStr == upperStr NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str = \" geeGkEEsKS \" NEW_LINE if isCheck ( str ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to move string character","code":"def encode ( s , k ) : NEW_LINE"}
{"text":"changed string","code":"newS = \" \" NEW_LINE"}
{"text":"iterate for every characters","code":"for i in range ( len ( s ) ) : NEW_LINE"}
{"text":"ASCII value","code":"val = ord ( s [ i ] ) NEW_LINE"}
{"text":"store the duplicate","code":"dup = k NEW_LINE"}
{"text":"if k - th ahead character exceed 'z","code":"' NEW_LINE INDENT if val + k > 122 : NEW_LINE INDENT k -= ( 122 - val ) NEW_LINE k = k % 26 NEW_LINE newS += chr ( 96 + k ) NEW_LINE DEDENT else : NEW_LINE INDENT newS += chr ( val + k ) NEW_LINE DEDENT k = dup NEW_LINE DEDENT"}
{"text":"print the new string","code":"print ( newS ) NEW_LINE"}
{"text":"driver code","code":"str = \" abc \" NEW_LINE k = 28 NEW_LINE"}
{"text":"'' function call","code":"encode ( str , k ) NEW_LINE"}
{"text":"Function to check if the character x is a vowel or not","code":"def isVowel ( x ) : NEW_LINE INDENT if ( x == ' a ' or x == ' e ' or x == ' i ' or x == ' o ' or x == ' u ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT"}
{"text":"Returns the updated string formed after removing all the Sandwiched Vowels from the given string","code":"def updateSandwichedVowels ( a ) : NEW_LINE INDENT n = len ( a ) NEW_LINE DEDENT"}
{"text":"string to store the Updated String after removing the Sandwiched Vowels","code":"updatedString = \" \" NEW_LINE"}
{"text":"traverse the string from left to right","code":"for i in range ( 0 , n , 1 ) : NEW_LINE"}
{"text":"if the current character is the first or the last character of the string then , this needs to be appended to the updatedString , since the corner alphabet irrespective of it being a vowel or a consonant , is never 'Sandwiched","code":"' NEW_LINE INDENT if ( i == 0 or i == n - 1 ) : NEW_LINE INDENT updatedString += a [ i ] NEW_LINE continue NEW_LINE DEDENT DEDENT"}
{"text":"Check if the current character of the string is a vowel and both the previous and the next characters are consonants , if so then this is a sandwiched vowel , thus is ignored and not appended to the updated string","code":"if ( isVowel ( a [ i ] ) == True and isVowel ( a [ i - 1 ] ) == False and isVowel ( a [ i + 1 ] ) == False ) : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"if this character is not a sandwiched Vowel append it to the updated String","code":"updatedString += a [ i ] NEW_LINE return updatedString NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = \" geeksforgeeks \" NEW_LINE DEDENT"}
{"text":"Remove all the Sandwitched Vowels","code":"updatedString = updateSandwichedVowels ( str ) NEW_LINE print ( updatedString ) NEW_LINE"}
{"text":"A Binary Tree node","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT"}
{"text":"A recursive function to print the paths whose maximum element is greater than or equal to K .","code":"def findPathUtil ( root : Node , k : int , path : list , flag : int ) : NEW_LINE INDENT global ans NEW_LINE if root is None : NEW_LINE INDENT return NEW_LINE DEDENT DEDENT"}
{"text":"If the current node value is greater than or equal to k , then all the subtrees following that node will get printed , flag = 1 indicates to print the required path","code":"if root . data >= k : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"If the leaf node is encountered , then the path is printed if the size of the path vector is greater than 0","code":"if root . left is None and root . right is None : NEW_LINE INDENT if flag : NEW_LINE INDENT ans = 1 NEW_LINE print ( \" ( \" , end = \" \" ) NEW_LINE for i in range ( len ( path ) ) : NEW_LINE INDENT print ( path [ i ] , end = \" , \u2581 \" ) NEW_LINE DEDENT print ( root . data , end = \" ) , \u2581 \" ) NEW_LINE DEDENT return NEW_LINE DEDENT"}
{"text":"Append the node to the path vector","code":"path . append ( root . data ) NEW_LINE"}
{"text":"Recur left and right subtrees","code":"findPathUtil ( root . left , k , path , flag ) NEW_LINE findPathUtil ( root . right , k , path , flag ) NEW_LINE"}
{"text":"Backtracking to return the vector and print the path if the flag is 1","code":"path . pop ( ) NEW_LINE"}
{"text":"Function to initialize the variables and call the utility function to print the paths with maximum values greater than or equal to K","code":"def findPath ( root : Node , k : int ) : NEW_LINE INDENT global ans NEW_LINE DEDENT"}
{"text":"Initialize flag","code":"flag = 0 NEW_LINE"}
{"text":"ans is used to check empty condition","code":"ans = 0 NEW_LINE v = [ ] NEW_LINE"}
{"text":"Call function that print path","code":"findPathUtil ( root , k , v , flag ) NEW_LINE"}
{"text":"If the path doesn 't exist","code":"if ans == 0 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT ans = 0 NEW_LINE k = 25 NEW_LINE DEDENT"}
{"text":"Constructing the following tree : 10 \/ \\ 5 8 \/ \\ \/ \\ 29 2 1 98 \/ \\ 20 50","code":"root = Node ( 10 ) NEW_LINE root . left = Node ( 5 ) NEW_LINE root . right = Node ( 8 ) NEW_LINE root . left . left = Node ( 29 ) NEW_LINE root . left . right = Node ( 2 ) NEW_LINE root . right . right = Node ( 98 ) NEW_LINE root . right . left = Node ( 1 ) NEW_LINE root . right . right . right = Node ( 50 ) NEW_LINE root . left . left . left = Node ( 20 ) NEW_LINE findPath ( root , k ) NEW_LINE"}
{"text":"Function to find N - th tridecagonal number","code":"def Tridecagonal_num ( n ) : NEW_LINE"}
{"text":"Formula to calculate nth tridecagonal number","code":"return ( 11 * n * n - 9 * n ) \/ 2 NEW_LINE"}
{"text":"Driver Code","code":"n = 3 NEW_LINE print ( int ( Tridecagonal_num ( n ) ) ) NEW_LINE n = 10 NEW_LINE print ( int ( Tridecagonal_num ( n ) ) ) NEW_LINE"}
{"text":"Function to find total possible numbers with n digits and weight w","code":"def findNumbers ( n , w ) : NEW_LINE INDENT x = 0 ; NEW_LINE sum = 0 ; NEW_LINE DEDENT"}
{"text":"When Weight of an integer is Positive","code":"if ( w >= 0 and w <= 8 ) : NEW_LINE"}
{"text":"Subtract the weight from 9","code":"x = 9 - w ; NEW_LINE"}
{"text":"When weight of an integer is negative","code":"elif ( w >= - 9 and w <= - 1 ) : NEW_LINE"}
{"text":"add the weight to 10 to make it positive","code":"x = 10 + w ; NEW_LINE sum = pow ( 10 , n - 2 ) ; NEW_LINE sum = ( x * sum ) ; NEW_LINE return sum ; NEW_LINE"}
{"text":"number of digits in an integer and w as weight","code":"n = 3 ; NEW_LINE w = 4 ; NEW_LINE"}
{"text":"print the total possible numbers with n digits and weight w","code":"print ( findNumbers ( n , w ) ) ; NEW_LINE"}
{"text":"Python program to find the maximum height of Pyramidal Arrangement of array values","code":"def MaximumHeight ( a , n ) : NEW_LINE INDENT result = 1 NEW_LINE for i in range ( 1 , n ) : NEW_LINE DEDENT"}
{"text":"Just checking whether ith level is possible or not if possible then we must have atleast ( i * ( i + 1 ) ) \/ 2 elements in the array","code":"y = ( i * ( i + 1 ) ) \/ 2 NEW_LINE"}
{"text":"updating the result value each time","code":"if ( y < n ) : NEW_LINE INDENT result = i NEW_LINE DEDENT"}
{"text":"otherwise we have exceeded n value","code":"else : NEW_LINE INDENT break NEW_LINE DEDENT return result NEW_LINE"}
{"text":"Driver Code","code":"arr = [ 40 , 100 , 20 , 30 ] NEW_LINE n = len ( arr ) NEW_LINE print ( MaximumHeight ( arr , n ) ) NEW_LINE"}
{"text":"Python3 code to find k - th element in the Odd - Even sequence .","code":"def findK ( n , k ) : NEW_LINE INDENT a = list ( ) NEW_LINE DEDENT"}
{"text":"insert all the odd numbers from 1 to n .","code":"i = 1 NEW_LINE while i < n : NEW_LINE INDENT a . append ( i ) NEW_LINE i = i + 2 NEW_LINE DEDENT"}
{"text":"insert all the even numbers from 1 to n .","code":"i = 2 NEW_LINE while i < n : NEW_LINE INDENT a . append ( i ) NEW_LINE i = i + 2 NEW_LINE DEDENT return ( a [ k - 1 ] ) NEW_LINE"}
{"text":"Driver code","code":"n = 10 NEW_LINE k = 3 NEW_LINE print ( findK ( n , k ) ) NEW_LINE"}
{"text":"Python3 program to find factorial of given number","code":"def factorial ( n ) : NEW_LINE"}
{"text":"single line to find factorial","code":"return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 1 ) ; NEW_LINE"}
{"text":"Driver Code","code":"num = 5 ; NEW_LINE print ( \" Factorial \u2581 of \" , num , \" is \" , factorial ( num ) ) ; NEW_LINE"}
{"text":"calculate nth pell number","code":"def pell ( n ) : NEW_LINE INDENT if ( n <= 2 ) : NEW_LINE INDENT return n NEW_LINE DEDENT a = 1 NEW_LINE b = 2 NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT c = 2 * b + a NEW_LINE a = b NEW_LINE b = c NEW_LINE DEDENT return b NEW_LINE DEDENT"}
{"text":"driver function","code":"n = 4 NEW_LINE print ( pell ( n ) ) NEW_LINE"}
{"text":"Returns true if n - th Fibonacci number is multiple of 10.","code":"def isMultipleOf10 ( n ) : NEW_LINE INDENT return ( n % 15 == 0 ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"n = 30 NEW_LINE if ( isMultipleOf10 ( n ) ) : NEW_LINE INDENT print ( \" Yes \" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) ; NEW_LINE DEDENT"}
{"text":"A function to count all odd prime factors of a given number n","code":"def countOddPrimeFactors ( n ) : NEW_LINE INDENT result = 1 ; NEW_LINE DEDENT"}
{"text":"Eliminate all even prime factor of number of n","code":"while ( n % 2 == 0 ) : NEW_LINE INDENT n \/= 2 NEW_LINE DEDENT"}
{"text":"n must be odd at this point , so iterate for only odd numbers till sqrt ( n )","code":"i = 3 NEW_LINE while i * i <= n : NEW_LINE INDENT divCount = 0 NEW_LINE DEDENT"}
{"text":"if i divides n , then start counting of Odd divisors","code":"while ( n % i == 0 ) : NEW_LINE INDENT n \/= i NEW_LINE divCount = divCount + 1 NEW_LINE DEDENT result = result * divCount + 1 NEW_LINE i = i + 2 NEW_LINE"}
{"text":"If n odd prime still remains then count it","code":"if ( n > 2 ) : NEW_LINE INDENT result = result * 2 NEW_LINE DEDENT return result NEW_LINE def politness ( n ) : NEW_LINE return countOddPrimeFactors ( n ) - 1 ; NEW_LINE"}
{"text":"Driver program to test above function","code":"n = 90 NEW_LINE print \" Politness \u2581 of \u2581 \" , n , \" \u2581 = \u2581 \" , politness ( n ) NEW_LINE n = 15 NEW_LINE print \" Politness \u2581 of \u2581 \" , n , \" \u2581 = \u2581 \" , politness ( n ) NEW_LINE"}
{"text":"Python3 program to find the nearest prime to n .","code":"import math NEW_LINE MAX = 10000 ; NEW_LINE"}
{"text":"array to store all primes less than 10 ^ 6","code":"primes = [ ] ; NEW_LINE"}
{"text":"Utility function of Sieve of Sundaram","code":"def Sieve ( ) : NEW_LINE INDENT n = MAX ; NEW_LINE DEDENT"}
{"text":"In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x","code":"nNew = int ( math . sqrt ( n ) ) ; NEW_LINE"}
{"text":"This array is used to separate numbers of the form i + j + 2 ij from others where 1 <= i <= j","code":"marked = [ 0 ] * ( int ( n \/ 2 + 500 ) ) ; NEW_LINE"}
{"text":"eliminate indexes which does not produce primes","code":"for i in range ( 1 , int ( ( nNew - 1 ) \/ 2 ) + 1 ) : NEW_LINE INDENT for j in range ( ( ( i * ( i + 1 ) ) << 1 ) , ( int ( n \/ 2 ) + 1 ) , ( 2 * i + 1 ) ) : NEW_LINE INDENT marked [ j ] = 1 ; NEW_LINE DEDENT DEDENT"}
{"text":"Since 2 is a prime number","code":"primes . append ( 2 ) ; NEW_LINE"}
{"text":"Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .","code":"for i in range ( 1 , int ( n \/ 2 ) + 1 ) : NEW_LINE INDENT if ( marked [ i ] == 0 ) : NEW_LINE INDENT primes . append ( 2 * i + 1 ) ; NEW_LINE DEDENT DEDENT"}
{"text":"modified binary search to find nearest prime less than N","code":"def binarySearch ( left , right , n ) : NEW_LINE INDENT if ( left <= right ) : NEW_LINE INDENT mid = int ( ( left + right ) \/ 2 ) ; NEW_LINE DEDENT DEDENT"}
{"text":"base condition is , if we are reaching at left corner or right corner of primes [ ] array then return that corner element because before or after that we don 't have any prime number in  primes array","code":"if ( mid == 0 or mid == len ( primes ) - 1 ) : NEW_LINE INDENT return primes [ mid ] ; NEW_LINE DEDENT"}
{"text":"now if n is itself a prime so it will be present in primes array and here we have to find nearest prime less than n so we will return primes [ mid - 1 ]","code":"if ( primes [ mid ] == n ) : NEW_LINE INDENT return primes [ mid - 1 ] ; NEW_LINE DEDENT"}
{"text":"now if primes [ mid ] < n and primes [ mid + 1 ] > n that means we reached at nearest prime","code":"if ( primes [ mid ] < n and primes [ mid + 1 ] > n ) : NEW_LINE INDENT return primes [ mid ] ; NEW_LINE DEDENT if ( n < primes [ mid ] ) : NEW_LINE INDENT return binarySearch ( left , mid - 1 , n ) ; NEW_LINE DEDENT else : NEW_LINE INDENT return binarySearch ( mid + 1 , right , n ) ; NEW_LINE DEDENT return 0 ; NEW_LINE"}
{"text":"Driver Code","code":"Sieve ( ) ; NEW_LINE n = 17 ; NEW_LINE print ( binarySearch ( 0 , len ( primes ) - 1 , n ) ) ; NEW_LINE"}
{"text":"Function to find factorial of given number","code":"def factorial ( n ) : NEW_LINE INDENT if n == 0 : NEW_LINE INDENT return 1 NEW_LINE DEDENT return n * factorial ( n - 1 ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"num = 5 ; NEW_LINE print ( \" Factorial \u2581 of \" , num , \" is \" , factorial ( num ) ) NEW_LINE"}
{"text":"Unsets the rightmost set bit of n and returns the result","code":"def FlipBits ( n ) : NEW_LINE INDENT n -= ( n & ( - n ) ) ; NEW_LINE return n ; NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 12 ; NEW_LINE print ( \" The \u2581 number \u2581 after \u2581 unsetting \u2581 the \" , end = \" \" ) ; NEW_LINE print ( \" \u2581 rightmost \u2581 set \u2581 bit : \u2581 \" , FlipBits ( N ) ) ; NEW_LINE DEDENT"}
{"text":"function to count maximum XOR value for a triplet","code":"def Maximum_xor_Triplet ( n , a ) : NEW_LINE"}
{"text":"set is used to avoid repetitions","code":"s = set ( ) NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT for j in range ( i , n ) : NEW_LINE DEDENT"}
{"text":"store all possible unique XOR value of pairs","code":"s . add ( a [ i ] ^ a [ j ] ) NEW_LINE ans = 0 NEW_LINE for i in s : NEW_LINE for j in range ( 0 , n ) : NEW_LINE"}
{"text":"store maximum value","code":"ans = max ( ans , i ^ a [ j ] ) NEW_LINE print ( ans ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 1 , 3 , 8 , 15 ] NEW_LINE n = len ( a ) NEW_LINE Maximum_xor_Triplet ( n , a ) NEW_LINE DEDENT"}
{"text":"Python library for binary search","code":"from bisect import bisect_left NEW_LINE"}
{"text":"Print all elements of range [ low , high ] that are not present in arr [ 0. . n - 1 ]","code":"def printMissing ( arr , n , low , high ) : NEW_LINE INDENT arr . sort ( ) NEW_LINE DEDENT"}
{"text":"Do binary search for ' low ' in sorted array and find index of first element which either equal to or greater than low .","code":"ptr = bisect_left ( arr , low ) NEW_LINE index = ptr NEW_LINE"}
{"text":"Start from the found index and linearly search every range element x after this index in arr [ ]","code":"i = index NEW_LINE x = low NEW_LINE while ( i < n and x <= high ) : NEW_LINE"}
{"text":"If x doesn 't math with current element  print it","code":"if ( arr [ i ] != x ) : NEW_LINE INDENT print ( x , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"If x matches , move to next element in arr [ ]","code":"else : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT"}
{"text":"Move to next element in range [ low , high ]","code":"x = x + 1 NEW_LINE"}
{"text":"Print range elements thar are greater than the last element of sorted array .","code":"while ( x <= high ) : NEW_LINE INDENT print ( x , end = \" \u2581 \" ) NEW_LINE x = x + 1 NEW_LINE DEDENT"}
{"text":"Driver code","code":"arr = [ 1 , 3 , 5 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE low = 1 NEW_LINE high = 10 NEW_LINE printMissing ( arr , n , low , high ) ; NEW_LINE"}
{"text":"Print all elements of range [ low , high ] that are not present in arr [ 0. . n - 1 ]","code":"def printMissing ( arr , n , low , high ) : NEW_LINE"}
{"text":"Create boolean list of size high - low + 1 , each index i representing wether ( i + low ) th element found or not .","code":"points_of_range = [ False ] * ( high - low + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"if ith element of arr is in range low to high then mark corresponding index as true in array","code":"if ( low <= arr [ i ] and arr [ i ] <= high ) : NEW_LINE INDENT points_of_range [ arr [ i ] - low ] = True NEW_LINE DEDENT"}
{"text":"Traverse through the range and print all elements whose value is false","code":"for x in range ( high - low + 1 ) : NEW_LINE INDENT if ( points_of_range [ x ] == False ) : NEW_LINE INDENT print ( low + x , end = \" \u2581 \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"arr = [ 1 , 3 , 5 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE low , high = 1 , 10 NEW_LINE printMissing ( arr , n , low , high ) NEW_LINE"}
{"text":"Print all elements of range [ low , high ] that are not present in arr [ 0. . n - 1 ]","code":"def printMissing ( arr , n , low , high ) : NEW_LINE"}
{"text":"Insert all elements of arr [ ] in set","code":"s = set ( arr ) NEW_LINE"}
{"text":"Traverse through the range and print all missing elements","code":"for x in range ( low , high + 1 ) : NEW_LINE INDENT if x not in s : NEW_LINE INDENT print ( x , end = ' \u2581 ' ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"arr = [ 1 , 3 , 5 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE low , high = 1 , 10 NEW_LINE printMissing ( arr , n , low , high ) NEW_LINE"}
{"text":"Returns k - th missing element . It returns - 1 if no k is more than number of missing elements .","code":"def find ( a , b , k , n1 , n2 ) : NEW_LINE"}
{"text":"insert all elements of given sequence b [ ] .","code":"s = set ( ) NEW_LINE for i in range ( n2 ) : NEW_LINE INDENT s . add ( b [ i ] ) NEW_LINE DEDENT"}
{"text":"Traverse through increasing sequence and keep track of count of missing numbers .","code":"missing = 0 NEW_LINE for i in range ( n1 ) : NEW_LINE INDENT if a [ i ] not in s : NEW_LINE INDENT missing += 1 NEW_LINE DEDENT if missing == k : NEW_LINE INDENT return a [ i ] NEW_LINE DEDENT DEDENT return - 1 NEW_LINE"}
{"text":"Driver code","code":"a = [ 0 , 2 , 4 , 6 , 8 , 10 , 12 , 14 , 15 ] NEW_LINE b = [ 4 , 10 , 6 , 8 , 12 ] NEW_LINE n1 = len ( a ) NEW_LINE n2 = len ( b ) NEW_LINE k = 3 NEW_LINE print ( find ( a , b , k , n1 , n2 ) ) NEW_LINE"}
{"text":"''Function to find the minimum number of string required to generate the original string","code":"def findString ( S , N ) : NEW_LINE"}
{"text":"'' Stores the frequency of each  character of String S","code":"amounts = [ 0 ] * 26 NEW_LINE"}
{"text":"'' Stores the frequency of each  character of String S","code":"for i in range ( len ( S ) ) : NEW_LINE INDENT amounts [ ord ( S [ i ] ) - 97 ] += 1 NEW_LINE DEDENT count = 0 NEW_LINE"}
{"text":"'' Count unique characters in S","code":"for i in range ( 26 ) : NEW_LINE INDENT if amounts [ i ] > 0 : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT"}
{"text":"'' If unique characters is greater  then N, then return -1","code":"if count > N : NEW_LINE INDENT print ( \" - 1\" ) NEW_LINE DEDENT"}
{"text":"'' Otherwise","code":"else : NEW_LINE INDENT ans = \" \" NEW_LINE high = 100001 NEW_LINE low = 0 NEW_LINE DEDENT"}
{"text":"'' Perform Binary Search","code":"while ( high - low ) > 1 : NEW_LINE INDENT total = 0 NEW_LINE DEDENT"}
{"text":"'' Find the value of mid","code":"mid = ( high + low ) \/\/ 2 NEW_LINE"}
{"text":"'' Iterate over the range  [0, 26]","code":"for i in range ( 26 ) : NEW_LINE"}
{"text":"'' If the amount[i] is  greater than 0","code":"if amounts [ i ] > 0 : NEW_LINE INDENT total += ( amounts [ i ] - 1 ) \/\/ mid + 1 NEW_LINE DEDENT"}
{"text":"'' Update the ranges","code":"if total <= N : NEW_LINE INDENT high = mid NEW_LINE DEDENT else : NEW_LINE INDENT low = mid NEW_LINE DEDENT print ( high , end = \" \u2581 \" ) NEW_LINE total = 0 NEW_LINE"}
{"text":"'' Find the resultant string","code":"for i in range ( 26 ) : NEW_LINE INDENT if amounts [ i ] > 0 : NEW_LINE INDENT total += ( amounts [ i ] - 1 ) \/\/ high + 1 NEW_LINE for j in range ( ( amounts [ i ] - 1 ) \/\/ high + 1 ) : NEW_LINE DEDENT DEDENT"}
{"text":"Generate the subsequence","code":"ans += chr ( i + 97 ) NEW_LINE"}
{"text":"' ' \u2581 If \u2581 the \u2581 length \u2581 of \u2581 resultant \u2581 \u2581 string \u2581 is \u2581 less \u2581 than \u2581 N \u2581 than \u2581 \u2581 add \u2581 a \u2581 character \u2581 ' a '","code":"for i in range ( total , N ) : NEW_LINE INDENT ans += ' a ' NEW_LINE DEDENT ans = ans [ : : - 1 ] NEW_LINE"}
{"text":"'' Print the string","code":"print ( ans ) NEW_LINE"}
{"text":"''Driver code","code":"S = \" toffee \" NEW_LINE K = 4 NEW_LINE findString ( S , K ) NEW_LINE"}
{"text":"This function prints the first repeating element in arr [ ]","code":"def printFirstRepeating ( arr , n ) : NEW_LINE"}
{"text":"Initialize index of first repeating element","code":"Min = - 1 NEW_LINE"}
{"text":"Creates an empty hashset","code":"myset = dict ( ) NEW_LINE"}
{"text":"Traverse the input array from right to left","code":"for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE"}
{"text":"If element is already in hash set , update Min","code":"if arr [ i ] in myset . keys ( ) : NEW_LINE INDENT Min = i NEW_LINE DEDENT"}
{"text":"Else add element to hash set","code":"else : NEW_LINE INDENT myset [ arr [ i ] ] = 1 NEW_LINE DEDENT"}
{"text":"Print the result","code":"if ( Min != - 1 ) : NEW_LINE INDENT print ( \" The \u2581 first \u2581 repeating \u2581 element \u2581 is \" , arr [ Min ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" There \u2581 are \u2581 no \u2581 repeating \u2581 elements \" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"arr = [ 10 , 5 , 3 , 4 , 3 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE printFirstRepeating ( arr , n ) NEW_LINE"}
{"text":"This function prints the first repeating element in arr [ ]","code":"def printFirstRepeating ( arr , n ) : NEW_LINE"}
{"text":"This will set k = 1 , if any repeating element found","code":"k = 0 NEW_LINE"}
{"text":"max = maximum from ( all elements & n )","code":"max = n NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( max < arr [ i ] ) : NEW_LINE INDENT max = arr [ i ] NEW_LINE DEDENT DEDENT"}
{"text":"Array a is for storing 1 st time occurence of element initialized by 0","code":"a = [ 0 for i in range ( max + 1 ) ] NEW_LINE"}
{"text":"Store 1 in array b if element is duplicate initialized by 0","code":"b = [ 0 for i in range ( max + 1 ) ] NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"Duplicate element found","code":"if ( a [ arr [ i ] ] ) : NEW_LINE INDENT b [ arr [ i ] ] = 1 NEW_LINE k = 1 NEW_LINE continue NEW_LINE DEDENT else : NEW_LINE"}
{"text":"Storing 1 st occurence of arr [ i ]","code":"a [ arr [ i ] ] = i NEW_LINE if ( k == 0 ) : NEW_LINE print ( \" No \u2581 repeating \u2581 element \u2581 found \" ) NEW_LINE else : NEW_LINE min = max + 1 NEW_LINE for i in range ( max + 1 ) : NEW_LINE"}
{"text":"Trace array a & find repeating element with min index","code":"if ( a [ i ] and ( min > ( a [ i ] ) ) and b [ i ] ) : NEW_LINE INDENT min = a [ i ] NEW_LINE DEDENT print ( arr [ min ] ) NEW_LINE"}
{"text":"Driver code","code":"arr = [ 10 , 5 , 3 , 4 , 3 , 5 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE printFirstRepeating ( arr , n ) NEW_LINE"}
{"text":"Returns k - th distinct element in arr .","code":"def printKDistinct ( arr , n , k ) : NEW_LINE INDENT dist_count = 0 NEW_LINE for i in range ( n ) : NEW_LINE DEDENT"}
{"text":"Check if current element is present somewhere else .","code":"j = 0 NEW_LINE while j < n : NEW_LINE INDENT if ( i != j and arr [ j ] == arr [ i ] ) : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE DEDENT"}
{"text":"If element is unique","code":"if ( j == n ) : NEW_LINE INDENT dist_count += 1 NEW_LINE DEDENT if ( dist_count == k ) : NEW_LINE INDENT return arr [ i ] NEW_LINE DEDENT return - 1 NEW_LINE"}
{"text":"Driver Code","code":"ar = [ 1 , 2 , 1 , 3 , 4 , 2 ] NEW_LINE n = len ( ar ) NEW_LINE k = 2 NEW_LINE print ( printKDistinct ( ar , n , k ) ) NEW_LINE"}
{"text":"''Function to count subarrays having equal count of 0s and 1s with all 0s and all 1s grouped together","code":"def countSubarrays ( A ) : NEW_LINE"}
{"text":"'' Stores the count","code":"res = 0 NEW_LINE"}
{"text":"'' Initialize cur with first element","code":"curr , cnt = A [ 0 ] , [ 1 ] NEW_LINE for c in A [ 1 : ] : NEW_LINE"}
{"text":"'' If the next element is same  as the current element","code":"if c == curr : NEW_LINE"}
{"text":"'' Increment count","code":"cnt [ - 1 ] += 1 NEW_LINE else : NEW_LINE"}
{"text":"'' Update curr","code":"curr = c NEW_LINE cnt . append ( 1 ) NEW_LINE"}
{"text":"'' Iterate over the array count","code":"for i in range ( 1 , len ( cnt ) ) : NEW_LINE"}
{"text":"'' Consider the minimum","code":"res += min ( cnt [ i - 1 ] , cnt [ i ] ) NEW_LINE print ( res - 1 ) NEW_LINE"}
{"text":"''Given arr[]","code":"A = [ 1 , 1 , 0 , 0 , 1 , 0 ] NEW_LINE"}
{"text":"''Function Call","code":"countSubarrays ( A ) NEW_LINE"}
{"text":"''Tree node","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . left = None NEW_LINE self . right = None NEW_LINE self . val = data NEW_LINE DEDENT DEDENT"}
{"text":"''Function to return new tree node","code":"def newNode ( data ) : NEW_LINE INDENT temp = Node ( data ) NEW_LINE return temp NEW_LINE DEDENT"}
{"text":"''Function to check if the tree is even-odd tree","code":"def isEvenOddBinaryTree ( root ) : NEW_LINE INDENT if ( root == None ) : NEW_LINE INDENT return True NEW_LINE DEDENT q = [ ] NEW_LINE DEDENT"}
{"text":"'' Stores nodes of each level","code":"q . append ( root ) NEW_LINE"}
{"text":"'' Store the current level  of the binary tree","code":"level = 0 NEW_LINE"}
{"text":"'' Traverse until the  queue is empty","code":"while ( len ( q ) != 0 ) : NEW_LINE"}
{"text":"'' Stores the number of nodes  present in the current level","code":"size = len ( q ) NEW_LINE for i in range ( size ) : NEW_LINE INDENT node = q [ 0 ] NEW_LINE q . pop ( 0 ) NEW_LINE DEDENT"}
{"text":"'' Check if the level  is even or odd","code":"if ( level % 2 == 0 ) : NEW_LINE INDENT if ( node . val % 2 == 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT elif ( level % 2 == 1 ) : NEW_LINE INDENT if ( node . val % 2 == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"'' Add the nodes of the next  level into the queue","code":"if ( node . left != None ) : NEW_LINE INDENT q . append ( node . left ) NEW_LINE DEDENT if ( node . right != None ) : NEW_LINE INDENT q . append ( node . right ) NEW_LINE DEDENT"}
{"text":"'' Increment the level count","code":"level += 1 NEW_LINE return True NEW_LINE"}
{"text":"''Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"'' Construct a Binary Tree","code":"root = None NEW_LINE root = newNode ( 2 ) NEW_LINE root . left = newNode ( 3 ) NEW_LINE root . right = newNode ( 9 ) NEW_LINE root . left . left = newNode ( 4 ) NEW_LINE root . left . right = newNode ( 10 ) NEW_LINE root . right . right = newNode ( 6 ) NEW_LINE"}
{"text":"'' Check if the binary tree  is even-odd tree or not","code":"if ( isEvenOddBinaryTree ( root ) ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT"}
{"text":"Python3 program to implement the above approach","code":"import sys NEW_LINE def findMaxLen ( a ) : NEW_LINE"}
{"text":"Size of the array","code":"n = len ( a ) NEW_LINE"}
{"text":"Stores the frequency of array elements","code":"freq = [ 0 ] * ( n + 1 ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT freq [ a [ i ] ] += 1 NEW_LINE DEDENT maxFreqElement = - sys . maxsize - 1 NEW_LINE maxFreqCount = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE"}
{"text":"Find the highest frequency in the array","code":"if ( freq [ i ] > maxFreqElement ) : NEW_LINE INDENT maxFreqElement = freq [ i ] NEW_LINE maxFreqCount = 1 NEW_LINE DEDENT"}
{"text":"Increase count of max frequent element","code":"elif ( freq [ i ] == maxFreqElement ) : NEW_LINE INDENT maxFreqCount += 1 NEW_LINE DEDENT"}
{"text":"If no repetition is present","code":"if ( maxFreqElement == 1 ) : NEW_LINE INDENT ans = 0 NEW_LINE DEDENT else : NEW_LINE"}
{"text":"Find the maximum distance","code":"ans = ( ( n - maxFreqCount ) \/\/ ( maxFreqElement - 1 ) ) NEW_LINE"}
{"text":"Return the max distance","code":"return ans NEW_LINE"}
{"text":"Driver Code","code":"a = [ 1 , 2 , 1 , 2 ] NEW_LINE print ( findMaxLen ( a ) ) NEW_LINE"}
{"text":"Python3 program to implement the above approach","code":"import math NEW_LINE"}
{"text":"Function to obtain the middle index of the range","code":"def getMid ( s , e ) : NEW_LINE INDENT return ( s + ( e - s ) \/\/ 2 ) NEW_LINE DEDENT"}
{"text":"Recursive function to get the sum of values in the given range from the array . The following are parameters for this function . st . Pointer to segment tree node . Index of current node in the segment tree ss & se . Starting and ending indexes of the segment represented by current node , i . e . , st [ node ] l & r . Starting and ending indexes of range query","code":"def MaxUtil ( st , ss , se , l , r , node ) : NEW_LINE"}
{"text":"If the segment of this node lies completely within the given range","code":"if ( l <= ss and r >= se ) : NEW_LINE"}
{"text":"Return maximum in the segment","code":"return st [ node ] NEW_LINE"}
{"text":"If the segment of this node lies outside the given range","code":"if ( se < l or ss > r ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"If segment of this node lies partially in the given range","code":"mid = getMid ( ss , se ) NEW_LINE return max ( MaxUtil ( st , ss , mid , l , r , 2 * node + 1 ) , MaxUtil ( st , mid + 1 , se , l , r , 2 * node + 2 ) ) NEW_LINE"}
{"text":"Function to return the maximum in the range from [ l , r ]","code":"def getMax ( st , n , l , r ) : NEW_LINE"}
{"text":"Check for erroneous input values","code":"if ( l < 0 or r > n - 1 or l > r ) : NEW_LINE INDENT print ( \" Invalid \u2581 Input \" ) NEW_LINE return - 1 NEW_LINE DEDENT return MaxUtil ( st , 0 , n - 1 , l , r , 0 ) NEW_LINE"}
{"text":"Function to conSegment Tree for the subarray [ ss . . se ]","code":"def constructSTUtil ( arr , ss , se , st , si ) : NEW_LINE"}
{"text":"For a single element","code":"if ( ss == se ) : NEW_LINE INDENT st [ si ] = arr [ ss ] NEW_LINE return arr [ ss ] NEW_LINE DEDENT"}
{"text":"Otherwise","code":"mid = getMid ( ss , se ) NEW_LINE"}
{"text":"Function to conSegment Tree from the given array","code":"def constructST ( arr , n ) : NEW_LINE"}
{"text":"Height of Segment Tree","code":"x = ( int ) ( math . ceil ( math . log ( n ) ) ) NEW_LINE"}
{"text":"Maximum size of Segment Tree","code":"max_size = 2 * ( int ) ( pow ( 2 , x ) ) - 1 NEW_LINE"}
{"text":"Allocate memory","code":"st = [ 0 ] * max_size NEW_LINE"}
{"text":"Fill the allocated memory","code":"constructSTUtil ( arr , 0 , n - 1 , st , 0 ) NEW_LINE"}
{"text":"Return the constructed Segment Tree","code":"return st NEW_LINE"}
{"text":"Driver Code","code":"arr = [ 5 , 2 , 3 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE"}
{"text":"Build the Segment Tree from the given array","code":"st = constructST ( arr , n ) NEW_LINE Q = [ [ 1 , 3 ] , [ 0 , 2 ] ] NEW_LINE for i in range ( len ( Q ) ) : NEW_LINE INDENT Max = getMax ( st , n , Q [ i ] [ 0 ] , Q [ i ] [ 1 ] ) NEW_LINE ok = 0 NEW_LINE for j in range ( 30 , - 1 , - 1 ) : NEW_LINE INDENT if ( ( Max & ( 1 << j ) ) != 0 ) : NEW_LINE INDENT ok = 1 NEW_LINE DEDENT if ( ok <= 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT Max |= ( 1 << j ) NEW_LINE DEDENT print ( Max , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Function to calculate the count","code":"def calculate ( a ) : NEW_LINE"}
{"text":"Sorting the list using built in function","code":"a . sort ( ) NEW_LINE count = 1 NEW_LINE answer = 0 NEW_LINE"}
{"text":"Traversing through the elements","code":"for i in range ( 1 , len ( a ) ) : NEW_LINE INDENT if a [ i ] == a [ i - 1 ] : NEW_LINE DEDENT"}
{"text":"Counting frequncy of each elements","code":"count += 1 NEW_LINE else : NEW_LINE"}
{"text":"Adding the contribution of the frequency to the answer","code":"answer = answer + count * ( count - 1 ) \/\/ 2 NEW_LINE count = 1 NEW_LINE answer = answer + count * ( count - 1 ) \/\/ 2 NEW_LINE return answer NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 1 , 2 , 1 , 2 , 4 ] NEW_LINE DEDENT"}
{"text":"Print the count","code":"print ( calculate ( a ) ) NEW_LINE"}
{"text":"Function to calculate the answer","code":"def calculate ( a ) : NEW_LINE"}
{"text":"Finding the maximum of the array","code":"maximum = max ( a ) NEW_LINE"}
{"text":"Creating frequency array With initial value 0","code":"frequency = [ 0 for x in range ( maximum + 1 ) ] NEW_LINE"}
{"text":"Traversing through the array","code":"for i in a : NEW_LINE"}
{"text":"Counting frequency","code":"frequency [ i ] += 1 NEW_LINE answer = 0 NEW_LINE"}
{"text":"Traversing through the frequency array","code":"for i in frequency : NEW_LINE"}
{"text":"Calculating answer","code":"answer = answer + i * ( i - 1 ) \/\/ 2 NEW_LINE return answer NEW_LINE"}
{"text":"Driver Code","code":"a = [ 1 , 2 , 1 , 2 , 4 ] NEW_LINE"}
{"text":"Function calling","code":"print ( calculate ( a ) ) NEW_LINE"}
{"text":"This function Prints the starting and ending indexes of the largest subarray with equal number of 0 s and 1 s . Also returns the size of such subarray .","code":"def findSubArray ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE maxsize = - 1 NEW_LINE DEDENT"}
{"text":"Pick a starting point as i","code":"for i in range ( 0 , n - 1 ) : NEW_LINE INDENT sum = - 1 if ( arr [ i ] == 0 ) else 1 NEW_LINE DEDENT"}
{"text":"Consider all subarrays starting from i","code":"for j in range ( i + 1 , n ) : NEW_LINE INDENT sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1 NEW_LINE DEDENT"}
{"text":"If this is a 0 sum subarray , then compare it with maximum size subarray calculated so far","code":"if ( sum == 0 and maxsize < j - i + 1 ) : NEW_LINE INDENT maxsize = j - i + 1 NEW_LINE startindex = i NEW_LINE DEDENT if ( maxsize == - 1 ) : NEW_LINE print ( \" No \u2581 such \u2581 subarray \" ) ; NEW_LINE else : NEW_LINE print ( startindex , \" to \" , startindex + maxsize - 1 ) ; NEW_LINE return maxsize NEW_LINE"}
{"text":"Driver program to test above functions","code":"arr = [ 1 , 0 , 0 , 1 , 0 , 1 , 1 ] NEW_LINE size = len ( arr ) NEW_LINE findSubArray ( arr , size ) NEW_LINE"}
{"text":"Function to return the maximum element","code":"def findMax ( arr , low , high ) : NEW_LINE"}
{"text":"If there is only one element left","code":"if ( high == low ) : NEW_LINE INDENT return arr [ low ] NEW_LINE DEDENT"}
{"text":"Find mid","code":"mid = low + ( high - low ) \/\/ 2 NEW_LINE"}
{"text":"Check if mid reaches 0 , it is greater than next element or not","code":"if ( mid == 0 and arr [ mid ] > arr [ mid + 1 ] ) : NEW_LINE INDENT return arr [ mid ] NEW_LINE DEDENT"}
{"text":"Check if mid itself is maximum element","code":"if ( mid < high and arr [ mid + 1 ] < arr [ mid ] and mid > 0 and arr [ mid ] > arr [ mid - 1 ] ) : NEW_LINE INDENT return arr [ mid ] NEW_LINE DEDENT"}
{"text":"Decide whether we need to go to the left half or the right half","code":"if ( arr [ low ] > arr [ mid ] ) : NEW_LINE INDENT return findMax ( arr , low , mid - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT return findMax ( arr , mid + 1 , high ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"arr = [ 6 , 5 , 4 , 3 , 2 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMax ( arr , 0 , n - 1 ) ) NEW_LINE"}
{"text":"Function to perform Ternary Search","code":"def ternarySearch ( l , r , key , ar ) : NEW_LINE INDENT while r >= l : NEW_LINE DEDENT"}
{"text":"Find mid1 and mid2","code":"mid1 = l + ( r - l ) \/\/ 3 NEW_LINE mid2 = r - ( r - l ) \/\/ 3 NEW_LINE"}
{"text":"Check if key is at any mid","code":"if key == ar [ mid1 ] : NEW_LINE INDENT return mid1 NEW_LINE DEDENT if key == mid2 : NEW_LINE INDENT return mid2 NEW_LINE DEDENT"}
{"text":"Since key is not present at mid , Check in which region it is present Then repeat the search operation in that region","code":"if key < ar [ mid1 ] : NEW_LINE"}
{"text":"key lies between l and mid1","code":"r = mid1 - 1 NEW_LINE elif key > ar [ mid2 ] : NEW_LINE"}
{"text":"key lies between mid2 and r","code":"l = mid2 + 1 NEW_LINE else : NEW_LINE"}
{"text":"key lies between mid1 and mid2","code":"l = mid1 + 1 NEW_LINE r = mid2 - 1 NEW_LINE"}
{"text":"key not found","code":"return - 1 NEW_LINE"}
{"text":"Get the list Sort the list if not sorted","code":"ar = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] NEW_LINE"}
{"text":"Starting index","code":"l = 0 NEW_LINE"}
{"text":"Length of list","code":"r = 9 NEW_LINE"}
{"text":"Key to be searched in the list","code":"key = 5 NEW_LINE"}
{"text":"Search the key using ternary search","code":"p = ternarySearch ( l , r , key , ar ) NEW_LINE"}
{"text":"Print the result","code":"print ( \" Index \u2581 of \" , key , \" is \" , p ) NEW_LINE"}
{"text":"Key to be searched in the list","code":"key = 50 NEW_LINE"}
{"text":"Search the key using ternary search","code":"p = ternarySearch ( l , r , key , ar ) NEW_LINE"}
{"text":"Print the result","code":"print ( \" Index \u2581 of \" , key , \" is \" , p ) NEW_LINE"}
{"text":"function to print the majorityNumber","code":"def majorityNumber ( nums ) : NEW_LINE INDENT num_count = { } NEW_LINE for num in nums : NEW_LINE INDENT if num in num_count : NEW_LINE INDENT num_count [ num ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT num_count [ num ] = 1 NEW_LINE DEDENT DEDENT for num in num_count : NEW_LINE INDENT if num_count [ num ] > len ( nums ) \/ 2 : NEW_LINE INDENT return num NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT"}
{"text":"Driver Code","code":"a = [ 2 , 2 , 1 , 1 , 1 , 2 , 2 ] NEW_LINE print majorityNumber ( a ) NEW_LINE"}
{"text":"Returns index of key in arr [ l . . h ] if key is present , otherwise returns - 1","code":"def search ( arr , l , h , key ) : NEW_LINE INDENT if l > h : NEW_LINE INDENT return - 1 NEW_LINE DEDENT mid = ( l + h ) \/\/ 2 NEW_LINE if arr [ mid ] == key : NEW_LINE INDENT return mid NEW_LINE DEDENT DEDENT"}
{"text":"If arr [ l ... mid ] is sorted","code":"if arr [ l ] <= arr [ mid ] : NEW_LINE"}
{"text":"As this subarray is sorted , we can quickly check if key lies in half or other half","code":"if key >= arr [ l ] and key <= arr [ mid ] : NEW_LINE INDENT return search ( arr , l , mid - 1 , key ) NEW_LINE DEDENT"}
{"text":"If key not lies in first half subarray , Divide other half into two subarrays , such that we can quickly check if key lies in other half","code":"return search ( arr , mid + 1 , h , key ) NEW_LINE"}
{"text":"If arr [ l . . mid ] is not sorted , then arr [ mid ... r ] must be sorted","code":"if key >= arr [ mid ] and key <= arr [ h ] : NEW_LINE INDENT return search ( a , mid + 1 , h , key ) NEW_LINE DEDENT return search ( arr , l , mid - 1 , key ) NEW_LINE"}
{"text":"Driver program","code":"arr = [ 4 , 5 , 6 , 7 , 8 , 9 , 1 , 2 , 3 ] NEW_LINE key = 6 NEW_LINE i = search ( arr , 0 , len ( arr ) - 1 , key ) NEW_LINE if i != - 1 : NEW_LINE INDENT print ( \" Index : \u2581 % \u2581 d \" % i ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Key \u2581 not \u2581 found \" ) NEW_LINE DEDENT"}
{"text":"Python program to find minimum element in a sorted and rotated array","code":"def findMin ( arr , low , high ) : NEW_LINE"}
{"text":"This condition is needed to handle the case when array is not rotated at all","code":"if high < low : NEW_LINE INDENT return arr [ 0 ] NEW_LINE DEDENT"}
{"text":"If there is only one element left","code":"if high == low : NEW_LINE INDENT return arr [ low ] NEW_LINE DEDENT"}
{"text":"Find mid","code":"mid = int ( ( low + high ) \/ 2 ) NEW_LINE"}
{"text":"Check if element ( mid + 1 ) is minimum element . Consider the cases like [ 3 , 4 , 5 , 1 , 2 ]","code":"if mid < high and arr [ mid + 1 ] < arr [ mid ] : NEW_LINE INDENT return arr [ mid + 1 ] NEW_LINE DEDENT"}
{"text":"Check if mid itself is minimum element","code":"if mid > low and arr [ mid ] < arr [ mid - 1 ] : NEW_LINE INDENT return arr [ mid ] NEW_LINE DEDENT"}
{"text":"Decide whether we need to go to left half or right half","code":"if arr [ high ] > arr [ mid ] : NEW_LINE INDENT return findMin ( arr , low , mid - 1 ) NEW_LINE DEDENT return findMin ( arr , mid + 1 , high ) NEW_LINE"}
{"text":"Driver program to test above functions","code":"arr1 = [ 5 , 6 , 1 , 2 , 3 , 4 ] NEW_LINE n1 = len ( arr1 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr1 , 0 , n1 - 1 ) ) ) NEW_LINE arr2 = [ 1 , 2 , 3 , 4 ] NEW_LINE n2 = len ( arr2 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr2 , 0 , n2 - 1 ) ) ) NEW_LINE arr3 = [ 1 ] NEW_LINE n3 = len ( arr3 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr3 , 0 , n3 - 1 ) ) ) NEW_LINE arr4 = [ 1 , 2 ] NEW_LINE n4 = len ( arr4 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr4 , 0 , n4 - 1 ) ) ) NEW_LINE arr5 = [ 2 , 1 ] NEW_LINE n5 = len ( arr5 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr5 , 0 , n5 - 1 ) ) ) NEW_LINE arr6 = [ 5 , 6 , 7 , 1 , 2 , 3 , 4 ] NEW_LINE n6 = len ( arr6 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr6 , 0 , n6 - 1 ) ) ) NEW_LINE arr7 = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] NEW_LINE n7 = len ( arr7 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr7 , 0 , n7 - 1 ) ) ) NEW_LINE arr8 = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 1 ] NEW_LINE n8 = len ( arr8 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr8 , 0 , n8 - 1 ) ) ) NEW_LINE arr9 = [ 3 , 4 , 5 , 1 , 2 ] NEW_LINE n9 = len ( arr9 ) NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" + str ( findMin ( arr9 , 0 , n9 - 1 ) ) ) NEW_LINE"}
{"text":"Function to find minimum element","code":"def findMin ( arr , low , high ) : NEW_LINE INDENT while ( low < high ) : NEW_LINE INDENT mid = low + ( high - low ) \/\/ 2 ; NEW_LINE if ( arr [ mid ] == arr [ high ] ) : NEW_LINE INDENT high -= 1 ; NEW_LINE DEDENT elif ( arr [ mid ] > arr [ high ] ) : NEW_LINE INDENT low = mid + 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT high = mid ; NEW_LINE DEDENT DEDENT return arr [ high ] ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr1 = [ 5 , 6 , 1 , 2 , 3 , 4 ] ; NEW_LINE n1 = len ( arr1 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr1 , 0 , n1 - 1 ) ) ; NEW_LINE arr2 = [ 1 , 2 , 3 , 4 ] ; NEW_LINE n2 = len ( arr2 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr2 , 0 , n2 - 1 ) ) ; NEW_LINE arr3 = [ 1 ] ; NEW_LINE n3 = len ( arr3 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr3 , 0 , n3 - 1 ) ) ; NEW_LINE arr4 = [ 1 , 2 ] ; NEW_LINE n4 = len ( arr4 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr4 , 0 , n4 - 1 ) ) ; NEW_LINE arr5 = [ 2 , 1 ] ; NEW_LINE n5 = len ( arr5 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr5 , 0 , n5 - 1 ) ) ; NEW_LINE arr6 = [ 5 , 6 , 7 , 1 , 2 , 3 , 4 ] ; NEW_LINE n6 = len ( arr6 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr6 , 0 , n6 - 1 ) ) ; NEW_LINE arr7 = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] ; NEW_LINE n7 = len ( arr7 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr7 , 0 , n7 - 1 ) ) ; NEW_LINE arr8 = [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 1 ] ; NEW_LINE n8 = len ( arr8 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr8 , 0 , n8 - 1 ) ) ; NEW_LINE arr9 = [ 3 , 4 , 5 , 1 , 2 ] ; NEW_LINE n9 = len ( arr9 ) ; NEW_LINE print ( \" The \u2581 minimum \u2581 element \u2581 is \u2581 \" , findMin ( arr9 , 0 , n9 - 1 ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 program to find k - th absolute difference between two elements","code":"from bisect import bisect as upper_bound NEW_LINE"}
{"text":"returns number of pairs with absolute difference less than or equal to mid .","code":"def countPairs ( a , n , mid ) : NEW_LINE INDENT res = 0 NEW_LINE for i in range ( n ) : NEW_LINE DEDENT"}
{"text":"Upper bound returns pointer to position of next higher number than a [ i ] + mid in a [ i . . n - 1 ] . We subtract ( a + i + 1 ) from this position to count","code":"res += upper_bound ( a , a [ i ] + mid ) NEW_LINE return res NEW_LINE"}
{"text":"Returns k - th absolute difference","code":"def kthDiff ( a , n , k ) : NEW_LINE"}
{"text":"Sort array","code":"a = sorted ( a ) NEW_LINE"}
{"text":"Minimum absolute difference","code":"low = a [ 1 ] - a [ 0 ] NEW_LINE for i in range ( 1 , n - 1 ) : NEW_LINE INDENT low = min ( low , a [ i + 1 ] - a [ i ] ) NEW_LINE DEDENT"}
{"text":"Maximum absolute difference","code":"high = a [ n - 1 ] - a [ 0 ] NEW_LINE"}
{"text":"Do binary search for k - th absolute difference","code":"while ( low < high ) : NEW_LINE INDENT mid = ( low + high ) >> 1 NEW_LINE if ( countPairs ( a , n , mid ) < k ) : NEW_LINE INDENT low = mid + 1 NEW_LINE DEDENT else : NEW_LINE INDENT high = mid NEW_LINE DEDENT DEDENT return low NEW_LINE"}
{"text":"Driver code","code":"k = 3 NEW_LINE a = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( a ) NEW_LINE print ( kthDiff ( a , n , k ) ) NEW_LINE"}
{"text":"Python program to find smallest and second smallest elements","code":"import sys NEW_LINE"}
{"text":"Function to print first smallest and second smallest elements","code":"def print2Smallest ( arr ) : NEW_LINE"}
{"text":"There should be atleast two elements","code":"arr_size = len ( arr ) NEW_LINE if arr_size < 2 : NEW_LINE INDENT print \" Invalid \u2581 Input \" NEW_LINE return NEW_LINE DEDENT first = second = sys . maxint NEW_LINE for i in range ( 0 , arr_size ) : NEW_LINE"}
{"text":"If current element is smaller than first then update both first and second","code":"if arr [ i ] < first : NEW_LINE INDENT second = first NEW_LINE first = arr [ i ] NEW_LINE DEDENT"}
{"text":"If arr [ i ] is in between first and second then update second","code":"elif ( arr [ i ] < second and arr [ i ] != first ) : NEW_LINE INDENT second = arr [ i ] ; NEW_LINE DEDENT if ( second == sys . maxint ) : NEW_LINE print \" No \u2581 second \u2581 smallest \u2581 element \" NEW_LINE else : NEW_LINE print ' The \u2581 smallest \u2581 element \u2581 is ' , first , ' and ' ' \u2581 second \u2581 smallest \u2581 element \u2581 is ' , second NEW_LINE"}
{"text":"Driver function to test above function","code":"arr = [ 12 , 13 , 1 , 10 , 34 , 1 ] NEW_LINE print2Smallest ( arr ) NEW_LINE"}
{"text":"LCM of given range queries using Segment Tree","code":"MAX = 1000 NEW_LINE"}
{"text":"allocate space for tree","code":"tree = [ 0 ] * ( 4 * MAX ) NEW_LINE"}
{"text":"declaring the array globally","code":"arr = [ 0 ] * MAX NEW_LINE"}
{"text":"Function to return gcd of a and b","code":"def gcd ( a : int , b : int ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT"}
{"text":"utility function to find lcm","code":"def lcm ( a : int , b : int ) : NEW_LINE INDENT return ( a * b ) \/\/ gcd ( a , b ) NEW_LINE DEDENT"}
{"text":"Function to build the segment tree Node starts beginning index of current subtree . start and end are indexes in arr [ ] which is global","code":"def build ( node : int , start : int , end : int ) : NEW_LINE"}
{"text":"If there is only one element in current subarray","code":"if start == end : NEW_LINE INDENT tree [ node ] = arr [ start ] NEW_LINE return NEW_LINE DEDENT mid = ( start + end ) \/\/ 2 NEW_LINE"}
{"text":"build left and right segments","code":"build ( 2 * node , start , mid ) NEW_LINE build ( 2 * node + 1 , mid + 1 , end ) NEW_LINE"}
{"text":"build the parent","code":"left_lcm = tree [ 2 * node ] NEW_LINE right_lcm = tree [ 2 * node + 1 ] NEW_LINE tree [ node ] = lcm ( left_lcm , right_lcm ) NEW_LINE"}
{"text":"Function to make queries for array range ) l , r ) . Node is index of root of current segment in segment tree ( Note that indexes in segment tree begin with 1f or simplicity ) . start and end are indexes of subarray covered by root of current segment .","code":"def query ( node : int , start : int , end : int , l : int , r : int ) : NEW_LINE"}
{"text":"Completely outside the segment , returning 1 will not affect the lcm ;","code":"if end < l or start > r : NEW_LINE INDENT return 1 NEW_LINE DEDENT"}
{"text":"completely inside the segment","code":"if l <= start and r >= end : NEW_LINE INDENT return tree [ node ] NEW_LINE DEDENT"}
{"text":"partially inside","code":"mid = ( start + end ) \/\/ 2 NEW_LINE left_lcm = query ( 2 * node , start , mid , l , r ) NEW_LINE right_lcm = query ( 2 * node + 1 , mid + 1 , end , l , r ) NEW_LINE return lcm ( left_lcm , right_lcm ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"initialize the array","code":"arr [ 0 ] = 5 NEW_LINE arr [ 1 ] = 7 NEW_LINE arr [ 2 ] = 5 NEW_LINE arr [ 3 ] = 2 NEW_LINE arr [ 4 ] = 10 NEW_LINE arr [ 5 ] = 12 NEW_LINE arr [ 6 ] = 11 NEW_LINE arr [ 7 ] = 17 NEW_LINE arr [ 8 ] = 14 NEW_LINE arr [ 9 ] = 1 NEW_LINE arr [ 10 ] = 44 NEW_LINE"}
{"text":"build the segment tree","code":"build ( 1 , 0 , 10 ) NEW_LINE"}
{"text":"Now we can answer each query efficiently Print LCM of ( 2 , 5 )","code":"print ( query ( 1 , 0 , 10 , 2 , 5 ) ) NEW_LINE"}
{"text":"Print LCM of ( 5 , 10 )","code":"print ( query ( 1 , 0 , 10 , 5 , 10 ) ) NEW_LINE"}
{"text":"Print LCM of ( 0 , 10 )","code":"print ( query ( 1 , 0 , 10 , 0 , 10 ) ) NEW_LINE"}
{"text":"Python program for the above approach","code":"M = 1000000007 NEW_LINE def waysOfDecoding ( s ) : NEW_LINE INDENT dp = [ 0 ] * ( len ( s ) + 1 ) NEW_LINE dp [ 0 ] = 1 NEW_LINE DEDENT"}
{"text":"check the first character of the string if it is ' * ' then 9 ways","code":"if s [ 0 ] == ' * ' : NEW_LINE INDENT dp [ 1 ] = 9 NEW_LINE DEDENT elif s [ 0 ] == '0' : NEW_LINE INDENT dp [ 1 ] = 0 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ 1 ] = 1 NEW_LINE DEDENT"}
{"text":"traverse the string","code":"for i in range ( len ( s ) ) : NEW_LINE"}
{"text":"If s [ i ] = = ' * ' there can be 9 possible values of *","code":"if ( s [ i ] == ' * ' ) : NEW_LINE INDENT dp [ i + 1 ] = 9 * dp [ i ] NEW_LINE DEDENT"}
{"text":"If previous character is 1 then words that can be formed are K ( 11 ) , L ( 12 ) , M ( 13 ) , N ( 14 ) O ( 15 ) , P ( 16 ) , Q ( 17 ) , R ( 18 ) , S ( 19 )","code":"if ( s [ i - 1 ] == '1' ) : NEW_LINE INDENT dp [ i + 1 ] = ( dp [ i + 1 ] + 9 * dp [ i - 1 ] ) % M NEW_LINE DEDENT"}
{"text":"If previous character is 2 then the words that can be formed are U ( 21 ) , V ( 22 ) , W ( 23 ) , X ( 24 ) Y ( 25 ) , Z ( 26 )","code":"elif ( s [ i - 1 ] == '2' ) : NEW_LINE INDENT dp [ i + 1 ] = ( dp [ i + 1 ] + 6 * dp [ i - 1 ] ) % M NEW_LINE DEDENT"}
{"text":"If the previous digit is * then all 15 2 - digit characters can be formed","code":"elif ( s [ i - 1 ] == ' * ' ) : NEW_LINE INDENT dp [ i + 1 ] = ( dp [ i + 1 ] + 15 * dp [ i - 1 ] ) % M NEW_LINE DEDENT else : NEW_LINE"}
{"text":"taking the value from previous step","code":"if s [ i ] != '0' : NEW_LINE INDENT dp [ i + 1 ] = dp [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i + 1 ] = 0 NEW_LINE DEDENT"}
{"text":"If previous character is 1 then the i - 1 th character and ith character can be decoded in a single character therefore , adding dp [ i - 1 ] .","code":"if ( s [ i - 1 ] == '1' ) : NEW_LINE INDENT dp [ i + 1 ] = ( dp [ i + 1 ] + dp [ i - 1 ] ) % M NEW_LINE DEDENT"}
{"text":"If previous character is 2 and ith character is less than 6 then the i - 1 th character and ith character can be decoded in a single character therefore , adding dp [ i - 1 ] .","code":"elif ( s [ i - 1 ] == '2' and s [ i ] <= '6' ) : NEW_LINE INDENT dp [ i + 1 ] = ( dp [ i + 1 ] + dp [ i - 1 ] ) % M NEW_LINE DEDENT"}
{"text":"If previous character is * then it will contain the above 2 cases","code":"elif ( s [ i - 1 ] == ' * ' ) : NEW_LINE INDENT if ( s [ i ] <= '6' ) : NEW_LINE INDENT dp [ i + 1 ] = dp [ i + 1 ] + 2 * dp [ i - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT dp [ i + 1 ] = dp [ i + 1 ] + 1 * dp [ i - 1 ] NEW_LINE DEDENT dp [ i + 1 ] = dp [ i + 1 ] % M NEW_LINE DEDENT return dp [ len ( s ) ] NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \"12\" NEW_LINE print ( waysOfDecoding ( s ) ) NEW_LINE DEDENT"}
{"text":"Function to count the number of ways to divide the array into two subsets and such that the difference between their sums is equal to diff","code":"def countSubset ( arr , n , diff ) : NEW_LINE"}
{"text":"Store the sum of the set S1","code":"sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT sum += diff NEW_LINE sum = sum \/\/ 2 NEW_LINE"}
{"text":"Initializing the matrix","code":"t = [ [ 0 for i in range ( sum + 1 ) ] for i in range ( n + 1 ) ] NEW_LINE"}
{"text":"Number of ways to get sum using 0 elements is 0","code":"for j in range ( sum + 1 ) : NEW_LINE INDENT t [ 0 ] [ j ] = 0 NEW_LINE DEDENT"}
{"text":"Number of ways to get sum 0 using i elements is 1","code":"for i in range ( n + 1 ) : NEW_LINE INDENT t [ i ] [ 0 ] = 1 NEW_LINE DEDENT"}
{"text":"Traverse the 2D array","code":"for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , sum + 1 ) : NEW_LINE DEDENT"}
{"text":"If the value is greater than the sum store the value of previous state","code":"if ( arr [ i - 1 ] > j ) : NEW_LINE INDENT t [ i ] [ j ] = t [ i - 1 ] [ j ] NEW_LINE DEDENT else : NEW_LINE INDENT t [ i ] [ j ] = t [ i - 1 ] [ j ] + t [ i - 1 ] [ j - arr [ i - 1 ] ] NEW_LINE DEDENT"}
{"text":"Return the result","code":"return t [ n ] [ sum ] NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given Input","code":"diff , n = 1 , 4 NEW_LINE arr = [ 1 , 1 , 2 , 3 ] NEW_LINE"}
{"text":"Function Call","code":"print ( countSubset ( arr , n , diff ) ) NEW_LINE"}
{"text":"Python3 program for above approach","code":"dp = [ [ 0 for i in range ( 605 ) ] for j in range ( 105 ) ] NEW_LINE"}
{"text":"Function to calculate probability that the sum of numbers on N throws of dice lies between A and B","code":"def find ( N , a , b ) : NEW_LINE INDENT probability = 0.0 NEW_LINE DEDENT"}
{"text":"Base case","code":"for i in range ( 1 , 7 ) : NEW_LINE INDENT dp [ 1 ] [ i ] = 1.0 \/ 6 NEW_LINE DEDENT for i in range ( 2 , N + 1 ) : NEW_LINE INDENT for j in range ( i , ( 6 * i ) + 1 ) : NEW_LINE INDENT for k in range ( 1 , 7 ) : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i ] [ j ] + dp [ i - 1 ] [ j - k ] \/ 6 NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Add the probability for all the numbers between a and b","code":"for Sum in range ( a , b + 1 ) : NEW_LINE INDENT probability = probability + dp [ N ] [ Sum ] NEW_LINE DEDENT return probability NEW_LINE"}
{"text":"Driver Code","code":"N , a , b = 4 , 13 , 17 NEW_LINE probability = find ( N , a , b ) NEW_LINE"}
{"text":"Print the answer","code":"print ( ' % .6f ' % probability ) NEW_LINE"}
{"text":"Python3 code for max sum with adjacent levels not allowed","code":"from collections import deque as queue NEW_LINE"}
{"text":"A BST node","code":"class Node : NEW_LINE INDENT def __init__ ( self , x ) : NEW_LINE INDENT self . data = x NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT"}
{"text":"Recursive function to find the maximum sum returned for a root node and its grandchildren","code":"def getSumAlternate ( root ) : NEW_LINE INDENT if ( root == None ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT sum = root . data NEW_LINE if ( root . left != None ) : NEW_LINE INDENT sum += getSum ( root . left . left ) NEW_LINE sum += getSum ( root . left . right ) NEW_LINE DEDENT if ( root . right != None ) : NEW_LINE INDENT sum += getSum ( root . right . left ) NEW_LINE sum += getSum ( root . right . right ) NEW_LINE DEDENT return sum NEW_LINE DEDENT"}
{"text":"Returns maximum sum with adjacent levels not allowed . This function mainly uses getSumAlternate ( )","code":"def getSum ( root ) : NEW_LINE INDENT if ( root == None ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT"}
{"text":"We compute sum of alternate levels starting first level and from second level . And return maximum of two values .","code":"return max ( getSumAlternate ( root ) , ( getSumAlternate ( root . left ) + getSumAlternate ( root . right ) ) ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT root = Node ( 1 ) NEW_LINE root . left = Node ( 2 ) NEW_LINE root . right = Node ( 3 ) NEW_LINE root . right . left = Node ( 4 ) NEW_LINE root . right . left . right = Node ( 5 ) NEW_LINE root . right . left . right . left = Node ( 6 ) NEW_LINE print ( getSum ( root ) ) NEW_LINE DEDENT"}
{"text":"Returns true if there exists a subset with given sum in arr [ ]","code":"def isSubsetSum ( arr , n , sum ) : NEW_LINE"}
{"text":"The value of subset [ i % 2 ] [ j ] will be true if there exists a subset of sum j in arr [ 0 , 1 , ... . , i - 1 ]","code":"subset = [ [ False for j in range ( sum + 1 ) ] for i in range ( 3 ) ] NEW_LINE for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( sum + 1 ) : NEW_LINE DEDENT"}
{"text":"A subset with sum 0 is always possible","code":"if ( j == 0 ) : NEW_LINE INDENT subset [ i % 2 ] [ j ] = True NEW_LINE DEDENT"}
{"text":"If there exists no element no sum is possible","code":"elif ( i == 0 ) : NEW_LINE INDENT subset [ i % 2 ] [ j ] = False NEW_LINE DEDENT elif ( arr [ i - 1 ] <= j ) : NEW_LINE INDENT subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j - arr [ i - 1 ] ] or subset [ ( i + 1 ) % 2 ] [ j ] NEW_LINE DEDENT else : NEW_LINE INDENT subset [ i % 2 ] [ j ] = subset [ ( i + 1 ) % 2 ] [ j ] NEW_LINE DEDENT return subset [ n % 2 ] [ sum ] NEW_LINE"}
{"text":"Driver code","code":"arr = [ 6 , 2 , 5 ] NEW_LINE sum = 7 NEW_LINE n = len ( arr ) NEW_LINE if ( isSubsetSum ( arr , n , sum ) == True ) : NEW_LINE INDENT print ( \" There \u2581 exists \u2581 a \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \u2581 subset \u2581 exists \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT"}
{"text":"Python 3 program to find maximum equilibrium sum .","code":"import sys NEW_LINE"}
{"text":"Function to find maximum equilibrium sum .","code":"def findMaxSum ( arr , n ) : NEW_LINE INDENT res = - sys . maxsize - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT prefix_sum = arr [ i ] NEW_LINE for j in range ( i ) : NEW_LINE INDENT prefix_sum += arr [ j ] NEW_LINE DEDENT suffix_sum = arr [ i ] NEW_LINE j = n - 1 NEW_LINE while ( j > i ) : NEW_LINE INDENT suffix_sum += arr [ j ] NEW_LINE j -= 1 NEW_LINE DEDENT if ( prefix_sum == suffix_sum ) : NEW_LINE INDENT res = max ( res , prefix_sum ) NEW_LINE DEDENT DEDENT return res NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ - 2 , 5 , 3 , 1 , 2 , 6 , - 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxSum ( arr , n ) ) NEW_LINE DEDENT"}
{"text":"Function to find maximum equilibrium sum .","code":"def findMaxSum ( arr , n ) : NEW_LINE"}
{"text":"Array to store prefix sum .","code":"preSum = [ 0 for i in range ( n ) ] NEW_LINE"}
{"text":"Array to store suffix sum .","code":"suffSum = [ 0 for i in range ( n ) ] NEW_LINE"}
{"text":"Variable to store maximum sum .","code":"ans = - 10000000 NEW_LINE"}
{"text":"Calculate prefix sum .","code":"preSum [ 0 ] = arr [ 0 ] NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT preSum [ i ] = preSum [ i - 1 ] + arr [ i ] NEW_LINE DEDENT"}
{"text":"Calculate suffix sum and compare it with prefix sum . Update ans accordingly .","code":"suffSum [ n - 1 ] = arr [ n - 1 ] NEW_LINE if ( preSum [ n - 1 ] == suffSum [ n - 1 ] ) : NEW_LINE INDENT ans = max ( ans , preSum [ n - 1 ] ) NEW_LINE DEDENT for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT suffSum [ i ] = suffSum [ i + 1 ] + arr [ i ] NEW_LINE if ( suffSum [ i ] == preSum [ i ] ) : NEW_LINE INDENT ans = max ( ans , preSum [ i ] ) NEW_LINE DEDENT DEDENT return ans NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ - 2 , 5 , 3 , 1 , 2 , 6 , - 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxSum ( arr , n ) ) NEW_LINE DEDENT"}
{"text":"Python3 program to find maximum equilibrium sum .","code":"import sys NEW_LINE"}
{"text":"Function to find maximum equilibrium sum .","code":"def findMaxSum ( arr , n ) : NEW_LINE INDENT ss = sum ( arr ) NEW_LINE prefix_sum = 0 NEW_LINE res = - sys . maxsize NEW_LINE for i in range ( n ) : NEW_LINE INDENT prefix_sum += arr [ i ] NEW_LINE if prefix_sum == ss : NEW_LINE INDENT res = max ( res , prefix_sum ) ; NEW_LINE DEDENT ss -= arr [ i ] ; NEW_LINE DEDENT return res NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ - 2 , 5 , 3 , 1 , 2 , 6 , - 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( findMaxSum ( arr , n ) ) NEW_LINE DEDENT"}
{"text":"Function to find Majority element in an array","code":"def findMajority ( arr , n ) : NEW_LINE INDENT maxCount = 0 NEW_LINE DEDENT"}
{"text":"sentinels","code":"index = - 1 NEW_LINE for i in range ( n ) : NEW_LINE INDENT count = 0 NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == arr [ j ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"update maxCount if count of current element is greater","code":"if ( count > maxCount ) : NEW_LINE INDENT maxCount = count NEW_LINE index = i NEW_LINE DEDENT"}
{"text":"if maxCount is greater than n \/ 2 return the corresponding element","code":"if ( maxCount > n \/\/ 2 ) : NEW_LINE INDENT print ( arr [ index ] ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \u2581 Majority \u2581 Element \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 1 , 2 , 1 , 3 , 5 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE DEDENT"}
{"text":"Function calling","code":"findMajority ( arr , n ) NEW_LINE"}
{"text":"Function to find the candidate for Majority","code":"def findCandidate ( A ) : NEW_LINE INDENT maj_index = 0 NEW_LINE count = 1 NEW_LINE for i in range ( len ( A ) ) : NEW_LINE INDENT if A [ maj_index ] == A [ i ] : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count -= 1 NEW_LINE DEDENT if count == 0 : NEW_LINE INDENT maj_index = i NEW_LINE count = 1 NEW_LINE DEDENT DEDENT return A [ maj_index ] NEW_LINE DEDENT"}
{"text":"Function to check if the candidate occurs more than n \/ 2 times","code":"def isMajority ( A , cand ) : NEW_LINE INDENT count = 0 NEW_LINE for i in range ( len ( A ) ) : NEW_LINE INDENT if A [ i ] == cand : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT if count > len ( A ) \/ 2 : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT"}
{"text":"Function to print Majority Element","code":"def printMajority ( A ) : NEW_LINE"}
{"text":"Find the candidate for Majority","code":"cand = findCandidate ( A ) NEW_LINE"}
{"text":"Print the candidate if it is Majority","code":"if isMajority ( A , cand ) == True : NEW_LINE INDENT print ( cand ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \u2581 Majority \u2581 Element \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"A = [ 1 , 3 , 3 , 1 , 2 ] NEW_LINE"}
{"text":"Function call","code":"printMajority ( A ) NEW_LINE"}
{"text":"Python3 program for finding out majority element in an array","code":"def findMajority ( arr , size ) : NEW_LINE INDENT m = { } NEW_LINE for i in range ( size ) : NEW_LINE INDENT if arr [ i ] in m : NEW_LINE INDENT m [ arr [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT count = 0 NEW_LINE for key in m : NEW_LINE INDENT if m [ key ] > size \/ 2 : NEW_LINE INDENT count = 1 NEW_LINE print ( \" Majority \u2581 found \u2581 : - \" , key ) NEW_LINE break NEW_LINE DEDENT DEDENT if ( count == 0 ) : NEW_LINE INDENT print ( \" No \u2581 Majority \u2581 element \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver code","code":"arr = [ 2 , 2 , 2 , 2 , 5 , 5 , 2 , 3 , 3 ] NEW_LINE n = len ( arr ) NEW_LINE"}
{"text":"Function calling","code":"findMajority ( arr , n ) NEW_LINE"}
{"text":"Function to find Majority element in an array it returns - 1 if there is no majority element","code":"def majorityElement ( arr , n ) : NEW_LINE"}
{"text":"sort the array in O ( nlogn )","code":"arr . sort ( ) NEW_LINE count , max_ele , temp , f = 1 , - 1 , arr [ 0 ] , 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE"}
{"text":"increases the count if the same element occurs otherwise starts counting new element","code":"if ( temp == arr [ i ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count = 1 NEW_LINE temp = arr [ i ] NEW_LINE DEDENT"}
{"text":"sets maximum count and stores maximum occured element so far if maximum count becomes greater than n \/ 2 it breaks out setting the flag","code":"if ( max_ele < count ) : NEW_LINE INDENT max_ele = count NEW_LINE ele = arr [ i ] NEW_LINE if ( max_ele > ( n \/\/ 2 ) ) : NEW_LINE INDENT f = 1 NEW_LINE break NEW_LINE DEDENT DEDENT"}
{"text":"returns maximum occured element if there is no such element , returns - 1","code":"if f == 1 : NEW_LINE INDENT return ele NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"Driver code","code":"arr = [ 1 , 1 , 2 , 1 , 3 , 5 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE"}
{"text":"Function calling","code":"print ( majorityElement ( arr , n ) ) NEW_LINE"}
{"text":"Returns true if there is a subset of set [ ] with sum equal to given sum","code":"def isSubsetSum ( set , n , sum ) : NEW_LINE"}
{"text":"The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i","code":"subset = ( [ [ False for i in range ( sum + 1 ) ] for i in range ( n + 1 ) ] ) NEW_LINE"}
{"text":"If sum is 0 , then answer is true","code":"for i in range ( n + 1 ) : NEW_LINE INDENT subset [ i ] [ 0 ] = True NEW_LINE DEDENT"}
{"text":"If sum is not 0 and set is empty , then answer is false","code":"for i in range ( 1 , sum + 1 ) : NEW_LINE INDENT subset [ 0 ] [ i ] = False NEW_LINE DEDENT"}
{"text":"Fill the subset table in bottom up manner","code":"for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , sum + 1 ) : NEW_LINE INDENT if j < set [ i - 1 ] : NEW_LINE INDENT subset [ i ] [ j ] = subset [ i - 1 ] [ j ] NEW_LINE DEDENT if j >= set [ i - 1 ] : NEW_LINE INDENT subset [ i ] [ j ] = ( subset [ i - 1 ] [ j ] or subset [ i - 1 ] [ j - set [ i - 1 ] ] ) NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"uncomment this code to print table","code":"for i in range ( n + 1 ) : NEW_LINE for j in range ( sum + 1 ) : NEW_LINE print ( subset [ i ] [ j ] , end = \" \u2581 \" ) NEW_LINE print ( ) NEW_LINE return subset [ n ] [ sum ] NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT set = [ 3 , 34 , 4 , 12 , 5 , 2 ] NEW_LINE sum = 9 NEW_LINE n = len ( set ) NEW_LINE if ( isSubsetSum ( set , n , sum ) == True ) : NEW_LINE INDENT print ( \" Found \u2581 a \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Taking the matrix as globally","code":"tab = [ [ - 1 for i in range ( 2000 ) ] for j in range ( 2000 ) ] NEW_LINE"}
{"text":"Check if possible subset with given sum is possible or not","code":"def subsetSum ( a , n , sum ) : NEW_LINE"}
{"text":"If the sum is zero it means we got our expected sum","code":"if ( sum == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT if ( n <= 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"If the value is not - 1 it means it already call the function with the same value . it will save our from the repetition .","code":"if ( tab [ n - 1 ] [ sum ] != - 1 ) : NEW_LINE INDENT return tab [ n - 1 ] [ sum ] NEW_LINE DEDENT"}
{"text":"if the value of a [ n - 1 ] is greater than the sum . we call for the next value","code":"if ( a [ n - 1 ] > sum ) : NEW_LINE INDENT tab [ n - 1 ] [ sum ] = subsetSum ( a , n - 1 , sum ) NEW_LINE return tab [ n - 1 ] [ sum ] NEW_LINE DEDENT else : NEW_LINE"}
{"text":"Here we do two calls because we don ' t \u2581 know \u2581 which \u2581 value \u2581 is \u2581 \u2581 full - fill \u2581 our \u2581 criteria \u2581 \u2581 that ' s why we doing two calls","code":"tab [ n - 1 ] [ sum ] = subsetSum ( a , n - 1 , sum ) NEW_LINE return tab [ n - 1 ] [ sum ] or subsetSum ( a , n - 1 , sum - a [ n - 1 ] ) NEW_LINE"}
{"text":"Driver Code","code":"n = 5 NEW_LINE a = [ 1 , 5 , 3 , 7 , 4 ] NEW_LINE sum = 12 NEW_LINE if ( subsetSum ( a , n , sum ) ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT"}
{"text":"Python3 program for the above approach","code":"from math import log NEW_LINE"}
{"text":"Function to implement fast exponentiation","code":"def binpow ( a , b ) : NEW_LINE INDENT res = 1 NEW_LINE while ( b > 0 ) : NEW_LINE INDENT if ( b % 2 == 1 ) : NEW_LINE INDENT res = res * a NEW_LINE DEDENT a = a * a NEW_LINE b \/\/= 2 NEW_LINE DEDENT return res NEW_LINE DEDENT"}
{"text":"Function to return the value for powers of 2","code":"def find ( x ) : NEW_LINE INDENT if ( x == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT p = log ( x ) \/ log ( 2 ) NEW_LINE return binpow ( 2 , p + 1 ) - 1 NEW_LINE DEDENT"}
{"text":"Function to convert N into binary","code":"def getBinary ( n ) : NEW_LINE"}
{"text":"To store binary representation","code":"ans = \" \" NEW_LINE"}
{"text":"Iterate each digit of n","code":"while ( n > 0 ) : NEW_LINE INDENT dig = n % 2 NEW_LINE ans += str ( dig ) NEW_LINE n \/\/= 2 NEW_LINE DEDENT"}
{"text":"Return binary representation","code":"return ans NEW_LINE"}
{"text":"Function to find difference in bits","code":"def totalCountDifference ( n ) : NEW_LINE"}
{"text":"Get binary representation","code":"ans = getBinary ( n ) NEW_LINE"}
{"text":"total number of bit differences from 0 to N","code":"req = 0 NEW_LINE"}
{"text":"Iterate over each binary bit","code":"for i in range ( len ( ans ) ) : NEW_LINE"}
{"text":"If current bit is '1' then add the count of current bit","code":"if ( ans [ i ] == '1' ) : NEW_LINE INDENT req += find ( binpow ( 2 , i ) ) NEW_LINE DEDENT return req NEW_LINE"}
{"text":"Given Number","code":"N = 5 NEW_LINE"}
{"text":"Function Call","code":"print ( totalCountDifference ( N ) ) NEW_LINE"}
{"text":"Function to return the maximum length of the required prefix","code":"def Maximum_Length ( a ) : NEW_LINE"}
{"text":"Array to store the frequency of each element of the array","code":"counts = [ 0 ] * 11 NEW_LINE"}
{"text":"Iterating for all the elements","code":"for index , v in enumerate ( a ) : NEW_LINE"}
{"text":"Update the frequency of the current element i . e . v","code":"counts [ v ] += 1 NEW_LINE"}
{"text":"Sorted positive values from counts array","code":"k = sorted ( [ i for i in counts if i ] ) NEW_LINE"}
{"text":"If current prefix satisfies the given conditions","code":"if len ( k ) == 1 or ( k [ 0 ] == k [ - 2 ] and k [ - 1 ] - k [ - 2 ] == 1 ) or ( k [ 0 ] == 1 and k [ 1 ] == k [ - 1 ] ) : NEW_LINE INDENT ans = index NEW_LINE DEDENT"}
{"text":"Return the maximum length","code":"return ans + 1 NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 1 , 1 , 1 , 2 , 2 , 2 ] NEW_LINE n = len ( a ) NEW_LINE print ( Maximum_Length ( a ) ) NEW_LINE DEDENT"}
{"text":"Returns the gcd after all updates in the array","code":"def gcd ( a , b ) : NEW_LINE INDENT if a == 0 : NEW_LINE INDENT return b NEW_LINE DEDENT return gcd ( b % a , a ) NEW_LINE DEDENT"}
{"text":"Function to calculate gcd of onine queries","code":"def print_gcd_online ( n , m , query , arr ) : NEW_LINE"}
{"text":"Stores the gcd of the initial array elements","code":"max_gcd = 0 NEW_LINE"}
{"text":"calculates the gcd","code":"for i in range ( 0 , n ) : NEW_LINE INDENT max_gcd = gcd ( max_gcd , arr [ i ] ) NEW_LINE DEDENT"}
{"text":"performing online queries","code":"for i in range ( 0 , m ) : NEW_LINE"}
{"text":"index is 1 based","code":"query [ i ] [ 0 ] -= 1 NEW_LINE"}
{"text":"divide the array element","code":"arr [ query [ i ] [ 0 ] ] \/\/= query [ i ] [ 1 ] NEW_LINE"}
{"text":"calculates the current gcd","code":"max_gcd = gcd ( arr [ query [ i ] [ 0 ] ] , max_gcd ) NEW_LINE"}
{"text":"Print the gcd after each step","code":"print ( max_gcd ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n , m = 3 , 3 NEW_LINE query = [ [ 1 , 3 ] , [ 3 , 12 ] , [ 2 , 4 ] ] NEW_LINE arr = [ 36 , 24 , 72 ] NEW_LINE print_gcd_online ( n , m , query , arr ) NEW_LINE DEDENT"}
{"text":"Python 3 implementation of the approach","code":"MAX = 1000000 NEW_LINE"}
{"text":"stores whether the number is prime or not","code":"prime = [ True ] * ( MAX + 1 ) NEW_LINE"}
{"text":"stores the count of prime numbers less than or equal to the index","code":"sum = [ 0 ] * ( MAX + 1 ) NEW_LINE"}
{"text":"create the sieve","code":"def SieveOfEratosthenes ( ) : NEW_LINE"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all the entries as true . A value in prime [ i ] will finally be false if ' i ' is Not a prime , else true","code":"prime [ 1 ] = False NEW_LINE p = 2 NEW_LINE while p * p <= MAX : NEW_LINE"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] ) : NEW_LINE"}
{"text":"Update all multiples of p","code":"i = p * 2 NEW_LINE while i <= MAX : NEW_LINE INDENT prime [ i ] = False NEW_LINE i += p NEW_LINE DEDENT p += 1 NEW_LINE"}
{"text":"stores the prefix sum of number of primes less than or equal to 'i","code":"' NEW_LINE INDENT for i in range ( 1 , MAX + 1 ) : NEW_LINE INDENT if ( prime [ i ] == True ) : NEW_LINE INDENT sum [ i ] = 1 NEW_LINE DEDENT sum [ i ] += sum [ i - 1 ] NEW_LINE DEDENT DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"create the sieve","code":"SieveOfEratosthenes ( ) NEW_LINE"}
{"text":"' l ' and ' r ' are the lower and upper bounds of the range","code":"l = 3 NEW_LINE r = 9 NEW_LINE"}
{"text":"get the value of count","code":"c = ( sum [ r ] - sum [ l - 1 ] ) NEW_LINE"}
{"text":"display the count","code":"print ( \" Count : \" , c ) NEW_LINE"}
{"text":"Python 3 Program to find the area of the circle inscribed within the rectangle which in turn is inscribed in a semicircle","code":"from math import pow , sqrt NEW_LINE"}
{"text":"Function to find the area of the circle","code":"def area ( r ) : NEW_LINE"}
{"text":"radius cannot be negative","code":"if ( r < 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"area of the circle","code":"area = 3.14 * pow ( r \/ ( 2 * sqrt ( 2 ) ) , 2 ) ; NEW_LINE return area ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = 5 NEW_LINE print ( \" { 0 : . 6 } \" . format ( area ( a ) ) ) NEW_LINE DEDENT"}
{"text":"Python 3 program to count almost prime numbers from 1 to n","code":"from math import * NEW_LINE N = 100005 NEW_LINE"}
{"text":"Create a boolean array \" prime [ 0 . . n ] \" and initialize all entries it as true . A value in prime [ i ] will finally be false if i is Not a prime , else true .","code":"prime = [ True ] * N NEW_LINE def SieveOfEratosthenes ( ) : NEW_LINE INDENT prime [ 1 ] = False NEW_LINE for p in range ( 2 , int ( sqrt ( N ) ) ) : NEW_LINE DEDENT"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if prime [ p ] == True : NEW_LINE"}
{"text":"Update all multiples of p","code":"for i in range ( 2 * p , N , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT"}
{"text":"Function to count almost prime numbers from 1 to n","code":"def almostPrimes ( n ) : NEW_LINE"}
{"text":"to store required answer","code":"ans = 0 NEW_LINE"}
{"text":"6 is first almost prime number","code":"for i in range ( 6 , n + 1 ) : NEW_LINE"}
{"text":"to count prime factors","code":"c = 0 NEW_LINE for j in range ( 2 , int ( sqrt ( i ) ) + 1 ) : NEW_LINE"}
{"text":"if it is perfect square","code":"if i % j == 0 : NEW_LINE INDENT if j * j == i : NEW_LINE INDENT if prime [ j ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT else : NEW_LINE INDENT if prime [ j ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT if prime [ i \/\/ j ] : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"if I is almost prime number","code":"if c == 2 : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT SieveOfEratosthenes ( ) NEW_LINE n = 21 NEW_LINE print ( almostPrimes ( n ) ) NEW_LINE DEDENT"}
{"text":"Returns sum of digits of x","code":"def sumOfDigitsSingle ( x ) : NEW_LINE INDENT ans = 0 NEW_LINE while x : NEW_LINE INDENT ans += x % 10 NEW_LINE x \/\/= 10 NEW_LINE DEDENT return ans NEW_LINE DEDENT"}
{"text":"Returns closest number to x in terms of 9 's","code":"def closest ( x ) : NEW_LINE INDENT ans = 0 NEW_LINE while ( ans * 10 + 9 <= x ) : NEW_LINE INDENT ans = ans * 10 + 9 NEW_LINE DEDENT return ans NEW_LINE DEDENT def sumOfDigitsTwoParts ( N ) : NEW_LINE INDENT A = closest ( N ) NEW_LINE return sumOfDigitsSingle ( A ) + sumOfDigitsSingle ( N - A ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 35 NEW_LINE print ( sumOfDigitsTwoParts ( N ) ) NEW_LINE DEDENT"}
{"text":"Function to check whether ( 2 ^ p - 1 ) is prime or not .","code":"def isPrime ( p ) : NEW_LINE"}
{"text":"generate the number","code":"checkNumber = 2 ** p - 1 NEW_LINE"}
{"text":"First number of the series","code":"nextval = 4 % checkNumber NEW_LINE"}
{"text":"Generate the rest ( p - 2 ) terms of the series","code":"for i in range ( 1 , p - 1 ) : NEW_LINE INDENT nextval = ( nextval * nextval - 2 ) % checkNumber NEW_LINE DEDENT"}
{"text":"now if the ( p - 1 ) the term is 0 return true else false .","code":"if ( nextval == 0 ) : return True NEW_LINE else : return False NEW_LINE"}
{"text":"Check whetherr 2 ^ ( p - 1 ) is prime or not .","code":"p = 7 NEW_LINE checkNumber = 2 ** p - 1 NEW_LINE if isPrime ( p ) : NEW_LINE INDENT print ( checkNumber , ' is \u2581 Prime . ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( checkNumber , ' is \u2581 not \u2581 Prime ' ) NEW_LINE DEDENT"}
{"text":"Function to detect prime number here we have used sieve method https : www . geeksforgeeks . org \/ sieve - of - eratosthenes \/ to detect prime number","code":"def sieve ( n , prime ) : NEW_LINE INDENT p = 2 NEW_LINE while ( p * p <= n ) : NEW_LINE DEDENT"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] == True ) : NEW_LINE"}
{"text":"Update all multiples of p","code":"for i in range ( p * 2 , n , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT p += 1 NEW_LINE def printSophieGermanNumber ( n ) : NEW_LINE"}
{"text":"We have made array till 2 * n + 1 so that we can check prime number till that and conclude about sophie german prime .","code":"prime = [ True ] * ( 2 * n + 1 ) NEW_LINE sieve ( 2 * n + 1 , prime ) NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE"}
{"text":"checking every i whether it is sophie german prime or not .","code":"if ( prime [ i ] and prime [ 2 * i + 1 ] ) : NEW_LINE INDENT print ( i , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"n = 25 NEW_LINE printSophieGermanNumber ( n ) NEW_LINE"}
{"text":"calculating u mentioned in the formula","code":"def ucal ( u , n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT temp = u ; NEW_LINE for i in range ( 1 , int ( n \/ 2 + 1 ) ) : NEW_LINE INDENT temp = temp * ( u - i ) ; NEW_LINE DEDENT for i in range ( 1 , int ( n \/ 2 ) ) : NEW_LINE INDENT temp = temp * ( u + i ) ; NEW_LINE DEDENT return temp ; NEW_LINE DEDENT"}
{"text":"calculating factorial of given number n","code":"def fact ( n ) : NEW_LINE INDENT f = 1 ; NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT f *= i ; NEW_LINE DEDENT return f ; NEW_LINE DEDENT"}
{"text":"Number of values given","code":"n = 6 ; NEW_LINE x = [ 25 , 26 , 27 , 28 , 29 , 30 ] ; NEW_LINE"}
{"text":"y [ ] [ ] is used for difference table with y [ ] [ 0 ] used for input","code":"y = [ [ 0 for i in range ( n ) ] for j in range ( n ) ] ; NEW_LINE y [ 0 ] [ 0 ] = 4.000 ; NEW_LINE y [ 1 ] [ 0 ] = 3.846 ; NEW_LINE y [ 2 ] [ 0 ] = 3.704 ; NEW_LINE y [ 3 ] [ 0 ] = 3.571 ; NEW_LINE y [ 4 ] [ 0 ] = 3.448 ; NEW_LINE y [ 5 ] [ 0 ] = 3.333 ; NEW_LINE"}
{"text":"Calculating the central difference table","code":"for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( n - i ) : NEW_LINE INDENT y [ j ] [ i ] = y [ j + 1 ] [ i - 1 ] - y [ j ] [ i - 1 ] ; NEW_LINE DEDENT DEDENT"}
{"text":"Displaying the central difference table","code":"for i in range ( n ) : NEW_LINE INDENT for j in range ( n - i ) : NEW_LINE INDENT print ( y [ i ] [ j ] , \" TABSYMBOL \" , end = \" \u2581 \" ) ; NEW_LINE DEDENT print ( \" \" ) ; NEW_LINE DEDENT"}
{"text":"value to interpolate at","code":"value = 27.4 ; NEW_LINE"}
{"text":"Initializing u and sum","code":"sum = ( y [ 2 ] [ 0 ] + y [ 3 ] [ 0 ] ) \/ 2 ; NEW_LINE"}
{"text":"k is origin thats is f ( 0 )","code":"k = 0 ; NEW_LINE"}
{"text":"if ( ( n % 2 ) > 0 ) : origin for odd","code":"k = int ( n \/ 2 ) ; NEW_LINE else : NEW_LINE"}
{"text":"k = int ( n \/ 2 - 1 ) ; origin for even","code":"u = ( value - x [ k ] ) \/ ( x [ 1 ] - x [ 0 ] ) ; NEW_LINE"}
{"text":"Solving using bessel 's formula","code":"for i in range ( 1 , n ) : NEW_LINE INDENT if ( i % 2 ) : NEW_LINE INDENT sum = sum + ( ( u - 0.5 ) * ucal ( u , i - 1 ) * y [ k ] [ i ] ) \/ fact ( i ) ; NEW_LINE DEDENT else : NEW_LINE INDENT sum = sum + ( ucal ( u , i ) * ( y [ k ] [ i ] + y [ k - 1 ] [ i ] ) \/ ( fact ( i ) * 2 ) ) ; NEW_LINE k -= 1 ; NEW_LINE DEDENT DEDENT print ( \" Value \u2581 at \" , value , \" is \" , round ( sum , 5 ) ) ; NEW_LINE"}
{"text":"A simple Python 3 program to check if n - th Fibonacci number is multiple of 10.","code":"def fibonacci ( n ) : NEW_LINE INDENT a = 0 NEW_LINE b = 1 NEW_LINE if ( n <= 1 ) : NEW_LINE INDENT return n NEW_LINE DEDENT for i in range ( 2 , n + 1 ) : NEW_LINE INDENT c = a + b NEW_LINE a = b NEW_LINE b = c NEW_LINE DEDENT return c NEW_LINE DEDENT"}
{"text":"Returns true if n - th Fibonacci number is multiple of 10.","code":"def isMultipleOf10 ( n ) : NEW_LINE INDENT f = fibonacci ( 30 ) NEW_LINE return ( f % 10 == 0 ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 30 NEW_LINE if ( isMultipleOf10 ( n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT"}
{"text":"function which checks whether a number is a power of 2","code":"def powerof2 ( n ) : NEW_LINE"}
{"text":"base cases '1' is the only odd number which is a power of 2 ( 2 ^ 0 )","code":"if n == 1 : NEW_LINE INDENT return True NEW_LINE DEDENT"}
{"text":"all other odd numbers are not powers of 2","code":"elif n % 2 != 0 or n == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"recursive function call","code":"return powerof2 ( n \/ 2 ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"True","code":"INDENT print ( powerof2 ( 64 ) ) NEW_LINE DEDENT"}
{"text":"False","code":"INDENT print ( powerof2 ( 12 ) ) NEW_LINE DEDENT"}
{"text":"Function to check if x is power of 2","code":"def isPowerOfTwo ( x ) : NEW_LINE"}
{"text":"First x in the below expression is for the case when x is 0","code":"return ( x and ( not ( x & ( x - 1 ) ) ) ) NEW_LINE"}
{"text":"Driver code","code":"if ( isPowerOfTwo ( 31 ) ) : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT if ( isPowerOfTwo ( 64 ) ) : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT"}
{"text":"Function to check if x is power of 2","code":"def isPowerofTwo ( n ) : NEW_LINE INDENT if ( n == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( ( n & ( ~ ( n - 1 ) ) ) == n ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 0 NEW_LINE DEDENT"}
{"text":"Driver code","code":"if ( isPowerofTwo ( 30 ) ) : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT if ( isPowerofTwo ( 128 ) ) : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( ' No ' ) NEW_LINE DEDENT"}
{"text":"Function to find the nearest power of 2","code":"def nextPowerOf2 ( n ) : NEW_LINE"}
{"text":"The number","code":"p = 1 NEW_LINE"}
{"text":"If already a power of 2","code":"if ( n and not ( n & ( n - 1 ) ) ) : NEW_LINE INDENT return n NEW_LINE DEDENT"}
{"text":"Find the next power of 2","code":"while ( p < n ) : NEW_LINE INDENT p <<= 1 NEW_LINE DEDENT return p NEW_LINE"}
{"text":"Function to find the memory used","code":"def memoryUsed ( arr , n ) : NEW_LINE"}
{"text":"Sum of array","code":"sum = 0 NEW_LINE"}
{"text":"Traverse and find the sum of array","code":"for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT"}
{"text":"Function call to find the nearest power of 2","code":"nearest = nextPowerOf2 ( sum ) NEW_LINE return nearest NEW_LINE"}
{"text":"Driver Code","code":"arr = [ 1 , 2 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( memoryUsed ( arr , n ) ) NEW_LINE"}
{"text":"Python3 code to toggle k - th bit of n","code":"def toggleKthBit ( n , k ) : NEW_LINE INDENT return ( n ^ ( 1 << ( k - 1 ) ) ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"n = 5 NEW_LINE k = 1 NEW_LINE print ( toggleKthBit ( n , k ) ) NEW_LINE"}
{"text":"Python program to find smallest power of 2 greater than or equal to n","code":"def nextPowerOf2 ( n ) : NEW_LINE INDENT count = 0 NEW_LINE DEDENT"}
{"text":"First n in the below condition is for the case where n is 0","code":"if ( n and not ( n & ( n - 1 ) ) ) : NEW_LINE INDENT return n NEW_LINE DEDENT while ( n != 0 ) : NEW_LINE INDENT n >>= 1 NEW_LINE count += 1 NEW_LINE DEDENT return 1 << count NEW_LINE"}
{"text":"Driver Code","code":"n = 0 NEW_LINE print ( nextPowerOf2 ( n ) ) NEW_LINE"}
{"text":"Function to return the GCD of A and B","code":"def gcd ( A , B ) : NEW_LINE INDENT if ( B == 0 ) : NEW_LINE INDENT return A NEW_LINE DEDENT return gcd ( B , A % B ) NEW_LINE DEDENT"}
{"text":"Function to return the LCM of A and B","code":"def lcm ( A , B ) : NEW_LINE INDENT return ( A * B ) \/\/ gcd ( A , B ) NEW_LINE DEDENT"}
{"text":"Function to return the Kth element from the required set if it a multiple of A","code":"def checkA ( A , B , C , K ) : NEW_LINE"}
{"text":"Start and End for Binary Search","code":"start = 1 NEW_LINE end = K NEW_LINE"}
{"text":"If no answer found return - 1","code":"ans = - 1 NEW_LINE while ( start <= end ) : NEW_LINE INDENT mid = ( start + end ) \/\/ 2 NEW_LINE value = A * mid NEW_LINE divA = mid - 1 NEW_LINE divB = value \/\/ B - 1 if ( value % B == 0 ) else value \/\/ B NEW_LINE divC = value \/\/ C - 1 if ( value % C == 0 ) else value \/\/ C NEW_LINE divAB = value \/\/ lcm ( A , B ) - 1 if ( value % lcm ( A , B ) == 0 ) else value \/\/ lcm ( A , B ) NEW_LINE divBC = value \/\/ lcm ( C , B ) - 1 if ( value % lcm ( C , B ) == 0 ) else value \/\/ lcm ( C , B ) NEW_LINE divAC = value \/\/ lcm ( A , C ) - 1 if ( value % lcm ( A , C ) == 0 ) else value \/\/ lcm ( A , C ) NEW_LINE divABC = value \/\/ lcm ( A , lcm ( B , C ) ) - 1 if ( value % lcm ( A , lcm ( B , C ) ) == 0 ) else value \/\/ lcm ( A , lcm ( B , C ) ) NEW_LINE DEDENT"}
{"text":"Inclusion and Exclusion","code":"elem = divA + divB + divC - divAC - divBC - divAB + divABC NEW_LINE if ( elem == ( K - 1 ) ) : NEW_LINE INDENT ans = value NEW_LINE break NEW_LINE DEDENT"}
{"text":"Multiple should be smaller","code":"elif ( elem > ( K - 1 ) ) : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT"}
{"text":"Multiple should be bigger","code":"else : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Function to return the Kth element from the required set if it a multiple of B","code":"def checkB ( A , B , C , K ) : NEW_LINE"}
{"text":"Start and End for Binary Search","code":"start = 1 NEW_LINE end = K NEW_LINE"}
{"text":"If no answer found return - 1","code":"ans = - 1 NEW_LINE while ( start <= end ) : NEW_LINE INDENT mid = ( start + end ) \/\/ 2 NEW_LINE value = B * mid NEW_LINE divB = mid - 1 NEW_LINE if ( value % A == 0 ) : NEW_LINE INDENT divA = value \/\/ A - 1 NEW_LINE DEDENT else : value \/\/ A NEW_LINE if ( value % C == 0 ) : NEW_LINE INDENT divC = value \/\/ C - 1 NEW_LINE DEDENT else : value \/\/ C NEW_LINE if ( value % lcm ( A , B ) == 0 ) : NEW_LINE INDENT divAB = value \/\/ lcm ( A , B ) - 1 NEW_LINE DEDENT else : value \/\/ lcm ( A , B ) NEW_LINE if ( value % lcm ( C , B ) == 0 ) : NEW_LINE INDENT divBC = value \/\/ lcm ( C , B ) - 1 NEW_LINE DEDENT else : value \/\/ lcm ( C , B ) NEW_LINE if ( value % lcm ( A , C ) == 0 ) : NEW_LINE INDENT divAC = value \/\/ lcm ( A , C ) - 1 NEW_LINE DEDENT else : value \/\/ lcm ( A , C ) NEW_LINE if ( value % lcm ( A , lcm ( B , C ) ) == 0 ) : NEW_LINE INDENT divABC = value \/\/ lcm ( A , lcm ( B , C ) ) - 1 NEW_LINE DEDENT else : value \/\/ lcm ( A , lcm ( B , C ) ) NEW_LINE DEDENT"}
{"text":"Inclusion and Exclusion","code":"elem = divA + divB + divC - divAC - divBC - divAB + divABC NEW_LINE if ( elem == ( K - 1 ) ) : NEW_LINE INDENT ans = value NEW_LINE break NEW_LINE DEDENT"}
{"text":"Multiple should be smaller","code":"elif ( elem > ( K - 1 ) ) : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT"}
{"text":"Multiple should be bigger","code":"else : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Function to return the Kth element from the required set if it a multiple of C","code":"def checkC ( A , B , C , K ) : NEW_LINE"}
{"text":"Start and End for Binary Search","code":"start = 1 NEW_LINE end = K NEW_LINE"}
{"text":"If no answer found return - 1","code":"ans = - 1 NEW_LINE while ( start <= end ) : NEW_LINE INDENT mid = ( start + end ) \/\/ 2 NEW_LINE value = C * mid NEW_LINE divC = mid - 1 NEW_LINE if ( value % B == 0 ) : NEW_LINE INDENT divB = value \/\/ B - 1 NEW_LINE DEDENT else : value \/\/ B NEW_LINE if ( value % A == 0 ) : NEW_LINE INDENT divA = value \/\/ A - 1 NEW_LINE DEDENT else : value \/\/ A NEW_LINE if ( value % lcm ( A , B ) == 0 ) : NEW_LINE INDENT divAB = value \/\/ lcm ( A , B ) - 1 NEW_LINE DEDENT else : value \/\/ lcm ( A , B ) NEW_LINE if ( value % lcm ( C , B ) == 0 ) : NEW_LINE INDENT divBC = value \/\/ lcm ( C , B ) - 1 NEW_LINE DEDENT else : value \/\/ lcm ( C , B ) NEW_LINE if ( value % lcm ( A , C ) == 0 ) : NEW_LINE INDENT divAC = value \/\/ lcm ( A , C ) - 1 NEW_LINE DEDENT else : value \/\/ lcm ( A , C ) NEW_LINE if ( value % lcm ( A , lcm ( B , C ) ) == 0 ) : NEW_LINE INDENT divABC = value \/\/ lcm ( A , lcm ( B , C ) ) - 1 NEW_LINE DEDENT else : value \/\/ lcm ( A , lcm ( B , C ) ) NEW_LINE DEDENT"}
{"text":"Inclusion and Exclusion","code":"elem = divA + divB + divC - divAC - divBC - divAB + divABC NEW_LINE if ( elem == ( K - 1 ) ) : NEW_LINE INDENT ans = value NEW_LINE break NEW_LINE DEDENT"}
{"text":"Multiple should be smaller","code":"elif ( elem > ( K - 1 ) ) : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT"}
{"text":"Multiple should be bigger","code":"else : NEW_LINE INDENT start = mid + 1 NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Function to return the Kth element from the set of multiples of A , B and C","code":"def findKthMultiple ( A , B , C , K ) : NEW_LINE"}
{"text":"Apply binary search on the multiples of A","code":"res = checkA ( A , B , C , K ) NEW_LINE"}
{"text":"If the required element is not a multiple of A then the multiples of B and C need to be checked","code":"if ( res == - 1 ) : NEW_LINE INDENT res = checkB ( A , B , C , K ) NEW_LINE DEDENT"}
{"text":"If the required element is neither a multiple of A nor a multiple of B then the multiples of C need to be checked","code":"if ( res == - 1 ) : NEW_LINE INDENT res = checkC ( A , B , C , K ) NEW_LINE DEDENT return res NEW_LINE"}
{"text":"Driver code","code":"A = 2 NEW_LINE B = 4 NEW_LINE C = 5 NEW_LINE K = 5 NEW_LINE print ( findKthMultiple ( A , B , C , K ) ) NEW_LINE"}
{"text":"Function to sort the array","code":"def variationStalinsort ( arr ) : NEW_LINE INDENT j = 0 NEW_LINE while True : NEW_LINE INDENT moved = 0 NEW_LINE for i in range ( len ( arr ) - 1 - j ) : NEW_LINE INDENT if arr [ i ] > arr [ i + 1 ] : NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Iterator < Integer > index = arr . iterator ( ) ;","code":"arr . insert ( moved , arr . pop ( i + 1 ) ) NEW_LINE moved += 1 NEW_LINE j += 1 NEW_LINE if moved == 0 : NEW_LINE break NEW_LINE return arr NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 2 , 1 , 4 , 3 , 6 , 5 , 8 , 7 , 10 , 9 ] NEW_LINE DEDENT"}
{"text":"Function Call","code":"print ( variationStalinsort ( arr ) ) NEW_LINE"}
{"text":"Function to print array element","code":"def printArray ( arr , N ) : NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( N ) : NEW_LINE INDENT print ( arr [ i ] , end = ' \u2581 ' ) NEW_LINE DEDENT"}
{"text":"Function to sort the array in O ( N )","code":"def sortArray ( arr , N ) : NEW_LINE INDENT i = 0 NEW_LINE DEDENT"}
{"text":"Traverse the array","code":"while i < N : NEW_LINE"}
{"text":"If the current element is at correct position","code":"if arr [ i ] == i + 1 : NEW_LINE INDENT i += 1 NEW_LINE DEDENT"}
{"text":"Else swap the current element with it 's correct position","code":"else : NEW_LINE"}
{"text":"Swap the value of arr [ i ] and arr [ arr [ i ] - 1 ]","code":"temp1 = arr [ i ] NEW_LINE temp2 = arr [ arr [ i ] - 1 ] NEW_LINE arr [ i ] = temp2 NEW_LINE arr [ temp1 - 1 ] = temp1 NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 1 , 5 , 3 , 4 ] NEW_LINE N = len ( arr ) NEW_LINE DEDENT"}
{"text":"Function call to sort the array","code":"sortArray ( arr , N ) NEW_LINE"}
{"text":"Function call to print the array","code":"printArray ( arr , N ) NEW_LINE"}
{"text":"Function to find the maximum value","code":"def maximum ( value , weight , weight1 , flag , K , index , val_len ) : NEW_LINE"}
{"text":"base condition","code":"if ( index >= val_len ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"K elements already reduced to half of their weight","code":"if ( flag == K ) : NEW_LINE"}
{"text":"Dont include item","code":"skip = maximum ( value , weight , weight1 , flag , K , index + 1 , val_len ) NEW_LINE full = 0 NEW_LINE"}
{"text":"If weight of the item is less than or equal to the remaining weight then include the item","code":"if ( weight [ index ] <= weight1 ) : NEW_LINE INDENT full = value [ index ] + maximum ( value , weight , weight1 - weight [ index ] , flag , K , index + 1 , val_len ) NEW_LINE DEDENT"}
{"text":"Return the maximum of both cases","code":"return max ( full , skip ) NEW_LINE"}
{"text":"If the weight reduction to half is possible","code":"else : NEW_LINE"}
{"text":"Skip the item","code":"skip = maximum ( value , weight , weight1 , flag , K , index + 1 , val_len ) NEW_LINE full = 0 NEW_LINE half = 0 NEW_LINE"}
{"text":"Include item with full weight if weight of the item is less than the remaining weight","code":"if ( weight [ index ] <= weight1 ) : NEW_LINE INDENT full = value [ index ] + maximum ( value , weight , weight1 - weight [ index ] , flag , K , index + 1 , val_len ) NEW_LINE DEDENT"}
{"text":"Include item with half weight if half weight of the item is less than the remaining weight","code":"if ( weight [ index ] \/ 2 <= weight1 ) : NEW_LINE INDENT half = value [ index ] + maximum ( value , weight , weight1 - weight [ index ] \/ 2 , flag , K , index + 1 , val_len ) NEW_LINE DEDENT"}
{"text":"Return the maximum of all 3 cases","code":"return max ( full , max ( skip , half ) ) NEW_LINE"}
{"text":"Driver Code","code":"value = [ 17 , 20 , 10 , 15 ] NEW_LINE weight = [ 4 , 2 , 7 , 5 ] NEW_LINE K = 1 NEW_LINE W = 4 NEW_LINE val_len = len ( value ) NEW_LINE print ( maximum ( value , weight , W , 0 , K , 0 , val_len ) ) NEW_LINE"}
{"text":"Python3 program to find the size of the minimum dominating set of the tree","code":"N = 1005 NEW_LINE"}
{"text":"Definition of a tree node","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT"}
{"text":"Helper function that allocates a new node","code":"def newNode ( data ) : NEW_LINE INDENT node = Node ( data ) NEW_LINE return node NEW_LINE DEDENT"}
{"text":"DP array to precompute and store the results","code":"dp = [ [ [ - 1 for i in range ( 5 ) ] for j in range ( 5 ) ] for k in range ( N ) ] ; NEW_LINE"}
{"text":"minDominatingSettion to return the size of the minimum dominating set of the array","code":"def minDominatingSet ( root , covered , compulsory ) : NEW_LINE"}
{"text":"Base case","code":"if ( not root ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT"}
{"text":"Setting the compulsory value if needed","code":"if ( not root . left and not root . right and not covered ) : NEW_LINE INDENT compulsory = True ; NEW_LINE DEDENT"}
{"text":"Check if the answer is already computed","code":"if ( dp [ root . data ] [ covered ] [ compulsory ] != - 1 ) : NEW_LINE INDENT return dp [ root . data ] [ covered ] [ compulsory ] ; NEW_LINE DEDENT"}
{"text":"If it is compulsory to select the node","code":"if ( compulsory ) : NEW_LINE INDENT dp [ root . data ] [ covered ] [ compulsory ] = 1 + minDominatingSet ( root . left , 1 , 0 ) + minDominatingSet ( root . right , 1 , 0 ) ; NEW_LINE DEDENT"}
{"text":"Choose the node and set its children as covered","code":"return dp [ root . data ] [ covered ] [ compulsory ] NEW_LINE"}
{"text":"If it is covered","code":"if ( covered ) : NEW_LINE INDENT dp [ root . data ] [ covered ] [ compulsory ] = min ( 1 + minDominatingSet ( root . left , 1 , 0 ) + minDominatingSet ( root . right , 1 , 0 ) , minDominatingSet ( root . left , 0 , 0 ) + minDominatingSet ( root . right , 0 , 0 ) ) ; NEW_LINE return dp [ root . data ] [ covered ] [ compulsory ] NEW_LINE DEDENT"}
{"text":"If the current node is neither covered nor needs to be selected compulsorily","code":"ans = 1 + minDominatingSet ( root . left , 1 , 0 ) + minDominatingSet ( root . right , 1 , 0 ) ; NEW_LINE if ( root . left ) : NEW_LINE INDENT ans = min ( ans , minDominatingSet ( root . left , 0 , 1 ) + minDominatingSet ( root . right , 0 , 0 ) ) ; NEW_LINE DEDENT if ( root . right ) : NEW_LINE INDENT ans = min ( ans , minDominatingSet ( root . left , 0 , 0 ) + minDominatingSet ( root . right , 0 , 1 ) ) ; NEW_LINE DEDENT"}
{"text":"Store the result","code":"dp [ root . data ] [ covered ] [ compulsory ] = ans ; NEW_LINE return ans NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Constructing the tree","code":"root = newNode ( 1 ) ; NEW_LINE root . left = newNode ( 2 ) ; NEW_LINE root . left . left = newNode ( 3 ) ; NEW_LINE root . left . right = newNode ( 4 ) ; NEW_LINE root . left . left . left = newNode ( 5 ) ; NEW_LINE root . left . left . left . left = newNode ( 6 ) ; NEW_LINE root . left . left . left . right = newNode ( 7 ) ; NEW_LINE root . left . left . left . right . right = newNode ( 10 ) ; NEW_LINE root . left . left . left . left . left = newNode ( 8 ) ; NEW_LINE root . left . left . left . left . right = newNode ( 9 ) ; NEW_LINE print ( minDominatingSet ( root , 0 , 0 ) ) NEW_LINE"}
{"text":"Python3 implementation of above approach","code":"import numpy as np NEW_LINE maxSum = 100 NEW_LINE arrSize = 51 NEW_LINE"}
{"text":"variable to store states of dp","code":"dp = np . zeros ( ( arrSize , maxSum ) ) ; NEW_LINE visit = np . zeros ( ( arrSize , maxSum ) ) ; NEW_LINE"}
{"text":"To find the number of subsets with sum equal to 0. Since S can be negative , we will maxSum to it to make it positive","code":"def SubsetCnt ( i , s , arr , n ) : NEW_LINE"}
{"text":"Base cases","code":"if ( i == n ) : NEW_LINE INDENT if ( s == 0 ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT DEDENT"}
{"text":"Returns the value if a state is already solved","code":"if ( visit [ i ] [ s + arrSize ] ) : NEW_LINE INDENT return dp [ i ] [ s + arrSize ] ; NEW_LINE DEDENT"}
{"text":"If the state is not visited , then continue","code":"visit [ i ] [ s + arrSize ] = 1 ; NEW_LINE"}
{"text":"Recurrence relation","code":"dp [ i ] [ s + arrSize ] = ( SubsetCnt ( i + 1 , s + arr [ i ] , arr , n ) + SubsetCnt ( i + 1 , s , arr , n ) ) ; NEW_LINE"}
{"text":"Returning the value","code":"return dp [ i ] [ s + arrSize ] ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 2 , 2 , 2 , - 4 , - 4 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( SubsetCnt ( 0 , 0 , arr , n ) ) ; NEW_LINE DEDENT"}
{"text":"Function to print the N - th tetranacci number","code":"def printTetra ( n ) : NEW_LINE INDENT if ( n < 0 ) : NEW_LINE INDENT return ; NEW_LINE DEDENT DEDENT"}
{"text":"Initialize first four numbers to base cases","code":"first = 0 ; NEW_LINE second = 1 ; NEW_LINE third = 1 ; NEW_LINE fourth = 2 ; NEW_LINE"}
{"text":"declare a current variable","code":"curr = 0 ; NEW_LINE if ( n == 0 ) : NEW_LINE INDENT print ( first ) ; NEW_LINE DEDENT elif ( n == 1 or n == 2 ) : NEW_LINE INDENT print ( second ) ; NEW_LINE DEDENT elif ( n == 3 ) : NEW_LINE INDENT print ( fourth ) ; NEW_LINE DEDENT else : NEW_LINE"}
{"text":"Loop to add previous four numbers for each number starting from 4 and then assign first , second , third to second , third , fourth and curr to fourth respectively","code":"for i in range ( 4 , n + 1 ) : NEW_LINE INDENT curr = first + second + third + fourth ; NEW_LINE first = second ; NEW_LINE second = third ; NEW_LINE third = fourth ; NEW_LINE fourth = curr ; NEW_LINE DEDENT print ( curr ) ; NEW_LINE"}
{"text":"Driver code","code":"n = 10 ; NEW_LINE printTetra ( n ) ; NEW_LINE"}
{"text":"A recursive function used by countWays","code":"def countWays ( n ) : NEW_LINE INDENT res = [ 0 ] * ( n + 2 ) NEW_LINE res [ 0 ] = 1 NEW_LINE res [ 1 ] = 1 NEW_LINE res [ 2 ] = 2 NEW_LINE for i in range ( 3 , n + 1 ) : NEW_LINE INDENT res [ i ] = res [ i - 1 ] + res [ i - 2 ] + res [ i - 3 ] NEW_LINE DEDENT return res [ n ] NEW_LINE DEDENT"}
{"text":"Driver code","code":"n = 4 NEW_LINE print ( countWays ( n ) ) NEW_LINE"}
{"text":"A recursive function used by countWays","code":"def countWays ( n ) : NEW_LINE"}
{"text":"declaring three variables and holding the ways for first three stairs","code":"a = 1 NEW_LINE b = 2 NEW_LINE c = 4 NEW_LINE"}
{"text":"d = 0 fourth variable","code":"if ( n == 0 or n == 1 or n == 2 ) : NEW_LINE INDENT return n NEW_LINE DEDENT if ( n == 3 ) : NEW_LINE INDENT return c NEW_LINE DEDENT"}
{"text":"starting from 4 as already counted for 3 stairs","code":"for i in range ( 4 , n + 1 ) : NEW_LINE INDENT d = c + b + a NEW_LINE a = b NEW_LINE b = c NEW_LINE c = d NEW_LINE DEDENT return d NEW_LINE"}
{"text":"Driver program to test above functions","code":"n = 4 NEW_LINE print ( countWays ( n ) ) NEW_LINE"}
{"text":"initializing with 1 as sum 0 is always possible","code":"dp [ 0 ] = True NEW_LINE"}
{"text":"loop to go through every element of the elements array","code":"for ele in elements : NEW_LINE"}
{"text":"to change the value o all possible sum values to True","code":"for j in range ( target , ele - 1 , - 1 ) : NEW_LINE INDENT if dp [ j - ele ] : NEW_LINE INDENT dp [ j ] = True NEW_LINE DEDENT DEDENT"}
{"text":"If target is possible return True else False","code":"return dp [ target ] NEW_LINE"}
{"text":"Driver code","code":"arr = [ 6 , 2 , 5 ] NEW_LINE target = 7 NEW_LINE if isPossible ( arr , target ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT"}
{"text":"Returns maximum amount of task that can be done till day n","code":"def maxTasks ( high , low , n ) : NEW_LINE"}
{"text":"If n is less than equal to 0 , then no solution exists","code":"if ( n <= 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"Determines which task to choose on day n , then returns the maximum till that day","code":"return max ( high [ n - 1 ] + maxTasks ( high , low , ( n - 2 ) ) , low [ n - 1 ] + maxTasks ( high , low , ( n - 1 ) ) ) ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 5 ; NEW_LINE high = [ 3 , 6 , 8 , 7 , 6 ] NEW_LINE low = [ 1 , 5 , 4 , 5 , 3 ] NEW_LINE print ( maxTasks ( high , low , n ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 program for the above approach","code":"import math NEW_LINE"}
{"text":"Function to find the Kth character after X days","code":"def FindKthChar ( Str , K , X ) : NEW_LINE"}
{"text":"Variable to store the KthChar","code":"ans = ' \u2581 ' NEW_LINE Sum = 0 NEW_LINE"}
{"text":"Traverse the string","code":"for i in range ( len ( Str ) ) : NEW_LINE"}
{"text":"Convert char into int","code":"digit = ord ( Str [ i ] ) - 48 NEW_LINE"}
{"text":"Calculate characters","code":"Range = int ( math . pow ( digit , X ) ) NEW_LINE Sum += Range NEW_LINE"}
{"text":"If K is less than sum than ans = str [ i ]","code":"if ( K <= Sum ) : NEW_LINE INDENT ans = Str [ i ] NEW_LINE break NEW_LINE DEDENT"}
{"text":"Return answer","code":"return ans NEW_LINE"}
{"text":"Given Input","code":"Str = \"123\" NEW_LINE K = 9 NEW_LINE X = 3 NEW_LINE"}
{"text":"Function Call","code":"ans = FindKthChar ( Str , K , X ) NEW_LINE print ( ans ) NEW_LINE"}
{"text":"Function to get no of set bits in binary representation of positive integer n","code":"def countSetBits ( n ) : NEW_LINE INDENT count = 0 NEW_LINE while ( n ) : NEW_LINE INDENT count += n & 1 NEW_LINE n >>= 1 NEW_LINE DEDENT return count NEW_LINE DEDENT"}
{"text":"Function to return the count of valid pairs","code":"def totalPairs ( s1 , s2 ) : NEW_LINE INDENT count = 0 ; NEW_LINE arr1 = [ 0 ] * 7 ; arr2 = [ 0 ] * 7 ; NEW_LINE DEDENT"}
{"text":"Store frequency of number of set bits for s1","code":"for i in range ( len ( s1 ) ) : NEW_LINE INDENT set_bits = countSetBits ( ord ( s1 [ i ] ) ) NEW_LINE arr1 [ set_bits ] += 1 ; NEW_LINE DEDENT"}
{"text":"Store frequency of number of set bits for s2","code":"for i in range ( len ( s2 ) ) : NEW_LINE INDENT set_bits = countSetBits ( ord ( s2 [ i ] ) ) ; NEW_LINE arr2 [ set_bits ] += 1 ; NEW_LINE DEDENT"}
{"text":"Calculate total pairs","code":"for i in range ( 1 , 7 ) : NEW_LINE INDENT count += ( arr1 [ i ] * arr2 [ i ] ) ; NEW_LINE DEDENT"}
{"text":"Return the count of valid pairs","code":"return count ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s1 = \" geeks \" ; NEW_LINE s2 = \" forgeeks \" ; NEW_LINE print ( totalPairs ( s1 , s2 ) ) ; NEW_LINE DEDENT"}
{"text":"function to count substrings starting with character X and ending with character Y","code":"def countSubstr ( str , n , x , y ) : NEW_LINE"}
{"text":"to store total count of required substrings","code":"tot_count = 0 NEW_LINE"}
{"text":"to store count of character ' x ' up to the point the string ' str ' has been traversed so far","code":"count_x = 0 NEW_LINE"}
{"text":"traverse ' str ' form left to right","code":"for i in range ( n ) : NEW_LINE"}
{"text":"if true , increment 'count_x","code":"' NEW_LINE INDENT if str [ i ] == x : NEW_LINE INDENT count_x += 1 NEW_LINE DEDENT DEDENT"}
{"text":"if true accumulate ' count _ x ' to 'tot_count","code":"' NEW_LINE INDENT if str [ i ] == y : NEW_LINE INDENT tot_count += count_x NEW_LINE DEDENT DEDENT"}
{"text":"required count","code":"return tot_count NEW_LINE"}
{"text":"Driver Code","code":"str = ' abbcaceghcak ' NEW_LINE n = len ( str ) NEW_LINE x , y = ' a ' , ' c ' NEW_LINE print ( ' Count \u2581 = ' , countSubstr ( str , n , x , y ) ) NEW_LINE"}
{"text":"Python3 program to count words in a given string","code":"OUT = 0 NEW_LINE IN = 1 NEW_LINE"}
{"text":"Returns number of words in string","code":"def countWords ( string ) : NEW_LINE INDENT state = OUT NEW_LINE DEDENT"}
{"text":"word count","code":"wc = 0 NEW_LINE"}
{"text":"Scan all characters one by one","code":"for i in range ( len ( string ) ) : NEW_LINE"}
{"text":"If next character is a separator , set the state as OUT","code":"if ( string [ i ] == ' \u2581 ' or string [ i ] ==   ' ' \u2581 or \u2581 string [ i ] \u2581 = = \u2581 ' \t ' ) : NEW_LINE INDENT state = OUT NEW_LINE DEDENT"}
{"text":"If next character is not a word separator and state is OUT , then set the state as IN and increment word count","code":"elif state == OUT : NEW_LINE INDENT state = IN NEW_LINE wc += 1 NEW_LINE DEDENT"}
{"text":"Return the number of words","code":"return wc NEW_LINE"}
{"text":"Driver Code","code":"string =   \" One two three NEW_LINE INDENT four five   \" NEW_LINE DEDENT print ( \" No . \u2581 of \u2581 words \u2581 : \u2581 \" + str ( countWords ( string ) ) ) NEW_LINE"}
{"text":"Function to find nth Enneadecagonal number","code":"def nthEnneadecagonal ( n ) : NEW_LINE"}
{"text":"Formula to calculate nth Enneadecagonal number","code":"return ( 17 * n * n - 15 * n ) \/\/ 2 NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 NEW_LINE print ( n , \" th \u2581 Enneadecagonal \u2581 number \u2581 : \" , nthEnneadecagonal ( n ) ) NEW_LINE DEDENT"}
{"text":"Python3 Program to find the area of a circumscribed circle","code":"PI = 3.14159265 NEW_LINE"}
{"text":"Utility Function","code":"def areacircumscribed ( a ) : NEW_LINE INDENT return ( a * a * ( PI \/ 2 ) ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"a = 6 NEW_LINE print ( \" \u2581 Area \u2581 of \u2581 an \u2581 circumscribed \u2581 circle \u2581 is \u2581 : \" , round ( areacircumscribed ( a ) , 2 ) ) NEW_LINE"}
{"text":"Function to find the type of the item given out according to the given rules","code":"def itemType ( n ) : NEW_LINE"}
{"text":"Stores the count of item given out at each step","code":"count = 0 NEW_LINE day = 1 NEW_LINE"}
{"text":"Iterate to find the Nth day present is given out","code":"while ( count + day * ( day + 1 ) \/\/ 2 < n ) : NEW_LINE"}
{"text":"Find the number of presents given on day is day * ( day + 1 ) \/ 2","code":"count += day * ( day + 1 ) \/\/ 2 ; NEW_LINE day += 1 NEW_LINE type = day NEW_LINE while ( type > 0 ) : NEW_LINE"}
{"text":"Iterate over the type","code":"count += type NEW_LINE"}
{"text":"Return the resultant type","code":"if ( count >= n ) : NEW_LINE INDENT return type NEW_LINE DEDENT type -= 1 NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 10 NEW_LINE print ( itemType ( N ) ) NEW_LINE DEDENT"}
{"text":"Linked list Node","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data ; NEW_LINE self . next = next ; NEW_LINE DEDENT DEDENT"}
{"text":"function to Check Linked List is sorted in descending order or not","code":"def isSortedDesc ( head ) : NEW_LINE INDENT if ( head == None ) : NEW_LINE INDENT return True ; NEW_LINE DEDENT DEDENT"}
{"text":"Traverse the list till last Node and return False if a Node is smaller than or equal its next .","code":"while ( head . next != None ) : NEW_LINE INDENT t = head ; NEW_LINE if ( t . data <= t . next . data ) : NEW_LINE INDENT return False ; NEW_LINE DEDENT head = head . next NEW_LINE DEDENT return True ; NEW_LINE def newNode ( data ) : NEW_LINE temp = Node ( 0 ) ; NEW_LINE temp . next = None ; NEW_LINE temp . data = data ; NEW_LINE return temp ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT head = newNode ( 7 ) ; NEW_LINE head . next = newNode ( 5 ) ; NEW_LINE head . next . next = newNode ( 4 ) ; NEW_LINE head . next . next . next = newNode ( 3 ) ; NEW_LINE if ( isSortedDesc ( head ) ) : NEW_LINE INDENT print ( \" Yes \" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Function to find the maximum length continuos segment of character c after flipping at most K characters","code":"def maxLength ( str , n , c , k ) : NEW_LINE"}
{"text":"Stores the maximum length","code":"ans = - 1 NEW_LINE"}
{"text":"Stores the count of char 'c","code":"' NEW_LINE INDENT cnt = 0 NEW_LINE DEDENT"}
{"text":"Start of window","code":"left = 0 NEW_LINE for right in range ( 0 , n ) : NEW_LINE INDENT if ( str [ right ] == c ) : NEW_LINE INDENT cnt += 1 NEW_LINE DEDENT DEDENT"}
{"text":"Remove the extra ' c ' from left","code":"while ( cnt > k ) : NEW_LINE INDENT if ( str [ left ] == c ) : NEW_LINE INDENT cnt -= 1 NEW_LINE DEDENT DEDENT"}
{"text":"Increment the value of the left","code":"left += 1 NEW_LINE"}
{"text":"Update the resultant maximum length of character ch","code":"ans = max ( ans , right - left + 1 ) NEW_LINE return ans NEW_LINE"}
{"text":"Function to find the maximum length of consecutive 0 s or 1 s by flipping at most K characters of the string","code":"def maxConsecutiveSegment ( S , K ) : NEW_LINE INDENT N = len ( S ) NEW_LINE DEDENT"}
{"text":"Print the maximum of the maximum length of 0 s or 1 s","code":"return max ( maxLength ( S , N , '0' , K ) , maxLength ( S , N , '1' , K ) ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT S = \"1001\" NEW_LINE K = 1 NEW_LINE print ( maxConsecutiveSegment ( S , K ) ) NEW_LINE DEDENT"}
{"text":"Function to find minimum count of { 1 , 2 , 5 } valued coins required to make a change of all values in the range [ 1 , N ]","code":"def find ( N ) : NEW_LINE"}
{"text":"Number of 5 valueds coins required","code":"F = int ( ( N - 4 ) \/ 5 ) NEW_LINE"}
{"text":"Number of 1 valued coins required","code":"if ( ( N - 5 * F ) % 2 ) == 0 : NEW_LINE INDENT O = 2 NEW_LINE DEDENT else : NEW_LINE INDENT O = 1 NEW_LINE DEDENT"}
{"text":"Number of 2 valued coins required","code":"T = ( N - 5 * F - O ) \/\/ 2 NEW_LINE print ( \" Count \u2581 of \u2581 5 \u2581 valueds \u2581 coins : \u2581 \" , F ) NEW_LINE print ( \" Count \u2581 of \u2581 2 \u2581 valueds \u2581 coins : \u2581 \" , T ) NEW_LINE print ( \" Count \u2581 of \u2581 1 \u2581 valueds \u2581 coins : \u2581 \" , O ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 8 NEW_LINE find ( N ) NEW_LINE DEDENT"}
{"text":"Function to maximize count of 0 and 10 by replacing character ' ? ' to '0' or '1","code":"' NEW_LINE def findMaxOccurence ( str , N ) : NEW_LINE"}
{"text":"Traverse the given String","code":"for i in range ( N ) : NEW_LINE"}
{"text":"If current character is '?","code":"' NEW_LINE INDENT if ( str [ i ] == ' ? ' ) : NEW_LINE DEDENT"}
{"text":"Given String","code":"str = list ( \"10?0?11\" ) NEW_LINE N = len ( str ) NEW_LINE findMaxOccurence ( str , N ) NEW_LINE"}
{"text":"Function checks if a given is valid or not and prints the output","code":"def checkInfinite ( s ) : NEW_LINE"}
{"text":"Boolean flag variable to mark if given is valid","code":"flag = 1 NEW_LINE N = len ( s ) NEW_LINE"}
{"text":"Traverse the given string","code":"for i in range ( N - 1 ) : NEW_LINE"}
{"text":"If adjacent character differ by 1","code":"if ( s [ i ] == chr ( ord ( s [ i + 1 ] ) + 1 ) ) : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"If character ' a ' is followed by 4","code":"elif ( s [ i ] == ' a ' and s [ i + 1 ] == ' z ' ) : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"Else flip the flag and break from the loop","code":"else : NEW_LINE INDENT flag = 0 NEW_LINE break NEW_LINE DEDENT"}
{"text":"Output according to flag variable","code":"if ( flag == 0 ) : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given string","code":"s = \" ecbaz \" NEW_LINE"}
{"text":"Function Call","code":"checkInfinite ( s ) NEW_LINE"}
{"text":"Function to find the minimum number of changes of lane required","code":"def minChangeInLane ( barrier , n ) : NEW_LINE INDENT dp = [ 1 , 0 , 1 ] NEW_LINE for j in range ( n ) : NEW_LINE DEDENT"}
{"text":"If there is a barrier , then add very large value","code":"val = barrier [ j ] NEW_LINE if ( val > 0 ) : NEW_LINE INDENT dp [ val - 1 ] = 1000000 NEW_LINE DEDENT for i in range ( 3 ) : NEW_LINE"}
{"text":"Add the minimum value to move forword with or without crossing barrier","code":"if ( val != i + 1 ) : NEW_LINE INDENT dp [ i ] = min ( dp [ i ] , min ( dp [ ( i + 1 ) % 3 ] , dp [ ( i + 2 ) % 3 ] ) + 1 ) NEW_LINE DEDENT"}
{"text":"Return the minimum value of dp [ 0 ] , dp [ 1 ] and dp [ 2 ]","code":"return min ( dp [ 0 ] , min ( dp [ 1 ] , dp [ 2 ] ) ) NEW_LINE"}
{"text":"Driver Code","code":"barrier = [ 0 , 1 , 2 , 3 , 0 ] NEW_LINE N = len ( barrier ) NEW_LINE print ( minChangeInLane ( barrier , N ) ) NEW_LINE"}
{"text":"Function to count number of ways to get given sum groups","code":"def numWays ( ratings , queries , n , k ) : NEW_LINE"}
{"text":"Initialise dp array","code":"dp = [ [ 0 for i in range ( 10002 ) ] for j in range ( n ) ] ; NEW_LINE"}
{"text":"Mark all 1 st row values as 1 since the mat [ 0 ] [ i ] is all possible sums in first row","code":"for i in range ( k ) : NEW_LINE INDENT dp [ 0 ] [ ratings [ 0 ] [ i ] ] += 1 ; NEW_LINE DEDENT"}
{"text":"Fix the ith row","code":"for i in range ( 1 , n ) : NEW_LINE"}
{"text":"Fix the sum","code":"for sum in range ( 10001 ) : NEW_LINE"}
{"text":"Iterate through all values of ith row","code":"for j in range ( k ) : NEW_LINE"}
{"text":"If sum can be obtained","code":"if ( sum >= ratings [ i ] [ j ] ) : NEW_LINE INDENT dp [ i ] [ sum ] += dp [ i - 1 ] [ sum - ratings [ i ] [ j ] ] ; NEW_LINE DEDENT"}
{"text":"Find the prefix sum of last row","code":"for sum in range ( 1 , 10001 ) : NEW_LINE INDENT dp [ n - 1 ] [ sum ] += dp [ n - 1 ] [ sum - 1 ] ; NEW_LINE DEDENT"}
{"text":"Traverse each query","code":"for q in range ( len ( queries ) ) : NEW_LINE INDENT a = queries [ q ] [ 0 ] ; NEW_LINE b = queries [ q ] [ 1 ] ; NEW_LINE DEDENT"}
{"text":"No of ways to form groups","code":"print ( dp [ n - 1 ] [ b ] - dp [ n - 1 ] [ a - 1 ] , end = \" \u2581 \" ) ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given N batches and K students","code":"N = 2 ; NEW_LINE K = 3 ; NEW_LINE"}
{"text":"Given ratings","code":"ratings = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ; NEW_LINE queries = [ [ 6 , 6 ] , [ 1 , 6 ] ] ; NEW_LINE"}
{"text":"Function Call","code":"numWays ( ratings , queries , N , K ) ; NEW_LINE"}
{"text":"Function to count permutations with K inversions","code":"def numberOfPermWithKInversion ( N , K ) : NEW_LINE"}
{"text":"Store number of permutations with K inversions","code":"dp = [ [ 0 ] * ( K + 1 ) ] * 2 NEW_LINE mod = 1000000007 NEW_LINE for i in range ( 1 , N + 1 ) : NEW_LINE INDENT for j in range ( 0 , K + 1 ) : NEW_LINE DEDENT"}
{"text":"If N = 1 only 1 permutation with no inversion","code":"if ( i == 1 ) : NEW_LINE INDENT dp [ i % 2 ] [ j ] = 1 if ( j == 0 ) else 0 NEW_LINE DEDENT"}
{"text":"For K = 0 only 1 permutation with no inversion","code":"elif ( j == 0 ) : NEW_LINE INDENT dp [ i % 2 ] [ j ] = 1 NEW_LINE DEDENT"}
{"text":"Otherwise Update each dp state as per the reccurrance relation formed","code":"else : NEW_LINE INDENT var = ( 0 if ( max ( j - ( i - 1 ) , 0 ) == 0 ) else dp [ 1 - i % 2 ] [ max ( j - ( i - 1 ) , 0 ) - 1 ] ) NEW_LINE dp [ i % 2 ] [ j ] = ( ( dp [ i % 2 ] [ j - 1 ] % mod + ( dp [ 1 - i % 2 ] [ j ] - ( var ) + mod ) % mod ) % mod ) NEW_LINE DEDENT"}
{"text":"Print final count","code":"print ( dp [ N % 2 ] [ K ] ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given N and K","code":"N = 3 NEW_LINE K = 2 NEW_LINE"}
{"text":"Function Call","code":"numberOfPermWithKInversion ( N , K ) NEW_LINE"}
{"text":"k is current index and col is previous color .","code":"def MaxProfit ( treasure , color , n , k , col , A , B ) : NEW_LINE INDENT sum = 0 NEW_LINE DEDENT"}
{"text":"base case","code":"if k == n : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"check if color of this city is equal to prev visited city","code":"if col == color [ k ] : NEW_LINE INDENT sum += max ( A * treasure [ k ] + MaxProfit ( treasure , color , n , k + 1 , color [ k ] , A , B ) , MaxProfit ( treasure , color , n , k + 1 , col , A , B ) ) NEW_LINE DEDENT else : NEW_LINE INDENT sum += max ( B * treasure [ k ] + MaxProfit ( treasure , color , n , k + 1 , color [ k ] , A , B ) , MaxProfit ( treasure , color , n , k + 1 , col , A , B ) ) NEW_LINE DEDENT"}
{"text":"return max of both options","code":"return sum NEW_LINE"}
{"text":"Driver Code","code":"A = - 5 NEW_LINE B = 7 NEW_LINE treasure = [ 4 , 8 , 2 , 9 ] NEW_LINE color = [ 2 , 2 , 6 , 2 ] NEW_LINE n = len ( color ) NEW_LINE"}
{"text":"Initially begin with color 0","code":"print ( MaxProfit ( treasure , color , n , 0 , 0 , A , B ) ) NEW_LINE"}
{"text":"Function to return the N - th tetranacci number","code":"def printTetraRec ( n ) : NEW_LINE"}
{"text":"base cases","code":"if ( n == 0 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT"}
{"text":"base cases","code":"if ( n == 1 or n == 2 ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT"}
{"text":"base cases","code":"if ( n == 3 ) : NEW_LINE INDENT return 2 ; NEW_LINE DEDENT else : NEW_LINE INDENT return ( printTetraRec ( n - 1 ) + printTetraRec ( n - 2 ) + printTetraRec ( n - 3 ) + printTetraRec ( n - 4 ) ) ; NEW_LINE DEDENT"}
{"text":"function to print the nth tetranacci number","code":"def printTetra ( n ) : NEW_LINE INDENT print ( printTetraRec ( n ) , end = \" \u2581 \" ) ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"n = 10 ; NEW_LINE printTetra ( n ) ; NEW_LINE"}
{"text":"to store sum of every combination","code":"def Combination ( a , combi , n , r , depth , index ) : NEW_LINE INDENT global Sum NEW_LINE DEDENT"}
{"text":"if we have reached sufficient depth","code":"if index == r : NEW_LINE"}
{"text":"find the product of combination","code":"product = 1 NEW_LINE for i in range ( r ) : NEW_LINE INDENT product = product * combi [ i ] NEW_LINE DEDENT"}
{"text":"add the product into sum","code":"Sum += product NEW_LINE return NEW_LINE"}
{"text":"recursion to produce different combination","code":"for i in range ( depth , n ) : NEW_LINE INDENT combi [ index ] = a [ i ] NEW_LINE Combination ( a , combi , n , r , i + 1 , index + 1 ) NEW_LINE DEDENT"}
{"text":"function to print sum of products of all combination taken 1 - N at a time","code":"def allCombination ( a , n ) : NEW_LINE INDENT global Sum NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE DEDENT"}
{"text":"creating temporary array for storing combination","code":"combi = [ 0 ] * i NEW_LINE"}
{"text":"call combination with r = i for combination taken i at a time","code":"Combination ( a , combi , n , i , 0 , 0 ) NEW_LINE"}
{"text":"displaying sum","code":"print ( \" f ( \" , i , \" ) \u2581 - - > \u2581 \" , Sum ) NEW_LINE Sum = 0 NEW_LINE"}
{"text":"Driver Code","code":"Sum = 0 NEW_LINE n = 5 NEW_LINE a = [ 0 ] * n NEW_LINE"}
{"text":"storing numbers from 1 - N in array","code":"for i in range ( n ) : NEW_LINE INDENT a [ i ] = i + 1 NEW_LINE DEDENT"}
{"text":"calling allCombination","code":"allCombination ( a , n ) NEW_LINE"}
{"text":"Returns maximum amount of task that can be done till day n","code":"def maxTasks ( high , low , n ) : NEW_LINE"}
{"text":"An array task_dp that stores the maximum task done","code":"task_dp = [ 0 ] * ( n + 1 ) ; NEW_LINE"}
{"text":"If n = 0 , no solution exists","code":"task_dp [ 0 ] = 0 ; NEW_LINE"}
{"text":"If n = 1 , high effort task on that day will be the solution","code":"task_dp [ 1 ] = high [ 0 ] ; NEW_LINE"}
{"text":"Fill the entire array determining which task to choose on day i","code":"for i in range ( 2 , n + 1 ) : NEW_LINE INDENT task_dp [ i ] = max ( high [ i - 1 ] + task_dp [ i - 2 ] , low [ i - 1 ] + task_dp [ i - 1 ] ) ; NEW_LINE DEDENT return task_dp [ n ] ; NEW_LINE"}
{"text":"Driver code","code":"n = 5 ; NEW_LINE high = [ 3 , 6 , 8 , 7 , 6 ] ; NEW_LINE low = [ 1 , 5 , 4 , 5 , 3 ] ; NEW_LINE print ( maxTasks ( high , low , n ) ) ; NEW_LINE"}
{"text":"Driver Code","code":"n = 10 NEW_LINE k = 2 NEW_LINE print ( \" Value \u2581 of \u2581 P ( \" , n , \" , \u2581 \" , k , \" ) \u2581 is \u2581 \" , permutationCoeff ( n , k ) ) NEW_LINE"}
{"text":"Returns true if arr [ ] can be partitioned in two subsets of equal sum , otherwise false","code":"def findPartition ( arr , n ) : NEW_LINE INDENT sum = 0 NEW_LINE i , j = 0 , 0 NEW_LINE DEDENT"}
{"text":"calculate sum of all elements","code":"for i in range ( n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT if sum % 2 != 0 : NEW_LINE INDENT return false NEW_LINE DEDENT part = [ [ True for i in range ( n + 1 ) ] for j in range ( sum \/\/ 2 + 1 ) ] NEW_LINE"}
{"text":"initialize top row as true","code":"for i in range ( 0 , n + 1 ) : NEW_LINE INDENT part [ 0 ] [ i ] = True NEW_LINE DEDENT"}
{"text":"initialize leftmost column , except part [ 0 ] [ 0 ] , as 0","code":"for i in range ( 1 , sum \/\/ 2 + 1 ) : NEW_LINE INDENT part [ i ] [ 0 ] = False NEW_LINE DEDENT"}
{"text":"fill the partition table in bottom up manner","code":"for i in range ( 1 , sum \/\/ 2 + 1 ) : NEW_LINE INDENT for j in range ( 1 , n + 1 ) : NEW_LINE INDENT part [ i ] [ j ] = part [ i ] [ j - 1 ] NEW_LINE if i >= arr [ j - 1 ] : NEW_LINE INDENT part [ i ] [ j ] = ( part [ i ] [ j ] or part [ i - arr [ j - 1 ] ] [ j - 1 ] ) NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"uncomment this part to print table","code":"return part [ sum \/\/ 2 ] [ n ] NEW_LINE"}
{"text":"Driver Code","code":"arr = [ 3 , 1 , 1 , 2 , 2 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE"}
{"text":"Function call","code":"if findPartition ( arr , n ) == True : NEW_LINE INDENT print ( \" Can \u2581 be \u2581 divided \u2581 into \u2581 two \" , \" subsets \u2581 of \u2581 equal \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Can \u2581 not \u2581 be \u2581 divided \u2581 into \u2581 \" , \" two \u2581 subsets \u2581 of \u2581 equal \u2581 sum \" ) NEW_LINE DEDENT"}
{"text":"Function to find the minimum operations required to get the given string after appending m or n characters from the end to the front of the string in each operation","code":"def minimumOperations ( orig_str , m , n ) : NEW_LINE"}
{"text":"Store the original string","code":"orig = orig_str NEW_LINE"}
{"text":"Stores the count of operations","code":"turn = 1 NEW_LINE j = 1 NEW_LINE"}
{"text":"Traverse the string","code":"for i in orig_str : NEW_LINE"}
{"text":"Cut m letters from end","code":"m_cut = orig_str [ - m : ] NEW_LINE orig_str = orig_str . replace ( ' \u2581 ' , ' ' ) [ : - m ] NEW_LINE"}
{"text":"Add cut m letters to beginning","code":"orig_str = m_cut + orig_str NEW_LINE"}
{"text":"Update j","code":"j = j + 1 NEW_LINE"}
{"text":"Check if strings are the same","code":"if orig != orig_str : NEW_LINE INDENT turn = turn + 1 NEW_LINE DEDENT"}
{"text":"Cut n letters from end","code":"n_cut = orig_str [ - n : ] NEW_LINE orig_str = orig_str . replace ( ' \u2581 ' , ' ' ) [ : - n ] NEW_LINE"}
{"text":"Add cut n letters to beginning","code":"orig_str = n_cut + orig_str NEW_LINE"}
{"text":"Update j","code":"j = j + 1 NEW_LINE"}
{"text":"Check if strings are the same","code":"if orig == orig_str : NEW_LINE INDENT break NEW_LINE DEDENT"}
{"text":"Update the turn","code":"turn = turn + 1 NEW_LINE print ( turn ) NEW_LINE"}
{"text":"Given string S","code":"S = \" GeeksforGeeks \" NEW_LINE X = 5 NEW_LINE Y = 3 NEW_LINE"}
{"text":"Function Call","code":"minimumOperations ( S , X , Y ) NEW_LINE"}
{"text":"Prints occurrences of txt [ ] in pat [ ]","code":"def KMPSearch ( pat , txt ) : NEW_LINE INDENT M = len ( pat ) NEW_LINE N = len ( txt ) NEW_LINE DEDENT"}
{"text":"Create lps [ ] that will hold the longest prefix suffix values for pattern","code":"lps = [ 0 ] * M NEW_LINE"}
{"text":"Preprocess the pattern ( calculate lps [ ] array )","code":"computeLPSArray ( pat , M , lps ) NEW_LINE"}
{"text":"Index for txt [ ] , index for pat [ ]","code":"i = 0 NEW_LINE j = 0 NEW_LINE while i < N : NEW_LINE INDENT if pat [ j ] == txt [ i ] : NEW_LINE INDENT j += 1 NEW_LINE i += 1 NEW_LINE DEDENT if j == M : NEW_LINE INDENT return i - j NEW_LINE j = lps [ j - 1 ] NEW_LINE DEDENT DEDENT"}
{"text":"Mismatch after j matches","code":"elif i < N and pat [ j ] != txt [ i ] : NEW_LINE"}
{"text":"Do not match lps [ 0. . lps [ j - 1 ] ] characters , they will match anyway","code":"if j != 0 : NEW_LINE INDENT j = lps [ j - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT i = i + 1 NEW_LINE DEDENT"}
{"text":"Fills lps [ ] for given pattern pat [ 0. . M - 1 ]","code":"def computeLPSArray ( pat , M , lps ) : NEW_LINE"}
{"text":"Length of the previous longest prefix suffix","code":"_len = 0 NEW_LINE"}
{"text":"lps [ 0 ] is always 0","code":"lps [ 0 ] = 0 NEW_LINE"}
{"text":"The loop calculates lps [ i ] for i = 1 to M - 1","code":"i = 1 NEW_LINE while i < M : NEW_LINE INDENT if pat [ i ] == pat [ _len ] : NEW_LINE INDENT _len += 1 NEW_LINE lps [ i ] = _len NEW_LINE i += 1 NEW_LINE DEDENT DEDENT"}
{"text":"( pat [ i ] != pat [ _len ] )","code":"else : NEW_LINE"}
{"text":"This is tricky . Consider the example . AAACAAAA and i = 7. The idea is similar to search step .","code":"if _len != 0 : NEW_LINE INDENT _len = lps [ _len - 1 ] NEW_LINE DEDENT else : NEW_LINE INDENT lps [ i ] = 0 NEW_LINE i += 1 NEW_LINE DEDENT"}
{"text":"Returns count of rotations to get the same string back","code":"def countRotations ( s ) : NEW_LINE"}
{"text":"Form a string excluding the first character and concatenating the string at the end","code":"s1 = s [ 1 : len ( s ) ] + s NEW_LINE"}
{"text":"Convert the string to character array","code":"pat = s [ : ] NEW_LINE text = s1 [ : ] NEW_LINE"}
{"text":"Use the KMP search algorithm to find it in O ( N ) time","code":"return 1 + KMPSearch ( pat , text ) NEW_LINE"}
{"text":"Driver code","code":"s1 = \" geeks \" NEW_LINE print ( countRotations ( s1 ) ) NEW_LINE"}
{"text":"This function is for the starting state ( zeroth ) of DFA","code":"def start ( c ) : NEW_LINE"}
{"text":"On receiving ' T ' or ' t ' goto first state ( 1 )","code":"if ( c == ' t ' or c == ' T ' ) : NEW_LINE INDENT dfa = 1 NEW_LINE DEDENT"}
{"text":"This function is for the first state of DFA","code":"def state1 ( c ) : NEW_LINE"}
{"text":"On receiving ' T ' or ' t ' goto first state ( 1 )","code":"if ( c == ' t ' or c == ' T ' ) : NEW_LINE INDENT dfa = 1 NEW_LINE DEDENT"}
{"text":"On receiving ' H ' or ' h ' goto second state ( 2 )","code":"elif ( c == ' h ' or c == ' H ' ) : NEW_LINE INDENT dfa = 2 NEW_LINE DEDENT"}
{"text":"else goto starting state ( 0 )","code":"else : NEW_LINE INDENT dfa = 0 NEW_LINE DEDENT"}
{"text":"This function is for the second state of DFA","code":"def state2 ( c ) : NEW_LINE"}
{"text":"On receiving ' E ' or ' e ' goto third state ( 3 ) else goto starting state ( 0 )","code":"if ( c == ' e ' or c == ' E ' ) : NEW_LINE INDENT dfa = 3 NEW_LINE DEDENT else : NEW_LINE INDENT dfa = 0 NEW_LINE DEDENT"}
{"text":"This function is for the third state of DFA","code":"def state3 ( c ) : NEW_LINE"}
{"text":"On receiving ' T ' or ' t ' goto first state ( 1 ) else goto starting state ( 0 )","code":"if ( c == ' t ' or c == ' T ' ) : NEW_LINE INDENT dfa = 1 NEW_LINE DEDENT else : NEW_LINE INDENT dfa = 0 NEW_LINE DEDENT def isAccepted ( string ) : NEW_LINE"}
{"text":"store length of stringing","code":"length = len ( string ) NEW_LINE for i in range ( length ) : NEW_LINE INDENT if ( dfa == 0 ) : NEW_LINE INDENT start ( string [ i ] ) NEW_LINE DEDENT elif ( dfa == 1 ) : NEW_LINE INDENT state1 ( string [ i ] ) NEW_LINE DEDENT elif ( dfa == 2 ) : NEW_LINE INDENT state2 ( string [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT state3 ( string [ i ] ) NEW_LINE DEDENT DEDENT return ( dfa != 3 ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT string = \" forTHEgeeks \" NEW_LINE DEDENT dfa = 0 NEW_LINE INDENT if isAccepted ( string ) : NEW_LINE INDENT print ( \" ACCEPTED \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NOT \u2581 ACCEPTED \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Python3 implementation of the above approach .","code":"parent = [ 0 ] * 256 NEW_LINE"}
{"text":"Function for find from Disjoset algorithm","code":"def find ( x ) : NEW_LINE INDENT if ( x != parent [ x ] ) : NEW_LINE INDENT parent [ x ] = find ( parent [ x ] ) NEW_LINE return parent [ x ] NEW_LINE DEDENT return x NEW_LINE DEDENT"}
{"text":"Function for the union from Disjoset algorithm","code":"def join ( x , y ) : NEW_LINE INDENT px = find ( x ) NEW_LINE pz = find ( y ) NEW_LINE if ( px != pz ) : NEW_LINE INDENT parent [ pz ] = px NEW_LINE DEDENT DEDENT"}
{"text":"Function to check if one string can be converted to another .","code":"def convertible ( s1 , s2 ) : NEW_LINE"}
{"text":"All the characters are checked whether it 's either not replaced or replaced  by a similar character using a map.","code":"mp = dict ( ) NEW_LINE for i in range ( len ( s1 ) ) : NEW_LINE INDENT if ( s1 [ i ] in mp ) : NEW_LINE INDENT mp [ s1 [ i ] ] = s2 [ i ] NEW_LINE DEDENT else : NEW_LINE INDENT if s1 [ i ] in mp and mp [ s1 [ i ] ] != s2 [ i ] : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"To check if there are cycles . If yes , then they are not convertible . Else , they are convertible .","code":"for it in mp : NEW_LINE INDENT if ( it == mp [ it ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT if ( find ( ord ( it ) ) == find ( ord ( it ) ) ) : NEW_LINE INDENT return False NEW_LINE DEDENT else : NEW_LINE INDENT join ( ord ( it ) , ord ( it ) ) NEW_LINE DEDENT DEDENT DEDENT return True NEW_LINE"}
{"text":"Function to initialize parent array for union and find algorithm .","code":"def initialize ( ) : NEW_LINE INDENT for i in range ( 256 ) : NEW_LINE INDENT parent [ i ] = i NEW_LINE DEDENT DEDENT"}
{"text":"Driver code","code":"s1 = \" abbcaa \" NEW_LINE s2 = \" bccdbb \" NEW_LINE initialize ( ) NEW_LINE if ( convertible ( s1 , s2 ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Python 3 implementation of the approach","code":"SIZE = 26 NEW_LINE from math import sqrt NEW_LINE"}
{"text":"Function to create Sieve to check primes","code":"def SieveOfEratosthenes ( prime , p_size ) : NEW_LINE"}
{"text":"false here indicates that it is not prime","code":"prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , int ( sqrt ( p_size ) ) , 1 ) : NEW_LINE"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] ) : NEW_LINE"}
{"text":"Update all multiples of p , set them to non - prime","code":"for i in range ( p * 2 , p_size , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT"}
{"text":"Function to print the prime frequency characters in the order of their occurrence","code":"def printChar ( str , n ) : NEW_LINE INDENT prime = [ True for i in range ( n + 1 ) ] NEW_LINE DEDENT"}
{"text":"Function to create Sieve to check primes","code":"SieveOfEratosthenes ( prime , len ( str ) + 1 ) NEW_LINE"}
{"text":"To store the frequency of each of the character of the string","code":"freq = [ 0 for i in range ( SIZE ) ] NEW_LINE"}
{"text":"Update the frequency of each character","code":"for i in range ( n ) : NEW_LINE INDENT freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT"}
{"text":"Traverse str character by character","code":"for i in range ( n ) : NEW_LINE"}
{"text":"If frequency of current character is prime","code":"if ( prime [ freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] ] ) : NEW_LINE INDENT print ( str [ i ] , end = \" \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = \" geeksforgeeks \" NEW_LINE n = len ( str ) NEW_LINE printChar ( str , n ) NEW_LINE DEDENT"}
{"text":"Python code for the above approach","code":"from collections import Counter NEW_LINE import math NEW_LINE"}
{"text":"Function to check primes","code":"def prime ( n ) : NEW_LINE INDENT if n <= 1 : NEW_LINE INDENT return False NEW_LINE DEDENT max_div = math . floor ( math . sqrt ( n ) ) NEW_LINE for i in range ( 2 , 1 + max_div ) : NEW_LINE INDENT if n % i == 0 : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT def checkString ( s ) : NEW_LINE"}
{"text":"Counting the frequency of all character using Counter function","code":"freq = Counter ( s ) NEW_LINE"}
{"text":"Traversing string","code":"for i in range ( len ( s ) ) : NEW_LINE INDENT if prime ( freq [ s [ i ] ] ) : NEW_LINE INDENT print ( s [ i ] , end = \" \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver code","code":"s = \" geeksforgeeks \" NEW_LINE"}
{"text":"passing string to checkString function","code":"checkString ( s ) NEW_LINE"}
{"text":"Python3 implementation of the approach","code":"SIZE = 26 NEW_LINE"}
{"text":"Function to print the even frequency characters in the order of their occurrence","code":"def printChar ( string , n ) : NEW_LINE"}
{"text":"To store the frequency of each of the character of the stringing Initialize all elements of freq [ ] to 0","code":"freq = [ 0 ] * SIZE NEW_LINE"}
{"text":"Update the frequency of each character","code":"for i in range ( 0 , n ) : NEW_LINE INDENT freq [ ord ( string [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT"}
{"text":"Traverse string character by character","code":"for i in range ( 0 , n ) : NEW_LINE"}
{"text":"If frequency of current character is even","code":"if ( freq [ ord ( string [ i ] ) - ord ( ' a ' ) ] % 2 == 0 ) : NEW_LINE INDENT print ( string [ i ] , end = \" \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT string = \" geeksforgeeks \" NEW_LINE n = len ( string ) NEW_LINE printChar ( string , n ) NEW_LINE DEDENT"}
{"text":"Function to check alphanumeric equality of both strings","code":"def CompareAlphanumeric ( str1 , str2 ) : NEW_LINE"}
{"text":"variable declaration","code":"i = 0 NEW_LINE j = 0 NEW_LINE"}
{"text":"Length of first string","code":"len1 = len ( str1 ) NEW_LINE"}
{"text":"Length of second string","code":"len2 = len ( str2 ) NEW_LINE"}
{"text":"To check each and every character of both string","code":"while ( i <= len1 and j <= len2 ) : NEW_LINE"}
{"text":"If the current character of the first string is not an alphanumeric character , increase the pointer i","code":"while ( i < len1 and ( ( ( str1 [ i ] >= ' a ' and str1 [ i ] <= ' z ' ) or ( str1 [ i ] >= ' A ' and str1 [ i ] <= ' Z ' ) or ( str1 [ i ] >= '0' and str1 [ i ] <= '9' ) ) == False ) ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT"}
{"text":"If the current character of the second string is not an alphanumeric character , increase the pointer j","code":"while ( j < len2 and ( ( ( str2 [ j ] >= ' a ' and str2 [ j ] <= ' z ' ) or ( str2 [ j ] >= ' A ' and str2 [ j ] <= ' Z ' ) or ( str2 [ j ] >= '0' and str2 [ j ] <= '9' ) ) == False ) ) : NEW_LINE INDENT j += 1 NEW_LINE DEDENT"}
{"text":"if all alphanumeric characters of both strings are same , then return true","code":"if ( i == len1 and j == len2 ) : NEW_LINE INDENT return True NEW_LINE DEDENT"}
{"text":"if any alphanumeric characters of both strings are not same , then return false","code":"elif ( str1 [ i ] != str2 [ j ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"If current character matched , increase both pointers to check the next character","code":"else : NEW_LINE INDENT i += 1 NEW_LINE j += 1 NEW_LINE DEDENT"}
{"text":"If not same , then return false","code":"return False NEW_LINE"}
{"text":"Function to print Equal or Unequal if strings are same or not","code":"def CompareAlphanumericUtil ( str1 , str2 ) : NEW_LINE"}
{"text":"check alphanumeric equality of both strings","code":"res = CompareAlphanumeric ( str1 , str2 ) NEW_LINE"}
{"text":"if both are alphanumeric equal , print Equal","code":"if ( res == True ) : NEW_LINE INDENT print ( \" Equal \" ) NEW_LINE DEDENT"}
{"text":"otherwise print Unequal","code":"else : NEW_LINE INDENT print ( \" Unequal \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str1 = \" Ram , \u2581 Shyam \" NEW_LINE str2 = \" \u2581 Ram \u2581 - \u2581 Shyam . \" NEW_LINE CompareAlphanumericUtil ( str1 , str2 ) NEW_LINE str1 = \" abc123\" NEW_LINE str2 = \"123abc \" NEW_LINE CompareAlphanumericUtil ( str1 , str2 ) NEW_LINE DEDENT"}
{"text":"Function that answers all the queries","code":"def solveQueries ( Str , query ) : NEW_LINE"}
{"text":"Length of the String","code":"ll = len ( Str ) NEW_LINE"}
{"text":"Number of queries","code":"Q = len ( query ) NEW_LINE"}
{"text":"Prefix array","code":"pre = [ [ 0 for i in range ( 256 ) ] for i in range ( ll ) ] NEW_LINE"}
{"text":"Iterate for all the characters","code":"for i in range ( ll ) : NEW_LINE"}
{"text":"Increase the count of the character","code":"pre [ i ] [ ord ( Str [ i ] ) ] += 1 NEW_LINE"}
{"text":"Presum array for all 26 characters","code":"if ( i ) : NEW_LINE"}
{"text":"Update the prefix array","code":"for j in range ( 256 ) : NEW_LINE INDENT pre [ i ] [ j ] += pre [ i - 1 ] [ j ] NEW_LINE DEDENT"}
{"text":"Answer every query","code":"for i in range ( Q ) : NEW_LINE"}
{"text":"Range","code":"l = query [ i ] [ 0 ] NEW_LINE r = query [ i ] [ 1 ] NEW_LINE maxi = 0 NEW_LINE c = ' a ' NEW_LINE"}
{"text":"Iterate for all characters","code":"for j in range ( 256 ) : NEW_LINE"}
{"text":"Times the lowercase character j occurs till r - th index","code":"times = pre [ r ] [ j ] NEW_LINE"}
{"text":"Subtract the times it occurred till ( l - 1 ) th index","code":"if ( l ) : NEW_LINE INDENT times -= pre [ l - 1 ] [ j ] NEW_LINE DEDENT"}
{"text":"Max times it occurs","code":"if ( times > maxi ) : NEW_LINE INDENT maxi = times NEW_LINE c = chr ( j ) NEW_LINE DEDENT"}
{"text":"Print the answer","code":"print ( \" Query \u2581 \" , i + 1 , \" : \u2581 \" , c ) NEW_LINE"}
{"text":"Driver Code","code":"Str = \" striver \" NEW_LINE query = [ [ 0 , 1 ] , [ 1 , 6 ] , [ 5 , 6 ] ] NEW_LINE solveQueries ( Str , query ) NEW_LINE"}
{"text":"Function that return true if pre is a prefix of str","code":"def startsWith ( str , pre ) : NEW_LINE INDENT strLen = len ( str ) NEW_LINE preLen = len ( pre ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE DEDENT"}
{"text":"While there are characters to match","code":"while ( i < strLen and j < preLen ) : NEW_LINE"}
{"text":"If characters differ at any position","code":"if ( str [ i ] != pre [ j ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT i += 1 NEW_LINE j += 1 NEW_LINE"}
{"text":"str starts with pre","code":"return True NEW_LINE"}
{"text":"Function that return true if suff is a suffix of str","code":"def endsWith ( str , suff ) : NEW_LINE INDENT i = len ( str ) - 1 NEW_LINE j = len ( suff ) - 1 NEW_LINE DEDENT"}
{"text":"While there are characters to match","code":"while ( i >= 0 and j >= 0 ) : NEW_LINE"}
{"text":"If characters differ at any position","code":"if ( str [ i ] != suff [ j ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT i -= 1 NEW_LINE j -= 1 NEW_LINE"}
{"text":"str ends with suff","code":"return True NEW_LINE"}
{"text":"Function that returns true if str = a + b or str = b + a","code":"def checkString ( str , a , b ) : NEW_LINE"}
{"text":"str cannot be generated by concatenating a and b","code":"if ( len ( str ) != len ( a ) + len ( b ) ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"If str starts with a i . e . a is a prefix of str","code":"if ( startsWith ( str , a ) ) : NEW_LINE"}
{"text":"Check if the rest of the characters are equal to b i . e . b is a suffix of str","code":"if ( endsWith ( str , b ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT"}
{"text":"If str starts with b i . e . b is a prefix of str","code":"if ( startsWith ( str , b ) ) : NEW_LINE"}
{"text":"Check if the rest of the characters are equal to a i . e . a is a suffix of str","code":"if ( endsWith ( str , a ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE"}
{"text":"Driver code","code":"str = \" GeeksforGeeks \" NEW_LINE a = \" Geeksfo \" NEW_LINE b = \" rGeeks \" NEW_LINE if ( checkString ( str , a , b ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Python3 implementation of the approach","code":"import sys NEW_LINE import math NEW_LINE"}
{"text":"Function to print the odd frequency characters in the order of their occurrence","code":"def printChar ( str_ , n ) : NEW_LINE"}
{"text":"To store the frequency of each of the character of the string and Initialize all elements of freq [ ] to 0","code":"freq = [ 0 ] * 26 NEW_LINE"}
{"text":"Update the frequency of each character","code":"for i in range ( n ) : NEW_LINE INDENT freq [ ord ( str_ [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT"}
{"text":"Traverse str character by character","code":"for i in range ( n ) : NEW_LINE"}
{"text":"If frequency of current character is odd","code":"if ( freq [ ord ( str_ [ i ] ) - ord ( ' a ' ) ] ) % 2 == 1 : NEW_LINE INDENT print ( \" { } \" . format ( str_ [ i ] ) , end = \" \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str_ = \" geeksforgeeks \" NEW_LINE n = len ( str_ ) NEW_LINE printChar ( str_ , n ) NEW_LINE DEDENT"}
{"text":"Function to return the minimum number of operations required","code":"def minOperations ( str , n ) : NEW_LINE"}
{"text":"To store the indices of the last uppercase and the first lowercase character","code":"lastUpper = - 1 NEW_LINE firstLower = - 1 NEW_LINE"}
{"text":"Find the last uppercase character","code":"for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( str [ i ] . isupper ( ) ) : NEW_LINE INDENT lastUpper = i NEW_LINE break NEW_LINE DEDENT DEDENT"}
{"text":"Find the first lowercase character","code":"for i in range ( n ) : NEW_LINE INDENT if ( str [ i ] . islower ( ) ) : NEW_LINE INDENT firstLower = i NEW_LINE break NEW_LINE DEDENT DEDENT"}
{"text":"If all the characters are either uppercase or lowercase","code":"if ( lastUpper == - 1 or firstLower == - 1 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"Count of uppercase characters that appear after the first lowercase character","code":"countUpper = 0 NEW_LINE for i in range ( firstLower , n ) : NEW_LINE INDENT if ( str [ i ] . isupper ( ) ) : NEW_LINE INDENT countUpper += 1 NEW_LINE DEDENT DEDENT"}
{"text":"Count of lowercase characters that appear before the last uppercase character","code":"countLower = 0 NEW_LINE for i in range ( lastUpper ) : NEW_LINE INDENT if ( str [ i ] . islower ( ) ) : NEW_LINE INDENT countLower += 1 NEW_LINE DEDENT DEDENT"}
{"text":"Return the minimum operations required","code":"return min ( countLower , countUpper ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str = \" geEksFOrGEekS \" NEW_LINE n = len ( str ) NEW_LINE print ( minOperations ( str , n ) ) NEW_LINE DEDENT"}
{"text":"Python3 program to find the Sum of the all Betrothed numbers up to N","code":"import math NEW_LINE"}
{"text":"Function to find the Sum of the all Betrothed numbers","code":"def Betrothed_Sum ( n ) : NEW_LINE"}
{"text":"To store the Betrothed numbers","code":"Set = [ ] NEW_LINE for number_1 in range ( 1 , n ) : NEW_LINE"}
{"text":"Calculate sum of number_1 's divisors","code":"sum_divisor_1 = 1 NEW_LINE"}
{"text":"i = 2 because we don 't  want to include  1 as a divisor.","code":"i = 2 NEW_LINE while i * i <= number_1 : NEW_LINE INDENT if ( number_1 % i == 0 ) : NEW_LINE INDENT sum_divisor_1 = sum_divisor_1 + i NEW_LINE if ( i * i != number_1 ) : NEW_LINE INDENT sum_divisor_1 += number_1 \/\/ i NEW_LINE DEDENT DEDENT i = i + 1 NEW_LINE DEDENT if ( sum_divisor_1 > number_1 ) : NEW_LINE INDENT number_2 = sum_divisor_1 - 1 NEW_LINE sum_divisor_2 = 1 NEW_LINE j = 2 NEW_LINE while j * j <= number_2 : NEW_LINE INDENT if ( number_2 % j == 0 ) : NEW_LINE INDENT sum_divisor_2 += j NEW_LINE if ( j * j != number_2 ) : NEW_LINE INDENT sum_divisor_2 += number_2 \/\/ j NEW_LINE DEDENT DEDENT j = j + 1 NEW_LINE DEDENT if ( sum_divisor_2 == number_1 + 1 and number_1 <= n and number_2 <= n ) : NEW_LINE INDENT Set . append ( number_1 ) NEW_LINE Set . append ( number_2 ) NEW_LINE DEDENT DEDENT"}
{"text":"Sum all Betrothed numbers up to N","code":"Summ = 0 NEW_LINE for i in Set : NEW_LINE INDENT if i <= n : NEW_LINE INDENT Summ += i NEW_LINE DEDENT DEDENT return Summ NEW_LINE"}
{"text":"Driver Code","code":"n = 78 NEW_LINE print ( Betrothed_Sum ( n ) ) NEW_LINE"}
{"text":"Function to find the probability","code":"def rainDayProbability ( a , n ) : NEW_LINE"}
{"text":"count occurence of 1","code":"count = a . count ( 1 ) NEW_LINE"}
{"text":"find probability","code":"m = count \/ n NEW_LINE return m NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 ] NEW_LINE n = len ( a ) NEW_LINE print ( rainDayProbability ( a , n ) ) NEW_LINE DEDENT"}
{"text":"Function to calculate the following series","code":"def Series ( n ) : NEW_LINE INDENT sums = 0.0 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT ser = 1 \/ ( i ** i ) NEW_LINE sums += ser NEW_LINE DEDENT return sums NEW_LINE DEDENT"}
{"text":"Driver Code","code":"n = 3 NEW_LINE res = round ( Series ( n ) , 5 ) NEW_LINE print ( res ) NEW_LINE"}
{"text":"Function to print the lexicographically the largest string obtained in process of obtaining a string containing first N lower case english alphabtes","code":"def lexicographicallyMaximum ( S , N ) : NEW_LINE"}
{"text":"Store the frequency of each character","code":"M = { } NEW_LINE"}
{"text":"Traverse the string S","code":"for i in range ( N ) : NEW_LINE INDENT if S [ i ] in M : NEW_LINE M [ S [ i ] ] += 1 NEW_LINE else : NEW_LINE INDENT M [ S [ i ] ] = 1 NEW_LINE DEDENT DEDENT"}
{"text":"Stores the characters which are not appearing in S","code":"V = [ ] NEW_LINE for i in range ( ord ( ' a ' ) , ord ( ' a ' ) + min ( N , 25 ) ) : NEW_LINE INDENT if i not in M : NEW_LINE INDENT V . append ( chr ( i ) ) NEW_LINE DEDENT DEDENT"}
{"text":"Stores the index of the largest character in the array V , that need to be replaced","code":"j = len ( V ) - 1 NEW_LINE"}
{"text":"Traverse the string , S","code":"for i in range ( N ) : NEW_LINE"}
{"text":"If frequency of S [ i ] is greater than 1 or it is outside the range","code":"if ( ord ( S [ i ] ) >= ( ord ( ' a ' ) + min ( N , 25 ) ) or ( S [ i ] in M and M [ S [ i ] ] > 1 ) ) : NEW_LINE INDENT if ( ord ( V [ j ] ) < ord ( S [ i ] ) ) : NEW_LINE INDENT continue NEW_LINE DEDENT DEDENT"}
{"text":"Decrement its frequency by 1","code":"M [ S [ i ] ] -= 1 NEW_LINE"}
{"text":"Update S [ i ]","code":"S = S [ 0 : i ] + V [ j ] + S [ ( i + 1 ) : ] NEW_LINE"}
{"text":"Decrement j by 1","code":"j -= 1 NEW_LINE if ( j < 0 ) : NEW_LINE break NEW_LINE l = 0 NEW_LINE"}
{"text":"Traverse the string , S","code":"for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( l > j ) : NEW_LINE INDENT break NEW_LINE DEDENT if ( ord ( S [ i ] ) >= ( ord ( ' a ' ) + min ( N , 25 ) ) or S [ i ] in M and M [ S [ i ] ] > 1 ) : NEW_LINE DEDENT"}
{"text":"Decrement its frequency by 1","code":"M [ S [ i ] ] -= 1 NEW_LINE"}
{"text":"Update S [ i ]","code":"S = S [ 0 : i ] + V [ l ] + S [ ( i + 1 ) : ] NEW_LINE"}
{"text":"Increment l by 1","code":"l += 1 NEW_LINE s = list ( S ) NEW_LINE s [ len ( s ) - 1 ] = ' d ' NEW_LINE S = \" \" . join ( s ) NEW_LINE"}
{"text":"Return S","code":"return S NEW_LINE"}
{"text":"Given Input","code":"S = \" abccefghh \" NEW_LINE N = len ( S ) NEW_LINE"}
{"text":"Function Call","code":"print ( lexicographicallyMaximum ( S , N ) ) NEW_LINE"}
{"text":"A Utility Function to check if a subarray can be palindromic by replacing less than half of the elements present in it","code":"def isConsistingSubarrayUtil ( arr , n ) : NEW_LINE"}
{"text":"Stores frequency of array elements","code":"mp = { } ; NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Update frequency of each array element","code":"if arr [ i ] in mp : NEW_LINE INDENT mp [ arr [ i ] ] += 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT mp [ arr [ i ] ] = 1 ; NEW_LINE DEDENT"}
{"text":"Iterator over the Map","code":"for it in mp : NEW_LINE"}
{"text":"If frequency of any element exceeds 1","code":"if ( mp [ it ] > 1 ) : NEW_LINE INDENT return True ; NEW_LINE DEDENT"}
{"text":"If no repetition is found","code":"return False ; NEW_LINE"}
{"text":"Function to check and print if any subarray can be made palindromic by replacing less than half of its elements","code":"def isConsistingSubarray ( arr , N ) : NEW_LINE INDENT if ( isConsistingSubarrayUtil ( arr , N ) ) : NEW_LINE INDENT print ( \" Yes \" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Given array arr [ ]","code":"arr = [ 1 , 2 , 3 , 4 , 5 , 1 ] ; NEW_LINE"}
{"text":"Size of array","code":"N = len ( arr ) ; NEW_LINE"}
{"text":"Function Call","code":"isConsistingSubarray ( arr , N ) ; NEW_LINE"}
{"text":"Python3 program to implement the above approach","code":"import math NEW_LINE"}
{"text":"Function to find all Fibonacci numbers up to Max","code":"def createhashmap ( Max ) : NEW_LINE"}
{"text":"Store all Fibonacci numbers upto Max","code":"hashmap = { \" \" } NEW_LINE"}
{"text":"Stores previous element of Fibonacci sequence","code":"curr = 1 NEW_LINE"}
{"text":"Stores previous element of Fibonacci sequence","code":"prev = 0 NEW_LINE"}
{"text":"Insert prev into hashmap","code":"hashmap . add ( prev ) NEW_LINE"}
{"text":"Insert all the Fibonacci numbers up to Max","code":"while ( curr <= Max ) : NEW_LINE"}
{"text":"Insert curr into hashmap","code":"hashmap . add ( curr ) NEW_LINE"}
{"text":"Stores curr into temp","code":"temp = curr NEW_LINE"}
{"text":"Update curr","code":"curr = curr + prev NEW_LINE"}
{"text":"Update prev","code":"prev = temp NEW_LINE return hashmap NEW_LINE"}
{"text":"Function to find all Composite numbers up to Max","code":"def SieveOfEratosthenes ( Max ) : NEW_LINE"}
{"text":"isPrime [ i ] : Stores if i is a prime number or not","code":"isPrime = [ 1 for x in range ( Max + 1 ) ] NEW_LINE isPrime [ 0 ] = 0 NEW_LINE isPrime [ 1 ] = 0 NEW_LINE"}
{"text":"Calculate all prime numbers up to Max using Sieve of Eratosthenes","code":"for p in range ( 0 , int ( math . sqrt ( Max ) ) ) : NEW_LINE"}
{"text":"If P is a prime number","code":"if ( isPrime [ p ] ) : NEW_LINE"}
{"text":"Set all multiple of P as non - prime","code":"for i in range ( 2 * p , Max , p ) : NEW_LINE INDENT isPrime [ i ] = 0 NEW_LINE DEDENT return isPrime NEW_LINE"}
{"text":"Function to find the numbers which is both a composite and Fibonacci number","code":"def cntFibonacciPrime ( arr , N ) : NEW_LINE"}
{"text":"Stores the largest element of the array","code":"Max = arr [ 0 ] NEW_LINE"}
{"text":"Traverse the array arr [ ]","code":"for i in range ( 0 , N ) : NEW_LINE"}
{"text":"Update Max","code":"Max = max ( Max , arr [ i ] ) NEW_LINE"}
{"text":"isPrim [ i ] check i is a prime number or not","code":"isPrime = SieveOfEratosthenes ( Max ) NEW_LINE"}
{"text":"Stores all the Fibonacci numbers","code":"hashmap = createhashmap ( Max ) NEW_LINE"}
{"text":"Traverse the array arr [ ]","code":"for i in range ( 0 , N ) : NEW_LINE"}
{"text":"Current element is not a composite number","code":"if arr [ i ] == 1 : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"If current element is a Fibonacci and composite number","code":"if ( ( arr [ i ] in hashmap ) and ( not ( isPrime [ arr [ i ] ] ) ) ) : NEW_LINE"}
{"text":"Print current element","code":"print ( arr [ i ] , end = \" \u2581 \" ) NEW_LINE"}
{"text":"Driver Code","code":"arr = [ 13 , 55 , 7 , 3 , 5 , 21 , 233 , 144 , 89 ] NEW_LINE N = len ( arr ) NEW_LINE cntFibonacciPrime ( arr , N ) NEW_LINE"}
{"text":"Python3 program of the above approach","code":"import math NEW_LINE"}
{"text":"Function to find the key of the given number","code":"def key ( N ) : NEW_LINE"}
{"text":"Convert the integer to String","code":"num = \" \" + str ( N ) NEW_LINE ans = 0 NEW_LINE j = 0 NEW_LINE"}
{"text":"Iterate the num - string to get the result","code":"while j < len ( num ) : NEW_LINE"}
{"text":"Check if digit is even or odd","code":"if ( ( ord ( num [ j ] ) - 48 ) % 2 == 0 ) : NEW_LINE INDENT add = 0 NEW_LINE DEDENT"}
{"text":"Iterate until odd sum is obtained by adding consecutive digits","code":"i = j NEW_LINE while j < len ( num ) : NEW_LINE INDENT add += ord ( num [ j ] ) - 48 NEW_LINE DEDENT"}
{"text":"Check if sum becomes odd","code":"if ( add % 2 == 1 ) : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE if ( add == 0 ) : NEW_LINE ans *= 10 NEW_LINE else : NEW_LINE digit = int ( math . floor ( math . log10 ( add ) + 1 ) ) NEW_LINE ans *= ( pow ( 10 , digit ) ) NEW_LINE"}
{"text":"Add the result in ans","code":"ans += add NEW_LINE"}
{"text":"Assign the digit index to num string","code":"i = j NEW_LINE else : NEW_LINE"}
{"text":"If the number is odd","code":"add = 0 NEW_LINE"}
{"text":"Iterate until odd sum is obtained by adding consecutive digits","code":"i = j NEW_LINE while j < len ( num ) : NEW_LINE INDENT add += ord ( num [ j ] ) - 48 NEW_LINE DEDENT"}
{"text":"Check if sum becomes even","code":"if ( add % 2 == 0 ) : NEW_LINE INDENT break NEW_LINE DEDENT j += 1 NEW_LINE if ( add == 0 ) : NEW_LINE ans *= 10 NEW_LINE else : NEW_LINE digit = int ( math . floor ( math . log10 ( add ) + 1 ) ) NEW_LINE ans *= ( pow ( 10 , digit ) ) NEW_LINE"}
{"text":"Add the result in ans","code":"ans += add NEW_LINE"}
{"text":"assign the digit index to main numstring","code":"i = j NEW_LINE j += 1 NEW_LINE"}
{"text":"Check if all digits are visited or not","code":"if ( j + 1 ) >= len ( num ) : NEW_LINE INDENT return ans NEW_LINE DEDENT else : NEW_LINE INDENT ans += ord ( num [ len ( num ) - 1 ] ) - 48 NEW_LINE return ans NEW_LINE DEDENT"}
{"text":"Python3 implementation of the approach Function to search key in the given array","code":"def sentinelSearch ( arr , n , key ) : NEW_LINE"}
{"text":"Function to search x in the given array","code":"def sentinelSearch ( arr , n , key ) : NEW_LINE"}
{"text":"Last element of the array","code":"last = arr [ n - 1 ] NEW_LINE"}
{"text":"Element to be searched is placed at the last index","code":"arr [ n - 1 ] = key NEW_LINE i = 0 NEW_LINE while ( arr [ i ] != key ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT"}
{"text":"Put the last element back","code":"arr [ n - 1 ] = last NEW_LINE if ( ( i < n - 1 ) or ( arr [ n - 1 ] == key ) ) : NEW_LINE INDENT print ( key , \" is \u2581 present \u2581 at \u2581 index \" , i ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Element \u2581 Not \u2581 found \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"arr = [ 10 , 20 , 180 , 30 , 60 , 50 , 110 , 100 , 70 ] NEW_LINE n = len ( arr ) NEW_LINE key = 180 NEW_LINE sentinelSearch ( arr , n , key ) NEW_LINE"}
{"text":"Function to calculate maximum possible middle value of the array after deleting exactly k elements","code":"def maximum_middle_value ( n , k , arr ) : NEW_LINE"}
{"text":"Initialize answer as - 1","code":"ans = - 1 NEW_LINE"}
{"text":"Calculate range of elements that can give maximum possible middle value of the array since index of maximum possible middle value after deleting exactly k elements from array will lie in between low and high","code":"low = ( n + 1 - k ) \/\/ 2 NEW_LINE high = ( n + 1 - k ) \/\/ 2 + k NEW_LINE"}
{"text":"Find maximum element of the array in range low and high","code":"for i in range ( low , high + 1 ) : NEW_LINE"}
{"text":"since indexing is 1 based so check element at index i - 1","code":"ans = max ( ans , arr [ i - 1 ] ) NEW_LINE"}
{"text":"Return the maximum possible middle value of the array after deleting exactly k elements from the array","code":"return ans NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n , k = 5 , 2 NEW_LINE arr = [ 9 , 5 , 3 , 7 , 10 ] NEW_LINE print ( maximum_middle_value ( n , k , arr ) ) NEW_LINE n , k = 9 , 3 NEW_LINE arr1 = [ 2 , 4 , 3 , 9 , 5 , 8 , 7 , 6 , 10 ] NEW_LINE print ( maximum_middle_value ( n , k , arr1 ) ) NEW_LINE DEDENT"}
{"text":"Python3 program to illustrate recursive approach to ternary search","code":"import math as mt NEW_LINE"}
{"text":"Function to perform Ternary Search","code":"def ternarySearch ( l , r , key , ar ) : NEW_LINE INDENT if ( r >= l ) : NEW_LINE DEDENT"}
{"text":"Find the mid1 and mid2","code":"mid1 = l + ( r - l ) \/\/ 3 NEW_LINE mid2 = r - ( r - l ) \/\/ 3 NEW_LINE"}
{"text":"Check if key is present at any mid","code":"if ( ar [ mid1 ] == key ) : NEW_LINE INDENT return mid1 NEW_LINE DEDENT if ( ar [ mid2 ] == key ) : NEW_LINE INDENT return mid2 NEW_LINE DEDENT"}
{"text":"Since key is not present at mid , check in which region it is present then repeat the Search operation in that region","code":"if ( key < ar [ mid1 ] ) : NEW_LINE"}
{"text":"The key lies in between l and mid1","code":"return ternarySearch ( l , mid1 - 1 , key , ar ) NEW_LINE elif ( key > ar [ mid2 ] ) : NEW_LINE"}
{"text":"The key lies in between mid2 and r","code":"return ternarySearch ( mid2 + 1 , r , key , ar ) NEW_LINE else : NEW_LINE"}
{"text":"The key lies in between mid1 and mid2","code":"return ternarySearch ( mid1 + 1 , mid2 - 1 , key , ar ) NEW_LINE"}
{"text":"Key not found","code":"return - 1 NEW_LINE"}
{"text":"Driver code","code":"l , r , p = 0 , 9 , 5 NEW_LINE"}
{"text":"Get the array Sort the array if not sorted","code":"ar = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] NEW_LINE"}
{"text":"Starting index","code":"l = 0 NEW_LINE"}
{"text":"length of array","code":"r = 9 NEW_LINE"}
{"text":"Key to be searched in the array","code":"key = 5 NEW_LINE"}
{"text":"Search the key using ternarySearch","code":"p = ternarySearch ( l , r , key , ar ) NEW_LINE"}
{"text":"Print the result","code":"print ( \" Index \u2581 of \" , key , \" is \" , p ) NEW_LINE"}
{"text":"Key to be searched in the array","code":"key = 50 NEW_LINE"}
{"text":"Search the key using ternarySearch","code":"p = ternarySearch ( l , r , key , ar ) NEW_LINE"}
{"text":"Print the result","code":"print ( \" Index \u2581 of \" , key , \" is \" , p ) NEW_LINE"}
{"text":"Function to find the minimum number of points","code":"def findmin ( p , n ) : NEW_LINE INDENT a , b , c , d = 0 , 0 , 0 , 0 NEW_LINE for i in range ( n ) : NEW_LINE DEDENT"}
{"text":"Number of points on the left of Y - axis .","code":"if ( p [ i ] [ 0 ] <= 0 ) : NEW_LINE INDENT a += 1 NEW_LINE DEDENT"}
{"text":"Number of points on the right of Y - axis .","code":"elif ( p [ i ] [ 0 ] >= 0 ) : NEW_LINE INDENT b += 1 NEW_LINE DEDENT"}
{"text":"Number of points above X - axis .","code":"if ( p [ i ] [ 1 ] >= 0 ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT"}
{"text":"Number of points below X - axis .","code":"elif ( p [ i ] [ 1 ] <= 0 ) : NEW_LINE INDENT d += 1 NEW_LINE DEDENT return min ( [ a , b , c , d ] ) NEW_LINE"}
{"text":"Driver Code","code":"p = [ [ 1 , 1 ] , [ 2 , 2 ] , [ - 1 , - 1 ] , [ - 2 , 2 ] ] NEW_LINE n = len ( p ) NEW_LINE print ( findmin ( p , n ) ) NEW_LINE"}
{"text":"Function to count the maximum number of pair reductions possible on a given triplet","code":"def maxOps ( a , b , c ) : NEW_LINE"}
{"text":"Convert them into an array","code":"INDENT arr = [ a , b , c ] NEW_LINE DEDENT"}
{"text":"Stores count of operations","code":"INDENT count = 0 NEW_LINE while True : NEW_LINE DEDENT"}
{"text":"Sort the array","code":"arr . sort ( ) NEW_LINE"}
{"text":"If the first two array elements reduce to 0","code":"if not arr [ 0 ] and not arr [ 1 ] : NEW_LINE break NEW_LINE"}
{"text":"Apply the operations","code":"arr [ 1 ] -= 1 NEW_LINE arr [ 2 ] -= 1 NEW_LINE"}
{"text":"Increment count","code":"count += 1 NEW_LINE"}
{"text":"Print the maximum count","code":"INDENT print ( count ) NEW_LINE DEDENT"}
{"text":"Given triplet","code":"a , b , c = 4 , 3 , 2 NEW_LINE maxOps ( a , b , c ) NEW_LINE"}
{"text":"Python3 implementation of the approach","code":"MAX = 26 NEW_LINE"}
{"text":"Function to return the sorted string","code":"def getSortedString ( s , n ) : NEW_LINE"}
{"text":"To store the frequencies of the lowercase and the uppercase characters in the given string","code":"lower = [ 0 ] * MAX ; NEW_LINE upper = [ 0 ] * MAX ; NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"If current character is lowercase then increment its frequency in the lower [ ] array","code":"if ( s [ i ] . islower ( ) ) : NEW_LINE INDENT lower [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1 ; NEW_LINE DEDENT"}
{"text":"Else increment in the upper [ ] array","code":"elif ( s [ i ] . isupper ( ) ) : NEW_LINE INDENT upper [ ord ( s [ i ] ) - ord ( ' A ' ) ] += 1 ; NEW_LINE DEDENT"}
{"text":"Pointers that point to the smallest lowercase and the smallest uppercase characters respectively in the given string","code":"i = 0 ; j = 0 ; NEW_LINE while ( i < MAX and lower [ i ] == 0 ) : NEW_LINE INDENT i += 1 ; NEW_LINE DEDENT while ( j < MAX and upper [ j ] == 0 ) : NEW_LINE INDENT j += 1 ; NEW_LINE DEDENT"}
{"text":"For every character in the given string","code":"for k in range ( n ) : NEW_LINE"}
{"text":"If the current character is lowercase then replace it with the smallest lowercase character available","code":"if ( s [ k ] . islower ( ) ) : NEW_LINE INDENT while ( lower [ i ] == 0 ) : NEW_LINE INDENT i += 1 ; NEW_LINE DEDENT s [ k ] = chr ( i + ord ( ' a ' ) ) ; NEW_LINE DEDENT"}
{"text":"Decrement the frequency of the used character","code":"lower [ i ] -= 1 ; NEW_LINE"}
{"text":"Else replace it with the smallest uppercase character available","code":"elif ( s [ k ] . isupper ( ) ) : NEW_LINE INDENT while ( upper [ j ] == 0 ) : NEW_LINE INDENT j += 1 ; NEW_LINE DEDENT s [ k ] = chr ( j + ord ( ' A ' ) ) ; NEW_LINE DEDENT"}
{"text":"Decrement the frequency of the used character","code":"upper [ j ] -= 1 ; NEW_LINE"}
{"text":"Return the sorted string","code":"return \" \" . join ( s ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \" gEeksfOrgEEkS \" ; NEW_LINE n = len ( s ) ; NEW_LINE print ( getSortedString ( list ( s ) , n ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 implementation to pr the character and its frequency in order of its occurrence","code":"import numpy as np NEW_LINE"}
{"text":"Function to print the character and its frequency in order of its occurrence","code":"def prCharWithFreq ( str ) : NEW_LINE"}
{"text":"Size of the 'str","code":"' NEW_LINE INDENT n = len ( str ) NEW_LINE DEDENT"}
{"text":"Initialize all elements of freq [ ] to 0","code":"freq = np . zeros ( 26 , dtype = np . int ) NEW_LINE"}
{"text":"Accumulate frequency of each character in 'str","code":"' NEW_LINE INDENT for i in range ( 0 , n ) : NEW_LINE INDENT freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT DEDENT"}
{"text":"Traverse ' str ' from left to right","code":"for i in range ( 0 , n ) : NEW_LINE"}
{"text":"if frequency of character str [ i ] is not equal to 0","code":"if ( freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] != 0 ) : NEW_LINE"}
{"text":"print the character along with its frequency","code":"print ( str [ i ] , freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] , end = \" \u2581 \" ) NEW_LINE"}
{"text":"Update frequency of str [ i ] to 0 so that the same character is not printed again","code":"freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] = 0 NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str = \" geeksforgeeks \" ; NEW_LINE prCharWithFreq ( str ) ; NEW_LINE DEDENT ' NEW_LINE"}
{"text":"Python3 program to reverse a string s = input ( )","code":"s = \" i \u2581 like \u2581 this \u2581 program \u2581 very \u2581 much \" NEW_LINE words = s . split ( ' \u2581 ' ) NEW_LINE string = [ ] NEW_LINE for word in words : NEW_LINE INDENT string . insert ( 0 , word ) NEW_LINE DEDENT print ( \" Reversed \u2581 String : \" ) NEW_LINE print ( \" \u2581 \" . join ( string ) ) NEW_LINE"}
{"text":"Function to generate prime numbers using Sieve of Eratosthenes","code":"def SieveOfEratosthenes ( prime , n ) : NEW_LINE INDENT p = 2 NEW_LINE while ( p * p <= n ) : NEW_LINE DEDENT"}
{"text":"If prime [ p ] is unchanged , then it is a prime","code":"if ( prime [ p ] == True ) : NEW_LINE"}
{"text":"Update all multiples of p","code":"i = p * p NEW_LINE while ( i <= n ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE i += p NEW_LINE DEDENT p += 1 NEW_LINE"}
{"text":"Function to segregate the primes and non - primes","code":"def segregatePrimeNonPrime ( prime , arr , N ) : NEW_LINE"}
{"text":"Generate all primes till 10 ^ 7","code":"SieveOfEratosthenes ( prime , 10000000 ) NEW_LINE"}
{"text":"Initialize left and right","code":"left , right = 0 , N - 1 NEW_LINE"}
{"text":"Traverse the array","code":"while ( left < right ) : NEW_LINE"}
{"text":"Increment left while array element at left is prime","code":"while ( prime [ arr [ left ] ] ) : NEW_LINE INDENT left += 1 NEW_LINE DEDENT"}
{"text":"Decrement right while array element at right is non - prime","code":"while ( not prime [ arr [ right ] ] ) : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT"}
{"text":"If left < right , then swap arr [ left ] and arr [ right ]","code":"if ( left < right ) : NEW_LINE"}
{"text":"Swap arr [ left ] and arr [ right ]","code":"arr [ left ] , arr [ right ] = arr [ right ] , arr [ left ] NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE"}
{"text":"Print segregated array","code":"for num in arr : NEW_LINE INDENT print ( num , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"arr = [ 2 , 3 , 4 , 6 , 7 , 8 , 9 , 10 ] NEW_LINE N = len ( arr ) NEW_LINE prime = [ True ] * 10000001 NEW_LINE"}
{"text":"Function Call","code":"segregatePrimeNonPrime ( prime , arr , N ) NEW_LINE"}
{"text":"function to return max of left subtree height or right subtree height","code":"def findDepthRec ( tree , n , index ) : NEW_LINE INDENT if ( index [ 0 ] >= n or tree [ index [ 0 ] ] == ' l ' ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT"}
{"text":"calc height of left subtree ( In preorder left subtree is processed before right )","code":"index [ 0 ] += 1 NEW_LINE left = findDepthRec ( tree , n , index ) NEW_LINE"}
{"text":"calc height of right subtree","code":"index [ 0 ] += 1 NEW_LINE right = findDepthRec ( tree , n , index ) NEW_LINE return ( max ( left , right ) + 1 ) NEW_LINE"}
{"text":"Wrapper over findDepthRec ( )","code":"def findDepth ( tree , n ) : NEW_LINE INDENT index = [ 0 ] NEW_LINE return findDepthRec ( tree , n , index ) NEW_LINE DEDENT"}
{"text":"Driver program to test above functions","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT tree = \" nlnnlll \" NEW_LINE n = len ( tree ) NEW_LINE print ( findDepth ( tree , n ) ) NEW_LINE DEDENT"}
{"text":"Constructor to create a new node","code":"class newNode : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . key = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT"}
{"text":"To insert a new node in BST","code":"def insert ( node , key ) : NEW_LINE"}
{"text":"if tree is empty return new node","code":"if node == None : NEW_LINE INDENT return newNode ( key ) NEW_LINE DEDENT"}
{"text":"if key is less then or greater then node value then recur down the tree","code":"if key < node . key : NEW_LINE INDENT node . left = insert ( node . left , key ) NEW_LINE DEDENT elif key > node . key : NEW_LINE INDENT node . right = insert ( node . right , key ) NEW_LINE DEDENT"}
{"text":"return the ( unchanged ) node pointer","code":"return node NEW_LINE"}
{"text":"function to find max value less then N","code":"def findMaxforN ( root , N ) : NEW_LINE"}
{"text":"Base cases","code":"if root == None : NEW_LINE INDENT return - 1 NEW_LINE DEDENT if root . key == N : NEW_LINE INDENT return N NEW_LINE DEDENT"}
{"text":"If root 's value is smaller, try in  right subtree","code":"elif root . key < N : NEW_LINE INDENT k = findMaxforN ( root . right , N ) NEW_LINE if k == - 1 : NEW_LINE INDENT return root . key NEW_LINE DEDENT else : NEW_LINE INDENT return k NEW_LINE DEDENT DEDENT"}
{"text":"If root 's key is greater, return  value from left subtree.","code":"elif root . key > N : NEW_LINE INDENT return findMaxforN ( root . left , N ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 NEW_LINE DEDENT"}
{"text":"creating following BST 5 \/ \\ 2 12 \/ \\ \/ \\ 1 3 9 21 \/ \\ 19 25","code":"root = None NEW_LINE root = insert ( root , 25 ) NEW_LINE insert ( root , 2 ) NEW_LINE insert ( root , 1 ) NEW_LINE insert ( root , 3 ) NEW_LINE insert ( root , 12 ) NEW_LINE insert ( root , 9 ) NEW_LINE insert ( root , 21 ) NEW_LINE insert ( root , 19 ) NEW_LINE insert ( root , 25 ) NEW_LINE print ( findMaxforN ( root , N ) ) NEW_LINE"}
{"text":"Python3 code to find the largest value smaller than or equal to N","code":"class newNode : NEW_LINE"}
{"text":"To create new BST Node","code":"def __init__ ( self , data ) : NEW_LINE INDENT self . key = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT"}
{"text":"To insert a new node in BST","code":"def insert ( node , key ) : NEW_LINE"}
{"text":"If tree is empty return new node","code":"if ( node == None ) : NEW_LINE INDENT return newNode ( key ) NEW_LINE DEDENT"}
{"text":"If key is less then or greater then node value then recur down the tree","code":"if ( key < node . key ) : NEW_LINE INDENT node . left = insert ( node . left , key ) NEW_LINE DEDENT elif ( key > node . key ) : NEW_LINE INDENT node . right = insert ( node . right , key ) NEW_LINE DEDENT"}
{"text":"Return the ( unchanged ) node pointer","code":"return node NEW_LINE"}
{"text":"Function to find max value less then N","code":"def findMaxforN ( root , N ) : NEW_LINE"}
{"text":"Start from root and keep looking for larger","code":"while ( root != None and root . right != None ) : NEW_LINE"}
{"text":"If root is smaller go to right side","code":"if ( N > root . key and N >= root . right . key ) : NEW_LINE INDENT root = root . right NEW_LINE DEDENT"}
{"text":"If root is greater go to left side","code":"elif ( N < root . key ) : NEW_LINE INDENT root = root . left NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT if ( root == None or root . key > N ) : NEW_LINE print ( - 1 ) NEW_LINE else : NEW_LINE print ( root . key ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 50 NEW_LINE root = None NEW_LINE root = insert ( root , 5 ) NEW_LINE insert ( root , 2 ) NEW_LINE insert ( root , 1 ) NEW_LINE insert ( root , 3 ) NEW_LINE insert ( root , 12 ) NEW_LINE insert ( root , 9 ) NEW_LINE insert ( root , 21 ) NEW_LINE insert ( root , 19 ) NEW_LINE insert ( root , 25 ) NEW_LINE findMaxforN ( root , N ) NEW_LINE DEDENT"}
{"text":"Python 3 program to find maximum element in the path between two Nodes of Binary Search Tree . Create and return a pointer of new Node .","code":"class createNode : NEW_LINE"}
{"text":"Constructor to create a new node","code":"def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT"}
{"text":"Insert a new Node in Binary Search Tree .","code":"def insertNode ( root , x ) : NEW_LINE INDENT p , q = root , None NEW_LINE while p != None : NEW_LINE INDENT q = p NEW_LINE if p . data < x : NEW_LINE INDENT p = p . right NEW_LINE DEDENT else : NEW_LINE INDENT p = p . left NEW_LINE DEDENT DEDENT if q == None : NEW_LINE INDENT p = createNode ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT if q . data < x : NEW_LINE INDENT q . right = createNode ( x ) NEW_LINE DEDENT else : NEW_LINE INDENT q . left = createNode ( x ) NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Return the maximum element between a Node and its given ancestor .","code":"def maxelpath ( q , x ) : NEW_LINE INDENT p = q NEW_LINE mx = - 999999999999 NEW_LINE DEDENT"}
{"text":"Traversing the path between ansector and Node and finding maximum element .","code":"while p . data != x : NEW_LINE INDENT if p . data > x : NEW_LINE INDENT mx = max ( mx , p . data ) NEW_LINE p = p . left NEW_LINE DEDENT else : NEW_LINE INDENT mx = max ( mx , p . data ) NEW_LINE p = p . right NEW_LINE DEDENT DEDENT return max ( mx , x ) NEW_LINE"}
{"text":"Return maximum element in the path between two given Node of BST .","code":"def maximumElement ( root , x , y ) : NEW_LINE INDENT p = root NEW_LINE DEDENT"}
{"text":"Finding the LCA of Node x and Node y","code":"while ( ( x < p . data and y < p . data ) or ( x > p . data and y > p . data ) ) : NEW_LINE"}
{"text":"Checking if both the Node lie on the left side of the parent p .","code":"if x < p . data and y < p . data : NEW_LINE INDENT p = p . left NEW_LINE DEDENT"}
{"text":"Checking if both the Node lie on the right side of the parent p .","code":"elif x > p . data and y > p . data : NEW_LINE INDENT p = p . right NEW_LINE DEDENT"}
{"text":"Return the maximum of maximum elements occur in path from ancestor to both Node .","code":"return max ( maxelpath ( p , x ) , maxelpath ( p , y ) ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 18 , 36 , 9 , 6 , 12 , 10 , 1 , 8 ] NEW_LINE a , b = 1 , 10 NEW_LINE n = len ( arr ) NEW_LINE DEDENT"}
{"text":"Creating the root of Binary Search Tree","code":"root = createNode ( arr [ 0 ] ) NEW_LINE"}
{"text":"Inserting Nodes in Binary Search Tree","code":"for i in range ( 1 , n ) : NEW_LINE INDENT insertNode ( root , arr [ i ] ) NEW_LINE DEDENT print ( maximumElement ( root , a , b ) ) NEW_LINE"}
{"text":"Insertion in Threaded Binary Search Tree .","code":"class newNode : NEW_LINE INDENT def __init__ ( self , key ) : NEW_LINE DEDENT"}
{"text":"True if left pointer points to predecessor in Inorder Traversal","code":"self . info = key NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE self . lthread = True NEW_LINE"}
{"text":"True if right pointer points to successor in Inorder Traversal","code":"self . rthread = True NEW_LINE"}
{"text":"Insert a Node in Binary Threaded Tree","code":"def insert ( root , ikey ) : NEW_LINE"}
{"text":"Searching for a Node with given value","code":"ptr = root NEW_LINE"}
{"text":"Parent of key to be inserted","code":"par = None NEW_LINE while ptr != None : NEW_LINE"}
{"text":"If key already exists , return","code":"if ikey == ( ptr . info ) : NEW_LINE INDENT print ( \" Duplicate \u2581 Key \u2581 ! \" ) NEW_LINE return root NEW_LINE DEDENT"}
{"text":"Update parent pointer","code":"par = ptr NEW_LINE"}
{"text":"Moving on left subtree .","code":"if ikey < ptr . info : NEW_LINE INDENT if ptr . lthread == False : NEW_LINE INDENT ptr = ptr . left NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT"}
{"text":"Moving on right subtree .","code":"else : NEW_LINE INDENT if ptr . rthread == False : NEW_LINE INDENT ptr = ptr . right NEW_LINE DEDENT else : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT"}
{"text":"Create a new node","code":"tmp = newNode ( ikey ) NEW_LINE if par == None : NEW_LINE INDENT root = tmp NEW_LINE tmp . left = None NEW_LINE tmp . right = None NEW_LINE DEDENT elif ikey < ( par . info ) : NEW_LINE INDENT tmp . left = par . left NEW_LINE tmp . right = par NEW_LINE par . lthread = False NEW_LINE par . left = tmp NEW_LINE DEDENT else : NEW_LINE INDENT tmp . left = par NEW_LINE tmp . right = par . right NEW_LINE par . rthread = False NEW_LINE par . right = tmp NEW_LINE DEDENT return root NEW_LINE"}
{"text":"Returns inorder successor using rthread","code":"def inorderSuccessor ( ptr ) : NEW_LINE"}
{"text":"If rthread is set , we can quickly find","code":"if ptr . rthread == True : NEW_LINE INDENT return ptr . right NEW_LINE DEDENT"}
{"text":"Else return leftmost child of right subtree","code":"ptr = ptr . right NEW_LINE while ptr . lthread == False : NEW_LINE INDENT ptr = ptr . left NEW_LINE DEDENT return ptr NEW_LINE"}
{"text":"Printing the threaded tree","code":"def inorder ( root ) : NEW_LINE INDENT if root == None : NEW_LINE INDENT print ( \" Tree \u2581 is \u2581 empty \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Reach leftmost node","code":"ptr = root NEW_LINE while ptr . lthread == False : NEW_LINE INDENT ptr = ptr . left NEW_LINE DEDENT"}
{"text":"One by one print successors","code":"while ptr != None : NEW_LINE INDENT print ( ptr . info , end = \" \u2581 \" ) NEW_LINE ptr = inorderSuccessor ( ptr ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT root = None NEW_LINE root = insert ( root , 20 ) NEW_LINE root = insert ( root , 10 ) NEW_LINE root = insert ( root , 30 ) NEW_LINE root = insert ( root , 5 ) NEW_LINE root = insert ( root , 16 ) NEW_LINE root = insert ( root , 14 ) NEW_LINE root = insert ( root , 17 ) NEW_LINE root = insert ( root , 13 ) NEW_LINE inorder ( root ) NEW_LINE DEDENT"}
{"text":"Python3 program to find if a matrix is symmetric .","code":"MAX = 1000 NEW_LINE def checkHV ( arr , N , M ) : NEW_LINE"}
{"text":"Initializing as both horizontal and vertical symmetric .","code":"horizontal = True NEW_LINE vertical = True NEW_LINE"}
{"text":"Checking for Horizontal Symmetry . We compare first row with last row , second row with second last row and so on .","code":"i = 0 NEW_LINE k = N - 1 NEW_LINE while ( i < N \/\/ 2 ) : NEW_LINE"}
{"text":"Checking each cell of a column .","code":"for j in range ( M ) : NEW_LINE"}
{"text":"check if every cell is identical","code":"if ( arr [ i ] [ j ] != arr [ k ] [ j ] ) : NEW_LINE INDENT horizontal = False NEW_LINE break NEW_LINE DEDENT i += 1 NEW_LINE k -= 1 NEW_LINE"}
{"text":"Checking for Vertical Symmetry . We compare first column with last column , second xolumn with second last column and so on .","code":"i = 0 NEW_LINE k = M - 1 NEW_LINE while ( i < M \/\/ 2 ) : NEW_LINE"}
{"text":"Checking each cell of a row .","code":"for j in range ( N ) : NEW_LINE"}
{"text":"check if every cell is identical","code":"if ( arr [ i ] [ j ] != arr [ k ] [ j ] ) : NEW_LINE INDENT vertical = False NEW_LINE break NEW_LINE DEDENT i += 1 NEW_LINE k -= 1 NEW_LINE if ( not horizontal and not vertical ) : NEW_LINE print ( \" NO \" ) NEW_LINE elif ( horizontal and not vertical ) : NEW_LINE print ( \" HORIZONTAL \" ) NEW_LINE elif ( vertical and not horizontal ) : NEW_LINE print ( \" VERTICAL \" ) NEW_LINE else : NEW_LINE print ( \" BOTH \" ) NEW_LINE"}
{"text":"Driver code","code":"mat = [ [ 1 , 0 , 1 ] , [ 0 , 0 , 0 ] , [ 1 , 0 , 1 ] ] NEW_LINE checkHV ( mat , 3 , 3 ) NEW_LINE"}
{"text":"Python3 program to replace each each element with maximum of GCD of row or column .","code":"R = 3 NEW_LINE C = 4 NEW_LINE"}
{"text":"returning the greatest common divisor of two number","code":"def gcd ( a , b ) : NEW_LINE INDENT if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT return gcd ( b , a % b ) NEW_LINE DEDENT"}
{"text":"Finding GCD of each row and column and replacing with each element with maximum of GCD of row or column .","code":"def replacematrix ( mat , n , m ) : NEW_LINE INDENT rgcd = [ 0 ] * R NEW_LINE cgcd = [ 0 ] * C NEW_LINE DEDENT"}
{"text":"Calculating GCD of each row and each column in O ( mn ) and store in arrays .","code":"for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT rgcd [ i ] = gcd ( rgcd [ i ] , mat [ i ] [ j ] ) NEW_LINE cgcd [ j ] = gcd ( cgcd [ j ] , mat [ i ] [ j ] ) NEW_LINE DEDENT DEDENT"}
{"text":"Replacing matrix element","code":"for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE INDENT mat [ i ] [ j ] = max ( rgcd [ i ] , cgcd [ j ] ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT m = [ [ 1 , 2 , 3 , 3 ] , [ 4 , 5 , 6 , 6 ] , [ 7 , 8 , 9 , 9 ] ] NEW_LINE replacematrix ( m , R , C ) NEW_LINE for i in range ( R ) : NEW_LINE INDENT for j in range ( C ) : NEW_LINE INDENT print ( m [ i ] [ j ] , end = \" \u2581 \" ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT DEDENT"}
{"text":"Python3 program for addition of two matrices","code":"N = 4 NEW_LINE"}
{"text":"This function adds A [ ] [ ] and B [ ] [ ] , and stores the result in C [ ] [ ]","code":"def add ( A , B , C ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"driver code","code":"A = [ [ 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 ] ] NEW_LINE B = [ [ 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 ] ] NEW_LINE C = A [ : ] [ : ] NEW_LINE add ( A , B , C ) NEW_LINE print ( \" Result \u2581 matrix \u2581 is \" ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT print ( C [ i ] [ j ] , \" \u2581 \" , end = ' ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT"}
{"text":"Python 3 program for subtraction of matrices","code":"N = 4 NEW_LINE"}
{"text":"This function returns 1 if A [ ] [ ] and B [ ] [ ] are identical otherwise returns 0","code":"def subtract ( A , B , C ) : NEW_LINE INDENT for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Driver Code","code":"A = [ [ 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 ] ] NEW_LINE B = [ [ 1 , 1 , 1 , 1 ] , [ 2 , 2 , 2 , 2 ] , [ 3 , 3 , 3 , 3 ] , [ 4 , 4 , 4 , 4 ] ] NEW_LINE C = A [ : ] [ : ] NEW_LINE subtract ( A , B , C ) NEW_LINE print ( \" Result \u2581 matrix \u2581 is \" ) NEW_LINE for i in range ( N ) : NEW_LINE INDENT for j in range ( N ) : NEW_LINE INDENT print ( C [ i ] [ j ] , \" \u2581 \" , end = ' ' ) NEW_LINE DEDENT print ( ) NEW_LINE DEDENT"}
{"text":"Python program to check fixed point in an array using linear search","code":"def linearSearch ( arr , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT if arr [ i ] is i : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"If no fixed point present then return - 1","code":"return - 1 NEW_LINE"}
{"text":"Driver program to check above functions","code":"arr = [ - 10 , - 1 , 0 , 3 , 10 , 11 , 30 , 50 , 100 ] NEW_LINE n = len ( arr ) NEW_LINE print ( \" Fixed \u2581 Point \u2581 is \u2581 \" + str ( linearSearch ( arr , n ) ) ) NEW_LINE"}
{"text":"Python program to check fixed point in an array using binary search","code":"def binarySearch ( arr , low , high ) : NEW_LINE INDENT if high >= low : NEW_LINE DEDENT"}
{"text":"Return - 1 if there is no Fixed Point","code":"return - 1 NEW_LINE"}
{"text":"Driver program to check above functions","code":"arr = [ - 10 , - 1 , 0 , 3 , 10 , 11 , 30 , 50 , 100 ] NEW_LINE n = len ( arr ) NEW_LINE print ( \" Fixed \u2581 Point \u2581 is \u2581 \" + str ( binarySearch ( arr , 0 , n - 1 ) ) ) NEW_LINE"}
{"text":"Python 3 code to find maximum triplet sum","code":"def maxTripletSum ( arr , n ) : NEW_LINE"}
{"text":"Initialize sum with INT_MIN","code":"sm = - 1000000 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT for k in range ( j + 1 , n ) : NEW_LINE INDENT if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) : NEW_LINE INDENT sm = arr [ i ] + arr [ j ] + arr [ k ] NEW_LINE DEDENT DEDENT DEDENT DEDENT return sm NEW_LINE"}
{"text":"Driven code","code":"arr = [ 1 , 0 , 8 , 6 , 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxTripletSum ( arr , n ) ) NEW_LINE"}
{"text":"This function assumes that there are at least three elements in arr [ ] .","code":"def maxTripletSum ( arr , n ) : NEW_LINE"}
{"text":"sort the given array","code":"arr . sort ( ) NEW_LINE"}
{"text":"After sorting the array . Add last three element of the given array","code":"return ( arr [ n - 1 ] + arr [ n - 2 ] + arr [ n - 3 ] ) NEW_LINE"}
{"text":"Driven code","code":"arr = [ 1 , 0 , 8 , 6 , 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxTripletSum ( arr , n ) ) NEW_LINE"}
{"text":"This function assumes that there are at least three elements in arr [ ] .","code":"def maxTripletSum ( arr , n ) : NEW_LINE"}
{"text":"Initialize Maximum , second maximum and third maximum element","code":"maxA = - 100000000 NEW_LINE maxB = - 100000000 NEW_LINE maxC = - 100000000 NEW_LINE for i in range ( 0 , n ) : NEW_LINE"}
{"text":"Update Maximum , second maximum and third maximum element","code":"if ( arr [ i ] > maxA ) : NEW_LINE INDENT maxC = maxB NEW_LINE maxB = maxA NEW_LINE maxA = arr [ i ] NEW_LINE DEDENT"}
{"text":"Update second maximum and third maximum element","code":"elif ( arr [ i ] > maxB ) : NEW_LINE INDENT maxC = maxB NEW_LINE maxB = arr [ i ] NEW_LINE DEDENT"}
{"text":"Update third maximum element","code":"elif ( arr [ i ] > maxC ) : NEW_LINE INDENT maxC = arr [ i ] NEW_LINE DEDENT return ( maxA + maxB + maxC ) NEW_LINE"}
{"text":"Driven code","code":"arr = [ 1 , 0 , 8 , 6 , 4 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE print ( maxTripletSum ( arr , n ) ) NEW_LINE"}
{"text":"Python3 code to linearly search x in arr [ ] . If x is present then return its location , otherwise return - 1","code":"def search ( arr , n , x ) : NEW_LINE INDENT for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] == x ) : NEW_LINE INDENT return i NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT"}
{"text":"Driver Code","code":"arr = [ 2 , 3 , 4 , 10 , 40 ] NEW_LINE x = 10 NEW_LINE n = len ( arr ) NEW_LINE"}
{"text":"Function call","code":"result = search ( arr , n , x ) NEW_LINE if ( result == - 1 ) : NEW_LINE INDENT print ( \" Element \u2581 is \u2581 not \u2581 present \u2581 in \u2581 array \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Element \u2581 is \u2581 present \u2581 at \u2581 index \" , result ) NEW_LINE DEDENT"}
{"text":"Python3 program for linear search","code":"def search ( arr , search_Element ) : NEW_LINE INDENT left = 0 NEW_LINE length = len ( arr ) NEW_LINE position = - 1 NEW_LINE right = length - 1 NEW_LINE DEDENT"}
{"text":"Run loop from 0 to right","code":"for left in range ( 0 , right , 1 ) : NEW_LINE"}
{"text":"If search_element is found with left variable","code":"if ( arr [ left ] == search_Element ) : NEW_LINE INDENT position = left NEW_LINE print ( \" Element \u2581 found \u2581 in \u2581 Array \u2581 at \u2581 \" , position + 1 , \" \u2581 Position \u2581 with \u2581 \" , left + 1 , \" \u2581 Attempt \" ) NEW_LINE break NEW_LINE DEDENT"}
{"text":"If search_element is found with right variable","code":"if ( arr [ right ] == search_Element ) : NEW_LINE INDENT position = right NEW_LINE print ( \" Element \u2581 found \u2581 in \u2581 Array \u2581 at \u2581 \" , position + 1 , \" \u2581 Position \u2581 with \u2581 \" , length - right , \" \u2581 Attempt \" ) NEW_LINE break NEW_LINE DEDENT left += 1 NEW_LINE right -= 1 NEW_LINE"}
{"text":"If element not found","code":"if ( position == - 1 ) : NEW_LINE INDENT print ( \" Not \u2581 found \u2581 in \u2581 Array \u2581 with \u2581 \" , left , \" \u2581 Attempt \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE search_element = 5 NEW_LINE"}
{"text":"Function call","code":"search ( arr , search_element ) NEW_LINE"}
{"text":"The main function that sort the given string arr [ ] in alphabetical order","code":"def countSort ( arr ) : NEW_LINE"}
{"text":"The output character array that will have sorted arr","code":"output = [ 0 for i in range ( len ( arr ) ) ] NEW_LINE"}
{"text":"Create a count array to store count of inidividul characters and initialize count array as 0","code":"count = [ 0 for i in range ( 256 ) ] NEW_LINE"}
{"text":"Store count of each character","code":"for i in arr : NEW_LINE INDENT count [ ord ( i ) ] += 1 NEW_LINE DEDENT"}
{"text":"Change count [ i ] so that count [ i ] now contains actual position of this character in output array","code":"for i in range ( 256 ) : NEW_LINE INDENT count [ i ] += count [ i - 1 ] NEW_LINE DEDENT"}
{"text":"Build the output character array","code":"for i in range ( len ( arr ) ) : NEW_LINE INDENT output [ count [ ord ( arr [ i ] ) ] - 1 ] = arr [ i ] NEW_LINE count [ ord ( arr [ i ] ) ] -= 1 NEW_LINE DEDENT"}
{"text":"Copy the output array to arr , so that arr now contains sorted characters","code":"ans = [ \" \" for _ in arr ] NEW_LINE for i in range ( len ( arr ) ) : NEW_LINE INDENT ans [ i ] = output [ i ] NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Driver program to test above function","code":"arr = \" geeksforgeeks \" NEW_LINE ans = countSort ( arr ) NEW_LINE print ( \" Sorted \u2581 character \u2581 array \u2581 is \u2581 % \u2581 s \" % ( \" \" . join ( ans ) ) ) NEW_LINE"}
{"text":"The function that sorts the given arr [ ]","code":"def count_sort ( arr ) : NEW_LINE INDENT max_element = int ( max ( arr ) ) NEW_LINE min_element = int ( min ( arr ) ) NEW_LINE range_of_elements = max_element - min_element + 1 NEW_LINE count_arr = [ 0 for _ in range ( range_of_elements ) ] NEW_LINE output_arr = [ 0 for _ in range ( len ( arr ) ) ] NEW_LINE for i in range ( 0 , len ( arr ) ) : NEW_LINE INDENT count_arr [ arr [ i ] - min_element ] += 1 NEW_LINE DEDENT for i in range ( 1 , len ( count_arr ) ) : NEW_LINE INDENT count_arr [ i ] += count_arr [ i - 1 ] NEW_LINE DEDENT for i in range ( len ( arr ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT output_arr [ count_arr [ arr [ i ] - min_element ] - 1 ] = arr [ i ] NEW_LINE count_arr [ arr [ i ] - min_element ] -= 1 NEW_LINE DEDENT for i in range ( 0 , len ( arr ) ) : NEW_LINE INDENT arr [ i ] = output_arr [ i ] NEW_LINE DEDENT return arr NEW_LINE DEDENT"}
{"text":"Driver program to test above function","code":"arr = [ - 5 , - 10 , 0 , - 3 , 8 , 5 , - 1 , 10 ] NEW_LINE ans = count_sort ( arr ) NEW_LINE print ( \" Sorted \u2581 character \u2581 array \u2581 is \u2581 \" + str ( ans ) ) NEW_LINE"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"def binomialCoeff ( n , k ) : NEW_LINE"}
{"text":"Base Cases","code":"if k > n : NEW_LINE INDENT return 0 NEW_LINE DEDENT if k == 0 or k == n : NEW_LINE INDENT return 1 NEW_LINE DEDENT"}
{"text":"Recursive Call","code":"return binomialCoeff ( n - 1 , k - 1 ) + binomialCoeff ( n - 1 , k ) NEW_LINE"}
{"text":"Driver Program to test ht above function","code":"n = 5 NEW_LINE k = 2 NEW_LINE print \" Value \u2581 of \u2581 C ( % d , % d ) \u2581 is \u2581 ( % d ) \" % ( n , k , binomialCoeff ( n , k ) ) NEW_LINE"}
{"text":"Python program for Optimized Dynamic Programming solution to Binomail Coefficient . This one uses the concept of pascal Triangle and less memory","code":"def binomialCoeff ( n , k ) : NEW_LINE INDENT C = [ 0 for i in xrange ( k + 1 ) ] NEW_LINE DEDENT"}
{"text":"since nC0 is 1","code":"C [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE"}
{"text":"Compute next row of pascal triangle using the previous row","code":"j = min ( i , k ) NEW_LINE while ( j > 0 ) : NEW_LINE INDENT C [ j ] = C [ j ] + C [ j - 1 ] NEW_LINE j -= 1 NEW_LINE DEDENT return C [ k ] NEW_LINE"}
{"text":"Driver Code","code":"n = 5 NEW_LINE k = 2 NEW_LINE print \" Value \u2581 of \u2581 C ( % d , % d ) \u2581 is \u2581 % d \" % ( n , k , binomialCoeff ( n , k ) ) NEW_LINE"}
{"text":"Python code for the above approach","code":"import math NEW_LINE class GFG : NEW_LINE"}
{"text":"Base case","code":"def nCr ( self , n , r ) : NEW_LINE INDENT if r > n : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT"}
{"text":"C ( n , r ) = C ( n , n - r ) Complexity for this code is lesser for lower n - r","code":"if n - r > r : NEW_LINE INDENT r = n - r NEW_LINE DEDENT"}
{"text":"set smallest prime factor of each number as itself","code":"SPF = [ i for i in range ( n + 1 ) ] NEW_LINE"}
{"text":"set smallest prime factor of all even numbers as 2","code":"for i in range ( 4 , n + 1 , 2 ) : NEW_LINE INDENT SPF [ i ] = 2 NEW_LINE DEDENT for i in range ( 3 , n + 1 , 2 ) : NEW_LINE INDENT if i * i > n : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT"}
{"text":"Check if i is prime","code":"if SPF [ i ] == i : NEW_LINE"}
{"text":"All multiples of i are composite ( and divisible by i ) so add i to their prime factorization getpow ( j , i ) times","code":"for j in range ( i * i , n + 1 , i ) : NEW_LINE INDENT if SPF [ j ] == j : NEW_LINE INDENT SPF [ j ] = i NEW_LINE DEDENT DEDENT"}
{"text":"dictionary to store power of each prime in C ( n , r )","code":"prime_pow = { } NEW_LINE"}
{"text":"For numerator count frequency of each prime factor","code":"for i in range ( r + 1 , n + 1 ) : NEW_LINE INDENT t = i NEW_LINE DEDENT"}
{"text":"Recursive division to find prime factorization of i","code":"while t > 1 : NEW_LINE INDENT if not SPF [ t ] in prime_pow : NEW_LINE INDENT prime_pow [ SPF [ t ] ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT prime_pow [ SPF [ t ] ] += 1 NEW_LINE DEDENT t \/\/= SPF [ t ] NEW_LINE DEDENT"}
{"text":"For denominator subtract the power of each prime factor","code":"for i in range ( 1 , n - r + 1 ) : NEW_LINE INDENT t = i NEW_LINE DEDENT"}
{"text":"Recursive division to find prime factorization of i","code":"while t > 1 : NEW_LINE INDENT prime_pow [ SPF [ t ] ] -= 1 NEW_LINE t \/\/= SPF [ t ] NEW_LINE DEDENT"}
{"text":"Use ( a * b ) % mod = ( a % mod * b % mod ) % mod","code":"for i in prime_pow : NEW_LINE"}
{"text":"pow ( base , exp , mod ) is used to find ( base ^ exp ) % mod fast","code":"ans = ( ans * pow ( i , prime_pow [ i ] , mod ) ) % mod NEW_LINE return ans NEW_LINE"}
{"text":"Driver code","code":"n = 5 NEW_LINE k = 2 NEW_LINE ob = GFG ( ) NEW_LINE print ( \" Value \u2581 of \u2581 C ( \" + str ( n ) + \" , \u2581 \" + str ( k ) + \" ) \u2581 is \" , ob . nCr ( n , k ) ) NEW_LINE"}
{"text":"Function to find binomial coefficient","code":"def binomialCoeff ( n , r ) : NEW_LINE INDENT if ( r > n ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT m = 1000000007 NEW_LINE inv = [ 0 for i in range ( r + 1 ) ] NEW_LINE inv [ 0 ] = 1 NEW_LINE if ( r + 1 >= 2 ) : NEW_LINE INDENT inv [ 1 ] = 1 NEW_LINE DEDENT DEDENT"}
{"text":"Getting the modular inversion for all the numbers from 2 to r with respect to m here m = 1000000007","code":"for i in range ( 2 , r + 1 ) : NEW_LINE INDENT inv [ i ] = m - ( m \/\/ i ) * inv [ m % i ] % m NEW_LINE DEDENT ans = 1 NEW_LINE"}
{"text":"for 1 \/ ( r ! ) part","code":"for i in range ( 2 , r + 1 ) : NEW_LINE INDENT ans = ( ( ans % m ) * ( inv [ i ] % m ) ) % m NEW_LINE DEDENT"}
{"text":"for ( n ) * ( n - 1 ) * ( n - 2 ) * ... * ( n - r + 1 ) part","code":"for i in range ( n , n - r , - 1 ) : NEW_LINE INDENT ans = ( ( ans % m ) * ( i % m ) ) % m NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Driver code","code":"n = 5 NEW_LINE r = 2 NEW_LINE print ( \" Value \u2581 of \u2581 C ( \" , n , \" , \u2581 \" , r , \" ) \u2581 is \u2581 \" , binomialCoeff ( n , r ) ) NEW_LINE"}
{"text":"Returns true if arr [ ] can be partitioned in two subsets of equal sum , otherwise false","code":"def findPartiion ( arr , n ) : NEW_LINE INDENT Sum = 0 NEW_LINE DEDENT"}
{"text":"Calculate sum of all elements","code":"for i in range ( n ) : NEW_LINE INDENT Sum += arr [ i ] NEW_LINE DEDENT if ( Sum % 2 != 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT part = [ 0 ] * ( ( Sum \/\/ 2 ) + 1 ) NEW_LINE"}
{"text":"Initialze the part array as 0","code":"for i in range ( ( Sum \/\/ 2 ) + 1 ) : NEW_LINE INDENT part [ i ] = 0 NEW_LINE DEDENT"}
{"text":"Fill the partition table in bottom up manner","code":"for i in range ( n ) : NEW_LINE"}
{"text":"the element to be included in the sum cannot be greater than the sum","code":"for j in range ( Sum \/\/ 2 , arr [ i ] - 1 , - 1 ) : NEW_LINE"}
{"text":"check if sum - arr [ i ] could be formed from a subset using elements before index i","code":"if ( part [ j - arr [ i ] ] == 1 or j == arr [ i ] ) : NEW_LINE INDENT part [ j ] = 1 NEW_LINE DEDENT return part [ Sum \/\/ 2 ] NEW_LINE"}
{"text":"Drive code","code":"arr = [ 1 , 3 , 3 , 2 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE"}
{"text":"Function call","code":"if ( findPartiion ( arr , n ) == 1 ) : NEW_LINE INDENT print ( \" Can \u2581 be \u2581 divided \u2581 into \u2581 two \u2581 subsets \u2581 of \u2581 equal \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Can \u2581 not \u2581 be \u2581 divided \u2581 into \u2581 two \u2581 subsets \u2581 of \u2581 equal \u2581 sum \" ) NEW_LINE DEDENT"}
{"text":"Returns true if there is a subset of set [ ] with sun equal to given sum","code":"def isSubsetSum ( set , n , sum ) : NEW_LINE"}
{"text":"Base Cases","code":"if ( sum == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT if ( n == 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"If last element is greater than sum , then ignore it","code":"if ( set [ n - 1 ] > sum ) : NEW_LINE INDENT return isSubsetSum ( set , n - 1 , sum ) NEW_LINE DEDENT"}
{"text":"else , check if sum can be obtained by any of the following ( a ) including the last element ( b ) excluding the last element","code":"return isSubsetSum ( set , n - 1 , sum ) or isSubsetSum ( set , n - 1 , sum - set [ n - 1 ] ) NEW_LINE"}
{"text":"Driver code","code":"set = [ 3 , 34 , 4 , 12 , 5 , 2 ] NEW_LINE sum = 9 NEW_LINE n = len ( set ) NEW_LINE if ( isSubsetSum ( set , n , sum ) == True ) : NEW_LINE INDENT print ( \" Found \u2581 a \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT"}
{"text":"Returns true if there is a subset of set [ ] with sun equal to given sum","code":"def isSubsetSum ( set , n , sum ) : NEW_LINE"}
{"text":"The value of subset [ i ] [ j ] will be true if there is a subset of set [ 0. . j - 1 ] with sum equal to i","code":"subset = ( [ [ False for i in range ( sum + 1 ) ] for i in range ( n + 1 ) ] ) NEW_LINE"}
{"text":"If sum is 0 , then answer is true","code":"for i in range ( n + 1 ) : NEW_LINE INDENT subset [ i ] [ 0 ] = True NEW_LINE DEDENT"}
{"text":"If sum is not 0 and set is empty , then answer is false","code":"for i in range ( 1 , sum + 1 ) : NEW_LINE INDENT subset [ 0 ] [ i ] = False NEW_LINE DEDENT"}
{"text":"Fill the subset table in botton up manner","code":"for i in range ( 1 , n + 1 ) : NEW_LINE INDENT for j in range ( 1 , sum + 1 ) : NEW_LINE INDENT if j < set [ i - 1 ] : NEW_LINE INDENT subset [ i ] [ j ] = subset [ i - 1 ] [ j ] NEW_LINE DEDENT if j >= set [ i - 1 ] : NEW_LINE INDENT subset [ i ] [ j ] = ( subset [ i - 1 ] [ j ] or subset [ i - 1 ] [ j - set [ i - 1 ] ] ) NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"print table","code":"for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( sum + 1 ) : NEW_LINE INDENT print ( subset [ i ] [ j ] , end = \" \u2581 \" ) NEW_LINE print ( ) NEW_LINE DEDENT DEDENT return subset [ n ] [ sum ] NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT set = [ 3 , 34 , 4 , 12 , 5 , 2 ] NEW_LINE sum = 9 NEW_LINE n = len ( set ) NEW_LINE if ( isSubsetSum ( set , n , sum ) == True ) : NEW_LINE INDENT print ( \" Found \u2581 a \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \u2581 subset \u2581 with \u2581 given \u2581 sum \" ) NEW_LINE DEDENT DEDENT"}
{"text":"A recursive function that returns the optimal length string for N keystrokes","code":"def findoptimal ( N ) : NEW_LINE"}
{"text":"The optimal string length is N when N is smaller than","code":"if N <= 6 : NEW_LINE INDENT return N NEW_LINE DEDENT"}
{"text":"Initialize result","code":"maxi = 0 NEW_LINE"}
{"text":"TRY ALL POSSIBLE BREAK - POINTS For any keystroke N , we need to loop from N - 3 keystrokes back to 1 keystroke to find a breakpoint ' b ' after which we will have Ctrl - A , Ctrl - C and then only Ctrl - V all the way .","code":"for b in range ( N - 3 , 0 , - 1 ) : NEW_LINE"}
{"text":"If the breakpoint is s at b 'th  keystroke then the optimal string  would have length  (n-b-1)*screen[b-1];","code":"curr = ( N - b - 1 ) * findoptimal ( b ) NEW_LINE if curr > maxi : NEW_LINE INDENT maxi = curr NEW_LINE DEDENT return maxi NEW_LINE"}
{"text":"Driver program","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"for the rest of the array we will rely on the previous entries to compute new ones","code":"for n in range ( 1 , 21 ) : NEW_LINE INDENT print ( ' Maximum \u2581 Number \u2581 of \u2581 As \u2581 with \u2581 ' , n , ' keystrokes \u2581 is \u2581 ' , findoptimal ( n ) ) NEW_LINE DEDENT"}
{"text":"this function returns the optimal length string for N keystrokes","code":"def findoptimal ( N ) : NEW_LINE"}
{"text":"The optimal string length is N when N is smaller than 7","code":"if ( N <= 6 ) : NEW_LINE INDENT return N NEW_LINE DEDENT"}
{"text":"An array to store result of subproblems","code":"screen = [ 0 ] * N NEW_LINE"}
{"text":"Initializing the optimal lengths array for uptil 6 input strokes .","code":"for n in range ( 1 , 7 ) : NEW_LINE INDENT screen [ n - 1 ] = n NEW_LINE DEDENT"}
{"text":"Solve all subproblems in bottom manner","code":"for n in range ( 7 , N + 1 ) : NEW_LINE"}
{"text":"Initialize length of optimal string for n keystrokes","code":"screen [ n - 1 ] = 0 NEW_LINE"}
{"text":"For any keystroke n , we need to loop from n - 3 keystrokes back to 1 keystroke to find a breakpoint ' b ' after which we will have ctrl - a , ctrl - c and then only ctrl - v all the way .","code":"for b in range ( n - 3 , 0 , - 1 ) : NEW_LINE"}
{"text":"if the breakpoint is at b 'th keystroke then  the optimal string would have length  (n-b-1)*screen[b-1];","code":"curr = ( n - b - 1 ) * screen [ b - 1 ] NEW_LINE if ( curr > screen [ n - 1 ] ) : NEW_LINE INDENT screen [ n - 1 ] = curr NEW_LINE DEDENT return screen [ N - 1 ] NEW_LINE"}
{"text":"Driver program","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"for the rest of the array we will rely on the previous entries to compute new ones","code":"for N in range ( 1 , 21 ) : NEW_LINE INDENT print ( \" Maximum \u2581 Number \u2581 of \u2581 A ' s \u2581 with \u2581 \" , N , \" \u2581 keystrokes \u2581 is \u2581 \" , findoptimal ( N ) ) NEW_LINE DEDENT"}
{"text":"this function returns the optimal length string for N keystrokes","code":"def findoptimal ( N ) : NEW_LINE"}
{"text":"The optimal string length is N when N is smaller than 7","code":"if ( N <= 6 ) : NEW_LINE INDENT return N NEW_LINE DEDENT"}
{"text":"An array to store result of subproblems","code":"screen = [ 0 ] * N NEW_LINE"}
{"text":"Initializing the optimal lengths array for uptil 6 input strokes .","code":"for n in range ( 1 , 7 ) : NEW_LINE INDENT screen [ n - 1 ] = n NEW_LINE DEDENT"}
{"text":"Solve all subproblems in bottom manner","code":"for n in range ( 7 , N + 1 ) : NEW_LINE"}
{"text":"for any keystroke n , we will need to choose between : - 1. pressing Ctrl - V once after copying the A ' s \u2581 obtained \u2581 by \u2581 n - 3 \u2581 keystrokes . \u2581 \u2581 2 . \u2581 pressing \u2581 Ctrl - V \u2581 twice \u2581 after \u2581 copying \u2581 the \u2581 A ' s obtained by n - 4 keystrokes . 3. pressing Ctrl - V thrice after copying the A 's  obtained by n-5 keystrokes.","code":"screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ; NEW_LINE return screen [ N - 1 ] NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"for the rest of the array we will rely on the previous entries to compute new ones","code":"for N in range ( 1 , 21 ) : NEW_LINE INDENT print ( \" Maximum \u2581 Number \u2581 of \u2581 A ' s \u2581 with \u2581 \" , N , \" \u2581 keystrokes \u2581 is \u2581 \" , findoptimal ( N ) ) NEW_LINE DEDENT"}
{"text":"Function to calculate x raised to the power y","code":"def power ( x , y ) : NEW_LINE INDENT if ( y == 0 ) : return 1 NEW_LINE elif ( int ( y % 2 ) == 0 ) : NEW_LINE INDENT return ( power ( x , int ( y \/ 2 ) ) * power ( x , int ( y \/ 2 ) ) ) NEW_LINE DEDENT else : NEW_LINE INDENT return ( x * power ( x , int ( y \/ 2 ) ) * power ( x , int ( y \/ 2 ) ) ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"x = 2 ; y = 3 NEW_LINE print ( power ( x , y ) ) NEW_LINE"}
{"text":"Function to calculate x raised to the power y in O ( logn )","code":"def power ( x , y ) : NEW_LINE INDENT temp = 0 NEW_LINE if ( y == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT temp = power ( x , int ( y \/ 2 ) ) NEW_LINE if ( y % 2 == 0 ) : NEW_LINE INDENT return temp * temp ; NEW_LINE DEDENT else : NEW_LINE INDENT return x * temp * temp ; NEW_LINE DEDENT DEDENT"}
{"text":"Python3 code for extended version of power function that can work for float x and negative y","code":"def power ( x , y ) : NEW_LINE INDENT if ( y == 0 ) : return 1 NEW_LINE temp = power ( x , int ( y \/ 2 ) ) NEW_LINE if ( y % 2 == 0 ) : NEW_LINE INDENT return temp * temp NEW_LINE DEDENT else : NEW_LINE INDENT if ( y > 0 ) : return x * temp * temp NEW_LINE else : return ( temp * temp ) \/ x NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"x , y = 2 , - 3 NEW_LINE print ( ' % .6f ' % ( power ( x , y ) ) ) NEW_LINE"}
{"text":"Python3 program for the above approach","code":"def power ( x , y ) : NEW_LINE"}
{"text":"If x ^ 0 return 1","code":"if ( y == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT"}
{"text":"If we need to find of 0 ^ y","code":"if ( x == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"For all other cases","code":"return x * power ( x , y - 1 ) NEW_LINE"}
{"text":"Driver Code","code":"x = 2 NEW_LINE y = 3 NEW_LINE print ( power ( x , y ) ) NEW_LINE"}
{"text":"Returns the square root of n . Note that the function","code":"def squareRoot ( n ) : NEW_LINE"}
{"text":"We are using n itself as initial approximation This can definitely be improved","code":"x = n NEW_LINE y = 1 NEW_LINE"}
{"text":"e decides the accuracy level","code":"e = 0.000001 NEW_LINE while ( x - y > e ) : NEW_LINE INDENT x = ( x + y ) \/ 2 NEW_LINE y = n \/ x NEW_LINE DEDENT return x NEW_LINE"}
{"text":"Driver program to test above function","code":"n = 50 NEW_LINE print ( \" Square \u2581 root \u2581 of \" , n , \" is \" , round ( squareRoot ( n ) , 6 ) ) NEW_LINE"}
{"text":"Returns the new average after including x","code":"def getAvg ( prev_avg , x , n ) : NEW_LINE INDENT return ( ( prev_avg * n + x ) \/ ( n + 1 ) ) ; NEW_LINE DEDENT"}
{"text":"Prints average of a stream of numbers","code":"def streamAvg ( arr , n ) : NEW_LINE INDENT avg = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT avg = getAvg ( avg , arr [ i ] , i ) ; NEW_LINE print ( \" Average \u2581 of \u2581 \" , i + 1 , \" \u2581 numbers \u2581 is \u2581 \" , avg ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"arr = [ 10 , 20 , 30 , 40 , 50 , 60 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE streamAvg ( arr , n ) ; NEW_LINE"}
{"text":"Returns the new average after including x","code":"def getAvg ( x , n , sum ) : NEW_LINE INDENT sum = sum + x ; NEW_LINE return float ( sum ) \/ n ; NEW_LINE DEDENT"}
{"text":"Prints average of a stream of numbers","code":"def streamAvg ( arr , n ) : NEW_LINE INDENT avg = 0 ; NEW_LINE sum = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT avg = getAvg ( arr [ i ] , i + 1 , sum ) ; NEW_LINE sum = avg * ( i + 1 ) ; NEW_LINE print ( \" Average \u2581 of \u2581 \" , end = \" \" ) ; NEW_LINE print ( i + 1 , end = \" \" ) ; NEW_LINE print ( \" \u2581 numbers \u2581 is \u2581 \" , end = \" \" ) ; NEW_LINE print ( avg ) ; NEW_LINE DEDENT return ; NEW_LINE DEDENT"}
{"text":"Driver Code","code":"arr = [ 10 , 20 , 30 , 40 , 50 , 60 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE streamAvg ( arr , n ) ; NEW_LINE"}
{"text":"Returns value of Binomial Coefficient C ( n , k )","code":"def binomialCoefficient ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE DEDENT"}
{"text":"since C ( n , k ) = C ( n , n - k )","code":"if ( k > n - k ) : NEW_LINE INDENT k = n - k NEW_LINE DEDENT"}
{"text":"Calculate value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- -- * 1 ]","code":"for i in range ( k ) : NEW_LINE INDENT res = res * ( n - i ) NEW_LINE res = res \/ ( i + 1 ) NEW_LINE DEDENT return res NEW_LINE"}
{"text":"Driver program to test above function","code":"n = 8 NEW_LINE k = 2 NEW_LINE res = binomialCoefficient ( n , k ) NEW_LINE print ( \" Value \u2581 of \u2581 C ( % \u2581 d , \u2581 % \u2581 d ) \u2581 is \u2581 % \u2581 d \" % ( n , k , res ) ) NEW_LINE"}
{"text":"Python program to print prime factors","code":"import math NEW_LINE"}
{"text":"A function to print all prime factors of a given number n","code":"def primeFactors ( n ) : NEW_LINE"}
{"text":"Print the number of two 's that divide n","code":"while n % 2 == 0 : NEW_LINE INDENT print 2 , NEW_LINE n = n \/ 2 NEW_LINE DEDENT"}
{"text":"n must be odd at this point so a skip of 2 ( i = i + 2 ) can be used","code":"for i in range ( 3 , int ( math . sqrt ( n ) ) + 1 , 2 ) : NEW_LINE"}
{"text":"while i divides n , print i ad divide n","code":"while n % i == 0 : NEW_LINE INDENT print i , NEW_LINE n = n \/ i NEW_LINE DEDENT"}
{"text":"Condition if n is a prime number greater than 2","code":"if n > 2 : NEW_LINE INDENT print n NEW_LINE DEDENT"}
{"text":"Driver Program to test above function","code":"n = 315 NEW_LINE primeFactors ( n ) NEW_LINE"}
{"text":"The main function that prints all combinations of size r in arr [ ] of size n . This function mainly uses combinationUtil ( )","code":"def printCombination ( arr , n , r ) : NEW_LINE"}
{"text":"A temporary array to store all combination one by one","code":"data = [ 0 ] * r ; NEW_LINE"}
{"text":"Print all combination using temprary array 'data[]","code":"combinationUtil ( arr , data , 0 , n - 1 , 0 , r ) ; NEW_LINE"}
{"text":"arr [ ] -- -> Input Array data [ ] -- -> Temporary array to store current combination start & end -- -> Staring and Ending indexes in arr [ ] index -- -> Current index in data [ ] r -- -> Size of a combination to be printed","code":"def combinationUtil ( arr , data , start , end , index , r ) : NEW_LINE"}
{"text":"Current combination is ready to be printed , print it","code":"if ( index == r ) : NEW_LINE INDENT for j in range ( r ) : NEW_LINE INDENT print ( data [ j ] , end = \" \u2581 \" ) ; NEW_LINE DEDENT print ( ) ; NEW_LINE return ; NEW_LINE DEDENT"}
{"text":"replace index with all possible elements . The condition \" end - i + 1 \u2581 > = \u2581 \u2581 r - index \" makes sure that including one element at index will make a combination with remaining elements at remaining positions","code":"i = start ; NEW_LINE while ( i <= end and end - i + 1 >= r - index ) : NEW_LINE INDENT data [ index ] = arr [ i ] ; NEW_LINE combinationUtil ( arr , data , i + 1 , end , index + 1 , r ) ; NEW_LINE i += 1 ; NEW_LINE DEDENT"}
{"text":"Driver Code","code":"arr = [ 1 , 2 , 3 , 4 , 5 ] ; NEW_LINE r = 3 ; NEW_LINE n = len ( arr ) ; NEW_LINE printCombination ( arr , n , r ) ; NEW_LINE"}
{"text":"The main function that prints all combinations of size r in arr [ ] of size n . This function mainly uses combinationUtil ( )","code":"def printCombination ( arr , n , r ) : NEW_LINE"}
{"text":"A temporary array to store all combination one by one","code":"data = [ 0 ] * r NEW_LINE"}
{"text":"Print all combination using temprary array 'data[]","code":"combinationUtil ( arr , n , r , 0 , data , 0 ) NEW_LINE"}
{"text":"arr [ ] -- -> Input Array n -- -> Size of input array r -- -> Size of a combination to be printed index -- -> Current index in data [ ] data [ ] -- -> Temporary array to store current combination i -- -> index of current element in arr [ ]","code":"def combinationUtil ( arr , n , r , index , data , i ) : NEW_LINE"}
{"text":"Current cobination is ready , print it","code":"if ( index == r ) : NEW_LINE INDENT for j in range ( r ) : NEW_LINE INDENT print ( data [ j ] , end = \" \u2581 \" ) NEW_LINE DEDENT print ( ) NEW_LINE return NEW_LINE DEDENT"}
{"text":"When no more elements are there to put in data [ ]","code":"if ( i >= n ) : NEW_LINE INDENT return NEW_LINE DEDENT"}
{"text":"current is included , put next at next location","code":"data [ index ] = arr [ i ] NEW_LINE combinationUtil ( arr , n , r , index + 1 , data , i + 1 ) NEW_LINE"}
{"text":"current is excluded , replace it with next ( Note that i + 1 is passed , but index is not changed )","code":"combinationUtil ( arr , n , r , index , data , i + 1 ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE r = 3 NEW_LINE n = len ( arr ) NEW_LINE printCombination ( arr , n , r ) NEW_LINE DEDENT"}
{"text":"Returns count of all possible groups that can be formed from elements of a [ ] .","code":"def findgroups ( arr , n ) : NEW_LINE"}
{"text":"Create an array C [ 3 ] to store counts of elements with remainder 0 , 1 and 2. c [ i ] would store count of elements with remainder i","code":"c = [ 0 , 0 , 0 ] NEW_LINE"}
{"text":"To store the result","code":"res = 0 NEW_LINE"}
{"text":"Count elements with remainder 0 , 1 and 2","code":"for i in range ( 0 , n ) : NEW_LINE INDENT c [ arr [ i ] % 3 ] += 1 NEW_LINE DEDENT"}
{"text":"Case 3. a : Count groups of size 2 from 0 remainder elements","code":"res += ( ( c [ 0 ] * ( c [ 0 ] - 1 ) ) >> 1 ) NEW_LINE"}
{"text":"Case 3. b : Count groups of size 2 with one element with 1 remainder and other with 2 remainder","code":"res += c [ 1 ] * c [ 2 ] NEW_LINE"}
{"text":"Case 4. a : Count groups of size 3 with all 0 remainder elements","code":"res += ( c [ 0 ] * ( c [ 0 ] - 1 ) * ( c [ 0 ] - 2 ) ) \/ 6 NEW_LINE"}
{"text":"Case 4. b : Count groups of size 3 with all 1 remainder elements","code":"res += ( c [ 1 ] * ( c [ 1 ] - 1 ) * ( c [ 1 ] - 2 ) ) \/ 6 NEW_LINE"}
{"text":"Case 4. c : Count groups of size 3 with all 2 remainder elements","code":"res += ( ( c [ 2 ] * ( c [ 2 ] - 1 ) * ( c [ 2 ] - 2 ) ) \/ 6 ) NEW_LINE"}
{"text":"Case 4. c : Count groups of size 3 with different remainders","code":"res += c [ 0 ] * c [ 1 ] * c [ 2 ] NEW_LINE"}
{"text":"Return total count stored in res","code":"return res NEW_LINE"}
{"text":"Driver program","code":"arr = [ 3 , 6 , 7 , 2 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE print ( \" Required \u2581 number \u2581 of \u2581 groups \u2581 are \" , int ( findgroups ( arr , n ) ) ) NEW_LINE"}
{"text":"First n in the below condition is for the case where n is 0","code":"if ( n and not ( n & ( n - 1 ) ) ) : NEW_LINE INDENT return n NEW_LINE DEDENT while ( n != 0 ) : NEW_LINE INDENT n >>= 1 NEW_LINE count += 1 NEW_LINE DEDENT return 1 << count ; NEW_LINE"}
{"text":"Driver Code","code":"n = 0 NEW_LINE print ( nextPowerOf2 ( n ) ) NEW_LINE"}
{"text":"Driver Code","code":"n = 5 NEW_LINE print ( nextPowerOf2 ( n ) ) ; NEW_LINE"}
{"text":"Finds next power of two for n . If n itself is a power of two then returns n","code":"def nextPowerOf2 ( n ) : NEW_LINE INDENT n -= 1 NEW_LINE n |= n >> 1 NEW_LINE n |= n >> 2 NEW_LINE n |= n >> 4 NEW_LINE n |= n >> 8 NEW_LINE n |= n >> 16 NEW_LINE n += 1 NEW_LINE return n NEW_LINE DEDENT"}
{"text":"Driver program to test above function","code":"n = 5 NEW_LINE print ( nextPowerOf2 ( n ) ) NEW_LINE"}
{"text":"Function to segregate 0 s and 1 s","code":"def segregate0and1 ( arr , n ) : NEW_LINE"}
{"text":"Counts the no of zeros in arr","code":"count = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT if ( arr [ i ] == 0 ) : NEW_LINE INDENT count = count + 1 NEW_LINE DEDENT DEDENT"}
{"text":"Loop fills the arr with 0 until count","code":"for i in range ( 0 , count ) : NEW_LINE INDENT arr [ i ] = 0 NEW_LINE DEDENT"}
{"text":"Loop fills remaining arr space with 1","code":"for i in range ( count , n ) : NEW_LINE INDENT arr [ i ] = 1 NEW_LINE DEDENT"}
{"text":"Function to print segregated array","code":"def print_arr ( arr , n ) : NEW_LINE INDENT print ( \" Array \u2581 after \u2581 segregation \u2581 is \u2581 \" , end = \" \" ) NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT print ( arr [ i ] , end = \" \u2581 \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver function","code":"arr = [ 0 , 1 , 0 , 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE segregate0and1 ( arr , n ) NEW_LINE print_arr ( arr , n ) NEW_LINE"}
{"text":"Function to put all 0 s on left and all 1 s on right","code":"def segregate0and1 ( arr , size ) : NEW_LINE"}
{"text":"Initialize left and right indexes","code":"left , right = 0 , size - 1 NEW_LINE while left < right : NEW_LINE"}
{"text":"Increment left index while we see 0 at left","code":"while arr [ left ] == 0 and left < right : NEW_LINE INDENT left += 1 NEW_LINE DEDENT"}
{"text":"Decrement right index while we see 1 at right","code":"while arr [ right ] == 1 and left < right : NEW_LINE INDENT right -= 1 NEW_LINE DEDENT"}
{"text":"If left is smaller than right then there is a 1 at left and a 0 at right . Exchange arr [ left ] and arr [ right ]","code":"if left < right : NEW_LINE INDENT arr [ left ] = 0 NEW_LINE arr [ right ] = 1 NEW_LINE left += 1 NEW_LINE right -= 1 NEW_LINE DEDENT return arr NEW_LINE"}
{"text":"driver program to test","code":"arr = [ 0 , 1 , 0 , 1 , 1 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE print ( \" Array \u2581 after \u2581 segregation \" ) NEW_LINE print ( segregate0and1 ( arr , arr_size ) ) NEW_LINE"}
{"text":"Function to put all 0 s on left and all 1 s on right","code":"def segregate0and1 ( arr , size ) : NEW_LINE INDENT type0 = 0 NEW_LINE type1 = size - 1 NEW_LINE while ( type0 < type1 ) : NEW_LINE INDENT if ( arr [ type0 ] == 1 ) : NEW_LINE INDENT ( arr [ type0 ] , arr [ type1 ] ) = ( arr [ type1 ] , arr [ type0 ] ) NEW_LINE type1 -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT type0 += 1 NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Driver Code","code":"arr = [ 0 , 1 , 0 , 1 , 1 , 1 ] NEW_LINE arr_size = len ( arr ) NEW_LINE segregate0and1 ( arr , arr_size ) NEW_LINE print ( \" Array \u2581 after \u2581 segregation \u2581 is \" , end = \" \u2581 \" ) NEW_LINE for i in range ( 0 , arr_size ) : NEW_LINE INDENT print ( arr [ i ] , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Python program to check if we can make neighbors distinct .","code":"def distantAdjacentElement ( a , n ) : NEW_LINE"}
{"text":"dict used to count the frequency of each element occurring in the array","code":"m = dict ( ) NEW_LINE"}
{"text":"In this loop we count the frequency of element through map m","code":"for i in range ( n ) : NEW_LINE INDENT if a [ i ] in m : NEW_LINE INDENT m [ a [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ a [ i ] ] = 1 NEW_LINE DEDENT DEDENT"}
{"text":"mx store the frequency of element which occurs most in array .","code":"mx = 0 NEW_LINE"}
{"text":"In this loop we calculate the maximum frequency and store it in variable mx .","code":"for i in range ( n ) : NEW_LINE INDENT if mx < m [ a [ i ] ] : NEW_LINE INDENT mx = m [ a [ i ] ] NEW_LINE DEDENT DEDENT"}
{"text":"By swapping we can adjust array only when the frequency of the element which occurs most is less than or equal to ( n + 1 ) \/ 2 .","code":"if mx > ( n + 1 ) \/\/ 2 : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 7 , 7 , 7 , 7 ] NEW_LINE n = len ( a ) NEW_LINE distantAdjacentElement ( a , n ) NEW_LINE DEDENT"}
{"text":"For a given array arr [ ] , returns the maximum j a i such that arr [ j ] > arr [ i ]","code":"def maxIndexDiff ( arr , n ) : NEW_LINE INDENT maxDiff = - 1 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT j = n - 1 NEW_LINE while ( j > i ) : NEW_LINE INDENT if arr [ j ] > arr [ i ] and maxDiff < ( j - i ) : NEW_LINE INDENT maxDiff = j - i NEW_LINE DEDENT j -= 1 NEW_LINE DEDENT DEDENT return maxDiff NEW_LINE DEDENT"}
{"text":"driver code","code":"arr = [ 9 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 18 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE maxDiff = maxIndexDiff ( arr , n ) NEW_LINE print ( maxDiff ) NEW_LINE"}
{"text":"For a given array arr , calculates the maximum j a i such that arr [ j ] > arr [ i ]","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT v = [ 34 , 8 , 10 , 3 , 2 , 80 , 30 , 33 , 1 ] ; NEW_LINE n = len ( v ) ; NEW_LINE maxFromEnd = [ - 38749432 ] * ( n + 1 ) ; NEW_LINE DEDENT"}
{"text":"Create an array maxfromEnd","code":"for i in range ( n - 1 , 0 , - 1 ) : NEW_LINE INDENT maxFromEnd [ i ] = max ( maxFromEnd [ i + 1 ] , v [ i ] ) ; NEW_LINE DEDENT result = 0 ; NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT low = i + 1 ; high = n - 1 ; ans = i ; NEW_LINE while ( low <= high ) : NEW_LINE INDENT mid = int ( ( low + high ) \/ 2 ) ; NEW_LINE if ( v [ i ] <= maxFromEnd [ mid ] ) : NEW_LINE DEDENT DEDENT"}
{"text":"We store this as current answer and look for further larger number to the right side","code":"ans = max ( ans , mid ) ; NEW_LINE low = mid + 1 ; NEW_LINE else : NEW_LINE high = mid - 1 ; NEW_LINE"}
{"text":"Keeping a track of the maximum difference in indices","code":"result = max ( result , ans - i ) ; NEW_LINE print ( result , end = \" \" ) ; NEW_LINE"}
{"text":"Python3 program to print sorted distinct elements .","code":"def printRepeating ( arr , size ) : NEW_LINE"}
{"text":"Create a set using array elements","code":"s = set ( ) NEW_LINE for i in range ( size ) : NEW_LINE INDENT if arr [ i ] not in s : NEW_LINE INDENT s . add ( arr [ i ] ) NEW_LINE DEDENT DEDENT"}
{"text":"Print contents of the set .","code":"for i in s : NEW_LINE INDENT print ( i , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 3 , 2 , 2 , 1 ] NEW_LINE size = len ( arr ) NEW_LINE printRepeating ( arr , size ) NEW_LINE DEDENT"}
{"text":"Function returns the minimum number of swaps required to sort the array This method is taken from below post https : www . geeksforgeeks . org \/ minimum - number - swaps - required - sort - array \/","code":"def minSwapsToSort ( arr , n ) : NEW_LINE"}
{"text":"Create an array of pairs where first element is array element and second element is position of first element","code":"arrPos = [ [ 0 for x in range ( 2 ) ] for y in range ( n ) ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT arrPos [ i ] [ 0 ] = arr [ i ] NEW_LINE arrPos [ i ] [ 1 ] = i NEW_LINE DEDENT"}
{"text":"Sort the array by array element values to get right position of every element as second element of pair .","code":"arrPos . sort ( ) NEW_LINE"}
{"text":"To keep track of visited elements . Initialize all elements as not visited or false .","code":"vis = [ False ] * ( n ) NEW_LINE"}
{"text":"Initialize result","code":"ans = 0 NEW_LINE"}
{"text":"Traverse array elements","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Already swapped and corrected or already present at correct pos","code":"if ( vis [ i ] or arrPos [ i ] [ 1 ] == i ) : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"Find out the number of node in this cycle and add in ans","code":"cycle_size = 0 NEW_LINE j = i NEW_LINE while ( not vis [ j ] ) : NEW_LINE INDENT vis [ j ] = 1 NEW_LINE DEDENT"}
{"text":"Move to next node","code":"j = arrPos [ j ] [ 1 ] NEW_LINE cycle_size += 1 NEW_LINE"}
{"text":"Update answer by adding current cycle .","code":"ans += ( cycle_size - 1 ) NEW_LINE"}
{"text":"Return result","code":"return ans NEW_LINE"}
{"text":"Method returns minimum number of swap to mak array B same as array A","code":"def minSwapToMakeArraySame ( a , b , n ) : NEW_LINE"}
{"text":"map to store position of elements in array B we basically store element to index mapping .","code":"mp = { } NEW_LINE for i in range ( n ) : NEW_LINE INDENT mp [ b [ i ] ] = i NEW_LINE DEDENT"}
{"text":"now we 're storing position  of array A elements  in array B.","code":"for i in range ( n ) : NEW_LINE INDENT b [ i ] = mp [ a [ i ] ] NEW_LINE DEDENT"}
{"text":"Returing minimum swap for sorting in modified array B as final answer","code":"return minSwapsToSort ( b , n ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 3 , 6 , 4 , 8 ] NEW_LINE b = [ 4 , 6 , 8 , 3 ] NEW_LINE n = len ( a ) NEW_LINE print ( minSwapToMakeArraySame ( a , b , n ) ) NEW_LINE DEDENT"}
{"text":"Function to find k - th missing element","code":"def missingK ( a , k , n ) : NEW_LINE INDENT difference = 0 NEW_LINE ans = 0 NEW_LINE count = k NEW_LINE flag = 0 NEW_LINE DEDENT"}
{"text":"interating over the array","code":"for i in range ( 0 , n - 1 ) : NEW_LINE INDENT difference = 0 NEW_LINE DEDENT"}
{"text":"check if i - th and ( i + 1 ) - th element are not consecutive","code":"if ( ( a [ i ] + 1 ) != a [ i + 1 ] ) : NEW_LINE"}
{"text":"save their difference","code":"difference += ( a [ i + 1 ] - a [ i ] ) - 1 NEW_LINE"}
{"text":"check for difference and given k","code":"if ( difference >= count ) : NEW_LINE INDENT ans = a [ i ] + count NEW_LINE flag = 1 NEW_LINE break NEW_LINE DEDENT else : NEW_LINE INDENT count -= difference NEW_LINE DEDENT"}
{"text":"if found","code":"if ( flag ) : NEW_LINE INDENT return ans NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"Input array","code":"a = [ 1 , 5 , 11 , 19 ] NEW_LINE"}
{"text":"k - th missing element to be found in the array","code":"k = 11 NEW_LINE n = len ( a ) NEW_LINE"}
{"text":"calling function to find missing element","code":"missing = missingK ( a , k , n ) NEW_LINE print ( missing ) NEW_LINE"}
{"text":"Function to find kth missing number","code":"def missingK ( arr , k ) : NEW_LINE INDENT n = len ( arr ) NEW_LINE l = 0 NEW_LINE u = n - 1 NEW_LINE mid = 0 NEW_LINE while ( l <= u ) : NEW_LINE INDENT mid = ( l + u ) \/\/ 2 ; NEW_LINE numbers_less_than_mid = arr [ mid ] - ( mid + 1 ) ; NEW_LINE DEDENT DEDENT"}
{"text":"If the total missing number count is equal to k we can iterate backwards for the first missing number and that will be the answer .","code":"if ( numbers_less_than_mid == k ) : NEW_LINE"}
{"text":"To further optimize we check if the previous element ' s \u2581 \u2581 missing \u2581 number \u2581 count \u2581 is \u2581 equal \u2581 \u2581 to \u2581 k . \u2581 Eg : \u2581 arr \u2581 = \u2581 [ 4,5,6,7,8 ] \u2581 \u2581 If \u2581 you \u2581 observe \u2581 in \u2581 the \u2581 example \u2581 array , \u2581 \u2581 the \u2581 total \u2581 count \u2581 of \u2581 missing \u2581 numbers \u2581 for \u2581 all \u2581 \u2581 the \u2581 indices \u2581 are \u2581 same , \u2581 and \u2581 we \u2581 are \u2581 \u2581 aiming \u2581 to \u2581 narrow \u2581 down \u2581 the \u2581 \u2581 search \u2581 window \u2581 and \u2581 achieve \u2581 O ( logn ) \u2581 \u2581 time \u2581 complexity \u2581 which \u2581 \u2581 otherwise \u2581 would ' ve been O ( n ) .","code":"if ( mid > 0 and ( arr [ mid - 1 ] - ( mid ) ) == k ) : NEW_LINE INDENT u = mid - 1 ; NEW_LINE continue ; NEW_LINE DEDENT"}
{"text":"Else we return arr [ mid ] - 1.","code":"return arr [ mid ] - 1 ; NEW_LINE"}
{"text":"Here we appropriately narrow down the search window .","code":"if ( numbers_less_than_mid < k ) : NEW_LINE l = mid + 1 ; NEW_LINE elif ( k < numbers_less_than_mid ) : NEW_LINE u = mid - 1 ; NEW_LINE"}
{"text":"In case the upper limit is - ve it means the missing number set is 1 , 2 , . . , k and hence we directly return k .","code":"INDENT if ( u < 0 ) : NEW_LINE INDENT return k ; NEW_LINE DEDENT DEDENT"}
{"text":"Else we find the residual count of numbers which we 'd then add to  arr[u] and get the missing kth number.","code":"INDENT less = arr [ u ] - ( u + 1 ) ; NEW_LINE k -= less ; NEW_LINE DEDENT"}
{"text":"Return arr [ u ] + k","code":"INDENT return arr [ u ] + k ; NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 3 , 4 , 7 , 11 ] ; NEW_LINE k = 5 ; NEW_LINE DEDENT"}
{"text":"Function Call","code":"print ( \" Missing \u2581 kth \u2581 number \u2581 = \u2581 \" + str ( missingK ( arr , k ) ) ) NEW_LINE"}
{"text":"Link list node","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . next = next NEW_LINE DEDENT DEDENT"}
{"text":"A utility function to print linked list","code":"def printList ( node ) : NEW_LINE INDENT while ( node != None ) : NEW_LINE INDENT print ( node . data , end = \" \u2581 \" ) NEW_LINE node = node . next NEW_LINE DEDENT print ( \" \" ) NEW_LINE DEDENT"}
{"text":"Function to create newNode in a linkedlist","code":"def newNode ( key ) : NEW_LINE INDENT temp = Node ( 0 ) NEW_LINE temp . data = key NEW_LINE temp . next = None NEW_LINE return temp NEW_LINE DEDENT"}
{"text":"Function to insert at beginning","code":"def insertBeg ( head , val ) : NEW_LINE INDENT temp = newNode ( val ) NEW_LINE temp . next = head NEW_LINE head = temp NEW_LINE return head NEW_LINE DEDENT"}
{"text":"Function to rearrange the odd and even nodes","code":"def rearrangeOddEven ( head ) : NEW_LINE INDENT odd = [ ] NEW_LINE even = [ ] NEW_LINE i = 1 NEW_LINE while ( head != None ) : NEW_LINE INDENT if ( head . data % 2 != 0 and i % 2 == 0 ) : NEW_LINE DEDENT DEDENT"}
{"text":"Odd Value in Even Position Add pointer to current node in odd stack","code":"odd . append ( head ) NEW_LINE elif ( head . data % 2 == 0 and i % 2 != 0 ) : NEW_LINE"}
{"text":"Even Value in Odd Position Add pointer to current node in even stack","code":"even . append ( head ) NEW_LINE head = head . next NEW_LINE i = i + 1 NEW_LINE while ( len ( odd ) != 0 and len ( even ) != 0 ) : NEW_LINE"}
{"text":"Swap Data at the top of two stacks","code":"odd [ - 1 ] . data , even [ - 1 ] . data = even [ - 1 ] . data , odd [ - 1 ] . data NEW_LINE odd . pop ( ) NEW_LINE even . pop ( ) NEW_LINE return head NEW_LINE"}
{"text":"Driver code","code":"head = newNode ( 8 ) NEW_LINE head = insertBeg ( head , 7 ) NEW_LINE head = insertBeg ( head , 6 ) NEW_LINE head = insertBeg ( head , 5 ) NEW_LINE head = insertBeg ( head , 3 ) NEW_LINE head = insertBeg ( head , 2 ) NEW_LINE head = insertBeg ( head , 1 ) NEW_LINE print ( \" Linked \u2581 List : \" ) NEW_LINE printList ( head ) NEW_LINE rearrangeOddEven ( head ) NEW_LINE print ( \" Linked \u2581 List \u2581 after \u2581 \" , \" Rearranging : \" ) NEW_LINE printList ( head ) NEW_LINE"}
{"text":"Structure node","code":"class Node : NEW_LINE INDENT def __init__ ( self ) : NEW_LINE INDENT self . data = 0 NEW_LINE self . next = None NEW_LINE DEDENT DEDENT"}
{"text":"A utility function to print linked list","code":"def printList ( node ) : NEW_LINE INDENT while ( node != None ) : NEW_LINE INDENT print ( node . data , end = \" \u2581 \" ) NEW_LINE node = node . next NEW_LINE DEDENT print ( \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Function to create newNode in a linkedlist","code":"def newNode ( key ) : NEW_LINE INDENT temp = Node ( ) NEW_LINE temp . data = key NEW_LINE temp . next = None NEW_LINE return temp NEW_LINE DEDENT"}
{"text":"Function to insert at beginning","code":"def insertBeg ( head , val ) : NEW_LINE INDENT temp = newNode ( val ) NEW_LINE temp . next = head NEW_LINE head = temp NEW_LINE return head NEW_LINE DEDENT"}
{"text":"Function to rearrange the odd and even nodes","code":"def rearrange ( head ) : NEW_LINE"}
{"text":"Step 1 : Segregate even and odd nodes Step 2 : Split odd and even lists Step 3 : Merge even list into odd list","code":"even = None NEW_LINE temp = None NEW_LINE prev_temp = None NEW_LINE i = None NEW_LINE j = None NEW_LINE k = None NEW_LINE l = None NEW_LINE ptr = None NEW_LINE"}
{"text":"Step 1 : Segregate Odd and Even Nodes","code":"temp = ( head ) . next NEW_LINE prev_temp = head NEW_LINE while ( temp != None ) : NEW_LINE"}
{"text":"Backup next pointer of temp","code":"x = temp . next NEW_LINE"}
{"text":"If temp is odd move the node to beginning of list","code":"if ( temp . data % 2 != 0 ) : NEW_LINE INDENT prev_temp . next = x NEW_LINE temp . next = ( head ) NEW_LINE ( head ) = temp NEW_LINE DEDENT else : NEW_LINE INDENT prev_temp = temp NEW_LINE DEDENT"}
{"text":"Advance Temp Pointer","code":"temp = x NEW_LINE"}
{"text":"Step 2 Split the List into Odd and even","code":"temp = ( head ) . next NEW_LINE prev_temp = ( head ) NEW_LINE while ( temp != None and temp . data % 2 != 0 ) : NEW_LINE INDENT prev_temp = temp NEW_LINE temp = temp . next NEW_LINE DEDENT even = temp NEW_LINE"}
{"text":"End the odd List ( Make last node None )","code":"prev_temp . next = None NEW_LINE"}
{"text":"Step 3 : Merge Even List into odd","code":"i = head NEW_LINE j = even NEW_LINE while ( j != None and i != None ) : NEW_LINE"}
{"text":"While both lists are not exhausted Backup next pointers of i and j","code":"k = i . next NEW_LINE l = j . next NEW_LINE i . next = j NEW_LINE j . next = k NEW_LINE"}
{"text":"ptr points to the latest node added","code":"ptr = j NEW_LINE"}
{"text":"Advance i and j pointers","code":"i = k NEW_LINE j = l NEW_LINE if ( i == None ) : NEW_LINE"}
{"text":"Odd list exhausts before even , append remainder of even list to odd .","code":"ptr . next = j NEW_LINE"}
{"text":"The case where even list exhausts before odd list is automatically handled since we merge the even list into the odd list","code":"return head NEW_LINE"}
{"text":"Driver Code","code":"head = newNode ( 8 ) NEW_LINE head = insertBeg ( head , 7 ) NEW_LINE head = insertBeg ( head , 6 ) NEW_LINE head = insertBeg ( head , 3 ) NEW_LINE head = insertBeg ( head , 5 ) NEW_LINE head = insertBeg ( head , 1 ) NEW_LINE head = insertBeg ( head , 2 ) NEW_LINE head = insertBeg ( head , 10 ) NEW_LINE print ( \" Linked \u2581 List : \" ) NEW_LINE printList ( head ) NEW_LINE print ( \" Rearranged \u2581 List \" ) NEW_LINE head = rearrange ( head ) NEW_LINE printList ( head ) NEW_LINE"}
{"text":"Function to print the matrix","code":"def printMat ( mat ) : NEW_LINE"}
{"text":"Iterate over the rows","code":"for i in range ( len ( mat ) ) : NEW_LINE"}
{"text":"Iterate over the columns","code":"for j in range ( len ( mat [ 0 ] ) ) : NEW_LINE"}
{"text":"Print the value","code":"print ( mat [ i ] [ j ] , end = \" \u2581 \" ) NEW_LINE print ( ) NEW_LINE"}
{"text":"Function to perform the swapping of matrix elements in clockwise manner","code":"def performSwap ( mat , i , j ) : NEW_LINE INDENT N = len ( mat ) NEW_LINE DEDENT"}
{"text":"Stores the last row","code":"ei = N - 1 - i NEW_LINE"}
{"text":"Stores the last column","code":"ej = N - 1 - j NEW_LINE"}
{"text":"Perform the swaps","code":"temp = mat [ i ] [ j ] NEW_LINE mat [ i ] [ j ] = mat [ ej ] [ i ] NEW_LINE mat [ ej ] [ i ] = mat [ ei ] [ ej ] NEW_LINE mat [ ei ] [ ej ] = mat [ j ] [ ei ] NEW_LINE mat [ j ] [ ei ] = temp NEW_LINE"}
{"text":"Function to rotate non - diagonal elements of the matrix K times in clockwise direction","code":"def rotate ( mat , N , K ) : NEW_LINE"}
{"text":"Update K to K % 4","code":"K = K % 4 NEW_LINE"}
{"text":"Iterate until K is positive","code":"while ( K > 0 ) : NEW_LINE"}
{"text":"Iterate each up to N \/ 2 - th row","code":"for i in range ( int ( N \/ 2 ) ) : NEW_LINE"}
{"text":"Iterate each column from i to N - i - 1","code":"for j in range ( i , N - i - 1 ) : NEW_LINE"}
{"text":"Check if the element at i , j is not a diagonal element","code":"if ( i != j and ( i + j ) != N - 1 ) : NEW_LINE"}
{"text":"Perform the swapping","code":"performSwap ( mat , i , j ) NEW_LINE K -= 1 NEW_LINE"}
{"text":"Print the matrix","code":"printMat ( mat ) NEW_LINE"}
{"text":"Driver Code","code":"K = 5 NEW_LINE mat = [ [ 1 , 2 , 3 , 4 ] , [ 6 , 7 , 8 , 9 ] , [ 11 , 12 , 13 , 14 ] , [ 16 , 17 , 18 , 19 ] ] NEW_LINE N = len ( mat ) NEW_LINE rotate ( mat , N , K ) NEW_LINE"}
{"text":"Returns count of rotations to get the same string back .","code":"def findRotations ( str ) : NEW_LINE"}
{"text":"tmp is the concatenated string .","code":"tmp = str + str NEW_LINE n = len ( str ) NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE"}
{"text":"substring from i index of original string size .","code":"substring = tmp [ i : i + n ] NEW_LINE"}
{"text":"if substring matches with original string then we will come out of the loop .","code":"if ( str == substring ) : NEW_LINE INDENT return i NEW_LINE DEDENT return n NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = \" abc \" NEW_LINE print ( findRotations ( str ) ) NEW_LINE DEDENT"}
{"text":"Python3 implementation to find elements that are a power of two","code":"MAX = 10000 NEW_LINE"}
{"text":"prefix [ i ] is going to store the number of elements which are a power of two till i ( including i ) .","code":"prefix = [ 0 ] * ( MAX + 1 ) NEW_LINE def isPowerOfTwo ( x ) : NEW_LINE INDENT if ( x and ( not ( x & ( x - 1 ) ) ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT"}
{"text":"Function to find the maximum range whose sum is divisible by M .","code":"def computePrefix ( n , a ) : NEW_LINE"}
{"text":"Calculate the prefix sum","code":"if ( isPowerOfTwo ( a [ 0 ] ) ) : NEW_LINE INDENT prefix [ 0 ] = 1 NEW_LINE DEDENT for i in range ( 1 , n ) : NEW_LINE INDENT prefix [ i ] = prefix [ i - 1 ] NEW_LINE if ( isPowerOfTwo ( a [ i ] ) ) : NEW_LINE INDENT prefix [ i ] += 1 NEW_LINE DEDENT DEDENT"}
{"text":"Function to return the number of elements which are a power of two in a subarray","code":"def query ( L , R ) : NEW_LINE INDENT return prefix [ R ] - prefix [ L - 1 ] NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT A = [ 3 , 8 , 5 , 2 , 5 , 10 ] NEW_LINE N = len ( A ) NEW_LINE Q = 2 NEW_LINE computePrefix ( N , A ) NEW_LINE print ( query ( 0 , 4 ) ) NEW_LINE print ( query ( 3 , 5 ) ) NEW_LINE DEDENT"}
{"text":"Function to calculate the integral points inside a square","code":"def countIntgralPoints ( x1 , y1 , x2 , y2 ) : NEW_LINE INDENT print ( ( y2 - y1 - 1 ) * ( x2 - x1 - 1 ) ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT x1 = 1 NEW_LINE y1 = 1 NEW_LINE x2 = 4 NEW_LINE y2 = 4 NEW_LINE countIntgralPoints ( x1 , y1 , x2 , y2 ) NEW_LINE DEDENT"}
{"text":"Function to find the next distinct digits number","code":"def findNextNumber ( n ) : NEW_LINE INDENT h = [ 0 for i in range ( 10 ) ] NEW_LINE i = 0 NEW_LINE msb = n NEW_LINE rem = 0 NEW_LINE next_num = - 1 NEW_LINE count = 0 NEW_LINE DEDENT"}
{"text":"Loop to find the distinct digits using hash array and the number of digits","code":"while ( msb > 9 ) : NEW_LINE INDENT rem = msb % 10 NEW_LINE h [ rem ] = 1 NEW_LINE msb \/\/= 10 NEW_LINE count += 1 NEW_LINE DEDENT h [ msb ] = 1 NEW_LINE count += 1 NEW_LINE"}
{"text":"Loop to find the most significant distinct digit of the next number","code":"for i in range ( msb + 1 , 10 , 1 ) : NEW_LINE INDENT if ( h [ i ] == 0 ) : NEW_LINE INDENT next_num = i NEW_LINE break NEW_LINE DEDENT DEDENT"}
{"text":"Condition to check if the number is possible with the same number of digits count","code":"if ( next_num == - 1 ) : NEW_LINE INDENT for i in range ( 1 , msb , 1 ) : NEW_LINE INDENT if ( h [ i ] == 0 ) : NEW_LINE INDENT next_num = i NEW_LINE count += 1 NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Condition to check if the desired most siginificant distinct digit is found","code":"if ( next_num > 0 ) : NEW_LINE"}
{"text":"Loop to find the minimum next digit which is not present in the number","code":"for i in range ( 0 , 10 , 1 ) : NEW_LINE INDENT if ( h [ i ] == 0 ) : NEW_LINE INDENT msb = i NEW_LINE break NEW_LINE DEDENT DEDENT"}
{"text":"Computation of the number","code":"for i in range ( 1 , count , 1 ) : NEW_LINE INDENT next_num = ( ( next_num * 10 ) + msb ) NEW_LINE DEDENT"}
{"text":"Condition to check if the number is greater than the given number","code":"if ( next_num > n ) : NEW_LINE INDENT print ( next_num ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Not \u2581 Possible \" ) NEW_LINE DEDENT else : NEW_LINE print ( \" Not \u2581 Possible \" ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 2019 NEW_LINE findNextNumber ( n ) NEW_LINE DEDENT"}
{"text":"Function to find a triplet ( A , B , C ) such that 3 * A + 5 * B + 7 * C is N","code":"def CalculateValues ( N ) : NEW_LINE"}
{"text":"Iterate over the range [ 0 , N7 ]","code":"for C in range ( 0 , N \/\/ 7 + 1 ) : NEW_LINE"}
{"text":"Iterate over the range [ 0 , N5 ]","code":"for B in range ( 0 , N \/\/ 5 + 1 ) : NEW_LINE"}
{"text":"Find the value of A","code":"A = N - 7 * C - 5 * B NEW_LINE"}
{"text":"If A is greater than or equal to 0 and divisible by 3","code":"if ( A >= 0 and A % 3 == 0 ) : NEW_LINE INDENT print ( \" A \u2581 = \" , A \/ 3 , \" , \u2581 B \u2581 = \" , B , \" , \u2581 \\ \u2581 C \u2581 = \" , C , sep = \" \u2581 \" ) NEW_LINE return NEW_LINE DEDENT"}
{"text":"Otherwise , print - 1","code":"print ( - 1 ) NEW_LINE return NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 19 NEW_LINE CalculateValues ( 19 ) NEW_LINE DEDENT"}
{"text":"Function to find the minimum time to visit all the cities such that both the person never meets","code":"def minimumTime ( arr , n ) : NEW_LINE"}
{"text":"Initialize sum as 0","code":"sum = 0 NEW_LINE"}
{"text":"Find the maximum element","code":"T = max ( arr ) NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Increment sum by arr [ i ]","code":"sum += arr [ i ] NEW_LINE"}
{"text":"Prmaximum of 2 * T and sum","code":"print ( max ( 2 * T , sum ) ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 8 , 3 ] NEW_LINE N = len ( arr ) NEW_LINE DEDENT"}
{"text":"Function Call","code":"minimumTime ( arr , N ) NEW_LINE"}
{"text":"Function to find the lexicographically maximum string by reversing substrings having even numbers of 1 s","code":"def lexicographicallyMax ( s ) : NEW_LINE"}
{"text":"Store size of string","code":"n = len ( s ) NEW_LINE"}
{"text":"Traverse the string","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Count the number of 1 s","code":"count = 0 NEW_LINE"}
{"text":"Stores the starting index","code":"beg = i NEW_LINE"}
{"text":"Stores the end index","code":"end = i NEW_LINE"}
{"text":"Increment count , when 1 is encountered","code":"if ( s [ i ] == '1' ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT"}
{"text":"Traverse the remaining string","code":"for j in range ( i + 1 , n ) : NEW_LINE INDENT if ( s [ j ] == '1' ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if ( count % 2 == 0 and count != 0 ) : NEW_LINE INDENT end = j NEW_LINE break NEW_LINE DEDENT DEDENT"}
{"text":"temp is for Reverse the string from starting and end index","code":"temp = s [ beg : end + 1 ] NEW_LINE temp = temp [ : : - 1 ] NEW_LINE s = s [ 0 : beg ] + temp + s [ end + 1 : ] NEW_LINE"}
{"text":"Printing the string","code":"print ( s ) NEW_LINE"}
{"text":"Driver Code","code":"S = \"0101\" NEW_LINE lexicographicallyMax ( S ) NEW_LINE"}
{"text":"Function to count the maximum number of pairs from given array with sum K","code":"def maxPairs ( nums , k ) : NEW_LINE"}
{"text":"Sort array in increasing order","code":"nums = sorted ( nums ) NEW_LINE"}
{"text":"Stores the final result","code":"result = 0 NEW_LINE"}
{"text":"Initialize the left and right pointers","code":"start , end = 0 , len ( nums ) - 1 NEW_LINE"}
{"text":"Traverse array until start < end","code":"while ( start < end ) : NEW_LINE INDENT if ( nums [ start ] + nums [ end ] > k ) : NEW_LINE DEDENT"}
{"text":"Decrement right by 1","code":"end -= 1 NEW_LINE elif ( nums [ start ] + nums [ end ] < k ) : NEW_LINE"}
{"text":"Increment left by 1","code":"start += 1 NEW_LINE"}
{"text":"Increment result and left pointer by 1 and decrement right pointer by 1","code":"else : NEW_LINE INDENT start += 1 NEW_LINE end -= 1 NEW_LINE result += 1 NEW_LINE DEDENT"}
{"text":"Print the result","code":"print ( result ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE K = 5 NEW_LINE DEDENT"}
{"text":"Function Call","code":"maxPairs ( arr , K ) NEW_LINE"}
{"text":"Function to find the maximum number of pairs with a sum K such that same element can 't be used twice","code":"def maxPairs ( nums , k ) : NEW_LINE"}
{"text":"Initialize a hashm","code":"m = { } NEW_LINE"}
{"text":"Store the final result","code":"result = 0 NEW_LINE"}
{"text":"Iterate over the array nums [ ]","code":"for i in nums : NEW_LINE"}
{"text":"Decrement its frequency in m and increment the result by 1","code":"if ( ( i in m ) and m [ i ] > 0 ) : NEW_LINE INDENT m [ i ] = m [ i ] - 1 NEW_LINE result += 1 NEW_LINE DEDENT"}
{"text":"Increment its frequency by 1 if it is already present in m . Otherwise , set its frequency to 1","code":"else : NEW_LINE INDENT if k - i in m : NEW_LINE INDENT m [ k - i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ k - i ] = 1 NEW_LINE DEDENT DEDENT"}
{"text":"Print the result","code":"print ( result ) NEW_LINE"}
{"text":"Driver code","code":"arr = [ 1 , 2 , 3 , 4 ] NEW_LINE K = 5 NEW_LINE"}
{"text":"Function Call","code":"maxPairs ( arr , K ) NEW_LINE"}
{"text":"Function to find indices of array elements whose removal makes the sum of odd and even indexed array elements equal","code":"def removeIndicesToMakeSumEqual ( arr ) : NEW_LINE"}
{"text":"Stores size of array","code":"N = len ( arr ) ; NEW_LINE"}
{"text":"Store prefix sum of odd index array elements","code":"odd = [ 0 ] * N ; NEW_LINE"}
{"text":"Store prefix sum of even index array elements","code":"even = [ 0 ] * N ; NEW_LINE"}
{"text":"Update even [ 0 ]","code":"even [ 0 ] = arr [ 0 ] ; NEW_LINE"}
{"text":"Traverse the given array","code":"for i in range ( 1 , N ) : NEW_LINE"}
{"text":"Update odd [ i ]","code":"odd [ i ] = odd [ i - 1 ] ; NEW_LINE"}
{"text":"Update even [ i ]","code":"even [ i ] = even [ i - 1 ] ; NEW_LINE"}
{"text":"If the current index is an even number","code":"if ( i % 2 == 0 ) : NEW_LINE"}
{"text":"Update even [ i ]","code":"even [ i ] += arr [ i ] ; NEW_LINE"}
{"text":"If the current index is an odd number","code":"else : NEW_LINE"}
{"text":"Update odd [ i ]","code":"odd [ i ] += arr [ i ] ; NEW_LINE"}
{"text":"Check if at least one index found or not that satisfies the condition","code":"find = False ; NEW_LINE"}
{"text":"Store odd indices sum by removing 0 - th index","code":"p = odd [ N - 1 ] ; NEW_LINE"}
{"text":"Store even indices sum by removing 0 - th index","code":"q = even [ N - 1 ] - arr [ 0 ] ; NEW_LINE"}
{"text":"If p and q are equal","code":"if ( p == q ) : NEW_LINE INDENT print ( \"0 \u2581 \" ) ; NEW_LINE find = True ; NEW_LINE DEDENT"}
{"text":"Traverse the array arr","code":"for i in range ( 1 , N ) : NEW_LINE"}
{"text":"If i is an even number","code":"if ( i % 2 == 0 ) : NEW_LINE"}
{"text":"Update p by removing the i - th element","code":"p = even [ N - 1 ] - even [ i - 1 ] - arr [ i ] + odd [ i - 1 ] ; NEW_LINE"}
{"text":"Update q by removing the i - th element","code":"q = odd [ N - 1 ] - odd [ i - 1 ] + even [ i - 1 ] ; NEW_LINE else : NEW_LINE"}
{"text":"Update q by removing the i - th element","code":"q = odd [ N - 1 ] - odd [ i - 1 ] - arr [ i ] + even [ i - 1 ] ; NEW_LINE"}
{"text":"Update p by removing the i - th element","code":"p = even [ N - 1 ] - even [ i - 1 ] + odd [ i - 1 ] ; NEW_LINE"}
{"text":"If odd index values sum is equal to even index values sum","code":"if ( p == q ) : NEW_LINE"}
{"text":"Set the find variable","code":"find = True ; NEW_LINE"}
{"text":"Print the current index","code":"print ( i , end = \" \" ) ; NEW_LINE"}
{"text":"If no index found","code":"if ( find == False ) : NEW_LINE"}
{"text":"Print not possible","code":"print ( - 1 ) ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 1 , 6 , 2 ] ; NEW_LINE removeIndicesToMakeSumEqual ( arr ) ; NEW_LINE DEDENT"}
{"text":"Function to coutnt minimum array elements required to be removed to make an array bitonic","code":"def min_element_removal ( arr , N ) : NEW_LINE"}
{"text":"left [ i ] : Stores the length of LIS up to i - th index","code":"left = [ 1 ] * N NEW_LINE"}
{"text":"right [ i ] : Stores the length of decreasing subsequence over the range [ i , N ]","code":"right = [ 1 ] * ( N ) NEW_LINE"}
{"text":"Calculate the length of LIS up to i - th index","code":"for i in range ( 1 , N ) : NEW_LINE"}
{"text":"Traverse the array upto i - th index","code":"for j in range ( i ) : NEW_LINE"}
{"text":"If arr [ j ] is less than arr [ i ]","code":"if ( arr [ j ] < arr [ i ] ) : NEW_LINE"}
{"text":"Update left [ i ]","code":"left [ i ] = max ( left [ i ] , left [ j ] + 1 ) NEW_LINE"}
{"text":"Calculate the length of decreasing subsequence over the range [ i , N ]","code":"for i in range ( N - 2 , - 1 , - 1 ) : NEW_LINE"}
{"text":"Traverse right [ ] array","code":"for j in range ( N - 1 , i , - 1 ) : NEW_LINE"}
{"text":"If arr [ i ] is greater than arr [ j ]","code":"if ( arr [ i ] > arr [ j ] ) : NEW_LINE"}
{"text":"Update right [ i ]","code":"right [ i ] = max ( right [ i ] , right [ j ] + 1 ) NEW_LINE"}
{"text":"Stores length of the longest bitonic array","code":"maxLen = 0 NEW_LINE"}
{"text":"Traverse left [ ] and right [ ] array","code":"for i in range ( 1 , N - 1 ) : NEW_LINE"}
{"text":"Update maxLen","code":"maxLen = max ( maxLen , left [ i ] + right [ i ] - 1 ) NEW_LINE print ( ( N - maxLen ) ) NEW_LINE"}
{"text":"Function to prminimum removals required to make given array bitonic","code":"def makeBitonic ( arr , N ) : NEW_LINE INDENT if ( N == 1 ) : NEW_LINE INDENT print ( \"0\" ) NEW_LINE return NEW_LINE DEDENT if ( N == 2 ) : NEW_LINE INDENT if ( arr [ 0 ] != arr [ 1 ] ) : NEW_LINE INDENT print ( \"0\" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \"1\" ) NEW_LINE DEDENT return NEW_LINE DEDENT min_element_removal ( arr , N ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 2 , 1 , 1 , 5 , 6 , 2 , 3 , 1 ] NEW_LINE N = len ( arr ) NEW_LINE makeBitonic ( arr , N ) NEW_LINE DEDENT"}
{"text":"Function to count subarrays having equal count of 0 s and 1 s with all 0 s and all 1 s grouped together","code":"def countSubarrays ( A , N ) : NEW_LINE"}
{"text":"Stores the count of subarrays","code":"ans = 0 ; NEW_LINE for i in range ( N - 1 ) : NEW_LINE"}
{"text":"If current element is different from the next array element","code":"if ( A [ i ] != A [ i + 1 ] ) : NEW_LINE"}
{"text":"Increment count","code":"ans += 1 ; NEW_LINE"}
{"text":"Count the frequency of 1 s and 0 s","code":"j = i - 1 ; k = i + 2 ; NEW_LINE while ( j >= 0 and k < N and A [ j ] == A [ i ] and A [ k ] == A [ i + 1 ] ) : NEW_LINE"}
{"text":"Increment count","code":"ans += 1 ; NEW_LINE j -= 1 ; NEW_LINE k += 1 ; NEW_LINE"}
{"text":"Print the final count","code":"print ( ans ) ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT A = [ 1 , 1 , 0 , 0 , 1 , 0 ] ; NEW_LINE N = len ( A ) ; NEW_LINE DEDENT"}
{"text":"Function Call","code":"countSubarrays ( A , N ) ; NEW_LINE"}
{"text":"Python3 program of the above approach","code":"maxN = 2002 NEW_LINE"}
{"text":"lcount [ i ] [ j ] : Stores the count of i on left of index j","code":"lcount = [ [ 0 for i in range ( maxN ) ] for j in range ( maxN ) ] NEW_LINE"}
{"text":"rcount [ i ] [ j ] : Stores the count of i on right of index j","code":"rcount = [ [ 0 for i in range ( maxN ) ] for j in range ( maxN ) ] NEW_LINE"}
{"text":"Function to count unique elements on left and right of any index","code":"def fill_counts ( a , n ) : NEW_LINE"}
{"text":"Find the maximum array element","code":"maxA = a [ 0 ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] > maxA ) : NEW_LINE INDENT maxA = a [ i ] NEW_LINE DEDENT DEDENT for i in range ( n ) : NEW_LINE INDENT lcount [ a [ i ] ] [ i ] = 1 NEW_LINE rcount [ a [ i ] ] [ i ] = 1 NEW_LINE DEDENT for i in range ( maxA + 1 ) : NEW_LINE"}
{"text":"Calculate prefix sum of counts of each value","code":"for j in range ( n ) : NEW_LINE INDENT lcount [ i ] [ j ] = ( lcount [ i ] [ j - 1 ] + lcount [ i ] [ j ] ) NEW_LINE DEDENT"}
{"text":"Calculate suffix sum of counts of each value","code":"for j in range ( n - 2 , - 1 , - 1 ) : NEW_LINE INDENT rcount [ i ] [ j ] = ( rcount [ i ] [ j + 1 ] + rcount [ i ] [ j ] ) NEW_LINE DEDENT"}
{"text":"Function to count quadruples of the required type","code":"def countSubsequence ( a , n ) : NEW_LINE INDENT fill_counts ( a , n ) NEW_LINE answer = 0 NEW_LINE for i in range ( 1 , n ) : NEW_LINE INDENT for j in range ( i + 1 , n - 1 ) : NEW_LINE INDENT answer += ( lcount [ a [ j ] ] [ i - 1 ] * rcount [ a [ i ] ] [ j + 1 ] ) NEW_LINE DEDENT DEDENT return answer NEW_LINE DEDENT"}
{"text":"Driver Code","code":"a = [ 1 , 2 , 3 , 2 , 1 , 3 , 2 ] NEW_LINE print ( countSubsequence ( a , 7 ) ) NEW_LINE"}
{"text":"Function to remove the outermost parentheses of every primitive substring from the given string","code":"def removeOuterParentheses ( S ) : NEW_LINE"}
{"text":"Stores the resultant string","code":"res = \" \" NEW_LINE"}
{"text":"Stores the count of opened parentheses","code":"count = 0 NEW_LINE"}
{"text":"Traverse the string","code":"for c in S : NEW_LINE"}
{"text":"If opening parenthesis is encountered and their count exceeds 0","code":"if ( c == ' ( ' and count > 0 ) : NEW_LINE"}
{"text":"Include the character","code":"res += c NEW_LINE"}
{"text":"If closing parenthesis is encountered and their count is less than count of opening parentheses","code":"if ( c == ' ( ' ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT if ( c == ' ) ' and count > 1 ) : NEW_LINE"}
{"text":"Include the character","code":"res += c NEW_LINE if ( c == ' ) ' ) : NEW_LINE count -= 1 NEW_LINE"}
{"text":"Return the resultant string","code":"return res NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT S = \" ( ( ) ( ) ) ( ( ) ) ( ) \" NEW_LINE print ( removeOuterParentheses ( S ) ) NEW_LINE DEDENT"}
{"text":"Function to find the longest subarray with increasing contiguous elements","code":"def maxiConsecutiveSubarray ( arr , N ) : NEW_LINE"}
{"text":"Stores the length of required longest subarray","code":"maxi = 0 ; NEW_LINE for i in range ( N - 1 ) : NEW_LINE"}
{"text":"Stores the length of length of longest such subarray from ith index","code":"cnt = 1 ; NEW_LINE for j in range ( i , N - 1 ) : NEW_LINE"}
{"text":"If consecutive elements are increasing and differ by 1","code":"if ( arr [ j + 1 ] == arr [ j ] + 1 ) : NEW_LINE INDENT cnt += 1 ; NEW_LINE DEDENT"}
{"text":"Otherwise","code":"else : NEW_LINE INDENT break ; NEW_LINE DEDENT"}
{"text":"Update the longest subarray obtained so far","code":"maxi = max ( maxi , cnt ) ; NEW_LINE i = j ; NEW_LINE"}
{"text":"Return the length obtained","code":"return maxi ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 11 ; NEW_LINE arr = [ 1 , 3 , 4 , 2 , 3 , 4 , 2 , 3 , 5 , 6 , 7 ] ; NEW_LINE print ( maxiConsecutiveSubarray ( arr , N ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 implementation of the above approach","code":"N = 100005 NEW_LINE"}
{"text":"Function to generate prime numbers using Sieve of Eratosthenes","code":"def SieveOfEratosthenes ( prime , p_size ) : NEW_LINE"}
{"text":"Set 0 and 1 as non - prime","code":"prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE p = 2 NEW_LINE while p * p <= p_size : NEW_LINE"}
{"text":"If p is a prime","code":"if ( prime [ p ] ) : NEW_LINE"}
{"text":"Set all multiples of p as non - prime","code":"for i in range ( p * 2 , p_size + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT p += 1 NEW_LINE"}
{"text":"Function to find the digit sum of a given number","code":"def digitSum ( number ) : NEW_LINE"}
{"text":"Stores the sum of digits","code":"sum = 0 NEW_LINE while ( number > 0 ) : NEW_LINE"}
{"text":"Extract digits and add to the sum","code":"sum += ( number % 10 ) NEW_LINE number \/\/= 10 NEW_LINE"}
{"text":"Return the sum of the digits","code":"return sum NEW_LINE"}
{"text":"Function to find the longest subsequence with sum of digits of each element equal to a composite number","code":"def longestCompositeDigitSumSubsequence ( arr , n ) : NEW_LINE INDENT count = 0 NEW_LINE prime = [ True ] * ( N + 1 ) NEW_LINE SieveOfEratosthenes ( prime , N ) NEW_LINE for i in range ( n ) : NEW_LINE DEDENT"}
{"text":"Calculate sum of digits of current array element","code":"res = digitSum ( arr [ i ] ) NEW_LINE"}
{"text":"If sum of digits equal to 1","code":"if ( res == 1 ) : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"If sum of digits is a prime","code":"if ( not prime [ res ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT print ( count ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 13 , 55 , 7 , 3 , 5 , 1 , 10 , 21 , 233 , 144 , 89 ] NEW_LINE n = len ( arr ) NEW_LINE DEDENT"}
{"text":"Function call","code":"longestCompositeDigitSumSubsequence ( arr , n ) NEW_LINE"}
{"text":"Structure of Binary Tree","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT"}
{"text":"Function to create a new node","code":"def newnode ( data ) : NEW_LINE INDENT temp = Node ( data ) NEW_LINE DEDENT"}
{"text":"Return the created node","code":"return temp NEW_LINE"}
{"text":"Function to insert a node in the tree","code":"def insert ( s , i , N , root , temp ) : NEW_LINE INDENT if ( i == N ) : NEW_LINE INDENT return temp NEW_LINE DEDENT DEDENT"}
{"text":"Left insertion","code":"if ( s [ i ] == ' L ' ) : NEW_LINE INDENT root . left = insert ( s , i + 1 , N , root . left , temp ) NEW_LINE DEDENT"}
{"text":"Right insertion","code":"else : NEW_LINE INDENT root . right = insert ( s , i + 1 , N , root . right , temp ) NEW_LINE DEDENT"}
{"text":"Return the root node","code":"return root NEW_LINE"}
{"text":"Function to find sum of specially balanced nodes in the Tree","code":"def SBTUtil ( root , sum ) : NEW_LINE"}
{"text":"Base Case","code":"if ( root == None ) : NEW_LINE INDENT return [ 0 , sum ] NEW_LINE DEDENT if ( root . left == None and root . right == None ) : NEW_LINE INDENT return [ root . data , sum ] NEW_LINE DEDENT"}
{"text":"Find the left subtree sum","code":"left , sum = SBTUtil ( root . left , sum ) NEW_LINE"}
{"text":"Find the right subtree sum","code":"right , sum = SBTUtil ( root . right , sum ) NEW_LINE"}
{"text":"Condition of specially balanced node","code":"if ( root . left and root . right ) : NEW_LINE"}
{"text":"Condition of specially balanced node","code":"if ( ( left % 2 == 0 and right % 2 != 0 ) or ( left % 2 != 0 and right % 2 == 0 ) ) : NEW_LINE INDENT sum += root . data NEW_LINE DEDENT"}
{"text":"Return the sum","code":"return [ left + right + root . data , sum ] NEW_LINE"}
{"text":"Function to build the binary tree","code":"def build_tree ( R , N , str , values ) : NEW_LINE"}
{"text":"Form root node of the tree","code":"root = newnode ( R ) NEW_LINE"}
{"text":"Insert nodes into tree","code":"for i in range ( 0 , N - 1 ) : NEW_LINE INDENT s = str [ i ] NEW_LINE x = values [ i ] NEW_LINE DEDENT"}
{"text":"Create a new Node","code":"temp = newnode ( x ) NEW_LINE"}
{"text":"Insert the node","code":"root = insert ( s , 0 , len ( s ) , root , temp ) NEW_LINE"}
{"text":"Return the root of the Tree","code":"return root NEW_LINE"}
{"text":"Function to find the sum of specially balanced nodes","code":"def speciallyBalancedNodes ( R , N , str , values ) : NEW_LINE"}
{"text":"Build Tree","code":"root = build_tree ( R , N , str , values ) NEW_LINE"}
{"text":"Stores the sum of specially balanced node","code":"sum = 0 NEW_LINE"}
{"text":"Function Call","code":"tmp , sum = SBTUtil ( root , sum ) NEW_LINE"}
{"text":"Print required sum","code":"print ( sum , end = ' \u2581 ' ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Given nodes","code":"N = 7 NEW_LINE"}
{"text":"Given root","code":"R = 12 NEW_LINE"}
{"text":"Given path info of nodes from root","code":"str = [ \" L \" , \" R \" , \" RL \" , \" RR \" , \" RLL \" , \" RLR \" ] NEW_LINE"}
{"text":"Given node values","code":"values = [ 17 , 16 , 4 , 9 , 2 , 3 ] NEW_LINE"}
{"text":"Function Call","code":"speciallyBalancedNodes ( R , N , str , values ) NEW_LINE"}
{"text":"Function to find the position of the pair that covers every pair in the array arr","code":"def position ( arr , N ) : NEW_LINE"}
{"text":"Stores the index of the resultant pair","code":"pos = - 1 ; NEW_LINE"}
{"text":"To count the occurences","code":"count = 0 ; NEW_LINE"}
{"text":"Iterate to check every pair","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Set count to 0","code":"count = 0 ; NEW_LINE for j in range ( N ) : NEW_LINE"}
{"text":"Condition to checked for overlapping of pairs","code":"if ( arr [ i ] [ 0 ] <= arr [ j ] [ 0 ] and arr [ i ] [ 1 ] >= arr [ j ] [ 1 ] ) : NEW_LINE INDENT count += 1 ; NEW_LINE DEDENT"}
{"text":"If that pair can cover all other pairs then store its position","code":"if ( count == N ) : NEW_LINE INDENT pos = i ; NEW_LINE DEDENT"}
{"text":"If position not found","code":"if ( pos == - 1 ) : NEW_LINE INDENT print ( pos ) ; NEW_LINE DEDENT"}
{"text":"Otherwise","code":"else : NEW_LINE INDENT print ( pos + 1 ) ; NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given array of pairs","code":"arr = [ [ 3 , 3 ] , [ 1 , 3 ] , [ 2 , 2 ] , [ 2 , 3 ] , [ 1 , 2 ] ] ; NEW_LINE N = len ( arr ) ; NEW_LINE"}
{"text":"Function Call","code":"position ( arr , N ) ; NEW_LINE"}
{"text":"Python3 program for the above approach","code":"import sys NEW_LINE"}
{"text":"Function to find the position of the pair that covers every pair in the array arr [ ] [ ]","code":"def position ( arr , N ) : NEW_LINE"}
{"text":"Position to store the index","code":"pos = - 1 NEW_LINE"}
{"text":"Stores the minimum second value","code":"right = - sys . maxsize - 1 NEW_LINE"}
{"text":"Stores the maximum first value","code":"left = sys . maxsize NEW_LINE"}
{"text":"Iterate over the array of pairs","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Update right maximum","code":"if ( arr [ i ] [ 1 ] > right ) : NEW_LINE INDENT right = arr [ i ] [ 1 ] NEW_LINE DEDENT"}
{"text":"Update left minimum","code":"if ( arr [ i ] [ 0 ] < left ) : NEW_LINE INDENT left = arr [ i ] [ 0 ] NEW_LINE DEDENT"}
{"text":"Iterate over the array of pairs","code":"for i in range ( N ) : NEW_LINE"}
{"text":"If any pair exists with value { left , right then store it","code":"if ( arr [ i ] [ 0 ] == left and arr [ i ] [ 1 ] == right ) : NEW_LINE INDENT pos = i + 1 NEW_LINE DEDENT"}
{"text":"Print the answer","code":"print ( pos ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given array of pairs","code":"arr = [ [ 3 , 3 ] , [ 1 , 3 ] , [ 2 , 2 ] , [ 2 , 3 ] , [ 1 , 2 ] ] NEW_LINE N = len ( arr ) NEW_LINE"}
{"text":"Function call","code":"position ( arr , N ) NEW_LINE"}
{"text":"Function to minimize the count of operations to make str1 and str2 permutations of each other","code":"def ctMinEdits ( str1 , str2 ) : NEW_LINE INDENT N1 = len ( str1 ) NEW_LINE N2 = len ( str2 ) NEW_LINE DEDENT"}
{"text":"Store the frequency of each character of str1","code":"freq1 = [ 0 ] * 256 NEW_LINE for i in range ( N1 ) : NEW_LINE INDENT freq1 [ ord ( str1 [ i ] ) ] += 1 NEW_LINE DEDENT"}
{"text":"Store the frequency of each character of str2","code":"freq2 = [ 0 ] * 256 NEW_LINE for i in range ( N2 ) : NEW_LINE INDENT freq2 [ ord ( str2 [ i ] ) ] += 1 NEW_LINE DEDENT"}
{"text":"Traverse the freq1 [ ] and freq2 [ ]","code":"for i in range ( 256 ) : NEW_LINE"}
{"text":"If frequency of character in str1 is greater than str2","code":"if ( freq1 [ i ] > freq2 [ i ] ) : NEW_LINE INDENT freq1 [ i ] = freq1 [ i ] - freq2 [ i ] NEW_LINE freq2 [ i ] = 0 NEW_LINE DEDENT"}
{"text":"Otherwise","code":"else : NEW_LINE INDENT freq2 [ i ] = freq2 [ i ] - freq1 [ i ] NEW_LINE freq1 [ i ] = 0 NEW_LINE DEDENT"}
{"text":"Store sum of freq1 [ ]","code":"sum1 = 0 NEW_LINE"}
{"text":"Store sum of freq2 [ ]","code":"sum2 = 0 NEW_LINE for i in range ( 256 ) : NEW_LINE INDENT sum1 += freq1 [ i ] NEW_LINE sum2 += freq2 [ i ] NEW_LINE DEDENT return max ( sum1 , sum2 ) NEW_LINE"}
{"text":"Driver Code","code":"str1 = \" geeksforgeeks \" NEW_LINE str2 = \" geeksforcoder \" NEW_LINE print ( ctMinEdits ( str1 , str2 ) ) NEW_LINE"}
{"text":"Function to count the pairs such that given condition is satisfied","code":"def CountPairs ( a , b , n ) : NEW_LINE"}
{"text":"Stores the sum of element at each corresponding index","code":"C = [ 0 ] * n NEW_LINE"}
{"text":"Find the sum of each index of both array","code":"for i in range ( n ) : NEW_LINE INDENT C [ i ] = a [ i ] + b [ i ] NEW_LINE DEDENT"}
{"text":"Stores frequency of each element present in sumArr","code":"freqCount = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if C [ i ] in freqCount . keys ( ) : NEW_LINE INDENT freqCount [ C [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT freqCount [ C [ i ] ] = 1 NEW_LINE DEDENT DEDENT"}
{"text":"Initialize number of pairs","code":"NoOfPairs = 0 NEW_LINE for x in freqCount : NEW_LINE INDENT y = freqCount [ x ] NEW_LINE DEDENT"}
{"text":"Add possible vaid pairs","code":"NoOfPairs = ( NoOfPairs + y * ( y - 1 ) \/\/ 2 ) NEW_LINE"}
{"text":"Return Number of Pairs","code":"print ( NoOfPairs ) NEW_LINE"}
{"text":"Given array arr [ ] and brr [ ]","code":"arr = [ 1 , 4 , 20 , 3 , 10 , 5 ] NEW_LINE brr = [ 9 , 6 , 1 , 7 , 11 , 6 ] NEW_LINE"}
{"text":"Size of given array","code":"N = len ( arr ) NEW_LINE"}
{"text":"Function calling","code":"CountPairs ( arr , brr , N ) NEW_LINE"}
{"text":"Function to find the median change after removing elements from arr2 [ ]","code":"def medianChange ( arr1 , arr2 ) : NEW_LINE INDENT N = len ( arr1 ) NEW_LINE DEDENT"}
{"text":"To store the median","code":"median = [ ] NEW_LINE"}
{"text":"If N is odd","code":"if ( N & 1 ) : NEW_LINE INDENT median . append ( arr1 [ N \/\/ 2 ] * 1 ) NEW_LINE DEDENT"}
{"text":"If N is even","code":"else : NEW_LINE INDENT median . append ( ( arr1 [ N \/\/ 2 ] + arr1 [ ( N - 1 ) \/\/ 2 ] ) \/\/ 2 ) NEW_LINE DEDENT for x in arr2 : NEW_LINE"}
{"text":"Find the current element in arr1","code":"it = arr1 . index ( x ) NEW_LINE"}
{"text":"Erase the element","code":"arr1 . pop ( it ) NEW_LINE"}
{"text":"Decrement N","code":"N -= 1 NEW_LINE"}
{"text":"If N is odd","code":"if ( N & 1 ) : NEW_LINE INDENT median . append ( arr1 [ N \/\/ 2 ] * 1 ) NEW_LINE DEDENT"}
{"text":"If N is even","code":"else : NEW_LINE INDENT median . append ( ( arr1 [ N \/\/ 2 ] + arr1 [ ( N - 1 ) \/\/ 2 ] ) \/\/ 2 ) NEW_LINE DEDENT"}
{"text":"Print the corresponding difference of median","code":"for i in range ( len ( median ) - 1 ) : NEW_LINE INDENT print ( median [ i + 1 ] - median [ i ] , end = ' \u2581 ' ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Given arrays","code":"arr1 = [ 2 , 4 , 6 , 8 , 10 ] NEW_LINE arr2 = [ 4 , 6 ] NEW_LINE"}
{"text":"Function Call","code":"medianChange ( arr1 , arr2 ) NEW_LINE"}
{"text":"NFA variable that keeps track of the state while transaction .","code":"nfa = 1 NEW_LINE"}
{"text":"This checks for invalid input .","code":"flag = 0 NEW_LINE"}
{"text":"Function for the state Q2","code":"def state1 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' a ' takes to Q4 , and ' b ' and ' c ' remain at Q2","code":"if ( c == ' a ' ) : NEW_LINE INDENT nfa = 2 NEW_LINE DEDENT elif ( c == ' b ' or c == ' c ' ) : NEW_LINE INDENT nfa = 1 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function for the state Q3","code":"def state2 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' a ' takes to Q3 , and ' b ' and ' c ' remain at Q4","code":"if ( c == ' a ' ) : NEW_LINE INDENT nfa = 3 NEW_LINE DEDENT elif ( c == ' b ' or c == ' c ' ) : NEW_LINE INDENT nfa = 2 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function for the state Q4","code":"def state3 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' a ' takes to Q2 , and ' b ' and ' c ' remain at Q3","code":"if ( c == ' a ' ) : NEW_LINE INDENT nfa = 1 NEW_LINE DEDENT elif ( c == ' b ' or c == ' c ' ) : NEW_LINE INDENT nfa = 3 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function for the state Q5","code":"def state4 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' b ' takes to Q6 , and ' a ' and ' c ' remain at Q5","code":"if ( c == ' b ' ) : NEW_LINE INDENT nfa = 5 NEW_LINE DEDENT elif ( c == ' a ' or c == ' c ' ) : NEW_LINE INDENT nfa = 4 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function for the state Q6","code":"def state5 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' b ' takes to Q7 , and ' a ' and ' c ' remain at Q7","code":"if ( c == ' b ' ) : NEW_LINE INDENT nfa = 6 NEW_LINE DEDENT elif ( c == ' a ' or c == ' c ' ) : NEW_LINE INDENT nfa = 5 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function for the state Q7","code":"def state6 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' b ' takes to Q5 , and ' a ' and ' c ' remain at Q7","code":"if ( c == ' b ' ) : NEW_LINE INDENT nfa = 4 NEW_LINE DEDENT elif ( c == ' a ' or c == ' c ' ) : NEW_LINE INDENT nfa = 6 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function for the state Q8","code":"def state7 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' c ' takes to Q9 , and ' a ' and ' b ' remain at Q8","code":"if ( c == ' c ' ) : NEW_LINE INDENT nfa = 8 NEW_LINE DEDENT elif ( c == ' b ' or c == ' a ' ) : NEW_LINE INDENT nfa = 7 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function for the state Q9","code":"def state8 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' c ' takes to Q10 , and ' a ' and ' b ' remain at Q9","code":"if ( c == ' c ' ) : NEW_LINE INDENT nfa = 9 NEW_LINE DEDENT elif ( c == ' b ' or c == ' a ' ) : NEW_LINE INDENT nfa = 8 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function for the state Q10","code":"def state9 ( c ) : NEW_LINE INDENT global nfa , flag NEW_LINE DEDENT"}
{"text":"State transitions ' c ' takes to Q8 , and ' a ' and ' b ' remain at Q10","code":"if ( c == ' c ' ) : NEW_LINE INDENT nfa = 7 NEW_LINE DEDENT elif ( c == ' b ' or c == ' a ' ) : NEW_LINE INDENT nfa = 9 NEW_LINE DEDENT else : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT"}
{"text":"Function to check for 3 a 's","code":"def checkA ( s , x ) : NEW_LINE INDENT global nfa , flag NEW_LINE for i in range ( x ) : NEW_LINE INDENT if ( nfa == 1 ) : NEW_LINE INDENT state1 ( s [ i ] ) NEW_LINE DEDENT elif ( nfa == 2 ) : NEW_LINE INDENT state2 ( s [ i ] ) NEW_LINE DEDENT elif ( nfa == 3 ) : NEW_LINE INDENT state3 ( s [ i ] ) NEW_LINE DEDENT DEDENT if ( nfa == 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT nfa = 4 NEW_LINE DEDENT DEDENT"}
{"text":"Function to check for 3 b 's","code":"def checkB ( s , x ) : NEW_LINE INDENT global nfa , flag NEW_LINE for i in range ( x ) : NEW_LINE INDENT if ( nfa == 4 ) : NEW_LINE INDENT state4 ( s [ i ] ) NEW_LINE DEDENT elif ( nfa == 5 ) : NEW_LINE INDENT state5 ( s [ i ] ) NEW_LINE DEDENT elif ( nfa == 6 ) : NEW_LINE INDENT state6 ( s [ i ] ) NEW_LINE DEDENT DEDENT if ( nfa == 4 ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT nfa = 7 NEW_LINE DEDENT DEDENT"}
{"text":"Function to check for 3 c 's","code":"def checkC ( s , x ) : NEW_LINE INDENT global nfa , flag NEW_LINE for i in range ( x ) : NEW_LINE INDENT if ( nfa == 7 ) : NEW_LINE INDENT state7 ( s [ i ] ) NEW_LINE DEDENT elif ( nfa == 8 ) : NEW_LINE INDENT state8 ( s [ i ] ) NEW_LINE DEDENT elif ( nfa == 9 ) : NEW_LINE INDENT state9 ( s [ i ] ) NEW_LINE DEDENT DEDENT if ( nfa == 7 ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"s = \" bbbca \" NEW_LINE x = 5 NEW_LINE"}
{"text":"If any of the states is True , that is , if either the number of a ' s \u2581 or \u2581 number \u2581 of \u2581 b ' s or number of c 's is a multiple of three, then the is accepted","code":"if ( checkA ( s , x ) or checkB ( s , x ) or checkC ( s , x ) ) : NEW_LINE INDENT print ( \" ACCEPTED \" ) NEW_LINE DEDENT else : NEW_LINE INDENT if ( flag == 0 ) : NEW_LINE INDENT print ( \" NOT \u2581 ACCEPTED \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" INPUT \u2581 OUT \u2581 OF \u2581 DICTIONARY . \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to count positions such that all elements before it are greater","code":"def getPositionCount ( a , n ) : NEW_LINE"}
{"text":"Count is initially 1 for the first element","code":"count = 1 ; NEW_LINE"}
{"text":"Initial Minimum","code":"min = a [ 0 ] ; NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( 1 , n ) : NEW_LINE"}
{"text":"If current element is new minimum","code":"if ( a [ i ] <= min ) : NEW_LINE"}
{"text":"Update minimum","code":"min = a [ i ] ; NEW_LINE"}
{"text":"Increment count","code":"count += 1 ; NEW_LINE return count ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 5 , 4 , 6 , 1 , 3 , 1 ] ; NEW_LINE n = len ( a ) ; NEW_LINE print ( getPositionCount ( a , n ) ) ; NEW_LINE DEDENT"}
{"text":"Function to return the maximum sum in a subarray of size k","code":"def maxSum ( arr , n , k ) : NEW_LINE"}
{"text":"k must be greater","code":"if ( n < k ) : NEW_LINE INDENT return - 1 ; NEW_LINE DEDENT"}
{"text":"Compute sum of first window of size k","code":"res = 0 ; NEW_LINE for i in range ( k ) : NEW_LINE INDENT res += arr [ i ] ; NEW_LINE DEDENT"}
{"text":"Compute sums of remaining windows by removing first element of previous window and adding last element of current window .","code":"curr_sum = res ; NEW_LINE for i in range ( k , n ) : NEW_LINE INDENT curr_sum += arr [ i ] - arr [ i - k ] ; NEW_LINE res = max ( res , curr_sum ) ; NEW_LINE DEDENT return res ; NEW_LINE"}
{"text":"Function to return the length of subarray Sum of all the subarray of this length is less than or equal to K","code":"def solve ( arr , n , k ) : NEW_LINE INDENT max_len = 0 ; l = 0 ; r = n ; NEW_LINE DEDENT"}
{"text":"Binary search from l to r as all the array elements are positive so that the maximum subarray sum is monotonically increasing","code":"while ( l <= r ) : NEW_LINE INDENT m = ( l + r ) \/\/ 2 ; NEW_LINE DEDENT"}
{"text":"Check if the subarray sum is greater than K or not","code":"if ( maxSum ( arr , n , m ) > k ) : NEW_LINE INDENT r = m - 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT l = m + 1 ; NEW_LINE DEDENT"}
{"text":"Update the maximum length","code":"max_len = m ; NEW_LINE return max_len ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 , 5 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE k = 10 ; NEW_LINE print ( solve ( arr , n , k ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 implementation of the approach","code":"MAX = 100001 NEW_LINE ROW = 10 NEW_LINE COL = 3 NEW_LINE indices = [ 0 ] * MAX NEW_LINE"}
{"text":"All possible solutions of the equation 1 \/ a + 1 \/ b + 1 \/ c = 1","code":"test = [ [ 2 , 3 , 6 ] , [ 2 , 4 , 4 ] , [ 2 , 6 , 3 ] , [ 3 , 2 , 6 ] , [ 3 , 3 , 3 ] , [ 3 , 6 , 2 ] , [ 4 , 2 , 4 ] , [ 4 , 4 , 2 ] , [ 6 , 2 , 3 ] , [ 6 , 3 , 2 ] ] NEW_LINE"}
{"text":"Function to find the triplets","code":"def find_triplet ( array , n ) : NEW_LINE INDENT answer = 0 NEW_LINE for i in range ( MAX ) : NEW_LINE INDENT indices [ i ] = [ ] NEW_LINE DEDENT DEDENT"}
{"text":"Storing indices of the elements","code":"for i in range ( n ) : NEW_LINE INDENT indices [ array [ i ] ] . append ( i ) NEW_LINE DEDENT for i in range ( n ) : NEW_LINE INDENT y = array [ i ] NEW_LINE for j in range ( ROW ) : NEW_LINE INDENT s = test [ j ] [ 1 ] * y NEW_LINE DEDENT DEDENT"}
{"text":"Check if y can act as the middle element of triplet with the given solution of 1 \/ a + 1 \/ b + 1 \/ c = 1","code":"if s % test [ j ] [ 0 ] != 0 : NEW_LINE INDENT continue NEW_LINE DEDENT if s % test [ j ] [ 2 ] != 0 : NEW_LINE INDENT continue NEW_LINE DEDENT x = s \/\/ test [ j ] [ 0 ] NEW_LINE z = s \/\/ test [ j ] [ 2 ] NEW_LINE if x > MAX or z > MAX : NEW_LINE INDENT continue NEW_LINE DEDENT l = 0 NEW_LINE r = len ( indices [ x ] ) - 1 NEW_LINE first = - 1 NEW_LINE"}
{"text":"Binary search to find the number of possible values of the first element","code":"while l <= r : NEW_LINE INDENT m = ( l + r ) \/\/ 2 NEW_LINE if indices [ x ] [ m ] < i : NEW_LINE INDENT first = m NEW_LINE l = m + 1 NEW_LINE DEDENT else : NEW_LINE INDENT r = m - 1 NEW_LINE DEDENT DEDENT l = 0 NEW_LINE r = len ( indices [ z ] ) - 1 NEW_LINE third = - 1 NEW_LINE"}
{"text":"Binary search to find the number of possible values of the third element","code":"while l <= r : NEW_LINE INDENT m = ( l + r ) \/\/ 2 NEW_LINE if indices [ z ] [ m ] > i : NEW_LINE INDENT third = m NEW_LINE r = m - 1 NEW_LINE DEDENT else : NEW_LINE INDENT l = m + 1 NEW_LINE DEDENT DEDENT if first != - 1 and third != - 1 : NEW_LINE"}
{"text":"Contribution to the answer would be the multiplication of the possible values for the first and the third element","code":"answer += ( first + 1 ) * ( len ( indices [ z ] ) - third ) NEW_LINE return answer NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT array = [ 2 , 4 , 5 , 6 , 7 ] NEW_LINE n = len ( array ) NEW_LINE print ( find_triplet ( array , n ) ) NEW_LINE DEDENT"}
{"text":"Python3 implementation of the above approach","code":"def distinct ( arr ) : NEW_LINE INDENT count = 0 NEW_LINE DEDENT"}
{"text":"if array has only one element , return 1","code":"if len ( arr ) == 1 : NEW_LINE INDENT return 1 NEW_LINE DEDENT for i in range ( 0 , len ( arr ) - 1 ) : NEW_LINE"}
{"text":"For first element compare with only next element","code":"if ( i == 0 ) : NEW_LINE INDENT if ( arr [ i ] != arr [ i + 1 ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT"}
{"text":"For remaining elements compare with both prev and next elements","code":"elif ( i > 0 & i < len ( arr ) - 1 ) : NEW_LINE INDENT if ( arr [ i ] != arr [ i + 1 ] or arr [ i ] != arr [ i - 1 ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT"}
{"text":"For last element compare with only prev element","code":"if ( arr [ len ( arr ) - 1 ] != arr [ len ( arr ) - 2 ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return count NEW_LINE"}
{"text":"Driver code","code":"arr = [ 0 , 0 , 0 , 0 , 0 , 1 , 0 ] NEW_LINE print ( distinct ( arr ) ) NEW_LINE"}
{"text":"Function to check if an array is sorted or not","code":"def isSorted ( arr , N ) : NEW_LINE"}
{"text":"Traverse the array arr [ ]","code":"for i in range ( 1 , N ) : NEW_LINE INDENT if ( arr [ i ] [ 0 ] > arr [ i - 1 ] [ 0 ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT"}
{"text":"Return true","code":"return True NEW_LINE"}
{"text":"Function to check if it is possible to sort the array w . r . t . first element","code":"def isPossibleToSort ( arr , N ) : NEW_LINE"}
{"text":"Stores the ID of the first element","code":"group = arr [ 0 ] [ 1 ] NEW_LINE"}
{"text":"Traverse the array arr [ ]","code":"for i in range ( 1 , N ) : NEW_LINE"}
{"text":"If arr [ i ] [ 1 ] is not equal to that of the group","code":"if ( arr [ i ] [ 1 ] != group ) : NEW_LINE INDENT return \" Yes \" NEW_LINE DEDENT"}
{"text":"If array is sorted","code":"if ( isSorted ( arr , N ) ) : NEW_LINE INDENT return \" Yes \" NEW_LINE DEDENT else : NEW_LINE INDENT return \" No \" NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ [ 340000 , 2 ] , [ 45000 , 1 ] , [ 30000 , 2 ] , [ 50000 , 4 ] ] NEW_LINE N = len ( arr ) NEW_LINE print ( isPossibleToSort ( arr , N ) ) NEW_LINE DEDENT"}
{"text":"Structure of a node","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT DEDENT sum = 0 NEW_LINE total_sum = 0 NEW_LINE mod = 1000000007 NEW_LINE"}
{"text":"Function to calculate and return the Alpha Score of the journey","code":"def getAlphaScore ( node ) : NEW_LINE INDENT global sum NEW_LINE global total_sum NEW_LINE DEDENT"}
{"text":"Traverse left subtree","code":"if node . left != None : NEW_LINE INDENT getAlphaScore ( node . left ) NEW_LINE DEDENT"}
{"text":"Calculate the alpha score of the current step","code":"sum = ( sum + node . data ) % mod NEW_LINE"}
{"text":"Update alpha score of the journey","code":"total_sum = ( total_sum + sum ) % mod NEW_LINE"}
{"text":"Traverse right subtree","code":"if node . right != None : NEW_LINE INDENT getAlphaScore ( node . right ) NEW_LINE DEDENT"}
{"text":"Return","code":"return total_sum NEW_LINE"}
{"text":"Function to construct a BST from the sorted array arr [ ]","code":"def constructBST ( arr , start , end , root ) : NEW_LINE INDENT if start > end : NEW_LINE INDENT return None NEW_LINE DEDENT mid = ( start + end ) \/\/ 2 NEW_LINE DEDENT"}
{"text":"Insert root","code":"if root == None : NEW_LINE INDENT root = Node ( arr [ mid ] ) NEW_LINE DEDENT"}
{"text":"Construct left subtree","code":"root . left = constructBST ( arr , start , mid - 1 , root . left ) NEW_LINE"}
{"text":"Construct right subtree","code":"root . right = constructBST ( arr , mid + 1 , end , root . right ) NEW_LINE"}
{"text":"Return root","code":"return root NEW_LINE"}
{"text":"Driver code","code":"arr = [ 10 , 11 , 12 ] NEW_LINE length = len ( arr ) NEW_LINE"}
{"text":"Sort the array","code":"arr . sort ( ) NEW_LINE root = None NEW_LINE"}
{"text":"Construct BST from the sorted array","code":"root = constructBST ( arr , 0 , length - 1 , root ) NEW_LINE print ( getAlphaScore ( root ) ) NEW_LINE"}
{"text":"Function that return the index upto all the array elements are updated .","code":"def sortByFreq ( arr , n ) : NEW_LINE"}
{"text":"Initialise maxE = - 1","code":"maxE = - 1 ; NEW_LINE"}
{"text":"Find the maximum element of arr [ ]","code":"for i in range ( n ) : NEW_LINE INDENT maxE = max ( maxE , arr [ i ] ) NEW_LINE DEDENT"}
{"text":"Create frequency array freq [ ]","code":"freq = [ 0 ] * ( maxE + 1 ) ; NEW_LINE"}
{"text":"Update the frequency array as per the occurrence of element in arr [ ]","code":"for i in range ( n ) : NEW_LINE INDENT freq [ arr [ i ] ] += 1 ; NEW_LINE DEDENT"}
{"text":"Initialise cnt to 0","code":"cnt = 0 ; NEW_LINE"}
{"text":"Traversing freq [ ]","code":"for i in range ( maxE + 1 ) : NEW_LINE"}
{"text":"If freq of an element is greater than 0 update the value of arr [ ] at index cnt & increment cnt","code":"if ( freq [ i ] > 0 ) : NEW_LINE INDENT value = 100000 - i ; NEW_LINE arr [ cnt ] = 100000 * freq [ i ] + value ; NEW_LINE cnt += 1 ; NEW_LINE DEDENT"}
{"text":"Return cnt","code":"return cnt ; NEW_LINE"}
{"text":"Function that print array arr [ ] elements in sorted order","code":"def printSortedArray ( arr , cnt ) : NEW_LINE"}
{"text":"Traversing arr [ ] till index cnt","code":"for i in range ( cnt ) : NEW_LINE"}
{"text":"Find frequency of elements","code":"frequency = arr [ i ] \/ 100000 ; NEW_LINE"}
{"text":"Find value at index i","code":"value = 100000 - ( arr [ i ] % 100000 ) ; NEW_LINE"}
{"text":"Traversing till frequency to print value at index i","code":"for j in range ( int ( frequency ) ) : NEW_LINE INDENT print ( value , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 4 , 5 , 6 , 4 , 2 , 2 , 8 , 5 ] NEW_LINE DEDENT"}
{"text":"Size of array arr [ ]","code":"n = len ( arr ) NEW_LINE"}
{"text":"Function call to get cnt","code":"cnt = sortByFreq ( arr , n ) ; NEW_LINE"}
{"text":"Sort the arr [ ] in decreasing order","code":"arr . sort ( reverse = True ) NEW_LINE"}
{"text":"Function that prints elements in decreasing order","code":"printSortedArray ( arr , cnt ) ; NEW_LINE"}
{"text":"Function to check whether we can make n rectangles of equal area","code":"def checkRectangles ( arr , n ) : NEW_LINE INDENT ans = True NEW_LINE DEDENT"}
{"text":"Sort the array","code":"arr . sort ( ) NEW_LINE"}
{"text":"Find the area of any one rectangle","code":"area = arr [ 0 ] * arr [ 4 * n - 1 ] NEW_LINE"}
{"text":"Check whether we have two equal sides for each rectangle and that area of each rectangle formed is the same","code":"for i in range ( 0 , 2 * n , 2 ) : NEW_LINE INDENT if ( arr [ i ] != arr [ i + 1 ] or arr [ 4 * n - i - 1 ] != arr [ 4 * n - i - 2 ] or arr [ i ] * arr [ 4 * n - i - 1 ] != area ) : NEW_LINE DEDENT"}
{"text":"Update the answer to false if any condition fails","code":"ans = False NEW_LINE break NEW_LINE"}
{"text":"If possible","code":"if ( ans ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE"}
{"text":"Driver code","code":"arr = [ 1 , 8 , 2 , 1 , 2 , 4 , 4 , 8 ] NEW_LINE n = 2 NEW_LINE if ( checkRectangles ( arr , n ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Function to return the count of elements which are not in the correct position when sorted","code":"def cntElements ( arr , n ) : NEW_LINE"}
{"text":"To store a copy of the original array","code":"copy_arr = [ 0 ] * n NEW_LINE"}
{"text":"Copy the elements of the given array to the new array","code":"for i in range ( n ) : NEW_LINE INDENT copy_arr [ i ] = arr [ i ] NEW_LINE DEDENT"}
{"text":"To store the required count","code":"count = 0 NEW_LINE"}
{"text":"Sort the original array","code":"arr . sort ( ) NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"If current element was not at the right position","code":"if ( arr [ i ] != copy_arr [ i ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT return count NEW_LINE"}
{"text":"Driver code","code":"arr = [ 1 , 2 , 6 , 2 , 4 , 5 ] NEW_LINE n = len ( arr ) NEW_LINE print ( cntElements ( arr , n ) ) NEW_LINE"}
{"text":"Function to find the required pairs","code":"def findPairs ( arr , n , k , d ) : NEW_LINE"}
{"text":"There has to be atleast 2 * k elements","code":"if ( n < 2 * k ) : NEW_LINE INDENT print ( \" - 1\" ) NEW_LINE return NEW_LINE DEDENT"}
{"text":"To store the pairs","code":"pairs = [ ] NEW_LINE"}
{"text":"Sort the given array","code":"arr = sorted ( arr ) NEW_LINE"}
{"text":"For every possible pair","code":"for i in range ( k ) : NEW_LINE"}
{"text":"If the current pair is valid","code":"if ( arr [ n - k + i ] - arr [ i ] >= d ) : NEW_LINE"}
{"text":"Insert it into the pair vector","code":"pairs . append ( [ arr [ i ] , arr [ n - k + i ] ] ) NEW_LINE"}
{"text":"If k pairs are not possible","code":"if ( len ( pairs ) < k ) : NEW_LINE INDENT print ( \" - 1\" ) NEW_LINE return NEW_LINE DEDENT"}
{"text":"Print the pairs","code":"for v in pairs : NEW_LINE INDENT print ( \" ( \" , v [ 0 ] , \" , \u2581 \" , v [ 1 ] , \" ) \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"arr = [ 4 , 6 , 10 , 23 , 14 , 7 , 2 , 20 , 9 ] NEW_LINE n = len ( arr ) NEW_LINE k = 4 NEW_LINE d = 3 NEW_LINE findPairs ( arr , n , k , d ) NEW_LINE"}
{"text":"Function to return the count of pairs from arr with the given sum","code":"def pairs_count ( arr , n , sum ) : NEW_LINE"}
{"text":"To store the count of pairs","code":"ans = 0 NEW_LINE"}
{"text":"Sort the given array","code":"arr = sorted ( arr ) NEW_LINE"}
{"text":"Take two pointers","code":"i , j = 0 , n - 1 NEW_LINE while ( i < j ) : NEW_LINE"}
{"text":"If sum is greater","code":"if ( arr [ i ] + arr [ j ] < sum ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT"}
{"text":"If sum is lesser","code":"elif ( arr [ i ] + arr [ j ] > sum ) : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT"}
{"text":"If sum is equal","code":"else : NEW_LINE"}
{"text":"Find the frequency of arr [ i ]","code":"x = arr [ i ] NEW_LINE xx = i NEW_LINE while ( i < j and arr [ i ] == x ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT"}
{"text":"Find the frequency of arr [ j ]","code":"y = arr [ j ] NEW_LINE yy = j NEW_LINE while ( j >= i and arr [ j ] == y ) : NEW_LINE INDENT j -= 1 NEW_LINE DEDENT"}
{"text":"If arr [ i ] and arr [ j ] are same then remove the extra number counted","code":"if ( x == y ) : NEW_LINE INDENT temp = i - xx + yy - j - 1 NEW_LINE ans += ( temp * ( temp + 1 ) ) \/\/ 2 NEW_LINE DEDENT else : NEW_LINE INDENT ans += ( i - xx ) * ( yy - j ) NEW_LINE DEDENT"}
{"text":"Return the required answer","code":"return ans NEW_LINE"}
{"text":"Driver code","code":"arr = [ 1 , 5 , 7 , 5 , - 1 ] NEW_LINE n = len ( arr ) NEW_LINE sum = 6 NEW_LINE print ( pairs_count ( arr , n , sum ) ) NEW_LINE"}
{"text":"Python3 program to implement the above approach","code":"import sys NEW_LINE def check ( str ) : NEW_LINE INDENT min = sys . maxsize NEW_LINE max = - sys . maxsize - 1 NEW_LINE sum = 0 NEW_LINE DEDENT"}
{"text":"For all the characters of the string","code":"for i in range ( len ( str ) ) : NEW_LINE"}
{"text":"Find the ascii value of the character","code":"ascii = str [ i ] NEW_LINE"}
{"text":"Check if if its a valid character , if not then return false","code":"if ( ord ( ascii ) < 96 or ord ( ascii ) > 122 ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Calculate sum of all the characters ascii values","code":"sum += ord ( ascii ) NEW_LINE"}
{"text":"Find minimum ascii value from the string","code":"if ( min > ord ( ascii ) ) : NEW_LINE INDENT min = ord ( ascii ) NEW_LINE DEDENT"}
{"text":"Find maximum ascii value from the string","code":"if ( max < ord ( ascii ) ) : NEW_LINE INDENT max = ord ( ascii ) NEW_LINE DEDENT"}
{"text":"To get the previous element of the minimum ASCII value","code":"min -= 1 NEW_LINE"}
{"text":"Take the expected sum from the above equation","code":"eSum = ( ( ( max * ( max + 1 ) ) \/\/ 2 ) - ( ( min * ( min + 1 ) ) \/\/ 2 ) ) NEW_LINE"}
{"text":"Check if the expected sum is equals to the calculated sum or not","code":"return sum == eSum NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"1 st example","code":"str = \" dcef \" NEW_LINE if ( check ( str ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"2 nd example","code":"str1 = \" xyza \" NEW_LINE if ( check ( str1 ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Function to find the sum of minimum of all subarrays","code":"def findKth ( arr , n , k ) : NEW_LINE INDENT missing = dict ( ) NEW_LINE count = 0 NEW_LINE DEDENT"}
{"text":"Insert all the elements in a set","code":"for i in range ( n ) : NEW_LINE INDENT missing [ arr [ i ] ] = 1 NEW_LINE DEDENT"}
{"text":"Find the maximum and minimum element","code":"maxm = max ( arr ) NEW_LINE minm = min ( arr ) NEW_LINE"}
{"text":"Traverse from the minimum to maximum element","code":"for i in range ( minm + 1 , maxm ) : NEW_LINE"}
{"text":"Check if \" i \" is missing","code":"if ( i not in missing . keys ( ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT"}
{"text":"Check if it is kth missing","code":"if ( count == k ) : NEW_LINE INDENT return i NEW_LINE DEDENT"}
{"text":"If no kth element is missing","code":"return - 1 NEW_LINE"}
{"text":"Driver code","code":"arr = [ 2 , 10 , 9 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE k = 5 NEW_LINE print ( findKth ( arr , n , k ) ) NEW_LINE"}
{"text":"Python3 program to sort linked list containing values from 1 to N","code":"import math NEW_LINE"}
{"text":"A linked list node","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . next = None NEW_LINE DEDENT DEDENT"}
{"text":"Function to sort linked list","code":"def sortList ( head ) : NEW_LINE INDENT startVal = 1 NEW_LINE while ( head != None ) : NEW_LINE INDENT head . data = startVal NEW_LINE startVal = startVal + 1 NEW_LINE head = head . next NEW_LINE DEDENT DEDENT"}
{"text":"Function to add a node at the beginning of Linked List","code":"def push ( head_ref , new_data ) : NEW_LINE"}
{"text":"allocate node","code":"new_node = Node ( new_data ) NEW_LINE"}
{"text":"put in the data","code":"new_node . data = new_data NEW_LINE"}
{"text":"link the old list off the new node","code":"new_node . next = head_ref NEW_LINE"}
{"text":"move the head to po to the new node","code":"head_ref = new_node NEW_LINE return head_ref NEW_LINE"}
{"text":"This function prs contents of linked list starting from the given node","code":"def prList ( node ) : NEW_LINE INDENT while ( node != None ) : NEW_LINE INDENT print ( node . data , end = \" \u2581 \" ) NEW_LINE node = node . next NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT head = None NEW_LINE DEDENT"}
{"text":"The constructed linked list is : 3.5 . 4.6 .1 . 2","code":"head = push ( head , 2 ) NEW_LINE head = push ( head , 1 ) NEW_LINE head = push ( head , 6 ) NEW_LINE head = push ( head , 4 ) NEW_LINE head = push ( head , 5 ) NEW_LINE head = push ( head , 3 ) NEW_LINE sortList ( head ) NEW_LINE prList ( head ) NEW_LINE"}
{"text":"Linked list node","code":"class Node : NEW_LINE INDENT def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . next = None NEW_LINE DEDENT DEDENT"}
{"text":"Function to Check Linked List is sorted in descending order or not","code":"def isSortedDesc ( head ) : NEW_LINE"}
{"text":"Base cases","code":"if ( head == None or head . next == None ) : NEW_LINE INDENT return True NEW_LINE DEDENT"}
{"text":"Check first two nodes and recursively check remaining .","code":"return ( head . data > head . next . data and isSortedDesc ( head . next ) ) NEW_LINE def newNode ( data ) : NEW_LINE INDENT temp = Node ( data ) NEW_LINE return temp NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT head = newNode ( 7 ) NEW_LINE head . next = newNode ( 5 ) NEW_LINE head . next . next = newNode ( 4 ) NEW_LINE head . next . next . next = newNode ( 3 ) NEW_LINE if isSortedDesc ( head ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Python 3 program to sort an array such that sum of product of alternate element is minimum .","code":"def minSum ( arr , n ) : NEW_LINE"}
{"text":"create evenArr [ ] and oddArr [ ]","code":"evenArr = [ ] NEW_LINE oddArr = [ ] NEW_LINE"}
{"text":"sort main array in ascending order","code":"arr . sort ( ) NEW_LINE"}
{"text":"Put elements in oddArr [ ] and evenArr [ ] as per desired value .","code":"for i in range ( n ) : NEW_LINE INDENT if ( i < n \/\/ 2 ) : NEW_LINE INDENT oddArr . append ( arr [ i ] ) NEW_LINE DEDENT else : NEW_LINE INDENT evenArr . append ( arr [ i ] ) NEW_LINE DEDENT DEDENT"}
{"text":"sort evenArr [ ] in descending order","code":"evenArr . sort ( reverse = True ) NEW_LINE"}
{"text":"merge both sub - array and calculate minimum sum of product of alternate elements","code":"i = 0 NEW_LINE sum = 0 NEW_LINE for j in range ( len ( evenArr ) ) : NEW_LINE INDENT arr [ i ] = evenArr [ j ] NEW_LINE i += 1 NEW_LINE arr [ i ] = oddArr [ j ] NEW_LINE i += 1 NEW_LINE sum += evenArr [ j ] * oddArr [ j ] NEW_LINE DEDENT return sum NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 5 , 8 , 9 , 6 , 7 , 3 , 4 , 2 , 0 ] NEW_LINE n = len ( arr ) NEW_LINE print ( \" Minimum \u2581 required \u2581 sum \u2581 = \" , minSum ( arr , n ) ) NEW_LINE print ( \" Sorted \u2581 array \u2581 in \u2581 required \u2581 format \u2581 : \u2581 \" , end = \" \" ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT print ( arr [ i ] , end = \" \u2581 \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to calculate minimum time to print all characters in the string","code":"def minTime ( word ) : NEW_LINE INDENT ans = 0 NEW_LINE DEDENT"}
{"text":"Current element where the pointer is pointing","code":"curr = 0 NEW_LINE for i in range ( len ( word ) ) : NEW_LINE"}
{"text":"Find index of that element","code":"k = ord ( word [ i ] ) - 97 NEW_LINE"}
{"text":"Calculate absolute difference between pointer index and character index as clockwise distance","code":"a = abs ( curr - k ) NEW_LINE"}
{"text":"Subtract clockwise time from 26 to get anti - clockwise time","code":"b = 26 - abs ( curr - k ) NEW_LINE"}
{"text":"Add minimum of both times to the answer","code":"ans += min ( a , b ) NEW_LINE"}
{"text":"Add one unit time to print the character","code":"ans += 1 NEW_LINE curr = ord ( word [ i ] ) - 97 NEW_LINE"}
{"text":"Print the final answer","code":"print ( ans ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given string word","code":"str = \" zjpc \" NEW_LINE"}
{"text":"Function call","code":"minTime ( str ) NEW_LINE"}
{"text":"Function to find the minimum number of steps required to reduce N to 1","code":"def reduceToOne ( N ) : NEW_LINE"}
{"text":"Stores the number of steps required","code":"cnt = 0 NEW_LINE while ( N != 1 ) : NEW_LINE"}
{"text":"If the value of N is equal to 2 or N is odd","code":"if ( N == 2 or ( N % 2 == 1 ) ) : NEW_LINE"}
{"text":"Decrement N by 1","code":"N = N - 1 NEW_LINE"}
{"text":"Increment cnt by 1","code":"cnt += 1 NEW_LINE"}
{"text":"If N is even","code":"elif ( N % 2 == 0 ) : NEW_LINE"}
{"text":"Update N","code":"N = N \/ ( N \/ 2 ) NEW_LINE"}
{"text":"Increment cnt by 1","code":"cnt += 1 NEW_LINE"}
{"text":"Return the number of steps obtained","code":"return cnt NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 35 NEW_LINE print ( reduceToOne ( N ) ) NEW_LINE DEDENT"}
{"text":"Function to find the maximum number of diamonds that can be gained in exactly K minutes","code":"def maxDiamonds ( A , N , K ) : NEW_LINE"}
{"text":"Stores all the array elements","code":"pq = [ ] NEW_LINE"}
{"text":"Push all the elements to the priority queue","code":"for i in range ( N ) : NEW_LINE INDENT pq . append ( A [ i ] ) NEW_LINE DEDENT pq . sort ( ) NEW_LINE"}
{"text":"Stores the required result","code":"ans = 0 NEW_LINE"}
{"text":"Loop while the queue is not empty and K is positive","code":"while ( len ( pq ) > 0 and K > 0 ) : NEW_LINE INDENT pq . sort ( ) NEW_LINE DEDENT"}
{"text":"Store the top element from the pq","code":"top = pq [ len ( pq ) - 1 ] NEW_LINE"}
{"text":"Pop it from the pq","code":"pq = pq [ 0 : len ( pq ) - 1 ] NEW_LINE"}
{"text":"Add it to the answer","code":"ans += top NEW_LINE"}
{"text":"Divide it by 2 and push it back to the pq","code":"top = top \/\/ 2 ; NEW_LINE pq . append ( top ) NEW_LINE K -= 1 NEW_LINE"}
{"text":"Print the answer","code":"print ( ans ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 2 , 1 , 7 , 4 , 2 ] NEW_LINE K = 3 NEW_LINE N = len ( A ) NEW_LINE maxDiamonds ( A , N , K ) NEW_LINE DEDENT"}
{"text":"Function to find the minimum cost to make A [ i ] multiple of B [ i ] or vice - versa for every array element","code":"def MinimumCost ( A , B , N ) : NEW_LINE"}
{"text":"Stores the minimum cost","code":"totalCost = 0 NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Case 1 : Update A [ i ]","code":"mod_A = B [ i ] % A [ i ] NEW_LINE totalCost_A = min ( mod_A , A [ i ] - mod_A ) NEW_LINE"}
{"text":"Case 2 : Update B [ i ]","code":"mod_B = A [ i ] % B [ i ] NEW_LINE totalCost_B = min ( mod_B , B [ i ] - mod_B ) NEW_LINE"}
{"text":"Add the minimum of the above two cases","code":"totalCost += min ( totalCost_A , totalCost_B ) NEW_LINE"}
{"text":"Return the resultant cost","code":"return totalCost NEW_LINE"}
{"text":"Driver Code","code":"A = [ 3 , 6 , 3 ] NEW_LINE B = [ 4 , 8 , 13 ] NEW_LINE N = len ( A ) NEW_LINE print ( MinimumCost ( A , B , N ) ) NEW_LINE"}
{"text":"Print the largest number divisible by 50","code":"def printLargestDivisible ( arr , N ) : NEW_LINE INDENT count0 = 0 ; count7 = 0 ; NEW_LINE for i in range ( N ) : NEW_LINE DEDENT"}
{"text":"Counting number of 0 s and 7 s","code":"if ( arr [ i ] == 0 ) : NEW_LINE INDENT count0 += 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT count7 += 1 ; NEW_LINE DEDENT"}
{"text":"If count of 7 is divisible by 50","code":"if ( count7 % 50 == 0 ) : NEW_LINE INDENT while ( count7 ) : NEW_LINE INDENT count7 -= 1 ; NEW_LINE print ( 7 , end = \" \" ) ; NEW_LINE DEDENT while ( count0 ) : NEW_LINE INDENT count0 -= 1 ; NEW_LINE print ( count0 , end = \" \" ) ; NEW_LINE DEDENT DEDENT"}
{"text":"If count of 7 is less than 5","code":"elif ( count7 < 5 ) : NEW_LINE INDENT if ( count0 == 0 ) : NEW_LINE INDENT print ( \" No \" , end = \" \" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( \"0\" , end = \" \" ) ; NEW_LINE DEDENT DEDENT"}
{"text":"If count of 7 is not divisible by 50","code":"else : NEW_LINE"}
{"text":"Count of groups of 5 in which count of 7 s can be grouped","code":"count7 = count7 - count7 % 5 ; NEW_LINE while ( count7 ) : NEW_LINE INDENT count7 -= 1 ; NEW_LINE print ( 7 , end = \" \" ) ; NEW_LINE DEDENT while ( count0 ) : NEW_LINE INDENT count0 -= 1 ; NEW_LINE print ( 0 , end = \" \" ) ; NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Given array","code":"arr = [ 0 , 7 , 0 , 7 , 7 , 7 , 7 , 0 , 0 , 0 , 0 , 0 , 0 , 7 , 7 , 7 ] ; NEW_LINE"}
{"text":"Size of the array","code":"N = len ( arr ) ; NEW_LINE printLargestDivisible ( arr , N ) ; NEW_LINE"}
{"text":"Function to find the maximum sum of GCD ( arr [ i ] , i ) by rearranging the array","code":"def findMaxValByRearrArr ( arr , N ) : NEW_LINE"}
{"text":"Sort the array in ascending order","code":"arr . sort ( ) NEW_LINE"}
{"text":"Stores maximum sum of GCD ( arr [ i ] , i ) by rearranging the array elements","code":"res = 0 NEW_LINE"}
{"text":"Generate all possible permutations of the array","code":"while ( True ) : NEW_LINE"}
{"text":"Stores sum of GCD ( arr [ i ] , i )","code":"Sum = 0 NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Update sum","code":"Sum += __gcd ( i + 1 , arr [ i ] ) NEW_LINE"}
{"text":"Update res","code":"res = max ( res , Sum ) NEW_LINE if ( not next_permutation ( arr ) ) : NEW_LINE INDENT break NEW_LINE DEDENT return res NEW_LINE def __gcd ( a , b ) : NEW_LINE if b == 0 : NEW_LINE return a NEW_LINE else : NEW_LINE return __gcd ( b , a % b ) NEW_LINE def next_permutation ( p ) : NEW_LINE for a in range ( len ( p ) - 2 , - 1 , - 1 ) : NEW_LINE if ( p [ a ] < p [ a + 1 ] ) : NEW_LINE INDENT b = len ( p ) - 1 NEW_LINE while True : NEW_LINE INDENT if ( p [ b ] > p [ a ] ) : NEW_LINE INDENT t = p [ a ] NEW_LINE p [ a ] = p [ b ] NEW_LINE p [ b ] = t NEW_LINE a += 1 NEW_LINE b = len ( p ) - 1 NEW_LINE while a < b : NEW_LINE INDENT t = p [ a ] NEW_LINE p [ a ] = p [ b ] NEW_LINE p [ b ] = t NEW_LINE a += 1 NEW_LINE b -= 1 NEW_LINE DEDENT return True NEW_LINE DEDENT b -= 1 NEW_LINE DEDENT DEDENT return False NEW_LINE"}
{"text":"Driver code","code":"arr = [ 3 , 2 , 1 ] NEW_LINE N = len ( arr ) NEW_LINE print ( findMaxValByRearrArr ( arr , N ) ) NEW_LINE"}
{"text":"Function to find the minimum count of elements required to be removed such that frequency of arr [ i ] equal to arr [ i ]","code":"def min_elements ( arr , N ) : NEW_LINE"}
{"text":"Stores frequency of each element of the array","code":"mp = { } ; NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Update frequency of arr [ i ]","code":"if arr [ i ] in mp : NEW_LINE INDENT mp [ arr [ i ] ] += 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT mp [ arr [ i ] ] = 1 ; NEW_LINE DEDENT"}
{"text":"Stores minimum count of removals","code":"cntMinRem = 0 ; NEW_LINE"}
{"text":"Traverse the map","code":"for it in mp : NEW_LINE"}
{"text":"Stores key value of the map","code":"i = it ; NEW_LINE"}
{"text":"If frequency of i is less than i","code":"if ( mp [ i ] < i ) : NEW_LINE"}
{"text":"Update cntMinRem","code":"cntMinRem += mp [ i ] ; NEW_LINE"}
{"text":"If frequency of i is greater than i","code":"elif ( mp [ i ] > i ) : NEW_LINE"}
{"text":"Update cntMinRem","code":"cntMinRem += ( mp [ i ] - i ) ; NEW_LINE return cntMinRem ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 2 , 4 , 1 , 4 , 2 ] ; NEW_LINE N = len ( arr ) ; NEW_LINE print ( min_elements ( arr , N ) ) ; NEW_LINE DEDENT"}
{"text":"Function to check if an array of equal elements with sum equal to the given array can be obtained or not","code":"def CheckAllarrayEqual ( arr , N ) : NEW_LINE"}
{"text":"Base case","code":"if ( N == 1 ) : NEW_LINE INDENT return True NEW_LINE DEDENT"}
{"text":"Stores sum of array elements","code":"totalSum = arr [ 0 ] NEW_LINE"}
{"text":"Stores second largest array element","code":"secMax = - 10 ** 19 NEW_LINE"}
{"text":"Stores the largest array element","code":"Max = arr [ 0 ] NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( 1 , N ) : NEW_LINE INDENT if ( arr [ i ] >= Max ) : NEW_LINE DEDENT"}
{"text":"Update secMax","code":"secMax = Max NEW_LINE"}
{"text":"Update Max","code":"Max = arr [ i ] NEW_LINE elif ( arr [ i ] > secMax ) : NEW_LINE"}
{"text":"Update secMax","code":"secMax = arr [ i ] NEW_LINE"}
{"text":"Update totalSum","code":"totalSum += arr [ i ] NEW_LINE"}
{"text":"If totalSum is less than secMax * ( N - 1 ) )","code":"if ( ( secMax * ( N - 1 ) ) > totalSum ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"If totalSum is not divisible by ( N - 1 )","code":"if ( totalSum % ( N - 1 ) ) : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 6 , 2 , 2 , 2 ] NEW_LINE N = len ( arr ) NEW_LINE if ( CheckAllarrayEqual ( arr , N ) ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to count ways to make Bitwise XOR of odd and even indexed elements equal by removing an array element","code":"def Remove_one_element ( arr , n ) : NEW_LINE"}
{"text":"Stores xor of odd and even indexed elements from the end","code":"post_odd = 0 NEW_LINE post_even = 0 NEW_LINE"}
{"text":"Stores xor of odd and even indexed elements from the start","code":"curr_odd = 0 NEW_LINE curr_even = 0 NEW_LINE"}
{"text":"Stores the required count","code":"res = 0 NEW_LINE"}
{"text":"Traverse the array in reverse","code":"for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE"}
{"text":"If i is odd","code":"if ( i % 2 ) : NEW_LINE INDENT post_odd ^= arr [ i ] NEW_LINE DEDENT"}
{"text":"If i is even","code":"else : NEW_LINE INDENT post_even ^= arr [ i ] NEW_LINE DEDENT"}
{"text":"Traverse the array","code":"for i in range ( n ) : NEW_LINE"}
{"text":"If i is odd","code":"if ( i % 2 ) : NEW_LINE INDENT post_odd ^= arr [ i ] NEW_LINE DEDENT"}
{"text":"If i is even","code":"else : NEW_LINE INDENT post_even ^= arr [ i ] NEW_LINE DEDENT"}
{"text":"Removing arr [ i ] , post_even stores XOR of odd indexed elements","code":"X = curr_odd ^ post_even NEW_LINE"}
{"text":"Removing arr [ i ] , post_odd stores XOR of even indexed elements","code":"Y = curr_even ^ post_odd NEW_LINE"}
{"text":"Check if they are equal","code":"if ( X == Y ) : NEW_LINE INDENT res += 1 NEW_LINE DEDENT"}
{"text":"If i is odd , xor it with curr_odd","code":"if ( i % 2 ) : NEW_LINE INDENT curr_odd ^= arr [ i ] NEW_LINE DEDENT"}
{"text":"If i is even , xor it with curr_even","code":"else : NEW_LINE INDENT curr_even ^= arr [ i ] NEW_LINE DEDENT"}
{"text":"Finally print res","code":"print ( res ) NEW_LINE"}
{"text":"Drivers Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Given array","code":"arr = [ 1 , 0 , 1 , 0 , 1 ] NEW_LINE"}
{"text":"Given size","code":"N = len ( arr ) NEW_LINE"}
{"text":"Function call","code":"Remove_one_element ( arr , N ) NEW_LINE"}
{"text":"Function to count array indices whose removal makes sum of odd and even indexed elements equal","code":"def cntIndexesToMakeBalance ( arr , n ) : NEW_LINE"}
{"text":"If size of the array is 1","code":"if ( n == 1 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT"}
{"text":"If size of the array is 2","code":"if ( n == 2 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"Stores sum of even - indexed elements of the given array","code":"sumEven = 0 NEW_LINE"}
{"text":"Stores sum of odd - indexed elements of the given array","code":"sumOdd = 0 NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( n ) : NEW_LINE"}
{"text":"If i is an even number","code":"if ( i % 2 == 0 ) : NEW_LINE"}
{"text":"Update sumEven","code":"sumEven += arr [ i ] NEW_LINE"}
{"text":"If i is an odd number","code":"else : NEW_LINE"}
{"text":"Update sumOdd","code":"sumOdd += arr [ i ] NEW_LINE"}
{"text":"Stores sum of even - indexed array elements till i - th index","code":"currOdd = 0 NEW_LINE"}
{"text":"Stores sum of odd - indexed array elements till i - th index","code":"currEven = arr [ 0 ] NEW_LINE"}
{"text":"Stores count of indices whose removal makes sum of odd and even indexed elements equal","code":"res = 0 NEW_LINE"}
{"text":"Stores sum of even - indexed elements after removing the i - th element","code":"newEvenSum = 0 NEW_LINE"}
{"text":"Stores sum of odd - indexed elements after removing the i - th element","code":"newOddSum = 0 NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( 1 , n - 1 ) : NEW_LINE"}
{"text":"If i is an odd number","code":"if ( i % 2 ) : NEW_LINE"}
{"text":"Update currOdd","code":"currOdd += arr [ i ] NEW_LINE"}
{"text":"Update newEvenSum","code":"newEvenSum = ( currEven + sumOdd - currOdd ) NEW_LINE"}
{"text":"Update newOddSum","code":"newOddSum = ( currOdd + sumEven - currEven - arr [ i ] ) NEW_LINE"}
{"text":"If i is an even number","code":"else : NEW_LINE"}
{"text":"Update currEven","code":"currEven += arr [ i ] NEW_LINE"}
{"text":"Update newOddSum","code":"newOddSum = ( currOdd + sumEven - currEven ) NEW_LINE"}
{"text":"Update newEvenSum","code":"newEvenSum = ( currEven + sumOdd - currOdd - arr [ i ] ) NEW_LINE"}
{"text":"If newEvenSum is equal to newOddSum","code":"if ( newEvenSum == newOddSum ) : NEW_LINE"}
{"text":"Increase the count","code":"res += 1 NEW_LINE"}
{"text":"If sum of even - indexed and odd - indexed elements is equal by removing the first element","code":"if ( sumOdd == sumEven - arr [ 0 ] ) : NEW_LINE"}
{"text":"Increase the count","code":"res += 1 NEW_LINE"}
{"text":"If length of the array is an odd number","code":"if ( n % 2 == 1 ) : NEW_LINE"}
{"text":"If sum of even - indexed and odd - indexed elements is equal by removing the last element","code":"if ( sumOdd == sumEven - arr [ n - 1 ] ) : NEW_LINE"}
{"text":"Increase the count","code":"res += 1 NEW_LINE"}
{"text":"If length of the array is an even number","code":"else : NEW_LINE"}
{"text":"If sum of even - indexed and odd - indexed elements is equal by removing the last element","code":"if ( sumEven == sumOdd - arr [ n - 1 ] ) : NEW_LINE"}
{"text":"Increase the count","code":"res += 1 NEW_LINE return res NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 1 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( cntIndexesToMakeBalance ( arr , n ) ) NEW_LINE DEDENT"}
{"text":"Function to find the value of A and B whose sum is X and xor is Y","code":"def findNums ( X , Y ) : NEW_LINE"}
{"text":"Initialize the two numbers","code":"A = 0 ; NEW_LINE B = 0 ; NEW_LINE"}
{"text":"Case 1 : X < Y","code":"if ( X < Y ) : NEW_LINE INDENT A = - 1 ; NEW_LINE B = - 1 ; NEW_LINE DEDENT"}
{"text":"Case 2 : X - Y is odd","code":"elif ( ( ( abs ( X - Y ) ) & 1 ) != 0 ) : NEW_LINE INDENT A = - 1 ; NEW_LINE B = - 1 ; NEW_LINE DEDENT"}
{"text":"Case 3 : If both Sum and XOR are equal","code":"elif ( X == Y ) : NEW_LINE INDENT A = 0 ; NEW_LINE B = Y ; NEW_LINE DEDENT"}
{"text":"Case 4 : If above cases fails","code":"else : NEW_LINE"}
{"text":"Update the value of A","code":"A = ( X - Y ) \/\/ 2 ; NEW_LINE"}
{"text":"Check if A & Y value is 0","code":"if ( ( A & Y ) == 0 ) : NEW_LINE"}
{"text":"If True , update B","code":"B = ( A + Y ) ; NEW_LINE"}
{"text":"Otherwise assign - 1 to A , - 1 to B","code":"else : NEW_LINE INDENT A = - 1 ; NEW_LINE B = - 1 ; NEW_LINE DEDENT"}
{"text":"Prthe numbers A and B","code":"print A ; NEW_LINE print B ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given Sum and XOR of 2 numbers","code":"X = 17 ; NEW_LINE Y = 13 ; NEW_LINE"}
{"text":"Function Call","code":"findNums ( X , Y ) ; NEW_LINE"}
{"text":"Function to check if given range have equal number of increasing as well as decreasing subarrays","code":"def checkCount ( A , Q , q ) : NEW_LINE"}
{"text":"Traverse each query","code":"for i in range ( q ) : NEW_LINE INDENT L = Q [ i ] [ 0 ] NEW_LINE R = Q [ i ] [ 1 ] NEW_LINE DEDENT"}
{"text":"For 0 - based indexing","code":"L -= 1 NEW_LINE R -= 1 NEW_LINE"}
{"text":"Condition for same count of increasing & decreasing subarray","code":"if ( ( A [ L ] < A [ L + 1 ] ) != ( A [ R - 1 ] < A [ R ] ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 11 , 13 , 12 , 14 ] NEW_LINE Q = [ [ 1 , 4 ] , [ 2 , 4 ] ] NEW_LINE q = len ( Q ) NEW_LINE checkCount ( arr , Q , q ) NEW_LINE DEDENT"}
{"text":"Function to find the mean of pair product array of arr","code":"def pairProductMean ( arr , N ) : NEW_LINE"}
{"text":"Store product of pairs","code":"pairArray = [ ] ; NEW_LINE"}
{"text":"Generate all unordered pairs","code":"for i in range ( N ) : NEW_LINE INDENT for j in range ( i + 1 , N ) : NEW_LINE INDENT pairProduct = arr [ i ] * arr [ j ] ; NEW_LINE DEDENT DEDENT"}
{"text":"Store product of pairs","code":"pairArray . append ( pairProduct ) ; NEW_LINE"}
{"text":"Size of pairArray","code":"length = len ( pairArray ) ; NEW_LINE"}
{"text":"Store sum of pairArray","code":"sum = 0 ; NEW_LINE for i in range ( length ) : NEW_LINE INDENT sum += pairArray [ i ] ; NEW_LINE DEDENT"}
{"text":"Stores the mean of pairArray","code":"mean = 0 ; NEW_LINE"}
{"text":"Find mean of pairArray","code":"if ( length != 0 ) : NEW_LINE INDENT mean = sum \/ length ; NEW_LINE DEDENT else : NEW_LINE INDENT mean = 0 ; NEW_LINE DEDENT"}
{"text":"Return the resultant mean","code":"return mean ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given array arr","code":"arr = [ 1 , 2 , 4 , 8 ] ; NEW_LINE N = len ( arr ) ; NEW_LINE"}
{"text":"Function Call","code":"print ( \" { 0 : . 2f } \" . format ( pairProductMean ( arr , N ) ) ) NEW_LINE"}
{"text":"Function to find the player who loses the game","code":"def findPlayer ( str , n ) : NEW_LINE"}
{"text":"Moves for the first player","code":"move_first = 0 NEW_LINE"}
{"text":"Moves for the second player","code":"move_sec = 0 NEW_LINE"}
{"text":"Iterate over array of strings","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Check if the first and last character are the same","code":"if ( str [ i ] [ 0 ] == str [ i ] [ len ( str [ i ] ) - 1 ] ) : NEW_LINE"}
{"text":"Check if string start and end with character '0","code":"' NEW_LINE INDENT if ( str [ i ] [ 0 ] == 48 ) : NEW_LINE INDENT move_first += 1 NEW_LINE DEDENT else : NEW_LINE INDENT move_sec += 1 NEW_LINE DEDENT DEDENT"}
{"text":"If first player have less moves","code":"if ( move_first <= move_sec ) : NEW_LINE INDENT print ( \" Player \u2581 2 \u2581 wins \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Player \u2581 1 \u2581 wins \" ) NEW_LINE DEDENT"}
{"text":"Given array of strings","code":"str = [ \"010\" , \"101\" ] NEW_LINE N = len ( str ) NEW_LINE"}
{"text":"Function call","code":"findPlayer ( str , N ) NEW_LINE"}
{"text":"Function to find the number greater than n whose Kth bit is set","code":"def find_next ( n , k ) : NEW_LINE"}
{"text":"Iterate from N + 1","code":"M = n + 1 ; NEW_LINE while ( True ) : NEW_LINE"}
{"text":"Check if Kth bit is set or not","code":"if ( ( M & ( 1 << k ) ) > 0 ) : NEW_LINE INDENT break ; NEW_LINE DEDENT"}
{"text":"Increment M for next number","code":"M += 1 ; NEW_LINE"}
{"text":"Return the minimum value","code":"return M ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given N and K","code":"N = 15 ; K = 2 ; NEW_LINE"}
{"text":"Function Call","code":"print ( find_next ( N , K ) ) ; NEW_LINE"}
{"text":"Function to find the number greater than n whose Kth bit is set","code":"def find_next ( n , k ) : NEW_LINE"}
{"text":"Stores the resultant number","code":"ans = 0 NEW_LINE"}
{"text":"If Kth bit is not set","code":"if ( ( n & ( 1 << k ) ) == 0 ) : NEW_LINE INDENT cur = 0 NEW_LINE DEDENT"}
{"text":"cur will be the sum of all powers of 2 < k","code":"for i in range ( k ) : NEW_LINE"}
{"text":"If the current bit is set","code":"if ( n & ( 1 << i ) ) : NEW_LINE INDENT cur += 1 << i NEW_LINE DEDENT"}
{"text":"Add Kth power of 2 to n and subtract the all powers of 2 less than K that are set","code":"ans = n - cur + ( 1 << k ) NEW_LINE"}
{"text":"If the kth bit is set","code":"else : NEW_LINE INDENT first_unset_bit , cur = - 1 , 0 NEW_LINE for i in range ( 64 ) : NEW_LINE DEDENT"}
{"text":"First unset bit position","code":"if ( ( n & ( 1 << i ) ) == 0 ) : NEW_LINE INDENT first_unset_bit = i NEW_LINE break NEW_LINE DEDENT"}
{"text":"Sum of bits that are set","code":"else : NEW_LINE INDENT cur += ( 1 << i ) NEW_LINE DEDENT"}
{"text":"Add Kth power of 2 to n and subtract the all powers of 2 less than K that are set","code":"ans = n - cur + ( 1 << first_unset_bit ) NEW_LINE"}
{"text":"If Kth bit became unset then set it again","code":"if ( ( ans & ( 1 << k ) ) == 0 ) : NEW_LINE INDENT ans += ( 1 << k ) NEW_LINE DEDENT"}
{"text":"Return the resultant number","code":"return ans NEW_LINE"}
{"text":"Driver code","code":"N , K = 15 , 2 NEW_LINE"}
{"text":"Print ans","code":"print ( find_next ( N , K ) ) NEW_LINE"}
{"text":"Python3 program to implement the above approach","code":"def largestString ( num , k ) : NEW_LINE"}
{"text":"Final result string","code":"ans = [ ] NEW_LINE for i in range ( len ( num ) ) : NEW_LINE"}
{"text":"If the current char exceeds the character at the top of the stack","code":"while ( len ( ans ) and ans [ - 1 ] < num [ i ] and k > 0 ) : NEW_LINE"}
{"text":"Remove from the end of the string","code":"ans . pop ( ) NEW_LINE"}
{"text":"Decrease k for the removal","code":"k -= 1 NEW_LINE"}
{"text":"Insert current character","code":"ans . append ( num [ i ] ) NEW_LINE"}
{"text":"Perform remaining K deletions from the end of the string","code":"while ( len ( ans ) and k ) : NEW_LINE INDENT k -= 1 NEW_LINE ans . pop ( ) NEW_LINE DEDENT"}
{"text":"Return the string","code":"return ans NEW_LINE"}
{"text":"Driver code","code":"str = \" zyxedcba \" NEW_LINE k = 1 NEW_LINE print ( * largestString ( str , k ) , sep = \" \" ) NEW_LINE"}
{"text":"Function that finds the maximum length of the sub - array that contains equal element on both halves of sub - array","code":"def maxLengthSubArray ( A , N ) : NEW_LINE"}
{"text":"To store continuous occurence of the element","code":"forward = [ 0 ] * N NEW_LINE backward = [ 0 ] * N NEW_LINE"}
{"text":"To store continuous forward occurence","code":"for i in range ( N ) : NEW_LINE INDENT if i == 0 or A [ i ] != A [ i - 1 ] : NEW_LINE INDENT forward [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT forward [ i ] = forward [ i - 1 ] + 1 NEW_LINE DEDENT DEDENT"}
{"text":"To store continuous backward occurence","code":"for i in range ( N - 1 , - 1 , - 1 ) : NEW_LINE INDENT if i == N - 1 or A [ i ] != A [ i + 1 ] : NEW_LINE INDENT backward [ i ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT backward [ i ] = backward [ i + 1 ] + 1 NEW_LINE DEDENT DEDENT"}
{"text":"To store the maximum length","code":"ans = 0 NEW_LINE"}
{"text":"Find maximum length","code":"for i in range ( N - 1 ) : NEW_LINE INDENT if ( A [ i ] != A [ i + 1 ] ) : NEW_LINE INDENT ans = max ( ans , min ( forward [ i ] , backward [ i + 1 ] ) * 2 ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Print the result","code":"print ( ans ) NEW_LINE"}
{"text":"Given array","code":"arr = [ 1 , 2 , 3 , 4 , 4 , 4 , 6 , 6 , 6 , 9 ] NEW_LINE"}
{"text":"Size of the array","code":"N = len ( arr ) NEW_LINE"}
{"text":"Function call","code":"maxLengthSubArray ( arr , N ) NEW_LINE"}
{"text":"Python3 implementation of the above approach","code":"from math import * NEW_LINE"}
{"text":"Function to find the minimum number of n digits divisible by all prime digits .","code":"def minNum ( n ) : NEW_LINE INDENT if n < 3 : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( 210 * ( 10 ** ( n - 1 ) \/\/ 210 + 1 ) ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"n = 5 NEW_LINE minNum ( n ) NEW_LINE"}
{"text":"Function to return the minimum string of length d having the sum of digits s","code":"def helper ( d , s ) : NEW_LINE"}
{"text":"Return a string of length d","code":"ans = [ '0' ] * d NEW_LINE for i in range ( d - 1 , - 1 , - 1 ) : NEW_LINE"}
{"text":"Greedily put 9 's  in the end","code":"if ( s >= 9 ) : NEW_LINE INDENT ans [ i ] = '9' NEW_LINE s -= 9 NEW_LINE DEDENT"}
{"text":"Put remaining sum","code":"else : NEW_LINE INDENT c = chr ( s + ord ( '0' ) ) NEW_LINE ans [ i ] = c ; NEW_LINE s = 0 ; NEW_LINE DEDENT return ' ' . join ( ans ) ; NEW_LINE"}
{"text":"Function to find the smallest number greater than Y whose sum of digits is X","code":"def findMin ( x , Y ) : NEW_LINE"}
{"text":"Convert number y to string","code":"y = str ( Y ) ; NEW_LINE n = len ( y ) NEW_LINE p = [ 0 ] * n NEW_LINE"}
{"text":"Maintain prefix sum of digits","code":"for i in range ( n ) : NEW_LINE INDENT p [ i ] = ( ord ( y [ i ] ) - ord ( '0' ) ) NEW_LINE if ( i > 0 ) : NEW_LINE INDENT p [ i ] += p [ i - 1 ] ; NEW_LINE DEDENT DEDENT"}
{"text":"Iterate over Y from the back where k is current length of suffix","code":"n - 1 NEW_LINE k = 0 NEW_LINE while True : NEW_LINE"}
{"text":"Stores current digit","code":"d = 0 ; NEW_LINE if ( i >= 0 ) : NEW_LINE INDENT d = ( ord ( y [ i ] ) - ord ( '0' ) ) NEW_LINE DEDENT"}
{"text":"Increase current digit","code":"for j in range ( d + 1 , 10 ) : NEW_LINE"}
{"text":"Sum upto current prefix","code":"r = ( ( i > 0 ) * p [ i - 1 ] + j ) ; NEW_LINE"}
{"text":"Return answer if remaining sum can be obtained in suffix","code":"if ( x - r >= 0 and x - r <= 9 * k ) : NEW_LINE"}
{"text":"Find suffix of length k having sum of digits x - r","code":"suf = helper ( k , x - r ) ; NEW_LINE pre = \" \" ; NEW_LINE if ( i > 0 ) : NEW_LINE INDENT pre = y [ 0 : i ] NEW_LINE DEDENT"}
{"text":"Append current character","code":"cur = chr ( j + ord ( '0' ) ) NEW_LINE pre += cur ; NEW_LINE"}
{"text":"Return the result","code":"return pre + suf ; NEW_LINE i -= 1 NEW_LINE k += 1 NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Given Number and Sum","code":"x = 18 ; NEW_LINE y = 99 ; NEW_LINE"}
{"text":"Function Call","code":"print ( findMin ( x , y ) ) NEW_LINE"}
{"text":"Function to generate and return the largest number","code":"def largestNumber ( n , X , Y ) : NEW_LINE INDENT maxm = max ( X , Y ) NEW_LINE DEDENT"}
{"text":"Store the smaller in Y","code":"Y = X + Y - maxm NEW_LINE"}
{"text":"Store the larger in X","code":"X = maxm NEW_LINE"}
{"text":"Stores respective counts","code":"Xs = 0 NEW_LINE Ys = 0 NEW_LINE while ( n > 0 ) : NEW_LINE"}
{"text":"If N is divisible by Y","code":"if ( n % Y == 0 ) : NEW_LINE"}
{"text":"Append X , N times to the answer","code":"Xs += n NEW_LINE"}
{"text":"Reduce N to zero","code":"n = 0 NEW_LINE else : NEW_LINE"}
{"text":"Reduce N by x","code":"n -= X NEW_LINE"}
{"text":"Append Y , X times to the answer","code":"Ys += X NEW_LINE"}
{"text":"If number can be formed","code":"if ( n == 0 ) : NEW_LINE INDENT while ( Xs > 0 ) : NEW_LINE INDENT Xs -= 1 NEW_LINE print ( X , end = ' ' ) NEW_LINE DEDENT while ( Ys > 0 ) : NEW_LINE INDENT Ys -= 1 NEW_LINE print ( Y , end = ' ' ) NEW_LINE DEDENT DEDENT"}
{"text":"Otherwise","code":"else : NEW_LINE INDENT print ( \" - 1\" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"n = 19 NEW_LINE X = 7 NEW_LINE Y = 5 NEW_LINE largestNumber ( n , X , Y ) NEW_LINE"}
{"text":"Python3 implementation of the above approach","code":"def minChanges ( str , N ) : NEW_LINE INDENT count0 = 0 NEW_LINE count1 = 0 NEW_LINE DEDENT"}
{"text":"Traverse input string and store the count of 0","code":"for x in str : NEW_LINE INDENT count0 += ( x == '0' ) NEW_LINE DEDENT res = count0 NEW_LINE"}
{"text":"Traverse the input string again to find minimum number of flips","code":"for x in str : NEW_LINE INDENT count0 -= ( x == '0' ) NEW_LINE count1 += ( x == '1' ) NEW_LINE res = min ( res , count1 + count0 ) NEW_LINE DEDENT return res NEW_LINE"}
{"text":"Driver code","code":"N = 9 NEW_LINE str = \"000101001\" NEW_LINE print ( minChanges ( str , N ) ) NEW_LINE"}
{"text":"Python3 implementation of the missing number such that maximum absolute difference between adjacent element is minimum","code":"import sys NEW_LINE"}
{"text":"Function to find the missing number such that maximum absolute difference is minimum","code":"def missingnumber ( n , arr ) -> int : NEW_LINE INDENT mn = sys . maxsize ; NEW_LINE mx = - sys . maxsize - 1 ; NEW_LINE DEDENT"}
{"text":"Loop to find the maximum and minimum adjacent element to missing number","code":"for i in range ( n ) : NEW_LINE INDENT if ( i > 0 and arr [ i ] == - 1 and arr [ i - 1 ] != - 1 ) : NEW_LINE INDENT mn = min ( mn , arr [ i - 1 ] ) ; NEW_LINE mx = max ( mx , arr [ i - 1 ] ) ; NEW_LINE DEDENT if ( i < ( n - 1 ) and arr [ i ] == - 1 and arr [ i + 1 ] != - 1 ) : NEW_LINE INDENT mn = min ( mn , arr [ i + 1 ] ) ; NEW_LINE mx = max ( mx , arr [ i + 1 ] ) ; NEW_LINE DEDENT DEDENT res = ( mx + mn ) \/ 2 ; NEW_LINE return res ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 ; NEW_LINE arr = [ - 1 , 10 , - 1 , 12 , - 1 ] ; NEW_LINE DEDENT"}
{"text":"Function call","code":"res = missingnumber ( n , arr ) ; NEW_LINE print ( res ) ; NEW_LINE"}
{"text":"Function to find the length of the longest common substring of the string X and Y","code":"def LCSubStr ( A , B , m , n ) : NEW_LINE"}
{"text":"LCSuff [ i ] [ j ] stores the lengths of the longest common suffixes of substrings","code":"LCSuff = [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ] NEW_LINE result = 0 NEW_LINE"}
{"text":"Itearate over strings A and B","code":"for i in range ( m + 1 ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE DEDENT"}
{"text":"If first row or column","code":"if ( i == 0 or j == 0 ) : NEW_LINE INDENT LCSuff [ i ] [ j ] = 0 NEW_LINE DEDENT"}
{"text":"If matching is found","code":"elif ( A [ i - 1 ] == B [ j - 1 ] ) : NEW_LINE INDENT LCSuff [ i ] [ j ] = LCSuff [ i - 1 ] [ j - 1 ] + 1 NEW_LINE result = max ( result , LCSuff [ i ] [ j ] ) NEW_LINE DEDENT"}
{"text":"Otherwise , if matching is not found","code":"else : NEW_LINE INDENT LCSuff [ i ] [ j ] = 0 NEW_LINE DEDENT"}
{"text":"Finally , return the resultant maximum value LCS","code":"return result NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = \"0110\" NEW_LINE B = \"1101\" NEW_LINE M = len ( A ) NEW_LINE N = len ( B ) NEW_LINE DEDENT"}
{"text":"Function Call","code":"print ( LCSubStr ( A , B , M , N ) ) NEW_LINE"}
{"text":"Python program for the above approach","code":"maxN = 20 ; NEW_LINE maxSum = 50 ; NEW_LINE minSum = 50 ; NEW_LINE Base = 50 ; NEW_LINE"}
{"text":"To store the states of DP","code":"dp = [ [ 0 for i in range ( maxSum + minSum ) ] for j in range ( maxN ) ] ; NEW_LINE v = [ [ False for i in range ( maxSum + minSum ) ] for j in range ( maxN ) ] ; NEW_LINE"}
{"text":"Function to find count of subsets with a given sum","code":"def findCnt ( arr , i , required_sum , n ) : NEW_LINE"}
{"text":"Base case","code":"if ( i == n ) : NEW_LINE INDENT if ( required_sum == 0 ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT else : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT DEDENT"}
{"text":"If an already computed subproblem occurs","code":"if ( v [ i ] [ required_sum + Base ] ) : NEW_LINE INDENT return dp [ i ] [ required_sum + Base ] ; NEW_LINE DEDENT"}
{"text":"Set the state as solved","code":"v [ i ] [ required_sum + Base ] = True ; NEW_LINE"}
{"text":"Recurrence relation","code":"dp [ i ] [ required_sum + Base ] = findCnt ( arr , i + 1 , required_sum , n ) + findCnt ( arr , i + 1 , required_sum - arr [ i ] , n ) ; NEW_LINE return dp [ i ] [ required_sum + Base ] ; NEW_LINE"}
{"text":"Function to count ways to split array into pair of subsets with difference K","code":"def countSubsets ( arr , K , n ) : NEW_LINE"}
{"text":"Store the total sum of element of the array","code":"sum = 0 ; NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Calculate sum of array elements","code":"sum += arr [ i ] ; NEW_LINE"}
{"text":"Store the required sum","code":"S1 = ( sum + K ) \/\/ 2 ; NEW_LINE"}
{"text":"Prthe number of subsets with sum equal to S1","code":"print ( findCnt ( arr , 0 , S1 , n ) ) ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 1 , 2 , 3 ] ; NEW_LINE N = len ( arr ) ; NEW_LINE K = 1 ; NEW_LINE DEDENT"}
{"text":"Function Call","code":"countSubsets ( arr , K , N ) ; NEW_LINE"}
{"text":"Python program for above approach","code":"dp = [ [ 0 for i in range ( 605 ) ] for j in range ( 105 ) ] ; NEW_LINE"}
{"text":"Function to calculate the probability for the given sum to be equal to sum in N throws of dice","code":"def find ( N , sum ) : NEW_LINE INDENT if ( N < 0 sum < 0 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT if ( dp [ N ] [ sum ] > 0 ) : NEW_LINE INDENT return dp [ N ] [ sum ] ; NEW_LINE DEDENT DEDENT"}
{"text":"Base cases","code":"if ( sum > 6 * N or sum < N ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT if ( N == 1 ) : NEW_LINE INDENT if ( sum >= 1 and sum <= 6 ) : NEW_LINE INDENT return ( float ) ( 1.0 \/ 6 ) ; NEW_LINE DEDENT else : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT DEDENT for i in range ( 1 , 7 ) : NEW_LINE INDENT dp [ N ] [ sum ] = dp [ N ] [ sum ] + find ( N - 1 , sum - i ) \/ 6 ; NEW_LINE DEDENT return dp [ N ] [ sum ] ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 4 ; a = 13 ; b = 17 ; NEW_LINE probability = 0.0 NEW_LINE f = 0 ; NEW_LINE DEDENT"}
{"text":"Calculate probability of all sums from a to b","code":"for sum in range ( a , b + 1 ) : NEW_LINE INDENT probability = probability + find ( N , sum ) ; NEW_LINE DEDENT"}
{"text":"Prthe answer","code":"print ( \" % .6f \" % probability ) ; NEW_LINE"}
{"text":"Function to find the minimum number to steps to reduce N to 0","code":"def count ( n ) : NEW_LINE"}
{"text":"Dictionary for storing the precomputed sum","code":"dp = dict ( ) NEW_LINE"}
{"text":"Bases Cases","code":"dp [ 0 ] = 0 NEW_LINE dp [ 1 ] = 1 NEW_LINE"}
{"text":"Check if n is not in dp then only call the function so as to reduce no of recursive calls","code":"if n not in dp : NEW_LINE INDENT dp [ n ] = 1 + min ( n % 2 + count ( n \/\/ 2 ) , n % 3 + count ( n \/\/ 3 ) ) NEW_LINE DEDENT"}
{"text":"Return the answer","code":"return dp [ n ] NEW_LINE"}
{"text":"Given Number N","code":"N = 6 NEW_LINE"}
{"text":"Function Call","code":"print ( str ( count ( N ) ) ) NEW_LINE"}
{"text":"Function to find the minimum number of operations required to change all the array of zeros such that every element is greater than the given array","code":"def find_minimum_operations ( n , b , k ) : NEW_LINE"}
{"text":"Declaring the difference array of size N","code":"d = [ 0 for i in range ( n + 1 ) ] NEW_LINE"}
{"text":"Number of operations","code":"operations = 0 NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"First update the D [ i ] value with the previous value","code":"d [ i ] += d [ i - 1 ] NEW_LINE"}
{"text":"The index i has to be incremented","code":"if b [ i ] > d [ i ] : NEW_LINE"}
{"text":"We have to perform ( b [ i ] - d [ i ] ) operations more","code":"operations += ( b [ i ] - d [ i ] ) NEW_LINE need = ( b [ i ] - d [ i ] ) NEW_LINE"}
{"text":"Increment the range i to i + k by need","code":"d [ i ] += need NEW_LINE"}
{"text":"Check if i + k is valid index","code":"if i + k <= n : NEW_LINE INDENT d [ i + k ] -= need NEW_LINE DEDENT return operations NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 5 NEW_LINE b = [ 1 , 2 , 3 , 4 , 5 ] NEW_LINE k = 2 NEW_LINE DEDENT"}
{"text":"Function Call","code":"print ( find_minimum_operations ( n , b , k ) ) NEW_LINE"}
{"text":"Function to find the number of ways to cut the matrix into the K parts such that each part have atleast one filled cell","code":"def ways ( arr , k ) : NEW_LINE INDENT R = len ( arr ) NEW_LINE C = len ( arr [ 0 ] ) NEW_LINE K = k NEW_LINE preSum = [ [ 0 for _ in range ( C ) ] \\ for _ in range ( R ) ] NEW_LINE DEDENT"}
{"text":"Loop to find prefix sum of the given matrix","code":"for r in range ( R - 1 , - 1 , - 1 ) : NEW_LINE INDENT for c in range ( C - 1 , - 1 , - 1 ) : NEW_LINE INDENT preSum [ r ] = arr [ r ] NEW_LINE if r + 1 < R : NEW_LINE INDENT preSum [ r ] += preSum [ r + 1 ] NEW_LINE DEDENT if c + 1 < C : NEW_LINE INDENT preSum [ r ] += preSum [ r ] NEW_LINE DEDENT if r + 1 < R and c + 1 < C : NEW_LINE INDENT preSum [ r ] -= preSum [ r + 1 ] NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"dp ( r , c , 1 ) = 1 if preSum [ r ] else 0","code":"dp = [ [ [ 0 for _ in range ( C ) ] \\ for _ in range ( R ) ] \\ for _ in range ( K + 1 ) ] NEW_LINE"}
{"text":"Loop to iterate over the dp table of the given matrix","code":"for k in range ( 1 , K + 1 ) : NEW_LINE INDENT for r in range ( R - 1 , - 1 , - 1 ) : NEW_LINE INDENT for c in range ( C - 1 , - 1 , - 1 ) : NEW_LINE INDENT if k == 1 : NEW_LINE INDENT dp [ k ] [ r ] = 1 if preSum [ r ] > 0 else 0 NEW_LINE DEDENT else : NEW_LINE INDENT dp [ k ] [ r ] = 0 NEW_LINE for r1 in range ( r + 1 , R ) : NEW_LINE DEDENT DEDENT DEDENT DEDENT"}
{"text":"Check if can cut horizontally at r1 , at least one apple in matrix ( r , c ) -> r1 , C - 1","code":"if preSum [ r ] - preSum [ r1 ] > 0 : NEW_LINE INDENT dp [ k ] [ r ] += dp [ k - 1 ] [ r1 ] NEW_LINE DEDENT for c1 in range ( c + 1 , C ) : NEW_LINE"}
{"text":"Check if we can cut vertically at c1 , at least one apple in matrix ( r , c ) -> R - 1 , c1","code":"if preSum [ r ] - preSum [ r ] [ c1 ] > 0 : NEW_LINE INDENT dp [ k ] [ r ] += dp [ k - 1 ] [ r ] [ c1 ] NEW_LINE DEDENT return dp [ K ] [ 0 ] [ 0 ] NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ [ 1 , 0 , 0 ] , [ 1 , 1 , 1 ] , [ 0 , 0 , 0 ] ] NEW_LINE k = 3 NEW_LINE DEDENT"}
{"text":"Function Call","code":"print ( ways ( arr , k ) ) NEW_LINE"}
{"text":"Python3 implementation of the above approach","code":"p = 1000000007 NEW_LINE"}
{"text":"Iterative Function to calculate ( x ^ y ) % p in O ( log y )","code":"def power ( x , y , p ) : NEW_LINE INDENT res = 1 NEW_LINE x = x % p NEW_LINE while ( y > 0 ) : NEW_LINE DEDENT"}
{"text":"If y is odd , multiply x with result","code":"if ( y & 1 ) : NEW_LINE INDENT res = ( res * x ) % p NEW_LINE DEDENT"}
{"text":"y must be even now","code":"y = y >> 1 NEW_LINE x = ( x * x ) % p NEW_LINE return res NEW_LINE"}
{"text":"Iterative Function to calculate ( nCr ) % p and save in f [ n ] [ r ]","code":"def nCr ( n , p , f , m ) : NEW_LINE INDENT for i in range ( n + 1 ) : NEW_LINE INDENT for j in range ( m + 1 ) : NEW_LINE DEDENT DEDENT"}
{"text":"If j > i then C ( i , j ) = 0","code":"if ( j > i ) : NEW_LINE INDENT f [ i ] [ j ] = 0 NEW_LINE DEDENT"}
{"text":"If i is equal to j then C ( i , j ) = 1","code":"elif ( j == 0 or j == i ) : NEW_LINE INDENT f [ i ] [ j ] = 1 NEW_LINE DEDENT else : NEW_LINE INDENT f [ i ] [ j ] = ( f [ i - 1 ] [ j ] + f [ i - 1 ] [ j - 1 ] ) % p NEW_LINE DEDENT"}
{"text":"Function calculate the Final answer","code":"def ProductOfSubsets ( arr , n , m ) : NEW_LINE INDENT f = [ [ 0 for i in range ( 100 ) ] for j in range ( n + 1 ) ] NEW_LINE nCr ( n , p - 1 , f , m ) NEW_LINE arr . sort ( reverse = False ) NEW_LINE DEDENT"}
{"text":"Initialize ans","code":"ans = 1 NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"x is count of occurence of arr [ i ] in different set such that index of arr [ i ] in those sets divides K completely .","code":"x = 0 NEW_LINE for j in range ( 1 , m + 1 , 1 ) : NEW_LINE"}
{"text":"Finding the count of arr [ i ] by placing it at index which divides K completely","code":"if ( m % j == 0 ) : NEW_LINE"}
{"text":"By Fermat 's theorem","code":"x = ( ( x + ( f [ n - i - 1 ] [ m - j ] * f [ i ] [ j - 1 ] ) % ( p - 1 ) ) % ( p - 1 ) ) NEW_LINE ans = ( ( ans * power ( arr [ i ] , x , p ) ) % p ) NEW_LINE print ( ans ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 4 , 5 , 7 , 9 , 3 ] NEW_LINE K = 4 NEW_LINE N = len ( arr ) ; NEW_LINE ProductOfSubsets ( arr , N , K ) NEW_LINE DEDENT"}
{"text":"Function to count the number of ways to write N as sum of k non - negative integers","code":"def countWays ( n , m ) : NEW_LINE"}
{"text":"Initialise dp [ ] [ ] array","code":"dp = [ [ 0 for i in range ( n + 1 ) ] for i in range ( m + 1 ) ] NEW_LINE"}
{"text":"Only 1 way to choose the value with sum K","code":"for i in range ( n + 1 ) : NEW_LINE INDENT dp [ 1 ] [ i ] = 1 NEW_LINE DEDENT"}
{"text":"Initialise sum","code":"sum = 0 NEW_LINE for i in range ( 2 , m + 1 ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE INDENT sum = 0 NEW_LINE DEDENT DEDENT"}
{"text":"Count the ways from previous states","code":"for k in range ( j + 1 ) : NEW_LINE INDENT sum += dp [ i - 1 ] [ k ] NEW_LINE DEDENT"}
{"text":"Update the sum","code":"dp [ i ] [ j ] = sum NEW_LINE"}
{"text":"Return the final count of ways","code":"return dp [ m ] [ n ] NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 2 NEW_LINE K = 3 NEW_LINE DEDENT"}
{"text":"Function call","code":"print ( countWays ( N , K ) ) NEW_LINE"}
{"text":"Function to count the number of ways to write N as sum of k non - negative integers","code":"def countWays ( n , m ) : NEW_LINE"}
{"text":"Initialise dp [ ] [ ] array","code":"dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ] NEW_LINE"}
{"text":"Fill the dp [ ] [ ] with sum = m","code":"for i in range ( n + 1 ) : NEW_LINE INDENT dp [ 1 ] [ i ] = 1 NEW_LINE if ( i != 0 ) : NEW_LINE INDENT dp [ 1 ] [ i ] += dp [ 1 ] [ i - 1 ] NEW_LINE DEDENT DEDENT"}
{"text":"Iterate the dp [ ] [ ] to fill the dp [ ] [ ] array","code":"for i in range ( 2 , m + 1 ) : NEW_LINE INDENT for j in range ( n + 1 ) : NEW_LINE DEDENT"}
{"text":"Condition for first column","code":"if ( j == 0 ) : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j ] NEW_LINE DEDENT"}
{"text":"Else fill the dp [ ] [ ] with sum till ( i , j )","code":"else : NEW_LINE INDENT dp [ i ] [ j ] = dp [ i - 1 ] [ j ] NEW_LINE DEDENT"}
{"text":"If reach the end , then return the value","code":"if ( i == m and j == n ) : NEW_LINE INDENT return dp [ i ] [ j ] NEW_LINE DEDENT"}
{"text":"Update at current index","code":"dp [ i ] [ j ] += dp [ i ] [ j - 1 ] NEW_LINE"}
{"text":"Driver Code","code":"N = 2 NEW_LINE K = 3 NEW_LINE"}
{"text":"Function call","code":"print ( countWays ( N , K ) ) NEW_LINE"}
{"text":"Python3 program to implement the above approach","code":"from math import sqrt NEW_LINE"}
{"text":"Function to pre - store primes","code":"def SieveOfEratosthenes ( MAX , primes ) : NEW_LINE INDENT prime = [ True ] * ( MAX + 1 ) ; NEW_LINE DEDENT"}
{"text":"Sieve method to check if prime or not","code":"for p in range ( 2 , int ( sqrt ( MAX ) ) + 1 ) : NEW_LINE INDENT if ( prime [ p ] == True ) : NEW_LINE DEDENT"}
{"text":"Multiples","code":"for i in range ( p ** 2 , MAX + 1 , p ) : NEW_LINE INDENT prime [ i ] = False ; NEW_LINE DEDENT"}
{"text":"Pre - store all the primes","code":"for i in range ( 2 , MAX + 1 ) : NEW_LINE INDENT if ( prime [ i ] ) : NEW_LINE INDENT primes . append ( i ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Function to find the longest subsequence","code":"def findLongest ( A , n ) : NEW_LINE"}
{"text":"Hash map","code":"mpp = { } ; NEW_LINE primes = [ ] ; NEW_LINE"}
{"text":"Call the function to pre - store the primes","code":"SieveOfEratosthenes ( A [ n - 1 ] , primes ) ; NEW_LINE dp = [ 0 ] * n ; NEW_LINE"}
{"text":"Initialize last element with 1 as that is the longest possible","code":"dp [ n - 1 ] = 1 ; NEW_LINE mpp [ A [ n - 1 ] ] = n - 1 ; NEW_LINE"}
{"text":"Iterate from the back and find the longest","code":"for i in range ( n - 2 , - 1 , - 1 ) : NEW_LINE"}
{"text":"Get the number","code":"num = A [ i ] ; NEW_LINE"}
{"text":"Initialize dp [ i ] as 1 as the element will only me in the subsequence","code":"dp [ i ] = 1 ; NEW_LINE maxi = 0 ; NEW_LINE"}
{"text":"Iterate in all the primes and multiply to get the next element","code":"for it in primes : NEW_LINE"}
{"text":"Next element if multiplied with it","code":"xx = num * it ; NEW_LINE"}
{"text":"If exceeds the last element then break","code":"if ( xx > A [ n - 1 ] ) : NEW_LINE INDENT break ; NEW_LINE DEDENT"}
{"text":"If the number is there in the array","code":"elif xx in mpp : NEW_LINE"}
{"text":"Get the maximum most element","code":"dp [ i ] = max ( dp [ i ] , 1 + dp [ mpp [ xx ] ] ) ; NEW_LINE"}
{"text":"Hash the element","code":"mpp [ A [ i ] ] = i ; NEW_LINE ans = 1 ; NEW_LINE"}
{"text":"Find the longest","code":"for i in range ( n ) : NEW_LINE INDENT ans = max ( ans , dp [ i ] ) ; NEW_LINE DEDENT return ans ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = [ 1 , 2 , 5 , 6 , 12 , 35 , 60 , 385 ] ; NEW_LINE n = len ( a ) ; NEW_LINE print ( findLongest ( a , n ) ) ; NEW_LINE DEDENT"}
{"text":"Function to find the number of Bit Strings of length N with K adjacent set bits","code":"def waysToKAdjacentSetBits ( n , k , currentIndex , adjacentSetBits , lastBit ) : NEW_LINE"}
{"text":"Base Case when we form bit string of length n","code":"if ( currentIndex == n ) : NEW_LINE"}
{"text":"if f ( bit string ) = k , count this way","code":"if ( adjacentSetBits == k ) : NEW_LINE INDENT return 1 ; NEW_LINE DEDENT return 0 NEW_LINE noOfWays = 0 NEW_LINE"}
{"text":"Check if the last bit was set , if it was set then call for next index by incrementing the adjacent bit count else just call the next index with same value of adjacent bit count and either set the bit at current index or let it remain unset","code":"if ( lastBit == 1 ) : NEW_LINE"}
{"text":"set the bit at currentIndex","code":"noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; NEW_LINE"}
{"text":"unset the bit at currentIndex","code":"noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; NEW_LINE elif ( lastBit != 1 ) : NEW_LINE noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; NEW_LINE noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; NEW_LINE return noOfWays ; NEW_LINE"}
{"text":"Driver Code","code":"n = 5 ; k = 2 ; NEW_LINE"}
{"text":"total ways = ( ways by placing 1 st bit as 1 + ways by placing 1 st bit as 0 )","code":"totalWays = ( waysToKAdjacentSetBits ( n , k , 1 , 0 , 1 ) + waysToKAdjacentSetBits ( n , k , 1 , 0 , 0 ) ) ; NEW_LINE print ( \" Number \u2581 of \u2581 ways \u2581 = \" , totalWays ) ; NEW_LINE"}
{"text":"Find the postfix sum array","code":"def postfix ( a , n ) : NEW_LINE INDENT for i in range ( n - 1 , 1 , - 1 ) : NEW_LINE INDENT a [ i - 1 ] = a [ i - 1 ] + a [ i ] NEW_LINE DEDENT DEDENT"}
{"text":"Modify the array such that we don 't have to compute the products which are obtained before","code":"def modify ( a , n ) : NEW_LINE INDENT for i in range ( 1 , n ) : NEW_LINE INDENT a [ i - 1 ] = i * a [ i ] ; NEW_LINE DEDENT DEDENT"}
{"text":"Finding sum of all combination taken 1 to N at a time","code":"def allCombination ( a , n ) : NEW_LINE INDENT sum = 0 NEW_LINE DEDENT"}
{"text":"sum taken 1 at time is simply sum of 1 - N","code":"for i in range ( 1 , n + 1 ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT print ( \" f ( 1 ) \u2581 - - > \u2581 \" , sum ) NEW_LINE"}
{"text":"for sum of products for all combination","code":"for i in range ( 1 , n ) : NEW_LINE"}
{"text":"finding postfix array","code":"postfix ( a , n - i + 1 ) NEW_LINE"}
{"text":"sum of products taken i + 1 at a time","code":"sum = 0 NEW_LINE for j in range ( 1 , n - i + 1 ) : NEW_LINE INDENT sum += ( j * a [ j ] ) NEW_LINE DEDENT print ( \" f ( \" , i + 1 , \" ) \u2581 - - > \u2581 \" , sum ) NEW_LINE"}
{"text":"modify the array for overlapping problem","code":"modify ( a , n ) NEW_LINE"}
{"text":"Driver 's Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 5 NEW_LINE a = [ 0 ] * n NEW_LINE DEDENT"}
{"text":"storing numbers from 1 to N","code":"for i in range ( n ) : NEW_LINE INDENT a [ i ] = i + 1 NEW_LINE DEDENT"}
{"text":"calling allCombination","code":"allCombination ( a , n ) NEW_LINE"}
{"text":"Returns count of ways to reach n - th stair using 1 or 2 or 3 steps .","code":"def findStep ( n ) : NEW_LINE INDENT if ( n == 1 or n == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT elif ( n == 2 ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT else : NEW_LINE INDENT return findStep ( n - 3 ) + findStep ( n - 2 ) + findStep ( n - 1 ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver code","code":"n = 4 NEW_LINE print ( findStep ( n ) ) NEW_LINE"}
{"text":"A utility function that returns true if there is a subset of arr [ ] with sun equal to given sum","code":"def isSubsetSum ( arr , n , sum ) : NEW_LINE"}
{"text":"Base Cases","code":"if sum == 0 : NEW_LINE INDENT return True NEW_LINE DEDENT if n == 0 and sum != 0 : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"If last element is greater than sum , then ignore it","code":"if arr [ n - 1 ] > sum : NEW_LINE INDENT return isSubsetSum ( arr , n - 1 , sum ) NEW_LINE DEDENT"}
{"text":"else , check if sum can be obtained by any of the following ( a ) including the last element ( b ) excluding the last element","code":"return isSubsetSum ( arr , n - 1 , sum ) or isSubsetSum ( arr , n - 1 , sum - arr [ n - 1 ] ) NEW_LINE"}
{"text":"Returns true if arr [ ] can be partitioned in two subsets of equal sum , otherwise false","code":"def findPartion ( arr , n ) : NEW_LINE"}
{"text":"Calculate sum of the elements in array","code":"sum = 0 NEW_LINE for i in range ( 0 , n ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT"}
{"text":"If sum is odd , there cannot be two subsets with equal sum","code":"if sum % 2 != 0 : NEW_LINE INDENT return false NEW_LINE DEDENT"}
{"text":"Find if there is subset with sum equal to half of total sum","code":"return isSubsetSum ( arr , n , sum \/\/ 2 ) NEW_LINE"}
{"text":"Driver code","code":"arr = [ 3 , 1 , 5 , 9 , 12 ] NEW_LINE n = len ( arr ) NEW_LINE"}
{"text":"Function call","code":"if findPartion ( arr , n ) == True : NEW_LINE INDENT print ( \" Can \u2581 be \u2581 divided \u2581 into \u2581 two \u2581 subsets \u2581 of \u2581 equal \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Can \u2581 not \u2581 be \u2581 divided \u2581 into \u2581 two \u2581 subsets \u2581 of \u2581 equal \u2581 sum \" ) NEW_LINE DEDENT"}
{"text":"Returns true if arr [ ] can be partitioned in two subsets of equal sum , otherwise false","code":"def findPartiion ( arr , n ) : NEW_LINE INDENT Sum = 0 NEW_LINE DEDENT"}
{"text":"Calculate sum of all elements","code":"for i in range ( n ) : NEW_LINE INDENT Sum += arr [ i ] NEW_LINE DEDENT if ( Sum % 2 != 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT part = [ 0 ] * ( ( Sum \/\/ 2 ) + 1 ) NEW_LINE"}
{"text":"Initialize the part array as 0","code":"for i in range ( ( Sum \/\/ 2 ) + 1 ) : NEW_LINE INDENT part [ i ] = 0 NEW_LINE DEDENT"}
{"text":"Fill the partition table in bottom up manner","code":"for i in range ( n ) : NEW_LINE"}
{"text":"the element to be included in the sum cannot be greater than the sum","code":"for j in range ( Sum \/\/ 2 , arr [ i ] - 1 , - 1 ) : NEW_LINE"}
{"text":"check if sum - arr [ i ] could be formed from a subset using elements before index i","code":"if ( part [ j - arr [ i ] ] == 1 or j == arr [ i ] ) : NEW_LINE INDENT part [ j ] = 1 NEW_LINE DEDENT return part [ Sum \/\/ 2 ] NEW_LINE"}
{"text":"Drive code","code":"arr = [ 1 , 3 , 3 , 2 , 3 , 2 ] NEW_LINE n = len ( arr ) NEW_LINE"}
{"text":"Function call","code":"if ( findPartiion ( arr , n ) == 1 ) : NEW_LINE INDENT print ( \" Can \u2581 be \u2581 divided \u2581 into \u2581 two \u2581 subsets \u2581 of \u2581 equal \u2581 sum \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Can \u2581 not \u2581 be \u2581 divided \u2581 into \u2581 two \u2581 subsets \u2581 of \u2581 equal \u2581 sum \" ) NEW_LINE DEDENT"}
{"text":"Function to find binomial coefficient","code":"def binomialCoeff ( n , r ) : NEW_LINE INDENT if ( r > n ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT m = 1000000007 NEW_LINE inv = [ 0 for i in range ( r + 1 ) ] NEW_LINE inv [ 0 ] = 1 ; NEW_LINE if ( r + 1 >= 2 ) NEW_LINE inv [ 1 ] = 1 ; NEW_LINE DEDENT"}
{"text":"Getting the modular inversion for all the numbers from 2 to r with respect to m here m = 1000000007","code":"for i in range ( 2 , r + 1 ) : NEW_LINE INDENT inv [ i ] = m - ( m \/\/ i ) * inv [ m % i ] % m NEW_LINE DEDENT ans = 1 NEW_LINE"}
{"text":"for 1 \/ ( r ! ) part","code":"for i in range ( 2 , r + 1 ) : NEW_LINE INDENT ans = ( ( ans % m ) * ( inv [ i ] % m ) ) % m NEW_LINE DEDENT"}
{"text":"for ( n ) * ( n - 1 ) * ( n - 2 ) * ... * ( n - r + 1 ) part","code":"for i in range ( n , n - r , - 1 ) : NEW_LINE INDENT ans = ( ( ans % m ) * ( i % m ) ) % m NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Driver code","code":"n = 5 NEW_LINE r = 2 NEW_LINE print ( \" Value \u2581 of \u2581 C ( \" , n , \" , \u2581 \" , r , \" ) \u2581 is \u2581 \" , binomialCoeff ( n , r ) ) NEW_LINE"}
{"text":"Function to find the gcd of two numbers","code":"def gcd ( a , b ) : NEW_LINE"}
{"text":"Base case","code":"if ( a < b ) : NEW_LINE INDENT t = a NEW_LINE a = b NEW_LINE b = t NEW_LINE DEDENT if ( a % b == 0 ) : NEW_LINE INDENT return b NEW_LINE DEDENT"}
{"text":"Recurse","code":"return gcd ( b , a % b ) NEW_LINE"}
{"text":"Function to print the answer","code":"def printAnswer ( x , y ) : NEW_LINE"}
{"text":"GCD of X and Y","code":"val = gcd ( x , y ) NEW_LINE"}
{"text":"If GCD is power of 2","code":"if ( ( val & ( val - 1 ) ) == 0 ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Given X and Y","code":"x = 4 NEW_LINE y = 7 NEW_LINE"}
{"text":"Function call","code":"printAnswer ( x , y ) NEW_LINE"}
{"text":"Function to return the element in the rth row and cth column from the required matrix","code":"def getElement ( N , r , c ) : NEW_LINE"}
{"text":"Condition for lower half of matrix","code":"if ( r > c ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT"}
{"text":"Condition if element is in first row","code":"if ( r == 1 ) : NEW_LINE INDENT return c ; NEW_LINE DEDENT"}
{"text":"Starting element of AP in row r","code":"a = ( r + 1 ) * pow ( 2 , r - 2 ) ; NEW_LINE"}
{"text":"Common difference of AP in row r","code":"d = pow ( 2 , r - 1 ) ; NEW_LINE"}
{"text":"Position of element to find in AP in row r","code":"c = c - r ; NEW_LINE element = a + d * c ; NEW_LINE return element ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 4 ; R = 3 ; C = 4 ; NEW_LINE print ( getElement ( N , R , C ) ) ; NEW_LINE DEDENT"}
{"text":"Function to insert X in N and return the minimum value string","code":"def MinValue ( N , X ) : NEW_LINE"}
{"text":"Variable to store length of string N","code":"N = list ( N ) ; NEW_LINE ln = len ( N ) NEW_LINE"}
{"text":"Variable to denote the position where X must be added","code":"position = ln + 1 NEW_LINE"}
{"text":"If the given string N represent a negative value","code":"if ( N [ 0 ] == ' - ' ) : NEW_LINE"}
{"text":"X must be place at the last index where is greater than N [ i ]","code":"for i in range ( ln - 1 , 0 , - 1 ) : NEW_LINE INDENT if ( ( ord ( N [ i ] ) - ord ( '0' ) ) < X ) : NEW_LINE INDENT position = i NEW_LINE DEDENT DEDENT else : NEW_LINE"}
{"text":"For positive numbers , X must be placed at the last index where it is smaller than N [ i ]","code":"for i in range ( ln - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( ( ord ( N [ i ] ) - ord ( '0' ) ) > X ) : NEW_LINE INDENT position = i NEW_LINE DEDENT DEDENT"}
{"text":"Insert X at that position","code":"c = chr ( X + ord ( '0' ) ) NEW_LINE str = N . insert ( position , c ) ; NEW_LINE"}
{"text":"Return the string","code":"return ' ' . join ( N ) NEW_LINE"}
{"text":"Given Input","code":"N = \"89\" NEW_LINE X = 1 NEW_LINE"}
{"text":"Function Call","code":"print ( MinValue ( N , X ) ) NEW_LINE"}
{"text":"Function to check the binary number is divisible by K","code":"def divisibleByk ( s , n , k ) : NEW_LINE"}
{"text":"Array poweroftwo will store pow ( 2 , i ) % k","code":"poweroftwo = [ 0 for i in range ( n ) ] NEW_LINE"}
{"text":"Initializing the first element in Array","code":"poweroftwo [ 0 ] = 1 % k NEW_LINE for i in range ( 1 , n , 1 ) : NEW_LINE"}
{"text":"Storing every pow ( 2 , i ) % k value in the array","code":"poweroftwo [ i ] = ( poweroftwo [ i - 1 ] * ( 2 % k ) ) % k NEW_LINE"}
{"text":"To store the remaining","code":"rem = 0 NEW_LINE"}
{"text":"Iterating till N","code":"for i in range ( n ) : NEW_LINE"}
{"text":"If current bit is 1","code":"if ( s [ n - i - 1 ] == '1' ) : NEW_LINE"}
{"text":"Updating rem","code":"rem += ( poweroftwo [ i ] ) NEW_LINE rem %= k NEW_LINE"}
{"text":"If completely divisible","code":"if ( rem == 0 ) : NEW_LINE INDENT return \" Yes \" NEW_LINE DEDENT"}
{"text":"If not Completely divisible","code":"else : NEW_LINE INDENT return \" No \" NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given Input","code":"s = \"1010001\" NEW_LINE k = 9 NEW_LINE"}
{"text":"length of string s","code":"n = len ( s ) NEW_LINE"}
{"text":"Function Call","code":"print ( divisibleByk ( s , n , k ) ) NEW_LINE"}
{"text":"Function to find the maximum sum of count of 0 s in the left suband count of 1 s in the right subby splitting the string","code":"def maxSumbySplittingstring ( str , N ) : NEW_LINE"}
{"text":"Stores count of 1 s the in binary string","code":"cntOne = 0 NEW_LINE"}
{"text":"Traverse the binary string","code":"for i in range ( N ) : NEW_LINE"}
{"text":"If current character is '1","code":"' NEW_LINE INDENT if ( str [ i ] == '1' ) : NEW_LINE DEDENT"}
{"text":"Update cntOne","code":"cntOne += 1 NEW_LINE"}
{"text":"Stores count of 0 s","code":"zero = 0 NEW_LINE"}
{"text":"Stores count of 1 s","code":"one = 0 NEW_LINE"}
{"text":"Stores maximum sum of count of 0 s and 1 s by splitting the string","code":"res = 0 NEW_LINE"}
{"text":"Traverse the binary string","code":"for i in range ( N - 1 ) : NEW_LINE"}
{"text":"If current character is '0","code":"' NEW_LINE INDENT if ( str [ i ] == '0' ) : NEW_LINE DEDENT"}
{"text":"Update zero","code":"zero += 1 NEW_LINE"}
{"text":"If current character is '1","code":"' NEW_LINE INDENT else : NEW_LINE DEDENT"}
{"text":"Update one","code":"one += 1 NEW_LINE"}
{"text":"Update res","code":"res = max ( res , zero + cntOne - one ) NEW_LINE return res NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = \"00111\" NEW_LINE N = len ( str ) NEW_LINE print ( maxSumbySplittingstring ( str , N ) ) NEW_LINE DEDENT"}
{"text":"Function to find the maximum count of pairs required to be removed such that subsequence of string does not contain any valid parenthesis","code":"def cntBalancedParenthesis ( s , N ) : NEW_LINE"}
{"text":"Stores count of pairs of balanced parenthesis","code":"cntPairs = 0 ; NEW_LINE"}
{"text":"Stores count of curly balanced parenthesis","code":"cntCurly = 0 ; NEW_LINE"}
{"text":"Stores count of small balanced parenthesis","code":"cntSml = 0 ; NEW_LINE"}
{"text":"Stores count of square balanced parenthesis","code":"cntSqr = 0 ; NEW_LINE"}
{"text":"Iterate over characters of the string","code":"for i in range ( N ) : NEW_LINE INDENT if ( ord ( s [ i ] ) == ord ( ' { ' ) ) : NEW_LINE DEDENT"}
{"text":"Update cntCurly","code":"cntCurly += 1 ; NEW_LINE elif ( ord ( s [ i ] ) == ord ( ' ( ' ) ) : NEW_LINE"}
{"text":"Update cntSml","code":"cntSml += 1 ; NEW_LINE elif ( ord ( s [ i ] ) == ord ( ' [ ' ) ) : NEW_LINE"}
{"text":"Update cntSqr","code":"cntSqr += 1 ; NEW_LINE elif ( ord ( s [ i ] ) == ord ( ' } ' ) and cntCurly > 0 ) : NEW_LINE"}
{"text":"Update cntCurly","code":"cntCurly -= 1 ; NEW_LINE"}
{"text":"Update cntPairs","code":"cntPairs += 1 ; NEW_LINE elif ( ord ( s [ i ] ) == ord ( ' ) ' ) and cntSml > 0 ) : NEW_LINE"}
{"text":"Update cntSml","code":"cntSml -= 1 ; NEW_LINE"}
{"text":"Update cntPairs","code":"cntPairs += 1 ; NEW_LINE elif ( ord ( s [ i ] ) == ord ( ' ] ' ) and cntSqr > 0 ) : NEW_LINE"}
{"text":"Update cntSml","code":"cntSqr -= 1 ; NEW_LINE"}
{"text":"Update cntPairs","code":"cntPairs += 1 ; NEW_LINE print ( cntPairs ) ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given String","code":"s = \" { ( } ) \" ; NEW_LINE N = len ( s ) ; NEW_LINE"}
{"text":"Function call","code":"cntBalancedParenthesis ( s , N ) ; NEW_LINE"}
{"text":"Function to check if there is arc intersection or not","code":"def arcIntersection ( S , lenn ) : NEW_LINE INDENT stk = [ ] NEW_LINE DEDENT"}
{"text":"Traverse the string S","code":"for i in range ( lenn ) : NEW_LINE"}
{"text":"Insert all the elements in the stack one by one","code":"stk . append ( S [ i ] ) NEW_LINE if ( len ( stk ) >= 2 ) : NEW_LINE"}
{"text":"Extract the top element","code":"temp = stk [ - 1 ] NEW_LINE"}
{"text":"Pop out the top element","code":"del stk [ - 1 ] NEW_LINE"}
{"text":"Check if the top element is same as the popped element","code":"if ( stk [ - 1 ] == temp ) : NEW_LINE INDENT del stk [ - 1 ] NEW_LINE DEDENT"}
{"text":"Otherwise","code":"else : NEW_LINE INDENT stk . append ( temp ) NEW_LINE DEDENT"}
{"text":"If the stack is empty","code":"if ( len ( stk ) == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return 0 NEW_LINE"}
{"text":"Function to check if there is arc intersection or not for the given array of strings","code":"def countString ( arr , N ) : NEW_LINE"}
{"text":"Stores count of string not having arc intersection","code":"count = 0 NEW_LINE"}
{"text":"Iterate through array","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Length of every string","code":"lenn = len ( arr [ i ] ) NEW_LINE"}
{"text":"Function Call","code":"count += arcIntersection ( arr [ i ] , lenn ) NEW_LINE"}
{"text":"Print the desired count","code":"print ( count ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ \"0101\" , \"0011\" , \"0110\" ] NEW_LINE N = len ( arr ) NEW_LINE DEDENT"}
{"text":"Function Call","code":"countString ( arr , N ) NEW_LINE"}
{"text":"Function to convert the binary string into octal representation","code":"def ConvertequivalentBase8 ( S ) : NEW_LINE"}
{"text":"Stores binary representation of the decimal value [ 0 - 7 ]","code":"mp = { } NEW_LINE"}
{"text":"Stores the decimal values of binary strings [ 0 - 7 ]","code":"mp [ \"000\" ] = '0' NEW_LINE mp [ \"001\" ] = '1' NEW_LINE mp [ \"010\" ] = '2' NEW_LINE mp [ \"011\" ] = '3' NEW_LINE mp [ \"100\" ] = '4' NEW_LINE mp [ \"101\" ] = '5' NEW_LINE mp [ \"110\" ] = '6' NEW_LINE mp [ \"111\" ] = '7' NEW_LINE"}
{"text":"Stores length of S","code":"N = len ( S ) NEW_LINE if ( N % 3 == 2 ) : NEW_LINE"}
{"text":"Update S","code":"S = \"0\" + S NEW_LINE elif ( N % 3 == 1 ) : NEW_LINE"}
{"text":"Update S","code":"S = \"00\" + S NEW_LINE"}
{"text":"Update N","code":"N = len ( S ) NEW_LINE"}
{"text":"Stores octal representation of the binary string","code":"octal = \" \" NEW_LINE"}
{"text":"Traverse the binary string","code":"for i in range ( 0 , N , 3 ) : NEW_LINE"}
{"text":"Stores 3 consecutive characters of the binary string","code":"temp = S [ i : i + 3 ] NEW_LINE"}
{"text":"Append octal representation of temp","code":"if temp in mp : NEW_LINE octal += ( mp [ temp ] ) NEW_LINE return octal NEW_LINE"}
{"text":"Function to check if binary string is divisible by 9 or not","code":"def binString_div_9 ( S , N ) : NEW_LINE"}
{"text":"Stores octal representation of S","code":"octal = ConvertequivalentBase8 ( S ) NEW_LINE"}
{"text":"Stores sum of elements present at odd positions of oct","code":"oddSum = 0 NEW_LINE"}
{"text":"Stores sum of elements present at odd positions of oct","code":"evenSum = 0 NEW_LINE"}
{"text":"Stores length of oct","code":"M = len ( octal ) NEW_LINE"}
{"text":"Traverse the string oct","code":"for i in range ( 0 , M , 2 ) : NEW_LINE"}
{"text":"Update oddSum","code":"oddSum += ord ( octal [ i ] ) - ord ( '0' ) NEW_LINE"}
{"text":"Traverse the string oct","code":"for i in range ( 1 , M , 2 ) : NEW_LINE"}
{"text":"Update evenSum","code":"evenSum += ord ( octal [ i ] ) - ord ( '0' ) NEW_LINE"}
{"text":"Stores cotal representation of 9","code":"Oct_9 = 11 NEW_LINE"}
{"text":"If absolute value of ( oddSum - evenSum ) is divisible by Oct_9","code":"if ( abs ( oddSum - evenSum ) % Oct_9 == 0 ) : NEW_LINE INDENT return \" Yes \" NEW_LINE DEDENT return \" No \" NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT S = \"1010001\" NEW_LINE N = len ( S ) NEW_LINE print ( binString_div_9 ( S , N ) ) NEW_LINE DEDENT"}
{"text":"Function to calculate the minimum cost","code":"def min_cost ( S ) : NEW_LINE"}
{"text":"Stores the minimum cost","code":"cost = 0 NEW_LINE"}
{"text":"Stores the count of characters found","code":"F = 0 NEW_LINE"}
{"text":"Stores the count of blank spaces found","code":"B = 0 NEW_LINE"}
{"text":"Stores the count of total characters","code":"n = len ( S ) - S . count ( ' \u2581 ' ) NEW_LINE"}
{"text":"If the count of characters is equal to 1","code":"if n == 1 : NEW_LINE INDENT return cost NEW_LINE DEDENT"}
{"text":"Iterate over the string","code":"for char in S : NEW_LINE"}
{"text":"Consider the previous character together with current character","code":"if char != ' \u2581 ' : NEW_LINE"}
{"text":"If not together already","code":"if B != 0 : NEW_LINE"}
{"text":"Add the cost to group them together","code":"cost += min ( n - F , F ) * B NEW_LINE B = 0 NEW_LINE"}
{"text":"Increase count of characters found","code":"F += 1 NEW_LINE"}
{"text":"Otherwise","code":"else : NEW_LINE"}
{"text":"Increase count of spaces found","code":"B += 1 NEW_LINE"}
{"text":"Return the total cost obtained","code":"return cost NEW_LINE"}
{"text":"Driver Code","code":"S = \" \u2581 @ TABSYMBOL $ \" NEW_LINE print ( min_cost ( S ) ) NEW_LINE"}
{"text":"Function that return true if the given character is a vowel","code":"def isVowel ( ch ) : NEW_LINE INDENT if ( ch == ' a ' or ch == ' e ' or ch == ' i ' or ch == ' o ' or ch == ' u ' ) : NEW_LINE INDENT return True ; NEW_LINE DEDENT else : NEW_LINE INDENT return False ; NEW_LINE DEDENT DEDENT"}
{"text":"Function to return the minimum cost to convert all the vowels of a string to a single one","code":"def minCost ( S ) : NEW_LINE"}
{"text":"Stores count of respective vowels","code":"cA = 0 ; NEW_LINE cE = 0 ; NEW_LINE cI = 0 ; NEW_LINE cO = 0 ; NEW_LINE cU = 0 ; NEW_LINE"}
{"text":"Iterate through the string","code":"for i in range ( len ( S ) ) : NEW_LINE"}
{"text":"If a vowel is encountered","code":"if ( isVowel ( S [ i ] ) ) : NEW_LINE"}
{"text":"Calculate the cost","code":"cA += abs ( ord ( S [ i ] ) - ord ( ' a ' ) ) ; NEW_LINE cE += abs ( ord ( S [ i ] ) - ord ( ' e ' ) ) ; NEW_LINE cI += abs ( ord ( S [ i ] ) - ord ( ' i ' ) ) ; NEW_LINE cO += abs ( ord ( S [ i ] ) - ord ( ' o ' ) ) ; NEW_LINE cU += abs ( ord ( S [ i ] ) - ord ( ' u ' ) ) ; NEW_LINE"}
{"text":"Return the minimum cost","code":"return min ( min ( min ( min ( cA , cE ) , cI ) , cO ) , cU ) ; NEW_LINE"}
{"text":"Driver code","code":"S = \" geeksforgeeks \" ; NEW_LINE print ( minCost ( S ) ) NEW_LINE"}
{"text":"Function to return the required required string","code":"def decode_String ( st , K ) : NEW_LINE INDENT ans = \" \" NEW_LINE DEDENT"}
{"text":"Iterate the given string","code":"for i in range ( 0 , len ( st ) , K ) : NEW_LINE"}
{"text":"Append the first character of every substring of length K","code":"ans += st [ i ] NEW_LINE"}
{"text":"Consider all characters from the last substring","code":"for i in range ( len ( st ) - ( K - 1 ) , len ( st ) ) : NEW_LINE INDENT ans += st [ i ] NEW_LINE DEDENT print ( ans ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT K = 3 NEW_LINE st = \" abcbcscsesesesd \" NEW_LINE decode_String ( st , K ) NEW_LINE DEDENT"}
{"text":"Function that prints the lexicographically smallest K - length substring containing maximum number of vowels","code":"def maxVowelSubString ( str1 , K ) : NEW_LINE"}
{"text":"Store the length of the string","code":"N = len ( str1 ) NEW_LINE"}
{"text":"Initialize a prefix sum array","code":"pref = [ 0 for i in range ( N ) ] NEW_LINE"}
{"text":"Loop through the string to create the prefix sum array","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Store 1 at the index if it is a vowel","code":"if ( str1 [ i ] == ' a ' or str1 [ i ] == ' e ' or str1 [ i ] == ' i ' or str1 [ i ] == ' o ' or str1 [ i ] == ' u ' ) : NEW_LINE INDENT pref [ i ] = 1 NEW_LINE DEDENT"}
{"text":"Otherwise , store 0","code":"else : NEW_LINE INDENT pref [ i ] = 0 NEW_LINE DEDENT"}
{"text":"Process the prefix array","code":"if ( i ) : NEW_LINE INDENT pref [ i ] += pref [ i - 1 ] NEW_LINE DEDENT"}
{"text":"Initialize the variable to store maximum count of vowels","code":"maxCount = pref [ K - 1 ] NEW_LINE"}
{"text":"Initialize the variable to store substring with maximum count of vowels","code":"res = str1 [ 0 : K ] NEW_LINE"}
{"text":"Loop through the prefix array","code":"for i in range ( K , N ) : NEW_LINE"}
{"text":"Store the current count of vowels","code":"currCount = pref [ i ] - pref [ i - K ] NEW_LINE"}
{"text":"Update the result if current count is greater than maximum count","code":"if ( currCount > maxCount ) : NEW_LINE INDENT maxCount = currCount NEW_LINE res = str1 [ i - K + 1 : i + 1 ] NEW_LINE DEDENT"}
{"text":"Update lexicographically smallest substring if the current count is equal to the maximum count","code":"elif ( currCount == maxCount ) : NEW_LINE INDENT temp = str1 [ i - K + 1 : i + 1 ] NEW_LINE if ( temp < res ) : NEW_LINE INDENT res = temp NEW_LINE DEDENT DEDENT"}
{"text":"Return the result","code":"return res NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str1 = \" ceebbaceeffo \" NEW_LINE K = 3 NEW_LINE print ( maxVowelSubString ( str1 , K ) ) NEW_LINE DEDENT"}
{"text":"Function to decode and print the original string","code":"def decodeStr ( str , len ) : NEW_LINE"}
{"text":"To store the decoded string","code":"c = [ \" \" for i in range ( len ) ] NEW_LINE pos = 1 NEW_LINE"}
{"text":"Getting the mid element","code":"if ( len % 2 == 1 ) : NEW_LINE INDENT med = int ( len \/ 2 ) NEW_LINE DEDENT else : NEW_LINE INDENT med = int ( len \/ 2 - 1 ) NEW_LINE DEDENT"}
{"text":"Storing the first element of the string at the median position","code":"c [ med ] = str [ 0 ] NEW_LINE"}
{"text":"If the length is even then store the second element also","code":"if ( len % 2 == 0 ) : NEW_LINE INDENT c [ med + 1 ] = str [ 1 ] NEW_LINE DEDENT"}
{"text":"k represents the number of characters that are already stored in the c [ ]","code":"if ( len & 1 ) : NEW_LINE INDENT k = 1 NEW_LINE DEDENT else : NEW_LINE INDENT k = 2 NEW_LINE DEDENT for i in range ( k , len , 2 ) : NEW_LINE INDENT c [ med - pos ] = str [ i ] NEW_LINE DEDENT"}
{"text":"If string length is odd","code":"if ( len % 2 == 1 ) : NEW_LINE INDENT c [ med + pos ] = str [ i + 1 ] NEW_LINE DEDENT"}
{"text":"If it is even","code":"else : NEW_LINE INDENT c [ med + pos + 1 ] = str [ i + 1 ] NEW_LINE DEDENT pos += 1 NEW_LINE"}
{"text":"Print the decoded string","code":"print ( * c , sep = \" \" ) NEW_LINE"}
{"text":"Driver code","code":"str = \" ofrsgkeeeekgs \" NEW_LINE len = len ( str ) NEW_LINE decodeStr ( str , len ) NEW_LINE"}
{"text":"Python3 program for Naive Approach","code":"def findCount ( s , L , R ) : NEW_LINE"}
{"text":"Counter to count distinct char","code":"distinct = 0 NEW_LINE"}
{"text":"Initializing frequency array to count characters as the appear in substring S [ L : R ]","code":"frequency = [ 0 for i in range ( 26 ) ] NEW_LINE"}
{"text":"Iterating over S [ L ] to S [ R ]","code":"for i in range ( L , R + 1 , 1 ) : NEW_LINE"}
{"text":"Incrementing the count of s [ i ] character in frequency array","code":"frequency [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE for i in range ( 26 ) : NEW_LINE"}
{"text":"If frequency of any character is > 0 then increment the counter","code":"if ( frequency [ i ] > 0 ) : NEW_LINE INDENT distinct += 1 NEW_LINE DEDENT print ( distinct ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = \" geeksforgeeksisacomputerscienceportal \" NEW_LINE queries = 3 NEW_LINE Q = [ [ 0 , 10 ] , [ 15 , 18 ] , [ 12 , 20 ] ] NEW_LINE for i in range ( queries ) : NEW_LINE INDENT findCount ( s , Q [ i ] [ 0 ] , Q [ i ] [ 1 ] ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to perform K operations upon the string and find modified string","code":"def ReverseComplement ( s , n , k ) : NEW_LINE"}
{"text":"Number of reverse operations","code":"rev = ( k + 1 ) \/\/ 2 NEW_LINE"}
{"text":"Number of complement operations","code":"complement = k - rev NEW_LINE"}
{"text":"If rev is odd parity","code":"if ( rev % 2 ) : NEW_LINE INDENT s = s [ : : - 1 ] NEW_LINE DEDENT"}
{"text":"If complement is odd parity","code":"if ( complement % 2 ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE DEDENT"}
{"text":"Complementing each position","code":"if ( s [ i ] == '0' ) : NEW_LINE INDENT s [ i ] = '1' NEW_LINE DEDENT else : NEW_LINE INDENT s [ i ] = '0' NEW_LINE DEDENT"}
{"text":"Return the modified string","code":"return s NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str1 = \"10011\" NEW_LINE k = 5 NEW_LINE n = len ( str1 ) NEW_LINE DEDENT"}
{"text":"Function call","code":"print ( ReverseComplement ( str1 , n , k ) ) NEW_LINE"}
{"text":"Function to check that permutation of the given string is a K times repeating String","code":"def repeatingString ( s , n , k ) : NEW_LINE"}
{"text":"If length of string is not divisible by K","code":"if ( n % k != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Frequency Array","code":"frequency = [ 0 for i in range ( 123 ) ] NEW_LINE"}
{"text":"Initially frequency of each character is 0","code":"for i in range ( 123 ) : NEW_LINE INDENT frequency [ i ] = 0 NEW_LINE DEDENT"}
{"text":"Computing the frequency of each character in the string","code":"for i in range ( n ) : NEW_LINE INDENT frequency [ s [ i ] ] += 1 NEW_LINE DEDENT repeat = n \/\/ k NEW_LINE"}
{"text":"Loop to check that frequency of every character of the string is divisible by K","code":"for i in range ( 123 ) : NEW_LINE INDENT if ( frequency [ i ] % repeat != 0 ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = \" abcdcba \" NEW_LINE n = len ( s ) NEW_LINE k = 3 NEW_LINE if ( repeatingString ( s , n , k ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to find the last two digits of the number and print the complete number","code":"def findPhoneNumber ( n ) : NEW_LINE INDENT temp = n NEW_LINE sum = 0 NEW_LINE DEDENT"}
{"text":"Sum of the first eight digits of the number","code":"while ( temp != 0 ) : NEW_LINE INDENT sum += temp % 10 NEW_LINE temp = temp \/\/ 10 NEW_LINE DEDENT"}
{"text":"if sum < 10 , then the two digits are '0' and the value of sum","code":"if ( sum < 10 ) : NEW_LINE INDENT print ( n , \"0\" , sum ) NEW_LINE DEDENT"}
{"text":"if sum > 10 , then the two digits are the value of sum","code":"else : NEW_LINE INDENT n = str ( n ) NEW_LINE sum = str ( sum ) NEW_LINE n += sum NEW_LINE print ( n ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 98765432 NEW_LINE findPhoneNumber ( n ) NEW_LINE DEDENT"}
{"text":"Function to return the required count","code":"def cntSplits ( s ) : NEW_LINE"}
{"text":"If the splitting is not possible","code":"if ( s [ len ( s ) - 1 ] == '1' ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT"}
{"text":"To store the count of zeroes","code":"c_zero = 0 ; NEW_LINE"}
{"text":"Counting the number of zeroes","code":"for i in range ( len ( s ) ) : NEW_LINE INDENT c_zero += ( s [ i ] == '0' ) ; NEW_LINE DEDENT"}
{"text":"Return the final answer","code":"return int ( pow ( 2 , c_zero - 1 ) ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \"10010\" ; NEW_LINE print ( cntSplits ( s ) ) ; NEW_LINE DEDENT"}
{"text":"Function to return the number of substrings of same characters","code":"def findNumbers ( s ) : NEW_LINE"}
{"text":"Size of the string","code":"n = len ( s ) NEW_LINE"}
{"text":"Initialize count to 1","code":"count = 1 NEW_LINE result = 0 NEW_LINE"}
{"text":"Initialize left to 0 and right to 1 to traverse the string","code":"left = 0 NEW_LINE right = 1 NEW_LINE while ( right < n ) : NEW_LINE"}
{"text":"Checking if consecutive characters are same and increment the count","code":"if ( s [ left ] == s [ right ] ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT"}
{"text":"When we encounter a different characters","code":"else : NEW_LINE"}
{"text":"Increment the result","code":"result += count * ( count + 1 ) \/\/ 2 NEW_LINE"}
{"text":"To repeat the whole process set left equals right and count variable to 1","code":"left = right NEW_LINE count = 1 NEW_LINE right += 1 NEW_LINE"}
{"text":"Store the final value of result","code":"result += count * ( count + 1 ) \/\/ 2 NEW_LINE print ( result ) NEW_LINE"}
{"text":"Driver code","code":"s = \" bbbcbb \" NEW_LINE findNumbers ( s ) NEW_LINE"}
{"text":"Function to check for the Vowel","code":"def isVowel ( ch ) : NEW_LINE INDENT ch = ch . upper ( ) NEW_LINE if ( ch == ' A ' or ch == ' E ' or ch == ' I ' or ch == ' O ' or ch == ' U ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT"}
{"text":"Function to get the resultant String with vowels duplicated","code":"def duplicateVowels ( S ) : NEW_LINE INDENT t = len ( S ) NEW_LINE DEDENT"}
{"text":"Another to store the resultant String","code":"res = \" \" NEW_LINE"}
{"text":"Loop to check for each character","code":"for i in range ( t ) : NEW_LINE INDENT if ( isVowel ( S [ i ] ) ) : NEW_LINE INDENT res += S [ i ] NEW_LINE DEDENT res += S [ i ] NEW_LINE DEDENT return res NEW_LINE"}
{"text":"Driver Code","code":"S = \" helloworld \" NEW_LINE"}
{"text":"Print the original String","code":"print ( \" Original \u2581 String : \u2581 \" , S ) NEW_LINE res = duplicateVowels ( S ) NEW_LINE"}
{"text":"Print the resultant String","code":"print ( \" String \u2581 with \u2581 Vowels \u2581 duplicated : \u2581 \" , res ) NEW_LINE"}
{"text":"Recursive function to convert string to integer","code":"def stringToInt ( str ) : NEW_LINE"}
{"text":"If the number represented as a string contains only a single digit then returns its value","code":"if ( len ( str ) == 1 ) : NEW_LINE INDENT return ord ( str [ 0 ] ) - ord ( '0' ) ; NEW_LINE DEDENT"}
{"text":"Recursive call for the sub - string starting at the second character","code":"y = stringToInt ( str [ 1 : ] ) ; NEW_LINE"}
{"text":"First digit of the number","code":"x = ord ( str [ 0 ] ) - ord ( '0' ) ; NEW_LINE"}
{"text":"First digit multiplied by the appropriate power of 10 and then add the recursive result For example , xy = ( ( x * 10 ) + y )","code":"x = x * ( 10 ** ( len ( str ) - 1 ) ) + y ; NEW_LINE return int ( x ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT str = \"1235\" ; NEW_LINE print ( stringToInt ( str ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 implementation of the approach","code":"MAX = 26 NEW_LINE"}
{"text":"Function to return the length of the longest sub - sequence with at least one common character in every string","code":"def largestSubSeq ( arr , n ) : NEW_LINE"}
{"text":"count [ 0 ] will store the number of strings which contain ' a ' , count [ 1 ] will store the number of strings which contain ' b ' and so on . .","code":"count = [ 0 ] * MAX NEW_LINE"}
{"text":"For every string","code":"for i in range ( n ) : NEW_LINE INDENT string = arr [ i ] NEW_LINE DEDENT"}
{"text":"Hash array to set which character is present in the current string","code":"_hash = [ False ] * MAX NEW_LINE for j in range ( len ( string ) ) : NEW_LINE INDENT _hash [ ord ( string [ j ] ) - ord ( ' a ' ) ] = True NEW_LINE DEDENT for j in range ( MAX ) : NEW_LINE"}
{"text":"If current character appears in the string then update its count","code":"if _hash [ j ] == True : NEW_LINE INDENT count [ j ] += 1 NEW_LINE DEDENT return max ( count ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ \" ab \" , \" bc \" , \" de \" ] NEW_LINE n = len ( arr ) NEW_LINE print ( largestSubSeq ( arr , n ) ) NEW_LINE DEDENT"}
{"text":"Function that returns true if str is a palindrome","code":"def isPalindrome ( s ) : NEW_LINE INDENT l = len ( s ) NEW_LINE for i in range ( l \/\/ 2 ) : NEW_LINE INDENT if ( s [ i ] != s [ l - 1 - i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT"}
{"text":"Function that returns true if the generated string is a palindrome","code":"def createStringAndCheckPalindrome ( N ) : NEW_LINE"}
{"text":"sub contains N as a string","code":"sub = \" \" + chr ( N ) NEW_LINE res_str = \" \" NEW_LINE sum = 0 NEW_LINE"}
{"text":"Calculate the sum of the digits","code":"while ( N > 0 ) : NEW_LINE INDENT digit = N % 10 NEW_LINE sum += digit NEW_LINE N = N \/\/ 10 NEW_LINE DEDENT"}
{"text":"Repeat the substring until the length of the resultant string < sum","code":"while ( len ( res_str ) < sum ) : NEW_LINE INDENT res_str += sub NEW_LINE DEDENT"}
{"text":"If length of the resultant string exceeded sum then take substring from 0 to sum - 1","code":"if ( len ( res_str ) > sum ) : NEW_LINE INDENT res_str = res_str [ 0 : sum ] NEW_LINE DEDENT"}
{"text":"If the generated string is a palindrome","code":"if ( isPalindrome ( res_str ) ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 10101 NEW_LINE if ( createStringAndCheckPalindrome ( N ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to find the minimum length","code":"def minimumLength ( s ) : NEW_LINE INDENT maxOcc = 0 NEW_LINE n = len ( s ) NEW_LINE arr = [ 0 ] * 26 NEW_LINE DEDENT"}
{"text":"Count the frequency of each alphabet","code":"for i in range ( n ) : NEW_LINE INDENT arr [ ord ( s [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT"}
{"text":"Find the alphabets with maximum frequency","code":"for i in range ( 26 ) : NEW_LINE INDENT if arr [ i ] > maxOcc : NEW_LINE INDENT maxOcc = arr [ i ] NEW_LINE DEDENT DEDENT"}
{"text":"Subtract the frequency of character from length of string","code":"return n - maxOcc NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str = \" afddewqd \" NEW_LINE print ( minimumLength ( str ) ) NEW_LINE DEDENT"}
{"text":"function to remove characters and pr new string","code":"def removeSpecialCharacter ( s ) : NEW_LINE INDENT i = 0 NEW_LINE while i < len ( s ) : NEW_LINE DEDENT"}
{"text":"Finding the character whose ASCII value fall under this range","code":"if ( ord ( s [ i ] ) < ord ( ' A ' ) or ord ( s [ i ] ) > ord ( ' Z ' ) and ord ( s [ i ] ) < ord ( ' a ' ) or ord ( s [ i ] ) > ord ( ' z ' ) ) : NEW_LINE"}
{"text":"erase function to erase the character","code":"del s [ i ] NEW_LINE i -= 1 NEW_LINE i += 1 NEW_LINE print ( \" \" . join ( s ) ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT s = \" $ Gee * k ; s . . fo , \u2581 r ' Ge ^ eks ? \" NEW_LINE s = [ i for i in s ] NEW_LINE removeSpecialCharacter ( s ) NEW_LINE DEDENT"}
{"text":"Function to remove special characters and store it in another variable","code":"def removeSpecialCharacter ( s ) : NEW_LINE INDENT t = \" \" NEW_LINE for i in s : NEW_LINE DEDENT"}
{"text":"Store only valid characters","code":"if ( i >= ' A ' and i <= ' Z ' ) or ( i >= ' a ' and i <= ' z ' ) : NEW_LINE INDENT t += i NEW_LINE DEDENT print ( t ) NEW_LINE"}
{"text":"Driver code","code":"s = \" $ Gee * k ; s . . fo , \u2581 r ' Ge ^ eks ? \" NEW_LINE removeSpecialCharacter ( s ) NEW_LINE"}
{"text":"Python3 program to find the first character that is repeated","code":"def findRepeatFirstN2 ( s ) : NEW_LINE"}
{"text":"this is O ( N ^ 2 ) method","code":"p = - 1 NEW_LINE for i in range ( len ( s ) ) : NEW_LINE INDENT for j in range ( i + 1 , len ( s ) ) : NEW_LINE INDENT if ( s [ i ] == s [ j ] ) : NEW_LINE INDENT p = i NEW_LINE break NEW_LINE DEDENT DEDENT if ( p != - 1 ) : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT return p NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str = \" geeksforgeeks \" NEW_LINE pos = findRepeatFirstN2 ( str ) NEW_LINE if ( pos == - 1 ) : NEW_LINE INDENT print ( \" Not \u2581 found \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( str [ pos ] ) NEW_LINE DEDENT DEDENT"}
{"text":"Python3 implementation to print the characters and frequencies in order of its occurrence","code":"def prCharWithFreq ( str ) : NEW_LINE"}
{"text":"Store all characters and their frequencies in dictionary","code":"d = { } NEW_LINE for i in str : NEW_LINE INDENT if i in d : NEW_LINE INDENT d [ i ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT d [ i ] = 1 NEW_LINE DEDENT DEDENT"}
{"text":"Print characters and their frequencies in same order of their appearance","code":"for i in str : NEW_LINE"}
{"text":"Print only if this character is not printed before .","code":"if d [ i ] != 0 : NEW_LINE INDENT print ( \" { } { } \" . format ( i , d [ i ] ) , end = \" \u2581 \" ) NEW_LINE d [ i ] = 0 NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str = \" geeksforgeeks \" ; NEW_LINE prCharWithFreq ( str ) ; NEW_LINE DEDENT ' NEW_LINE"}
{"text":"Function to calculate number of strings","code":"def possibleStrings ( n , r , b , g ) : NEW_LINE"}
{"text":"Store factorial of numbers up to n for further computation","code":"fact = [ 0 for i in range ( n + 1 ) ] NEW_LINE fact [ 0 ] = 1 NEW_LINE for i in range ( 1 , n + 1 , 1 ) : NEW_LINE INDENT fact [ i ] = fact [ i - 1 ] * i NEW_LINE DEDENT"}
{"text":"Find the remaining values to be added","code":"left = n - ( r + g + b ) NEW_LINE sum = 0 NEW_LINE"}
{"text":"Make all possible combinations of R , B and G for the remaining value","code":"for i in range ( 0 , left + 1 , 1 ) : NEW_LINE INDENT for j in range ( 0 , left - i + 1 , 1 ) : NEW_LINE INDENT k = left - ( i + j ) NEW_LINE DEDENT DEDENT"}
{"text":"Compute permutation of each combination one by one and add them .","code":"sum = ( sum + fact [ n ] \/ ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) ) NEW_LINE"}
{"text":"Return total no . of strings \/ permutation","code":"return sum NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 4 NEW_LINE r = 2 NEW_LINE b = 0 NEW_LINE g = 1 NEW_LINE print ( int ( possibleStrings ( n , r , b , g ) ) ) NEW_LINE DEDENT"}
{"text":"Python 3 program to find minimum number of characters to be removed to make two strings anagram .","code":"CHARS = 26 NEW_LINE"}
{"text":"function to calculate minimum numbers of characters to be removed to make two strings anagram","code":"def remAnagram ( str1 , str2 ) : NEW_LINE"}
{"text":"make hash array for both string and calculate frequency of each character","code":"count1 = [ 0 ] * CHARS NEW_LINE count2 = [ 0 ] * CHARS NEW_LINE"}
{"text":"count frequency of each character in first string","code":"i = 0 NEW_LINE while i < len ( str1 ) : NEW_LINE INDENT count1 [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE i += 1 NEW_LINE DEDENT"}
{"text":"count frequency of each character in second string","code":"i = 0 NEW_LINE while i < len ( str2 ) : NEW_LINE INDENT count2 [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE i += 1 NEW_LINE DEDENT"}
{"text":"traverse count arrays to find number of characters to be removed","code":"result = 0 NEW_LINE for i in range ( 26 ) : NEW_LINE INDENT result += abs ( count1 [ i ] - count2 [ i ] ) NEW_LINE DEDENT return result NEW_LINE"}
{"text":"Driver program to run the case","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str1 = \" bcadeh \" NEW_LINE str2 = \" hea \" NEW_LINE print ( remAnagram ( str1 , str2 ) ) NEW_LINE DEDENT"}
{"text":"Assuming only lower case characters","code":"CHARS = 26 NEW_LINE"}
{"text":"To check a string S can be converted to a valid string by removing less than or equal to one character .","code":"def isValidString ( str ) : NEW_LINE INDENT freq = [ 0 ] * CHARS NEW_LINE DEDENT"}
{"text":"freq [ ] : stores the frequency of each character of a string","code":"for i in range ( len ( str ) ) : NEW_LINE INDENT freq [ ord ( str [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT"}
{"text":"Find first character with non - zero frequency","code":"freq1 = 0 NEW_LINE count_freq1 = 0 NEW_LINE for i in range ( CHARS ) : NEW_LINE INDENT if ( freq [ i ] != 0 ) : NEW_LINE INDENT freq1 = freq [ i ] NEW_LINE count_freq1 = 1 NEW_LINE break NEW_LINE DEDENT DEDENT"}
{"text":"Find a character with frequency different from freq1 .","code":"freq2 = 0 NEW_LINE count_freq2 = 0 NEW_LINE for j in range ( i + 1 , CHARS ) : NEW_LINE INDENT if ( freq [ j ] != 0 ) : NEW_LINE INDENT if ( freq [ j ] == freq1 ) : NEW_LINE INDENT count_freq1 += 1 NEW_LINE DEDENT else : NEW_LINE INDENT count_freq2 = 1 NEW_LINE freq2 = freq [ j ] NEW_LINE break NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"If we find a third non - zero frequency or count of both frequencies become more than 1 , then return false","code":"for k in range ( j + 1 , CHARS ) : NEW_LINE INDENT if ( freq [ k ] != 0 ) : NEW_LINE INDENT if ( freq [ k ] == freq1 ) : NEW_LINE INDENT count_freq1 += 1 NEW_LINE DEDENT if ( freq [ k ] == freq2 ) : NEW_LINE INDENT count_freq2 += 1 NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"If we find a third non - zero freq","code":"else : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"If counts of both frequencies is more than 1","code":"if ( count_freq1 > 1 and count_freq2 > 1 ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Return true if we reach here","code":"return True NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str = \" abcbc \" NEW_LINE if ( isValidString ( str ) ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT DEDENT"}
{"text":"To check a string S can be converted to a variation string","code":"def checkForVariation ( strr ) : NEW_LINE INDENT if ( len ( strr ) == 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT mapp = { } NEW_LINE DEDENT"}
{"text":"Run loop form 0 to length of string","code":"for i in range ( len ( strr ) ) : NEW_LINE INDENT if strr [ i ] in mapp : NEW_LINE INDENT mapp [ strr [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mapp [ strr [ i ] ] = 1 NEW_LINE DEDENT DEDENT"}
{"text":"declaration of variables","code":"first = True NEW_LINE second = True NEW_LINE val1 = 0 NEW_LINE val2 = 0 NEW_LINE countOfVal1 = 0 NEW_LINE countOfVal2 = 0 NEW_LINE for itr in mapp : NEW_LINE INDENT i = itr NEW_LINE DEDENT"}
{"text":"if first is true than countOfVal1 increase","code":"if ( first ) : NEW_LINE INDENT val1 = i NEW_LINE first = False NEW_LINE countOfVal1 += 1 NEW_LINE continue NEW_LINE DEDENT if ( i == val1 ) : NEW_LINE INDENT countOfVal1 += 1 NEW_LINE continue NEW_LINE DEDENT"}
{"text":"if second is true than countOfVal2 increase","code":"if ( second ) : NEW_LINE INDENT val2 = i NEW_LINE countOfVal2 += 1 NEW_LINE second = False NEW_LINE continue NEW_LINE DEDENT if ( i == val2 ) : NEW_LINE INDENT countOfVal2 += 1 NEW_LINE continue NEW_LINE DEDENT if ( countOfVal1 > 1 and countOfVal2 > 1 ) : NEW_LINE return False NEW_LINE else : NEW_LINE return True NEW_LINE"}
{"text":"Driver code","code":"print ( checkForVariation ( \" abcbc \" ) ) NEW_LINE"}
{"text":"Returns count of complete pairs from set [ 0. . n - 1 ] and set2 [ 0. . m - 1 ]","code":"def countCompletePairs ( set1 , set2 , n , m ) : NEW_LINE INDENT result = 0 NEW_LINE DEDENT"}
{"text":"con_s1 [ i ] is going to store an integer whose set bits represent presence \/ absence of characters in set1 [ i ] . Similarly con_s2 [ i ] is going to store an integer whose set bits represent presence \/ absence of characters in set2 [ i ]","code":"con_s1 , con_s2 = [ 0 ] * n , [ 0 ] * m NEW_LINE"}
{"text":"Process all strings in set1 [ ]","code":"for i in range ( n ) : NEW_LINE"}
{"text":"initializing all bits to 0","code":"con_s1 [ i ] = 0 NEW_LINE for j in range ( len ( set1 [ i ] ) ) : NEW_LINE"}
{"text":"Setting the ascii code of char s [ i ] [ j ] to 1 in the compressed integer .","code":"con_s1 [ i ] = con_s1 [ i ] | ( 1 << ( ord ( set1 [ i ] [ j ] ) - ord ( ' a ' ) ) ) NEW_LINE"}
{"text":"Process all strings in set2 [ ]","code":"for i in range ( m ) : NEW_LINE"}
{"text":"initializing all bits to 0","code":"con_s2 [ i ] = 0 NEW_LINE for j in range ( len ( set2 [ i ] ) ) : NEW_LINE"}
{"text":"setting the ascii code of char s [ i ] [ j ] to 1 in the compressed integer .","code":"con_s2 [ i ] = con_s2 [ i ] | ( 1 << ( ord ( set2 [ i ] [ j ] ) - ord ( ' a ' ) ) ) NEW_LINE"}
{"text":"assigning a variable whose all 26 ( 0. . 25 ) bits are set to 1","code":"complete = ( 1 << 26 ) - 1 NEW_LINE"}
{"text":"Now consider every pair of integer in con_s1 [ ] and con_s2 [ ] and check if the pair is complete .","code":"for i in range ( n ) : NEW_LINE INDENT for j in range ( m ) : NEW_LINE DEDENT"}
{"text":"if all bits are set , the strings are complete !","code":"if ( ( con_s1 [ i ] con_s2 [ j ] ) == complete ) : NEW_LINE INDENT result += 1 NEW_LINE DEDENT return result NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT set1 = [ \" abcdefgh \" , \" geeksforgeeks \" , \" lmnopqrst \" , \" abc \" ] NEW_LINE set2 = [ \" ijklmnopqrstuvwxyz \" , \" abcdefghijklmnopqrstuvwxyz \" , \" defghijklmnopqrstuvwxyz \" ] NEW_LINE n = len ( set1 ) NEW_LINE m = len ( set2 ) NEW_LINE print ( countCompletePairs ( set1 , set2 , n , m ) ) NEW_LINE DEDENT"}
{"text":"Function to encode given string","code":"def encodeString ( Str ) : NEW_LINE INDENT map = { } NEW_LINE res = \" \" NEW_LINE i = 0 NEW_LINE DEDENT"}
{"text":"For each character in given string","code":"for ch in Str : NEW_LINE"}
{"text":"If the character is occurring for the first time , assign next unique number to that char","code":"if ch not in map : NEW_LINE INDENT map [ ch ] = i NEW_LINE i += 1 NEW_LINE DEDENT"}
{"text":"Append the number associated with current character into the output string","code":"res += str ( map [ ch ] ) NEW_LINE return res NEW_LINE"}
{"text":"Function to print all the strings that match the given pattern where every character in the pattern is uniquely mapped to a character in the dictionary","code":"def findMatchedWords ( dict , pattern ) : NEW_LINE"}
{"text":"len is length of the pattern","code":"Len = len ( pattern ) NEW_LINE"}
{"text":"Encode the string","code":"hash = encodeString ( pattern ) NEW_LINE"}
{"text":"For each word in the dictionary array","code":"for word in dict : NEW_LINE"}
{"text":"If size of pattern is same as size of current dictionary word and both pattern and the word has same hash , print the word","code":"if ( len ( word ) == Len and encodeString ( word ) == hash ) : NEW_LINE INDENT print ( word , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"dict = [ \" abb \" , \" abc \" , \" xyz \" , \" xyy \" ] NEW_LINE pattern = \" foo \" NEW_LINE findMatchedWords ( dict , pattern ) NEW_LINE"}
{"text":"Python3 program to print all the strings that match the given pattern where every character in the pattern is uniquely mapped to a character in the dictionary","code":"def check ( pattern , word ) : NEW_LINE INDENT if ( len ( pattern ) != len ( word ) ) : NEW_LINE INDENT return False NEW_LINE DEDENT ch = [ 0 for i in range ( 128 ) ] NEW_LINE Len = len ( word ) NEW_LINE for i in range ( Len ) : NEW_LINE INDENT if ( ch [ ord ( pattern [ i ] ) ] == 0 ) : NEW_LINE INDENT ch [ ord ( pattern [ i ] ) ] = word [ i ] NEW_LINE DEDENT elif ( ch [ ord ( pattern [ i ] ) ] != word [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT return True NEW_LINE DEDENT"}
{"text":"Function to print all the strings that match the given pattern where every character in the pattern is uniquely mapped to a character in the dictionary","code":"def findMatchedWords ( Dict , pattern ) : NEW_LINE"}
{"text":"len is length of the pattern","code":"Len = len ( pattern ) NEW_LINE"}
{"text":"For each word in the dictionary","code":"for word in range ( len ( Dict ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT if ( check ( pattern , Dict [ word ] ) ) : NEW_LINE INDENT print ( Dict [ word ] , end = \" \u2581 \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver code","code":"Dict = [ \" abb \" , \" abc \" , \" xyz \" , \" xyy \" ] NEW_LINE pattern = \" foo \" NEW_LINE findMatchedWords ( Dict , pattern ) NEW_LINE"}
{"text":"Function to count total number of words in the string","code":"def countWords ( Str ) : NEW_LINE"}
{"text":"Check if the string is null or empty then return zero","code":"if ( Str == None or len ( Str ) == 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT wordCount = 0 NEW_LINE isWord = False NEW_LINE endOfLine = len ( Str ) - 1 NEW_LINE"}
{"text":"Converting the given string into a character array","code":"ch = list ( Str ) NEW_LINE for i in range ( len ( ch ) ) : NEW_LINE"}
{"text":"Check if the character is a letter and index of character array doesn 't  equal to end of line that means, it is  a word and set isWord by true","code":"if ( ch [ i ] . isalpha ( ) and i != endOfLine ) : NEW_LINE INDENT isWord = True NEW_LINE DEDENT"}
{"text":"Check if the character is not a letter that means there is a space , then we increment the wordCount by one and set the isWord by false","code":"elif ( not ch [ i ] . isalpha ( ) and isWord ) : NEW_LINE INDENT wordCount += 1 NEW_LINE isWord = False NEW_LINE DEDENT"}
{"text":"Check for the last word of the sentence and increment the wordCount by one","code":"elif ( ch [ i ] . isalpha ( ) and i == endOfLine ) : NEW_LINE INDENT wordCount += 1 NEW_LINE DEDENT"}
{"text":"Return the total number of words in the string","code":"return wordCount NEW_LINE"}
{"text":"Given String str","code":"Str =   \" One two three NEW_LINE INDENT four five   \" NEW_LINE DEDENT"}
{"text":"Print the result","code":"print ( \" No \u2581 of \u2581 words \u2581 : \" , countWords ( Str ) ) NEW_LINE"}
{"text":"Reverse the string","code":"def RevString ( s , l ) : NEW_LINE"}
{"text":"Check if number of words is even","code":"INDENT if l % 2 == 0 : NEW_LINE DEDENT"}
{"text":"Find the middle word","code":"j = int ( l \/ 2 ) NEW_LINE"}
{"text":"Starting from the middle start swapping words at jth position and l - 1 - j position","code":"while ( j <= l - 1 ) : NEW_LINE s [ j ] , s [ l - j - 1 ] = s [ l - j - 1 ] , s [ j ] NEW_LINE j += 1 NEW_LINE"}
{"text":"Check if number of words is odd","code":"INDENT else : NEW_LINE DEDENT"}
{"text":"Find the middle word","code":"j = int ( l \/ 2 + 1 ) NEW_LINE"}
{"text":"Starting from the middle start swapping the words at jth position and l - 1 - j position","code":"while ( j <= l - 1 ) : NEW_LINE s [ j ] , s [ l - 1 - j ] = s [ l - j - 1 ] , s [ j ] NEW_LINE j += 1 NEW_LINE"}
{"text":"return the reversed sentence","code":"return s ; NEW_LINE"}
{"text":"Driver Code","code":"s = ' getting \u2581 good \u2581 at \u2581 coding \u2581 needs \u2581 a \u2581 lot \u2581 of \u2581 practice ' NEW_LINE string = s . split ( ' \u2581 ' ) NEW_LINE string = RevString ( string , len ( string ) ) NEW_LINE print ( \" \u2581 \" . join ( string ) ) NEW_LINE"}
{"text":"Function to print path of all the nodes nth node represent as given node kth node represents as left and right node","code":"def printPath ( res , nThNode , kThNode ) : NEW_LINE"}
{"text":"base condition if kth node value is greater then nth node then its means kth node is not valid so we not store it into the res simply we just return","code":"if kThNode > nThNode : NEW_LINE INDENT return NEW_LINE DEDENT"}
{"text":"Storing node into res","code":"res . append ( kThNode ) NEW_LINE"}
{"text":"Print the path from root to node","code":"for i in range ( 0 , len ( res ) ) : NEW_LINE INDENT print ( res [ i ] , end = \" \u2581 \" ) NEW_LINE DEDENT print ( ) NEW_LINE"}
{"text":"store left path of a tree So for left we will go node ( kThNode * 2 )","code":"printPath ( res [ : ] , nThNode , kThNode * 2 ) NEW_LINE"}
{"text":"right path of a tree and for right we will go node ( kThNode * 2 + 1 )","code":"printPath ( res [ : ] , nThNode , kThNode * 2 + 1 ) NEW_LINE"}
{"text":"Function to print path from root to all of the nodes","code":"def printPathToCoverAllNodeUtil ( nThNode ) : NEW_LINE"}
{"text":"res is for store the path from root to particulate node","code":"res = [ ] NEW_LINE"}
{"text":"Print path from root to all node . third argument 1 because of we have to consider root node is 1","code":"printPath ( res , nThNode , 1 ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Given Node","code":"nThNode = 7 NEW_LINE"}
{"text":"Print path from root to all node .","code":"printPathToCoverAllNodeUtil ( nThNode ) NEW_LINE"}
{"text":"Python code to implement above approach","code":"import math NEW_LINE"}
{"text":"A utility function to get the middle index of given range .","code":"def getMid ( s : int , e : int ) -> int : NEW_LINE INDENT return s + ( e - s ) \/\/ 2 NEW_LINE DEDENT"}
{"text":"Function that return true if num is armstrong else return false","code":"def isArmstrong ( x : int ) -> bool : NEW_LINE INDENT n = len ( str ( x ) ) NEW_LINE sum1 = 0 NEW_LINE temp = x NEW_LINE while ( temp > 0 ) : NEW_LINE INDENT digit = temp % 10 NEW_LINE sum1 += pow ( digit , n ) NEW_LINE temp \/\/= 10 NEW_LINE DEDENT if ( sum1 == x ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT"}
{"text":"A recursive function to get the sum of values in the given range of the array . The following are parameters for this function . st -> Pointer to segment tree node -> Index of current node in the segment tree . ss & se -> Starting and ending indexes of the segment represented by current node , i . e . , st [ node ] l & r -> Starting and ending indexes of range query","code":"def MaxUtil ( st , ss , se , l , r , node ) : NEW_LINE"}
{"text":"If segment of this node is completely part of given range , then return the max of segment .","code":"if ( l <= ss and r >= se ) : NEW_LINE INDENT return st [ node ] NEW_LINE DEDENT"}
{"text":"If segment of this node does not belong to given range","code":"if ( se < l or ss > r ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"If segment of this node is partially the part of given range","code":"mid = getMid ( ss , se ) NEW_LINE return max ( MaxUtil ( st , ss , mid , l , r , 2 * node + 1 ) , MaxUtil ( st , mid + 1 , se , l , r , 2 * node + 2 ) ) NEW_LINE"}
{"text":"A recursive function to update the nodes which have the given the index in their range . The following are parameters st , ss and se are same as defined above index -> index of the element to be updated .","code":"def updateValue ( arr , st , ss , se , index , value , node ) : NEW_LINE INDENT if ( index < ss or index > se ) : NEW_LINE INDENT print ( \" Invalid \u2581 Input \" ) NEW_LINE return NEW_LINE DEDENT if ( ss == se ) : NEW_LINE DEDENT"}
{"text":"update value in array and in segment tree","code":"arr [ index ] = value NEW_LINE if ( isArmstrong ( value ) ) : NEW_LINE INDENT st [ node ] = value NEW_LINE DEDENT else : NEW_LINE INDENT st [ node ] = - 1 NEW_LINE DEDENT else : NEW_LINE mid = getMid ( ss , se ) NEW_LINE if ( index >= ss and index <= mid ) : NEW_LINE INDENT updateValue ( arr , st , ss , mid , index , value , 2 * node + 1 ) NEW_LINE DEDENT else : NEW_LINE INDENT updateValue ( arr , st , mid + 1 , se , index , value , 2 * node + 2 ) NEW_LINE DEDENT st [ node ] = max ( st [ 2 * node + 1 ] , st [ 2 * node + 2 ] ) NEW_LINE return NEW_LINE"}
{"text":"Return max of elements in range from index l ( query start ) to r ( query end ) .","code":"def getMax ( st , n , l , r ) : NEW_LINE"}
{"text":"Check for erroneous input values","code":"if ( l < 0 or r > n - 1 or l > r ) : NEW_LINE INDENT print ( \" Invalid \u2581 Input \" ) NEW_LINE return - 1 NEW_LINE DEDENT return MaxUtil ( st , 0 , n - 1 , l , r , 0 ) NEW_LINE"}
{"text":"A recursive function that constructs Segment Tree for array [ ss . . se ] . si is index of current node in segment tree st","code":"def constructSTUtil ( arr , ss , se , st , si ) : NEW_LINE"}
{"text":"If there is one element in array , store it in current node of segment tree and return","code":"if ( ss == se ) : NEW_LINE INDENT if ( isArmstrong ( arr [ ss ] ) ) : NEW_LINE INDENT st [ si ] = arr [ ss ] NEW_LINE DEDENT else : NEW_LINE INDENT st [ si ] = - 1 NEW_LINE DEDENT return st [ si ] NEW_LINE DEDENT"}
{"text":"If there are more than one elements , then recur for left and right subtrees and store the max of values in this node","code":"mid = getMid ( ss , se ) NEW_LINE st [ si ] = max ( constructSTUtil ( arr , ss , mid , st , si * 2 + 1 ) , constructSTUtil ( arr , mid + 1 , se , st , si * 2 + 2 ) ) NEW_LINE return st [ si ] NEW_LINE"}
{"text":"Function to construct a segment tree from given array . This function allocates memory for segment tree .","code":"def constructST ( arr , n ) : NEW_LINE"}
{"text":"Height of segment tree","code":"x = int ( math . ceil ( math . log2 ( n ) ) ) NEW_LINE"}
{"text":"Maximum size of segment tree","code":"max_size = 2 * int ( math . pow ( 2 , x ) ) - 1 NEW_LINE"}
{"text":"Allocate memory","code":"st = [ 0 for _ in range ( max_size ) ] NEW_LINE"}
{"text":"Fill the allocated memory st","code":"constructSTUtil ( arr , 0 , n - 1 , st , 0 ) NEW_LINE"}
{"text":"Return the constructed segment tree","code":"return st NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 192 , 113 , 535 , 7 , 19 , 111 ] NEW_LINE n = len ( arr ) NEW_LINE DEDENT"}
{"text":"Build segment tree from given array","code":"st = constructST ( arr , n ) NEW_LINE"}
{"text":"Print max of values in array from index 1 to 3","code":"print ( \" Maximum \u2581 armstrong \u2581 number \u2581 in \u2581 given \u2581 range \u2581 = \u2581 { } \" . format ( getMax ( st , n , 1 , 3 ) ) ) NEW_LINE"}
{"text":"Update : set arr [ 1 ] = 153 and update corresponding segment tree nodes .","code":"updateValue ( arr , st , 0 , n - 1 , 1 , 153 , 0 ) NEW_LINE"}
{"text":"Find max after the value is updated","code":"print ( \" Updated \u2581 Maximum \u2581 armstrong \u2581 number \u2581 in \u2581 given \u2581 range \u2581 = \u2581 { } \" . format ( getMax ( st , n , 1 , 3 ) ) ) NEW_LINE"}
{"text":"Function to find the maximum number of regions on a plane","code":"def maxRegions ( n ) : NEW_LINE INDENT num = n * ( n + 1 ) \/\/ 2 + 1 NEW_LINE DEDENT"}
{"text":"print the maximum number of regions","code":"print ( num ) NEW_LINE"}
{"text":"Driver code","code":"n = 10 NEW_LINE maxRegions ( n ) NEW_LINE"}
{"text":"Function to check if the jigsaw Puzzle is solveable or not","code":"def checkSolveable ( n , m ) : NEW_LINE"}
{"text":"Base Case","code":"if n == 1 or m == 1 : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT"}
{"text":"By placing the blank tabs as a chain","code":"elif m == 2 and n == 2 : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 1 NEW_LINE m = 3 NEW_LINE checkSolveable ( n , m ) NEW_LINE DEDENT"}
{"text":"Function to find the GCD of two numbers a and b","code":"def GCD ( a , b ) : NEW_LINE"}
{"text":"Base Case","code":"if ( b == 0 ) : NEW_LINE INDENT return a NEW_LINE DEDENT"}
{"text":"Recursively find the GCD","code":"else : NEW_LINE INDENT return GCD ( b , a % b ) NEW_LINE DEDENT"}
{"text":"Function to check if ( x , y ) can be reached from ( 1 , 0 ) from given moves","code":"def check ( x , y ) : NEW_LINE"}
{"text":"If GCD is 1 , then pr \" Yes \"","code":"if ( GCD ( x , y ) == 1 ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given X and Y","code":"X = 2 NEW_LINE Y = 7 NEW_LINE"}
{"text":"Function call","code":"check ( X , Y ) NEW_LINE"}
{"text":"Python3 program to implement the above approach","code":"size = 1000001 NEW_LINE"}
{"text":"Seieve of Erotosthenes to compute all primes","code":"def seiveOfEratosthenes ( prime ) : NEW_LINE INDENT prime [ 0 ] = 1 NEW_LINE prime [ 1 ] = 0 NEW_LINE i = 2 NEW_LINE while ( i * i < 1000001 ) : NEW_LINE DEDENT"}
{"text":"If prime","code":"if ( prime [ i ] == 0 ) : NEW_LINE INDENT j = i * i NEW_LINE while ( j < 1000001 ) : NEW_LINE DEDENT"}
{"text":"Mark all its multiples as non - prime","code":"prime [ j ] = 1 NEW_LINE j = j + i NEW_LINE i += 1 NEW_LINE"}
{"text":"Function to find the probability of Euler 's Totient Function in a given range","code":"def probabiltyEuler ( prime , L , R , M ) : NEW_LINE INDENT arr = [ 0 ] * size NEW_LINE eulerTotient = [ 0 ] * size NEW_LINE count = 0 NEW_LINE DEDENT"}
{"text":"Initializing two arrays with values from L to R for Euler 's totient","code":"for i in range ( L , R + 1 ) : NEW_LINE"}
{"text":"Indexing from 0","code":"eulerTotient [ i - L ] = i NEW_LINE arr [ i - L ] = i NEW_LINE for i in range ( 2 , 1000001 ) : NEW_LINE"}
{"text":"If the current number is prime","code":"if ( prime [ i ] == 0 ) : NEW_LINE"}
{"text":"Checking if i is prime factor of numbers in range L to R","code":"for j in range ( ( L \/\/ i ) * i , R + 1 , i ) : NEW_LINE INDENT if ( j - L >= 0 ) : NEW_LINE DEDENT"}
{"text":"Update all the numbers which has prime factor i","code":"eulerTotient [ j - L ] = ( eulerTotient [ j - L ] \/\/ i * ( i - 1 ) ) NEW_LINE while ( arr [ j - L ] % i == 0 ) : NEW_LINE INDENT arr [ j - L ] = arr [ j - L ] \/\/ i NEW_LINE DEDENT"}
{"text":"If number in range has a prime factor > Math . sqrt ( number )","code":"for i in range ( L , R + 1 ) : NEW_LINE INDENT if ( arr [ i - L ] > 1 ) : NEW_LINE INDENT eulerTotient [ i - L ] = ( ( eulerTotient [ i - L ] \/\/ arr [ i - L ] ) * ( arr [ i - L ] - 1 ) ) NEW_LINE DEDENT DEDENT for i in range ( L , R + 1 ) : NEW_LINE"}
{"text":"Count those which are divisible by M","code":"if ( ( eulerTotient [ i - L ] % M ) == 0 ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT"}
{"text":"Return the result","code":"return ( float ) ( 1.0 * count \/ ( R + 1 - L ) ) NEW_LINE"}
{"text":"Driver code","code":"prime = [ 0 ] * size NEW_LINE seiveOfEratosthenes ( prime ) NEW_LINE L , R , M = 1 , 7 , 3 NEW_LINE print ( probabiltyEuler ( prime , L , R , M ) ) NEW_LINE"}
{"text":"Python3 implementation to find the Largest Odd Divisor Game to check which player wins","code":"import math NEW_LINE"}
{"text":"Function to find the Largest Odd Divisor Game to check which player wins","code":"def findWinner ( n , k ) : NEW_LINE INDENT cnt = 0 ; NEW_LINE DEDENT"}
{"text":"Check if n == 1 then player 2 will win","code":"if ( n == 1 ) : NEW_LINE INDENT print ( \" No \" ) ; NEW_LINE DEDENT"}
{"text":"Check if n == 2 or n is odd","code":"elif ( ( n & 1 ) or n == 2 ) : NEW_LINE INDENT print ( \" Yes \" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT tmp = n ; NEW_LINE val = 1 ; NEW_LINE DEDENT"}
{"text":"While n is greater than k and divisible by 2 keep incrementing tha val","code":"while ( tmp > k and tmp % 2 == 0 ) : NEW_LINE INDENT tmp \/\/= 2 ; NEW_LINE val *= 2 ; NEW_LINE DEDENT"}
{"text":"Loop to find greatest odd divisor","code":"for i in range ( 3 , int ( math . sqrt ( tmp ) ) + 1 ) : NEW_LINE INDENT while ( tmp % i == 0 ) : NEW_LINE INDENT cnt += 1 ; NEW_LINE tmp \/\/= i ; NEW_LINE DEDENT DEDENT if ( tmp > 1 ) : NEW_LINE INDENT cnt += 1 ; NEW_LINE DEDENT"}
{"text":"Check if n is a power of 2","code":"if ( val == n ) : NEW_LINE INDENT print ( \" No \" ) ; NEW_LINE DEDENT elif ( n \/ tmp == 2 and cnt == 1 ) : NEW_LINE INDENT print ( \" No \" ) ; NEW_LINE DEDENT"}
{"text":"Check if cnt is not one then player 1 wins","code":"else : NEW_LINE INDENT print ( \" Yes \" ) ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 1 ; k = 1 ; NEW_LINE findWinner ( n , k ) ; NEW_LINE DEDENT"}
{"text":"Python3 program of the above approach","code":"import math NEW_LINE"}
{"text":"Function to print numbers upto N which are both pentagonal as well as hexagonal numbers","code":"def pen_hex ( n ) : NEW_LINE INDENT pn = 1 NEW_LINE for i in range ( 1 , N ) : NEW_LINE DEDENT"}
{"text":"Calculate i - th pentagonal number","code":"pn = ( int ) ( i * ( 3 * i - 1 ) \/ 2 ) NEW_LINE if ( pn > n ) : NEW_LINE INDENT break NEW_LINE DEDENT"}
{"text":"Check if the pentagonal number pn is hexagonal or not","code":"seqNum = ( 1 + math . sqrt ( 8 * pn + 1 ) ) \/ 4 NEW_LINE if ( seqNum == ( int ) ( seqNum ) ) : NEW_LINE INDENT print ( pn , end = \" , \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"N = 1000000 NEW_LINE pen_hex ( N ) NEW_LINE"}
{"text":"Function to check if row - major order traversal of the matrix is is palindrome","code":"def isPal ( a , n , m ) : NEW_LINE"}
{"text":"Loop to check if the matrix is matrix is palindrome or not","code":"for i in range ( 0 , n \/\/ 2 ) : NEW_LINE INDENT for j in range ( 0 , m - 1 ) : NEW_LINE INDENT if ( a [ i ] [ j ] != a [ n - 1 - i ] [ m - 1 - j ] ) : NEW_LINE INDENT return False ; NEW_LINE DEDENT DEDENT DEDENT return True ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 3 ; NEW_LINE m = 3 ; NEW_LINE a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 4 ] , [ 3 , 2 , 1 ] ] ; NEW_LINE if ( isPal ( a , n , m ) ) : NEW_LINE INDENT print ( \" YES \" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Function to get sum of digits","code":"def getSum ( n ) : NEW_LINE INDENT sum1 = 0 ; NEW_LINE while ( n != 0 ) : NEW_LINE INDENT sum1 = sum1 + n % 10 ; NEW_LINE n = n \/\/ 10 ; NEW_LINE DEDENT return sum1 ; NEW_LINE DEDENT"}
{"text":"Function to find the smallest number whose sum of digits is also N","code":"def smallestNumber ( N ) : NEW_LINE INDENT i = 1 ; NEW_LINE while ( 1 ) : NEW_LINE DEDENT"}
{"text":"Checking if number has sum of digits = N","code":"if ( getSum ( i ) == N ) : NEW_LINE INDENT print ( i ) ; NEW_LINE break ; NEW_LINE DEDENT i += 1 ; NEW_LINE"}
{"text":"Driver code","code":"N = 10 ; NEW_LINE smallestNumber ( N ) ; NEW_LINE"}
{"text":"Python3 implementation to check if N is a Rare number","code":"import math NEW_LINE"}
{"text":"Iterative function to reverse digits of num","code":"def reversDigits ( num ) : NEW_LINE INDENT rev_num = 0 NEW_LINE while ( num > 0 ) : NEW_LINE INDENT rev_num = rev_num * 10 + num % 10 NEW_LINE num = num \/\/ 10 NEW_LINE DEDENT return rev_num NEW_LINE DEDENT"}
{"text":"Function to check if N is perfect square","code":"def isPerfectSquare ( x ) : NEW_LINE"}
{"text":"Find floating point value of square root of x .","code":"sr = math . sqrt ( x ) NEW_LINE"}
{"text":"If square root is an integer","code":"return ( ( sr - int ( sr ) ) == 0 ) NEW_LINE"}
{"text":"Function to check if N is an Rare number","code":"def isRare ( N ) : NEW_LINE"}
{"text":"Find reverse of N","code":"reverseN = reversDigits ( N ) NEW_LINE"}
{"text":"Number should be non - palindromic","code":"if ( reverseN == N ) : NEW_LINE INDENT return False NEW_LINE DEDENT return ( isPerfectSquare ( N + reverseN ) and isPerfectSquare ( N - reverseN ) ) NEW_LINE"}
{"text":"Driver Code","code":"N = 65 NEW_LINE if ( isRare ( N ) ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Function which will calculate the elements in the given range","code":"def calc_ans ( l , r ) : NEW_LINE INDENT power2 = [ ] ; power3 = [ ] ; NEW_LINE DEDENT"}
{"text":"Store the current power of 2","code":"mul2 = 1 ; NEW_LINE while ( mul2 <= r ) : NEW_LINE INDENT power2 . append ( mul2 ) ; NEW_LINE mul2 *= 2 ; NEW_LINE DEDENT"}
{"text":"Store the current power of 3","code":"mul3 = 1 ; NEW_LINE while ( mul3 <= r ) : NEW_LINE INDENT power3 . append ( mul3 ) ; NEW_LINE mul3 *= 3 ; NEW_LINE DEDENT"}
{"text":"power23 [ ] will store pairwise product of elements of power2 and power3 that are <= r","code":"power23 = [ ] ; NEW_LINE for x in range ( len ( power2 ) ) : NEW_LINE INDENT for y in range ( len ( power3 ) ) : NEW_LINE INDENT mul = power2 [ x ] * power3 [ y ] ; NEW_LINE if ( mul == 1 ) : NEW_LINE INDENT continue ; NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Insert in power23 ] [ ] only if mul <= r","code":"if ( mul <= r ) : NEW_LINE INDENT power23 . append ( mul ) ; NEW_LINE DEDENT"}
{"text":"Store the required answer","code":"ans = 0 ; NEW_LINE for x in power23 : NEW_LINE INDENT if ( x >= l and x <= r ) : NEW_LINE INDENT ans += 1 ; NEW_LINE DEDENT DEDENT"}
{"text":"Print the result","code":"print ( ans ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT l = 1 ; r = 10 ; NEW_LINE calc_ans ( l , r ) ; NEW_LINE DEDENT"}
{"text":"Function to calculate nCr","code":"def nCr ( n , r ) : NEW_LINE INDENT if ( r > n ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT return fact ( n ) \/\/ ( fact ( r ) * fact ( n - r ) ) NEW_LINE DEDENT"}
{"text":"Returns factorial of n","code":"def fact ( n ) : NEW_LINE INDENT res = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT res = res * i NEW_LINE DEDENT return res NEW_LINE DEDENT"}
{"text":"Function for finding number of K length subsequences whose product is even number","code":"def countSubsequences ( arr , n , k ) : NEW_LINE INDENT countOdd = 0 NEW_LINE DEDENT"}
{"text":"Counting odd numbers in the array","code":"for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] & 1 ) : NEW_LINE INDENT countOdd += 1 ; NEW_LINE DEDENT DEDENT ans = nCr ( n , k ) - nCr ( countOdd , k ) ; NEW_LINE return ans NEW_LINE"}
{"text":"Driver code","code":"arr = [ 2 , 4 ] NEW_LINE K = 1 NEW_LINE N = len ( arr ) NEW_LINE print ( countSubsequences ( arr , N , K ) ) NEW_LINE"}
{"text":"Python3 program to find the first digit of X in base Y","code":"import math NEW_LINE"}
{"text":"Function to find the first digit of X in base Y","code":"def first_digit ( x , y ) : NEW_LINE"}
{"text":"Calculating number of digits of x in base y","code":"length = int ( math . log ( x ) \/ math . log ( y ) + 1 ) NEW_LINE"}
{"text":"Finding first digit of x in base y","code":"first_digit = x \/ math . pow ( y , length - 1 ) NEW_LINE print ( int ( first_digit ) ) NEW_LINE"}
{"text":"Driver code","code":"X = 55 NEW_LINE Y = 3 NEW_LINE first_digit ( X , Y ) NEW_LINE"}
{"text":"Function to check if a number is a Curzon number or not","code":"def checkIfCurzonNumber ( N ) : NEW_LINE INDENT powerTerm , productTerm = 0 , 0 NEW_LINE DEDENT"}
{"text":"Find 2 ^ N + 1","code":"powerTerm = pow ( 2 , N ) + 1 NEW_LINE"}
{"text":"Find 2 * N + 1","code":"productTerm = 2 * N + 1 NEW_LINE"}
{"text":"Check for divisibility","code":"if ( powerTerm % productTerm == 0 ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 5 NEW_LINE checkIfCurzonNumber ( N ) NEW_LINE N = 10 NEW_LINE checkIfCurzonNumber ( N ) NEW_LINE DEDENT"}
{"text":"Function to return the count of minimum numbers ending with 7 required such that the sum of these numbers is n","code":"def minCount ( n ) : NEW_LINE"}
{"text":"hasharr [ i ] will store the minimum numbers ending with 7 so that it sums to number ending with digit i","code":"hasharr = [ 10 , 3 , 6 , 9 , 2 , 5 , 8 , 1 , 4 , 7 ] NEW_LINE"}
{"text":"Its always possible to write numbers > 69 to write as numbers ending with 7","code":"if ( n > 69 ) : NEW_LINE INDENT return hasharr [ n % 10 ] NEW_LINE DEDENT else : NEW_LINE"}
{"text":"If the number is atleast equal to the sum of minimum numbers ending with 7","code":"if ( n >= hasharr [ n % 10 ] * 7 ) : NEW_LINE INDENT return hasharr [ n % 10 ] NEW_LINE DEDENT else : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"Driver code","code":"n = 38 ; NEW_LINE print ( minCount ( n ) ) NEW_LINE"}
{"text":"Function to print the modified binary pattern","code":"def modifiedBinaryPattern ( n ) : NEW_LINE"}
{"text":"Loop to traverse the rows","code":"for i in range ( 1 , n + 1 , 1 ) : NEW_LINE"}
{"text":"Loop to traverse the numbers in each row","code":"for j in range ( 1 , i + 1 , 1 ) : NEW_LINE"}
{"text":"Check if j is 1 or i In either case print 1","code":"if ( j == 1 or j == i ) : NEW_LINE INDENT print ( 1 , end = \" \" ) NEW_LINE DEDENT"}
{"text":"Else print 0","code":"else : NEW_LINE INDENT print ( 0 , end = \" \" ) NEW_LINE DEDENT"}
{"text":"Change the cursor to next line after each row","code":"print ( ' ' , end = \" \" ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 7 NEW_LINE DEDENT"}
{"text":"Function Call","code":"modifiedBinaryPattern ( n ) NEW_LINE"}
{"text":"Function to find real and imaginary parts of a complex number","code":"def findRealAndImag ( s ) : NEW_LINE"}
{"text":"string length stored in variable l","code":"l = len ( s ) NEW_LINE"}
{"text":"variable for the index of the separator","code":"i = 0 NEW_LINE"}
{"text":"Storing the index of '+","code":"' NEW_LINE INDENT if ( s . find ( ' + ' ) != - 1 ) : NEW_LINE INDENT i = s . find ( ' + ' ) NEW_LINE DEDENT DEDENT"}
{"text":"else storing the index of '-","code":"' NEW_LINE INDENT else : NEW_LINE INDENT i = s . find ( ' - ' ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Finding the real part of the complex number","code":"real = s [ : i ] NEW_LINE"}
{"text":"Finding the imaginary part of the complex number","code":"imaginary = s [ i + 1 : l - 1 ] NEW_LINE print ( \" Real \u2581 part : \" , real ) NEW_LINE print ( \" Imaginary \u2581 part : \" , imaginary ) NEW_LINE"}
{"text":"Driver code","code":"s = \"3 + 4i \" ; NEW_LINE findRealAndImag ( s ) ; NEW_LINE"}
{"text":"Python 3 implementation to find distinct powers of N that add up to K","code":"from math import pow NEW_LINE"}
{"text":"Function to return the highest power of N not exceeding K","code":"def highestPower ( n , k ) : NEW_LINE INDENT i = 0 NEW_LINE a = pow ( n , i ) NEW_LINE DEDENT"}
{"text":"Loop to find the highest power less than K","code":"while ( a <= k ) : NEW_LINE INDENT i += 1 NEW_LINE a = pow ( n , i ) NEW_LINE DEDENT return i - 1 NEW_LINE"}
{"text":"Initializing the PowerArray with all 0 's.","code":"b = [ 0 for i in range ( 50 ) ] NEW_LINE"}
{"text":"Function to print the distinct powers of N that add upto K","code":"def PowerArray ( n , k ) : NEW_LINE INDENT while ( k ) : NEW_LINE DEDENT"}
{"text":"Getting the highest power of n before k","code":"t = highestPower ( n , k ) NEW_LINE"}
{"text":"To check if the power is being used twice or not","code":"if ( b [ t ] ) : NEW_LINE"}
{"text":"Print - 1 if power is being used twice","code":"print ( - 1 ) NEW_LINE return 0 NEW_LINE else : NEW_LINE"}
{"text":"If the power is not visited , then mark the power as visited","code":"b [ t ] = 1 NEW_LINE"}
{"text":"Decrementing the value of K","code":"k -= pow ( n , t ) NEW_LINE"}
{"text":"Printing the powers of N that sum up to K","code":"for i in range ( 50 ) : NEW_LINE INDENT if ( b [ i ] ) : NEW_LINE INDENT print ( i , end = ' , \u2581 ' ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 3 NEW_LINE K = 40 NEW_LINE PowerArray ( N , K ) NEW_LINE DEDENT"}
{"text":"Python3 program to find sum of elements in an array having composite frequency","code":"N = 100005 NEW_LINE"}
{"text":"Function to create Sieve to check primes","code":"def SieveOfEratosthenes ( composite ) : NEW_LINE INDENT for p in range ( 2 , N ) : NEW_LINE INDENT if p * p > N : NEW_LINE INDENT break NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"If composite [ p ] is not changed , then it is a prime","code":"if ( composite [ p ] == False ) : NEW_LINE"}
{"text":"Update all multiples of p , set them to composite","code":"for i in range ( 2 * p , N , p ) : NEW_LINE INDENT composite [ i ] = True NEW_LINE DEDENT"}
{"text":"Function to return the sum of elements in an array having composite frequency","code":"def sumOfElements ( arr , n ) : NEW_LINE INDENT composite = [ False ] * N NEW_LINE SieveOfEratosthenes ( composite ) NEW_LINE DEDENT"}
{"text":"Map is used to store element frequencies","code":"m = dict ( ) ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT m [ arr [ i ] ] = m . get ( arr [ i ] , 0 ) + 1 NEW_LINE DEDENT"}
{"text":"To store sum","code":"sum = 0 NEW_LINE"}
{"text":"Traverse the map using iterators","code":"for it in m : NEW_LINE"}
{"text":"Count the number of elements having composite frequencies","code":"if ( composite [ m [ it ] ] ) : NEW_LINE INDENT sum += ( it ) NEW_LINE DEDENT return sum NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 1 , 1 , 1 , 3 , 3 , 2 , 4 ] NEW_LINE n = len ( arr ) NEW_LINE DEDENT"}
{"text":"Function call","code":"print ( sumOfElements ( arr , n ) ) NEW_LINE"}
{"text":"Function that removes the elements which have odd frequencies in the array","code":"def remove ( arr , n ) : NEW_LINE"}
{"text":"Create a map to store the frequency of each element","code":"m = dict . fromkeys ( arr , 0 ) ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT m [ arr [ i ] ] += 1 ; NEW_LINE DEDENT"}
{"text":"Remove the elements which have odd frequencies","code":"for i in range ( n ) : NEW_LINE"}
{"text":"If the element has odd frequency then skip","code":"if ( ( m [ arr [ i ] ] & 1 ) ) : NEW_LINE INDENT continue ; NEW_LINE DEDENT print ( arr [ i ] , end = \" , \u2581 \" ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 3 , 3 , 3 , 2 , 2 , 4 , 7 , 7 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE DEDENT"}
{"text":"Function call","code":"remove ( arr , n ) ; NEW_LINE"}
{"text":"Maximum value of the first array element that can be attained","code":"def getmax ( arr , n , x ) : NEW_LINE"}
{"text":"Variable to store the sum","code":"s = 0 NEW_LINE"}
{"text":"Loop to find the sum of array","code":"for i in range ( n ) : NEW_LINE INDENT s = s + arr [ i ] NEW_LINE DEDENT"}
{"text":"Desired maximum value","code":"print ( min ( s , x ) ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 1 , 2 , 3 , 4 ] NEW_LINE x = 5 NEW_LINE arr_size = len ( arr ) NEW_LINE getmax ( arr , arr_size , x ) NEW_LINE DEDENT"}
{"text":"function to get the minimum length of the shorter side of the triangle","code":"def shortestLength ( n , x , y ) : NEW_LINE INDENT answer = 0 NEW_LINE DEDENT"}
{"text":"traversing through each points on the plane","code":"i = 0 NEW_LINE while n > 0 : NEW_LINE"}
{"text":"if sum of a points is greater than the previous one , the maximum gets replaced","code":"if ( x [ i ] + y [ i ] > answer ) : NEW_LINE INDENT answer = x [ i ] + y [ i ] NEW_LINE DEDENT i += 1 NEW_LINE n -= 1 NEW_LINE"}
{"text":"print the length","code":"print ( \" Length \u2581 - > \u2581 \" + str ( answer ) ) NEW_LINE print ( \" Path \u2581 - > \u2581 \" + \" ( \u2581 1 , \u2581 \" + str ( answer ) + \" \u2581 ) \" + \" and \u2581 ( \u2581 \" + str ( answer ) + \" , \u2581 1 \u2581 ) \" ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"initialize the number of points","code":"n = 4 NEW_LINE"}
{"text":"points on the plane","code":"x = [ 1 , 4 , 2 , 1 ] NEW_LINE y = [ 4 , 1 , 1 , 2 ] NEW_LINE shortestLength ( n , x , y ) NEW_LINE"}
{"text":"function to find intersection rectangle of given two rectangles .","code":"def FindPoints ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 ) : NEW_LINE"}
{"text":"gives bottom - left point of intersection rectangle","code":"x5 = max ( x1 , x3 ) NEW_LINE y5 = max ( y1 , y3 ) NEW_LINE"}
{"text":"gives top - right point of intersection rectangle","code":"x6 = min ( x2 , x4 ) NEW_LINE y6 = min ( y2 , y4 ) NEW_LINE"}
{"text":"no intersection","code":"if ( x5 > x6 or y5 > y6 ) : NEW_LINE INDENT print ( \" No \u2581 intersection \" ) NEW_LINE return NEW_LINE DEDENT print ( \" ( \" , x5 , \" , \u2581 \" , y5 , \" ) \u2581 \" , end = \" \u2581 \" ) NEW_LINE print ( \" ( \" , x6 , \" , \u2581 \" , y6 , \" ) \u2581 \" , end = \" \u2581 \" ) NEW_LINE"}
{"text":"gives top - left point of intersection rectangle","code":"x7 = x5 NEW_LINE y7 = y6 NEW_LINE print ( \" ( \" , x7 , \" , \u2581 \" , y7 , \" ) \u2581 \" , end = \" \u2581 \" ) NEW_LINE"}
{"text":"gives bottom - right point of intersection rectangle","code":"x8 = x6 NEW_LINE y8 = y5 NEW_LINE print ( \" ( \" , x8 , \" , \u2581 \" , y8 , \" ) \u2581 \" ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"bottom - left and top - right corners of first rectangle","code":"x1 = 0 NEW_LINE y1 = 0 NEW_LINE x2 = 10 NEW_LINE y2 = 8 NEW_LINE"}
{"text":"bottom - left and top - right corners of first rectangle","code":"x3 = 2 NEW_LINE y3 = 3 NEW_LINE x4 = 7 NEW_LINE y4 = 9 NEW_LINE"}
{"text":"function call","code":"FindPoints ( x1 , y1 , x2 , y2 , x3 , y3 , x4 , y4 ) NEW_LINE"}
{"text":"Python3 program to find corner points of a rectangle using given length and middle points .","code":"import math NEW_LINE"}
{"text":"Structure to represent a co - ordinate point","code":"class Point : NEW_LINE INDENT def __init__ ( self , a = 0 , b = 0 ) : NEW_LINE INDENT self . x = a NEW_LINE self . y = b NEW_LINE DEDENT DEDENT"}
{"text":"This function receives two points and length of the side of rectangle and prints the 4 corner points of the rectangle","code":"def printCorners ( p , q , l ) : NEW_LINE INDENT a , b , c , d = Point ( ) , Point ( ) , Point ( ) , Point ( ) NEW_LINE DEDENT"}
{"text":"Horizontal rectangle","code":"if ( p . x == q . x ) : NEW_LINE INDENT a . x = p . x - ( l \/ 2.0 ) NEW_LINE a . y = p . y NEW_LINE d . x = p . x + ( l \/ 2.0 ) NEW_LINE d . y = p . y NEW_LINE b . x = q . x - ( l \/ 2.0 ) NEW_LINE b . y = q . y NEW_LINE c . x = q . x + ( l \/ 2.0 ) NEW_LINE c . y = q . y NEW_LINE DEDENT"}
{"text":"Vertical rectangle","code":"elif ( p . y == q . y ) : NEW_LINE INDENT a . y = p . y - ( l \/ 2.0 ) NEW_LINE a . x = p . x NEW_LINE d . y = p . y + ( l \/ 2.0 ) NEW_LINE d . x = p . x NEW_LINE b . y = q . y - ( l \/ 2.0 ) NEW_LINE b . x = q . x NEW_LINE c . y = q . y + ( l \/ 2.0 ) NEW_LINE c . x = q . x NEW_LINE DEDENT"}
{"text":"Slanted rectangle","code":"else : NEW_LINE"}
{"text":"Calculate slope of the side","code":"m = ( p . x - q . x ) \/ ( q . y - p . y ) NEW_LINE"}
{"text":"Calculate displacements along axes","code":"dx = ( l \/ math . sqrt ( 1 + ( m * m ) ) ) * 0.5 NEW_LINE dy = m * dx NEW_LINE a . x = p . x - dx NEW_LINE a . y = p . y - dy NEW_LINE d . x = p . x + dx NEW_LINE d . y = p . y + dy NEW_LINE b . x = q . x - dx NEW_LINE b . y = q . y - dy NEW_LINE c . x = q . x + dx NEW_LINE c . y = q . y + dy NEW_LINE print ( int ( a . x ) , \" , \u2581 \" , int ( a . y ) , sep = \" \" ) NEW_LINE print ( int ( b . x ) , \" , \u2581 \" , int ( b . y ) , sep = \" \" ) NEW_LINE print ( int ( c . x ) , \" , \u2581 \" , int ( c . y ) , sep = \" \" ) NEW_LINE print ( int ( d . x ) , \" , \u2581 \" , int ( d . y ) , sep = \" \" ) NEW_LINE print ( ) NEW_LINE"}
{"text":"Driver code","code":"p1 = Point ( 1 , 0 ) NEW_LINE q1 = Point ( 1 , 2 ) NEW_LINE printCorners ( p1 , q1 , 2 ) NEW_LINE p = Point ( 1 , 1 ) NEW_LINE q = Point ( - 1 , - 1 ) NEW_LINE printCorners ( p , q , 2 * math . sqrt ( 2 ) ) NEW_LINE"}
{"text":"Function to find the minimum cost to modify the array according to the given criteria","code":"def minimumCost ( arr , N , X , Y ) : NEW_LINE"}
{"text":"Count of wrong positioned odd and even elements","code":"even_count = 0 NEW_LINE odd_count = 0 NEW_LINE for i in range ( 0 , N ) : NEW_LINE"}
{"text":"Odd Count","code":"if ( ( arr [ i ] & 1 ) and ( i % 2 == 0 ) ) : NEW_LINE INDENT odd_count += 1 NEW_LINE DEDENT"}
{"text":"Even Count","code":"if ( ( arr [ i ] % 2 ) == 0 and ( i & 1 ) ) : NEW_LINE INDENT even_count += 1 NEW_LINE DEDENT"}
{"text":"Swapping Cost","code":"cost1 = X * min ( odd_count , even_count ) NEW_LINE"}
{"text":"Decrementing cost after swapping","code":"cost2 = Y * ( max ( odd_count , even_count ) - min ( odd_count , even_count ) ) NEW_LINE"}
{"text":"Only decrementing cost","code":"cost3 = ( odd_count + even_count ) * Y NEW_LINE"}
{"text":"Return the minimum cost of the two cases","code":"return min ( cost1 + cost2 , cost3 ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 5 , 3 , 7 , 2 , 1 ] NEW_LINE X = 10 NEW_LINE Y = 2 NEW_LINE N = len ( arr ) NEW_LINE print ( minimumCost ( arr , N , X , Y ) ) NEW_LINE DEDENT"}
{"text":"Function to find the minimum product of the minimum and maximum among all the possible subarrays","code":"def findMinMax ( a ) : NEW_LINE"}
{"text":"Stores resultant minimum product","code":"min_val = 1000000000 NEW_LINE"}
{"text":"Traverse the given array arr [ ]","code":"for i in range ( 1 , len ( a ) ) : NEW_LINE"}
{"text":"Min of product of all two pair of consecutive elements","code":"min_val = min ( min_val , a [ i ] * a [ i - 1 ] ) NEW_LINE"}
{"text":"Return the resultant value","code":"return min_val NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ( \" _ _ main _ _ \" ) : NEW_LINE INDENT arr = [ 6 , 4 , 5 , 6 , 2 , 4 , 1 ] NEW_LINE print ( findMinMax ( arr ) ) NEW_LINE DEDENT"}
{"text":"Structure of Tree","code":"sum = 0 NEW_LINE class Node : NEW_LINE"}
{"text":"A constructor to create a new node","code":"def __init__ ( self , data ) : NEW_LINE INDENT self . data = data NEW_LINE self . left = None NEW_LINE self . right = None NEW_LINE DEDENT"}
{"text":"Function to add the node to the sum below the target node","code":"def kDistanceDownSum ( root , k ) : NEW_LINE INDENT global sum NEW_LINE DEDENT"}
{"text":"Base Case","code":"if ( root == None or k < 0 ) : NEW_LINE INDENT return NEW_LINE DEDENT"}
{"text":"If Kth distant node is reached","code":"if ( k == 0 ) : NEW_LINE INDENT sum += root . data NEW_LINE return NEW_LINE DEDENT"}
{"text":"Recur for the left and the right subtrees","code":"kDistanceDownSum ( root . left , k - 1 ) NEW_LINE kDistanceDownSum ( root . right , k - 1 ) NEW_LINE"}
{"text":"Function to find the K distant nodes from target node , it returns - 1 if target node is not present in tree","code":"def kDistanceSum ( root , target , k ) : NEW_LINE INDENT global sum NEW_LINE DEDENT"}
{"text":"Base Case 1","code":"if ( root == None ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"If target is same as root .","code":"if ( root . data == target ) : NEW_LINE INDENT kDistanceDownSum ( root . left , k - 1 ) NEW_LINE return 0 NEW_LINE DEDENT"}
{"text":"Recurr for the left subtree","code":"dl = - 1 NEW_LINE"}
{"text":"Tree is BST so reduce the search space","code":"if ( target < root . data ) : NEW_LINE INDENT dl = kDistanceSum ( root . left , target , k ) NEW_LINE DEDENT"}
{"text":"Check if target node was found in left subtree","code":"if ( dl != - 1 ) : NEW_LINE"}
{"text":"If root is at distance k from the target","code":"if ( dl + 1 == k ) : NEW_LINE INDENT sum += root . data NEW_LINE DEDENT"}
{"text":"Node less than target will be present in left","code":"return - 1 NEW_LINE"}
{"text":"When node is not present in the left subtree","code":"dr = - 1 NEW_LINE if ( target > root . data ) : NEW_LINE INDENT dr = kDistanceSum ( root . right , target , k ) NEW_LINE DEDENT if ( dr != - 1 ) : NEW_LINE"}
{"text":"If Kth distant node is reached","code":"if ( dr + 1 == k ) : NEW_LINE INDENT sum += root . data NEW_LINE DEDENT"}
{"text":"Node less than target at k distance maybe present in the left tree","code":"else : NEW_LINE INDENT kDistanceDownSum ( root . left , k - dr - 2 ) NEW_LINE DEDENT return 1 + dr NEW_LINE"}
{"text":"If target was not present in the left nor in right subtree","code":"return - 1 NEW_LINE"}
{"text":"Function to insert a node in BST","code":"def insertNode ( data , root ) : NEW_LINE"}
{"text":"If root is NULL","code":"if ( root == None ) : NEW_LINE INDENT node = Node ( data ) NEW_LINE return node NEW_LINE DEDENT"}
{"text":"Insert the data in right half","code":"elif ( data > root . data ) : NEW_LINE INDENT root . right = insertNode ( data , root . right ) NEW_LINE DEDENT"}
{"text":"Insert the data in left half","code":"elif ( data <= root . data ) : NEW_LINE INDENT root . left = insertNode ( data , root . left ) NEW_LINE DEDENT"}
{"text":"Return the root node","code":"return root NEW_LINE"}
{"text":"Function to find the sum of K distant nodes from the target node having value less than target node","code":"def findSum ( root , target , K ) : NEW_LINE"}
{"text":"Stores the sum of nodes having values < target at K distance","code":"kDistanceSum ( root , target , K ) NEW_LINE"}
{"text":"Print the resultant sum","code":"print ( sum ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT root = None NEW_LINE N = 11 NEW_LINE tree = [ 3 , 1 , 7 , 0 , 2 , 5 , 10 , 4 , 6 , 9 , 8 ] NEW_LINE DEDENT"}
{"text":"Create the Tree","code":"for i in range ( N ) : NEW_LINE INDENT root = insertNode ( tree [ i ] , root ) NEW_LINE DEDENT target = 7 NEW_LINE K = 2 NEW_LINE findSum ( root , target , K ) NEW_LINE"}
{"text":"Function to find the type of the item given out according to the given rules","code":"def itemType ( n ) : NEW_LINE"}
{"text":"Stores the count of item given out at each step","code":"count = 0 NEW_LINE"}
{"text":"Iterate over the days from 1","code":"day = 1 NEW_LINE while ( True ) : NEW_LINE"}
{"text":"Iterate over type of item on that day","code":"for type in range ( day , 0 , - 1 ) : NEW_LINE INDENT count += type NEW_LINE DEDENT"}
{"text":"Count of items given out should exceed n","code":"if ( count >= n ) : NEW_LINE INDENT return type NEW_LINE DEDENT"}
{"text":"Driver Code","code":"N = 10 NEW_LINE print ( itemType ( N ) ) NEW_LINE"}
{"text":"Python3 program for the above approach","code":"from math import log2 NEW_LINE"}
{"text":"Function to prthe sum of array elements that are equidistant from two consecutive powers of 2","code":"def FindSum ( arr , N ) : NEW_LINE"}
{"text":"Stores the resultant sum of the array elements","code":"res = 0 NEW_LINE"}
{"text":"Traverse the array arr [ ]","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Stores the power of 2 of the number arr [ i ]","code":"power = int ( log2 ( arr [ i ] ) ) NEW_LINE"}
{"text":"Stores the number which is power of 2 and lesser than or equal to arr [ i ]","code":"LesserValue = pow ( 2 , power ) NEW_LINE"}
{"text":"Stores the number which is power of 2 and greater than or equal to arr [ i ]","code":"LargerValue = pow ( 2 , power + 1 ) NEW_LINE"}
{"text":"If arr [ i ] - LesserValue is the same as LargerValue - arr [ i ]","code":"if ( ( arr [ i ] - LesserValue ) == ( LargerValue - arr [ i ] ) ) : NEW_LINE"}
{"text":"Increment res by arr [ i ]","code":"res += arr [ i ] NEW_LINE"}
{"text":"Return the resultant sum res","code":"return res NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 10 , 24 , 17 , 3 , 8 ] NEW_LINE N = len ( arr ) NEW_LINE print ( FindSum ( arr , N ) ) NEW_LINE DEDENT"}
{"text":"Function to find the person who will finish last","code":"def findLast ( mat ) : NEW_LINE INDENT m = len ( mat ) NEW_LINE n = len ( mat [ 0 ] ) NEW_LINE DEDENT"}
{"text":"To keep track of rows and columns having 1","code":"rows = set ( ) NEW_LINE cols = set ( ) NEW_LINE for i in range ( m ) : NEW_LINE INDENT for j in range ( n ) : NEW_LINE INDENT if mat [ i ] [ j ] : NEW_LINE INDENT rows . add ( i ) NEW_LINE cols . add ( j ) NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Available rows and columns","code":"avRows = m - len ( list ( rows ) ) NEW_LINE avCols = n - len ( list ( cols ) ) NEW_LINE"}
{"text":"Minimum number of choices we have","code":"choices = min ( avRows , avCols ) NEW_LINE"}
{"text":"If number of choices are odd","code":"if choices & 1 : NEW_LINE"}
{"text":"P1 will finish last","code":"print ( ' P1' ) NEW_LINE"}
{"text":"Otherwise , P2 will finish last","code":"else : NEW_LINE INDENT print ( ' P2' ) NEW_LINE DEDENT"}
{"text":"Given matrix","code":"mat = [ [ 1 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 1 ] ] NEW_LINE findLast ( mat ) NEW_LINE"}
{"text":"Python3 program for the above approach","code":"from math import log2 , pow NEW_LINE MOD = 1000000007 NEW_LINE"}
{"text":"Function to find the sum of first N natural numbers represented in binary representation","code":"def sumOfBinaryNumbers ( n ) : NEW_LINE"}
{"text":"Stores the resultant sum","code":"ans = 0 NEW_LINE one = 1 NEW_LINE"}
{"text":"Iterate until the value of N is greater than 0","code":"while ( 1 ) : NEW_LINE"}
{"text":"If N is less than 2","code":"if ( n <= 1 ) : NEW_LINE INDENT ans = ( ans + n ) % MOD NEW_LINE break NEW_LINE DEDENT"}
{"text":"Store the MSB position of N","code":"x = int ( log2 ( n ) ) NEW_LINE cur = 0 NEW_LINE add = ( one << ( x - 1 ) ) NEW_LINE"}
{"text":"Iterate in the range [ 1 , x ] and add the contribution of the numbers from 1 to ( 2 ^ x - 1 )","code":"for i in range ( 1 , x + 1 , 1 ) : NEW_LINE"}
{"text":"Update the value of the cur and add","code":"cur = ( cur + add ) % MOD NEW_LINE add = ( add * 10 % MOD ) NEW_LINE"}
{"text":"Add the cur to ans","code":"ans = ( ans + cur ) % MOD NEW_LINE"}
{"text":"Store the remaining numbers","code":"rem = n - ( one << x ) + 1 NEW_LINE"}
{"text":"Add the contribution by MSB by the remaining numbers","code":"p = pow ( 10 , x ) NEW_LINE p = ( p * ( rem % MOD ) ) % MOD NEW_LINE ans = ( ans + p ) % MOD NEW_LINE"}
{"text":"The next iteration will be repeated for 2 ^ x - 1","code":"n = rem - 1 NEW_LINE"}
{"text":"Print the result","code":"print ( int ( ans ) ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 3 NEW_LINE sumOfBinaryNumbers ( N ) NEW_LINE DEDENT"}
{"text":"Function to find the Fibonacci number which is nearest to N","code":"def nearestFibonacci ( num ) : NEW_LINE"}
{"text":"Base Case","code":"if ( num == 0 ) : NEW_LINE INDENT print ( 0 ) NEW_LINE return NEW_LINE DEDENT"}
{"text":"Initialize the first & second terms of the Fibonacci series","code":"first = 0 NEW_LINE second = 1 NEW_LINE"}
{"text":"Store the third term","code":"third = first + second NEW_LINE"}
{"text":"Iterate until the third term is less than or equal to num","code":"while ( third <= num ) : NEW_LINE"}
{"text":"Update the first","code":"first = second NEW_LINE"}
{"text":"Update the second","code":"second = third NEW_LINE"}
{"text":"Update the third","code":"third = first + second NEW_LINE"}
{"text":"Store the Fibonacci number having smaller difference with N","code":"if ( abs ( third - num ) >= abs ( second - num ) ) : NEW_LINE INDENT ans = second NEW_LINE DEDENT else : NEW_LINE INDENT ans = third NEW_LINE DEDENT"}
{"text":"Print the result","code":"print ( ans ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 17 NEW_LINE nearestFibonacci ( N ) NEW_LINE DEDENT"}
{"text":"Python3 program for the above approach","code":"import sys NEW_LINE"}
{"text":"Function to check if the maximum prefix array of ans [ ] is equal to array arr [ ]","code":"def checkPermutation ( ans , a , n ) : NEW_LINE"}
{"text":"Initialize a variable , Max","code":"Max = - sys . maxsize - 1 NEW_LINE"}
{"text":"Traverse the array , ans [ ]","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Store the maximum value upto index i","code":"Max = max ( Max , ans [ i ] ) NEW_LINE"}
{"text":"If it is not equal to a [ i ] , then return false","code":"if ( Max != a [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Otherwise return false","code":"return True NEW_LINE"}
{"text":"Function to find the permutation of the array whose prefix maximum array is same as the given array a [ ]","code":"def findPermutation ( a , n ) : NEW_LINE"}
{"text":"Stores the required permutation","code":"ans = [ 0 ] * n NEW_LINE"}
{"text":"Stores the index of first occurrence of elements","code":"um = { } NEW_LINE"}
{"text":"Traverse the array a [ ]","code":"for i in range ( n ) : NEW_LINE"}
{"text":"If a [ i ] is not present in um , then store it in um","code":"if ( a [ i ] not in um ) : NEW_LINE"}
{"text":"Update the ans [ i ] to a [ i ]","code":"ans [ i ] = a [ i ] NEW_LINE um [ a [ i ] ] = i NEW_LINE"}
{"text":"Stores the unvisited numbers","code":"v = [ ] NEW_LINE j = 0 NEW_LINE"}
{"text":"Fill the array , v [ ]","code":"for i in range ( 1 , n + 1 ) : NEW_LINE"}
{"text":"Store the index","code":"if ( i not in um ) : NEW_LINE INDENT v . append ( i ) NEW_LINE DEDENT"}
{"text":"Traverse the array , ans [ ]","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Fill v [ j ] at places where ans [ i ] is 0","code":"if ( ans [ i ] == 0 ) : NEW_LINE INDENT ans [ i ] = v [ j ] NEW_LINE j += 1 NEW_LINE DEDENT"}
{"text":"Check if the current permutation maximum prefix array is same as the given array a [ ]","code":"if ( checkPermutation ( ans , a , n ) ) : NEW_LINE"}
{"text":"If true , the print the permutation","code":"for i in range ( n ) : NEW_LINE INDENT print ( ans [ i ] , end = \" \u2581 \" ) NEW_LINE DEDENT"}
{"text":"Otherwise , print - 1","code":"else : NEW_LINE INDENT print ( \" - 1\" ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 3 , 4 , 5 , 5 ] NEW_LINE N = len ( arr ) NEW_LINE DEDENT"}
{"text":"Function Call","code":"findPermutation ( arr , N ) NEW_LINE"}
{"text":"Function to count the number of required pairs for every array element","code":"def countEqualElementPairs ( arr , N ) : NEW_LINE"}
{"text":"Initialize a map","code":"mp = { } NEW_LINE"}
{"text":"Update the frequency of every element","code":"for i in range ( N ) : NEW_LINE INDENT if arr [ i ] in mp : NEW_LINE INDENT mp [ arr [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT mp [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT"}
{"text":"Stores the count of pairs","code":"total = 0 NEW_LINE"}
{"text":"Traverse the map","code":"for key , value in mp . items ( ) : NEW_LINE"}
{"text":"Count the number of ways to select pairs consisting of equal elements only","code":"total += ( value * ( value - 1 ) ) \/ 2 NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Print the count for every array element","code":"print ( int ( total - ( mp [ arr [ i ] ] - 1 ) ) , end = \" \u2581 \" ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given array","code":"arr = [ 1 , 1 , 2 , 1 , 2 ] NEW_LINE"}
{"text":"Size of the array","code":"N = len ( arr ) NEW_LINE countEqualElementPairs ( arr , N ) NEW_LINE"}
{"text":"Function to return the count of natural octal numbers upto N digits","code":"def count ( N ) : NEW_LINE INDENT sum = 0 ; NEW_LINE DEDENT"}
{"text":"Loop to iterate from 1 to N and calculating number of octal numbers for every ' i ' th digit .","code":"for i in range ( N + 1 ) : NEW_LINE INDENT sum += 7 * ( 8 ** ( i - 1 ) ) ; NEW_LINE DEDENT return int ( sum ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 4 ; NEW_LINE print ( count ( N ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 program to find all the palindromic divisors of a number","code":"from math import sqrt ; NEW_LINE"}
{"text":"Function to check is num is palindromic or not","code":"def isPalindrome ( n ) : NEW_LINE"}
{"text":"Convert n to string str","code":"string = str ( n ) ; NEW_LINE"}
{"text":"Starting and ending index of string str","code":"s = 0 ; e = len ( string ) - 1 ; NEW_LINE while ( s < e ) : NEW_LINE"}
{"text":"If char at s and e are not equals then return false","code":"if ( string [ s ] != string [ e ] ) : NEW_LINE INDENT return False ; NEW_LINE DEDENT s += 1 ; NEW_LINE e -= 1 ; NEW_LINE return True ; NEW_LINE"}
{"text":"Function to find palindromic divisors","code":"def palindromicDivisors ( n ) : NEW_LINE"}
{"text":"To sore the palindromic divisors of number n","code":"PalindromDivisors = [ ] ; NEW_LINE for i in range ( 1 , int ( sqrt ( n ) ) ) : NEW_LINE"}
{"text":"If n is divisible by i","code":"if ( n % i == 0 ) : NEW_LINE"}
{"text":"Check if number is a perfect square","code":"if ( n \/\/ i == i ) : NEW_LINE"}
{"text":"Check divisor is palindromic , then store it","code":"if ( isPalindrome ( i ) ) : NEW_LINE INDENT PalindromDivisors . append ( i ) ; NEW_LINE DEDENT else : NEW_LINE"}
{"text":"Check if divisors are palindrome","code":"if ( isPalindrome ( i ) ) : NEW_LINE INDENT PalindromDivisors . append ( i ) ; NEW_LINE DEDENT"}
{"text":"Check if n \/ divisors is palindromic or not","code":"if ( isPalindrome ( n \/\/ i ) ) : NEW_LINE INDENT PalindromDivisors . append ( n \/\/ i ) ; NEW_LINE DEDENT"}
{"text":"Print all palindromic divisors in sorted order","code":"PalindromDivisors . sort ( ) ; NEW_LINE for i in range ( len ( PalindromDivisors ) ) : NEW_LINE INDENT print ( PalindromDivisors [ i ] , end = \" \u2581 \" ) ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 66 ; NEW_LINE DEDENT"}
{"text":"Function call to find all palindromic divisors","code":"palindromicDivisors ( n ) ; NEW_LINE"}
{"text":"Python3 implementation of the approach","code":"import sys NEW_LINE"}
{"text":"Function to return the minimum deletions to get minimum OR","code":"def findMinDel ( arr , n ) : NEW_LINE"}
{"text":"To store the minimum element","code":"min_num = sys . maxsize ; NEW_LINE"}
{"text":"Find the minimum element from the array","code":"for i in range ( n ) : NEW_LINE INDENT min_num = min ( arr [ i ] , min_num ) ; NEW_LINE DEDENT"}
{"text":"To store the frequency of the minimum element","code":"cnt = 0 ; NEW_LINE"}
{"text":"Find the frequency of the minimum element","code":"for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == min_num ) : NEW_LINE INDENT cnt += 1 ; NEW_LINE DEDENT DEDENT"}
{"text":"Return the final answer","code":"return n - cnt ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 3 , 3 , 2 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( findMinDel ( arr , n ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 implementation of the approach","code":"from math import gcd NEW_LINE"}
{"text":"Function to return the required count","code":"def cntSubArr ( arr , n ) : NEW_LINE"}
{"text":"To store the final answer","code":"ans = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"To store the GCD starting from index 'i","code":"' NEW_LINE INDENT curr_gcd = 0 ; NEW_LINE DEDENT"}
{"text":"Loop to find the gcd of each subarray from arr [ i ] to arr [ i ... n - 1 ]","code":"for j in range ( i , n ) : NEW_LINE INDENT curr_gcd = gcd ( curr_gcd , arr [ j ] ) ; NEW_LINE DEDENT"}
{"text":"Increment the count if curr_gcd = 1","code":"ans += ( curr_gcd == 1 ) ; NEW_LINE"}
{"text":"Return the final answer","code":"return ans ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 1 , 1 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( cntSubArr ( arr , n ) ) ; NEW_LINE DEDENT"}
{"text":"Function to print first N prime numbers","code":"def print_primes_till_N ( N ) : NEW_LINE"}
{"text":"Declare the variables","code":"i , j , flag = 0 , 0 , 0 ; NEW_LINE"}
{"text":"Print display message","code":"print ( \" Prime \u2581 numbers \u2581 between \u2581 1 \u2581 and \u2581 \" , N , \" \u2581 are : \" ) ; NEW_LINE"}
{"text":"Traverse each number from 1 to N with the help of for loop","code":"for i in range ( 1 , N + 1 , 1 ) : NEW_LINE"}
{"text":"Skip 0 and 1 as they are neither prime nor composite","code":"if ( i == 1 or i == 0 ) : NEW_LINE INDENT continue ; NEW_LINE DEDENT"}
{"text":"flag variable to tell if i is prime or not","code":"flag = 1 ; NEW_LINE for j in range ( 2 , ( ( i \/\/ 2 ) + 1 ) , 1 ) : NEW_LINE INDENT if ( i % j == 0 ) : NEW_LINE INDENT flag = 0 ; NEW_LINE break ; NEW_LINE DEDENT DEDENT"}
{"text":"flag = 1 means i is prime and flag = 0 means i is not prime","code":"if ( flag == 1 ) : NEW_LINE INDENT print ( i , end = \" \u2581 \" ) ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"N = 100 ; NEW_LINE print_primes_till_N ( N ) ; NEW_LINE"}
{"text":"Python3 implementation of the approach","code":"MAX = 32 NEW_LINE"}
{"text":"Function to find X according to the given conditions","code":"def findX ( A , B ) : NEW_LINE INDENT X = 0 ; NEW_LINE DEDENT"}
{"text":"int can have 32 bits","code":"for bit in range ( MAX ) : NEW_LINE"}
{"text":"Temporary ith bit","code":"tempBit = 1 << bit ; NEW_LINE"}
{"text":"Compute ith bit of X according to given conditions Expression below is the direct conclusion from the illustration we had taken earlier","code":"bitOfX = A & B & tempBit ; NEW_LINE"}
{"text":"Add the ith bit of X to X","code":"X += bitOfX ; NEW_LINE return X ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT A = 11 ; B = 13 ; NEW_LINE print ( findX ( A , B ) ) ; NEW_LINE DEDENT"}
{"text":"Function to return the count of subsets with the maximum mean","code":"def cntSubSets ( arr , n ) : NEW_LINE"}
{"text":"Maximum value from the array","code":"maxVal = max ( arr ) ; NEW_LINE"}
{"text":"To store the number of times maximum element appears in the array","code":"cnt = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( arr [ i ] == maxVal ) : NEW_LINE INDENT cnt += 1 ; NEW_LINE DEDENT DEDENT"}
{"text":"Return the count of valid subsets","code":"return ( ( 2 ** cnt ) - 1 ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 2 , 1 , 2 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( cntSubSets ( arr , n ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 implementation of the approach","code":"import sys NEW_LINE"}
{"text":"Function to return the probability of getting the maximum pair sum when a random pair is chosen from the given array","code":"def findProb ( arr , n ) : NEW_LINE"}
{"text":"Initialize the maximum sum , its count and the count of total pairs","code":"maxSum = - ( sys . maxsize - 1 ) ; NEW_LINE maxCount = 0 ; NEW_LINE totalPairs = 0 ; NEW_LINE"}
{"text":"For every single pair","code":"for i in range ( n - 1 ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE DEDENT"}
{"text":"Get the sum of the current pair","code":"sum = arr [ i ] + arr [ j ] ; NEW_LINE"}
{"text":"If the sum is equal to the current maximum sum so far","code":"if ( sum == maxSum ) : NEW_LINE"}
{"text":"Increment its count","code":"maxCount += 1 ; NEW_LINE"}
{"text":"If the sum is greater than the current maximum","code":"elif ( sum > maxSum ) : NEW_LINE"}
{"text":"Update the current maximum and re - initialize the count to 1","code":"maxSum = sum ; NEW_LINE maxCount = 1 ; NEW_LINE totalPairs += 1 ; NEW_LINE"}
{"text":"Find the required probability","code":"prob = maxCount \/ totalPairs ; NEW_LINE return prob ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 1 , 1 , 2 , 2 , 2 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( findProb ( arr , n ) ) ; NEW_LINE DEDENT"}
{"text":"Python3 implementation of the approach","code":"import math NEW_LINE"}
{"text":"Function to return the count of common factors of a and b such that all the elements are co - prime to one another","code":"def maxCommonFactors ( a , b ) : NEW_LINE"}
{"text":"GCD of a and b","code":"gcd = math . gcd ( a , b ) NEW_LINE"}
{"text":"Include 1 initially","code":"ans = 1 ; NEW_LINE"}
{"text":"Find all the prime factors of the gcd","code":"i = 2 NEW_LINE while ( i * i <= gcd ) : NEW_LINE INDENT if ( gcd % i == 0 ) : NEW_LINE INDENT ans += 1 NEW_LINE while ( gcd % i == 0 ) : NEW_LINE INDENT gcd = gcd \/\/ i NEW_LINE DEDENT DEDENT i += 1 NEW_LINE DEDENT"}
{"text":"If gcd is prime","code":"if ( gcd != 1 ) : NEW_LINE INDENT ans += 1 NEW_LINE DEDENT"}
{"text":"Return the required answer","code":"return ans NEW_LINE"}
{"text":"Driver code","code":"a = 12 NEW_LINE b = 18 NEW_LINE print ( maxCommonFactors ( a , b ) ) NEW_LINE"}
{"text":"Python3 implementation of the approach","code":"days = [ 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ] ; NEW_LINE"}
{"text":"Function to return the day number of the year for the given date","code":"def dayOfYear ( date ) : NEW_LINE"}
{"text":"Extract the year , month and the day from the date string","code":"year = ( int ) ( date [ 0 : 4 ] ) ; NEW_LINE month = ( int ) ( date [ 5 : 7 ] ) ; NEW_LINE day = ( int ) ( date [ 8 : ] ) ; NEW_LINE"}
{"text":"If current year is a leap year and the date given is after the 28 th of February then it must include the 29 th February","code":"if ( month > 2 and year % 4 == 0 and ( year % 100 != 0 or year % 400 == 0 ) ) : NEW_LINE INDENT day += 1 ; NEW_LINE DEDENT"}
{"text":"Add the days in the previous months","code":"month -= 1 ; NEW_LINE while ( month > 0 ) : NEW_LINE INDENT day = day + days [ month - 1 ] ; NEW_LINE month -= 1 ; NEW_LINE DEDENT return day ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT date = \"2019-01-09\" ; NEW_LINE print ( dayOfYear ( date ) ) ; NEW_LINE DEDENT"}
{"text":"Function to find number of cells in the table contains X","code":"def Cells ( n , x ) : NEW_LINE INDENT ans = 0 ; NEW_LINE for i in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( x % i == 0 and x \/ i <= n ) : NEW_LINE INDENT ans += 1 ; NEW_LINE DEDENT DEDENT return ans ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 6 ; x = 12 ; NEW_LINE DEDENT"}
{"text":"Function call","code":"print ( Cells ( n , x ) ) ; NEW_LINE"}
{"text":"Python3 implementation of above approach","code":"import math NEW_LINE"}
{"text":"Function to return the smallest power of 4 greater than or equal to n","code":"def nextPowerOfFour ( n ) : NEW_LINE INDENT x = math . floor ( ( n ** ( 1 \/ 2 ) ) ** ( 1 \/ 2 ) ) ; NEW_LINE DEDENT"}
{"text":"If n is itself is a power of 4 then return n","code":"if ( ( x ** 4 ) == n ) : NEW_LINE INDENT return n ; NEW_LINE DEDENT else : NEW_LINE INDENT x = x + 1 ; NEW_LINE return ( x ** 4 ) ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"n = 122 ; NEW_LINE print ( nextPowerOfFour ( n ) ) ; NEW_LINE"}
{"text":"Function to return the minimum operations required","code":"def minOperations ( x , y , p , q ) : NEW_LINE"}
{"text":"Not possible","code":"if ( y % x != 0 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT d = y \/\/ x NEW_LINE"}
{"text":"To store the greatest power of p that divides d","code":"a = 0 NEW_LINE"}
{"text":"While divible by p","code":"while ( d % p == 0 ) : NEW_LINE INDENT d \/\/= p NEW_LINE a += 1 NEW_LINE DEDENT"}
{"text":"To store the greatest power of q that divides d","code":"b = 0 NEW_LINE"}
{"text":"While divible by q","code":"while ( d % q == 0 ) : NEW_LINE INDENT d \/\/= q NEW_LINE b += 1 NEW_LINE DEDENT"}
{"text":"If d > 1","code":"if ( d != 1 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"Since , d = p ^ a * q ^ b","code":"return ( a + b ) NEW_LINE"}
{"text":"Driver code","code":"x = 12 NEW_LINE y = 2592 NEW_LINE p = 2 NEW_LINE q = 3 NEW_LINE print ( minOperations ( x , y , p , q ) ) NEW_LINE"}
{"text":"Python3 implementation of the approach","code":"from math import sqrt NEW_LINE"}
{"text":"Function to calculate NC4","code":"def nCr ( n ) : NEW_LINE"}
{"text":"Base case to calculate NC4","code":"if ( n < 4 ) : NEW_LINE INDENT return 0 ; NEW_LINE DEDENT answer = n * ( n - 1 ) * ( n - 2 ) * ( n - 3 ) ; NEW_LINE answer \/\/= 24 ; NEW_LINE return answer ; NEW_LINE"}
{"text":"Function to return the count of required quadruples using Inclusion Exclusion","code":"def countQuadruples ( N , K ) : NEW_LINE"}
{"text":"Effective N","code":"M = N \/\/ K ; NEW_LINE answer = nCr ( M ) ; NEW_LINE"}
{"text":"Iterate over 2 to M","code":"for i in range ( 2 , M ) : NEW_LINE INDENT j = i ; NEW_LINE DEDENT"}
{"text":"Number of divisors of i till M","code":"temp2 = M \/\/ i ; NEW_LINE"}
{"text":"Count stores the number of prime divisors occurring exactly once","code":"count = 0 ; NEW_LINE"}
{"text":"To prevent repetition of prime divisors","code":"check = 0 ; NEW_LINE temp = j ; NEW_LINE while ( j % 2 == 0 ) : NEW_LINE INDENT count += 1 ; NEW_LINE j \/\/= 2 ; NEW_LINE if ( count >= 2 ) : NEW_LINE INDENT break ; NEW_LINE DEDENT DEDENT if ( count >= 2 ) : NEW_LINE INDENT check = 1 ; NEW_LINE DEDENT for k in range ( 3 , int ( sqrt ( temp ) ) , 2 ) : NEW_LINE INDENT cnt = 0 ; NEW_LINE while ( j % k == 0 ) : NEW_LINE INDENT cnt += 1 ; NEW_LINE j \/\/= k ; NEW_LINE if ( cnt >= 2 ) : NEW_LINE INDENT break ; NEW_LINE DEDENT DEDENT if ( cnt >= 2 ) : NEW_LINE INDENT check = 1 ; NEW_LINE break ; NEW_LINE DEDENT elif ( cnt == 1 ) : NEW_LINE INDENT count += 1 ; NEW_LINE DEDENT DEDENT if ( j > 2 ) : NEW_LINE INDENT count += 1 ; NEW_LINE DEDENT"}
{"text":"If repetition of prime divisors present ignore this number","code":"if ( check ) : NEW_LINE INDENT continue ; NEW_LINE DEDENT else : NEW_LINE"}
{"text":"If prime divisor count is odd subtract it from answer else add","code":"if ( count % 2 == 1 ) : NEW_LINE INDENT answer -= nCr ( temp2 ) ; NEW_LINE DEDENT else : NEW_LINE INDENT answer += nCr ( temp2 ) ; NEW_LINE DEDENT return answer ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 10 ; K = 2 ; NEW_LINE print ( countQuadruples ( N , K ) ) ; NEW_LINE DEDENT"}
{"text":"Function to return the required number X","code":"def getX ( a , b , c , d ) : NEW_LINE INDENT X = ( b * c - a * d ) \/\/ ( d - c ) NEW_LINE return X NEW_LINE DEDENT"}
{"text":"Driver code","code":"a = 2 NEW_LINE b = 3 NEW_LINE c = 4 NEW_LINE d = 5 NEW_LINE print ( getX ( a , b , c , d ) ) NEW_LINE"}
{"text":"Function to check if a character is vowel or consonent","code":"def isVowel ( ch ) : NEW_LINE INDENT if ( ch == ' a ' or ch == ' e ' or ch == ' i ' or ch == ' o ' or ch == ' u ' ) : NEW_LINE INDENT return True NEW_LINE DEDENT else : NEW_LINE INDENT return False NEW_LINE DEDENT DEDENT"}
{"text":"Function to calculate factorial of a number","code":"def fact ( n ) : NEW_LINE INDENT if ( n < 2 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT return n * fact ( n - 1 ) NEW_LINE DEDENT"}
{"text":"Calculating no of ways for arranging vowels","code":"def only_vowels ( freq ) : NEW_LINE INDENT denom = 1 NEW_LINE cnt_vwl = 0 NEW_LINE DEDENT"}
{"text":"Iterate the map and count the number of vowels and calculate no of ways to arrange vowels","code":"for itr in freq : NEW_LINE INDENT if ( isVowel ( itr ) ) : NEW_LINE INDENT denom *= fact ( freq [ itr ] ) NEW_LINE cnt_vwl += freq [ itr ] NEW_LINE DEDENT DEDENT return fact ( cnt_vwl ) \/\/ denom NEW_LINE"}
{"text":"calculating no of ways to arrange the given word such that vowels come together","code":"def all_vowels_together ( freq ) : NEW_LINE"}
{"text":"calculate no of ways to arrange vowels","code":"vow = only_vowels ( freq ) NEW_LINE"}
{"text":"to store denominator of fraction","code":"denom = 1 NEW_LINE"}
{"text":"count of consonents","code":"cnt_cnst = 0 NEW_LINE for itr in freq : NEW_LINE INDENT if ( isVowel ( itr ) == False ) : NEW_LINE INDENT denom *= fact ( freq [ itr ] ) NEW_LINE cnt_cnst += freq [ itr ] NEW_LINE DEDENT DEDENT"}
{"text":"calculate the number of ways to arrange the word such that vowels come together","code":"ans = fact ( cnt_cnst + 1 ) \/\/ denom NEW_LINE return ( ans * vow ) NEW_LINE"}
{"text":"To calculate total number of permutations","code":"def total_permutations ( freq ) : NEW_LINE"}
{"text":"To store length of the given word","code":"cnt = 0 NEW_LINE"}
{"text":"denominator of fraction","code":"denom = 1 NEW_LINE for itr in freq : NEW_LINE INDENT denom *= fact ( freq [ itr ] ) NEW_LINE cnt += freq [ itr ] NEW_LINE DEDENT"}
{"text":"return total number of permutations of the given word","code":"return fact ( cnt ) \/\/ denom NEW_LINE"}
{"text":"Function to calculate number of permutations such that no vowels come together","code":"def no_vowels_together ( word ) : NEW_LINE"}
{"text":"to store frequency of character","code":"freq = dict ( ) NEW_LINE"}
{"text":"count frequency of acharacters","code":"for i in word : NEW_LINE INDENT ch = i . lower ( ) NEW_LINE freq [ ch ] = freq . get ( ch , 0 ) + 1 NEW_LINE DEDENT"}
{"text":"calculate total number of permutations","code":"total = total_permutations ( freq ) NEW_LINE"}
{"text":"calculate total number of permutations such that vowels come together","code":"vwl_tgthr = all_vowels_together ( freq ) NEW_LINE"}
{"text":"substrat vwl_tgthr from total to get the result","code":"res = total - vwl_tgthr NEW_LINE"}
{"text":"return the result","code":"return res NEW_LINE"}
{"text":"Driver code","code":"word = \" allahabad \" NEW_LINE ans = no_vowels_together ( word ) NEW_LINE print ( ans ) NEW_LINE word = \" geeksforgeeks \" NEW_LINE ans = no_vowels_together ( word ) NEW_LINE print ( ans ) NEW_LINE word = \" abcd \" NEW_LINE ans = no_vowels_together ( word ) NEW_LINE print ( ans ) NEW_LINE"}
{"text":"Function to return the number of men initially","code":"def numberOfMen ( D , m , d ) : NEW_LINE INDENT Men = ( m * ( D - d ) ) \/ d ; NEW_LINE return int ( Men ) ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"D = 5 ; m = 4 ; d = 4 ; NEW_LINE print ( numberOfMen ( D , m , d ) ) ; NEW_LINE"}
{"text":"Function to find area","code":"def area ( a , b , c ) : NEW_LINE INDENT d = abs ( ( c * c ) \/ ( 2 * a * b ) ) NEW_LINE return d NEW_LINE DEDENT"}
{"text":"Driver code","code":"a = - 2 NEW_LINE b = 4 NEW_LINE c = 3 NEW_LINE print ( area ( a , b , c ) ) NEW_LINE"}
{"text":"Function to return the vector containing the answer","code":"def addToArrayForm ( A , K ) : NEW_LINE"}
{"text":"Vector v is to store each digits sum and vector ans is to store the answer","code":"v , ans = [ ] , [ ] NEW_LINE"}
{"text":"No carry in the beginning","code":"rem , i = 0 , 0 NEW_LINE"}
{"text":"Start loop from the end and take element one by one","code":"for i in range ( len ( A ) - 1 , - 1 , - 1 ) : NEW_LINE"}
{"text":"Array index and last digit of number","code":"my = A [ i ] + ( K % 10 ) + rem NEW_LINE if my > 9 : NEW_LINE"}
{"text":"Maintain carry of summation","code":"rem = 1 NEW_LINE"}
{"text":"Push the digit value into the array","code":"v . append ( my % 10 ) NEW_LINE else : NEW_LINE v . append ( my ) NEW_LINE rem = 0 NEW_LINE K = K \/\/ 10 NEW_LINE"}
{"text":"K value is greater then 0","code":"while K > 0 : NEW_LINE"}
{"text":"Push digits of K one by one in the array","code":"my = ( K % 10 ) + rem NEW_LINE v . append ( my % 10 ) NEW_LINE"}
{"text":"Also maintain carry with summation","code":"if my \/\/ 10 > 0 : NEW_LINE INDENT rem = 1 NEW_LINE DEDENT else : NEW_LINE INDENT rem = 0 NEW_LINE DEDENT K = K \/\/ 10 NEW_LINE if rem > 0 : NEW_LINE v . append ( rem ) NEW_LINE"}
{"text":"Reverse the elements of vector v and store it in vector ans","code":"for i in range ( len ( v ) - 1 , - 1 , - 1 ) : NEW_LINE INDENT ans . append ( v [ i ] ) NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT A = [ 2 , 7 , 4 ] NEW_LINE K = 181 NEW_LINE ans = addToArrayForm ( A , K ) NEW_LINE DEDENT"}
{"text":"Print the answer","code":"for i in range ( 0 , len ( ans ) ) : NEW_LINE INDENT print ( ans [ i ] , end = \" \" ) NEW_LINE DEDENT"}
{"text":"Python3 implementation of the above approach","code":"MAX = 100005 ; NEW_LINE"}
{"text":"Function to return maximum sum of a sub - array","code":"def kadaneAlgorithm ( ar , n ) : NEW_LINE INDENT sum = 0 ; maxSum = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT sum += ar [ i ] ; NEW_LINE if ( sum < 0 ) : NEW_LINE INDENT sum = 0 ; NEW_LINE DEDENT maxSum = max ( maxSum , sum ) ; NEW_LINE DEDENT return maxSum ; NEW_LINE DEDENT"}
{"text":"Function to return maximum value of function F","code":"def maxFunction ( arr , n ) : NEW_LINE INDENT b = [ 0 ] * MAX ; NEW_LINE c = [ 0 ] * MAX ; NEW_LINE DEDENT"}
{"text":"Compute arrays B [ ] and C [ ]","code":"for i in range ( n - 1 ) : NEW_LINE INDENT if ( i & 1 ) : NEW_LINE INDENT b [ i ] = abs ( arr [ i + 1 ] - arr [ i ] ) ; NEW_LINE c [ i ] = - b [ i ] ; NEW_LINE DEDENT else : NEW_LINE INDENT c [ i ] = abs ( arr [ i + 1 ] - arr [ i ] ) ; NEW_LINE b [ i ] = - c [ i ] ; NEW_LINE DEDENT DEDENT"}
{"text":"Find maximum sum sub - array of both of the arrays and take maximum among them","code":"ans = kadaneAlgorithm ( b , n - 1 ) ; NEW_LINE ans = max ( ans , kadaneAlgorithm ( c , n - 1 ) ) ; NEW_LINE return ans ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 5 , 4 , 7 ] ; NEW_LINE n = len ( arr ) NEW_LINE print ( maxFunction ( arr , n ) ) ; NEW_LINE DEDENT"}
{"text":"Function to find the element","code":"def findThirdDigit ( n ) : NEW_LINE"}
{"text":"if n < 3","code":"if n < 3 : NEW_LINE INDENT return 0 NEW_LINE DEDENT"}
{"text":"If n is even return 6 If n is odd return 1","code":"return 1 if n and 1 else 6 NEW_LINE"}
{"text":"Driver code","code":"n = 7 NEW_LINE print ( findThirdDigit ( n ) ) NEW_LINE"}
{"text":"Function to return the probability of A winning","code":"def getProbability ( a , b , c , d ) : NEW_LINE"}
{"text":"p and q store the values of fractions a \/ b and c \/ d","code":"p = a \/ b ; NEW_LINE q = c \/ d ; NEW_LINE"}
{"text":"To store the winning probability of A","code":"ans = p * ( 1 \/ ( 1 - ( 1 - q ) * ( 1 - p ) ) ) ; NEW_LINE return round ( ans , 5 ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = 1 ; b = 2 ; c = 10 ; d = 11 ; NEW_LINE print ( getProbability ( a , b , c , d ) ) ; NEW_LINE DEDENT"}
{"text":"Function to check if n is palindrome","code":"def isPalindrome ( n ) : NEW_LINE"}
{"text":"Find the appropriate divisor to extract the leading digit","code":"divisor = 1 NEW_LINE while ( int ( n \/ divisor ) >= 10 ) : NEW_LINE INDENT divisor *= 10 NEW_LINE DEDENT while ( n != 0 ) : NEW_LINE INDENT leading = int ( n \/ divisor ) NEW_LINE trailing = n % 10 NEW_LINE DEDENT"}
{"text":"If first and last digits are not same then return false","code":"if ( leading != trailing ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Removing the leading and trailing digits from the number","code":"n = int ( ( n % divisor ) \/ 10 ) NEW_LINE"}
{"text":"Reducing divisor by a factor of 2 as 2 digits are dropped","code":"divisor = int ( divisor \/ 100 ) NEW_LINE return True NEW_LINE"}
{"text":"Function to find the largest palindromic number","code":"def largestPalindrome ( A , n ) : NEW_LINE INDENT currentMax = - 1 NEW_LINE for i in range ( 0 , n , 1 ) : NEW_LINE DEDENT"}
{"text":"If a palindrome larger than the currentMax is found","code":"if ( A [ i ] > currentMax and isPalindrome ( A [ i ] ) ) : NEW_LINE INDENT currentMax = A [ i ] NEW_LINE DEDENT"}
{"text":"Return the largest palindromic number from the array","code":"return currentMax NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT A = [ 1 , 232 , 54545 , 999991 ] NEW_LINE n = len ( A ) NEW_LINE DEDENT"}
{"text":"print required answer","code":"print ( largestPalindrome ( A , n ) ) NEW_LINE"}
{"text":"Function to return the final element","code":"def getFinalElement ( n ) : NEW_LINE INDENT finalNum = 2 NEW_LINE while finalNum * 2 <= n : NEW_LINE INDENT finalNum *= 2 NEW_LINE DEDENT return finalNum NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 12 NEW_LINE print ( getFinalElement ( N ) ) NEW_LINE DEDENT"}
{"text":"Python3 program to find Sum of elements in an array having prime frequency","code":"import math as mt NEW_LINE"}
{"text":"Function to create Sieve to check primes","code":"def SieveOfEratosthenes ( prime , p_size ) : NEW_LINE"}
{"text":"False here indicates that it is not prime","code":"prime [ 0 ] = False NEW_LINE prime [ 1 ] = False NEW_LINE for p in range ( 2 , mt . ceil ( mt . sqrt ( p_size + 1 ) ) ) : NEW_LINE"}
{"text":"If prime [ p ] is not changed , then it is a prime","code":"if ( prime [ p ] ) : NEW_LINE"}
{"text":"Update all multiples of p , set them to non - prime","code":"for i in range ( p * 2 , p_size + 1 , p ) : NEW_LINE INDENT prime [ i ] = False NEW_LINE DEDENT"}
{"text":"Function to return the Sum of elements in an array having prime frequency","code":"def SumOfElements ( arr , n ) : NEW_LINE INDENT prime = [ True for i in range ( n + 1 ) ] NEW_LINE SieveOfEratosthenes ( prime , n + 1 ) NEW_LINE i , j = 0 , 0 NEW_LINE DEDENT"}
{"text":"Map is used to store element frequencies","code":"m = dict ( ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT if arr [ i ] in m . keys ( ) : NEW_LINE INDENT m [ arr [ i ] ] += 1 NEW_LINE DEDENT else : NEW_LINE INDENT m [ arr [ i ] ] = 1 NEW_LINE DEDENT DEDENT Sum = 0 NEW_LINE"}
{"text":"Traverse the map using iterators","code":"for i in m : NEW_LINE"}
{"text":"Count the number of elements having prime frequencies","code":"if ( prime [ m [ i ] ] ) : NEW_LINE INDENT Sum += ( i ) NEW_LINE DEDENT return Sum NEW_LINE"}
{"text":"Driver code","code":"arr = [ 5 , 4 , 6 , 5 , 4 , 6 ] NEW_LINE n = len ( arr ) NEW_LINE print ( SumOfElements ( arr , n ) ) NEW_LINE"}
{"text":"Function that returns true if the given number is a palindrome","code":"def isPalindrome ( num ) : NEW_LINE INDENT reverse_num = 0 NEW_LINE DEDENT"}
{"text":"Here we are generating a new number ( reverse_num ) by reversing the digits of original input number","code":"temp = num NEW_LINE while ( temp != 0 ) : NEW_LINE INDENT remainder = temp % 10 NEW_LINE reverse_num = reverse_num * 10 + remainder NEW_LINE temp = int ( temp \/ 10 ) NEW_LINE DEDENT"}
{"text":"If the original input number ( num ) is equal to its reverse ( reverse_num ) then its palindrome else it is not .","code":"if ( reverse_num == num ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE"}
{"text":"Function that returns true if the given number is of odd length","code":"def isOddLength ( num ) : NEW_LINE INDENT count = 0 NEW_LINE while ( num > 0 ) : NEW_LINE INDENT num = int ( num \/ 10 ) NEW_LINE count += 1 NEW_LINE DEDENT if ( count % 2 != 0 ) : NEW_LINE INDENT return True NEW_LINE DEDENT return False NEW_LINE DEDENT"}
{"text":"Function to return the sum of all odd length palindromic numbers within the given range","code":"def sumOfAllPalindrome ( L , R ) : NEW_LINE INDENT sum = 0 NEW_LINE if ( L <= R ) : NEW_LINE INDENT for i in range ( L , R + 1 , 1 ) : NEW_LINE DEDENT DEDENT"}
{"text":"if number is palindrome and of odd length","code":"if ( isPalindrome ( i ) and isOddLength ( i ) ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT return sum NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT L = 110 NEW_LINE R = 1130 NEW_LINE print ( sumOfAllPalindrome ( L , R ) ) NEW_LINE DEDENT"}
{"text":"Factorial of a number","code":"def fact ( n ) : NEW_LINE INDENT f = 1 NEW_LINE for i in range ( 2 , n + 1 ) : NEW_LINE INDENT f = f * i NEW_LINE DEDENT return f NEW_LINE DEDENT"}
{"text":"calculating ways for arranging consonants","code":"def waysOfConsonants ( size1 , freq ) : NEW_LINE INDENT ans = fact ( size1 ) NEW_LINE for i in range ( 26 ) : NEW_LINE DEDENT"}
{"text":"Ignore vowels","code":"if ( i == 0 or i == 4 or i == 8 or i == 14 or i == 20 ) : NEW_LINE INDENT continue NEW_LINE DEDENT else : NEW_LINE INDENT ans = ans \/\/ fact ( freq [ i ] ) NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"calculating ways for arranging vowels","code":"def waysOfVowels ( size2 , freq ) : NEW_LINE INDENT return ( fact ( size2 ) \/\/ ( fact ( freq [ 0 ] ) * fact ( freq [ 4 ] ) * fact ( freq [ 8 ] ) * fact ( freq [ 14 ] ) * fact ( freq [ 20 ] ) ) ) NEW_LINE DEDENT"}
{"text":"Function to count total no . of ways","code":"def countWays ( str1 ) : NEW_LINE INDENT freq = [ 0 ] * 26 NEW_LINE for i in range ( len ( str1 ) ) : NEW_LINE INDENT freq [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT DEDENT"}
{"text":"Count vowels and consonant","code":"vowel = 0 NEW_LINE consonant = 0 NEW_LINE for i in range ( len ( str1 ) ) : NEW_LINE INDENT if ( str1 [ i ] != ' a ' and str1 [ i ] != ' e ' and str1 [ i ] != ' i ' and str1 [ i ] != ' o ' and str1 [ i ] != ' u ' ) : NEW_LINE INDENT consonant += 1 NEW_LINE DEDENT else : NEW_LINE INDENT vowel += 1 NEW_LINE DEDENT DEDENT"}
{"text":"total no . of ways","code":"return ( waysOfConsonants ( consonant + 1 , freq ) * waysOfVowels ( vowel , freq ) ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str1 = \" geeksforgeeks \" NEW_LINE print ( countWays ( str1 ) ) NEW_LINE DEDENT"}
{"text":"Computes value of first fibonacci numbers and stores their alternate sum","code":"def calculateAlternateSum ( n ) : NEW_LINE INDENT if ( n <= 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT fibo = [ 0 ] * ( n + 1 ) NEW_LINE fibo [ 0 ] = 0 NEW_LINE fibo [ 1 ] = 1 NEW_LINE DEDENT"}
{"text":"Initialize result","code":"sum = pow ( fibo [ 0 ] , 2 ) + pow ( fibo [ 1 ] , 2 ) NEW_LINE"}
{"text":"Add remaining terms","code":"for i in range ( 2 , n + 1 ) : NEW_LINE INDENT fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] NEW_LINE DEDENT"}
{"text":"For even terms","code":"if ( i % 2 == 0 ) : NEW_LINE INDENT sum -= fibo [ i ] NEW_LINE DEDENT"}
{"text":"For odd terms","code":"else : NEW_LINE INDENT sum += fibo [ i ] NEW_LINE DEDENT"}
{"text":"Return the alternating sum","code":"return sum NEW_LINE"}
{"text":"Driver program to test above function","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"Get n","code":"n = 8 NEW_LINE"}
{"text":"Find the alternating sum","code":"print ( \" Alternating \u2581 Fibonacci \u2581 Sum \u2581 upto \u2581 \" , n , \" \u2581 terms : \u2581 \" , calculateAlternateSum ( n ) ) NEW_LINE"}
{"text":"Function that will return nth term","code":"def getValue ( n ) : NEW_LINE INDENT i = 0 ; NEW_LINE k = 1 ; NEW_LINE while ( i < n ) : NEW_LINE INDENT i = i + k ; NEW_LINE k = k * 2 ; NEW_LINE DEDENT return int ( k \/ 2 ) ; NEW_LINE DEDENT"}
{"text":"Get n","code":"n = 9 ; NEW_LINE"}
{"text":"Get the value","code":"print ( getValue ( n ) ) ; NEW_LINE"}
{"text":"Get n","code":"n = 1025 ; NEW_LINE"}
{"text":"Get the value","code":"print ( getValue ( n ) ) ; NEW_LINE"}
{"text":"Python 3 implementation of above approach","code":"import math NEW_LINE"}
{"text":"Function that traverses digits in a number and modifies frequency count array","code":"def countDigits ( val , arr ) : NEW_LINE INDENT while ( val > 0 ) : NEW_LINE INDENT digit = val % 10 NEW_LINE arr [ int ( digit ) ] += 1 NEW_LINE val = val \/\/ 10 NEW_LINE DEDENT return ; NEW_LINE DEDENT def countFrequency ( x , n ) : NEW_LINE"}
{"text":"Array to keep count of digits","code":"freq_count = [ 0 ] * 10 NEW_LINE"}
{"text":"Traversing through x ^ 1 to x ^ n","code":"for i in range ( 1 , n + 1 ) : NEW_LINE"}
{"text":"For power function , both its parameters are to be in double","code":"val = math . pow ( x , i ) NEW_LINE"}
{"text":"calling countDigits function on x ^ i","code":"countDigits ( val , freq_count ) NEW_LINE"}
{"text":"Printing count of digits 0 - 9","code":"for i in range ( 10 ) : NEW_LINE INDENT print ( freq_count [ i ] , end = \" \u2581 \" ) ; NEW_LINE DEDENT"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT x = 15 NEW_LINE n = 3 NEW_LINE countFrequency ( x , n ) NEW_LINE DEDENT"}
{"text":"function to return the number of solutions","code":"def countSolutions ( a ) : NEW_LINE INDENT count = 0 NEW_LINE DEDENT"}
{"text":"check for every possible value","code":"for i in range ( a + 1 ) : NEW_LINE INDENT if ( a == ( i + ( a ^ i ) ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT DEDENT return count NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = 3 NEW_LINE print ( countSolutions ( a ) ) NEW_LINE DEDENT"}
{"text":"function to return the number of solutions","code":"def countSolutions ( a ) : NEW_LINE INDENT count = bin ( a ) . count ( '1' ) NEW_LINE return 2 ** count NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT a = 3 NEW_LINE print ( countSolutions ( a ) ) NEW_LINE DEDENT"}
{"text":"Function to calculate the sum of area of all possible squares that comes inside the rectangle","code":"def calculateAreaSum ( l , b ) : NEW_LINE INDENT size = 1 NEW_LINE DEDENT"}
{"text":"Square with max size possible","code":"maxSize = min ( l , b ) NEW_LINE totalArea = 0 NEW_LINE for i in range ( 1 , maxSize + 1 ) : NEW_LINE"}
{"text":"calculate total square of a given size","code":"totalSquares = ( ( l - size + 1 ) * ( b - size + 1 ) ) NEW_LINE"}
{"text":"calculate area of squares of a particular size","code":"area = ( totalSquares * size * size ) NEW_LINE"}
{"text":"total area","code":"totalArea += area NEW_LINE"}
{"text":"increment size","code":"size += 1 NEW_LINE return totalArea NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT l = 4 NEW_LINE b = 3 NEW_LINE print ( calculateAreaSum ( l , b ) ) NEW_LINE DEDENT"}
{"text":"function to calculate the value of hyperfactorial","code":"def boost_hyperfactorial ( num ) : NEW_LINE"}
{"text":"initialise the val to 1","code":"val = 1 ; NEW_LINE for i in range ( 1 , num + 1 ) : NEW_LINE INDENT val = val * pow ( i , i ) ; NEW_LINE DEDENT"}
{"text":"returns the hyperfactorial of a number","code":"return val ; NEW_LINE"}
{"text":"Driver code","code":"num = 5 ; NEW_LINE print ( boost_hyperfactorial ( num ) ) ; NEW_LINE"}
{"text":"function to calculate the value of hyperfactorial","code":"def boost_hyperfactorial ( num ) : NEW_LINE"}
{"text":"initialise the val to 1","code":"val = 1 ; NEW_LINE for i in range ( 1 , num + 1 ) : NEW_LINE INDENT for j in range ( 1 , i + 1 ) : NEW_LINE DEDENT"}
{"text":"1 ^ 1 * 2 ^ 2 * 3 ^ 3. . . .","code":"val *= i ; NEW_LINE"}
{"text":"returns the hyperfactorial of a number","code":"return val ; NEW_LINE"}
{"text":"Driver code","code":"num = 5 ; NEW_LINE print ( boost_hyperfactorial ( num ) ) ; NEW_LINE"}
{"text":"Python 3 code to subtract one from a given number","code":"def subtractOne ( x ) : NEW_LINE INDENT m = 1 NEW_LINE DEDENT"}
{"text":"Flip all the set bits until we find a 1","code":"while ( ( x & m ) == False ) : NEW_LINE INDENT x = x ^ m NEW_LINE m = m << 1 NEW_LINE DEDENT"}
{"text":"flip the rightmost 1 bit","code":"x = x ^ m NEW_LINE return x NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT print ( subtractOne ( 13 ) ) NEW_LINE DEDENT"}
{"text":"Python3 program to find mean vector of given matrix","code":"rows = 3 ; NEW_LINE cols = 3 ; NEW_LINE"}
{"text":"Function to find mean vector","code":"def meanVector ( mat ) : NEW_LINE INDENT print ( \" [ \u2581 \" , end = \" \" ) ; NEW_LINE DEDENT"}
{"text":"loop to traverse each column","code":"for i in range ( rows ) : NEW_LINE"}
{"text":"to calculate mean of each row","code":"mean = 0.00 ; NEW_LINE"}
{"text":"to store sum of elements of a column","code":"sum = 0 ; NEW_LINE for j in range ( cols ) : NEW_LINE INDENT sum = sum + mat [ j ] [ i ] ; mean = int ( sum \/ rows ) ; print ( mean , end = \" \u2581 \" ) ; print ( \" ] \" ) ; NEW_LINE DEDENT"}
{"text":"Driver Code","code":"mat = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ] ; NEW_LINE meanVector ( mat ) ; NEW_LINE"}
{"text":"Python3 code to check if a number is a hoax number or not .","code":"import math NEW_LINE"}
{"text":"Function to find distinct prime factors of given number n","code":"def primeFactors ( n ) : NEW_LINE INDENT res = [ ] NEW_LINE if ( n % 2 == 0 ) : NEW_LINE INDENT while ( n % 2 == 0 ) : NEW_LINE INDENT n = int ( n \/ 2 ) NEW_LINE DEDENT res . append ( 2 ) NEW_LINE DEDENT DEDENT"}
{"text":"n is odd at this point , since it is no longer divisible by 2. So we can test only for the odd numbers , whether they are factors of n","code":"for i in range ( 3 , int ( math . sqrt ( n ) ) , 2 ) : NEW_LINE"}
{"text":"Check if i is prime factor","code":"if ( n % i == 0 ) : NEW_LINE INDENT while ( n % i == 0 ) : NEW_LINE INDENT n = int ( n \/ i ) NEW_LINE DEDENT res . append ( i ) NEW_LINE DEDENT"}
{"text":"This condition is to handle the case when n is a prime number greater than 2","code":"if ( n > 2 ) : NEW_LINE INDENT res . append ( n ) NEW_LINE DEDENT return res NEW_LINE"}
{"text":"Function to calculate sum of digits of distinct prime factors of given number n and sum of digits of number n and compare the sums obtained","code":"def isHoax ( n ) : NEW_LINE"}
{"text":"Distinct prime factors of n are being stored in vector pf","code":"pf = primeFactors ( n ) NEW_LINE"}
{"text":"If n is a prime number , it cannot be a hoax number","code":"if ( pf [ 0 ] == n ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Finding sum of digits of distinct prime factors of the number n","code":"all_pf_sum = 0 NEW_LINE for i in range ( 0 , len ( pf ) ) : NEW_LINE"}
{"text":"Finding sum of digits in current prime factor pf [ i ] .","code":"pf_sum = 0 NEW_LINE while ( pf [ i ] > 0 ) : NEW_LINE INDENT pf_sum += pf [ i ] % 10 NEW_LINE pf [ i ] = int ( pf [ i ] \/ 10 ) NEW_LINE DEDENT all_pf_sum += pf_sum NEW_LINE"}
{"text":"Finding sum of digits of number n","code":"sum_n = 0 ; NEW_LINE while ( n > 0 ) : NEW_LINE INDENT sum_n += n % 10 NEW_LINE n = int ( n \/ 10 ) NEW_LINE DEDENT"}
{"text":"Comparing the two calculated sums","code":"return sum_n == all_pf_sum NEW_LINE"}
{"text":"Driver Method","code":"n = 84 ; NEW_LINE if ( isHoax ( n ) ) : NEW_LINE INDENT print ( \" A Hoax Number \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Not a Hoax Number \" ) NEW_LINE DEDENT"}
{"text":"Function to find out first n terms ( considering 4 as 0 th term ) of Lucas - Lehmer series .","code":"def LucasLehmer ( n ) : NEW_LINE"}
{"text":"the 0 th term of the series is 4.","code":"INDENT current_val = 4 ; NEW_LINE DEDENT"}
{"text":"create an array to store the terms .","code":"INDENT series = [ ] NEW_LINE DEDENT"}
{"text":"compute each term and add it to the array .","code":"INDENT series . append ( current_val ) NEW_LINE for i in range ( n ) : NEW_LINE INDENT current_val = current_val * current_val - 2 ; NEW_LINE series . append ( current_val ) ; NEW_LINE DEDENT DEDENT"}
{"text":"print out the terms one by one .","code":"INDENT for i in range ( n + 1 ) : NEW_LINE INDENT print ( \" Term \" , i , \" : \" , series [ i ] ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver program","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 5 ; NEW_LINE LucasLehmer ( n ) ; NEW_LINE DEDENT"}
{"text":"A naive method to find modular multiplicative inverse of ' a ' under modulo 'prime","code":"' NEW_LINE def modInverse ( a , prime ) : NEW_LINE INDENT a = a % prime NEW_LINE for x in range ( 1 , prime ) : NEW_LINE INDENT if ( ( a * x ) % prime == 1 ) : NEW_LINE INDENT return x NEW_LINE DEDENT DEDENT return - 1 NEW_LINE DEDENT def printModIverses ( n , prime ) : NEW_LINE INDENT for i in range ( 1 , n + 1 ) : NEW_LINE INDENT print ( modInverse ( i , prime ) , end = \" \u2581 \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Driver Program","code":"n = 10 NEW_LINE prime = 17 NEW_LINE printModIverses ( n , prime ) NEW_LINE"}
{"text":"function for minimum operation","code":"def minOp ( num ) : NEW_LINE"}
{"text":"remainder and operations count","code":"count = 0 NEW_LINE"}
{"text":"count digits not equal to 3 or 8","code":"while ( num ) : NEW_LINE INDENT rem = num % 10 NEW_LINE if ( not ( rem == 3 or rem == 8 ) ) : NEW_LINE INDENT count = count + 1 NEW_LINE DEDENT num = num \/\/ 10 NEW_LINE DEDENT return count NEW_LINE"}
{"text":"Driver code","code":"num = 234198 NEW_LINE print ( \" Minimum \u2581 Operations \u2581 = \" , minOp ( num ) ) NEW_LINE"}
{"text":"function to calculate the sum of digits of a number .","code":"def sumOfDigits ( a ) : NEW_LINE INDENT sm = 0 NEW_LINE while ( a != 0 ) : NEW_LINE INDENT sm = sm + a % 10 NEW_LINE a = a \/\/ 10 NEW_LINE DEDENT return sm NEW_LINE DEDENT"}
{"text":"Returns the maximum number with maximum sum of digits .","code":"def findMax ( x ) : NEW_LINE"}
{"text":"initializing b as 1 and initial max sum to be of n","code":"b = 1 NEW_LINE ans = x NEW_LINE"}
{"text":"iterates from right to left in a digit","code":"while ( x != 0 ) : NEW_LINE"}
{"text":"while iterating this is the number from right to left","code":"cur = ( x - 1 ) * b + ( b - 1 ) NEW_LINE"}
{"text":"calls the function to check if sum of cur is more then of ans","code":"if ( sumOfDigits ( cur ) > sumOfDigits ( ans ) or ( sumOfDigits ( cur ) == sumOfDigits ( ans ) and cur > ans ) ) : NEW_LINE INDENT ans = cur NEW_LINE DEDENT"}
{"text":"reduces the number to one unit less","code":"x = x \/\/ 10 NEW_LINE b = b * 10 NEW_LINE return ans NEW_LINE"}
{"text":"driver program to test the above function","code":"n = 521 NEW_LINE print ( findMax ( n ) ) NEW_LINE"}
{"text":"Function to give index of the median","code":"def median ( a , l , r ) : NEW_LINE INDENT n = r - l + 1 NEW_LINE n = ( n + 1 ) \/\/ 2 - 1 NEW_LINE return n + l NEW_LINE DEDENT"}
{"text":"Function to calculate IQR","code":"def IQR ( a , n ) : NEW_LINE INDENT a . sort ( ) NEW_LINE DEDENT"}
{"text":"Index of median of entire data","code":"mid_index = median ( a , 0 , n ) NEW_LINE"}
{"text":"Median of first half","code":"Q1 = a [ median ( a , 0 , mid_index ) ] NEW_LINE"}
{"text":"Median of second half","code":"Q3 = a [ mid_index + median ( a , mid_index + 1 , n ) ] NEW_LINE"}
{"text":"IQR calculation","code":"return ( Q3 - Q1 ) NEW_LINE"}
{"text":"Driver Function","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 1 , 19 , 7 , 6 , 5 , 9 , 12 , 27 , 18 , 2 , 15 ] NEW_LINE n = len ( a ) NEW_LINE print ( IQR ( a , n ) ) NEW_LINE DEDENT"}
{"text":"Function to check if n is palindrome","code":"def isPalindrome ( n ) : NEW_LINE"}
{"text":"Find the appropriate divisor to extract the leading digit","code":"divisor = 1 NEW_LINE while ( n \/ divisor >= 10 ) : NEW_LINE INDENT divisor *= 10 NEW_LINE DEDENT while ( n != 0 ) : NEW_LINE INDENT leading = n \/\/ divisor NEW_LINE trailing = n % 10 NEW_LINE DEDENT"}
{"text":"If first and last digits are not same then return false","code":"if ( leading != trailing ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Removing the leading and trailing digits from the number","code":"n = ( n % divisor ) \/\/ 10 NEW_LINE"}
{"text":"Reducing divisor by a factor of 2 as 2 digits are dropped","code":"divisor = divisor \/\/ 100 NEW_LINE return True NEW_LINE"}
{"text":"Function to find the largest palindromic number","code":"def largestPalindrome ( A , n ) : NEW_LINE"}
{"text":"Sort the array","code":"A . sort ( ) NEW_LINE for i in range ( n - 1 , - 1 , - 1 ) : NEW_LINE"}
{"text":"If number is palindrome","code":"if ( isPalindrome ( A [ i ] ) ) : NEW_LINE INDENT return A [ i ] NEW_LINE DEDENT"}
{"text":"If no palindromic number found","code":"return - 1 NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT A = [ 1 , 232 , 54545 , 999991 ] NEW_LINE n = len ( A ) NEW_LINE DEDENT"}
{"text":"print required answer","code":"print ( largestPalindrome ( A , n ) ) NEW_LINE"}
{"text":"Function to return the sum of all the integers below N which are multiples of either A or B","code":"def findSum ( n , a , b ) : NEW_LINE INDENT sum = 0 NEW_LINE for i in range ( 0 , n , 1 ) : NEW_LINE DEDENT"}
{"text":"If i is a multiple of a or b","code":"if ( i % a == 0 or i % b == 0 ) : NEW_LINE INDENT sum += i NEW_LINE DEDENT return sum NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT n = 10 NEW_LINE a = 3 NEW_LINE b = 5 NEW_LINE print ( findSum ( n , a , b ) ) NEW_LINE DEDENT"}
{"text":"''Driver code","code":"def subtractOne ( x ) : NEW_LINE INDENT return ( ( x << 1 ) + ( ~ x ) ) ; NEW_LINE DEDENT print ( subtractOne ( 13 ) ) ; NEW_LINE"}
{"text":"Calculate nth pell number","code":"def pell ( n ) : NEW_LINE INDENT if ( n <= 2 ) : NEW_LINE INDENT return n NEW_LINE DEDENT return ( 2 * pell ( n - 1 ) + pell ( n - 2 ) ) NEW_LINE DEDENT"}
{"text":"Driver function","code":"n = 4 ; NEW_LINE print ( pell ( n ) ) NEW_LINE"}
{"text":"Returns LCM of arr [ 0. . n - 1 ]","code":"def LCM ( arr , n ) : NEW_LINE"}
{"text":"Find the maximum value in arr [ ]","code":"max_num = 0 ; NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( max_num < arr [ i ] ) : NEW_LINE INDENT max_num = arr [ i ] ; NEW_LINE DEDENT DEDENT"}
{"text":"Initialize result","code":"res = 1 ; NEW_LINE"}
{"text":"Find all factors that are present in two or more array elements . x = 2 ; Current factor .","code":"while ( x <= max_num ) : NEW_LINE"}
{"text":"To store indexes of all array elements that are divisible by x .","code":"indexes = [ ] ; NEW_LINE for j in range ( n ) : NEW_LINE INDENT if ( arr [ j ] % x == 0 ) : NEW_LINE INDENT indexes . append ( j ) ; NEW_LINE DEDENT DEDENT"}
{"text":"If there are 2 or more array elements that are divisible by x .","code":"if ( len ( indexes ) >= 2 ) : NEW_LINE"}
{"text":"Reduce all array elements divisible by x .","code":"for j in range ( len ( indexes ) ) : NEW_LINE INDENT arr [ indexes [ j ] ] = int ( arr [ indexes [ j ] ] \/ x ) ; NEW_LINE DEDENT res = res * x ; NEW_LINE else : NEW_LINE x += 1 ; NEW_LINE"}
{"text":"Then multiply all reduced array elements","code":"for i in range ( n ) : NEW_LINE INDENT res = res * arr [ i ] ; NEW_LINE DEDENT return res ; NEW_LINE"}
{"text":"Driver code","code":"arr = [ 1 , 2 , 3 , 4 , 5 , 10 , 20 , 35 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE print ( LCM ( arr , n ) ) ; NEW_LINE"}
{"text":"python program for the above approach","code":"import math NEW_LINE"}
{"text":"Function to find politeness","code":"def politness ( n ) : NEW_LINE INDENT count = 0 NEW_LINE DEDENT"}
{"text":"sqrt ( 2 * n ) as max length will be when the sum starts from 1 which follows the equation n ^ 2 - n - ( 2 * sum ) = 0","code":"for i in range ( 2 , int ( math . sqrt ( 2 * n ) ) + 1 ) : NEW_LINE INDENT if ( ( 2 * n ) % i != 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT a = 2 * n NEW_LINE a = a \/ i NEW_LINE a = a - ( i - 1 ) NEW_LINE if ( a % 2 != 0 ) : NEW_LINE INDENT continue NEW_LINE DEDENT a \/= 2 NEW_LINE if ( a > 0 ) : NEW_LINE INDENT count = count + 1 NEW_LINE DEDENT DEDENT return count NEW_LINE"}
{"text":"Driver program to test above function","code":"n = 90 NEW_LINE print \" Politness \u2581 of \u2581 \" , n , \" \u2581 = \u2581 \" , politness ( n ) NEW_LINE n = 15 NEW_LINE print \" Politness \u2581 of \u2581 \" , n , \" \u2581 = \u2581 \" , politness ( n ) NEW_LINE"}
{"text":"Python3 program to implement Goldbach 's conjecture","code":"import math NEW_LINE MAX = 10000 ; NEW_LINE"}
{"text":"Array to store all prime less than and equal to 10 ^ 6","code":"primes = [ ] ; NEW_LINE"}
{"text":"Utility function for Sieve of Sundaram","code":"def sieveSundaram ( ) : NEW_LINE"}
{"text":"In general Sieve of Sundaram , produces primes smaller than ( 2 * x + 2 ) for a number given number x . Since we want primes smaller than MAX , we reduce MAX to half . This array is used to separate numbers of the form i + j + 2 * i * j from others where 1 <= i <= j","code":"marked = [ False ] * ( int ( MAX \/ 2 ) + 100 ) ; NEW_LINE"}
{"text":"Main logic of Sundaram . Mark all numbers which do not generate prime number by doing 2 * i + 1","code":"for i in range ( 1 , int ( ( math . sqrt ( MAX ) - 1 ) \/ 2 ) + 1 ) : NEW_LINE INDENT for j in range ( ( i * ( i + 1 ) ) << 1 , int ( MAX \/ 2 ) + 1 , 2 * i + 1 ) : NEW_LINE INDENT marked [ j ] = True ; NEW_LINE DEDENT DEDENT"}
{"text":"Since 2 is a prime number","code":"primes . append ( 2 ) ; NEW_LINE"}
{"text":"Print other primes . Remaining primes are of the form 2 * i + 1 such that marked [ i ] is false .","code":"for i in range ( 1 , int ( MAX \/ 2 ) + 1 ) : NEW_LINE INDENT if ( marked [ i ] == False ) : NEW_LINE INDENT primes . append ( 2 * i + 1 ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Function to perform Goldbach 's conjecture","code":"def findPrimes ( n ) : NEW_LINE"}
{"text":"Return if number is not even or less than 3","code":"if ( n <= 2 or n % 2 != 0 ) : NEW_LINE INDENT print ( \" Invalid \u2581 Input \" ) ; NEW_LINE return ; NEW_LINE DEDENT"}
{"text":"Check only upto half of number","code":"i = 0 ; NEW_LINE while ( primes [ i ] <= n \/\/ 2 ) : NEW_LINE"}
{"text":"find difference by subtracting current prime from n","code":"diff = n - primes [ i ] ; NEW_LINE"}
{"text":"Search if the difference is also a prime number","code":"if diff in primes : NEW_LINE"}
{"text":"Express as a sum of primes","code":"print ( primes [ i ] , \" + \" , diff , \" = \" , n ) ; NEW_LINE return ; NEW_LINE i += 1 ; NEW_LINE"}
{"text":"Finding all prime numbers before limit","code":"sieveSundaram ( ) ; NEW_LINE"}
{"text":"Express number as a sum of two primes","code":"findPrimes ( 4 ) ; NEW_LINE findPrimes ( 38 ) ; NEW_LINE findPrimes ( 100 ) ; NEW_LINE"}
{"text":"Python Program to print kth prime factor","code":"import math NEW_LINE"}
{"text":"A function to generate prime factors of a given number n and return k - th prime factor","code":"def kPrimeFactor ( n , k ) : NEW_LINE"}
{"text":"Find the number of 2 's that divide k","code":"while ( n % 2 == 0 ) : NEW_LINE INDENT k = k - 1 NEW_LINE n = n \/ 2 NEW_LINE if ( k == 0 ) : NEW_LINE INDENT return 2 NEW_LINE DEDENT DEDENT"}
{"text":"n must be odd at this point . So we can skip one element ( Note i = i + 2 )","code":"i = 3 NEW_LINE while i <= math . sqrt ( n ) : NEW_LINE"}
{"text":"While i divides n , store i and divide n","code":"while ( n % i == 0 ) : NEW_LINE INDENT if ( k == 1 ) : NEW_LINE INDENT return i NEW_LINE DEDENT k = k - 1 NEW_LINE n = n \/ i NEW_LINE DEDENT i = i + 2 NEW_LINE"}
{"text":"This condition is to handle the case where n is a prime number greater than 2","code":"if ( n > 2 and k == 1 ) : NEW_LINE INDENT return n NEW_LINE DEDENT return - 1 NEW_LINE"}
{"text":"Driver Program","code":"n = 12 NEW_LINE k = 3 NEW_LINE print ( kPrimeFactor ( n , k ) ) NEW_LINE n = 14 NEW_LINE k = 3 NEW_LINE print ( kPrimeFactor ( n , k ) ) NEW_LINE"}
{"text":"python3 program to find k - th prime factor using Sieve Of Eratosthenes . This program is efficient when we have a range of numbers .","code":"MAX = 10001 NEW_LINE"}
{"text":"Using SieveOfEratosthenes to find smallest prime factor of all the numbers . For example , if MAX is 10 , s [ 2 ] = s [ 4 ] = s [ 6 ] = s [ 10 ] = 2 s [ 3 ] = s [ 9 ] = 3 s [ 5 ] = 5 s [ 7 ] = 7","code":"def sieveOfEratosthenes ( s ) : NEW_LINE"}
{"text":"Create a boolean array \" prime [ 0 . . MAX ] \" and initialize all entries in it as false .","code":"prime = [ False for i in range ( MAX + 1 ) ] NEW_LINE"}
{"text":"Initializing smallest factor equal to 2 for all the even numbers","code":"for i in range ( 2 , MAX + 1 , 2 ) : NEW_LINE INDENT s [ i ] = 2 ; NEW_LINE DEDENT"}
{"text":"For odd numbers less then equal to n","code":"for i in range ( 3 , MAX , 2 ) : NEW_LINE INDENT if ( prime [ i ] == False ) : NEW_LINE DEDENT"}
{"text":"s ( i ) for a prime is the number itself","code":"s [ i ] = i NEW_LINE"}
{"text":"For all multiples of current prime number","code":"for j in range ( i , MAX + 1 , 2 ) : NEW_LINE INDENT if j * j > MAX : NEW_LINE INDENT break NEW_LINE DEDENT if ( prime [ i * j ] == False ) : NEW_LINE INDENT prime [ i * j ] = True NEW_LINE DEDENT DEDENT"}
{"text":"i is the smallest prime factor for number \" i * j \" .","code":"s [ i * j ] = i NEW_LINE"}
{"text":"Function to generate prime factors and return its k - th prime factor . s [ i ] stores least prime factor of i .","code":"def kPrimeFactor ( n , k , s ) : NEW_LINE"}
{"text":"Keep dividing n by least prime factor while either n is not 1 or count of prime factors is not k .","code":"while ( n > 1 ) : NEW_LINE INDENT if ( k == 1 ) : NEW_LINE INDENT return s [ n ] NEW_LINE DEDENT DEDENT"}
{"text":"To keep track of count of prime factors","code":"k -= 1 NEW_LINE"}
{"text":"Divide n to find next prime factor","code":"n \/\/= s [ n ] NEW_LINE return - 1 NEW_LINE"}
{"text":"s [ i ] is going to store prime factor of i .","code":"s = [ - 1 for i in range ( MAX + 1 ) ] NEW_LINE sieveOfEratosthenes ( s ) NEW_LINE n = 12 NEW_LINE k = 3 NEW_LINE print ( kPrimeFactor ( n , k , s ) ) NEW_LINE n = 14 NEW_LINE k = 3 NEW_LINE print ( kPrimeFactor ( n , k , s ) ) NEW_LINE"}
{"text":"Python3 program to find sum of divisors of all the divisors of a natural number .","code":"import math as mt NEW_LINE"}
{"text":"Returns sum of divisors of all the divisors of n","code":"def sumDivisorsOfDivisors ( n ) : NEW_LINE"}
{"text":"Calculating powers of prime factors and storing them in a map mp [ ] .","code":"mp = dict ( ) NEW_LINE for j in range ( 2 , mt . ceil ( mt . sqrt ( n ) ) ) : NEW_LINE INDENT count = 0 NEW_LINE while ( n % j == 0 ) : NEW_LINE INDENT n \/\/= j NEW_LINE count += 1 NEW_LINE DEDENT if ( count ) : NEW_LINE INDENT mp [ j ] = count NEW_LINE DEDENT DEDENT"}
{"text":"If n is a prime number","code":"if ( n != 1 ) : NEW_LINE INDENT mp [ n ] = 1 NEW_LINE DEDENT"}
{"text":"For each prime factor , calculating ( p ^ ( a + 1 ) - 1 ) \/ ( p - 1 ) and adding it to answer .","code":"ans = 1 NEW_LINE for it in mp : NEW_LINE INDENT pw = 1 NEW_LINE summ = 0 NEW_LINE for i in range ( mp [ it ] + 1 , 0 , - 1 ) : NEW_LINE INDENT summ += ( i * pw ) NEW_LINE pw *= it NEW_LINE DEDENT ans *= summ NEW_LINE DEDENT return ans NEW_LINE"}
{"text":"Driver Code","code":"n = 10 NEW_LINE print ( sumDivisorsOfDivisors ( n ) ) NEW_LINE"}
{"text":"This function returns repeating sequence of a fraction . If repeating sequence doesn 't exits, then returns empty string","code":"def fractionToDecimal ( numr , denr ) : NEW_LINE"}
{"text":"Initialize result","code":"res = \" \" NEW_LINE"}
{"text":"Create a map to store already seen remainders . Remainder is used as key and its position in result is stored as value . Note that we need position for cases like 1 \/ 6. In this case , the recurring sequence doesn 't start  from first remainder.","code":"mp = { } NEW_LINE"}
{"text":"Find first remainder","code":"rem = numr % denr NEW_LINE"}
{"text":"Keep finding remainder until either remainder becomes 0 or repeats","code":"while ( ( rem != 0 ) and ( rem not in mp ) ) : NEW_LINE"}
{"text":"Store this remainder","code":"mp [ rem ] = len ( res ) NEW_LINE"}
{"text":"Multiply remainder with 10","code":"rem = rem * 10 NEW_LINE"}
{"text":"Append rem \/ denr to result","code":"res_part = rem \/\/ denr NEW_LINE res += str ( res_part ) NEW_LINE"}
{"text":"Update remainder","code":"rem = rem % denr NEW_LINE if ( rem == 0 ) : NEW_LINE return \" \" NEW_LINE else : NEW_LINE return res [ mp [ rem ] : ] NEW_LINE"}
{"text":"Driver code","code":"numr , denr = 50 , 22 NEW_LINE res = fractionToDecimal ( numr , denr ) NEW_LINE if ( res == \" \" ) : NEW_LINE INDENT print ( \" No \u2581 recurring \u2581 sequence \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" Recurring \u2581 sequence \u2581 is \" , res ) NEW_LINE DEDENT"}
{"text":"Returns 1 if x has 0 , else 0","code":"def has0 ( x ) : NEW_LINE"}
{"text":"Traverse through all digits of x to check if it has 0.","code":"while ( x != 0 ) : NEW_LINE"}
{"text":"If current digit is 0 , return true","code":"if ( x % 10 == 0 ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT x = x \/\/ 10 NEW_LINE return 0 NEW_LINE"}
{"text":"Returns count of numbers from 1 to n with 0 as digit","code":"def getCount ( n ) : NEW_LINE"}
{"text":"Initialize count of numbers having 0 as digit .","code":"count = 0 NEW_LINE"}
{"text":"Traverse through all numbers and for every number check if it has 0.","code":"for i in range ( 1 , n + 1 ) : NEW_LINE INDENT count = count + has0 ( i ) NEW_LINE DEDENT return count NEW_LINE"}
{"text":"Driver program","code":"n = 107 NEW_LINE print ( \" Count \u2581 of \u2581 numbers \u2581 from \u2581 1\" , \" \u2581 to \u2581 \" , n , \" \u2581 is \u2581 \" , getCount ( n ) ) NEW_LINE"}
{"text":"Returns true if square root of n under modulo p exists","code":"def squareRootExists ( n , p ) : NEW_LINE INDENT n = n % p NEW_LINE DEDENT"}
{"text":"One by one check all numbers from 2 to p - 1","code":"for x in range ( 2 , p , 1 ) : NEW_LINE INDENT if ( ( x * x ) % p == n ) : NEW_LINE INDENT return True NEW_LINE DEDENT DEDENT return False NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT p = 7 NEW_LINE n = 2 NEW_LINE if ( squareRootExists ( n , p ) == True ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Returns largest power of p that divides n !","code":"def largestPower ( n , p ) : NEW_LINE"}
{"text":"Initialize result","code":"x = 0 NEW_LINE"}
{"text":"Calculate x = n \/ p + n \/ ( p ^ 2 ) + n \/ ( p ^ 3 ) + ... .","code":"while n : NEW_LINE INDENT n \/= p NEW_LINE x += n NEW_LINE DEDENT return x NEW_LINE"}
{"text":"Driver program","code":"n = 10 ; p = 3 NEW_LINE print ( \" The largest power of % d that divides % d ! is % d \" % ( p , n , largestPower ( n , p ) ) ) NEW_LINE"}
{"text":"Python 3 program to find factorial of given number","code":"def factorial ( n ) : NEW_LINE"}
{"text":"single line to find factorial","code":"return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 1 ) NEW_LINE"}
{"text":"Driver Code","code":"num = 5 NEW_LINE print ( \" Factorial \u2581 of \" , num , \" is \" , factorial ( num ) ) NEW_LINE"}
{"text":"Function to get the bit at the ith position","code":"def getBit ( num , i ) : NEW_LINE"}
{"text":"Return true if the bit is set . Otherwise return false","code":"return ( ( num & ( 1 << i ) ) != 0 ) NEW_LINE"}
{"text":"Function to clear the ith bit of the given number N","code":"def clearBit ( num , i ) : NEW_LINE"}
{"text":"Create the mask for the ith bit unset","code":"mask = ~ ( 1 << i ) NEW_LINE"}
{"text":"Return the update value","code":"return num & mask NEW_LINE"}
{"text":"Function to compute the AND sum for each element of an array","code":"def Bitwise_AND_sum_i ( arr1 , arr2 , M , N ) : NEW_LINE"}
{"text":"Declaring an array of size 32 for storing the count of each bit","code":"frequency = [ 0 ] * 32 NEW_LINE"}
{"text":"Traverse the array arr2 [ ] and store the count of a bit in frequency array","code":"for i in range ( N ) : NEW_LINE"}
{"text":"Current bit position","code":"bit_position = 0 NEW_LINE num = arr1 [ i ] NEW_LINE"}
{"text":"While num is greater than 0","code":"while ( num ) : NEW_LINE"}
{"text":"Checks if ith bit is set or not","code":"if ( num & 1 ) : NEW_LINE"}
{"text":"Increment the count of bit by one","code":"frequency [ bit_position ] += 1 NEW_LINE"}
{"text":"Increment the bit position by one","code":"bit_position += 1 NEW_LINE"}
{"text":"Right shift the num by one","code":"num >>= 1 NEW_LINE"}
{"text":"Traverse in the arr2 [ ]","code":"for i in range ( M ) : NEW_LINE INDENT num = arr2 [ i ] NEW_LINE DEDENT"}
{"text":"Store the ith bit value","code":"value_at_that_bit = 1 NEW_LINE"}
{"text":"Total required sum","code":"bitwise_AND_sum = 0 NEW_LINE"}
{"text":"Traverse in the range [ 0 , 31 ]","code":"for bit_position in range ( 32 ) : NEW_LINE"}
{"text":"Checks if current bit is set","code":"if ( num & 1 ) : NEW_LINE"}
{"text":"Increment the bitwise sum by frequency [ bit_position ] * value_at_that_bit","code":"bitwise_AND_sum += frequency [ bit_position ] * value_at_that_bit NEW_LINE"}
{"text":"Right shift num by one","code":"num >>= 1 NEW_LINE"}
{"text":"Left shift vale_at_that_bit by one","code":"value_at_that_bit <<= 1 NEW_LINE"}
{"text":"Print sum obtained for ith number in arr1 [ ]","code":"print ( bitwise_AND_sum , end = \" \u2581 \" ) NEW_LINE return NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given arr1 [ ]","code":"arr1 = [ 1 , 2 , 3 ] NEW_LINE"}
{"text":"Given arr2","code":"arr2 = [ 1 , 2 , 3 ] NEW_LINE"}
{"text":"Size of arr1 [ ]","code":"N = len ( arr1 ) NEW_LINE"}
{"text":"Size of arr2 [ ]","code":"M = len ( arr2 ) NEW_LINE"}
{"text":"Function Call","code":"Bitwise_AND_sum_i ( arr1 , arr2 , M , N ) NEW_LINE"}
{"text":"Unsets the rightmost set bit of n and returns the result","code":"def FlipBits ( n ) : NEW_LINE INDENT for bit in range ( 32 ) : NEW_LINE DEDENT"}
{"text":"Checking whether bit position is set or not","code":"if ( ( n >> bit ) & 1 ) : NEW_LINE"}
{"text":"If bit position is found set , we flip this bit by xoring given number and number with bit position set","code":"n = n ^ ( 1 << bit ) NEW_LINE break NEW_LINE print ( \" The \u2581 number \u2581 after \u2581 unsetting \u2581 the \" , end = \" \u2581 \" ) NEW_LINE print ( \" rightmost \u2581 set \u2581 bit \" , n ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 12 ; NEW_LINE FlipBits ( N ) NEW_LINE DEDENT"}
{"text":"Function to return the bitwise AND of all the odd integers from the range [ 1 , n ]","code":"def bitwiseAndOdd ( n ) : NEW_LINE"}
{"text":"Initialize result to 1","code":"result = 1 ; NEW_LINE"}
{"text":"Starting from 3 , bitwise AND all the odd integers less than or equal to n","code":"for i in range ( 3 , n + 1 , 2 ) : NEW_LINE INDENT result = ( result & i ) ; NEW_LINE DEDENT return result ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 10 ; NEW_LINE print ( bitwiseAndOdd ( n ) ) ; NEW_LINE DEDENT"}
{"text":"Function to return the bitwise AND of all the odd integers from the range [ 1 , n ]","code":"def bitwiseAndOdd ( n ) : NEW_LINE INDENT return 1 NEW_LINE DEDENT"}
{"text":"Driver code","code":"n = 10 NEW_LINE print ( bitwiseAndOdd ( n ) ) NEW_LINE"}
{"text":"function to reverse bits of a number","code":"def reverseBits ( n ) : NEW_LINE INDENT rev = 0 NEW_LINE DEDENT"}
{"text":"traversing bits of ' n ' from the right","code":"while ( n > 0 ) : NEW_LINE"}
{"text":"bitwise left shift ' rev ' by 1","code":"rev = rev << 1 NEW_LINE"}
{"text":"if current bit is '1","code":"' NEW_LINE INDENT if ( n & 1 == 1 ) : NEW_LINE INDENT rev = rev ^ 1 NEW_LINE DEDENT DEDENT"}
{"text":"bitwise right shift ' n ' by 1","code":"n = n >> 1 NEW_LINE"}
{"text":"required number","code":"return rev NEW_LINE"}
{"text":"Driver code","code":"n = 11 NEW_LINE print ( reverseBits ( n ) ) NEW_LINE"}
{"text":"Return the count of number of ways to split array into two groups such that each group has equal XOR value .","code":"def countgroup ( a , n ) : NEW_LINE INDENT xs = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT xs = xs ^ a [ i ] NEW_LINE DEDENT DEDENT"}
{"text":"We can split only if XOR is 0. Since XOR of all is 0 , we can consider all subsets as one group .","code":"if xs == 0 : NEW_LINE INDENT return ( 1 << ( n - 1 ) ) - 1 NEW_LINE DEDENT return 0 NEW_LINE"}
{"text":"Driver Program","code":"a = [ 1 , 2 , 3 ] NEW_LINE n = len ( a ) NEW_LINE print ( countgroup ( a , n ) ) NEW_LINE"}
{"text":"Function to extract k bits from p position and returns the extracted value as integer","code":"def bitExtracted ( number , k , p ) : NEW_LINE INDENT return ( ( ( 1 << k ) - 1 ) & ( number >> ( p - 1 ) ) ) ; NEW_LINE DEDENT"}
{"text":"number is from where ' k ' bits are extracted from p position","code":"number = 171 NEW_LINE k = 5 NEW_LINE p = 2 NEW_LINE print \" The \u2581 extracted \u2581 number \u2581 is \u2581 \" , bitExtracted ( number , k , p ) NEW_LINE"}
{"text":"Python 3 program to find maximum number by swapping extreme bits .","code":"def findMax ( num ) : NEW_LINE INDENT num_copy = num NEW_LINE DEDENT"}
{"text":"Traverse bits from both extremes","code":"j = 4 * 8 - 1 ; NEW_LINE i = 0 NEW_LINE while ( i < j ) : NEW_LINE"}
{"text":"Obtaining i - th and j - th bits","code":"m = ( num_copy >> i ) & 1 NEW_LINE n = ( num_copy >> j ) & 1 NEW_LINE"}
{"text":"Swapping the bits if lesser significant is greater than higher significant bit and accordingly modifying the number","code":"if ( m > n ) : NEW_LINE INDENT x = ( 1 << i 1 << j ) NEW_LINE num = num ^ x NEW_LINE DEDENT i += 1 NEW_LINE j -= 1 NEW_LINE return num NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT num = 4 NEW_LINE print ( findMax ( num ) ) NEW_LINE DEDENT"}
{"text":"function to check whether ' n ' is a multiple of 4 or not","code":"def isAMultipleOf4 ( n ) : NEW_LINE"}
{"text":"if true , then ' n ' is a multiple of 4","code":"if ( ( n & 3 ) == 0 ) : NEW_LINE INDENT return \" Yes \" NEW_LINE DEDENT"}
{"text":"else ' n ' is not a multiple of 4","code":"return \" No \" NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT n = 16 NEW_LINE print ( isAMultipleOf4 ( n ) ) NEW_LINE DEDENT"}
{"text":"Simple solution to calculate square without using * and pow ( )","code":"def square ( n ) : NEW_LINE"}
{"text":"handle negative input","code":"if ( n < 0 ) : NEW_LINE INDENT n = - n NEW_LINE DEDENT"}
{"text":"Initialize result","code":"res = n NEW_LINE"}
{"text":"Add n to res n - 1 times","code":"for i in range ( 1 , n ) : NEW_LINE INDENT res += n NEW_LINE DEDENT return res NEW_LINE"}
{"text":"Driver Code","code":"for n in range ( 1 , 6 ) : NEW_LINE INDENT print ( \" n \u2581 = \" , n , end = \" , \u2581 \" ) NEW_LINE print ( \" n ^ 2 \u2581 = \" , square ( n ) ) NEW_LINE DEDENT"}
{"text":"Python 3 implementation of the above approach","code":"def PointInKSquares ( n , a , k ) : NEW_LINE INDENT a . sort ( ) NEW_LINE return a [ n - k ] NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT k = 2 NEW_LINE a = [ 1 , 2 , 3 , 4 ] NEW_LINE n = len ( a ) NEW_LINE x = PointInKSquares ( n , a , k ) NEW_LINE print ( \" ( \" , x , \" , \" , x , \" ) \" ) NEW_LINE DEDENT"}
{"text":"function that calculates the answer","code":"def answer ( n ) : NEW_LINE"}
{"text":"dp [ j ] stores count of i digit stepping numbers ending with digit j .","code":"dp = [ 0 ] * 10 NEW_LINE"}
{"text":"To store resu1lt of length i - 1 before updating dp [ j ] for length i .","code":"prev = [ 0 ] * 10 NEW_LINE"}
{"text":"if n is 1 then answer will be 10.","code":"if ( n == 1 ) : NEW_LINE INDENT return 10 NEW_LINE DEDENT"}
{"text":"Initialize values for count of digits equal to 1.","code":"for j in range ( 0 , 10 ) : NEW_LINE INDENT dp [ j ] = 1 NEW_LINE DEDENT"}
{"text":"Compute values for count of digits more than 1.","code":"for i in range ( 2 , n + 1 ) : NEW_LINE INDENT for j in range ( 0 , 10 ) : NEW_LINE INDENT prev [ j ] = dp [ j ] NEW_LINE DEDENT for j in range ( 0 , 10 ) : NEW_LINE DEDENT"}
{"text":"If ending digit is 0","code":"if ( j == 0 ) : NEW_LINE INDENT dp [ j ] = prev [ j + 1 ] NEW_LINE DEDENT"}
{"text":"If ending digit is 9","code":"elif ( j == 9 ) : NEW_LINE INDENT dp [ j ] = prev [ j - 1 ] NEW_LINE DEDENT"}
{"text":"For other digits .","code":"else : NEW_LINE INDENT dp [ j ] = prev [ j - 1 ] + prev [ j + 1 ] NEW_LINE DEDENT"}
{"text":"stores the final answer","code":"sum = 0 NEW_LINE for j in range ( 1 , 10 ) : NEW_LINE INDENT sum = sum + dp [ j ] NEW_LINE DEDENT return sum NEW_LINE"}
{"text":"Driver Code","code":"n = 2 NEW_LINE print ( answer ( n ) ) NEW_LINE"}
{"text":"Python3 implementation of the approach","code":"MAX = 100000 ; NEW_LINE"}
{"text":"To store first N Catalan numbers","code":"catalan = [ 0 ] * MAX ; NEW_LINE"}
{"text":"Function to find first n Catalan numbers","code":"def catalanDP ( n ) : NEW_LINE"}
{"text":"Initialize first two values in table","code":"catalan [ 0 ] = catalan [ 1 ] = 1 ; NEW_LINE"}
{"text":"Fill entries in catalan [ ] using recursive formula","code":"for i in range ( 2 , n + 1 ) : NEW_LINE INDENT catalan [ i ] = 0 ; NEW_LINE for j in range ( i ) : NEW_LINE INDENT catalan [ i ] += ( catalan [ j ] * catalan [ i - j - 1 ] ) ; NEW_LINE DEDENT DEDENT"}
{"text":"Function to return the minimum changes required","code":"def CatalanSequence ( arr , n ) : NEW_LINE"}
{"text":"Find first n Catalan Numbers","code":"catalanDP ( n ) ; NEW_LINE s = set ( ) ; NEW_LINE"}
{"text":"a and b are first two Catalan Sequence numbers","code":"a = 1 ; b = 1 ; NEW_LINE"}
{"text":"Insert first n catalan elements to set","code":"s . add ( a ) ; NEW_LINE if ( n >= 2 ) : NEW_LINE INDENT s . add ( b ) ; NEW_LINE DEDENT for i in range ( 2 , n ) : NEW_LINE INDENT s . add ( catalan [ i ] ) ; NEW_LINE DEDENT temp = set ( ) NEW_LINE for i in range ( n ) : NEW_LINE"}
{"text":"If catalan element is present in the array then remove it from set","code":"if arr [ i ] in s : NEW_LINE INDENT temp . add ( arr [ i ] ) NEW_LINE DEDENT s = s - temp ; NEW_LINE"}
{"text":"Return the remaining number of elements in the set","code":"return len ( s ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 1 , 2 , 5 , 41 ] ; NEW_LINE n = len ( arr ) NEW_LINE print ( CatalanSequence ( arr , n ) ) ; NEW_LINE DEDENT"}
{"text":"Function to print the sum of all composite numbers in the array","code":"def odd_indices ( arr ) : NEW_LINE INDENT sum = 0 NEW_LINE DEDENT"}
{"text":"Iterate for odd indices in the array","code":"for k in range ( 0 , len ( arr ) , 2 ) : NEW_LINE INDENT check = composite ( arr [ k ] ) NEW_LINE DEDENT"}
{"text":"Check if the number is composite then add it to sum","code":"sum += arr [ k ] if check == 1 else 0 NEW_LINE"}
{"text":"return the sum","code":"print ( sum ) NEW_LINE"}
{"text":"Function to check for composite numbers","code":"def composite ( n ) : NEW_LINE INDENT flag = 0 NEW_LINE c = 0 NEW_LINE DEDENT"}
{"text":"Check if the factors are greater than 2","code":"for j in range ( 1 , n + 1 ) : NEW_LINE INDENT if ( n % j == 0 ) : NEW_LINE INDENT c += 1 NEW_LINE DEDENT DEDENT"}
{"text":"Check if the number is composite or not","code":"if ( c >= 3 ) : NEW_LINE INDENT flag = 1 NEW_LINE DEDENT return flag NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 13 , 5 , 8 , 16 , 25 ] NEW_LINE odd_indices ( arr ) NEW_LINE DEDENT"}
{"text":"Python 3 program to find number of points lie inside or on the circumference of circle for Q queries .","code":"import math NEW_LINE"}
{"text":"Computing the x ^ 2 + y ^ 2 for each given points and sorting them .","code":"def preprocess ( p , x , y , n ) : NEW_LINE INDENT for i in range ( n ) : NEW_LINE INDENT p [ i ] = x [ i ] * x [ i ] + y [ i ] * y [ i ] NEW_LINE DEDENT p . sort ( ) NEW_LINE DEDENT"}
{"text":"Return count of points lie inside or on circumference of circle using binary search on p [ 0. . n - 1 ]","code":"def query ( p , n , rad ) : NEW_LINE INDENT start = 0 NEW_LINE end = n - 1 NEW_LINE while ( ( end - start ) > 1 ) : NEW_LINE INDENT mid = ( start + end ) \/\/ 2 NEW_LINE tp = math . sqrt ( p [ mid ] ) NEW_LINE if ( tp > ( rad * 1.0 ) ) : NEW_LINE INDENT end = mid - 1 NEW_LINE DEDENT else : NEW_LINE INDENT start = mid NEW_LINE DEDENT DEDENT tp1 = math . sqrt ( p [ start ] ) NEW_LINE tp2 = math . sqrt ( p [ end ] ) NEW_LINE if ( tp1 > ( rad * 1.0 ) ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT elif ( tp2 <= ( rad * 1.0 ) ) : NEW_LINE INDENT return end + 1 NEW_LINE DEDENT else : NEW_LINE INDENT return start + 1 NEW_LINE DEDENT DEDENT"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT x = [ 1 , 2 , 3 , - 1 , 4 ] NEW_LINE y = [ 1 , 2 , 3 , - 1 , 4 ] NEW_LINE n = len ( x ) NEW_LINE DEDENT"}
{"text":"Compute distances of all points and keep the distances sorted so that query can work in O ( logn ) using Binary Search .","code":"p = [ 0 ] * n NEW_LINE preprocess ( p , x , y , n ) NEW_LINE"}
{"text":"Print number of points in a circle of radius 3.","code":"print ( query ( p , n , 3 ) ) NEW_LINE"}
{"text":"Print number of points in a circle of radius 32.","code":"print ( query ( p , n , 32 ) ) NEW_LINE"}
{"text":"python program for above approach","code":"def count ( N ) : NEW_LINE"}
{"text":"No of odd indices in N - digit number","code":"odd_indices = N \/\/ 2 NEW_LINE"}
{"text":"No of even indices in N - digit number","code":"even_indices = N \/\/ 2 + N % 2 NEW_LINE"}
{"text":"No of ways of arranging prime number digits in odd indices","code":"arrange_odd = 4 ** odd_indices NEW_LINE"}
{"text":"No of ways of arranging odd number digits in even indices","code":"arrange_even = 5 ** even_indices NEW_LINE"}
{"text":"returning the total number of ways","code":"return arrange_odd * arrange_even NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 4 NEW_LINE DEDENT"}
{"text":"calling the function","code":"print ( count ( N ) ) NEW_LINE"}
{"text":"Function to check if the array is spirally sorted or not","code":"def isSpiralSorted ( arr , n ) : NEW_LINE"}
{"text":"Stores start index of the array","code":"start = 0 ; NEW_LINE"}
{"text":"Stores end index of an array","code":"end = n - 1 ; NEW_LINE while ( start < end ) : NEW_LINE"}
{"text":"If arr [ start ] greater than arr [ end ]","code":"if ( arr [ start ] > arr [ end ] ) : NEW_LINE INDENT return False ; NEW_LINE DEDENT"}
{"text":"Update start","code":"start += 1 ; NEW_LINE"}
{"text":"If arr [ end ] greater than arr [ start ]","code":"if ( arr [ end ] > arr [ start ] ) : NEW_LINE INDENT return False ; NEW_LINE DEDENT"}
{"text":"Update end","code":"end -= 1 ; NEW_LINE return True ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 1 , 10 , 14 , 20 , 18 , 12 , 5 ] ; NEW_LINE N = len ( arr ) ; NEW_LINE DEDENT"}
{"text":"Function Call","code":"if ( isSpiralSorted ( arr , N ) ) : NEW_LINE INDENT print ( \" YES \" ) ; NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) ; NEW_LINE DEDENT"}
{"text":"Function to print all strings that can be typed using keys of a single row in a QWERTY Keyboard","code":"def findWordsSameRow ( arr ) : NEW_LINE"}
{"text":"Stores row number of all possible character of the strings","code":"mp = { ' q ' : 1 , ' w ' : 1 , ' e ' : 1 , ' r ' : 1 , ' t ' : 1 , ' y ' : 1 , ' u ' : 1 , ' o ' : 1 , ' p ' : 1 , ' i ' : 1 , ' a ' : 2 , ' s ' : 2 , ' d ' : 2 , ' f ' : 2 , ' g ' : 2 , ' h ' : 2 , ' j ' : 2 , ' k ' : 2 , ' l ' : 2 , ' z ' : 3 , ' x ' : 3 , ' c ' : 3 , ' v ' : 3 , ' b ' : 3 , ' n ' : 3 , ' m ' : 3 } NEW_LINE"}
{"text":"Traverse the array","code":"for word in arr : NEW_LINE"}
{"text":"If current string is not an empty string","code":"if ( len ( word ) != 0 ) : NEW_LINE"}
{"text":"Sets true \/ false if a string can be typed using keys of a single row or not","code":"flag = True NEW_LINE"}
{"text":"Stores row number of the first character of current string","code":"rowNum = mp [ word [ 0 ] . lower ( ) ] NEW_LINE"}
{"text":"Stores length of word","code":"M = len ( word ) NEW_LINE"}
{"text":"Traverse current string","code":"for i in range ( 1 , M ) : NEW_LINE"}
{"text":"If current character can 't be  typed using keys of rowNum only","code":"if ( mp [ word [ i ] . lower ( ) ] != rowNum ) : NEW_LINE"}
{"text":"Update flag","code":"flag = False NEW_LINE break NEW_LINE"}
{"text":"If current string can be typed using keys from rowNum only","code":"if ( flag ) : NEW_LINE"}
{"text":"Print the string","code":"print ( word , end = ' \u2581 ' ) NEW_LINE"}
{"text":"Driver Code","code":"words = [ \" Yeti \" , \" Had \" , \" GFG \" , \" comment \" ] NEW_LINE findWordsSameRow ( words ) NEW_LINE"}
{"text":"Python3 program of the above approach","code":"maxN = 2002 NEW_LINE"}
{"text":"Function to find the count of the subsequence of given type","code":"def countSubsequece ( a , n ) : NEW_LINE"}
{"text":"Stores the count of quadruples","code":"answer = 0 NEW_LINE"}
{"text":"Generate all possible combinations of quadruples","code":"for i in range ( n ) : NEW_LINE INDENT for j in range ( i + 1 , n ) : NEW_LINE INDENT for k in range ( j + 1 , n ) : NEW_LINE INDENT for l in range ( k + 1 , n ) : NEW_LINE DEDENT DEDENT DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT a = [ 1 , 2 , 3 , 2 , 1 , 3 , 2 ] NEW_LINE print ( countSubsequece ( a , 7 ) ) NEW_LINE DEDENT"}
{"text":"Python3 program for the above approach","code":"import sys NEW_LINE"}
{"text":"Function to find the character repeats with minimum distance","code":"def minDistChar ( s ) : NEW_LINE INDENT n = len ( s ) NEW_LINE DEDENT"}
{"text":"Stores the first and last index","code":"first = [ ] NEW_LINE last = [ ] NEW_LINE"}
{"text":"Intialize with - 1","code":"for i in range ( 26 ) : NEW_LINE INDENT first . append ( - 1 ) NEW_LINE last . append ( - 1 ) NEW_LINE DEDENT"}
{"text":"Get the values of last and first occurence","code":"for i in range ( n ) : NEW_LINE"}
{"text":"Update the first index","code":"if ( first [ ord ( s [ i ] ) - ord ( ' a ' ) ] == - 1 ) : NEW_LINE INDENT first [ ord ( s [ i ] ) - ord ( ' a ' ) ] = i NEW_LINE DEDENT"}
{"text":"Update the last index","code":"last [ ord ( s [ i ] ) - ord ( ' a ' ) ] = i NEW_LINE"}
{"text":"Intialize the min","code":"min = sys . maxsize NEW_LINE ans = '1' NEW_LINE"}
{"text":"Get the minimum","code":"for i in range ( 26 ) : NEW_LINE"}
{"text":"Values must not be same","code":"if ( last [ i ] == first [ i ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"Update the minimum distance","code":"if ( min > last [ i ] - first [ i ] ) : NEW_LINE INDENT min = last [ i ] - first [ i ] NEW_LINE ans = i + ord ( ' a ' ) NEW_LINE DEDENT"}
{"text":"return ans","code":"return chr ( ans ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT str = \" geeksforgeeks \" NEW_LINE DEDENT"}
{"text":"Function call","code":"print ( minDistChar ( str ) ) NEW_LINE"}
{"text":"Python 3 implementation of the approach","code":"n = 3 NEW_LINE"}
{"text":"Function to return the minimum steps required to reach the end of the matrix","code":"def minSteps ( arr ) : NEW_LINE"}
{"text":"Array to determine whether a cell has been visited before","code":"v = [ [ 0 for i in range ( n ) ] for j in range ( n ) ] NEW_LINE"}
{"text":"Queue for bfs","code":"q = [ [ 0 , 0 ] ] NEW_LINE"}
{"text":"To store the depth of search","code":"depth = 0 NEW_LINE"}
{"text":"BFS algorithm","code":"while ( len ( q ) != 0 ) : NEW_LINE"}
{"text":"Current queue size","code":"x = len ( q ) NEW_LINE while ( x > 0 ) : NEW_LINE"}
{"text":"Top - most element of queue","code":"y = q [ 0 ] NEW_LINE"}
{"text":"To store index of cell for simplicity","code":"i = y [ 0 ] NEW_LINE j = y [ 1 ] NEW_LINE q . remove ( q [ 0 ] ) NEW_LINE x -= 1 NEW_LINE"}
{"text":"Base case","code":"if ( v [ i ] [ j ] ) : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"If we reach ( n - 1 , n - 1 )","code":"if ( i == n - 1 and j == n - 1 ) : NEW_LINE INDENT return depth NEW_LINE DEDENT"}
{"text":"Marking the cell visited","code":"v [ i ] [ j ] = 1 NEW_LINE"}
{"text":"Pushing the adjacent cells in the queue that can be visited from the current cell","code":"if ( i + arr [ i ] [ j ] < n ) : NEW_LINE INDENT q . append ( [ i + arr [ i ] [ j ] , j ] ) NEW_LINE DEDENT if ( j + arr [ i ] [ j ] < n ) : NEW_LINE INDENT q . append ( [ i , j + arr [ i ] [ j ] ] ) NEW_LINE DEDENT depth += 1 NEW_LINE return - 1 NEW_LINE"}
{"text":"Driver code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] , [ 1 , 1 , 1 ] ] NEW_LINE print ( minSteps ( arr ) ) NEW_LINE DEDENT"}
{"text":"A Python 3 program to find largest gap between two elements in an array .","code":"import sys NEW_LINE"}
{"text":"function to solve the given problem","code":"def solve ( a , n ) : NEW_LINE INDENT max1 = - sys . maxsize - 1 NEW_LINE for i in range ( 0 , n , 1 ) : NEW_LINE INDENT for j in range ( 0 , n , 1 ) : NEW_LINE INDENT if ( abs ( a [ i ] - a [ j ] ) > max1 ) : NEW_LINE INDENT max1 = abs ( a [ i ] - a [ j ] ) NEW_LINE DEDENT DEDENT DEDENT return max1 NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ - 1 , 2 , 3 , - 4 , - 10 , 22 ] NEW_LINE size = len ( arr ) NEW_LINE print ( \" Largest \u2581 gap \u2581 is \u2581 : \" , solve ( arr , size ) ) NEW_LINE DEDENT"}
{"text":"function to solve the given problem","code":"def solve ( a , n ) : NEW_LINE INDENT min1 = a [ 0 ] NEW_LINE max1 = a [ 0 ] NEW_LINE DEDENT"}
{"text":"finding maximum and minimum of an array","code":"for i in range ( n ) : NEW_LINE INDENT if ( a [ i ] > max1 ) : NEW_LINE INDENT max1 = a [ i ] NEW_LINE DEDENT if ( a [ i ] < min1 ) : NEW_LINE INDENT min1 = a [ i ] NEW_LINE DEDENT DEDENT return abs ( min1 - max1 ) NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ - 1 , 2 , 3 , 4 , - 10 ] NEW_LINE size = len ( arr ) NEW_LINE print ( \" Largest \u2581 gap \u2581 is \u2581 : \u2581 \" , solve ( arr , size ) ) NEW_LINE DEDENT"}
{"text":"Function for replacing the string","code":"def replaceOriginal ( s , n ) : NEW_LINE"}
{"text":"initialize a string of length n","code":"r = [ ' \u2581 ' ] * n NEW_LINE"}
{"text":"Traverse through all characters of string","code":"for i in range ( n ) : NEW_LINE"}
{"text":"assign the value to string r from last index of string s","code":"r [ i ] = s [ n - 1 - i ] NEW_LINE"}
{"text":"if s [ i ] is a consonant then print r [ i ]","code":"if ( s [ i ] != ' a ' and s [ i ] != ' e ' and s [ i ] != ' i ' and s [ i ] != ' o ' and s [ i ] != ' u ' ) : NEW_LINE INDENT print ( r [ i ] , end = \" \" ) NEW_LINE DEDENT print ( ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT s = \" geeksforgeeks \" NEW_LINE n = len ( s ) NEW_LINE replaceOriginal ( s , n ) NEW_LINE DEDENT"}
{"text":"Function to find if given strings are same or not","code":"def sameStrings ( str1 , str2 ) : NEW_LINE INDENT N = len ( str1 ) NEW_LINE M = len ( str2 ) NEW_LINE DEDENT"}
{"text":"Base Condition","code":"if ( N != M ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Stores frequency of characters of the str1 and str2","code":"a , b = [ 0 ] * 256 , [ 0 ] * 256 NEW_LINE"}
{"text":"Traverse strings str1 & str2 and store frequencies in a [ ] and b [ ]","code":"for i in range ( N ) : NEW_LINE INDENT a [ ord ( str1 [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE b [ ord ( str2 [ i ] ) - ord ( ' a ' ) ] += 1 NEW_LINE DEDENT"}
{"text":"Check if both strings have same characters or not","code":"i = 0 NEW_LINE while ( i < 256 ) : NEW_LINE INDENT if ( ( a [ i ] == 0 and b [ i ] == 0 ) or ( a [ i ] != 0 and b [ i ] != 0 ) ) : NEW_LINE INDENT i += 1 NEW_LINE DEDENT DEDENT"}
{"text":"If a character is present in one and is not in another string , return false","code":"else : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"Sort the array a [ ] and b [ ]","code":"a = sorted ( a ) NEW_LINE b = sorted ( b ) NEW_LINE"}
{"text":"Check arrays a and b contain the same frequency or not","code":"for i in range ( 256 ) : NEW_LINE"}
{"text":"If the frequencies are not the same after sorting","code":"if ( a [ i ] != b [ i ] ) : NEW_LINE INDENT return False NEW_LINE DEDENT"}
{"text":"At this point , str1 can be converted to str2","code":"return True NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT S1 , S2 = \" cabbba \" , \" abbccc \" NEW_LINE if ( sameStrings ( S1 , S2 ) ) : NEW_LINE INDENT print ( \" YES \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" NO \" ) NEW_LINE DEDENT DEDENT"}
{"text":"Function to find the minimum number operations","code":"def solution ( A , B , C ) : NEW_LINE INDENT arr = [ 0 ] * 3 NEW_LINE DEDENT"}
{"text":"Insert the three numbers in array","code":"arr [ 0 ] = A NEW_LINE arr [ 1 ] = B NEW_LINE arr [ 2 ] = C NEW_LINE"}
{"text":"Sort the array","code":"arr = sorted ( arr ) NEW_LINE"}
{"text":"Case 2","code":"if ( arr [ 2 ] < arr [ 0 ] + arr [ 1 ] ) : NEW_LINE INDENT return ( ( arr [ 0 ] + arr [ 1 ] + arr [ 2 ] ) \/\/ 2 ) NEW_LINE DEDENT"}
{"text":"Case 1","code":"else : NEW_LINE INDENT return ( arr [ 0 ] + arr [ 1 ] ) NEW_LINE DEDENT"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given A , B , C","code":"A = 8 NEW_LINE B = 1 NEW_LINE C = 5 NEW_LINE"}
{"text":"Function Call","code":"print ( solution ( A , B , C ) ) NEW_LINE"}
{"text":"Function to return the index of the key in arr [ l . . h ] if the key is present otherwise return - 1","code":"def search ( arr , l , h , key ) : NEW_LINE INDENT if ( l > h ) : NEW_LINE INDENT return - 1 ; NEW_LINE DEDENT mid = ( l + h ) \/\/ 2 ; NEW_LINE if ( arr [ mid ] == key ) : NEW_LINE INDENT return mid ; NEW_LINE DEDENT DEDENT"}
{"text":"The tricky case , just update left and right","code":"if ( ( arr [ l ] == arr [ mid ] ) and ( arr [ h ] == arr [ mid ] ) ) : NEW_LINE INDENT l += 1 ; NEW_LINE h -= 1 ; NEW_LINE return search ( arr , l , h , key ) NEW_LINE DEDENT"}
{"text":"If arr [ l ... mid ] is sorted","code":"if ( arr [ l ] <= arr [ mid ] ) : NEW_LINE"}
{"text":"As this subarray is sorted , we can quickly check if key lies in any of the halves","code":"if ( key >= arr [ l ] and key <= arr [ mid ] ) : NEW_LINE INDENT return search ( arr , l , mid - 1 , key ) ; NEW_LINE DEDENT"}
{"text":"If key does not lie in the first half subarray then divide the other half into two subarrays such that we can quickly check if key lies in the other half","code":"return search ( arr , mid + 1 , h , key ) ; NEW_LINE"}
{"text":"If arr [ l . . mid ] first subarray is not sorted then arr [ mid ... h ] must be sorted subarray","code":"if ( key >= arr [ mid ] and key <= arr [ h ] ) : NEW_LINE INDENT return search ( arr , mid + 1 , h , key ) ; NEW_LINE DEDENT return search ( arr , l , mid - 1 , key ) ; NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT arr = [ 3 , 3 , 1 , 2 , 3 , 3 ] ; NEW_LINE n = len ( arr ) ; NEW_LINE key = 3 ; NEW_LINE print ( search ( arr , 0 , n - 1 , key ) ) ; NEW_LINE DEDENT"}
{"text":"Function to return the sorted string","code":"def getSortedString ( s , n ) : NEW_LINE"}
{"text":"Vectors to store the lowercase and uppercase characters","code":"v1 = [ ] NEW_LINE v2 = [ ] NEW_LINE for i in range ( n ) : NEW_LINE INDENT if ( s [ i ] >= ' a ' and s [ i ] <= ' z ' ) : NEW_LINE INDENT v1 . append ( s [ i ] ) NEW_LINE DEDENT if ( s [ i ] >= ' A ' and s [ i ] <= ' Z ' ) : NEW_LINE INDENT v2 . append ( s [ i ] ) NEW_LINE DEDENT DEDENT"}
{"text":"Sort both the vectors","code":"v1 = sorted ( v1 ) NEW_LINE v2 = sorted ( v2 ) NEW_LINE i = 0 NEW_LINE j = 0 NEW_LINE for k in range ( n ) : NEW_LINE"}
{"text":"If current character is lowercase then pick the lowercase character from the sorted list","code":"if ( s [ k ] >= ' a ' and s [ k ] <= ' z ' ) : NEW_LINE INDENT s [ k ] = v1 [ i ] NEW_LINE i += 1 NEW_LINE DEDENT"}
{"text":"Else pick the uppercase character","code":"elif ( s [ k ] >= ' A ' and s [ k ] <= ' Z ' ) : NEW_LINE INDENT s [ k ] = v2 [ j ] NEW_LINE j += 1 NEW_LINE DEDENT"}
{"text":"Return the sorted string","code":"return \" \" . join ( s ) NEW_LINE"}
{"text":"Driver code","code":"s = \" gEeksfOrgEEkS \" NEW_LINE ss = [ i for i in s ] NEW_LINE n = len ( ss ) NEW_LINE print ( getSortedString ( ss , n ) ) NEW_LINE"}
{"text":"Function to check if the condition holds","code":"def check ( s ) : NEW_LINE"}
{"text":"Get the length of the string","code":"l = len ( s ) NEW_LINE"}
{"text":"sort the given string","code":"s = ' ' . join ( sorted ( s ) ) NEW_LINE"}
{"text":"Iterate for every index and check for the condition","code":"for i in range ( 1 , l ) : NEW_LINE"}
{"text":"If are not consecutive","code":"if ord ( s [ i ] ) - ord ( s [ i - 1 ] ) != 1 : NEW_LINE INDENT return False NEW_LINE DEDENT return True NEW_LINE"}
{"text":"Driver code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE"}
{"text":"1 st example","code":"string = \" dcef \" NEW_LINE if check ( string ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"2 nd example","code":"string = \" xyza \" NEW_LINE if check ( string ) : NEW_LINE INDENT print ( \" Yes \" ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"function to find minimum elements needed .","code":"def minElements ( arr , n ) : NEW_LINE"}
{"text":"calculating HALF of array sum","code":"halfSum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT halfSum = halfSum + arr [ i ] NEW_LINE DEDENT halfSum = int ( halfSum \/ 2 ) NEW_LINE"}
{"text":"sort the array in descending order .","code":"arr . sort ( reverse = True ) NEW_LINE res = 0 NEW_LINE curr_sum = 0 NEW_LINE for i in range ( n ) : NEW_LINE INDENT curr_sum += arr [ i ] NEW_LINE res += 1 NEW_LINE DEDENT"}
{"text":"current sum greater than sum","code":"if curr_sum > halfSum : NEW_LINE INDENT return res NEW_LINE DEDENT return res NEW_LINE"}
{"text":"driver code","code":"arr = [ 3 , 1 , 7 , 1 ] NEW_LINE n = len ( arr ) NEW_LINE print ( minElements ( arr , n ) ) NEW_LINE"}
{"text":"Function to check if its possible to make all array elements equal or not","code":"def arrayElementEqual ( arr , N ) : NEW_LINE"}
{"text":"Stores the sum of the array","code":"sum = 0 NEW_LINE"}
{"text":"Traverse the array","code":"for i in range ( N ) : NEW_LINE INDENT sum += arr [ i ] NEW_LINE DEDENT"}
{"text":"If sum is divisible by N","code":"if ( sum % N == 0 ) : NEW_LINE INDENT print ( ' Yes ' ) NEW_LINE DEDENT"}
{"text":"Otherwise , not possible to make all array elements equal","code":"else : NEW_LINE INDENT print ( \" No \" ) NEW_LINE DEDENT"}
{"text":"Given array","code":"arr = [ 1 , 5 , 6 , 4 ] NEW_LINE"}
{"text":"Size of the array","code":"N = len ( arr ) NEW_LINE arrayElementEqual ( arr , N ) NEW_LINE"}
{"text":"Function to find the maximum sum of GCD ( arr [ i ] , i ) by rearranging the array","code":"def findMaxValByRearrArr ( arr , N ) : NEW_LINE"}
{"text":"Stores maximum sum of GCD ( arr [ i ] , i ) by rearranging the array elements","code":"res = 0 ; NEW_LINE"}
{"text":"Update res","code":"res = ( N * ( N + 1 ) ) \/\/ 2 ; NEW_LINE return res ; NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT arr = [ 3 , 2 , 1 ] ; NEW_LINE N = len ( arr ) ; NEW_LINE print ( findMaxValByRearrArr ( arr , N ) ) ; NEW_LINE DEDENT"}
{"text":"Function to find the maximum sided polygon that can be inscribed","code":"def MaximumSides ( n ) : NEW_LINE"}
{"text":"Base Case","code":"if ( n < 4 ) : NEW_LINE INDENT return - 1 NEW_LINE DEDENT"}
{"text":"Return n \/ 2 if n is even Otherwise , return - 1","code":"if n % 2 == 0 : NEW_LINE INDENT return n \/\/ 2 NEW_LINE DEDENT return - 1 NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given N","code":"N = 8 NEW_LINE"}
{"text":"Function Call","code":"print ( MaximumSides ( N ) ) NEW_LINE"}
{"text":"Function to find the mean of pair product array of arr [ ]","code":"def pairProductMean ( arr , N ) : NEW_LINE"}
{"text":"Initializing suffix sum array","code":"suffixSumArray = [ 0 ] * N NEW_LINE suffixSumArray [ N - 1 ] = arr [ N - 1 ] NEW_LINE"}
{"text":"Build suffix sum array","code":"for i in range ( N - 2 , - 1 , - 1 ) : NEW_LINE INDENT suffixSumArray [ i ] = suffixSumArray [ i + 1 ] + arr [ i ] NEW_LINE DEDENT"}
{"text":"Size of pairProductArray","code":"length = ( N * ( N - 1 ) ) \/\/ 2 NEW_LINE"}
{"text":"Stores sum of pairProductArray","code":"res = 0 NEW_LINE for i in range ( N - 1 ) : NEW_LINE INDENT res += arr [ i ] * suffixSumArray [ i + 1 ] NEW_LINE DEDENT"}
{"text":"Store the mean","code":"mean = 0 NEW_LINE"}
{"text":"Find mean of pairProductArray","code":"if ( length != 0 ) : NEW_LINE INDENT mean = res \/ length NEW_LINE DEDENT else : NEW_LINE INDENT mean = 0 NEW_LINE DEDENT"}
{"text":"Return the resultant mean","code":"return mean NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given array arr [ ]","code":"arr = [ 1 , 2 , 4 , 8 ] NEW_LINE N = len ( arr ) NEW_LINE"}
{"text":"Function Call","code":"print ( round ( pairProductMean ( arr , N ) , 2 ) ) NEW_LINE"}
{"text":"Function to return the value of Binomial Coefficient C ( n , k )","code":"def ncr ( n , k ) : NEW_LINE INDENT res = 1 NEW_LINE DEDENT"}
{"text":"Since C ( n , k ) = C ( n , n - k )","code":"if ( k > n - k ) : NEW_LINE INDENT k = n - k NEW_LINE DEDENT"}
{"text":"Calculate the value of [ n * ( n - 1 ) * -- - * ( n - k + 1 ) ] \/ [ k * ( k - 1 ) * -- -- * 1 ]","code":"for i in range ( k ) : NEW_LINE INDENT res *= ( n - i ) NEW_LINE res \/\/= ( i + 1 ) NEW_LINE DEDENT return res NEW_LINE"}
{"text":"Function to find the minimum count of paths from top left to bottom right by placing K 1 s in the matrix","code":"def countPath ( N , M , K ) : NEW_LINE INDENT answer = 0 NEW_LINE if ( K >= 2 ) : NEW_LINE INDENT answer = 0 NEW_LINE DEDENT elif ( K == 0 ) : NEW_LINE INDENT answer = ncr ( N + M - 2 , N - 1 ) NEW_LINE DEDENT else : NEW_LINE DEDENT"}
{"text":"Count of ways without 1 s","code":"answer = ncr ( N + M - 2 , N - 1 ) NEW_LINE"}
{"text":"Count of paths from starting poto mid point","code":"X = ( N - 1 ) \/\/ 2 + ( M - 1 ) \/\/ 2 NEW_LINE Y = ( N - 1 ) \/\/ 2 NEW_LINE midCount = ncr ( X , Y ) NEW_LINE"}
{"text":"Count of paths from mid poto end point","code":"X = ( ( N - 1 ) - ( N - 1 ) \/\/ 2 ) + NEW_LINE INDENT ( ( M - 1 ) - ( M - 1 ) \/\/ 2 ) NEW_LINE DEDENT Y = ( ( N - 1 ) - ( N - 1 ) \/\/ 2 ) NEW_LINE midCount *= ncr ( X , Y ) NEW_LINE answer -= midCount NEW_LINE return answer NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE INDENT N = 3 NEW_LINE M = 3 NEW_LINE K = 1 NEW_LINE print ( countPath ( N , M , K ) ) NEW_LINE DEDENT"}
{"text":"Function to find maximum count of operations","code":"def find_max ( v , n ) : NEW_LINE"}
{"text":"Initialize count by 0","code":"count = 0 NEW_LINE if ( n >= 2 ) : NEW_LINE INDENT count = 2 NEW_LINE DEDENT else : NEW_LINE INDENT count = 1 NEW_LINE DEDENT"}
{"text":"Iterate over remaining pairs","code":"for i in range ( 1 , n - 1 ) : NEW_LINE"}
{"text":"Check if first operation is applicable","code":"if ( v [ i - 1 ] [ 0 ] > ( v [ i ] [ 0 ] + v [ i ] [ 1 ] ) ) : NEW_LINE INDENT count += 1 NEW_LINE DEDENT"}
{"text":"Check if 2 nd operation is applicable","code":"elif ( v [ i + 1 ] [ 0 ] > ( v [ i ] [ 0 ] + v [ i ] [ 1 ] ) ) : NEW_LINE INDENT count += 1 NEW_LINE v [ i ] [ 0 ] = v [ i ] [ 0 ] + v [ i ] [ 1 ] NEW_LINE DEDENT"}
{"text":"Otherwise","code":"else : NEW_LINE INDENT continue NEW_LINE DEDENT"}
{"text":"Return the count of operations","code":"return count NEW_LINE"}
{"text":"Driver Code","code":"n = 3 NEW_LINE v = [ ] NEW_LINE v . append ( [ 10 , 20 ] ) NEW_LINE v . append ( [ 15 , 10 ] ) NEW_LINE v . append ( [ 20 , 16 ] ) NEW_LINE print ( find_max ( v , n ) ) NEW_LINE"}
{"text":"Function to find the number of substrings that can be formed using given characters","code":"def numberofsubstrings ( str , k , charArray ) : NEW_LINE INDENT N = len ( str ) NEW_LINE DEDENT"}
{"text":"Boolean array for storing the available characters","code":"available = [ 0 ] * 26 NEW_LINE"}
{"text":"Mark indices of all available characters as 1","code":"for i in range ( 0 , k ) : NEW_LINE INDENT available [ ord ( charArray [ i ] ) - ord ( ' a ' ) ] = 1 NEW_LINE DEDENT"}
{"text":"Initialize lastPos as - 1","code":"lastPos = - 1 NEW_LINE"}
{"text":"Initialize ans with the total no of possible substrings","code":"ans = ( N * ( N + 1 ) ) \/ 2 NEW_LINE"}
{"text":"Traverse the string from left to right","code":"for i in range ( 0 , N ) : NEW_LINE"}
{"text":"If the current character is not present in B","code":"if ( available [ ord ( str [ i ] ) - ord ( ' a ' ) ] == 0 ) : NEW_LINE"}
{"text":"Subtract the total possible substrings","code":"ans -= ( ( i - lastPos ) * ( N - i ) ) NEW_LINE"}
{"text":"Update the value of lastpos to current index","code":"lastPos = i NEW_LINE"}
{"text":"Print the final answer","code":"print ( int ( ans ) ) NEW_LINE"}
{"text":"Given String","code":"str = \" abcb \" NEW_LINE k = 2 NEW_LINE"}
{"text":"Given character array","code":"charArray = [ ' a ' , ' b ' ] NEW_LINE"}
{"text":"Function call","code":"numberofsubstrings ( str , k , charArray ) NEW_LINE"}
{"text":"Function to return minimum cost to reach destination","code":"def minCost ( N , P , Q ) : NEW_LINE"}
{"text":"Initialize cost to 0","code":"cost = 0 NEW_LINE"}
{"text":"going backwards until we reach initial position","code":"while ( N > 0 ) : NEW_LINE INDENT if ( N & 1 ) : NEW_LINE INDENT cost += P NEW_LINE N -= 1 NEW_LINE DEDENT else : NEW_LINE INDENT temp = N \/\/ 2 ; NEW_LINE DEDENT DEDENT"}
{"text":"if 2 * X jump is better than X + 1","code":"if ( temp * P > Q ) : NEW_LINE INDENT cost += Q NEW_LINE DEDENT"}
{"text":"if X + 1 jump is better","code":"else : NEW_LINE INDENT cost += P * temp NEW_LINE DEDENT N \/\/= 2 NEW_LINE return cost NEW_LINE"}
{"text":"Driver program","code":"N = 9 NEW_LINE P = 5 NEW_LINE Q = 1 NEW_LINE print ( minCost ( N , P , Q ) ) NEW_LINE"}
{"text":"Function to find number of ways to reach from node 1 to 1 again , after moving exactly K edges","code":"def numberOfWays ( n , k ) : NEW_LINE"}
{"text":"Initialize a dp [ ] array , where dp [ i ] stores number of ways to reach at a i node","code":"dp = [ 0 for i in range ( 1000 ) ] NEW_LINE"}
{"text":"Base Case","code":"dp [ 0 ] = 1 NEW_LINE"}
{"text":"Iterate for the number of edges moved","code":"for i in range ( 1 , k + 1 , 1 ) : NEW_LINE"}
{"text":"Sum will store number of ways to reach all the nodes","code":"numWays = 0 NEW_LINE"}
{"text":"Iterate for every possible state for the current step","code":"for j in range ( n ) : NEW_LINE INDENT numWays += dp [ j ] NEW_LINE DEDENT"}
{"text":"Update the value of the dp array after travelling each edge","code":"for j in range ( n ) : NEW_LINE INDENT dp [ j ] = numWays - dp [ j ] NEW_LINE DEDENT"}
{"text":"Print dp [ 0 ] as the answer","code":"print ( dp [ 0 ] ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given Input","code":"N = 5 NEW_LINE K = 3 NEW_LINE"}
{"text":"Function Call","code":"numberOfWays ( N , K ) NEW_LINE"}
{"text":"Function to calculate minimum cost of buying least X chocolates","code":"def findMinCost ( arr , X , n , i = 0 ) : NEW_LINE"}
{"text":"Base Case","code":"if ( X <= 0 ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( i >= n ) : NEW_LINE INDENT return 10 ** 8 NEW_LINE DEDENT"}
{"text":"Include the i - th box","code":"inc = findMinCost ( arr , X - arr [ i ] [ 0 ] , n , i + 1 ) NEW_LINE if ( inc != 10 ** 8 ) : NEW_LINE INDENT inc += arr [ i ] [ 1 ] NEW_LINE DEDENT"}
{"text":"Exclude the i - th box","code":"exc = findMinCost ( arr , X , n , i + 1 ) NEW_LINE"}
{"text":"Return the minimum of the above two cases","code":"return min ( inc , exc ) NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == ' _ _ main _ _ ' : NEW_LINE"}
{"text":"Given array and value of X","code":"arr = [ [ 4 , 3 ] , [ 3 , 2 ] , [ 2 , 4 ] , [ 1 , 3 ] , [ 4 , 2 ] ] NEW_LINE X = 7 NEW_LINE"}
{"text":"Store the size of the array","code":"n = len ( arr ) NEW_LINE ans = findMinCost ( arr , X , n ) NEW_LINE"}
{"text":"Print answer","code":"if ( ans != 10 ** 8 ) : NEW_LINE INDENT print ( ans ) NEW_LINE DEDENT else : NEW_LINE INDENT print ( - 1 ) NEW_LINE DEDENT"}
{"text":"Function to calculate the probability for the given sum to be equal to sum in N throws of dice","code":"def find ( N , sum ) : NEW_LINE"}
{"text":"Base cases","code":"if ( sum > 6 * N or sum < N ) : NEW_LINE INDENT return 0 NEW_LINE DEDENT if ( N == 1 ) : NEW_LINE INDENT if ( sum >= 1 and sum <= 6 ) : NEW_LINE INDENT return 1.0 \/ 6 NEW_LINE DEDENT else : NEW_LINE INDENT return 0 NEW_LINE DEDENT DEDENT s = 0 NEW_LINE for i in range ( 1 , 7 ) : NEW_LINE INDENT s = s + find ( N - 1 , sum - i ) \/ 6 NEW_LINE DEDENT return s NEW_LINE"}
{"text":"Driver Code","code":"if __name__ == \" _ _ main _ _ \" : NEW_LINE INDENT N = 4 NEW_LINE a = 13 NEW_LINE b = 17 NEW_LINE probability = 0.0 NEW_LINE for sum in range ( a , b + 1 ) : NEW_LINE INDENT probability = probability + find ( N , sum ) NEW_LINE DEDENT DEDENT"}
{"text":"Print the answer","code":"print ( round ( probability , 6 ) ) NEW_LINE"}
{"text":"Function to find the minimum number to steps to reduce N to 0","code":"def minDays ( n ) : NEW_LINE"}
{"text":"Base case","code":"if n < 1 : NEW_LINE INDENT return n NEW_LINE DEDENT"}
{"text":"Recursive Call to count the minimum steps needed","code":"cnt = 1 + min ( n % 2 + minDays ( n \/\/ 2 ) , n % 3 + minDays ( n \/\/ 3 ) ) NEW_LINE"}
{"text":"Return the answer","code":"return cnt NEW_LINE"}
{"text":"Given Number N","code":"N = 6 NEW_LINE"}
{"text":"Function Call","code":"print ( str ( minDays ( N ) ) ) NEW_LINE"}
